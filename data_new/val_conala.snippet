sorted ( l , key = lambda x : ( - int ( x [ 1 ] ) , x [ 0 ] ) ) #NEWLINE#
[ int ( x ) for x in str ( num ) ] #NEWLINE#
c . decode ( 'unicode_escape' ) #NEWLINE#
parser . add_argument ( '-t' , dest = 'table' , help = '' , nargs = '+' ) #NEWLINE#
datetime . datetime . strptime ( s , '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
np . array ( x . _data ) . reshape ( x . size [ : : - 1 ] ) . T #NEWLINE#
soup . get_text ( ) . replace ( '\n' , '\n\n' ) #NEWLINE#
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)' , '\\1' , s ) #NEWLINE#
mylist . sort ( key = lambda d : ( d [ 'weight' ] , d [ 'factor' ] ) ) #NEWLINE#
itertools . combinations #NEWLINE#
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , 'D' : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , 'D' : 5 } ] #NEWLINE#
zip ( * [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
print ( [ l [ i : i + n ] for i in range ( len ( l ) ) for n in range ( 1 , len ( l ) - i + 1 ) ] ) #NEWLINE#
Comment . objects . all ( ) . order_by ( '-hotness' ) #NEWLINE#
urllib . parse . unquote ( 'Foo%E2%84%A2%20Bar' ) . decode ( 'utf-8' ) #NEWLINE#
max ( min ( my_value , max_value ) , min_value ) #NEWLINE#
pd . get_dummies ( df ) #NEWLINE#
re . sub ( '[^A-Z]' , '' , s ) #NEWLINE#
re . compile ( '^(.+)\\n((?:\\n.+)+)' , re . MULTILINE ) #NEWLINE#
"""{0:,.2f}""" . format ( 24322.34 ) #NEWLINE#
[ d [ 'key' ] for d in l ] #NEWLINE#
print ( max ( d , key = lambda x : ( d [ x ] [ 'salary' ] , d [ x ] [ 'bonus' ] ) ) ) #NEWLINE#
[ x [ 1 ] for x in elements ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
"""""" . join ( '{}{}' . format ( key , val ) for key , val in list ( adict . items ( ) ) ) #NEWLINE#
struct . unpack ( 'f' , struct . pack ( 'f' , 0.00582811585976 ) ) #NEWLINE#
df . loc [ df . index . isin ( [ 'one' , 'two' ] ) ] #NEWLINE#
ax1 . plot ( data [ 'x' ] , data [ 'y' ] , color = 'r' , label = 'the#SPACE#data' ) #NEWLINE#
list . sort ( key = lambda item : item [ 'date' ] , reverse = True ) #NEWLINE#
[ i for i , e in enumerate ( a ) if e != 0 ] #NEWLINE#
sorted ( the_list , key = lambda x : int ( x . split ( '_' ) [ 1 ] ) ) #NEWLINE#
max ( a_list , key = operator . itemgetter ( 1 ) ) #NEWLINE#
Base . metadata . tables [ 'ticket_daily_history' ] . create ( bind = engine ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , format = '%d%b%Y' ) #NEWLINE#
OrderedDict ( [ ( 'c' , 3 ) , ( 'e' , 5 ) , ( 'a' , '1' ) , ( 'b' , '2' ) ] ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#tbl' ) #NEWLINE#
driver . find_element_by_xpath ( "//li/label/input[contains(..,'polishpottery')]" ) #NEWLINE#
Task . objects . exclude ( prerequisites__status__in = [ 'A' , 'P' , 'F' ] ) #NEWLINE#
[ item for item in a if item [ 0 ] == 1 ] #NEWLINE#
driver . find_element_by_css_selector ( '.button.c_button.s_button' ) . click ( ) #NEWLINE#
[ a [ i ] for i in ( 1 , 2 , 5 ) ] #NEWLINE#
sum ( len ( v ) for v in food_colors . values ( ) ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
re . compile ( '[^a-zA-Z0-9-]' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
output = subprocess . Popen ( [ 'mycmd' , 'myarg' ] , stdout = PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
[ [ [ 4 , 4 , 4 ] , [ 4 , 4 , 4 ] , [ 4 , 4 , 4 ] ] , [ [ 4 ] , [ 4 ] , [ 4 ] ] ] #NEWLINE#
any ( d [ 'site' ] == 'Superuser' for d in data ) #NEWLINE#
re . sub ( '[^\\x00-\\x7F]+' , '#SPACE#' , text ) #NEWLINE#
driver . find_element_by_xpath ( "//p[@id,#SPACE#'one']/following-sibling::p" ) #NEWLINE#
my_series . apply ( your_function , args = ( 2 , 3 , 4 ) , extra_kw = 1 ) #NEWLINE#
datetime . datetime . today ( ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
sorted ( list ( mydict . items ( ) ) , key = lambda a : map ( int , a [ 0 ] . split ( '.' ) ) ) #NEWLINE#
datetime . datetime . strptime ( '2013-1-25' , '%Y-%m-%d' ) . strftime ( '%m/%d/%y' ) #NEWLINE#
datetime . datetime . strptime ( '2013-1-25' , '%Y-%m-%d' ) . strftime ( '%-m/%d/%y' ) #NEWLINE#
sorted ( list ( myDict . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] ) #NEWLINE#
driver . find_elements_by_xpath ( "//*[contains(text(),#SPACE#'My#SPACE#Button')]" ) #NEWLINE#
driver . find_element_by_css_selector ( ".test_button4[value='Update']" ) . click ( ) #NEWLINE#
sorted ( list ( tag_weight . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , reverse = True ) #NEWLINE#
yourdata . sort ( key = lambda e : e [ 'key' ] [ 'subkey' ] , reverse = True ) #NEWLINE#
app . config . from_object ( 'config.ProductionConfig' ) #NEWLINE#
print ( df . loc [ df [ 'B' ] . isin ( [ 'one' , 'three' ] ) ] ) #NEWLINE#
max ( flatlist , key = lambda x : x [ 1 ] ) #NEWLINE#
[ int ( x ) for x in '0,1,2' . split ( ',' ) ] #NEWLINE#
df . sort ( axis = 1 , ascending = False ) #NEWLINE#
subprocess . call ( [ 'test.sh' , str ( domid ) ] ) #NEWLINE#
[ i for i , j in zip ( a , b ) if i == j ] #NEWLINE#
Point = namedtuple ( 'whatsmypurpose' , [ 'x' , 'y' ] , verbose = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
sorted ( list_of_tuples , key = lambda tup : tup [ 1 ] ) #NEWLINE#
os . system ( "awk#SPACE#'{print#SPACE#$10,#SPACE#$11}'#SPACE#test.txt#SPACE#>#SPACE#test2.txt" ) #NEWLINE#
r = int ( '' . join ( map ( str , x ) ) ) #NEWLINE#
datetime . datetime . now ( ) - datetime . timedelta ( days = 1 ) #NEWLINE#
os . system ( 'start#SPACE#excel.exe#SPACE#<path/to/file>' ) #NEWLINE#
[ '0' , '182' , '283' , '388' , '470' , '579' , '757' , '' ] #NEWLINE#
array ( [ [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 ] , [ 0 , 0 , 1 , 1 ] , [ 0 , 0 , 1 , 1 ] ] ) #NEWLINE#
"""Name:#SPACE#{0[person.name]}""" . format ( { 'person.name' : 'Joe' } ) #NEWLINE#
json . dumps ( { 'apple' : 'cat' , 'banana' : 'dog' , 'pear' : 'fish' } ) #NEWLINE#
df [ 'a' ] = df [ 'a' ] . apply ( lambda x : x + 1 ) #NEWLINE#
{ k : v for d in L for k , v in list ( d . items ( ) ) } #NEWLINE#
urllib . parse . urlencode ( [ ( 'a' , '1' ) , ( 'b' , '2' ) , ( 'b' , '3' ) ] ) #NEWLINE#
a . sort ( key = lambda x : b . index ( x [ 0 ] ) ) #NEWLINE#
li1 . sort ( key = lambda x : not x . startswith ( 'b.' ) ) #NEWLINE#
[ int ( s ) for s in re . findall ( '\\b\\d+\\b' , "he33llo#SPACE#42#SPACE#I'm#SPACE#a#SPACE#32#SPACE#string#SPACE#30" ) ] #NEWLINE#
int ( '#SPACE##SPACE#23#SPACE##SPACE#' ) #NEWLINE#
datetime . datetime . strptime ( 'January#SPACE#11,#SPACE#2010' , '%B#SPACE#%d,#SPACE#%Y' ) . strftime ( '%a' ) #NEWLINE#
dict ( ( k , 'updated' ) for k , v in d . items ( ) if v is None ) #NEWLINE#
map ( int , re . findall ( '\\d+' , s ) ) #NEWLINE#
numpy . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
dict ( ( k , 'updated' ) for k , v in d . items ( ) if v != 'None' ) #NEWLINE#
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ) #NEWLINE#
instance . __class__ . __name__ #NEWLINE#
br . form . add_file ( open ( filename ) , 'text/plain' , filename ) #NEWLINE#
list ( itertools . combinations ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) ) #NEWLINE#
urllib . parse . quote_plus ( 'a#SPACE#b' ) #NEWLINE#
df [ 'col1' ] = df [ 'col1' ] . apply ( lambda i : '' . join ( i ) ) #NEWLINE#
[ int ( s [ i : i + 3 ] , 2 ) for i in range ( 0 , len ( s ) , 3 ) ] #NEWLINE#
indices = [ i for i , x in enumerate ( my_list ) if x == 'whatever' ] #NEWLINE#
l = [ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'e' ] ] #NEWLINE#
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , 'D' : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , 'D' : 5 } ] #NEWLINE#
"""2.7.0_bf4fda703454""" . split ( '_' ) #NEWLINE#
sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
driver . find_element_by_xpath ( 'xpath' ) . click ( ) #NEWLINE#
{ 'Date' : [ '123' , 'abc' ] , 'Foo' : [ '456' , 'def' ] , 'Bar' : [ '789' , 'ghi' ] } #NEWLINE#
"""""" . join ( [ 'line#SPACE#1\n' , 'line#SPACE#2\n' ] ) #NEWLINE#
[ ( 'foo' , 'bar' ) , ( 'key' , 'val' ) ] #NEWLINE#
f . close ( ) #NEWLINE#
df . sort_values ( by = 'Date' ) #NEWLINE#
df . plot ( x = 'col_name_1' , y = 'col_name_2' , style = 'o' ) #NEWLINE#
datetime . datetime . now ( ) . date ( ) #NEWLINE#
soup . find_all ( 'td' , attrs = { 'bgcolor' : '#FFFFCC' } ) #NEWLINE#
print ( '#SPACE#' . join ( set ( s ) ) ) #NEWLINE#
numpy . array ( [ [ 0 , 1 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ) #NEWLINE#
[ d [ 'value' ] for d in l ] #NEWLINE#
self . writer . writerow ( [ str ( s ) . encode ( 'utf-8' ) for s in row ] ) #NEWLINE#
'%s#SPACE#%s' % ( 'foo' , 'bar' ) #NEWLINE#
re . compile ( '[A-Za-z_][A-Za-z0-9_]*' ) #NEWLINE#
[ i [ 0 ] for i in a ] #NEWLINE#
[ x for x in my_list if not x . startswith ( '#' ) ] #NEWLINE#
sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] [ 0 ] ) #NEWLINE#
[ list ( g ) for _ , g in itertools . groupby ( test , lambda x : x . partition ( '_' ) [ 0 ] ) ] #NEWLINE#
sorted ( a , key = foo ) #NEWLINE#
pd . concat ( [ GOOG , AAPL ] , keys = [ 'GOOG' , 'AAPL' ] , axis = 1 ) #NEWLINE#
newstr = oldstr . replace ( 'M' , '' ) #NEWLINE#
re . sub ( '[^a-zA-Z0-9-_*.]' , '' , my_string ) #NEWLINE#
scipy . sparse . csr_matrix ( [ column [ 'rating' ] , column [ 'user' ] , column [ 'movie' ] ] ) #NEWLINE#
re . sub ( '[^0-9a-zA-Z]+' , '*' , 'h^&ell`.,|o#SPACE#w]{+orld' ) #NEWLINE#
ax . plot_trisurf ( XS , YS , ZS ) #NEWLINE#
map ( dict , zip ( * [ [ ( k , v ) for v in value ] for k , value in list ( d . items ( ) ) ] ) ) #NEWLINE#
re . compile ( '[^a-zA-Z0-9-]+' ) #NEWLINE#
"""""" . join ( l ) #NEWLINE#
df [ 'Date' ] = df [ 'Date' ] . apply ( lambda x : int ( str ( x ) [ - 4 : ] ) ) #NEWLINE#
datetime . datetime . strptime ( '03:55' , '%H:%M' ) . time ( ) #NEWLINE#
datetime . datetime . fromtimestamp ( ms / 1000.0 ) #NEWLINE#
i = int ( input ( '>>#SPACE#' ) ) #NEWLINE#
[ s [ i : i + 3 ] for i in range ( 0 , len ( s ) , 3 ) ] #NEWLINE#
db . Doc . update ( { '_id' : b [ '_id' ] } , { '$set' : { 'geolocCountry' : myGeolocCountry } } ) #NEWLINE#
os . system ( 'ulimit#SPACE#-s#SPACE#unlimited;#SPACE#some_executable' ) #NEWLINE#
np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) . tolist ( ) #NEWLINE#
SomeModel . objects . filter ( id = id ) . delete ( ) #NEWLINE#
print ( random . choice ( words ) ) #NEWLINE#
plt . savefig ( 'pic' , dpi = 300 ) #NEWLINE#
df . fillna ( method = 'ffill' , inplace = True ) #NEWLINE#
re . findall ( '(?=([A-Z]SQP|S[A-Z]QP|SS[A-Z]P|SSQ[A-Z]))' , s ) #NEWLINE#
a . sort ( key = lambda x_y : b . index ( x_y [ 0 ] ) ) #NEWLINE#
zipped . sort ( key = lambda t : t [ 1 ] ) #NEWLINE#
sorted ( list ( mydict . keys ( ) ) , key = lambda a : map ( int , a . split ( '.' ) ) ) #NEWLINE#
np . where ( a == 1 ) #NEWLINE#
f . close ( ) #NEWLINE#
table . sort ( key = attrgetter ( 'points' ) ) #NEWLINE#
list ( itertools . product ( * a ) ) #NEWLINE#
df . groupby ( [ 'stock' , 'same1' , 'same2' ] ) [ 'positions' ] . sum ( ) . reset_index ( ) #NEWLINE#
{ { request . args . get ( 'a' ) } } #NEWLINE#
[ input [ i : i + n ] for i in range ( 0 , len ( input ) , n ) ] #NEWLINE#
"""""" . join ( set ( 'aaabcabccd' ) ) #NEWLINE#
subprocess . Popen ( [ 'bash' , '-c' , '.#SPACE#foo.sh;#SPACE#go' ] ) #NEWLINE#
zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
"""""" . join ( str ( x ) for x in range ( 1 , N + 1 ) ) #NEWLINE#
"""{0.month}/{0.day}/{0.year}""" . format ( my_date ) #NEWLINE#
print ( round ( 1123.456789 , - 1 ) ) #NEWLINE#
[ ( 'id1,#SPACE#pd1' , '5.0,#SPACE#7.5,#SPACE#8.1' ) , ( 'id2,#SPACE#pd2' , '6.0' ) ] #NEWLINE#
re . search ( '\\bis\\b' , your_string ) #NEWLINE#
sorted ( enumerate ( a ) , key = lambda x : x [ 1 ] ) #NEWLINE#
re . findall ( '\\S+' , str1 ) #NEWLINE#
array ( [ [ True , True ] , [ False , False ] , [ False , False ] , [ True , True ] ] , dtype = bool ) #NEWLINE#
random . sample ( list ( range ( 100 ) ) , 10 ) #NEWLINE#
re . findall ( '\\$(.*?)\\$' , '$sin#SPACE#(x)$#SPACE#is#SPACE#an#SPACE#function#SPACE#of#SPACE#x' ) #NEWLINE#
max ( abs ( x - y ) for x , y in zip ( values [ 1 : ] , values [ : - 1 ] ) ) #NEWLINE#
A = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 0 ] , [ 0 ] , [ 0 ] ] ] #NEWLINE#
re . split ( '\\.\\s' , re . sub ( '\\.\\s*$' , '' , text ) ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
json . loads ( open ( 'sample.json' ) . read ( ) . decode ( 'utf-8-sig' ) ) #NEWLINE#
request . params . getall ( 'c' ) #NEWLINE#
sorted ( nums , key = lambda x : tuple ( reversed ( list ( map ( int , x . split ( '/' ) ) ) ) ) ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
[ dict ( ( k , v ) for k , v in d . items ( ) if k != 'mykey1' ) for d in mylist ] #NEWLINE#
df . to_xml ( 'foo.xml' ) #NEWLINE#
df . unstack ( ) #NEWLINE#
driver . find_element_by_css_selector ( "a[href^='javascript']" ) . click ( ) #NEWLINE#
os . path . expanduser ( '~user' ) #NEWLINE#
my_function . __name__ #NEWLINE#
[ dict ( y ) for y in set ( tuple ( x . items ( ) ) for x in d ) ] #NEWLINE#
soup . findAll ( 'a' , attrs = { 'href' : re . compile ( '^http://' ) } ) #NEWLINE#
[ item . strip ( ) for item in my_string . split ( ',' ) ] #NEWLINE#
map ( int , '42#SPACE#0' . split ( ) ) #NEWLINE#
sum ( d . values ( ) ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#VALUES#SPACE#(%s,#SPACE#%s,#SPACE#%s)' , ( var1 , var2 , var3 ) ) #NEWLINE#
decimal . Decimal ( random . randrange ( 10000 ) ) / 100 #NEWLINE#
root . destroy ( ) #NEWLINE#
[ d [ 'value' ] for d in l if 'value' in d ] #NEWLINE#
any ( d [ 'name' ] == 'Test' for d in label ) #NEWLINE#
df . set_index ( 'ID' ) . T . to_dict ( 'list' ) #NEWLINE#
driver . find_element_by_css_selector ( '.button#SPACE#.c_button#SPACE#.s_button' ) . click ( ) #NEWLINE#
pandas . concat ( [ df1 , df2 ] , axis = 1 ) #NEWLINE#
[ 'p' , 'y' , 't' , 'h' , 'o' , 'n' , '#SPACE#' , 'r' , 'o' , 'c' , 'k' , 's' ] #NEWLINE#
os . system ( "zsh#SPACE#-c#SPACE#'echo#SPACE#$0'" ) #NEWLINE#
int ( s . split ( '.' ) [ 0 ] ) #NEWLINE#
a . astype ( [ ( 'x' , '<f8' ) , ( 'y' , '<f8' ) , ( 'z' , '<f8' ) ] ) . view ( '<f8' ) #NEWLINE#
[ ( x , y ) for x , y in a if x == 1 ] #NEWLINE#
re . sub ( '\\*+' , '*' , text ) #NEWLINE#
open ( 'file.txt' , 'w' ) . close ( ) #NEWLINE#
logging . info ( 'some#SPACE#info' ) #NEWLINE#
re . split ( '\\W+' , 'Words,#SPACE#words,#SPACE#words.' ) #NEWLINE#
sorted ( iter ( dict_ . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
df1 . groupby ( [ 'key' , 'year' ] ) . size ( ) . reset_index ( ) #NEWLINE#
ord ( 'a' ) #NEWLINE#
root . geometry ( '500x500' ) #NEWLINE#
datetime . datetime . strptime ( '2007-03-04T21:08:12' , '%Y-%m-%dT%H:%M:%S' ) #NEWLINE#
len ( li ) - 1 - li [ : : - 1 ] . index ( 'a' ) #NEWLINE#
my_date . strftime ( '%-m/%-d/%y' ) #NEWLINE#
[ { k : v for k , v in d . items ( ) if k != 'mykey1' } for d in mylist ] #NEWLINE#
df . sort ( 'm' ) #NEWLINE#
print ( '{},#SPACE#you#SPACE#won!' . format ( name ) ) #NEWLINE#
df . groupby ( 'ID' ) . cumcount ( ) + 1 #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#%s' % filename , file . write ) #NEWLINE#
xs . sort ( key = lambda s : len ( s ) ) #NEWLINE#
len ( set ( mylist ) ) == 1 #NEWLINE#
plt . show ( ) #NEWLINE#
hex ( ord ( 'a' ) ) #NEWLINE#
new_img . save ( 'tweeter_green.png' ) #NEWLINE#
ctypes . windll . user32 . MessageBoxW ( 0 , 'Error' , 'Error' , 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '<[^<]+?>' , '' , text ) #NEWLINE#
__init__ . py #NEWLINE#
[ len ( x ) for x in s . split ( ) ] #NEWLINE#
[ ( i // 2 ) for i in range ( 10 ) ] #NEWLINE#
re . findall ( '-(?!aa|bb)([^-]+)' , string ) #NEWLINE#
re . findall ( '-(?!aa-|bb-)([^-]+)' , string ) #NEWLINE#
Content . objects . all ( ) . order_by ( '?' ) [ : 100 ] #NEWLINE#
bin ( ord ( 'P' ) ) #NEWLINE#
df . replace ( '-' , 'NaN' ) #NEWLINE#
sorted ( iter ( result . items ( ) ) , key = lambda key_value : key_value [ 0 ] ) #NEWLINE#
json . dumps ( json . dumps ( { 'color' : 'color' , 'message' : 'message' } ) ) #NEWLINE#
[ [ 'string#SPACE#1' , 'atest#SPACE#string:' ] , [ 'string#SPACE#1' , 'test#SPACE#2:#SPACE#anothertest#SPACE#string' ] ] #NEWLINE#
[ i for i , v in enumerate ( L ) if v [ 0 ] == 53 ] #NEWLINE#
cv2 . imwrite ( 'warped.png' , warped ) #NEWLINE#
"""\\u003Cp\\u003E""" . decode ( 'unicode-escape' ) #NEWLINE#
ax . scartter ( XS , YS , ZS ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#`index`(url)#SPACE#VALUES(%s)' , ( url , ) ) #NEWLINE#
kdll . CreateSymbolicLinkW ( 'D:\\testdirLink' , 'D:\\testdir' , 1 ) #NEWLINE#
df . sort ( df . columns , axis = 1 , ascending = False ) #NEWLINE#
linregress ( df [ 'col_X' ] , df [ 'col_Y' ] ) #NEWLINE#
[ ( k , v ) for k , v in a . items ( ) ] #NEWLINE#
os . system ( 'script2.py#SPACE#1' ) #NEWLINE#
sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y' ) ) #NEWLINE#
list ( range ( 9 ) ) #NEWLINE#
L . sort ( key = operator . itemgetter ( 1 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( k , v ) for k , v in parent_dict . items ( ) if 2 < k < 4 ) #NEWLINE#
os . path . dirname ( os . path . abspath ( existGDBPath ) ) #NEWLINE#
imtag = re . match ( '<img.*?>' , line ) . group ( 0 ) #NEWLINE#
{ 'cmd' : [ 'python' , '$file' , 'arg1' , 'arg2' ] } #NEWLINE#
parser . ParseFile ( open ( 'sample.xml' , 'rb' ) ) #NEWLINE#
re . findall ( '\\[[^\\]]*\\]|"[^"]*"|\\S+' , s ) #NEWLINE#
os . path . basename ( os . path . normpath ( '/folderA/folderB/folderC/folderD/' ) ) #NEWLINE#
dict ( [ ( e [ 0 ] , int ( e [ 1 ] ) ) for e in lst ] ) #NEWLINE#
re . split ( '(?<=[\\.\\?!])#SPACE#' , text ) #NEWLINE#
df . groupby ( 'A' ) [ 'C' ] . apply ( lambda x : x . sum ( ) ) #NEWLINE#
df . groupby ( level = [ 0 , 1 ] ) . median ( ) #NEWLINE#
df [ 'Cat1' ] . fillna ( df [ 'Cat2' ] ) #NEWLINE#
print ( ( 'Total#SPACE#score#SPACE#for' , name , 'is' , score ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
my_list [ - 10 : ] #NEWLINE#
my_string . split ( '\n' , 1 ) [ 0 ] #NEWLINE#
[ k for k , g in itertools . groupby ( [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] ) ] #NEWLINE#
subprocess . call ( [ 'java' , '-jar' , 'Blender.jar' ] ) #NEWLINE#
d . apply ( lambda row : min ( [ row [ 'A' ] , row [ 'B' ] ] ) - row [ 'C' ] , axis = 1 ) #NEWLINE#
subprocess . call ( 'mv#SPACE#/home/somedir/subdir/*#SPACE#somedir/' , shell = True ) #NEWLINE#
all ( isinstance ( x , int ) for x in lst ) #NEWLINE#
strs = [ '' for x in range ( size ) ] #NEWLINE#
os . system ( 'NET#SPACE#USE#SPACE#P:#SPACE#/DELETE' ) #NEWLINE#
[ 'foo' , 'bar' , 'one,#SPACE#two' , 'three#SPACE#four' ] #NEWLINE#
browser . find_element_by_class_name ( 'section-select-all' ) . click ( ) #NEWLINE#
[ [ X [ i , j ] for i in range ( X . shape [ 0 ] ) ] for j in range ( x . shape [ 1 ] ) ] #NEWLINE#
os . rename ( 'Joe#SPACE#Blow' , 'Blow,#SPACE#Joe' ) #NEWLINE#
driver . find_element_by_id ( '<check_box_id>' ) . is_selected ( ) #NEWLINE#
fh1 . seek ( 2 ) #NEWLINE#
results = [ item [ 'value' ] for item in test_data ] #NEWLINE#
driver . find_element_by_xpath ( "//div[@id='a']//a[@class='click']" ) #NEWLINE#
re . sub ( 'l+' , 'l' , 'lollll' ) #NEWLINE#
( '/static/(.*)' , web . StaticFileHandler , { 'path' : '/var/www' } ) , #NEWLINE#
pd . merge ( df . reset_index ( ) , df , on = 'sseqid' ) #NEWLINE#
[ d for d in a if d [ 'name' ] == 'pluto' ] #NEWLINE#
( i + 1 , j ) , ( i - 1 , j ) , ( i , j - 1 ) , ( i , j + 1 ) , ( i + 1 , j - 1 ) , ( i + 1 , j + 1 ) #NEWLINE#
list ( dict ( ( x [ 'id' ] , x ) for x in L ) . values ( ) ) #NEWLINE#
print ( '[{0},#SPACE#{1},#SPACE#{2}]' . format ( 1 , 2 , 3 ) ) #NEWLINE#
[ [ X [ i , j ] for j in range ( X . shape [ 1 ] ) ] for i in range ( x . shape [ 0 ] ) ] #NEWLINE#
s [ : 4 ] + '-' + s [ 4 : ] #NEWLINE#
"""""" . join ( set ( foo ) ) #NEWLINE#
df . groupby ( 'A' ) . apply ( lambda x : x . sum ( ) ) #NEWLINE#
array ( [ [ 3 , 0 , 0 ] , [ 0 , 1 , 2 ] , [ 2 , 1 , 3 ] ] ) #NEWLINE#
url . rsplit ( '/' , 1 ) [ - 1 ] #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
[ ( 0 , 4 ) , ( 7 , 9 ) , ( 11 , 11 ) ] #NEWLINE#
hex ( dec ) . split ( 'x' ) [ 1 ] #NEWLINE#
s . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) #NEWLINE#
[ m . start ( ) for m in re . finditer ( 'test' , 'test#SPACE#test#SPACE#test#SPACE#test' ) ] #NEWLINE#
ax . set_yscale ( 'log' ) #NEWLINE#
[ x for y , x in sorted ( zip ( Y , X ) ) ] #NEWLINE#
myFunc ( lambda a , b : iadd ( a , b ) ) #NEWLINE#
re . compile ( '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' , re . MULTILINE ) #NEWLINE#
sorted ( list ( statuses . items ( ) ) , key = lambda x : getitem ( x [ 1 ] , 'position' ) ) #NEWLINE#
plt . gca ( ) . invert_yaxis ( ) #NEWLINE#
df . groupby ( [ 'saleid' , 'upc' ] ) . size ( ) . unstack ( fill_value = 0 ) #NEWLINE#
numpy . where ( mask ) #NEWLINE#
df . groupby ( 'A' ) [ 'C' ] . apply ( lambda x : '{%s}' % ',#SPACE#' . join ( x ) ) #NEWLINE#
sorted ( list ( dictionary . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
self . request . get ( 'var_name' ) #NEWLINE#
dict ( zip ( keys , values ) ) #NEWLINE#
numpy . array ( [ ( x in a ) for x in b ] ) #NEWLINE#
p . stdin . flush ( ) #NEWLINE#
glob . glob ( '/home/username/www/*' ) #NEWLINE#
[ [ 0 , 1 , 2 , 3 , 4 ] , [ 'A' , 'B' , 'C' , 'D' , 'E' ] , [ 0 , 1 , 2 , 3 , 4 ] ] #NEWLINE#
re . split ( '\\s+' , str1 ) #NEWLINE#
soup . find_all ( 'a' , href = re . compile ( '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))' ) ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] ) #NEWLINE#
self . response . out . write ( str ( parsed_data [ 'translatedText' ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( set ( 'aaabcabccd' ) ) #NEWLINE#
np . outer ( a , b ) #NEWLINE#
"""used​""" . replace ( '\u200b' , '*' ) #NEWLINE#
np . argwhere ( np . all ( arr == [ [ 0 , 3 ] , [ 3 , 0 ] ] , axis = ( 1 , 2 ) ) ) #NEWLINE#
[ x [ 0 ] for x in G ] #NEWLINE#
app . run ( debug = True ) #NEWLINE#
X_train = scaler . fit ( X_train ) . transform ( X_train ) #NEWLINE#
re . findall ( '[-+]?\\d*\\.\\d+|\\d+' , 'Current#SPACE#Level:#SPACE#-13.2#SPACE#db#SPACE#or#SPACE#14.2#SPACE#or#SPACE#3' ) #NEWLINE#
os . kill ( process . pid , signal . SIGKILL ) #NEWLINE#
Article . objects . values ( 'pub_date' ) . annotate ( article_count = Count ( 'title' ) ) #NEWLINE#
"""раз#SPACE#два#SPACE#три""" . split ( ) #NEWLINE#
dict ( ( k , v ) for k , v in zip ( keys , values ) ) #NEWLINE#
print ( re . match ( '(\\d+(\\.\\d+)?)' , '3434' ) . group ( 1 ) ) #NEWLINE#
{ 'top' : [ 'foo' , 'bar' , 'baz' ] , 'bottom' : [ 'qux' ] } #NEWLINE#
s = pd . Series ( [ 'A' , 'B' , 'A1R' , 'B2' , 'AABB4' ] ) #NEWLINE#
[ set ( item ) for item in set ( frozenset ( item ) for item in L ) ] #NEWLINE#
df . groupby ( pd . cut ( df [ 'B' ] , np . arange ( 0 , 1.0 + 0.155 , 0.155 ) ) ) . sum ( ) #NEWLINE#
x [ ( np . arange ( x . shape [ 0 ] ) != 1 ) , : , : ] #NEWLINE#
re . sub ( '(<form.*?action=")([^"]+)' , '\\1newlogin.php' , content ) #NEWLINE#
itertools . permutations ( [ 1 , 2 , 3 ] ) #NEWLINE#
str . decode ( 'utf-8' ) . replace ( '•' , '*' ) #NEWLINE#
urllib . parse . quote_plus ( 'string_of_characters_like_these:$#@=?%^Q^$' ) #NEWLINE#
plt . show ( ) #NEWLINE#
driver . find_element_by_name ( '<check_box_name>' ) . is_selected ( ) #NEWLINE#
s = u . encode ( 'utf-8' ) #NEWLINE#
dict ( ( k , globals ( ) [ k ] ) for k in ( 'foo' , 'bar' ) ) #NEWLINE#
( i + 1 , j ) , ( i - 1 , j ) , ( i , j - 1 ) , ( i , j + 1 ) , ( i - 1 , j - 1 ) , ( i + 1 , j - 1 ) #NEWLINE#
mixed . replace ( '\r\n' , '\n' ) . replace ( '\r' , '\n' ) #NEWLINE#
subprocess . call ( [ 'shutdown' , '/r' ] ) #NEWLINE#
subprocess . call ( [ 'shutdown' , '/l#SPACE#' ] ) #NEWLINE#
df [ 'Features' ] = df [ 'Features' ] . apply ( frozenset ) #NEWLINE#
[ ( i , sum ( j ) / len ( j ) ) for i , j in list ( d . items ( ) ) ] #NEWLINE#
'#SPACE#\r#SPACE##SPACE#42\n\r#SPACE#\t\n#SPACE##SPACE##SPACE#\r0\n\r\n' . split ( ) #NEWLINE#
[ int ( s ) for s in example_string . split ( ',' ) ] #NEWLINE#
sum ( d [ 'success' ] for d in s ) #NEWLINE#
dict ( map ( int , x . split ( ':' ) ) for x in s . split ( ',' ) ) #NEWLINE#
df . groupby ( level = 0 ) . agg ( [ 'sum' , 'count' , 'std' ] ) #NEWLINE#
df . plot ( title = 'Title#SPACE#Here' ) #NEWLINE#
[ ( '%.2d' % i ) for i in range ( 16 ) ] #NEWLINE#
df . sort ( [ 'year' , 'month' , 'day' ] ) #NEWLINE#
plot . legend ( loc = 2 , prop = { 'size' : 6 } ) #NEWLINE#
"""[{0},#SPACE#{1},#SPACE#{2}]""" . format ( 1 , 2 , 3 ) #NEWLINE#
datetime . datetime . now ( ) . strftime ( '%a' ) #NEWLINE#
dogtail . rawinput . click ( 100 , 100 ) #NEWLINE#
pd . merge ( a , b , on = [ 'A' , 'B' ] , how = 'outer' ) #NEWLINE#
str . decode ( 'utf-8' ) . replace ( '•' , '*' ) . encode ( 'utf-8' ) #NEWLINE#
sorted ( d , key = lambda k : d [ k ] [ 1 ] ) #NEWLINE#
data . loc [ : , ( [ ( 'one' , 'a' ) , ( 'one' , 'c' ) , ( 'two' , 'a' ) , ( 'two' , 'c' ) ] ) ] #NEWLINE#
re . sub ( '\\*\\*+' , '*' , text ) #NEWLINE#
df . reset_index ( ) . groupby ( 'city_id' ) . sum ( ) #NEWLINE#
[ item for item in a if 1 in item ] #NEWLINE#
'%0.12d' % random . randint ( 0 , 999999999999 ) #NEWLINE#
MyModel . objects . filter ( text__regex = '^.{254}.*' ) #NEWLINE#
os . chdir ( '.\\chapter3' ) #NEWLINE#
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython\\chapter3' ) #NEWLINE#
session . query ( Entry ) . join ( Entry . tags ) . filter ( Tag . id == 1 ) . count ( ) #NEWLINE#
webbrowser . open ( 'http://somesite.com/adminpanel/index.php' ) #NEWLINE#
list ( d . values ( ) ) #NEWLINE#
ax . set_xlabel ( 'Temperature#SPACE#($^\\circ$C)' ) #NEWLINE#
df . reset_index ( ) . groupby ( [ 'A' , 'block' ] ) [ 'index' ] . apply ( np . array ) #NEWLINE#
[ x [ 1 ] for x in L ] #NEWLINE#
re . sub ( '(?<=[a-z])\\r?\\n' , '#SPACE#' , textblock ) #NEWLINE#
df . div ( df . sum ( axis = 1 ) , axis = 0 ) #NEWLINE#
sum ( your_list ) #NEWLINE#
x , y = np . random . randint ( 20 , size = ( 2 , 100 ) ) + np . random . rand ( 2 , 100 ) #NEWLINE#
map ( int , [ '1' , '-1' , '1' ] ) #NEWLINE#
[ sum ( [ x [ 1 ] for x in i ] ) for i in data ] #NEWLINE#
[ k for k , v in i . items ( ) if v == 0 ] #NEWLINE#
[ { 'key1' : a , 'key2' : b } for a , b in zip ( d [ 'key1' ] , d [ 'key2' ] ) ] #NEWLINE#
pd . read_csv ( 'D:/Temp/tt.csv' ) #NEWLINE#
dataList . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
re . split ( '[^a-zA-Z]*' , 'your#SPACE#string' ) #NEWLINE#
fig . subplots_adjust ( left = 0 , bottom = 0 , right = 1 , top = 1 , wspace = None , hspace = None ) #NEWLINE#
df [ 'a' ] . tolist ( ) #NEWLINE#
print ( '%.2f#SPACE#kg#SPACE#=#SPACE#%.2f#SPACE#lb#SPACE#=#SPACE#%.2f#SPACE#gal#SPACE#=#SPACE#%.2f#SPACE#l' % ( var1 , var2 , var3 , var4 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( [ [ 1 , 'mike' ] , [ 1 , 'bob' ] ] ) #NEWLINE#
tuple ( int ( x . strip ( ) ) for x in input ( ) . split ( ',' ) ) #NEWLINE#
re . sub ( 'a*' , 'a' , 'aaabbbccc' ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda v : int ( v [ 0 ] . split ( '-' ) [ 0 ] ) ) #NEWLINE#
sum ( 1 for i in it ) #NEWLINE#
list ( 'hello' ) #NEWLINE#
sum ( x * y for x , y in list ( zip ( a , b ) ) ) #NEWLINE#
print ( '%.3f' % 3.1415 ) #NEWLINE#
[ [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 2 , 3 , 4 ] ] #NEWLINE#
datetime . datetime . strptime ( '24052010' , '%d%m%Y' ) . date ( ) #NEWLINE#
p = subprocess . Popen ( cmd , stdout = sys . stdout , stderr = sys . stderr ) #NEWLINE#
dateutil . parser . parse ( '2013/09/11#SPACE#00:17#SPACE#+0900' ) #NEWLINE#
"""<br/>""" . join ( [ ( '%s::#SPACE#%s' % ( key , value ) ) for key , value in list ( d . items ( ) ) ] #NEWLINE# ) #NEWLINE#
df [ 'period' ] = df . apply ( period , axis = 1 ) #NEWLINE#
print ( [ item for item in dir ( adfix ) if not item . startswith ( '__' ) ] ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#Y)' ) #NEWLINE#
os . system ( 'screencapture#SPACE#screen.png' ) #NEWLINE#
db . collection . find ( { } , { '_id' : False } ) #NEWLINE#
return HttpResponse ( status = 204 ) #NEWLINE#
df . apply ( lambda x : x . tolist ( ) , axis = 1 ) #NEWLINE#
re . sub ( '(?<=\\w)([A-Z])' , '#SPACE#\\1' , 'WordWordWWWWWWWord' ) #NEWLINE#
list . sort ( ) #NEWLINE#
etree . register_namespace ( '' , 'http://www.w3.org/2000/svg' ) #NEWLINE#
df . dropna ( subset = [ 'city' , 'latitude' , 'longitude' ] , how = 'all' ) #NEWLINE#
df . index = pd . to_datetime ( df [ 'TRX_DATE' ] ) #NEWLINE#
[ int ( x ) for x in bin ( 8 ) [ 2 : ] ] #NEWLINE#
re . sub ( '^((.*?cat.*?){1})cat' , '\\1Bull' , s ) #NEWLINE#
re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat' , '\\1Bull' , s ) #NEWLINE#
df . apply ( lambda row : label_race ( row ) , axis = 1 ) #NEWLINE#
s [ : s . rfind ( '&' ) ] #NEWLINE#
os . system ( 'my_pdf.pdf' ) #NEWLINE#
sorted ( list_of_tuples , key = lambda tup : tup [ : : - 1 ] ) #NEWLINE#
df . reset_index ( ) . groupby ( 'A' ) [ 'index' ] . apply ( np . array ) #NEWLINE#
re . match ( '(ftp|http)://.*\\.(jpg|png)$' , s ) #NEWLINE#
df . loc [ df [ 'column_name' ] . isin ( some_values ) ] #NEWLINE#
s . rfind ( '&' ) #NEWLINE#
df . set_index ( [ 'timestamp' , 'objectId' ] ) [ 'result' ] . unstack ( ) . plot ( kind = 'bar' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ try_int ( x ) for x in [ 'sam' , '1' , 'dad' , '21' ] ] #NEWLINE#
[ x for x in items if x [ 2 ] == 0 ] #NEWLINE#
os . path . split ( os . path . abspath ( existGDBPath ) ) #NEWLINE#
df [ 'a' ] . values . tolist ( ) #NEWLINE#
[ 'yyya' , 'yyyb' , 'yyyc' ] #NEWLINE#
re . findall ( '(?=(a.*?a))' , 'a#SPACE#1#SPACE#a#SPACE#2#SPACE#a#SPACE#3#SPACE#a#SPACE#4#SPACE#a' ) #NEWLINE#
dict ( [ ( 'A' , 1 ) , ( 'B' , 2 ) , ( 'C' , 3 ) ] ) #NEWLINE#
l . sort ( key = alphanum_key ) #NEWLINE#
emaillist = '\n' . join ( [ item [ 0 ] for item in queryresult ] ) #NEWLINE#
Sample . objects . filter ( date__year = '2011' , date__month = '01' ) #NEWLINE#
C = [ ( a - b ) for a , b in zip ( A , B ) ] #NEWLINE#
df . loc [ df [ 'a' ] == 1 , 'b' ] . sum ( ) #NEWLINE#
s in [ 'true' , '1' , 't' , 'y' , 'yes' , 'yeah' , 'yup' , 'certainly' , 'uh-huh' ] #NEWLINE#
print ( '[%i,#SPACE#%i,#SPACE#%i]' % ( 1 , 2 , 3 ) ) #NEWLINE#
"""""" . join ( [ 'a' , 'b' , 'c' , 'd' ] ) #NEWLINE#
print ( '' . join ( uppers ) ) #NEWLINE#
output = open ( '/home/user/test/wsservice/data.pkl' , 'wb' ) #NEWLINE#
CELERY_ALWAYS_EAGER = True #NEWLINE#
browser . find_element_by_css_selector ( 'ul...span.hover#SPACE#' ) . click ( ) #NEWLINE#
sorted ( words , key = lambda x : 'a' + x if x [ : 1 ] == 's' else 'b' + x ) #NEWLINE#
[ x for x in l if x [ 1 ] == 1 ] #NEWLINE#
sorted ( persons , key = lambda x : x [ 'passport' ] [ 'birth_info' ] [ 'date' ] ) #NEWLINE#
df [ ~ df . index . duplicated ( ) ] #NEWLINE#
driver . execute_script ( "arguments[0].style.border#SPACE#=#SPACE#'1px#SPACE#solid#SPACE#red';" ) #NEWLINE#
df [ [ 'col1' , 'col2' , 'col3' , 'col4' ] ] #NEWLINE#
print ( len ( [ x for x in lst if x is not <VAR0> ] ) ) #NEWLINE#
b = { a [ i ] : a [ i + 1 ] for i in range ( 0 , len ( a ) , 2 ) } #NEWLINE#
eval ( '20<30' ) #NEWLINE#
list ( '5+6' ) #NEWLINE#
url ( '^' , include ( 'sms.urls' ) ) , #NEWLINE#
url ( '^$' , include ( 'sms.urls' ) ) , #NEWLINE#
print ( [ key for key , value in list ( d . items ( ) ) if value == 1 ] ) #NEWLINE#
re . findall ( '(?=(\\w+\\s+\\w+))' , 'B#SPACE#D#SPACE#E' ) #NEWLINE#
[ '002' , '020' , 'key' , 'value' ] #NEWLINE#
[ i for i in y if y [ i ] == 1 ] #NEWLINE#
bar . sort ( key = lambda x : ( x . attrb1 , x . attrb2 ) , reverse = True ) #NEWLINE#
print ( soup . get_text ( ) ) #NEWLINE#
"""#SPACE#""" . join ( re . split ( '[^a-zA-Z]*' , 'your#SPACE#string' ) ) #NEWLINE#
[ [ 1 , 100313 , 0 , 0 , 1 ] , [ 2 , 100313 , 0 , 0 , 1 ] , [ 1 , 100314 , 0 , 1 , 0 ] , [ 3 , 100315 ] ] #NEWLINE#
print ( '"Hello,\\nworld!"' . decode ( 'string_escape' ) ) #NEWLINE#
soup . find_all ( 'div' , class_ = re . compile ( 'comment-' ) ) #NEWLINE#
re . findall ( '([a-z])*' , 'f233op' ) #NEWLINE#
re . findall ( '([a-z]*)' , 'f233op' ) #NEWLINE#
Animals . objects . filter ( name__startswith = 'A' ) #NEWLINE#
sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
driver . execute_script ( 'return#SPACE#lastAlert' ) #NEWLINE#
[ j for i in zip ( a , b ) for j in i ] #NEWLINE#
pd . concat ( [ df1 [ 'c' ] , df2 [ 'c' ] ] , axis = 1 , keys = [ 'df1' , 'df2' ] ) #NEWLINE#
df . groupby ( df . index ) . sum ( ) #NEWLINE#
re . split ( '\\.\\s' , text ) #NEWLINE#
example = [ x . replace ( '\r\n' , '' ) for x in example ] #NEWLINE#
[ ( d [ 'Name' ] , d [ 'Age' ] ) for d in thisismylist ] #NEWLINE#
plt . gca ( ) . invert_xaxis ( ) #NEWLINE#
MyModel . objects . extra ( select = { 'length' : 'Length(name)' } ) . order_by ( 'length' ) #NEWLINE#
struct . pack ( '<I' , 1633837924 ) #NEWLINE#
s . groupby ( grouper ) . sum ( ) #NEWLINE#
df . sort ( [ 'c1' , 'c2' ] , ascending = [ True , True ] ) #NEWLINE#
[ 'long#SPACE#' , 'string#SPACE#' , 'that#SPACE#' , 'I#SPACE#want#SPACE#to#SPACE#split#SPACE#up' ] #NEWLINE#
Sample . objects . filter ( date__range = [ '2011-01-01' , '2011-01-31' ] ) #NEWLINE#
print ( '▲' . encode ( 'utf-8' ) ) #NEWLINE#
[ 4 , 5 , 5 , 6 , 6 , 6 ] #NEWLINE#
os . environ [ 'DEBUSSY' ] = '1' #NEWLINE#
self . request . url #NEWLINE#
print ( df . to_xml ( ) ) #NEWLINE#
logging . basicConfig ( ) #NEWLINE#
[ y for x in list ( dict . items ( ) ) for y in x ] #NEWLINE#
sorted ( lst , reverse = True ) #NEWLINE#
[ x for x in a if x != [ 1 , 1 ] ] #NEWLINE#
Group . objects . filter ( player__name__in = [ 'Player1' , 'Player2' ] ) #NEWLINE#
getattr ( getattr ( myobject , 'id' , None ) , 'number' , None ) #NEWLINE#
wx . TextCtrl ( self , - 1 , size = ( 300 , - 1 ) ) #NEWLINE#
[ ( 'a' , '<i4' ) , ( 'b' , '<i4' ) , ( 'c' , '<i4' ) ] #NEWLINE#
[ ( 'a' , '|O4' ) , ( 'b' , '|O4' ) , ( 'c' , '|O4' ) ] #NEWLINE#
print ( bool ( a ) ) #NEWLINE#
re . sub ( '(?m)^\\s+' , '' , 'a\n#SPACE#b\n#SPACE#c' ) #NEWLINE#
"""-""" . join ( a + b for a , b in zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) ) #NEWLINE#
set ( [ 3 , 5 , 7 , 9 ] ) #NEWLINE#
os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
request . META [ 'HTTP_HOST' ] #NEWLINE#
s . replace ( '#SPACE#' , '' ) #NEWLINE#
re . match ( '^(a+)+$' , 'a' * 24 + '!' ) #NEWLINE#
re . match ( '[:;][)(](?![)(])' , str ) #NEWLINE#
sorted ( a , key = lambda x : ( len ( x ) , [ confrom [ card [ 0 ] ] for card in x ] ) ) #NEWLINE#
df . sort_values ( by = 1 , ascending = False , axis = 1 ) #NEWLINE#
parser . add_argument ( '--conf' , nargs = 2 , action = 'append' ) #NEWLINE#
list ( map ( int , [ '1' , '2' , '3' ] ) ) #NEWLINE#
parser . add_argument ( 'input' , nargs = '+' ) #NEWLINE#
df [ 'b' ] #NEWLINE#
list ( itertools . islice ( it , 0 , n , 1 ) ) #NEWLINE#
a . setdefault ( 'somekey' , [ ] ) . append ( 'bob' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return HttpResponse ( json . dumps ( response_data ) , content_type = 'application/json' ) #NEWLINE#
re . sub ( '(http://\\S+|\\S*[^\\w\\s]\\S*)' , '' , a ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ 1 , 2 ] , [ 2 , 0 ] ] ) #NEWLINE#
next ( iter ( list ( dict . values ( ) ) ) ) #NEWLINE#
map ( int , re . findall ( '\\d+' , string1 ) ) #NEWLINE#
[ d [ 'Name' ] for d in thisismylist ] #NEWLINE#
numpy . array ( [ [ 1 , 2 ] , [ 2 , 3 , 4 ] ] ) #NEWLINE#
{ x [ 1 ] : x for x in lol } #NEWLINE#
plt . show ( ) #NEWLINE#
a [ : ] = [ x for x in a if x != [ 1 , 1 ] ] #NEWLINE#
sorted ( mylist , key = lambda x : order . index ( x [ 1 ] ) ) #NEWLINE#
[ line for line in open ( 'textfile' ) if 'apple' in line ] #NEWLINE#
re . compile ( 'â\x80\x93' ) #NEWLINE#
"""#SPACE#""" . join ( l [ - 1 : ] + l [ : - 1 ] ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
[ 'Alaska#SPACE#Alabama#SPACE#Arkansas#SPACE#American#SPACE#Samoa#SPACE#' , 'zona#SPACE#California#SPACE#Colorado' ] #NEWLINE#
df . set_index ( 'id' ) [ 'value' ] . to_dict ( ) #NEWLINE#
print ( my_string . split ( ',#SPACE#' , 1 ) [ 1 ] ) #NEWLINE#
re . compile ( 'a^' ) #NEWLINE#
[ '5' , '+' , '6' ] #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
datetime . datetime . strptime ( '2011,#SPACE#4,#SPACE#0' , '%Y,#SPACE#%U,#SPACE#%w' ) #NEWLINE#
open ( 'filename' , 'w' ) . write ( '\n' . join ( '%s#SPACE#%s' % x for x in mylist ) ) #NEWLINE#
print ( '' . join ( [ str ( t ) . strip ( ) for t in x . findAll ( text = True ) ] ) ) #NEWLINE#
sum ( map ( lambda x : x * x , l ) ) #NEWLINE#
df [ df . index . map ( lambda x : x [ 1 ] . endswith ( '0630' ) ) ] #NEWLINE#
map ( list , permutations ( [ 2 , 3 , 4 ] ) ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#(`column1`)#SPACE#VALUES#SPACE#(%s)' , ( value , ) ) #NEWLINE#
""",#SPACE#""" . join ( [ '{}_{}' . format ( k , v ) for k , v in d . items ( ) ] ) #NEWLINE#
df [ 'col' ] = pd . to_datetime ( df [ 'col' ] ) #NEWLINE#
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) , reverse = True ) #NEWLINE#
np . einsum ( '...j,...j->...' , vf , vf ) #NEWLINE#
df . loc [ df [ 'column_name' ] == some_value ] #NEWLINE#
unittest . main ( ) #NEWLINE#
sorted ( item , key = lambda x : x . id ) #NEWLINE#
np . cumsum ( x [ : : - 1 ] ) [ : : - 1 ] #NEWLINE#
pd . concat ( [ df1 , df2 ] , axis = 1 ) #NEWLINE#
plot ( [ 0 , 0.5 ] , [ 0.5 , 0.5 ] , [ 0.5 , 0.5 ] , [ 0.5 , 1 ] , [ 0.5 , 1 ] , [ 1 , 1 ] ) #NEWLINE#
keys . sort ( key = lambda k : ( k [ 0 ] , int ( k [ 1 : ] ) ) ) #NEWLINE#
sorted ( lst , key = lambda x : ( x < 0 , x ) ) #NEWLINE#
[ ( v , k ) for k , v in a . items ( ) ] #NEWLINE#
map ( sum , zip ( * l ) ) #NEWLINE#
int ( datetime . datetime . strptime ( '01/12/2011' , '%d/%m/%Y' ) . strftime ( '%s' ) ) #NEWLINE#
soup . find_all ( [ 'a' , 'div' ] ) #NEWLINE#
df [ ( df . iloc [ : , - 12 : ] == - 1 ) . any ( axis = 1 ) ] #NEWLINE#
[ value for key , value in list ( programs . items ( ) ) if 'new#SPACE#york' in key . lower ( ) ] #NEWLINE#
df . loc [ ~ df [ 'column_name' ] . isin ( some_values ) ] #NEWLINE#
fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
datetime . strptime ( '2012-06-25#SPACE#01:17:40.273000' , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
[ 'c' , 'b' , 'a' , 'obj' , 'a' , 'a' ] #NEWLINE#
print ( any ( x in a for x in b ) ) #NEWLINE#
[ 'US' , 'US' , 'UK' ] #NEWLINE#
df [ 'Season2' ] = df [ 'Season' ] . apply ( lambda x : split_it ( x ) ) #NEWLINE#
ast . literal_eval ( "('item#SPACE#1',#SPACE#[1,2,3,4]#SPACE#,#SPACE#[4,3,2,1])" ) #NEWLINE#
df . to_csv ( 'c:\\data\\t.csv' , index = False ) #NEWLINE#
print ( [ key for key , value in d . items ( ) if value == 1 ] ) #NEWLINE#
[ i for i in y if y [ i ] > 1 ] #NEWLINE#
getattr ( your_obj , x ) #NEWLINE#
txt = open ( 'file.txt' ) . read ( ) #NEWLINE#
new_list = [ ( x + 1 ) for x in my_list ] #NEWLINE#
np . sum ( a ) #NEWLINE#
sorted ( unsorted , key = lambda element : ( element [ 1 ] , element [ 2 ] ) ) #NEWLINE#
df . groupby ( [ df . date . dt . year , df . date . dt . month ] ) . count ( ) . plot ( kind = 'bar' ) #NEWLINE#
f . close ( ) #NEWLINE#
winsound . PlaySound ( 'sound.wav' , winsound . SND_FILENAME ) #NEWLINE#
os . path . normpath ( '(path-to-wiki)/foo/bar.txt' ) . startswith ( '(path-to-wiki)' ) #NEWLINE#
"""test.mp3""" . endswith ( ( '.mp3' , '.avi' ) ) #NEWLINE#
vectorizer . get_feature_names ( ) #NEWLINE#
[ 'hello' , '' , '' , '' , '' , '' , '' , '' , 'there' ] #NEWLINE#
a . reshape ( - 1 , 3 , 3 , 3 , 3 , 3 ) . transpose ( 0 , 2 , 4 , 1 , 3 , 5 ) . reshape ( 27 , 27 ) #NEWLINE#
df . set_index ( 'id' ) . to_dict ( ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
[ [ 1 , 100313 , 0 , 0 , 1 ] , [ 2 , 100313 , 0 , 0 , 1 ] , [ 1 , 100314 ] , [ 3 , 100315 ] ] #NEWLINE#
your_list . sort ( key = lambda x : x . anniversary_score ) #NEWLINE#
pd . Series ( pd . PeriodIndex ( df . date . dt . to_period ( 'T' ) + 1 ) . to_timestamp ( ) ) #NEWLINE#
"""""" . join ( str ( i ) for i in ( 34.2424 , - 64.2344 , 76.3534 , 45.2344 ) ) #NEWLINE#
MyModel . objects . order_by ( '?' ) . first ( ) #NEWLINE#
[ k for k , v in dictA . items ( ) if v . count ( 'duck' ) > 1 ] #NEWLINE#
re . split ( '(d(d)d)' , 'aaa#SPACE#bbb#SPACE#ccc#SPACE#ddd#SPACE#eee#SPACE#fff' , 1 ) #NEWLINE#
re . split ( '(ddd)' , 'aaa#SPACE#bbb#SPACE#ccc#SPACE#ddd#SPACE#eee#SPACE#fff' , 1 ) #NEWLINE#
set ( [ 1 , 2 , 3 ] ) ^ set ( [ 3 , 4 , 5 ] ) #NEWLINE#
driver . find_element_by_id ( 'foo' ) . clear ( ) #NEWLINE#
x = array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ 'Birthday:' , 'Education' , 'Job:' , 'Child#SPACE#Sex:' ] #NEWLINE#
[ ( lst [ i ] , lst2 [ i ] ) for i in range ( len ( lst ) ) ] #NEWLINE#
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ a , b , c , d ] ) ) #NEWLINE#
df [ [ 'id' , 'name' ] ] . join ( [ A , B ] ) #NEWLINE#
[ x [ 0 ] for x in os . walk ( directory ) ] #NEWLINE#
db . coll . find ( { 'fieldname' : { '$exists' : 1 } } ) . count ( ) #NEWLINE#
grouped . apply ( lambda x : linregress ( x [ 'col_X' ] , x [ 'col_Y' ] ) ) #NEWLINE#
numpy . dot ( numpy . array ( [ [ 1 ] , [ 2 ] ] ) , numpy . array ( [ [ 3 , 4 ] ] ) ) #NEWLINE#
print ( '[%s,#SPACE#%s,#SPACE#%s]' % ( 1 , 2 , 3 ) ) #NEWLINE#
self . kwargs [ 'slug' ] #NEWLINE#
Image . open ( 'pathToFile' ) . show ( ) #NEWLINE#
all ( i < j for i , j in zip ( a , b ) ) #NEWLINE#
webbrowser . open ( 'file:///my_pdf.pdf' ) #NEWLINE#
set ( [ 'a' , 'b' ] ) . issubset ( set ( l ) ) #NEWLINE#
re . findall ( '\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+' , strs ) #NEWLINE#
sorted ( set ( itertools . chain . from_iterable ( sequences ) ) ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
sorted ( lst , key = lambda x : ( sum ( x [ 1 : ] ) , x [ 0 ] ) ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#index(url)#SPACE#VALUES(%s)' , ( url , ) ) #NEWLINE#
mylist = [ 'base' , 'sample' , 'test' ] #NEWLINE#
my_datetime . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
print ( re . sub ( '[\x00-\x7f]' , '' , '£100#SPACE#is#SPACE#worth#SPACE#more#SPACE#than#SPACE#€100' ) ) #NEWLINE#
keys . sort ( key = lambda x : [ int ( y ) for y in x . split ( '.' ) ] ) #NEWLINE#
ftp . storbinary ( 'STOR#SPACE#myfile.txt' , open ( 'myfile.txt' , 'rb' ) ) #NEWLINE#
[ sorted ( item ) for item in data ] #NEWLINE#
print ( os . path . getmtime ( '/tmp' ) ) #NEWLINE#
print ( t . decode ( 'unicode_escape' ) ) #NEWLINE#
print ( browser . current_url ) #NEWLINE#
print ( re . findall ( '\\d+' , '\n' . join ( re . findall ( '«([\\s\\S]*?)»' , text ) ) ) ) #NEWLINE#
f . write ( '##SPACE#Data#SPACE#for#SPACE#Class#SPACE#A\n' ) #NEWLINE#
"""""" . join ( lst ) #NEWLINE#
sorted ( words , key = lambda x : 'a' + x if x . startswith ( 's' ) else 'b' + x ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
df . groupby ( [ 'employer_key' , 'account_id' ] ) [ 'login_date' ] #NEWLINE#
[ 'a' , 'c' , 'b' , 'obj' ] #NEWLINE#
[ m . start ( ) for m in re . finditer ( '(?=tt)' , 'ttt' ) ] #NEWLINE#
"""437c2123""" . decode ( 'hex' ) #NEWLINE#
s = s . replace ( '\\' , '\\\\' ) #NEWLINE#
os . chdir ( '../nodes' ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
yourdf . drop ( [ 'columnheading1' , 'columnheading2' ] , axis = 1 , inplace = True ) #NEWLINE#
[ list ( a ) for a in zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ] #NEWLINE#
"""""" . join ( soup . findAll ( text = True ) ) #NEWLINE#
print ( data [ 'places' ] [ 'latitude' ] ) #NEWLINE#
df . groupby ( [ df . index . date , 'action' ] ) . count ( ) . plot ( kind = 'bar' ) #NEWLINE#
new_string = re . sub ( '"(\\d+),(\\d+)"' , '\\1.\\2' , original_string ) #NEWLINE#
importlib . import_module ( 'a.b.c' ) #NEWLINE#
sum ( j ** i for i , j in enumerate ( l , 1 ) ) #NEWLINE#
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' , dtype = '>f4' ) #NEWLINE#
sys . path . append ( '/path/to/main_folder' ) #NEWLINE#
g = df . groupby ( [ 'Manufacturer' , 'Product#SPACE#Launch#SPACE#Date' , 'Product#SPACE#Name' ] ) . sum ( ) #NEWLINE#
df [ 'cumsum' ] = df [ 'WIN1' ] . cumsum ( ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 , 4 ] , 'b' : [ 1 , 1 , 2 , 2 ] } ) #NEWLINE#
reducefn ( { 'physics' : 1 } , { 'volume' : 1 , 'chemistry' : 1 } , { 'chemistry' : 1 } ) #NEWLINE#
b = dict ( zip ( a [ 0 : : 2 ] , a [ 1 : : 2 ] ) ) #NEWLINE#
[ 'n' , 'e' , 'v' , 'r' , '#SPACE#' , 'g' , 'o' , 'a' , 'i' , 'y' , 'u' , 'p' ] #NEWLINE#
[ 'x' , '#SPACE#' , 'y' , 'y' , '#SPACE#' , 'z' ] #NEWLINE#
datetime . datetime . strptime ( str_date , '%m/%d/%Y' ) . date ( ) . isoformat ( ) #NEWLINE#
pd . concat ( [ df , res ] , axis = 1 ) #NEWLINE#
df . groupby ( 'A' ) . apply ( f ) #NEWLINE#
plt . savefig ( 'test.png' , bbox_inches = 'tight' ) #NEWLINE#
df . groupby ( 'colour' ) . size ( ) . plot ( kind = 'bar' ) #NEWLINE#
any ( np . equal ( a , [ 1 , 2 ] ) . all ( 1 ) ) #NEWLINE#
datetime . datetime . now ( ) . date ( ) #NEWLINE#
dict ( x [ 1 : ] for x in reversed ( myListOfTuples ) ) #NEWLINE#
re . findall ( '[^a]' , 'abcd' ) #NEWLINE#
multi_level_dict ( [ 'a' , 'b' ] , [ 'A' , 'B' ] , [ '1' , '2' ] ) #NEWLINE#
df . groupby ( [ 'a' , 'name' ] ) . median ( ) . index . get_level_values ( 'name' ) #NEWLINE#
all ( x in [ 'b' , 'a' , 'foo' , 'bar' ] for x in [ 'a' , 'b' ] ) #NEWLINE#
pattern = re . compile ( '(?:review:#SPACE#)?(http://url.com/(\\d+))\\s?' , re . IGNORECASE ) #NEWLINE#
[ ( k , v ) for k , v in D . items ( ) if 'Light' in k ] #NEWLINE#
s . send ( 'Hello#SPACE#server!' ) #NEWLINE#
df . groupby ( [ 'cluster' , 'org' ] ) . mean ( ) #NEWLINE#
{ key : val for key , val in list ( myDict . items ( ) ) if val != 42 } #NEWLINE#
[ k for k , v in d . items ( ) if v == desired_value ] #NEWLINE#
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in data ] #NEWLINE#
df [ [ 'hour' , 'weekday' , 'weeknum' ] ] = df . apply ( lambdafunc , axis = 1 ) #NEWLINE#
request . POST . getlist ( 'pass_id' ) #NEWLINE#
np . mean ( np . array ( [ old_set , new_set ] ) , axis = 0 ) #NEWLINE#
globals ( ) [ 'myfunction' ] ( ) #NEWLINE#
pat = re . compile ( '^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$' ) #NEWLINE#
{ k : bigdict [ k ] for k in ( 'l' , 'm' , 'n' ) } #NEWLINE#
df [ 'race_label' ] = df . apply ( lambda row : label_race ( row ) , axis = 1 ) #NEWLINE#
self . request . get ( 'name-of-querystring-variable' ) #NEWLINE#
pyplot . legend ( loc = 2 , fontsize = 'x-small' ) #NEWLINE#
json . loads ( request . POST . get ( 'mydata' , '{}' ) ) #NEWLINE#
plt . subplots_adjust ( top = 0.5 ) #NEWLINE#
sorted ( the_list , key = lambda k : int ( k . split ( '_' ) [ 1 ] ) ) #NEWLINE#
setattr ( my_class_instance , 'attr_name' , attr_value ) #NEWLINE#
subprocess . call ( [ 'mv' , '/home/somedir/subdir/*' , 'somedir/' ] ) #NEWLINE#
d = { 'dict1' : { 'foo' : 1 , 'bar' : 2 } , 'dict2' : { 'baz' : 3 , 'quux' : 4 } } #NEWLINE#
sorted ( list_of_medals , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) ) #NEWLINE#
re . compile ( 'Author\\(s\\)#SPACE##SPACE##SPACE##SPACE#:((.+\\n)+)' ) #NEWLINE#
"""""" . join ( '{}{}' . format ( key , val ) for key , val in sorted ( adict . items ( ) ) ) #NEWLINE#
tuple ( map ( int , input ( ) . split ( ',' ) ) ) #NEWLINE#
[ [ 2 , 3 , 0 ] , [ 1 , 2 , 3 ] , [ 1 , 0 , 0 ] ] #NEWLINE#
dict_list = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } #NEWLINE#
[ ':#SPACE#error:' , 'cc1plus:' ] #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , linestyle = '--' , marker = 'o' , color = 'b' ) #NEWLINE#
myredis . lpush ( 'foo' , * [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( np . arange ( len ( df . columns ) ) // 3 , axis = 1 ) . mean ( ) #NEWLINE#
pd . melt ( df , id_vars = 'Date' ) [ [ 'Date' , 'value' ] ] #NEWLINE#
urlfetch . fetch ( url , headers = { 'User-Agent' : 'MyApplication_User-Agent' } ) #NEWLINE#
"""42#SPACE#0""" . split ( ) #NEWLINE#
print ( ( key , value ) ) #NEWLINE#
print ( '.' . join ( [ item [ 0 ] for item in data ] ) ) #NEWLINE#
self . pushButton . clicked . connect ( self . showDial ) #NEWLINE#
dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) ) #NEWLINE#
hashtags = re . findall ( '#(\\w+)' , str1 , re . UNICODE ) #NEWLINE#
df . index . values . tolist ( ) #NEWLINE#
[ 'subject' , 'filer,#SPACE#subject' , 'filer' , 'activity,#SPACE#subject' ] #NEWLINE#
all ( dict . values ( ) ) #NEWLINE#
[ [ int ( x ) for x in sublist ] for sublist in lst ] #NEWLINE#
webbrowser . open ( 'file://' + os . path . realpath ( filename ) ) #NEWLINE#
np . diff ( arr [ : , ( 1 ) ] ) #NEWLINE#
replace ( '"' , '\\"' ) #NEWLINE#
urllib . request . urlretrieve ( 'http://search.twitter.com/search.json?q=hi' , #NEWLINE# 'hi.json' ) #NEWLINE#
func ( * args ) #NEWLINE#
X = numpy . loadtxt ( 'somefile.csv' , delimiter = ',' ) #NEWLINE#
subprocess . call ( 'dir#SPACE#/q' , shell = True ) #NEWLINE#
re . search ( '^(.*?)(Arguments:.*?)?(Returns:.*)?$' , s , re . DOTALL ) #NEWLINE#
plt . show ( ) #NEWLINE#
img = img . convert ( 'RGB' ) #NEWLINE#
data [ : , ( [ 1 , 9 ] ) ] #NEWLINE#
int ( '55063.000000' ) #NEWLINE#
parent = relationship ( 'Parent' , backref = backref ( 'children' , lazy = 'noload' ) ) #NEWLINE#
"""""" . join ( random . choice ( string . lowercase ) for x in range ( X ) ) #NEWLINE#
map ( list , zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ) #NEWLINE#
lambda a , b : a + b #NEWLINE#
df = df [ [ 'x' , 'y' , 'a' , 'b' ] ] #NEWLINE#
unsorted_list . sort ( key = lambda x : x [ 3 ] ) #NEWLINE#
OrderedDict ( [ ( 'a' , None ) , ( 'b' , None ) , ( 'c' , None ) , ( 'd' , None ) , ( 'e' , None ) ] ) #NEWLINE#
df . index . get_level_values ( 0 ) . unique ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
map ( int , str ( num ) ) #NEWLINE#
df . drop ( df . columns [ [ 0 , 1 , 3 ] ] , axis = 1 ) #NEWLINE#
[ [ [ x [ 0 ] ] for x in y ] for y in listD ] #NEWLINE#
df . set_index ( [ 'Company' , 'date' ] , inplace = True ) #NEWLINE#
super ( Executive , self ) . __init__ ( * args ) #NEWLINE#
all ( isinstance ( x , int ) for x in lst ) #NEWLINE#
[ x [ 1 ] for x in COUNTRIES if x [ 0 ] == 'AS' ] [ 0 ] #NEWLINE#
pd . DataFrame ( df . columns [ np . argsort ( df . values ) ] , df . index , np . unique ( df . values ) ) #NEWLINE#
df . groupby ( [ 'Country' , 'Item_Code' ] ) [ [ 'Y1961' , 'Y1962' , 'Y1963' ] ] . sum ( ) #NEWLINE#
df . groupby ( df . columns , axis = 1 ) . sum ( ) #NEWLINE#
City . objects . filter ( name__nospaces = 'newyork' ) #NEWLINE#
a [ 'x' ] . apply ( lambda x , y : x + y , args = ( 100 , ) ) #NEWLINE#
d3 = { key : ( d1 [ key ] - d2 . get ( key , 0 ) ) for key in list ( d1 . keys ( ) ) } #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
datetime . datetime . fromtimestamp ( myNumber ) . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
arr [ : , ( 1 ) ] #NEWLINE#
ast . literal_eval ( '[(0,0,0),#SPACE#(0,0,1),#SPACE#(1,1,0)]' ) #NEWLINE#
numpy . loadtxt ( open ( 'test.csv' , 'rb' ) , delimiter = ',' , skiprows = 1 ) #NEWLINE#
x = np . array ( [ [ 1 , 2 , 3 , 4 , 5 ] , [ 4 , 5 , 6 , 7 , 8 ] ] , np . int32 ) #NEWLINE#
json . loads ( '{"foo":#SPACE#42,#SPACE#"bar":#SPACE#"baz"}' ) [ 'bar' ] #NEWLINE#
array ( [ True , False , False , True ] , dtype = bool ) #NEWLINE#
urllib . parse . unquote ( h . path . encode ( 'utf-8' ) ) . decode ( 'utf-8' ) #NEWLINE#
print ( data [ 'places' ] [ 0 ] [ 'post#SPACE#code' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , '!A_B' ) #NEWLINE#
df . groupby ( df . date . dt . month ) . count ( ) . plot ( kind = 'bar' ) #NEWLINE#
df1 . set_index ( 'Date' , inplace = True ) #NEWLINE#
sorted ( list ( a_dict . items ( ) ) , key = lambda item : item [ 1 ] [ 1 ] ) #NEWLINE#
dict ( ( k , v ) for d in dicts for k , v in list ( d . items ( ) ) ) #NEWLINE#
numpy . random . random ( ( 3 , 3 ) ) #NEWLINE#
[ x [ 'value' ] for x in list_of_dicts ] #NEWLINE#
s . resample ( '3M' , how = 'sum' ) #NEWLINE#
df = pd . read_csv ( 'comma.csv' , quotechar = "'" ) #NEWLINE#
db . commit ( ) #NEWLINE#
img = Image . new ( 'RGB' , ( 200 , 100 ) , ( 255 , 255 , 255 ) ) #NEWLINE#
request . headers [ 'your-header-name' ] #NEWLINE#
[ x for x in my_list if not any ( c . isdigit ( ) for c in x ) ] #NEWLINE#
arr [ arr != 0 ] . min ( ) #NEWLINE#
struct . unpack ( '4b' , struct . pack ( 'I' , 100 ) ) #NEWLINE#
os . chdir ( os . path . dirname ( __file__ ) ) #NEWLINE#
""",""" . join ( str ( i ) for i in range ( 100 ) if i % 4 in ( 1 , 2 ) ) #NEWLINE#
{ k : bigdict . get ( k , None ) for k in ( 'l' , 'm' , 'n' ) } #NEWLINE#
plt . show ( ) #NEWLINE#
exec ( compile ( open ( 'file.py' ) . read ( ) , 'file.py' , 'exec' ) ) #NEWLINE#
'{' + ',' . join ( '{0!r}:{1!r}' . format ( * x ) for x in list ( dct . items ( ) ) ) + '}' #NEWLINE#
print ( [ i for i in re . split ( '([\\d.]+|\\W+)' , 'x+13.5*10x-4e1' ) if i ] ) #NEWLINE#
inputTag = soup . findAll ( attrs = { 'name' : 'stainfo' } ) #NEWLINE#
df . head ( ) #NEWLINE#
subprocess . check_output ( [ 'espeak' , text ] , stderr = subprocess . STDOUT ) #NEWLINE#
open ( 'some_path' , 'r+' ) #NEWLINE#
pd . concat ( [ students , pd . DataFrame ( marks ) ] , axis = 1 ) #NEWLINE#
dict ( zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) ) #NEWLINE#
"""insert#SPACE#into#SPACE#egg#SPACE#values#SPACE#('egg');""" . encode ( 'ascii' ) #NEWLINE#
threading . Thread ( target = SudsMove ) . start ( ) #NEWLINE#
zip ( * list_of_tuples ) #NEWLINE#
df . join ( s . apply ( lambda x : Series ( x . split ( ':' ) ) ) ) #NEWLINE#
[ ( 'jamy' , 'Park' , 'kick' ) , ( 'see' , 'it' , 'works' ) ] #NEWLINE#
df [ 'column' ] = df [ 'column' ] . astype ( 'str' ) #NEWLINE#
a = open ( 'pdf_reference.pdf' , 'rb' ) . read ( ) . encode ( 'base64' ) #NEWLINE#
sum ( d . values ( ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
test ( [ 'important' , 'comment' , 'bar' ] ) #NEWLINE#
print ( '#SPACE#' . join ( sorted ( d , key = lambda k : len ( d [ k ] ) , reverse = True ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
myList = [ i for i in range ( 10 ) ] #NEWLINE#
a = [ [ ] for i in range ( 3 ) ] #NEWLINE#
"""""" . join ( chr ( ord ( c ) ) for c in 'AndrÃ©' ) . decode ( 'utf8' ) #NEWLINE#
df . groupby ( 'dummy' ) . agg ( { 'returns' : [ np . mean , np . sum ] } ) #NEWLINE#
dict ( map ( lambda s : s . split ( ':' ) , [ 'A:1' , 'B:2' , 'C:3' , 'D:4' ] ) ) #NEWLINE#
df . groupby ( [ 'stock' , 'same1' , 'same2' ] , as_index = False ) [ 'positions' ] . sum ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
a . split ( '\n' ) [ : - 1 ] #NEWLINE#
"""Abc""" . translate ( maketrans ( 'abcABC' , 'defDEF' ) ) #NEWLINE#
[ 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ] #NEWLINE#
del my_list [ 2 : 6 ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
subprocess . call ( [ 'shutdown' , '/a#SPACE#' ] ) #NEWLINE#
subprocess . call ( [ 'shutdown' , '/s' ] ) #NEWLINE#
urlfetch . fetch ( url , deadline = 10 * 60 ) #NEWLINE#
s . decode ( 'ascii' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
PROJECT_ROOT = os . path . abspath ( os . path . dirname ( __file__ ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
root . destroy ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'english' ) #NEWLINE#
l1 . sort ( key = lambda x : int ( x [ 0 ] ) ) #NEWLINE#
my_list . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
subprocess . call ( [ 'shutdown' , '/r' , '/t' , '900' ] ) #NEWLINE#
print ( 'Total#SPACE#score#SPACE#for#SPACE#%s#SPACE#is#SPACE#%s#SPACE##SPACE#' % ( name , score ) ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
self . treeview . connect ( 'size-allocate' , self . treeview_changed ) #NEWLINE#
plt . show ( ) #NEWLINE#
heapq . nlargest ( 3 , iter ( mydict . items ( ) ) , key = lambda tup : sum ( tup [ 1 ] ) ) #NEWLINE#
df . to_csv ( 'mydf.tsv' , sep = '\t' ) #NEWLINE#
x = [ [ ] for i in range ( 3 ) ] #NEWLINE#
thisRDD = sc . parallelize ( range ( 10 ) , 2 ) . cache ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
unset_ones ( np . array ( [ 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 ] ) , 3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
pygame . display . set_mode ( ( 0 , 0 ) , pygame . FULLSCREEN ) #NEWLINE#
[ list ( d . keys ( ) ) for d in LoD ] #NEWLINE#
df = pd . read_csv ( 'filename.txt' , sep = ';' , names = [ 'Region#SPACE#Name' ] ) #NEWLINE#
df . value . astype ( str ) . apply ( list ) . apply ( pd . Series ) . astype ( int ) #NEWLINE#
os . system ( 'su#SPACE#hadoop#SPACE#-c#SPACE#"bin/hadoop-daemon.sh#SPACE#stop#SPACE#tasktracker"' ) #NEWLINE#
df [ 'Season' ] . str . split ( '-' ) . str [ 0 ] . astype ( int ) #NEWLINE#
driver . find_element_by_xpath ( "//option[@value='" + state + "']" ) . click ( ) #NEWLINE#
"""""" . join ( chr ( ord ( c ) ) for c in 'AndrÃ©' ) #NEWLINE#
re . sub ( '\\w*\\d\\w*' , '' , words ) . strip ( ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com:587' ) #NEWLINE#
"""\\ud83d\\ude4f""" . encode ( 'utf-16' , 'surrogatepass' ) . decode ( 'utf-16' ) #NEWLINE#
cur . execute ( "SELECT#SPACE#*#SPACE#FROM#SPACE#records#SPACE#WHERE#SPACE#email#SPACE#LIKE#SPACE#'%s'" , [ search ] ) #NEWLINE#
isinstance ( s , str ) #NEWLINE#
[ index for index , letter in enumerate ( word ) if letter == 'e' ] #NEWLINE#
[ '136#SPACE#139#SPACE#277#SPACE#24' , '246' ] #NEWLINE#
find_majority ( [ 1 , 2 , 3 , 4 , 3 , 3 , 2 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 6 , 5 ] ) #NEWLINE#
a [ tuple ( b ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ [ [ x [ 0 ] ] for x in listD [ i ] ] for i in range ( len ( listD ) ) ] #NEWLINE#
[ row [ 0 ] for row in a ] #NEWLINE#
t . xpath ( '//a[@href#SPACE#=#SPACE#"http://exact#SPACE#url"]' ) [ 0 ] #NEWLINE#
x , y = np . random . rand ( 2 , 100 ) * 20 #NEWLINE#
y = str ( int ( x , 16 ) ) #NEWLINE#
s . sort ( key = operator . itemgetter ( 1 , 2 ) ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * y , [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
df . loc [ df [ 'column_name' ] != some_value ] #NEWLINE#
"""""" . join ( sel . select ( '//body//text()' ) . extract ( ) ) . strip ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
instancelist = [ MyClass ( ) for i in range ( 29 ) ] #NEWLINE#
df . head ( ) #NEWLINE#
df . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] ) #NEWLINE#
df . groupby ( [ 'cluster' ] ) . mean ( ) #NEWLINE#
any ( [ True , False , False ] ) #NEWLINE#
os . system ( 'tcsh#SPACE#your_own_script' ) #NEWLINE#
np . delete ( 1 , 1 ) #NEWLINE#
ax . xaxis . set_major_locator ( MaxNLocator ( integer = True ) ) #NEWLINE#
datetime . datetime . strptime ( '16Sep2012' , '%d%b%Y' ) #NEWLINE#
[ float ( i ) for i in lst ] #NEWLINE#
return os . path . join ( home , 'Downloads' ) #NEWLINE#
dict ( ( k , bigdict [ k ] ) for k in ( 'l' , 'm' , 'n' ) ) #NEWLINE#
np . savetxt ( 'test.txt' , data ) #NEWLINE#
"""M\\N{AMPERSAND}M\\N{APOSTROPHE}s""" . decode ( 'unicode-escape' ) #NEWLINE#
"""債""" . encode ( 'utf-8' ) #NEWLINE#
print ( 'your#SPACE#string' . decode ( 'string_escape' ) ) #NEWLINE#
mystring . split ( ',' ) #NEWLINE#
sns . set_style ( 'whitegrid' , { 'axes.grid' : False } ) #NEWLINE#
df . groupby ( [ 'employer_key' , 'account_id' ] ) #NEWLINE#
url . split ( '&' ) #NEWLINE#
print ( '#SPACE#' . join ( OrderedDict . fromkeys ( s ) ) ) #NEWLINE#
df . to_csv ( 'filename.csv' , header = False ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
[ ( x * x ) for x in range ( 10 ) ] #NEWLINE#
x = numpy . delete ( x , 0 , axis = 0 ) #NEWLINE#
choices = { 'key1' : 'val1' , 'key2' : 'val2' } #NEWLINE#
re . sub ( '.*I' , 'I' , stri ) #NEWLINE#
[ x [ 0 ] for x in a ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ div [ 'class' ] for div in soup . find_all ( 'div' ) ] #NEWLINE#
[ 'a' , 'a' , 'a' , 'b' , 'b' , 'b' , 'c' , 'c' , 'c' , 'd' , 'd' , 'd' , 'e' , 'e' , 'e' ] #NEWLINE#
max ( enumerate ( a ) , key = lambda x : x [ 1 ] ) [ 0 ] #NEWLINE#
f = open ( 'example.txt' , 'r' ) #NEWLINE#
logging . info ( 'test' ) #NEWLINE#
pd . merge ( df1 , df2 , left_index = True , right_index = True , how = 'outer' ) #NEWLINE#
ws . Range ( 'A1' ) . Characters #NEWLINE#
MyModel . objects . extra ( where = [ 'CHAR_LENGTH(text)#SPACE#>#SPACE#254' ] ) #NEWLINE#
a = [ ( sum ( x ) / len ( x ) ) for x in zip ( * a ) ] #NEWLINE#
[ 'home' , 'about' , 'music' , 'photos' , 'stuff' , 'contact' ] #NEWLINE#
tree . write ( 'c.xml' , encoding = 'utf-8' ) #NEWLINE#
msglist = [ hextotal [ i : i + 4096 ] for i in range ( 0 , len ( hextotal ) , 4096 ) ] #NEWLINE#
max ( d , key = lambda x : d [ x ] [ 'count' ] ) #NEWLINE#
driver . set_window_size ( 1400 , 1000 ) #NEWLINE#
os . path . realpath ( os . path . join ( root , name ) ) #NEWLINE#
data . decode ( 'latin-1' ) . encode ( 'utf-8' ) #NEWLINE#
re . compile ( '–' ) #NEWLINE#
subprocess . call ( 'start#SPACE#/wait#SPACE#python#SPACE#bb.py' , shell = True ) #NEWLINE#
datetime . strptime ( '2010-11-13#SPACE#10:33:54.227806' , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
browser . find_elements_by_xpath ( "//*[@type='submit']" ) . get_attribute ( 'value' ) #NEWLINE#
list ( set ( frozenset ( item ) for item in L ) ) #NEWLINE#
myList = [ i for i in range ( 10 ) if i % 2 == 0 ] #NEWLINE#
formatter = logging . Formatter ( '%(asctime)s;%(levelname)s;%(message)s' ) #NEWLINE#
vol . extend ( ( volumeA , volumeB , volumeC ) ) #NEWLINE#
response = requests . put ( url , data = json . dumps ( data ) , headers = headers ) #NEWLINE#
pandas . concat ( [ df [ 'foo' ] . dropna ( ) , df [ 'bar' ] . dropna ( ) ] ) . reindex_like ( df ) #NEWLINE#
Level4 . objects . filter ( level3__level2__level1 = my_level1_object ) #NEWLINE#
df2 = df . reset_index ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
pylab . ylim ( [ 0 , 1000 ] ) #NEWLINE#
d . stack ( ) . groupby ( level = 0 ) . apply ( pd . Series . value_counts ) . unstack ( ) . fillna ( 0 ) #NEWLINE#
root . findall ( '{http://www.w3.org/2002/07/owl#}Class' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . drop ( 'a' , level = 1 , axis = 1 ) #NEWLINE#
[ [ x [ 0 ] for x in listD [ 3 ] ] ] #NEWLINE#
package_directory = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
df1 . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] , inplace = True ) #NEWLINE#
print ( 'I#SPACE#have:#SPACE#{0.price}' . format ( card ) ) #NEWLINE#
"""{1}#SPACE#{ham}#SPACE#{0}#SPACE#{foo}#SPACE#{1}""" . format ( 10 , 20 , foo = 'bar' , ham = 'spam' ) #NEWLINE#
subprocess . call ( [ 'ECHO' , 'Ni' ] , shell = True ) #NEWLINE#
"""[a-zA-Z\\d-]{,63}(\\.[a-zA-Z\\d-]{,63})*""" #NEWLINE#
any ( item [ 2 ] == 0 for item in items ) #NEWLINE#
dict ( ( v , k ) for k , v in map . items ( ) ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( '5Min' ) ) [ 'val' ] . apply ( lambda x : len ( x ) > 3 ) #NEWLINE#
Counter ( [ 1 , 2 , 2 , 2 , 3 ] ) - Counter ( [ 1 , 2 ] ) #NEWLINE#
requests . get ( 'https://kennethreitz.com' , verify = False ) #NEWLINE#
pd . merge ( df1 , df2 , on = [ 'A' , 'B' , 'C' , 'D' ] , how = 'inner' ) #NEWLINE#
time . strptime ( 'Mon#SPACE#Jul#SPACE#09#SPACE#09:20:28#SPACE#+0000#SPACE#2012' , '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#+0000#SPACE#%Y' ) #NEWLINE#
"""#SPACE#""" . join ( my_list ) #NEWLINE#
request . GET . <STR0> ( 'id' ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"{}"' . format ( value ) ) #NEWLINE#
[ re . split ( '_(?:f?or|and)_' , s ) for s in l ] #NEWLINE#
re . sub ( '\\b0+(?!\\b)' , '' , '012+2+0-01+204-0' ) #NEWLINE#
plt . show ( ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#VALUES#SPACE#(%s,#SPACE#%s,#SPACE#%s)' , ( var1 , var2 , var3 ) ) #NEWLINE#
pd . concat ( [ df1 , df2 ] , axis = 1 , keys = [ 'precedingWord' , 'comp' ] ) #NEWLINE#
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ] #NEWLINE#
glob . glob ( 'hello*.txt' ) #NEWLINE#
glob . glob ( '[!hello]*.txt' ) #NEWLINE#
Book . objects . filter ( author__id = 1 ) . filter ( author__id = 2 ) #NEWLINE#
{ k : v for d in dicts for k , v in list ( d . items ( ) ) } #NEWLINE#
re . sub ( '\\b(.+)(\\s+\\1\\b)+' , '\\1' , s ) #NEWLINE#
TIME_ZONE = 'Europe/Istanbul' #NEWLINE#
re . search ( 'is' , String ) . start ( ) #NEWLINE#
doc . xpath ( "//a[starts-with(text(),'some#SPACE#text')]" ) #NEWLINE#
df . drop ( 'column_name' , axis = 1 , inplace = True ) #NEWLINE#
plt . yscale ( 'log' , nonposy = 'clip' ) #NEWLINE#
sum ( item [ 'gold' ] for item in myLIst ) #NEWLINE#
item = re . sub ( '#SPACE#\\(\\w+\\)' , '' , item ) #NEWLINE#
[ item for item in my_list if 1 <= item <= 5 ] #NEWLINE#
re . compile ( '\\w+' ) . findall ( 'Hello#SPACE#world,#SPACE#my#SPACE#name#SPACE#is...James#SPACE#the#SPACE#2nd!' ) #NEWLINE#
plt . xticks ( dates , rotation = '25' ) #NEWLINE#
re . sub ( '(\\d+)' , '"\\1"' , 'This#SPACE#is#SPACE#number#SPACE#1#SPACE#and#SPACE#this#SPACE#is#SPACE#number#SPACE#22' ) #NEWLINE#
url ( '^mah_root/$' , 'someapp.views.mah_view' , name = 'mah_view' ) , #NEWLINE#
pd . DataFrame ( d ) #NEWLINE#
[ 'Eighty' , 'seven' , 'miles' , 'to' , 'go' , 'yet' , 'Onward' ] #NEWLINE#
sum ( my_counter . values ( ) ) #NEWLINE#
[ tuple ( int ( i ) for i in el . strip ( '()' ) . split ( ',' ) ) for el in s . split ( '),(' ) ] #NEWLINE#
df . sort ( 'C' ) . drop_duplicates ( subset = [ 'A' , 'B' ] , take_last = True ) #NEWLINE#
sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
df . sort ( [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] , inplace = True ) #NEWLINE#
[ i . split ( ) for i in re . findall ( '\\[([^\\[\\]]+)\\]' , a ) ] #NEWLINE#
print ( '{0:<15}{1:<15}{2:<8}' . format ( '1' , '2' , '3' ) ) #NEWLINE#
logging . getLogger ( 'urllib3' ) . setLevel ( logging . WARNING ) #NEWLINE#
[ [ X [ i ] [ j ] for j in range ( len ( X [ i ] ) ) ] for i in range ( len ( X ) ) ] #NEWLINE#
map ( int , [ '1' , '2' , '3' ] ) #NEWLINE#
dict ( ( k , v ) for k , v in hand . items ( ) if v ) #NEWLINE#
df . replace ( '-' , np . nan ) #NEWLINE#
df [ 'Season2' ] = df [ 'Season' ] . apply ( split_it ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 5 ) , columns = [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
re . search ( '\\bis\\b' , String ) . start ( ) #NEWLINE#
sorted ( data . values ( ) ) #NEWLINE#
__init__ . py #NEWLINE#
getattr ( test , a_string ) #NEWLINE#
time . strptime ( '04/25/2005#SPACE#10:19' , '%m/%d/%Y#SPACE#%H:%M' ) #NEWLINE#
folder = os . path . join ( 'C:\\' , 'Users' , 'Sprinting' , 'blue' ) #NEWLINE#
sys . path . insert ( 0 , '..' ) #NEWLINE#
pd . merge ( frame_1 , frame_2 , left_on = 'county_ID' , right_on = 'countyid' ) #NEWLINE#
server = smtplib . SMTP ( host = 'smtp.gmail.com' , port = 587 ) #NEWLINE#
len ( dict_test ) + sum ( len ( v ) for v in dict_test . values ( ) ) #NEWLINE#
[ o . my_attr for o in my_list ] #NEWLINE#
plt . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
sorted ( [ '14:10:01' , '03:12:08' ] ) #NEWLINE#
[ i for i in x if i in y ] #NEWLINE#
df . set_index ( 'month' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * int ( y ) , [ '2' , '3' , '4' ] ) #NEWLINE#
[ 'w' , 'time' , '*' , 'sin' ] #NEWLINE#
print ( text . encode ( 'windows-1252' ) ) #NEWLINE#
order_array . sort ( order = [ 'year' , 'month' , 'day' ] ) #NEWLINE#
list ( range ( 0 , len ( s ) , 3 ) ) #NEWLINE#
sorted ( l , key = lambda x : int ( re . search ( '\\d+' , x ) . group ( 0 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'Season' ] . str [ : 4 ] . astype ( int ) #NEWLINE#
gca ( ) . get_lines ( ) [ n ] . get_xydata ( ) #NEWLINE#
df . loc [ ( df . loc [ : , ( df . dtypes != object ) ] != 0 ) . any ( 1 ) ] #NEWLINE#
pyplot . plot ( x , y , color = '#112233' ) #NEWLINE#
"""""" . join ( [ c for c in strs if c . isdigit ( ) ] ) #NEWLINE#
dict ( ( k , int ( v ) ) for k , v in ( e . split ( '#SPACE#-#SPACE#' ) for e in s . split ( ',' ) ) ) #NEWLINE#
dict ( ( i , i * 2 ) for i in range ( 10 ) ) #NEWLINE#
dict ( [ x . split ( '=' ) for x in s . split ( ) ] ) #NEWLINE#
[ ( x + tuple ( y ) ) for x , y in zip ( zip ( a , b ) , c ) ] #NEWLINE#
[ 'BMW' , 'VW' , 'b' , 'Volvo' , 'c' ] #NEWLINE#
{ i : ( i * 2 ) for i in range ( 10 ) } #NEWLINE#
df2 . rename ( columns = { 'OCHR' : 'chr' , 'OSTOP' : 'pos' } , inplace = True ) #NEWLINE#
re . findall ( '(?=(\\w\\w))' , 'hello' ) #NEWLINE#
time . mktime ( dt . timetuple ( ) ) + dt . microsecond / 1000000.0 #NEWLINE#
list ( replace ( [ 1 , 2 , 3 , 2 , 2 , 3 , 1 , 2 , 4 , 2 ] , to_replace = 2 , fill = 'apple' ) ) #NEWLINE#
df . loc [ df [ 'column_name' ] . isin ( b ) ] #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
print ( [ i . split ( '/' ) [ 1 ] for i in input if '/' in i ] ) #NEWLINE#
binascii . a2b_hex ( s ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#VALUES#SPACE#(?,#SPACE#?,#SPACE#?)' , ( var1 , var2 , var3 ) ) #NEWLINE#
s [ : : 2 ] , s [ 1 : : 2 ] #NEWLINE#
print ( '引起的或' ) #NEWLINE#
sum ( item [ 'one' ] for item in list ( tadas . values ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . replace ( '#SPACE#' , '_' , regex = True ) #NEWLINE#
[ ( x1 - x2 ) for x1 , x2 in zip ( List1 , List2 ) ] #NEWLINE#
[ [ ] for i in range ( 3 ) ] #NEWLINE#
re . findall ( '\\s+|\\S+' , s ) #NEWLINE#
sorted ( unsorted_list , key = lambda x : order . get ( x , - 1 ) ) #NEWLINE#
sorted ( x [ : : - 1 ] for x in enumerate ( [ 'z' , 'a' , 'c' , 'x' , 'm' ] ) ) #NEWLINE#
myDict = { key : val for key , val in list ( myDict . items ( ) ) if val != 42 } #NEWLINE#
[ 3 , 4 , 1 , 2 ] #NEWLINE#
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ] #NEWLINE#
soup . find_all ( 'a' , string = 'Elsie' ) #NEWLINE#
print ( urllib . request . urlopen ( 'http://google.com' ) . read ( ) ) #NEWLINE#
array ( [ 0 , 1 , 2 , 3 ] , dtype = int64 ) , array ( [ 1 , 0 , 1 , 2 ] , dtype = int64 ) #NEWLINE#
df . sort_values ( [ 'a' , 'b' ] , ascending = [ True , False ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( - 1 , 'stackoverflow' ) , ( 1 , 'so' ) , ( 0 , '#SPACE#is#SPACE#' ) , ( - 1 , 'very' ) , ( 0 , '#SPACE#cool' ) ] #NEWLINE#
list3 = [ ( a + b ) for a , b in zip ( list1 , list2 ) ] #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
1.0j * np . arange ( 5 ) #NEWLINE#
re . sub ( '\\b(this|string)\\b' , '<markup>\\1</markup>' , 'this#SPACE#is#SPACE#my#SPACE#string' ) #NEWLINE#
[ ( a if a <STR0> 2 ) for a in [ 0 , 1 , 0 , 3 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( trial_list , key = lambda x : trial_dict [ x ] ) #NEWLINE#
df . groupby ( 'a' ) [ 'b' ] . sum ( ) [ 1 ] #NEWLINE#
pd . concat ( d , ignore_index = True ) #NEWLINE#
df2 . groupby ( 'Name' ) . apply ( tgrp ) #NEWLINE#
os . stat ( 'C:\\Python27\\Lib\\genericpath.py' ) . st_size #NEWLINE#
super ( Instructor , self ) . __init__ ( name , year ) #NEWLINE#
random . sample ( list ( range ( 1 , 16 ) ) , 3 ) #NEWLINE#
s . translate ( None , string . punctuation ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#OR#SPACE#REPLACE#SPACE#INTO#SPACE#master.table1#SPACE#SELECT#SPACE#*#SPACE#FROM#SPACE#table1' ) #NEWLINE#
d = { k : v for k , v in list ( d . items ( ) ) if v > 0 } #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda name_num : ( name_num [ 0 ] . rsplit ( None , 1 ) [ 0 #NEWLINE# ] , name_num [ 1 ] ) ) #NEWLINE#
open ( 'file.bla' , 'wb' ) #NEWLINE#
ax . tick_params ( axis = 'y' , direction = 'out' ) #NEWLINE#
df . groupby ( [ 'A' , 'B' ] ) [ 'C' ] . unique ( ) #NEWLINE#
result = [ item for word in words for item in word . split ( ',' ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
scipy . io . savemat ( 'test.mat' , data ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( '5Min' ) ) [ 'val' ] . mean ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( np . linspace ( 1 , 3 , num = 5 ) ) #NEWLINE#
[ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' , 'g' ] , [ 'd' , 's' , 'd' , 'a' ] ] #NEWLINE#
d = OrderedDict ( [ ( 'key1' , 'value1' ) , ( 'key2' , 'value2' ) , ( 'key3' , 'value3' ) ] ) #NEWLINE#
plt . figure ( figsize = ( 3 , 4 ) ) #NEWLINE#
df [ 'col' ] = df [ 'col' ] . map ( int ) #NEWLINE#
"""""" . join ( filter ( str . isdigit , '12454v' ) ) #NEWLINE#
[ ( t [ 1 ] , t [ 0 ] ) for t in mylist ] #NEWLINE#
re . findall ( '<wx\\.[^<]*<[^<]*>#SPACE#>' , i ) #NEWLINE#
file . close ( ) #NEWLINE#
exec ( compile ( open ( 'helloworld.py' ) . read ( ) , 'helloworld.py' , 'exec' ) ) #NEWLINE#
df . groupby ( [ 'id' , 'date1' ] ) . apply ( lambda x : ( x [ 'date1' ] == x [ 'date2' ] ) . sum ( ) ) #NEWLINE#
df . reindex ( columns = list [ 'cd' ] ) #NEWLINE#
df [ 'Qu1' ] . value_counts ( ) #NEWLINE#
print ( hashlib . md5 ( open ( full_path , 'rb' ) . read ( ) ) . hexdigest ( ) ) #NEWLINE#
df [ [ 'IV' , 'Vega' ] ] = df . apply ( newtonRap , axis = 1 ) #NEWLINE#
s = s . replace ( 'M' , '' ) #NEWLINE#
df . insert ( 1 , ( 'level1' , 'age' ) , pd . Series ( [ 13 ] ) ) #NEWLINE#
"""{0}#SPACE#%s#SPACE#{1}""" . format ( 'foo' , 'bar' ) #NEWLINE#
self . process . terminate ( ) #NEWLINE#
re . compile ( '{}-\\d*' . format ( user ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'Date' : [ 'Foo' , 'Bar' ] , '123' : [ '456' , '789' ] , 'abc' : [ 'def' , 'ghi' ] } #NEWLINE#
[ 1 , 1 , 3 , 3 , 3 , 2 , 2 , 1 , 2 , 0 , 0 , 0 , 1 ] #NEWLINE#
logging . info ( 'date={}' . format ( date ) ) #NEWLINE#
df . to_dict ( 'records' ) #NEWLINE#
key = lambda x : sum ( y [ 'play' ] for y in x ) #NEWLINE#
np . all ( np . all ( test , axis = 2 ) , axis = 1 ) #NEWLINE#
numpy . ma . array ( strided , mask = mask ) #NEWLINE#
mylist . sort ( key = operator . itemgetter ( 'weight' , 'factor' ) ) #NEWLINE#
chr ( int ( 'fd9b' , 16 ) ) . encode ( 'utf-8' ) #NEWLINE#
request . GET . get ( 'username' , '' ) #NEWLINE#
self . depositLabel . config ( text = 'change#SPACE#the#SPACE#value' ) #NEWLINE#
L = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
{ { car . date_of_manufacture . strftime ( '%Y-%m-%d' ) } } #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
ax . plot ( x , y , 'bo' ) #NEWLINE#
map ( int , example_string . split ( ',' ) ) #NEWLINE#
keys = { 'a' : 'append' , 'h' : 'horse' , 'e' : 'exp' , 's' : 'see' } #NEWLINE#
Test . objects . filter ( actions__contains = [ { 'fixed_key_1' : 'foo2' } ] ) #NEWLINE#
country_data_table . rename ( columns = { 'value' : country . name } , inplace = True ) #NEWLINE#
system ( 'python#SPACE#myscript.py' ) #NEWLINE#
np . add . at ( a , np . array ( [ 1 , 2 , 2 , 1 , 3 ] ) , np . array ( [ 1 , 1 , 1 , 1 , 1 ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
Counter ( { '12392' : 2 , '7862' : 1 } ) #NEWLINE#
re . sub ( '[\\W_]+' , '' , s ) #NEWLINE#
df . mean ( axis = 1 ) #NEWLINE#
df . sort_values ( [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] , inplace = True ) #NEWLINE#
zip ( * np . where ( a == 1 ) ) #NEWLINE#
DataFrame . from_csv ( 'c:/~/trainSetRel3.txt' , sep = '\t' ) #NEWLINE#
urllib . parse . unquote ( urllib . parse . unquote ( 'FireShot3%2B%25282%2529.png' ) ) #NEWLINE#
{ k : v for k , v in ( e . split ( ':' ) for e in lis ) } #NEWLINE#
[ [ 0 , 1 , 5 ] , [ 2 , 3 ] , [ 13 , 14 ] , [ 4 ] , [ 6 , 7 ] , [ 8 , 9 , 10 , 11 ] , [ 12 ] , [ 15 ] ] #NEWLINE#
random . sample ( range ( 1 , 50 ) , 6 ) #NEWLINE#
os . path . abspath ( __file__ ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE#
a , b = map ( int , input ( ) . split ( ) ) #NEWLINE#
dbb . commit ( ) #NEWLINE#
cur . execute ( 'insert#SPACE#into#SPACE#test#SPACE#(arr)#SPACE#values#SPACE#(?)' , ( x , ) ) #NEWLINE#
sys . exit ( ) #NEWLINE#
fig . subplots_adjust ( wspace = 0 , hspace = 0 ) #NEWLINE#
cdf1 . to_csv ( 'temp.csv' , index = False ) #NEWLINE#
call ( [ './spa' , 'args' , 'to' , 'spa' ] ) #NEWLINE#
setattr ( self , attr , group ) #NEWLINE#
np . array ( [ 1.0j ] ) #NEWLINE#
df . index #NEWLINE#
session . query ( Shots ) . filter_by ( event_id = event_id ) . count ( ) #NEWLINE#
line = line . replace ( ';' , ':' ) #NEWLINE#
df . groupby ( level = 0 , axis = 1 ) . sub ( df [ 'IWWGCW' ] . values ) #NEWLINE#
requests . post ( url , headers = headers , files = files , data = data ) #NEWLINE#
requests . get ( url , verify = True ) #NEWLINE#
sum ( list_of_nums ) #NEWLINE#
split_list = [ the_list [ i : i + n ] for i in range ( 0 , len ( the_list ) , n ) ] #NEWLINE#
plt . plot ( np . unique ( x ) , np . poly1d ( np . polyfit ( x , y , 1 ) ) ( np . unique ( x ) ) ) #NEWLINE#
session . query ( User ) . filter_by ( id = 123 ) . update ( { 'name' : 'Bob#SPACE#Marley' } ) #NEWLINE#
df . loc [ '2000-1-1' : '2000-3-31' ] #NEWLINE#
requests . get ( url , verify = '/path/to/cert.pem' ) #NEWLINE#
os . system ( 'taskkill#SPACE#/im#SPACE#make.exe' ) #NEWLINE#
re . sub ( '\\((\\w+)\\)' , '\\1' , s ) #NEWLINE#
[ re . search ( '\\d{4}' , s ) for s in lst ] #NEWLINE#
[ i for i in range ( len ( a ) ) if a [ i ] > 2 ] #NEWLINE#
print ( str ( a ) + '#SPACE#plus#SPACE#' + str ( b ) + '#SPACE#equals#SPACE#' + str ( a + b ) ) #NEWLINE#
sum ( len ( x ) for x in list ( food_colors . values ( ) ) ) #NEWLINE#
session . query ( Shots ) . filter_by ( event_id = event_id ) #NEWLINE#
numpy . delete ( a , index ) #NEWLINE#
urlparse . urldefrag ( 'http://www.address.com/something#something' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
x = numpy . delete ( x , 2 , axis = 1 ) #NEWLINE#
"""""" . join ( [ ( '/x%02x' % ord ( c ) ) for c in 'hello' ] ) #NEWLINE#
[ row [ 1 ] for row in A ] #NEWLINE#
sorted ( lst , key = lambda x : ( - sum ( x [ 1 : ] ) , x [ 0 ] ) ) #NEWLINE#
yield Request ( url = url , callback = self . parse , meta = { 'page' : 1 } ) #NEWLINE#
p = re . compile ( '((?:Friday|Saturday)\\s*\\d{1,2})' ) #NEWLINE#
np . where ( np . diff ( arr [ : , ( 1 ) ] ) ) [ 0 ] + 1 #NEWLINE#
open ( 'file' , 'rb' ) #NEWLINE#
print ( 'Total#SPACE#score#SPACE#for#SPACE#{}#SPACE#is#SPACE#{}' . format ( name , score ) ) #NEWLINE#
root . configure ( background = 'black' ) #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
re . sub ( '[^#SPACE#-\ud7ff\t\n\r\ue000-�က0-ჿFF]+' , '' , text ) #NEWLINE#
win . show ( ) #NEWLINE#
[ [ 1 , 4 ] , [ 6 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
[ ( x , y ) for x , y in zip ( myList , myList [ 1 : ] ) if y == 9 ] #NEWLINE#
sum ( sum ( x ) for x in lists ) #NEWLINE#
"""Hello#SPACE#{user[name]}""" . format ( ** { 'user' : { 'name' : 'Markus' } } ) #NEWLINE#
re . sub ( '^(.+?)\\1+$' , '\\1' , input_string ) #NEWLINE#
min ( list , key = lambda x : float ( 'inf' ) if math . isnan ( x [ 1 ] ) else x [ 1 ] ) #NEWLINE#
sorted ( a , key = dict . values , reverse = True ) #NEWLINE#
df . groupby ( 'Mt' ) . first ( ) #NEWLINE#
print ( r . sub ( '\\1_STATUS#SPACE#=#SPACE#"\\2"\\n\\1_TIME#SPACE#=#SPACE#\\3' , content ) ) #NEWLINE#
Entry . objects . filter ( ~ Q ( id = 3 ) ) #NEWLINE#
df . groupby ( 'Event' ) . Status . value_counts ( ) . unstack ( ) . fillna ( 0 ) #NEWLINE#
MyModel . objects . using ( 'my_non_default_database' ) . get_or_create ( name = 'Bob' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 't-1' ] = df [ 't' ] . shift ( 1 ) #NEWLINE#
your_string . strip ( '0' ) #NEWLINE#
stringnamehere . decode ( 'utf-8' , 'ignore' ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
rdd . map ( lambda k_v : ( set ( k_v [ 0 ] ) , k_v [ 1 ] ) ) . groupByKey ( ) . collect ( ) #NEWLINE#
[ x . encode ( 'UTF8' ) for x in EmployeeList ] #NEWLINE#
list ( range ( 10 , 0 , - 1 ) ) #NEWLINE#
np . any ( np . in1d ( a1 , a2 ) ) #NEWLINE#
df . reindex ( columns = [ 'n' ] + df . columns [ : - 1 ] . tolist ( ) ) #NEWLINE#
df . groupby ( [ 'item' , 'price' ] ) . region . apply ( f ) #NEWLINE#
pd . to_numeric ( a , errors = 'coerce' ) . fillna ( - 1 ) #NEWLINE#
groupby ( tags , key = operator . itemgetter ( 0 ) ) #NEWLINE#
a = sorted ( a , key = lambda x : x . modified , reverse = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ item for item in my_sequence if item != 'item' ] #NEWLINE#
df [ 'Date' ] . str . extract ( '(?P<year>\\d{4})' ) . astype ( int ) #NEWLINE#
os . environ [ 'REMOTE_ADDR' ] #NEWLINE#
stores [ 'region' ] = stores [ 'region' ] . astype ( 'category' ) #NEWLINE#
line = line . decode ( 'utf-8' , 'ignore' ) . encode ( 'utf-8' ) #NEWLINE#
MyModel . objects . order_by ( '?' ) [ : 2 ] #NEWLINE#
self . axes = self . figure . add_axes ( [ 0 , 0 , 1 , 1 ] ) #NEWLINE#
df2 . plot ( kind = 'bar' , stacked = True ) #NEWLINE#
subprocess . Popen ( 'PokÃ©mon.mp3' , shell = True ) #NEWLINE#
set ( [ 'a' , 'b' , 'c' , 'd' ] ) #NEWLINE#
hashlib . md5 ( open ( 'filename.exe' , 'rb' ) . read ( ) ) . hexdigest ( ) #NEWLINE#
subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
sum ( d * 10 ** i for i , d in enumerate ( x [ : : - 1 ] ) ) #NEWLINE#
data = [ line [ i : i + 12 ] for i in range ( 0 , len ( line ) , 12 ) ] #NEWLINE#
numpy . savetxt ( 'output.dat' , my_array . reshape ( ( 4 , 2 ) ) , fmt = '%f#SPACE#%i' ) #NEWLINE#
conn . commit ( ) #NEWLINE#
df . pivot_table ( values = 'value' , index = [ 'year' , 'month' ] , columns = 'item' ) #NEWLINE#
quadmesh . set_clim ( vmin = 0 , vmax = 15 ) #NEWLINE#
dparser . parse ( 'monkey#SPACE#10/01/1980#SPACE#love#SPACE#banana' , fuzzy = True ) #NEWLINE#
requests . post ( 'http://httpbin.org/post' , json = { 'test' : 'cheers' } ) #NEWLINE#
"""package#SPACE#([^\\s]+)\\s+is([\\s\\S]*)end\\s+(package|\\1)\\s*;""" #NEWLINE#
A ( 1 ) + A ( 2 ) #NEWLINE#
df . groupby ( [ 'year' , 'month' , 'item' ] ) [ 'value' ] . sum ( ) . unstack ( 'item' ) #NEWLINE#
somelist . sort ( key = lambda x : x . resultType ) #NEWLINE#
[ 'a' , 'c' ] #NEWLINE#
CoverageACol = numpy . array ( [ [ 'a' , 'b' ] , [ 'c' , 'd' ] ] , dtype = numpy . dtype ( 'a16' ) ) #NEWLINE#
df . colour . value_counts ( ) . plot ( kind = 'bar' ) #NEWLINE#
mylist . sort ( ) #NEWLINE#
dictlist = [ dict ( ) for x in range ( n ) ] #NEWLINE#
write ( s . encode ( 'latin-1' ) ) #NEWLINE#
numpy . concatenate ( [ a , b ] ) #NEWLINE#
plt . xscale ( 'log' , subsx = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
print ( re . match ( '[^/]+' , text ) . group ( 0 ) ) #NEWLINE#
t = s [ : 1 ] + 'whatever' + s [ 6 : ] #NEWLINE#
datetime . datetime . now ( ) + datetime . timedelta ( seconds = 10 ) #NEWLINE#
dict ( ( k , v ) for k , v in parent_dict . items ( ) if k > 2 and k < 4 ) #NEWLINE#
requests . post ( url , headers = headers , data = data , files = files ) #NEWLINE#
df [ ( df [ 'A' ] > 1 ) | ( df [ 'B' ] < - 1 ) ] #NEWLINE#
[ 'foo.bar' , 'foo.baz' ] #NEWLINE#
dict_names [ 'd1' ] [ 'name' ] #NEWLINE#
re . split ( '(\\d+)' , 'a1b2c30d40' ) #NEWLINE#
a [ [ [ 0 , 0 ] , [ 0 , 0 ] ] , [ [ 0 , 0 ] , [ 0 , 0 ] ] , [ [ 0 , 0 ] , [ 0 , 0 ] ] ] #NEWLINE#
matrix = [ [ [ 's1' , 's2' ] , [ 's3' ] ] , [ [ 's4' ] , [ 's5' ] ] ] #NEWLINE#
return '' . join ( soup . findAll ( text = True ) ) #NEWLINE#
sorted ( [ '1:14' , '8:01' , '12:46' , '6:25' ] , key = daytime ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
"""${:.2f}""" . format ( amount ) #NEWLINE#
[ x ( y ) for x , y in zip ( functions , values ) ] #NEWLINE#
unique_data = [ list ( x ) for x in set ( tuple ( x ) for x in testdata ) ] #NEWLINE#
unittest . main ( ) #NEWLINE#
[ s . strip ( ) for s in re . split ( ',|;' , string ) ] #NEWLINE#
df = pandas . DataFrame ( data , columns = [ 'R_Number' , 'C_Number' , 'Avg' , 'Std' ] ) #NEWLINE#
listTwo . sort ( key = lambda x : listOne . index ( x [ 'eyecolor' ] ) ) #NEWLINE#
os . walk ( directory ) #NEWLINE#
pd . DataFrame ( df . values - df2 . values , columns = df . columns ) #NEWLINE#
d = dict ( ( k , v ) for k , v in d . items ( ) if v > 0 ) #NEWLINE#
subprocess . call ( [ 'ECHO' , 'Ni' ] ) #NEWLINE#
df . groupby ( grouper ) [ 'value' ] . cumsum ( ) #NEWLINE#
df . groupby ( level = [ 0 , 1 ] ) . agg ( [ 'median' , 'quantile' ] ) #NEWLINE#
np . isnan ( a ) . sum ( ) #NEWLINE#
writer . writerows ( A ) #NEWLINE#
np . einsum ( 'im,jm,km->ijk' , x , y , z ) #NEWLINE#
file . write ( 'My#SPACE#String\n' ) #NEWLINE#
date . today ( ) . strftime ( '%A' ) #NEWLINE#
re . search ( '[a-z]*' , '1234' ) #NEWLINE#
k = hashlib . md5 ( 'thecakeisalie' ) . hexdigest ( ) #NEWLINE#
pd . concat ( [ df_slcd , signs ] , axis = 1 ) #NEWLINE#
today . strftime ( '%B' ) #NEWLINE#
[ ( i , j ) for i in range ( 1 , 3 ) for j in range ( 1 , 5 ) ] #NEWLINE#
[ t . strip ( ) for s in string . split ( ',' ) for t in s . split ( ';' ) ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x [ y ] , [ 4 , 3 , 2 ] , nestedList ) #NEWLINE#
df . resample ( 'M' ) . ffill ( ) . resample ( 'H' ) . ffill ( ) . tail ( ) #NEWLINE#
df . apply ( lambda x : x . fillna ( x . mean ( ) ) , axis = 0 ) #NEWLINE#
root . destroy ( ) #NEWLINE#
plt . savefig ( '/tmp/test.png' , bbox_inches = 'tight' ) #NEWLINE#
re . sub ( '[^0-9]' , '' , 'sdkjh987978asd098as0980a98sd' ) #NEWLINE#
dict ( ( k . lower ( ) , v . lower ( ) ) for k , v in { 'My#SPACE#Key' : 'My#SPACE#Value' } . items ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
subprocess . call ( [ 'gnome-terminal' , '-x' , 'python#SPACE#bb.py' ] ) #NEWLINE#
re . split ( '\\d*,\\d*' , mystring ) #NEWLINE#
np . nonzero ( np . any ( a , axis = 0 ) ) [ 0 ] #NEWLINE#
strings . sort ( key = lambda str : re . sub ( '.*%' , '' , str ) ) #NEWLINE#
[ x [ 0 ] for x in l1 if any ( x [ 0 ] == y [ 0 ] for y in l2 ) ] #NEWLINE#
a . sort ( key = operator . itemgetter ( 2 , 3 ) ) #NEWLINE#
open ( 'demo.txt' , 'r' ) . read ( ) #NEWLINE#
plt . xticks ( rotation = '25' ) #NEWLINE#
sum ( d . values ( ) ) #NEWLINE#
print ( os . environ [ 'DEBUSSY' ] ) #NEWLINE#
a = [ 0 ] * 10000 #NEWLINE#
subprocess . Popen ( 'proc2' , env = env ) #NEWLINE#
df [ 'Month' ] = df [ 'Date' ] . apply ( lambda x : x . strftime ( '%b' ) ) #NEWLINE#
print ( [ ( '%5.3f' % val ) for val in l ] ) #NEWLINE#
admin . site . register ( Blog , BlogAdmin ) #NEWLINE#
data . apply ( lambda x : sorted ( x , 3 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ [ 1 , 1 , 2 ] , [ 1 , 1 , 3 ] ] #NEWLINE#
lst = [ 'foo.py' , 'bar.py' , 'baz.py' , 'qux.py' , Ellipsis ] #NEWLINE#
open ( 'textbase.txt' , 'Ur' ) #NEWLINE#
sorted ( results , key = itemgetter ( 'year' ) ) #NEWLINE#
re . findall ( '\\w+(?:-\\w+)+' , text ) #NEWLINE#
sorted ( s , key = float ) #NEWLINE#
print ( '%gxÂ³#SPACE#+#SPACE#%gxÂ²#SPACE#+#SPACE#%gx#SPACE#+#SPACE#%g#SPACE#=#SPACE#0' % ( a , b , c , d ) ) #NEWLINE#
re . split ( '\n\\s*\n' , s ) #NEWLINE#
[ [ td . findNext ( text = True ) for td in tr . findAll ( 'td' ) ] for tr in rows ] #NEWLINE#
b = a . decode ( 'utf8' ) [ : : - 1 ] . encode ( 'utf8' ) #NEWLINE#
conn . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#(ColName)#SPACE#VALUES#SPACE#(?);' , [ ',' . join ( list ) ] ) #NEWLINE#
gtk . main ( ) #NEWLINE#
ax . set_ylim ( ( - 10 , 80.0 ) ) #NEWLINE#
np . delete ( a , list ( range ( 0 , a . shape [ 1 ] , 8 ) ) , axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( df . index . year ) . sum ( ) . head ( ) #NEWLINE#
[ i for i , x in enumerate ( [ 1 , 2 , 3 , 2 ] ) if x == 2 ] #NEWLINE#
a [ np . argsort ( a [ : , ( 1 ) ] ) ] #NEWLINE#
print ( '#SPACE#' . join ( i for i in word . split ( '#SPACE#' ) if not i . endswith ( ':' ) ) ) #NEWLINE#
np . asarray ( [ 1 , 2 , 3 , 4 ] , dtype = int ) #NEWLINE#
urlpatterns = patterns ( '' , ( '' , include ( 'myapp.urls' ) ) ) #NEWLINE#
itertools . permutations ( [ 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] ) #NEWLINE#
array ( [ [ 1 , 2 ] , [ 7 , 8 ] , [ 3 , 4 ] , [ 9 , 10 ] , [ 5 , 6 ] , [ 11 , 12 ] ] ) #NEWLINE#
self . fields [ 'author' ] . queryset = choices #NEWLINE#
plt . show ( ) #NEWLINE#
l = [ int ( x ) for x in s . split ( ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
os . listdir ( 'path' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . gca ( ) . set_xscale ( 'custom' ) #NEWLINE#
desired_array = [ int ( numeric_string ) for numeric_string in current_array ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( x [ 0 ] , x [ 1 ] ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
lst . append ( map ( int , z ) ) #NEWLINE#
app . run ( ) #NEWLINE#
cv2 . imwrite ( 'half_circle_no_round.jpg' , image ) #NEWLINE#
cv2 . imwrite ( 'half_circle_rounded.jpg' , image ) #NEWLINE#
return jsonify ( my_list_of_eqtls ) #NEWLINE#
[ 'blue' , 'blue' , 'red' , 'red' , 'green' ] #NEWLINE#
shutil . copyfile ( '\\\\?\\' + copy_file , dest_file ) #NEWLINE#
system ( '/path/to/my/venv/bin/python#SPACE#myscript.py' ) #NEWLINE#
arr = [ line . split ( ',' ) for line in open ( './urls-eu.csv' ) ] #NEWLINE#
tree . xpath ( ".//a[text()='Example']" ) [ 0 ] . tag #NEWLINE#
[ x for y , x in sorted ( zip ( Y , X ) ) ] #NEWLINE#
f . write ( g . read ( ) ) #NEWLINE#
pd . to_datetime ( df . ID . str [ 1 : - 3 ] ) #NEWLINE#
zip ( * sorted ( enumerate ( a ) , key = operator . itemgetter ( 1 ) ) ) [ 0 ] [ - 2 : ] #NEWLINE#
np . array ( [ fnan , pinf , ninf ] ) < 0 #NEWLINE#
print ( arr [ 1 , 1 ] ) #NEWLINE#
sorted_dict = collections . OrderedDict ( sorted ( d . items ( ) ) ) #NEWLINE#
logging . info ( 'date=%s' , date ) #NEWLINE#
sorted ( zipped , key = lambda x : x [ 1 ] ) #NEWLINE#
[ ( 'Jellicle' , 6 ) , ( 'Cats' , 5 ) , ( 'And' , 2 ) ] #NEWLINE#
print ( '\n\x1b[4m' + '3' + '\x1b[0m' + '\n2' ) #NEWLINE#
app . config [ 'SECURITY_REGISTER_URL' ] = '/create_account' #NEWLINE#
{ 'firstname' : 'Tiger' , 'lastname' : 'Lily' } #NEWLINE#
{ p . id : { 'id' : p . id , 'position' : ind } for ind , p in enumerate ( p_list ) } #NEWLINE#
os . system ( '/bin/bash#SPACE#-c#SPACE#"echo#SPACE#hello#SPACE#world"' ) #NEWLINE#
url = urllib . parse . unquote ( url ) . decode ( 'utf8' ) #NEWLINE#
[ map ( int , x . split ( '\t' ) ) for x in s . rstrip ( ) . split ( '\r\n' ) ] #NEWLINE#
ax2 . legend ( loc = 0 ) #NEWLINE#
print ( re . sub ( '[.]' , '' , re . search ( '(?<=//).*?(?=/)' , str ) . group ( 0 ) ) ) #NEWLINE#
importlib . import_module ( '.c' , 'a.b' ) #NEWLINE#
setStyleSheet ( 'QPushButton#SPACE#{background-color:#SPACE##A3C1DA;#SPACE#color:#SPACE#red;}' ) #NEWLINE#
[ elem . tag for elem in a . iter ( ) if elem is not a ] #NEWLINE#
os . system ( 'top#SPACE#-d#SPACE#30#SPACE#|#SPACE#grep#SPACE#%d#SPACE#>#SPACE#test.txt' % pid ) #NEWLINE#
file = codecs . open ( filename , encoding = 'utf-8' ) #NEWLINE#
piv . unstack ( ) . reset_index ( ) . drop ( 'level_0' , axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( v , k ) for k , v in my_dict . items ( ) ) #NEWLINE#
os . path . join ( 'C:' , 'meshes' , 'as' ) #NEWLINE#
subprocess . check_output ( 'echo#SPACE#"foo"' , shell = True ) #NEWLINE#
"""#SPACE#""" . join ( PorterStemmer ( ) . stem_word ( word ) for word in text . split ( '#SPACE#' ) ) #NEWLINE#
dict ( zip ( keys , zip ( * data ) ) ) #NEWLINE#
del mylist [ : ] #NEWLINE#
list ( df . index ) #NEWLINE#
db . close ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df . iloc [ [ 1 , 2 , 3 , 4 ] , [ 2 , 5 , 6 , 7 , 8 ] ] #NEWLINE#
driver . find_element_by_css_selector ( "input[onclick*='1#SPACE#Bedroom#SPACE#Deluxe']" ) #NEWLINE#
plt . show ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 'Afghanistan' , 'Japan' , 'United#SPACE#Arab#SPACE#Emirates' ] #NEWLINE#
outfile . write ( '##SPACE#New#SPACE#slice\n' ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
df . reindex ( columns = list [ 'abcd' ] ) #NEWLINE#
f = lambda x , y : x + y #NEWLINE#
[ sum ( x ) for x in zip ( * l ) ] #NEWLINE#
data . rename ( columns = { 'gdp' : 'log(gdp)' } , inplace = True ) #NEWLINE#
list ( grouper ( 2 , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) ) #NEWLINE#
print ( [ key for key in d if d [ key ] == 1 ] ) #NEWLINE#
re . findall ( '\\b\\d+\\b' , "he33llo#SPACE#42#SPACE#I'm#SPACE#a#SPACE#32#SPACE#string#SPACE#30" ) #NEWLINE#
app . run ( ) #NEWLINE#
re . sub ( '([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))' , '\\1#SPACE#' , text ) #NEWLINE#
photo . put ( ) #NEWLINE#
app . config [ 'SERVER_NAME' ] = 'example.net' #NEWLINE#
plt . show ( ) #NEWLINE#
driver = webdriver . PhantomJS ( 'C:\\phantomjs-1.9.7-windows\\phantomjs.exe' ) #NEWLINE#
browser . find_elements_by_css ( "input[type='radio'][value='SRF']" ) . click #NEWLINE#
np . zeros ( ( 3 , 3 ) ) . ravel ( ) #NEWLINE#
"""""" . join ( [ 'X#SPACE#is#SPACE#' , x . __format__ ( '' ) ] ) #NEWLINE#
parser . add_argument ( 'FILE' , help = 'File#SPACE#to#SPACE#store#SPACE#as#SPACE#Gist' , nargs = '+' ) #NEWLINE#
x = x [ ~ numpy . isnan ( x ) ] #NEWLINE#
itertools . cycle ( [ 1 , 2 , 3 ] ) #NEWLINE#
grouped . apply ( lambda x : x . sum ( ) if len ( x ) > 2 else None ) . dropna ( ) #NEWLINE#
struct . unpack ( 'd' , b8 ) [ 0 ] #NEWLINE#
np . sqrt ( ( ( A - B ) ** 2 ) . sum ( - 1 ) ) #NEWLINE#
app . run ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
platform . system ( ) #NEWLINE#
[ ( a , b , c ) for a , ( b , c ) in l ] #NEWLINE#
decimal . Decimal ( '%d.%d' % ( random . randint ( 0 , i ) , random . randint ( 0 , j ) ) ) #NEWLINE#
mydic . update ( { i : o [ 'name' ] } ) #NEWLINE#
subprocess . call ( [ './abc.py' , arg1 , arg2 ] ) #NEWLINE#
a . index ( max ( a ) ) #NEWLINE#
print ( '\n' . join ( str ( p ) for p in myList ) ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( 'D' ) ) . transform ( np . cumsum ) . resample ( 'D' , how = 'ohlc' ) #NEWLINE#
{ { my_variable | <STR0> | <STR0> | safe } } #NEWLINE#
list ( map ( tuple , [ [ 'tom' , 'cat' ] , [ 'jerry' , 'mouse' ] , [ 'spark' , 'dog' ] ] ) ) #NEWLINE#
plt . savefig ( 'cap.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
config = { 'name' : 'hello' , 'see?' : 'world' } #NEWLINE#
[ 'xxx' , 'xxx' , 'yyy*a*b*c' , 'xxx*d*e*f' ] #NEWLINE#
list ( set ( listA ) & set ( listB ) ) #NEWLINE#
[ i for i in a if i . isdigit ( ) ] #NEWLINE#
s . sort ( key = operator . attrgetter ( 'resultType' ) ) #NEWLINE#
df2 [ 'revenue' ] = df2 . CET . map ( df1 . set_index ( 'date' ) [ 'revenue' ] ) #NEWLINE#
canvas . create_text ( x , y , font = ( 'Purisa' , 12 ) , text = k ) #NEWLINE#
os . system ( command ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . einsum ( 'ijk,ikl->ijl' , A , B ) #NEWLINE#
[ tup [ 0 ] for tup in A ] #NEWLINE#
plt . show ( ) #NEWLINE#
df [ df . Col1 . isin ( [ 'men' , 'rocks' , 'mountains' ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
"""{0:.{1}%}""" . format ( value , digits ) #NEWLINE#
[ 'alfa' , 'bravo' , 'charlie' , 'delta' , 'echo' ] #NEWLINE#
cur . mogrify ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#table#SPACE#WHERE#SPACE#column#SPACE#IN#SPACE#%s;' , ( ( 1 , 2 , 3 ) , ) ) #NEWLINE#
dict ( ( name , eval ( name , globals ( ) , { } ) ) for name in [ 'i' , 'j' , 'k' ] ) #NEWLINE#
list ( itertools . combinations ( a , 2 ) ) #NEWLINE#
df [ 'BrandName' ] = df [ 'BrandName' ] . replace ( [ 'ABC' , 'AB' ] , 'A' ) #NEWLINE#
tree . find ( '//BODY' ) . text #NEWLINE#
ax . xaxis . tick_top ( ) #NEWLINE#
json . dumps ( your_data , ensure_ascii = False ) #NEWLINE#
s . reset_index ( name = 'New_Name' ) #NEWLINE#
"""""" . join ( chr ( i ) for i in L ) #NEWLINE#
a [ : , ( [ 3 , 4 ] ) ] #NEWLINE#
bigram_measures = nltk . collocations . BigramAssocMeasures ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'the' , 'red' , 'fox' , '' , 'is' ] #NEWLINE#
pickle . load ( open ( 'afile' , 'rb' ) ) #NEWLINE#
writer . writerow ( A ) #NEWLINE#
hs . write ( '{}\n' . format ( name ) ) #NEWLINE#
max ( ld , key = lambda d : d [ 'size' ] ) #NEWLINE#
d . apply ( pd . Series . value_counts , axis = 1 ) . fillna ( 0 ) #NEWLINE#
print ( line . rstrip ( '\n' ) ) #NEWLINE#
"""1**0*""" . replace ( '*' , '[01]' ) #NEWLINE#
sparse . coo_matrix ( ( [ 6 ] , ( [ 5 ] , [ 7 ] ) ) , shape = ( 10 , 10 ) ) #NEWLINE#
B = np . reshape ( A , ( - 1 , 2 ) ) #NEWLINE#
datetime . datetime . strptime ( '01-Jan-1995' , '%d-%b-%Y' ) #NEWLINE#
np . einsum ( 'ij,kj->jik' , X , X ) #NEWLINE#
writer . writerow ( [ item [ 0 ] , item [ 1 ] , item [ 2 ] ] ) #NEWLINE#
root . lift ( ) #NEWLINE#
[ int ( x ) for x in list ( '{0:0b}' . format ( 8 ) ) ] #NEWLINE#
s . split ( 's' ) #NEWLINE#
pd . to_datetime ( tempDF [ 'date' ] , format = '%Y-%m-%d#SPACE#%H:%M:%S.%f' , errors = 'coerce' ) #NEWLINE#
glob . glob ( '*' ) #NEWLINE#
glob . glob ( '[!hello]*' ) #NEWLINE#
workbook = xlsxwriter . Workbook ( 'C:/Users/Steven/Documents/demo.xlsx' ) #NEWLINE#
workbook = xlsxwriter . Workbook ( 'app/smth1/smth2/Expenses01.xlsx' ) #NEWLINE#
print ( '\x1b[1m' + 'Hello' ) #NEWLINE#
a [ [ [ 0 , 0 ] , [ 1 , 1 ] , [ 3 , 3 ] ] , [ [ 0 , 2 ] , [ 0 , 2 ] , [ 0 , 2 ] ] ] #NEWLINE#
numpy . where ( x == x . min ( ) ) #NEWLINE#
re . sub ( '(.*)</div>' , '\\1</bad>' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""{:.5}""" . format ( 'aaabbbccc' ) #NEWLINE#
"""#SPACE#""" . join ( s . split ( ) ) #NEWLINE#
Foo . objects . filter ( Q ( bar_x__name = 'bar#SPACE#x' ) | Q ( bar_y__name = 'bar#SPACE#y' ) ) #NEWLINE#
element = driver . find_element_by_class_name ( 'gbts' ) #NEWLINE#
values = np . array ( [ i for i in range ( 100 ) ] , dtype = np . float64 ) #NEWLINE#
plt . show ( ) #NEWLINE#
request . session [ 'last_activity' ] = datetime . now ( ) #NEWLINE#
list ( zip ( a , b ) ) #NEWLINE#
len ( text . encode ( 'utf-16-le' ) ) // 2 #NEWLINE#
re . sub ( '([characters])' , '\\1\\1' , text . read ( ) ) #NEWLINE#
mercury ( 1 , 1 , 2 ) #NEWLINE#
s . split ( ':' , 1 ) [ 1 ] #NEWLINE#
cleaned_list = [ x for x in some_list if x is not thing ] #NEWLINE#
list ( itertools . product ( * arrays ) ) #NEWLINE#
np . dot ( np . atleast_2d ( a ) . T , np . atleast_2d ( b ) ) #NEWLINE#
sys . path . insert ( 0 , os . path . abspath ( '/my/source/lives/here' ) ) #NEWLINE#
"""""" . join ( [ 'I#SPACE#' , '<' , '3s#SPACE#U#SPACE#' , '&' , '#SPACE#you#SPACE#luvz#SPACE#me' ] ) #NEWLINE#
[ dict ( t ) for t in set ( [ tuple ( d . items ( ) ) for d in l ] ) ] #NEWLINE#
[ x for x in a if x not in [ 2 , 3 , 7 ] ] #NEWLINE#
df . values . tolist ( ) #NEWLINE#
cur . execute ( sql , list ( d . values ( ) ) ) #NEWLINE#
sum ( [ True , True , False , False , False , True ] ) #NEWLINE#
app . run ( debug = True , port = 33507 ) #NEWLINE#
plt . show ( ) #NEWLINE#
subprocess . call ( [ 'curl' , 'http://localhost:2222' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""#SPACE#""" . join ( foo . split ( ) ) #NEWLINE#
request . url #NEWLINE#
array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
L = [ [ 2 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
[ [ 0 , - 1 , - 2 ] , [ 1 , 0 , - 1 ] , [ 2 , 1 , 0 ] ] #NEWLINE#
"""#SPACE##SPACE##SPACE##SPACE#xyz#SPACE##SPACE##SPACE##SPACE##SPACE#""" . rstrip ( ) #NEWLINE#
print ( type ( tf . Session ( ) . run ( tf . constant ( [ 1 , 2 , 3 ] ) ) ) ) #NEWLINE#
M = Matrix ( 2 , 3 , [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
table = soup . find ( 'table' , attrs = { 'class' : 'bp_ergebnis_tab_info' } ) #NEWLINE#
A [ np . all ( np . any ( A - B [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ] #NEWLINE#
np . sqrt ( tangent [ : , ( 0 ) ] * tangent [ : , ( 0 ) ] + tangent [ : , ( 1 ) ] * tangent [ : , ( 1 ) ] ) #NEWLINE#
datetime . datetime . strptime ( 'January#SPACE#11,#SPACE#2010' , '%B#SPACE#%d,#SPACE#%Y' ) . strftime ( '%A' ) #NEWLINE#
users . sort ( key = lambda x : order . index ( x [ 'id' ] ) ) #NEWLINE#
urllib . request . urlretrieve ( 'http://example.com/file.ext' , #NEWLINE# '/path/to/dir/filename.ext' ) #NEWLINE#
df . groupby ( 'STNAME' ) [ 'COUNTY_POP' ] . agg ( lambda x : x . nlargest ( 3 ) . sum ( ) ) #NEWLINE#
pd . to_datetime ( pd . Series ( date_stngs ) ) #NEWLINE#
sorted ( list ( y . items ( ) ) , key = lambda x : ( x [ 1 ] , x [ 0 ] ) , reverse = True ) #NEWLINE#
"""""" . join ( str ( random . randint ( 0 , 9 ) ) for _ in range ( 12 ) ) #NEWLINE#
"""{:.50f}""" . format ( float ( a [ 0 ] / a [ 1 ] ) ) #NEWLINE#
[ list ( i ) for i in set ( tuple ( i ) for i in testdata ) ] #NEWLINE#
print ( getattr ( args , <STR0> ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
output = re . sub ( '(<textarea.*>).*(</textarea>)' , '\\1Bar\\2' , s ) #NEWLINE#
numpy . array ( [ [ key , val ] for key , val in result . items ( ) ] , dtype ) #NEWLINE#
[ i [ 0 ] for i in re . findall ( '((\\d)(?:[()]*\\2*[()]*)*)' , s ) ] #NEWLINE#
window . destroy ( ) #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
os . chdir ( 'C:/Users/Name/Desktop' ) #NEWLINE#
np . fromstring ( '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' , dtype = '<f4' ) #NEWLINE#
df . values . flatten ( ) #NEWLINE#
df [ 'col' ] = df [ 'col' ] . astype ( 'category' ) #NEWLINE#
print ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) #NEWLINE#
multiprocessing . Process ( target = foo , args = ( x , ) ) . start ( ) #NEWLINE#
cookie [ 'Cycle' ] [ 'domain' ] #NEWLINE#
( 'x#SPACE#=#SPACE#%s' % '\\u041c\\u0438\\u0440' ) . encode ( 'utf-8' ) #NEWLINE#
dict ( ( k , v ) for k , v in parent_dict . items ( ) if 2 < k < 4 ) #NEWLINE#
testself . testbed . setup_env ( user_is_admin = '1' ) #NEWLINE#
[ 'ha' , 'cb' , 'dc' , 'sd' ] #NEWLINE#
print ( 'Hi' ) #NEWLINE#
df [ 'N' ] . hist ( by = df [ 'Letter' ] ) #NEWLINE#
df [ 'AB' ] . str . split ( '-' , 1 , expand = True ) #NEWLINE#
imshow ( imageArray , cmap = 'Greys_r' ) #NEWLINE#
Blog . objects . values ( 'id' , 'name' ) #NEWLINE#
sum ( df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 1 ) > 0 ) #NEWLINE#
DataFrame ( { 'count' : df1 . groupby ( [ 'Name' , 'City' ] ) . size ( ) } ) . reset_index ( ) #NEWLINE#
self . license_file . save ( new_name , new_contents ) #NEWLINE#
""",+""" . join ( c . rsplit ( '+' , 1 ) ) #NEWLINE#
ax . set_xlabel ( 'Temperature#SPACE#(℃)' ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"' + str ( value ) + '"' ) #NEWLINE#
Person . objects . exclude ( pets = None ) #NEWLINE#
subprocess . call ( 'tar#SPACE#c#SPACE#my_dir#SPACE#|#SPACE#md5sum' , shell = True ) #NEWLINE#
d [ 'dict3' ] = { 'spam' : 5 , 'ham' : 6 } #NEWLINE#
numpy . array ( [ ( key , val ) for key , val in result . items ( ) ] , dtype ) #NEWLINE#
logging . debug ( 'next#SPACE#line' ) #NEWLINE#
df [ [ 'A' , 'B' ] ] . multiply ( df [ 'C' ] , axis = 'index' ) #NEWLINE#
list ( powerset ( 'abcd' ) ) #NEWLINE#
pd . read_csv ( 'D:/Temp/tt.csv' , names = list ( 'abcdef' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . date ( 2010 , 6 , 16 ) . isocalendar ( ) [ 1 ] #NEWLINE#
df . isnull ( ) . values . any ( ) #NEWLINE#
sys . path . append ( '/path/to/2014_07_13_test' ) #NEWLINE#
[ 'Na' , '2' , 'S' , 'O' , '4' , 'Mn' , 'O' , '4' ] #NEWLINE#
{ i : 'updated' for i , j in list ( d . items ( ) ) if j != 'None' } #NEWLINE#
pd . concat ( [ x ] * 5 ) #NEWLINE#
[ ( x + y ) for x in '12345' for y in 'ab' ] #NEWLINE#
sorted ( a , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = True ) #NEWLINE#
print ( func . __name__ ) #NEWLINE#
fd = os . open ( 'x' , os . O_WRONLY | os . O_CREAT | os . O_EXCL ) #NEWLINE#
[ x for x in lst if fn ( x ) != 0 ] #NEWLINE#
list ( itertools . chain ( * a ) ) #NEWLINE#
headers = { 'Content-Type' : 'application/x-www-form-urlencoded;#SPACE#charset=UTF-8' } #NEWLINE#
Book . objects . create ( ** d ) #NEWLINE#
{ 'physics' : 1 } , { 'volume' : 1 , 'chemistry' : 1 } , { 'chemistry' : 1 } #NEWLINE#
df . to_csv ( 'filename.tsv' , sep = '\t' , index = False ) #NEWLINE#
sum ( [ item [ 'gold' ] for item in example_list ] ) #NEWLINE#
x = [ int ( i ) for i in x . split ( ) ] #NEWLINE#
pd . concat ( [ distancesDF , datesDF . dates ] , axis = 1 ) #NEWLINE#
e = root . xpath ( './/a[text()="TEXT#SPACE#A"]' ) #NEWLINE#
dt . datetime . today ( ) . strftime ( '%m/%d/%Y' ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , '--bo' ) #NEWLINE#
cursor . execute ( 'SHOW#SPACE#TABLES' ) #NEWLINE#
img . show ( ) #NEWLINE#
[ 'a' , 'foobar' , 'FooBar' , 'baz' , 'golf' , 'CART' , 'Foo' ] #NEWLINE#
my_df . loc [ my_df [ 'id' ] . isin ( ids ) , 'other_column' ] += 1 #NEWLINE#
np . isnan ( a ) . sum ( ) / np . prod ( a . shape ) #NEWLINE#
ax . set_ylim ( 0 , 5 ) #NEWLINE#
mypred = myplsda . predict ( Xdata ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . concat ( [ pd . DataFrame ( l ) for l in my_list ] , axis = 1 ) . T #NEWLINE#
( datetime . now ( ) - timedelta ( 1 ) ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
df . pivot_table ( index = 'Event' , columns = 'Status' , aggfunc = len , fill_value = 0 ) #NEWLINE#
re . compile ( '(.)\\1' ) #NEWLINE#
"""{0:.3g}""" . format ( num ) #NEWLINE#
[ map ( int , sublist ) for sublist in lst ] #NEWLINE#
return '' . join ( random . choice ( string . lowercase ) for i in range ( length ) ) #NEWLINE#
"""{0}#SPACE#{1}""" . format ( 10 , 20 ) #NEWLINE#
plt . show ( ) #NEWLINE#
open ( 'filename' , 'w' ) . close ( ) #NEWLINE#
print ( list ( itertools . chain . from_iterable ( a ) ) ) #NEWLINE#
output = '' . join ( item [ 0 ] . upper ( ) for item in input . split ( ) ) #NEWLINE#
[ list ( x ) for x in zip ( * sorted ( zip ( list1 , list2 ) , key = lambda pair : pair [ 0 ] ) ) ] #NEWLINE#
df . groupby ( ( df . a == 'B' ) . shift ( 1 ) . fillna ( 0 ) . cumsum ( ) ) #NEWLINE#
file = io . open ( 'data.txt' , 'r' , encoding = 'utf-16-le' ) #NEWLINE#
sorted ( unsorted_list , key = presorted_list . index ) #NEWLINE#
df . groupby ( 'type' ) . apply ( lambda x : np . mean ( np . log2 ( x [ 'v' ] ) ) ) #NEWLINE#
M . sum ( axis = 0 ) . sum ( axis = 0 ) #NEWLINE#
re . compile ( '^([^A]*)AA([^A]|AA)*$' ) #NEWLINE#
print ( ',#SPACE#' . join ( str ( x ) for x in list_of_ints ) ) #NEWLINE#
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] , reverse = True ) [ : 2 ] #NEWLINE#
"""Ð¼Ð°ÑÐºÐ°""" . encode ( 'latin-1' ) #NEWLINE#
[ value for pair in zip ( a , b [ : : - 1 ] ) for value in pair ] #NEWLINE#
url . rsplit ( '/' , 1 ) #NEWLINE#
"""longlongTESTstringTEST""" . replace ( 'TEST' , '?' , 1 ) #NEWLINE#
app . run ( ) #NEWLINE#
grouped . filter ( lambda x : len ( x ) > 1 ) #NEWLINE#
[ ( lambda x : x * x ) ( x ) for x in range ( 10 ) ] #NEWLINE#
print ( '' . join ( map ( str , data ) ) ) #NEWLINE#
"""""" . join ( chr ( i ) for i in myintegers ) #NEWLINE#
app . run ( ) #NEWLINE#
matplotlib . rcParams . update ( { 'font.size' : 22 } ) #NEWLINE#
django . template . loader . select_template ( [ 'custom_template' , 'default_template' ] ) #NEWLINE#
re . sub ( '\\[.*?\\]' , '' , 'abcd[e]yth[ac]ytwec' ) #NEWLINE#
x = [ [ None for _ in range ( 5 ) ] for _ in range ( 6 ) ] #NEWLINE#
[ ( i , c ) for i , c in enumerate ( 'xdtwkeltjwlkejt7wthwk89lk' ) if c . isdigit ( ) ] #NEWLINE#
sorted ( list ( dic . items ( ) ) , key = lambda x : x [ 1 ] [ 'Fisher' ] , reverse = True ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] ) #NEWLINE#
dfs = pd . read_excel ( file_name , sheetname = None ) #NEWLINE#
[ int ( x , 16 ) for x in L ] #NEWLINE#
dict [ 'Apple' ] [ 'American' ] #NEWLINE#
"""""" . join ( entry_list ) #NEWLINE#
yourdatetime . date ( ) == datetime . today ( ) . date ( ) #NEWLINE#
df . groupby ( df . index . map ( lambda t : t . minute ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . showMaximized ( ) #NEWLINE#
pd . concat ( [ foo [ 'Country' ] , z ] , keys = [ 'Country' , 'z' ] , axis = 1 ) #NEWLINE#
[ ( i , j ) for i , j in zip ( lst , lst2 ) ] #NEWLINE#
req . add_header ( 'Referer' , login_url ) #NEWLINE#
rdd . map ( lambda k_v : ( frozenset ( k_v [ 0 ] ) , k_v [ 1 ] ) ) . groupByKey ( ) . collect ( ) #NEWLINE#
result = [ x for x in list_a if x [ 0 ] in list_b ] #NEWLINE#
conn . commit ( ) #NEWLINE#
np . where ( out . ravel ( ) ) [ 0 ] #NEWLINE#
df . groupby ( 'ID' ) . head ( 4 ) #NEWLINE#
df . round ( ) #NEWLINE#
a [ np . all ( a != 0 , axis = 1 ) ] #NEWLINE#
str ( { 'a' : 1 , 'b' : 'as#SPACE#df' } ) . replace ( ':#SPACE#' , ':' ) . replace ( ',#SPACE#' , ',' ) #NEWLINE#
numpy . array ( [ [ 1 , 2 ] , [ 2 , [ 3 , 4 ] ] ] ) #NEWLINE#
re . findall ( "api\\('(.*?)'" , "api('randomkey123xyz987',#SPACE#'key',#SPACE#'text')" ) #NEWLINE#
pd . concat ( [ df , pd . get_dummies ( df , '' , '' ) . astype ( int ) ] , axis = 1 ) [ order ] #NEWLINE#
session . query ( Task ) . filter ( Task . time_spent > timedelta ( hours = 3 ) ) . all ( ) #NEWLINE#
[ ( x + y ) for x in l2 for y in l1 ] #NEWLINE#
[ [ 'AAAA' , 1.11 ] , [ 'BBB' , 2.22 ] , [ 'CCCC' , 3.33 ] ] #NEWLINE#
A [ ( np . random . randint ( A . shape [ 0 ] , size = 2 ) ) , : ] #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS += 'django.core.context_processors.request' #NEWLINE#
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) . reshape ( ( 1 , 9 , 1 ) ) #NEWLINE#
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , mylist ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . concat ( [ a , b ] , ignore_index = True ) #NEWLINE#
pd . date_range ( '1/1/2014' , periods = 12 , freq = 'BM' ) #NEWLINE#
table . sort ( key = lambda t : t . points ) #NEWLINE#
"""ABC""" . encode ( 'hex' ) #NEWLINE#
all ( i in ( 1 , 2 , 3 , 4 , 5 ) for i in ( 1 , 6 ) ) #NEWLINE#
df . iloc [ : , ( np . r_ [ 1 : 10 , ( 15 ) , ( 17 ) , 50 : 100 ] ) ] #NEWLINE#
[ i for i , j in enumerate ( [ 'foo' , 'bar' , 'baz' ] ) if j == 'foo' ] #NEWLINE#
printf ( 'Hello#SPACE#%1$s.#SPACE#Your#SPACE#%1$s#SPACE#has#SPACE#just#SPACE#been#SPACE#created!' , 'world' ) #NEWLINE#
master . bind ( 's' , self . sharpen ) #NEWLINE#
foo ( ) #NEWLINE#
[ item [ 0 ] for item in queryresult ] #NEWLINE#
plt . show ( ) #NEWLINE#
text_widget . bind ( '<1>' , lambda event : text_widget . focus_set ( ) ) #NEWLINE#
[ ( a * b ) for a , b in zip ( lista , listb ) ] #NEWLINE#
[ d for d in a if d [ 'name' ] == 'pluto' ] #NEWLINE#
np . einsum ( 'ji,i->j' , a , b ) #NEWLINE#
array ( [ [ 0 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] ] ) #NEWLINE#
ord ( 'ÿ' ) #NEWLINE#
data [ data [ 'Value' ] == True ] #NEWLINE#
server . serve_forever ( ) #NEWLINE#
mapping = np . array ( [ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 1 , 0 , 0 ] ] ) #NEWLINE#
numpy . nonzero ( m . mask ) #NEWLINE#
n = int ( input ( ) ) #NEWLINE#
my_dict . pop ( 'key' , None ) #NEWLINE#
Motifs . append ( Motif ) #NEWLINE#
{ 'south_carolina' : 'SC' , 'north_carolina' : 'NC' } #NEWLINE#
nx . mean ( data [ : , - 3 : ] , axis = 0 ) #NEWLINE#
df [ 'value' ] = df [ 'value' ] . str . strip ( '[]' ) #NEWLINE#
open ( 'ComponentReport-DJI.xls' , 'rb' ) . read ( 200 ) #NEWLINE#
subprocess . Popen ( [ 'rm' , '-r' , 'some.file' ] ) #NEWLINE#
split_at ( 'obj<1,#SPACE#2,#SPACE#3>,#SPACE#x(4,#SPACE#5),#SPACE#"msg,#SPACE#with#SPACE#comma"' , ',' ) #NEWLINE#
range ( 10 , 0 , - 1 ) #NEWLINE#
res_list = [ x [ 0 ] for x in rows ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ max ( len ( a ) , len ( b ) ) for a , b in zip ( * x ) ] #NEWLINE#
[ 'blah' , 'blah' , 'blah' , 'blah' ] #NEWLINE#
[ { 'x' : 'one' , 'id' : 1 } , { 'x' : 'two' , 'id' : 2 } , { 'x' : 'three' , 'id' : 3 } ] #NEWLINE#
zip ( list ( range ( 10 ) ) , list ( range ( 10 , 0 , - 1 ) ) ) #NEWLINE#
[ d [ 'key' ] for d in l if 'key' in d ] #NEWLINE#
df . groupby ( level = 0 , axis = 1 ) . mean ( ) #NEWLINE#
[ 'x' , '+' , '13' , '.' , '5' , '*' , '10' , 'x' , '-' , '4' , 'e' , '1' ] #NEWLINE#
boxplot ( [ 1 , 2 , 3 , 4 , 5 , 10 ] , showfliers = False ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
[ 'a' , 'b' ] . index ( 'b' ) #NEWLINE#
re . sub ( '\\bfoo\\b' , cased_replacer ( 'bar' ) , 'this#SPACE#is#SPACE#Foo' , flags = re . I ) #NEWLINE#
[ [ 'tie' , 'hat' ] , [ 'Shoes' , 'pants' , 'shirt' ] , [ 'jacket' ] ] #NEWLINE#
fn = os . path . join ( os . path . dirname ( __file__ ) , 'my_file' ) #NEWLINE#
[ '' ] * len ( myList ) #NEWLINE#
re . findall ( '([0-9]+)([A-Z])' , '20M10000N80M' ) #NEWLINE#
re . findall ( '([0-9]+|[A-Z])' , '20M10000N80M' ) #NEWLINE#
re . findall ( '#(\\w+)' , 'http://example.org/#comments' ) #NEWLINE#
{ k : v for k , v in list ( hand . items ( ) ) if v } #NEWLINE#
duck . quack ( ) #NEWLINE#
next ( ( idx , x , y ) for idx , ( x , y ) in enumerate ( zip ( list1 , list2 ) ) if x != y ) #NEWLINE#
pd . concat ( [ x ] * 5 , ignore_index = True ) #NEWLINE#
my_string . splitlines ( ) [ 0 ] #NEWLINE#
[ [ 'z' , '+' , '2' , '-' , '44' ] , [ '4' , '+' , '55' , '+' , 'z' , '+' , '88' ] ] #NEWLINE#
os . system ( 'mysql#SPACE#<#SPACE#etc' ) #NEWLINE#
key = lambda x : sum ( map ( itemgetter ( 'play' ) , x ) ) #NEWLINE#
dfts . groupby ( lambda x : x . month ) . mean ( ) #NEWLINE#
( a . T * b ) . T #NEWLINE#
request . FILES [ 'image' ] #NEWLINE#
[ 'list' , 'elements' , 'go' , 'here' ] #NEWLINE#
[ 'e' , '1000' , 'c' ] #NEWLINE#
re . findall ( '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' , s ) #NEWLINE#
sum ( item [ 'gold' ] for item in example_list ) #NEWLINE#
self . redirect ( '/sucess' ) #NEWLINE#
a = [ 'a' , 'bc' ] #NEWLINE#
plt . savefig ( 'myplot.png' , dpi = 100 ) #NEWLINE#
pymc3 . traceplot ( trace , vars = [ 'alpha' , 'beta' , 'sigma' ] ) #NEWLINE#
apple . decode ( 'iso-8859-1' ) . encode ( 'utf8' ) #NEWLINE#
df [ 'new_col' ] = list ( range ( 1 , len ( df ) + 1 ) ) #NEWLINE#
self . cursor . execute ( "SELECT#SPACE#COUNT(*)#SPACE#FROM#SPACE#table#SPACE#WHERE#SPACE#asset_type='movie'" ) #NEWLINE#
[ key for item in lst for key , value in list ( my_dict . items ( ) ) if item in value ] #NEWLINE#
[ y for x in range ( 3 ) for y in [ x , x ] ] #NEWLINE#
total = sum ( float ( item ) for item in s . split ( ',' ) ) #NEWLINE#
pd . read_json ( elevations ) #NEWLINE#
array ( [ [ 0 , 0 , 1 , 2 , 3 , 4 , 0 , 1 , 2 , 3 ] , [ 1 , 5 , 6 , 7 , 8 , 9 , 4 , 5 , 6 , 7 ] ] ) #NEWLINE#
"""#SPACE#1234#SPACE##SPACE##SPACE##SPACE#Q-24#SPACE#2010-11-29#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#563#SPACE##SPACE##SPACE#abc#SPACE##SPACE#a6G47er15""" . split ( ) #NEWLINE#
[ [ 'z' , '+' , '2' , '-' , '44' ] , [ '4' , '+' , '55' , '+((' , 'z' , '+' , '88' , '))' ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
mylist . sort ( key = lambda x : Min if x is None else x ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
[ [ 'z' , '+' , '2' , '-' , '44' ] , [ '4' , '+' , '55' , '+' , 'z' , '+' , '88' ] ] #NEWLINE#
hash ( pformat ( a ) ) == hash ( pformat ( b ) ) #NEWLINE#
re . findall ( '\\d+|\\S' , string ) #NEWLINE#
[ 'I#SPACE#own#SPACE#half#SPACE#bottle' , 'Give#SPACE#me#SPACE#three#SPACE#quarters#SPACE#of#SPACE#the#SPACE#profit' ] #NEWLINE#
np . all ( a == a [ ( 0 ) , : ] , axis = 0 ) #NEWLINE#
[ 'foobar' , 'fobbar' , 'fazbar' , 'funkbar' ] #NEWLINE#
plt . show ( ) #NEWLINE#
df . select ( 'zip_code' ) . collect ( ) #NEWLINE#
resp . set_cookie ( 'sessionID' , '' , expires = 0 ) #NEWLINE#
'hiya\x00x\x00' . split ( '\x00' , 1 ) [ 0 ] #NEWLINE#
df [ 'Date' ] . str [ - 4 : ] . astype ( int ) #NEWLINE#
plt . show ( ) #NEWLINE#
regex = re . compile ( '((\\d+,)*\\d+)' ) #NEWLINE#
urlencode_withoutplus ( { 'arg0' : 'value' , 'arg1' : '+value' } ) #NEWLINE#
df [ [ 'a' , 'b' , 'd' ] ] . iloc [ [ 0 , 1 , 3 ] ] . mean ( axis = 0 ) #NEWLINE#
re . split ( '\\t+' , yas . rstrip ( '\t' ) ) #NEWLINE#
base64 . urlsafe_b64decode ( uenc . encode ( 'ascii' ) ) #NEWLINE#
df2 = pd . DataFrame ( index = df1 . index ) #NEWLINE#
[ 'a' , 'ab' , 'abc' , 'abcd' , 'b' , 'bc' , 'bcd' , 'c' , 'cd' , 'd' ] #NEWLINE#
listofzeros = [ 0 ] * n #NEWLINE#
[ s for s in ( square ( x ) for x in range ( 12 ) ) if s > 50 ] #NEWLINE#
dict ( item . split ( '=' ) for item in s . split ( ';' ) ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return user . groups . filter ( name__in = [ 'group1' , 'group2' ] ) . exists ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ max ( abs ( x ) for x in arr [ i : i + 4 ] ) for i in range ( 0 , len ( arr ) , 4 ) ] #NEWLINE#
df . index . get_level_values ( 'co' ) . unique ( ) #NEWLINE#
np . zeros ( ( 6 , 9 , 20 ) ) + np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) [ ( None ) , : , ( None ) ] #NEWLINE#
sys . exit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
split ( 'ABC#SPACE#;#SPACE#DEF123,GHI_JKL#SPACE#;#SPACE#MN#SPACE#OP' , ( ',' , ';' ) ) #NEWLINE#
s = sorted ( s , key = lambda x : ( x [ 1 ] , x [ 2 ] ) ) #NEWLINE#
[ int ( x , 16 ) for x in [ 'BB' , 'A7' , 'F6' , '9E' ] ] #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
[ l . split ( '\\' ) [ - 1 ] for l in list_dirs ] #NEWLINE#
print ( urllib . parse . unquote ( url ) . decode ( 'utf8' ) ) #NEWLINE#
"""""" . join ( buffer ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
print ( '' . join ( a ) ) #NEWLINE#
re . sub ( '([abc])' , '\\1\\1' , text . read ( ) ) #NEWLINE#
re . sub ( '(.)' , '\\1\\1' , text . read ( ) ) #NEWLINE#
canvas . delete ( 'all' ) #NEWLINE#
super ( ChildClass , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
plt . show ( ) #NEWLINE#
a [ np . arange ( 3 ) , ( 0 , 1 , 0 ) ] #NEWLINE#
[ sum ( map ( int , s ) ) for s in example . split ( ) ] #NEWLINE#
cur . execute ( "SELECT#SPACE#*#SPACE#FROM#SPACE#records#SPACE#WHERE#SPACE#email#SPACE#LIKE#SPACE#'%s'" , search ) #NEWLINE#
df . groupby ( 'A' ) . sum ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ k for k in lst if 'ab' in k ] #NEWLINE#
user_location = request . POST . get ( 'location' ) #NEWLINE#
response = requests . get ( url , headers = HEADERS ) #NEWLINE#
df . ix [ df . A == 0 , 'B' ] = np . nan #NEWLINE#
float ( int ( '-0b1110' , 0 ) ) #NEWLINE#
[ 'b' , 's' , 't' ] #NEWLINE#
new_img . save ( 'tweeter_red.png' ) #NEWLINE#
re . sub ( '(?<=.)(?=.)' , '-' , str ) #NEWLINE#
datetime . datetime . now ( ) + datetime . timedelta ( days = 1 , hours = 3 ) #NEWLINE#
any ( e in lestring for e in lelist ) #NEWLINE#
"""""" . join ( c for c in 'abc123def456' if c . isdigit ( ) ) #NEWLINE#
dict ( ( d [ 'name' ] , d ) for d in listofdict ) #NEWLINE#
print ( ( 'Total#SPACE#score#SPACE#for' , name , 'is' , score ) ) #NEWLINE#
driver . get ( 'http://www.google.com.br' ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '(?<!\\w)([A-Z])\\.' , '\\1' , s ) #NEWLINE#
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] ) #NEWLINE#
self . canvas . create_image ( 0 , 0 , image = image1 , anchor = NW ) #NEWLINE#
your_list . sort ( key = operator . attrgetter ( 'anniversary_score' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
last = len ( s ) - s [ : : - 1 ] . index ( x ) - 1 #NEWLINE#
self . pushButton . setStyleSheet ( 'background-color:#SPACE#red' ) #NEWLINE#
s . decode ( 'hex' ) #NEWLINE#
items = [ item for item in container if item . attribute == value ] #NEWLINE#
myList = [ i . split ( '\t' ) [ 0 ] for i in myList ] #NEWLINE#
pd . concat ( map ( pd . DataFrame , iter ( d . values ( ) ) ) , keys = list ( d . keys ( ) ) ) . stack ( #NEWLINE# ) . unstack ( 0 ) #NEWLINE#
pd . concat ( [ df_1 , df_2 . sort_values ( 'y' ) ] ) #NEWLINE#
df . sort_index ( ascending = False ) #NEWLINE#
datetime . timedelta ( - 1 , 86100 ) . total_seconds ( ) #NEWLINE#
url ( '^combined/$' , views . CombinedAPIView . as_view ( ) , name = 'combined-list' ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] , reverse = True ) #NEWLINE#
"""0,1,2""" . split ( ',' ) #NEWLINE#
fig . add_subplot ( 111 ) #NEWLINE#
input ( 'Press#SPACE#Enter#SPACE#to#SPACE#continue...' ) #NEWLINE#
{ d [ 'Name' ] : d [ 'Age' ] for d in thisismylist } #NEWLINE#
plt . show ( ) #NEWLINE#
self . redirect ( 'http://www.appurl.com' ) #NEWLINE#
[ ( y - x ) for x , y in zip ( L , L [ 1 : ] ) ] #NEWLINE#
re . sub ( '\\([^)]*\\)' , '' , filename ) #NEWLINE#
results += [ each for each in os . listdir ( folder ) if each . endswith ( '.c' ) ] #NEWLINE#
[ a for c in Cards for b in c for a in b ] #NEWLINE#
plt . show ( ) #NEWLINE#
rows = session . query ( Congress ) . count ( ) #NEWLINE#
[ j for i in zip ( a , b ) for j in i ] #NEWLINE#
upload_files = request . files . getlist ( 'file' ) #NEWLINE#
return image . convert ( 'HSV' ) #NEWLINE#
print ( #NEWLINE# 'If#SPACE#a#SPACE#hippo#SPACE#ways#SPACE#2000#SPACE#pounds,#SPACE#gives#SPACE#birth#SPACE#to#SPACE#a#SPACE#100#SPACE#pound#SPACE#calf#SPACE#and#SPACE#then#SPACE#eats#SPACE#a#SPACE#50#SPACE#pound#SPACE#meal#SPACE#how#SPACE#much#SPACE#does#SPACE#she#SPACE#weigh?' #NEWLINE# ) #NEWLINE#
pd . concat ( ( df1 , df2 ) , axis = 1 ) . mean ( axis = 1 ) #NEWLINE#
list ( x . keys ( ) ) . index ( 'c' ) #NEWLINE#
app . run ( host = '192.168.0.58' , port = 9000 , debug = False ) #NEWLINE#
requests . get ( 'https://www.reporo.com/' , verify = False ) #NEWLINE#
[ '_' , 'empty' , 'unused' , 'dummy' ] #NEWLINE#
new_dict = { k : v for k , v in zip ( keys , values ) } #NEWLINE#
map ( lambda x : max ( x , key = lambda y : y [ 1 ] ) , lists ) #NEWLINE#
list_ . sort ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] ) #NEWLINE#
f = open ( '/tmp/output' , 'wb' ) #NEWLINE#
connection . uid ( 'STORE' , '-FLAGS' , '(\\Seen)' ) #NEWLINE#
next ( ( key , value ) for key , value in list ( c . items ( ) ) if value > 1 ) #NEWLINE#
df . loc [ ( df . index < start_remove ) | ( df . index > end_remove ) ] #NEWLINE#
re . split ( '\\s*,\\s*|\\s*;\\s*' , 'a#SPACE#,#SPACE#b;#SPACE#cdf' ) #NEWLINE#
sorted ( s , key = str . lower ) #NEWLINE#
np . linalg . solve ( np . dot ( a . T , a ) , np . dot ( a . T , b ) ) #NEWLINE#
logger = logging . getLogger ( 'my_module_name' ) #NEWLINE#
names = [ item [ 'name' ] for item in data ] #NEWLINE#
[ ( 'A' , 'B' ) , ( 'B' , 'C' ) , ( 'B' , 'D' ) , ( 'C' , 'D' ) , ( 'E' , 'F' ) , ( 'F' , 'C' ) ] #NEWLINE#
print ( set ( re . sub ( '[\x00-\x7f]' , '' , '£€£€' ) ) ) #NEWLINE#
os . chdir ( path ) #NEWLINE#
name . decode ( 'latin-1' ) . encode ( 'utf-8' ) #NEWLINE#
str2 = str . replace ( '\n' , '' ) #NEWLINE#
set ( [ 'a' , 'b' ] ) . issubset ( [ 'b' , 'a' , 'foo' , 'bar' ] ) #NEWLINE#
[ int ( x ) for x in regex . findall ( filename ) ] #NEWLINE#
zip ( * l ) #NEWLINE#
A [ : , - 2 : ] #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( k , float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 ) #NEWLINE#
""",""" . join ( x or '0' for x in s . split ( ',' ) ) #NEWLINE#
soup = BeautifulSoup ( response . read ( ) . decode ( 'utf-8' ) ) #NEWLINE#
re . findall ( '[bcdfghjklmnpqrstvwxyz]+' , 'CONCERTATION' , re . IGNORECASE ) #NEWLINE#
df [ 'date' ] = df [ 'time' ] . apply ( lambda x : x . date ( ) ) #NEWLINE#
a . append ( b ) . reset_index ( drop = True ) #NEWLINE#
original = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
{ '2010' : [ 2 ] , '2009' : [ 4 , 7 ] , '1989' : [ 8 ] } #NEWLINE#
subprocess . call ( 'mv#SPACE#/home/somedir/subdir/*#SPACE#somedir/' , shell = True ) #NEWLINE#
df . filter ( 'dt_mvmt#SPACE#is#SPACE#not#SPACE#NULL' ) #NEWLINE#
print ( 'Россия' ) #NEWLINE#
df . groupby ( [ 'country' , 'gender' ] ) [ 'industry' ] . unique ( ) #NEWLINE#
np . ix_ ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ) #NEWLINE#
subprocess . call ( 'test.sh#SPACE#otherfunc' ) #NEWLINE#
print ( np . array ( list ( mystr ) , dtype = int ) ) #NEWLINE#
ax . get_yaxis ( ) . set_ticklabels ( [ ] ) #NEWLINE#
print ( etree . tostring ( some_tag . find ( 'strong' ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
imp . find_module ( 'os' ) [ 1 ] #NEWLINE#
df . drop ( [ ( 'col1' , 'a' ) , ( 'col2' , 'b' ) ] , axis = 1 ) #NEWLINE#
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ) #NEWLINE#
ax . set_xticklabels ( [ 'a' , 'b' , 'c' , 'd' ] ) #NEWLINE#
dfts . groupby ( lambda x : x . year ) . std ( ) #NEWLINE#
root . destroy ( ) #NEWLINE#
[ ( v , k ) for k , v in d . items ( ) ] #NEWLINE#
files = [ f for f in os . listdir ( '.' ) if re . match ( '[0-9]+.*\\.jpg' , f ) ] #NEWLINE#
re . findall ( '\\s' , chrs , re . UNICODE ) #NEWLINE#
[ f ( x ) for x in list ] #NEWLINE#
plt . show ( ) #NEWLINE#
"""M\\N{AMPERSAND}M\\N{APOSTROPHE}s""" . encode ( ) . decode ( 'unicode-escape' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( yourdata , key = lambda d : d . get ( 'key' , { } ) . get ( 'subkey' ) , reverse = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
a [ np . argmin ( a [ : , ( 1 ) ] ) ] #NEWLINE#
[ '' . join ( l ) for l in list_of_lists ] #NEWLINE#
re . compile ( 'XYZ' , re . IGNORECASE ) . split ( 'fooxyzbar' ) #NEWLINE#
dict ( ( key , sum ( d [ key ] for d in dictList ) ) for key in dictList [ 0 ] ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'cc' , 'd' , 'dd' , 'ddd' , 'c' , 'cc' , 'e' ] #NEWLINE#
f = urllib . request . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode #NEWLINE# ( params ) ) ) #NEWLINE#
plt . xticks ( rotation = 30 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Ã©' . decode ( 'cp1252' ) . capitalize ( ) ) #NEWLINE#
sorted ( myList , key = dist ) #NEWLINE#
plt . show ( ) #NEWLINE#
subprocess . call ( 'command#SPACE#-flags#SPACE#arguments#SPACE#&' , shell = True ) #NEWLINE#
"""Day#SPACE#old#SPACE#bread,#SPACE#50%#SPACE#sale#SPACE#{0}""" . format ( 'today' ) #NEWLINE#
plt . show ( ) #NEWLINE#
x = x [ numpy . logical_not ( numpy . isnan ( x ) ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
any ( isinstance ( el , list ) for el in input_list ) #NEWLINE#
df . groupby ( 'A' ) . filter ( lambda g : ( g . B == 123 ) . any ( ) ) #NEWLINE#
os . system ( 'echo#SPACE#X' ) #NEWLINE#
[ ( 'created' , 1 ) , ( 'some' , 2 ) , ( 'here' , 2 ) , ( 'tags' , 2 ) ] #NEWLINE#
json_data = json . loads ( json_string ) #NEWLINE#
print ( ',#SPACE#,' . join ( [ str ( i [ 0 ] ) for i in mytuple ] ) ) #NEWLINE#
[ ( 1 , [ 1 , 2 , 3 , 4 ] ) , ( 2 , [ 5 , 6 , 7 ] ) ] #NEWLINE#
t = sorted ( list ( a . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
[ v for k , v in list ( my_dict . items ( ) ) if 'Date' in k ] #NEWLINE#
csvwriter . writerow ( row ) #NEWLINE#
l = [ [ x for x in range ( 5 ) ] for y in range ( 4 ) ] #NEWLINE#
[ [ y for x , y in sublist ] for sublist in l ] #NEWLINE#
cb . ax . xaxis . set_major_formatter ( plt . FuncFormatter ( myfmt ) ) #NEWLINE#
df . apply ( '#SPACE#' . join , axis = 1 ) #NEWLINE#
list ( range ( 11 , 17 ) ) #NEWLINE#
plt . savefig ( 'temp.png' ) #NEWLINE#
numpy . in1d ( b , a ) #NEWLINE#
MM . objects . all ( ) . values ( 'b' , 'a' ) . annotate ( max = Max ( 'c' ) ) #NEWLINE#
list ( range ( 1 , 11 ) ) #NEWLINE#
df . ix [ list ( 'CADFEB' ) ] . plot ( kind = 'barh' ) #NEWLINE#
pd . concat ( [ df2 , df2 ] , axis = 1 , keys = [ 'tier1' , 'tier2' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df2 [ [ 'abuse' , 'nff' ] ] . plot ( kind = 'bar' , stacked = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
im = scipy . misc . imread ( 'flower.png' , flatten = True ) . astype ( np . uint8 ) #NEWLINE#
pd . DataFrame ( data = [ i [ 0 ] for i in x ] , columns = [ 'X' ] ) #NEWLINE#
re . findall ( '%(\\d+)l\\\\%\\((.*?)\\\\\\)' , r ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( freq = 'M' ) ) #NEWLINE#
""".*?\\b(nunca)\\s+(\\S+)\\s+[0-9.]+[\\r\\n]+\\S+\\s+(\\S+)\\s+(VM\\S+)\\s+[0-9.]+""" #NEWLINE#
my_dict = { x [ 0 ] : x [ 1 : ] for x in my_list } #NEWLINE#
plt . show ( ) #NEWLINE#
[ i for i , elem in enumerate ( bool_list , 1 ) if elem ] #NEWLINE#
[ 'x' , '+' , '13.5' , '*' , '10' , 'x' , '-' , '4' , 'e' , '1' ] #NEWLINE#
db . commit ( ) #NEWLINE#
print ( s . split ( ',' ) ) #NEWLINE#
m = re . search ( '\\[(\\w+)\\]' , s ) #NEWLINE#
sum ( x [ 1 ] for x in structure ) #NEWLINE#
example = [ [ x . replace ( '\r\n' , '' ) for x in i ] for i in example ] #NEWLINE#
result = min ( max_value , max ( min_value , result ) ) #NEWLINE#
conn = pyodbc . connect ( 'DSN=VerticaDB1;UID=dbadmin;PWD=mypassword' ) #NEWLINE#
df . sort_index ( ) #NEWLINE#
pickle . load ( open ( '/tmp/test.pkl' , 'rb' ) ) #NEWLINE#
df [ 'Date' ] [ 0 ] . date ( ) #NEWLINE#
new_dict [ 'key1' ] [ 'key2' ] += 5 #NEWLINE#
rdd . map ( lambda k_v : ( tuple ( k_v [ 0 ] ) , k_v [ 1 ] ) ) . groupByKey ( ) #NEWLINE#
arr . sort ( order = [ 'f0' , 'f1' ] ) #NEWLINE#
df = pd . read_csv ( 'my.csv' , na_values = [ 'n/a' ] ) #NEWLINE#
[ ( 1 , 1 ) , ( 2 , 2 ) , ( 3 , 4 ) , ( 1 , 1 ) , ( 2 , 3 ) , ( 1 , 2 ) ] #NEWLINE#
func ( * args ) #NEWLINE#
[ [ 1 , 2 , 5 ] , [ 3 , 4 , 5 ] ] #NEWLINE#
re . findall ( '(b+a)+b+' , mystring ) #NEWLINE#
os . kill ( pid , signal . SIGUSR1 ) #NEWLINE#
parser = argparse . ArgumentParser ( allow_abbrev = False ) #NEWLINE#
tex . delete ( '1.0' , END ) #NEWLINE#
[ list ( group ) for key , group in itertools . groupby ( data , operator . itemgetter ( 1 ) ) ] #NEWLINE#
all ( value == 0 for value in list ( your_dict . values ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( map ( list , list ( totals . items ( ) ) ) ) #NEWLINE#
pylab . setp ( _self . ax . get_yticklabels ( ) , fontsize = 8 ) #NEWLINE#
numpy . dstack ( ( your_input_array , numpy . zeros ( ( 25 , 54 ) ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
__init__ . py #NEWLINE#
max ( lst , key = lambda x : x [ 'score' ] ) #NEWLINE#
new_list = [ x . split ( ) [ - 1 ] for x in Original_List ] #NEWLINE#
min ( [ x for x in num_list if x > 2 ] ) #NEWLINE#
pd . concat ( [ good , new ] , axis = 0 , ignore_index = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( hex ( new_int ) [ 2 : ] ) #NEWLINE#
requests . get ( 'https://www.mysite.com/' , auth = ( 'username' , 'pwd' ) ) #NEWLINE#
max_item = max ( a_list , key = operator . itemgetter ( 1 ) ) #NEWLINE#
"""a#SPACE#string""" . decode ( 'ascii' ) #NEWLINE#
sorted ( L , key = operator . itemgetter ( 'resultType' ) ) #NEWLINE#
urllib . parse . unquote ( url ) . decode ( 'utf8' ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#printing#SPACE#{}#SPACE#and#SPACE#{}' . format ( x , y ) ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#printing#SPACE#{0}#SPACE#and#SPACE#{1}' . format ( x , y ) ) #NEWLINE#
df . pivot_table ( 'Y' , rows = 'X' , cols = 'X2' ) #NEWLINE#
del request . session [ 'mykey' ] #NEWLINE#
subprocess . call ( [ '/usr/bin/perl' , './uireplace.pl' , var ] ) #NEWLINE#
r = requests . get ( '<MY_URI>' , headers = { 'Authorization' : 'TOK:<MY_TOKEN>' } ) #NEWLINE#
df . groupby ( [ 'col5' , 'col2' ] ) . size ( ) . groupby ( level = 1 ) . max ( ) #NEWLINE#
a . update ( b ) #NEWLINE#
df [ 'col' ] = 'str' + df [ 'col' ] . astype ( str ) #NEWLINE#
print ( proc . communicate ( ) [ 0 ] ) #NEWLINE#
data [ 'sex' ] . replace ( [ 0 , 1 ] , [ 'Female' , 'Male' ] , inplace = True ) #NEWLINE#
a [ a != 0 ] #NEWLINE#
print ( soup . find ( 'a' , href = re . compile ( '.*follow\\?page.*' ) ) ) #NEWLINE#
os . system ( 'dir#SPACE#c:\\' ) #NEWLINE#
[ '0.0.0.0.py' , '1.0.0.0.py' , '1.1.0.0.py' ] #NEWLINE#
ax . patch . set_facecolor ( 'black' ) #NEWLINE#
dict ( my_object ) #NEWLINE#
df . groupby ( np . arange ( len ( df . columns ) ) // 2 + 1 , axis = 1 ) . sum ( ) . add_prefix ( 's' ) #NEWLINE#
webbrowser . open ( 'file.txt' ) #NEWLINE#
x_file = open ( os . path . join ( direct , '5_1.txt' ) , 'r' ) #NEWLINE#
np . prod ( a . shape ) #NEWLINE#
plt . show ( ) #NEWLINE#
e = root . xpath ( './/a[contains(text(),"TEXT#SPACE#A")]' ) #NEWLINE#
e = root . xpath ( './/a[starts-with(text(),"TEXT#SPACE#A")]' ) #NEWLINE#
Model . objects . all ( ) . order_by ( 'some_field' ) . update ( position = F ( some_field ) + 1 ) #NEWLINE#
"""hello#SPACE#{name},#SPACE#how#SPACE#are#SPACE#you#SPACE#{name},#SPACE#welcome#SPACE#{name}""" . format ( name = 'john' ) #NEWLINE#
theset = set ( k . lower ( ) for k in thedict ) #NEWLINE#
print ( '%.3f' % 4.53 ) #NEWLINE#
{ 'a' : [ 1 , 2 , 3 ] , 'c' : [ 1 ] , 'b' : [ 1 , 2 ] } #NEWLINE#
[ a [ x ] . append ( b [ x ] ) for x in range ( 3 ) ] #NEWLINE#
data . write ( '%s%s\n' % ( c , n ) ) #NEWLINE#
hex ( sum ( b << i for i , b in enumerate ( reversed ( walls ) ) ) ) #NEWLINE#
plt . savefig ( 'filename.png' , dpi = 300 ) #NEWLINE#
return my_list == list ( range ( my_list [ 0 ] , my_list [ - 1 ] + 1 ) ) #NEWLINE#
[ 'dog' , 'domestic_dog' , 'Canis_familiaris' ] #NEWLINE#
Book . objects . filter ( pk = pk ) . update ( ** d ) #NEWLINE#
[ 'a' , 'b' , 'x' , 'y' ] #NEWLINE#
print ( urllib . request . urlopen ( request ) . read ( ) ) #NEWLINE#
[ 'cccc' , 'aaa' , 'ss' ] #NEWLINE#
[ [ Foo ( ) for x in range ( 10 ) ] for y in range ( 10 ) ] #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
ast . literal_eval ( "{'muffin'#SPACE#:#SPACE#'lolz',#SPACE#'foo'#SPACE#:#SPACE#'kitty'}" ) #NEWLINE#
ast . literal_eval ( "shutil.rmtree('mongo')" ) #NEWLINE#
yourdatetime . date ( ) < datetime . today ( ) . date ( ) #NEWLINE#
print ( collections . Counter ( s ) . most_common ( 1 ) [ 0 ] ) #NEWLINE#
np . concatenate ( input_list ) . ravel ( ) . tolist ( ) #NEWLINE#
km . fit ( x . reshape ( - 1 , 1 ) ) #NEWLINE#
array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
max ( alkaline_earth_values , key = lambda x : x [ 1 ] ) #NEWLINE#
log . info ( 'FooBar' ) #NEWLINE#
sorted ( subjects , operator . itemgetter ( 0 ) , reverse = True ) #NEWLINE#
plt . figure ( figsize = ( 1 , 1 ) ) #NEWLINE#
"""XÃ¼YÃ""" . encode ( 'raw_unicode_escape' ) . decode ( 'utf-8' ) #NEWLINE#
logger . debug ( 'My#SPACE#message#SPACE#with#SPACE#%s' , 'variable#SPACE#data' ) #NEWLINE#
jsondata [ 'results' ] [ 0 ] [ 'address_components' ] #NEWLINE#
item = re . sub ( '#SPACE#?\\(\\w+\\)' , '' , item ) #NEWLINE#
item = re . sub ( '#SPACE#?\\([^)]+\\)' , '' , item ) #NEWLINE#
datetime . datetime ( 2013 , 4 , 25 , 13 , 32 ) #NEWLINE#
[ ( x + y ) for x , y in zip ( first , second ) ] #NEWLINE#
ax . plot ( x , y , color = 'g' ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
numpy . array ( b ) . reshape ( 5 , 5 ) #NEWLINE#
"""Boat.txt.txt""" . replace ( '.txt' , '' ) #NEWLINE#
urls = html . xpath ( '//a/@href' ) #NEWLINE#
count . setdefault ( 'a' , 0 ) #NEWLINE#
""",""" . join ( 'Hello' ) #NEWLINE#
"""""" . join ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
driver . execute_script ( '$("span.info").click();' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '[' + ',#SPACE#' . join ( '%5.3f' % v for v in l ) + ']' ) #NEWLINE#
dic . setdefault ( key , [ ] ) . append ( value ) #NEWLINE#
df [ 'isHammer' ] = map ( is_hammer , df [ 'Open' ] , df [ 'Low' ] , df [ 'Close' ] , df [ 'High' ] ) #NEWLINE#
[ ( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x != y ] #NEWLINE#
df = pd . DataFrame ( np . random . random ( ( 1000 , 100 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
result = [ sum ( b ) for b in a ] #NEWLINE#
df1 . merge ( df2 , how = 'left' , on = 'word' ) #NEWLINE#
time . mktime ( datetime . datetime . strptime ( s , '%d/%m/%Y' ) . timetuple ( ) ) #NEWLINE#
dict ( [ [ 'two' , 2 ] , [ 'one' , 1 ] ] ) #NEWLINE#
re . findall ( 'TAA(?:[ATGC]{3})+?TAA' , seq ) #NEWLINE#
re . split ( '\\b\\w+\\.\\w+@' , s ) #NEWLINE#
datetime . strptime ( '2011221' , '%Y%W%w' ) #NEWLINE#
print ( [ word for word in words if word [ 0 ] . isupper ( ) ] ) #NEWLINE#
df . loc [ : , ( ( df != 0 ) . any ( axis = 0 ) ) ] #NEWLINE#
"""""" . join ( x . upper ( ) if random . randint ( 0 , 1 ) else x for x in s ) #NEWLINE#
dict ( ( k . lower ( ) , v ) for k , v in { 'My#SPACE#Key' : 'My#SPACE#Value' } . items ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#gender#SPACE#%r' % gender ) #NEWLINE#
today = datetime . datetime . utcnow ( ) . date ( ) #NEWLINE#
return s [ 0 ] . upper ( ) + s [ 1 : ] #NEWLINE#
requests . get ( url , headers = { 'referer' : my_referer } ) #NEWLINE#
[ y [ 1 ] for y in sorted ( [ ( myDict [ x ] [ 2 ] , x ) for x in list ( myDict . keys ( ) ) ] ) ] #NEWLINE#
xpath ( '//body//text()' ) . extract ( ) #NEWLINE#
[ 'Afghanistan' , 'Japan' , 'United#SPACE#Arab#SPACE#Emirates' ] #NEWLINE#
array ( [ [ 1 , 2 , 0 ] , [ 3 , 4 , 0 ] ] ) #NEWLINE#
p1 . communicate ( ) [ 0 ] #NEWLINE#
pandas . read_csv ( filename , sep = '\t' , lineterminator = '\r' ) #NEWLINE#
cherrypy . quickstart ( ) #NEWLINE#
People . objects . all ( ) . order_by ( ) #NEWLINE#
list_of_lists = [ list ( k ) for k in list_of_tuples ] #NEWLINE#
sys . path . insert ( 0 , 'libs' ) #NEWLINE#
os . system ( 'GREPDB="echo#SPACE#123";#SPACE#/bin/bash#SPACE#-c#SPACE#"$GREPDB"' ) #NEWLINE#
df [ 'state' ] . apply ( lambda x : x [ len ( x ) / 2 - 1 : len ( x ) / 2 + 1 ] ) #NEWLINE#
len ( my_text ) - len ( my_text . rstrip ( '?' ) ) #NEWLINE#
re . sub ( 'g+' , 'g' , 'omgggg' ) #NEWLINE#
df [ 'stats' ] . apply ( pd . Series ) #NEWLINE#
sorted ( list1 , key = lambda x : keyfun ( x . split ( '-' ) [ 1 ] , list2 ) ) #NEWLINE#
r = re . compile ( '(?P<int>^\\d+$)|(?P<word>^\\w+$)' ) #NEWLINE#
Employees . objects . values_list ( 'eng_name' , 'rank' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
print ( str ( count ) + '#SPACE##SPACE##SPACE##SPACE#' + str ( conv ) ) #NEWLINE#
dict ( pair for d in L for pair in list ( d . items ( ) ) ) #NEWLINE#
br . addheaders = [ ( 'Cookie' , 'cookiename=cookie#SPACE#value' ) ] #NEWLINE#
json . dumps ( { str ( k ) : v for k , v in data . items ( ) } ) #NEWLINE#
print ( '#SPACE#' . join ( [ str ( ord ( a ) ) for a in data ] ) ) #NEWLINE#
str . decode ( 'utf-8' ) #NEWLINE#
os . environ [ 'DEBUSSY' ] = '1' #NEWLINE#
sheet . write ( 1 , 1 , 2 ) #NEWLINE#
regex = re . compile ( '((\\d+,?)+)' ) #NEWLINE#
df . save ( 'mycsv.csv' , 'com.databricks.spark.csv' ) #NEWLINE#
get_pid ( 'chrome' ) #NEWLINE#
alist . sort ( key = lambda x : x . foo ) #NEWLINE#
all ( a_list ) #NEWLINE#
[ 'a' , 'ab' , 'abc' , 'abcd' , 'b' , 'bc' , 'bcd' , 'c' , 'cd' , 'd' ] #NEWLINE#
df = df . set_index ( [ 'Company' , 'date' ] , inplace = True ) #NEWLINE#
{ 'count' : 836780 , '_shards' : { 'successful' : 5 , 'failed' : 0 , 'total' : 5 } } #NEWLINE#
plt . show ( ) #NEWLINE#
ax2 . plot ( x , y , 'bo' ) #NEWLINE#
df [ 'prod_type' ] = 'responsive' #NEWLINE#
re . search ( 'name#SPACE#(\\w+)' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
gzip . open ( 'file.gz' , 'rt' , encoding = 'utf-8' ) #NEWLINE#
pd . DataFrame ( list ( d . items ( ) ) , columns = [ 'Date' , 'DateValue' ] ) #NEWLINE#
hex ( int ( '' . join ( [ str ( int ( b ) ) for b in walls ] ) , 2 ) ) #NEWLINE#
"""Integer:#SPACE#{};#SPACE#Float:#SPACE#{};#SPACE#String:#SPACE#{}""" . format ( a , b , c ) #NEWLINE#
db . delete ( Bottom . all ( keys_only = True ) . filter ( 'daddy#SPACE#=' , top ) . fetch ( 1000 ) ) #NEWLINE#
map ( list , zip ( * main_list ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . loc [ len ( df ) ] = [ '8/19/2014' , 'Jun' , 'Fly' , '98765' ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x . combine_first ( y ) , [ df1 , df2 , df3 ] ) #NEWLINE#
datetime . datetime . strptime ( '10/05/2012' , '%d/%m/%Y' ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
'one' in iter ( d . values ( ) ) #NEWLINE#
df . query ( 'index#SPACE#<#SPACE#@start_remove#SPACE#or#SPACE#index#SPACE#>#SPACE#@end_remove' ) #NEWLINE#
plt . show ( ) #NEWLINE#
B [ np . argsort ( A ) ] = np . sort ( B ) #NEWLINE#
df = df [ [ 'foo' , 'bar' ] ] #NEWLINE#
np . random . uniform ( 0 , cutoffs [ - 1 ] ) #NEWLINE#
[ f . name for f in br . forms ( ) ] #NEWLINE#
zip ( [ 'a' , 'c' , 'e' ] , [ 'b' , 'd' ] ) #NEWLINE#
conn . commit ( ) #NEWLINE#
newcontents = contents . replace ( 'a' , 'e' ) . replace ( 's' , '3' ) #NEWLINE#
sorted_by_length = sorted ( list_ , key = lambda x : ( x [ 0 ] , len ( x [ 1 ] ) , float ( x [ 1 ] ) ) ) #NEWLINE#
webbrowser . open ( 'http://example.com' ) #NEWLINE#
print ( '{0:+d}' . format ( score ) ) #NEWLINE#
first_name = request . form . get ( 'firstname' ) #NEWLINE#
df [ 'Date' ] . map ( lambda t : t . date ( ) ) . unique ( ) #NEWLINE#
re . findall ( '([a-z])*' , '123abc789' ) #NEWLINE#
re . findall ( '(?:[a-z])*' , '123abc789' ) #NEWLINE#
self . request . get_all ( ) #NEWLINE#
min ( [ 1 , 2 , 3 ] ) #NEWLINE#
sweden = Country ( name = 'Sweden' , abbreviation = 'SE' ) #NEWLINE#
np . savez ( tmp , * [ getarray [ 0 ] , getarray [ 1 ] , getarray [ 8 ] ] ) #NEWLINE#
[ k for k , v in sorted ( list ( mydict . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 1 ] ) ] #NEWLINE#
linsolve ( Matrix ( ( [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 2 , 3 ] ) ) , ( x , y , z ) ) #NEWLINE#
"""used​""" . strip ( '\u200b' ) #NEWLINE#
function_in_library ( 'Hello#SPACE#%s' % ',#SPACE#' . join ( [ '%s' ] * len ( my_args ) ) , my_args ) #NEWLINE#
[ [ 0 , 0 ] , [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] , [ 4 , 40 ] , [ 5 , 50 ] ] #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
[ ( 'pos1' , 'target1' ) , ( 'pos2' , 'target2' ) ] #NEWLINE#
list ( i [ 0 ] == i [ 1 ] for i in zip ( list1 , list2 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
return render_to_response ( 'myapp/mytemplate.html' , { 'a' : a } ) #NEWLINE#
df [ [ 'value' ] ] . fillna ( df . groupby ( 'group' ) . transform ( 'mean' ) ) #NEWLINE#
lambda x , y : x + y #NEWLINE#
df . apply ( '#SPACE#' . join , axis = 0 ) #NEWLINE#
print ( all ( word [ 0 ] . isupper ( ) for word in words ) ) #NEWLINE#
sorted ( li , key = operator . itemgetter ( 1 ) , reverse = True ) #NEWLINE#
print ( '{0}:<15}}{1}:<15}}{2}:<8}}' . format ( '1' , '2' , '3' ) ) #NEWLINE#
pandas . set_option ( 'display.max_columns' , None ) #NEWLINE#
pd . DataFrame ( [ { val : key for key , val in list ( d . items ( ) ) } for d in df . #NEWLINE# to_dict ( 'r' ) ] ) #NEWLINE#
mpl . use ( 'WXAgg' ) #NEWLINE#
sys . exit ( main ( ) ) #NEWLINE#
DataFrame . from_csv ( 'c:/~/trainSetRel3.txt' , sep = '\t' , header = 0 ) #NEWLINE#
datetimevariable . strftime ( '%Y-%m-%d' ) #NEWLINE#
[ 'A' , 'and' , 'B' , 'and' , 'C' ] #NEWLINE#
int ( '' . join ( str ( random . randint ( 0 , 9 ) ) for _ in range ( 12 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'b' ] . cumsum ( ) #NEWLINE#
df . set_index ( [ 'timestamp' , 'objectId' ] ) [ 'result' ] . unstack ( ) #NEWLINE#
[ Boardsize , Boardsize ] #NEWLINE#
plt . savefig ( 'filename.png' ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
url ( 'home/$' , app . views . home , name = 'home' ) #NEWLINE#
os . environ [ 'USER_IS_ADMIN' ] = '1' #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ y for x in list ( dict . items ( ) ) for y in x ] ) #NEWLINE#
"""""" . join ( c for c in text if c not in 'aeiouAEIOU' ) #NEWLINE#
df = df . set_index ( [ 'id' , 'name' ] ) #NEWLINE#
[ [ 0.0 , 3 ] , [ 0.1 , 1 ] ] #NEWLINE#
df . loc [ df [ 'Value' ] . idxmax ( ) ] #NEWLINE#
logging . info ( 'Log#SPACE#message' , extra = { 'app_name' : 'myapp' } ) #NEWLINE#
[ x for x in list_of_nums if x != 2 ] #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
df . groupby ( 'User' ) [ 'X' ] . transform ( sum ) == 0 #NEWLINE#
new_list = [ x [ : ] for x in old_list ] #NEWLINE#
datetime . strptime ( '21/11/06#SPACE#16:30' , '%d/%m/%y#SPACE#%H:%M' ) #NEWLINE#
s = re . sub ( '^\\d+\\s|\\s\\d+\\s|\\s\\d+$' , '#SPACE#' , s ) #NEWLINE#
plt . scatter ( * zip ( * li ) ) #NEWLINE#
ax . scatter ( XS , YS , ZS ) #NEWLINE#
numpy . dot ( numpy . dot ( a , m ) , a ) #NEWLINE#
[ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' , 'g' ] , [ 'd' , 's' , 'd' , 'a' ] ] #NEWLINE#
print ( max ( 1 , 2 , 3 ) ) #NEWLINE#
re . split ( '_(?:for|or|and)_' , 'sad_pandas_and_happy_cats_for_people' ) #NEWLINE#
soup . body . findAll ( text = 'Python#SPACE#Jobs' ) #NEWLINE#
rdata . set_index ( [ 'race_date' , 'track_code' , 'race_number' ] ) #NEWLINE#
print ( '' . join ( '' . join ( i ) for i in zip ( a2 , a1 ) ) + a [ - 1 ] if len ( a ) % 2 else '' ) #NEWLINE#
"""a#SPACE#b""" . replace ( '#SPACE#' , '' ) . isalpha ( ) #NEWLINE#
randomList = [ random . random ( ) for _ in range ( 10 ) ] #NEWLINE#
[ ( a + i . reshape ( 2 , 2 ) ) for i in np . identity ( 4 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
C = row [ 1 ] . split ( ',' ) [ 1 : - 1 ] #NEWLINE#
"""""" . join ( [ s [ x : x + 2 ] [ : : - 1 ] for x in range ( 0 , len ( s ) , 2 ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( set ( itertools . chain . from_iterable ( sequences ) ) ) #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
datetime . datetime . fromtimestamp ( x . astype ( 'O' ) / 1000000000.0 ) #NEWLINE#
os . path . abspath ( os . path . join ( dir , '..' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\x1b[0m' ) #NEWLINE#
df [ ( x <= df [ 'columnX' ] ) & ( df [ 'columnX' ] <= y ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
0 , 182 , 283 , 388 , 470 , 579 , 757 #NEWLINE#
print ( str . encode ( 'cp1252' ) . decode ( 'utf-8' ) . encode ( 'cp1252' ) . decode ( 'utf-8' ) ) #NEWLINE#
re . findall ( '(([0-9]+)([A-Z]))' , '20M10000N80M' ) #NEWLINE#
redirect ( 'Home.views.index' ) #NEWLINE#
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) ) #NEWLINE#
self . sock . connect ( self . url , header = self . header ) #NEWLINE#
return urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
s1 = pd . merge ( df1 , df2 , how = 'inner' , on = [ 'user_id' ] ) #NEWLINE#
a = [ 'bi' , 'double' , 'duo' , 'two' ] #NEWLINE#
dateobj = datetime . datetime . strptime ( datestr , '%Y-%m-%d' ) . date ( ) #NEWLINE#
Activity . objects . filter ( list__topic__user = my_user ) #NEWLINE#
mylist . sort ( key = str . lower ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for x in L if x is not None ] #NEWLINE#
result . replace ( '\\' , '' ) #NEWLINE#
df . set_index ( 'ID' , drop = True , inplace = True ) #NEWLINE#
print ( [ '' . join ( a ) for a in combinations ( [ 'hel' , 'lo' , 'bye' ] , 2 ) ] ) #NEWLINE#
np . array ( map ( int , '100110' ) ) #NEWLINE#
[ ( i , max ( j ) ) for i , j in list ( d . items ( ) ) ] #NEWLINE#
sum ( i * j for i , j in zip ( a , b ) ) #NEWLINE#
foo . decode ( 'utf8' ) . encode ( 'utf8' ) #NEWLINE#
ax . contour ( x , y , z , levels , cmap = cmap , norm = norm , antialiased = True ) #NEWLINE#
a = numpy . fromfile ( 'filename' , dtype = numpy . float32 ) #NEWLINE#
soup . findAll ( 'div' , style = 'width=300px;' ) #NEWLINE#
os . path . join ( * x . split ( os . path . sep ) [ 2 : ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ ( x / y ) for x , y in zip ( a , b ) ] #NEWLINE#
a = [ x for x in a if x [ 'link' ] not in b ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . savefig ( 'test.svg' ) #NEWLINE#
get_client_ip ( request ) #NEWLINE#
print ( os . path . splitext ( '/home/user/somefile.txt' ) [ 0 ] + '.jpg' ) #NEWLINE#
CELERY_ROUTES = { 'mypackage.myclass.runworker' : { 'queue' : 'myqueue' } } #NEWLINE#
pd . crosstab ( index = df [ 'values' ] , columns = [ df [ 'convert_me' ] , df [ 'age_col' ] ] ) #NEWLINE#
df . loc [ df . groupby ( 'User' ) [ 'X' ] . transform ( sum ) == 0 ] #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda x : ( x [ 1 ] , x [ 0 ] ) ) #NEWLINE#
sum ( isinstance ( x , int ) for x in a ) #NEWLINE#
print ( re . findall ( '[u0600-u06FF]+' , my_string ) ) #NEWLINE#
print ( re . findall ( '[0-u]+' , my_string ) ) #NEWLINE#
Status . objects . order_by ( 'id' ) [ 0 ] #NEWLINE#
MyModel . objects . extra ( select = { 'length' : 'Length(name)' } ) . order_by ( 'length' ) #NEWLINE#
l [ : 3 ] + l [ - 3 : ] #NEWLINE#
"""this#SPACE#isar#SPACE#ando#SPACE#msen#SPACE#tenc#SPACE#e""" #NEWLINE#
list ( zip ( a , b , zip ( c [ 0 : : 2 ] , c [ 1 : : 2 ] ) , d ) ) #NEWLINE#
df = df . reset_index ( drop = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
Employees . objects . values_list ( 'eng_name' , flat = True ) #NEWLINE#
result = { k : d2 . get ( v ) for k , v in list ( d1 . items ( ) ) } #NEWLINE#
sorted ( lst , key = lambda x : x [ 'language' ] != 'en' ) #NEWLINE#
ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#table_name#SPACE#WHERE#SPACE#1=0' ) #NEWLINE#
set ( [ 'looked' , 'resting' , 'spit' ] ) #NEWLINE#
sorted ( [ '10' , '3' , '2' ] ) #NEWLINE#
plt . cla ( ) #NEWLINE#
set ( d . keys ( ) ) #NEWLINE#
first_name = request . args . get ( 'firstname' ) #NEWLINE#
return args [ - 1 ] + mySum ( args [ : - 1 ] ) #NEWLINE#
{ { tags | join ( '#SPACE#' ) } } #NEWLINE#
[ False , False , True ] #NEWLINE#
plt . show ( ) #NEWLINE#
res = df . resample ( 'Q' , axis = 1 ) . mean ( ) #NEWLINE#
threading . Timer ( delay , self . update ) . start ( ) #NEWLINE#
{ 'y2' : 2 , 'y1' : 1 , 'x2' : 2 , 'x3' : 3 , 'y3' : 3 , 'x1' : 1 } #NEWLINE#
weekdays ( 'Wednesday' ) #NEWLINE#
df [ 'new_column' ] = df [ 'old_column' ] . apply ( lambda x : '#' + x . replace ( '#SPACE#' , '' ) ) #NEWLINE#
[ w for w in open ( 'file.txt' ) if not re . search ( '[aeiou]{2}' , w ) ] #NEWLINE#
tempDF [ 'newTuple' ] = 's' #NEWLINE#
""",#SPACE#""" . join ( [ '%.2f' ] * len ( x ) ) #NEWLINE#
medals . reindex_axis ( [ 'Gold' , 'Silver' , 'Bronze' ] , axis = 1 ) #NEWLINE#
return qs . values ( 'date' ) . annotate ( Sum ( 'amount' ) ) . order_by ( 'date' ) #NEWLINE#
df . columns = df . columns . get_level_values ( 0 ) #NEWLINE#
archive . write ( pdffile , os . path . basename ( pdffile ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . fillna ( method = 'ffill' , inplace = True ) #NEWLINE#
df . groupby ( [ 'col5' , 'col2' ] ) . size ( ) #NEWLINE#
t = tuple ( x [ 0 ] for x in s ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df = df . set_index ( [ 'TRX_DATE' ] ) #NEWLINE#
shutil . copy ( 'file.txt' , 'file2.txt' ) #NEWLINE#
plt . show ( ) #NEWLINE#
scatter ( x , y , s = 500 , color = 'green' , marker = 'h' ) #NEWLINE#
{ { car . date_of_manufacture | datetime } } #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*\\Z' , 'A\n' ) #NEWLINE#
sorted ( list1 , key = lambda x : wordorder . get ( x . split ( '-' ) [ 1 ] , len ( wordorder ) ) ) #NEWLINE#
[ '\x00\x00' , '\x00\x00' , '\x00\x00' ] #NEWLINE#
p . setopt ( pycurl . WRITEFUNCTION , lambda x : None ) #NEWLINE#
list_of_tuples = [ tuple ( k ) for k in list_of_lists ] #NEWLINE#
x [ : : - 1 ] #NEWLINE#
sorted ( list ( u . items ( ) ) , key = lambda v : v [ 1 ] ) #NEWLINE#
urllib . parse . quote ( s . encode ( 'utf-8' ) ) #NEWLINE#
df [ 'x' ] [ 'C' ] = 10 #NEWLINE#
len ( set ( a ) ) == len ( a ) #NEWLINE#
os . chmod ( 'my_script.sh' , 484 ) #NEWLINE#
strg . startswith ( ( '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ) ) #NEWLINE#
list ( allbutlast ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
np . dot ( [ 1 , 0 , 0 , 1 , 0 , 0 ] , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 1 , 0 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] ] ) #NEWLINE#
sys . exit ( ) #NEWLINE#
data_df [ 'grade' ] = data_df [ 'grade' ] . astype ( float ) . astype ( int ) #NEWLINE#
cursor . execute ( 'DROP#SPACE#TABLE#SPACE#IF#SPACE#EXISTS#SPACE#anooog1' ) #NEWLINE#
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
ax . set_xlabel ( 'Chromosome' ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#input' ) #NEWLINE#
a = np . array ( a ) #NEWLINE#
[ 'data1' , 'data3' , 'data5' , 'data2' ] #NEWLINE#
print ( re . findall ( pattern , x ) ) #NEWLINE#
df . sub ( df . mean ( axis = 1 ) , axis = 0 ) #NEWLINE#
[ j for i in x for j in i ] #NEWLINE#
plt . show ( ) #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
summed_group . unstack ( level = 0 ) . plot ( kind = 'bar' , subplots = True ) #NEWLINE#
df . ix [ 'c' , '3' ] #NEWLINE#
return next ( iter ( dictionary . values ( ) ) ) #NEWLINE#
df [ 'values' ] . groupby ( [ df . index . year , df . index . strftime ( '%b' ) ] ) . sum ( ) . unstack ( ) #NEWLINE#
os . read ( f . fileno ( ) , 50 ) #NEWLINE#
input_string . count ( 'Hello' ) #NEWLINE#
np . split ( a , [ - 1 ] ) #NEWLINE#
plt . subplots_adjust ( wspace = 0 , hspace = 0 ) #NEWLINE#
"""""" . join ( [ 'x' , 'x' , 'x' ] ) #NEWLINE#
ax . annotate ( str ( y ) , xy = ( x , y ) , xytext = ( - 5.0 , - 5.0 ) , textcoords = 'offset#SPACE#points' ) #NEWLINE#
c = [ ( m . start ( ) , m . end ( ) - 1 ) for m in re . finditer ( '\\S+' , a ) ] #NEWLINE#
"""#SPACE#""" . join ( mystring . split ( ) ) #NEWLINE#
df = df . dropna ( axis = 1 , how = 'all' ) #NEWLINE#
logging . basicConfig ( level = logging . DEBUG , format = '%(asctime)s#SPACE#%(msg)s' ) #NEWLINE#
[ i for s in [ list ( d . keys ( ) ) for d in LoD ] for i in s ] #NEWLINE#
df . groupby ( 'adult' ) [ 'weight' ] . transform ( 'idxmax' ) #NEWLINE#
self . myList . extend ( [ 0 ] * ( 4 - len ( self . myList ) ) ) #NEWLINE#
set ( [ 'a' , 'b' ] ) . issubset ( [ 'a' , 'b' , 'c' ] ) #NEWLINE#
[ [ i , i * 10 ] for i in range ( 5 ) ] #NEWLINE#
dparser . parse ( 'monkey#SPACE#20/01/1980#SPACE#love#SPACE#banana' , fuzzy = True ) #NEWLINE#
dparser . parse ( 'monkey#SPACE#2010-07-32#SPACE#love#SPACE#banana' , fuzzy = True ) #NEWLINE#
re . findall ( '[a-z]*' , 'f233op' ) #NEWLINE#
sorted ( list ( range ( len ( a ) ) ) , key = lambda i : a [ i ] ) [ - 2 : ] #NEWLINE#
random . randint ( 100000000000 , 999999999999 ) #NEWLINE#
[ ( c / t ) for c , t in zip ( conversions , trials ) ] #NEWLINE#
"""abcdabcva""" . count ( 'ab' ) #NEWLINE#
re . compile ( '.\\A|.\\A*|.\\A+' ) #NEWLINE#
r = requests . get ( 'https://api.github.com' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
df . reset_index ( ) . pivot ( 'index' , 'Letter' , 'N' ) . hist ( ) #NEWLINE#
str = open ( 'very_Important.txt' , 'r' ) . read ( ) #NEWLINE#
np . sqrt ( np . square ( df ) . sum ( axis = 1 ) ) #NEWLINE#
dict ( map ( operator . itemgetter ( 'city' , 'country' ) , li ) ) #NEWLINE#
[ 'str' , 'ing' , 'Str' , 'ing' , 'Str' , 'ing' , 'Str' , 'ing' ] #NEWLINE#
link . click ( ) #NEWLINE#
[ ( x [ i ] == y [ i ] ) for i in range ( len ( x ) ) ] #NEWLINE#
[ list ( t ) for t in zip ( * list_of_tuples ) ] #NEWLINE#
s . split ( '@' ) [ 0 ] #NEWLINE#
string [ 0 ] . isdigit ( ) #NEWLINE#
df [ 'a' ] . str . contains ( '-' ) #NEWLINE#
datetime . strptime ( '2012-03-01T10:00:00Z' , '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
np . einsum ( 'ij,jk,kl,lm' , S0 , Sx , Sy , Sz ) #NEWLINE#
re . findall ( '\\d|\\d,\\d\\)' , '6,7)' ) #NEWLINE#
re . sub ( '(.)(?=.)' , '\\1-' , s ) #NEWLINE#
c = pd . concat ( [ df , df2 ] , axis = 1 , keys = [ 'df1' , 'df2' ] ) #NEWLINE#
{ '#SPACE#Failures' : '0' , 'Tests#SPACE#run' : '1' , '#SPACE#Errors' : '0' } #NEWLINE#
'This#SPACE#is#SPACE#the#SPACE#first#SPACE#line#SPACE#of#SPACE#my#SPACE#text,#SPACE#' + 'which#SPACE#will#SPACE#be#SPACE#joined#SPACE#to#SPACE#a#SPACE#second.' #NEWLINE#
out = '' . join ( c for c in asking if c not in ( '!' , '.' , ':' ) ) #NEWLINE#
[ [ 0 , 0 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 0 , 0 ] ] #NEWLINE#
struct . unpack ( '<I' , bytes + '\x00' ) #NEWLINE#
comptest ( 'test' ) #NEWLINE#
comptest ( 'This#SPACE#is#SPACE#a#SPACE#compression#SPACE#test#SPACE#of#SPACE#a#SPACE#short#SPACE#sentence.' ) #NEWLINE#
[ 'ab' , 'c' , 'de' , 'fg' , 'h' ] #NEWLINE#
np . array ( [ 0.0 , pinf , ninf ] ) < 0 #NEWLINE#
print ( '%20s' % somevar ) #NEWLINE#
myssh . exec_command ( 'cd#SPACE#..;#SPACE#pwd' ) #NEWLINE#
{ ( x ** 2 ) for x in range ( 100 ) } #NEWLINE#
df2 = df . groupby ( [ 'customer' , 'invoice_nr' , 'date' ] ) . sum ( ) #NEWLINE#
connection . commit ( ) #NEWLINE#
model . objects . all ( ) . order_by ( '?' ) [ 0 ] #NEWLINE#
driver . execute_script ( "$('#copy_link').css('visibility',#SPACE#'visible');" ) #NEWLINE#
numpy . dstack ( numpy . meshgrid ( x , y ) ) . reshape ( - 1 , 2 ) #NEWLINE#
numpy . array ( your_list ) #NEWLINE#
return s . decode ( 'latin-1' ) #NEWLINE#
[ x [ 0 ] for x in rows ] #NEWLINE#
np . ma . array ( np . tile ( arr , 2 ) . reshape ( 2 , 3 ) , mask = ~ cond ) . argmax ( axis = 1 ) #NEWLINE#
re . findall ( '\\w+' , "Don't#SPACE#read#SPACE#O'Rourke's#SPACE#books!" ) #NEWLINE#
plt . figure ( figsize = ( 8 , 8 ) ) #NEWLINE#
array ( [ True , True , True , True , True , True , True , True , True , True ] , dtype = bool ) #NEWLINE#
df . groupby ( [ 'PplNum' , 'RoomNum' ] ) . cumcount ( ) + 1 #NEWLINE#
dict ( ( i , list ( range ( int ( i ) , int ( i ) + 2 ) ) ) for i in [ '1' , '2' ] ) #NEWLINE#
df = df [ [ 'mean' , '0' , '1' , '2' , '3' ] ] #NEWLINE#
"""""" . join ( [ i for i in s if i . isalpha ( ) ] ) #NEWLINE#
plt . rc ( 'font' , ** { 'size' : '30' } ) #NEWLINE#
file . close ( ) #NEWLINE#
np . apply_along_axis ( mahalanobis_sqdist , 1 , d1 , mean1 , Sig1 ) #NEWLINE#
i = a . argsort ( axis = None ) [ : : - 1 ] #NEWLINE#
{ 'id' : 1 , 'reference1' : 1 , 'value' : 1 } #NEWLINE#
my_array = numpy . array ( list ( gimme ( ) ) ) #NEWLINE#
df . drop ( ( 'col1' , 'a' ) , axis = 1 ) #NEWLINE#
sum ( ord ( c ) for c in string ) #NEWLINE#
datetime . strptime ( 'Tue,#SPACE#22#SPACE#Nov#SPACE#2011#SPACE#06:00:00#SPACE#GMT' , '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#%Z' ) #NEWLINE#
int ( '08' ) #NEWLINE#
url ( '^$' , TemplateView . as_view ( template_name = 'your_template.html' ) ) #NEWLINE#
sorted ( a , key = lambda x : x [ 1 ] ) #NEWLINE#
"""""" . join ( map ( lambda x : x * 7 , 'map' ) ) #NEWLINE#
logging . disable ( logging . CRITICAL ) #NEWLINE#
np . cumsum ( a [ : : - 1 ] ) [ : : - 1 ] - np . cumsum ( a ) #NEWLINE#
os . path . realpath ( path ) #NEWLINE#
request . POST . getlist ( 'recommendations' ) #NEWLINE#
Category . objects . filter ( animal__name__startswith = 'A' ) #NEWLINE#
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) ) #NEWLINE#
ax . imshow ( data , extent = [ 0 , 1 , 0 , 1 ] ) #NEWLINE#
logging . fileConfig ( loginipath , defaults = { 'logfilename' : '/var/log/mylog.log' } ) #NEWLINE#
max ( enumerate ( ld ) , key = lambda item : item [ 1 ] [ 'size' ] ) #NEWLINE#
sum ( i * i for i in l ) #NEWLINE#
[ dict ( zip ( k , x ) ) for x in v ] #NEWLINE#
df . drop_duplicates ( ) #NEWLINE#
urllib . parse . unquote ( string ) #NEWLINE#
lista_elegir [ np . random . choice ( len ( lista_elegir ) , 1 , p = probabilit ) ] #NEWLINE#
pd . concat ( [ df . drop ( 'b' , axis = 1 ) , pd . DataFrame ( df [ 'b' ] . tolist ( ) ) ] , axis = 1 ) #NEWLINE#
print ( str ( len ( s ) ) + '#SPACE#bytes' ) #NEWLINE#
x [ [ 0 , 1 , - 2 , - 1 ] ] #NEWLINE#
screen . blit ( img , ( 0 , 0 ) ) #NEWLINE#
random_choice = random . choice ( choices ) #NEWLINE#
return ( now - datetime . datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
[ 'We' , 'Love' , 'Your' , 'Dict' ] #NEWLINE#
pd . melt ( x , id_vars = [ 'farm' , 'fruit' ] , var_name = 'year' , value_name = 'value' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\\num{{{0:.2g}}}' . format ( 1000000000.0 ) ) #NEWLINE#
rc ( 'figure' , figsize = ( 11.69 , 8.27 ) ) #NEWLINE#
c [ np . logical_or ( a , b ) ] #NEWLINE#
my_new_list = zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) #NEWLINE#
driver = webdriver . Chrome ( '/usr/lib/chromium-browser/chromedriver' ) #NEWLINE#
[ ( x , lst2 [ i ] ) for i , x in enumerate ( lst ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'y1' : 1 , 'x2' : 2 , 'x1' : 1 , 'y2' : 2 } #NEWLINE#
plt . show ( ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
time . strptime ( '2011-03-06T03:36:45+0000' , '%Y-%m-%dT%H:%M:%S+0000' ) #NEWLINE#
data [ i ] [ j ] [ k ] #NEWLINE#
a [ 'searchResult' ] . sort ( key = lambda d : d [ 'ranking' ] , reverse = True ) #NEWLINE#
re . findall ( '\\d+(?=[^[]+$)' , s ) #NEWLINE#
matching = [ s for s in some_list if 'abc' in s ] #NEWLINE#
os . startfile ( 'startsim.bat' ) #NEWLINE#
print ( urllib . request . urlopen ( 'http://localhost/' ) . read ( ) ) #NEWLINE#
print ( '{:.100f}' . format ( 2.345e-67 ) ) #NEWLINE#
[ { 'col3' : 3 , 'col2' : 2 , 'col1' : 1 } , { 'col3' : 6 , 'col2' : 5 , 'col1' : 4 } ] #NEWLINE#
return reverse ( str1 [ 1 : ] + str1 [ 0 ] ) #NEWLINE#
z = [ ( i == j ) for i , j in zip ( x , y ) ] #NEWLINE#
a = [ ( 'A' , 'V' , 'C' ) , ( 'A' , 'D' , 'D' ) ] #NEWLINE#
app . config [ 'MAIL_SERVER' ] = 'smtp.gmail.com' #NEWLINE#
a [ - 1 : ] + a [ : - 1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( zip ( [ 1 , 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' , 'd' ] ) ) #NEWLINE#
self . show ( ) #NEWLINE#
pd . to_datetime ( df [ 'year' ] * 1000 + df [ 'doy' ] , format = '%Y%j' ) #NEWLINE#
int . from_bytes ( 'yÌ¦»' , byteorder = 'little' ) #NEWLINE#
winpath = 'C:\\Users\\Administrator\\bin' #NEWLINE#
df . sort ( 'count' , ascending = False ) . groupby ( 'Mt' , as_index = False ) . first ( ) #NEWLINE#
ax . set_title ( '${0}#SPACE#\\times#SPACE#10^{{{1}}}$' . format ( '3.5' , '+20' ) ) #NEWLINE#
re . findall ( '\\w' , 'abcdefg' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
subprocess . call ( 'grep#SPACE#-r#SPACE#PASSED#SPACE#*.log#SPACE#|#SPACE#sort#SPACE#-u#SPACE#|#SPACE#wc#SPACE#-l' , shell = True ) #NEWLINE#
np . where ( np . in1d ( A , B ) ) [ 0 ] #NEWLINE#
re . findall ( '^(.+?)((.+)\\3+)$' , '42344343434' ) [ 0 ] [ : - 1 ] #NEWLINE#
map ( lambda x : heapq . nsmallest ( x , 2 ) [ 1 ] , list_of_lists ) #NEWLINE#
df [ 'x' ] . str . lower ( ) #NEWLINE#
cherrypy . server . socket_host = '0.0.0.0' #NEWLINE#
plt . plot ( x , y , '.' ) #NEWLINE#
Group . objects . get ( id = 1 ) . members . all ( ) [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
driver . current_url #NEWLINE#
[ ( x + y ) for x in '12345' for y in 'abc' ] #NEWLINE#
AtB . loc [ : 2 , : 2 ] #NEWLINE#
ax . set_yticklabels ( [ 'é' , 'ã' , 'â' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
cents_int = int ( round ( float ( dollars . strip ( '$' ) ) * 100 ) ) #NEWLINE#
eval ( open ( 'myDict' ) . read ( ) ) #NEWLINE#
pd . get_dummies ( s . apply ( pd . Series ) . stack ( ) ) . sum ( level = 0 ) #NEWLINE#
re . split ( '(?<!\\d),(?!#SPACE#)|(?<=\\d),(?![\\d#SPACE#])' , s ) #NEWLINE#
itertools . product ( [ False , True ] , repeat = 5 ) #NEWLINE#
[ x . strip ( ) for x in s . split ( ',' ) ] #NEWLINE#
"""C:\\Users\\user\\Desktop\\Filed_055123.pdf""" #NEWLINE#
"""""" . encode ( 'cp870' ) #NEWLINE#
[ x for x in a if x not in b ] #NEWLINE#
sys . path . append ( 'C:\\Users\\Jimmy\\Documents\\Python' ) #NEWLINE#
return user . groups . filter ( name = 'Member' ) . exists ( ) #NEWLINE#
gtk . main ( ) #NEWLINE#
np . count_nonzero ( ~ np . isnan ( data ) ) #NEWLINE#
length = sum ( len ( s ) for s in strings ) #NEWLINE#
"""This#SPACE##SPACE##SPACE##SPACE##SPACE#is#SPACE#a#SPACE##SPACE##SPACE##SPACE##SPACE#string""" . split ( ) #NEWLINE#
df . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] #NEWLINE#
url ( '^link/(?P<backend>\\w+?)/$' , my_function ) #NEWLINE#
merged . reset_index ( ) #NEWLINE#
f . write ( makeGrayPNG ( [ [ 0 , 255 , 0 ] , [ 255 , 255 , 255 ] , [ 0 , 255 , 0 ] ] ) ) #NEWLINE#
my_function . __name__ #NEWLINE#
A = np . array ( sorted ( A , key = tuple ) ) #NEWLINE#
df . drop_duplicates ( subset = 'A' ) #NEWLINE#
array ( [ [ 1 , 2 ] , [ 7 , 8 ] , [ 3 , 4 ] , [ 9 , 10 ] , [ 5 , 6 ] , [ 11 , 12 ] ] ) #NEWLINE#
re . findall ( '\\d:::.+?(?=\\d:::|$)' , a ) #NEWLINE#
os . stat ( filename ) . st_mtime #NEWLINE#
plt . show ( ) #NEWLINE#
print ( int ( open ( '/proc/loadavg' ) . next ( ) . split ( ) [ 3 ] . split ( '/' ) [ 0 ] ) ) #NEWLINE#
f = open ( 'words.txt' , 'rU' ) #NEWLINE#
emaillist = '\n' . join ( item [ 0 ] for item in queryresult ) #NEWLINE#
[ func ( a , b ) for a , b in zip ( arrA , arrB ) ] #NEWLINE#
json . loads ( '{"MY_STRING":#SPACE#"Foo\tBar"}' ) #NEWLINE#
np . diag ( np . rot90 ( array ) ) #NEWLINE#
input . get_attribute ( 'value' ) #NEWLINE#
lambda a , b : ( a , b ) #NEWLINE#
set ( a ) . intersection ( b ) #NEWLINE#
button = gtk . Button ( 'A#SPACE#Button' ) #NEWLINE#
datetime . datetime . combine ( my_date , datetime . time . min ) #NEWLINE#
plt . show ( ) #NEWLINE#
my_list = [ line . split ( ',' ) for line in open ( 'filename.txt' ) ] #NEWLINE#
pywt . dwtn ( [ [ 1 , 2 , 3 , 4 ] , [ 3 , 4 , 5 , 6 ] , [ 5 , 6 , 7 , 8 ] , [ 7 , 8 , 9 , 10 ] ] , 'db1' ) #NEWLINE#
binascii . unhexlify ( '44756d6d7920537472696e67' ) #NEWLINE#
scipy . misc . imsave ( 'outfile.jpg' , image_array ) #NEWLINE#
A [ : , ( 0 ) ] > datetime . datetime ( 2002 , 3 , 17 , 0 , 0 , 0 ) #NEWLINE#
regex = re . compile ( '\\d+' ) #NEWLINE#
[ i . partition ( '\t' ) [ - 1 ] for i in l if '\t' in i ] #NEWLINE#
dict ( ( name , eval ( name ) ) for name in [ 'some' , 'list' , 'of' , 'vars' ] ) #NEWLINE#
[ ( v , k ) for k , v in list ( d . items ( ) ) ] #NEWLINE#
[ int ( i ) for i in str_list ] #NEWLINE#
sorted ( l , key = asum ) #NEWLINE#
super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
print ( '{0:.2f}' . format ( your_number ) ) #NEWLINE#
a . update ( [ 3 , 4 ] ) #NEWLINE#
np . array ( x ) . reshape ( 2 , 2 , 4 ) [ : , : , ( 0 ) ] #NEWLINE#
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) , reverse = True ) #NEWLINE#
df [ df . columns [ df . max ( ) > 0 ] ] #NEWLINE#
"""This#SPACE#is#SPACE#a#SPACE#string""" . split ( ) #NEWLINE#
int ( round ( 123 , - 2 ) ) #NEWLINE#
kdll . CreateSymbolicLinkA ( 'd:\\test.txt' , 'd:\\test_link.txt' , 0 ) #NEWLINE#
[ ( [ 0 ] * width ) for y in range ( height ) ] #NEWLINE#
np . hstack ( ( A [ : , : 1 ] , A [ : , 3 : ] ) ) #NEWLINE#
eval ( '(1).__class__.__bases__[0].__subclasses__()' , { '__builtins__' : None } ) #NEWLINE#
print ( item [ 'name' ] ) #NEWLINE#
ax . legend ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
f = open ( 'file.txt' , 'wb' ) #NEWLINE#
"""""" . join ( parts [ 1 : ] ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
df [ 'stats' ] . str [ 1 : - 1 ] . str . split ( ',' ) . apply ( pd . Series ) . astype ( float ) #NEWLINE#
np . savetxt ( 'test.txt' , x ) #NEWLINE#
the_list . sort ( key = lambda item : ( - len ( item ) , item ) ) #NEWLINE#
img = cv2 . imread ( 'messi5.jpg' , 0 ) #NEWLINE#
urllib . parse . urlencode ( { 'foo' : 'bar' , 'bla' : 'blah' } ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
T = [ L [ i ] for i in Idx ] #NEWLINE#
float ( math . factorial ( 171 ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda obj , attr : getattr ( obj , attr , None ) , ( 'id' , 'num' ) , myobject ) #NEWLINE#
urllib . parse . unquote ( '%0a' ) #NEWLINE#
len ( set ( list1 ) . intersection ( list2 ) ) > 0 #NEWLINE#
df [ 'DateStr' ] = df [ 'DateObj' ] . dt . strftime ( '%d%m%Y' ) #NEWLINE#
df . index . to_series ( ) . diff ( ) #NEWLINE#
sorted ( matrix , key = itemgetter ( 1 ) ) #NEWLINE#
df [ 'categories' ] . apply ( pd . Series ) . stack ( ) . value_counts ( ) #NEWLINE#
threading . Thread ( target = play2 ) . start ( ) #NEWLINE#
getattr ( __builtins__ , 'range' ) #NEWLINE#
birthdays . sort ( key = lambda d : ( d . month , d . day ) ) #NEWLINE#
len ( set ( lst ) ) == len ( lst ) #NEWLINE#
df . reindex ( [ 'Z' , 'C' , 'A' ] ) #NEWLINE#
len ( list ( dictionary . values ( ) ) ) == len ( set ( dictionary . values ( ) ) ) #NEWLINE#
df [ 'timedelta' ] = pd . to_timedelta ( df [ 'timedelta' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x . lower ( ) for x in words ] #NEWLINE#
df . groupby ( key_columns ) . size ( ) #NEWLINE#
dict ( zip ( x , y ) ) #NEWLINE#
str = etree . tostring ( root , pretty_print = True ) #NEWLINE#
print ( sum ( map ( int , x [ num - n : num ] ) ) ) #NEWLINE#
r = requests . post ( 'http://wikipedia.org' , cookies = cookie ) #NEWLINE#
f . close ( ) #NEWLINE#
[ x for x in li if 'ar' in x [ 2 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( file_list , key = lambda x : map ( int , x . split ( '.' ) [ : - 1 ] ) ) #NEWLINE#
df . groupby ( 'loser' ) . apply ( f ) #NEWLINE#
somelist = [ x for x in somelist if not determine ( x ) ] #NEWLINE#
A [ np . ix_ ( [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ) ] #NEWLINE#
getattr ( o , 'A' ) ( 1 ) #NEWLINE#
socket . inet_ntoa ( struct . pack ( '!L' , 2130706433 ) ) #NEWLINE#
np . column_stack ( np . where ( b ) ) #NEWLINE#
list ( accumulate ( list ( range ( 10 ) ) ) ) #NEWLINE#
request . GET . getlist ( 'urls' ) #NEWLINE#
int ( s . encode ( 'hex' ) , 16 ) #NEWLINE#
df [ 'Epoch' ] = pd . to_datetime ( df [ 'Epoch' ] . str [ : 6 ] , format = '%y:%j' ) + df #NEWLINE#
df = df [ df [ [ 'col_1' , 'col_2' ] ] . apply ( lambda x : f ( * x ) , axis = 1 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
Group . objects . filter ( member__in = [ 1 , 2 ] ) #NEWLINE#
words = open ( 'myfile' ) . read ( ) . split ( ) #NEWLINE#
plt . xticks ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
entity . key . id ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( list_of_dct , key = lambda x : order . index ( list ( x . values ( ) ) [ 0 ] ) ) #NEWLINE#
"""1#SPACE#<#SPACE#4#SPACE#&#SPACE#4#SPACE#>#SPACE#1""" #NEWLINE#
curOuter . execute ( 'SELECT#SPACE#id#SPACE#FROM#SPACE#myConnections' ) #NEWLINE#
pip . main ( [ 'show' , 'pyodbc' ] ) #NEWLINE#
df = df . ix [ : , 0 : 2 ] #NEWLINE#
regex . findall ( string ) #NEWLINE#
[ y for y in a if y not in b ] #NEWLINE#
collections . Counter ( map ( uuid , open ( 'log.txt' ) ) ) #NEWLINE#
format ( 12345678.46 , ',' ) . replace ( ',' , '#SPACE#' ) . replace ( '.' , ',' ) #NEWLINE#
df [ 'time' ] = pd . to_datetime ( df [ 'time' ] , unit = 's' ) #NEWLINE#
df . set_index ( [ 'Name' , 'Destination' ] ) #NEWLINE#
print ( '#SPACE#' . join ( sorted ( set ( words ) , key = words . index ) ) ) #NEWLINE#
datetime . now ( pytz . timezone ( 'Australia/Melbourne' ) ) #NEWLINE#
np . dot ( a [ : , ( None ) ] , b [ ( None ) , : ] ) #NEWLINE#
a = a [ : n ] + k + a [ n : ] #NEWLINE#
y = [ i [ 0 ] for i in x ] #NEWLINE#
int ( Decimal ( s ) ) #NEWLINE#
sys . stdout . buffer . write ( 'â\x99\xa0' . encode ( 'cp437' ) ) #NEWLINE#
plt . scatter ( x , y , color = color ) #NEWLINE#
plt . show ( ) #NEWLINE#
globals ( ) [ 'something' ] = 'bob' #NEWLINE#
df . isnull ( ) . sum ( ) #NEWLINE#
df2 = df . ix [ : , ( ~ df . columns . str . endswith ( 'prefix' ) ) ] #NEWLINE#
"""'(''|[^'])*'""" #NEWLINE#
name [ 0 ] . firstChild . nodeValue #NEWLINE#
zip ( * [ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] ) #NEWLINE#
list ( i for i in range ( 3 ) ) #NEWLINE#
list ( permutations ( list ( range ( 9 ) ) , 2 ) ) #NEWLINE#
{ f [ i + 1 ] : [ f [ i ] , f [ i + 2 ] ] for i in range ( 0 , len ( f ) , 3 ) } #NEWLINE#
list ( range ( 10 ) ) #NEWLINE#
slice = [ arr [ i ] [ 0 : 2 ] for i in range ( 0 , 2 ) ] #NEWLINE#
df_new . reset_index ( ) . set_index ( [ 'parent' , 'index' ] ) . sort_index ( ) #NEWLINE#
list . insert ( 0 , 'foo' ) #NEWLINE#
soup . select ( 'div[id^="value_xxx_c_1_f_8_a_"]' ) #NEWLINE#
print ( repr ( data ) ) #NEWLINE#
globals ( ) . update ( importlib . import_module ( 'some.package' ) . __dict__ ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : 10 * x + y , [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
df . Country . value_counts ( ) . reset_index ( name = 'Sum#SPACE#of#SPACE#Accidents' ) #NEWLINE#
re . sub ( "[^\\w'#SPACE#]" , '' , "doesn't#SPACE#this#SPACE#mean#SPACE#it#SPACE#-technically-#SPACE#works?" ) #NEWLINE#
driver . execute_script ( 'window.confirm#SPACE#=#SPACE#function(){return#SPACE#true;}' ) #NEWLINE#
{ k : ( d2 [ k ] / d1 [ k ] ) for k in list ( d1 . keys ( ) ) & d2 } #NEWLINE#
string2 . replace ( '' , string1 ) [ len ( string1 ) : - len ( string1 ) ] #NEWLINE#
window . addstr ( 'Ï\x80' ) #NEWLINE#
str_list = [ [ '{0:.8e}' . format ( flt ) for flt in sublist ] for sublist in lst ] #NEWLINE#
numpy . sort ( arr , axis = 0 ) #NEWLINE#
difflib . SequenceMatcher ( None , file1 . read ( ) , file2 . read ( ) ) #NEWLINE#
open ( 'demo.txt' , 'rb' ) . read ( ) #NEWLINE#
df . sort ( 'A' , inplace = True ) #NEWLINE#
cb . ax . yaxis . set_major_formatter ( plt . FuncFormatter ( myfmt ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( map ( '' . join , a ) ) #NEWLINE#
plt . savefig ( 'test.png' ) #NEWLINE#
print ( df . loc [ df [ 'A' ] == 'foo' ] ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
df . set_index ( [ 'd' ] , append = True ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = [ mynamedtuple ( * el ) for el in a ] #NEWLINE#
element . click ( ) #NEWLINE#
{ { json . key1 } } #NEWLINE#
df . groupby ( 'a' ) . transform ( 'count' ) #NEWLINE#
super ( Teenager , self ) . __init__ ( name , phone ) #NEWLINE#
( trace_df [ 'ratio' ] > 0 ) . mean ( ) #NEWLINE#
list ( itertools . product ( list ( range ( - x , y ) ) , repeat = dim ) ) #NEWLINE#
( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 8 , 9 ) , ( 0 , 0 ) #NEWLINE#
line . strip ( ) #NEWLINE#
struct . unpack ( '>q' , s ) [ 0 ] #NEWLINE#
struct . unpack ( '<L' , 'yÌ¦»' ) [ 0 ] #NEWLINE#
redis_conn = redis . Redis ( connection_pool = redis_pool ) #NEWLINE#
do_something ( ) #NEWLINE#
a = sorted ( a , key = lambda x : float ( x ) ) #NEWLINE#

numpy . concatenate ( LIST , axis = 0 ) #NEWLINE#
eval ( "print('Hello')" ) #NEWLINE#
any ( substring in string for substring in substring_list ) #NEWLINE#
s . encode ( 'utf8' ) #NEWLINE#
np . in1d ( b , a ) . nonzero ( ) [ 0 ] #NEWLINE#
b = [ 5.23 , 6.1 , 8.3 , 4.98 ] #NEWLINE#
[ [ '*' , '+' , '-' ] , [ '*' , '*' , '-' ] , [ '/' , '+' , '-' ] ] #NEWLINE#
[ '0.30' , '0.50' , '0.20' ] #NEWLINE#
df . groupby ( 'ID' ) . apply ( lambda t : t . iloc [ 1 ] ) #NEWLINE#
os . system ( 'msbuild#SPACE#project.sln#SPACE#/p:Configuration=Debug' ) #NEWLINE#
len ( myArray ) #NEWLINE#
data [ : , ( [ 1 , 2 , 4 , 5 , 7 , 8 ] ) ] #NEWLINE#
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 2 ] , reverse = True ) #NEWLINE#
return render_to_response ( 'index.html' , { 'variable' : 'world' } ) #NEWLINE#
[ item for innerlist in outerlist for item in innerlist ] #NEWLINE#
soup . findAll ( id = re . compile ( 'para$' ) ) #NEWLINE#
df . ix [ 'c' ] #NEWLINE#
df [ 'A_perc' ] = df [ 'A' ] / df [ 'sum' ] #NEWLINE#
plt . show ( ) #NEWLINE#
a [ i ] += 1 #NEWLINE#
pygame . display . set_mode ( size , FULLSCREEN ) #NEWLINE#
[ 'Item#SPACE#1#SPACE#' , '#SPACE#Item#SPACE#2#SPACE#' , '#SPACE#Item#SPACE#3#SPACE#' , '#SPACE#Item#SPACE#4#SPACE#' , '#SPACE#Item#SPACE#5' ] #NEWLINE#
df . groupby ( 'group' ) [ 'value' ] . rank ( ascending = False ) #NEWLINE#
regexp = re . compile ( '^group/(?P<group>[^/]+)/users$' ) #NEWLINE#
regexp = re . compile ( '^group/(?P<group>[^/]+)/users/(?P<user>[^/]+)$' ) #NEWLINE#
cleaned = [ x for x in your_list if x ] #NEWLINE#
fig . savefig ( 'ten_x_seven_cm.png' , dpi = 128 ) #NEWLINE#
[ list ( g ) for _ , g in itertools . groupby ( test , lambda x : x . split ( '_' ) [ 0 ] ) ] #NEWLINE#
User . objects . filter ( userprofile__level__gte = 0 ) #NEWLINE#
list_of_lists = [ [ try_int ( x ) for x in lst ] for lst in list_of_lists ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
sys . path . append ( '../..' ) #NEWLINE#
ax . set_xticklabels ( ax . xaxis . get_majorticklabels ( ) , rotation = 45 ) #NEWLINE#
sorted ( t , key = lambda i : ( i [ 1 ] , - i [ 2 ] ) ) #NEWLINE#
list ( split_iter ( "A#SPACE#programmer's#SPACE#RegEx#SPACE#test." ) ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
sys . stdout . write ( 'foobar' ) #NEWLINE#
ebar = plt . errorbar ( x , y , yerr = err , ecolor = 'y' ) #NEWLINE#
django . contrib . auth . authenticate ( username = username , password = password ) #NEWLINE#
tree . write ( 'filename.xml' ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
nodes = [ [ Node ( ) for j in range ( cols ) ] for i in range ( rows ) ] #NEWLINE#
re . findall ( 'abc(de)fg(123)' , 'abcdefg123#SPACE#and#SPACE#again#SPACE#abcdefg123' ) #NEWLINE#
s = 'http://www.domain.com/?s=some&two=20' #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ s . replace ( '8' , '' ) for s in lst ] ) #NEWLINE#
print ( [ u for v in [ [ i , i ] for i in range ( 5 ) ] for u in v ] ) #NEWLINE#
dt . strftime ( '%m/%d/%Y' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ '1' , '' , '2' , '3,4' ] #NEWLINE#
sorted ( itertools . chain ( args ) , cmp ) #NEWLINE#
plt . legend ( frameon = False ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
a , b , c = [ 1 , 2 , 3 ] #NEWLINE#
all ( word <STR0> d for word <STR0> [ 'somekey' , 'someotherkey' , 'somekeyggg' ] ) #NEWLINE#
min ( myList , key = lambda x : abs ( x - myNumber ) ) #NEWLINE#
sep = re . compile ( '[\\s,]+' ) #NEWLINE#
x . reset_index ( ) . merge ( y , how = 'left' , on = 'state' , sort = False ) . sort ( 'index' ) #NEWLINE#
i , j = np . where ( a == value ) #NEWLINE#
cookies = driver . get_cookies ( ) #NEWLINE#
driver . find_element_by_id ( 'foo' ) . clear ( ) #NEWLINE#
update_in_alist ( [ ( 'a' , 'hello' ) , ( 'b' , 'world' ) ] , 'b' , 'friend' ) #NEWLINE#
os . path . dirname ( sys . executable ) #NEWLINE#
pd . DataFrame ( d ) #NEWLINE#
re . sub ( '(?m)^[^\\S\\n]+' , '' , '#SPACE##SPACE#a\n#SPACE#b\n#SPACE#c\nd#SPACE##SPACE#e' ) #NEWLINE#
A [ [ 0 , 1 ] , [ 0 , 1 ] ] #NEWLINE#
sorted ( yourdata , reverse = True ) #NEWLINE#
pd . DataFrame ( df . values * df2 . values , columns = df . columns , index = df . index ) #NEWLINE#
list ( itertools . combinations ( L , 2 ) ) #NEWLINE#
[ item for item in my_list if any ( x in item for x in bad ) ] #NEWLINE#
print ( str ( a [ 'timestamp' ] ) , a [ 'ip' ] , a [ 'user' ] ) #NEWLINE#
list ( x * y for x , y in list ( zip ( a , b ) ) ) #NEWLINE#
"""foobar""" [ : 4 ] #NEWLINE#
b = np . concatenate ( ( a , a ) , axis = 0 ) #NEWLINE#
imgfile = models . ImageField ( upload_to = 'images/%m/%d' ) #NEWLINE#
parser . add_argument ( 'file' , nargs = '*' ) #NEWLINE#
[ [ int ( x ) ] for y in list_of_lists for x in y ] #NEWLINE#
gtk . main ( ) #NEWLINE#
line = re . sub ( '\\(+as#SPACE#.*?\\)#SPACE#' , '' , line ) #NEWLINE#
subprocess . call ( [ 'echo#SPACE#$var' ] , shell = True ) #NEWLINE#
str_list = [ tuple ( '{0:.8e}' . format ( flt ) for flt in sublist ) for sublist in lst ] #NEWLINE#
result = sys . stdin . read ( ) #NEWLINE#
data . loc [ : , ( list ( itertools . product ( [ 'one' , 'two' ] , [ 'a' , 'c' ] ) ) ) ] #NEWLINE#
self . response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=fname.csv' #NEWLINE#
subprocess . call ( [ 'start' , 'avión.mp3' . encode ( 'latin1' ) ] , shell = True ) #NEWLINE#
return len ( s . encode ( 'utf-8' ) ) #NEWLINE#
re . sub ( '$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$' , '' , s ) #NEWLINE#
re . sub ( '\\b\\d+\\b' , '' , s ) #NEWLINE#
[ ( 1 , 'B' , 'A' ) , ( 2 , 'C' , 'B' ) , ( 3 , 'C' , 'A' ) ] #NEWLINE#
res = list ( sorted ( theDict , key = theDict . __getitem__ , reverse = True ) ) #NEWLINE#
c = [ b [ i ] for i in index ] #NEWLINE#
pattern = re . compile ( 'review:#SPACE#(http://url.com/(\\d+)\\s?)+' , re . IGNORECASE ) #NEWLINE#
pattern = re . compile ( '/review:#SPACE#(http://url.com/(\\d+)\\s?)+/' , re . IGNORECASE ) #NEWLINE#
jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( { 'f' : var6 , 'g' : var7 , 'h' : var8 } ) #NEWLINE#
re . split ( '_for_' , 'happy_hats_for_cats' ) #NEWLINE#
direct_output = subprocess . check_output ( 'ls' , shell = True ) #NEWLINE#
df . groupby ( lambda idx : 0 ) . agg ( [ 'mean' , 'std' ] ) #NEWLINE#
df . groupby ( 'Mt' , as_index = False ) . first ( ) #NEWLINE#
rows = soup . findAll ( 'tr' ) [ 4 : : 5 ] #NEWLINE#
data = json . loads ( '{"lat":444,#SPACE#"lon":555}' ) #NEWLINE#
pickle . loads ( s ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#YOUR_TABLE_NAME' ) #NEWLINE#
re . findall ( '\\w+|[^\\w\\s]' , text , re . UNICODE ) #NEWLINE#
figure ( figsize = ( 11.69 , 8.27 ) ) #NEWLINE#
[ list ( v ) for k , v in itertools . groupby ( mylist , key = lambda x : x [ : 5 ] ) ] #NEWLINE#
os . path . dirname ( sys . modules [ '__main__' ] . __file__ ) #NEWLINE#
polls = Poll . objects . filter ( category = 'foo' ) . prefetch_related ( 'choice_set' ) #NEWLINE#
x = tf . constant ( [ 'This#SPACE#is#SPACE#a#SPACE#string' , 'This#SPACE#is#SPACE#another#SPACE#string' ] ) #NEWLINE#
Frame = pd . DataFrame ( [ Cov ] , columns = [ 'Sequence' , 'Start' , 'End' , 'Coverage' ] ) #NEWLINE#
str1 . split ( ) #NEWLINE#
zip ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
legend ( numpoints = 1 ) #NEWLINE#
return HttpResponseRedirect ( request . META . get ( 'HTTP_REFERER' , '/' ) ) #NEWLINE#
[ ( int ( x ) if x else 0 ) for x in data . split ( ',' ) ] #NEWLINE#
"""""" . join ( [ s . string for s in s . findAll ( text = True ) ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
"""This""" #NEWLINE#
sorted ( a , key = lambda x : ( sum ( x [ 1 : 3 ] ) , x [ 0 ] ) ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
any ( x in string for x in search ) #NEWLINE#
struct . unpack ( 'd' , struct . pack ( 'Q' , int ( s2 , 0 ) ) ) [ 0 ] #NEWLINE#
df1 . groupby ( [ df1 . index . year , df1 . index . hour ] ) . mean ( ) #NEWLINE#
len ( max ( i , key = len ) ) #NEWLINE#
print ( [ map ( solve , x . split ( '\t' ) ) for x in s . rstrip ( ) . split ( '\r\n' ) ] ) #NEWLINE#
sorted ( iter ( d . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
AAF ( 10 , [ 4 , 5.5 , 10 ] , [ 1 , 1 , 2 ] , 3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
y = map ( operator . itemgetter ( 0 ) , x ) #NEWLINE#
dict ( ( x , set ( y ) & set ( d1 . get ( x , ( ) ) ) ) for x , y in d2 . items ( ) ) #NEWLINE#
vobj . adr #NEWLINE#
"""didn't""" . replace ( "'" , '' ) #NEWLINE#
list ( stru . decode ( 'utf-8' ) ) #NEWLINE#
word = re . sub ( '([aeiou]):(([aeiou][^aeiou]*){3})$' , '\\1\\2' , word ) #NEWLINE#
print ( decoded . encode ( 'utf-8' ) ) #NEWLINE#
list ( 'Word#SPACE#to#SPACE#Split' ) #NEWLINE#
np . equal . reduce ( [ 1 , 0 , 0 , 1 ] ) #NEWLINE#
print ( 'Total#SPACE#cost#SPACE#is:#SPACE#${:,.2f}' . format ( TotalAmount ) ) #NEWLINE#
'all' , 'just' , 'being' , 'over' , 'both' , 'through' , 'yourselves' , 'its' , 'before' , 'herself' , 'had' , 'should' , 'to' , 'only' , 'under' , 'ours' , 'has' , 'do' , 'them' , 'his' , 'very' , 'they' , 'not' , 'during' , 'now' , 'him' , 'nor' , 'did' , 'this' , 'she' , 'each' , 'further' , 'where' , 'few' , 'because' , 'doing' , 'some' , 'are' , 'our' , 'ourselves' , 'out' , 'what' , 'for' , 'while' , 'does' , 'above' , 'between' , 't' , 'be' , 'we' , 'who' , 'were' , 'here' , 'hers' , 'by' , 'on' , 'about' , 'of' , 'against' , 's' , 'or' , 'own' , 'into' , 'yourself' , 'down' , 'your' , 'from' , 'her' , 'their' , 'there' , 'been' , 'whom' , 'too' , 'themselves' , 'was' , 'until' , 'more' , 'himself' , 'that' , 'but' , 'don' , 'with' , 'than' , 'those' , 'he' , 'me' , 'myself' , 'these' , 'up' , 'will' , 'below' , 'can' , 'theirs' , 'my' , 'and' , 'then' , 'is' , 'am' , 'it' , 'an' , 'as' , 'itself' , 'at' , 'have' , 'in' , 'any' , 'if' , 'again' , 'no' , 'when' , 'same' , 'how' , 'other' , 'which' , 'you' , 'after' , 'most' , 'such' , 'why' , 'a' , 'off' , 'i' , 'yours' , 'so' , 'the' , 'having' , 'once' #NEWLINE#
sorted ( iter ( mydict . items ( ) ) , key = lambda tup : sum ( tup [ 1 ] ) , reverse = True ) [ : 3 ] #NEWLINE#
i = np . array ( [ [ 0 ] , [ 1 ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
bytearray ( '\x00\x00\x00\x01\x02\x03\x04\x05\x00\x00' ) #NEWLINE#
xs . sort ( lambda x , y : cmp ( len ( x ) , len ( y ) ) ) #NEWLINE#
list ( ordered_merge ( [ [ 3 , 4 ] , [ 1 , 5 ] , [ 2 , 6 ] ] , [ 1 , 2 , 0 , 0 , 1 , 2 ] ) ) #NEWLINE#
df_result . apply ( get_col_name , axis = 1 ) #NEWLINE#
db . __setitem__ ( 'a' , { 'alpha' : 'aaa' } ) #NEWLINE#
uinfo . save ( ) #NEWLINE#
{ '_id' : 'run_unique_identifier' , 'param1' : 'val1' , 'param2' : 'val2' } #NEWLINE#
arr [ [ 0 , 1 , 1 ] , [ 1 , 0 , 2 ] ] #NEWLINE#
set ( [ i for s in [ list ( d . keys ( ) ) for d in LoD ] for i in s ] ) #NEWLINE#
Article . objects . annotate ( like_count = Count ( 'likes' ) ) . order_by ( '-like_count' ) #NEWLINE#
img = Image . open ( 'tweeter.png' ) . convert ( 'RGBA' ) #NEWLINE#
df . round ( { 'Alabama_exp' : 2 , 'Credit_exp' : 3 } ) #NEWLINE#
[ x for b in a for x in b ] #NEWLINE#
[ 'tuberculin#SPACE#1#SPACE#Cap(s)' , 'tylenol#SPACE#1#SPACE#Cap(s)' , 'tramadol#SPACE#2#SPACE#Cap(s)' ] #NEWLINE#
re . findall ( '\\b(?:b+a)+b+\\b' , mystring ) #NEWLINE#
re . match ( '(?:.*?[A-Z]){3}.*?([A-Z].*)' , s ) . group ( 1 ) #NEWLINE#
hashlib . md5 ( 'filename.exe' ) . hexdigest ( ) #NEWLINE#
split_list ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] , 2 ) #NEWLINE#
sorted ( a . items ( ) ) == sorted ( b . items ( ) ) #NEWLINE#
re . match ( '(.*?[.?!](?:\\s+.*?[.?!]){0,1})' , phrase ) . group ( 1 ) #NEWLINE#
plt . grid ( True ) #NEWLINE#
[ int ( d ) for d in str ( bin ( x ) ) [ 2 : ] ] #NEWLINE#
Reporter . objects . all ( ) . delete ( ) #NEWLINE#
lst . append ( 'a' ) #NEWLINE#
df . groupby ( level = [ 0 , 1 ] ) . quantile ( ) #NEWLINE#
response . headers = { 'WWW-Authenticate' : 'Basic#SPACE#realm="test"' } #NEWLINE#
cur . execute ( "SELECT#SPACE#*#SPACE#FROM#SPACE#records#SPACE#WHERE#SPACE#email#SPACE#LIKE#SPACE#'%s'" , ( search , ) ) #NEWLINE#
{ { value | safe } } #NEWLINE#
struct . unpack ( '11B' , s ) #NEWLINE#
{ k : int ( v ) for k , v in d . items ( ) } #NEWLINE#
sys . stdout . write ( '\r28#SPACE#seconds#SPACE#remaining' ) #NEWLINE#
df [ [ 1 ] ] #NEWLINE#
keys . sort ( key = lambda x : map ( int , x . split ( '.' ) ) ) #NEWLINE#
[ max ( len ( str ( x ) ) for x in line ) for line in zip ( * foo ) ] #NEWLINE#
dict ( zip ( [ d . pop ( 'name' ) for d in listofdict ] , listofdict ) ) #NEWLINE#
a . fromlist ( [ int ( val ) for val in stdin . read ( ) . split ( ) ] ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
session . query ( Tag ) . distinct ( Tag . name ) . group_by ( Tag . name ) . count ( ) #NEWLINE#
[ ( 1 , 4 , 7 ) , ( 2 , 5 , 8 ) , ( 3 , 6 , 9 ) ] #NEWLINE#
c = [ [ ( i + j ) for i , j in zip ( e , b ) ] for e in a ] #NEWLINE#
my_list . sort ( key = operator . itemgetter ( 'name' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . corrcoef ( x ) #NEWLINE#
print ( re . findall ( '[\\u0600-\\u06FF]+' , my_string ) ) #NEWLINE#
[ 'two' , 2 , 'one' , 1 ] #NEWLINE#
df . to_csv ( 'Result.csv' , index = False , sep = '#SPACE#' ) #NEWLINE#
ax . plot ( x_normalised , y , 'bo' ) #NEWLINE#
pattern = re . compile ( '^(?:\\\\.|[^/\\\\])*/((?:\\\\.|[^/\\\\])*)/' ) #NEWLINE#
subprocess . _check_call ( [ 'espeak' , text ] , stdout = FNULL , stderr = FNULL ) #NEWLINE#
re . findall ( '((?:A|B|C)D)' , 'BDE' ) #NEWLINE#
re . compile ( '(\\s+)' ) . split ( '\tthis#SPACE#is#SPACE#an#SPACE##SPACE#example' ) #NEWLINE#
response . headers [ 'WWW-Authenticate' ] = 'Basic#SPACE#realm="test"' #NEWLINE#
book . add_sheet ( 'Sheet#SPACE#2' ) #NEWLINE#
[ sublist [ : : - 1 ] for sublist in to_reverse [ : : - 1 ] ] #NEWLINE#
[ str ( wi ) for wi in wordids ] #NEWLINE#
keys , values = zip ( * list ( d . items ( ) ) ) #NEWLINE#
os . chmod ( path , stat . S_IRUSR | stat . S_IRGRP | stat . S_IROTH ) #NEWLINE#
[ [ ] for _ in range ( n ) ] #NEWLINE#
np . rec . fromarrays ( ( x , y , z ) , names = [ 'x' , 'y' , 'z' ] ) #NEWLINE#
win . show_all ( ) #NEWLINE#
re . findall ( '\\b[A-Z]' , formula ) #NEWLINE#
df . set_index ( [ 'year' , 'month' , 'item' ] ) . unstack ( level = - 1 ) #NEWLINE#
[ s . strip ( ) for s in input ( ) . split ( ',' ) ] #NEWLINE#
url . split ( '&' ) [ - 1 ] . replace ( '=' , '' ) + '.html' #NEWLINE#
df1 [ 'value' ] . unstack ( 0 ) . asfreq ( 'D' ) #NEWLINE#
cursor . execute ( sql , list ( myDict . values ( ) ) ) #NEWLINE#
len ( s . split ( ) ) #NEWLINE#
pd . concat ( [ df , df . dictionary . apply ( str2dict ) . apply ( pd . Series ) ] , axis = 1 ) #NEWLINE#
print ( os . path . relpath ( '/usr/var/log/' , '/usr/var' ) ) #NEWLINE#
re . sub ( '(?<=[a-z])([A-Z])' , '-\\1' , s ) . lower ( ) #NEWLINE#
plt . colorbar ( im , ax = ax ) #NEWLINE#
df . pivot_table ( index = 'a' , columns = 'b' , values = 'c' , fill_value = 0 ) #NEWLINE#
db . test . update ( { 'x' : '42' } , { '$set' : { 'a' : '21' } } , True ) #NEWLINE#
df . reset_index ( inplace = True ) #NEWLINE#
print ( '%x' % int ( '2a' , 16 ) ) #NEWLINE#
re . findall ( '[a-zA-Z_]+' , string ) #NEWLINE#
print ( [ obj . attr for obj in my_list_of_objs ] ) #NEWLINE#
dates_dict . setdefault ( key , [ ] ) . append ( date ) #NEWLINE#
re . findall ( '\\$([^$]*)\\$' , string ) #NEWLINE#
[ [ 's1.txt' , 'ai1.txt' ] , [ 's2.txt' ] , [ 'ai3.txt' ] ] #NEWLINE#
[ [ - 1 , 2 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 2 , - 1 ] , [ - 1 , - 2 , 0 ] , [ 0 , - 2 , 2 ] , [ 0 , 1 , 0 ] ] #NEWLINE#
next ( iter ( dict . values ( ) ) ) #NEWLINE#
sorted ( zip ( a , b ) ) #NEWLINE#
re . sub ( '\\.(?=[^#SPACE#.])' , '.#SPACE#' , para ) #NEWLINE#
dict ( zip ( my_list , map ( my_dictionary . get , my_list ) ) ) #NEWLINE#
df . pivot_table ( index = 'saleid' , columns = 'upc' , aggfunc = 'size' , fill_value = 0 ) #NEWLINE#
pd . DataFrame ( { 'X' : X , 'Y' : Y , 'Z' : Z } ) . T #NEWLINE#
"""{s:{c}^{n}}""" . format ( s = 'dog' , n = 5 , c = 'x' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
ax . set_zlabel ( 'Z' ) #NEWLINE#
max ( len ( word ) for word in i ) #NEWLINE#
df . to_pickle ( file_name ) #NEWLINE#
ea . Scalars ( 'Loss' ) #NEWLINE#
sock . setsockopt ( socket . IPPROTO_TCP , socket . TCP_NODELAY , 1 ) #NEWLINE#
isinstance ( a , dict ) #NEWLINE#
aapl . groupby ( ( aapl . sign . diff ( ) != 0 ) . cumsum ( ) ) . size ( ) #NEWLINE#
"""{}#SPACE#%s#SPACE#{}""" . format ( 'foo' , 'bar' ) #NEWLINE#
self . view . header ( ) . setModel ( model ) #NEWLINE#
template . render ( name = 'John#SPACE#Doe' ) #NEWLINE#
np . where ( ( vals == ( 0 , 1 ) ) . all ( axis = 1 ) ) #NEWLINE#
cursor . execute ( 'select#SPACE#*#SPACE#from#SPACE#table#SPACE#where#SPACE#example=%s' , ( example , ) ) #NEWLINE#
return '' . join ( ch for ch in s if unicodedata . category ( ch ) [ 0 ] != 'C' ) #NEWLINE#
{ k : bigdict [ k ] for k in list ( bigdict . keys ( ) ) & { 'l' , 'm' , 'n' } } #NEWLINE#
streaks ( df , 'E' ) #NEWLINE#
( datetime . datetime . utcnow ( ) - datetime . timedelta ( hours = 11 ) ) . year #NEWLINE#
pd . concat ( [ A , B ] , axis = 1 ) #NEWLINE#
root . quit ( ) #NEWLINE#
soup . find_all ( 'div' , class_ = 'crBlock#SPACE#' ) #NEWLINE#
f = open ( 'test/test.pdf' , 'rb' ) #NEWLINE#
os . path . commonprefix ( [ '/usr/var' , '/usr/var2/log' ] ) #NEWLINE#
df . loc [ ( 'at' , [ 1 , 3 , 4 ] ) , 'Dwell' ] #NEWLINE#
re . findall ( '(?=(SS..|S.Q.|S..P|.SQ.|.S.P|..QP))' , s ) #NEWLINE#
df [ df [ 'A' ] . isin ( [ 3 , 6 ] ) ] #NEWLINE#
os . rename ( dir , dir + '!' ) #NEWLINE#
re . findall ( '(?<!\\d)\\d{5}(?!\\d)' , s ) #NEWLINE#
sum ( map ( ord , string ) ) #NEWLINE#
df [ 'C' ] = df [ 'A' ] + df [ 'B' ] #NEWLINE#
df [ 'A' ] , df [ 'B' ] = df [ 'AB' ] . str . split ( '#SPACE#' , 1 ) . str #NEWLINE#
os . system ( 'sudo#SPACE#-u#SPACE#hadoop#SPACE#bin/hadoop-daemon.sh#SPACE#stop#SPACE#tasktracker' ) #NEWLINE#
l = ( int ( x ) for x in s . split ( ) ) #NEWLINE#
datetime . strptime ( '07/28/2014#SPACE#18:54:55.099' , '%m/%d/%Y#SPACE#%H:%M:%S.%f' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df2 . CET . map ( df1 . set_index ( 'date' ) [ 'revenue' ] ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#foo#SPACE#WHERE#SPACE#bar#SPACE#=#SPACE#%s#SPACE#AND#SPACE#baz#SPACE#=#SPACE#%s' , ( param1 , param2 ) ) #NEWLINE#
df [ 'Season' ] . apply ( split_it ) #NEWLINE#
node . getElementsByTagName ( 'author' ) [ 0 ] . childNodes [ 0 ] . nodeValue #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( '' . join ( parts [ 1 : ] ) ) #NEWLINE#
A [ np . arange ( A . shape [ 0 ] ) [ : , ( None ) ] , B ] #NEWLINE#
df2 . xs ( 'b' , axis = 1 , level = 1 ) #NEWLINE#
ax . set_xlim ( 0 , 1 ) #NEWLINE#
datetime . now ( ) - datetime . now ( ) #NEWLINE#
connection . close ( ) #NEWLINE#
plt . setp ( legend . get_title ( ) , fontsize = 'xx-small' ) #NEWLINE#
msglist = [ hextotal [ i : i + 4096 ] for i in range ( 0 , len ( hextotal ) , 4096 ) ] #NEWLINE#
pickled_data . decode ( 'latin1' ) #NEWLINE#
text . config ( state = DISABLED ) #NEWLINE#
frame . resample ( '1H' ) . agg ( { 'radiation' : np . sum , 'tamb' : np . mean } ) #NEWLINE#
new_list = my_list [ - 10 : ] #NEWLINE#
df . loc [ df [ 'A' ] > 2 , 'B' ] = new_val #NEWLINE#
array ( [ [ - 1 , - 1 ] , [ 0 , 0 ] , [ 1 , 1 ] ] ) #NEWLINE#
df [ df . index < '2000-01-04' ] . index [ - 1 ] #NEWLINE#
list . append ( 'foo' ) #NEWLINE#
y = [ row [ : ] for row in x ] #NEWLINE#
datetime . datetime . combine ( dateobject , datetime . time ( ) ) #NEWLINE#
data . encode ( 'hex' ) #NEWLINE#
Entry . objects . filter ( name = 'name' , title = 'title' ) . exists ( ) #NEWLINE#
super ( ArtefactForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
strings . sort ( key = lambda str : re . sub ( '.*%(.).*' , '\\1' , str ) ) #NEWLINE#
mylist . sort ( key = lambda x : x . lower ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
streetno = dict ( { '1' : 'Sachine#SPACE#Tendulkar' , '2' : 'Dravid' } ) #NEWLINE#
sum ( 1 for i , j in zip ( a , b ) if i != j ) #NEWLINE#
cur . execute ( 'SET#SPACE#TEXTSIZE#SPACE#2147483647#SPACE#SELECT#SPACE#myimage#SPACE#FROM#SPACE#testing#SPACE#WHERE#SPACE#id#SPACE#=#SPACE#1' ) #NEWLINE#
pd . Series ( df . T . to_dict ( 'list' ) ) #NEWLINE#
data . set_index ( 'Date' ) . diff ( ) #NEWLINE#
print ( str ( x ) . decode ( 'raw_unicode_escape' ) ) #NEWLINE#
sorted ( set ( my_list ) ) #NEWLINE#
p . properties ( ) [ s ] . get_value_for_datastore ( p ) #NEWLINE#
sys . path . append ( '/path/to/pkg1' ) #NEWLINE#
np . random . randn ( 5 ) * 10 #NEWLINE#
db . session . commit ( ) #NEWLINE#
df . ix [ : - 1 ] #NEWLINE#
pd . melt ( df , id_vars = 'year' ) [ 'year' , 'value' ] #NEWLINE#
Toy . objects . filter ( toy_owners__parents = parent ) #NEWLINE#
os . system ( 'cls' ) #NEWLINE#
f . write ( open ( 'xxx.mp4' , 'rb' ) . read ( ) ) #NEWLINE#
curry = lambda f , a : lambda x : f ( a , x ) #NEWLINE#
A . ravel ( ) [ A . shape [ 1 ] * i : A . shape [ 1 ] * ( i + A . shape [ 1 ] ) : A . shape [ 1 ] + 1 ] #NEWLINE#
exec ( 'f(' + ',' . join ( str ( i ) for i in range ( 5000 ) ) + ')' ) #NEWLINE#
print ( url . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
upload_url = blobstore . create_upload_url ( '/upload' , gs_bucket_name = 'my_bucket' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . to_csv ( filename , date_format = '%Y%m%d' ) #NEWLINE#
print ( hex ( int ( '0xAD4' , 16 ) + int ( '0x200' , 16 ) ) ) #NEWLINE#
repeat = re . compile ( '(?P<start>[a-z])(?P=start)*-?' ) #NEWLINE#
ax . axes . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
df . stack ( ) . groupby ( level = 0 ) . first ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
sck . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
[ 'hello{0}' . format ( i ) for i in a ] #NEWLINE#
struct . unpack ( 'd' , binascii . unhexlify ( '4081637ef7d0424a' ) ) #NEWLINE#
[ '1' , '(15/-23)s' , '4' ] #NEWLINE#
sorted ( sorted ( s ) , key = str . upper ) #NEWLINE#
re . findall ( 'a*?bc*?' , 'aabcc' , re . DOTALL ) #NEWLINE#
print ( 'here#SPACE#is#SPACE#your#SPACE#checkmark:#SPACE#' + '✓' ) #NEWLINE#
[ line . split ( ) for line in f ] #NEWLINE#
weekly = [ sum ( visitors [ x : x + 7 ] ) for x in range ( 0 , len ( daily ) , 7 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
r . sub ( '\\1_STATUS#SPACE#=#SPACE#"\\2"\\n\\1_TIME#SPACE#=#SPACE#\\3' , content ) #NEWLINE#
engine = create_engine ( 'postgresql://localhost/dbname' , echo = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( flatten ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) ) #NEWLINE#
print ( zip ( my_list [ 0 : : 2 ] , my_list [ 1 : : 2 ] ) ) #NEWLINE#
file . close ( ) #NEWLINE#
json . dumps ( [ dict ( list ( row . items ( ) ) ) for row in rs ] ) #NEWLINE#
[ k for k , v in User . _fields . items ( ) if v . required ] #NEWLINE#
next = driver . find_element_by_css_selector ( 'li.next>a' ) #NEWLINE#
[ [ 0.5 , 0.625 ] , [ 0.625 , 0.375 ] ] #NEWLINE#
d = { t [ 0 ] : t [ 1 : ] for t in l } #NEWLINE#
[ i . split ( '\t' , 1 ) [ 0 ] for i in l ] #NEWLINE#
sys . exit ( 'aa!#SPACE#errors!' ) #NEWLINE#
shutil . copyfile ( 'foo.txt' , 'P:\\foo.txt' ) #NEWLINE#
A = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] #NEWLINE#
ax2 . set_ylim ( [ 0 , 5 ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( '\n' . join ( lines ) ) #NEWLINE#
warnings . warn ( 'test#SPACE#warning' ) #NEWLINE#
browser . submit ( ) #NEWLINE#
sorted ( Profile . objects . all ( ) , key = lambda p : p . reputation ) #NEWLINE#
writer . writerows ( zip ( * [ d [ key ] for key in keys ] ) ) #NEWLINE#
"""string""" #NEWLINE#
var = dork1 #NEWLINE#
ax . set_title ( '$%s#SPACE#\\times#SPACE#10^{%s}$' % ( '3.5' , '+20' ) ) #NEWLINE#
sum ( len ( y ) for y in x if len ( y ) > 1 ) #NEWLINE#
dt = datetime . datetime . utcfromtimestamp ( 1288483950 ) #NEWLINE#
b = np . delete ( a , - 1 , 1 ) #NEWLINE#
print ( '\n' . join ( '#SPACE##SPACE#' . join ( map ( str , row ) ) for row in t ) ) #NEWLINE#
df = df . rename ( index = { last : 'a' } ) #NEWLINE#
openmode = 'w' #NEWLINE#
some_func ( * params ) #NEWLINE#
"""""" . join ( s ) #NEWLINE#
app . run ( ) #NEWLINE#
[ x for x in file . namelist ( ) if x . endswith ( '/' ) ] #NEWLINE#
sudo ( 'some_command' , shell = False ) #NEWLINE#
'one' in list ( d . values ( ) ) #NEWLINE#
write ( 'Temperature#SPACE#is#SPACE#{0}#SPACE#and#SPACE#pressure#SPACE#is#SPACE#{1})' . format ( X , Y ) ) #NEWLINE#
list ( zip ( * ( ( iter ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) , ) * 3 ) ) ) #NEWLINE#
np . array ( [ np . arange ( 3 ) , np . arange ( 2 , - 1 , - 1 ) , np . ones ( ( 3 , ) ) ] ) . min ( axis = 0 ) #NEWLINE#
( ( 25 < a ) & ( a < 100 ) ) . sum ( ) #NEWLINE#
[ np . einsum ( 'i,j->' , x [ n ] , e [ n ] ) for n in range ( len ( x ) ) ] #NEWLINE#
super ( ProductSerializer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
array ( [ 'one.com' , 'two.url' , 'three.four' ] , dtype = '|S10' ) #NEWLINE#
sum ( x * y for x , y in zip ( a , b ) ) #NEWLINE#
[ k for d in list ( foo . values ( ) ) for k in d ] #NEWLINE#
[ ( '1' , '11' ) , ( '2' , '22' ) , ( '' , '33' ) , ( '' , '44' ) ] #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
return float ( a ) / float ( b ) #NEWLINE#
array ( [ [ 1 , 3 , 4 , 10 ] , [ 1 , 2 , 3 , 20 ] , [ 1 , 2 , 1 , 30 ] ] ) #NEWLINE#
slice ( * [ ( int ( i . strip ( ) ) if i else None ) for i in string_slice . split ( ':' ) ] ) #NEWLINE#
itertools . product ( list ( range ( 2 ) ) , repeat = 4 ) #NEWLINE#
[ '1' , '2' , '3' , '4' , '5' , '6' , '7' , 'X' , '9' ] #NEWLINE#
s . decode ( 'unicode_escape' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
{ k : v for k , v in enumerate ( range ( 10 ) ) if v % 2 == 0 } #NEWLINE#
self . response . out . write ( 'Image#SPACE#not#SPACE#available' ) #NEWLINE#
print ( '[%s]' % ',#SPACE#' . join ( '%.3f' % val for val in list ) ) #NEWLINE#
b . update ( d ) #NEWLINE#
[ s [ : 5 ] for s in buckets ] #NEWLINE#
a [ np . in1d ( a , b ) ] #NEWLINE#
subprocess . call ( [ 'py.test' ] ) #NEWLINE#
re . findall ( '[一-\u9fff]+' , ipath ) #NEWLINE#
[ x for x in j if x >= 5 ] #NEWLINE#
"""foo#SPACE#bar#SPACE#bar#SPACE#bar""" . replace ( 'bar' , 'XXX' , 1 ) . find ( 'bar' ) #NEWLINE#
min ( enumerate ( a ) , key = lambda x : abs ( x [ 1 ] - 11.5 ) ) #NEWLINE#
array ( [ [ 0.0 , 0.0 ] , [ 1.0 , 1.0 ] ] ) , array ( [ [ 0.0 , 1.0 ] , [ 0.0 , 1.0 ] ] ) #NEWLINE#
d = pd . DataFrame ( 0 , index = np . arange ( len ( data ) ) , columns = feature_list ) #NEWLINE#
list ( csv . reader ( open ( 'demo.txt' , 'r' ) , delimiter = '\t' ) ) #NEWLINE#
sorted ( d , key = d . get ) #NEWLINE#
[ m . group ( 1 ) for l in lines for m in [ regex . search ( l ) ] if m ] #NEWLINE#
df . index [ 'Row#SPACE#2' : 'Row#SPACE#5' ] #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
sorted ( iter ( mydict . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
arr = np . empty ( ( 0 , 3 ) , int ) #NEWLINE#
plt . plot ( line [ 0 ] , line [ 1 ] , linewidth = 0.5 , color = 'k' ) #NEWLINE#
no_integers = [ x for x in mylist if not isinstance ( x , int ) ] #NEWLINE#
img . transpose ( 2 , 0 , 1 ) . reshape ( 3 , - 1 ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
json . loads ( '[{"name":"sam"}]' ) #NEWLINE#
self . add_line ( '#SPACE##SPACE##SPACE#:annotation:#SPACE#=#SPACE#' + objrepr , '<autodoc>' ) #NEWLINE#
re . split ( '#SPACE#+' , str1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'key3' : 'value#SPACE#with#SPACE#spaces' , 'key2' : 'value2' , 'key1' : 'value1' } #NEWLINE#
soup . find_all ( 'a' , href = re . compile ( 'http://www\\.iwashere\\.com/' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . imshow ( im2 , cmap = plt . get_cmap ( 'gray' ) ) #NEWLINE#
re . findall ( '\\[(.*?)\\]' , mystring ) #NEWLINE#
df . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . mean ( axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . draw ( ) #NEWLINE#
lambda x : True if x % 2 == 0 else False #NEWLINE#
pyglet . app . run ( ) #NEWLINE#
tuple ( sorted ( a . items ( ) ) ) #NEWLINE#
print ( 'exámple' . upper ( ) ) #NEWLINE#
[ '235' , '40' , '17' ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
data [ 'City' ] . encode ( 'ascii' , 'ignore' ) #NEWLINE#
demand . ix [ 'Com' ] . apply ( lambda x : x * series ) #NEWLINE#
var1 , var2 = input ( 'Enter#SPACE#two#SPACE#numbers#SPACE#here:#SPACE#' ) . split ( ) #NEWLINE#
[ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 4 ) , ( 4 , 5 ) , ( 5 , 6 ) , ( 6 , 1 ) ] #NEWLINE#
df . to_dict ( 'index' ) #NEWLINE#
A [ ( np . random . choice ( A . shape [ 0 ] , 2 , replace = False ) ) , : ] #NEWLINE#
print ( '#SPACE#' . join ( row ) ) #NEWLINE#
{ { my_variable | forceescape | <STR0> } } #NEWLINE#
os . path . commonprefix ( [ '/the/dir/' , os . path . realpath ( filename ) ] ) == '/the/dir/' #NEWLINE#
lst . sort ( key = lambda x : x [ 2 ] , reverse = True ) #NEWLINE#
urllib . parse . quote ( 'http://spam.com/go/' ) #NEWLINE#
df [ 'year' ] = df [ 'year' ] . where ( source_years != 0 , df [ 'year' ] ) #NEWLINE#
output . append ( max ( flatlist , key = lambda x : x [ 1 ] ) ) #NEWLINE#
y = sorted ( set ( x ) , key = lambda s : s . lower ( ) ) #NEWLINE#
nums . search ( '0001.20000' ) . group ( 0 ) #NEWLINE#
print ( '£1' . encode ( 'latin-1' ) ) #NEWLINE#
list ( itertools . product ( * a ) ) #NEWLINE#
str ( n ) == str ( n ) [ : : - 1 ] #NEWLINE#
soup . find ( 'meta' , { 'name' : 'City' } ) [ 'content' ] #NEWLINE#
changed_list = [ ( int ( f ) if f . isdigit ( ) else f ) for f in original_list ] #NEWLINE#
db . session . commit ( ) #NEWLINE#
ts . plot ( marker = '.' ) #NEWLINE#
sql = 'UPGRADE#SPACE#inventory_server#SPACE#set#SPACE#server_mac#SPACE#=#SPACE#%s#SPACE#where#SPACE#server_name#SPACE#=#SPACE#%s' #NEWLINE#
np . sqrt ( np . sum ( ( a - b ) ** 2 , axis = 1 ) ) #NEWLINE#
np . arange ( len ( df . columns ) ) // 2 #NEWLINE#
[ i for i in ( 'a' , 'b' , 'c' ) ] #NEWLINE#
fig . savefig ( 'axAspect.png' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 'aa' , 'bb' , 'CC' , 'Dd' , 'ee' ] #NEWLINE#
set ( [ 'stackoverflow' , 'google' ] ) . issubset ( sites ) #NEWLINE#
entries = sorted ( list ( json_data . items ( ) ) , key = lambda items : items [ 1 ] [ #NEWLINE# 'data_two' ] ) #NEWLINE#
assert datetime . datetime . now ( ) == FAKE_TIME #NEWLINE#
[ ( lambda x : x * x ) for x in range ( 10 ) ] #NEWLINE#
[ 1 , 1 , 1 , 10 , 10 , 5 , 5 , 5 , 5 , 5 , 5 ] #NEWLINE#
window . set_position ( Gtk . WindowPosition . CENTER ) #NEWLINE#
[ ( 'X' , 'Y' , '20' ) , ( 'H' , 'F' , '23' ) , ( 'S' , 'Y' , '13' ) , ( 'M' , 'Z' , '25' ) ] #NEWLINE#
m3 = np . zeros ( ( 50 , 50 ) ) #NEWLINE#
re . findall ( '\\d+\\.\\d+' , 'Current#SPACE#Level:#SPACE#13.4#SPACE#db.' ) #NEWLINE#
df . iloc [ : , ( [ 2 , 5 , 6 , 7 , 8 ] ) ] . mean ( axis = 0 ) #NEWLINE#
re . sub ( '\\.[^.]+$' , '' , s ) #NEWLINE#
df . groupby ( [ df [ 'Source' ] , pd . TimeGrouper ( freq = 'Min' ) ] ) #NEWLINE#
np . array ( arr [ : , ( 1 ) ] , dtype = np . float ) #NEWLINE#
re . split ( ';#SPACE#|,#SPACE#' , str ) #NEWLINE#
datetime . datetime . strptime ( '2012-05-29T19:30:03.283Z' , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]' , '' , regex = True ) . astype ( float ) #NEWLINE#
[ row . split ( '\t' ) for row in s . splitlines ( ) ] #NEWLINE#
print ( re . sub ( '(\\W)\\1+' , '\\1' , a ) ) #NEWLINE#
print ( re . match ( '(\\d+(\\.\\d+)?)' , '3434.35353' ) . group ( 1 ) ) #NEWLINE#
codecs . open ( 'myfile' , 'r' , 'iso-8859-1' ) . read ( ) #NEWLINE#
os . chdir ( os . path . expanduser ( '~/Documents' ) ) #NEWLINE#
"""""" . join ( dropwhile ( lambda x : x in bad_chars , example_line [ : : - 1 ] ) ) [ : : - 1 ] #NEWLINE#
[ '' . join ( x ) for x in a ] #NEWLINE#
mynewlist = list ( myset ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
__import__ ( 'foo.bar.baz.qux' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
np . array ( arr [ : , ( 1 ) ] ) #NEWLINE#
pattern = re . compile ( '(.)\\1?' , re . IGNORECASE | re . DOTALL ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
ast . literal_eval ( '(1,2,3,4)' ) #NEWLINE#
print ( data . encode ( 'hex' ) ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 0 , 4 , 5 , 6 , 7 , 7 , 6 , 5 ] } ) #NEWLINE#
random . choice ( [ k for k in d for x in d [ k ] ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
zip ( * main_list ) #NEWLINE#
"""jvm.args=#SPACE#-Dappdynamics.com=true,#SPACE#-Dsomeotherparam=false,""" . split ( '=' , 1 ) #NEWLINE#
( e == np . array ( [ 1 , 2 ] ) ) . all ( - 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
random . sample ( range ( 1 , 50 ) , 6 ) #NEWLINE#
ssh . close ( ) #NEWLINE#
a = a [ - 1 : ] + a [ : - 1 ] #NEWLINE#
array ( [ 0.63143784 , 0.93852927 , 0.0026815 , 0.66263594 , 0.2603184 ] ) #NEWLINE#
df . columns [ df . max ( ) > 0 ] #NEWLINE#
[ '8th' , 'of' , 'Июнь' ] #NEWLINE#
my_dict = { 'cheese' : 'cake' } #NEWLINE#
Cart . objects . filter ( user = user ) . first ( ) . distinct ( 'items.item' ) #NEWLINE#
driver . execute_script ( 'return#SPACE#navigator.userAgent' ) #NEWLINE#
df . info ( ) #NEWLINE#
"""x#SPACE#=#SPACE#{}""" . format ( x . decode ( 'utf8' ) ) . encode ( 'utf8' ) #NEWLINE#
re . split ( '[#SPACE#.]' , 'a#SPACE#b.c' ) #NEWLINE#
globals ( ) . update ( vars ( args ) ) #NEWLINE#
"""\\xc3\\x85あ""" . encode ( 'utf-8' ) #NEWLINE#
array ( [ [ 2 , 1 ] , [ 5 , 1 ] , [ 0 , 3 ] , [ 4 , 5 ] ] ) #NEWLINE#
list_of_tuples [ 0 ] [ 0 ] = 7 #NEWLINE#
Comment . objects . filter ( user = user ) . values_list ( 'user__name' , 'user__email' ) #NEWLINE#
( s . factorize ( ) [ 0 ] + 1 ) . astype ( 'float' ) #NEWLINE#
done = [ ( el , x ) for el in [ a , b , c , d ] ] #NEWLINE#
stdin , stdout , stderr = ssh . exec_command ( './wrapper.py#SPACE#./someScript.sh' ) #NEWLINE#
soup . findAll ( attrs = { 'name' : 'description' } ) #NEWLINE#
url ( '^login/$' , views . login , name = 'login' ) , #NEWLINE#
Tkinter . Button ( self , text = 'Browse' , command = self . askopenfile ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'labelA' : 'thereissomethinghere' , 'label_Bbb' : 'hereaswell' } #NEWLINE#
somestring . replace ( '\\r' , '' ) #NEWLINE#
OrderedDict ( [ ( 'b' , 7 ) , ( 'a' , 5 ) , ( 'c' , 3 ) ] ) #NEWLINE#
print ( [ [ l [ : i ] , l [ i : ] ] for i in range ( 1 , len ( l ) ) ] ) #NEWLINE#
{ k for d in LoD for k in list ( d . keys ( ) ) } #NEWLINE#
df [ 'SEQ' ] = df . sort_values ( by = 'START' ) . groupby ( 'ID' ) . cumcount ( ) + 1 #NEWLINE#
sorted ( lst , key = lambda x : ( - 1 * c [ x ] , lst . index ( x ) ) ) #NEWLINE#
stuff . replace ( '#SPACE#and#SPACE#' , '/' ) #NEWLINE#
re . search ( 'Test(.*)print' , testStr , re . DOTALL ) #NEWLINE#
[ ( 1 , 4 ) , ( 2 , 3 ) , ( 0 , 1 , 4 ) , ( 0 , 2 , 3 ) ] #NEWLINE#
pandas . set_option ( 'display.max_columns' , 7 ) #NEWLINE#
networkx . draw_networkx_labels ( G , pos , labels ) #NEWLINE#
url ( '^test/getFile' , 'getFile' ) #NEWLINE#
x = [ i [ 0 ] for i in x ] #NEWLINE#
pd . read_csv ( StringIO ( s ) , sep = ',' , comment = '#' ) #NEWLINE#
p . terminate ( ) #NEWLINE#
template_globals . filters [ 'ctest' ] = ctest #NEWLINE#
b = np . where ( np . isnan ( a ) , 0 , a ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . annotate ( 'important\npart' , xy = ( 5 , 1.5 ) , ha = 'center' , va = 'center' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
os . environ . get ( 'DEBUSSY' , 'Not#SPACE#Set' ) #NEWLINE#
print ( '' . join ( choice ( ascii_uppercase ) for i in range ( 12 ) ) ) #NEWLINE#
webbrowser . open_new ( url ) #NEWLINE#
array ( [ [ 1 , 3 ] , [ 4 , 6 ] , [ 7 , 9 ] ] ) #NEWLINE#
"""^/rss/(?P<anynumber>\\d+)/(?P<anystring>.+)/$""" #NEWLINE#
json . load ( codecs . open ( 'sample.json' , 'r' , 'utf-8-sig' ) ) #NEWLINE#
df . set_index ( [ 'Z' , 'A' , 'pos' ] ) . unstack ( 'pos' ) #NEWLINE#
db . session . delete ( page ) #NEWLINE#
a = numpy . zeros ( ( 10 , 10 ) , dtype = [ ( 'x' , int ) , ( 'y' , 'a10' ) ] ) #NEWLINE#
[ m [ 0 ] for m in re . compile ( '((.+?)\\2+)' ) . findall ( '44442(2)2(2)44' ) ] #NEWLINE#
pixmap = QtGui . QPixmap ( path ) #NEWLINE#
re . findall ( '[^#SPACE#]*.(?:cnn|espn).[^#SPACE#]*' , u1 ) #NEWLINE#
listy = [ [ ] for i in range ( 3 ) ] #NEWLINE#
key = lambda d : ( d [ 'rank' ] == 0 , d [ 'rank' ] ) #NEWLINE#
return map ( lambda s : s . strip ( '\n' ) , stri ) #NEWLINE#
df [ df . applymap ( isnumber ) ] #NEWLINE#
sum ( 1 for x in list ( d . values ( ) ) if some_condition ( x ) ) #NEWLINE#
print ( 'U+{:04X}' . format ( ord ( c ) ) ) #NEWLINE#
a . rstrip ( ) . split ( '\n' ) #NEWLINE#
re . match ( '\\$[0-9]+[^\\$]*$' , '$1#SPACE#off#SPACE#delicious#SPACE#$5#SPACE#ham.' ) #NEWLINE#
[ [ 5 , 4 ] , [ 2 , 4 ] , [ 1 , 0 ] , [ 3 , 0 ] , [ 5 , 1 ] , [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 5 ] ] #NEWLINE#
url ( '^(?P<slug>[a-zA-Z0-9-]+)/$' , MyView . as_view ( ) , name = 'my_named_view' ) #NEWLINE#
[ y [ 'baz' ] for x in foos for y in x [ 'bar' ] ] #NEWLINE#
df . columns = [ '#SPACE#' . join ( col ) . strip ( ) for col in df . columns . values ] #NEWLINE#
[ i for i in range ( 100 ) <STR0> i > 10 <STR0> i < 20 ] #NEWLINE#
[ 'hanks#SPACE#sir' , 'Oh#SPACE#thanks#SPACE#to#SPACE#remember' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
d = { 'timmy' : 'red' , 'barry' : 'green' , 'guido' : 'blue' } #NEWLINE#
{ 'directory' : 'app/static/bower_components' } #NEWLINE#
app . exec_ ( ) #NEWLINE#
users . sort ( key = lambda x : order . index ( x [ 'id' ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'i#SPACE#=#SPACE#' , '#SPACE#' , '0' , '\n' , 'i#SPACE#=#SPACE#' , '#SPACE#' , '1' , '\n' ] #NEWLINE#
w = re . findall ( '[a-zA-ZÑñ]+' , p . decode ( 'utf-8' ) ) #NEWLINE#
Group . objects . get ( id = 1 ) . members . all ( ) [ 0 ] #NEWLINE#
print ( '\n' . join ( [ '#SPACE#' . join ( row ) for row in matrix ] ) ) #NEWLINE#
re . split ( '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)' , text ) #NEWLINE#
m [ ~ m . mask ] #NEWLINE#
conn . execute ( 'insert#SPACE#into#SPACE#example#SPACE#values#SPACE#(?,#SPACE#?);' , ( 5 , 205 ) ) #NEWLINE#
matrix = [ ( [ 0 ] * 5 ) for i in range ( 5 ) ] #NEWLINE#
super ( Klass , self ) . save ( * args , ** kwargs ) #NEWLINE#
{ 'id' : 1 , 'reference1' : 1 , 'reference2' : [ 1 ] , 'value' : 1 } #NEWLINE#
return s . decode ( 'hex' ) . decode ( 'utf-8' ) #NEWLINE#
[ item for item in a if sum ( item ) > 10 ] #NEWLINE#
sorted ( list ( dictionary . items ( ) ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
{ ( p . id , ind ) : { 'id' : p . id , 'position' : ind } for ind , p in enumerate ( p_list ) } #NEWLINE#
df . resample ( '3D' , how = 'sum' ) #NEWLINE#
df . resample ( '216000S' , how = 'sum' ) #NEWLINE#
[ ( x , f ( x ) ) for x in iterable if f ( x ) ] #NEWLINE#
a [ [ [ 0 ] , [ 1 ] , [ 3 ] ] , [ 0 , 2 ] ] #NEWLINE#
print ( in_list ( [ 1 , 2 , 3 ] , [ 1 , 2 , 4 ] ) ) #NEWLINE#
plt . savefig ( 'foo.pdf' , papertype = 'a2' ) #NEWLINE#
df [ 'name' ] . str . replace ( '\\(.*\\)' , '' ) #NEWLINE#
sum ( 1 if d [ 'success' ] else 0 for d in s ) #NEWLINE#
'x' in [ 'x' , 'd' , 'a' , 's' , 'd' , 's' ] #NEWLINE#
app . run ( debug = True ) #NEWLINE#
d3 = { k : list ( set ( d1 . get ( k , [ ] ) ) . intersection ( v ) ) for k , v in list ( d2 . items ( ) ) } #NEWLINE#
glfw . Terminate ( ) #NEWLINE#
re . sub ( '[\\#SPACE#\\n]{2,}' , '' , yourstring ) #NEWLINE#
print ( select ( [ my_table , func . current_date ( ) ] ) . execute ( ) ) #NEWLINE#
sns . pointplot ( x = 'grp' , y = 'val' , hue = 'grp' , data = df ) #NEWLINE#
sorted ( objects , key = lambda x : idmap [ x [ 'id' ] ] ) #NEWLINE#
"""""" . join ( c for c in my_string if c . isdigit ( ) ) #NEWLINE#
element . click ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
user = models . ForeignKey ( <STR0> , unique = True ) #NEWLINE#
"""""" . join ( ( 'a' , 'b' , 'c' , 'd' , 'g' , 'x' , 'r' , 'e' ) ) #NEWLINE#
print ( [ a for a , b in re . findall ( '((\\w)\\2*)' , s ) ] ) #NEWLINE#
print ( re . search ( '\\bLOG_ADDR\\s+(\\S+)' , line ) . group ( 1 ) ) #NEWLINE#
names = list ( map ( lambda x : x [ 0 ] , cursor . description ) ) #NEWLINE#
driver . switch_to_frame ( 'frameName' ) #NEWLINE#
zip ( [ 1 , 2 , 3 ] , [ 'a' , 'b' , 'c' ] , [ 'x' , 'y' , 'z' ] ) #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
process . stdin . close ( ) #NEWLINE#
ax . set_ylabel ( 'y#SPACE#label' ) #NEWLINE#
session . commit ( ) #NEWLINE#
a = np . concatenate ( ( a , [ 0 ] ) ) #NEWLINE#
app . run ( threaded = True ) #NEWLINE#
df . set_index ( [ '%_GPST' , 'satID' ] ) #NEWLINE#
pd . concat ( [ df . head ( 1 ) , df . tail ( 1 ) ] ) #NEWLINE#
df . write . csv ( 'mycsv.csv' ) #NEWLINE#
self . response . out . write ( 'Permission#SPACE#denied' ) #NEWLINE#
a . to_csv ( 'test.csv' , cols = [ 'sum' ] ) #NEWLINE#
text = re . sub ( '(\\bget\\b)' , '\\1@' , text ) #NEWLINE#
app . debug = True #NEWLINE#
model . predict ( X_test ) #NEWLINE#
return render_to_response ( 'contact.html' , { 'form' : form } ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
np . flatnonzero ( x ) . mean ( ) #NEWLINE#
data . groupby ( data [ 'date' ] . map ( lambda x : x . year ) ) #NEWLINE#
re . compile ( '[#SPACE#-×ff]' , re . DEBUG ) #NEWLINE#
re . compile ( '[#SPACE#-\ud7ff]' , re . DEBUG ) #NEWLINE#
print ( template . render ( ) ) #NEWLINE#
print ( '[' + ',' . join ( "'" + str ( x ) + "'" for x in s ) + ']' ) #NEWLINE#
re . sub ( '#SPACE##SPACE#+' , '#SPACE#' , s ) #NEWLINE#
df . c_contofficeID . str . replace ( '^12(?=.{4}$)' , '' ) #NEWLINE#
3 in [ 1 , 2 , 3 ] #NEWLINE#
set ( [ 1 , 2 , 3 ] ) | set ( [ 4 , 5 , 6 ] ) #NEWLINE#
df . loc [ gb . groups [ 'foo' ] , ( 'A' , 'B' ) ] #NEWLINE#
np . array ( list ( arr [ : , ( 1 ) ] ) , dtype = np . float ) #NEWLINE#
plt . xlabel ( 'Primary#SPACE#T$_{\\rm#SPACE#eff}$' ) #NEWLINE#
"""a;bcd,ef#SPACE#g""" . replace ( ';' , '#SPACE#' ) . replace ( ',' , '#SPACE#' ) . split ( ) #NEWLINE#
df . sort_values ( [ 'b' , 'c' ] , ascending = [ True , False ] , inplace = True ) #NEWLINE#
print ( open ( 'myfile.txt' , 'U' ) . read ( ) ) #NEWLINE#
image . save ( output , format = 'GIF' ) #NEWLINE#
process = subprocess . Popen ( [ 'python' , '-h' ] , bufsize = 1 ) #NEWLINE#
df = pd . read_csv ( 'my.csv' , dtype = { 'my_column' : np . float64 } , na_values = [ 'n/a' ] ) #NEWLINE#
line . strip ( ) . split ( '#SPACE#' ) #NEWLINE#
map ( sum , zip ( * lists ) ) #NEWLINE#
[ '' . join ( [ 'a' , 'b' , 'c' , 'd' ] ) [ i : j + 1 ] for i in range ( 4 ) for j in range ( i , 4 ) ] #NEWLINE#
img . save ( 'output.png' ) #NEWLINE#
CustomPK . _meta . pk . name #NEWLINE#
[ next ( it ) for _ in range ( n ) ] #NEWLINE#
trie = { 'a' : { 'b' : { 'e' : { } , 's' : { } } , 'c' : { 't' : { } , 'k' : { } } } } #NEWLINE#
sys . path . insert ( 0 , 'libs' ) #NEWLINE#
return re . sub ( '\\p{P}+' , '' , text ) #NEWLINE#
print ( s . encode ( 'unicode_escape' ) ) #NEWLINE#
cursor . close ( ) #NEWLINE#
driver . implicitly_wait ( 60 ) #NEWLINE#
my_list . sort ( key = lambda x : ( order . index ( x [ 0 ] ) , x [ 2 ] , x [ 3 ] ) ) #NEWLINE#
all ( x . count ( 1 ) == 3 for x in L ) #NEWLINE#
[ 1 , 1 , 0 , 0 , 1 , 0 ] #NEWLINE#
max ( test_string . rfind ( i ) for i in '([{' ) #NEWLINE#
my_function ( ** data ) #NEWLINE#
request . POST . get ( 'title' , '' ) #NEWLINE#
df . T . apply ( tuple ) . apply ( list ) #NEWLINE#
list ( range ( 0 , 30 , 5 ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sys . path . insert ( 0 , os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) #NEWLINE#
[ x . index . tolist ( ) for x in dfs ] #NEWLINE#
{ { ( item . date | date ) : 'Y#SPACE#M#SPACE#d' } } #NEWLINE#
df = df . drop ( 'column_name' , 1 ) #NEWLINE#
reverse_d = { value : key for key , values in list ( d . items ( ) ) for value in values } #NEWLINE#
config_file = os . path . expanduser ( '~/foo.ini' ) #NEWLINE#
""",""" . join ( [ 'foo' , 'bar' , '' , 'baz' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . remove ( filename ) #NEWLINE#
re . findall ( '.{,16}\\b' , text ) #NEWLINE#
plt . show ( ) #NEWLINE#
some_other_function ( * args , ** kwargs ) #NEWLINE#
df . reindex_axis ( df . mean ( ) . sort_values ( ) . index , axis = 1 ) #NEWLINE#
'timedelta(%s=%d)' % ( 'days' , 2 ) #NEWLINE#
"""{0}\\w{{2}}b{1}\\w{{2}}quarter""" . format ( 'b' , 'a' ) #NEWLINE#
os . chdir ( 'chapter3' ) #NEWLINE#
a . shape [ 1 ] #NEWLINE#
df [ 'value' ] = df [ 'value' ] . str . get ( 0 ) #NEWLINE#
[ i for i in my_list if not i . startswith ( ( '91' , '18' ) ) ] #NEWLINE#
f = open ( 'file_name_here' ) #NEWLINE#
print ( sorted ( xs , key = len ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
df . groupby ( by = df . columns , axis = 1 ) . mean ( ) #NEWLINE#
df . pivot ( index = 'order' , columns = 'sample' ) #NEWLINE#
plt . show ( ) #NEWLINE#
numpy . apply_along_axis ( numpy . linalg . norm , 1 , a ) #NEWLINE#
df . columns = [ 'code/colour' , 'id:amount' ] #NEWLINE#
print ( 'ÅÄÖ' . encode ( 'UTF8' ) ) #NEWLINE#
myList [ : ] = [ ( x / myInt ) for x in myList ] #NEWLINE#
re . findall ( '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' , x ) #NEWLINE#
plt . show ( ) #NEWLINE#
df_result = pd . DataFrame ( ts , columns = [ 'value' ] ) #NEWLINE#
str_list = list ( [ _f for _f in str_list if _f ] ) #NEWLINE#
open ( 'names.txt' , 'w' ) . write ( '' . join ( lines ) ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
pd . pivot_table ( df , index = df . index . date , columns = df . index . time , values = 'Close' ) #NEWLINE#
return my_list [ : ] #NEWLINE#
plt . gcf ( ) . autofmt_xdate ( ) #NEWLINE#
print ( ( 'focus#SPACE#object#SPACE#class:' , window2 . focus_get ( ) . __class__ ) ) #NEWLINE#
my_list = [ [ x for x in sublist if x not in to_del ] for sublist in my_list ] #NEWLINE#
d . setdefault ( x , [ ] ) . append ( foo ) #NEWLINE#
pd . DataFrame ( { 'A' : [ 1 , 2 ] , 'B' : [ 'a,' , 'b' ] } ) #NEWLINE#
pd . Series ( [ pd . Timestamp ( '2014-01-03' ) , 'FRI' , 'FIZZ' ] ) #NEWLINE#
[ 'cat_dog' , 'cat_fish' , 'dog_fish' ] #NEWLINE#
[ ( '34' , '3' , '234' ) , ( '1' , '34' , '22' ) , ( '35' , '55' , '12' ) ] #NEWLINE#
ax . legend ( handles [ : : - 1 ] , labels [ : : - 1 ] , title = 'Line' , loc = 'upper#SPACE#left' ) #NEWLINE#
sys . path . append ( '/path/to/your/package/root' ) #NEWLINE#
cursor . execute ( 'insert#SPACE#into#SPACE#components#SPACE#values(?,?)' , ( 1 , 'foo' ) ) #NEWLINE#
obj . save ( ) #NEWLINE#
soup . select ( 'div[id$=_answer]' ) #NEWLINE#
driver . page_source #NEWLINE#
df . ix [ : , ( df . loc [ 0 ] == 38.15 ) ] . columns #NEWLINE#
int ( '{:08b}' . format ( n ) [ : : - 1 ] , 2 ) #NEWLINE#
[ 100 , None , None , None , None , None , None , None , None , None , 200 ] #NEWLINE#
simplejson . dumps ( dict ( [ ( '%d,%d' % k , v ) for k , v in list ( d . items ( ) ) ] ) ) #NEWLINE#
list ( chain . from_iterable ( a ) ) #NEWLINE#
f . write ( 'text#SPACE#to#SPACE#write\n' ) #NEWLINE#
User . objects . order_by ( '-pet__age' ) [ : 10 ] #NEWLINE#
df [ df . columns - [ 'T1_V6' ] ] #NEWLINE#
sorted ( [ tuple ( map ( int , d . split ( ':' ) ) ) for d in my_time_list ] ) #NEWLINE#
df . groupby ( 'User' ) [ 'X' ] . filter ( lambda x : x . sum ( ) == 0 ) #NEWLINE#
datetime . strptime ( '2015/01/01#SPACE#12:12am' , '%Y/%m/%d#SPACE#%I:%M%p' ) #NEWLINE#
_get_recursive_results ( d , [ 'l' , 'm' ] , [ 'k' , 'stuff' ] ) #NEWLINE#
re . sub ( '\\s{2,}' , '|' , line . strip ( ) ) #NEWLINE#
plt . savefig ( 'graph.png' , dpi = 1000 ) #NEWLINE#
s . send ( 'Hello#SPACE#server!' ) #NEWLINE#
output = Popen ( [ 'mycmd' , 'myarg' ] , stdout = PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
ForkedPdb ( ) . set_trace ( ) #NEWLINE#
sum ( v for v in list ( d . values ( ) ) if v > 0 ) #NEWLINE#
os . system ( 'start#SPACE#"$file"' ) #NEWLINE#
writer . writeheader ( ) #NEWLINE#
[ ord ( c ) for c in s . decode ( 'hex' ) ] #NEWLINE#
print ( dict ( [ s . split ( '=' ) for s in my_list ] ) ) #NEWLINE#
df . groupby ( [ 'level_0' , 'level_1' ] ) . counts . sum ( ) . unstack ( ) #NEWLINE#
print ( max ( x , key = sum ) ) #NEWLINE#
levels = [ { } , { } , { } ] #NEWLINE#
dic [ 'Test' ] . update ( { 'class' : { 'section' : 5 } } ) #NEWLINE#
plt . show ( ) #NEWLINE#
connection . send ( 'HTTP/1.0#SPACE#200#SPACE#OK\r\n\r\n' ) #NEWLINE#
connection . send ( 'HTTP/1.0#SPACE#200#SPACE#established\r\n\r\n' ) #NEWLINE#
return ( x . group ( 0 ) for x in re . finditer ( "[A-Za-z']+" , string ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
list_dict = { t [ 0 ] : t for t in tuple_list } #NEWLINE#
struct . unpack ( 'BBB' , rgbstr . decode ( 'hex' ) ) #NEWLINE#
[ [ 0 , 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 , 9 , 10 , 11 ] , [ 12 , 13 , 14 , 15 , 16 ] , [ 17 , 18 , 19 ] ] #NEWLINE#
dict ( ( k , v * dict2 [ k ] ) for k , v in list ( dict1 . items ( ) ) if k in dict2 ) #NEWLINE#
float ( re . findall ( '(?:^|_)' + par + '(\\d+\\.\\d*)' , dir ) [ 0 ] ) #NEWLINE#
math . cos ( math . radians ( 1 ) ) #NEWLINE#
sentence = [ word . lower ( ) for word in sentence ] #NEWLINE#
datetime . strptime ( '2009/05/13#SPACE#19:19:30#SPACE#-0400' , '%Y/%m/%d#SPACE#%H:%M:%S#SPACE#%z' ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
zip ( it , it , it ) #NEWLINE#
re . sub ( '#SPACE#+' , '#SPACE#' , s ) #NEWLINE#
array ( [ [ - 1 , - 2 , - 1 , 2 ] , [ 0 , - 1 , 0 , 3 ] , [ 1 , 0 , 1 , 4 ] ] ) #NEWLINE#
{ _key : _value ( _key ) for _key in _container } #NEWLINE#
list ( product ( [ 'Long' , 'Med' ] , [ 'Yes' , 'No' ] ) ) #NEWLINE#
pandas . concat ( [ df1 , df2 ] ) . drop_duplicates ( ) . reset_index ( drop = True ) #NEWLINE#
return [ list ( x ) for x in list ( results . values ( ) ) ] #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
sorted ( d [ '11163722404385' ] , key = lambda x : x [ - 1 ] . date ( ) ) #NEWLINE#
re . sub ( '(.)' , '\\1\\1' , text . read ( ) , 0 , re . S ) #NEWLINE#
urllib . parse . unquote ( urllib . parse . unquote ( some_string ) ) #NEWLINE#
[ 'text' , 'othertext' , 'moretext' , 'yetmoretext' ] #NEWLINE#
pd . concat ( g for _ , g in df . groupby ( 'ID' ) if len ( g ) > 1 ) #NEWLINE#
x = np . arange ( 15 ) . reshape ( 5 , 3 ) #NEWLINE#
np . where ( ( a [ 0 ] == 2 ) & ( a [ 1 ] == 5 ) ) #NEWLINE#
""",#SPACE#""" . join ( [ ( str ( k ) + '#SPACE#' + str ( v ) ) for k , v in list ( a . items ( ) ) ] ) #NEWLINE#
os . system ( 'source#SPACE#.bashrc;#SPACE#shopt#SPACE#-s#SPACE#expand_aliases;#SPACE#nuke#SPACE#-x#SPACE#scriptPath' ) #NEWLINE#
data = [ [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] ] #NEWLINE#
fig . set_size_inches ( w , h , forward = True ) #NEWLINE#
re . search ( '[a-zA-Z]' , the_string ) #NEWLINE#
df . groupby ( level = 0 , as_index = False ) . nth ( 0 ) #NEWLINE#
[ ( 10 , 21 , 32 ) , ( 13 , 24 , 35 ) , ( 16 , 27 , 38 ) ] #NEWLINE#
print ( square ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
df . iloc [ 2 , 0 ] #NEWLINE#
random . choice ( [ 1 , 2 , 3 ] ) #NEWLINE#
img . save ( '/tmp/out.png' , 'PNG' ) #NEWLINE#
data [ 0 ] [ 'f' ] = var #NEWLINE#
time . strftime ( '{%Y-%m-%d#SPACE#%H:%M:%S}' ) #NEWLINE#
re . sub ( '([a-z])\\1+' , '\\1' , 'ffffffbbbbbbbqqq' ) #NEWLINE#
{ c : i for i , c in enumerate ( 'xdtwkeltjwlkejt7wthwk89lk' ) if c . isdigit ( ) } #NEWLINE#
ax . plot ( x , mpt1 , color = 'dbz53' , label = '53#SPACE#dBz' ) #NEWLINE#
os . system ( 'echo#SPACE#$probe1' ) #NEWLINE#
sys . path . insert ( 0 , './path/to/your/modules/' ) #NEWLINE#
{ { ( mylist | slice ) : '3:8' } } #NEWLINE#
self . buttonBox . button ( QtGui . QDialogButtonBox . Reset ) . clicked . connect ( foo ) #NEWLINE#
s . reset_index ( 0 ) . reset_index ( drop = True ) #NEWLINE#
user2 = forms . ModelChoiceField ( queryset = User . objects . all ( ) ) #NEWLINE#
sys . path . append ( '.' ) #NEWLINE#
con . commit ( ) #NEWLINE#
list ( str ( 123 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df1 = pd . read_hdf ( '/home/.../data.h5' , 'firstSet' ) #NEWLINE#
GRAVITY = 9.8 #NEWLINE#
print ( 'World' ) #NEWLINE#
foo ( * i ) #NEWLINE#
x . merge ( x . merge ( y , how = 'left' , on = 'state' , sort = False ) ) #NEWLINE#
from selenium import webdriver #NEWLINE#
plt . show ( ) #NEWLINE#
df . to_sparse ( 0 ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
sum ( [ sum ( x ) for x in [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ] ) #NEWLINE#
Matrix ( [ [ 32.4 , 32.4 , 32.4 ] , [ 32.8 , 32.8 , 32.8 ] , [ 33.2 , 33.2 , 33.2 ] ] ) #NEWLINE#
np . count_nonzero ( a [ np . ix_ ( [ 0 , 3 ] , [ 0 , 3 ] ) ] ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
struct . unpack ( 'h' , pS [ 0 : 2 ] ) #NEWLINE#
df . groupby ( 'date' ) [ 'level' ] . first ( ) . apply ( np . ceil ) . to_dict ( ) #NEWLINE#
sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
sorted ( [ '10' , '3' , '2' ] , key = int ) #NEWLINE#
db . close ( ) #NEWLINE#
soup . body . findAll ( text = 'Python' ) #NEWLINE#
print ( 'Hello,#SPACE#{0},#SPACE#how#SPACE#do#SPACE#you#SPACE#do?' . format ( input ( 'Enter#SPACE#name#SPACE#here:#SPACE#' ) ) ) #NEWLINE#
my_task . apply_async ( exchange = 'C.dq' , routing_key = host ) #NEWLINE#
"""^v\\d+$""" #NEWLINE#
s . split ( '#SPACE#' , 1 ) [ 1 ] #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
[ i for i , v in enumerate ( a ) if v > 4 ] #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
print ( '{0}' . format ( '5' . zfill ( 2 ) ) ) #NEWLINE#
list ( '{0:0b}' . format ( 8 ) ) #NEWLINE#
[ ( i , j ) for i , j in zip ( a , x ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
files . sort ( key = file_number ) #NEWLINE#
s [ s . find ( '\n' ) + 1 : s . rfind ( '\n' ) ] #NEWLINE#
"""{:>7s}""" . format ( mystring ) #NEWLINE#
sortedlist = [ ( k , a [ k ] ) for k in sorted ( a ) ] #NEWLINE#
df [ 'value' ] = df [ 'value' ] . str [ 0 ] #NEWLINE#
df [ pd . isnull ( df ) . any ( axis = 1 ) ] #NEWLINE#
conn . commit ( ) #NEWLINE#
"""""" . join ( list ( OrderedDict . fromkeys ( 'aaabcabccd' ) . keys ( ) ) ) #NEWLINE#
df . loc [ : , ( 'b' ) ] #NEWLINE#
result = result . replace ( '\\' , '' ) #NEWLINE#
"""\\xc3\\x85あ""" . encode ( 'utf-8' ) . decode ( 'unicode_escape' ) #NEWLINE#
request . FILES [ 'imgfield' ] #NEWLINE#
all_examples = [ 'A,1,1,1' , 'B,2,1,2' , 'C,4,4,3' , 'D,4,5,6' ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Â£' . decode ( 'utf8' ) + '1' ) #NEWLINE#
a [ 1 : : 2 ] = - 1 #NEWLINE#
os . system ( 'mount#SPACE#/dev/dvdrom#SPACE#/mount-point' ) #NEWLINE#
s = s . replace ( ',' , '' ) #NEWLINE#
id . sendline ( '' ) #NEWLINE#
[ 3 , 3 , 3 , 3 , 3 ] #NEWLINE#
print ( pattern . search ( url ) . group ( 1 ) ) #NEWLINE#
self . SetSizerAndFit ( bsizer ) #NEWLINE#
print ( sorted ( student_tuples , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) ) #NEWLINE#
males = df [ ( df [ Gender ] == 'Male' ) & ( df [ Year ] == 2014 ) ] #NEWLINE#
df [ 'BrandName' ] . replace ( [ 'ABC' , 'AB' ] , 'A' ) #NEWLINE#
sum ( x == chosen_value for x in list ( d . values ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
subprocess . call ( 'start#SPACE#command#SPACE#-flags#SPACE#arguments' , shell = True ) #NEWLINE#
sum ( l ) / float ( len ( l ) ) #NEWLINE#
hex ( d ) . split ( 'x' ) [ 1 ] #NEWLINE#
process . start ( ) #NEWLINE#
browser . find_elements_by_xpath ( "//*[@type='submit']/@value" ) . text #NEWLINE#
"""a#SPACE#string""" . encode ( 'ascii' ) #NEWLINE#
pattern = '6#SPACE#of(.*)fans' #NEWLINE#
print ( content . decode ( 'utf8' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr [ arr [ : , ( 2 ) ] . argsort ( ) ] #NEWLINE#
grouped . reset_index ( level = 0 ) . reset_index ( level = 0 ) #NEWLINE#
cur . executemany ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' , tup ) #NEWLINE#
exec ( compile ( open ( 'filename.py' ) . read ( ) , 'filename.py' , 'exec' ) ) #NEWLINE#
df . drop ( df . index [ [ 1 , 3 ] ] , inplace = True ) #NEWLINE#
nSplit ( [ 'a' , 'b' , 'X' , 'X' , 'c' , 'd' , 'X' , 'X' , 'f' , 'X' , 'g' ] , 'X' , 2 ) #NEWLINE#
df [ 'AB' ] . str . split ( '#SPACE#' , 1 , expand = True ) #NEWLINE#
isinstance ( s , str ) #NEWLINE#
array ( [ [ [ 1 , 2 ] , [ 4 , 5 ] ] , [ [ 13 , 14 ] , [ 16 , 17 ] ] ] ) #NEWLINE#
monthly_mean . reset_index ( ) . plot ( x = 'index' , y = 'A' ) #NEWLINE#
tree . write ( 'outfile.htm' ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr [ - 2 : 2 ] #NEWLINE#
{ '[1,2]' : [ ( 2 , 3 ) , ( 1 , 7 ) ] } #NEWLINE#
"""クレイジー・ヒッツ！""" #NEWLINE#
signal . signal ( signal . SIGCHLD , signal . SIG_IGN ) #NEWLINE#
a [ np . argmin ( a [ : , ( 1 ) ] ) , 0 ] #NEWLINE#
df . resample ( '1Min' , how = np . mean ) #NEWLINE#
datetime . utcnow ( ) + timedelta ( minutes = 5 ) #NEWLINE#
ax . xaxis . set_label_position ( 'top' ) #NEWLINE#
a = int ( eval ( input ( 'Enter#SPACE#number#SPACE#of#SPACE#players:#SPACE#' ) ) ) #NEWLINE#
print ( '\\' ) #NEWLINE#
[ list ( l ) for l in it . product ( [ 0 , 1 ] , repeat = 3 ) if sum ( l ) != 2 ] #NEWLINE#
[ elem . tag for elem in a . iter ( ) ] #NEWLINE#
[ ( x , y ) for x , y in zip ( myList , myList [ 1 : ] ) if y == 9 ] #NEWLINE#
app . mainloop ( ) #NEWLINE#
tst2 = str ( tst ) #NEWLINE#
os . getenv ( 'MyVar' ) #NEWLINE#
Students . objects ( name = 'Tom' ) . distinct ( field = 'class' ) #NEWLINE#
df . groupby ( 'id' ) . agg ( lambda x : x . tolist ( ) ) #NEWLINE#
self . root . destroy ( ) #NEWLINE#
df . toPandas ( ) . to_csv ( 'mycsv.csv' ) #NEWLINE#
df [ 'just_date' ] = df [ 'dates' ] . dt . date #NEWLINE#
[ 0 , 2 , 4 , 5 ] #NEWLINE#
c [ np . logical_and ( a , b ) ] #NEWLINE#
result = db . engine . execute ( '<sql#SPACE#here>' ) #NEWLINE#
re . search ( '^(http://)?(www\\.)?(vimeo\\.com/)?(\\d+)' , embed_url ) . group ( 4 ) #NEWLINE#
json_string = json . dumps ( [ ob . __dict__ for ob in list_name ] ) #NEWLINE#
pygame . display . set_caption ( 'Use#SPACE#arrows#SPACE#to#SPACE#move!' ) #NEWLINE#
sorted ( list ( things . keys ( ) ) , key = lambda x : things [ x ] [ 'weight' ] , reverse = True ) #NEWLINE#
numpy . append ( a , a [ 0 ] ) #NEWLINE#
feature3 = [ d . get ( 'Feature3' ) for d in df . dic ] #NEWLINE#
df . fillna ( 0 ) #NEWLINE#
site = '' . join ( hxs . select ( "//h1[@class='state']/text()" ) . extract ( ) ) . strip ( ) #NEWLINE#
print ( url [ 'expanded_url' ] ) #NEWLINE#
print ( '{.5f}' . format ( randomList [ index ] ) ) #NEWLINE#
win . setWindowFlags ( QtCore . Qt . WindowMinimizeButtonHint ) #NEWLINE#
[ element for i , element in enumerate ( centroids ) if i not in index ] #NEWLINE#
hasattr ( Dynamo , 'mymethod' ) and callable ( getattr ( Dynamo , 'mymethod' ) ) #NEWLINE#
np . isnan ( np . array ( [ np . nan , 0 ] , dtype = np . float64 ) ) #NEWLINE#
os . system ( my_cmd ) #NEWLINE#
[ 'a1' , 'a2' , 'a3' ] #NEWLINE#
app . run ( ) #NEWLINE#
new_list = [ d [ key ] for key in string_list ] #NEWLINE#
decimal . Decimal ( '1.10' ) #NEWLINE#
time . strftime ( '%l:%M%p#SPACE#%z#SPACE#on#SPACE#%b#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
re . sub ( '<[^>]*>' , '' , mystring ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
return os . path . join ( root , name ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . environ [ 'USER_EMAIL' ] = 'info@example.com' #NEWLINE#
pd . get_dummies ( df [ 'key' ] ) #NEWLINE#
subprocess . Popen ( 'start#SPACE#/WAIT#SPACE#' + self . file , shell = True ) #NEWLINE#
re . search ( 'name#SPACE#(.*)' , s ) #NEWLINE#
[ { key : dict ( value ) } for key , value in B . items ( ) ] #NEWLINE#
df . reset_index ( ) . groupby ( 'X' ) [ 'Y' ] . nunique ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""\\uFEFF""" . encode ( 'UTF-8' ) #NEWLINE#
pprint ( dict ( list ( o . items ( ) ) ) ) #NEWLINE#
subprocess . check_output ( [ 'ls' , '-l' , '/dev/null' ] ) #NEWLINE#
return render_template ( 'template.html' ) #NEWLINE#
print ( ( a , b , c , d ) ) #NEWLINE#
print ( link . attrib . get ( 'title' , 'No#SPACE#title' ) ) #NEWLINE#
df . groupby ( 'A' ) [ 'B' ] . agg ( lambda col : '' . join ( col ) ) #NEWLINE#
[ l [ i : i + 7 ] for i in range ( 0 , len ( l ) , 7 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
pd . concat ( [ d1 , df1 ] , axis = 1 ) #NEWLINE#
k = soup . find ( text = re . compile ( 'My#SPACE#keywords' ) ) . parent . text #NEWLINE#
df = pd . DataFrame . from_dict ( { k : v for k , v in list ( nvalues . items ( ) ) if k != #NEWLINE# 'y3' } ) #NEWLINE#
os . stat ( filepath ) . st_mtime #NEWLINE#
( set ( x ) for x in d . values ( ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
a = [ [ ] ] * 3 #NEWLINE#
[ { 'content' : x [ 'content' ] . lower ( ) } for x in messages ] #NEWLINE#
datetime . datetime ( 2010 , 7 , 26 , 0 , 0 ) #NEWLINE#
"""""" . join ( reversed ( [ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
[ { 'char' : 'a' , 'num' : 1 } , { 'char' : 'd' , 'num' : 18 } ] #NEWLINE#
today - datetime . timedelta ( days = today . weekday ( ) ) #NEWLINE#
re . compile ( '$^' ) #NEWLINE#
unicodedata . normalize ( 'NFKD' , 'música' ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
pd . concat ( [ df2 , df1 ] , axis = 1 ) #NEWLINE#
Entry . objects . values_list ( 'id' , flat = True ) . order_by ( 'id' ) #NEWLINE#
sorted ( s , key = str . upper ) #NEWLINE#
request . query [ 'city' ] #NEWLINE#
np . argmin ( a [ : , ( 1 ) ] ) #NEWLINE#
[ item for item in my_list if some_condition ( ) ] #NEWLINE#
print ( list ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) ) #NEWLINE#
my_list . pop ( 2 ) #NEWLINE#
( 'S' , 'NP' , 'VP' ) is ( 'S' , 'NP' , 'VP' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ y for x in zip ( [ '^' ] * len ( mystring ) , mystring . lower ( ) ) for y in x ] ) #NEWLINE#
int ( '' . join ( c for c in s if c . isdigit ( ) ) ) #NEWLINE#
print ( '%.5f' % randomList [ index ] ) #NEWLINE#
"""{:20,.2f}""" . format ( 1.8446744073709552e+19 ) #NEWLINE#
ordered = OrderedDict ( sorted ( list ( mydict . items ( ) ) , key = lambda t : t [ 0 ] ) ) #NEWLINE#
root . attributes ( '-topmost' , True ) #NEWLINE#
datetime . utcnow ( ) #NEWLINE#
pd . concat ( [ df [ : start_remove ] , df [ end_remove : ] ] ) #NEWLINE#
[ tag . text for tag in filter ( pred , soup . find ( 'tbody' ) . find_all ( 'a' ) ) ] #NEWLINE#
df1 . merge ( df2 , on = 'name' ) . merge ( df3 , on = 'name' ) #NEWLINE#
[ 'W' , 'o' , 'r' , 'd' , '#SPACE#' , 't' , 'o' , '#SPACE#' , 'S' , 'p' , 'l' , 'i' , 't' ] #NEWLINE#
os . listdir ( '/home/username/www/' ) #NEWLINE#
lines . sort ( ) #NEWLINE#
plt . axes ( ) . set_aspect ( 'equal' ) #NEWLINE#
logger . debug ( 'submodule#SPACE#message' ) #NEWLINE#
print ( '0x%X' % value ) #NEWLINE#
df . applymap ( lambda x : isinstance ( x , ( int , float ) ) ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
e = next ( iter ( s ) ) #NEWLINE#
root . geometry ( '+250+250' ) #NEWLINE#
sort ( ) #NEWLINE#
s . rsplit ( ',' , 1 ) #NEWLINE#
( e == np . array ( [ 1 , 2 ] ) ) . all ( - 1 ) . shape #NEWLINE#
app . run ( debug = True ) #NEWLINE#
date . strftime ( '%c' ) #NEWLINE#
result = my_function ( ) #NEWLINE#
print ( strtr ( 'aa-bb-cc' , { 'aa' : 'bbz' , 'bb' : 'x' , 'cc' : 'y' } ) ) #NEWLINE#
all ( item in list ( superset . items ( ) ) for item in list ( subset . items ( ) ) ) #NEWLINE#
os . system ( 'TASKKILL#SPACE#/F#SPACE#/IM#SPACE#firefox.exe' ) #NEWLINE#
min ( dicts , key = lambda x : ( abs ( 1.77672955975 - x [ 'ratio' ] ) , - x [ 'pixels' ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
int ( '1,000,000' . replace ( ',' , '' ) ) #NEWLINE#
print ( '#SPACE#' . join ( hex ( ord ( n ) ) for n in my_hex ) ) #NEWLINE#
plt . clf ( ) #NEWLINE#
"""^(?=.{4,255}$)([a-zA-Z0-9][a-zA-Z0-9-]{,61}[a-zA-Z0-9]\\.)+[a-zA-Z0-9]{2,5}$""" #NEWLINE#
del my_list [ index ] #NEWLINE#
[ ( myList [ i - 1 ] , myList [ i ] ) for i in range ( len ( myList ) ) if myList [ i ] == 9 ] #NEWLINE#
sum ( [ ( i * j ) for i , j in list ( itertools . combinations ( l , 2 ) ) ] ) #NEWLINE#
plt . figure ( ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
new_index = max ( 0 , min ( new_index , len ( mylist ) - 1 ) ) #NEWLINE#
sys . hash_info #NEWLINE#
text_file . close ( ) #NEWLINE#
'Hello#SPACE#%s' % ',#SPACE#' . join ( my_args ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'U+{:04X}' . format ( i ) ) #NEWLINE#
{ 'arg1' : [ '1' , '4' ] , 'arg2' : 'foobar' } #NEWLINE#
numpy . in1d ( b , a ) . all ( ) #NEWLINE#
print ( np . linspace ( 1 , 3 , num = 4 , endpoint = False ) ) #NEWLINE#
np . vstack ( np . meshgrid ( x_p , y_p , z_p ) ) . reshape ( 3 , - 1 ) . T #NEWLINE#
array ( [ True , False , False , True , True , False ] , dtype = bool ) #NEWLINE#
user = models . ForeignKey ( <STR0> , unique = True ) #NEWLINE#
[ key for key , value in list ( my_dict . items ( ) ) if set ( value ) . intersection ( lst ) ] #NEWLINE#
{ k . lower ( ) : v . lower ( ) for k , v in list ( { 'My#SPACE#Key' : 'My#SPACE#Value' } . items ( ) ) } #NEWLINE#
pd . read_csv ( myfile . file , na_values = [ 'na' ] ) #NEWLINE#
now = datetime . datetime . now ( ) . strftime ( '%H:%M:%S' ) #NEWLINE#
[ '' . join ( seq ) for seq in zip ( lst , lst [ 1 : ] ) ] #NEWLINE#
df1 [ 'value' ] . unstack ( 0 ) #NEWLINE#
re . sub ( '(.)\\1+' , '\\1\\1' , 'haaaaapppppyyy' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
x = 'abcde' #NEWLINE#
plt . show ( ) #NEWLINE#
Book . objects . filter ( id = id ) . update ( ) #NEWLINE#
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , 'lib' ) ) #NEWLINE#
zip ( * a ) #NEWLINE#
pd . melt ( split , id_vars = [ 'a' , 'b' ] , value_name = 'TimeStamp' ) #NEWLINE#
bytearray ( '\x00\x00\x00\x07\x08\x00\x00\x00\x00\x00' ) #NEWLINE#
ax . yaxis . set_label_coords ( 0.5 , 0.5 ) #NEWLINE#
odeint ( func , y0 , t , args = ( 123 , 456 ) ) #NEWLINE#
print ( sorted ( L , key = lambda x : int ( x . split ( '.' ) [ 2 ] ) ) ) #NEWLINE#
country , capital = random . choice ( list ( d . items ( ) ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
int ( math . ceil ( x ) ) - 1 #NEWLINE#
eval ( 'add' ) ( x , y ) #NEWLINE#
[ dict ( d , count = n ) for d , n in zip ( l1 , l2 ) ] #NEWLINE#
uniques = collections . defaultdict ( set ) #NEWLINE#
C / C . astype ( np . float ) . sum ( axis = 1 ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
df [ 'stats' ] . str [ 1 : - 1 ] . str . split ( ',' , expand = True ) . astype ( float ) #NEWLINE#
df [ 'a' ] = df [ 'a' ] . str . replace ( 'in.' , '#SPACE#in.#SPACE#' ) #NEWLINE#
df2 . dropna ( subset = [ 'three' , 'four' , 'five' ] , how = 'all' ) #NEWLINE#
r = [ ( 1 ) for i in range ( n ) ] #NEWLINE#
df [ 'ratio' ] = df . groupby ( level = 0 ) [ 3 ] . transform ( lambda x : x [ 0 ] / x [ 1 ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
os . system ( 'rm#SPACE#tmp.txt' ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 ] , [ 'X' ] , [ 7 , 8 , 9 , 10 ] ] #NEWLINE#
[ [ '100' , '2' , '3' , '4' ] , [ '110' , '2' , '5' , '6' ] , [ '120' , '6' , '3' , '4' ] ] #NEWLINE#
[ 'key1:#SPACE#val1-words#SPACE#' , 'key2:#SPACE#val2-words#SPACE#' , 'key3:#SPACE#val3-words' ] #NEWLINE#
print ( list ( itertools . combinations ( { 1 , 2 , 3 , 4 } , 3 ) ) ) #NEWLINE#
cur . execute ( 'create#SPACE#table#SPACE#test#SPACE#(arr#SPACE#array)' ) #NEWLINE#
np . array ( [ ( 'abc\x00\x00' , ) , ( 'de\x00\x00\x00' , ) ] , dtype = 'O' ) #NEWLINE#
u = s . decode ( 'utf-8-sig' ) #NEWLINE#
imagedata . image = self . request . get ( 'image' ) #NEWLINE#
response . xpath ( '//div[@id="test"]/text()' ) . extract ( ) [ 0 ] . strip ( ) #NEWLINE#
cursor . execute ( 'CREATE#SPACE#TABLE#SPACE#t1#SPACE#(id#SPACE#INTEGER#SPACE#PRIMARY#SPACE#KEY,#SPACE#c1#SPACE#TEXT)' ) #NEWLINE#
print ( re . sub ( '[_%^$]' , '\\\\\\g<0>' , line ) ) #NEWLINE#
os . system ( 'echo#SPACE#this#SPACE#also#SPACE#is#SPACE#not#SPACE#redirected' ) #NEWLINE#
{ { grains . fqdn_ip } } #NEWLINE#
sorted ( data , key = data . get ) #NEWLINE#
json . loads ( '{"distance":\\u002d1}' ) #NEWLINE#
os . chdir ( 'c:\\Users\\uname\\desktop\\python' ) #NEWLINE#
fig , ax = plt . subplots ( 10 , 10 ) #NEWLINE#
scipy . spatial . distance . euclidean ( A , B ) #NEWLINE#
dict ( ( k , d . get ( k , '' ) + d1 . get ( k , '' ) ) for k in keys ) #NEWLINE#
os . popen ( 'ps#SPACE#-p#SPACE#%d#SPACE#-oppid=' % os . getppid ( ) ) . read ( ) . strip ( ) #NEWLINE#
[ item [ 'baz' ] for foo in foos for item in foo [ 'bar' ] ] #NEWLINE#
subseqs = ( seq [ : i ] for i in range ( 1 , len ( seq ) + 1 ) ) #NEWLINE#
proc . terminate ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
today . strftime ( '%B' ) #NEWLINE#
pd . DataFrame ( df . groupby ( level = 0 ) [ 'column_name' ] . apply ( list ) . to_dict ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
d = { ( a . lower ( ) , b ) : v for ( a , b ) , v in list ( d . items ( ) ) } #NEWLINE#
sorted_list_of_keyvalues = sorted ( list ( ips_data . items ( ) ) , key = item [ 1 ] [ #NEWLINE# 'data_two' ] ) #NEWLINE#
s . split ( ) #NEWLINE#
[ 'A' , 'b' , 'C' , 'D' , 'E' , 'F' ] #NEWLINE#
lrm . save ( sc , 'lrm_model.model' ) #NEWLINE#
[ np . unravel_index ( np . argmin ( a ) , ( 2 , 2 ) ) for a in A2 ] #NEWLINE#
a . insert ( 0 , k ) #NEWLINE#
list ( map ( list , set ( map ( lambda i : tuple ( i ) , testdata ) ) ) ) #NEWLINE#
Members . objects . values ( 'designation' ) . annotate ( dcount = Count ( 'designation' ) ) #NEWLINE#
array ( [ 0 , 1 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 19 ] ) #NEWLINE#
g . dropna ( ) . reset_index ( ) . reindex ( columns = [ 'visits' , 'string' , 'date' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
max ( list ( MyCount . keys ( ) ) , key = int ) #NEWLINE#
{ '123' : { 'Foo' : '456' , 'Bar' : '789' } , 'abc' : { 'Foo' : 'def' , 'Bar' : 'ghi' } } #NEWLINE#
numpy . fft . fft ( [ 1 , 2 , 1 , 0 , 1 , 2 , 1 , 0 ] ) #NEWLINE#
x = map ( int , x . split ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 } #NEWLINE#
woduplicates = list ( set ( lseperatedOrblist ) ) #NEWLINE#
df . reindex ( [ 2 , 0 , 1 ] + list ( range ( 3 , len ( df ) ) ) ) #NEWLINE#
fin = open ( 'C:\\folder1\\test1.txt' , 'r' ) #NEWLINE#
a . contains ( b ) #NEWLINE#
results = Model . objects . filter ( x = 5 ) . exclude ( a = true ) #NEWLINE#
dt = pytz . utc . localize ( dt ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
[ '-' , 't' , '-' , 'c' , '-' , 'over' , '----' ] #NEWLINE#
print ( my_string [ 0 : 100 ] ) #NEWLINE#
items = [ some ( m [ 'a' ] . split ( ) , m [ 'd' ] , m [ 'n' ] ) for m in dl ] #NEWLINE#
[ lambda x : ( x * x for x in range ( 10 ) ) ] #NEWLINE#
print ( '\n' . join ( to_search [ NAME ] ) ) #NEWLINE#
array ( [ 0 , 1 , 4 , 5 , 6 , 1 , 7 , 8 , 8 , 1 ] ) #NEWLINE#
app . run ( ) #NEWLINE#
[ '4' , ')' , '/' , '3' , '.' , 'x' , '^' , '2' ] #NEWLINE#
a [ np . in1d ( a [ : , ( 1 ) ] , b ) ] #NEWLINE#
cursor . execute ( 'delete#SPACE#from#SPACE#...' ) #NEWLINE#
"""0x{0:08X}""" . format ( 3652458 ) #NEWLINE#
print ( line . decode ( 'utf-16-le' ) . split ( ) ) #NEWLINE#
'hello#SPACE#there#SPACE#%(5)s' % { '5' : 'you' } #NEWLINE#
arr [ mask ] = arr [ np . nonzero ( mask ) [ 0 ] , idx [ mask ] ] #NEWLINE#
ex . groupby ( level = 'A' ) . agg ( lambda x : x . index . get_level_values ( 1 ) . nunique ( ) ) #NEWLINE#
{ 'My_string' : 'Foo#SPACE#bar.\t#SPACE#Bar#SPACE#foo.' } #NEWLINE#
pd . merge ( y , x , on = 'k' ) [ [ 'a' , 'b' , 'y' ] ] #NEWLINE#
x = scipy . matrix ( [ 1 , 2 , 3 ] ) . transpose ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
alpha = img . split ( ) [ - 1 ] #NEWLINE#
a [ np . arange ( len ( a ) ) != 3 ] #NEWLINE#
c . execute ( "alter#SPACE#table#SPACE#linksauthor#SPACE#add#SPACE#column#SPACE#'%s'#SPACE#'float'" % author ) #NEWLINE#
df . sort ( inplace = True ) #NEWLINE#
call ( [ 'path/to/python' , 'test2.py' , 'neededArgumetGoHere' ] ) #NEWLINE#
f = open ( os . path . join ( __location__ , 'bundled-resource.jpg' ) ) #NEWLINE#
sorted ( l , key = lambda x : x . replace ( '0' , 'Z' ) ) #NEWLINE#
df [ 'Date' ] = df [ 'Date' ] . apply ( convert_to_year ) #NEWLINE#
[ 'We' , 'are' , 'one' , 'the' , 'world' , 'UNIVERSE' ] #NEWLINE#
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
listTwo . sort ( key = lambda x : order_dict [ x [ 'eyecolor' ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
foo = __import__ ( 'foo' , globals ( ) , locals ( ) , [ ] , - 1 ) #NEWLINE#
df . groupby ( [ 'Month' , 'Fruit' ] ) . sum ( ) . unstack ( level = 0 ) #NEWLINE#
elems [ 0 ] . getText ( ) . encode ( 'utf-8' ) #NEWLINE#
time . strftime ( '%m/%d/%Y' , time . gmtime ( os . path . getmtime ( file ) ) ) #NEWLINE#
df . stack ( ) #NEWLINE#
print_tree ( shame ) #NEWLINE#
tuple ( zip ( * t ) ) #NEWLINE#
datetime . datetime . fromtimestamp ( calendar . timegm ( d . timetuple ( ) ) ) #NEWLINE#
time . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S' , time . gmtime ( 1346114717972 / 1000.0 ) ) #NEWLINE#
re . sub ( '.{20}(.mkv)' , '\\1' , 'unique12345678901234567890.mkv' ) #NEWLINE#
print ( response . geturl ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""foo:bar:baz:spam:eggs""" . rsplit ( ':' , 3 ) #NEWLINE#
locals ( ) [ x ] #NEWLINE#
return f . read ( ) #NEWLINE#
"""""" . join ( str ( i ) for i in [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
next ( ( i for i , j in enumerate ( lst ) if j == 2 ) , 42 ) #NEWLINE#
re . findall ( '[^aeiou]+' , '123concertation' ) #NEWLINE#
dict ( d ) #NEWLINE#
driver . current_window_handle #NEWLINE#
re . match ( '^\\s*word' , line ) #NEWLINE#
f . close ( ) #NEWLINE#
df . set_index ( [ 'e-mail' , 'date' ] ) #NEWLINE#
df . groupby ( [ 'Fruit' , 'Month' ] ) [ 'Sales' ] . sum ( ) . unstack ( 'Month' , fill_value = 0 ) #NEWLINE#
a , b , c = 'a' , 'b' , 'c' #NEWLINE#
df . unstack ( level = 1 ) #NEWLINE#
np . concatenate ( ( np . sort ( a [ ~ np . isnan ( a ) ] ) [ : : - 1 ] , [ np . nan ] * np . isnan ( a ) . sum ( ) ) ) #NEWLINE#
a . where ( ~ np . isnan ( a ) , other = b , inplace = True ) #NEWLINE#
f . write ( chr ( i ) ) #NEWLINE#
parser . add_argument ( '-s' , '--simulate' , action = 'store_true' ) #NEWLINE#
parser . add_argument ( '--arg1' , help = argparse . SUPPRESS ) #NEWLINE#
return render ( request , 'organisation/wall_post.html' , { 'form' : form } ) #NEWLINE#
50 - list1 [ 0 ] [ 0 ] + list1 [ 0 ] [ 1 ] - list1 [ 0 ] [ 2 ] #NEWLINE#
print ( link . get ( 'href' ) ) #NEWLINE#
print ( 'a=%d,b=%d' % ( f ( x , n ) , g ( x , n ) ) ) #NEWLINE#
[ x for t in zip ( list_a , list_b ) for x in t ] #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda x : x [ : : - 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '[^a-zA-Z0-9]' , '_' , filename ) #NEWLINE#
"""""" . join ( [ t . text ] + [ xml . tostring ( e ) for e in t . getchildren ( ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . iloc [ : , ( 0 ) ] #NEWLINE#
"""""" . join ( s . split ( ) ) #NEWLINE#
pd . concat ( [ df . drop ( [ 'b' ] , axis = 1 ) , df [ 'b' ] . apply ( pd . Series ) ] , axis = 1 ) #NEWLINE#
mygrid . SetCellValue ( row , col , databasevalue4rowcol ) #NEWLINE#
df . groupby ( 'source' ) [ 'retweet_count' ] . sum ( ) . plot ( kind = 'bar' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
random . choice ( list ( d . keys ( ) ) ) #NEWLINE#
list ( set ( a ) . union ( b ) ) #NEWLINE#
urlpatterns = patterns ( '' , ( '^gallery/' , include ( 'mysite.gallery.urls' ) ) ) #NEWLINE#
last_index = len ( list1 ) - 1 #NEWLINE#
print ( '%.6g' % ( i , ) ) #NEWLINE#
[ ( ch . tag , ch . text ) for e in tree . findall ( 'file' ) for ch in e . getchildren ( ) ] #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
df . loc [ df [ 'line_race' ] == 0 , 'rating' ] = 0 #NEWLINE#
re . findall ( '(http://\\S+|\\S*[^\\w\\s]\\S*)' , a ) #NEWLINE#
line = line [ : 10 ] . replace ( ';' , ':' ) + line [ 10 : ] #NEWLINE#
z = zip ( x , y ) #NEWLINE#
locals ( ) [ x ] #NEWLINE#
r . sadd ( 'a' , * set ( [ 3 , 4 ] ) ) #NEWLINE#
a = list ( a ) #NEWLINE#
print ( cur . fetchone ( ) [ 'a' ] ) #NEWLINE#
A = [ i for i in A if i not in B ] #NEWLINE#
s . find ( 'dude' ) #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ) #NEWLINE#
print ( '{0}#SPACE#/#SPACE#{1},#SPACE#' . format ( x + 1 , y ) , end = '#SPACE#' ) #NEWLINE#
user . social_auth . filter ( provider = '...' ) #NEWLINE#
soup . find_all ( re . compile ( '(a|div)' ) ) #NEWLINE#
next ( os . walk ( '.' ) ) [ 1 ] #NEWLINE#
df [ '1/2#SPACE#ID' ] . apply ( lambda x : x . upper ( ) , inplace = True ) #NEWLINE#
unittest . main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
my_list = [ item for item in my_list if item . isalpha ( ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( 1 for d in my_list if d . get ( 'id' ) == 20 ) #NEWLINE#
plt . show ( ) #NEWLINE#
len ( re . findall ( pattern , string_to_search ) ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , 'A' ) #NEWLINE#
ax2 . spines [ 'left' ] . set_visible ( False ) #NEWLINE#
struct . pack ( '>I' , 1633837924 ) #NEWLINE#
driver . close ( ) #NEWLINE#
join_lists ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) #NEWLINE#
"""^/item/value/(\\d+\\.\\d+)$""" #NEWLINE#
ImageFilter . EMBOSS . filterargs = ( 3 , 3 ) , 1 , 128 , ( - 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ) #NEWLINE#
a [ 0 : 0 ] = k #NEWLINE#
"""FOo""" . lower ( ) #NEWLINE#
rc ( 'text.latex' , preamble = '\\usepackage{cmbright}' ) #NEWLINE#
ITEM_PIPELINES = { 'apps.scrapy.pipelines.ItemPersistencePipeline' : 999 } #NEWLINE#
{ k : [ lookup [ n ] for n in v ] for k , v in list ( my_dict . items ( ) ) } #NEWLINE#
array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] ) #NEWLINE#
df . loc [ : , ( cols ) ] / df . loc [ ii , cols ] . values #NEWLINE#
print ( 'Two#SPACE#pair,#SPACE#{0}s#SPACE#and#SPACE#{1}s' . format ( * cards ) ) #NEWLINE#
raise cherrypy . HTTPRedirect ( '/device' ) #NEWLINE#
np . amin ( V , axis = 0 ) #NEWLINE#
print ( len ( 'please#SPACE#anwser#SPACE#my#SPACE#question' ) ) #NEWLINE#
print ( os . path . basename ( your_path ) ) #NEWLINE#
b . append ( c ) #NEWLINE#
zcat = subprocess . Popen ( [ 'zcat' , path ] , stdout = subprocess . PIPE ) #NEWLINE#
"""""" . join ( random . sample ( s , len ( s ) ) ) #NEWLINE#
[ item for item in data if not item [ 'imageData' ] ] #NEWLINE#
array ( [ [ 0 , 1 ] , [ 2 , 3 ] , [ 6 , 7 ] , [ 8 , 9 ] , [ 10 , 11 ] ] ) #NEWLINE#
plt . savefig ( 'test2.png' ) #NEWLINE#
print ( '{0}{1}' . format ( 2 , 1 ) ) #NEWLINE#
hash ( 'moo' ) #NEWLINE#
setattr ( test , attr_name , 10 ) #NEWLINE#
"""""" . join ( [ l for l in c if l not in vowels ] ) #NEWLINE#
re . split ( '[\\s-]+' , text ) #NEWLINE#
time . strftime ( '%Y-%m-%dT%H:%M:%SZ' , timetup ) #NEWLINE#
origin . groupby ( [ 'label' , 'type' ] ) [ 'value' ] . aggregate ( 'mean' ) . unstack ( ) #NEWLINE#
pg . mixer . init ( ) #NEWLINE#
[ 'X' , 'B' , 'B1' , 'B2' , 'B11' , 'B21' , 'B22' , 'C' , 'Q1' , 'C11' , 'C2' ] #NEWLINE#
[ 'X' , 'B' , 'B1' , 'B11' , 'B2' , 'B22' , 'C' , 'Q1' , 'C11' , 'C2' , 'B21' ] #NEWLINE#
[ 'X' , 'B' , 'B1' , 'B2' , 'B11' , 'B21' , 'C' , 'Q1' , 'C11' , 'C2' , 'B22' ] #NEWLINE#
df . groupby ( 'state' ) . DRUNK_DR . value_counts ( ) #NEWLINE#
ord ( 'a' ) #NEWLINE#
"""{:,}""" . format ( 1234567890.001 ) . replace ( ',' , '#SPACE#' ) #NEWLINE#
print ( json . loads ( line . decode ( ) ) ) #NEWLINE#
print ( '#SPACE#' . join ( '%s=%s' % ( k , v ) for v , k in input ) ) #NEWLINE#
zip ( * a ) #NEWLINE#
"""#SPACE#""" . join ( map ( str , ( 34.2424 , - 64.2344 , 76.3534 , 45.2344 ) ) ) #NEWLINE#
f ( * ( ( 1 , 4 ) , ( 2 , 5 ) ) ) #NEWLINE#
np . array ( list ( itertools . product ( [ 0 , 1 ] , repeat = n ** 2 ) ) ) . reshape ( - 1 , n , n ) #NEWLINE#
demand . ix [ 'Com' ] . apply ( lambda x : x * areas [ 'Com' ] ) . stack ( ) #NEWLINE#
[ ( [ 1 , 2 , 3 ] , [ - 4 , - 5 ] ) , ( [ 3 , 2 , 4 ] , [ - 2 ] ) , ( [ 5 , 6 ] , [ - 5 , - 1 ] ) , ( [ 1 ] , [ ] ) ] #NEWLINE#
pd . concat ( dict ( df1 = df1 , df2 = df2 ) , axis = 1 ) #NEWLINE#
df . set_index ( 'id' ) . stack ( ) . unstack ( ) #NEWLINE#
zipfile . ZipFile ( 'myarchive.zip' ) . extractall ( pwd = 'P4$$W0rd' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
l . sort ( key = alphanum_key ) #NEWLINE#
df . select ( 'zip_code' ) . show ( ) #NEWLINE#
from functools import reduce #NEWLINE# lambda l : reduce ( lambda x , y : { y : x } , l [ : : - 1 ] , { } ) #NEWLINE#
plt . show ( ) #NEWLINE#
tuple_of_tuples = tuple ( tuple ( x ) for x in list_of_lists ) #NEWLINE#
float ( '1.03' ) #NEWLINE#
sorted ( timestamp , reverse = True ) #NEWLINE#
"""""" . join ( map ( str , [ 1 , 2 , 3 , 4 ] ) ) #NEWLINE#
lst = [ [ ] for _ in range ( a ) ] #NEWLINE#
pd . to_csv ( 'your.csv' , index = False ) #NEWLINE#
"""{%#SPACE#*url#SPACE#+[^']""" #NEWLINE#
l [ - 1 : ] + l [ : - 1 ] #NEWLINE#
str . isdigit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . findall ( '\\((\\d+)\\)' , text ) #NEWLINE#
unittest . main ( ) #NEWLINE#
df . apply ( pd . Series . nunique , axis = 1 ) #NEWLINE#
MyClass ( ) . mymethod ( ) #NEWLINE#
df . groupby ( 'date' ) [ 'level' ] . first ( ) . apply ( np . ceil ) . astype ( int ) . to_dict ( ) #NEWLINE#
re . sub ( '(.*)is(.*)want(.*)' , '\\g<1>%s\\g<2>%s\\g<3>' % ( 'was' , '12345' ) , a ) #NEWLINE#
list ( joined_dataset . values ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
MyModel . objects . get ( id = 1 ) . my_field #NEWLINE#
model . fit ( X_train , y_train ) #NEWLINE#
df . to_pickle ( file_name ) #NEWLINE#
ax1 . xaxis . get_major_formatter ( ) . set_powerlimits ( ( 0 , 1 ) ) #NEWLINE#
sum ( 1 for i in range ( 1 , len ( a ) ) if a [ i - 1 ] * a [ i ] < 0 ) #NEWLINE#
df . to_csv ( 'c:\\data\\t.csv' ) #NEWLINE#
plt . show ( ) #NEWLINE#
cipher . decrypt ( ciphertext ) . replace ( '\x08' , '' ) #NEWLINE#
array ( [ 1 , 2 , 2 , 3 , 3 ] ) #NEWLINE#
print ( re . search ( 'AAA(.*?)ZZZ' , 'gfgfdAAA1234ZZZuijjk' ) . group ( 1 ) ) #NEWLINE#
A = matrix ( [ [ 1 , 2 , 3 ] , [ 11 , 12 , 13 ] , [ 21 , 22 , 23 ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for x in something_iterable if x != 'item' ] #NEWLINE#
soup . select ( 'a[href^="http://www.iwashere.com/"]' ) #NEWLINE#
sorted ( A , key = key_function ) #NEWLINE#
datetime . datetime . utcfromtimestamp ( x . astype ( 'O' ) / 1000000000.0 ) #NEWLINE#
repo . git . reset ( '--hard' , 'origin/master' ) #NEWLINE#
gtk . Window . set_keep_above #NEWLINE#
csv . writer ( open ( 'output.csv' , 'wb' ) ) . writerows ( a ) #NEWLINE#
plt . show ( ) #NEWLINE#
getattr ( foo , bar ) ( * params ) #NEWLINE#
s . decode ( 'ascii' , 'ignore' ) #NEWLINE#
{ k : list ( v ) for k , v in groupby ( sorted ( d . items ( ) ) , key = itemgetter ( 0 ) ) } #NEWLINE#
a [ np . in1d ( a [ : , ( 2 ) ] , list ( b ) ) ] #NEWLINE#
settime = time . mktime ( ftime . timetuple ( ) ) #NEWLINE#
print ( max ( list ( d . keys ( ) ) , key = lambda x : d [ x ] ) ) #NEWLINE#
deriv_poly = [ ( poly [ i ] * i ) for i in range ( 1 , len ( poly ) ) ] #NEWLINE#
num . savetxt ( 'test.txt' , DAT , delimiter = '#SPACE#' , fmt = '%s' ) #NEWLINE#
ab = [ ( a [ i ] * b [ i ] ) for i in range ( len ( a ) ) ] #NEWLINE#
print ( '#SPACE#' . join ( map ( str , a ) ) ) #NEWLINE#
y = str ( int ( x , 16 ) ) #NEWLINE#
[ ( i + j ) for i , j in zip ( x [ : : 2 ] , x [ 1 : : 2 ] ) ] #NEWLINE#
print ( str ( count ) + '#SPACE##SPACE#' + str ( conv ) ) #NEWLINE#
y = np . cumsum ( x ) #NEWLINE#
print ( max ( d , key = d . get ) ) #NEWLINE#
print ( dateobj . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
multiprocessing . Process . __init__ ( self ) #NEWLINE#
df [ 'Words' ] = df . apply ( lambda row : func ( row , 'Match#SPACE#Conflict' ) , axis = 1 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
self . submenu2 . menuAction ( ) . setVisible ( False ) #NEWLINE#
np . einsum ( 'ik,il->i' , x , e ) #NEWLINE#
df . resample ( 'Q' , axis = 1 ) . mean ( ) #NEWLINE#
y [ : , ( cols ) ] . sum ( ) #NEWLINE#
content . decode ( 'utf8' ) #NEWLINE#
[ ( item for sublist in list_of_lists ) for item in sublist ] #NEWLINE#
[ ( x . discard ( '' ) or x ) for x in test ] #NEWLINE#
sorted ( s , key = lambda x : int ( re . search ( '\\d+$' , x ) . group ( ) ) ) #NEWLINE#
[ i for i in d for j in range ( d [ i ] ) ] #NEWLINE#
writer . writerows ( zip ( * list ( d . values ( ) ) ) ) #NEWLINE#
sorted ( L , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
df [ df [ 'Column2' ] . notnull ( ) ] #NEWLINE#
return render ( request , 'home.html' ) #NEWLINE#
[ [ 'A' ] , [ 'WORD' , 'B' , 'C' ] , [ 'WORD' , 'D' ] ] #NEWLINE#
super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
b = a [ : , : - 1 , : ] #NEWLINE#
sys . path . append ( os . path . join ( os . environ [ 'SPARK_HOME' ] , 'bin' ) ) #NEWLINE#
lst = [ 1 , 2 , 3 ] #NEWLINE#
sum ( v [ 1 ] for d in myList for v in d . values ( ) ) #NEWLINE#
importlib . import_module ( 'abc.def.ghi.jkl.myfile.mymethod' ) #NEWLINE#
f , axs = plt . subplots ( 2 , 2 , figsize = ( 15 , 15 ) ) #NEWLINE#
output = os . popen ( 'cat#SPACE#/tmp/baz' ) . read ( ) #NEWLINE#
len ( s ) #NEWLINE#
s . replace ( '||' , '|||' ) [ : : 2 ] #NEWLINE#
print ( df . to_string ( index = False ) ) #NEWLINE#
( lambda lst : json . dumps ( { item [ 0 ] : item [ 1 ] for item in lst } ) ) ( [ ( 1 , 2 ) , ( 3 , 4 ) ] ) #NEWLINE#
plt . draw ( ) #NEWLINE#
df2 = df [ ~ pd . isnull ( df . L ) ] . loc [ : , ( [ 'P' , 'L' ] ) ] . set_index ( 'P' ) #NEWLINE#
ax . scatter ( xs , ys , zs , c = cs , marker = m ) #NEWLINE#
sorted ( a , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
[ y for sublist in l for x , y in sublist ] #NEWLINE#
subprocess . call ( [ 'notepad' , '/p' , filename ] ) #NEWLINE#
[ x for x in L if x is not None ] #NEWLINE#
plt . show ( ) #NEWLINE#
res . drop_duplicates ( ) #NEWLINE#
ast . literal_eval ( '[1,2,3]' ) #NEWLINE#
numpy . prod ( a ) #NEWLINE#
re . sub ( 'url(#*.*)' , 'url\\1' , test1 ) #NEWLINE#
urlfetch . set_default_fetch_deadline ( 60 ) #NEWLINE#
day_of_year = datetime . now ( ) . timetuple ( ) . tm_yday #NEWLINE#
tree . remove ( tree . findall ( './/B' ) [ 1 ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
db . commit ( ) #NEWLINE#
win32api . SetCursorPos ( ( 50 , 50 ) ) #NEWLINE#
re . split ( ';#SPACE#|,#SPACE#|\\*|\n' , a ) #NEWLINE#
output = [ [ word , len ( word ) , word . upper ( ) ] for word in sent ] #NEWLINE#
p . match ( 'lalalaI#SPACE#want#SPACE#this#SPACE#partlalala' ) . group ( 1 ) #NEWLINE#
"""Hello#SPACE#{user[name]}""" . format ( ** { 'user' : { 'name' : 'Markus' } } ) #NEWLINE#
rgx = re . compile ( '(?<!\\+)[a-zA-Z]|[a-zA-Z](?!\\+)' ) #NEWLINE#
dist = sqrt ( ( x2 - x1 ) ** 2 + ( y2 - y1 ) ** 2 ) #NEWLINE#
conn . execute ( 'create#SPACE#table#SPACE#example#SPACE#(A,#SPACE#B);' ) #NEWLINE#
df . loc [ 0 , 'C' ] = df . loc [ 0 , 'D' ] #NEWLINE#
np . dot ( x , y ) #NEWLINE#
[ [ j for j in families [ i ] if i != j ] for i in range ( len ( families ) ) ] #NEWLINE#
row = [ x . strip ( ) for x in row ] #NEWLINE#
print ( '\n' . join ( sys . path ) ) #NEWLINE#
[ i [ 0 ] for i in e ] #NEWLINE#
os . system ( '"C://Temp/a#SPACE#b#SPACE#c/Notepad.exe"' ) #NEWLINE#
[ re . search ( '\\d' , s ) for s in lst ] #NEWLINE#
pd . Series ( np . where ( sample . housing . values == 'yes' , 1 , 0 ) , sample . index ) #NEWLINE#
array ( [ [ 1 , 0 , 1 , 1 ] , [ 0 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , 0 ] ] ) #NEWLINE#
file . close ( ) #NEWLINE#
df [ 'Counts' ] = df . groupby ( [ 'Color' ] ) [ 'Value' ] . transform ( 'count' ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
df2 = pd . DataFrame ( data = None , columns = df1 . columns , index = df1 . index ) #NEWLINE#
self . est . fit ( X , y ) #NEWLINE#
line = subprocess . check_output ( [ 'tail' , '-1' , filename ] ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#printing#SPACE#{x}#SPACE#and#SPACE#{y}' . format ( x = x , y = y ) ) #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
df [ 'dummyVar#SPACE#' ] = df [ 'x' ] . where ( ( df [ 'x' ] > 100 ) & ( df [ 'y' ] < 50 ) , df [ 'y' ] ) #NEWLINE#
a = [ [ ( 0 ) for y in range ( 8 ) ] for x in range ( 8 ) ] #NEWLINE#
[ [ 'google' , [ 'http://google.com' ] ] , [ 'computing' , [ 'http://acm.org' ] ] ] #NEWLINE#
numpy . apply_along_axis ( numpy . linalg . norm , 1 , dist ) #NEWLINE#
[ 'Hello' , 'world' ] #NEWLINE#
cache . get ( 'data' ) #NEWLINE#
getpass . getuser ( ) #NEWLINE#
d . update ( ( k , frozenset ( v ) ) for k , v in d . items ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ cls . __name__ for cls in vars ( ) [ 'Foo' ] . __subclasses__ ( ) ] ) #NEWLINE#
dict ( { 'a' : 'y[a]' } , ** { 'a' , 'x[a]' } ) == { 'a' : 'x[a]' } #NEWLINE#
q = B . select ( ) . join ( A ) . group_by ( A ) . having ( fn . Max ( B . date ) == B . date ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . vstack ( a ) #NEWLINE#
dict ( map ( lambda a : [ a [ 1 ] , a [ 0 ] ] , iter ( d . items ( ) ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
cleanlist = [ ( 0.0 if math . isnan ( x ) else x ) for x in oldlist ] #NEWLINE#
output_json = json . load ( open ( '/tmp/output.json' ) ) #NEWLINE#
[ 0 , 1 , 2 , 2 , 3 , 4 , 5 , 5 , 5 , 6 ] #NEWLINE#
re . findall ( '(?<=>)([^<]+)(?=</a>[^<]*</li)' , var , re . S ) #NEWLINE#
print ( 'é' . capitalize ( ) ) #NEWLINE#
del dct [ key ] #NEWLINE#
plt . show ( ) #NEWLINE#
ctypes . addressof ( bufstr ) #NEWLINE#
app . run ( ) #NEWLINE#
groups = sorted ( groups , key = lambda a : ( a [ 'name' ] is None , a [ 'name' ] ) ) #NEWLINE#
a_send = dict ( ( k [ 0 ] , v ) for k , v in list ( a . items ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
button = Button ( frame , text = 'Good-bye.' , command = window . destroy ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#README' , open ( 'README' , 'wb' ) . write ) #NEWLINE#
OrderedDict ( sorted ( list ( od . items ( ) ) , key = lambda item : item [ 1 ] [ 'depth' ] ) ) #NEWLINE#
get_indentifier_name_missing_function ( ) #NEWLINE#
pd . lreshape ( df , { 'D' : [ 'B' , 'C' ] } ) #NEWLINE#
( df . notnull ( ) . cumsum ( axis = 1 ) == 4 ) . idxmax ( axis = 1 ) #NEWLINE#
""",#SPACE#""" . join ( '%s(%.02f)' % ( x , y ) for x , y in tuplelist ) #NEWLINE#
print ( doc . toxml ( ) ) #NEWLINE#
Counter ( [ 'a' , 'b' , 'a' , 'c' , 'b' , 'a' , 'c' ] ) #NEWLINE#
datareader = csv . reader ( webpage . read ( ) . decode ( 'utf-8' ) . splitlines ( ) ) #NEWLINE#
format ( f , '.15g' ) #NEWLINE#
ax . set_title ( 'Title' ) #NEWLINE#
entry_list . extend ( [ entry . title . text for entry in feed . entry ] ) #NEWLINE#
pattern . sub ( 'A*\\3\\2\\1*' , s ) #NEWLINE#
re . split ( '(?<=CDE)(\\w+)(?=FG)' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( driver . capabilities [ 'version' ] ) #NEWLINE#
list ( [ d for d in exampleSet if d [ 'type' ] in keyValList ] ) #NEWLINE#
plt . legend ( ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
numpy . array ( data , dtype = [ ( 'label' , str ) , ( 'x' , float ) , ( 'y' , float ) ] ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
df = df . loc [ : , ( ( df != 0 ) . any ( axis = 0 ) ) ] #NEWLINE#
"""hello#SPACE#{0},#SPACE#how#SPACE#are#SPACE#you#SPACE#{0},#SPACE#welcome#SPACE#{0}""" . format ( 'john' ) #NEWLINE#
df . set_index ( 'A' ) #NEWLINE#
x_image = tf . reshape ( tf_in , [ - 1 , 2 , 4 , 1 ] ) #NEWLINE#
df . groupby ( [ 'country' , 'place' ] , as_index = False ) [ 'value' ] . max ( ) #NEWLINE#
any ( x [ 0 ] == 'a' for x in seq_of_tups ) #NEWLINE#
[ line [ 2 : ] for line in lines ] #NEWLINE#
L = [ '1' , '2' , '3' , '7-10' , '15' , '20-25' ] #NEWLINE#
import my_module #NEWLINE#
list ( [ a for a in A if a not in B ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * y , list , 1 ) #NEWLINE#
[ '_Test__private_symbol' , '__doc__' , '__module__' , 'normal_symbol' ] #NEWLINE#
form = MyModelForm ( initial = { 'gender' : 'M' } ) #NEWLINE#
get_pid ( 'java' ) #NEWLINE#
df . to_csv ( 'filename.csv' , header = False ) #NEWLINE#
newlist = [ x for x in oldlist if x not in [ 'a' , 'c' ] ] #NEWLINE#
[ max ( len ( b ) for b in a ) for a in zip ( * x ) ] #NEWLINE#
[ ( 10 , 'India' ) , ( 12 , 'USA' ) , ( 12 , 'UK' ) , ( 11 , 'Other' ) ] #NEWLINE#
ctypes . windll . user32 . MessageBoxW ( 0 , 'Your#SPACE#text' , 'Your#SPACE#title' , 1 ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
zlib . decompress ( u . encode ( 'latin1' ) ) #NEWLINE#
dict = { 'Alice' : '2341' , 'Beth' : '9102' , 'Cecil' : '3258' } #NEWLINE#
os . path . realpath ( os . path . dirname ( sys . argv [ 0 ] ) ) #NEWLINE#
[ match . group ( 0 ) for match in pattern . finditer ( '44442(2)2(2)44' ) ] #NEWLINE#
return next ( ( i for i , v in enumerate ( L ) if v != x ) , - 1 ) #NEWLINE#
int ( s . replace ( '#SPACE#' , '' ) , 16 ) #NEWLINE#
df [ 'A' ] . str . contains ( '^(?:(?!Hello|World).)*$' ) #NEWLINE#
zip ( * l ) #NEWLINE#
result = [ { k : ( d1 [ k ] + d2 [ k ] ) for k in d1 } for d1 , d2 in zip ( var1 , var2 ) ] #NEWLINE#
df . stack ( ) . groupby ( level = 0 ) . first ( ) . reindex ( df . index ) #NEWLINE#
{ '#SPACE#Failures' : 0 , 'Tests#SPACE#run' : 1 , '#SPACE#Errors' : 0 } #NEWLINE#
pd . merge ( df1 , df2 , indicator = True , how = 'outer' ) #NEWLINE#
parser . add_argument ( 'file' , type = argparse . FileType ( 'r' ) , nargs = '+' ) #NEWLINE#
regexp = re . compile ( '^group/(?P<group>[^/]+)$' ) #NEWLINE#
pd . concat ( [ s1 , s2 ] , axis = 1 ) . reset_index ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
map ( float , i . split ( ) [ : 2 ] ) #NEWLINE#
[ ( 'spam' , 'eggs' ) , ( 'spam' , 'ham' ) ] #NEWLINE#
os . system ( 'fsutil#SPACE#file#SPACE#createnew#SPACE#r:\\dummy.txt#SPACE#6553600' ) #NEWLINE#
plt . figure ( ) . canvas . draw ( ) #NEWLINE#
[ item for pair in zip ( a , b ) for item in pair ] #NEWLINE#
arr = [ [ int ( i ) for i in line . split ( ) ] for line in open ( 'input.txt' ) ] #NEWLINE#
print ( '\n' . join ( map ( str , ports ) ) ) #NEWLINE#
df = df . groupby ( [ df [ 'Date_Time' ] . dt . date ] ) . mean ( ) #NEWLINE#
obj = type ( 'obj' , ( object , ) , { 'propertyName' : 'propertyValue' } ) #NEWLINE#
fig . savefig ( 'test_scatter.png' ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
p . start ( ) #NEWLINE#
pd . unique ( df [ [ 'Col1' , 'Col2' ] ] . values . ravel ( ) ) #NEWLINE#
pd . DataFrame ( { name : df [ 'path' ] . str . count ( name ) for name in wordlist } ) #NEWLINE#
y = [ s for s in x if len ( s ) == 2 ] #NEWLINE#
top_n . sort ( key = lambda t : ( - t [ 1 ] , t [ 0 ] ) ) #NEWLINE#
print ( my_string . split ( 'world' , 1 ) [ 1 ] ) #NEWLINE#
[ '#SPACE#' . join ( col ) . strip ( ) for col in df . columns . values ] #NEWLINE#
del mylist [ : n ] #NEWLINE#
s . decode ( 'unicode-escape' ) . encode ( 'ascii' ) #NEWLINE#
int ( str1 . split ( ) [ 0 ] ) #NEWLINE#
Employee . objects . select_related ( ) #NEWLINE#
set ( l ) . issuperset ( set ( [ 'a' , 'b' ] ) ) #NEWLINE#
return '' . join ( c for c in line if ord ( c ) >= 32 ) #NEWLINE#
driver . find_element_by_partial_link_text ( 'DEV.tgz' ) . click ( ) #NEWLINE#
b [ a ] . shape #NEWLINE#
print ( json . dumps ( data ) ) #NEWLINE#
sess . run ( 'add:0' ) #NEWLINE#
test_rec [ ( test_rec . age == 1 ) & ( test_rec . sex == 1 ) ] #NEWLINE#
[ ( 'a' , ) , ( 'b' , ) , ( 'c' , ) , ( 'a' , 'b' ) , ( 'a' , 'c' ) , ( 'b' , 'c' ) , ( 'a' , 'b' , 'c' ) ] #NEWLINE#
urllib . request . urlretrieve ( 'ftp://server/path/to/file' , 'file' ) #NEWLINE#
match . group ( 1 ) #NEWLINE#
list ( { ( x [ 0 ] , x [ 1 ] ) : x for x in L } . values ( ) ) #NEWLINE#
df [ 'date_column' ] = pd . to_datetime ( df [ 'date_column' ] ) #NEWLINE#
sys . stdout . isatty ( ) #NEWLINE#
btn . grid ( column = x , row = y , sticky = N + S + E + W ) #NEWLINE#
df . groupby ( [ 'ID' , 'url' ] ) [ 'active_seconds' ] . cumsum ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sentence = re . sub ( '\\bbeans\\b' , 'cars' , sentence ) #NEWLINE#
os . environ [ 'LD_LIBRARY_PATH' ] = 'my_path' #NEWLINE#
line = [ '3' , '4' , '1\r\n' ] #NEWLINE#
my_dict2 = dict ( ( y , x ) for x , y in my_dict . items ( ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ x for x in lst if 'abc' in x ] #NEWLINE#
f . read ( ) #NEWLINE#
pd . concat ( [ df , df . sum ( axis = 1 ) ] , axis = 1 ) #NEWLINE#
np . searchsorted ( A , np . intersect1d ( A , B ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
l = [ ( 'blue' , '5' ) , ( 'red' , '6' ) , ( 'yellow' , '8' ) ] #NEWLINE#
text_widget . configure ( state = 'disabled' ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#input#SPACE#encoding' ) #NEWLINE#
np . resize ( [ 1 , - 1 ] , 10 ) #NEWLINE#
ax . plot ( x , y , 'k^' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
random . choice ( list ( open ( '/etc/dictionaries-common/words' ) ) ) #NEWLINE#
pd . concat ( [ df1 , df2 , df3 ] , axis = 1 , keys = [ 'df1' , 'df2' , 'df3' ] ) #NEWLINE#
"""""" . join ( [ x for x in c if x not in vowels ] ) #NEWLINE#
set ( [ 'a' , 'b' , 'c' ] ) #NEWLINE#
result_df . index . get_level_values ( 'A' ) #NEWLINE#
equal ( [ 1 , 2 ] , a ) . all ( axis = 1 ) #NEWLINE#
array ( [ [ 2.0 , 18.0 , 2.3 ] , [ 7.0 , 29.0 , 4.6 ] , [ 8.0 , 44.0 , 8.9 ] , [ 5.0 , 33.0 , 7.7 ] ] ) #NEWLINE#
int ( '' . join ( map ( str , x ) ) ) #NEWLINE#
print ( "yo#SPACE#it's#SPACE#a#SPACE#{}" . format ( imgtag . group ( 0 ) ) ) #NEWLINE#
os . path . join ( os . path . abspath ( os . path . dirname ( __file__ ) ) , 'logs' ) #NEWLINE#
[ [ 0 , 5 ] , [ 2 , 7 ] , [ 1 , 3 , 9 ] , [ 4 , 10 ] , [ 6 ] , [ 8 ] ] #NEWLINE#
fig . subplots_adjust ( wspace = 0 , hspace = 0 ) #NEWLINE#
mosaic ( myDataframe , [ 'size' , 'length' ] ) #NEWLINE#
secondtable = soup . findAll ( 'table' ) [ 1 ] #NEWLINE#
df . filter ( [ 'ticker' , 'date' , 'value' ] ) #NEWLINE#
[ 'blue' , 'blue' , None , 'red' , 'red' , 'green' , None ] #NEWLINE#
plt . rcParams [ 'text.latex.preamble' ] . append ( '\\mathchardef\\mhyphen="2D' ) #NEWLINE#
re . sub ( '\\bMr\\.|\\bMr\\b' , 'Mister' , s ) #NEWLINE#
xml . etree . ElementTree . parse ( 'xml_file.xml' ) #NEWLINE#
return int ( bin ( x ) [ 2 : ] . zfill ( 32 ) [ : : - 1 ] , 2 ) #NEWLINE#
print ( sorted ( d . keys ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
new_list = copy . deepcopy ( old_list ) #NEWLINE#
messages = Message . objects . filter ( head = True ) . order_by ( 'time' ) [ 0 : 15 ] #NEWLINE#
filename = input ( 'Enter#SPACE#a#SPACE#file#SPACE#name:#SPACE#' ) #NEWLINE#
np . linspace ( 0 , 5 , 10 , endpoint = False ) #NEWLINE#
somelist . sort ( key = lambda x : x . resultType ) #NEWLINE#
pd . concat ( [ pd . Series ( json . loads ( line ) ) for line in open ( 'train.json' ) ] , axis = 1 ) #NEWLINE#
SOCIAL_AUTH_FACEBOOK_SCOPE = [ 'email' , 'user_friends' , 'friends_location' ] #NEWLINE#
f . close ( ) #NEWLINE#
httplib . HTTPConnection ( 'myip.dnsomatic.com' ) . request ( 'GET' , '/' ) #NEWLINE#
array [ itemindex [ 0 ] [ 0 ] ] [ itemindex [ 1 ] [ 0 ] ] #NEWLINE#
type ( ham ) . __name__ #NEWLINE#
import pandas as pd #NEWLINE#
ffprofile = webdriver . FirefoxProfile ( '/Users/username/Downloads/profilemodel' ) #NEWLINE#
eval ( 'add(3,4)' , { '__builtins__' : None } , dispatcher ) #NEWLINE#
array [ array [ 'phase' ] == 'P' ] #NEWLINE#
tuple ( [ ( 10 * x ) for x in img . size ] ) #NEWLINE#
print ( now + datetime . timedelta ( hours = 1 , minutes = 23 , seconds = 10 ) ) #NEWLINE#
plt . plot ( x , y , '.' ) #NEWLINE#
plt . show ( ) #NEWLINE#
stats . sort ( key = lambda x : ( x [ 'K' ] , x [ 'B' ] ) , reverse = True ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
'%f' % ( x / y ) #NEWLINE#
fig . savefig ( 'the#SPACE#name#SPACE#of#SPACE#your#SPACE#figure' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
"""#SPACE#&#SPACE#""" . join ( [ '_' . join ( inp [ i : j ] ) for i , j in zip ( [ 0 , 2 ] , [ 2 , None ] ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'size' ] . loc [ df . groupby ( 'adult' ) [ 'weight' ] . transform ( 'idxmax' ) ] #NEWLINE#
r = http . request ( 'GET' , 'https://www.23andme.com/' ) #NEWLINE#
any ( value in dictionary [ key ] for key in dictionary ) #NEWLINE#
[ ( x , y ) for x , y in zip ( myList , myList [ 1 : ] ) if y == 9 ] #NEWLINE#
sorted ( list ( things . keys ( ) ) , key = lambda x : things [ x ] [ 'weight' ] , reverse = True ) [ : 2 #NEWLINE# ] #NEWLINE#
print ( os . path . abspath ( __file__ ) ) #NEWLINE#
app = webapp2 . WSGIApplication ( [ ( '/.*' , MainHandler ) ] , debug = True ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
urllib . parse . quote ( '%' ) #NEWLINE#
scipy . stats . hypergeom . pmf ( k , M , n , N ) #NEWLINE#
btn . clicked . connect ( self . close ) #NEWLINE#
canvas . create_text ( x , y , font = ( 'Purisa' , rndfont ) , text = k ) #NEWLINE#
float ( '123.4506780' ) #NEWLINE#
plt . show ( ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
np . array ( [ a , a , a ] ) #NEWLINE#
a [ : , : 2 ] #NEWLINE#
connection . send ( 'HTTP/1.0#SPACE#200#SPACE#OK' ) #NEWLINE#
[ item for sublist in list_of_lists for item in sublist ] #NEWLINE#
os . stat ( '/the/local/file.zip' ) . st_size #NEWLINE#
[ x . span ( ) for x in re . finditer ( 'foo' , 'foo#SPACE#foo#SPACE#foo#SPACE#foo' ) ] #NEWLINE#
df [ 'index_col' ] = df . index #NEWLINE#
main . mainloop ( ) #NEWLINE#
return HttpResponse ( 'deleted' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df_test [ 'Btime' ] . iloc [ 0 ] #NEWLINE#
pd . value_counts ( d . values . ravel ( ) ) #NEWLINE#
data = numpy . loadtxt ( fileName , dtype = 'float' ) #NEWLINE#
np . tensordot ( ind , dist , axes = [ 1 , 1 ] ) [ 0 ] . T #NEWLINE#
matplotlib . rc ( 'font' , size = 6 ) #NEWLINE#
plt . show ( ) #NEWLINE#
my_tuple = tuple ( [ my_string ] + my_list ) #NEWLINE#
webb . traceroute ( 'your-web-page-url' , 'file-name.txt' ) #NEWLINE#
sorted ( list ( league . items ( ) ) , key = lambda x : x [ 1 ] [ 'totalpts' ] , reverse = True ) #NEWLINE#
socket . gethostbyname ( 'cool-rr.com' ) #NEWLINE#
re . findall ( '[%s]+' % string . ascii_letters , 'Hello#SPACE#world,#SPACE#my#SPACE#name#SPACE#is...James!' ) #NEWLINE#
[ 4957 , 4957 , 1945 ] #NEWLINE#
plt . show ( ) #NEWLINE#
re . findall ( '(\\b[A-ZÃ\x9cÃ\x96Ã\x84][a-z.-]+\\b)' , words , re . UNICODE ) #NEWLINE#
globals ( ) [ 'a' ] #NEWLINE#
[ 2 , 4 , 6 , 8 ] #NEWLINE#
csv . writer ( f , delimiter = '#SPACE#' , quotechar = ',' , quoting = csv . QUOTE_MINIMAL ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , A , [ ] ) #NEWLINE#
p = re . compile ( '(Friday\\s\\d+|Saturday)' ) #NEWLINE#
ax . imshow ( masked_array , interpolation = 'nearest' , cmap = cmap ) #NEWLINE#
plt . show ( ) #NEWLINE#
application = tornado . web . Application ( [ ( '/' , hello ) ] , debug = False ) #NEWLINE#
n = int ( input ( ) ) #NEWLINE#
good_data = np . array ( [ x for x in data [ ( 0 ) , : ] if x == 1.0 ] ) #NEWLINE#
df [ df . a . isin ( keys ) ] #NEWLINE#
fruits . sort ( key = lambda x : x . name . lower ( ) ) #NEWLINE#
"""$Solución#SPACE#\\;#SPACE#{}\\;#SPACE#:\\;#SPACE#{}\\\\$""" . format ( i , value ) #NEWLINE#
p . apply ( np . sum , axis = 'major' ) #NEWLINE#
[ 'a' , 'b' , 'c' ] . join ( '' ) #NEWLINE#
sorted ( my_tuple , key = lambda tup : tup [ 1 ] ) #NEWLINE#
nltk . tokenize . word_tokenize ( 'Hello,#SPACE#world.#SPACE#How#SPACE#are#SPACE#you?' ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#politicians' ) . fetchall ( ) #NEWLINE#
ftp . quit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
xs . sort ( key = len ) #NEWLINE#
re . findall ( '(https?://\\S+)' , s ) #NEWLINE#
mylist . sort ( ) #NEWLINE#
[ sum ( x , [ ] ) for x in zip ( L1 , L2 ) ] #NEWLINE#
all_keys = set ( ) . union ( * ( list ( d . keys ( ) ) for d in mylist ) ) #NEWLINE#
print ( re . sub ( '^\\W*\\w+\\W*' , '' , text ) ) #NEWLINE#
[ [ '1' , 'a' , 'b' ] , [ '2' , 'c' , 'd' ] , [ '3' , '123' , 'e' ] , [ '4' ] ] #NEWLINE#
lst . sort ( reverse = True ) #NEWLINE#
workbook . close ( ) #NEWLINE#
list ( sorted ( iter ) ) [ - 10 ] #NEWLINE#
writer = pd . ExcelWriter ( excel_file , engine = 'openpyxl' ) #NEWLINE#
i = 5 + Tup ( ) [ 0 ] #NEWLINE#
open ( to_file , 'w' ) . write ( indata ) #NEWLINE#
[ '{}_{}' . format ( k , v ) for k , v in d . items ( ) ] #NEWLINE#
sorted ( A , key = itemgetter ( 'name' , 'age' ) ) #NEWLINE#
numpy . concatenate ( ( a , b ) ) #NEWLINE#
driver . quit ( ) #NEWLINE#
list ( dict . items ( ) ) #NEWLINE#
x . astype ( 'M8[ms]' ) . astype ( 'O' ) #NEWLINE#
print ( '' . join ( format ( x , '10.3f' ) for x in a ) ) #NEWLINE#
C = pd . merge ( C , B , on = [ 'Marca' , 'Formato' ] ) #NEWLINE#
lst = [ [ ] for _ in range ( a ) ] #NEWLINE#
[ ( 1 , 4 ) , ( 4 , 8 ) , ( 8 , 10 ) ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : [ a , b ] , [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
time . strptime ( '00:00:00,000' . split ( ',' ) [ 0 ] , '%H:%M:%S' ) #NEWLINE#
li = [ x for x in li if condition ( x ) ] #NEWLINE#
zip ( * heapq . nlargest ( 2 , enumerate ( a ) , key = operator . itemgetter ( 1 ) ) ) [ 0 ] #NEWLINE#
re . split ( ';(?=(?:[^\'"]|\'[^\']*\'|"[^"]*")*$)' , data ) #NEWLINE#
pwd . getpwnam ( 'aix' ) . pw_uid #NEWLINE#
df . to_csv ( 'test.csv' , index = False ) #NEWLINE#
[ i [ 0 ] for i in re . findall ( '(([a-z])\\2)' , 'abbbbcppq' ) ] #NEWLINE#
literal_eval ( "{'key':#SPACE#10}" ) #NEWLINE#
int ( '' . join ( str ( i ) for i in my_list ) , 2 ) #NEWLINE#
[ mystr [ i : i + 8 ] for i in range ( 0 , len ( mystr ) , 8 ) ] #NEWLINE#
os . system ( cmd + '>#SPACE#/dev/null#SPACE#2>&1' ) #NEWLINE#
sorted_list_of_values = [ item [ 1 ] for item in sorted_list_of_keyvalues ] #NEWLINE#
res = [ ( x , my_dictionary [ x ] ) for x in my_list ] #NEWLINE#
list ( permutations ( [ 2 , 3 , 4 ] ) ) #NEWLINE#
MultiIndex . from_tuples ( index_3levels . droplevel ( 'l3' ) . unique ( ) ) #NEWLINE#
r . plot ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] , xlab = 'X' , ylab = 'Y' ) #NEWLINE#
df . sort_values ( by = [ 'a' , 'b' ] ) . groupby ( df . a ) . first ( ) [ [ 'b' ] ] . reset_index ( ) #NEWLINE#
"""#SPACE#""" . join ( [ x for x in query . split ( ) if x . lower ( ) not in stopwords ] ) #NEWLINE#
a = getattr ( myobject , 'id' , None ) #NEWLINE#
pattern = re . compile ( '[@-O]' ) #NEWLINE#
map ( lambda n : '%.2f' % n , [ 1883.95 , 1878.33 , 1869.43 , 1863.4 ] ) #NEWLINE#
logging . Logger . __init__ ( self , name , logging . DEBUG ) #NEWLINE#
StreetCat . _meta . get_parent_list ( ) #NEWLINE#
df . sort ( [ 'c1' , 'c2' ] , ascending = [ False , True ] ) #NEWLINE#
data . groupby ( lambda x : data [ 'date' ] [ x ] . year ) #NEWLINE#
float ( '55063.000000' ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . mean ( arr . reshape ( - 1 , 3 ) , axis = 1 ) #NEWLINE#
np . meshgrid ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] , indexing = 'ij' ) #NEWLINE#
B = np . split ( A , np . where ( A [ : , ( 0 ) ] == 0.0 ) [ 0 ] [ 1 : ] ) #NEWLINE#
df . sort ( [ ( 'Group1' , 'C' ) ] , ascending = False ) #NEWLINE#
""",""" . join ( '{},{}' . format ( i , i + 1 ) for i in range ( 1 , 100 , 4 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( i [ 1 : ] * int ( i [ 0 ] ) if i [ 0 ] . isdigit ( ) else i for i in l ) #NEWLINE#
print ( '{0}#SPACE##SPACE#{1}' . format ( count , conv ) ) #NEWLINE#
int ( '0000' ) #NEWLINE#
list ( dict ( ( ( x [ 0 ] , x [ 1 ] ) , x ) for x in L ) . values ( ) ) #NEWLINE#
binascii . b2a_hex ( '\x02P\x1cAÑ\x00\x00\x02Ë\x11\x00' ) . decode ( 'ascii' ) #NEWLINE#
numpy . nonzero ( numpy . in1d ( a2 , a1 ) ) [ 0 ] #NEWLINE#
re . sub ( "'" , '' , "A#SPACE#single#SPACE#'#SPACE#char" ) #NEWLINE#
re . compile ( '(?<=}})\\s+(?={{)' ) #NEWLINE#
list ( x . keys ( ) ) . index ( 'c' ) #NEWLINE#
'Hello#SPACE#%s' % ',#SPACE#' . join ( map ( str , my_args ) ) #NEWLINE#
re . search ( 'a{1,65536}' , 'aaa' ) #NEWLINE#
list ( zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) ) #NEWLINE#
contour = cv2 . convexHull ( contour ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
sorted ( people , key = operator . itemgetter ( 'name' ) ) #NEWLINE#
l = [ ( x * 2 ) for x in l ] #NEWLINE#
print ( [ ( ord ( char ) - 96 ) for char in input ( 'Write#SPACE#Text:#SPACE#' ) . lower ( ) ] ) #NEWLINE#
open ( 'icon.png' , 'rb' ) #NEWLINE#
Immutable = collections . namedtuple ( 'Immutable' , [ 'a' , 'b' ] ) #NEWLINE#
list ( your_iterator ) #NEWLINE#
A [ : , 3 : ] [ np . in1d ( A [ : , 3 : ] , B ) . reshape ( A . shape [ 0 ] , - 1 ) ] = 0 #NEWLINE#
new_dict = dict ( zip ( keys , values ) ) #NEWLINE#
df . drop_duplicates ( 'name' , keep = 'last' ) #NEWLINE#
{ '1' : { } , '2' : { '101' : 'OneZeroOne' , '202' : 'TwoZeroTwo' } } #NEWLINE#
d2 = dict ( ( k , f ( v ) ) for k , v in list ( d1 . items ( ) ) ) #NEWLINE#
[ dict ( zip ( r . dtype . names , x ) ) for x in r ] #NEWLINE#
"""""" . join ( myparts ) #NEWLINE#
[ x for x in L if x >= 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 ] #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
return { 'color' : 'color' , 'message' : 'message' } #NEWLINE#
app . mainloop ( ) #NEWLINE#
len ( a ) - a [ - 1 : : - 1 ] . index ( 'hello' ) - 1 #NEWLINE#
writer . writerows ( row . strip ( ) . split ( ) for row in infile if row . strip ( ) ) #NEWLINE#
cv2 . namedWindow ( 'main' , cv2 . WINDOW_NORMAL ) #NEWLINE#
df [ 'SR' ] = df [ 'Info' ] . apply ( foo ) #NEWLINE#
random . shuffle ( a ) #NEWLINE#
parser . parse_args ( [ '-a' , '-b' , 'fileone' , 'filetwo' , 'filethree' ] ) #NEWLINE#
eval ( "print('Hello,#SPACE#%s'%name)" , { } , { 'name' : 'person-b' } ) #NEWLINE#
cursor = collection . find ( { '$snapshot' : True } ) #NEWLINE#
"""#SPACE#""" . join ( word for word in anytext . split ( ) if len ( word ) > 3 ) #NEWLINE#
db . col . find ( { 'price' : { '$lt' : 100 } } ) #NEWLINE#
isinstance ( s , str ) #NEWLINE#
"""I#SPACE#am#SPACE#a#SPACE#string""" . decode ( 'ASCII' ) #NEWLINE#
plt . show ( ) #NEWLINE#
data [ ( np . where ( masks ) [ 1 ] ) , : ] #NEWLINE#
next ( x for x in range ( 10 ) if x > 5 ) #NEWLINE#
a = [ ( 'b' , i , 'ff' ) for i in range ( 1 , 5 ) ] #NEWLINE#
YourApp ( ) . run ( ) #NEWLINE#
np . allclose ( C0 , C3 ) #NEWLINE#
a = datetime . datetime . now ( ) . year #NEWLINE#
[ row [ 2 : 5 ] for row in LoL [ 1 : 4 ] ] #NEWLINE#
cursor . close ( ) #NEWLINE#
rates . sub ( treas . iloc [ : , ( 0 ) ] , axis = 0 ) . dropna ( ) #NEWLINE#
values = [ d [ k ] for k in a ] #NEWLINE#
response . request . headers . get ( 'Referer' , None ) #NEWLINE#
csv_file . close ( ) #NEWLINE#
super ( SyncableMixin , self ) . save ( * args , ** kwargs ) #NEWLINE#
d2 = { k : f ( v ) for k , v in list ( d1 . items ( ) ) } #NEWLINE#
sorted ( list ( mydict . values ( ) ) , reverse = True ) #NEWLINE#
return HttpResponse ( json . dumps ( data ) , content_type = 'application/json' ) #NEWLINE#
df . resample ( '2D' , how = 'sum' ) #NEWLINE#
f . write ( 'foo' ) #NEWLINE#
ftp . retrlines ( 'LIST' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . loc [ df [ 'Type' ] == 'Dog' , [ 'Killed' ] ] #NEWLINE#
mylist [ 0 ] [ 0 ] #NEWLINE#
"""Hello#SPACE#there.#SPACE#My#SPACE#name#SPACE#is#SPACE#Fr.ed.#SPACE#I#SPACE#am#SPACE#25.5#SPACE#years#SPACE#old.""" . split ( '.#SPACE#' ) #NEWLINE#
C = pd . merge ( C , A , on = [ 'Canal' , 'Gerencia' ] ) #NEWLINE#
"""{0:0=2d}""" . format ( a ) #NEWLINE#
multi_db = True #NEWLINE#
lst . sort ( key = lambda x : ( - x [ 2 ] , x [ 0 ] ) ) #NEWLINE#
df . drop_duplicates ( subset = [ 'A' , 'C' ] , keep = False ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
Gtk . main ( ) #NEWLINE#
f . close ( ) #NEWLINE#
df . set_index ( 'A' ) . reindex ( new_index ) . reset_index ( ) #NEWLINE#
logging . disable ( logging . NOTSET ) #NEWLINE#
urljoin ( 'http://some/more' , 'thing' ) #NEWLINE#
urljoin ( 'http://some/more/' , 'thing' ) #NEWLINE#
urljoin ( 'http://some/more/' , '/thing' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#table_name#SPACE#LIMIT#SPACE#1' ) #NEWLINE#
sys . stdout . write ( '\x08' ) #NEWLINE#
print ( 'a={:d},#SPACE#b={:d}' . format ( f ( x , n ) , g ( x , n ) ) ) #NEWLINE#
"""{}#SPACE#{}""" . format ( 10 , 20 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( hashlib . md5 ( 'whatever#SPACE#your#SPACE#string#SPACE#is' ) . hexdigest ( ) ) #NEWLINE#
"""a#SPACE#string#SPACE#{0:>5}""" . format ( foo ) #NEWLINE#
df . drop ( df . index [ [ 1 , 3 ] ] ) #NEWLINE#
[ len ( x ) for x in a [ 0 ] ] #NEWLINE#
all ( d1 [ k ] == d2 [ k ] for k in ( 'testclass' , 'testname' ) ) #NEWLINE#
df . resample ( 'w' , how = 'sum' , axis = 1 ) #NEWLINE#
ax . auto_scale_xyz ( [ 0 , 500 ] , [ 0 , 500 ] , [ 0 , 0.15 ] ) #NEWLINE#
pickle . load ( 'afile' ) #NEWLINE#
np . array ( [ [ 0 , 1 , 2 , 3 ] , [ 4 , 5 , 4 , 3 ] , [ 6 , 5 , 4 , 3 ] ] ) #NEWLINE#
print ( list ( itertools . permutations ( [ 1 , 2 , 3 , 4 ] , 2 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ k : v . strip ( '"' ) for k , v in re . findall ( '(\\S+)=(".*?"|\\S+)' , s ) } #NEWLINE#
( 'NORTH#SPACE#' if b > 0 else 'SOUTH#SPACE#' ) + ( 'EAST' if a > 0 else 'WEST' ) #NEWLINE#
print ( etree . tostring ( f , pretty_print = True ) ) #NEWLINE#
print ( '{foo},#SPACE#{bar},#SPACE#{baz}' . format ( ** locals ( ) ) ) #NEWLINE#
[ item for sublist in [ [ i [ 1 : ] , [ i [ 0 ] ] ] for i in l ] for item in sublist ] #NEWLINE#
re . findall ( '(?<=\\s)\\d.*?(?=\\s\\d\\s\\d[.](?=$|\\s[A-Z]))' , s ) #NEWLINE#
l = [ ( ord ( a ) ^ ord ( b ) ) for a , b in zip ( s1 , s2 ) ] #NEWLINE#
config [ 'mysql' ] [ 'tables' ] [ 'users' ] #NEWLINE#
client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
df . set_index ( s . index ) . sort ( ) #NEWLINE#
print ( '---' . join ( vals ) ) #NEWLINE#
{ '1' : 2 , 'foo' : 'bar' , 'false' : true } #NEWLINE#
plt . show ( ) #NEWLINE#
circles = cv2 . HoughCircles ( gray , cv . CV_HOUGH_GRADIENT ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
pd . Series ( np . concatenate ( [ a , b ] ) ) #NEWLINE#
df [ pd . Series ( df . index . get_level_values ( 'A' ) ) . isin ( vals [ vals [ 'values' ] ] . index ) ] #NEWLINE#
data = self . get_argument ( 'data' , 'No#SPACE#data#SPACE#received' ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
df . to_csv ( ) #NEWLINE#
a += [ '' ] * ( N - len ( a ) ) #NEWLINE#
C = [ i for i in A if i not in B ] #NEWLINE#
plt . imshow ( Z , interpolation = 'none' ) #NEWLINE#
driver . execute_script ( "document.getElementById('lga').style.display#SPACE#=#SPACE#'none';" ) #NEWLINE#
sum ( map ( sum , a ) ) #NEWLINE#
s = s . split ( '.zip' , 1 ) [ 0 ] + '.zip' #NEWLINE#
len ( [ s . start ( ) for s in re . finditer ( '(?=aa)' , 'aaa' ) ] ) #NEWLINE#
name = 'b' + str ( num ) #NEWLINE#
Counter ( { 'BlahBlah' : 1 , 'Blah' : 1 } ) #NEWLINE#
list ( range ( max ( x [ 0 ] , y [ 0 ] ) , min ( x [ - 1 ] , y [ - 1 ] ) + 1 ) ) #NEWLINE#
df [ df [ 'A' ] > 2 ] [ 'B' ] = new_val #NEWLINE#
sorted ( ( ( v , k ) for k , v in d . items ( ) ) , reverse = True ) #NEWLINE#
[ ( 1 , ) , ( 2 , ) , ( 3 , ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 2 , 3 ) , ( 1 , 2 , 3 ) ] #NEWLINE#
transaction . commit ( ) #NEWLINE#
print ( text . decode ( 'unicode-escape' ) ) #NEWLINE#
proc = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
np . resize ( [ 1 , - 1 ] , 11 ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . ylabel ( 'Response' ) #NEWLINE#
df . plot ( x = df . index . astype ( str ) ) #NEWLINE#
[ ( x - y ) for x , y in zip ( a [ 1 : ] , a ) ] #NEWLINE#
df [ 1 ] = df [ 0 ] . dt . to_period ( 'M' ) #NEWLINE#
pygame . image . save ( img , 'image.jpg' ) #NEWLINE#
print ( df . resample ( 'Q-APR' , loffset = '-1m' ) . T ) #NEWLINE#
[ i [ 1 : ] for i in line . split ( ) if i . startswith ( '#' ) ] #NEWLINE#
mylist = list ( range ( 10 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
objects = Model . objects . filter ( id__in = object_ids ) . order_by ( '-timestamp' ) #NEWLINE#
print ( len ( 'abc' ) ) #NEWLINE#
print ( len ( 'Ð¹Ñ\x86Ñ\x8b' ) ) #NEWLINE#
list ( zip ( keys , values ) ) #NEWLINE#
s . bind ( ( '' , 12345 ) ) #NEWLINE#
[ 'you' , 'i' , 'a' ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
print ( re . sub ( '#SPACE#\\(\\w+\\)' , '' , item ) ) #NEWLINE#
set ( [ 1 , 2 , 2 ] ) . issubset ( [ 1 , 2 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( itertools . chain ( * [ item . split ( ) for item in lst ] ) ) #NEWLINE#
s = s . decode ( 'some_encoding' ) . encode ( 'ascii' , 'replace' ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
np . isnan ( a ) . any ( 1 ) #NEWLINE#
models . PositiveSmallIntegerField ( default = 0 ) #NEWLINE#
sys . path . append ( '/your/dir/here' ) #NEWLINE#
f . write ( xmlstr . encode ( 'utf-8' ) ) #NEWLINE#
buf = '\x00' + '' . join ( chr ( random . randint ( 0 , 255 ) ) for _ in range ( 4 ) ) + '\x00' #NEWLINE#
set ( a ) . intersection ( b , c ) #NEWLINE#
binascii . unhexlify ( '437c2123' ) #NEWLINE#
{ 'A1023' : 'CRT' , 'A1029' : 'Regulator' , 'A1030' : 'Therm' } #NEWLINE#
df . columns . map ( lambda x : x . startswith ( 'foo' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
al_arrays = [ [ l [ i : i + 2 ] for i in range ( 0 , len ( l . strip ( ) ) , 2 ) ] for l in In_f ] #NEWLINE#
sorted ( dct , key = dct . get ) #NEWLINE#
r = requests . get ( 'http://www.example.com/' , headers = { 'content-type' : 'text' } ) #NEWLINE#
subprocess . Popen ( 'dmidecode.exe#SPACE#-s#SPACE#system-uuid' . split ( ) ) #NEWLINE#
x , y = zip ( * [ ( i , - 1 * j ) for i , j in enumerate ( range ( 10 ) ) ] ) #NEWLINE#
os . path . getmtime ( filepath ) #NEWLINE#
form [ 'favorite_cheese' ] = [ 'brie' ] #NEWLINE#
print ( socket . gethostbyname ( 'google.com' ) ) #NEWLINE#
np . where ( np . any ( a == 2 , axis = 0 ) & np . any ( a == 5 , axis = 0 ) ) #NEWLINE#
ax . set_ylim ( [ 0 , 5 ] ) #NEWLINE#
element . find ( 'visits' ) #NEWLINE#
gpb = float ( eval ( input ( ) ) ) #NEWLINE#
splitlists [ - 1 ] . append ( splitlists [ 0 ] [ 0 ] ) #NEWLINE#
child . expect ( 'hi' ) #NEWLINE#
driver . get ( 'http://news.ycombinator.com' ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '(\\\\u[0-9A-Fa-f]+)' , unescapematch , t ) #NEWLINE#
form . group_id . choices . insert ( 0 , ( '' , '' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( '0' , 10 ) , ( '1' , 23 ) , ( '2.0' , 321 ) , ( '2.1' , 3231 ) , ( '3' , 3 ) , ( '12.1.1' , 2 ) ] #NEWLINE#
a = [ a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] [ 1 ] > a [ i - 1 ] [ 1 ] ] #NEWLINE#
wb . save ( file ) #NEWLINE#
sorted ( [ ( 1 , 3 ) , ( 3 , 2 ) , ( 2 , 1 ) ] , key = itemgetter ( 1 ) ) #NEWLINE#
re . findall ( '[a]' , 'abcd' ) #NEWLINE#
re . split ( 'a+' , 'aaa' ) #NEWLINE#
[ i for i , ( a , b ) in enumerate ( zip ( vec1 , vec2 ) ) if a == b ] #NEWLINE#
[ i for i in range ( 3 ) for _ in range ( 2 ) ] #NEWLINE#
ax . plot ( x , y , label = 'Representatives' if i == 0 else '' ) #NEWLINE#
r = re . compile ( '(This)' ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
list ( SomeModel . objects . filter ( id = instance . id ) . values ( ) ) [ 0 ] #NEWLINE#
print ( 'INTERNET\\jDoe' ) #NEWLINE#
PYTHON_DEFAULT_VERSION = 'python3.2' #NEWLINE#
sorted ( my_list , key = operator . itemgetter ( 'name' , 'age' , 'other_thing' ) ) #NEWLINE#
y = list ( x ) #NEWLINE#
np . where ( np . triu ( np . ones ( A . shape [ 0 ] , dtype = bool ) , 1 ) , A . T , A ) #NEWLINE#
f . close ( ) #NEWLINE#
Test . objects . filter ( actions__contains = { 'fixed_key_1' : 'foo2' } ) #NEWLINE#
list ( dict . keys ( ) ) [ 0 ] #NEWLINE#
random . choice ( string . ascii_letters [ 0 : 4 ] ) #NEWLINE#
len ( [ x for x in lst if x is not <VAR0> ] ) #NEWLINE#
df . groupby ( df . columns , axis = 1 ) . agg ( numpy . max ) #NEWLINE#
numpy . array ( [ v for v in vals if len ( set ( v ) ) == len ( v ) ] ) #NEWLINE#
axes . xaxis . grid ( False , which = 'minor' ) #NEWLINE#
browser . execute_script ( 'window.open("http://bings.com","_blank");' ) #NEWLINE#
np . where ( ~ a . any ( axis = 1 ) ) #NEWLINE#
assert getattr ( MyClass . my_method , '__wrapped__' ) . __name__ == 'my_method' #NEWLINE#
df . xs ( 'A' , level = 'Col' , axis = 1 ) #NEWLINE#
listOfLists = [ [ ] for i in range ( N ) ] #NEWLINE#
matrix ( [ [ 1 , 2 , 3 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ) #NEWLINE#
l = [ 0 ] * N #NEWLINE#
plt . show ( ) #NEWLINE#
print ( d [ 'a' ] [ 'b' ] [ 'c' ] ) #NEWLINE#
df = pd . read_pickle ( file_name ) #NEWLINE#
x = int ( x == 'true' ) #NEWLINE#
workbook . close ( ) #NEWLINE#
Category . objects . annotate ( num_books = Count ( 'book' ) ) . order_by ( 'num_books' ) #NEWLINE#
plt . show ( ) #NEWLINE#
window . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
[ 1 , 1 , 2 , 2 ] #NEWLINE#
keyring . get_password ( 'system' , 'username' ) #NEWLINE#
request . session [ 'message' ] = 'Some#SPACE#Error#SPACE#Message' #NEWLINE#
a = [ [ '0' , '0' ] , [ '0' , '0' ] , [ '0' , '0' ] ] #NEWLINE#
a = array . array ( 'i' , ( 0 for i in range ( 0 , 10 ) ) ) #NEWLINE#
sorted ( trial_list , key = lambda x : trial_dict [ x ] ) #NEWLINE#
app . run ( ) #NEWLINE#
ax . plot ( x , y , 'b.' ) #NEWLINE#
""",#SPACE#""" . join ( '=' . join ( ( str ( k ) , str ( v ) ) ) for k , v in list ( mydict . items ( ) ) ) #NEWLINE#
"""#SPACE#""" . join ( PorterStemmer ( ) . stem_word ( word ) for word in text . split ( '#SPACE#' ) ) #NEWLINE#
x . resample ( 'D' ) . fillna ( 0 ) #NEWLINE#
print ( weekdays ( 'Wednesday' ) ) #NEWLINE#
SOCIAL_AUTH_STORAGE = 'proj.channels.models.CustomSocialStorage' #NEWLINE#
f . write ( s . encode ( 'UTF-8' ) ) #NEWLINE#
plt . hist ( x , bins = list ( range ( - 4 , 5 ) ) ) #NEWLINE#
re . sub ( '[\\W_]+' , '' , s , flags = re . UNICODE ) #NEWLINE#
np . array ( [ j for i in arr for j in np . arange ( i - 0.2 , i + 0.25 , 0.1 ) ] ) #NEWLINE#
[ 'aÃ¡' , 'ab' , 'abc' ] #NEWLINE#
pd . io . parsers . read_csv ( 'tmp.csv' , sep = '\t' , index_col = 0 ) #NEWLINE#
CB . lines [ 0 ] . set_linewidth ( 10 ) #NEWLINE#
sum ( map ( sum , my_list ) ) #NEWLINE#
tostring ( element ) . split ( '>' , 1 ) [ 1 ] . rsplit ( '</' , 1 ) [ 0 ] #NEWLINE#
df [ 'C' ] = df . max ( axis = 1 ) #NEWLINE#
links = soup . find_all ( 'a' , { 'id' : 'c1' } ) #NEWLINE#
df . plot ( kind = 'bar' , stacked = True , colormap = 'Paired' ) #NEWLINE#
print ( ( '{:5d}#SPACE#' * 5 ) . format ( * values ) ) #NEWLINE#
handler . setLevel ( logging . DEBUG ) #NEWLINE#
print ( np . split ( a , b , axis = 0 ) ) #NEWLINE#
utc_dt . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
tree . xpath ( '//phylo:name[text()="Espresso"]' , namespaces = nsmap ) #NEWLINE#
normalize ( 'NFKD' , s ) . encode ( 'ASCII' , 'ignore' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
np . diag ( np . fliplr ( array ) ) #NEWLINE#
[ x [ 0 ] for x , y in zip ( l1 , l2 ) if x [ 0 ] == y [ 0 ] ] #NEWLINE#
ax . yaxis . set_major_formatter ( formatter ) #NEWLINE#
a = [ 'a' , 'b' , 'c' , 'd' , 'b' ] #NEWLINE#
df . ix [ 0 , 'a' ] = 3 #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#printing#SPACE#{0}#SPACE#and#SPACE#{y}' . format ( x , y = y ) ) #NEWLINE#
sys . stdout . write ( 'Your#SPACE#string#SPACE#to#SPACE#Stdout\n' ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#a#SPACE#tuple:#SPACE#%s' % ( thetuple , ) ) #NEWLINE#
wtr . writerow ( ( r [ 0 ] , r [ 1 ] , r [ 3 ] , r [ 4 ] ) ) #NEWLINE#
frame . resample ( '1H' , how = { 'radiation' : np . sum , 'tamb' : np . mean } ) #NEWLINE#
df1 = df1 . merge ( df2 [ [ 'weeknum' , 'datetime' ] ] , on = [ 'weeknum' ] ) #NEWLINE#
a , b , c = [ 1 , 2 , 3 ] #NEWLINE#
df_merged = pd . merge ( df1 , df2 , how = 'inner' , on = [ 'chr' , 'pos' ] ) #NEWLINE#
a [ [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ] #NEWLINE#
L = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
tuple ( l ) #NEWLINE#
writer . writerows ( [ val ] ) #NEWLINE#
re . sub ( '\\b(.+)\\s+\\1\\b' , '\\1' , s ) #NEWLINE#
json . dump ( data , f ) #NEWLINE#
re . sub ( '[#SPACE#-.:]' , '' , "'::2012-05-14#SPACE#18:10:20.856000::'" ) #NEWLINE#
a [ i : j ] = sorted ( a [ i : j ] ) #NEWLINE#
[ '(' , 'two' , 'plus' , 'three' , ')' , 'plus' , 'four' ] #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
len ( set ( new_words ) ) #NEWLINE#
df [ 'Result' ] = df . apply ( func , axis = 1 ) #NEWLINE#
sys . path . append ( '/home/john/app-dependancies/pycharm-debug.egg' ) #NEWLINE#
pd . set_option ( 'display.max_colwidth' , - 1 ) #NEWLINE#
ax . set_xlabel ( 'FPR#SPACE#or#SPACE#(1#SPACE#-#SPACE#specificity)' ) #NEWLINE#
int ( '0x77' , 16 ) #NEWLINE#
plt . savefig ( 'pal3.png' ) #NEWLINE#
df . groupby ( df [ 'date_time' ] . apply ( my_grouper ) ) #NEWLINE#
df = pd . concat ( [ df1 , df2 ] , ignore_index = True ) #NEWLINE#
json . loads ( '{"hello"#SPACE#:#SPACE#4}' ) #NEWLINE#
Counter ( [ 'apple' , 'red' , 'apple' , 'red' , 'red' , 'pear' ] ) #NEWLINE#
my_str . rstrip ( ';' ) . split ( ';' ) #NEWLINE#
fig . legend ( lines , labels , loc = ( 0.5 , 0 ) , ncol = 5 ) #NEWLINE#
return JsonResponse ( { 'foo' : 'bar' } ) #NEWLINE#
[ i for i in a if i not in b ] #NEWLINE#
f . close ( ) #NEWLINE#
[ row for row in listOfLists if row [ x ] . isdigit ( ) ] #NEWLINE#
bin ( int ( s . decode ( 'base64' ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' . join ( parts ) ) #NEWLINE#
datetime . utcnow ( ) . strftime ( '%Y%m%d' ) #NEWLINE#
set ( data1 ) . intersection ( data2 ) #NEWLINE#
s = [ 'michael' , 'michael' , 'alice' , 'carter' ] #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
plt . imshow ( cv2 . cvtColor ( img , cv2 . COLOR_BGR2RGB ) ) , plt . title ( 'Original' ) #NEWLINE#
a = zeros ( ( ph , pw ) , dtype = ( float , 3 ) ) #NEWLINE#
df [ df [ 'B' ] . str . contains ( '|' . join ( df [ 'A' ] ) ) ] #NEWLINE#
__init__ . py #NEWLINE#
{ i . pop ( 'name' ) : i for i in listofdict } #NEWLINE#
soup . find_all ( 'div' , class_ = 'stylelistrow' ) #NEWLINE#
soup . find_all ( 'div' , class_ = 'stylelistrowone#SPACE#stylelistrowtwo' ) #NEWLINE#
plt . savefig ( 'tooltips.pdf' ) #NEWLINE#
df . values . max ( ) #NEWLINE#
re . sub ( '\\w' , '#' , s ) #NEWLINE#
( f ( x ) for x in list ) #NEWLINE#
s = re . sub ( '[^0-9a-zA-Z]+' , '*' , s ) #NEWLINE#
df . drop ( grouped . get_group ( group_name ) . index ) #NEWLINE#
cursor . callproc ( 'getperson' , [ '1' ] ) #NEWLINE#
[ None for _ in range ( 10 ) ] #NEWLINE#
file_name . split ( '.' ) #NEWLINE#
"""€""" . decode ( 'UTF-8' ) #NEWLINE#
d3 = { k : v for k , v in list ( d3 . items ( ) ) if v } #NEWLINE#
collection = db [ 'test-collection' ] #NEWLINE#
conn . commit ( ) #NEWLINE#
your_list . sort ( key = itemgetter ( 'date' ) , reverse = True ) #NEWLINE#
""",#SPACE#""" . join ( [ 'William' , 'Shatner' , 'Speaks' , 'Like' , 'This' ] ) #NEWLINE#
ax . xaxis . set_major_formatter ( plt . NullFormatter ( ) ) #NEWLINE#
sys . stdout . write ( msg ) #NEWLINE#
opener . open ( 'http://www.example.com/' ) #NEWLINE#
plt . show ( ) #NEWLINE#
workbook . close ( ) #NEWLINE#
[ 'Na' , '1' , 'H' , '1' , 'C' , '2' , 'H' , '3' , 'O' , '2' ] #NEWLINE#
df [ [ 'col3' , 'col4' , 'col5' , 'col6' ] ] . astype ( float ) #NEWLINE#
df [ 'yes' ] = df [ 'WIN' ] . map ( lambda x : 1 if x == 'Yes' else np . nan ) #NEWLINE#
ast . literal_eval ( '["A","B"#SPACE#,"C"#SPACE#,"#SPACE#D"]' ) #NEWLINE#
np . kron ( np . eye ( n ) , a ) #NEWLINE#
df [ 0 ] . values . tolist ( ) #NEWLINE#
bytearray . fromhex ( 'de#SPACE#ad#SPACE#be#SPACE#ef#SPACE#00' ) #NEWLINE#
request . META [ 'REMOTE_ADDR' ] , request . GET [ 'X-Progress-ID' ] #NEWLINE#
"""""" . join ( a ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'color' ] = np . where ( df [ 'Set' ] == 'Z' , 'green' , 'red' ) #NEWLINE#
[ ( index , row . index ( val ) ) for index , row in enumerate ( mymatrix ) if val in row ] #NEWLINE#
farms = qs . values_list ( 'farm' , flat = True ) . distinct ( ) #NEWLINE#
open ( 'newfile.txt' , 'w' ) . writelines ( lines [ 3 : - 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( re . sub ( '[#SPACE#-~]' , '' , '£100#SPACE#is#SPACE#worth#SPACE#more#SPACE#than#SPACE#€100' ) ) #NEWLINE#
window . geometry ( '450x1000+200+0' ) #NEWLINE#
np . take ( a , idx , axis = 1 ) #NEWLINE#
return foo ( n - 1 ) + [ 1 ] #NEWLINE#
'dammit#SPACE#im#SPACE#mad' [ : : - 1 ] == 'dammit#SPACE#im#SPACE#mad' #NEWLINE#
"""{{{0}:{1}}}""" . format ( 'hello' , 'bonjour' ) #NEWLINE#
[ '13.46' , '20.62' , '26.69' , '30.17' , '32.81' ] #NEWLINE#
request . session [ 'temp_data' ] = form . cleaned_data #NEWLINE#
re . search ( 'suck' , s ) #NEWLINE#
img . save ( 'titled_plot.png' ) #NEWLINE#
zip ( * data ) #NEWLINE#
ssh . close ( ) #NEWLINE#
df1 . apply ( lambda x : x . asof ( df2 . index ) ) #NEWLINE#
df [ '*PtsPerOrder*' ] = df . groupby ( 'OrderNum' ) [ 'PtsPerLot' ] . transform ( sum ) #NEWLINE#
Player . objects . values ( 'player_type' ) . order_by ( ) . annotate ( Count ( 'player_type' ) ) #NEWLINE#
c = dict ( list ( a . items ( ) ) + list ( b . items ( ) ) ) #NEWLINE#
gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
numpy . array ( [ v for v in vals if len ( numpy . unique ( v ) ) == len ( v ) ] ) #NEWLINE#
sorted ( people , key = lambda dct : dct [ 'name' ] ) #NEWLINE#
print ( os . path . relpath ( full_path , '/book/html' ) ) #NEWLINE#
headers = { 'X-Attribute' : 'A' , 'X-Attribute' : 'B' } #NEWLINE#
[ ( 0 , 0 ) , ( 0 , 1 ) , ( 1 , 0 ) , ( 1 , 1 ) ] #NEWLINE#
re . split ( '\\s*[Ff]eat\\.' , a ) #NEWLINE#
[ key for key , values in list ( rev_multidict . items ( ) ) if len ( values ) > 1 ] #NEWLINE#
re . sub ( '(?<=.)(?=.)' , '-' , s ) #NEWLINE#
datetime . datetime . now ( ) . strftime ( '%I:%M%p#SPACE#on#SPACE#%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( re . sub ( '[^i]' , '!' , str ) ) #NEWLINE#
reversed ( x ) #NEWLINE#
v . astimezone ( pytz . timezone ( 'US/Eastern' ) ) #NEWLINE#
df [ df [ 'location' ] == 'c' ] . iloc [ 0 ] #NEWLINE#
Entry . objects . extra ( where = [ 'weekdays#SPACE#&#SPACE#%s' ] , params = [ WEEKDAYS . fri ] ) #NEWLINE#
np . savetxt ( 'test.csv' , example , delimiter = ',' ) #NEWLINE#
find = re . compile ( '^([^.]*).*' ) #NEWLINE#
[ ( 0 , 'aba' ) , ( 1 , 'xyz' ) , ( 2 , 'xgx' ) , ( 3 , 'dssd' ) , ( 4 , 'sdjh' ) ] #NEWLINE#
fig . savefig ( 'myfig.png' , dpi = 600 ) #NEWLINE#
option . setAttribute ( 'selected' , 'true' ) #NEWLINE#
sum ( clarray1 , clarray2 , clarray3 ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_CA.UTF-8' ) #NEWLINE#
[ [ 'x' ] , [ 'x' ] , [ 'x' ] , [ 'x' ] ] #NEWLINE#
globals ( ) [ 'a' ] #NEWLINE#
count = sum ( len ( v ) for v in d . values ( ) ) #NEWLINE#
print ( list ( set ( chain ( * array ) ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
s . split ( ':' , 1 ) [ 1 ] #NEWLINE#
s1 . dropna ( inplace = True ) #NEWLINE#
print ( '✓' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#posts#SPACE#WHERE#SPACE#tags#SPACE#LIKE#SPACE#?' , ( '%{}%' . format ( tag ) , ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
a , b = ( int ( x ) for x in s . split ( ) ) #NEWLINE#
listener . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
re . findall ( '"([^"]*)"' , 'SetVariables#SPACE#"a"#SPACE#"b"#SPACE#"c"#SPACE#' ) #NEWLINE#
df [ ~ df . From . str . contains ( '|' . join ( ignorethese ) ) ] #NEWLINE#
matplotlib . pyplot . scatter ( x , y ) #NEWLINE#
subprocess . call ( [ 'python' , './script.py' ] , stdout = output ) #NEWLINE#
df [ 'hb' ] - 5 #NEWLINE#
rows_list . sort ( key = operator . itemgetter ( 0 , 1 , 2 ) ) #NEWLINE#
df [ df [ 'B' ] > 10 ] #NEWLINE#
df [ 'A' ] . where ( df [ 'A' ] > df [ 'B' ] , df [ 'B' ] ) #NEWLINE#
"""{0:%Y-%m-%d#SPACE#%H:%M:%S}""" . format ( datetime . datetime . now ( ) ) #NEWLINE#
round ( 1.679 , 2 ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
my_logger . setLevel ( logging . DEBUG ) #NEWLINE#
logging . basicConfig ( format = '%(threadName)s:%(message)s' ) #NEWLINE#
min ( [ 1 , 2 , 3 , 4 , 6 , 1 , 0 ] ) #NEWLINE#
print ( 'Ä\x89' . decode ( 'utf-8' ) . upper ( ) ) #NEWLINE#
print ( '%d%d' % ( 2 , 1 ) ) #NEWLINE#
[ name for name in starring if name . strip ( ) ] #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
ws . sort ( key = lambda datum : ( datum [ 'date' ] , datum [ 'type' ] , datum [ 'location' ] ) ) #NEWLINE#
r = requests . post ( url = url , data = body , headers = { 'Connection' : 'close' } ) #NEWLINE#
group_position ( df [ 'Z' ] , df [ 'A' ] ) #NEWLINE#
{ i : np . where ( arr == i ) [ 0 ] for i in np . unique ( arr ) } #NEWLINE#
func ( * r ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ dict ( [ a , int ( x ) ] for a , x in b . items ( ) ) for b in list ] #NEWLINE#
os . path . join ( '/my/root/directory' , 'in' , 'here' ) #NEWLINE#
MEDIA_ROOT = os . path . join ( os . path . dirname ( file ) , 'media' ) . replace ( '\\\\' , '//' ) #NEWLINE#
url ( '^home/' , 'myapp.views.home' ) , #NEWLINE#
plt . show ( ) #NEWLINE#
os . system ( 'title#SPACE#Yet#SPACE#Another#SPACE#Title' ) #NEWLINE#
plt . show ( ) #NEWLINE#
super ( BackupForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( len ( set ( p [ 'Nationality' ] for p in people ) ) ) #NEWLINE#
df . drop ( [ col for col in df . columns if 'chair' in col ] , axis = 1 , inplace = True ) #NEWLINE#
df . head ( 10 ) #NEWLINE#
return len ( my_list ) #NEWLINE#
map ( lambda x : { 'content' : x [ 'content' ] . lower ( ) } , messages ) #NEWLINE#
isinstance ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
ax . plot ( x , y , 'bo' ) #NEWLINE#
A = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] #NEWLINE#
S2 [ : len ( S1 ) ] == S1 #NEWLINE#
"""-""" . join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ) #NEWLINE#
Counter ( v for sublist in list ( d . values ( ) ) for v in sublist ) #NEWLINE#
print ( re . sub ( '.+#SPACE#\\+(\\d+#SPACE#){3}' , '' , data ) ) #NEWLINE#
os . rename ( file , 'year_{}' . format ( file . split ( '_' ) [ 1 ] ) ) #NEWLINE#
result = string . replace ( '\\' , '' ) #NEWLINE#
{ { ( value | stringformat ) : 'i' } } #NEWLINE#
Hsub = H [ 1 : - 1 , 1 : - 1 ] #NEWLINE#
re . findall ( '\\[P\\]\\s?(.+?)\\s?\\[\\/P\\]' , line ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
ax . yaxis . tick_left ( ) #NEWLINE#
print ( tuple ( chain ( [ 'a' , 'b' , 'c' ] , 'd' , 'e' ) ) ) #NEWLINE#
df = pd . DataFrame ( { 'Close' : [ 2.389000000001 ] } ) #NEWLINE#
[ ( lambda x : x * x ) for _ in range ( 3 ) ] #NEWLINE#
set ( [ a , b , c , a ] ) #NEWLINE#
numpy . minimum . accumulate ( [ 5 , 4 , 6 , 10 , 3 ] ) #NEWLINE#
np . where ( x == 5 ) #NEWLINE#
1 in [ 0 , 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
"""hello\\nworld""" #NEWLINE#
map ( ord , hex_data ) #NEWLINE#
divs = soup . select ( '#fnd_content#SPACE#div.fnd_day' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
"""""" . join ( c for c in s if c . isupper ( ) ) #NEWLINE#
[ y for y in x for x in data ] #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
my_dictionary = { 'foo' : 10 , 'bar' : 20 } #NEWLINE#
df . assign ( id = df . groupby ( [ 0 ] ) . cumcount ( ) ) . set_index ( [ 'id' , 0 ] ) . unstack ( level = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ list ( zip ( a , p ) ) for p in permutations ( b ) ] #NEWLINE#
[ set ( [ 1 , 4 , 5 , 6 ] ) , set ( [ 0 , 2 , 3 , 7 ] ) ] #NEWLINE#
print ( [ y for x in l for y in ( x , x + 1 ) ] ) #NEWLINE#
[ sum ( nums [ i : i + 3 ] ) for i in range ( 0 , len ( nums ) , 3 ) ] #NEWLINE#
root . wm_title ( "Got#SPACE#Skills'#SPACE#Skill#SPACE#Tracker" ) #NEWLINE#
logging . exception ( '' ) #NEWLINE#
print ( dict ( zip ( keys , [ list ( i ) for i in zip ( * data ) ] ) ) ) #NEWLINE#
return any ( i . isdigit ( ) for i in s ) #NEWLINE#
list ( range ( 1 , 6 ) ) + list ( range ( 15 , 20 ) ) #NEWLINE#
[ ( 'string' + str ( i ) ) for i in range ( 11 ) ] #NEWLINE#
a = [ 0 ] * 10 #NEWLINE#
ax . set_ylabel ( 'Y' ) #NEWLINE#
print ( template . format ( 'CLASSID' , 'DEPT' , 'COURSE#SPACE#NUMBER' , 'AREA' , 'TITLE' ) ) #NEWLINE#
"""""" . join ( '[{}]' . format ( e ) for e in s . split ( '.' ) ) #NEWLINE#
e = xml . etree . ElementTree . parse ( 'thefile.xml' ) . getroot ( ) #NEWLINE#
s . replace ( { 'abc' : 'ABC' } ) #NEWLINE#
f . write ( '\n' . join ( newList ) ) #NEWLINE#
bucket . copy_key ( new_key , source_bucket , source_key ) #NEWLINE#
{ 'A' : 4 , 'B' : 1 , 'C' : 1 } #NEWLINE#
demjson . decode ( '{#SPACE#hotel:#SPACE#{#SPACE#id:#SPACE#"123",#SPACE#name:#SPACE#"hotel_name"}#SPACE#}' ) #NEWLINE#
logging . getLogger ( 'base.baz' ) . error ( 'Log#SPACE#from#SPACE#baz' ) #NEWLINE#
window . destroy ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( [ x [ 0 ] for x in data ] ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
ax2 . set_ylabel ( 'Cost#SPACE#($)' , color = 'g' , rotation = 270 , labelpad = 15 ) #NEWLINE#
c [ : ] = b #NEWLINE#
any_func ( 'Mona' , 45 , 'F' , ( 'H' , 'K' , 'L' ) ) #NEWLINE#
[ { 'id1' : k , 'price' : temp [ k ] } for k in temp ] #NEWLINE#
df [ df . duplicated ( [ 'ID' ] , keep = False ) ] #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
driver . get ( 'https://expired.badssl.com' ) #NEWLINE#
print ( '#SPACE#' . join ( get_words ( [ 'k' , 'c' , 't' , 'a' ] ) ) ) #NEWLINE#
config . get ( 'common' , 'folder' ) . split ( '\n' ) #NEWLINE#
Post . query . filter ( Post . title . ilike ( '%some_phrase%' ) ) #NEWLINE#
a . argmax ( axis = 0 ) #NEWLINE#
map ( '' . join , itertools . product ( 'ABC' , repeat = 3 ) ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
list = [ [ 6 , 5 , 4 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
request . headers . get ( 'User-Agent' ) #NEWLINE#
Pool ( processes = None , initializer = None , initargs = ( ) , maxtasksperchild = None ) #NEWLINE#
aggregated_df . reset_index ( ) . to_json ( orient = 'index' ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ { ( value | join ) : '#SPACE#//#SPACE#' } } #NEWLINE#
"""{0:>15.2f}""" . format ( 1464.1000000000001 ) #NEWLINE#
self . license_file . save ( new_name , ContentFile ( 'A#SPACE#string#SPACE#with#SPACE#the#SPACE#file#SPACE#content' ) ) #NEWLINE#
df [ self . target ] . str . contains ( t ) . any ( ) #NEWLINE#
mytime . strftime ( '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#%z' ) #NEWLINE#
a = b , c = 'AB' #NEWLINE#
User . objects . filter ( userprofile__level__lte = 0 ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#anooog1;' ) #NEWLINE#
print ( 'financial#SPACE#return#SPACE#of#SPACE#outcome#SPACE#1#SPACE#=#SPACE#{:.2f}' . format ( 1.23456 ) ) #NEWLINE#
ma . array ( np . resize ( b , a . shape [ 0 ] ) , mask = [ False , False , True ] ) #NEWLINE#
map ( lambda a , b : a or b , choicesTxt , [ ( 'Choice#SPACE#%i' % n ) for n in range ( 1 , 10 ) ] ) #NEWLINE#
len ( set ( a ) ) #NEWLINE#
list2 = [ line for line in file if 'CONTENT_ITEM_ID' in line ] #NEWLINE#
re . findall ( '(1(23)45)' , '12345' ) #NEWLINE#
a = list ( set ( a ) ) #NEWLINE#
list ( itertools . product ( * s ) ) #NEWLINE#
Counter ( { 'india' : 2 , 'programmer' : 2 , 'amith' : 1 , 'ashwin' : 1 } ) #NEWLINE#
boxes = [ ( 0 , gp1 ) , ( 0 , gp2 ) , ( 1 , gp3 ) , ( 1 , gp4 ) , ( 0 , gp5 ) ] #NEWLINE#
set ( d1 . items ( ) ) . issubset ( set ( d2 . items ( ) ) ) #NEWLINE#
date . strftime ( '%A#SPACE#%b#SPACE#%d,#SPACE#%Y#SPACE#at#SPACE#%H:%M#SPACE#GMT' ) #NEWLINE#
db . session . query ( Printer ) . all ( ) #NEWLINE#
set ( line . strip ( ) for line in open ( 'filename.txt' ) ) #NEWLINE#
type ( [ 1 , 2 , 3 ] ) == type ( [ 'a' , 'b' , 'c' ] ) #NEWLINE#
[ 2.860386848449707 , 2.758984088897705 , 2.768254041671753 ] #NEWLINE#
[ 9.743937969207764 , 9.884459972381592 , 9.552299976348877 ] #NEWLINE#
plt . draw ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
p . wait ( ) #NEWLINE#
cols = list ( df . columns . values ) #NEWLINE#
plt . show ( ) #NEWLINE#
raise self . __class__ . __name__ #NEWLINE#
ax . set_xscale ( 'log' ) #NEWLINE#
pylab . savefig ( 'heart.png' ) #NEWLINE#
binascii . hexlify ( '\r\x9eqÎ' ) #NEWLINE#
firstpart , secondpart = string [ : len ( string ) / 2 ] , string [ len ( string ) / 2 : ] #NEWLINE#
os . rename ( file , new_name ) #NEWLINE#
my_model . save ( ) #NEWLINE#
module1 . func1 ( 'arg1' ) #NEWLINE#
match . group ( 1 ) #NEWLINE#
( '^password_reset/$' , 'your_app.views.password_reset' ) , #NEWLINE#
entry [ 'image' ] = entry [ 'image' ] . encode ( 'base64' ) #NEWLINE#
regex . findall ( '{((?>[^{}]+|(?R))*)}' , '{1,#SPACE#{2,#SPACE#3}}#SPACE#{4,#SPACE#5}' ) #NEWLINE#
MyModel . objects . order_by ( '?' ) [ : 10 ] #NEWLINE#
canvas . create_text ( x , y , font = 'Purisa' , size = mdfont , text = k ) #NEWLINE#
img . save ( ) #NEWLINE#
print ( '\t' . join ( map ( str , [ 1 , 2 , 3 , 4 , 5 ] ) ) ) #NEWLINE#
"""[\\u00d8-\\u00f6]""" #NEWLINE#
df . loc [ ( slice ( None ) , '2014-05' ) , : ] #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
lst . sort ( ) #NEWLINE#
[ x [ 0 ] for x in listD [ 2 ] ] #NEWLINE#
df [ 'Date' ] = pd . to_datetime ( df [ 'Date' ] ) #NEWLINE#
value . isdigit ( ) #NEWLINE#
plt . savefig ( 'graph.pdf' ) #NEWLINE#
[ tuple ( l ) for l in nested_lst ] #NEWLINE#
print ( struct . unpack ( 'i' , fin . read ( 4 ) ) ) #NEWLINE#
myArray = [ { 'pi' : 3.1415925 , 'r' : 2 } , { 'e' : 2.71828 , 'theta' : 0.5 } ] #NEWLINE#
some_unicode_string . encode ( 'utf-8' ) #NEWLINE#
wait . until ( EC . visibility_of_element_located ( ( By . CLASS_NAME , 'searchbox' ) ) ) #NEWLINE#
map ( '' . join , a ) #NEWLINE#
print ( 'Name:#SPACE#%(person.name)s' % { 'person.name' : 'Joe' } ) #NEWLINE#
input ( 'Press#SPACE#enter#SPACE#to#SPACE#exit#SPACE#;)' ) #NEWLINE#
my_array [ : , ( [ 0 , 1 ] ) ] = my_array [ : , ( [ 1 , 0 ] ) ] #NEWLINE#
df_agg = df . groupby ( [ 'job' , 'source' ] ) . agg ( { 'count' : sum } ) #NEWLINE#
z = ( set ( ( 'a' , 'b' , 'c' ) ) - set ( ( x , y ) ) ) . pop ( ) #NEWLINE#
[ 'abcd' , 'a,bcd' , 'a,b,cd' , 'a,b,c,d' , 'a,bc,d' , 'ab,cd' , 'ab,c,d' , 'abc,d' ] #NEWLINE#
sck . setproxy ( socks . PROXY_TYPE_SOCKS5 , '127.0.0.1' , 9050 ) #NEWLINE#
s . reset_index ( ) . drop ( 1 , axis = 1 ) #NEWLINE#
new_array = [ x for x in main_array if x not in second_array ] #NEWLINE#
x = all ( ( a , b , c , d , e , f ) ) #NEWLINE#
fig . savefig ( '~/Desktop/myplot.pdf' ) #NEWLINE#
return render ( request , 'main.html' , { 'context' : ord_dict } ) #NEWLINE#
fig . savefig ( 'so_example.png' ) #NEWLINE#
gtk . main ( ) #NEWLINE#
python - - version #NEWLINE#
my_module = importlib . import_module ( 'os.path' ) #NEWLINE#
MyObject . all ( ) . order ( '-time' ) [ 0 ] #NEWLINE#
print ( '[%i,#SPACE#%i,#SPACE#%i]' % tuple ( numberList ) ) #NEWLINE#
cursor . commit ( ) #NEWLINE#
findtoure = commentary . find ( text = re . compile ( 'Yaya#SPACE#Toure' ) ) #NEWLINE#
random . seed ( ) #NEWLINE#
[ ( a + b ) for a , b in zip ( s [ : : 2 ] , s [ 1 : : 2 ] ) ] #NEWLINE#
list ( find_gaps ( [ '0000001' , '0000003' , '0000006' ] ) ) #NEWLINE#
ttk . Style ( ) . configure ( '.' , relief = 'flat' , borderwidth = 0 ) #NEWLINE#
return HttpResponse ( '' ) #NEWLINE#
print ( sorted ( l , key = my_key ) ) #NEWLINE#
plt . savefig ( 'D:\\mpl_logo_with_title.png' , dpi = dpi ) #NEWLINE#
test [ numpy . apply_along_axis ( lambda x : x [ 1 ] in wanted , 1 , test ) ] #NEWLINE#
re . sub ( '-----.*?-----' , '' , data , 1 ) #NEWLINE#
re . findall ( '\\b\\d{5}\\b' , 'Helpdesk-Agenten#SPACE#(m/w)#SPACE#Kennziffer:#SPACE#12966' ) #NEWLINE#
"""{}#SPACE#and#SPACE#{}""" . format ( ',#SPACE#' . join ( listy [ : - 1 ] ) , listy [ - 1 ] ) #NEWLINE#
numpy . apply_along_axis ( sum , 1 , X ) #NEWLINE#
max_index = my_list . index ( max_value ) #NEWLINE#
re . findall ( 'car|rat|[a-z]' , s ) #NEWLINE#
Popen ( [ 'nohup' , 'script.sh' ] , stdout = devnull , stderr = devnull ) #NEWLINE#
np . einsum ( 'ijk,ij->ik' , ind , dist ) #NEWLINE#
v . dot ( np . rollaxis ( a , 2 , 1 ) ) #NEWLINE#
print ( sys . path ) #NEWLINE#
[ x for x in my_str . split ( ';' ) if x ] #NEWLINE#
df . set_index ( 'a' ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
x = [ i for i in x if len ( i ) == 2 ] #NEWLINE#
[ word for word in words if any ( not char . isdigit ( ) for char in word ) ] #NEWLINE#
os . symlink ( '/usr/bin/python' , '/tmp/subdir/python' ) #NEWLINE#
plt . show ( ) #NEWLINE#
key , value = line . rstrip ( '\n' ) . split ( ',' ) #NEWLINE#
print ( ',' . join ( str ( x ) for x in a ) ) #NEWLINE#
df . groupby ( 'obj_id' ) . agg ( lambda df : df . values [ df [ 'data_date' ] . values . argmax ( ) ] ) #NEWLINE#
re . sub ( '\\bugh\\b' , 'disappointed' , 'laughing#SPACE#ugh' ) #NEWLINE#
[ ( x + y ) for x , y in zip ( L1 , L2 ) ] #NEWLINE#
out = p . communicate ( ) #NEWLINE#
return render ( request , 'contact.html' , { form : form } ) #NEWLINE#
[ ( e in lestring ) for e in lelist if e in lestring ] #NEWLINE#
plt . figure ( figsize = ( 6 , 6 ) ) #NEWLINE#
Entry . objects . all ( ) . update ( value = not F ( 'value' ) ) #NEWLINE#
request . cookies . get ( 'my_cookie' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
print ( re . sub ( '(\\S)\\#SPACE#{2,}(\\S)(\\n?)' , '\\1|\\2\\3' , s ) ) #NEWLINE#
MyModel . objects . using ( 'my_non_default_database' ) . get_or_create ( name = 'Bob' ) #NEWLINE#
datetime . datetime . fromtimestamp ( 1284286794 ) #NEWLINE#
k , v = next ( iter ( list ( d . items ( ) ) ) ) #NEWLINE#
plt . legend ( numpoints = 1 ) #NEWLINE#
writer . writerows ( row . split ( ) for row in infile if row . strip ( ) ) #NEWLINE#
nested_list = [ [ s . upper ( ) for s in xs ] for xs in nested_list ] #NEWLINE#
o . save ( ) #NEWLINE#
df . drop_duplicates ( subset = [ 'Col2' , 'Col3' ] ) #NEWLINE#
key = lambda d : d [ 'rank' ] if d [ 'rank' ] != 0 else float ( 'inf' ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 1 , 3 ] , [ 4 , 6 ] ] , columns = [ 'A' , 'B' ] ) #NEWLINE#
print ( { word : word_list . count ( word ) for word in word_list } ) #NEWLINE#
cv2 . imshow ( 'Crop' , desired_result ) #NEWLINE#
pdf . close ( ) #NEWLINE#
print ( Event . objects . filter ( date__lt = datetime . datetime . now ( ) ) . delete ( ) ) #NEWLINE#
df . drop_duplicates ( cols = 'uniqueid' , inplace = True ) #NEWLINE#
map ( lambda d : d . pop ( 'k1' ) , list_of_d ) #NEWLINE#
soup . select ( 'div.container#SPACE#a[href]' ) #NEWLINE#
help ( function ) #NEWLINE#
[ elem for x in list for elem in ( x , 0 ) ] [ : - 1 ] #NEWLINE#
list ( itertools . product ( * list ( mydict . values ( ) ) ) ) #NEWLINE#
[ int ( n ) for n in bin ( 21 ) [ 2 : ] . zfill ( 8 ) ] #NEWLINE#
matplotlib . use ( 'PDF' ) #NEWLINE#
return redirect ( url_for ( 'dashboard' , username = 'foo' ) ) #NEWLINE#
list ( filter ( functools . partial ( get_long , treshold = 13 ) , DNA_list ) ) #NEWLINE#
{ key : list ( set ( a [ key ] ) . difference ( b . get ( key , [ ] ) ) ) for key in a } #NEWLINE#
"""#SPACE#""" . join ( [ str ( x ) for x in np . hstack ( ( a . T . real , a . T . imag ) ) . flat ] ) #NEWLINE#
print ( 'The#SPACE#total#SPACE#is#SPACE#' + str ( total ) + '#SPACE#and#SPACE#the#SPACE#average#SPACE#is#SPACE#' + str ( average ) ) #NEWLINE#
dict ( ( k , v ) for k , v in somedict . items ( ) if not k . startswith ( 'someprefix' ) ) #NEWLINE#
urllib . request . urlretrieve ( 'http://python.org/images/python-logo.gif' , #NEWLINE# '/tmp/foo.gif' ) #NEWLINE#
[ 'Smith' , 'Smith' , 'Roger' , 'Roger-Smith' ] #NEWLINE#
s . decode ( 'utf-8' ) . find ( 'ā' ) #NEWLINE#
getattr ( sys . modules [ __name__ ] , 'A' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
pd . to_datetime ( pd . Series ( date_stngs ) ) #NEWLINE#
[ 'm' , 'o' , 'n' , 'k' , 'e' , 'y' ] #NEWLINE#
np . zeros ( ( 4 , 3 , 2 ) ) #NEWLINE#
logging . _defaultFormatter = logging . Formatter ( '%(message)s' ) #NEWLINE#
print ( '[%s]' % ',#SPACE#' . join ( map ( str , mylist ) ) ) #NEWLINE#
list ( next ( it ) for _ in range ( n ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '{0}\n{1}' . format ( item [ 0 ] , '---' . join ( item [ 1 ] ) ) ) #NEWLINE#
ndim_grid ( [ 2 , - 2 , 4 ] , [ 5 , 3 , 6 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( x + y ) for x , y in zip ( 'ab' , '12345' ) ] #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] ] #NEWLINE#
result . extend ( item ) #NEWLINE#
br . form . set_value ( [ '1' ] , name = 'prodclass' ) #NEWLINE#
ii = np . where ( a == 4 ) #NEWLINE#
np . einsum ( 'ijk,kj->i' , A , B ) #NEWLINE#
np . array ( arr [ : , ( 1 ) ] , dtype = [ ( '' , np . float ) ] * 3 ) . view ( np . float ) . reshape ( - 1 , 3 ) #NEWLINE#
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) / timedelta ( seconds = 1 ) #NEWLINE#
help ( 'modules' ) #NEWLINE#
{ 'p' : [ 1 , 3 , 2 ] , 'q' : [ 4 , 3 , 2 ] , 'r' : [ 4 , 0 , 9 ] } #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ [ 1 , 5 ] , [ 2 , 6 ] ] , [ [ 3 , 7 ] , [ 4 , 8 ] ] ] ) #NEWLINE#
np . minimum . reduce ( [ np . arange ( 3 ) , np . arange ( 2 , - 1 , - 1 ) , np . ones ( ( 3 , ) ) ] ) #NEWLINE#
srt_dict [ 'searchResult' ] . sort ( key = lambda d : d [ 'ranking' ] , reverse = True ) #NEWLINE#
arr = [ [ None for x in range ( 6 ) ] for y in range ( 6 ) ] #NEWLINE#
datetime . datetime . <STR0> ( ) #NEWLINE#
array [ itemindex [ 0 ] [ 1 ] ] [ itemindex [ 1 ] [ 1 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
Person . objects . filter ( ** kwargs ) #NEWLINE#
ascii_garbage = text . encode ( 'ascii' , 'replace' ) #NEWLINE#
line = f . readline ( ) #NEWLINE#
pattern = '6#SPACE#of\\s+(.+?)\\s+fans' #NEWLINE#
pattern = '6#SPACE#of\\s+(\\S+)\\s+fans' #NEWLINE#
pattern = '6#SPACE#of\\D*?(\\d+)\\D*?fans' #NEWLINE#
[ '8:00' , '12:30' , '1:45' , '6:15' ] #NEWLINE#
len ( set ( 'aaaa' ) ) == 1 #NEWLINE#
myfile . write ( c_uncompData_p [ : c_uncompSize ] ) #NEWLINE#
df [ df . index . map ( lambda x : x [ 0 ] in stk_list ) ] #NEWLINE#
json . dumps ( { 'compressedData' : base64 . b64encode ( zString ) } ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( 1 , 3 ) , ( 3 , 4 ) , ( 4 , None ) ] #NEWLINE#
df . groupby ( [ 'A' , 'B' ] ) . max ( ) [ 'C' ] . reset_index ( ) #NEWLINE#
[ ( 2 , 1 , 1 ) , ( 1 , 2 , 1 ) , ( 1 , 1 , 2 ) ] #NEWLINE#
writer . writerow ( [ 'mary' , '3#SPACE#main#SPACE#st' , '704' , 'yada' ] ) #NEWLINE#
pd . to_numeric ( df . stack ( ) , 'coerce' ) . unstack ( ) #NEWLINE#
l [ 'type' ] [ 0 ] [ 'references' ] #NEWLINE#
url ( '^path/to/url' , TemplateView . as_view ( template_name = 'index.html' ) ) , #NEWLINE#
isinstance ( s , str ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'df' , where = [ pd . Term ( 'A' , '=' , [ 'foo' , 'bar' ] ) , 'B=1' ] ) #NEWLINE#
set ( L [ : 4 ] ) #NEWLINE#
parser . add_argument ( '--secret' , help = argparse . SUPPRESS ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( chain . from_iterable ( zip_longest ( a , b , fillvalue = '' ) ) ) #NEWLINE#
itertools . permutations ( my_list , 3 ) #NEWLINE#
sum ( bytearray ( 'abcdefgh' ) ) #NEWLINE#
f . close ( ) #NEWLINE#
ind [ np . argsort ( a [ ind ] ) ] #NEWLINE#
{ { '%d' | format ( 42 ) } } #NEWLINE#
players = Player . objects . filter ( batting__gt = F ( 'bowling' ) ) #NEWLINE#
re . sub ( '\\bdelhi\\b(?=(?:"[^"]*"|[^"])*$)' , '' , a ) . strip ( ) #NEWLINE#
driver . get ( 'https://www.youtube.com/watch?v=hdw1uKiTI5c' ) #NEWLINE#
unicodedata . normalize ( 'NFKD' , title ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
bin ( int ( 'abc123efff' , 16 ) ) [ 2 : ] #NEWLINE#
chr ( ord ( 'x' ) ) == 'x' #NEWLINE#
df1 . reset_index ( ) #NEWLINE#
os . path . dirname ( sys . executable ) #NEWLINE#
plt . draw ( ) #NEWLINE#
os . system ( 'ping#SPACE#-c#SPACE#5#SPACE#www.examplesite.com' ) #NEWLINE#
transmission_array . extend ( zero_array ) #NEWLINE#
f . write ( 'whatever' ) #NEWLINE#
all ( x == mylist [ 0 ] for x in mylist ) #NEWLINE#
hello = [ x . strip ( '#SPACE#' ) for x in hello ] #NEWLINE#
plt . show ( ) #NEWLINE#
a [ : ] = [ x for x in a if x <= 2 ] #NEWLINE#
[ 'great' , 'satisfying' , 'exceptional' , 'positive' , 'acceptable' ] #NEWLINE#
a = pd . read_table ( 'file' , header = None , sep = '#SPACE#' , usecols = list ( range ( 8 ) ) ) #NEWLINE#
new_tuple = tuple ( '(1,2,3,4,5)' [ 1 : - 1 ] . split ( ',' ) ) #NEWLINE#
json . dumps ( list ) #NEWLINE#
my_import ( 'foo.bar.baz.qux' ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . path . join ( os . path . expanduser ( '~' ) , 'Documents' , completeName ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( a . replace ( '>' , '>#SPACE#\n' ) ) #NEWLINE#
r . sadd ( 'a' , 1 , 2 , 3 ) #NEWLINE#
Entry . objects . values_list ( 'id' , 'headline' ) #NEWLINE#
print ( result [ 0 ] [ 'status' ] ) #NEWLINE#
[ 'long' , 'string' , 'text' ] #NEWLINE#
np . argsort ( y , order = ( 'x' , 'y' ) ) #NEWLINE#
myList = sorted ( set ( myList ) ) #NEWLINE#
a [ 0 : 1 ] [ 0 ] [ 0 ] = 5 #NEWLINE#
df . A . apply ( lambda x : pd . Series ( 1 , x ) ) . fillna ( 0 ) . astype ( int ) #NEWLINE#
zip ( a , b , c ) #NEWLINE#
print ( sorted ( l , key = lambda x : x ) ) #NEWLINE#
[ array ( [ [ 1 , 2 , 3 ] , [ 2 , 4 , 7 ] ] ) , array ( [ [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) ] #NEWLINE#
plt . scatter ( list ( range ( len ( y ) ) ) , y , c = z , cmap = cm . hot ) #NEWLINE#
re . findall ( '[bcdfghjklmnpqrstvwxyz]+' , 'concertation' , re . IGNORECASE ) #NEWLINE#
b . get ( 'x' , { } ) . get ( 'y' , { } ) . get ( 'z' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
df . loc [ ii , cols ] #NEWLINE#
'MyString' == 'MyString' #NEWLINE#
getattr ( test , method ) ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . exp ( - x ) #NEWLINE#
driver . get ( 'https://cacert.org/' ) #NEWLINE#
pandas . concat ( [ df [ 'a' ] , df [ 'b' ] ] ) . unique ( ) #NEWLINE#
[ x for x in COUNTRIES if x [ 0 ] == 'AS' ] [ 0 ] [ 1 ] #NEWLINE#
print ( json . dumps ( foo ) ) #NEWLINE#
{ k : ( v ( ) if callable ( v ) else v ) for k , v in a . items ( ) } #NEWLINE#
grouped = df . groupby ( df [ 'zip' ] . isin ( keep ) ) #NEWLINE#
df2 . groupby ( 'Name' ) . apply ( tgrp ) . unstack ( ) #NEWLINE#
np . in1d ( a , [ 2 , 3 ] ) . reshape ( a . shape ) #NEWLINE#
subprocess . call ( [ '/bin/bash' , '-c' , '/bin/echo#SPACE#$HOME' ] ) #NEWLINE#
df . drop ( x [ x ] . index ) #NEWLINE#
int ( '' . join ( your_list ) , 16 ) #NEWLINE#
df [ 'Admission_Source_Code' ] = [ str ( i ) for i in df [ 'Admission_Source_Code' ] ] #NEWLINE#
hehe ( ) #NEWLINE#
data . to_csv ( 'path_with_file_name' ) #NEWLINE#
Book . objects . create ( ** d ) #NEWLINE#
df . query ( 'field#SPACE#not#SPACE#in#SPACE#@ban_field' ) #NEWLINE#
open ( 'test_newlines.txt' ) . read ( ) . split ( ) #NEWLINE#
df = df [ ~ df . datecolumn . isin ( a ) ] #NEWLINE#
reader = csv . reader ( f , delimiter = '#SPACE#' , skipinitialspace = True ) #NEWLINE#
a = list ( 'hello' ) #NEWLINE#
print ( '\n' . join ( d [ 'Name' ] for d in thisismylist ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
imshow ( array , interpolation = 'nearest' ) #NEWLINE#
dist = math . hypot ( x2 - x1 , y2 - y1 ) #NEWLINE#
1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 #NEWLINE#
sorted ( [ - 5 , 2 , 1 , - 8 ] , key = abs ) #NEWLINE#
driver . get ( 'http://cn.bing.com' ) #NEWLINE#
s1 = [ '11' , '2' , 'A' , 'B' , 'B1' , 'B11' , 'B2' , 'B21' , 'C' , 'C11' , 'C2' ] #NEWLINE#
df . pivot_table ( index = 'A' , columns = 'B' , values = 'C' , fill_value = 0 ) #NEWLINE#
len ( s . encode ( 'utf-8' ) ) #NEWLINE#
pd . merge ( df1 , df2 , left_index = True , right_index = True , how = 'outer' ) . mean ( axis = 1 ) #NEWLINE#
my_function = getattr ( __import__ ( 'my_apps.views' ) , 'my_function' ) #NEWLINE#
out = np . concatenate ( input_list ) . ravel ( ) . tolist ( ) #NEWLINE#
"""Mary#SPACE#had#SPACE#a#SPACE#little#SPACE#lamb""" . count ( 'a' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . path . append ( 'F:\\projects\\python' ) #NEWLINE#
[ ( i , j ) for i , j in zip ( a , x ) if i >= 4 ] #NEWLINE#
parser . add_argument ( '-a' , action = 'store_true' ) #NEWLINE#
self . depositLabel [ 'text' ] = 'change#SPACE#the#SPACE#value' #NEWLINE#
f . write ( str ( yEst ) + '\n' ) #NEWLINE#
ax1 . set_xticks ( [ int ( j ) for j in range ( - 4 , 5 ) ] ) #NEWLINE#
datetime . datetime ( 2012 , 5 , 22 , 9 , 3 , 41 ) #NEWLINE#
datetime . datetime ( d . year , d . month , d . day ) #NEWLINE#
s = s [ : pos ] + s [ pos + 1 : ] #NEWLINE#
re . sub ( '\\bin\\b' , '' , 'office#SPACE#administration#SPACE#in#SPACE#delhi' ) #NEWLINE#
ts . resample ( '30Min' , how = mhl ) #NEWLINE#
print ( ( '%.0f°%.0f\'%.0f"' % ( deg , fabs ( min ) , fabs ( sec ) ) ) . encode ( 'utf-8' ) ) #NEWLINE#
df = pd . DataFrame ( { 'col1' : x , 'col2' : y , 'col3' : z } ) #NEWLINE#
subprocess . call ( 'taskkill#SPACE#/IM#SPACE#exename.exe' ) #NEWLINE#
sorted ( d , key = d . get ) #NEWLINE#
re . sub ( '\\W' , '' , 'text#SPACE#1,#SPACE#2,#SPACE#3...' ) #NEWLINE#
np . cumsum ( a , axis = 1 , out = a ) #NEWLINE#
plot . savefig ( 'hanning%(num)s.pdf' % locals ( ) ) #NEWLINE#
raise TypeError ( 'sth' ) #NEWLINE#
re . findall ( '(\\w+[.]\\w+)@' , s ) #NEWLINE#
sorted ( a , key = len ) #NEWLINE#
pd . concat ( ( df1 , df2 ) , axis = 1 ) #NEWLINE#
len ( d [ obj ] ) == 2 and isinstance ( d [ obj ] [ 0 ] , int ) and isinstance ( d [ obj ] [ 1 ] , int ) #NEWLINE#
s = 'this#SPACE#is#SPACE#a#SPACE#verylong#SPACE#string#SPACE#toofor#SPACE#sure#SPACE#...' #NEWLINE#
subprocess . check_output ( [ 'newscript.sh' ] ) #NEWLINE#
pd . DataFrame ( d , columns = ( 'Player' , 'Team' , 'Passer#SPACE#Rating' ) ) #NEWLINE#
mrsync . sync ( '/tmp/targets.list' , '/tmp/sourcedata' , '/tmp/targetdata' ) #NEWLINE#
"""""" . join ( sorted ( a ) ) #NEWLINE#
inspect . getfile ( C . __class__ ) #NEWLINE#
"""{0:#b}""" . format ( my_int ) #NEWLINE#
[ ( 'all' , 3 ) , ( 'yeah' , 2 ) , ( 'bye' , 1 ) , ( 'awesome' , 1 ) ] #NEWLINE#
sorted ( x ) == sorted ( y ) #NEWLINE#
"""([bcdfghjklmnpqrstvwxz][aeiou])+""" #NEWLINE#
"""([aeiou]+[bcdfghjklmnpqrstvwxz]+)+""" #NEWLINE#
'\\\\?\\' + os . path . abspath ( file_name ) #NEWLINE#
from_date = from_date . replace ( hour = 0 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
[ [ 'bla' , '-0.2' , 'blub' ] , [ 'bla' , '0.1' , 'blub' ] , [ 'blaa' , '0.3' , 'bli' ] ] #NEWLINE#
perm = sorted ( range ( len ( foo ) ) , key = lambda x : foo [ x ] ) #NEWLINE#
df = df . rename ( columns = { 'oldName1' : 'newName1' , 'oldName2' : 'newName2' } ) #NEWLINE#
print ( os . path . dirname ( os . path . abspath ( sys . argv [ 0 ] ) ) ) #NEWLINE#
fig . savefig ( 'force.png' ) #NEWLINE#
pd . concat ( series_list , axis = 1 ) #NEWLINE#
sum ( [ x for x in list if isinstance ( x , ( int , float ) ) ] ) #NEWLINE#
numpy . where ( a <= 2 , a , 2 ) #NEWLINE#
host = 'LDAP://10.172.0.79/dc=directory,dc=example,dc=com' #NEWLINE#
[ 'A' , 'B' , 'C' , 'B' , 'B' , 'D' , 'E' ] #NEWLINE#
pd . DataFrame ( s ) . T #NEWLINE#
ast . literal_eval ( '[[0,0,0],#SPACE#[0,0,1],#SPACE#[1,1,0]]' ) #NEWLINE#
logging . warn ( 'a#SPACE#warning' ) #NEWLINE#
ax . axhline ( 1 , color = 'black' , lw = 2 ) #NEWLINE#
font = ImageFont . truetype ( 'sans-serif.ttf' , 16 ) #NEWLINE#
df . to_csv ( 'test.csv' ) #NEWLINE#
re . sub ( '^[^a]*' , '' ) #NEWLINE#
[ [ 4 ] , [ 5 , 5 ] , [ 6 , 6 , 6 ] ] #NEWLINE#
print ( '#SPACE#' . join ( get_words ( [ 'ப' , 'ம்' , 'ட' ] ) ) ) #NEWLINE#
i = np . indices ( B . shape ) [ 0 ] #NEWLINE#
a [ - 2 : ] + a [ : - 2 ] #NEWLINE#
pd . Series ( [ 'M' , '0' , 'M' , '0' ] ) . duplicated ( ) #NEWLINE#
re . findall ( pat , s ) #NEWLINE#
res = [ ( x , my_dictionary [ x ] ) for x in my_list if x in my_dictionary ] #NEWLINE#
ast . literal_eval ( ata . split ( '=' ) [ 1 ] . strip ( ) ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 , 3 , 3 ] , 'b' : [ 1 , 2 , None , 1 , None ] } ) #NEWLINE#
int ( '0x000000001' , 16 ) #NEWLINE#
d = dict ( [ ( y , x ) for x , y in enumerate ( t ) ] ) #NEWLINE#
float ( str ( a [ 0 ] ) + '.' + str ( a [ 1 ] ) ) #NEWLINE#
"""""" . join ( [ str ( w ) for w in random . sample ( item , len ( item ) ) ] ) #NEWLINE#
x = Dish . query . filter ( Dish . restaurants . any ( name = name ) ) . all ( ) #NEWLINE#
conn = pymssql . connect ( server = 'EDDESKTOP' , database = 'baseballData' ) #NEWLINE#
driver . implicitly_wait ( 10 ) #NEWLINE#
dict ( ( d1 [ key ] , value ) for key , value in list ( d . items ( ) ) ) #NEWLINE#
df . select ( '*' , current_population ) . show ( ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
return int ( input ( 'prompt>#SPACE#' ) ) #NEWLINE#
np . tile ( b , ( 2 , 2 , 2 ) ) #NEWLINE#
sudo ( 'rm#SPACE#tmp' ) #NEWLINE#
result = [ d [ key ] for key in d if key . startswith ( query ) ] #NEWLINE#
print ( remove_prefix ( 'template.extensions' , 'template.' ) ) #NEWLINE#
zip ( * it ) #NEWLINE#
conn = boto . connect_s3 ( anon = True ) #NEWLINE#
y = numpy . unique ( x ) #NEWLINE#
set ( x [ 0 ] for x in zip ( a , a [ 1 : ] ) if x [ 0 ] == x [ 1 ] ) #NEWLINE#
df . isin ( { 'A' : [ 1 , 3 ] , 'B' : [ 4 , 7 , 12 ] } ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
[ td . text for td in tree . xpath ( '//td' ) ] #NEWLINE#
df . asfreq ( 'B' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
bigdata = pd . concat ( [ data1 , data2 ] , ignore_index = True ) #NEWLINE#
[ ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 2 , 6 ) , ( 3 , 4 ) , ( 3 , 5 ) , ( 3 , 6 ) ] #NEWLINE#
posting_date = models . DateTimeField ( auto_now_add = True ) #NEWLINE#
fig . savefig ( 'full_figure.png' ) #NEWLINE#
d = dict ( ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
print ( os . getenv ( 'APPDATA' ) ) #NEWLINE#
window . attributes ( '-topmost' , 0 ) #NEWLINE#
app . run ( ) #NEWLINE#
np . kron ( a , np . ones ( ( B , B ) , a . dtype ) ) #NEWLINE#
a = zip ( list ( range ( 10 ) ) , list ( range ( 10 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( 'url((?:#[0-9]+)?)' , 'new_url\\1' , test2 ) #NEWLINE#
f . write ( bytes ( ( i , ) ) ) #NEWLINE#
[ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] ] #NEWLINE#
df . set_index ( 'a' ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( br . open ( 'https://github.com/settings/emails' ) . read ( ) ) #NEWLINE#
random . choice ( mylist ) #NEWLINE#
a [ i : j ] . sort ( ) #NEWLINE#
newest = max ( glob . iglob ( 'upload/*.log' ) , key = os . path . getctime ) #NEWLINE#
some_action . triggered . connect ( functools . partial ( some_callback , param1 , param2 ) ) #NEWLINE#
json . dump ( [ ] , f ) #NEWLINE#
self . assertTrue ( issubclass ( QuizForm , forms . Form ) ) #NEWLINE#
session . query ( Shots ) . filter_by ( event_id = event_id ) . order_by ( asc ( Shots . user_id ) ) #NEWLINE#
df . set_index ( 'prod_code' , inplace = True ) #NEWLINE#
pd . DataFrame ( list ( map ( list , zip ( lst1 , lst2 , lst3 ) ) ) ) #NEWLINE#
f . write ( hex ( i ) ) #NEWLINE#
sum ( set ( list ( range ( 0 , 1000 , 3 ) ) + list ( range ( 0 , 1000 , 5 ) ) ) ) #NEWLINE#
decimal . Decimal ( str ( random . random ( ) ) ) #NEWLINE#
next ( g ) #NEWLINE#
print ( random . choice ( list ( open ( 'file.txt' ) ) ) ) #NEWLINE#
OrderedDict ( sorted ( list ( d . items ( ) ) , key = d . get ) ) #NEWLINE#
return pandas . Series ( { 'IV' : iv , 'Vega' : vega } ) #NEWLINE#
ax . set_xticklabels ( [ 'A' , 'B' , 'C' ] ) #NEWLINE#
[ 'Camel' , 'Case' , 'XYZ' ] #NEWLINE#
[ [ '00f7e0b88577106a' , '2' , 'hdisk37' ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
df1 . merge ( df2 , how = 'left' , left_on = 'Column1' , right_on = 'ColumnA' ) #NEWLINE#
locals ( ) [ 'myfunction' ] ( ) #NEWLINE#
p = [ tuple ( '{0:.2f}' . format ( c ) for c in b ) for b in a ] #NEWLINE#
[ { 'play' : 3.0 , 'uid' : 'mno' , 'id' : 5 } , { 'play' : 1.0 , 'uid' : 'pqr' , 'id' : 6 } ] #NEWLINE#
sorted ( a , key = lambda x : b . index ( x [ 0 ] ) ) #NEWLINE#
function_that_needs_strings ( * my_list ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'keys' : [ 'ctrl+shift+c' ] , 'command' : 'exec' , 'args' : { 'kill' : true } } #NEWLINE#
plt . show ( ) #NEWLINE#
db . commit ( ) #NEWLINE#
raise Exception ( 'My#SPACE#error!' ) #NEWLINE#
m = re . findall ( '<!--(.*?)-->' , string , re . DOTALL ) #NEWLINE#
OrderedDict ( [ ( 'last_modified' , 'undefined' ) , ( 'id' , '0' ) ] ) #NEWLINE#
list = [ 'abc' , 'def' , 'ghi' ] #NEWLINE#
plt . xlim ( [ 0 , bins . size ] ) #NEWLINE#
A . sum ( axis = 0 , skipna = True ) #NEWLINE#
browser . get ( 'http://stackoverflow.com/' ) #NEWLINE#
datetime . datetime . strptime ( s , '%Y-%m-%d' ) . date ( ) #NEWLINE#
df . groupby ( df . index ) . mean ( ) #NEWLINE#
numpy . argwhere ( numpy . in1d ( a , b ) ) #NEWLINE#
"""{0:*^80}""" . format ( 'MENU' ) #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . datetime . utcfromtimestamp ( 1284286794 ) #NEWLINE#
rows = { ( 0 ) : [ 0 , 2 , 5 ] , ( 1 ) : [ 1 ] , ( 2 ) : [ 7 ] , ( 3 ) : [ 4 ] , ( 6 ) : [ 2 , 5 ] } #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
a . nonzero ( ) #NEWLINE#
print ( [ i for i in re . split ( '(\\d+|\\W+)' , 'x+13.5*10x-4e1' ) if i ] ) #NEWLINE#
"""abcde""" . decode ( 'utf-8' ) #NEWLINE#
a [ 'abc' ] = [ 1 , 2 , 'bob' ] #NEWLINE#
binrep = '' . join ( bytetable [ x ] for x in open ( 'file' , 'rb' ) . read ( ) ) #NEWLINE#
fline = open ( 'myfile' ) . readline ( ) . rstrip ( ) #NEWLINE#
print ( str ( intp ) + '.' + str ( fracp ) . zfill ( prec ) ) #NEWLINE#
[ 1 , 2 , 3 ] + np . array ( [ 3 ] ) #NEWLINE#
"""a#SPACE#string#SPACE#{0:>{1}}""" . format ( foo , width ) #NEWLINE#
df [ 'StartDate' ] [ 2 ] #NEWLINE#
return bool ( value ) #NEWLINE#
print ( 'there#SPACE#are#SPACE#{0:<10}#SPACE#students#SPACE#and#SPACE#{1:<10}#SPACE#teachers' . format ( scnt , tcnt ) ) #NEWLINE#
df . stack ( 0 ) . query ( 'Panning#SPACE#==#SPACE#"Panning"' ) . stack ( ) . unstack ( [ - 2 , - 1 ] ) #NEWLINE#
print ( a . split ( '\\' ) ) #NEWLINE#
os . path . join ( dir_name , '.' . join ( ( base_filename , filename_suffix ) ) ) #NEWLINE#
print ( '\\u84b8\\u6c7d\\u5730' . decode ( 'unicode-escape' ) ) #NEWLINE#
list ( [ x for x in list ( all_dicts . values ( ) ) if x [ 'city' ] == 'bar' ] ) #NEWLINE#
next ( re . finditer ( '\\d+$' , s ) ) . group ( 0 ) #NEWLINE#
result = [ ( a . split ( '-' , 1 ) [ 0 ] , b ) for a , b in sorted_x ] #NEWLINE#
print ( os . path . exists ( '/home/el/myfile.txt' ) ) #NEWLINE#
max ( d , key = lambda x : d [ x ] [ 'c' ] + d [ x ] [ 'h' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
map ( '' . join , itertools . product ( string . ascii_lowercase , repeat = 3 ) ) #NEWLINE#
parentId = models . ForeignKey ( 'self' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
file . write ( 'whatever' ) #NEWLINE#
os . environ [ 'DISPLAY' ] #NEWLINE#
set ( a ) . intersection ( b ) #NEWLINE#
urllib . request . urlopen ( 'http://www.google.com' , proxies = proxies ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
return re . findall ( '\\w+' , text ) #NEWLINE#
plt . show ( ) #NEWLINE#
return Response ( data , template_name = 'articles.html' ) #NEWLINE#
[ [ word , len ( word ) , word . upper ( ) ] for word in sent ] #NEWLINE#
df . pivot ( 'val' , 'day' , 'val' ) . boxplot ( ax = ax ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
a = [ name for name in os . listdir ( '.' ) if name . endswith ( '.txt' ) ] #NEWLINE#
logging . info ( 'Sample#SPACE#message' ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
df [ 'ID' ] = df [ 'ID' ] . apply ( lambda x : '{0:0>15}' . format ( x ) ) #NEWLINE#
df . loc [ df . groupby ( 'User' ) [ 'X' ] . filter ( lambda x : x . sum ( ) == 0 ) . index ] #NEWLINE#
print ( '%02i,%02i,%05.3g' % ( 3 , 4 , 5.66 ) ) #NEWLINE#
np . array ( [ [ int ( i [ 0 ] , 2 ) ] for i in a ] ) #NEWLINE#
any ( x . name == 't2' for x in l ) #NEWLINE#
plt . show ( ) #NEWLINE#
split_curve ( np . array ( [ 0 , 1 ] ) , np . array ( [ 0 , 1 ] ) , 3 ) #NEWLINE#
[ str ( item [ 0 ] ) for item in x if item and item [ 0 ] ] #NEWLINE#
test ( [ 'important' , 'comment' ] ) #NEWLINE#
run ( 'uname#SPACE#-a' ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
env . PDF ( 'document.pdf' , 'document.tex' ) #NEWLINE#
plt . savefig ( 'rasterized_transparency.eps' , dpi = 200 ) #NEWLINE#
YourModel . objects . filter ( datetime_published = datetime ( 2008 , 3 , 27 ) ) #NEWLINE#
print ( repr ( s . encode ( 'ascii' , errors = 'xmlcharrefreplace' ) ) [ 2 : - 1 ] ) #NEWLINE#
products = Product . objects . filter ( categories__pk = 1 ) . select_related ( ) #NEWLINE#
re . sub ( '\\s+(?=[^[\\(]*\\))|((?<=\\()\\s+)' , '' , my_string ) #NEWLINE#
[ [ 'Cats' , 'like' , 'dogs' , 'as' , 'much' , 'cats.' ] , [ 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 6 ] ] #NEWLINE#
df = pd . read_csv ( TESTDATA , sep = ';' ) #NEWLINE#
"""τoρνoς""" . encode ( 'utf-8' ) #NEWLINE#
grouped = data . groupby ( [ 'date' , 'name' ] ) #NEWLINE#
logging . basicConfig ( level = logging . INFO ) #NEWLINE#
{ k : v for k , v in list ( points . items ( ) ) if v [ 0 ] < 5 and v [ 1 ] < 5 } #NEWLINE#
d = set ( [ item for item in d if re . match ( '^[a-zA-Z]+$' , item ) ] ) #NEWLINE#
f . close ( ) #NEWLINE#
[ ( x , y , z ) for x , y , z in a if ( x + y ) ** z > 30 ] #NEWLINE#
json . dumps ( c , default = lambda o : o . __dict__ ) #NEWLINE#
sck . setproxy ( ) #NEWLINE#
np . set_printoptions ( formatter = { 'float' : lambda x : '{0:0.3f}' . format ( x ) } ) #NEWLINE#
tbl = doc . xpath ( '//body/table[2]//tr[position()>2]' ) [ 0 ] #NEWLINE#
list ( bucket . list ( '' , '/' ) ) #NEWLINE#
origin . pivot ( index = 'label' , columns = 'type' ) [ 'value' ] #NEWLINE#
list ( range ( N , - 1 , - 1 ) ) is better #NEWLINE#
a = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 4 ] ] #NEWLINE#
l . append ( input ( 'e' + str ( i ) + '=' ) ) #NEWLINE#
print ( tuple ( my_list ) ) #NEWLINE#
button . setStyleSheet ( 'QPushButton#SPACE#{background-color:#SPACE##A3C1DA;#SPACE#color:#SPACE#red;}' ) #NEWLINE#
[ [ 3 , 4 , None , None , None ] ] #NEWLINE#
set ( aa . items ( ) ) . intersection ( set ( bb . items ( ) ) ) #NEWLINE#
rows = [ i for i in range ( 0 , len ( a ) ) if a [ i ] [ 0 ] == value ] #NEWLINE#
return int ( '' . join ( [ ( '%d' % x ) for x in numbers ] ) ) #NEWLINE#
return HttpResponse ( status = 500 ) #NEWLINE#
re . sub ( '(\\s+)(a|an|and|the)(\\s+)' , '\x01\x03' , text ) #NEWLINE#
datetime . strptime ( s , '%a#SPACE#%b#SPACE#%d#SPACE#%Y#SPACE#%H:%M:%S#SPACE#GMT%z#SPACE#(%Z)' ) #NEWLINE#
re . compile ( '[\\u0020-\\u00d7ff]' , re . DEBUG ) #NEWLINE#
Score . objects . values ( 'student' ) . annotate ( latest_date = Max ( 'date' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . pivot ( 'Symbol' , 'TimeStamp' ) . stack ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( x + i * y ) for i in range ( 1 , 10 ) ] #NEWLINE#
len ( df . columns ) #NEWLINE#
np . savez ( tmp , * getarray [ : 10 ] ) #NEWLINE#
sys . stdin . read ( 1 ) #NEWLINE#
re . findall ( "[\\w']+|[.,!?;]" , "Hello,#SPACE#I'm#SPACE#a#SPACE#string!" ) #NEWLINE#
np . hstack ( [ np . arange ( i , j ) for i , j in zip ( start , stop ) ] ) #NEWLINE#
app . run ( threaded = True ) #NEWLINE#
model . _meta . get_field ( 'g' ) . get_internal_type ( ) #NEWLINE#
n = int ( input ( ) ) #NEWLINE#
a . decode ( 'ascii' ) #NEWLINE#
[ x for x in l if x [ 0 ] . startswith ( 'img' ) ] #NEWLINE#
y = pd . DataFrame ( y , columns = list ( 'y' ) ) #NEWLINE#
tree . write ( 'filename.xml' ) #NEWLINE#
A . ravel ( ) [ : A . shape [ 1 ] ** 2 : A . shape [ 1 ] + 1 ] #NEWLINE#
print ( mycollapsedstring . split ( '#SPACE#' ) ) #NEWLINE#
[ [ 3 , 1 , 2 ] , [ 1 , 3 , 1 ] , [ 2 , 1 , 3 ] ] #NEWLINE#
[ ( x + y ) for x in l2 for y in l1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( spacing ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ i . strip ( ) for i in l ] #NEWLINE#
np . fromiter ( a , dtype = np . float ) #NEWLINE#
print ( '/' . join ( new ) ) #NEWLINE#
~ np . isnan ( a ) . any ( 1 ) #NEWLINE#
df . query ( 'foo#SPACE#==#SPACE#222#SPACE#|#SPACE#bar#SPACE#==#SPACE#444' ) #NEWLINE#
xxs . select ( '//link/text()' ) . extract ( ) #NEWLINE#
os . system ( 'start#SPACE#' + filename ) #NEWLINE#
re . sub ( '[\\W_]+' , '' , 'a_b#SPACE#A_Z#SPACE#\x80ÿ#SPACE#Є' , flags = re . UNICODE ) #NEWLINE#
ast . literal_eval ( "{'x':1,#SPACE#'y':2}" ) #NEWLINE#
d [ 'set1' ] [ 'name' ] #NEWLINE#
open ( filename , 'rb' ) #NEWLINE#
im . save ( thumbnail_file , 'JPEG' , quality = 90 ) #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
most_expensive = Car . objects . values ( 'company_unique' ) . annotate ( Max ( 'price' ) ) #NEWLINE#
dict ( set . intersection ( * ( set ( d . items ( ) ) for d in dicts ) ) ) #NEWLINE#
return super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
lambda item : ( item [ 0 ] . rsplit ( None , 1 ) [ 0 ] , item [ 1 ] ) #NEWLINE#
s * ( a + b ) == s * a + s * b #NEWLINE#
df = df [ ~ ( ( df [ 'group_A' ] == 0 ) | ( df [ 'group_B' ] == 0 ) ) ] #NEWLINE#
re . findall ( '\\[#SPACE#(?:[^][]*#SPACE#\\[#SPACE#[^][]*#SPACE#\\])*#SPACE#[^][]*#SPACE##SPACE#\\]' , s , re . X ) #NEWLINE#
some_func ( ** mydict ) #NEWLINE#
my_list = sorted ( list ( dict . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
c = a . flatten ( ) #NEWLINE#
print ( url ( 'blog' , id = 123 , qualified = True ) ) #NEWLINE#
MyModel . _meta . get_field ( 'foo' ) . verbose_name #NEWLINE#
any ( i in a for i in b ) #NEWLINE#
log . start ( ) #NEWLINE#
sum ( x * y for x , y in zip ( a , b ) ) #NEWLINE#
[ r for r in ( f ( char ) for char in string ) if r is not None ] #NEWLINE#
os . environ [ 'DEBUSSY' ] = str ( myintvariable ) #NEWLINE#
[ 0 , 1 , 0 , 1 , 2 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
round ( random . uniform ( min_time , max_time ) , 1 ) #NEWLINE#
driver . find_element_by_xpath ( '//span[text()="' + cat2 + '"]' ) . click ( ) #NEWLINE#
print ( L [ 1 ] [ 'd' ] ) #NEWLINE#
df . loc [ : , ( 'quantity' ) ] *= - 1 #NEWLINE#
A . ravel ( ) [ i : max ( 0 , A . shape [ 1 ] - i ) * A . shape [ 1 ] : A . shape [ 1 ] + 1 ] #NEWLINE#
app . run ( ) #NEWLINE#
[ '1-5' , '7' , '9-10' ] #NEWLINE#
print ( 'the#SPACE#number#SPACE#is#SPACE#{:.2}' . format ( 1.0 / 3.0 ) ) #NEWLINE#
"""#SPACE#""" . join ( L ) #NEWLINE#
print ( [ i for i in range ( 5 ) ] ) #NEWLINE#
datetime . datetime . utcnow ( ) . strftime ( '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#GMT' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'Protein' , 'Green' , 'Squishy' ] #NEWLINE#
df #NEWLINE#
plt . show ( ) #NEWLINE#
all ( x in 'John#SPACE#Michael#SPACE#Marvulli' . split ( ) for x in 'John#SPACE#Marvulli' . split ( ) ) #NEWLINE#
logging . basicConfig ( level = logging . WARNING ) #NEWLINE#
url ( '^(?P<category>\\w)/(?P<filters>.*)/$' , 'myview' ) , #NEWLINE#
array = [ 'the' , 'brown' , 'fox' , 'jumps' , 'over' , 'the' , 'lazy' , 'dog' ] #NEWLINE#
plt . show ( ) #NEWLINE#
return '' . join ( 'Hello({})' . format ( i ) for i in range ( 100 ) ) #NEWLINE#
re . sub ( '\\s+(a|an|and|the)(\\s+)' , '\x02' , text ) #NEWLINE#
print ( re . sub ( '(.+)(?<=\\1)' , '(\\g<0>)' , test ) ) #NEWLINE#
print ( re . sub ( '(.)(?<=\\1)' , '(\\g<0>)' , test ) ) #NEWLINE#
MyObject . all ( ) . order ( '-time' ) . fetch ( limit = 1 ) [ 0 ] #NEWLINE#
df_new [ df_new [ 'l_ext' ] . isin ( [ 31 , 22 , 30 , 25 , 64 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
itertools . repeat ( 0 , 10 ) #NEWLINE#
ax . set_xlim ( [ 0 , 100 ] ) #NEWLINE#
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d1 . keys ( ) & d2 } #NEWLINE#
dct [ key ] . append ( some_value ) #NEWLINE#
print ( 'Jânis' . encode ( 'utf-8' ) ) #NEWLINE#
{ 'data' : [ { 'id' : 1 , 'name' : 'Test#SPACE#Item#SPACE#1' } , { 'id' : 2 , 'name' : 'Test#SPACE#Item#SPACE#2' } ] } #NEWLINE#
all ( dict_obj . get ( key ) is not None for key in properties_to_check_for ) #NEWLINE#
df . dropna ( subset = [ 'col2' , 'col3' ] ) #NEWLINE#
[ ( [ k ] + [ ( sum ( x ) / float ( len ( x ) ) ) for x in zip ( * v ) ] ) for k , v in list ( d . #NEWLINE# items ( ) ) ] #NEWLINE#
a = '1' + '2' + '3' + '4' + '5' #NEWLINE#
[ ord ( c ) for c in s ] #NEWLINE#
[ int ( a [ i : i + 3 ] ) for i in range ( 0 , len ( a ) , 3 ) ] #NEWLINE#
os . makedirs ( newpath ) #NEWLINE#
results . sort ( key = lambda r : r . person . birthdate ) #NEWLINE#
response = urllib . request . urlopen ( req , json . dumps ( data ) ) #NEWLINE#
screen_height = root . winfo_screenheight ( ) #NEWLINE#
ModelWithTextField . objects . filter ( text_field__iregex = '^.{7,}$' ) #NEWLINE#
( 5 ) . bit_length ( ) #NEWLINE#
a , b = np . sin ( x ) , np . cos ( x ) #NEWLINE#
sum ( counter . values ( ) ) #NEWLINE#
[ 3 , 2 , 1 , 0 , 3 , 2 , 3 ] #NEWLINE#
form . save ( ) #NEWLINE#
self . response . out . write ( ',' . join ( [ 'a' , 'cool' , 'test' ] ) ) #NEWLINE#
b = a [ : - 1 ] + ( a [ - 1 ] * 2 , ) #NEWLINE#
sorted ( re . findall ( 'g+' , 'fggfggggfggfg' ) , key = len , reverse = True ) #NEWLINE#
root . xpath ( './/table:table' , namespaces = root . nsmap ) #NEWLINE#
run ( 'ls' ) #NEWLINE#
df . to_csv ( 'pandasfile.csv' , float_format = '%.3f' ) #NEWLINE#
df . to_sql ( 'table' , engine , chunksize = 20000 ) #NEWLINE#
db . execute ( 'INSERT#SPACE#INTO#SPACE#json_col#SPACE#VALUES#SPACE#%s' , json_value ) #NEWLINE#
call ( [ 'tar' , 'xvf' , path ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = [ str ( wi ) for wi in wordids ] #NEWLINE#
logging . info ( 'Doing#SPACE#something' ) #NEWLINE#
print ( np . unravel_index ( result . argmax ( ) , result . shape ) ) #NEWLINE#
fcntl . ioctl ( s . fileno ( ) , SIOCSIFFLAGS , ifr ) #NEWLINE#
dir ( ) #NEWLINE#
re . sub ( '(AA+B+)|(ABB+)' , '' , data ) #NEWLINE#
auth . set_access_token ( access_token , access_token_secret ) #NEWLINE#
u = User . objects . filter ( userjob__job__name = 'a' ) . filter ( userjob__job__name = 'c' ) #NEWLINE#
collection . remove ( { '_id' : ObjectId ( '4c2fea1d289c7d837e000000' ) } ) #NEWLINE#
self . redirect ( '/home.view' ) #NEWLINE#
fig . savefig ( 'label_group_bar_example.png' ) #NEWLINE#
format ( 38.2551994324 , '.32f' ) #NEWLINE#
zip ( * [ [ 5 , 7 ] , [ 6 , 9 ] , [ 7 , 4 ] ] ) #NEWLINE#
df2 = df . astype ( float ) #NEWLINE#
print ( re . sub ( '[^\\w.]' , '' , string ) ) #NEWLINE#
img . save ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
s . split ( ':' ) [ - 2 : ] #NEWLINE#
d [ i [ 0 ] ] = int ( i [ 1 ] ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
df . withColumn ( 'new_column' , lit ( 10 ) ) #NEWLINE#
foo [ : , ( 1 ) ] #NEWLINE#
datetime . combine ( date . today ( ) , time ( ) ) + timedelta ( hours = 2 ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] #NEWLINE#
match = re . search ( '(.*?):([^-]*)-(.*)' , line ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
a = np . array ( a , dtype = np . float128 ) #NEWLINE#
windows = [ { 'script' : 'admin.py' , 'uac_info' : 'requireAdministrator' } ] #NEWLINE#
re . sub ( '([a-zA-Z0-9])\\s+(?=[a-zA-Z0-9])' , '\\1*' , '3#SPACE#/a#SPACE#5!#SPACE#b' ) #NEWLINE#
plot ( x [ 0 ] , y [ 0 ] , 'red' , x [ 1 ] , y [ 1 ] , 'black' ) #NEWLINE#
[ [ random . random ( ) for i in range ( N ) ] for j in range ( N ) ] #NEWLINE#
c = [ ( x | y ) for x , y in zip ( a , b ) ] #NEWLINE#
[ 'Hello' , 'wÃ¶rld' ] #NEWLINE#
""",""" . join ( map ( str , sorted ( list ( range ( 1 , 100 , 4 ) ) ) + list ( range ( 2 , 100 , 4 ) ) ) ) #NEWLINE#
return { 'ip_address' : request . META [ 'REMOTE_ADDR' ] } #NEWLINE#
from functools import reduce #NEWLINE# [ reduce ( lambda x , y : x + y , i ) for i in a ] #NEWLINE#
conn . request ( 'GET' , '/oauth/access_token' , params ) #NEWLINE#
ax . axvline ( pd . to_datetime ( '2015-11-01' ) , color = 'r' , linestyle = '--' , lw = 2 ) #NEWLINE#
df [ 'Total' ] = df . sum ( axis = 1 ) #NEWLINE#
input ( ) #NEWLINE#
print ( list ( enumerate ( words ) ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
cnxn . commit ( ) #NEWLINE#
print ( os . path . join ( dirpath , filename ) ) #NEWLINE#
cursor . execute ( query , data ) #NEWLINE#
root . quit ( ) #NEWLINE#
encoded_string = base64 . b64encode ( image_file . read ( ) ) #NEWLINE#
[ ( i , j ) for i in range ( 10 ) for j in range ( i ) ] #NEWLINE#
browser = webdriver . Safari ( quiet = True ) #NEWLINE#
df . join ( df [ 'stats' ] . apply ( json . loads ) . apply ( pd . Series ) ) #NEWLINE#
results = [ t [ 1 ] for t in mylist if t [ 0 ] == 10 ] #NEWLINE#
image = models . ImageField ( upload_to = 'images' ) #NEWLINE#
{ k : list ( v ) for k , v in df . groupby ( 'Address' ) [ 'ID' ] } #NEWLINE#
print ( aware . astimezone ( Pacific ) . strftime ( '%a#SPACE#%b#SPACE#%d#SPACE#%X#SPACE#%z' ) ) #NEWLINE#
driver . quit ( ) #NEWLINE#
ASCII = '' . join ( chr ( x ) for x in range ( 128 ) ) #NEWLINE#
fp . write ( '\n' . join ( '%s#SPACE#%s' % x for x in mylist ) ) #NEWLINE#
open ( filename , 'r' ) #NEWLINE#
zip ( iter ( x . items ( ) ) , iter ( y . items ( ) ) ) #NEWLINE#
heapq . nlargest ( 6 , your_list , key = itemgetter ( 1 ) ) #NEWLINE#
find = re . compile ( '^(.*?)\\..*' ) #NEWLINE#
dates . dt . strftime ( '%Y-%m-%d' ) #NEWLINE#
dict ( ( name , locals ( ) [ name ] ) for name in list_of_variable_names ) #NEWLINE#
ax . plot ( x , y , z , label = 'parametric#SPACE#curve' ) #NEWLINE#
[ '_' . join ( k + v for k , v in zip ( d , v ) ) for v in product ( * list ( d . values ( ) ) ) ] #NEWLINE#
df [ df . TYPE == 'SU4' ] . GVW . hist ( bins = 50 ) #NEWLINE#
match = re . search ( '[^a-zA-Z](is)[^a-zA-Z]' , mystr ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' . join ( df . apply ( func , axis = 1 ) ) ) #NEWLINE#
os . path . relpath ( subdir2 , subdir1 ) #NEWLINE#
df [ 'str_name' ] . str . contains ( 'c' ) #NEWLINE#
[ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] #NEWLINE#
link = driver . find_element_by_link_text ( 'Details' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
df . ix [ idx ] #NEWLINE#
re . match ( '[Ff][Oo]{2}bar' , 'Foobar' ) #NEWLINE#
k . strftime ( '%H:%M:%S,%f#SPACE#' ) #NEWLINE#
[ x for x in myList if x . age == 30 ] #NEWLINE#
df . query ( 'col.str[0]#SPACE#not#SPACE#list("tc")' ) #NEWLINE#
myform = MyForm ( request . POST , request = request ) #NEWLINE#
"""what"ever""" #NEWLINE#
"""what"ev'er""" #NEWLINE#
dct . get ( key , 'ham' ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
msg . get_payload ( ) #NEWLINE#
print ( len ( 'Ð¹Ñ\x86Ñ\x8b' . decode ( 'utf8' ) ) ) #NEWLINE#
[ l [ i : : 5 ] for i in range ( 5 ) ] #NEWLINE#
dict ( ( k , mimes [ k ] ) for k in mimes if mimes [ k ] == 'image/tiff' ) #NEWLINE#
operator . itemgetter ( * b ) ( a ) #NEWLINE#
df . eval ( '("yes"#SPACE#==#SPACE#"yes")' ) #NEWLINE#
int ( str ( x ) [ - 3 : ] ) #NEWLINE#
test = [ 0 , 1 , 2 , 3 , 2 , 2 , 3 ] #NEWLINE#
[ ( m . start ( 0 ) , m . end ( 0 ) ) for m in re . finditer ( pattern , string ) ] #NEWLINE#
block3 [ : ] = np . rot90 ( block3 . copy ( ) , - 1 ) #NEWLINE#
any ( map ( eval , my_list ) ) #NEWLINE#
df . values . T . tolist ( ) #NEWLINE#
[ i for i in range ( len ( s1 ) ) if s1 [ i ] != s2 [ i ] ] #NEWLINE#
[ list ( e ) for e in zip ( * [ fl [ i : : 2 ] for i in range ( 2 ) ] ) ] #NEWLINE#
df . date + pd . to_timedelta ( - df . date . dt . second % 60 , unit = 's' ) #NEWLINE#
df . to_csv ( 'pandasfile.csv' , float_format = '%g' ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] #NEWLINE#
[ 'ABC' , 'F' ] #NEWLINE#
line = line . decode ( 'utf-8' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '#SPACE#' . join ( [ '{:#SPACE#3d}' . format ( x ) for x in rij3 ] ) ) #NEWLINE#
img . write_to_png ( 'svg.png' ) #NEWLINE#
[ el for el in re . split ( '(\\d+)' , string ) if el . strip ( ) ] #NEWLINE#
l [ 1 : ] #NEWLINE#
d1 = { 'yes' : [ 1 , 2 , 3 ] , 'no' : [ 4 ] } #NEWLINE#
y [ argrelmax ( y ) [ 0 ] ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
line1 = [ 'ld#SPACE#a8,0x8910' , 'mul#SPACE#a3,a2,8' , 'shl#SPACE#a3,a3,4' , 'add#SPACE#a3,a3,a8' ] #NEWLINE#
myList = [ { 'a' : 'A' } , { 'b' : 'B' } , { 'c' : 'C' , 'cc' : 'CC' } ] #NEWLINE#
soup . find_all ( 'li' , { 'class' : 'test' } , recursive = False ) #NEWLINE#
test [ 'label' ] = test [ 'name' ] . apply ( lambda x : my_function ( x ) ) #NEWLINE#
url ( '^$' , 'Home.views.index' ) , #NEWLINE#
plt . show ( ) #NEWLINE#
url ( '^delete/(?P<pk>\\d+)' , views . EventDetail . as_view ( ) , name = 'delete_event' ) , #NEWLINE#
np . delete ( a , [ 1 , 3 ] , axis = 1 ) #NEWLINE#
my_list . sort ( ) #NEWLINE#
a [ ~ ( a == 5 ) . any ( 1 ) ] #NEWLINE#
big_regex = re . compile ( '\\b%s\\b' % '\\b|\\b' . join ( map ( re . escape , words ) ) ) #NEWLINE#
dict ( [ ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ] ) #NEWLINE#
df2 [ 'cumcount' ] = df2 . groupby ( 'val1' ) . cumcount ( ) #NEWLINE#
urllib . request . urlopen ( 'http://www.example.com' , timeout = 5 ) #NEWLINE#
procname . setprocname ( 'My#SPACE#super#SPACE#name' ) #NEWLINE#
urllib . parse . urlencode ( { 'p' : [ 1 , 2 , 3 ] } , doseq = True ) #NEWLINE#
return re . sub ( '\\W+' , '-' , text ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#%(table)s' , { 'table' : AsIs ( 'my_awesome_table' ) } ) #NEWLINE#
df [ 'Date' ] . map ( pd . Timestamp . date ) . unique ( ) #NEWLINE#
a = '\\u2026' #NEWLINE#
df [ 'date' ] += np . array ( - df [ 'date' ] . dt . second % 60 , dtype = '<m8[s]' ) #NEWLINE#
df . pivot ( index = 'a' , columns = 'b' , values = 'c' ) #NEWLINE#
forminstance . is_valid ( ) #NEWLINE#
re . sub ( '[_\\W]+' , '#SPACE#' , s ) . upper ( ) #NEWLINE#
[ 'uncorn' , 'corny' , 'unicycle' ] #NEWLINE#
plt . show ( ) #NEWLINE#
driver . get ( 'https://username:password@somewebsite.com/' ) #NEWLINE#
socket . gethostname ( ) #NEWLINE#
field = models . TextField ( help_text = mark_safe ( 'some<br>html' ) ) #NEWLINE#
np . repeat ( a , [ 2 , 2 , 1 ] , axis = 0 ) #NEWLINE#
done = [ ( i , x ) for i in [ a , b , c , d ] ] #NEWLINE#
plt . setp ( axs [ 1 ] . xaxis . get_majorticklabels ( ) , rotation = 70 ) #NEWLINE#
text . configure ( state = 'disabled' ) #NEWLINE#
array ( [ 0 , 100 , 100 , 100 , 4 , 5 , 100 , 100 , 100 , 9 ] ) #NEWLINE#
FILE = open ( 'report.pdf' , 'wb' ) #NEWLINE#
api . update_status ( '@<username>#SPACE#My#SPACE#status#SPACE#update' , tweetId ) #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( item . get ( 'one' , 0 ) for item in list ( tadas . values ( ) ) ) #NEWLINE#
unique_a = np . unique ( b ) . view ( a . dtype ) . reshape ( - 1 , a . shape [ 1 ] ) #NEWLINE#
[ i for i , x in enumerate ( testlist ) if x == 1 ] #NEWLINE#
{ 'fields' : ( 'first_name' , 'last_name' , 'address' , 'city' , 'state' ) } #NEWLINE#
[ ( 'Remaking' , 'O' ) , ( 'The' , 'O' ) , ( 'Republican#SPACE#Party' , 'ORGANIZATION' ) ] #NEWLINE#
dict ( ( ( 'a' , 1 ) , ( 'b' , 2 ) ) ) #NEWLINE#
dict ( ( key_from_value ( value ) , value ) for value in values ) #NEWLINE#
max ( lst , key = itemgetter ( 'score' ) ) #NEWLINE#
p . start ( ) #NEWLINE#
self . submenu2 . setVisible ( False ) #NEWLINE#
print ( ',' . join ( '-' . join ( map ( str , ( g [ 0 ] , g [ - 1 ] ) [ : len ( g ) ] ) ) for g in G ) ) #NEWLINE#
array ( [ 0 , 0 , 2 , 1 , 0 , 1 ] ) #NEWLINE#
open ( '\\\\?\\C:\\whatever\\test.' , 'w' ) #NEWLINE#
f ( [ 3 , 2 , 5 , 4 ] , [ 2 , 3 , 2 ] ) #NEWLINE#
df [ 'A' ] . apply ( lambda x : x . strftime ( '%d%m%Y' ) ) #NEWLINE#
return np . vstack ( ( np . cos ( theta ) , np . sin ( theta ) ) ) . T #NEWLINE#
'%02d:%02d:%02d' % ( hours , minutes , seconds ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
"""#SPACE#""" . join ( str ( item ) for item in my_list ) #NEWLINE#
equal ( [ 1 , 2 ] , a ) . all ( axis = 1 ) . any ( ) #NEWLINE#
list ( cycle ( [ [ 0 , 3 ] , [ 1 , 0 ] , [ 3 , 1 ] ] , 0 ) ) #NEWLINE#
return [ v for k , v in self . items ( ) if v == value ] #NEWLINE#
g = df . groupby ( df . index // 2 ) #NEWLINE#
len ( set ( d . values ( ) ) ) == 1 #NEWLINE#
response . content = response . content . replace ( 'BAD' , 'GOOD' ) #NEWLINE#
ax . set_xticklabels ( ( '1' , '2' , '3' , '4' ) ) #NEWLINE#
min ( L , key = lambda theta : angular_distance ( theta , 1 ) ) #NEWLINE#
all_lst = [ [ 2 , 7 , 10 ] , [ 0 , 4 , 6 ] , [ 1 , 3 , 11 ] ] #NEWLINE#
img . seek ( 1 ) #NEWLINE#
print ( [ a [ 'data' ] for a in thedata ] ) #NEWLINE#
print ( multidict ( [ 'a' , 'b' ] , [ 'A' , 'B' ] , [ '1' , '2' ] , { } ) ) #NEWLINE#
itertools . product ( mydict [ 'item1' ] , mydict [ 'item2' ] ) #NEWLINE#
image64 = Image . open ( fluid64 + '%02d.jpg' % pic ) #NEWLINE#
parser . add_argument ( '-w' , action = 'store_true' ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
l = [ ( x * x ) for x in range ( 0 , 10 ) ] #NEWLINE#
sysconfig . get_config_var ( 'HAVE_LIBREADLINE' ) #NEWLINE#
ts . plot ( marker = 'o' ) #NEWLINE#
re . sub ( '(\\w)([A-Z])' , '\\1#SPACE#\\2' , 'WordWordWWWWWWWord' ) #NEWLINE#
install . packages ( 'png' , '/home/user/anaconda3/lib/R/library' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
ec2 . create_instances ( ImageId = '<ami-image-id>' , MinCount = 1 , MaxCount = 5 ) #NEWLINE#
dictionary = dict ( [ ( List [ i ] , List [ i + 1 ] ) for i in range ( 0 , len ( List ) , 2 ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . applymap ( time . isoformat ) . apply ( pd . to_timedelta ) #NEWLINE#
df . groupby ( by = df . columns , axis = 1 ) . apply ( gf ) #NEWLINE#
dfts = df . set_index ( 'date_time' ) #NEWLINE#
plt . xlabel ( 'Dose' ) #NEWLINE#
raise ValueError ( "Unexpected#SPACE#gender;#SPACE#expected#SPACE#'m'#SPACE#or#SPACE#'f',#SPACE#got#SPACE#%s" % gender ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
re . sub ( '_' , '' , re . sub ( pattern , '' , x ) ) #NEWLINE#
s . decode ( 'hex' ) #NEWLINE#
l = map ( lambda x : x * 2 , l ) #NEWLINE#
dfs = pd . concat ( [ pd . read_csv ( 'data/' + f ) for f in files ] ) #NEWLINE#
[ [ 'A' , 'Book2' , '10' ] , [ 'B' , 'Book1' , '7' ] , [ 'B' , 'Book2' , '5' ] ] #NEWLINE#
array ( [ [ 12 , 1 , 14 , 11 ] , [ 4 , 9 , 10 , 7 ] , [ 8 , 5 , 6 , 15 ] , [ 0 , 13 , 2 , 3 ] ] ) #NEWLINE#
hex ( x ) [ 2 : ] . decode ( 'hex' ) #NEWLINE#
"""{:20s}""" . format ( mystring ) #NEWLINE#
kwargs [ 'key_name' ] = kwargs [ 'name' ] #NEWLINE#
print ( '{:10.4f}' . format ( x ) ) #NEWLINE#
warnings . simplefilter ( 'always' ) #NEWLINE#
new_list = [ seq [ 0 ] for seq in yourlist ] #NEWLINE#
re . sub ( '[_\\W]+' , '#SPACE#' , s ) . strip ( ) . upper ( ) #NEWLINE#
my_dictionary = { k : f ( v ) for k , v in list ( my_dictionary . items ( ) ) } #NEWLINE#
df [ 'dateonly' ] = df [ 'time' ] . apply ( lambda x : x . date ( ) ) #NEWLINE#
df . loc [ ( df == 1 ) . any ( axis = 1 ) , df . columns . map ( lambda x : x . startswith ( 'foo' ) ) ] #NEWLINE#
df [ 'Measurements' ] = df . reset_index ( ) . groupby ( 'Trial' ) . cumcount ( ) #NEWLINE#
{ 'image_bytes' : { 'b64' : 'dGVzdAo=' } } #NEWLINE#
[ '(two' , 'plus' , 'three)' , 'plus' , 'four' ] #NEWLINE#
csv_pd . query ( 'setA==1#SPACE#&#SPACE#setB==0#SPACE#&#SPACE#setC==0' ) . groupby ( 'D' ) . count ( ) #NEWLINE#
Model . query . filter ( Model . columnName . contains ( 'sub_string' ) ) #NEWLINE#
app . run ( port = port ) #NEWLINE#
map ( lambda x : x + 1 , L ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
df_col_merged = pd . concat ( [ df_a , df_b ] , axis = 1 ) #NEWLINE#
s [ : : - 1 ] #NEWLINE#
ip . iptype ( ) #NEWLINE#
[ 'a' , 'A' , 'b' , 'B' , 'c' , 'C' , 'd' , 'D' , 'e' , 'E' ] #NEWLINE#
a [ list ( np . ogrid [ [ slice ( x ) for x in a . shape ] ] [ : - 1 ] ) + [ i ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
self . layout . addWidget ( self . button ) #NEWLINE#
img . save ( sys . argv [ 2 ] ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
open ( 'someUnicodeFilenameλ' ) #NEWLINE#
list ( chain . from_iterable ( zip ( list_a , list_b ) ) ) #NEWLINE#
df [ df . genre . str . join ( '#SPACE#' ) . str . contains ( 'comedy' ) ] #NEWLINE#
{ i : j for i , j in zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) } #NEWLINE#
int ( float ( <STR0> ) ) #NEWLINE#
series = pd . Series ( list ( range ( 20 ) ) , dtype = float ) #NEWLINE#
plt . show ( ) #NEWLINE#
client . set_options ( headers = { 'key2' : 'value' } ) #NEWLINE#
scrollb . grid ( row = 0 , column = 1 , sticky = 'nsew' ) #NEWLINE#
plt . xlabel ( '$x=\\frac{#SPACE#\\color{red}{red#SPACE#text}#SPACE#}{#SPACE#\\color{blue}{blue#SPACE#text}#SPACE#}$' ) #NEWLINE#
results = cursor . fetchall ( ) #NEWLINE#
raise ValueError ( 'password#SPACE#must#SPACE#be#SPACE#longer#SPACE#than#SPACE#6#SPACE#characters' ) #NEWLINE#
m [ m . mask ] #NEWLINE#
x [ np . where ( x == 5 ) ] #NEWLINE#
print ( '[' , ',#SPACE#' . join ( repr ( i ) for i in list ) , ']' ) #NEWLINE#
int ( time . mktime ( dt . timetuple ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
b = df [ ( df [ 'a' ] > 1 ) & ( df [ 'a' ] < 5 ) ] #NEWLINE#
df . ix [ df [ 'A' ] . idxmax ( ) ] #NEWLINE#
weekdays = models . PositiveIntegerField ( choices = WEEKDAYS ) #NEWLINE#
datetime . datetime . now ( pytz . timezone ( 'US/Central' ) ) . isoformat ( ) #NEWLINE#
df [ 'column' ] = df [ 'column' ] . fillna ( value ) #NEWLINE#
df . ix [ '2014-01-01' : '2014-02-01' ] #NEWLINE#
clsmembers = inspect . getmembers ( sys . modules [ __name__ ] , inspect . isclass ) #NEWLINE#
pd . DataFrame ( _ , columns = data . columns , index = data . index [ : 3 ] ) #NEWLINE#
{ k : v for k , v in list ( mydict . items ( ) ) if k >= 6 } #NEWLINE#
print ( 'Ã©' . decode ( 'cp1252' ) . capitalize ( ) . encode ( 'cp1252' ) ) #NEWLINE#
{ 'instances' : [ { 'image_bytes' : { 'b64' : 'dGVzdAo=' } } ] } #NEWLINE#
struct . unpack ( 'd' , '4081637ef7d0424a' . decode ( 'hex' ) ) #NEWLINE#
df . drop_duplicates ( keep = 'last' , subset = [ 'valueA' , 'valueB' ] ) #NEWLINE#
methodB ( 'argvalue' , ** kwargs ) #NEWLINE#
sys . stderr = open ( 'C:\\err.txt' , 'w' ) #NEWLINE#
ax . tick_params ( labeltop = 'off' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . search ( '@.*' , test_string ) . group ( ) #NEWLINE#
df [ 'date' ] [ df . index [ - 1 ] ] #NEWLINE#
A [ ( A [ 'segment' ] == 42 ) & ( A [ 'material' ] == 5 ) ] #NEWLINE#
width , height = dc . GetTextExtent ( 'Text#SPACE#to#SPACE#measure' ) #NEWLINE#
~ df [ 'col' ] . str . contains ( word ) #NEWLINE#
re . findall ( '\\[([^\\]]*)\\]' , str ) #NEWLINE#
app . run ( ) #NEWLINE#
[ ( x * 2 if x % 2 == 0 else x ) for x in a_list ] #NEWLINE#
jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( dict ( f = var3 ) ) #NEWLINE#
print ( most_common ( [ 'goose' , 'duck' , 'duck' , 'goose' ] ) ) #NEWLINE#
X , Y = np . mgrid [ - 5 : 5 : 21.0j , - 5 : 5 : 21.0j ] #NEWLINE#
browser . close ( ) #NEWLINE#
return min ( d [ 'id' ] for d in l if 'id' in d ) #NEWLINE#
[ ( x * 1.0 / y ) for x , y in zip ( a , b ) ] #NEWLINE#
"""-""" . join ( a + b for a , b in zip ( t , t ) ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . plot ( x , m * x + b , '-' ) #NEWLINE#
print ( myForm . cleaned_data . get ( 'description' ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
{ { ( variable | stringformat ) : '.3f' } } #NEWLINE#
"""{0:.6g}""" . format ( 3.539 ) #NEWLINE#
x = [ x for x in b . split ( ) if x in a . split ( ) ] #NEWLINE#
print ( s . encode ( 'utf-8' ) ) #NEWLINE#
wx . Frame . __init__ ( self , parent ) #NEWLINE#
[ 0 ] * 3 #NEWLINE#
sys . exit ( 'Not#SPACE#enough#SPACE#args' ) #NEWLINE#
'b' in list ( Foo . __dict__ . values ( ) ) #NEWLINE#
multiprocessing . cpu_count ( ) #NEWLINE#
return render_to_response ( 'my_view.html' , context ) #NEWLINE#
dt . datetime . utcfromtimestamp ( time . mktime ( date . timetuple ( ) ) ) #NEWLINE#
df [ ( df [ 'col1' ] >= 1 ) & ( df [ 'col1' ] <= 1 ) ] #NEWLINE#
regex = re . compile ( '\\b[A-Z]{3,}\\b' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ l for l in paragraph3 ] #NEWLINE#
map ( self . queryQ . put , self . getQueries ( ) ) #NEWLINE#
sorted ( s , key = lambda x : int ( x [ - 1 ] ) ) #NEWLINE#
ax . axvline ( x , color = 'k' , linestyle = '--' ) #NEWLINE#
[ ( g [ 0 ] , len ( list ( g [ 1 ] ) ) ) for g in itertools . groupby ( [ 'a' , 'a' , 'b' , 'b' , 'b' ] ) ] #NEWLINE#
res = re . findall ( '-(?!(?:aa|bb)-)([^-]+)(?=-)' , s ) #NEWLINE#
map ( int , inputstring . split ( ',' ) ) #NEWLINE#
return '' . join ( [ ( i if ord ( i ) < 128 else '#SPACE#' ) for i in text ] ) #NEWLINE#
func ( 1 , * args , ** kwargs ) #NEWLINE#
float ( a ) #NEWLINE#
re . findall ( 'car|bus|[a-z]' , s ) #NEWLINE#
ax . set_zlabel ( '$V(\\phi)$' ) #NEWLINE#
list ( globals ( ) . keys ( ) ) [ 2 ] #NEWLINE#
setup ( name = 'mypkg' , version = '0.0.1' , install_requires = [ 'PIL' ] ) #NEWLINE#
ax . plot ( 0 , 0 , '-r' , label = 'temp' ) #NEWLINE#
[ ( 1 , 109 ) , ( 2 , 109 ) , ( 2 , 130 ) , ( 2 , 131 ) , ( 2 , 132 ) , ( 3 , 28 ) , ( 3 , 127 ) ] #NEWLINE#
d = dict . fromkeys ( string . ascii_lowercase , 0 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
np . where ( df . values == rowmax [ : , ( None ) ] ) #NEWLINE#
df [ df . iloc [ 0 ] . replace ( '' , np . nan ) . dropna ( ) . index ] #NEWLINE#
df [ 'dateonly' ] = pd . to_datetime ( df [ 'dateonly' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
next ( x for x in range ( 10 ) if x > 3 ) #NEWLINE#
candidates = db . relationship ( 'Candidate' , backref = 'post' , lazy = 'dynamic' ) #NEWLINE#
( df [ cols ] > 0 ) . apply ( lambda x : '#SPACE#' . join ( x [ x ] . index ) , axis = 1 ) #NEWLINE#
cv2 . cvtColor ( img , cv2 . COLOR_BGR2RGB ) #NEWLINE#
plt . show ( ) #NEWLINE#
result = [ ( x + dx , y + dy ) for x , y in points for dx , dy in offsets ] #NEWLINE#
array ( [ [ True , True ] , [ True , True ] ] , dtype = bool ) #NEWLINE#
gca ( ) . xaxis . set_major_formatter ( FuncFormatter ( formatter ) ) #NEWLINE#
graph = [ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 1 ) , ( 3 , 4 ) , ( 4 , 3 ) ] #NEWLINE#
print ( msg [ 'Subject' ] ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
df [ 'WIN1' ] = df [ 'WIN' ] . map ( lambda x : 1 if x == 'Yes' else 0 ) #NEWLINE#
list ( d . keys ( ) ) #NEWLINE#
print ( atype . get ( 'foobar' ) ) #NEWLINE#
sock . bind ( ( '' , UDP_PORT ) ) #NEWLINE#
min ( [ x [ : : - 1 ] for x in a ] ) [ : : - 1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
logger . error ( 'Your#SPACE#log#SPACE#message#SPACE#here' ) #NEWLINE#
x = ( x + y ) % 48 #NEWLINE#
[ ord ( x ) for x in letters ] #NEWLINE#
map ( float , i . split ( '#SPACE#' , 2 ) [ : 2 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
zip ( ( 1 , 2 ) , ( 40 , 2 ) , ( 9 , 80 ) ) #NEWLINE#
r = dict ( ( v , k ) for k , v in d . items ( ) ) #NEWLINE#
self . _bar ( ) #NEWLINE#
"""foo#SPACE#bar#SPACE#hello#SPACE#world""" . split ( '#SPACE#' , 2 ) #NEWLINE#
request . json [ 'foo' ] #NEWLINE#
np . genfromtxt ( txt , delimiter = '\t' , dtype = 'str' ) #NEWLINE#
os . path . join ( dir_name , base_filename + '.' + filename_suffix ) #NEWLINE#
plt . show ( ) #NEWLINE#
file . save ( os . path . join ( app . config [ 'UPLOAD_FOLDER' ] , filename ) ) #NEWLINE#
print ( Foo . __dict__ [ 'bar' ] ) #NEWLINE#
x = map ( int , '0,1,2' . split ( ',' ) ) #NEWLINE#
print ( re . findall ( '[^/|(]+(?:\\([^)]*\\))*' , re . sub ( '^qr/(.*)/i$' , '\\1' , str ) ) ) #NEWLINE#
"""{d.month}/{d.day}/{d.year}""" . format ( d = datetime . datetime . now ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
longest_strings = [ s for s in stringlist if len ( s ) == maxlength ] #NEWLINE#
json . dumps ( urlparse . parse_qs ( 'a=1&b=2' ) ) #NEWLINE#
find . sub ( '\\1' , text ) #NEWLINE#
json . dump ( datetime . now ( ) . strftime ( '%Y-%m-%dT%H:%M:%S' ) ) #NEWLINE#
print ( [ ( x [ 0 ] , x [ - 1 ] ) for x in l ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
np . einsum ( 'ij,jk->ijk' , A , B ) #NEWLINE#
tables = cursor . fetchall ( ) #NEWLINE#
df . loc [ ( df == 1 ) . any ( axis = 1 ) ] #NEWLINE#
newsampledata . reindex ( newsampledata . index . repeat ( n ) ) . reset_index ( drop = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' . join ( '%s#SPACE#=#SPACE#%s' % ( key , value ) for key , value in d . items ( ) ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
re . findall ( '(?=(\\b\\w+\\s\\b\\w+))' , st ) #NEWLINE#
df . join ( df . groupby ( 'Id' ) . concat . apply ( list ) . to_frame ( 'new' ) , on = 'Id' ) #NEWLINE#
a . sort ( key = Counter ( a ) . get , reverse = True ) #NEWLINE#
len ( os . walk ( path ) . next ( ) [ 2 ] ) #NEWLINE#
df . dtypes #NEWLINE#
results = sorted ( list ( results . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
first , rest = l [ 0 ] , l [ 1 : ] #NEWLINE#
print ( datetime . datetime . now ( ) . strftime ( '%y' ) ) #NEWLINE#
[ '' , '#SPACE#' , 'None' , '--' , '-.' , '-' , ':' ] #NEWLINE#
sorted ( ( sorted ( item ) for item in data ) , key = lambda x : ( len ( x ) , x ) ) #NEWLINE#
driver . get ( 'https://google.com/' ) #NEWLINE#
sorted ( os . listdir ( whatever_directory ) ) #NEWLINE#
[ i for i in x if 60 < i < 70 ] #NEWLINE#
difflib . SequenceMatcher ( None , a , b ) . ratio ( ) #NEWLINE#
setattr ( x , attr , 'magic' ) #NEWLINE#
lst . sort ( ) #NEWLINE#
print ( '{0:05d}' . format ( i ) ) #NEWLINE#
root . iconbitmap ( default = 'ardulan.ico' ) #NEWLINE#
print ( dt . strftime ( '%a,#SPACE#%b#SPACE#%d,#SPACE#%Y#SPACE#at#SPACE#%I:%M#SPACE#%p' ) ) #NEWLINE#
[ ( x [ i ] + x [ i + 1 ] ) for i in range ( 0 , len ( x ) , 2 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
self . grid_rowconfigure ( 1 , weight = 1 ) #NEWLINE#
msg [ 'Subject' ] = 'Auto#SPACE#Hella#SPACE#Restart#SPACE#Report#SPACE#' + sys . argv [ 1 ] #NEWLINE#
os . path . splitext ( 'name.fasta' ) [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
logging . info ( 'hello' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
json . loads ( s ) #NEWLINE#
print ( list ( itertools . product ( [ 1 , 2 ] , repeat = 3 ) ) ) #NEWLINE#
driver . quit ( ) #NEWLINE#
{ 'bi' : 2 , 'double' : 2 , 'duo' : 2 , 'two' : 2 } #NEWLINE#
plt . show ( ) #NEWLINE#
logging . info ( 'Doing#SPACE#something' ) #NEWLINE#
[ v [ 0 ] for v in sorted ( iter ( d . items ( ) ) , key = lambda k_v : ( - k_v [ 1 ] , k_v [ 0 ] ) ) ] #NEWLINE#
fu_list = [ ( k , fus_d . get ( k ) , fus_s . get ( k ) ) for k in fus_d . keys ( ) | fus_s ] #NEWLINE#
functools . reduce ( np . <VAR0> , ( x , y , z ) ) #NEWLINE#
return HttpResponse ( json . dumps ( results ) , content_type = 'application/json' ) #NEWLINE#
d = { int ( k ) : [ int ( i ) for i in v ] for k , v in list ( d . items ( ) ) } #NEWLINE#
w . strip ( ',.' ) . lower ( ) #NEWLINE#
re . sub ( 'Term|Term1|Term2' , '' , file_name ) #NEWLINE#
f . write ( 'new#SPACE#line\n' ) #NEWLINE#
re . sub ( '(get)' , '\\1@' , text ) #NEWLINE#
r = requests . get ( 'http://stackoverflow.com' , cookies = cj ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
r = requests . get ( 'https://api.github.com' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
df . groupby ( [ 'year' , 'bread' ] ) [ 'amount' ] . sum ( ) . reset_index ( ) #NEWLINE#
singleitem = next ( iter ( mylist ) ) #NEWLINE#
sys . exit ( ) #NEWLINE#
s = s [ : s . index ( '.zip' ) + 4 ] #NEWLINE#
str ( bytearray ( [ 17 , 24 , 121 , 1 , 12 , 222 , 34 , 76 ] ) ) #NEWLINE#
df = pd . read_csv ( 'file_path' , sep = '\t' , error_bad_lines = False ) #NEWLINE#
manager . add_command ( 'gunicorn' , GunicornServer ( ) ) #NEWLINE#
[ [ ( k , x [ k ] , y [ k ] ) for k in x if x [ k ] != y [ k ] ] for x , y in pairs if x != y ] #NEWLINE#
linalg . svd ( a [ : , : , ( 1 ) ] ) #NEWLINE#
df . sort ( [ 'date' ] ) #NEWLINE#
Book . objects . annotate ( reader_count = Count ( 'readers' ) ) . order_by ( '-reader_count' ) #NEWLINE#
a . decode ( 'latin1' ) #NEWLINE#
s += '(' + ',#SPACE#' . join ( map ( str , tup ) ) + ')' #NEWLINE#
max ( [ x for x in num_list if x < 3 ] ) #NEWLINE#
print ( function ( ) ) #NEWLINE#
super ( ModelB , self ) . save ( * args , ** kwargs ) #NEWLINE#
struct . unpack ( '<i' , bytes + ( '\x00' if bytes [ 2 ] < '\x80' else 'ÿ' ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda res , cur : { cur : res } , reversed ( 'foo/bar/baz' . split ( '/' ) ) , 1 ) #NEWLINE#
data = request . files [ 'file' ] . read ( ) #NEWLINE#
print ( dict ( new_dict ) ) #NEWLINE#
[ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] #NEWLINE#
super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
[ int ( s ) for s in str . split ( ) if s . isdigit ( ) ] #NEWLINE#
np . moveaxis ( np . indices ( ( 4 , 5 ) ) , 0 , - 1 ) #NEWLINE#
pytz . timezone ( 'Europe/Helsinki' ) . localize ( naive ) #NEWLINE#
list ( { e . id : e for e in somelist } . values ( ) ) #NEWLINE#
rdd2 = sc . parallelize ( [ ( 'foo' , 4 ) , ( 'bar' , 5 ) , ( 'bar' , 6 ) ] ) #NEWLINE#
print ( '{0:06x}' . format ( 123 ) ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 'a' , 'b' , 'c' ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
max ( A , key = A . get ) #NEWLINE#
a [ i , j ] = x #NEWLINE#
app . run ( ) #NEWLINE#
l = re . compile ( '(\\s)' ) . split ( s ) #NEWLINE#
l = re . compile ( '\\s' ) . split ( s ) #NEWLINE#
datetime . datetime ( * struct . unpack ( '>HBBBBBB' , s ) ) #NEWLINE#
model . fit ( [ X ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ dict ( zip ( keys , a ) ) for a in zip ( values [ : : 2 ] , values [ 1 : : 2 ] ) ] #NEWLINE#
plt . title ( 'Experimental#SPACE#Data' ) #NEWLINE#
df . groupby ( 'id' , as_index = False ) . head ( 2 ) #NEWLINE#
[ item for sublist in l for item in sublist ] #NEWLINE#
[ item for sublist in list_of_lists for item in sublist if valid ( item ) ] #NEWLINE#
TEMPLATE_DIRS = os . path . join ( BASE_DIR , 'cms' , 'templates' , 'allauth' ) , #NEWLINE#
plt . show ( ) #NEWLINE#
map ( int , x . split ( '#SPACE#' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ ( 'a' , 0 ) , ( 'b' , 1 ) ] , dtype = [ ( 'keys' , '|S1' ) , ( 'data' , '<i8' ) ] ) #NEWLINE#
plt . setp ( plt . xticks ( ) [ 1 ] , rotation = 30 , ha = 'right' ) #NEWLINE#
"""{:#SPACE#3d}""" . format ( x ) #NEWLINE#
my_instance = MyClass ( name = 'new#SPACE#name' ) #NEWLINE#
thestring = thestring . decode ( 'utf8' ) #NEWLINE#
df . index #NEWLINE#
tuple ( map ( int , inputstring . split ( ',' ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . write ( doc . render ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
management . call_command ( 'syncdb' , interactive = False ) #NEWLINE#
session . exec_command ( 'cd#SPACE#/home/harperville/my_scripts/' ) #NEWLINE#
fields = tuple ( field . strip ( ) for field in line . split ( ',' ) ) #NEWLINE#
date = datetime . strptime ( match . group ( ) , '%Y-%m-%d' ) . date ( ) #NEWLINE#
shutil . copyfileobj ( from_file , to_file ) #NEWLINE#
a [ ( np . arange ( a . shape [ 0 ] ) [ : , ( None ) ] ) , : , ( b2 ) ] . transpose ( 0 , 2 , 1 ) #NEWLINE#
[ x for x in d if x not in ( 'Domain#SPACE#Source' , 'Recommend#SPACE#Suppress' ) ] #NEWLINE#
lambda : setattr ( self , 'spam' , 'Ouch' ) #NEWLINE#
main ( ) #NEWLINE#
my_dict . get ( 'corse' ) and my_dict . update ( { 'corse' : 'my#SPACE#definition' } ) #NEWLINE#
print ( list ( ranges ( [ 0 , 1 , 2 , 3 , 4 , 7 , 8 , 9 , 11 ] ) ) ) #NEWLINE#
Test . objects . filter ( actions__contains = [ { 'fixed_key_3' : [ { 'key1' : 'foo2' } ] } ] ) #NEWLINE#
hashlib . sha1 ( s . encode ( 'utf-8' ) ) #NEWLINE#
df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 1 ) #NEWLINE#
{ k : v for k , v in points . items ( ) if v [ 0 ] < 5 and v [ 1 ] < 5 } #NEWLINE#
return myFunc ( lambda a , b : iadd ( a , b ) ) #NEWLINE#
any ( item . startswith ( 'qwerty' ) for item in myList ) #NEWLINE#
pl . show ( ) #NEWLINE#
self . changeB ( ) #NEWLINE#
main ( ) #NEWLINE#
return s . getsockname ( ) [ 0 ] #NEWLINE#
array ( [ 4 , 5 , 5 , 6 , 6 , 6 ] ) #NEWLINE#
re . sub ( 'foo' , 'bar' , s , 1 ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x if len ( x ) < len ( y ) else y , l ) #NEWLINE#
odeint ( dX_dt , [ 1 , 2 ] , np . linspace ( 0 , 1 , 5 ) ) #NEWLINE#
os . killpg ( self . process . pid , signal . SIGTERM ) #NEWLINE#
ax . set_zlabel ( 'Z' ) #NEWLINE#
"""words!?.,;:""" . rstrip ( '?:!.,;' ) #NEWLINE#
'%s#SPACE#%%s#SPACE#%s' % ( 'foo' , 'bar' ) #NEWLINE#
"""#SPACE#&#SPACE#""" . join ( [ '_' . join ( inp [ : 2 ] ) , '_' . join ( inp [ 2 : ] ) ] ) #NEWLINE#
fh . close ( ) #NEWLINE#
[ '' . join ( i ) for i in itertools . product ( 'ab' , repeat = 4 ) ] #NEWLINE#
qs = User . objects . filter ( groups__name__in = [ 'foo' , 'bar' ] ) #NEWLINE#
list ( range ( 0 , 100 , 5 ) ) #NEWLINE#
np . kron ( a , np . ones ( ( n , n ) ) ) #NEWLINE#
print ( string . replace ( '\\n' , '\n' ) ) #NEWLINE#
str2bool ( 'no' ) #NEWLINE#
str2bool ( 'stuff' ) #NEWLINE#
str2bool ( '1' ) #NEWLINE#
str2bool ( '0' ) #NEWLINE#
[ x for x in foo ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for x , y , z in G ] #NEWLINE#
url ( '^api/student/(?P<pk>.*)/(?P<pk2>.*)/$' , api . studentList . as_view ( ) ) , #NEWLINE#
f . write ( '%-40s#SPACE#%6s#SPACE#%10s#SPACE#%2s\n' % ( filename , type , size , modified ) ) #NEWLINE#
dt = dt . replace ( tzinfo = timezone ( 'Europe/Amsterdam' ) ) #NEWLINE#
df1 = df1 . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] ) #NEWLINE#
print ( list_duplicates ( [ 1 , 2 , 3 , 2 , 1 , 5 , 6 , 5 , 5 , 5 ] ) ) #NEWLINE#
b = np . delete ( a , i , axis = 0 ) #NEWLINE#
p = multiprocessing . Process ( target = write , args = ( 'hello' , ) ) #NEWLINE#
print ( doc . xpath ( '//element[text()="A"]' ) [ 0 ] . tag ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
my_tree [ 'a' ] [ 'b' ] [ 'c' ] [ 'd' ] [ 'e' ] = 'whatever' #NEWLINE#
my_list = [ col for row in matrix for col in row ] #NEWLINE#
print ( re . findall ( '\\bv\\w+' , thesentence ) ) #NEWLINE#
cursor . execute ( 'create#SPACE#table#SPACE#components#SPACE#(rowid#SPACE#int,name#SPACE#varchar(50))' ) #NEWLINE#
print ( soup . find_all ( 'a' , { 'class' : 'black' } ) ) #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
list ( set ( dict_a . values ( ) ) & set ( dict_b . values ( ) ) ) #NEWLINE#
a = datetime . date . today ( ) . year #NEWLINE#
map ( list , list ( totals . items ( ) ) ) #NEWLINE#
hashlib . md5 ( 'fred' . encode ( 'utf' ) ) . hexdigest ( ) #NEWLINE#
np . savetxt ( 'output.dat' , output , delimiter = ',' ) #NEWLINE#
np . argmax ( np . max ( x , axis = 1 ) ) #NEWLINE#
array ( [ 0.49482768 , 0.53013301 , 0.4485054 , 0.49516017 , 0.47034123 ] ) #NEWLINE#
reader = csv . reader ( open ( 'filename' ) , delimiter = '\t' ) #NEWLINE#
cursor . close ( ) #NEWLINE#
"""3""" . lower ( ) #NEWLINE#
my_list = list ( set ( my_list ) ) #NEWLINE#
{ { ( test | getkey ) : 'this#SPACE#works' } } #NEWLINE#
plt . show ( ) #NEWLINE#
"""{:,}""" . format ( x ) . replace ( ',' , '.' ) #NEWLINE#
mylist = [ int ( x ) for x in '3#SPACE#,2#SPACE#,6#SPACE#' . split ( ',' ) ] #NEWLINE#
isinstance ( var , ( int , float , complex ) ) #NEWLINE#
print ( '2#SPACE#+#SPACE#' + str ( integer ) + '#SPACE#=#SPACE#' + str ( rslt ) ) #NEWLINE#
plt . errorbar ( x , y , yerr = err , fmt = '-o' , markersize = 2 , color = 'k' , label = 'size#SPACE#2' ) #NEWLINE#
f . close ( ) #NEWLINE#
participants = models . ManyToManyField ( User , related_name = 'conversations' ) #NEWLINE#
subprocess . call ( [ 'chmod' , '0444' , 'path' ] ) #NEWLINE#
Student . objects . filter ( studentgroup__level__pk = 1 ) #NEWLINE#
glob . glob ( '?.gif' ) #NEWLINE#
self . path = configParser . get ( 'your-config' , 'path1' ) #NEWLINE#
print ( b [ 'indices' ] [ 'client_ind_2' ] [ 'index' ] ) #NEWLINE#
self . window . keypad ( 1 ) #NEWLINE#
sys . stdin = open ( 'simulatedInput.txt' , 'r' ) #NEWLINE#
sayhello ( 'JOHN' . lower ( ) ) #NEWLINE#
a . flatten ( ) #NEWLINE#
files . sort ( key = lambda x : os . path . getmtime ( x ) ) #NEWLINE#
df [ df . columns [ 2 : 5 ] ] #NEWLINE#
Farm . objects . filter ( tree__in = TreeQuerySet ) #NEWLINE#
team = models . ForeignKey ( 'Team' ) #NEWLINE#
int ( '11111111' , 2 ) #NEWLINE#
ax1 . ticklabel_format ( style = 'sci' , scilimits = ( 0 , 0 ) , axis = 'y' ) #NEWLINE#
"""""" . decode ( 'utf8' ) #NEWLINE#
bin ( '10' ) #NEWLINE#
t . start ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . split ( '\\s+' , line ) #NEWLINE#
IMAP4 . select ( '[Gmail]/Starred' ) #NEWLINE#
df . replace ( 0 , np . nan ) . bfill ( 1 ) . iloc [ : , ( 0 ) ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
os . listdir ( '\\networkshares\\folder1\\folder2\\folder3' ) #NEWLINE#
cherrypy . quickstart ( Root ( ) ) #NEWLINE#
df . groupby ( 'a' ) [ 'a' ] . transform ( 'count' ) #NEWLINE#
p . terminate ( ) #NEWLINE#
df . date = df . date . astype ( 'datetime64' ) #NEWLINE#
return super ( MyListView , self ) . dispatch ( request , * args , ** kwargs ) #NEWLINE#
l [ : 3 ] + l [ - 3 : ] #NEWLINE#
set ( [ 1 ] ) #NEWLINE#
len ( response . xpath ( '//div[@class="entry-content"]/p' ) ) #NEWLINE#
bytearray ( 'ÿ' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
[ 'foo' , 'bar' , 'baz' ] . index ( 'bar' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( calendar . monthrange ( now . year , now . month ) [ 1 ] ) #NEWLINE#
client . transport . write ( message ) #NEWLINE#
cell . value = statN #NEWLINE#
return [ row [ i ] for row in matrix ] #NEWLINE#
[ ( a - int ( a ) ) for a in l ] #NEWLINE#
cbar . ax . tick_params ( labelsize = 10 ) #NEWLINE#
vulnerability = models . ForeignKey ( Vuln ) #NEWLINE#
[ [ [ ( 0 ) for _ in range ( n ) ] for _ in range ( n ) ] for _ in range ( n ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'aaa' , 'bbb' , 'ccc' ] #NEWLINE#
"""\\t\\n\\v\\r""" . decode ( 'string-escape' ) #NEWLINE#
A = np . squeeze ( np . asarray ( M ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
""":""" . join ( x . encode ( 'hex' ) for x in 'Hello#SPACE#World!' ) #NEWLINE#
pd . Series ( [ np . array ( e ) [ ~ np . isnan ( e ) ] for e in x . values ] ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
User . objects . filter ( Q ( income__gte = 5000 ) | Q ( income__isnull = True ) ) #NEWLINE#
MediaItem . objects . all ( ) . order_by ( 'upload_date' ) . select_subclasses ( ) #NEWLINE#
df . set_index ( 'key' , inplace = True ) #NEWLINE#
df . groupby ( 'rounded_length' ) . mean ( ) . force #NEWLINE#
np . random . uniform ( 5 , 10 , [ 2 , 3 ] ) #NEWLINE#
sorted ( itemized_action_list , key = attrgetter ( 'priority' ) ) #NEWLINE#
numpy . savetxt ( 'output.dat' , my_array . reshape ( ( 1 , 8 ) ) , fmt = '%f#SPACE#%i#SPACE#' * 4 ) #NEWLINE#
random . choice ( string . letters ) #NEWLINE#
plt . savefig ( '/tmp/test.png' , dpi = 200 ) #NEWLINE#
return [ dict ( zip ( keys , values [ i : i + n ] ) ) for i in range ( 0 , len ( values ) , n ) ] #NEWLINE#
"""{0:16b}""" . format ( 4660 ) #NEWLINE#
"""{0:016b}""" . format ( 4660 ) #NEWLINE#
nested = { a : [ ( 1 , 'a' ) , ( 2 , 'b' ) ] , b : [ ( 3 , 'c' ) , ( 4 , 'd' ) ] } #NEWLINE#
( local_dt - datetime . datetime . utcfromtimestamp ( timestamp ) ) . seconds #NEWLINE#
res = np . zeros ( ( arr . shape [ 0 ] , m ) , arr . dtype ) #NEWLINE#
convolve_many ( [ [ 0.6 , 0.3 , 0.1 ] , [ 0.5 , 0.4 , 0.1 ] , [ 0.3 , 0.7 ] , [ 1.0 ] ] ) #NEWLINE#
np . where ( np . in1d ( values , searchvals ) ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
dictionary = dict ( zip ( List [ 0 : : 2 ] , List [ 1 : : 2 ] ) ) #NEWLINE#
plt . subplot ( '{0}{1}{2}' . format ( 1 , totfigs , i + 1 ) ) #NEWLINE#
data = { tuple ( sorted ( item ) ) for item in lst } #NEWLINE#
url ( '^$' , 'recipes.views.index' ) , #NEWLINE#
list1 = [ i for i in range ( n ) ] #NEWLINE#
df . apply ( lambda x : np . all ( x == 0 ) ) #NEWLINE#
df . plot ( x = x , y = y , style = '.' ) #NEWLINE#
sns . tsplot ( melted , time = 0 , unit = 'variable' , value = 'value' ) #NEWLINE#
{ v [ 0 ] : data [ v [ 0 ] ] for v in list ( by_ip . values ( ) ) } #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
Kid . objects . filter ( id__in = toy_owners ) #NEWLINE#
return os . stat ( path ) . st_birthtime #NEWLINE#
data = [ [ int ( v ) for v in line . split ( ) ] for line in lines ] #NEWLINE#
[ list ( l [ 0 ] ) for l in mylist ] #NEWLINE#
mySet = set ( itertools . product ( list ( range ( 1 , 51 ) ) , repeat = 2 ) ) #NEWLINE#
json . dumps ( s ) #NEWLINE#
sum ( v [ 0 ] for v in list ( d . values ( ) ) ) / float ( len ( d ) ) #NEWLINE#
datetime . datetime . combine ( dateobject , datetime . time . min ) #NEWLINE#
s . translate ( None , ',!.;' ) #NEWLINE#
numpy . array ( list ( c ) ) #NEWLINE#
pattern = re . compile ( '|' . join ( list ( d . keys ( ) ) ) ) #NEWLINE#
[ ind for ind , sub in enumerate ( totalist ) if sub [ : 2 ] == [ 'A' , 'B' ] ] #NEWLINE#
hash ( frozenset ( list ( my_dict . items ( ) ) ) ) #NEWLINE#
gems = pygame . sprite . Group ( ) #NEWLINE#
original [ : : - 1 ] #NEWLINE#
driver = webdriver . Chrome ( executable_path = '/usr/local/bin/chromedriver' ) #NEWLINE#
make_trie ( 'foo' , 'bar' , 'baz' , 'barz' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
Users . objects . filter ( id = comment . user_id ) . values_list ( 'name' , 'email' ) #NEWLINE#
sum ( [ ( x * y ) for x , y in zip ( * lists ) ] ) #NEWLINE#
result = np . zeros ( b . shape ) #NEWLINE#
df . loc [ df . xs ( 'Panning' , axis = 1 , level = 1 ) . eq ( 'Panning' ) . any ( 1 ) ] #NEWLINE#
c = [ tuple ( x + b [ i ] for i , x in enumerate ( y ) ) for y in a ] #NEWLINE#
keys , values = zip ( * list ( dictionary . items ( ) ) ) #NEWLINE#
df . write . format ( 'com.databricks.spark.csv' ) . save ( 'mycsv.csv' ) #NEWLINE#
os . listdir ( '\\\\server\x0colder\\subfolder\\etc' ) #NEWLINE#
db . commit ( ) #NEWLINE#
dict ( [ i for i in iter ( d . items ( ) ) if i [ 0 ] in validkeys ] ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
{ 'a' : '0x1' , 'c' : '0x3' , 'b' : 2.0 } #NEWLINE#
bin ( 10 ) #NEWLINE#
words = set ( open ( 'filename.txt' ) . read ( ) . split ( ) ) #NEWLINE#
rf . append_fields ( arr , 'vel' , np . arange ( 3 ) , usemask = False ) #NEWLINE#
s . split ( ) #NEWLINE#
blank_image = Image . new ( 'RGB' , ( 800 , 600 ) ) #NEWLINE#
df [ '1/2#SPACE#ID' ] = map ( lambda x : x . upper ( ) , df [ '1/2#SPACE#ID' ] ) #NEWLINE#
z = dict ( list ( x . items ( ) ) + list ( y . items ( ) ) ) #NEWLINE#
{ 'arun' : 'maya' , 'bill' : 'samantha' , 'jack' : 'ilena' , 'hari' : 'aradhana' } #NEWLINE#
re . findall ( '<wx\\.(?:.*?)>#SPACE#>' , i ) #NEWLINE#
f = lambda x : '' if x is None else x #NEWLINE#
soup = BeautifulSoup ( response . read ( ) . decode ( 'utf-8' , 'ignore' ) ) #NEWLINE#
g = df . groupby ( 'column_name' ) #NEWLINE#
f . write ( 'huzza' ) #NEWLINE#
dict ( ( itm . split ( '=' ) [ 0 ] , itm . split ( '=' ) [ 1 ] ) for itm in qstring . split ( '&' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( sys . path ) #NEWLINE#
wb . save ( 'out.xlsx' ) #NEWLINE#
df [ 'column' ] = df . apply ( lambda x : df . columns [ x . argmax ( ) ] , axis = 1 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
somelist = [ x for x in somelist if not determine ( x ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
df2 . reset_index ( ) #NEWLINE#
ax . set_xlabel ( 'Hours' ) #NEWLINE#
np . array ( g ) . astype ( np . float64 ) #NEWLINE#
len ( df . index ) #NEWLINE#
plt . show ( ) #NEWLINE#
dataframe . tz_localize ( 'UTC' , level = 0 ) #NEWLINE#
df . shift ( 365 ) . rolling ( 10 ) . B . mean ( ) #NEWLINE#
self . image . save ( 'test.jpg' , ContentFile ( content ) , save = False ) #NEWLINE#
cursor = cnx . cursor ( buffered = True ) #NEWLINE#
f . write ( s . encode ( 'utf8' ) ) #NEWLINE#
obj = json . loads ( string ) #NEWLINE#
ax1 . ticklabel_format ( axis = 'y' , style = 'sci' , scilimits = ( - 2 , 2 ) ) #NEWLINE#
np . corrcoef ( x [ 0 : len ( x ) - 1 ] , x [ 1 : ] ) [ 0 ] [ 1 ] #NEWLINE#
print ( '\n' . join ( formatted ) ) #NEWLINE#
[ i for i in Records if i [ 'Price' ] ] #NEWLINE#
rows . sort ( key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
sorted ( lst , key = lambda x : ( c [ x ] , x ) , reverse = True ) #NEWLINE#
"""""" . join ( char if char . isalpha ( ) else '#SPACE#' for char in test ) . split ( ) #NEWLINE#
pd . DataFrame ( s ) . T #NEWLINE#
print ( soup . find ( 'span' , { 'class' : 'thisClass' } ) [ 'title' ] ) #NEWLINE#
[ i for i in range ( 10 ) if i % 2 == 0 ] #NEWLINE#
stats . kstest ( np . random . normal ( 0 , 1 , 10000 ) , 'norm' ) #NEWLINE#
__init__ . py #NEWLINE#
ax . set_ylabel ( 'TPR#SPACE#or#SPACE#sensitivity' ) #NEWLINE#
srng . seed ( 902340 ) #NEWLINE#
sys . stdout . buffer . write ( 'some#SPACE#binary#SPACE#data' ) #NEWLINE#
names = [ line . strip ( ) for line in open ( 'names.txt' ) ] #NEWLINE#
background_image = Tk . PhotoImage ( file = 'C:/Desktop/logo.gif' ) #NEWLINE#
t . start ( ) #NEWLINE#
np . minimum . accumulate ( [ np . arange ( 3 ) , np . arange ( 2 , - 1 , - 1 ) , np . ones ( ( 3 , ) ) ] ) #NEWLINE#
os . path . relpath ( '/images.html' , os . path . dirname ( '/faq/index.html' ) ) #NEWLINE#
zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) #NEWLINE#
entries [ 'extensions' ] . get ( 'telephone' ) #NEWLINE#
json . dumps ( data ) . replace ( '"' , '' ) #NEWLINE#
df . grouby ( 'grp' ) . apply ( ols_res , xcols = [ 'x1' , 'x2' ] , ycol = 'y' ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_formatter ( FixedFormatter ( ll ) ) #NEWLINE#
print ( soupHandler . findAll ( 'div' , id = re . compile ( '^post-' ) ) ) #NEWLINE#
thread . exit ( ) #NEWLINE#
{ 'func1' : func1 , 'func2' : func2 , 'func3' : func3 } . get ( choice ) ( ) #NEWLINE#
super ( Model , self ) . save ( * args , ** kwargs ) #NEWLINE#
d = { k : frozenset ( v ) for k , v in list ( d . items ( ) ) } #NEWLINE#
root . mainloop ( ) #NEWLINE#
sorted ( data , key = itemgetter ( 1 ) ) #NEWLINE#
urllib . request . urlretrieve ( 'http://stackoverflow.com' , filename ) #NEWLINE#
df [ 'col_name' ] = df [ 'col_name' ] . astype ( 'category' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE.UTF-8' ) #NEWLINE#
requests . get ( 'https://www.reporo.com/' , verify = 'chain.pem' ) #NEWLINE#
"""#SPACE#""" . join ( [ i for i in word_list if i not in remove_list ] ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
print ( json . dumps ( data , indent = 2 , sort_keys = True ) ) #NEWLINE#
get_format_vars ( 'hello#SPACE#%(foo)s#SPACE##SPACE#there#SPACE#%(bar)s' ) #NEWLINE#
middle_name = models . CharField ( max_length = 30 , null = True , blank = True ) #NEWLINE#
df [ df [ 'A' ] . str . contains ( 'hello' ) ] #NEWLINE#
reactor . run ( ) #NEWLINE#
df . head ( 3 ) #NEWLINE#
L = [ L [ i ] for i in ndx ] #NEWLINE#
print ( ssl . get_server_certificate ( ( 'server.test.com' , 443 ) ) ) #NEWLINE#
time . strftime ( '%X#SPACE#%x#SPACE#%Z' ) #NEWLINE#
variable = input ( 'input#SPACE#something!:#SPACE#' ) #NEWLINE#
is_pangram = lambda s : not set ( 'abcdefghijklmnopqrstuvwxyz' ) - set ( s . lower ( ) ) #NEWLINE#
"""{:,}""" . format ( 12345678.46 ) #NEWLINE#
yourdate = dateutil . parser . parse ( datestring ) #NEWLINE#
[ 1 , 2 ] #NEWLINE#
pd . concat ( [ rng0 , rng1 , rng2 , rng3 , rng4 , rng5 ] , axis = 1 ) . T . plot ( ) #NEWLINE#
[ ( 'okay' , 5 ) , ( 'bla' , 5 ) ] #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
x = np . maximum ( x , y ) #NEWLINE#
list ( flatten ( elements ) ) #NEWLINE#
df [ [ 'b' , 'c' ] ] . iloc [ [ 2 , 4 ] ] . mean ( axis = 0 ) #NEWLINE#
conn = MySQLdb . connect ( charset = 'utf8' , init_command = 'SET#SPACE#NAMES#SPACE#UTF8' ) #NEWLINE#
df . set_index ( [ 'row_id' , 'Game_ID' ] ) . unstack ( level = 0 ) . sortlevel ( level = 1 , axis = 1 ) #NEWLINE#
[ '235/40/17' , '285/30/18' , '315/25/19' , '275/30/19' , '285/30/19' ] #NEWLINE#
l = [ map ( int , line . split ( ',' ) ) for line in f if line . strip ( ) != '' ] #NEWLINE#
logging . getLogger ( 'requests' ) . setLevel ( logging . WARNING ) #NEWLINE#
mylen ( 'áéíóú' ) #NEWLINE#
self . __class__ . __name__ #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
f . close ( ) #NEWLINE#
self . _socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
sns . set ( font = 'Verdana' ) #NEWLINE#
word [ 1 : ] #NEWLINE#
txt . replace ( '\n' , '\r\n' ) #NEWLINE#
df . drop ( df . columns [ df . columns . str . match ( 'chair' ) ] , axis = 1 ) #NEWLINE#
re . findall ( '\\w+=".*?"' , comp ) #NEWLINE#
my_handler = logging . StreamHandler ( sys . stdout ) #NEWLINE#
open ( filename , mode = 'rb' , compresslevel = 9 ) #NEWLINE#
print ( date . today ( ) . year + 1 ) #NEWLINE#
df . apply ( lambda x : np . sqrt ( x . dot ( x ) ) , axis = 1 ) #NEWLINE#
super ( otherclass , self ) . __init__ ( ) #NEWLINE#
p_value = pd . DataFrame ( np . zeros ( ( 2 , 2 ) , dtype = 'float' ) , columns = df . columns ) #NEWLINE#
print ( str ( 2 ) + str ( 1 ) ) #NEWLINE#
"""""" . join ( '%02x' % i for i in input ) #NEWLINE#
designs = Design . objects . filter ( author__user__profile__screenname__icontains = w ) #NEWLINE#
d = dict ( ( y , x ) for x , y in enumerate ( t ) ) #NEWLINE#
zip ( * s ) [ 0 ] #NEWLINE#
np . array ( [ 'a' , 'b' ] ) != 0 #NEWLINE#
url ( '^api/' , include ( 'api.tasks.urls' ) , name = 'my-api-root' ) , #NEWLINE#
list ( chain . from_iterable ( list_of_lists ) ) #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
return df . groupby ( 'A' ) . apply ( my_func ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
datetime . datetime . now ( ) #NEWLINE#
r = requests . post ( 'http://httpbin.org/post' , files = { 'report.xls' : open ( #NEWLINE# 'report.xls' , 'rb' ) } ) #NEWLINE#
np . concatenate ( ( a , val ) ) #NEWLINE#
""",""" . join ( str ( item ) for innerlist in outerlist for item in innerlist ) #NEWLINE#
a . resample ( '15S' , loffset = '5S' ) #NEWLINE#
x [ 'result' ] . fillna ( False , inplace = True ) #NEWLINE#
print ( soup . find ( 'span' , { 'class' : 'UserName' } ) . text ) #NEWLINE#
re . match ( '.*?([0-9]+)$' , s ) . group ( 1 ) #NEWLINE#
print ( [ '' . join ( p ) for i in range ( 1 , len ( s ) + 1 ) for p in permutations ( s , i ) ] ) #NEWLINE#
( '%.2f' % 1.2333333 ) . replace ( '.' , ',' ) #NEWLINE#
map ( partial ( f , x ) , y ) == map ( f , [ x ] * len ( y ) , y ) #NEWLINE#
print ( data . split ( '\n' ) ) #NEWLINE#
handles , labels = ax . get_legend_handles_labels ( ) #NEWLINE#
a , b , c = ( int ( i ) for i in line . split ( ) ) #NEWLINE#
Y = X - X . mean ( axis = 1 ) . reshape ( - 1 , 1 ) #NEWLINE#
fig . savefig ( 'plotcircles2.png' ) #NEWLINE#
f . close ( ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'df' , where = 'A=["foo","bar"]#SPACE#&#SPACE#B=1' ) #NEWLINE#
data_xls . to_csv ( 'csvfile.csv' , encoding = 'utf-8' , index = False ) #NEWLINE#
os . path . isdir ( 'bob' ) #NEWLINE#
sys . path . insert ( 1 , os . path . dirname ( os . path . realpath ( __file__ ) ) ) #NEWLINE#
print ( ',' . join ( '-' . join ( map ( str , ( g [ 0 ] [ 1 ] , g [ - 1 ] [ 1 ] ) [ : len ( g ) ] ) ) for g in G ) ) #NEWLINE#
bool ( re . match ( 'el' , 'Hello' , re . I ) ) #NEWLINE#
sys . stdout . write ( '\x1b[D#SPACE#\x1b[D' ) #NEWLINE#
fts . Rules [ 1 ] . create_filter ( 'name_1' , '>=' , '0' ) #NEWLINE#
self . assertEqual ( iline , 'it#SPACE#is#SPACE#a#SPACE#test!' ) #NEWLINE#
"""""" . join ( [ a [ : : - 1 ] [ i : i + 2 ] [ : : - 1 ] for i in range ( 0 , len ( a ) , 2 ) ] ) #NEWLINE#
df . pivot_table ( 'baz' , [ 'foo' , 'extra' ] , 'bar' ) . reset_index ( ) #NEWLINE#
map ( list , zip ( charlist , numlist ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'x' , 'd' , 'e' , 'f' , 'x' , 'g' , 'h' , 'i' , 'x' , 'j' ] #NEWLINE#
set ( [ os . path . split ( x ) [ 0 ] for x in zf . namelist ( ) if '/' in x ] ) #NEWLINE#
re . split ( '[^A-Za-z#SPACE#]|#SPACE##SPACE#' , 'Are#SPACE#you#SPACE#9#SPACE#years#SPACE#old?' ) [ 0 ] . strip ( ) #NEWLINE#
np . hstack ( b ) #NEWLINE#
ITEM_PIPELINES = [ 'myproject.pipelines.somepipeline' ] #NEWLINE#
test [ numpy . logical_or . reduce ( [ ( test [ : , ( 1 ) ] == x ) for x in wanted ] ) ] #NEWLINE#
results = [ s for s in strings if any ( m in s for m in matchers ) ] #NEWLINE#
cookie = flask . request . cookies . get ( 'my_cookie' ) #NEWLINE#
s . sendmail ( FROMADDR , TOADDR + CCADDR , msg . as_string ( ) ) #NEWLINE#
ndb . StringProperty ( repeated = True ) #NEWLINE#
multi_level_dict ( 'ab' , 'AB' , '12' ) #NEWLINE#
reverse_lst = lst [ : : - 1 ] #NEWLINE#
map ( int , myString . split ( ',' ) ) #NEWLINE#
ax1 . set_xticklabels ( [ ] ) #NEWLINE#
seats = Seat . query . filter ( Seat . invite_id != None ) . all ( ) #NEWLINE#
df [ 'match' ] = df [ 'col1' ] . diff ( ) . eq ( 0 ) #NEWLINE#
del list [ - n : ] #NEWLINE#
arr = [ [ ] , [ ] ] #NEWLINE#
str . join ( '\n' , map ( str , result ) ) #NEWLINE#
mystring . split ( '_' ) [ 4 ] #NEWLINE#
yourstring = receivedbytes . decode ( 'utf-8' ) #NEWLINE#
[ cryptogen . random ( ) for i in range ( 3 ) ] #NEWLINE#
print ( content . encode ( 'latin1' ) . decode ( 'utf8' ) ) #NEWLINE#
np . where ( np . in1d ( a , b ) ) #NEWLINE#
dict ( zip ( * ( [ iter ( l ) ] * 2 ) ) ) #NEWLINE#
print ( requests . post ( 'http://httpbin.org/post' , data = xml , headers = headers ) . text ) #NEWLINE#
L [ : ] = new_list #NEWLINE#
{ 'delicious_apples' : { 'green_apples' : 2 } , 'green_pear' : 4 , 'brown_muffins' : 5 } #NEWLINE#
return strg [ n : ] + strg [ : n ] #NEWLINE#
plt . xlabel ( 'X' ) #NEWLINE#
df [ ~ df . applymap ( np . isreal ) . all ( 1 ) ] #NEWLINE#
print ( '[{0!r}]#SPACE#({0:_^15})' . format ( s [ : 5 ] ) ) #NEWLINE#
b = [ int ( i != 0 ) for i in a ] #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
print ( proc . communicate ( ) [ 0 ] ) #NEWLINE#
names = [ description [ 0 ] for description in cursor . description ] #NEWLINE#
obj = [ ( 'Even' if i % 2 == 0 <STR0> 'Odd' ) for i in range ( 10 ) ] #NEWLINE#
df . set_index ( 'b' ) #NEWLINE#
matplotlib . rcParams . update ( { 'font.size' : 22 } ) #NEWLINE#
df = xl . parse ( 'Sheet1' , header = None ) #NEWLINE#
plt . savefig ( 'fig.pgf' ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . diff ( index ) / np . timedelta64 ( 1 , 'm' ) #NEWLINE#
print ( '{0}#SPACE#-->#SPACE#{1}' . format ( num , result ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( k , v ) for k , v in list ( points . items ( ) ) if all ( x < 5 for x in v ) ) #NEWLINE#
inlinkDict [ docid ] = adoc [ 1 : ] #NEWLINE#
a . encode ( 'utf-8' ) #NEWLINE#
( x * x for x in range ( 10 ) ) #NEWLINE#
data1 . groupby ( [ 'Bool' , 'Dir' ] ) . apply ( lambda x : x [ 'Data' ] . cumsum ( ) ) #NEWLINE#
print ( re . findall ( '\\d+' , re . findall ( '«([\\s\\S]*?)»' , text ) [ 0 ] ) ) #NEWLINE#
df = pd . read_sql_query ( 'select#SPACE#*#SPACE#from#SPACE#"Stat_Table"' , con = engine ) #NEWLINE#
re . sub ( '#SPACE#(?=(?:[^"]*"[^"]*")*[^"]*$)' , '' , s ) #NEWLINE#
style = xlwt . easyxf ( 'font:#SPACE#bold#SPACE#1,height#SPACE#280;' ) #NEWLINE#
main ( ) #NEWLINE#
singleitem = mylist [ - 1 ] #NEWLINE#
rightmost = re . compile ( '^Path=' ) . sub ( '' , fullPath ) #NEWLINE#
requests . get ( 'https://httpbin.org/headers' ) #NEWLINE#
dparser . parse ( 'monkey#SPACE#10/01/1980#SPACE#love#SPACE#banana' , fuzzy = True , dayfirst = True ) #NEWLINE#
df . index = [ '/' . join ( i ) for i in df . index ] #NEWLINE#
[ ( '%s+%s' % x ) for x in zip ( a , b ) ] #NEWLINE#
sorted ( results , key = lambda x : x [ 'year' ] ) #NEWLINE#
[ ( 0 , 's' ) , ( - 1 , 'tackoverflow#SPACE#is' ) , ( 1 , 'o#SPACE#is#SPACE#very' ) , ( 0 , '#SPACE#cool' ) ] #NEWLINE#
cherrypy . quickstart ( Root ( ) ) #NEWLINE#
len ( dict [ key ] ) #NEWLINE#
array . append ( [ int ( x ) for x in line . split ( ) ] ) #NEWLINE#
p . communicate ( 'continue' ) #NEWLINE#
[ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ] #NEWLINE#
pd . DataFrame ( df . to_records ( ) ) #NEWLINE#
pd . get_dummies ( df [ 'Speed' ] ) #NEWLINE#
verts = [ [ ( 0 ) for x in range ( 100 ) ] for y in range ( 10 ) ] #NEWLINE#
createDict ( 'foo' , 'bar' ) #NEWLINE#
env . Program ( 'test' , Glob ( '*.cpp' ) ) #NEWLINE#
{ k : v for k , v in zip ( range ( 1 , 5 ) , count ( 7 ) ) } #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
store . select ( 'df' , columns = [ 'A' ] ) #NEWLINE#
pd . value_counts ( d [ [ 'col_title1' , 'col_title2' ] ] . values . ravel ( ) ) #NEWLINE#
main ( sys . argv [ 1 : ] ) #NEWLINE#
"""^[A-Za-z0-9._~()'!*:@,;+?-]*$""" #NEWLINE#
formatted . columns = [ x . strip ( ) . replace ( '#SPACE#' , '_' ) for x in formatted . columns ] #NEWLINE#
date = models . DateTimeField ( default = datetime . now , blank = True ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
A = [ [ ( 0 ) for i in range ( n ) ] for j in range ( 2 ** n ) ] #NEWLINE#
x = float ( x ) #NEWLINE#
"""{0:f}""" . format ( x / y ) #NEWLINE#
c = ',#SPACE#' . join ( '{}={}' . format ( * t ) for t in zip ( a , b ) ) #NEWLINE#
conn = sqlite3 . connect ( 'C:\\users\\guest\\desktop\\example.db' ) #NEWLINE#
sorted ( test , key = lambda x : isinstance ( x , list ) and len ( x ) or 1 ) #NEWLINE#
pd . Series ( [ pd . Timestamp ( '2014-01-02' ) , 'THU' , 'THU' ] ) #NEWLINE#
df [ 'Weekday' ] . loc [ 1 ] #NEWLINE#
G . add_edge ( 0 , 1 , likes = [ 'milk' , 'oj' ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( json . dumps ( 'Б' , ensure_ascii = False ) ) #NEWLINE#
files = [ file for file in files if not file . endswith ( ( '.dat' , '.tar' ) ) ] #NEWLINE#
df [ 'Population' ] . str . replace ( '(?!^)(?=(?:\\d{3})+$)' , ',' ) #NEWLINE#
print ( request . form [ 'username' ] ) #NEWLINE#
creatures [ 'birds' ] [ 'eagle' ] [ 'female' ] += 1 #NEWLINE#
fig . show ( ) #NEWLINE#
( ( a [ : , ( np . newaxis ) , : ] - v ) ** 2 ) . sum ( axis = - 1 ) . shape #NEWLINE#
stdscr . getch ( ) #NEWLINE#
df . groupby ( 'type' ) . apply ( foo ) #NEWLINE#
plt . show ( ) #NEWLINE#
entries [ 'extensions' ] . get ( 'telephone' , '' ) #NEWLINE#
print ( datetime . datetime . now ( EST ( ) ) ) #NEWLINE#
content = browser . find_element_by_id ( 'content' ) #NEWLINE#
n = np . sqrt ( np . einsum ( 'ij,ij->i' , a , a ) ) #NEWLINE#
print ( int ( '' . join ( str ( x ) for x in [ 7 , 7 , 7 , 7 ] ) ) ) #NEWLINE#
dict ( ( name , eval ( name ) ) for name in list_of_variable_names ) #NEWLINE#
session . query ( Base ) . join ( Base . owner ) . order_by ( Player . name ) #NEWLINE#
cv2 . putText ( image , 'Hello#SPACE#World!!!' , ( x , y ) , cv2 . FONT_HERSHEY_SIMPLEX , 2 , 255 ) #NEWLINE#
( array_2d == row ) . all ( - 1 ) . sum ( ) #NEWLINE#
sorted ( [ True , False , False ] ) #NEWLINE#
random . sample ( range ( len ( mylist ) ) , sample_size ) #NEWLINE#
array ( [ [ 0 , 1 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 1 , 0 ] ] ) #NEWLINE#
os . path . splitext ( 'name.fasta' ) [ 0 ] + '.aln' #NEWLINE#
np . argmax ( np . max ( x , axis = 0 ) ) #NEWLINE#
pd . crosstab ( a , [ b , c ] , rownames = [ 'a' ] , colnames = [ 'b' , 'c' ] , dropna = False ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ df . index . levels [ 0 ] . isin ( [ int ( i ) for i in stk_list ] ) ] #NEWLINE#
"""#SPACE#""" . join ( w [ : : - 1 ] for w in s . split ( ) ) #NEWLINE#
string2 . replace ( '' , string1 ) #NEWLINE#
qualifier = os . environ [ 'QUALIFIER' ] #NEWLINE#
df . groupby ( 'id1' ) . apply ( func ) #NEWLINE#
mylist . sort ( key = itemgetter ( 'mc_no' ) ) #NEWLINE#
df . show ( ) #NEWLINE#
cv . ShowImage ( 'pil2ipl' , cv_img ) #NEWLINE#
new_string = re . sub ( '[^{}]+' . format ( printable ) , '' , the_string ) #NEWLINE#
print ( '#SPACE#' . join ( [ function ( word ) for word in split ] ) ) #NEWLINE#
output = open ( 'output_test_file.txt' , 'w' ) #NEWLINE#
process . stdin . flush ( ) #NEWLINE#
np . vstack ( counts_array ) #NEWLINE#
ax . xaxis . set_major_locator ( ticker . LogLocator ( numticks = 6 ) ) #NEWLINE#
datetime . datetime ( 2012 , 4 , 1 , 0 , 0 ) . timestamp ( ) #NEWLINE#
re . findall ( '#SPACE#+|[^#SPACE#]+' , s ) #NEWLINE#
df [ ~ df . col . str . startswith ( ( 't' , 'c' ) ) ] #NEWLINE#
qs = User . objects . filter ( groups__name__in = [ 'foo' ] ) #NEWLINE#
shift ( [ 1 , 2 , 3 ] , 14 ) #NEWLINE#
[ list ( x ) for x in zip ( * sorted ( zip ( list1 , list2 ) , key = itemgetter ( 0 ) ) ) ] #NEWLINE#
np . ndarray ( ( 2 , 3 ) , dtype = object ) #NEWLINE#
print ( '▲' ) #NEWLINE#
d [ 'js' ] . append ( { 'other' : 'thing' } ) #NEWLINE#
date_time_secs = time . mktime ( datetimeobj . timetuple ( ) ) #NEWLINE#
"""One#SPACE#hundred#SPACE#and#SPACE#twenty#SPACE#three#SPACE#with#SPACE#three#SPACE#leading#SPACE#zeros#SPACE#{0:06}.""" . format ( 123 ) #NEWLINE#
os . makedirs ( path_directory ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#foo#SPACE#WHERE#SPACE#bar#SPACE#=#SPACE#%s#SPACE#AND#SPACE#baz#SPACE#=#SPACE#%s' % ( param1 , param2 ) ) #NEWLINE#
df [ 'dist' ] . median ( ) #NEWLINE#
{ 'E' : 2 , 'D' : 1 , 'G' : 2 , 'F' : 4 , 'A' : 4 , 'C' : 3 , 'B' : 0 } #NEWLINE#
float ( '{0}.{1}' . format ( a [ 0 ] , '' . join ( str ( n ) for n in a [ 1 : ] ) ) ) #NEWLINE#
m [ : , ( 0 ) ] . reshape ( 5 , 1 ) . shape #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
words = line . split ( ) #NEWLINE#
my_list = [ [ 1 , 2 , 3 ] , [ 'a' , 'b' ] , [ 5 , 6 , 7 ] ] #NEWLINE#
print ( '' . join ( x [ : : - 1 ] for x in pattern . split ( string ) ) ) #NEWLINE#
{ 'geneid' : 'bye' , 'tx_id' : 'NR439' , 'col_name1' : '4.5' , 'col_name2' : 6.7 } #NEWLINE#
queryset . filter ( created_at__gte = datetime . date . today ( ) ) #NEWLINE#
fileObject = open ( 'countable#SPACE#nouns#SPACE#raw.txt' , 'rt' , encoding = 'utf8' ) #NEWLINE#
print ( datetime . utcnow ( ) . strftime ( '%Y%m%d%H%M%S%f' ) ) #NEWLINE#
os . getpid ( ) #NEWLINE#
print ( '' . join ( chr ( ord ( 'A' ) + i ) if b else '#SPACE#' for i , b in enumerate ( bools ) ) ) #NEWLINE#
print ( 'Ð°Ð±Ð²Ð³Ð´' ) #NEWLINE#
numpy . nonzero ( ( a > 3 ) & ( a < 8 ) ) #NEWLINE#
[ [ 'a' , 'b' ] , [ 'ab' ] , [ 'abc' ] ] #NEWLINE#
df [ 'mnth_yr' ] = df [ 'date_column' ] . apply ( lambda x : x . strftime ( '%B-%Y' ) ) #NEWLINE#
print ( mystring . split ( '#SPACE#' ) ) #NEWLINE#
df . filter ( 'dt_mvmt#SPACE#is#SPACE#NULL' ) #NEWLINE#
next ( i for i , v in enumerate ( l ) if is_odd ( v ) ) #NEWLINE#
parser . add_argument ( 'host' , nargs = 1 , help = 'ip#SPACE#address#SPACE#to#SPACE#lookup' ) #NEWLINE#
smtp . sendmail ( send_from , send_to , msg . as_string ( ) ) #NEWLINE#
print ( list ( sk . d . items ( ) ) ) #NEWLINE#
pd . to_numeric ( df [ 'y' ] , errors = 'coerce' ) #NEWLINE#
workbook = xlsxwriter . Workbook ( 'demo.xlsx' ) #NEWLINE#
et . write ( 'file_new.xml' ) #NEWLINE#
df . iloc [ df . groupby ( [ 'Mt' ] ) . apply ( lambda x : x [ 'count' ] . idxmax ( ) ) ] #NEWLINE#
return super ( MyModelAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
plt . scatter ( x , y , color = c ) #NEWLINE#
plt . show ( ) #NEWLINE#
settings . py #NEWLINE#
int . from_bytes ( 'yÌ¦»' , byteorder = 'big' ) #NEWLINE#
print ( pd . Series ( df . values . tolist ( ) , index = df . index ) ) #NEWLINE#
[ [ random . random ( ) for x in range ( N ) ] for y in range ( N ) ] #NEWLINE#
return [ d for d in list1 if ( d [ 'classname' ] , d [ 'testname' ] ) not in check ] #NEWLINE#
pd . to_datetime ( pd . Series ( [ '05/23/2005' ] ) ) #NEWLINE#
set ( alllists ) . difference ( set ( subscriptionlists ) ) #NEWLINE#
delete_module ( 'psyco' , [ 'Psycho' , 'KillerError' ] ) #NEWLINE#
print ( '<%.*s>' % ( len ( text ) - 2 , text ) ) #NEWLINE#
print ( wn . synset ( 'main_course.n.01' ) . lemma_names ) #NEWLINE#
return super ( MyModelViewSet , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
df = pandas . read_csv ( f1 , converters = { 'stats' : CustomParser } , header = 0 ) #NEWLINE#
writer . writerow ( [ 'Date' , 'Time' , 'User' ] ) #NEWLINE#
afc = { 'Baltimore#SPACE#Ravens' : ( 10 , 3 ) , 'Pb#SPACE#Steelers' : ( 3 , 4 ) } #NEWLINE#
dict ( "{'key1':#SPACE#'value1'}" ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . system ( 'xdg-open#SPACE#"%s"' % foldername ) #NEWLINE#
call ( [ 'echo' , '\x07' ] ) #NEWLINE#
[ values for key , values in list ( rev_multidict . items ( ) ) if len ( values ) > 1 ] #NEWLINE#
start_delta = datetime . timedelta ( days = weekday , weeks = 1 ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
pd . concat ( [ df_current , df_future ] ) . sort_index ( ) #NEWLINE#
bin ( _ ) #NEWLINE#
a = a . reshape ( ( m , n ) ) . T #NEWLINE#
result = [ list ( someListOfElements ) for _ in range ( x ) ] #NEWLINE#
x = list ( set ( x ) ) #NEWLINE#
document . getElementById ( 'geolocation' ) . submit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( all ( lst [ i ] . lower ( ) < lst [ i + 1 ] . lower ( ) for i in range ( len ( lst ) - 1 ) ) ) #NEWLINE#
len ( [ x for x in s if x [ 'success' ] ] ) #NEWLINE#
max ( l , key = lambda x : ( x [ 1 ] , random . random ( ) ) ) #NEWLINE#
bin ( 6 ) [ 2 : ] . zfill ( 8 ) #NEWLINE#
"""foo#SPACE#is#SPACE#{foo},#SPACE#bar#SPACE#is#SPACE#{bar}#SPACE#and#SPACE#baz#SPACE#is#SPACE#{baz}""" . format ( ** d ) #NEWLINE#
dict ( zip ( it , it ) ) #NEWLINE#
data . apply ( lambda r : sorted ( r ) , axis = 1 ) . drop_duplicates ( ) #NEWLINE#
STATICFILES_DIRS = os . path . join ( BASE_DIR , 'app' ) , #NEWLINE#
sum ( int ( c ) for c in strs if c . isdigit ( ) ) #NEWLINE#
print ( text . encode ( 'utf-8' ) ) #NEWLINE#
arr [ np . maximum . accumulate ( np . isnan ( arr ) , axis = 1 ) ] = np . nan #NEWLINE#
n = [ ( i if i . startswith ( 'h' ) else 'http' + i ) for i in n ] #NEWLINE#
writer . writerow ( [ val ] ) #NEWLINE#
cursor . execute ( sql_and_params [ 0 ] , sql_and_params [ 1 : ] ) #NEWLINE#
'%3d\t%s' % ( 42 , 'the#SPACE#answer#SPACE#to#SPACE#...' ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
print ( df . head ( ) ) #NEWLINE#
print ( os . path . basename ( sys . argv [ 0 ] ) ) #NEWLINE#
plt . savefig ( 'scatter_line.png' , dpi = 80 ) #NEWLINE#
urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) #NEWLINE#
{ { a_date | date ( 'F' ) } } #NEWLINE#
res = re . findall ( '-(?!(?:aa|bb)-)(\\w+)(?=-)' , s ) #NEWLINE#
entries_list = Recipes . objects . order_by ( '-id' ) [ 0 : 10 ] #NEWLINE#
plt . show ( ) #NEWLINE#
ax2 . set_ylabel ( 'Sv' ) #NEWLINE#
format ( f , '.2f' ) . rstrip ( '0' ) . rstrip ( '.' ) #NEWLINE#
self . somevalue = somevalue #NEWLINE#
plt . show ( ) #NEWLINE#
pairs = dict ( [ match . split ( ':' , 1 ) for match in matches ] ) #NEWLINE#
df [ 'datestart' ] = pd . to_datetime ( df [ 'datestart' ] , coerce = True ) #NEWLINE#
sys . getsizeof ( 'this#SPACE#also' ) #NEWLINE#
rufus = Dog ( name = 'Rufus' , breeds = [ 'spaniel' , 'terrier' , 'labrador' ] ) #NEWLINE#
[ x for i in range ( len ( l ) ) for x in l [ i ] ] #NEWLINE#
f = open ( 'user_ids' , 'r' ) #NEWLINE#
print ( ',#SPACE#' . join ( words ) ) #NEWLINE#
np . vstack ( dat_list ) #NEWLINE#
max ( l , key = lambda x : x [ 1 ] + random . random ( ) ) #NEWLINE#
df . xs ( 'size' , axis = 1 , level = 1 ) #NEWLINE#
int ( '08' , 10 ) #NEWLINE#
self . date = d . replace ( tzinfo = pytz . utc ) #NEWLINE#
a . insert ( 0 , a . pop ( ) ) #NEWLINE#
key = lambda d : d . get ( 'rank' , float ( 'inf' ) ) #NEWLINE#
new = np . reshape ( a , ( - 1 , ncols ) ) #NEWLINE#
x [ np . arange ( x . shape [ 0 ] ) [ ... , None ] , y ] #NEWLINE#
min ( list ( range ( len ( values ) ) ) , key = lambda i : ( values [ i ] , - i ) ) #NEWLINE#
gtk . main ( ) #NEWLINE#
"""""" . join ( [ c for c in string if c != "'" ] ) #NEWLINE#
print ( '#SPACE#' . join ( [ '{0:b}' . format ( x ) for x in a_bytes ] ) ) #NEWLINE#
df . plot ( ax = ax , kind = 'bar' , legend = False ) #NEWLINE#
file2 . write ( '#SPACE#' . join ( buffer ) ) #NEWLINE#
<STR0> ( pred ( x ) for x in lst ) #NEWLINE#
timestamp = dt . replace ( tzinfo = timezone . utc ) . timestamp ( ) #NEWLINE#
setattr ( Person , '__mro__' , ( Person , Friendly , object ) ) #NEWLINE#
print ( [ x for x in A if all ( y in x for y in B ) ] ) #NEWLINE#
os . startfile ( 'file.txt' ) #NEWLINE#
plt . show ( ) #NEWLINE#
'%012d' % random . randrange ( 10 ** 12 ) #NEWLINE#
ax . set_xticklabels ( xlbls ) #NEWLINE#
cursor . execute ( 'ATTACH#SPACE#"/path/to/main.sqlite"#SPACE#AS#SPACE#master' ) #NEWLINE#
return HttpResponseRedirect ( '/splash/' ) #NEWLINE#
np . transpose ( [ list1 , list2 , list3 ] ) #NEWLINE#
fout . write ( binascii . unhexlify ( '' . join ( line . split ( ) ) ) ) #NEWLINE#
type ( iter ( d . values ( ) ) ) #NEWLINE#
url ( '^so/(?P<required>\\d+)/' , include ( 'myapp.required_urls' ) ) #NEWLINE#
nltk . tokenize . word_tokenize ( 'Hello,#SPACE#world.' ) #NEWLINE#
int ( text_widget . index ( 'end-1c' ) . split ( '.' ) [ 0 ] ) #NEWLINE#
df = df / df . max ( ) . astype ( np . float64 ) #NEWLINE#
print ( '{0}#SPACE#{0}' . format ( s [ : 5 ] ) ) #NEWLINE#
"""^org/(?P<company_name>\\w+)/$""" #NEWLINE#
elem . find ( './/number[@topic="sys/phoneNumber/1"]' ) #NEWLINE#
conn . commit ( ) #NEWLINE#
sorted ( dic , key = lambda x : dic [ x ] . get ( 'Fisher' , float ( 'inf' ) ) ) #NEWLINE#
json . dumps ( separators = ( ',' , ':' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
words = [ word . replace ( '[br]' , '<br#SPACE#/>' ) for word in words ] #NEWLINE#
df1 [ 'cumcount' ] = df1 . groupby ( 'val1' ) . cumcount ( ) #NEWLINE#
print ( 'mdatetime#SPACE#=#SPACE#{}' . format ( datetime . datetime . fromtimestamp ( mtime ) ) ) #NEWLINE#
accesstoken = retdict [ 'access_token' ] #NEWLINE#
[ ( lambda x : x * i ) for i in range ( 4 ) ] #NEWLINE#
df = pd . read_sql ( sql , cnxn ) #NEWLINE#
test . __name__ #NEWLINE#
plt . show ( ) #NEWLINE#
os . isatty ( sys . stdin . fileno ( ) ) #NEWLINE#
pd . merge ( df1 , df2 , on = common_cols , how = 'inner' ) #NEWLINE#
new = df . resample ( 'T' , how = 'mean' ) #NEWLINE#
wordcount = len ( s . split ( ) ) #NEWLINE#
Tablero = array ( 'b' , [ Boardsize , Boardsize ] ) #NEWLINE#
os . system ( 'beep' ) #NEWLINE#
re . findall ( '[a-z]+' , s ) #NEWLINE#
scipy . optimize . leastsq ( residuals , p_guess , args = ( x , y ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ 0 , 1 , 0 , 1 , 0 , 1 , 0 ] , [ 2 , 3 , 2 , 3 , 2 , 3 , 2 ] ] ) #NEWLINE#
print ( decrement ( ) ) #NEWLINE#
my_array . compress ( [ ( x in [ 'this' , 'that' ] ) for x in my_array [ 'job' ] ] ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSADRAIN , old_settings ) #NEWLINE#
np . memmap ( 'test.bin' , dtype = np . dtype ( '>u2' ) , mode = 'r' ) #NEWLINE#
zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) #NEWLINE#
df . corr ( ) . mask ( np . equal . outer ( df . index . values , df . columns . values ) ) #NEWLINE#
func ( 'arg' , 'arg2' , 'some#SPACE#value' if condition else None ) #NEWLINE#
ser . write ( 'open1\r\n' ) #NEWLINE#
random . choice ( mylist ) #NEWLINE#
pd . Series ( np . searchsorted ( [ 'no' , 'yes' ] , sample . housing . values ) , sample . index ) #NEWLINE#
tuple_list = [ ( a , some_process ( b ) ) for a , b in tuple_list ] #NEWLINE#
""",#SPACE#""" . join ( str ( f ) for f in fruits ) #NEWLINE#
s . rfind ( 'l' ) #NEWLINE#
form [ 'FORM1' ] = [ 'Value1' ] #NEWLINE#
datetime . datetime . strptime ( 'Mar232012' , '%b%d%Y' ) . strftime ( '%m/%d/%Y' ) #NEWLINE#
[ { 'toto' : '1' , 'bip' : 'xyz' } , { 'toto' : '15' , 'bip' : 'abu' } ] #NEWLINE#
zeros = np . where ( a == 0 ) [ 0 ] #NEWLINE#
[ int ( i ) for i in str ( 12345 ) ] #NEWLINE#
{ { OBJNAME . get_FIELDNAME_display } } #NEWLINE#
p . stdin . close ( ) #NEWLINE#
print ( 'test#SPACE#\\u0259' . decode ( 'unicode-escape' ) ) #NEWLINE#
print ( name . decode ( 'latin-1' ) ) #NEWLINE#
f . write ( s ) #NEWLINE#
logging . error ( 'some#SPACE#error' ) #NEWLINE#
print ( 'hi' if str1 . startswith ( '"' ) and str1 . endswith ( '"' ) else 'fails' ) #NEWLINE#
test = sorted ( test , key = lambda x : len ( x ) if type ( x ) == list else 1 ) #NEWLINE#
text_file . close ( ) #NEWLINE#
sns . kdeplot ( x = points [ 'x_coord' ] , y = points [ 'y_coord' ] , ax = ax ) #NEWLINE#
sys . setrecursionlimit ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
holes = [ ( table [ i ] [ 1 ] + 1 , table [ i + 1 ] [ 0 ] - 1 ) for i in range ( len ( table ) - 1 ) ] #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( cj ) ) #NEWLINE#
time = timeit . timeit ( lambda : module . expensive_func ( data ) ) #NEWLINE#
a . update ( b ) #NEWLINE#
{ k : ( v * dict2 [ k ] ) for k , v in list ( dict1 . items ( ) ) if k in dict2 } #NEWLINE#
df . groupby ( 'deviceid' ) . apply ( after_purchase ) #NEWLINE#
json . dumps ( fu ) #NEWLINE#
zzz = 'foo' #NEWLINE#
root . title ( 'Not#SPACE#centered' ) #NEWLINE#
map . put ( key , new_value ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
dic = dict ( ( y , x ) for x , y in enumerate ( al , 1 ) ) #NEWLINE#
cursor . execute ( 'USE#SPACE#mydatabase' ) #NEWLINE#
img = cv2 . imread ( 'parking_lot.jpg' ) #NEWLINE#
text = os . linesep . join ( [ s for s in text . splitlines ( ) if s ] ) #NEWLINE#
data . loc [ 0 , 'transaction_amount' ] #NEWLINE#
[ [ 1 , 4 ] , [ 6 , 9 ] , [ 3 , 9 , 4 ] ] #NEWLINE#
print ( '#SPACE#got#SPACE#error#SPACE#of#SPACE#type#SPACE#' + str ( type ( e ) ) + '#SPACE#with#SPACE#message#SPACE#' + e . message ) #NEWLINE#
your_list = map ( int , '{:b}' . format ( your_int ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr [ [ 1 , 4 , 5 ] ] #NEWLINE#
print ( [ '-' . join ( words [ i : i + span ] ) for i in range ( 0 , len ( words ) , span ) ] ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
re . sub ( '(?<=.)(?=.)' , '-' , string ) #NEWLINE#
cherrypy . engine . start ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
map ( ord , tuple ( struct . pack ( '!I' , number ) ) ) #NEWLINE#
df . columns = pd . MultiIndex . from_tuples ( df . columns . to_series ( ) ) #NEWLINE#
contour ( im , levels = [ 245 ] , colors = 'black' , origin = 'image' ) #NEWLINE#
somelist [ : ] = [ x for x in somelist if not determine ( x ) ] #NEWLINE#
{ x [ 0 ] : len ( list ( x [ 1 ] ) ) for x in itertools . groupby ( sorted ( mylist ) ) } #NEWLINE#
np . genfromtxt ( txt , delimiter = '\t' , dtype = '6int,S20' ) #NEWLINE#
( lambda x , f : list ( y [ 1 ] for y in f ( x ) ) ) ( lst , lambda x : ( sorted ( y ) for y in x ) ) #NEWLINE#
connection . commit ( ) #NEWLINE#
sum ( a ) #NEWLINE#
re . sub ( '\\[.*\\]|\\{.*\\}' , '' , one ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
imp . find_module ( 'eggs' ) #NEWLINE#
np . split ( a , np . nonzero ( np . diff ( a ) ) [ 0 ] + 1 ) #NEWLINE#
self . button . clicked . connect ( self . calluser ) #NEWLINE#
blog . comment_set . all ( ) #NEWLINE#
cap = cv2 . VideoCapture ( 0 ) #NEWLINE#
lines = codecs . open ( 'file.txt' , 'r' , encoding = 'utf-8' ) . readlines ( ) #NEWLINE#
pandas . DataFrame ( initialload , columns = list_of_column_names ) #NEWLINE#
[ array ( [ 0 ] ) , array ( [ 47 , 48 , 49 , 50 ] ) , array ( [ 97 , 98 , 99 ] ) ] #NEWLINE#
pd . concat ( [ df , pd . DataFrame ( 0 , df . index , list ( 'cd' ) ) ] , axis = 1 ) #NEWLINE#
ax . set_xticklabels ( x ) #NEWLINE#
UserFavorite . get_by_name ( user_id , parent = a_story ) #NEWLINE#
ma . array ( a , mask = np . isnan ( a ) ) . mean ( axis = 0 ) #NEWLINE#
uni . encode ( 'utf-8' ) #NEWLINE#
[ s . strip ( ) . split ( ':#SPACE#' ) for s in data_string . splitlines ( ) ] #NEWLINE#
pd . crosstab ( df . A , df . B ) . apply ( lambda r : r / len ( df ) , axis = 1 ) #NEWLINE#
f . write ( struct . pack ( 'i' , int ( bits [ : : - 1 ] , 2 ) ) ) #NEWLINE#
pd . DataFrame ( [ record_1 ] ) #NEWLINE#
round ( float ( '23.45678' ) ) #NEWLINE#
hex ( struct . unpack ( '>H' , struct . pack ( '>h' , - 200 ) ) [ 0 ] ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
scipy . stats . hypergeom . cdf ( k , M , n , N ) #NEWLINE#
[ np . nonzero ( np . in1d ( x , c ) ) [ 0 ] for x in [ a , b , d , c ] ] #NEWLINE#
db . execute ( 'INSERT#SPACE#INTO#SPACE#json_col#SPACE#VALUES#SPACE#%s' , json_value ) #NEWLINE#
map ( lambda x : x + 2 , [ 1 , 2 , 3 ] ) #NEWLINE#
"""""" . join ( '{0:04b}' . format ( int ( c , 16 ) ) for c in hex_string ) #NEWLINE#
child . sendline ( 'python#SPACE#-V\r' ) #NEWLINE#
pd . DataFrame ( np . where ( df , 1 , 0 ) , df . index , df . columns ) #NEWLINE#
plt . show ( ) #NEWLINE#
f = lambda x , y : x + y #NEWLINE#
data = json . load ( f ) #NEWLINE#
tuple ( tup [ 0 ] for tup in A ) #NEWLINE#
datetime . fromtimestamp ( 1268816500 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( frame [ frame [ 'a' ] . isin ( mylist ) ] ) #NEWLINE#
User . query . filter_by ( hometown = 'New#SPACE#York' , university = 'USC' ) #NEWLINE#
result . extend ( re . split ( '_(?:f?or|and)_' , s ) ) #NEWLINE#
sum ( c != '#SPACE#' for c in word ) #NEWLINE#
len ( set ( a ) ) == len ( a ) #NEWLINE#
np . isnan ( a ) #NEWLINE#
np . cov ( x ) #NEWLINE#
plt . plot ( x , y , 'o' ) #NEWLINE#
np . linalg . norm ( x , ord = 1 ) #NEWLINE#
np . einsum ( 'kij->ijk' , M ) #NEWLINE#
f = open ( 'file.txt' , 'wb' ) #NEWLINE#
plt . show ( ) #NEWLINE#
zip ( [ 3 , 4 ] , [ 1 , 2 ] ) #NEWLINE#
new_dict = dict ( ( item [ 'id' ] , item ) for item in initial_list ) #NEWLINE#
ax . plot ( np . nan , '-r' , label = 'temp' ) #NEWLINE#
"""(?s)Your.*regex.*here""" #NEWLINE#
urllib . parse . quote ( #NEWLINE# '/static/media/uploads/gallery/Marrakech,#SPACE#Morocco_be3Ij2N.jpg' ) #NEWLINE#
{ 'foo' , 'bar' , 'baz' } . issubset ( list ( dct . keys ( ) ) ) #NEWLINE#
[ 1 , 4 , 5 , 6 , 7 ] #NEWLINE#
[ 'I#SPACE#am' , 'show' ] #NEWLINE#
b = bytearray ( 'BBA7F69E' . decode ( 'hex' ) ) #NEWLINE#
data = pd . DataFrame ( { 'x' : [ 1 , 2 , 3 , 0 , 0 , 2 , 3 , 0 , 4 , 2 , 0 , 0 , 0 , 1 ] } ) #NEWLINE#
inspect . getmembers ( my_module , inspect . isclass ) #NEWLINE#
sys . stdout . write ( '\x1b[1;31m' ) #NEWLINE#
s . map ( lambda x : x [ : 2 ] ) #NEWLINE#
ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
url ( '^accounts/' , include ( 'registration.backends.default.urls' ) ) , #NEWLINE#
Al = [ al1 , al2 , al3 , al4 , al5 , al6 ] #NEWLINE#
[ list ( g ) for k , g in itertools . groupby ( iterable ) ] #NEWLINE#
np . equal . reduce ( [ False , 0 , 1 ] ) #NEWLINE#
f . write ( json . dumps ( data , ensure_ascii = False ) ) #NEWLINE#
Counter ( map ( tuple , list1 ) ) #NEWLINE#
os . path . dirname ( fullpath ) #NEWLINE#
list ( range ( len ( strs ) - 1 , - 1 , - 1 ) ) #NEWLINE#
csv_file . writerows ( the_list ) #NEWLINE#
{ 'fields' : ( ( 'first_name' , 'last_name' ) , 'address' , 'city' , 'state' ) } #NEWLINE#
python - - version #NEWLINE#
np . cumsum ( np . concatenate ( ( [ 0 ] , np . bincount ( v ) ) ) ) [ v ] #NEWLINE#
[ k for k , g in groupby ( sorted ( chain . from_iterable ( iter ( content . values ( ) ) ) ) ) ] #NEWLINE#
df . groupby ( 'A' ) [ 'expand' ] . apply ( list ) #NEWLINE#
b . create_from_csv_row ( row . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
np . asarray ( [ func ( i ) for i in arr ] ) #NEWLINE#
Popen ( [ 'nice' ] ) . communicate ( ) #NEWLINE#
importlib . import_module ( 'matplotlib.text' ) #NEWLINE#
a . reset_index ( ) . merge ( b , how = 'left' ) . set_index ( 'index' ) #NEWLINE#
numpy . in1d ( a , b ) . nonzero ( ) #NEWLINE#
app . run ( host = '192.168.1.6' ) #NEWLINE#
re . sub ( ',(?=[^][]*\\])' , '' , str ) #NEWLINE#
df . fillna ( 0 ) #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
print ( '' . join ( mismatches ) ) #NEWLINE#
"""#SPACE#""" . join ( [ str ( x ) for x in t ] ) #NEWLINE#
"""foo""" . decode ( 'latin-1' ) #NEWLINE#
re . sub ( '[^-\\w]' , '#SPACE#' , 'black#white' ) #NEWLINE#
current_module = sys . modules [ __name__ ] #NEWLINE#
server . starttls ( ) #NEWLINE#
[ [ 1 , 2 , 4 , 8 ] , [ 2 , 3 , 21 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ] #NEWLINE#
dict ( OrderedDict ( [ ( 'method' , 'constant' ) , ( 'data' , '1.225' ) ] ) ) #NEWLINE#
return ( string [ 0 + i : length + i ] for i in range ( 0 , len ( string ) , length ) ) #NEWLINE#
np . hstack ( [ X , Y ] ) #NEWLINE#
plt . figure ( ) #NEWLINE#
s = re . match ( '^.*?\\.zip' , s ) . group ( 0 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
d . update ( ( k , 'value3' ) for k , v in d . items ( ) if v == 'value2' ) #NEWLINE#
int ( a . replace ( ',' , '' ) ) #NEWLINE#
words = [ word for word in string . split ( ) if len ( word ) == 3 ] #NEWLINE#
self . val2 = kwargs . get ( 'val2' , 'default#SPACE#value' ) #NEWLINE#
MyObject . all ( ) . order ( '-time' ) #NEWLINE#
env . skip_bad_hosts = True #NEWLINE#
"""my#SPACE#{0}#SPACE#string:#SPACE#{1}""" . format ( 'cool' , 'Hello#SPACE#there!' ) #NEWLINE#
not any ( my_list ) #NEWLINE#
map ( max , zip ( * alist ) ) #NEWLINE#
df [ 'depth' ] = df [ 'depth' ] . interpolate ( method = 'values' ) #NEWLINE#
Book . objects . filter ( Q ( author__id = 1 ) & Q ( author__id = 2 ) ) #NEWLINE#
wb . create_sheet ( 0 , 'Sheet1' ) #NEWLINE#
subset = [ x for x in df2 . columns if len ( x ) > 3 ] #NEWLINE#
Thread ( target = cherrypy . quickstart , args = [ Root ( ) ] ) . start ( ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
"""""" . join ( x for x in fn if x . isdigit ( ) ) #NEWLINE#
f = os . path . join ( path , f ) #NEWLINE#
df [ last_row . argsort ( ) ] #NEWLINE#
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ) #NEWLINE#
return [ ( i ** 2 ) for i in list ] #NEWLINE#
numpy . where ( mask , 1 , numpy . where ( numpy_array == 0 , 0 , 2 ) ) #NEWLINE#
df1 . resample ( '5Min' ) . sum ( ) #NEWLINE#
QApplication . desktop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
timeit . timeit ( stmt = "'hi'#SPACE#if#SPACE#True#SPACE#else#SPACE#'bye'" ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
line = line . replace ( '\t' , '#SPACE#' ) #NEWLINE#
mydict = dict ( ( rows [ 0 ] , rows [ 1 ] ) for rows in reader ) #NEWLINE#
result = '\n' . join ( '\t' . join ( map ( str , l ) ) for l in lists ) #NEWLINE#
{ 'bob' : '1' , 'ben' : '3' , 'sue' : '2' } #NEWLINE#
numpy . empty ( ( 10 , 4 , 100 ) ) #NEWLINE#
soup . select ( 'table.drug-table.data-table.table.table-condensed.table-bordered' ) #NEWLINE#
df . iloc [ df . groupby ( 'id' ) [ 'date' ] . idxmax ( ) ] #NEWLINE#
fig . savefig ( 'temp.png' ) #NEWLINE#
"""^[a-zA-Z]+/$""" #NEWLINE#
dict ( ( n , int ( v ) ) for n , v in ( a . split ( '=' ) for a in string . split ( ) ) ) #NEWLINE#
base64 . b64encode ( '1' . encode ( ) ) #NEWLINE#
int ( dt . strftime ( '%s' ) ) #NEWLINE#
{ k : v for k , v in list ( dict . items ( ) ) if v > something } #NEWLINE#
x = Popen ( [ 'netstat' , '-x' , '-y' , '-z' ] , stdout = PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
df . query ( 'b#SPACE#==#SPACE#"NaT"' ) #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
s = pd . Series ( [ 10 , 20 , 30 ] , [ 'a' , 'b' , 'c' ] ) #NEWLINE#
s = pd . Series ( [ 10 , 20 , 30 ] , [ 'x' , 'y' , 'z' ] ) #NEWLINE#
browser . addheaders = [ ( 'User-Agent' , 'Mozilla/5.0#SPACE#blahblah' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
query = db . GqlQuery ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#Entry#SPACE#WHERE#SPACE#editor#SPACE#>#SPACE#:1' , None ) #NEWLINE#
[ ( 1 , 3 ) , ( 3 , 4 ) ] #NEWLINE#
[ k for k , count in list ( Counter ( L ) . items ( ) ) if count > 1 ] #NEWLINE#
entry = [ str ( x ) for x in cols . findAll ( text = True ) ] #NEWLINE#
df = pd . DataFrame ( { 'TestData' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] } , dtype = 'float' ) #NEWLINE#
writer . writerow ( [ 'Date' , 'temperature#SPACE#1' , 'Temperature#SPACE#2' ] ) #NEWLINE#
df . Results . str . extract ( 'passed#SPACE#([0-9]+)' ) . fillna ( 0 ) #NEWLINE#
filename = 'C:\\Documents#SPACE#and#SPACE#Settings\\file' + str ( i ) + '.txt' #NEWLINE#
re . compile ( '(\\s{0,})+' ) #NEWLINE#
re . compile ( '(\\s{1,})+' ) #NEWLINE#
self . fields . pop ( 'is_staff' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . to_csv ( 'test.csv' , mode = 'a' , index = False , header = False ) #NEWLINE#
etree . tostring ( e , pretty_print = True ) #NEWLINE#
admin . site . register ( Person , PersonAdmin ) #NEWLINE#
pygame . display . set_mode ( ( 1 , 1 ) ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#LOCATION' ) #NEWLINE#
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 2 ] , reverse = True ) #NEWLINE#
y . astype ( int ) #NEWLINE#
list ( '1111' ) #NEWLINE#
df [ df . c > 0.5 ] [ [ 'b' , 'e' ] ] . values #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
result = map ( lambda x : x [ 'value' ] , test_data ) #NEWLINE#
urllib . parse . unquote ( url ) . decode ( 'utf8' ) #NEWLINE#
data = numpy . genfromtxt ( yourFileName , skiprows = n ) #NEWLINE#
send = re . findall ( '\\$([^$]*)\\$' , string ) #NEWLINE#
{ 'tags2' : [ 0 , 1 ] , 'cnt2' : 0 , 'cnt1' : 1 , 'tags1' : [ 0 , 1 , 'work' ] } #NEWLINE#
localtime ( now ( ) ) . replace ( hour = 0 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
df2 . reindex ( df . index ) #NEWLINE#
ax . set_ylabel ( 'Series' ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . findall ( '[+-]?\\d+' , '#SPACE#1#SPACE#sd#SPACE##SPACE#2#SPACE#s#SPACE#3#SPACE#sfs#SPACE#0#SPACE#-1' ) #NEWLINE#
"""""" . join ( re . findall ( '[A-Z][^A-Z]*' , s ) [ 3 : ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . savefig ( 'example.pdf' ) #NEWLINE#
df . groupby ( 'class' , group_keys = False ) . apply ( f ) #NEWLINE#
"""{a}{b}""" . format ( a = 'foo' , b = 'bar' , c = 'baz' ) #NEWLINE#
np . random . random ( ( N , N ) ) #NEWLINE#
{ k : [ x for x in v if x != 'x' ] for k , v in myDict . items ( ) } #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
glob . glob ( '?.gif' ) #NEWLINE#
[ int ( el ) for el in inputstring . split ( ',' ) ] #NEWLINE#
setattr ( i , x , f ( getattr ( i , x ) ) ) #NEWLINE#
max ( x , key = x . get ) #NEWLINE#
re . sub ( '[\\t\\n\\r]' , '#SPACE#' , '1\n2\r3\t4' ) #NEWLINE#
df [ 'B' ] = df [ 'A' ] . apply ( lambda x : '#' + x . replace ( '#SPACE#' , '' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
zip ( * sorted ( zip ( x , y ) , key = ig0 ) ) #NEWLINE#
all_challenges = session . query ( Challenge ) . join ( Challenge . attempts ) . all ( ) #NEWLINE#
return [ dictio for dictio in dictlist if dictio [ key ] in valuelist ] #NEWLINE#
[ 'QS' , '5H' , 'AS' , '2H' , '8H' , '7C' , '9H' , '5C' , 'JH' , '7D' ] #NEWLINE#
return HttpResponseRedirect ( '/core/mypage/?key=value' ) #NEWLINE#
getattr ( test , method ) #NEWLINE#
sum ( abs ( x - y ) for x , y in zip ( sorted ( xs ) , sorted ( ys ) ) ) #NEWLINE#
df [ col ] = df [ col ] . apply ( lambda i : '' . join ( i ) ) #NEWLINE#
[ [ int ( y ) for y in x ] for x in values ] #NEWLINE#
return render ( request , 'myapp/subprofile_select.html' , { 'form' : form } ) #NEWLINE#
[ OrderedDict ( ( k , d [ k ] ( v ) ) for k , v in l . items ( ) ) for l in L ] #NEWLINE#
datetime . datetime . strptime ( myDate , '%Y-%m-%d#SPACE#%H:%M:%S,%f' ) . timetuple ( ) #NEWLINE#
l = np . array ( [ list ( method ( ) . values ( ) ) for _ in range ( 1 , 11 ) ] ) #NEWLINE#
ax . xaxis . set_major_locator ( locator ) #NEWLINE#
re . split ( '(?<=\\))\\.' , '(1.2).2' ) #NEWLINE#
socket = socket . socket ( ( '127.0.0.1' , port ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
outfile . write ( infile . read ( ) ) #NEWLINE#
canvas . create_text ( x , y , font = ( 'Purisa' , rndfont ) , text = k ) #NEWLINE#
os . path . dirname ( sys . argv [ 0 ] ) #NEWLINE#
button . clicked . connect ( self . commander ( command ) ) #NEWLINE#
__init__ . py #NEWLINE#
input_str = sys . stdin . read ( ) #NEWLINE#
list_c = list_c + list_a + [ 'more' ] + list_b + [ 'var1' , 'var2' ] #NEWLINE#
print ( re . findall ( pattern , x ) ) #NEWLINE#
driver . get ( 'http://example.com' ) #NEWLINE#
"""{0:06x}""" . format ( int ( line ) ) #NEWLINE#
[ i for i , item in enumerate ( a ) if item in b ] #NEWLINE#
[ tuple ( l ) for l in nested_lst ] #NEWLINE#
thelist [ : ] = [ d for d in thelist if d . get ( 'id' ) != 2 ] #NEWLINE#
[ transform ( x ) for x in results if condition ( x ) ] #NEWLINE#
map ( lambda d : d [ 'value' ] , l ) #NEWLINE#
min ( x for x in lst if isinstance ( x , str ) ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
player . filter ( name__in = [ 'mike' , 'charles' ] ) #NEWLINE#
root . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
print ( '%d#SPACE##SPACE#%.2f' % ( count , conv ) ) #NEWLINE#
os . path . abspath ( math . __file__ ) #NEWLINE#
sum ( map ( int , l ) ) #NEWLINE#
im = Image . fromarray ( my_array ) #NEWLINE#
"""7061756c""" . decode ( 'hex' ) #NEWLINE#
interestingelts = ( x for x in oldlist if x not in [ 'a' , 'c' ] ) #NEWLINE#
re . split ( '|' . join ( re . escape ( x ) for x in list1 ) , s ) #NEWLINE#
print ( 'here#SPACE#is#SPACE#a#SPACE#number:#SPACE#' + str ( 2 ) ) #NEWLINE#
"""My#SPACE#name#SPACE#is#SPACE#{surname},#SPACE#{name}#SPACE#{surname}.#SPACE#I#SPACE#am#SPACE#{age}.""" . format ( ** locals ( ) ) #NEWLINE#
df . columns = [ 'user' , 'tweet' ] #NEWLINE#
wb . save ( 'border_test.xlsx' ) #NEWLINE#
list_ . sort ( key = lambda x : x [ 0 ] ) #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
os . path . basename ( '/folderA/folderB/folderC/folderD' ) #NEWLINE#
soup . find_all ( 'option' , { 'selected' : True } ) #NEWLINE#
do_something ( ) #NEWLINE#
[ [ ( i * j ) for i , j in zip ( * row ) ] for row in zip ( matrix1 , matrix2 ) ] #NEWLINE#
result = sorted ( iter ( promotion_items . items ( ) ) , key = lambda pair : list ( pair [ 1 #NEWLINE# ] . items ( ) ) ) #NEWLINE#
window . connect ( 'key-press-event' , fullscreen_toggler ) #NEWLINE#
[ x for x in l if not '2' in x ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
"""{0:08b}""" . format ( 6 ) #NEWLINE#
f = open ( 'file_' + str ( i ) + '.dat' , 'w' ) #NEWLINE#
print ( getpass . getuser ( ) ) #NEWLINE#
getattr ( model , fieldtoget ) #NEWLINE#
tsk = subprocess . Popen ( args , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
output . close ( ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = operator . itemgetter ( 1 , 0 ) ) #NEWLINE#
people2 = Person . objects . filter ( employee__company = 'Private' ) #NEWLINE#
{ 'pigeon' : '1' , 'hate' : '10' , 'hello' : '10' , 'would' : '5' , 'adore' : '10' } #NEWLINE#
ex . groupby ( level = 'A' ) . get_group ( 1 ) #NEWLINE#
re . split ( '(\\D+)' , s ) #NEWLINE#
"""a#SPACE#b#SPACE#c#SPACE#d#SPACE#my#SPACE#json#SPACE#expression""" . split ( maxsplit = 4 ) #NEWLINE#
print ( soupHandler . findAll ( 'div' , id = lambda x : x and x . startswith ( 'post-' ) ) ) #NEWLINE#
[ '1' , '2' , '3' , '4' , 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
foo ( ) #NEWLINE#
logging . critical ( 'This#SPACE#is#SPACE#a#SPACE#critical#SPACE#error#SPACE#message' ) #NEWLINE#
[ int ( i ) for i in str ( number ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
__init__ . py #NEWLINE#
[ 'blah' , 'bool143' , 'bool2' , 'foo' , 'foobar2000' ] #NEWLINE#
os . system ( cmd ) #NEWLINE#
"""\\1#SPACE#xby#SPACE#""" #NEWLINE#
pd . DataFrame ( a , df . index , df . columns ) #NEWLINE#
( a1 [ : , ( numpy . newaxis ) ] == a2 ) . all ( axis = 2 ) . astype ( int ) #NEWLINE#
print ( element . get_attribute ( 'innerHTML' ) ) #NEWLINE#
gtk . main ( ) #NEWLINE#
print ( yesterday . strftime ( '%m%d%y' ) ) #NEWLINE#
s1 . reset_index ( drop = True ) * s2 . reset_index ( drop = True ) #NEWLINE#
data = csv . reader ( f , delimiter = ',' , quotechar = '"' ) #NEWLINE#
df . applymap ( np . isreal ) #NEWLINE#
[ ( i * y + x ) for i in range ( 10 ) ] #NEWLINE#
df . reindex_axis ( sorted ( df . columns ) , axis = 1 ) #NEWLINE#
l = list ( set ( l ) ) #NEWLINE#
tuple ( struct . pack ( '!I' , number ) ) #NEWLINE#
p = subprocess . Popen ( cmd , stdin = subprocess . PIPE , stdout = subprocess . PIPE ) #NEWLINE#
np . savetxt ( fname = 'newPicksData.txt' , X = new_picks . astype ( int ) , fmt = '%i' ) #NEWLINE#
logging . basicConfig ( level = logging . WARN ) #NEWLINE#
logging . Formatter . __init__ ( self , msg ) #NEWLINE#
data [ 'Value' ] == 'TRUE' #NEWLINE#
[ x . start ( ) for x in re . finditer ( 'foo' , 'foo#SPACE#foo#SPACE#foo#SPACE#foo' ) ] #NEWLINE#
var . replace ( '\\' , '/' ) #NEWLINE#
number = re . search ( '\\d+' , filename ) . group ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( c . A for c in c_list ) #NEWLINE#
datetime . utcfromtimestamp ( float ( self . timestamp ) ) #NEWLINE#
return os . environ [ 'SERVER_NAME' ] in ( 'localhost' , 'www.lexample.com' ) #NEWLINE#
"""{num:0{width}}""" . format ( num = 123 , width = 6 ) #NEWLINE#
re . sub ( '\\p{P}' , lambda m : '-' if m . group ( 0 ) == '-' else '' , text ) #NEWLINE#
curses . doupdate ( ) #NEWLINE#
soup . findAll ( 'meta' , attrs = { 'name' : re . compile ( '^description$' , re . I ) } ) #NEWLINE#
pixmap4 = pixmap . scaled ( 64 , 64 , QtCore . Qt . KeepAspectRatio ) #NEWLINE#
A = A - A . multiply ( B ) #NEWLINE#
main ( ) #NEWLINE#
{ 'age' : 35 , 'dog' : { 'name' : 'Apollo' } , 'name' : 'Onur' } #NEWLINE#
[ synset . name . split ( '.' ) [ 0 ] for synset in wn . synsets ( 'dog' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'X' : 'value1' , 'Y' : 'value2' , 'Z' : [ { 'A' : 'value3' , 'B' : 'value4' } ] } #NEWLINE#
re . findall ( '#(\\w+)' , s ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
proc = subprocess . Popen ( [ 'git' , 'status' ] , stdout = subprocess . PIPE ) #NEWLINE#
revdict = dict ( ( v , k ) for k , v in list ( ref . items ( ) ) ) #NEWLINE#
zip ( * lists ) #NEWLINE#
df . drop_duplicates ( [ 'Col1' , 'Col2' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
dt . datetime . strptime ( '1985-04-12T23:20:50.52' , '%Y-%m-%dT%H:%M:%S.%f' ) #NEWLINE#
print ( re . sub ( '̯+' , '̯' , unicodedata . normalize ( 'NFKD' , s ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( k , 2 ) for k in a ) #NEWLINE#
f . close ( ) #NEWLINE#
a [ : , : : 2 ] + a [ : , 1 : : 2 ] #NEWLINE#
np . array ( list ( g ) ) #NEWLINE#
win . show_all ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr = np . arange ( 3 * 4 * 5 ) . reshape ( 3 , 4 , 5 ) #NEWLINE#
list1 . sort ( key = convert ) #NEWLINE#
[ a for a in s if s . count ( a ) == 1 ] [ 0 ] #NEWLINE#
print ( "\\I#SPACE#don't#SPACE#know#SPACE#why#SPACE#///I#SPACE#don't#SPACE#have#SPACE#the#SPACE#right#SPACE#answer\\" . strip ( '/' ) ) #NEWLINE#
numpy . nonzero ( numpy . in1d ( a , b ) ) #NEWLINE#
browser . quit ( ) #NEWLINE#
print ( '' . join ( [ str ( x ) for x in l ] ) ) #NEWLINE#
Link . objects . all ( ) . order_by ( '-popularity' ) #NEWLINE#
plt . subplots_adjust ( top = 0.75 ) #NEWLINE#
session . commit ( ) #NEWLINE#
dict ( [ ( t . __name__ , t ) for t in fun_list ] ) #NEWLINE#
x = numpy . asarray ( x , order = 'C' ) #NEWLINE#
data = json . load ( open ( 'config.json' ) , object_pairs_hook = OrderedDict ) #NEWLINE#
"""S#SPACE#H#SPACE#A#SPACE#N#SPACE#N#SPACE#O#SPACE#N#SPACE##SPACE#B#SPACE#R#SPACE#A#SPACE#D#SPACE#L#SPACE#E#SPACE#Y""" . replace ( '#SPACE##SPACE#' , '#SPACE##SPACE##SPACE#' ) [ : : 2 ] #NEWLINE#
np . squeeze ( np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) ) . shape #NEWLINE#
sorted ( temp , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
re . sub ( '\\bfoo\\b' , cased_replacer ( 'bar' ) , 'this#SPACE#is#SPACE#foo' , flags = re . I ) #NEWLINE#
list ( set ( df [ 'a' ] ) ) #NEWLINE#
l = [ x for x in l if x . strip ( ) ] #NEWLINE#
soup . find_all ( 'a' , class_ = 'sister' ) #NEWLINE#
SOCIAL_AUTH_FACEBOOK_SCOPE = [ 'email' ] #NEWLINE#
a [ np . arange ( np . shape ( a ) [ 0 ] ) [ : , ( np . newaxis ) ] , np . argsort ( a ) ] #NEWLINE#
array ( [ [ 1 , 6 ] , [ 2 , 6 ] , [ 3 , 8 ] , [ 4 , 10 ] , [ 5 , 6 ] , [ 5 , 7 ] ] ) #NEWLINE#
plt . gcf ( ) . savefig ( 'correlation.png' ) #NEWLINE#
file . write ( '\ufeff' ) #NEWLINE#
array ( [ 0 , 1 , 4 , 9 , 16 ] ) #NEWLINE#
print ( customer . xpath ( './@NAME' ) [ 0 ] ) #NEWLINE#
set ( [ i [ 1 : ] for i in line . split ( ) if i . startswith ( '#' ) ] ) #NEWLINE#
df [ 'sum' ] = df . sum ( axis = 1 ) #NEWLINE#
print ( 'Number#SPACE#is:#SPACE#%.8f' % float ( a [ 0 ] / a [ 1 ] ) ) #NEWLINE#
time . strftime ( '%x#SPACE#%X#SPACE#%z' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
c = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
b . sort ( key = lambda x : a . index ( x ) ) #NEWLINE#
np . put ( arr , np . where ( ~ np . in1d ( arr , valid ) ) [ 0 ] , 0 ) #NEWLINE#
df . groupby ( 'User' ) [ 'X' ] . filter ( lambda x : x . sum ( ) == 0 ) . index #NEWLINE#
b [ a [ 1 , 1 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
cv2 . imwrite ( './result.png' , result_image ) #NEWLINE#
re . search ( 'sample' , line ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 6 ] #NEWLINE#
z = arr [ : , ( 5 ) ] . sum ( ) #NEWLINE#
ftp . quit ( ) #NEWLINE#
data [ data . columns [ 1 : ] ] . corr ( ) [ 'special_col' ] [ : - 1 ] #NEWLINE#
[ 5 , 1 , 2 , 3 , 4 ] #NEWLINE#
htmlFile = open ( 'path#SPACE#to#SPACE#html#SPACE#file' ) . read ( ) #NEWLINE#
ast . literal_eval ( reclist ) #NEWLINE#
sorted ( d , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) ) #NEWLINE#
[ 'setUp' , 'bar' , 'baz' , 'var1' , 'var2' , 'var3' , 'var4' ] #NEWLINE#
df . append ( new_df , ignore_index = True ) #NEWLINE#
print ( "that's#SPACE#interesting" . encode ( 'string_escape' ) ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
site = hxs . select ( "//h1[@class='state']/text()" ) #NEWLINE#
set ( x [ 0 ] for x in list1 ) . intersection ( y [ 0 ] for y in list2 ) #NEWLINE#
plt . plot ( [ 10 , 11 , 12 ] , 'y' ) #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
strftime ( '%Y{0}%m{1}%d{2}' ) . format ( * 'å¹´æ\x9c\x88æ\x97¥' ) #NEWLINE#
win32api . GetLongPathName ( win32api . GetShortPathName ( 'stopservices.vbs' ) ) #NEWLINE#
print ( '<a#SPACE#href="%(url)s">%(url)s</a>' % { 'url' : my_url } ) #NEWLINE#
string . split ( pattern , 1 ) [ 0 ] #NEWLINE#
rdd . toDF ( [ 'foo' , 'bar' ] ) #NEWLINE#
re . findall ( '(1(23))45' , '12345' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 4 , 6 , 5 , 3 , 7 , 8 ] , [ 1 , 2 ] #NEWLINE#
db . posts . find ( ) . sort ( 'date' , - 1 ) #NEWLINE#
sys . stdin . isatty ( ) #NEWLINE#
sys . modules [ 'mymodule' ] = mymodule #NEWLINE#
os . system ( 'echo#SPACE#$SHELL' ) #NEWLINE#
os . kill ( pid , signal . SIGTERM ) #NEWLINE#
r = requests . get ( url , headers = headers , proxies = proxyDict ) #NEWLINE#
return os . path . join ( directory , filename ) #NEWLINE#
RotatingFileHandler ( filename , maxBytes = 10 * 1024 * 1024 , backupCount = 5 ) #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ ] , [ ] ] #NEWLINE#
np . random . normal ( 0 , 1 , ( 100 , 3 ) ) #NEWLINE#
driver . get ( 'http://stackoverflow.com' ) #NEWLINE#
globals ( ) [ 'var' ] = 'an#SPACE#object' #NEWLINE#
plt . legend ( ) #NEWLINE#
lambda x : int ( x . partition ( '/' ) [ 0 ] [ 2 : ] ) #NEWLINE#
print ( unicodedata . normalize ( 'NFC' , 'ç' ) ) #NEWLINE#
a [ - 1 ] * ( a [ - 1 ] + a [ 0 ] ) / 2 - sum ( a ) #NEWLINE#
sorted ( your_list , key = itemgetter ( 'name' , 'age' ) ) #NEWLINE#
your_list = [ int ( i ) for i in f . read ( ) . split ( ) ] #NEWLINE#
plt . savefig ( 'multiple_facet_binary_hue' ) #NEWLINE#
sympy . sstr ( _ ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Who#SPACE#lives#SPACE#in#SPACE#a#SPACE#Pineapple#SPACE#under#SPACE#the#SPACE#sea?#SPACE#{name!s}.' . format ( ** locals ( ) ) ) #NEWLINE#
[ x for d in thedict . values ( ) for alist in d . values ( ) for x in alist ] #NEWLINE#
self . setWindowTitle ( 'QtGui.QCheckBox' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
pd . concat ( [ data , ts ] ) . sort_index ( ) . interpolate ( ) . reindex ( ts . index ) #NEWLINE#
sys . stdout . write ( 'EDF#SPACE#{l}' . format ( l = line ) ) #NEWLINE#
print ( repr ( the_string ) ) #NEWLINE#
list ( { len ( s ) : s for s in jones } . values ( ) ) #NEWLINE#
np . tile ( np . arange ( y ) , x ) #NEWLINE#
autodoc_default_flags = [ 'members' , 'undoc-members' ] #NEWLINE#
print ( list ( itertools . combinations ( a , i ) ) ) #NEWLINE#
df_sum = df . groupby ( 'parent' ) . sum ( ) #NEWLINE#
'g' in df . index #NEWLINE#
subprocess . call ( './driver.exe#SPACE#bondville.dat' ) #NEWLINE#
df . set_index ( 'Date_Time' ) . groupby ( pd . TimeGrouper ( 'D' ) ) . mean ( ) . dropna ( ) #NEWLINE#
super ( ModelA , self ) . save ( * args , ** kwargs ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( 'Integer:#SPACE#{0};#SPACE#Float:#SPACE#{1};#SPACE#String:#SPACE#{2}' . format ( a , b , c ) ) #NEWLINE#
file_out [ - 1 ] = file_out [ - 1 ] . strip ( '\n' ) #NEWLINE#
newprefix = list ( prefix ) #NEWLINE#
form = JournalForm ( initial = { 'tank' : 123 } ) #NEWLINE#
new_dict [ 'a' ] [ 'b' ] [ 'c' ] = [ 5 ] #NEWLINE#
ax . set_ylim ( 0 , 1 ) #NEWLINE#
python - mserver #NEWLINE#
socket . bind ( ( '127.0.0.1' , 80 ) ) #NEWLINE#
sum ( jdcal . gcal2jd ( dt . year , dt . month , dt . day ) ) #NEWLINE#
comptest ( '' ) #NEWLINE#
proc = subprocess . Popen ( 'git#SPACE#status' , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
df . apply ( lambda x : pd . to_numeric ( x , errors = 'ignore' ) ) #NEWLINE#
df . query ( '111#SPACE#<=#SPACE#B#SPACE#<=#SPACE#500' ) #NEWLINE#
df . query ( '0#SPACE#<#SPACE#A#SPACE#<#SPACE#4#SPACE#and#SPACE#150#SPACE#<#SPACE#B#SPACE#<#SPACE#400' ) #NEWLINE#
return Image ( source = 'b1.png' ) #NEWLINE#
User . query . join ( User . person ) . filter ( Person . id . in_ ( p . id for p in people ) ) . all ( ) #NEWLINE#
Project . objects . filter ( action__person = person ) #NEWLINE#
df [ 'Col3' ] = ( df [ 'Col2' ] <= 1 ) . astype ( int ) #NEWLINE#
len ( [ x for x in s if x . get ( 'success' , False ) ] ) #NEWLINE#
[ 0.01691603660583496 , 0.016616106033325195 , 0.016437053680419922 ] #NEWLINE#
menu = gtk . Menu ( ) #NEWLINE#
x = min ( float ( s ) for s in l ) #NEWLINE#
re . search ( '[^f]' , 'ffffooooooooo' ) . start ( ) #NEWLINE#
mylist [ : ] = [ i for i in mylist if i != '' ] #NEWLINE#
C = np . einsum ( 'kmn,kln->kml' , A , B ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
new_string = '' . join ( ch for ch in your_string if ch . isdigit ( ) ) #NEWLINE#
mylist = [ int ( x ) for x in '3#SPACE#,2#SPACE#,6#SPACE#' . split ( ',' ) if x . strip ( ) . isdigit ( ) ] #NEWLINE#
objects = '#SPACE#and#SPACE#' . join ( [ '{num}#SPACE#{obj}' . format ( ** item ) for item in items ] ) #NEWLINE#
print ( type ( '{}' . format ( word ) ) ) #NEWLINE#
"""{0:#SPACE#<16}""" . format ( 'Hi' ) #NEWLINE#
[ 'comment#SPACE#form#SPACE#new' , 'comment#SPACE#comment-xxxx...' ] #NEWLINE#
result = re . sub ( '(?:@\\S*|#\\S*|http(?=.*://)\\S*)' , '' , subject ) #NEWLINE#
sorted ( list ( c . items ( ) ) , key = itemgetter ( 0 ) ) #NEWLINE#
np . polyfit ( x , y , 4 ) #NEWLINE#
sorted ( a , key = lambda v : ( v , random . random ( ) ) ) #NEWLINE#
int ( '00100101' , 2 ) #NEWLINE#
return [ i for i , x in enumerate ( lst ) if x < a or x > b ] #NEWLINE#
plt . show ( ) #NEWLINE#
document2 . body . append ( document1 . find ( 'div' , id_ = 'someid' ) . clone ( ) ) #NEWLINE#
np . count_nonzero ( boolarr ) #NEWLINE#
y = ( i [ 0 ] for i in x ) #NEWLINE#
plt . show ( ) #NEWLINE#
logging . debug ( 'Nothing#SPACE#special#SPACE#here...#SPACE#Keep#SPACE#walking' ) #NEWLINE#
s . split ( '.' ) [ - 1 ] #NEWLINE#
queryset . filter ( created_at__range = ( start_date , end_date ) ) #NEWLINE#
run ( 'mv#SPACE#app.wsgi.template#SPACE#app.wsgi' ) #NEWLINE#
"""[{u'name':#SPACE#u'squats',#SPACE#u'wrs':#SPACE#[[u'99',#SPACE#8]],#SPACE#u'id':#SPACE#2}]""" . replace ( "u'" , "'" ) #NEWLINE#
h . set_color ( 'r' ) #NEWLINE#
webbrowser . open ( 'mailto:test@example.com?subject=Hello#SPACE#World' ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
response = requests . post ( url , files = files ) #NEWLINE#
datetime . datetime ( 1970 , 1 , 1 ) + datetime . timedelta ( seconds = - 2082816000 ) #NEWLINE#
data = numpy . loadtxt ( yourFileName , skiprows = n ) #NEWLINE#
( ( df [ 'A' ] == 1 ) & ( df [ 'B' ] == 2 ) ) . any ( ) #NEWLINE#
format ( 5e-10 , 'f' ) #NEWLINE#
self . labelText = 'change#SPACE#the#SPACE#value' #NEWLINE#
a . transpose ( 2 , 0 , 1 ) #NEWLINE#
re . sub ( '[^\\x00-\\x7f]' , '#SPACE#' , n ) #NEWLINE#
[ None ] * 10 #NEWLINE#
setattr ( foo , key , value ) #NEWLINE#
df . to_dict ( ) #NEWLINE#
re . findall ( '-|\\+=|==|=|\\+|[^-+=\\s]+' , 'hello-+====#SPACE#=+#SPACE##SPACE#there' ) #NEWLINE#
b = np . fill_diagonal ( np . zeros_like ( a ) , value ) #NEWLINE#
python - pip #NEWLINE#
f ( tup1 [ 0 ] , tup1 [ 1 ] , tup2 [ 0 ] , tup2 [ 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . imshow ( a , interpolation = 'nearest' ) #NEWLINE#
print ( bytes . decode ( encoding ) ) #NEWLINE#
np . insert ( my_array , 0 , myvalue , axis = 1 ) #NEWLINE#
[ x for x in L if 'ab' in x ] #NEWLINE#
a , b = 'string_without_spaces' . split ( '#SPACE#' , 1 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( df . ix [ i , 'attr' ] ) #NEWLINE#
l = [ 1 , 2 , 3 ] #NEWLINE#
plt . savefig ( 'test.svg' , format = 'svg' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . index . map ( lambda t : t . replace ( year = 2013 , month = 2 , day = 1 ) ) #NEWLINE#
"""String#SPACE#1,String#SPACE#2,String3""" #NEWLINE#
df = df . assign ( a5 = [ 'Foo' , 'Bar' , 'Baz' ] ) #NEWLINE#
re . findall ( '[a-zA-Z]+\\b(?!\\()' , 'movav(x/2,#SPACE#2)*movsum(y,#SPACE#3)*z' ) #NEWLINE#
plt . show ( ) #NEWLINE#
name . decode ( 'latin-1' ) #NEWLINE#
plt . setp ( [ ax . get_xticklines ( ) , ax . get_yticklines ( ) ] , color = color ) #NEWLINE#
z = merge_two_dicts ( x , y ) #NEWLINE#
gzip . open ( 'myfile.gz' ) #NEWLINE#
f ( * args ) #NEWLINE#
L = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
cursor . close ( ) #NEWLINE#
a . index ( max ( a ) ) #NEWLINE#
p . wait ( ) #NEWLINE#
struct . unpack ( '!h' , p0 + p1 ) [ 0 ] #NEWLINE#
print ( 'If#SPACE#a#SPACE#hippo#SPACE#ways#SPACE#2000#SPACE#pounds,#SPACE#gives#SPACE#birth#SPACE#to#SPACE#a#SPACE#100#SPACE#pound#SPACE#calf#SPACE#and#SPACE#' + #NEWLINE# 'then#SPACE#eats#SPACE#a#SPACE#50#SPACE#pound#SPACE#meal#SPACE#how#SPACE#much#SPACE#does#SPACE#she#SPACE#weigh?' ) #NEWLINE#
ma . vstack ( [ a , ma . array ( np . resize ( b , a . shape [ 0 ] ) , mask = [ False , False , True ] ) ] ) #NEWLINE#
[ ( 'Mary#SPACE#XXIV' , 24 ) , ( 'Robert#SPACE#III' , 3 ) ] #NEWLINE#
ALLOWED_HOSTS = [ '*' ] #NEWLINE#
s . write ( str ( 25 ) + '\n' ) #NEWLINE#
new_data = ( '#SPACE#' . join ( w ) for w in sixgrams ) #NEWLINE#
__init__ . py #NEWLINE#
G [ i , j ] = C_abs [ i , j ] + C_abs [ j , i ] #NEWLINE#
pd . merge ( df , uniq_df , on = 'col' , how = 'left' ) #NEWLINE#
round ( 1234 , - 3 ) #NEWLINE#
os . symlink ( 'file.ext' , '/path/to/some/directory/symlink' ) #NEWLINE#
df . to_csv ( 'filename.txt' , sep = '\t' , mode = 'wb' , encoding = 'utf8' ) #NEWLINE#
""",#SPACE#""" . join ( map ( str , myList ) ) #NEWLINE#
np . array ( [ [ x , x ] , [ x , x ] ] , dtype = 'M8[ms]' ) . astype ( 'O' ) [ 0 , 1 ] #NEWLINE#
return '' . join ( random . choice ( alphabet ) for i in range ( length ) ) #NEWLINE#
retcode = os . system ( "echo#SPACE#'foo'#SPACE#&>#SPACE#/dev/null" ) #NEWLINE#
{ x : ( 0 ) for x in string . printable } #NEWLINE#
return { 'date_now' : datetime . datetime . now ( ) } #NEWLINE#
datetime . strptime ( '2014-12-04' , '%Y-%m-%d' ) . date ( ) #NEWLINE#
[ expensive_function ( x ) for x in range ( 5 ) if expensive_function ( x ) % 2 == 0 ] #NEWLINE#
<VAR0> ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ) #NEWLINE#
[ map ( int , x ) for x in values ] #NEWLINE#
a . view ( 'U1' ) . reshape ( 4 , - 1 ) [ : , 1 : 3 ] #NEWLINE#
re . sub ( '(<!--)|(<!--)' , '<comment>' , child . text , flags = re . MULTILINE ) #NEWLINE#
df [ 'month_15' ] . astype ( 'datetime64[D]' ) . tolist ( ) #NEWLINE#
[ 'sin' , '*' , 'w' , 'time' ] #NEWLINE#
var < datetime . datetime . today ( ) - datetime . timedelta ( hours = 1 ) #NEWLINE#
df [ df [ 'c' ] > 0.5 ] [ [ 'b' , 'e' ] ] . values #NEWLINE#
aList , bList = [ [ x for x in a if x [ 0 ] == i ] for i in ( 0 , 1 ) ] #NEWLINE#
""":""" . join ( x . encode ( 'hex' ) for x in 'Hello#SPACE#World!' ) #NEWLINE#
pool = Pool ( 4 , initializer , ( ) ) #NEWLINE#
df [ 'STD' ] . plot ( ax = axarr [ 1 ] ) #NEWLINE#
dict ( x . split ( ':' ) for x in lis ) #NEWLINE#
'%%s#SPACE#%s' % 'x' #NEWLINE#
"""{:,}""" . format ( 10000.21 ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
browser = webdriver . Safari ( ) #NEWLINE#
print ( math . ceil ( 4.2 ) ) #NEWLINE#
r = requests . get ( 'http://myserver/emoncms2/api/post' , data = payload ) #NEWLINE#
tf . sqrt ( tf . reduce_mean ( tf . square ( tf . sub ( targets , outputs ) ) ) ) #NEWLINE#
"""{0:#SPACE#>5}""" . format ( 'ss' ) #NEWLINE#
request_csrf_token = request . META . get ( 'HTTP_X_CSRFTOKEN' , '' ) #NEWLINE#
os . system ( 'open#SPACE#' + filename ) #NEWLINE#
sorted ( [ 10 , 3 , 2 ] ) #NEWLINE#
ones = [ ( x , y ) for x , y in l if y == 1 ] #NEWLINE#
'Dealer#SPACE#has#SPACE#%s#SPACE#showing.' % ( self . dealer [ 0 ] , self . dealer [ 1 ] ) #NEWLINE#
gtk . main ( ) #NEWLINE#
[ ( s + mystring ) for s in mylist ] #NEWLINE#
ser . readline ( ) #NEWLINE#
random . choice ( [ 'A' , 'B' , 'C' , 'D' ] ) #NEWLINE#
return [ process_row ( row ) for row in table . xpath ( './tr' ) ] #NEWLINE#
result = sum ( x for x in range ( 1 , 401 , 4 ) ) #NEWLINE#
value = myDict . get ( 'lastName' , myDict . get ( 'firstName' , myDict . get ( 'userName' ) ) ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
int ( float ( '20.0' ) ) #NEWLINE#
os . chmod ( path , mode ) #NEWLINE#
df . pivot ( index = 'client_id' , columns = 'month' , values = 'deltas' ) #NEWLINE#
[ [ 0.4 , 0.6 , 0.0 , 0.0 ] , [ 0.2 , 0.4 , 0.4 , 0.0 ] , [ 0.0 , 0.0 , 0.4 , 0.6 ] ] #NEWLINE#
df . corr ( ) . iloc [ : - 1 , ( - 1 ) ] #NEWLINE#
[ 0 ] * 4 #NEWLINE#
s . to_frame ( name = 'column_name' ) . to_excel ( 'xlfile.xlsx' , sheet_name = 's' ) #NEWLINE#
list ( [ x for x in totalist if x [ : 2 ] == [ 'A' , 'B' ] ] ) #NEWLINE#
newString = re . sub ( '\\boldword\\b' , 'newword' , oldString ) #NEWLINE#
sorted ( l , key = lambda i : hypot ( i [ 0 ] - pt [ 0 ] , i [ 1 ] - pt [ 1 ] ) ) #NEWLINE#
session = Session . get_by_id ( sid ) #NEWLINE#
print ( json . dumps ( 'rÅ¯Å¾e' , ensure_ascii = False ) ) #NEWLINE#
f . write ( '##SPACE#Data#SPACE#for#SPACE#Class#SPACE#A\n' ) #NEWLINE#
"""\\$\\d+(?:\\.\\d{2})?""" #NEWLINE#
"""A#SPACE#single#SPACE#'#SPACE#char""" . replace ( "'" , '' ) #NEWLINE#
"""#SPACE#""" . join ( re . split ( '(?<=[.?!])\\s+' , phrase , 2 ) [ : - 1 ] ) #NEWLINE#
ar = [ r [ 0 ] for r in cur . fetchall ( ) ] #NEWLINE#
all_subdirs = [ d for d in os . listdir ( '.' ) if os . path . isdir ( d ) ] #NEWLINE#
frozenset ( list ( a . items ( ) ) ) #NEWLINE#
base64 . b64decode ( 'AME=' ) . decode ( 'UTF-16BE' ) #NEWLINE#
df = pd . read_csv ( 'c:\\temp1.txt' , parse_dates = [ 0 ] , infer_datetime_format = True ) #NEWLINE#
MyClass ( ) . say ( 'hello' ) #NEWLINE#
pd . DataFrame ( np . vstack ( someTuple ) . T , columns = [ 'birdType' , 'birdCount' ] ) #NEWLINE#
{ 'apple' : 'cat' , 'banana' : 'dog' } #NEWLINE#
tupleX = [ x for x in tupleX if x > 5 ] #NEWLINE#
norm . ppf ( norm . cdf ( 1.96 ) ) #NEWLINE#
re . findall ( '[a-z]*' , '123abc789' ) #NEWLINE#
re . findall ( '[a-z]*' , '123456789' ) #NEWLINE#
plt . show ( ) #NEWLINE#
root = tree . getroot ( ) #NEWLINE#
subprocess . call ( [ 'ls' , '-l' ] ) #NEWLINE#
sorted ( set ( ) . union ( * input_list ) ) #NEWLINE#
plt . gca ( ) . set_position ( [ 0 , 0 , 1 , 1 ] ) #NEWLINE#
[ 'e' , 'f' ] #NEWLINE#
outbytes = yourstring . encode ( 'utf-8' ) #NEWLINE#
hex ( 8 ) . replace ( '0x' , '' ) #NEWLINE#
"""{0:.2f}""" . format ( 5 ) #NEWLINE#
list2 = list1 + [ '' ] * ( 5 - len ( list1 ) ) #NEWLINE#
d = { k : [ ] for k in keys } #NEWLINE#
text = text . replace ( 'very' , 'not#SPACE#very' , 1 ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( '' . join ( x . stripped_strings ) ) #NEWLINE#
forms . ModelForm . __init__ ( self , * args , ** kwargs ) #NEWLINE#
os . path . dirname ( os . path . join ( output_dir , '' ) ) #NEWLINE#
socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
file . read ( 1 ) #NEWLINE#
obj . has_perm ( 'drivers.read_car' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
hex_list = ( '{:02x}' . format ( ord ( c ) ) for c in fp . read ( ) ) #NEWLINE#
Item . objects . values ( 'category' ) . annotate ( Count ( 'category' ) ) . order_by ( ) #NEWLINE#
tree . find ( './/enddate' ) . text = '1/1/2011' #NEWLINE#
plt . show ( ) #NEWLINE#
d [ 'A' ] [ : - 1 ] < d [ 'C' ] [ 1 : ] #NEWLINE#
print ( nat . index ( nat . Germany ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_formatter ( mdates . DateFormatter ( '%m/%d/%Y' ) ) #NEWLINE#
df [ 'month_15' ] . astype ( 'datetime64[D]' ) . dtype #NEWLINE#
plt . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
random . choice ( string . ascii_letters + string . digits ) #NEWLINE#
re . findall ( '(b+ab+)+' , mystring ) #NEWLINE#
driver . get ( 'https://www.sunnah.com/bukhari/5' ) #NEWLINE#
form = MyModelForm ( request . POST , instance = my_record ) #NEWLINE#
a = [ map ( int , row . split ( ) ) for row in stdin ] #NEWLINE#
[ '{:.2f}' . format ( x ) for x in nums ] #NEWLINE#
list ( itertools . accumulate ( lst , lambda a , b : tuple ( map ( sum , zip ( a , b ) ) ) ) ) #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
plt . show ( ) #NEWLINE#
main ( ) #NEWLINE#
numpy . random . shuffle ( a [ 1 : ] ) #NEWLINE#
simplelist . append ( x ) #NEWLINE#
[ word for line in f for word in line . split ( ) ] #NEWLINE#
print ( arr [ [ 1 , 4 , 5 ] ] ) #NEWLINE#
imagedata . image = str ( self . request . get ( 'image' ) ) #NEWLINE#
integers = [ ( int ( i ) - 1 ) for i in line . split ( ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( list ( itertools . chain ( * [ l for l in lst if l is not None ] ) ) [ - 5 : ] ) #NEWLINE#
int ( '{0:b}' . format ( n ) [ : : - 1 ] , 2 ) #NEWLINE#
"""(desired)+|(input)+|(strings)+""" #NEWLINE#
p = ax . scatter ( xs , ys , zs , c = cs , marker = m ) #NEWLINE#
re . split ( '(?u)\\s' , 'a\u200bc#SPACE#d' ) #NEWLINE#
list ( itertools . chain . from_iterable ( list ( d . values ( ) ) ) ) #NEWLINE#
""",#SPACE#""" . join ( '{}#SPACE#{}' . format ( k , v ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
collections . Counter ( a ) #NEWLINE#
self . show ( ) #NEWLINE#
{ d [ 0 ] : ( '#SPACE#' . join ( d [ 1 : ] ) if d [ 1 : ] else 0 ) for d in data } #NEWLINE#
[ numbers [ i % len ( numbers ) ] for i in range ( start , start + len ( numbers ) ) ] #NEWLINE#
new_tag = self . new_soup . new_tag ( 'div' , id = 'file_history' ) #NEWLINE#
logging . getLogger ( ) . handlers [ 0 ] . setFormatter ( fr ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
json . dumps ( [ dict ( mpn = pn ) for pn in lst ] ) #NEWLINE#
s = re . split ( '[0-9]{5,}' , string ) [ 0 ] . strip ( ) #NEWLINE#
'Repr:%r#SPACE#Str:%s' % ( 'foo' , 'foo' ) #NEWLINE#
plt . imshow ( bg , cmap = plt . get_cmap ( 'gray' ) , vmin = 0 , vmax = 255 ) #NEWLINE#
df = df . drop ( 'location' , axis = 1 ) #NEWLINE#
browser . get ( 'http://www.google.com' ) #NEWLINE#
plt . imshow ( cv2 . cvtColor ( cube , cv2 . COLOR_BGR2RGB ) ) #NEWLINE#
super ( MySubClassBetter , self ) . __init__ ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
df [ 'C' ] = numpy . where ( df [ 'B' ] > 5 , df [ 'A' ] , 0.1 * df [ 'A' ] * df [ 'B' ] ) #NEWLINE#
print ( list_end_counter ( [ 1 , 2 , 1 , 1 , 1 , 1 , 1 , 1 ] ) ) #NEWLINE#
map ( itemgetter ( 1 ) , elements ) #NEWLINE#
root . deiconify ( ) #NEWLINE#
l [ : 3 ] + l [ - 3 : ] #NEWLINE#
test . reshape ( ( 4 , 4 ) ) [ : , : 2 ] . reshape ( ( 2 , 4 ) ) #NEWLINE#
foo = '' . join ( foo . split ( ) ) [ : - 3 ] . upper ( ) #NEWLINE#
dt = tz . localize ( naive , is_dst = True ) #NEWLINE#
print ( json . dumps ( result ) ) #NEWLINE#
cur . execute ( 'select#SPACE#1#SPACE#as#SPACE#a' ) #NEWLINE#
print ( applejuice . __name__ ) #NEWLINE#
sys . path . append ( module_path ) #NEWLINE#
d += datetime . timedelta ( 1 ) #NEWLINE#
subprocess . call ( cmd , stdin = f ) #NEWLINE#
map ( lambda y : [ np . mean ( y [ i : i + length ] ) for i in range ( 0 , len ( y ) , length ) ] , a ) #NEWLINE#
testarray = ast . literal_eval ( teststr ) #NEWLINE#
np . dot ( x , y ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : [ a , b ] , [ 1 , 2 , 3 , 4 ] , 'seed' ) #NEWLINE#
self . variable_evidence . arrays . append ( ( self , 'basic_in' ) ) #NEWLINE#
bool ( random . getrandbits ( 1 ) ) #NEWLINE#
os . kill ( 5383 , signal . SIGKILL ) #NEWLINE#
( arr == arr [ 0 ] ) . all ( ) #NEWLINE#
[ ( 0 , 0 , 1 , 1 ) , ( 0 , 1 , 0 , 1 ) ] #NEWLINE#
binary_f ( lambda v : v >= '4.2' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
gevent . joinall ( jobs ) #NEWLINE#
test . __defaults__ #NEWLINE#
tuple ( a [ : - 1 ] . split ( ';' ) ) #NEWLINE#
myArray = np . load ( open ( 'array.npy' , 'rb' ) ) #NEWLINE#
df [ [ 'b' , 'c' ] ] . iloc [ [ 2 , 4 ] ] #NEWLINE#
sys . exit ( main ( sys . argv [ 1 ] , sys . argv [ 2 ] ) ) #NEWLINE#
A = np . delete ( A , 50 , 1 ) #NEWLINE#
print ( json . dumps ( result ) ) #NEWLINE#
pd . melt ( df ) . groupby ( [ 'variable' , 'value' ] ) [ 'value' ] . count ( ) . unstack ( ) . T #NEWLINE#
my_dictionary = dict ( map ( lambda k_v : ( k_v [ 0 ] , f ( k_v [ 1 ] ) ) , iter ( #NEWLINE# my_dictionary . items ( ) ) ) ) #NEWLINE#
urllib . parse . unquote ( 'id%3D184ff84d27c3613d&quality=medium' ) #NEWLINE#
hwnd = win32gui . GetForegroundWindow ( ) #NEWLINE#
return zipfile . ZipFile ( path ) #NEWLINE#
[ sum ( zip ( * x ) [ 1 ] ) for x in data ] #NEWLINE#
colored . red ( 'red#SPACE#string' ) #NEWLINE#
plt . plot ( [ 1 , 2 ] , lw = 4 , c = '#8f9805' ) #NEWLINE#
data . groupby ( level = [ 0 , 1 ] ) . sum ( ) #NEWLINE#
res . setdefault ( item [ 'a' ] , [ ] ) . append ( item ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
print ( prda . decode ( 'utf-8' ) ) #NEWLINE#
'\ud800' , '\udc00' , '-' , '\udbff' , '\udfff' #NEWLINE#
plt . show ( ) #NEWLINE#
MyModel . objects . filter ( title__exact = '' ) #NEWLINE#
img = Image . open ( file ) #NEWLINE#
res_list = [ i [ 0 ] for i in rows ] #NEWLINE#
df . groupby ( [ 'col5' , 'col2' ] ) . size ( ) . reset_index ( ) . groupby ( 'col2' ) [ [ 0 ] ] . max ( ) #NEWLINE#
plt . savefig ( 'myfig.png' , dpi = 1000 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
url ( '^profile/(?P<user_id>\\d+)/$' , '...' , name = 'profile' ) #NEWLINE#
plt . show ( ) #NEWLINE#
im = cv2 . imread ( 'image1.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
logger . error ( 'Test#SPACE##SPACE#ABC' ) #NEWLINE#
a_string = 'This#SPACE#is#SPACE#a#SPACE#string' #NEWLINE#
np . polyfit ( X , Y , 1 ) #NEWLINE#
subprocess . call ( [ 'rxvt' , '-e' , 'python#SPACE#bb.py' ] ) #NEWLINE#
a [ f ] #NEWLINE#
score = sum ( [ ( x * y ) for x , y in zip ( a , b ) ] ) #NEWLINE#
{ 'color' : 'orange' , 'data' : 'none' , 'size' : 'big' } #NEWLINE#
frame = pd . read_csv ( path , names = columns ) #NEWLINE#
b = [ i for sub in a for i in sub ] #NEWLINE#
"""""" . join ( reverse ( 'hello' ) ) #NEWLINE#
df . plot ( style = [ 'o' , 'rx' ] ) #NEWLINE#
ITEM_PIPELINES = { 'myproject.pipelines.CSVPipeline' : 300 } #NEWLINE#
[ j for i in range ( 100 ) <STR0> i > 10 for j in range ( i ) <STR0> j < 20 ] #NEWLINE#
return render_template ( 'hello.html' , name = name ) #NEWLINE#
re . split ( '\\s+' , s ) #NEWLINE#
list ( product ( list ( range ( 3 ) ) , repeat = 4 ) ) #NEWLINE#
s . translate ( None , '!.;,' ) #NEWLINE#
app = bottle . Bottle ( ) #NEWLINE#
a = array ( [ [ 2 , 3 , 4 ] , [ 3 , 4 , 5 ] ] ) #NEWLINE#
yourstring = '' . join ( ( 'L' , 'yourstring' , 'LL' ) ) #NEWLINE#
os . close ( fh2 ) #NEWLINE#
plt . show ( ) #NEWLINE#
l . sort ( key = lambda x : x . count ( '+' ) ) #NEWLINE#
print ( w . cget ( 'text' ) ) #NEWLINE#
df = pd . DataFrame ( { 'R' : px2 [ : , ( 0 ) ] , 'G' : px2 [ : , ( 1 ) ] , 'B' : px2 [ : , ( 2 ) ] } ) #NEWLINE#
df . groupby ( 'binned_a' ) . describe ( ) . unstack ( ) #NEWLINE#
os . path . isfile ( 'bob.txt' ) #NEWLINE#
im . save ( 'out.png' ) #NEWLINE#
cursor . commit ( ) #NEWLINE#
[ [ y for y in x if y not in to_del ] for x in my_list ] #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
my_list = [ line . rstrip ( '\n' ) for line in f ] #NEWLINE#
plt . figure ( ) #NEWLINE#
print ( sum ( map ( ord , my_string ) ) ) #NEWLINE#
a [ key ] . append ( 1 ) #NEWLINE#
c . most_common ( 1 ) #NEWLINE#
sum ( d . values ( ) ) #NEWLINE#
return 'Hello#SPACE#World!#SPACE#%s,#SPACE#%s' % ( x , y ) #NEWLINE#
np . arange ( 3 ) #NEWLINE#
subdomain = url . hostname . split ( '.' ) [ 0 ] #NEWLINE#
[ ( int ( i ) if i . isdigit ( ) else float ( i ) ) for i in s ] #NEWLINE#
str . trim ( ) . split ( '\\s+' ) #NEWLINE#
x = [ [ None , None , None , None , None , None ] ] * 6 #NEWLINE#
[ 'Code' , 'Reference' , 'Type' , 'Amount' ] #NEWLINE#
sql . write_frame ( price2 , name = 'price2' , con = cnx ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . minorticks_off ( ) #NEWLINE#
my_pattern = re . compile ( 'Þ\xad[@-O].' ) #NEWLINE#
output . close ( ) #NEWLINE#
"""a#SPACE#string""" . decode ( 'utf-8' ) #NEWLINE#
decimal . power ( Decimal ( '2' ) , Decimal ( '2.5' ) ) #NEWLINE#
sorted ( iter ( mydict . items ( ) ) , key = lambda k_v : sum ( k_v [ 1 ] ) , reverse = True ) [ : 3 ] #NEWLINE#
data = np . transpose ( data , ( 0 , 3 , 1 , 2 ) ) #NEWLINE#
re . sub ( '(?<=\\.)(?!\\s)' , '#SPACE#' , para ) #NEWLINE#
ax . get_xaxis ( ) . get_major_formatter ( ) . set_scientific ( False ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
forms [ 3 ] [ 'sex' ] = [ 'male' ] #NEWLINE#
tree . delete ( * tree . get_children ( ) ) #NEWLINE#
filename . startswith ( 'Run' ) and filename . endswith ( '.py' ) #NEWLINE#
key = lambda d : ( not 'rank' in d , d [ 'rank' ] ) #NEWLINE#
[ n for i , n in enumerate ( xs ) if i == 0 or n != xs [ i - 1 ] ] #NEWLINE#
foo ( ) #NEWLINE#
dev = boto3 . session . Session ( profile_name = 'dev' ) #NEWLINE#
plt . show ( ) #NEWLINE#
r = np . ptp ( a , axis = 1 ) #NEWLINE#
d . update ( ( b , a [ : , ( i ) ] ) for i , b in enumerate ( a ) ) #NEWLINE#
subprocess . Popen ( [ 'subl' , '-w' , 'parameters.py' ] ) . wait ( ) #NEWLINE#
indices = [ i for i , s in enumerate ( mylist ) if 'aa' in s ] #NEWLINE#
ModelA . objects . filter ( Q ( ModelB___field2 = 'B2' ) | Q ( ModelC___field3 = 'C3' ) ) #NEWLINE#
cbar . set_ticklabels ( [ mn , md , mx ] ) #NEWLINE#
next ( ( i for i , val in enumerate ( lst ) if np . all ( val == array ) ) , - 1 ) #NEWLINE#
reactor . run ( ) #NEWLINE#
c1 [ np . logical_and ( c2 == 2 , c3 == 3 ) ] #NEWLINE#
fig . show ( ) #NEWLINE#
u = User ( name = request . POST . get ( 'user' ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df . groupby ( df . index . year // 10 * 10 ) . sum ( ) #NEWLINE#
x = [ [ foo for i in range ( 10 ) ] for j in range ( 10 ) ] #NEWLINE#
self . response . out . write ( self . request . body ) #NEWLINE#
plt . figure ( figsize = ( 10 , 8 ) ) #NEWLINE#
d [ 'A' ] [ 1 : ] < d [ 'C' ] [ : - 1 ] #NEWLINE#
reg = re . compile ( '\\d{3}\\d{3}\\d{4}' ) #NEWLINE#
new_list = [ '#SPACE#' . join ( words ) for words in words_list ] #NEWLINE#
plt . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( Config . items ( 'Section' ) ) #NEWLINE#
"""hello""" . decode ( encoding ) #NEWLINE#
Category . objects . filter ( category__isnull = True ) #NEWLINE#
ax . w_yaxis . set_ticklabels ( [ ] ) #NEWLINE#
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , '..' , 'Common' ) ) #NEWLINE#
df . to_csv ( 'pandas_test.txt' , header = False , index = False , na_rep = '#SPACE#' ) #NEWLINE#
[ len ( x ) for x in a [ 0 ] ] #NEWLINE#
[ 'elm0' , 'elm1' , 'Elm2' , 'elm9' , 'elm10' , 'Elm11' , 'Elm12' , 'elm13' ] #NEWLINE#
plt . show ( ) #NEWLINE#
d [ 'foo' ] #NEWLINE#
os . path . join ( mydir , myfile ) #NEWLINE#
[ 1 , 2 , 3 , 2 ] . index ( 2 ) #NEWLINE#
df . iloc [ df . index . get_level_values ( 'A' ) == 1 ] #NEWLINE#
pattern = '(DT\\s+)+((RB\\s+)+|(JJ\\s+)+)(NN\\s*)*NN$' #NEWLINE#
print ( repr ( a ) . replace ( '#SPACE#' , '\\s' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
rename ( 'c:\\temp\\xx' , '*.doc' , 'new(%s)' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( False , 0 ) , ( False , 1 ) , ( False , 2 ) , ( False , 3 ) , ( False , 4 ) , ( True , None ) ] #NEWLINE#
sys . modules [ 'm' ] #NEWLINE#
print ( ',#SPACE#' . join ( map ( str , LIST ) ) ) #NEWLINE#
driver . quit ( ) #NEWLINE#
df = df [ df [ 'Found' ] == 'No#SPACE#Match' ] #NEWLINE#
map ( ord , 'Hello,#SPACE#马克' ) #NEWLINE#
list1 [ 0 ] [ 2 ] #NEWLINE#
dummy = np . array ( [ [ 1 , 1 , 0 , 0 ] , [ 0 , 0 , 1 , 1 ] ] ) . T #NEWLINE#
print ( type ( collection1 . find_one ( ) [ 'albums' ] [ 0 ] ) ) #NEWLINE#
[ v for i , v in enumerate ( myList ) if i not in toRemove ] #NEWLINE#
( df == 1 ) . sum ( ) #NEWLINE#
asyncio . get_event_loop ( ) . run_forever ( ) #NEWLINE#
x = [ 1 , 3 , 5 ] #NEWLINE#
np . flatnonzero ( x [ : - 1 ] != x [ 1 : ] ) . mean ( ) + 0.5 #NEWLINE#
datetime ( date . year , date . month , date . day ) #NEWLINE#
plt . show ( ) #NEWLINE#
bool ( re . compile ( '^[a-z0-9\\.]+\\Z' ) . match ( '1234\n' ) ) #NEWLINE#
return struct . unpack ( '<I' , struct . pack ( '>I' , i ) ) [ 0 ] #NEWLINE#
df [ 'quarter' ] = df [ 'date' ] . dt . quarter #NEWLINE#
df . unstack ( ) . sample ( 3 , replace = True ) . stack ( ) #NEWLINE#
return map ( lambda f : f ( * args ) , funcs ) #NEWLINE#
"""τoρνoς""" . decode ( 'utf-8' ) #NEWLINE#
numpy . zeros ( ( i , j , k ) ) #NEWLINE#
y = [ i [ 0 ] for i in x ] #NEWLINE#
print ( '#SPACE#' . join ( format ( ord ( x ) , 'b' ) for x in a ) ) #NEWLINE#
myString = myString . replace ( 'Â\xa0' , '#SPACE#' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . ix [ : 5 , : 10 ] #NEWLINE#
[ x for x in a if x <= 1 or x >= 4 ] #NEWLINE#
b = np . sort ( a [ ( ... ) , : - 1 ] , axis = - 1 ) #NEWLINE#
proc . communicate ( ) #NEWLINE#
"""There#SPACE##SPACE##SPACE##SPACE##SPACE#is#SPACE#a#SPACE#way""" . title ( ) #NEWLINE#
f ( * args , ** kwargs ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( np . dot , [ S0 , Sx , Sy , Sz ] ) #NEWLINE#
"""hello.world.foo.bar""" . rsplit ( '.' , 1 ) #NEWLINE#
mylist = [ i for i in mylist if i != '' ] #NEWLINE#
c = [ item for pair in zip ( a , b ) for item in pair ] #NEWLINE#
ax . lines . pop ( 0 ) #NEWLINE#
self . assertEqual ( 'foo' , 'bar' ) #NEWLINE#
s = re . sub ( '[^\\w\\s]' , '' , s ) #NEWLINE#
driver . find_element_by_name ( 'submit' ) . click ( ) #NEWLINE#
unicodedata . normalize ( 'NFKD' , source ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
array = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
os . system ( 'some_command#SPACE#&' ) #NEWLINE#
re . sub ( '|' . join ( map ( re . escape , replace_list ) ) , '' , words ) #NEWLINE#
plt . imshow ( mmm * data , cmap = 'rainbow' ) #NEWLINE#
sorted ( Thing . objects . all ( ) , key = lambda t : t . name ) #NEWLINE#
product ( list ( range ( 3 ) ) , list ( range ( 4 ) ) , [ 'a' , 'b' , 'c' ] , some_other_iterable ) #NEWLINE#
sudo ( 'python#SPACE#manage.py#SPACE#collectstatic#SPACE#--noinput' , user = 'www-data' ) #NEWLINE#
ssh . close ( ) #NEWLINE#
sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
"""\\bCVE-\\d+(?:-\\d+)?""" #NEWLINE#
os . system ( 'cd#SPACE#c:\\mydir' ) #NEWLINE#
ast . literal_eval ( "u'" + zzz + "'" ) #NEWLINE#
a [ : , ( 0 ) ] [ mask ] #NEWLINE#
A [ : , 3 : ] . flat [ np . in1d ( A [ : , 3 : ] , B ) ] = 0 #NEWLINE#
plt . plot ( x [ i : i + 2 ] , y [ i : i + 2 ] ) #NEWLINE#
l = [ i . split ( ) for i in l ] #NEWLINE#
print ( struct . unpack ( '>I' , '\x00' + s ) [ 0 ] ) #NEWLINE#
reactor . run ( ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
"""(?=[MBDPI]{3})\\w*I\\w*""" #NEWLINE#
self . searchqueryset . filter ( group__isnull = True ) #NEWLINE#
some_list . remove ( thing ) #NEWLINE#
print ( re . sub ( '[\\[\\]]' , '' , np . array_str ( a ) ) ) #NEWLINE#
datetime . datetime ( 1 , 1 , 1 ) + datetime . timedelta ( microseconds = ticks / 10 ) #NEWLINE#
return [ x for x in l if x % 2 == 0 ] #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
np . cross ( a , b , axis = 0 ) #NEWLINE#
c = dict ( list ( a . items ( ) ) | list ( b . items ( ) ) ) #NEWLINE#
{ 'Mike' : [ [ 1 , 4 ] , [ 5 , 7 ] ] , 'Joe' : [ [ 5 , 7 ] , [ 6 , 9 ] , [ 7 , 4 ] ] } #NEWLINE#
cursor . execute ( 'SELECT#SPACE#@X:=@X+1#SPACE#FROM#SPACE#some_table' ) #NEWLINE#
self . canvas . pack ( ) #NEWLINE#
plt . fill_between ( X , Y2 , Y3 , color = 'm' , alpha = 0.5 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 1 , 1 , 1 ] < [ 1 , 1 , 2 ] #NEWLINE#
df . query ( 'a#SPACE#in#SPACE#@keys' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
pd . concat ( [ df2 [ df2 . Name == 'Jane' ] . T , df2 [ df2 . Name == 'Joe' ] . T ] ) #NEWLINE#
df . iloc [ i ] #NEWLINE#
M = list ( set ( L ) ) #NEWLINE#
df [ df . apply ( lambda x : min ( x ) == max ( x ) , 1 ) ] #NEWLINE#
exec ( compile ( open ( 'C:\\test.py' ) . read ( ) , 'C:\\test.py' , 'exec' ) ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
zip ( my_list , map ( my_dictionary . get , my_list ) ) #NEWLINE#
[ [ 9 , 30 , 'am' ] , [ 5 , 0 , 'pm' ] ] #NEWLINE#
request . META [ 'QUERY_STRING' ] #NEWLINE#
np . column_stack ( [ [ 1 , 2 , 3 , 4 , 5 ] , [ 1 , 2 , 3 , 4 , 5 ] ] ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
gzip . GzipFile ( 'output#SPACE#file#SPACE#name' , 'wb' ) #NEWLINE#
s . split ( '#SPACE#' , 1 ) #NEWLINE#
my_list . sort ( key = nonesorter ) #NEWLINE#
FieldSet = dict ( ( k , v ) for k , v in FieldSet . items ( ) if len ( v ) != 1 ) #NEWLINE#
__init__ . py #NEWLINE#
assertTrue ( math . isnan ( nan_value ) ) #NEWLINE#
sum ( v for k , v in c . items ( ) if v > 1 ) #NEWLINE#
s . send ( my_bytes ) #NEWLINE#
pylab . show ( ) #NEWLINE#
np . place ( a , np . isnan ( a ) , 0 ) #NEWLINE#
find_nth ( 'foofoofoofoo' , 'foofoo' , 2 ) #NEWLINE#
element = driver . find_element_by_class_name ( 'class_name' ) . text #NEWLINE#
writer . writerows ( cursor . fetchall ( ) ) #NEWLINE#
datetime . datetime . strptime ( conformed_timestamp , '%Y%m%dT%H%M%S.%f%z' ) #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 0 , 2 , 0 ] , [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 1 , 2 ] ] ) #NEWLINE#
y . mean ( axis = 1 ) . mean ( axis = - 1 ) #NEWLINE#
s [ 'b' ] . iloc [ 1 : 10 ] #NEWLINE#
ZipFile . write ( a , compress_type = zipfile . ZIP_DEFLATED ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
draw ( ) #NEWLINE#
pylab . show ( ) #NEWLINE#
a = numpy . array ( [ 0 , 3 , 0 , 1 , 0 , 1 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 3 , 4 ] ) #NEWLINE# collections . Counter ( a ) #NEWLINE#
from kazoo . client import KazooClient #NEWLINE#
print ( 'pictures\\12761_1.jpg' . replace ( '\\' , '/' ) ) #NEWLINE#
x . loc [ ( x . B >= 111.0 ) & ( x . B <= 500.0 ) ] . set_index ( [ 'A' , 'B' ] ) #NEWLINE#
basetwo ( '10010' ) #NEWLINE#
re . findall ( '\\d+' , s ) #NEWLINE#
setattr ( self , k , v ) #NEWLINE#
logging . debug ( 'This#SPACE#is#SPACE#a#SPACE#message#SPACE#from#SPACE#another#SPACE#place.' ) #NEWLINE#
x . reshape ( 2 , 2 , 5 ) . transpose ( 1 , 0 , 2 ) . reshape ( 4 , 5 ) #NEWLINE#
l = [ item . lower ( ) for item in l ] #NEWLINE#
[ item for item in my_list if some_condition ( ) ] #NEWLINE#
np . maximum . accumulate ( ( A2 < 0 ) [ : , : : - 1 ] , axis = 1 ) [ : , : : - 1 ] #NEWLINE#
system ( 'python#SPACE#myscript.py' ) #NEWLINE#
session . query ( q ) . limit ( 10 ) #NEWLINE#
tuple ( [ tuple ( row ) for row in myarray ] ) #NEWLINE#
help ( my_func ) #NEWLINE#
p1 . start ( ) #NEWLINE#
ax . tick_params ( labelbottom = 'off' , labeltop = 'on' ) #NEWLINE#
browser . execute_script ( 'return#SPACE#globalVar;' ) #NEWLINE#
Post . objects . filter ( createdAt__lte = datetime . now ( ) - timedelta ( days = plan . days ) ) #NEWLINE#
img . save ( 'greyscale.png' ) #NEWLINE#
coord = tuple ( sum ( x ) for x in zip ( coord , change ) ) #NEWLINE#
os . environ [ 'APPLICATION_ID' ] #NEWLINE#
sorted ( lst , key = lambda L : ( L . lower ( ) , L ) ) #NEWLINE#
df . drop ( [ 'T1_V6' ] , axis = 1 ) #NEWLINE#
print ( struct . unpack ( '!I' , socket . inet_aton ( '127.0.0.1' ) ) [ 0 ] ) #NEWLINE#
get_group_rows ( df , 'A' , 'B' , 'median' , '>' ) #NEWLINE#
users = relationship ( 'User' , backref = 'account' ) #NEWLINE#
[ 'One' , 'TWO' , 'eerhT' , 'Four' , 'FIVE' , 'xiS' , 'Seven' , 'EIGHT' , 'eniN' ] #NEWLINE#
plt . show ( ) #NEWLINE#
time . mktime ( time . gmtime ( 0 ) ) #NEWLINE#
print ( url ( 'blog' , id = 123 , qualified = True , host = 'example.com' ) ) #NEWLINE#
new_items = [ ( x if x % 2 else None ) for x in items ] #NEWLINE#
plt . show ( ) #NEWLINE#
getattr ( foo_obj , command ) ( ) #NEWLINE#
headers = [ ( 'X-Attribute' , 'A' ) , ( 'X-Attribute' , 'B' ) ] #NEWLINE#
output . write ( '{0}:{1}\n' . format ( nfeature [ 0 ] + 1 , nfeature [ 1 ] ) ) #NEWLINE#
list ( itertools . product ( list ( range ( 1 , 3 ) ) , list ( range ( 1 , 5 ) ) ) ) #NEWLINE#
print ( doc . xpath ( '//aws:weather/aws:ob/aws:temp' ) [ 0 ] . text ) #NEWLINE#
df = pd . DataFrame . from_dict ( data ) #NEWLINE#
df . resample ( '30s' , how = { 'volume' : 'sum' } ) #NEWLINE#
sys . setdefaultencoding ( 'utf8' ) #NEWLINE#
df . plot ( kind = 'bar' ) #NEWLINE#
root . title ( 'ttk.Notebook' ) #NEWLINE#
print ( d [ 'glossary' ] [ 'title' ] ) #NEWLINE#
print ( result . group ( 0 ) ) #NEWLINE#
execute_from_command_line ( [ 'manage.py' , 'syncdb' ] ) #NEWLINE#
OrderedDict ( heapq . nlargest ( 3 , iter ( mydict . items ( ) ) , key = lambda tup : sum ( tup #NEWLINE# [ 1 ] ) ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
form = MyModelForm ( instance = someinst ) #NEWLINE#
reader = csv . reader ( open ( 'test.csv' ) , delimiter = '|#|' ) #NEWLINE#
self . Bind ( wx . EVT_PAINT , self . OnPaint ) #NEWLINE#
db . execute ( 'INSERT#SPACE#INTO#SPACE#json_col#SPACE#VALUES#SPACE#(' + json_value + ')' ) #NEWLINE#
list . filter ( _ != somevalue ) #NEWLINE#
df [ 'C' ] = df . apply ( lambda row : row [ 'A' ] + row [ 'B' ] , axis = 1 ) #NEWLINE#
{ l [ 1 ] : l for l in lol } #NEWLINE#
subprocess . call ( [ 'pip' , 'install' , '-E' , home_dir , 'django' ] ) #NEWLINE#
ax1 . scatter ( data [ 0 ] , data [ 1 ] , marker = 'o' , c = 'b' , s = data [ 2 ] , label = 'the#SPACE#data' ) #NEWLINE#
data = json . loads ( request . POST [ 'mydata' ] ) if 'mydata' in request . POST else { } #NEWLINE#
any ( k in s for k in keywords ) #NEWLINE#
print ( ( name , 'has#SPACE#been#SPACE#sorted#SPACE#into' , ransport ) ) #NEWLINE#
print ( type ( tf . constant ( [ 1 , 2 , 3 ] ) . eval ( ) ) ) #NEWLINE#
re . sub ( '\\b0+(?!\\b)' , '' , '012#SPACE#+#SPACE#2#SPACE#+#SPACE#0#SPACE#-#SPACE#01#SPACE#+#SPACE#204#SPACE#-#SPACE#0' ) #NEWLINE#
grades . append ( lists [ i ] . rstrip ( '\n' ) . split ( ',' ) ) #NEWLINE#
len ( a ) == len ( b ) and all ( a . count ( i ) == b . count ( i ) for i in a ) #NEWLINE#
print ( date . fromtimestamp ( 1241711346274 / 1000.0 ) ) #NEWLINE#
request . GET . get ( 'MAINS' , '' ) #NEWLINE#
a [ a == 2 ] = 10 #NEWLINE#
self . x . config ( state = 'normal' ) #NEWLINE#
Counter . objects . filter ( name = name ) . update ( count = F ( 'count' ) + 1 ) #NEWLINE#
df [ [ 0 , 2 , 3 ] ] . apply ( ',' . join , axis = 1 ) #NEWLINE#
sorted ( lst , key = operator . itemgetter ( 1 ) , reverse = True ) #NEWLINE#
cols = list ( df . columns . values ) #NEWLINE#
ax . legend ( ) #NEWLINE#
re . sub ( '\\s\\s+' , '#SPACE#' , s ) #NEWLINE#
[ x for x in primes if '0' not in str ( x ) ] #NEWLINE#
Gtk . main ( ) #NEWLINE#
df [ df [ 'count' ] == df . groupby ( [ 'Mt' ] ) [ 'count' ] . transform ( max ) ] #NEWLINE#
plt . colorbar ( ) . set_label ( label = 'a#SPACE#label' , size = 15 , weight = 'bold' ) #NEWLINE#
dict ( ( k , v [ '_status' ] [ 'md5' ] ) for k , v in list ( json_result . items ( ) ) ) #NEWLINE#
global_dict [ 'baz' ] = 'world' #NEWLINE#
os . path . isfile ( 'C:\\Users\\xxx\\Desktop\\xxx' ) #NEWLINE#
myscript . py #NEWLINE#
s . split ( 'fdasfdsafdsa' , 1 ) [ 0 ] #NEWLINE#
nx . draw ( G ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
'%s/%s/%s' % ( dt . month , dt . day , dt . year ) #NEWLINE#
df = df . append ( pd . read_sql ( querystring , cnxn , params = [ i ] ) ) #NEWLINE#
df [ 'c' ] = df [ 'b' ] . fillna ( df [ 'a' ] ) #NEWLINE#
nx . draw_networkx_edges ( G , pos , edgelist = red_edges , edge_color = 'r' , arrows = True ) #NEWLINE#
print ( resp [ 'headers' ] [ 'Host' ] ) #NEWLINE#
json_file . write ( '{}\n' . format ( json . dumps ( data ) ) ) #NEWLINE#
os . path . abspath ( 'link/file' ) #NEWLINE#
[ { 'y' : 2 , 'location' : 2 } , { 'z' : 3 , 'location' : 2 } ] #NEWLINE#
cmdclass = { 'install' : install_ } #NEWLINE#
os . system ( "bash#SPACE#-c#SPACE#'echo#SPACE#$0'" ) #NEWLINE#
n = sum ( [ ( len ( v ) + 1 ) for k , v in list ( dict_test . items ( ) ) ] ) #NEWLINE#
""",""" . join ( map ( str , a ) ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
[ random . choice ( list_of_lists ) for _ in range ( sample_size ) ] #NEWLINE#
mySet = set ( ( x , y ) for x in range ( 1 , 51 ) for y in range ( 1 , 51 ) ) #NEWLINE#
bisect ( list_of_tuples , ( 3 , None ) ) #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] ] #NEWLINE#
s . groupby ( level = [ 'first' , 'second' ] ) . sum ( ) #NEWLINE#
bool_list = [ False ] * len ( bool_list ) #NEWLINE#
sorted ( unsorted_list , key = lambda x : int ( x [ 3 ] ) ) #NEWLINE#
numpy . intersect1d ( a , b ) #NEWLINE#
label3 = numpy . dstack ( ( label255 , label255 , label255 ) ) #NEWLINE#
A [ np . ix_ ( [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ) ] #NEWLINE#
spDF . rdd . first ( ) #NEWLINE#
[ i for i , ( a , b ) in enumerate ( zip ( vec1 , vec2 ) ) if a == b ] #NEWLINE#
exec ( compile ( open ( 'C:\\X\\Y\\Z' ) . read ( ) , 'C:\\X\\Y\\Z' , 'exec' ) ) #NEWLINE#
root = Tk ( ) #NEWLINE#
return super ( MyAdmin , self ) . formfield_for_dbfield ( db_field , ** kwargs ) #NEWLINE#
json . loads ( s ) #NEWLINE#
wjdata = json . load ( urllib . request . urlopen ( 'url' ) ) #NEWLINE#
tostring ( element ) . split ( '>' , 1 ) [ 1 ] . rsplit ( '</' , 1 ) #NEWLINE#
dict ( j for i in L for j in list ( i . items ( ) ) ) #NEWLINE#
line = line . split ( '\t' ) #NEWLINE#
sys . stdout . write ( 'hello' ) #NEWLINE#
Decimal ( '1.03' ) #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
outfile . write ( line ) #NEWLINE#
df_one . join ( df_two , df_one [ 'col1' ] == df_two [ 'col1' ] , 'inner' ) #NEWLINE#
print ( re . findall ( '^.*\\.$\\Z' , data , re . MULTILINE ) ) #NEWLINE#
x [ [ [ 1 ] , [ 3 ] ] , [ 1 , 3 ] ] #NEWLINE#
numpy . repeat ( [ 1 , 2 , 3 , 4 ] , [ 3 , 3 , 2 , 2 ] ) #NEWLINE#
map ( lambda x : x + 1 , [ 1 , 2 , 3 ] ) #NEWLINE#
df = pd . DataFrame ( data = matrix . toarray ( ) , columns = names , index = raw ) #NEWLINE#
print ( '#SPACE#' . join ( i ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
A = matrix ( [ [ 2 , 2 , 3 ] , [ 11 , 24 , 13 ] , [ 21 , 22 , 46 ] ] ) #NEWLINE#
[ { 'data' : 0 } , { 'data' : 1 } , { 'data' : 2 } ] #NEWLINE#
pattern = re . compile ( '[^\\u0000-\\uFFFF]' , re . UNICODE ) #NEWLINE#
print ( df [ 'New_Col' ] ) #NEWLINE#
df [ [ 'Adj#SPACE#Close' , '100MA' ] ] . plot ( ax = axarr [ 0 ] ) #NEWLINE#
A . indptr = np . array ( [ 0 , 0 , 0 , 1 , 1 , 1 , 2 ] , dtype = np . int32 ) #NEWLINE#
print ( [ s [ i ] for i in index ] ) #NEWLINE#
print ( ( i , [ round ( 255 * x ) for x in rgb ] ) ) #NEWLINE#
[ - 2 , - 2 , - 2 , - 2 , - 8 , - 8 , - 8 , - 8 , - 8 , - 8 ] #NEWLINE#
ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
[ 'e' , 'd' ] #NEWLINE#
plt . show ( ) #NEWLINE#
silly_var ( ) #NEWLINE#
do_stuff ( ) #NEWLINE#
df . to_excel ( 'test.xlsx' , sheet_name = 'sheet1' , index = False ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
{ 'some_key' : 'some_val' , 'other_key' : 'new_val' } #NEWLINE#
r . headers [ 'content-disposition' ] #NEWLINE#
plt . style . use ( 'seaborn-dark-palette' ) #NEWLINE#
list ( range ( 11 , 17 ) ) #NEWLINE#
Thread ( target = fct ) . start ( ) #NEWLINE#
ax . spines [ 'left' ] . set_visible ( False ) #NEWLINE#
ax . spines [ 'top' ] . set_visible ( False ) #NEWLINE#
[ len ( x ) for x in s . split ( ) ] #NEWLINE#
sys . path . append ( '/var/www/cloudloon' ) #NEWLINE#
[ y for y in a if y not in b ] #NEWLINE#
map ( lambda x : x . strip ( ) , l ) #NEWLINE#
df . insert ( idx , col_name , value ) #NEWLINE#
return [ ( x + 1 ) for x in y ] #NEWLINE#
[ ( 3 * x ) for x in [ 111 , 222 , 333 ] ] #NEWLINE#
defaultdict ( lambda : defaultdict ( dict ) ) #NEWLINE#
plt . scatter ( x , y , c = t , cmap = 'jet' ) #NEWLINE#
pd . read_csv ( 'test' ) #NEWLINE#
db . session . add ( query ) #NEWLINE#
df . groupby ( 'd' ) . apply ( f ) #NEWLINE#
Group . objects . get ( id = 1 ) . members . filter ( is_main_user = True ) [ 0 ] #NEWLINE#
l = request . user . groups . values_list ( 'name' , flat = True ) #NEWLINE#
sqs . filter ( has_been_sent = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
regex = re . compile ( '\\d+(?:,\\d+)*' ) #NEWLINE#
b = df [ ( df [ 'time' ] > X ) & ( df [ 'time' ] < Y ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
urllib . request . urlopen ( 'http://www.python.org/' ) #NEWLINE#
return render_template ( 'recipes/createRecipe.html' , form = form ) #NEWLINE#
time . sleep ( 30.0 ) #NEWLINE#
rdf . unstack ( [ 'First' , 'Third' ] ) #NEWLINE#
Post . objects . filter ( user = request . user ) . order_by ( '-timestamp' ) #NEWLINE#
df . sort_index ( ) #NEWLINE#
np . linspace ( 0 , 5 , 10 ) #NEWLINE#
ax . set_zlabel ( 'Amount' ) #NEWLINE#
json_file . write ( '{}\n' . format ( json . dumps ( new_data ) ) ) #NEWLINE#
numpy . transpose ( [ numpy . tile ( x , len ( y ) ) , numpy . repeat ( y , len ( x ) ) ] ) #NEWLINE#
mylist = [ 'b' , 'C' , 'A' ] #NEWLINE# mylist . sort ( ) #NEWLINE#
np . array ( x ) . reshape ( 2 , 2 , 4 ) #NEWLINE#
rdd . <STR0> ( ) . show ( ) #NEWLINE#
df . stack ( level = 0 ) . groupby ( 'team' ) . tail ( 1 ) #NEWLINE#
regex = re . compile ( '\\s*[Ff]eat\\.\\s*' ) #NEWLINE#
ssh . connect ( '127.0.0.1' , username = 'jesse' , password = 'lol' ) #NEWLINE#
admin . site . unregister ( Site ) #NEWLINE#
plt . figure ( figsize = ( 5 , 6 ) ) #NEWLINE#
print ( '{}\n' . format ( df ) ) #NEWLINE#
{ i : ( 0 ) for i in range ( 0 , 10 ) } #NEWLINE#
re . sub ( '\\{\\{.*\\}\\}#SPACE#' , '' , s ) #NEWLINE#
print ( Counter ( [ 3 , 3 , 3 , 4 , 4 , 2 ] ) . most_common ( ) ) #NEWLINE#
"""([0-9]{{1,3}}[%])([{0}]?)""" . format ( config . SERIES ) #NEWLINE#
subprocess . call ( [ 'python' , 'helloworld.py' ] ) #NEWLINE#
os . setsid ( ) #NEWLINE#
app . debug = true #NEWLINE#
re . findall ( '.{1,2}' , s , re . DOTALL ) #NEWLINE#
drawPropagation ( 1.0 , 1.0 , numpy . linspace ( - 2 , 2 , 10 ) ) #NEWLINE#
proc . wait ( ) #NEWLINE#
kdll . CreateSymbolicLinkA ( 'd:\testdir' , 'd:\testdir_link' , 1 ) #NEWLINE#
df . drop ( df . ix [ : , 'Unnamed:#SPACE#24' : 'Unnamed:#SPACE#60' ] . head ( 0 ) . columns , axis = 1 ) #NEWLINE#
[ item for sublist in ( list_of_lists for item in sublist ) ] #NEWLINE#
[ a for a in A . objects . all ( ) if a . b_set . count ( ) < 2 ] #NEWLINE#
plt . show ( ) #NEWLINE#
session . visit ( '<url#SPACE#to#SPACE#visit#SPACE#with#SPACE#proper#SPACE#cookies>' ) #NEWLINE#
z = merge_dicts ( a , b , c , d , e , f , g ) #NEWLINE#
df [ 'quantity' ] = df [ 'quantity' ] . apply ( lambda x : x * - 1 ) #NEWLINE#
logging . basicConfig ( level = logging . DEBUG ) #NEWLINE#
ax . set_xlabel ( 'X#SPACE#LABEL' ) #NEWLINE#
return int ( s [ 1 : ] , 2 ) / 2.0 ** ( len ( s ) - 1 ) #NEWLINE#
os . path . splitext ( os . path . basename ( f ) ) #NEWLINE#
os . execv ( '/bin/echo' , [ 'echo' , 'foo' , 'bar' ] ) #NEWLINE#
print ( '"%s":#SPACE#%x' % ( hashstr , hash ) ) #NEWLINE#
[ x [ 0 ] for x in a ] #NEWLINE#
any ( i in '<string>' for i in ( '11' , '22' , '33' ) ) #NEWLINE#
print ( re . sub ( '[a-zA-Z?]' , '' , my_string ) . strip ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( my_dict . items ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ list ( df [ 'stats' ] [ 0 ] . keys ( ) ) ] = df [ 'stats' ] . apply ( pandas . Series ) #NEWLINE#
list ( A [ np . triu_indices ( 3 ) ] ) #NEWLINE#
line = line . rstrip ( '\n' ) #NEWLINE#
array ( [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ w for w in re . split ( '\\W' , 'Hello#SPACE#world,#SPACE#my#SPACE#name#SPACE#is...James!' ) if w ] #NEWLINE#
numpy . argwhere ( a . max ( ) == a ) #NEWLINE#
connection = cql . connect ( 'localhost:9160' , cql_version = '3.0.0' ) #NEWLINE#
l3 = [ x for x in l1 if x not in l2 ] #NEWLINE#
lines . sort ( ) #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
getattr ( getattr ( getattr ( f , 'bar' ) , 'baz' ) , 'quux' ) #NEWLINE#
return [ t [ len ( parm ) : ] for t in dir . split ( '_' ) if t . startswith ( parm ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . datetime . strptime ( '5/10/1955' , '%d/%m/%Y' ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
filtered_dict = { k : v for k , v in my_dict . items ( ) if not st . isdisjoint ( v ) } #NEWLINE#
cur . execute ( 'SELECT#SPACE#add_user(%(nr)s,#SPACE#%(email)s,#SPACE#...)#SPACE#...' , user ) #NEWLINE#
simplelist = [ SimpleClass ( count ) for count in range ( 4 ) ] #NEWLINE#
plt . rc ( 'grid' , linestyle = '-' , color = 'black' ) #NEWLINE#
( lambda x , y : x + y ) ( 1 , 2 ) #NEWLINE#
{ { users | selectattr ( 'email' , 'equalto' , 'foo@bar.invalid' ) } } #NEWLINE#
w [ 'female' ] = w [ 'female' ] . map ( { 'female' : 1 , 'male' : 0 } ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( sorted ( x ) ) #NEWLINE#
[ add ( x , 2 ) for x in [ 1 , 2 , 3 ] ] #NEWLINE#
re . findall ( '\\d+' , "hello#SPACE#42#SPACE#I'm#SPACE#a#SPACE#32#SPACE#string#SPACE#30" ) #NEWLINE#
print ( random . choice ( open ( 'WordsForGames.txt' ) . readline ( ) . split ( ) ) ) #NEWLINE#
array ( [ 0 , 0 , 1 , 0 , 0 , 1 , 0 ] ) #NEWLINE#
[ { 'model' : 'myapp.user' , 'pk' : '89900' , 'fields' : { 'name' : 'Clelio#SPACE#de#SPACE#Paula' } } ] #NEWLINE#
comment = forms . CharField ( label = '' , help_text = '' , widget = forms . Textarea ( ) ) #NEWLINE#
df . ix [ : , ( ~ np . in1d ( df . dtypes , [ 'object' , 'datetime' ] ) ) ] *= 3 #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
data_3levels . unstack ( 'l3' ) . mul ( data_2levels , axis = 0 ) . stack ( ) #NEWLINE#
df . c_contofficeID . str . replace ( '^12' , '' ) . to_frame ( ) #NEWLINE#
max ( enumerate ( props ) , key = lambda tup : len ( tup [ 1 ] ) ) #NEWLINE#
( M == 0 ) . T . nonzero ( ) #NEWLINE#
logging . exception ( 'ZeroDivisionError:#SPACE#{0}' . format ( e ) ) #NEWLINE#
a [ np . lexsort ( a [ : , : : - 1 ] . T ) ] #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
numpy . mean ( gp2 ) #NEWLINE#
a [ key ] . append ( 2 ) #NEWLINE#
my_dict2 = { y : x for x , y in my_dict . items ( ) } #NEWLINE#
mongo . db . collection . update ( { } , { '$unset' : { 'parent.toremove' : 1 } } , multi = True ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
print ( 'A#SPACE#random#SPACE#string:#SPACE#' + get_random_unicode ( 10 ) ) #NEWLINE#
c . execute ( 'CREATE#SPACE#TABLE#SPACE#test#SPACE#(guid#SPACE#GUID#SPACE#PRIMARY#SPACE#KEY,#SPACE#name#SPACE#TEXT)' ) #NEWLINE#
os . path . getsize ( 'large.tar.gz' ) >> 20 #NEWLINE#
cursor . execute ( sql , ( thedata , ) ) #NEWLINE#
df . iloc [ : , ( [ 0 ] ) ] #NEWLINE#
sum ( [ True , True , True , False , False ] ) #NEWLINE#
return '#SPACE#' . join ( word [ : : - 1 ] for word in sentence . split ( ) ) #NEWLINE#
print ( pd . DataFrame ( list ( file_to_adverb_dict . items ( ) ) , columns = [ 'file_names' , #NEWLINE# 'col1' ] ) ) #NEWLINE#
[ key for key , val in list ( dct . items ( ) ) if val ] #NEWLINE#
int ( 0 if value is None else value ) #NEWLINE#
data = np . array ( data , dtype = 'float' ) #NEWLINE#
ax2 . plot ( x , y , 'bo' ) #NEWLINE#
parser . add_argument ( '-c' , '--chunksize' , type = int , help = 'no#SPACE#metavar#SPACE#specified' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ heapq . nsmallest ( x , 2 ) [ 1 ] for x in list_of_lists ] #NEWLINE#
plt . savefig ( 'piechart.png' , bbox_inches = 'tight' ) #NEWLINE#
a = [ ( b + 4 if b < 0 else b ) for b in a ] #NEWLINE#
[ 'x' , '#SPACE#' , 'y' , None , '#SPACE#' , 'z' ] #NEWLINE#
{ 'A' : '15' , 'C' : 'false' , 'B' : '8' , 'D' : '[somevar,#SPACE#a=0.1,#SPACE#b=77,#SPACE#c=true]' } #NEWLINE#
text_file . write ( 'Purchase#SPACE#Amount:#SPACE#{0}' . format ( TotalAmount ) ) #NEWLINE#
b = a [ : ] #NEWLINE#
df . columns = [ 'W' , 'X' , 'Y' , 'Z' ] #NEWLINE#
assert rdd . squares ( ) . collect ( ) == rdd . map ( lambda x : x * x ) . collect ( ) #NEWLINE#
L . append ( [ 7 , 8 , 9 ] ) #NEWLINE#
"""^[#SPACE#\\t]*#define(.*\\\\\\n)+.*$""" #NEWLINE#
print ( ',#SPACE#' . join ( data [ : - 2 ] + [ '#SPACE#and#SPACE#' . join ( data [ - 2 : ] ) ] ) ) #NEWLINE#
zipfile . ZipFile ( zipbytes ) #NEWLINE#
random_key = os . urandom ( 16 ) #NEWLINE#
c = ',#SPACE#' . join ( '%s=%s' % t for t in zip ( a , b ) ) #NEWLINE#
np . allclose ( a , b ) #NEWLINE#
',' . join ( my_list [ : - 1 ] ) + '&' + my_list [ - 1 ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
http_server . listen ( int ( os . environ . get ( 'PORT' ) ) , address = os . environ [ 'IP' ] ) #NEWLINE#
any ( np . array_equal ( np . array ( [ [ 0 , 0 ] , [ 0 , 0 ] ] ) , x ) for x in my_list ) #NEWLINE#
[ ( x , y ) for x , y in numpy . ndindex ( a . shape ) ] #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
df . columns . set_levels ( [ 'one' , 'two' ] , level = 0 , inplace = True ) #NEWLINE#
l = ast . literal_eval ( s ) #NEWLINE#
plt . draw ( ) #NEWLINE#
df . apply ( lambda x : pd . factorize ( x ) [ 0 ] ) #NEWLINE#
df . loc [ ( df [ 'Type' ] == 'Dog' ) & df [ 'Killed' ] ] #NEWLINE#
self . process . terminate ( ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
"""{0}#SPACE#{1}#SPACE#{1}""" . format ( 'foo' , 'bar' ) #NEWLINE#
sorted ( chain ( a , b ) , key = lambda x : x . name ) #NEWLINE#
[ { 'a' : 123 , 'b' : 1234 } , { 'a' : 3222 , 'b' : 1234 } ] #NEWLINE#
pd . DataFrame ( s . groupby ( level = 0 ) . apply ( list ) . to_dict ( ) ) #NEWLINE#
name = sys . argv [ 1 ] #NEWLINE#
df = pd . DataFrame ( [ 'some' , 'short' , 'string' , 'has' , 'foo' ] , columns = [ 'col1' ] ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
admin . site . register ( YourModel , YourModelAdmin ) #NEWLINE#
int ( 3.1415 ) #NEWLINE#
d = defaultdict ( lambda : defaultdict ( int ) ) #NEWLINE#
my_dict = ast . literal_eval ( '{{{0}}}' . format ( my_string ) ) #NEWLINE#
self . axes . imshow ( self . data , interpolation = 'quadric' , aspect = 'auto' ) #NEWLINE#
a [ i , j ] = 5 #NEWLINE#
sum ( 1 for row in rows for i in row if i ) #NEWLINE#
"""""" . join ( map ( chr , L ) ) #NEWLINE#
c . bin [ 2 : ] #NEWLINE#
gtk . main ( ) #NEWLINE#
driver . get ( 'http://www.w3c.org' ) #NEWLINE#
[ 0 ] * 10000 #NEWLINE#
print ( pattern . match ( 'something/foo-en-gb/file.txt' ) . groupdict ( ) ) #NEWLINE#
b = np . delete ( a , [ 2 , 3 , 6 ] ) #NEWLINE#
locals ( ) . update ( my_dict ) #NEWLINE#
[ ( movie_dict [ 'title' ] , movie_dict [ 'year' ] ) for movie_dict in movie_dicts ] #NEWLINE#
var1 , var2 , var3 = ( ll + [ None ] * 3 ) [ : 3 ] #NEWLINE#
plt . show ( ) #NEWLINE#
{ k : sum ( v ) for k , v in list ( trimmed . items ( ) ) } #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
output = np . frombuffer ( data , 'b' ) . reshape ( - 1 , 3 ) [ : , 1 : ] . flatten ( ) . view ( 'i2' ) #NEWLINE#
print ( getattr ( somemodule , class_name ) ) #NEWLINE#
f . write ( '#SPACE#' . join ( str ( s ) for s in t ) + '\n' ) #NEWLINE#
plt . savefig ( 'test.pdf' ) #NEWLINE#
df [ 'Name' ] = 'abc' #NEWLINE#
def utf8len ( s ) : #NEWLINE# #INDENT# return len ( s . encode ( 'utf-8' ) ) #NEWLINE#
os . path . getsize ( 'flickrapi-1.2.tar.gz' ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 1500 ) #NEWLINE#
input = open ( fullpath , 'rb' ) #NEWLINE#
chart . add_series ( { 'values' : '=Sheet1!$C$1:$C$5' , 'fill' : { 'color' : 'yellow' } } ) #NEWLINE#
df [ 'date_int' ] = df . date . astype ( np . int64 ) #NEWLINE#
s . split ( '&' ) #NEWLINE#
print ( pdf_file . read ( ) ) #NEWLINE#
legend ( ) . orientation = 'top_left' #NEWLINE#
( dist ** 2 ) . sum ( axis = 1 ) ** 0.5 #NEWLINE#
int ( round ( 123 , - 2 ) ) #NEWLINE#
df_row_merged = pd . concat ( [ df_a , df_b ] , ignore_index = True ) #NEWLINE#
print ( sys . stdin . read ( ) ) #NEWLINE#
exec ( compile ( open ( 'C:\\python\\main_menu.py' ) . read ( ) , #NEWLINE# 'C:\\python\\main_menu.py' , 'exec' ) ) #NEWLINE#
p . wait ( ) #NEWLINE#
g . write ( '##SPACE#comment\n' ) #NEWLINE#
{ { url_for ( 'static' , filename = '[filenameofstaticfile]' ) } } #NEWLINE#
sheet . write ( 1 , 0 , 1 ) #NEWLINE#
lst = [ os . path . splitext ( x ) [ 0 ] for x in accounts ] #NEWLINE#
"""{:*^30}""" . format ( 'centered' ) #NEWLINE#
app . run ( host = 'localhost' , port = 23423 ) #NEWLINE#
eval ( "__import__('sys').exit(1)" ) #NEWLINE#
eval ( '1#SPACE#+#SPACE#1' ) #NEWLINE#
odeint ( func , y0 , t , a , b , c ) #NEWLINE#
np . hstack ( [ np . atleast_2d ( [ 1 , 2 , 3 , 4 , 5 ] ) . T , np . atleast_2d ( [ 1 , 2 , 3 , 4 , 5 ] ) . T ] ) #NEWLINE#
np . dot ( I , np . ones ( ( 7 , ) , int ) ) #NEWLINE#
soup . body . findAll ( text = re . compile ( '^Python$' ) ) #NEWLINE#
{ '#SPACE#' . join ( [ keys [ char ] for char in k ] ) : v for k , v in list ( event_types . items ( ) ) } #NEWLINE#
print ( p . map_async ( f , [ 1 , 2 , 3 ] ) ) #NEWLINE#
lambda x : x if x < 3 else None #NEWLINE#
fig . colorbar ( p ) #NEWLINE#
sys . path . append ( os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) ) #NEWLINE#
df . to_csv ( f , index = False , header = False ) #NEWLINE#
bids . append ( int ( bid ) ) #NEWLINE#
headerRows [ 0 ] [ 10 ] . findNext ( 'b' ) . string #NEWLINE#
connection . close ( ) #NEWLINE#
Some_Model . objects . filter ( id__in = ids_list ) . delete ( ) #NEWLINE#
df . groupby ( 'A' ) [ 'C' ] . transform ( zscore ) #NEWLINE#
platform . architecture ( ) #NEWLINE#
print ( date . strftime ( '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
matplotlib . use ( 'module://mplh5canvas.backend_h5canvas' ) #NEWLINE#
my_list2 , my_list1 = map ( list , zip ( * my_list ) ) #NEWLINE#
return sum ( 1 for c in string if c . islower ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ a [ i // 2 ] for i in range ( len ( a ) * 2 ) ] #NEWLINE#
wcswidth ( 'á\x84\x80á\x85¡á\x86¨' ) #NEWLINE#
urllib . parse . unquote_plus ( 'Andr%C3%A9+T%C3%A9chin%C3%A9' ) . decode ( 'utf-8' ) #NEWLINE#
[ 1505 ] #NEWLINE#
format ( num , '016b' ) #NEWLINE#
df [ df [ 'column#SPACE#name' ] . map ( len ) < 2 ] #NEWLINE#
print ( 'The#SPACE#average#SPACE#is:#SPACE#' + format ( average , ',.3f' ) + '%' ) #NEWLINE#
pickle . dumps ( threading . Lock ( ) ) #NEWLINE#
fig . savefig ( 'Sub#SPACE#Directory/graph.png' ) #NEWLINE#
df [ df . columns . difference ( [ 'T1_V6' ] ) ] #NEWLINE#
""",#SPACE#""" . join ( map ( str , tups ) ) #NEWLINE#
locals ( ) [ 'i' ] #NEWLINE#
os . system ( 'cls' ) #NEWLINE#
pd . Series ( np . einsum ( 'ij->i' , s . values . reshape ( - 1 , 3 ) ) ) #NEWLINE#
content = request . json [ 'content' ] #NEWLINE#
open ( f . name ) . read ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
ax . plot_surface ( X , Y , Z , rstride = 1 , cstride = 1 , cmap = cm . jet ) #NEWLINE#
df . loc [ ( df . isnull ( ) . any ( axis = 1 ) ) , : ] = np . nan #NEWLINE#
data . iloc [ 499 : 999 ] . plot ( y = 'value' ) #NEWLINE#
df . toPandas ( ) #NEWLINE#
int ( sum ( jdcal . gcal2jd ( dt . year , dt . month , dt . day ) ) ) #NEWLINE#
a_lower = dict ( ( k . lower ( ) , v ) for k , v in list ( a . items ( ) ) ) #NEWLINE#
{ tuple ( x ) for x in l1 } . intersection ( map ( tuple , l2 ) ) #NEWLINE#
print ( celery . current_task . task_id ) #NEWLINE#
starf = [ int ( i ) for i in starf ] #NEWLINE#
sum ( zip ( * structure ) [ 1 ] ) #NEWLINE#
plt . hist ( [ x , y ] , color = [ 'r' , 'b' ] , alpha = 0.5 ) #NEWLINE#
x . reshape ( 2 , 2 , 5 ) . transpose ( 1 , 0 , 2 ) #NEWLINE#
locals ( ) [ 4 ] #NEWLINE#
i = input ( 'Please#SPACE#enter#SPACE#name[Jack]:' ) or 'Jack' #NEWLINE#
collection1 . find ( { 'albums' : { '$in' : [ 3 , 7 , 8 ] } } ) #NEWLINE#
S1 . intersection ( S2 ) #NEWLINE#
plt . gca ( ) . invert_yaxis ( ) #NEWLINE#
[ list ( itertools . chain ( * x ) ) for x in zip ( L1 , L2 ) ] #NEWLINE#
sys . stdout . write ( '\rComplete!#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#\n' ) #NEWLINE#
ndb . KeyProperty ( kind = 'Foo' , required = True ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
tostring ( element ) . split ( '>' , 1 ) [ 1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
{ k : [ ( a + b ) for a , b in zip ( * v ) ] for k , v in list ( d . items ( ) ) } #NEWLINE#
sys . path . insert ( 0 , os . path . join ( PROJECT_ROOT , 'apps' ) ) #NEWLINE#
text = str ( combobox1 . currentText ( ) ) #NEWLINE#
the_dump = json . dumps ( [ 'foo' , { 'bar' : [ 'baz' , None , 1.0 , 2 ] } ] ) #NEWLINE#
len ( [ _ for s in re . finditer ( '(?=aa)' , 'aaa' ) ] ) #NEWLINE#
df . groupby ( [ 'A' , 'S' ] ) [ cols ] . agg ( [ 'sum' , 'size' ] ) #NEWLINE#
datetime . datetime . combine ( birthdate , datetime . time ( ) ) #NEWLINE#
pd . read_hdf ( '/tmp/out.h5' , 'results_table' , where = 'A#SPACE#in#SPACE#[1,3,4]' ) #NEWLINE#
s . encode ( 'utf8' ) #NEWLINE#
df [ df . Name . isin ( [ 'Alice' , 'Bob' ] ) ] #NEWLINE#
A * B [ : , ( np . newaxis ) ] #NEWLINE#
a = [ 'a' , 'a' , 'a' , 'a' , 'b' , 'b' , 'c' , 'c' , 'c' , 'd' , 'e' , 'e' , 'e' , 'e' , 'e' ] #NEWLINE#
np . dot ( np . dot ( I , np . ones ( ( 7 , ) , int ) ) , mat ) #NEWLINE#
z = int ( str ( x ) + str ( y ) ) #NEWLINE#
x = line . rstrip ( '\n' ) . split ( ',' ) #NEWLINE#
np . mgrid [ 0 : 5 , 0 : 5 ] . transpose ( 1 , 2 , 0 ) . reshape ( - 1 , 2 ) #NEWLINE#
list ( dict . keys ( ) ) #NEWLINE#
f . write ( struct . pack ( 'i' , value ) ) #NEWLINE#
plt . axvspan ( x , x2 , facecolor = 'g' , alpha = 0.5 ) #NEWLINE#
print ( str ( 'a' ) ) #NEWLINE#
cmd = subprocess . Popen ( [ 'sed' , '-n' , '$=' , filename ] , stdout = subprocess . PIPE ) #NEWLINE#
"""""" . join ( ch for ch , _ in itertools . groupby ( foo ) ) #NEWLINE#
widgets = { 'delivery_date' : forms . DateInput ( attrs = { 'id' : 'datepicker' } ) } #NEWLINE#
np . array ( 12345678901234 , dtype = np . int32 ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ { post . featured_image } } #NEWLINE#
codecs . decode ( '\\u000D' , 'unicode-escape' ) #NEWLINE#
cv2 . rectangle ( img , ( x , y ) , ( x + w , y + h ) , ( 255 , 0 , 0 ) , 2 ) #NEWLINE#
sys . path . append ( '/foo/bar/mock-0.3.1' ) #NEWLINE#
"""""" . join ( chr ( int ( data [ i : i + 2 ] , 16 ) ) for i in range ( 0 , len ( data ) , 2 ) ) #NEWLINE#
cv2 . imshow ( 'image' , img ) #NEWLINE#
[ ( 2 * x ) for x in some_list if x > 2 ] #NEWLINE#
f = open ( 'file.txt' , 'wb' ) #NEWLINE#
numpy . array ( [ 1.2 , 'abc' ] , dtype = object ) #NEWLINE#
Toy . objects . filter ( owner__parent__id = 1 ) #NEWLINE#
df . groupby ( [ df . index . map ( lambda t : t . minute ) , 'Source' ] ) #NEWLINE#
open ( 'output.xml' , 'wb' ) . write ( dom . toxml ( ) ) #NEWLINE#
print ( find_words ( 'tableprechaun' , words = set ( [ 'tab' , 'table' , 'leprechaun' ] ) ) ) #NEWLINE#
random . uniform ( - 1 , 1 ) #NEWLINE#
results = sorted ( ranks , key = lambda x : int ( x [ 'rank' ] . replace ( ',' , '' ) ) ) #NEWLINE#
""",#SPACE#""" . join ( ( 'abc' , 'def' , 'ghi' ) ) #NEWLINE#
[ '' . join ( x ) for x in window ( '7316717' , 3 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
z , = set ( ( 'a' , 'b' , 'c' ) ) - set ( ( x , y ) ) #NEWLINE#
B = numpy . array ( [ A [ 0 , 0 , 1 ] , A [ 2 , 1 , 2 ] ] ) #NEWLINE#
[ 'x' , 'cos' ] #NEWLINE#
json . dump ( data , outfile , ensure_ascii = False ) #NEWLINE#
tags = soup . find_all ( lambda tag : tag . has_attr ( 'src' ) ) #NEWLINE#
data = [ [ int ( i ) for i in line . split ( ) ] for line in original ] #NEWLINE#
print ( "'%-100s'" % 'hi' ) #NEWLINE#
df . MUT . str . extract ( 'A:(T)|A:(G)|A:(C)|A:(-)' ) #NEWLINE#
subsampled = df . ix [ ( choice ( x ) for x in list ( grouped . groups . values ( ) ) ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
self . response . out . write ( key ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( os . path . join ( subdir , file ) ) #NEWLINE#
img = cv2 . imread ( 'Undistorted.jpg' , 0 ) #NEWLINE#
received_json_data = json . loads ( request . body . decode ( 'utf-8' ) ) #NEWLINE#
greet_selves ( ) #NEWLINE#
"""Sico87#SPACE#is#SPACE#an#SPACE#awful#SPACE#python#SPACE#developer""" . split ( '#SPACE#' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ next ( iter ( s ) ) for _ in range ( 10 ) ] #NEWLINE#
cidrs = netaddr . ip_range_to_cidrs ( ip_start , ip_end ) #NEWLINE#
response = requests . post ( url , data = data ) #NEWLINE#
ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
np . array ( [ 1 , 2 , 3 ] , ndmin = 2 ) . T #NEWLINE#
[ os . path . split ( r ) [ - 1 ] for r , d , f in os . walk ( tree ) if not d ] #NEWLINE#
return [ 1 , 2 , 3 ] #NEWLINE#
plt . setp ( ax . get_yticklabels ( ) , color = 'darkblue' ) #NEWLINE#
df1 . iloc [ [ 1 , 3 , 5 ] , [ 1 , 3 ] ] #NEWLINE#
max ( lis , <STR0> = lambda x : x [ 1 ] ) #NEWLINE#
form = MyForm ( myfield = [ '1' , '3' ] ) #NEWLINE#
{ 'Jhonny' : 'green' , 'Steve' : 'blue' } #NEWLINE#
pprint ( [ OrderedDict ( zip ( names , subl ) ) for subl in list_of_lists ] ) #NEWLINE#
( df != 0 ) . any ( axis = 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""#SPACE#""" . join ( map ( bin , bytearray ( st ) ) ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
total_rows [ 'ColumnID' ] = total_rows [ 'ColumnID' ] . astype ( str ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . findall ( rx , st , re . VERBOSE ) #NEWLINE#
os . system ( 'echo#SPACE#{0}' . format ( probe1 ) ) #NEWLINE#
{ key : data [ key ] for key in data if not_seen ( key . split ( ':' ) [ 0 ] ) } #NEWLINE#
max ( a , key = sum ) #NEWLINE#
ax . set_title ( 'Title#SPACE#for#SPACE#first#SPACE#plot' ) #NEWLINE#
plt . show ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
testVar = input ( 'Ask#SPACE#user#SPACE#for#SPACE#something.' ) #NEWLINE#
a [ ( [ i for i in range ( a . shape [ 0 ] ) if i != 1 ] ) , : , : ] #NEWLINE#
{ 'a' : 'hello' , 'b' : 'world' } #NEWLINE#
logging . debug ( 'hi' ) #NEWLINE#
myfile . close ( ) #NEWLINE#
f . subs ( x , 1 ) #NEWLINE#
[ ( x , y ) for x in a for y in b ] #NEWLINE#
sys . stdout . buffer . write ( pdf_file . read ( ) ) #NEWLINE#
plt . subplot ( 2 , 1 , 1 ) #NEWLINE#
df [ 'Region#SPACE#Name' ] = df [ 'Region#SPACE#Name' ] . str . replace ( '#SPACE#\\(.+$' , '' ) #NEWLINE#
webbrowser . open ( filename ) #NEWLINE#
print ( requests . get ( url , data = data , cookies = cookies ) . text ) #NEWLINE#
"""'([^']|'')*'""" #NEWLINE#
s . encode ( 'latin-1' ) . decode ( 'utf8' ) #NEWLINE#
plt . rcParams [ 'line.color' ] = 'white' #NEWLINE#
datetime . datetime ( ddd . year , ddd . month , ddd . day ) #NEWLINE#
sorted ( list ( range ( len ( s ) ) ) , key = lambda k : s [ k ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '\\bdelhi\\b(?=(?:"[^"]*"|[^"])*$)' , '' , a ) #NEWLINE#
re . findall ( '\\S+' , s ) #NEWLINE#
assert not is_subseq ( 'ca' , 'abc' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
data [ 'lat' ] #NEWLINE#
df . grouby ( 'grp' ) . apply ( ols_res , [ 'x1' , 'x2' ] , 'y' ) #NEWLINE#
foo ( ) #NEWLINE#
tags = soup . find_all ( [ 'hr' , 'strong' ] ) #NEWLINE#
mydict = { 'name' : [ 'peter' , 'janice' , 'andy' ] , 'age' : [ 10 , 30 , 15 ] } #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
testf ( df [ 'month_15' ] . astype ( 'datetime64[D]' ) . values ) #NEWLINE#
[ [ [ 'x' , '>' , '7' ] , 'AND' , [ [ 'x' , '<' , '8' ] , 'OR' , [ 'x' , '=' , '4' ] ] ] ] #NEWLINE#
[ str ( n ) for n in range ( 10 ) ] #NEWLINE#
mpl . use ( 'WXAgg' ) #NEWLINE#
print ( os . path . join ( directory , file ) ) #NEWLINE#
df [ 'Date' ] [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
filtered_dict = { k : v for k , v in list ( d . items ( ) ) if filter_string in k } #NEWLINE#
set ( dic1 . keys ( ) ) == set ( dic2 . keys ( ) ) #NEWLINE#
print ( request . headers [ 'host' ] ) #NEWLINE#
{ 'va1' : "$input.params('val1')" , 'val2' : "$input.params('val2')" } #NEWLINE#
hex_string = 'deadbeef' #NEWLINE#
result = copy . deepcopy ( old_dict ) if old_dict is not None else { } #NEWLINE#
df . iloc [ 2 : 6 ] . plot ( y = 'b' ) #NEWLINE#
MyMIDI . addNote ( track , channel , pitch , time , duration , volume ) #NEWLINE#
plt . plot ( X , Y , color = c , marker = 'o' , label = 'xyz' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
int ( float ( s ) ) #NEWLINE#
os . system ( 'path/to/my_script.sh' ) #NEWLINE#
os . system ( 'your_command_here;#SPACE#second_command;#SPACE#third;#SPACE#etc' ) #NEWLINE#
min ( list ( range ( len ( a ) ) ) , key = lambda i : abs ( a [ i ] - 11.5 ) ) #NEWLINE#
msg . attach ( MIMEText ( text ) ) #NEWLINE#
"""{{#SPACE#x.foo#SPACE#}}""" #NEWLINE#
"""test.png""" . endswith ( ( 'jpg' , 'png' , 'gif' ) ) #NEWLINE#
re . findall ( '(?u)\\b\\w\\w+\\b' , 'this#SPACE#is#SPACE#a#SPACE#sentence!#SPACE#this#SPACE#is#SPACE#another#SPACE#one.' ) #NEWLINE#
s . loc [ slice ( 'a' , 'b' ) , slice ( 2 , 10 ) ] #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( doctree . toprettyxml ( ) ) #NEWLINE#
combined = list ( itertools . chain . from_iterable ( lists ) ) #NEWLINE#
file_contents = f . read ( ) #NEWLINE#
print ( line . rstrip ( ) ) #NEWLINE#
df [ [ 'A' , 'B' ] ] . max ( axis = 1 ) #NEWLINE#
np . random . multivariate_normal ( mean , cov , 10000 ) #NEWLINE#
df . groupby ( 'ID' ) [ '<colname>' ] . agg ( [ 'std' , 'mean' ] ) #NEWLINE#
request . headers . get ( 'your-header-name' ) #NEWLINE#
raise ValidationError ( 'At#SPACE#least#SPACE#one#SPACE#address#SPACE#is#SPACE#required.' ) #NEWLINE#
plt . savefig ( 'confusion_matrix.png' , format = 'png' ) #NEWLINE#
mylist [ 1 : ] == [ 'comment' ] #NEWLINE#
list ( l ) == [ 0 ] * len ( l ) #NEWLINE#
ax2 . set_ylabel ( 'name2' , fontsize = 14 , color = 'blue' ) #NEWLINE#
dict ( mylist ) #NEWLINE#
print ( '[DONE]' ) #NEWLINE#
np . concatenate ( ( A [ : : - 1 , : ] , A ) , axis = 0 ) #NEWLINE#
mylist [ 0 ] [ : 1 ] #NEWLINE#
print ( root . xpath ( "//article[@type='news']/content/text()" ) ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
[ random . random ( ) for _ in range ( 0 , 10 ) ] #NEWLINE#
map ( my_dictionary . get , my_list ) #NEWLINE#
list ( json_parse ( open ( 'data' ) ) ) #NEWLINE#
plt . savefig ( 'test.png' , bbox_inches = 'tight' ) #NEWLINE#
print ( numpy . array ( [ X ( ) ] , dtype = object ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
sympify ( '1/(x+1)+4*x/(x-1)+3-4*x**2+10*x**2' , evaluate = False ) . args #NEWLINE#
plt . show ( ) #NEWLINE#
y . mean ( axis = ( 1 , 3 ) ) #NEWLINE#
word = [ '*' ] * len ( word ) #NEWLINE#
[ x for x in data if x [ 'site' ] == 'Superuser' ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( x [ 1 ] , x [ 2 ] ) for x in ( x . split ( ';' ) for x in a . split ( '\n' ) ) if x [ 1 ] != 5 ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
map ( truediv , a , b ) #NEWLINE#
a = np . frombuffer ( Data ) #NEWLINE#
urllib . request . urlopen ( 'http://google.com' ) . getcode ( ) #NEWLINE#
ax . set_xscale ( 'custom' ) #NEWLINE#
setup2 = dict ( list ( setup1 . items ( ) ) + list ( { 'param1' : val10 , 'param2' : val20 #NEWLINE# } . items ( ) ) ) #NEWLINE#
df [ ( df <= 2 ) . all ( axis = 1 ) ] #NEWLINE#
df . xs ( 1 , level = 'A' , drop_level = False ) #NEWLINE#
np . allclose ( ans1 , ans2 ) #NEWLINE#
f . write ( e8 ) #NEWLINE#
[ i for i in range ( len ( word ) ) if word [ i ] == letter ] #NEWLINE#
print ( ',#SPACE#' . join ( LIST ) ) #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
print ( '%.1e' % x ) #NEWLINE#
csv . writer ( open ( 'abx.csv' , 'w' ) , delimiter = '#SPACE#' ) . writerows ( filtered ) #NEWLINE#
all ( '一' <= c <= '\u9fff' for c in name . decode ( 'utf-8' ) ) #NEWLINE#
d = collections . defaultdict ( lambda : [ 0 , [ ] ] ) #NEWLINE#
thing . save ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . intersection , [ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 3 , 4 , 5 , 6 , 7 ] ] ) #NEWLINE#
func2 ( 1 , 2 , 3 , 4 , 5 ) #NEWLINE#
plt . show ( ) #NEWLINE#
subbed = re . sub ( '\\s{2,}' , '|' , line . strip ( ) ) #NEWLINE#
[ random . sample ( s , 1 ) [ 0 ] for _ in range ( 10 ) ] #NEWLINE#
serialized_obj = serializers . serialize ( 'json' , [ obj ] ) #NEWLINE#
app . run ( ) #NEWLINE#
data [ 'result' ] = data [ 'result' ] . map ( lambda x : x . lstrip ( '+-' ) . rstrip ( 'aAbBcC' ) ) #NEWLINE#
[ [ 7 , 8 , 9 ] , [ 4 , 5 , 6 ] , [ 1 , 2 , 3 ] ] #NEWLINE#
max ( PlayerList , key = lambda p : max ( p [ 1 : ] ) ) [ 0 ] #NEWLINE#
sys . path . insert ( 0 , 'path/to/your/py_file' ) #NEWLINE#
set ( a ) & set ( b ) #NEWLINE#
setup ( console = [ 'myscript.py' ] , options = options ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( repr ( a . decode ( 'unicode-escape' ) ) ) #NEWLINE#
{ 'new_key' : 'new_value' , '67790' : { '1' : { 'kwh' : 319.4 } } } #NEWLINE#
db . session . commit ( ) #NEWLINE#
C . setopt ( pycurl . COOKIEFILE , 'cookie.txt' ) #NEWLINE#
np . linalg . norm ( A - B , axis = - 1 ) #NEWLINE#
[ 0 , 16 , 17 , 18 ] #NEWLINE#
df . where ( ( df > df . shift ( 1 ) ) . values & ( df . D == 1 ) [ : , ( None ) ] , np . nan ) #NEWLINE#
"""\\1""" #NEWLINE#
random . shuffle ( array ) #NEWLINE#
json . dumps ( { str ( k ) : v for k , v in list ( data . items ( ) ) } ) #NEWLINE#
f . writerow ( [ 'pk' , 'model' , 'codename' , 'name' , 'content_type' ] ) #NEWLINE#
[ ( 'A' , 1 , 2 ) , ( 'B' , 3 , 4 ) ] #NEWLINE#
sorted ( d , key = d . get , reverse = True ) #NEWLINE#
c = [ ( i , 0 ) for i in a ] #NEWLINE#
{ 'name' : [ p [ 'name' ] for p in persons ] , 'age' : [ p [ 'age' ] for p in persons ] } #NEWLINE#
persons = sorted ( persons , key = lambda person : person [ 'name' ] ) #NEWLINE#
return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) #NEWLINE#
pandas . to_datetime ( 'today' ) #NEWLINE#
Counter ( { 'a' : 3 , 'c' : 3 , 'b' : 2 , 'd' : 1 } ) #NEWLINE#
np . isnan ( np . array ( [ np . nan , 0 ] , dtype = object ) ) #NEWLINE#
df . to_sql ( 'demand_forecast_t' , engine , if_exists = 'replace' , index = False ) #NEWLINE#
MyList = [ inst1 , inst2 ] #NEWLINE#
result = ( list_ [ 0 ] [ 0 ] + list_ [ 1 ] [ 0 ] ) * ( list_ [ 0 ] [ 1 ] + list_ [ 1 ] [ 1 ] ) #NEWLINE#
zip ( * elements ) [ 1 ] #NEWLINE#
[ 50.1 , 50.2 , 50.3 , 50.4 , 60.1 , 60.2 , 60.3 , 60.4 , 70.1 , 70.2 , 70.3 , 70.4 ] #NEWLINE#
print ( df . applymap ( lambda x : str ( x ) . isdigit ( ) ) ) #NEWLINE#
q = Model . objects . filter ( Q ( field1 = f1 ) | Q ( field2 = f2 ) ) . distinct ( ) #NEWLINE#
set ( [ 'cheese' , 'tomato' ] ) #NEWLINE#
ax . yaxis . set_major_formatter ( FormatStrFormatter ( '%.2f' ) ) #NEWLINE#
sum ( sum ( 1 for i in row if i ) for row in rows ) #NEWLINE#
print ( re . sub ( '(.+?)(going|you|$)' , subit , s ) ) #NEWLINE#
zip ( keys , values ) #NEWLINE#
return repr ( s ) #NEWLINE#
pd . concat ( [ foo [ 'Country' ] , z ] , axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . write ( 'foo\nbar\nbaz\n' ) #NEWLINE#
json1_data = json . loads ( json1_str ) [ 0 ] #NEWLINE#
rdd = sc . parallelize ( [ ( 1 , 2 ) ] ) #NEWLINE#
ax . legend ( ) #NEWLINE#
ax . set_title ( 'ROC#SPACE#Space' ) #NEWLINE#
file . write ( dumps ( { 'numbers' : n , 'strings' : s , 'x' : x , 'y' : y } , file , indent = 4 ) ) #NEWLINE#
subprocess . call ( [ '7z' , 'a' , filename + '.7z' , '*.*' ] ) #NEWLINE#
logging . Formatter ( fmt = '%(asctime)s.%(msecs)03d' , datefmt = '%Y-%m-%d,%H:%M:%S' ) #NEWLINE#
sum ( [ v [ 0 ] for v in list ( d . values ( ) ) ] ) / float ( len ( d ) ) #NEWLINE#
df2 . rename_axis ( { 'Student' : 'Name' } , axis = 1 , inplace = True ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
smaller_array = np . delete ( array , index ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
total = sum ( int ( r [ 1 ] ) for r in csv . reader ( fin ) ) #NEWLINE#
( 1 + math . cos ( i ) ) ** ( 1 / 3.0 ) #NEWLINE#
sys . path . append ( '..' ) #NEWLINE#
ax . set_xlim ( 0 , 7 ) #NEWLINE#
int ( 'AEAE' , 16 ) #NEWLINE#
df . iloc [ ( [ 1 , 3 ] ) , : ] #NEWLINE#
plt . hist ( b , bins ) #NEWLINE#
get_ip_address ( 'eth0' ) #NEWLINE#
[ ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ] #NEWLINE#
df . groupby ( [ 'A' , 'B' ] ) . max ( ) [ 'C' ] #NEWLINE#
int ( '' . join ( [ hex ( ord ( x ) ) [ 2 : ] for x in 'YZ' ] ) , 16 ) #NEWLINE#
print ( np . random . randint ( 0 , 100 , 10 ) ) #NEWLINE#
[ ( mylist [ i : ] + [ newelement ] + mylist [ : i ] ) for i in range ( len ( mylist ) , - 1 , - 1 ) ] #NEWLINE#
x . pop ( random . randrange ( len ( x ) ) ) #NEWLINE#
ssh_client . connect ( 'server' , username = 'username' , password = 'password' ) #NEWLINE#
df = df / df . loc [ df . abs ( ) . idxmax ( ) ] . astype ( np . float64 ) #NEWLINE#
plt . show ( ) #NEWLINE#
q . write ( '' . join ( w ) ) #NEWLINE#
df . reset_index ( level = 0 , inplace = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( lst , reverse = True , key = operator . itemgetter ( 0 ) ) #NEWLINE#
np . argwhere ( a [ : , ( 1 ) ] == - 1 ) [ np . argmin ( a [ a [ : , ( 1 ) ] == - 1 , 0 ] ) ] #NEWLINE#
print ( [ tryeval ( x ) for x in L ] ) #NEWLINE#
python - mplatform #NEWLINE#
[ ( m + str ( n ) ) for m , n in zip ( b , a ) ] #NEWLINE#
[ x . start ( ) for x in re . finditer ( '\\|' , str ) ] #NEWLINE#
sum ( int ( n ) for n in str ( 2 ** 1000 ) ) #NEWLINE#
match = re . search ( '(?<=Value=?)([^&>]+)' , strJunk ) #NEWLINE#
self . new_soup . body . insert ( 3 , new_tag ) #NEWLINE#
hash , hash2 = hashlittle2 ( hashstr , 3735928559 , 3735928559 ) #NEWLINE#
g1 . columns = [ 'agd_mean' , 'agd_std' , 'hgd_mean' , 'hgd_std' ] #NEWLINE#
[ '{}_{}' . format ( k , v ) for k , l in list ( d . items ( ) ) for v in l ] #NEWLINE#
[ l [ i : i + 3 ] for i in range ( 0 , len ( l ) , 3 ) ] #NEWLINE#
pandas . io . parsers . read_csv ( 'input.csv' , parse_dates = [ [ 0 , 1 , 2 ] ] , header = None ) #NEWLINE#
u8 . decode ( 'utf-8' ) == v . decode ( 'latin1' ) == u16 . decode ( 'utf-16' ) #NEWLINE#
sys . stdout . write ( '\rDoing#SPACE#thing#SPACE#%i' % i ) #NEWLINE#
new_list . append ( fruit ) #NEWLINE#
[ '1' , '15' , '-23' , '-23' , '15' , '4' ] #NEWLINE#
plt . savefig ( 'figure%d.png' % i ) #NEWLINE#
print ( '{:.6f}' . format ( i ) ) #NEWLINE#
re . split ( '[^0-9A-Za-z]+' , strs ) #NEWLINE#
getattr ( __builtin__ , 'int' ) #NEWLINE#
return random . choice ( words ) #NEWLINE#
"""#SPACE#""" . join ( sorted ( k + ':' + v for k , v in list ( d . items ( ) ) ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
sum ( i % 4 == 3 for i in l ) #NEWLINE#
myfunc ( * args ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
foo ( ) #NEWLINE#
s . dropna ( ) #NEWLINE#
br . set_handle_robots ( False ) #NEWLINE#
zip ( big_list [ : ] , big_list [ 1 : ] , big_list [ 2 : ] ) #NEWLINE#
img . save ( '/tmp/image.bmp' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( [ 'Mt' ] , sort = False ) [ 'count' ] . max ( ) #NEWLINE#
[ int ( s ) for s in I . split ( ) if s . isdigit ( ) ] #NEWLINE#
pprint ( the_list ) #NEWLINE#
random . shuffle ( l ) #NEWLINE#
arr = [ [ ] ] * 3 #NEWLINE#
df_example . iloc [ ( [ 1 , 4 ] ) , : - 1 ] . T . corr ( ) #NEWLINE#
{ 'age' : '12' , 'name' : 'bob' , 'hobbies' : 'games,reading' , 'phrase' : "I'm#SPACE#cool!" } #NEWLINE#
myval = myval if myval is not None else defaultval #NEWLINE#
max ( d , key = d . get ) #NEWLINE#
print ( first_list + list ( set ( second_list ) - set ( first_list ) ) ) #NEWLINE#
datetime . date ( 2002 , 12 , 4 ) . strftime ( '%Y%m%d' ) #NEWLINE#
cmat . stack ( ) . to_frame ( 'item' ) . query ( '.3#SPACE#<#SPACE#item#SPACE#<#SPACE#.9' ) #NEWLINE#
ax . legend ( ) #NEWLINE#
result . update ( ( k , v ) for k , v in user . items ( ) if v is not None ) #NEWLINE#
lambda i : i [ 0 ] #NEWLINE#
writefile = codecs . open ( 'write.txt' , 'w' , 'utf-8' ) #NEWLINE#
s . write ( '\x0204;0?:=;\x03' ) #NEWLINE#
pd [ 'a' ] . tolist ( ) #NEWLINE#
agg [ agg [ 'size' ] > 100 ] . sort_values ( by = 'ave_age' , ascending = True ) . head ( 5 ) #NEWLINE#
np . array ( m2 ) [ : , ( 1 ) ] > 10 #NEWLINE#
pd . read_hdf ( 'my_store.h5' , 'a_table_node' , [ 'index>100' ] ) #NEWLINE#
np . concatenate ( ( A [ : : - 1 , : ] , A [ 1 : , : ] ) , axis = 0 ) #NEWLINE#
{ frozenset ( [ 1 , 2 , 3 ] ) : 4 , frozenset ( [ 1 ] ) : 5 } #NEWLINE#
c . execute ( 'bla#SPACE#bla#SPACE#bla#SPACE#sql' ) #NEWLINE#
np . mean ( a , axis = 1 ) #NEWLINE#
array ( [ True , True , True , False , False , False , False ] , dtype = bool ) #NEWLINE#
run ( 'env#SPACE#|#SPACE#grep#SPACE#BAR' ) #NEWLINE#
print ( binascii . unhexlify ( '7061756c' ) ) #NEWLINE#
grep ( 'text' , 'path/to/files/*' ) #NEWLINE#
win . connect ( 'delete-event' , gtk . main_quit ) #NEWLINE#
os . path . abspath ( '../link/file' ) #NEWLINE#
app . run ( ) #NEWLINE#
do_something_with ( line ) #NEWLINE#
df . between_time ( '12:00' , '13:00' ) #NEWLINE#
print ( link . get ( 'href' ) ) #NEWLINE#
r = requests . post ( url , data = json . dumps ( data ) , headers = headers ) #NEWLINE#
[ [ ( 2 , 45 ) , ( 3 , 67 ) ] , [ ( 4 , 56 ) , ( 5 , 78 ) ] , [ ( 2 , 98 ) ] ] #NEWLINE#
soup . select ( 'tr.colour.blue' ) #NEWLINE#
lambda x : x if x is not None else '' #NEWLINE#
existing = db . session . query ( Task ) . filter_by ( challenge_slug = slug ) #NEWLINE#
is_const ( a ) and a . decl ( ) . kind ( ) == Z3_OP_UNINTERPRETED #NEWLINE#
[ x [ 0 ] for x in tuple_list ] #NEWLINE#
ax . set_ylabel ( 'Temperature#SPACE#($^\\circ$C)' ) #NEWLINE#
loggerB = logging . getLogger ( __name__ + '.B' ) #NEWLINE#
new_list = [ ( a , new_b ) for a , b in tuple_list ] #NEWLINE#
sorted ( [ 'a' , 'b' , 'c' , 'Ã¤' ] ) #NEWLINE#
f . close ( ) #NEWLINE#
imp . find_module ( 'threading' ) #NEWLINE#
s = df [ 'm' ] . replace ( { 'March' : 0 , 'April' : 1 , 'Dec' : 3 } ) #NEWLINE#
A = np . random . randn ( 1000 , 1000 ) #NEWLINE#
savetxt ( fname = 'newPicksData.txt' , X = new_picks . astype ( int ) , fmt = '%.0f\n' ) #NEWLINE#
ax . set_xlim ( [ 0 , 1 ] ) #NEWLINE#
sorted ( list ( a . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df . loc [ df [ 'c' ] > 0.5 , [ 'a' , 'd' ] ] . values #NEWLINE#
fig . show ( ) #NEWLINE#
self . text . pack ( fill = 'both' , expand = True ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' ] , [ 'a' , 'b' , 'c' ] #NEWLINE#
print ( part . get_payload ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
url = reverse ( 'my_api.actor_resource' , args = { 'id' : actor . id } ) #NEWLINE#
[ 'x' , 'y' , 'z' , 'car' , 'bus' , 'a' , 'b' , 'c' , 'car' , '!' ] #NEWLINE#
"""\\xc3\\x85あ""" . encode ( 'utf-8' ) . decode ( 'unicode_escape' ) . encode ( 'latin-1' ) #NEWLINE#
sorted ( l , key = lambda s : ( s . isdigit ( ) , s ) ) #NEWLINE#
ax . plot_wireframe ( T , z , abs ( U ) , cstride = 1000 ) #NEWLINE#
os . listdir ( '\\\\myshare/folder' ) #NEWLINE#
self . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
omniboxHwnd = win32gui . FindWindowEx ( hwnd , 0 , 'Chrome_OmniboxView' , None ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
max ( x , key = lambda i : x [ i ] ) #NEWLINE#
subprocess . call ( [ 'taskkill' , '/F' , '/T' , '/PID' , str ( p . pid ) ] ) #NEWLINE#
arr = np . append ( arr , np . array ( [ [ 4 , 5 , 6 ] ] ) , axis = 0 ) #NEWLINE#
[ list ( map ( int , x ) ) for x in values ] #NEWLINE#
r = requests . post ( url , files = files ) #NEWLINE#
graph . add_edge ( 'A' , 'B' , weight = 20 ) #NEWLINE#
code . interact ( local = locals ( ) ) #NEWLINE#
re . findall ( '(?:A|B|C)D' , 'BDE' ) #NEWLINE#
_w ( ) #NEWLINE#
struct . pack ( 'h' , 824 ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
df . apply ( lambda x : combine ( x [ 'MEETING#SPACE#DATE' ] , x [ 'MEETING#SPACE#TIME' ] ) , axis = 1 ) #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
schema = models . TextField ( default = get_default_json ) #NEWLINE#
np . isclose ( [ 10000000000.0 , 1e-07 ] , [ 10000100000.0 , 1e-08 ] ) #NEWLINE#
int ( x ) / int ( y ) == math . floor ( float ( x ) / float ( y ) ) #NEWLINE#
new_dict = { k : my_dict [ k ] for k in my_list if k in my_dict } #NEWLINE#
min ( [ x for x in [ None , 1 , 2 ] if x is not None ] ) #NEWLINE#
_cxn . commit ( ) #NEWLINE#
gtk . main ( ) #NEWLINE#
arr2 . T [ numpy . array ( zip ( list ( range ( 0 , 3 ) ) , list ( range ( 1 , 4 ) ) ) ) ] #NEWLINE#
print ( df1 [ 'A' ] . unstack ( ) ) #NEWLINE#
set . intersection ( * ( set ( x ) for x in d . values ( ) ) ) #NEWLINE#
root . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
[ { 'count' : 3 , 'domain' : 'Ratios' } , { 'count' : 6 , 'domain' : 'Geometry' } ] #NEWLINE#
df . loc [ df . ID == 103 , [ 'FirstName' , 'LastName' ] ] = 'Matt' , 'Jones' #NEWLINE#
sum ( i for i in a ) #NEWLINE#
current , dirs , files = next ( os . walk ( '/path' ) ) #NEWLINE#
print ( '{%s}' % ',#SPACE#' . join ( [ ( '"%s":#SPACE#"%s"' % ( k , v ) ) for k , v in list ( pairs . #NEWLINE# items ( ) ) ] ) ) #NEWLINE#
matplotlib . use ( 'Template' ) #NEWLINE#
pygame . display . set_mode ( size ) #NEWLINE#
df . sub ( df . a , axis = 0 ) #NEWLINE#
print ( open ( 'FILE-WITH-STRING' , 'rb' ) . read ( ) . decode ( 'base64' ) ) #NEWLINE#
dict ( ( k , mydict [ k ] ) for k in keys_to_select if k in mydict ) #NEWLINE#
C1 = [ float ( i ) for i in C if i ] #NEWLINE#
"""Sico87#SPACE#is#SPACE#an#SPACE#awful#SPACE#python#SPACE#developer""" . split ( '#SPACE#' , 1 ) #NEWLINE#
unicodedata . normalize ( 'NFD' , myfoo ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
[ d [ key ] for d in dicts if key in d ] #NEWLINE#
df [ 'Max' ] = df [ [ 'Communications' , 'Business' ] ] . idxmax ( axis = 1 ) #NEWLINE#
[ ( [ 1 ] * 4 ) for n in range ( 3 ) ] #NEWLINE#
str ( 1 ) . zfill ( 2 ) #NEWLINE#
print ( line . rstrip ( ) ) #NEWLINE#
out = [ a , b , c , d , e , f ] #NEWLINE#
my_array , my_variable = my_function ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
list1 . sort ( key = int ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . reindex ( np . random . permutation ( df . index ) ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
cbar . ax . set_yticklabels ( [ 'lo' , 'med' , 'hi' ] ) #NEWLINE#
{ 'id' : 'name' , 'label' : 'Name' , 'type' : 'string' } #NEWLINE#
print ( 'baz#SPACE#"\\"' ) #NEWLINE#
sorted ( lst , key = lambda x : ( - counts [ x ] , firstidx [ x ] ) ) #NEWLINE#
[ w for w in open ( 'file.txt' ) if not re . search ( '([aeiou])\\1' , w ) ] #NEWLINE#
sys . stdout . write ( chr ( x ) ) #NEWLINE#
sorted ( lst , key = str . lower ) #NEWLINE#
return set ( zip ( * [ lst [ i : ] for i in range ( n ) ] ) ) #NEWLINE#
fig . savefig ( 'test2png.png' , dpi = 100 ) #NEWLINE#
logging . debug ( 'value#SPACE#of#SPACE#my#SPACE#var#SPACE#is#SPACE#%s' , str ( var ) ) #NEWLINE#
{ { value | linebreaks } } #NEWLINE#
s = '#SPACE#' . join ( word [ 0 ] . upper ( ) + word [ 1 : ] for word in s . split ( ) ) #NEWLINE#
print ( sint ( '1340' ) ) #NEWLINE#
new_df = pd . DataFrame ( list ( original [ 'user' ] ) ) #NEWLINE#
[ set ( [ 'a' , '' ] ) , set ( [ '' , 'b' ] ) ] #NEWLINE#
{ 'user' : 'username' , 'password' : 'passwd' } #NEWLINE#
img . save ( 'Image2.png' ) #NEWLINE#
[ 'test,#SPACE#a' , 'foo,bar",baz' , 'bar#SPACE#Ã¤#SPACE#baz' ] #NEWLINE#
A = [ ( A [ i + 1 ] + A [ i ] ) for i in range ( len ( A ) - 1 ) ] #NEWLINE#
a , b , c , d = x . split ( '#SPACE#' ) #NEWLINE#
return [ numbers [ i ] for i in range ( len ( numbers ) ) if i not in indices ] #NEWLINE#
print ( os . path . join ( path , filename ) ) #NEWLINE#
yourlist = [ '{}_{}_{}' . format ( s . rsplit ( '_' , 2 ) [ 0 ] , x , y ) for s in yourlist ] #NEWLINE#
print ( mydate . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'red' ) #NEWLINE#
df_new = df [ ( df [ 'time' ] > start_time ) & ( df [ 'time' ] < end_time ) ] #NEWLINE#
[ i for e in bad for i in my_list if e in i ] #NEWLINE#
( s * 5 ) . tolist ( ) #NEWLINE#
raise forms . ValidationError ( 'Please#SPACE#enter#SPACE#a#SPACE#valid#SPACE#Penn#SPACE#Email#SPACE#Address' ) #NEWLINE#
print ( '{0},#SPACE#{0:s},#SPACE#{0:d},#SPACE#{0:02X},#SPACE#{0:f}' . format ( ten ) ) #NEWLINE#
myDict [ item [ 1 ] ] += item [ 2 ] #NEWLINE#
scipy . sparse . csr_matrix ( df . values ) #NEWLINE#
fig . savefig ( 'test.pdf' ) #NEWLINE#
bins = np . linspace ( 0 , 360 , 10 ) #NEWLINE#
bin ( 0 ) #NEWLINE#
new_data = np . vectorize ( boolstr_to_floatstr ) ( data ) . astype ( float ) #NEWLINE#
parser . add_argument ( 'input2' , nargs = '+' , type = int ) #NEWLINE#
print ( result [ 0 ] [ 'status' ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
print ( repr ( sys . argv [ 1 ] . decode ( 'UTF-8' ) ) ) #NEWLINE#
template . render ( index_variables ) . encode ( 'utf-8' ) #NEWLINE#
plt . show ( ) #NEWLINE#
current_app . logger . info ( 'grolsh' ) #NEWLINE#
root . wm_title ( 'Hello,#SPACE#world' ) #NEWLINE#
Popen ( [ 'python' , 'StripCore.py' ] ) #NEWLINE#
db . rollback ( ) #NEWLINE#
stopword_pattern . match ( '1999' ) #NEWLINE#
np . any ( my_array [ : , ( 0 ) ] == value ) #NEWLINE#
print ( ( 'Nope,#SPACE#that#SPACE#is#SPACE#not#SPACE#a#SPACE#two.#SPACE#That#SPACE#is#SPACE#a' , x ) ) #NEWLINE#
os . getpid ( ) #NEWLINE#
rand_smpl = [ mylist [ i ] for i in sorted ( random . sample ( range ( len ( mylist ) ) , 4 ) ) ] #NEWLINE#
len ( os . listdir ( 'path/desktop' ) ) #NEWLINE#
subprocess . check_output ( [ 'python' , 'helloworld.py' ] ) #NEWLINE#
"""hellò#SPACE#world""" . encode ( 'latin-1' ) #NEWLINE#
list ( [ x for x in l if x not in f ] ) #NEWLINE#
lst = [ int ( i ) for i in str ( num ) ] #NEWLINE#
rc ( 'text' , usetex = True ) #NEWLINE#
zip ( [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] , [ 13 , 14 ] ) #NEWLINE#
obj . save ( ) #NEWLINE#
res = list ( set ( a ) ^ set ( b ) ) #NEWLINE#
( '^admin/' , include ( admin . site . urls ) ) , #NEWLINE#
dict ( ( ( h , h * 2 ) for h in range ( 5 ) ) , foo = 'foo' , ** { 'bar' : 'bar' } ) #NEWLINE#
sys . stdout . write ( str ( x ) ) #NEWLINE#
print ( [ '{0:0.2f}' . format ( i ) for i in a ] ) #NEWLINE#
plot ( x , y , 'r.' , alpha = 0.2 ) #NEWLINE#
l . sort ( key = sum_nested ) #NEWLINE#
df [ df . loc [ : ] == '' ] = df . copy ( ) . shift ( 2 , axis = 1 ) #NEWLINE#
ctypes . CDLL ( 'C:\\Program#SPACE#Files#SPACE#(x86)\\Java\\jre1.8.0_40\\bin\\client\\jvm.dll' ) #NEWLINE#
<VAR1> . <VAR1> . strptime ( time . <VAR0> ( ) , '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#%Y' ) #NEWLINE#
driver . get ( 'http://stackoverflow.com' ) #NEWLINE#
repr ( d ) [ 1 : - 1 ] . replace ( ':' , '' ) #NEWLINE#
np . fill_diagonal ( df . values , 0 ) #NEWLINE#
__init__ . py #NEWLINE#
cherrypy . quickstart ( HelloWorld ( ) ) #NEWLINE#
return '' . join ( random . choice ( char ) for x in range ( length ) ) #NEWLINE#
[ i for i , j in enumerate ( a ) if j == m ] #NEWLINE#
mySet = set ( [ myString ] ) #NEWLINE#
self . matches = [ s for s in self . options if s and s . startswith ( text ) ] #NEWLINE#
os . environ . pop ( 'PYTHONHOME' ) #NEWLINE#
MyModel . objects . all ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
difflib . SequenceMatcher ( None , a , b ) . ratio ( ) #NEWLINE#
ordered = sorted ( lst , key = lambda d : [ 2 , 3 , 1 , 4 ] . index ( int ( d [ 'id' ] ) ) ) #NEWLINE#
length = len ( list ( clusterList ) ) #NEWLINE#
norm = [ ( float ( i ) / sum ( raw ) ) for i in raw ] #NEWLINE#
df . groupby ( 'name' ) [ [ 'id' , 'email' ] ] . first ( ) #NEWLINE#
data . append ( json . loads ( line ) ) #NEWLINE#
sorted ( zipped , key = operator . itemgetter ( 1 ) ) #NEWLINE#
os . path . exists ( './lib.dll' ) #NEWLINE#
df [ df . columns . isin ( [ 'a' , 'b' , 'c' ] ) & ( df < 0 ) ] = np . nan #NEWLINE#
c = sum ( 1 for word in words if word [ 0 ] == word [ - 1 ] ) #NEWLINE#
set ( [ 'foo' ] ) #NEWLINE#
my_words = Wiki . objects . order_by ( 'word' ) #NEWLINE#
array = [ [ int ( j ) for j in i . split ( ',' ) ] for i in tmp ] #NEWLINE#
cnx . commit ( ) #NEWLINE#
ax . set_xlabel ( 'X#SPACE#axis' ) #NEWLINE#
np . eye ( foo . shape [ 1 ] ) * foo [ : , ( np . newaxis ) ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
app . run ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
myDict . pop ( key , None ) #NEWLINE#
[ map ( dict . get , list ( range ( 1 , 6 ) ) ) for _ in range ( 10 ) ] #NEWLINE#
author = models . ForeignKey ( User , null = True , blank = True ) #NEWLINE#
print ( f . read ( ) . decode ( 'utf8' ) ) #NEWLINE#
open ( '//HOST/share/path/to/file' ) #NEWLINE#
corrs = df . corr ( ) #NEWLINE#
re . sub ( reg , rep , text ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
im . save ( 'my_image.png' ) #NEWLINE#
print ( '[' + ',' . join ( "'" + str ( x ) + "'" for x in s ) + ']' ) #NEWLINE#
self . cdr = cdr #NEWLINE#
my_function = __import__ ( 'my_apps.views' ) . my_function #NEWLINE#
ax . set_xlabel ( 'Distance#SPACE#from#SPACE#heated#SPACE#face($10^{-2}$#SPACE#m)' ) #NEWLINE#
x = np . array ( [ ( 1 , 0 ) , ( 0 , 1 ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
next ( ( i for i , v in enumerate ( a ) if i == 666 ) , None ) #NEWLINE#
gtk . main_iteration ( ) #NEWLINE#
new = [ int ( i ) for i in old ] #NEWLINE#
hismgr = get_ipython ( ) . history_manager #NEWLINE#
s = '' . join ( F ( c ) for c in s ) #NEWLINE#
any ( x in set ( b ) for x in a ) #NEWLINE#
Article . objects . annotate ( like_count = Count ( 'likes' ) ) . order_by ( '-like_count' ) #NEWLINE#
print ( settings . BASE_DIR ) #NEWLINE#
a = pexpect . spawn ( 'program' , env = { 'TERM' : 'dumb' } ) #NEWLINE#
foo = '' . join ( foo . split ( ) ) #NEWLINE#
s = input ( '-->#SPACE#' ) #NEWLINE#
requests . get ( url , params = query ) #NEWLINE#
A [ B == x ] . sum ( ) #NEWLINE#
rawbytes . decode ( 'utf-8' ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
sys . stdin . isatty ( ) #NEWLINE#
ax . xaxis . set_major_formatter ( xfmt ) #NEWLINE#
driver . get ( 'http://www.example.com' ) #NEWLINE#
df [ 'City' ] = df [ 'City' ] . str . replace ( 'ë' , 'e' ) #NEWLINE#
plt . xlabel ( 'Hours' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
sum ( [ i for i in range ( 1000 ) if i % 3 == 0 or i % 5 == 0 ] ) #NEWLINE#
parser . add_option ( '-f' , '--file' , dest = 'filename' , help = 'foo#SPACE#help' ) #NEWLINE#
subprocess . call ( [ 'php' , 'path/to/script.php' ] ) #NEWLINE#
np . where ( np . eye ( A . shape [ 0 ] , dtype = bool ) , A , A . T + A ) #NEWLINE#
[ 'x' , 'y' , 'z' , 'car' , 'bus' , 'a' , 'b' , 'c' , 'car' ] #NEWLINE#
print ( opener . open ( 'http://www.google.com' ) . read ( ) ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_DCLICK , self . OnDoubleClick ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'c' ] = ( df . a . str [ - 1 ] == df . b ) . astype ( int ) #NEWLINE#
logging . getLogger ( 'foo' ) #NEWLINE#
datetime . datetime . now ( ) - datetime . timedelta ( minutes = 15 ) #NEWLINE#
float ( '{0}.{1}' . format ( * a ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
[ { 'data' : 2 } , { 'data' : 2 } , { 'data' : 2 } ] #NEWLINE#
print ( os . path . abspath ( 'test/link/file' ) ) #NEWLINE#
ma . array ( a , mask = np . isnan ( a ) ) #NEWLINE#
"""""" . join ( str ( ord ( c ) ) for c in s ) #NEWLINE#
[ ( j - i ) for i , j in zip ( t [ : - 1 ] , t [ 1 : ] ) ] #NEWLINE#
"""""" . join ( set ( foo ) ) #NEWLINE#
f . write ( '平成15' ) #NEWLINE#
bytetable = [ ( '00000000' + bin ( x ) [ 2 : ] ) [ - 8 : ] for x in range ( 256 ) ] #NEWLINE#
writer . writerow ( row ) #NEWLINE#
print ( '.' . join ( [ bin ( int ( x ) + 256 ) [ 3 : ] for x in ip . split ( '.' ) ] ) ) #NEWLINE#
all ( b >= a for a , b in zip ( the_list , it ) ) #NEWLINE#
[ 'watermelon' , 'peach' ] #NEWLINE#
1 , 5 , None , ( 1 , 5 ) , ( 1 , 5 ) #NEWLINE#
[ ( n / d ) for n , d in ( map ( float , i . split ( '/' ) ) for i in data ) ] #NEWLINE#
sys . path . append ( '..' ) #NEWLINE#
zip ( * A ) #NEWLINE#
print ( d . strftime ( '%m/%d/%Y' ) ) #NEWLINE#
ax . set_title ( 'Custom#SPACE#legend' ) #NEWLINE#
ax . set_title ( 'Normal#SPACE#way#SPACE#to#SPACE#plot' ) #NEWLINE#
conn . execute ( 'savepoint#SPACE#spTest;' ) #NEWLINE#
conn . execute ( 'rollback#SPACE#to#SPACE#savepoint#SPACE#spTest;' ) #NEWLINE#
[ '*abc' , '*de' , '*f' , '*g' ] #NEWLINE#
print ( re . match ( '[^/]+' , text ) ) #NEWLINE#
sorted ( timestamps , key = lambda d : map ( int , d . split ( '-' ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
v = df [ 'value' ] . dropna ( ) #NEWLINE#
all ( x . isalpha ( ) for x in [ 'ab1' , 'def' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
var1 , var2 = [ int ( x ) for x in input ( 'Enter#SPACE#two#SPACE#numbers#SPACE#here:#SPACE#' ) . split ( ) ] #NEWLINE#
[ word for word in l if word . isalnum ( ) ] #NEWLINE#
c = [ x for x in b if x in _auxset ] #NEWLINE#
[ list ( x [ 1 ] ) for x in itertools . groupby ( data , lambda x : x == 0 ) if not x [ 0 ] ] #NEWLINE#
zip ( * ( [ iter ( num_str . split ( ',' ) ) ] * 4 ) ) #NEWLINE#
df [ df . time . diff ( ) . fillna ( pd . Timedelta ( '60S' ) ) >= pd . Timedelta ( '60S' ) ] #NEWLINE#
loop . run ( ) #NEWLINE#
list ( itertools . chain ( * [ ( [ k ] * v ) for k , v in list ( d . items ( ) ) ] ) ) #NEWLINE#
self . save ( ) #NEWLINE#
print ( time . mktime ( d . timetuple ( ) ) ) #NEWLINE#
D . update ( ( k , v ) for k , v in user . items ( ) if v is not None ) #NEWLINE#
"""{:.2f}""" . format ( round ( 2606.89579999999 , 2 ) ) #NEWLINE#
any ( x . startswith ( '%s/' % name . rstrip ( '/' ) ) for x in z . namelist ( ) ) #NEWLINE#
df . rename ( columns = { 'two' : 'new_name' } , inplace = True ) #NEWLINE#
df [ 'Time' ] = df . Time . map ( lambda x : pd . datetools . parse ( x ) . time ( ) ) #NEWLINE#
"""{}{}""" . format ( s , i ) #NEWLINE#
np . roll ( a , 1 ) #NEWLINE#
print ( [ [ j . split ( '(' ) [ 0 ] for j in i . split ( ) ] for i in L1 ] ) #NEWLINE#
round ( number * 2 ) / 2.0 #NEWLINE#
x . loc [ ( x . B >= 111.0 ) & ( x . B <= 500.0 ) ] . set_index ( [ 'A' , 'B' ] ) . index #NEWLINE#
[ [ 1 , 2 , 3 , 4 , 5 ] , [ 2 , 3 , 4 ] , [ 1 , 2 ] ] #NEWLINE#
ares = np . einsum ( 'ijkl,k->ijkl' , a , v ) #NEWLINE#
pprint ( sys . path ) #NEWLINE#
[ 'http://stackoverflow.com/foobar' , 'http://stackoverflow.com/baz' ] #NEWLINE#
A [ i , j ] #NEWLINE#
e = element . findall ( 'Items/Item/ItemAttributes/ListPrice/Amount' ) #NEWLINE#
print ( doc . toprettyxml ( ) ) #NEWLINE#
dict ( i . split ( '=' ) for i in x ) #NEWLINE#
parts = [ your_string [ i : i + n ] for i in range ( 0 , len ( your_string ) , n ) ] #NEWLINE#
app . logger . setLevel ( logging . DEBUG ) #NEWLINE#
random . shuffle ( lst ) #NEWLINE#
data_slices . sort ( key = lambda s : s [ - 1 ] . start ) #NEWLINE#
reactor . run ( ) #NEWLINE#
do_something ( ) #NEWLINE#
return '\n' . join ( lines ) #NEWLINE#
parser . add_argument ( 'bar' , nargs = '*' , default = [ 1 , 2 , 3 ] , help = 'BAR!' ) #NEWLINE#
np . arange ( 12 ) . reshape ( 3 , 4 ) #NEWLINE#
sorted ( mydict , key = lambda key : mydict [ key ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#guestName,#SPACE#content,#SPACE#entryID#SPACE#FROM#SPACE#entries' ) #NEWLINE#
x , y = map ( os . getpid , ( 'process1' , 'process2' ) ) #NEWLINE#
results = list ( map ( int , results ) ) #NEWLINE#
numpy . array ( data , dtype = [ ( 'label' , 'S2' ) , ( 'x' , float ) , ( 'y' , float ) ] ) #NEWLINE#
run ( 'ls#SPACE#-lart' ) #NEWLINE#
df . where ( ( df > df . shift ( 1 ) ) . values & DataFrame ( df . D == 1 ) . values ) #NEWLINE#
os . system ( 'v4l2-ctl#SPACE#-d#SPACE#0#SPACE#-c#SPACE#focus_absolute=250' ) #NEWLINE#
user . put ( ) #NEWLINE#
s = s . replace ( ',' , '' ) #NEWLINE#
list ( itertools . product ( list ( range ( 2 ) ) , repeat = 3 ) ) #NEWLINE#
cv . WaitKey ( 0 ) #NEWLINE#
3 not in [ 1 , 2 , 'a' ] #NEWLINE#
dfrm . drop ( dfrm . index [ len ( dfrm ) - 1 ] ) #NEWLINE#
socket . close ( ) #NEWLINE#
[ 'e' , 'b' , 'f' , 'c' , 'a' , 'd' ] #NEWLINE#
subprocess . Popen ( 'move#SPACE#output.txt#SPACE#./acc/output-%d.txt' % v ) #NEWLINE#
df . stack ( ) . reset_index ( level = [ 0 , 1 ] , drop = True ) #NEWLINE#
img . show ( ) #NEWLINE#
return t1start <= t2start <= t1end or t2start <= t1start <= t2end #NEWLINE#
df . iloc [ indexers ] #NEWLINE#
str ( a , 'unicode-escape' ) #NEWLINE#
{ 'username' : 'clelio' , 'name' : 'Clelio#SPACE#de#SPACE#Paula' } #NEWLINE#
eastern . localize ( datetime ( 2002 , 10 , 27 , 1 , 30 , 0 ) , is_dst = None ) #NEWLINE#
plt . legend ( loc = 4 ) #NEWLINE#
Cordi1 = [ [ int ( i ) for i in line . split ( ) ] for line in data ] #NEWLINE#
re . compile ( '[' ) #NEWLINE#
plt . savefig ( 'rasterized_transparency.eps' ) #NEWLINE#
Foo . foo ( ) #NEWLINE#
t = [ [ ] , [ 1 , 2 ] , [ 5 ] , [ 1 , 2 , 5 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 6 ] ] #NEWLINE#
np . linalg . eigvals ( df . replace ( 'n/a' , 0 ) . astype ( float ) ) #NEWLINE#
message . send ( ) #NEWLINE#
json_string = json . dumps ( list_name , default = obj_dict ) #NEWLINE#
"""{:,}""" . format ( x ) #NEWLINE#
[ x for b in a for x in b ] #NEWLINE#
unittest . main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df1 . join ( df2 , how = 'inner' ) #NEWLINE#
br . select_form ( nr = 1 ) #NEWLINE#
ax . xaxis . set_major_formatter ( dates . DateFormatter ( '%H:%M' ) ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
htmlspaced = re . sub ( '\\r\\n' , '#SPACE#' , html ) #NEWLINE#
[ ( int ( i ) if int ( i ) == i else i ) for i in li ] #NEWLINE#
raise Exception ( 'Degree#SPACE#of#SPACE#Ngrams#SPACE#(n)#SPACE#needs#SPACE#to#SPACE#be#SPACE#bigger#SPACE#than#SPACE#skip#SPACE#(k)' ) #NEWLINE#
image = gtk . image_new_from_pixbuf ( pixbuf ) #NEWLINE#
s . write ( 'midi' , '/Users/cuthbert/Desktop/newfilename.mid' ) #NEWLINE#
plt . show ( ) #NEWLINE#
ssh . exec_command ( '.#SPACE#.profile#SPACE#;#SPACE#cd#SPACE#/home/test/;$run#SPACE#./test.sh' ) #NEWLINE#
{ key : val for key , val in parent_dict . items ( ) if 2 < key < 4 } #NEWLINE#
print ( maximize_nonoverlapping_count ( [ [ 3 , 4 ] , [ 5 , 8 ] , [ 0 , 6 ] , [ 1 , 2 ] ] ) ) #NEWLINE#
cursor = db . cursor ( dictionary = True ) #NEWLINE#
[ 'this' , 'day' , 'is' ] #NEWLINE#
numpy . in1d ( a , b ) #NEWLINE#
driver . get ( 'https://stackoverflow.com' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . fillna ( 'o' ) #NEWLINE#
sorted ( mylist , key = cmp_to_key ( locale . strcoll ) ) #NEWLINE#
np . array ( [ ( arr + i ) for i in np . arange ( - 0.2 , 0.25 , 0.1 ) ] ) . T . ravel ( ) #NEWLINE#
tf . constant ( 1 ) + tf . constant ( 2 ) #NEWLINE#
"""{:b}""" . format ( some_int ) #NEWLINE#
'%%%s%%' % 'PLAYER_ID' #NEWLINE#
[ 'foo' , 'bar#SPACE#hello#SPACE#world' ] #NEWLINE#
min ( [ t for t in l if not math . isnan ( t [ 1 ] ) ] , key = itemgetter ( 1 ) ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 ] , 'r-' , label = 'Sample#SPACE#Label#SPACE#Red' ) #NEWLINE#
return hex ( struct . unpack ( '<I' , struct . pack ( '<f' , f ) ) [ 0 ] ) #NEWLINE#
{ 'label_Bbb' : 'hereaswell' , 'labelA' : 'thereissomethinghere' } #NEWLINE#
sorted ( l1 + l2 ) #NEWLINE#
zeros = [ ( [ 0 ] * M ) for _ in range ( N ) ] #NEWLINE#
5 * ( 4 * ( 3 * ( 2 * ( 1 * 1 ) ) ) ) #NEWLINE#
[ list ( i . group ( 1 , 2 ) ) for i in re . finditer ( '(\\d{2})(020511|00)' , theStr ) ] #NEWLINE#
driver . switch_to_alert ( ) . accept ( ) #NEWLINE#
a = input ( 'Prompt:#SPACE#' ) #NEWLINE#
sys . exit ( ) #NEWLINE#
return dict ( [ k_v for k_v in list ( d1 . items ( ) ) if k_v [ 0 ] in d2 and d2 [ k_v [ 0 ] ] == #NEWLINE# k_v [ 1 ] ] ) #NEWLINE#
random . sample ( list ( range ( 1 , 10 ) ) , 5 ) #NEWLINE#
output = subprocess . check_output ( [ 'ping' , '-c' , '2' , '-W' , '2' , '1.1.1.1' ] ) #NEWLINE#
ax . set_title ( 'Title#SPACE#for#SPACE#second#SPACE#plot' ) #NEWLINE#
list ( range ( 0 , 10 , 3 ) ) #NEWLINE#
pd . merge ( df , size2_col , on = [ 'adult' ] ) #NEWLINE#
im . save ( 'output.png' ) #NEWLINE#
c = np . unique ( a , return_inverse = 1 ) [ 1 ] #NEWLINE#
Series ( [ str ( x ) for x in htmldata ] ) #NEWLINE#
my_dict . setdefault ( 'foo' , { } ) [ 'bar' ] = some_var #NEWLINE#
ax . xaxis . set_major_formatter ( mdates . DateFormatter ( '%d.%m.%y' ) ) #NEWLINE#
print ( [ ( lst [ i ] , lst [ i + 1 ] ) for i in range ( 0 , len ( lst ) , 2 ) ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
self . main . pack ( side = 'right' , fill = 'both' , expand = True ) #NEWLINE#
ftp . quit ( ) #NEWLINE#
f = io . StringIO ( 'foo' ) #NEWLINE#
a . transpose ( 2 , 1 , 0 ) #NEWLINE#
df . select ( lambda x : re . search ( 'prefix$' , str ( x ) ) is None , axis = 1 ) #NEWLINE#
lst . append ( os . path . splitext ( x ) [ 0 ] ) #NEWLINE#
return re . split ( seperator , f . read ( ) ) #NEWLINE#
myTextCtrl . SetFont ( font1 ) #NEWLINE#
df2 [ 'group2' ] #NEWLINE#
a == a [ ( 0 ) , : ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 20 , 31 ] #NEWLINE#
"""SELECT#SPACE#{0}#SPACE#FROM#SPACE#searchterms#SPACE#WHERE#SPACE#onstate#SPACE#=#SPACE#1""" . format ( ',#SPACE#' . join ( columns ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
t = time . mktime ( time . strptime ( '29.08.2011#SPACE#11:05:02' , '%d.%m.%Y#SPACE#%H:%M:%S' ) ) #NEWLINE#
re . findall ( 'alpha(.*?)bravo' , st ) #NEWLINE#
df . groupby ( [ 'category' ] ) [ [ 'data_1' , 'data_2' ] ] . transform ( f ) #NEWLINE#
zip ( l , l [ 1 : ] ) #NEWLINE#
driver . find_element_by_xpath ( "//a[contains(text(),#SPACE#'DEV.tgz')]" ) . click ( ) #NEWLINE#
print ( [ ( s , s in st1 ) for s in re . findall ( pat , st2 ) ] ) #NEWLINE#
print ( rev ( [ 1 , 2 , 3 , 4 ] ) ) #NEWLINE#
df . idxmax ( axis = 1 ) #NEWLINE#
mylist [ : ] = [ s . replace ( ':' , '' ) for s in mylist ] #NEWLINE#
ax . xaxis . set_tick_params ( labeltop = 'on' ) #NEWLINE#
forms [ 3 ] [ 'sex' ] = 'male' #NEWLINE#
print ( item [ 0 ] , ',#SPACE#' . join ( map ( str , item [ 1 : ] ) ) ) #NEWLINE#
print ( doc . find ( 'web:offset' ) . string ) #NEWLINE#
ax . legend ( loc = 'center#SPACE#right' , bbox_to_anchor = ( 1 , 1 ) , ncol = 4 ) #NEWLINE#
return qs . values ( 'date' ) . annotate ( Sum ( 'amount' ) ) . order_by ( 'date' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for y in l for x in y ] #NEWLINE#
pd . to_datetime ( pd . Series ( [ '05/23/2005' ] ) , format = '%m/%d/%Y' ) #NEWLINE#
ax . spines [ 'bottom' ] . set_color ( 'red' ) #NEWLINE#
p1 = subprocess . Popen ( [ 'cmd' , '/C' , 'date' ] , stdout = subprocess . PIPE ) #NEWLINE# p1 . communicate ( ) [ 0 ] #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , 'A\n' ) #NEWLINE#
rst_epilog = '..#SPACE#|my_conf_val|#SPACE#replace::#SPACE#%d' % my_config_value #NEWLINE#
np . einsum ( 'ij,jk->ik' , nodes , x ** np . array ( [ 2 , 1 , 0 ] ) [ : , ( None ) ] ) #NEWLINE#
max ( self . allPartners , key = attrgetter ( 'attrOne' ) ) . attrOne #NEWLINE#
{ 'key1' : 'value1' , 'key2' : 'value2,still_value2,not_key1="not_value1"' } #NEWLINE#
str = re . sub ( '(&[a-zA-Z])' , dictsub , str ) #NEWLINE#
"""INTERNET\\jDoe""" #NEWLINE#
ax . set_xlabel ( 'Performance' ) #NEWLINE#
list ( range ( x1 , x2 + 1 ) ) #NEWLINE#
re . split ( '[^\\d\\.]+' , s ) #NEWLINE#
start_year = models . IntegerField ( max_length = 4 , blank = False , null = True ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( dir ( sys . modules [ '__builtin__' ] ) ) #NEWLINE#
method ( ) #NEWLINE#
return os . path . dirname ( os . path . realpath ( sys . argv [ 0 ] ) ) #NEWLINE#
writer . writerow ( [ ] ) #NEWLINE#
im . save ( 'out.png' ) #NEWLINE#
value = request . form . getlist ( 'check' ) #NEWLINE#
ast . literal_eval ( '[1,2,3]' ) #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M' , time . strptime ( s , '%d-%m-%Y#SPACE#%H:%M' ) ) #NEWLINE#
os . system ( 'getCameras.py#SPACE#"path_to_the_scene"#SPACE#' ) #NEWLINE#
MyMode . objects . values ( 'day' ) . annotate ( Sum ( 'visits' ) ) . filter ( day__week_day = 1 ) #NEWLINE#
print ( to_float ( 'Â¾' ) ) #NEWLINE#
next ( ( e for e in mylist if my_criteria ( e ) ) , None ) #NEWLINE#
x . groupby ( pd . PeriodIndex ( x . columns , freq = 'Q' ) , axis = 1 ) . mean ( ) #NEWLINE#
total = sum ( map ( float , s . split ( ',' ) ) ) #NEWLINE#
print ( '\n' . join ( sorted ( d [ 'Name' ] for d in thisismylist ) ) ) #NEWLINE#
plt . gca ( ) . set_xlim ( left = 0 ) #NEWLINE#
pd . concat ( [ df_a , df_b ] , axis = 1 ) #NEWLINE#
print ( d [ 'dict2' ] [ 'quux' ] ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
{ tuple ( key ) : value for key , value in zip ( bins , count ) } #NEWLINE#
cmd ( 'ATZ' , serial . Serial ( '/dev/ttyUSB0' , timeout = 1 , baudrate = 115000 ) ) #NEWLINE#
[ '1.7.0b0' , '1.7.0' , '1.11.0' ] #NEWLINE#
p . start ( ) #NEWLINE#
map ( int , bin ( 6 ) [ 2 : ] ) #NEWLINE#
winsound . PlaySound ( 'alert.wav' ) #NEWLINE#
[ 10 , 9 , 8 , 4 , 7 ] #NEWLINE#
calendar . timegm ( time . gmtime ( ) ) #NEWLINE#
conn . commit ( ) #NEWLINE#
{ key : list ( set . difference ( set ( a [ key ] ) , b . get ( key , [ ] ) ) ) for key in a } #NEWLINE#
[ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 4 ) , ( 4 , 5 ) , ( 5 , 6 ) , ( 6 , 1 ) ] #NEWLINE#
df2 = df . astype ( object ) . where ( pd . notnull ( df ) , None ) #NEWLINE#
wn . synsets ( 'small' ) #NEWLINE#
print ( file_contents ) #NEWLINE#
plt . savefig ( 'D:\\mpl_logo.png' , dpi = dpi , transparent = True ) #NEWLINE#
print ( list ( chain . from_iterable ( ( x , x + 1 ) for x in l ) ) ) #NEWLINE#
print ( ( 'Total#SPACE#handled#SPACE#exceptions:#SPACE#' , NUMBER_OF_EXCEPTIONS ) ) #NEWLINE#
[ 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE#
[ ( a , b , c ) for a in [ 1 , 2 , 3 ] for b in [ 'a' , 'b' ] for c in [ 4 , 5 ] ] #NEWLINE#
nx . draw_spring ( G ) #NEWLINE#
df . index #NEWLINE#
[ [ [ x , y ] for x in list1 ] for y in list2 ] #NEWLINE#
ast . literal_eval ( '"hello"+"#SPACE#world"' ) #NEWLINE#
print ( os . path . dirname ( __file__ ) ) #NEWLINE#
call ( [ 'vim' , 'hello.txt' ] ) #NEWLINE#
ssh . connect ( IP [ 0 ] , username = user [ 0 ] , pkey = mykey ) #NEWLINE#
df [ ( df . iloc [ : , - 12 : ] == - 1 ) . all ( axis = 1 ) ] #NEWLINE#
[ 'f2' , 'f3' , 'f4' , '<module>' ] #NEWLINE#
a . __init__ ( * args , ** kwargs ) #NEWLINE#
a [ ~ np . isnan ( a ) . any ( 1 ) ] #NEWLINE#
format ( x , ',' ) . replace ( ',' , '.' ) #NEWLINE#
plt . show ( ) #NEWLINE#
regexps . append ( { 'left' : '[^\\\\]%.*' , 'right' : '' } ) #NEWLINE#
[ '48' , '65' , '6c' , '6c' , '6f' ] #NEWLINE#
list ( StreetCat . _meta . parents . keys ( ) ) [ - 1 ] #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
out_file . write ( '\n' . join ( data ) ) #NEWLINE#
sorted ( a ) == sorted ( b ) #NEWLINE#
setup ( name = 'cls' , py_modules = [ 'cls' ] ) #NEWLINE#
ssh . exec_command ( 'nohup#SPACE#sleep#SPACE#300#SPACE#&' ) #NEWLINE#
set ( data1 ) & set ( data2 ) #NEWLINE#
pl . show ( ) #NEWLINE#
list ( map ( str . strip , l ) ) #NEWLINE#
df2 . columns = [ 'letter' , 'num' ] #NEWLINE#
ax . get_xticklines ( ) [ i ] . set_visible ( False ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
[ v for k , v in list ( my_dict . items ( ) ) if k . startswith ( 'Date' ) ] #NEWLINE#
df . dot ( weight ) #NEWLINE#
chr ( 128512 ) #NEWLINE#
plt . gca ( ) . set_aspect ( 'equal' ) #NEWLINE#
df . groupby ( 'A' ) . apply ( lambda x : list ( np . repeat ( x [ 'B' ] . values , x [ 'quantity' ] ) ) ) #NEWLINE#
array [ i [ 0 ] , i [ 1 ] , i [ 2 ] , ... , i [ n - 1 ] ] #NEWLINE#
df . selectExpr ( 'year(timestamp)#SPACE#AS#SPACE#year' , 'value' ) . groupBy ( 'year' ) . sum ( ) #NEWLINE#
spp1 . add_argument ( 'vars' , nargs = '*' ) #NEWLINE#
return struct . pack ( 'f' * len ( data ) , * data ) #NEWLINE#
[ 2 , 3 ] in [ v [ i : i + 2 ] for i in range ( len ( v ) - 1 ) ] #NEWLINE#
re . sub ( '\\s+\\Z' , '' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 6 , 7 , 8 , 9 ] #NEWLINE#
json . dumps ( data , ensure_ascii = False ) . encode ( 'utf8' ) #NEWLINE#
A2 , B2 = zip ( * sorted ( zip ( A , B ) , key = lambda x : x [ 1 ] ) ) #NEWLINE#
re . sub ( '\\((\\d+)\\)' , '\\1' , a ) #NEWLINE#
Project . objects . filter ( person_set__name = 'John' ) #NEWLINE#
len ( [ x for x in frequencies if x > 0 ] ) #NEWLINE#
x [ : , 1 : : 2 ] #NEWLINE#
df [ 0 ] . apply ( lambda x : ( 0 , 0 ) if x is np . nan else x ) #NEWLINE#
plt . show ( ) #NEWLINE#
mergedgroupdict ( '(?P<b>.b.)|(?P<i>.i.)' , 'abcdefghijk' [ : : - 1 ] ) #NEWLINE#
app . run ( ) #NEWLINE#
inlinkDict [ docid ] = adoc [ 1 : ] if adoc [ 1 : ] else 0 #NEWLINE#
print ( [ d . strftime ( '%d/%m/%Y' ) for d in rr [ : : 2 ] ] ) #NEWLINE#
the_regex = re . compile ( re . escape ( the_value ) ) #NEWLINE#
print ( element_count ( [ [ [ [ [ [ [ [ 1 , 2 , 3 ] ] ] ] ] ] ] ] ) ) #NEWLINE#
np . int32 ( np . int64 ( 3289288566 ) ) #NEWLINE#
myArray = np . zeros ( ( 6 , 6 ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
( 0 , 1 ) not in ( ( x % 2 , y % 2 ) for x , y in zip ( values , values [ 1 : ] ) ) #NEWLINE#
"""{"asset_id":#SPACE#"575155948f7d4c4ebccb02d4e8f84d2f",#SPACE#"body":#SPACE#"\\u003cscript\\u003e\\u003c/script\\u003e",#SPACE#"asset_created":#SPACE#null}""" #NEWLINE#
return super ( ) . __new__ ( metacls , cls , bases , clsdict ) #NEWLINE#
C = np . hstack ( ( A , B [ : , 1 : ] ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( dict . __getitem__ , l , d ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
str . split ( '&' , 8 ) #NEWLINE#
print ( date ( today . year + 1 , today . month , today . day ) ) #NEWLINE#
json . dumps ( definitions . objects . values_list ( 'title' , flat = True ) ) #NEWLINE#
"""This#SPACE#is#SPACE#the#SPACE#first#SPACE#line#SPACE#of#SPACE#my#SPACE#text#SPACE#which#SPACE#will#SPACE#be#SPACE#joined#SPACE#to#SPACE#a#SPACE#second.""" #NEWLINE#
hasattr ( fn , '__call__' ) #NEWLINE#
print ( re . sub ( '<[A-Za-z\\/][^>]*>' , '' , my_string ) ) #NEWLINE#
fringe8 ( ( 2 , 2 ) , ( 1 , 1 , 3 , 3 ) ) #NEWLINE#
values = ( int ( i ) for i in values . split ( ',' ) ) #NEWLINE#
re . split ( '[,;]+' , 'This,is;a,;string' ) #NEWLINE#
list ( '这是一个句子' ) #NEWLINE#
df . rename ( columns = lambda x : x . lower ( ) . replace ( '#SPACE#' , '_' ) ) #NEWLINE#
sum ( Decimal ( n ) * Decimal ( 10 ) ** Decimal ( i ) for i , n in zip ( count ( 0 , - 1 ) , a ) ) #NEWLINE#
SQLALCHEMY_DATABASE_URI = 'postgresql://user:pw@localhost/somedb' #NEWLINE#
replace_line ( 'stats.txt' , 0 , 'Mage' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' . join ( [ ',' . join ( x ) for x in A ] ) , file = f ) #NEWLINE#
"""they're#SPACE#bill's#SPACE#friends#SPACE#from#SPACE#the#SPACE#UK""" . title ( ) #NEWLINE#
[ float ( i ) for i in a . strip ( '{}' ) . split ( ',' ) ] #NEWLINE#
MyClass . __dict__ #NEWLINE#
df1 [ 'value' ] . unstack ( 0 ) . asfreq ( 'D' ) . ffill ( ) #NEWLINE#
x1 = sorted ( x , key = lambda t : t [ 2 ] , reverse = True ) #NEWLINE#
df = pd . DataFrame ( [ df . sum ( ) ] * len ( df ) ) #NEWLINE#
pd . crosstab ( df . saleid , df . upc ) #NEWLINE#
plt . show ( ) #NEWLINE#
res . pivot ( index = 'Own' , columns = 'Brand' , values = 'Rating' ) #NEWLINE#
np . unique ( df [ [ 'Col1' , 'Col2' ] ] . values ) #NEWLINE#
print ( data . reshape ( - 1 , 2 ) . mean ( axis = 1 ) ) #NEWLINE#
screen = pygame . display . set_mode ( ( 1600 , 900 ) ) #NEWLINE#
s . loc [ s . str . startswith ( 'a' , na = False ) ] #NEWLINE#
max ( n for n in range ( 1000 ) if str ( n ) == str ( n ) [ : : - 1 ] and is_prime ( n ) ) #NEWLINE#
np . maximum . accumulate ( Q [ : , : : - 1 ] , axis = 1 ) [ : , : : - 1 ] #NEWLINE#
legend . figure . canvas . mpl_connect ( 'motion_notify_event' , self . on_motion ) #NEWLINE#
clf . fit ( X_train , y_train ) #NEWLINE#
foodict = { k : v for k , v in list ( mydict . items ( ) ) if k . startswith ( 'foo' ) } #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
rect = picture . get_rect ( ) #NEWLINE#
kludged = re . sub ( '(?i)([a-z_].*?):' , '"\\1":' , string ) #NEWLINE#
main ( ) #NEWLINE#
datetime . time ( ) #NEWLINE#
test . f ( 0 ) #NEWLINE#
df . stack ( ) . between ( 2 , 10 , inclusive = False ) . unstack ( ) #NEWLINE#
y = [ j for i in x for j in i ] #NEWLINE#
index_list = df [ ( df [ 'A' ] == 2 ) & ( df [ 'B' ] == 3 ) ] . index . tolist ( ) #NEWLINE#
my_list [ 0 ] = 'cake' #NEWLINE#
sys . path . append ( '/path/to/apps' ) #NEWLINE#
np . einsum ( '...j,...j->...' , vf , vf , dtype = np . double ) [ - 1 , - 1 , - 1 ] #NEWLINE#
pyautogui . typewrite ( 'any#SPACE#text#SPACE#you#SPACE#want#SPACE#to#SPACE#type' ) #NEWLINE#
hex ( x ) [ 2 : ] #NEWLINE#
im = Image . open ( image_file ) #NEWLINE#
return render_to_response ( 'foo.html' , { 'results' : decoded_json [ 'Result' ] } ) #NEWLINE#
session . delete ( instance ) #NEWLINE#
""",""" . join ( map ( str , li2 ) ) #NEWLINE#
result . append ( b [ index ] ) #NEWLINE#
env . password = 'yourpassword' #NEWLINE#
p . Series ( [ 1 , 3 , 5 , 10 , 12 , 20 , 21 , 25 ] ) . hist ( bins = 3 , range = ( 0 , 30 ) ) . figure #NEWLINE#
server . starttls ( ) #NEWLINE#
os . environ [ 'PYTHON_EGG_CACHE' ] = path #NEWLINE#
df . loc [ gb . groups [ 'foo' ] ] #NEWLINE#
s = s . decode ( 'cp1250' ) #NEWLINE#
sum ( 1 for d in my_list if d . get ( 'id' ) == 1 ) #NEWLINE#
form . myfield . data = [ '1' , '3' ] #NEWLINE#
print ( f ( 1 , 2 , 3 ) ) #NEWLINE#
myTel . write ( 'login\n' ) #NEWLINE#
np . concatenate ( counts_array ) . reshape ( len ( counts_array ) , - 1 ) #NEWLINE#
urllib . request . urlopen ( your_url , proxies = { 'http' : 'http://192.168.0.1:80' } ) #NEWLINE#
print ( '\n' . join ( [ x . rsplit ( None , 1 ) [ 0 ] for x in target . strip ( ) . split ( '\n' ) ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
foo = foo . replace ( '#SPACE#' , '' ) [ : - 3 ] . upper ( ) #NEWLINE#
name = sys . argv [ 1 : ] #NEWLINE#
plt . show ( ) #NEWLINE#
itemindex = numpy . where ( array == item ) #NEWLINE#
file = str ( QFileDialog . getExistingDirectory ( self , 'Select#SPACE#Directory' ) ) #NEWLINE#
r = np . kron ( np . diag ( [ 1 , 2 , 3 ] ) , np . ones ( ( 3 , 3 ) , dtype = 'int' ) ) #NEWLINE#
s . groupby ( level = 0 ) . apply ( list ) #NEWLINE#
return HttpResponse ( open ( 'myxmlfile.xml' ) . read ( ) , content_type = 'text/xml' ) #NEWLINE#
df . groupby ( [ df . index . date , 'action' ] ) . count ( ) #NEWLINE#
df . convert_objects ( convert_numeric = True ) #NEWLINE#
super ( UsuarioForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pobj . stdin . flush ( ) #NEWLINE#
SCRIPT_ROOT = os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
super ( MyUser , self ) . save ( using = 'database_2' ) #NEWLINE#
foo ( ) #NEWLINE#
multiprocessing . Process . __init__ ( self ) #NEWLINE#
Counter ( { '1' : 6 , '2' : 4 , '7' : 3 , '10' : 2 } ) #NEWLINE#
[ sum ( x ) for x in zip ( * lists_of_lists ) ] #NEWLINE#
""".*?\\b""" #NEWLINE#
u = User . objects . filter ( userjob__job = a ) . filter ( userjob__job = c ) #NEWLINE#
pd . concat ( [ pd . Series ( initial_value ) , cum_growth ] ) . reset_index ( drop = True ) #NEWLINE#
xml_soup = BeautifulSoup ( xml_object , 'xml' ) #NEWLINE#
line = x . split ( None , 4 ) #NEWLINE#
np . concatenate ( input_list ) . ravel ( ) #NEWLINE#
return '{0:0{x}d}' . format ( random . randint ( 0 , 10 ** x - 1 ) , x = x ) #NEWLINE#
a [ 0 ] #NEWLINE#
app . run ( ) #NEWLINE#
mp . Process ( target = foo , args = ( x , ) ) . start ( ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
is_pangram ( 'Do#SPACE#big#SPACE#jackdaws#SPACE#love#SPACE#my#SPACE#sphinx#SPACE#of#SPACE#quartz?' ) #NEWLINE#
df . drop ( df . columns [ i ] , axis = 1 ) #NEWLINE#
getattr ( o , 'A' ) ( 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . path . append ( 'C:\\Path\\To\\Dll' ) #NEWLINE#
my_dict [ 1 ] [ 2 ] = 3 #NEWLINE#
ax . xaxis . set_major_locator ( locator ) #NEWLINE#
A . ravel ( ) [ np . in1d ( A , B ) ] = 0 #NEWLINE#
my_list . sort ( key = my_key ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
os . path . expanduser ( path ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
wordsep_re = re . compile ( '(\\s+|(?:-|\\+|\\*\\*|\\*))' ) #NEWLINE#
return HttpResponseRedirect ( '/path/' ) #NEWLINE#
p = re . compile ( 'name#SPACE#(.*?)#SPACE#is#SPACE#valid' ) #NEWLINE#
count_chars ( s , [ 'A' , 'a' , 'z' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . ix [ : 5 , : 10 ] #NEWLINE#
soup . findAll ( 'meta' , name = re . compile ( '^description$' , re . I ) ) #NEWLINE#
pd . read_csv ( 'whitespace.csv' , header = None , delimiter = '\\s+' ) #NEWLINE#
new = text [ : 1 ] + 'Z' + text [ 2 : ] #NEWLINE#
a . ravel ( ) #NEWLINE#
ax . set_xticklabels ( nonRepetitive_x ) #NEWLINE#
del pkt [ TCP ] . chksum #NEWLINE#
"""""" . join ( g ) #NEWLINE#
return [ x for i , x in enumerate ( numbers ) if i not in indices ] #NEWLINE#
re . findall ( '\\D(\\d{5})\\D' , '#SPACE#' + s + '#SPACE#' ) #NEWLINE#
dic [ 'Test' ] [ 'class' ] = { 'section' : 5 } #NEWLINE#
xml . find ( './bar' ) . attrib [ 'key' ] #NEWLINE#
s = s . replace ( '{' , '{{' ) . replace ( '}' , '}}' ) #NEWLINE#
Orders . objects . filter ( order_date__year = <STR0> ) #NEWLINE#
A [ 0 ] [ 0 : 4 ] #NEWLINE#
sys . path . insert ( 0 , '/home/zartch/PycharmProjects/Scrapy-Django-Minimal/myweb' ) #NEWLINE#
conn . rollback ( ) #NEWLINE#
stuff . replace ( '#SPACE#and#SPACE#' , '/' ) #NEWLINE#
a [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 2 ] ] #NEWLINE#
set . intersection ( * map ( set , d ) ) #NEWLINE#
df . columns . droplevel ( 1 ) #NEWLINE#
count1 = int ( config . get ( 'Counter' , 'count1' ) ) #NEWLINE#
binascii . crc32 ( binascii . a2b_hex ( '18329a7e' ) ) #NEWLINE#
[ 2 , 6 , 8 , 7 , 9 , 6 , 5 , 4 , 2 ] #NEWLINE#
print ( s . decode ( 'unicode_escape' ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
sorted ( iterable , cmp = None , key = None , reverse = False ) #NEWLINE#
[ '__builtins__' , '__doc__' , '__loader__' , '__name__' , '__package__' ] #NEWLINE#
PERIMETER = 'xyz' #NEWLINE#
int ( '0xAEAE' , 16 ) #NEWLINE#
[ [ ] ] * 10 #NEWLINE#
ndim_grid ( [ 2 , - 2 ] , [ 5 , 3 ] ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_formatter ( DateFormatter ( '%H:%M:%S' ) ) #NEWLINE#
sorted ( dic , key = lambda k : dic [ k ] [ 'Fisher' ] ) #NEWLINE#
file . write ( '%s#SPACE#%s#SPACE#%s' % ( ranks [ a ] , ranks [ b ] , count ) ) #NEWLINE#
( '^password_reset_done/$' , 'django.contrib.auth.views.password_reset_done' ) , #NEWLINE#
"""a_foobar_FooBar#SPACE#baz#SPACE#golf_CART#SPACE#Foo""" #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
logging . info ( 'some#SPACE#message' ) #NEWLINE#
[ ( 1 , 2 ) , ( 3 , 4 ) , ( 1 , 3 ) , ( 2 , 4 ) , ( 1 , 4 ) , ( 2 , 3 ) ] #NEWLINE#
lambda i = i : pprint ( i ) #NEWLINE#
re . sub ( '\\d+' , lambda x : x . group ( ) . zfill ( padding ) , s ) #NEWLINE#
print ( r . dtype ) #NEWLINE#
ax . axes . get_xaxis ( ) . set_visible ( False ) #NEWLINE#
regx = re . compile ( '\\s+and\\s+|\\s*,\\s*' ) #NEWLINE#
str . isalpha ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
files = [ fi for fi in files if not fi . endswith ( '.dat' ) ] #NEWLINE#
print ( df [ 'col' ] [ 0 : i ] . mean ( ) ) #NEWLINE#
plt . imshow ( data , interpolation = 'none' , vmin = 0 ) #NEWLINE#
{ i : functools . reduce ( dict . __getitem__ , keys , d [ i ] ) for i in d } #NEWLINE#
{ 'alg' : 'HS256' , 'typ' : 'JWT' } #NEWLINE#
mylist = [ ( 'XXX' if v == 'abc' else v ) for v in mylist ] #NEWLINE#
sc . parallelize ( [ Row ( foo = 1 , bar = 2 ) ] ) . toDF ( ) . select ( 'foo' , 'bar' ) #NEWLINE#
os . chown ( path , uid , gid ) #NEWLINE#
sys . path . append ( '/path/to/your/djangoproject/' ) #NEWLINE#
set ( map ( tuple , listB ) ) <= set ( map ( tuple , listA ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
max ( lst , key = lambda d : d [ 'score' ] ) #NEWLINE#
sorted ( lis , key = lambda a : Infinity ( ) if a [ 'name' ] is None else a [ 'name' ] ) #NEWLINE#
( x for x in List ) #NEWLINE#
print ( sum ( num for num in numbers if num % 2 == 1 ) ) #NEWLINE#
dict ( zip ( i , i ) ) #NEWLINE#
'%(foo)s#SPACE#%(bar)d' % { 'bar' : 42 , 'foo' : 'spam' , 'baz' : None } #NEWLINE#
d = datetime . strptime ( date_str , '%Y-%m-%d' ) #NEWLINE#
np . array ( [ a , a ] ) . shape #NEWLINE#
[ [ ] , [ ] , [ ] ] #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
print ( list ( combinations ( [ 'hel' , 'lo' , 'bye' ] , 2 ) ) ) #NEWLINE#
myplsda = PLSRegression ( ) . fit ( X = Xdata , Y = dummy ) #NEWLINE#
instance . __class__ . __name__ #NEWLINE#
json . dump ( data , outfile ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
print ( max ( group , key = lambda k : len ( list ( k [ 1 ] ) ) ) ) #NEWLINE#
f . close ( ) #NEWLINE#
some_func ( * params ) #NEWLINE#
[ ( 'a' , '1' ) , ( 'b' , '2' ) , ( 'c' , '3' ) , ( 'd' , '4' ) ] #NEWLINE#
os . system ( 'cls' if os . name == 'nt' else 'clear' ) #NEWLINE#
column_names = [ item [ 0 ] for item in cursor . description ] #NEWLINE#
numpy . clip ( x , 0 , 255 ) #NEWLINE#
x . reshape ( 2 , 2 , 5 ) #NEWLINE#
ds . loc [ 'wiki' : 'wikj' ] #NEWLINE#
lines . sort ( key = itemgetter ( 2 ) , reverse = True ) #NEWLINE#
[ i for i in range ( 100 ) <STR0> i > 10 <STR0> i < 50 ] #NEWLINE#
re . sub ( '#SPACE#and#SPACE#(?=.*#SPACE#and#SPACE#)' , ',#SPACE#' , str ) #NEWLINE#
df . groupby ( 'group' ) . transform ( pd . rolling_mean , 2 , min_periods = 2 ) #NEWLINE#
sorted ( { x for v in content . values ( ) for x in v } ) #NEWLINE#
set ( tuple ( i ) for i in l ) #NEWLINE#
console = logging . StreamHandler ( ) #NEWLINE#
set ( [ 1 , 2 ] ) #NEWLINE#
j = Image . fromarray ( b , mode = 'RGB' ) #NEWLINE#
self . ham = dict ( ) #NEWLINE#
certificat = signers [ 0 ] #NEWLINE#
unravel_index ( a . argmax ( ) , a . shape ) #NEWLINE#
[ e for i , e in enumerate ( main_list ) if i in indexes ] #NEWLINE#
cv2 . rectangle ( image , ( x , y ) , ( x + w , y + h ) , ( 255 , 255 , 0 ) , 5 ) #NEWLINE#
self . ui . closeButton . clicked . connect ( self . closeIt ) #NEWLINE#
"""\\d+(\\.\\d+)*$""" #NEWLINE#
return sum ( int ( x ) for x in digit if x . isdigit ( ) ) #NEWLINE#
re . findall ( '\\d+|[^\\d\\s]+' , string ) #NEWLINE#
sys . stdout = codecs . getwriter ( 'utf-8' ) ( sys . stdout . detach ( ) ) #NEWLINE#
print ( type ( word . decode ( 'utf-8' ) ) ) #NEWLINE#
pytz . timezone ( 'US/Eastern' ) #NEWLINE#
app . run ( ) #NEWLINE#
configfiles = glob . glob ( 'C:\\Users\\sam\\Desktop\\*\\*.txt' ) #NEWLINE#
df [ 'A' ] . replace ( to_replace = 0 , method = 'ffill' ) #NEWLINE#
AtB = A . stack ( 0 ) . dot ( twos ) . unstack ( ) #NEWLINE#
[ [ 1 , 1 , 2 , 2 ] , [ 1 , 1 , 2 , 2 ] , [ 3 , 3 , 4 , 4 ] , [ 3 , 3 , 4 , 4 ] ] #NEWLINE#
r = requests . post ( url , files = files , data = data , headers = headers ) #NEWLINE#
""":""" . join ( '{:02x}' . format ( ord ( c ) ) for c in s ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
print ( '' . join ( format ( x , '02x' ) for x in array_alpha ) ) #NEWLINE#
df2 = df [ 'Labels' ] . str . get_dummies ( sep = ',' ) #NEWLINE#
my_array , my_variable = my_function ( ) #NEWLINE#
print ( struct . pack ( 'I' , val ) . encode ( 'base64' ) ) #NEWLINE#
driver . quit ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
P . ylabel ( '$\\cos{(x)}\\cdot{}10^4$' , labelpad = 20 ) #NEWLINE#
[ k for k , v in colour . items ( ) if v == min_val ] #NEWLINE#
plt . show ( ) #NEWLINE#
worksheet . write ( 1 , 0 , label = 'Formatted#SPACE#value' , style = style ) #NEWLINE#
blob_reader = blobstore . BlobReader ( 'my_blobstore_key' ) #NEWLINE#
[ y for y in a if y not in b ] #NEWLINE#
np . fft . fft ( xfiltered ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
max ( lis , <STR0> = lambda x : int ( x ) ) #NEWLINE#
matplotlib . pyplot . plot ( raw_audio_data ) #NEWLINE#
[ int ( char ) for char in str ( 634 ) ] #NEWLINE#
{ { url_for ( 'post_blueprint.get_post' , ** post ) } } #NEWLINE#
re . sub ( '#SPACE#+' , '#SPACE#' , 'The#SPACE##SPACE##SPACE##SPACE##SPACE#quick#SPACE#brown#SPACE##SPACE##SPACE##SPACE#fox' ) #NEWLINE#
root . grid_rowconfigure ( 1 , weight = 1 ) #NEWLINE#
"""1""" . encode ( ) #NEWLINE#
host_port = info [ 'NetworkSettings' ] [ 'Ports' ] [ '1337' ] [ 0 ] [ 'HostPort' ] #NEWLINE#
self . setWindowTitle ( 'Checkbox' ) #NEWLINE#
self . setWindowTitle ( '' ) #NEWLINE#
print ( re . sub ( '-+' , '-' , astr ) ) #NEWLINE#
print ( ( 'after,#SPACE#outer_list#SPACE#=' , outer_list ) ) #NEWLINE#
palette . append ( ( 0 , 0 , 0 ) ) #NEWLINE#
print ( eval ( 'self.post.id' ) ) #NEWLINE#
today + datetime . timedelta ( days = 1 ) #NEWLINE#
np . einsum ( 'ij,jk->jik' , A , B ) #NEWLINE#
df . C [ df . B == 'x' ] = df . C . shift ( - 1 ) #NEWLINE#
print ( len ( str ( decimal . Decimal ( '0.1' ) ) ) ) #NEWLINE#
df . corr ( ) . ix [ ( 'special_col' ) , : - 1 ] #NEWLINE#
map ( lambda d : d . get ( 'value' , 'default#SPACE#value' ) , l ) #NEWLINE#
newNums = [ i for i , x in enumerate ( nums ) if x == 12 ] #NEWLINE#
[ peaks ( [ x , y ] ) for x , y in zip ( xscat , yscat ) ] #NEWLINE#
raise ValueError ( 'some#SPACE#problem:#SPACE#%s' % value ) #NEWLINE#
print ( json . dumps ( dict ( table_data ) ) ) #NEWLINE#
df . to_sql ( 'table_name' , engine ) #NEWLINE#
"""GCC#SPACE#4.9.2""" #NEWLINE#
sorted ( li1 , key = k ) #NEWLINE#
list ( range ( 0 , 6 , 2 ) ) #NEWLINE#
p = re . compile ( 'name#SPACE#(.*)#SPACE#is#SPACE#valid' ) #NEWLINE#
{ x . split ( ':' ) [ 0 ] : x . split ( ':' ) [ 1 ] for x in a } #NEWLINE#
admin . site . register ( Foo , FooAdmin ) #NEWLINE#
re . sub ( '(\\d+)' , lambda m : '%.0f' % ( float ( m . group ( 1 ) ) * 2 ) , 'test#SPACE#line#SPACE#123' ) #NEWLINE#
"""{:02}:{:02}:{:02}""" . format ( int ( 0.0 ) , int ( 0.9 ) , int ( 67.5 ) ) #NEWLINE#
numpy . zeros ( ( 3 , 3 ) ) #NEWLINE#
plt . axvline ( x = 2.20589566 ) #NEWLINE#
0 , '2012-11-06T16:23:36-05:00' , 0 , None , 23759918 , 'baseline' , '0#SPACE#to#SPACE#100' , null , 105114 , 2009524 , True , 'charge' , 'Charge' #NEWLINE#
print ( "I#SPACE#am#SPACE#jack's#SPACE#raging#SPACE#bile#SPACE#duct" ) #NEWLINE#
df . column_A . apply ( to_binary ) #NEWLINE#
df [ 'data' ] = pd . to_datetime ( df [ 'data' ] , format = '%d/%b/%Y:%H:%M:%S' ) #NEWLINE#
df . max ( ) #NEWLINE#
sys . path . append ( os . path . expanduser ( '~/python/libs' ) ) #NEWLINE#
os . path . commonpath ( [ '/the/dir' , os . path . realpath ( filename ) ] ) == '/the/dir' #NEWLINE#
plt . show ( ) #NEWLINE#
'172.16.0.3' , '25/Sep/2002:14:04:19#SPACE#+0200' , 'GET#SPACE#/#SPACE#HTTP/1.1' , '401' , '' , 'Mozilla/5.0#SPACE#(X11;#SPACE#U;#SPACE#Linux#SPACE#i686;#SPACE#en-US;#SPACE#rv:1.1)#SPACE#Gecko/20020827' #NEWLINE#
self . assertEqual ( r , 'jaja-lol-mememeoo-a' ) #NEWLINE#
yacc . yacc ( debug = 0 , write_tables = 0 ) #NEWLINE#
nx . draw_networkx_edges ( G , pos , edgelist = black_edges , arrows = False ) #NEWLINE#
sys . exit ( ) #NEWLINE#
good_data = [ data [ ( n ) , : ] [ flag == 1 ] . tolist ( ) for n in range ( data . shape [ 0 ] ) ] #NEWLINE#
mydatetime . strftime ( '%-m/%d/%Y#SPACE#%-I:%M%p' ) #NEWLINE#
img [ : , : , ( 0 ) ] = 0 #NEWLINE#
os . chdir ( '×\x90' ) #NEWLINE#
self . SetSizer ( sizer ) #NEWLINE#
sum ( x > 0 for x in frequencies ) #NEWLINE#
"""this#SPACE#is#SPACE#a#SPACE#verylong#SPACE#string#SPACE#toofor#SPACE#sure#SPACE#...""" #NEWLINE#
[ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' ] #NEWLINE#
print ( get_sec ( '0:00:25' ) ) #NEWLINE#
pickle . dump ( mydict , open ( '/tmp/test.pkl' , 'wb' ) ) #NEWLINE#
json . dumps ( geodata ) #NEWLINE#
param , value = line . split ( '=' , 1 ) #NEWLINE#
print ( A . reshape ( - 1 , k ) [ np . arange ( n * m ) , B . ravel ( ) ] ) #NEWLINE#
f . write ( '%d' % number ) #NEWLINE#
l = [ ( 1 , 4 ) , ( 8 , 10 ) , ( 19 , 25 ) , ( 10 , 13 ) , ( 14 , 16 ) , ( 25 , 30 ) ] #NEWLINE#
print ( pd . merge ( df1 , df2 , on = 'B' ) ) #NEWLINE#
np . in1d ( A , B ) . any ( ) #NEWLINE#
session . query ( ZKUser ) . filter ( ZKUser . groups . any ( ZKGroup . id . in_ ( [ 1 , 2 , 3 ] ) ) ) #NEWLINE#
"""google.com.#SPACE#1700#SPACE#IN#SPACE#TXT#SPACE#"v=spf1#SPACE#include:_netblocks.google.com#SPACE#ip4:216.73.93.70/31#SPACE#ip4:216.73.93.72/31#SPACE#~all\"""" #NEWLINE#
plt . show ( ) #NEWLINE#
y = set ( x . flatten ( ) ) #NEWLINE#
return date . today ( ) > self . date #NEWLINE#
pygame . init ( ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
Image ( 'img.png' ) . write ( 'clipboard:' ) #NEWLINE#
writer = csv . writer ( output , delimiter = '\n' ) #NEWLINE#
sorted ( itertools . product ( ( 0 , 1 ) , repeat = 3 ) , key = lambda x : sum ( x ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . pivot ( index = df [ 'B1' ] , columns = df . index , values = df [ 'B2' ] ) . plot ( ) #NEWLINE#
canvas . create_image ( 0 , 0 , anchor = NW , image = displayPlantImage ) #NEWLINE#
channel . queue_bind ( exchange = 'amq.direct' , queue = 'hello' ) #NEWLINE#
re . split ( '\\||<>' , input ) #NEWLINE#
age = models . IntegerField ( blank = True , null = True ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ ( key , len ( list ( it ) ) ) for key , it in itertools . groupby ( list_one ) ] #NEWLINE#
df . isnull ( ) #NEWLINE#
list ( pad ( [ 1 , 2 , 3 ] , 7 , '' ) ) #NEWLINE#
print ( "All#SPACE#normal#SPACE#prints#SPACE#after#SPACE#'RESET'#SPACE#above." ) #NEWLINE#
{ 'List#SPACE#of#SPACE#things' : [ 'Alice' , 'Bob' , 'Evan' ] } #NEWLINE#
df1 . apply ( lambda s : df2 . corrwith ( s ) ) #NEWLINE#
self . response . out . write ( html ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
print ( "I'm#SPACE#meth_b" ) #NEWLINE#
[ int ( x ) for line in data for x in line . split ( ) ] #NEWLINE#
print ( 'Location:URL\r\n' ) #NEWLINE#
genfromtxt ( 'missing1.dat' , delimiter = ',' , filling_values = 99 ) #NEWLINE#
ax . plot ( x , y , color = uniqueish_color ( ) ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self , parent ) #NEWLINE#
os . chdir ( 'l:' ) #NEWLINE#
os . chdir ( 'l:\\letter' ) #NEWLINE#
os . chdir ( 'z:' ) #NEWLINE#
os . chdir ( 'l:\\' ) #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
mylist = sorted ( mylist , key = lambda k : ( k [ 'name' ] . lower ( ) , - k [ 'age' ] ) ) #NEWLINE#
getattr ( a , 'print_test' ) ( ) #NEWLINE#
sdb . close ( ) #NEWLINE#
np . mgrid [ [ slice ( row [ 0 ] , row [ 1 ] , n * 1.0j ) for row , n in zip ( bounds , n_bins ) ] ] #NEWLINE#
return super ( UserSettingsView , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x ^ y , [ hash ( item ) for item in list ( d . items ( ) ) ] ) #NEWLINE#
results = [ r for k in keywords for r in re . findall ( k , message . lower ( ) ) ] #NEWLINE#
re . findall ( '\\bpresent\\b' , tale ) #NEWLINE#
a . append ( 'name#SPACE#like#SPACE#%%%s' % b [ 'by_name' ] ) #NEWLINE#
[ 'Barack#SPACE#Obama' , 'Bill#SPACE#Gates' ] #NEWLINE#
getattr ( this_prize , choice ) #NEWLINE#
[ ( '1' , 6 ) , ( '2' , 4 ) , ( '7' , 3 ) , ( '10' , 2 ) ] #NEWLINE#
[ [ 1 , - 2 ] , [ 3 , - 2 ] ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#some_table#SPACE#(somecol)#SPACE#VALUES#SPACE#(%s)' , ( dt , ) ) #NEWLINE#
k = [ 1 , 1 , 2 , 3 ] #NEWLINE#
time . sleep ( 0.2 ) #NEWLINE#
int ( bin ( n ) [ : 1 : - 1 ] , 2 ) #NEWLINE#
plt . show ( ) #NEWLINE#
requests . post ( url , data = body , headers = headers ) #NEWLINE#
print ( [ hex ( x ) for x in numbers ] ) #NEWLINE#
writer . writerows ( [ 'Hi,#SPACE#there' ] ) #NEWLINE#
zip ( string , string [ 1 : ] , string [ 2 : ] ) #NEWLINE#
numpy . set_printoptions ( formatter = { 'float' : lambda x : 'float:#SPACE#' + str ( x ) } ) #NEWLINE#
[ '{}_{}' . format ( k , v ) for k , v in list ( d . items ( ) ) ] #NEWLINE#
win . show_all ( ) #NEWLINE#
sum ( Decimal ( i ) for i in a ) #NEWLINE#
re . search ( '^((?!bantime|(invokername=server)).)*$' , s , re . M ) . group ( ) #NEWLINE#
np . split ( x . reshape ( x . shape [ 0 ] , - 1 ) , 9 , axis = 1 ) #NEWLINE#
tup . index ( 'string2' ) #NEWLINE#
conn . close ( ) #NEWLINE#
G = nx . balanced_tree ( 10 , 10 ) #NEWLINE#
process . terminate ( ) #NEWLINE#
print ( re . sub ( '(\\\\u[0-9A-Fa-f]+)' , unescapematch , 'Wi\\u2011Fi' ) ) #NEWLINE#
hdl = logging . FileHandler ( 'hits.log' ) #NEWLINE#
a = re . compile ( 'p(?:resent|eople)' ) #NEWLINE#
a = re . compile ( 'p(?:resent)' ) #NEWLINE#
f . close ( ) #NEWLINE#
xxxxx . yyyyy . zzzzz #NEWLINE#
d = os . path . dirname ( os . getcwd ( ) ) #NEWLINE#
alpha = img . convert ( 'RGBA' ) . split ( ) [ - 1 ] #NEWLINE#
list2 == sorted ( list2 , key = lambda c : list1 . index ( c ) ) #NEWLINE#
dict ( ( y , x ) for x , y in t ) #NEWLINE#
df . words . str . contains ( 'he' ) . sum ( ) #NEWLINE#
print ( len ( set ( w . lower ( ) for w in open ( 'filename.dat' ) . read ( ) . split ( ) ) ) ) #NEWLINE#
df [ 'sum' ] = df [ 'A' ] + df [ 'C' ] #NEWLINE#
plt . title ( 'Utilisateur' ) #NEWLINE#
return Response ( { 'detail' : 'this#SPACE#works' , 'report' : report_encoded } ) #NEWLINE#
myothermodule . py #NEWLINE#
[ [ '4824' ] , [ '482' , '4' ] , [ '48' , '24' ] , [ '4' , '824' ] , [ '4' , '82' , '4' ] ] #NEWLINE#
print ( repr ( s ) ) #NEWLINE#
"""""" . join ( k for k , g in groupby ( sorted ( 'aaabcabccd' ) ) ) #NEWLINE#
pytz . utc . localize ( utc_time , is_dst = None ) . astimezone ( tz ) #NEWLINE#
my_function ( ** data ) #NEWLINE#
my_list [ bounds [ 0 ] : bounds [ 1 ] + 1 ] = [ 'foo' ] * ( bounds [ 1 ] + 1 - bounds [ 0 ] ) #NEWLINE#
'fue' + '́' #NEWLINE#
plt . show ( ) #NEWLINE#
d = { 'i' : 1 , 'j' : 1 } #NEWLINE#
[ s [ 0 ] for s in formula . split ( '+' ) ] #NEWLINE#
print ( list ( range ( n , ( m + 1 ) * n , n ) ) ) #NEWLINE#
"""::2012-05-14#SPACE#18:10:20.856000::""" . translate ( None , '#SPACE#-.:' ) #NEWLINE#
myString . translate ( None , string . punctuation ) #NEWLINE#
newdf = df . withColumn ( 'total' , sum ( df [ col ] for col in df . columns ) ) #NEWLINE#
type ( theobject ) . __name__ in dir ( __builtins__ ) #NEWLINE#
print ( list ( powerset ( [ 4 , 5 , 6 ] ) ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( '\n' . join ( op ) ) #NEWLINE#
li = map ( lambda x : '{0}#SPACE#-#SPACE#{1}' . format ( x , grade ( x ) ) , s ) #NEWLINE#
func ( ) #NEWLINE#
check ( 'ABC' ) #NEWLINE#
len ( foo . split ( '.' ) [ 1 ] ) #NEWLINE#
[ [ cell for cell in row ] for row in X ] #NEWLINE#
s [ : : - 1 ] #NEWLINE#
text_file . close ( ) #NEWLINE#
np . unique ( df [ [ 'Col1' , 'Col2' ] ] ) #NEWLINE#
print ( [ [ x for x in a if len ( x ) == i ] for i in set ( len ( k ) for k in a ) ] ) #NEWLINE#
b = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
y = x . astype ( int ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ ( 1 ) : { ( 2 ) : [ ( 2 , 3 ) , ( 1 , 7 ) ] } } #NEWLINE#
root . mainloop ( ) #NEWLINE#
signal . signal ( signal . SIGINT , quit_gracefully ) #NEWLINE#
all ( ( c [ i ] == np . cross ( a [ i ] , b [ i ] ) ) . all ( ) for i in range ( len ( c ) ) ) #NEWLINE#
return self . request . user #NEWLINE#
Mainscreen ( ) #NEWLINE#
print ( "///I#SPACE#don't#SPACE#know#SPACE#why#SPACE#///I#SPACE#don't#SPACE#have#SPACE#the#SPACE#right#SPACE#answer///" . strip ( '/' ) ) #NEWLINE#
ax . xaxis . set_major_formatter ( myFmt ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
uly = uly . replace ( '-' , 'S' ) if '-' in uly else 'N' + uly #NEWLINE#
findReplace ( 'some_dir' , 'find#SPACE#this' , 'replace#SPACE#with#SPACE#this' , '*.txt' ) #NEWLINE#
self . assertEqual ( my_patch_method , patch_my_lib ( ) . target_method . __func__ ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . INFO ) #NEWLINE#
print ( parser . parse_args ( '--foo#SPACE#B#SPACE#cmd#SPACE#--arg1#SPACE#XX#SPACE#ZZ#SPACE#--foobar' . split ( ) ) ) #NEWLINE#
current_time = ( datetime . now ( ) - timedelta ( seconds = 10 ) ) . time ( ) #NEWLINE#
sns . regplot ( 'rdiff' , 'pct' , df , corr_func = stats . pearsonr ) #NEWLINE#
sum ( Counter ( { 'a' : 2 , 'b' : 2 , 'c' : 2 , 'd' : 1 } ) . values ( ) ) #NEWLINE#
pgdb . paramstyle #NEWLINE#
df = df [ ~ df [ 'User#SPACE#Name' ] . str . endswith ( ( 'DA' , 'PL' ) ) ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
[ L [ i ] for i in [ 2 , 1 , 0 ] ] #NEWLINE#
"""abc#SPACE#abc#SPACE#abcd#SPACE#ab""" . replace ( 'abc' , 'def' ) #NEWLINE#
re . sub ( '(?<=\\w)(?=\\w)' , '-' , str ) #NEWLINE#
os . system ( 'scp#SPACE#FILE#SPACE#USER@SERVER:PATH' ) #NEWLINE#
return HttpResponseRedirect ( '/path/' ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( dict ( re . findall ( '\\{(\\S+)\\s+\\{*(.*?)\\}+' , x ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
binascii . hexlify ( 'Dummy#SPACE#String' ) #NEWLINE#
self . f . close ( ) #NEWLINE#
x [ 1 : : 2 , 1 : : 2 ] #NEWLINE#
arr [ arr > 0 ] . min ( ) #NEWLINE#
etree . tostring ( div ) #NEWLINE#
painter . restore ( ) #NEWLINE#
text = text . replace ( '?"' , '?#SPACE#"' ) . replace ( '!"' , '!#SPACE#"' ) . replace ( '."' , '.#SPACE#"' ) #NEWLINE#
df . loc [ : , ( slice ( None ) , 'A' ) ] #NEWLINE#
zlib . decompress ( data ) #NEWLINE#
datetime . strptime ( data [ 4 ] . partition ( 'T' ) [ 0 ] , '%Y-%m-%d' ) . date ( ) #NEWLINE#
[ 'asp10' , 'asp11' , 'asp15' , 'asp16' , 'asp210' , 'asp211' ] #NEWLINE#
datetime . strptime ( '2012-02-10' , '%Y-%m-%d' ) #NEWLINE#
plt . show ( ) #NEWLINE#
regexRef = re . compile ( '\\w' , re . UNICODE ) #NEWLINE#
array ( [ [ 0 ] , [ 7 ] , [ 1 ] , [ 0 ] , [ 4 ] , [ 0 ] , [ 0 ] , [ 0 ] , [ 0 ] , [ 1 ] , [ 0 ] , [ 0 ] , [ 0 ] ] ) #NEWLINE#
out = mat [ 0 ] * ( len ( ixs ) - len ( nzidx ) ) + mat [ ixs [ nzidx ] ] . sum ( axis = 0 ) #NEWLINE#
return [ str [ start : start + num ] for start in range ( 0 , len ( str ) , num ) ] #NEWLINE#
np . asarray ( V ) . min ( 0 ) #NEWLINE#
dtype ( [ ( 'x' , '<i8' ) , ( 'y' , 'S' ) ] ) #NEWLINE#
base = df . index . get_loc ( 18 ) #NEWLINE#
[ [ 0 , 0 ] , [ 1 , 1 ] ] #NEWLINE#
df . groupby ( 'GRP' ) . agg ( f ) #NEWLINE#
re . split ( '[\\n\\r]+' , line ) #NEWLINE#
ax2 . set_xlim ( [ 0 , 5 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
MY_SORTED_TUPLE = tuple ( sorted ( MY_TUPLE , key = lambda item : item [ 1 ] ) ) #NEWLINE#
plt . subplot ( 2 , 1 , 2 ) #NEWLINE#
x = dict ( zip ( list ( range ( 0 , 10 ) ) , itertools . repeat ( 0 ) ) ) #NEWLINE#
list ( item [ 1 ] for item in pkgutil . iter_modules ( ) ) #NEWLINE#
datetime . datetime . date ( 2011 , 1 , 1 ) #NEWLINE#
i , = np . where ( a == value ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
df . groupby ( 'a' ) [ 'b' ] . apply ( list ) #NEWLINE#
b = numpy . append ( a , numpy . zeros ( [ len ( a ) , 1 ] ) , 1 ) #NEWLINE#
self . assertEqual ( output , 'hello#SPACE#world!' ) #NEWLINE#
cProfile . runctx ( 'Your#SPACE#code#SPACE#here' , globals ( ) , locals ( ) , 'output_file' ) #NEWLINE#
A [ np . random . choice ( A . shape [ 0 ] , num_rows_2_sample ) ] #NEWLINE#
fig , ax = plt . subplots ( figsize = ( 6 , 1 ) ) #NEWLINE#
pil_im . show ( ) #NEWLINE#
mlab . show ( ) #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
pd . concat ( [ s1 , s2 ] , axis = 1 ) #NEWLINE#
file . write ( str ( m ) ) #NEWLINE#
'87' , 'e9' , 'b1' , 'a4' , '0a' , '92' , '9a' , 'b6' , '13' , '56' , '65' , 'c2' #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
subprocess . call ( [ 'wget' , 'your' , 'parameters' , 'here' ] ) #NEWLINE#
Activity . objects . filter ( list__topic = my_topic ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
sys . stdout . write ( '\x1b[K' ) #NEWLINE#
array ( [ 53.9 , 80.85 , 111.72 , 52.92 , 126.91 ] ) #NEWLINE#
request . headers . get ( 'User-Agent' ) #NEWLINE#
np . <VAR0> . reduce ( ( x , y , z ) ) #NEWLINE#
writer . writerow ( [ item ] ) #NEWLINE#
display_axes . set_rlim ( [ - 1 , 1 ] ) #NEWLINE#
xl . Workbooks . Open ( 'C:\\Foo\\Bar.xlsx' ) #NEWLINE#
plt . rcParams [ 'patch.edgecolor' ] = 'white' #NEWLINE#
print ( text . encode ( ) . decode ( 'unicode-escape' ) ) #NEWLINE#
print ( 'Valid' if re . match ( '^[a-zA-Z0-9_]*$' , word ) else 'Invalid' ) #NEWLINE#
print ( soup . find ( 'div' , { 'id' : 'resultStats' } ) . text ) #NEWLINE#
print ( rawstr ( test7 ) ) #NEWLINE#
{ { settings . MY_SETTING_NAME } } #NEWLINE#
data . decode ( 'utf8' ) . encode ( 'latin1' ) . decode ( 'gb2312' ) #NEWLINE#
[ s . strip ( ) for s in data_string . splitlines ( ) ] #NEWLINE#
re . sub ( '[^0-9+._#SPACE#-]+' , '' , strs ) #NEWLINE#
fo . write ( fp . read ( ) ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#c1#SPACE#FROM#SPACE#t1#SPACE#WHERE#SPACE#c1#SPACE#REGEXP#SPACE#?' , [ SEARCH_TERM ] ) #NEWLINE#
sess . run ( assign_op ) #NEWLINE#
ts . reindex ( pd . date_range ( min ( date_index ) , max ( date_index ) ) ) #NEWLINE#
bbox_data = ax . transData . inverted ( ) . transform ( bbox ) #NEWLINE#
df1 . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] ) #NEWLINE#
print ( alphs [ : i ] + alphs [ i : : - 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ dict ( zip ( d , v ) ) for v in product ( * list ( d . values ( ) ) ) ] #NEWLINE#
self . text . pack ( ) #NEWLINE#
a = numpy . frombuffer ( buffer , float ) #NEWLINE#
mylist = list ( set ( mylist ) ) #NEWLINE#
letters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' ] #NEWLINE#
print ( sorted ( list ( a . items ( ) ) , key = lambda t : get_key ( t [ 0 ] ) ) ) #NEWLINE#
map ( lambda x : func ( * x ) , [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
min ( s . find ( i ) if i in s else None for i in a ) #NEWLINE#
print ( re . findall ( '\\[([^]]*)\\]' , s ) ) #NEWLINE#
np . linalg . eigvals ( df . apply ( pd . to_numeric , errors = 'coerce' ) . fillna ( 0 ) ) #NEWLINE#
np . in1d ( a , b ) . reshape ( a . shape ) . any ( axis = 1 ) #NEWLINE#
self . assertEqual ( my_patch_method , patch_my_lib ( ) . target_method . __func__ ) #NEWLINE#
sys . stdout . write ( '\r' ) #NEWLINE#

[ ( 1 , 2 , 3 ) , ( 1 , 2 , 3 ) ] #NEWLINE#
run ( 'ls' ) #NEWLINE#
list ( dict ( ( v [ 'id' ] , v ) for v in L ) . values ( ) ) #NEWLINE#
mySubList = [ dict ( ( k , v ) for k , v in myDict . items ( ) if v . field2 >= 2 ) ] #NEWLINE#
del my_dict [ k ] #NEWLINE#
plt . show ( ) #NEWLINE#
squared = [ ( x ** 2 ) for x in lst ] #NEWLINE#
webbrowser . open ( 'http://xkcd.com/353/' ) #NEWLINE#
sys . stdout = codecs . getwriter ( 'utf-8' ) ( sys . stdout ) #NEWLINE#
"""12344""" . zfill ( 10 ) #NEWLINE#
threading . Thread ( target = play1 ) . start ( ) #NEWLINE#
[ 'X' , 'B2' , 'B11' , 'B22' , 'B' , 'B1' , 'B21' , 'C' , 'Q1' , 'C11' , 'C2' ] #NEWLINE#
print ( '#SPACE#' . join ( [ str ( i ) for i in a ] ) ) #NEWLINE#
x = np . random . rand ( 5 , 1 ) #NEWLINE#
print ( ( 'NOTEBOOK_FULL_PATH:\n' , NOTEBOOK_FULL_PATH ) ) #NEWLINE#
driver . get ( 'http://whatismyip.com' ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . path . sep #NEWLINE#
csv_writer . writerows ( cursor ) #NEWLINE#
app . run ( ) #NEWLINE#
genfromtxt ( 'missing1.dat' , delimiter = ',' ) #NEWLINE#
df . groupby ( [ 'score' , 'type' ] ) . sum ( ) #NEWLINE#
df2 . reset_index ( drop = True ) #NEWLINE#
"""""" . join ( random . choices ( string . ascii_uppercase + string . digits , k = N ) ) #NEWLINE#
print ( lxml . etree . tostring ( order , pretty_print = True ) ) #NEWLINE#
globals ( ) #NEWLINE#
re . sub ( '[a-zA-Z]\\d,' , lambda x : x . group ( 0 ) [ 0 ] + '0' + x . group ( 0 ) [ 1 : ] , s ) #NEWLINE#
process = Popen ( [ 'mycmd' , 'myarg' ] , stdout = DEVNULL , stderr = DEVNULL ) #NEWLINE#
print ( max ( result , key = lambda a : a [ 1 ] ) ) #NEWLINE#
var1 , var2 = input ( 'enter#SPACE#two#SPACE#numbers:' ) . split ( '#SPACE#' ) #NEWLINE#
re . sub ( '(.{6})' , '\\1#' , str ) #NEWLINE#
eb = plt . errorbar ( x , y , yerr = 0.1 , fmt = '' , color = 'b' ) #NEWLINE#
regex2 = re . compile ( '.*({}).*' . format ( what2look4 ) ) #NEWLINE#
data [ : , - 3 : ] #NEWLINE#
df [ 'last_updated_time' ] = d . dt . strftime ( '%H:%M:%S' ) #NEWLINE#
urlpatterns = patterns ( 'kiosks.views' , url ( '^([\\w#SPACE#]+)/$' , 'dashboard' ) ) #NEWLINE#
df . plot ( kind = 'bar' , stacked = True , color = my_colors ) #NEWLINE#
all_data . append ( data ) #NEWLINE#
re . sub ( '\\s+' , '' , 'strip#SPACE#my#SPACE#spaces' ) #NEWLINE#
numpy . array ( [ 'hello' , 'world!' ] , dtype = object ) #NEWLINE#
[ 0 , 3 , 1 , 2 ] #NEWLINE#
matplotlib . pylab . show ( ) #NEWLINE#
print ( '\n' . join ( '' . join ( s ) for s in something ) ) #NEWLINE#
[ k for j in re . findall ( "(\\d)|'([^']*)'" , i ) for k in j if k ] #NEWLINE#
input_file . close ( ) #NEWLINE#
numpy . outer ( numpy . array ( [ 1 , 2 ] ) , numpy . array ( [ 3 , 4 ] ) ) #NEWLINE#
self . setWindowFlags ( PyQt4 . QtCore . Qt . WindowStaysOnTopHint ) #NEWLINE#
del L [ index ] #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
re . sub ( '(%)' , '\\g<1>\\g<1>' , original ) #NEWLINE#
super ( RaceModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
d = dict ( ( v [ 0 ] , v [ 1 : ] ) for v in arr ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
ALLOWED_HOSTS = [ '127.0.0.1' , '192.1.12.23' ] #NEWLINE#
urlparse . unquote ( 'It%27s%20me%21' ) #NEWLINE#
size = re . findall ( '\\d+(?:,\\d{3})*(?:\\.\\d+)?' , my_string ) #NEWLINE#
f = gzip . open ( filename , mode = 'rt' ) #NEWLINE#
return '' . join ( word ) #NEWLINE#
print ( lxml . etree . tostring ( tree ) ) #NEWLINE#
[ [ 1 , 2 ] , [ 2 ] , [ 2 , 2 , 3 ] , [ 1 , 2 , 3 ] ] #NEWLINE#
[ 1 , 3 , 5 , 11 , 15 , 22 ] #NEWLINE#
driver . send_keys ( Keys . CONTROL + 'Escape' ) #NEWLINE#
pygame . init ( ) #NEWLINE#
list ( d . values ( ) ) #NEWLINE#
[ item for item in lis if item [ 1 ] not in seen and not seen . add ( item [ 1 ] ) ] #NEWLINE#
any ( ( [ 1 , 2 ] == x ) . all ( ) for x in a ) #NEWLINE#
df1 . iloc [ : , ( df1 . columns . get_level_values ( 'A' ) == 1 ) ] #NEWLINE#
[ ( x + b [ i ] ) for i , x in enumerate ( a ) ] #NEWLINE#
[ ( tuple [ a ] , tuple [ a + 1 ] ) for a in range ( 0 , len ( tuple ) , 2 ) ] #NEWLINE#
np . array ( a ) . reshape ( - 1 , 100 ) [ : : 2 ] . ravel ( ) #NEWLINE#
df . index . values #NEWLINE#
x = '{}#SPACE#{}' . format ( * s ) #NEWLINE#
df . select ( '*' , ( df . age + 10 ) . alias ( 'agePlusTen' ) ) #NEWLINE#
s [ : : - 1 ] . replace ( '2' , 'x' , 1 ) [ : : - 1 ] #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , self ) #NEWLINE#
[ ( ( i // 2 ) ** 2 if i % 2 else i // 2 ) for i in range ( 2 , 20 ) ] #NEWLINE#
zip ( * ( [ iter ( l ) ] * 2 ) ) #NEWLINE#
os . kill ( os . getppid ( ) , signal . SIGHUP ) #NEWLINE#
MyModel . all ( ) . filter ( 'prop#SPACE#>=' , prefix ) . filter ( 'prop#SPACE#<' , prefix + '�' ) #NEWLINE#
len ( sum4 ) - np . count_nonzero ( sum4 ) #NEWLINE#
return gtk . gdk . pixbuf_new_from_array ( arr , gtk . gdk . COLORSPACE_RGB , 8 ) #NEWLINE#
[ ( x , y ) for x in [ 1 , 2 , 3 ] for y in [ 3 , 1 , 4 ] if x != y ] #NEWLINE#
eval ( '[1,2,3,4]' ) #NEWLINE#
x = sum ( data [ 'cond' ] == 1 ) #NEWLINE#
clr . AddReference ( 'MyDll' ) #NEWLINE#
print ( etree . tostring ( e , pretty_print = True ) ) #NEWLINE#
print ( equations ( ( x , y ) ) ) #NEWLINE#
print ( is_json ( '{"age":100#SPACE#}' ) ) #NEWLINE#
ham . __class__ . __name__ #NEWLINE#
return HttpResponse ( json . dumps ( locs ) , mimetype = 'application/json' ) #NEWLINE#
cv2 . imshow ( 'image' , im ) #NEWLINE#
re . findall ( '(\\d+|[a-zA-Z]+)' , '12fgsdfg234jhfq35rjg' ) #NEWLINE#
plt . title ( 'sunflower#SPACE#plot' ) #NEWLINE#
conn . execute ( 'insert#SPACE#into#SPACE#example#SPACE#values#SPACE#(?,#SPACE#?);' , ( 2 , 202 ) ) #NEWLINE#
ctypes . windll . WINMM . mciSendStringW ( 'set#SPACE#cdaudio#SPACE#door#SPACE#open' , None , 0 , None ) #NEWLINE#
os . kill ( 12765 , 0 ) #NEWLINE#
self . send_blob ( blob_info , save_as = 'my_file.txt' ) #NEWLINE#
composite_list . append ( [ '200' , '200' , '200' , '400' , 'bluellow' ] ) #NEWLINE#
return calendar . timegm ( dt . utctimetuple ( ) ) #NEWLINE#
df [ 'data' ] = df [ 'data' ] . apply ( clean_string_to_list ) #NEWLINE#
sum ( int ( i ) for i in data ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
[ [ [ flatten [ int ( i * 2 ) ] ] ] for i in range ( int ( len ( flatten ) / 2 ) ) ] #NEWLINE#
global_dict [ 'bar' ] = 'hello' #NEWLINE#
df = df . sort_values ( by = [ 'c1' , 'c2' ] , ascending = [ False , True ] ) #NEWLINE#
""""a\"""" #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' . join ( str ( port ) for port in ports ) ) #NEWLINE#
results = [ int ( i ) for i in results ] #NEWLINE#
raise NotImplementedError ( 'Subclasses#SPACE#should#SPACE#implement#SPACE#this!' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
return Response ( json_string ) #NEWLINE#
df2 [ df2 . Name == 'Joe' ] . T #NEWLINE#
return [ m . group ( 1 ) for m in ( re . search ( regex , l ) for l in lines ) if m ] #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
data_df [ 'grade' ] = pd . to_numeric ( data_df [ 'grade' ] ) . astype ( int ) #NEWLINE#
print ( sum ( sum ( map ( int , r . findall ( line ) ) ) for line in data ) ) #NEWLINE#
e . shape == ( 3 , 2 , 2 ) #NEWLINE#
[ x [ 1 ] for x in L ] #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
df . genres . apply ( pd . Series ) . stack ( ) . drop_duplicates ( ) . tolist ( ) #NEWLINE#
nms . dropna ( thresh = 2 ) #NEWLINE#
print ( '%s,#SPACE#%s' % ( row [ 'name' ] , row [ 'category' ] ) ) #NEWLINE#
admin . site . register ( Person , PersonAdmin ) #NEWLINE#
ax1 . set_xticklabels ( [ ] ) #NEWLINE#
result = copy . deepcopy ( source_dict ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x . replace ( y , dict [ y ] ) , dict , s ) #NEWLINE#
print ( df . loc [ 'one' ] ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
array ( [ [ 1 , 3 , 4 , 1 ] , [ 1 , 2 , 3 , 2 ] , [ 1 , 2 , 1 , 3 ] ] ) #NEWLINE#
np . all ( np . unique ( A [ [ 'idx1' , 'idx2' ] ] ) == np . unique ( B [ [ 'idx1' , 'idx2' ] ] ) ) #NEWLINE#
count = sum ( 1 for line in myfile if line . rstrip ( '\n' ) ) #NEWLINE#
[ ( [ 0.0 ] * 10 ) for _ in range ( 10 ) ] #NEWLINE#
a [ 1 , 1 ] #NEWLINE#
A [ np . arange ( 2 ) [ : , ( None ) ] , B ] #NEWLINE#
mydriver . find_element_by_xpath ( xpaths [ 'submitButton' ] ) . click ( ) #NEWLINE#
eliminated . append ( x ) #NEWLINE#
print ( etree . tostring ( x , pretty_print = True ) ) #NEWLINE#
emp . delete ( ) #NEWLINE#
[ myDictionary . get ( key ) for key in keys ] #NEWLINE#
os . system ( 'gpio#SPACE#write#SPACE#6#SPACE#0#SPACE#&&#SPACE#gpio#SPACE#write#SPACE#5#SPACE#1' ) #NEWLINE#
os . system ( 'gpio#SPACE#mode#SPACE#6#SPACE#out#SPACE#&&#SPACE#gpio#SPACE#mode#SPACE#5#SPACE#out' ) #NEWLINE#
myinst . __dict__ [ 'attr' ] #NEWLINE#
sys . stdout . write ( 'text' ) #NEWLINE#
urllib . parse . unquote ( url ) #NEWLINE#
max ( ( t for t in yourlist if t [ 2 ] >= 100 ) , key = itemgetter ( 1 ) ) #NEWLINE#
mystring . find ( 'subject' ) #NEWLINE#
super ( BaseModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
urllib . parse . unquote ( urllib . parse . unquote ( s ) ) #NEWLINE#
data = json . dumps ( { 'a' : 1 } ) #NEWLINE#
( df [ 0 ] - df [ 1 ] ) . apply ( lambda x : x . astype ( 'timedelta64[us]' ) ) #NEWLINE#
{ 'dict2' : { } } #NEWLINE#
app . exec_ ( ) #NEWLINE#
list ( sys . modules . keys ( ) ) #NEWLINE#
code . interact ( ) #NEWLINE#
range ( N , - 1 , - 1 ) #NEWLINE#
"""#SPACE#""" . join ( re . findall ( '[A-Z]?[^A-Z\\s]+|[A-Z]+' , vendor ) ) #NEWLINE#
ws . cell ( row = i + 2 , column = 1 ) . value = statN #NEWLINE#
a . sort ( key = lambda x : x . split ( '-' , 2 ) [ - 1 ] ) #NEWLINE#
w = Label ( root , text = 'Hello,#SPACE#world!' ) #NEWLINE#
[ 'Sheet1' , 'Sheet2' , 'Sheet3' ] #NEWLINE#
[ '231512-n' , '1209123100000-n' , 'alphanumeric' , 'alphanumeric' ] #NEWLINE#
plt . show ( ) #NEWLINE#
return '' . join ( parts ) #NEWLINE#
isinstance ( variable , States ) #NEWLINE#
a = a . reshape ( ( a . shape [ 0 ] , - 1 , n ) ) #NEWLINE#
driver . execute_script ( '%s' % js ) #NEWLINE#
procs . append ( multiprocessing . Process ( target = worker ) ) #NEWLINE#
setattr ( current_module , new_name , func ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
print ( df . to_latex ( index = None ) . replace ( 'lll' , 'rrr' ) ) #NEWLINE#
groupby ( a , [ 0 , 1 ] ) #NEWLINE#
list ( metadata . tables . keys ( ) ) #NEWLINE#
webbrowser . open_new_tab ( url ) #NEWLINE#
re . split ( '(?m)^\\s*$\\s*' , text ) #NEWLINE#
plt . show ( ) #NEWLINE#
cP . runctx ( 'a=foo()' , globals ( ) , locales ( ) ) #NEWLINE#
idx = ( df [ 'C' ] != 0 ) & ( df [ 'A' ] == 10 ) & ( df [ 'B' ] < 30 ) #NEWLINE#
a = [ 'cat' , 'dog' , 'mouse' ] #NEWLINE#
[ line for line in file if not line . startswith ( '#' ) ] #NEWLINE#
s . reset_index ( drop = True , inplace = True ) #NEWLINE#
df [ 'in' ] . groupby ( ( df [ 'in' ] != df [ 'in' ] . shift ( ) ) . cumsum ( ) ) . cumsum ( ) #NEWLINE#
xpath ( '//body//text()' ) . re ( '(\\w+)' ) #NEWLINE#
output . write ( '%s\t%s' % ( '#SPACE#' . join ( words [ : - 1 ] ) , words [ - 1 ] ) ) #NEWLINE#
relations = request . POST . getlist ( 'relations' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
dummy_df . loc [ : , ( ~ ( dummy_df == '0%' ) . all ( ) ) ] #NEWLINE#
logging . info ( __ ( 'date={}' , date ) ) #NEWLINE#
dict ( ( item [ 0 ] , ( item [ 1 ] , z [ item [ 0 ] ] ) ) for item in l ) #NEWLINE#
df [ 'c' ] = df [ 'b' ] . combine_first ( df [ 'a' ] ) #NEWLINE#
df . iloc [ [ 0 , 2 , 3 ] , [ 0 , 1 , 3 ] ] . mean ( axis = 0 ) #NEWLINE#
csv . reader ( upload_file , delimiter = ',' , quotechar = '"' ) #NEWLINE#
"""^\\s*[\\w_][\\w\\d_]*\\s*.*\\s*[\\w_][\\w\\d_]*\\s*\\(.*\\)\\s*$""" #NEWLINE#
cur . callproc ( 'my_stored_proc' , ( first_param , second_param , an_out_param ) ) #NEWLINE#
pd . crosstab ( df . A , df . B ) . apply ( lambda r : r / r . sum ( ) , axis = 1 ) #NEWLINE#
process . terminate ( ) #NEWLINE#
soup . body . insert ( len ( soup . body . contents ) , yourelement ) #NEWLINE#
savefig ( 'sample.pdf' ) #NEWLINE#
QtCore . SIGNAL ( 'finished(int)' ) #NEWLINE#
QtCore . SIGNAL ( 'finished(PyQt_PyObject)' ) #NEWLINE#
json . loads ( _ ) #NEWLINE#
sum ( os . path . getsize ( f ) for f in os . listdir ( '.' ) if os . path . isfile ( f ) ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
webbrowser . open_new ( 'file://c:\\test\\test.csv' ) #NEWLINE#
x . do_something ( ) #NEWLINE#
total = sum ( [ int ( i ) for i in cost ] ) #NEWLINE#
print ( map ( lambda key_value : int ( key_value [ 1 ] ) , list ( ss . items ( ) ) ) ) #NEWLINE#
df . drop ( [ 'TMP' ] , axis = 1 , inplace = True ) #NEWLINE#
round ( 3.1415 - int ( 3.1415 ) , 3 ) #NEWLINE#
writer . writerows ( all ) #NEWLINE#
random . shuffle ( lst ) #NEWLINE#
titlecase ( 'i#SPACE#am#SPACE#a#SPACE#foobar#SPACE#bazbar' ) #NEWLINE#
n ^= ( 1 << upper ) - 1 & ~ ( ( 1 << lower ) - 1 ) #NEWLINE#
my_series . sort ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( pd . merge ( df1 , df2 , on = 'B' ) [ 'B' ] ) #NEWLINE#
del myList [ i ] #NEWLINE#
session . commit ( ) #NEWLINE#
d = dict ( itertools . zip_longest ( * ( [ iter ( l ) ] * 2 ) , fillvalue = '' ) ) #NEWLINE#
max ( x , key = sum ) #NEWLINE#
a [ 'Z' ] [ 0 ] [ 'A' ] #NEWLINE#
[ ( x ** 2 ) for x in range ( 10 ) ] #NEWLINE#
stat . S_IMODE ( os . lstat ( 'file' ) . st_mode ) #NEWLINE#
dict ( [ x . split ( ':' ) for x in a ] ) #NEWLINE#
[ ast . literal_eval ( re . sub ( '\\b0+\\B' , '' , pixel ) ) for pixel in pixels ] #NEWLINE#
sum ( a * b for a , b in zip ( it , it ) ) #NEWLINE#
[ ( float ( i ) if '.' in i else int ( i ) ) for i in s ] #NEWLINE#
List = open ( 'filename.txt' ) . readlines ( ) #NEWLINE#
df . a = df . a / 2 #NEWLINE#
p . add_argument ( '--sizes' , type = pair , nargs = '+' ) #NEWLINE#
parser . parse_args ( ) #NEWLINE#
all ( dict . values ( ) ) #NEWLINE#
example2 ( ) #NEWLINE#
L = [ c for c in L if c not in [ 'a' , 'c' ] ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
x = [ v for i , v in enumerate ( x ) if i not in frozenset ( ( 2 , 3 , 4 , 5 ) ) ] #NEWLINE#
[ ( float ( c ) / t ) for c , t in zip ( conversions , trials ) ] #NEWLINE#
self . assertEqual ( 4 , 2 + 2 ) #NEWLINE#
antisort ( [ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) , ( 3 , 4 ) ] ) #NEWLINE#
user . save ( ) #NEWLINE#
window . after ( 1 , lambda : window . focus_force ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ i for i in my_list if all ( x not in i for x in [ '91' , '18' ] ) ] #NEWLINE#
struct . unpack ( '>Q' , str ) #NEWLINE#
[ list ( t ) for t in set ( tuple ( element ) for element in xx ) ] #NEWLINE#
socket . send ( '...nah' ) #NEWLINE#
rc ( 'text' , usetex = True ) #NEWLINE#
print ( et . tostring ( tree , pretty_print = True , xml_declaration = True ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
log = logging . getLogger ( __name__ ) #NEWLINE#
x = eval ( input ( 'My#SPACE#score#SPACE#is#SPACE#\x1b[s#SPACE##SPACE#of#SPACE#10\x1b[u' ) ) #NEWLINE#
"""#SPACE#""" . join ( item [ 0 ] for item in groupby ( s . split ( ) ) ) #NEWLINE#
re . findall ( '\\D(\\d{5})\\D' , s ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
df . index = pd . MultiIndex . from_tuples ( df . index . str . split ( '|' ) . tolist ( ) ) #NEWLINE#
help ( 'modules#SPACE#collections' ) #NEWLINE#
help ( 'collections' ) #NEWLINE#
np . cos ( - 1.5 ) #NEWLINE#
response = opener . open ( 'http://www.google.com/' ) #NEWLINE#
tom_index = next ( index for index , d in enumerate ( lst ) if d [ 'name' ] == 'Tom' ) #NEWLINE#
time . time ( ) * 1000 #NEWLINE#
re . sub ( '[AEIOU]+' , lambda m : m . group ( 0 ) . lower ( ) , 'SOME#SPACE#TEXT#SPACE#HERE' ) #NEWLINE#
ax2 . yaxis . tick_right ( ) #NEWLINE#
HTMLParser . HTMLParser ( ) . unescape ( 'Suzy#SPACE#&#SPACE#John' ) #NEWLINE#
ctypes . cast ( s , ctypes . c_void_p ) . value #NEWLINE#
df . ix [ pd . to_datetime ( df . Date ) . order ( ) . index ] #NEWLINE#
s . sendline ( 'ls#SPACE#-l' ) #NEWLINE#
sorted ( l , key = lambda x : ( x [ : - 1 ] , x [ - 1 ] . isdigit ( ) ) ) #NEWLINE#
print ( df . to_html ( float_format = lambda x : '%10.2f' % x ) ) #NEWLINE#
result = array [ : , ( idx ) ] #NEWLINE#
print ( os . path . join ( root , name ) ) #NEWLINE#
print ( re . findall ( '[一-\u9fff]+' , ipath ) ) #NEWLINE#
ax . plot ( x , y , label = 'a' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
f . write ( 'foo' ) #NEWLINE#
plot . savefig ( 'hanning' + str ( num ) + '.pdf' ) #NEWLINE#
return sum ( map ( int , str ( n ) ) ) #NEWLINE#
q . T . reshape ( - 1 , k , n ) . swapaxes ( 1 , 2 ) . reshape ( - 1 , k ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
result = [ float ( x . strip ( '#SPACE#"' ) ) for x in A1 ] #NEWLINE#
print ( wjdata [ 'data' ] [ 'current_condition' ] [ 0 ] [ 'temp_C' ] ) #NEWLINE#
df . filter ( regex = '^foo\\.' , axis = 1 ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
super ( ConcurrentModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
"""""" . join ( [ c for c in s if c . isupper ( ) ] ) #NEWLINE#
foo ( * i ) #NEWLINE#
cols_to_use = df2 . columns . difference ( df . columns ) #NEWLINE#
round ( math . degrees ( math . asin ( 0.5 ) ) , 2 ) #NEWLINE#
urlparse . urljoin ( '/media/' , 'js/foo.js' ) #NEWLINE#
min ( enumerate ( a ) , key = itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
print ( list ( sampleDict . values ( ) ) [ 0 ] . keys ( ) [ 0 ] ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
len ( [ 'DATE' , 'TIME' , 'DLAT' , 'DLON' , 'SLAT' , 'SLON' , 'SHGT' , 'HGT' , 'N' , 'E' ] ) #NEWLINE#
initgstreamer ( ) #NEWLINE#
time . sleep ( 4 ) #NEWLINE#
print ( '' . join ( L ) ) #NEWLINE#
tmp [ 'alpha' ] = 'bbb' #NEWLINE#
test_df . where ( ~ ( test_df < 4 ) ) #NEWLINE#
l = list ( map ( lambda x : 2 * x , l ) ) #NEWLINE#
df . groupby [ 'month' ] . Category . apply ( pd . value_counts ) #NEWLINE#
ax . plot_surface ( x , y , z , rstride = 10 , cstride = 10 , alpha = 0.3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
im . show ( ) #NEWLINE#
app . run ( ) #NEWLINE#
driver . execute_script ( "tinyMCE.activeEditor.setContent('%s')" % payload ) #NEWLINE#
myShelvedDict . update ( myDict ) #NEWLINE#
{ v : ( v ** 2 ) for v in l } #NEWLINE#
file . write ( 'first#SPACE#line\n' ) #NEWLINE#
im = Image . open ( tempimg ) #NEWLINE#
plt . show ( ) #NEWLINE#
bp = df . boxplot ( by = 'Group' ) #NEWLINE#
app . run ( ) #NEWLINE#
driver . get ( 'http://www.google.com/' ) #NEWLINE#
Lmerge = [ ( i1 + i2 ) for i1 , i2 in zip ( L1 , L2 ) ] #NEWLINE#
[ [ try_int ( x ) for x in lst ] for lst in list_of_lists ] #NEWLINE#
print ( 'Executing#SPACE#task#SPACE#{0}.' . format ( sys . argv [ 1 ] ) ) #NEWLINE#
subprocess . Popen ( executable , creationflags = DETACHED_PROCESS , close_fds = True ) #NEWLINE#
urllib . parse . urlencode ( { 'data' : { 'wifi' : { 'ssid' : 'guest' , 'rssi' : '80' } } } ) #NEWLINE#
output = '' . join ( item [ 0 ] . upper ( ) for item in re . findall ( '\\w+' , input ) ) #NEWLINE#
grouped = df . groupby ( level = 'DATE' ) #NEWLINE#
l = [ 'foo' , 'bar' , 'buz' ] #NEWLINE#
app . run ( ) #NEWLINE#
np . array ( my_list , dtype = np . float ) #NEWLINE#
fig . savefig ( 'asdf.png' ) #NEWLINE#
{ { request . session . foo } } #NEWLINE#
driver . quit ( ) #NEWLINE#
result [ 'streams' ] #NEWLINE#
plt . show ( ) #NEWLINE#
n . index ( min ( n ) ) #NEWLINE#
numpy . genfromtxt ( 'test.txt' , skip_footer = 2 ) #NEWLINE#
t . start ( ) #NEWLINE#
a = open ( 'output.txt' , 'a' ) #NEWLINE#
ind = [ i for i in range ( len ( yVar ) ) if yVar [ i ] < 100 ] #NEWLINE#
x = [ ( 0 ) for i in range ( 10 ) ] #NEWLINE#
file_handle . close ( ) #NEWLINE#
str = re . sub ( ',(?=[^"]*"[^"]*$)' , '@' , str ) #NEWLINE#
word = '*' * len ( name ) #NEWLINE#
a . __setitem__ ( slice ( 0 , 1 ) , [ 1 ] ) #NEWLINE#
[ data [ i : i + n ] for i in range ( 0 , len ( data ) , n ) ] #NEWLINE#
np . array ( [ ( labels == i ) . astype ( np . float32 ) for i in np . arange ( 3 ) ] ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
{ { value | markdown | linebreaksbr } } #NEWLINE#
proc . stdin . write ( 'message2' ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
matchObj = re . search ( '^(?!OK|\\.).*' , item ) #NEWLINE#
urllib . parse . urlencode ( { 'vote' : [ 'Better' , 'Faster' , 'Stronger' ] } , True ) #NEWLINE#
[ elem . encode ( 'hex' ) for elem in str ] #NEWLINE#
print ( '%+d' % score ) #NEWLINE#
return render_to_response ( 'your_template.html' , { 'h' : h } ) #NEWLINE#
return bool ( coll ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
a . take ( np . arange ( start , end ) , axis = axis ) #NEWLINE#
vet = [ random . randint ( 1 , 10 ) for _ in range ( 100000 ) ] #NEWLINE#
plt . xticks ( ticks , labels ) #NEWLINE#
return render ( request , 'template.html' , status = 204 ) #NEWLINE#
return sum ( map ( float , s . split ( ) ) ) #NEWLINE#
from module import * #NEWLINE#
print ( ( '+' . join ( str ( i ) for i in n_nx1lst ) + '#SPACE#=#SPACE#' , sum ( n_nx1lst ) ) ) #NEWLINE#
frame . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
s = '{0:,}' . format ( n ) #NEWLINE#
print ( ET . tostring ( newdom , pretty_print = True ) ) #NEWLINE#
array ( [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 ] ) #NEWLINE#
'This#SPACE#is#SPACE#a#SPACE#string:#SPACE#%s' % 'abc' #NEWLINE#
f . set_size_inches ( 11.69 , 8.27 ) #NEWLINE#
print ( re . sub ( '(</?\\w+>)' , lambda up : up . group ( 1 ) . upper ( ) , '<tag>input</tag>' ) ) #NEWLINE#
x1 , y1 , a1 , b1 , x2 , y2 = ( int ( eval ( input ( ) ) ) for _ in range ( 6 ) ) #NEWLINE#
Decimal ( '33.505' ) . quantize ( Decimal ( '0.01' ) ) #NEWLINE#
df . _get_numeric_data ( ) #NEWLINE#
circle1 . set_visible ( False ) #NEWLINE#
requests . get ( url , headers = headers ) #NEWLINE#
plt . imsave ( 'girl_2.png' , img_a ) #NEWLINE#
aapl = aapl . asfreq ( 'B' , method = 'ffill' ) #NEWLINE#
ast . literal_eval ( a ) #NEWLINE#
logging . getLogger ( ) . handlers [ 0 ] . setLevel ( logging . DEBUG ) #NEWLINE#
struct . pack ( '>I' , 1 ) #NEWLINE#
pyplot . draw ( ) #NEWLINE#
[ [ 'scorch' , 'scorching' ] , [ 'dump' , 'dumpster' , 'dumpsters' ] ] #NEWLINE#
df . iloc [ : , ( your_col_index ) ] #NEWLINE#
coautorshipDictionary = { int ( k ) : int ( v ) for k , v in json . load ( json_data ) } #NEWLINE#
plt . show ( ) #NEWLINE#
"""https://gdata.youtube.com/feeds/api/videos/{video_id}/comments?start-index={sta‌​rt_index}&max-results={max_results}""" #NEWLINE#
myEntry . config ( show = '*' ) #NEWLINE#
"""{:.20f}""" . format ( a ) #NEWLINE#
items = [ some ( a . split ( ) , d , n ) for a , d , n in ( list ( m . values ( ) ) for m in dl ) ] #NEWLINE#
urljoin ( 'some' , 'thing' ) #NEWLINE#
urljoin ( 'http://some' , 'thing' ) #NEWLINE#
self . text . pack ( side = 'right' , fill = 'both' , expand = True ) #NEWLINE#
print ( re . findall ( '[一-\u9fff]+' , ipath . decode ( 'utf-8' ) ) ) #NEWLINE#
isinstance ( now , datetime . datetime ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#qSQL#SPACE#FROM#SPACE#TBLTEST#SPACE#WHERE#SPACE#id#SPACE#=#SPACE#4' ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
Person . objects . filter ( id__in = ids ) . values ( 'name' , 'age' ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
TIME_ZONE = 'Asia/Kolkata' #NEWLINE#
dict_symmetric_difference ( { 'a' : 1 , 'b' : 2 } , { 'b' : 2 , 'c' : 3 } ) #NEWLINE#
np . repeat ( np . arange ( x ) , y ) #NEWLINE#
df1 . ix [ 0 , 1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
x = { '0' : [ ] , '2' : [ ] , '16' : [ ] } #NEWLINE#
print ( [ 1 , 2 , 3 ] ) #NEWLINE#
a_lower = { k . lower ( ) : v for k , v in list ( a . items ( ) ) } #NEWLINE#
your_list = map ( int , your_string ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'arg1' : [ '1' , '4' ] , 'arg2' : [ 'foobar' ] } #NEWLINE#
print ( [ var for var in list ( globals ( ) . keys ( ) ) if '__' not in var ] ) #NEWLINE#
[ list ( g ) for k , g in itertools . groupby ( sorted ( iterable ) ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
nx . dijkstra_path ( g , 'b' , 'b' , 'distance' ) #NEWLINE#
return cv2 . findContours ( img , cv2 . RETR_EXTERNAL , cv2 . CHAIN_APPROX_SIMPLE ) #NEWLINE#
salesdata . loc [ ~ salesdata . Outlet_Size . isnull ( ) , 'Outlet_Size' ] . unique ( ) #NEWLINE#
User . objects . filter ( active = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
system ( 'cmd.exe#SPACE#/c#SPACE#echo#SPACE#Hello#SPACE#World#SPACE#>#SPACE#test.txt' ) #NEWLINE#
s = date . strftime ( '%Y%m%d' ) #NEWLINE#
[ key for key , val in list ( dct . items ( ) ) if val == True ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
data = np . concatenate ( ( im , indices ) , axis = - 1 ) #NEWLINE#
mimetypes . init ( ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
random . randrange ( 1 , 10 ) #NEWLINE#
btn5 . grid ( row = 1 , column = 2 , columnspan = 1 , sticky = 'EWNS' ) #NEWLINE#
keyring . set_password ( 'system' , 'username' , 'password' ) #NEWLINE#
print ( myunicode . encode ( 'utf-8' ) ) #NEWLINE#
numpy . histogram ( a , bins = ( 25 , 100 ) ) #NEWLINE#
my_list = my_list [ : 8 ] + new_array #NEWLINE#
dictionary [ key ] = value #NEWLINE#
reg = re . compile ( '.*?(\\(?\\d{3}\\D{0,3}\\d{3}\\D{0,3}\\d{4}).*?' , re . S ) #NEWLINE#
time . sleep ( interval ) #NEWLINE#
app . run ( ) #NEWLINE#
print ( '#SPACE#' . join ( [ s . split ( ) [ - 1 ] ] + s . split ( ) [ : - 1 ] ) ) #NEWLINE#
df . resample ( '30Min' ) . dropna ( ) #NEWLINE#
print ( list ( range ( 0 , ( m + 1 ) * n , n ) ) [ 1 : ] ) #NEWLINE#
a . view ( 'U1' ) . reshape ( 4 , - 1 ) [ : , 1 : 3 ] . copy ( ) . view ( 'U2' ) #NEWLINE#
print ( list ( itertools . product ( * itertools . repeat ( ( False , True ) , 3 ) ) ) ) #NEWLINE#
pd . to_numeric ( s , errors = 'ignore' ) #NEWLINE#
df . columns = [ strip_non_ascii ( x ) for x in df . columns ] #NEWLINE#
a_order , a_sorted = zip ( * sorted ( enumerate ( a ) , key = lambda item : item [ 1 ] ) ) #NEWLINE#
L . grid ( row = 6 , column = 0 ) #NEWLINE#
zipfile . writestr ( zipinfo , '' ) #NEWLINE#
all_descendants = list ( elem . iter ( ) ) #NEWLINE#
print ( '\x1b[31m"red"\x1b[0m' ) #NEWLINE#
[ '1.0.0' , '1.0.2' , '1.0.12' , '1.1.2' , '1.3.3' ] #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
print ( 'Marked#SPACE#-#SPACE#%s\r\nUnmarked#SPACE#-#SPACE#%s' % ( '#SPACE#' . join ( marked ) , '#SPACE#' . join ( unmarked ) ) ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#mytable#SPACE#SET#SPACE#name#SPACE#=#SPACE#%s' , ( name , ) ) #NEWLINE#
mc = MyClass ( ) #NEWLINE#
sorted ( A , key = operator . itemgetter ( 2 , 0 , 1 ) ) #NEWLINE#
line . strip ( ) == '' #NEWLINE#
df = pd . concat ( [ df , s1 , s2 ] , axis = 1 ) . reset_index ( drop = True ) #NEWLINE#
wildcards = ',' . join ( [ '%s' ] * len ( frame . columns ) ) #NEWLINE#
session . query ( func . myThingFunction ( 'bar' ) ) . all ( ) #NEWLINE#
db_table = 'schema"."tablename' #NEWLINE#
[ [ int ( j ) for j in i ] for i in a ] #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , #NEWLINE#
myRoundedList = [ round ( elem , 2 ) for elem in myList ] #NEWLINE#
db . commit ( ) #NEWLINE#
gb = df2 . groupby ( 'Name' ) #NEWLINE#
"""{:.2E}""" . format ( Decimal ( '40800000000.00000000000000' ) ) #NEWLINE#
