sum ( d * 10 ** i for i , d in enumerate ( x [ : : - 1 ] ) ) #NEWLINE#
r = int ( '' . join ( map ( str , x ) ) ) #NEWLINE#
datetime . strptime ( '2010-11-13#SPACE#10:33:54.227806' , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
[ ( i , sum ( j ) / len ( j ) ) for i , j in list ( d . items ( ) ) ] #NEWLINE#
zip ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
[ 'hello{0}' . format ( i ) for i in a ] #NEWLINE#
re . sub ( '(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)' , '\\1' , s ) #NEWLINE#
df . div ( df . sum ( axis = 1 ) , axis = 0 ) #NEWLINE#
map ( lambda t : ( t [ 1 ] , t [ 0 ] ) , mylist ) #NEWLINE#
[ ( t [ 1 ] , t [ 0 ] ) for t in mylist ] #NEWLINE#
driver . find_element_by_xpath ( "//p[@id,#SPACE#'one']/following-sibling::p" ) #NEWLINE#
re . findall ( '\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+' , strs ) #NEWLINE#
print ( list ( itertools . combinations ( { 1 , 2 , 3 , 4 } , 3 ) ) ) #NEWLINE#
df [ [ 'hour' , 'weekday' , 'weeknum' ] ] = df . apply ( lambdafunc , axis = 1 ) #NEWLINE#
soup . find_all ( 'a' , string = 'Elsie' ) #NEWLINE#
my_datetime . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
int ( '' . join ( c for c in s if c . isdigit ( ) ) ) #NEWLINE#
dic [ 'Test' ] . update ( { 'class' : { 'section' : 5 } } ) #NEWLINE#
dict ( map ( int , x . split ( ':' ) ) for x in s . split ( ',' ) ) #NEWLINE#
driver . find_element_by_xpath ( "//div[@id='a']//a[@class='click']" ) #NEWLINE#
np . where ( ( vals == ( 0 , 1 ) ) . all ( axis = 1 ) ) #NEWLINE#
SomeModel . objects . filter ( id = id ) . delete ( ) #NEWLINE#
dict ( [ [ 'two' , 2 ] , [ 'one' , 1 ] ] ) #NEWLINE#
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ) #NEWLINE#
GRAVITY = 9.8 #NEWLINE#
re . findall ( '(([0-9]+)([A-Z]))' , '20M10000N80M' ) #NEWLINE#
re . findall ( '([0-9]+|[A-Z])' , '20M10000N80M' ) #NEWLINE#
re . findall ( '([0-9]+)([A-Z])' , '20M10000N80M' ) #NEWLINE#
re . compile ( '\\w+' ) . findall ( 'Hello#SPACE#world,#SPACE#my#SPACE#name#SPACE#is...James#SPACE#the#SPACE#2nd!' ) #NEWLINE#
datetime . datetime . strptime ( '03:55' , '%H:%M' ) . time ( ) #NEWLINE#
requests . get ( 'https://www.reporo.com/' , verify = False ) #NEWLINE#
a [ a != 0 ] #NEWLINE#
new_dict = { k : v for k , v in zip ( keys , values ) } #NEWLINE#
dict ( ( k , v ) for k , v in zip ( keys , values ) ) #NEWLINE#
dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] ) #NEWLINE#
m = re . search ( '\\[(\\w+)\\]' , s ) #NEWLINE#
s . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) #NEWLINE#
list3 = [ ( a + b ) for a , b in zip ( list1 , list2 ) ] #NEWLINE#
[ ord ( c ) for c in s . decode ( 'hex' ) ] #NEWLINE#
print ( sorted ( student_tuples , key = lambda t : ( - t [ 2 ] , t [ 0 ] ) ) ) #NEWLINE#
[ y for x in range ( 3 ) for y in [ x , x ] ] #NEWLINE#
txt = open ( 'file.txt' ) . read ( ) #NEWLINE#
myList [ : ] = [ ( x / myInt ) for x in myList ] #NEWLINE#
"""Name:#SPACE#{0[person.name]}""" . format ( { 'person.name' : 'Joe' } ) #NEWLINE#
df . replace ( '#SPACE#' , '_' , regex = True ) #NEWLINE#
datetime . datetime . combine ( my_date , datetime . time . min ) #NEWLINE#
tst2 = str ( tst ) #NEWLINE#
time . ctime ( os . path . getmtime ( file ) ) #NEWLINE#
time . ctime ( os . path . getctime ( file ) ) #NEWLINE#
t = os . path . getmtime ( filename ) #NEWLINE#
os . path . getmtime ( path ) #NEWLINE#
print ( 'last#SPACE#modified:#SPACE#%s' % time . ctime ( os . path . getmtime ( file ) ) ) #NEWLINE#
print ( 'created:#SPACE#%s' % time . ctime ( os . path . getctime ( file ) ) ) #NEWLINE#
return os . path . getctime ( path_to_file ) #NEWLINE#
os . system ( 'TASKKILL#SPACE#/F#SPACE#/IM#SPACE#firefox.exe' ) #NEWLINE#
return ( x . group ( 0 ) for x in re . finditer ( "[A-Za-z']+" , string ) ) #NEWLINE#
""",#SPACE#""" . join ( [ '%.2f' ] * len ( x ) ) #NEWLINE#
print ( re . match ( '(\\d+(\\.\\d+)?)' , '3434.35353' ) . group ( 1 ) ) #NEWLINE#
df [ 'name' ] . str . replace ( '\\(.*\\)' , '' ) #NEWLINE#
result = [ x for x in list_a if x [ 0 ] in list_b ] #NEWLINE#
print ( [ '' . join ( a ) for a in combinations ( [ 'hel' , 'lo' , 'bye' ] , 2 ) ] ) #NEWLINE#
[ x for x in li if 'ar' in x [ 2 ] ] #NEWLINE#
unsorted_list . sort ( key = lambda x : x [ 3 ] ) #NEWLINE#
logging . info ( 'test' ) #NEWLINE#
fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
sorted ( list ( x . items ( ) ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
sorted ( dict1 , key = dict1 . get ) #NEWLINE#
sorted ( d , key = d . get , reverse = True ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
np . einsum ( 'ijk,ikl->ijl' , A , B ) #NEWLINE#
print ( 'I#SPACE#have:#SPACE#{0.price}' . format ( card ) ) #NEWLINE#
f . write ( '##SPACE#Data#SPACE#for#SPACE#Class#SPACE#A\n' ) #NEWLINE#
a = a [ - 1 : ] + a [ : - 1 ] #NEWLINE#
datetimevariable . strftime ( '%Y-%m-%d' ) #NEWLINE#
mixed . replace ( '\r\n' , '\n' ) . replace ( '\r' , '\n' ) #NEWLINE#
os . path . expanduser ( '~user' ) #NEWLINE#
T = [ L [ i ] for i in Idx ] #NEWLINE#
words = open ( 'myfile' ) . read ( ) . split ( ) #NEWLINE#
[ [ sum ( [ x [ 1 ] for x in i ] ) ] for i in data ] #NEWLINE#
[ sum ( [ x [ 1 ] for x in i ] ) for i in data ] #NEWLINE#
Article . objects . annotate ( like_count = Count ( 'likes' ) ) . order_by ( '-like_count' ) #NEWLINE#
today = datetime . datetime . utcnow ( ) . date ( ) #NEWLINE#
[ ( a * b ) for a , b in zip ( lista , listb ) ] #NEWLINE#
re . findall ( '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' , s ) #NEWLINE#
re . match ( '[:;][)(](?![)(])' , str ) #NEWLINE#
json_string = json . dumps ( [ ob . __dict__ for ob in list_name ] ) #NEWLINE#
listofzeros = [ 0 ] * n #NEWLINE#
stringnamehere . decode ( 'utf-8' , 'ignore' ) #NEWLINE#
re . findall ( '((?:A|B|C)D)' , 'BDE' ) #NEWLINE#
dic . setdefault ( key , [ ] ) . append ( value ) #NEWLINE#
a [ np . argmin ( a [ : , ( 1 ) ] ) ] #NEWLINE#
a . update ( b ) #NEWLINE#
[ { k : v for k , v in d . items ( ) if k != 'mykey1' } for d in mylist ] #NEWLINE#
[ dict ( ( k , v ) for k , v in d . items ( ) if k != 'mykey1' ) for d in mylist ] #NEWLINE#
numpy . random . random ( ( 3 , 3 ) ) #NEWLINE#
df [ 'C' ] = df [ 'A' ] + df [ 'B' ] #NEWLINE#
[ value for key , value in list ( programs . items ( ) ) if 'new#SPACE#york' in key . lower ( ) ] #NEWLINE#
sys . path . append ( '/path/to/main_folder' ) #NEWLINE#
re . findall ( '\\d+(?=[^[]+$)' , s ) #NEWLINE#
pickle . load ( open ( 'afile' , 'rb' ) ) #NEWLINE#
driver . find_element_by_xpath ( 'xpath' ) . click ( ) #NEWLINE#
ex . groupby ( level = 'A' ) . agg ( lambda x : x . index . get_level_values ( 1 ) . nunique ( ) ) #NEWLINE#
pd . concat ( map ( pd . DataFrame , iter ( d . values ( ) ) ) , keys = list ( d . keys ( ) ) ) . stack ( #NEWLINE# ) . unstack ( 0 ) #NEWLINE#
sum ( 1 for i , j in zip ( a , b ) if i != j ) #NEWLINE#
d = { ( a . lower ( ) , b ) : v for ( a , b ) , v in list ( d . items ( ) ) } #NEWLINE#
list_ . sort ( key = lambda x : [ x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] ] ) #NEWLINE#
s . strip ( ) #NEWLINE#
s = s . lstrip ( ) #NEWLINE#
s = s . rstrip ( ) #NEWLINE#
s = s . strip ( '#SPACE#\t\n\r' ) #NEWLINE#
print ( re . sub ( '[\\s+]' , '' , s ) ) #NEWLINE#
Task . objects . exclude ( prerequisites__status__in = [ 'A' , 'P' , 'F' ] ) #NEWLINE#
root . configure ( background = 'black' ) #NEWLINE#
numpy . array ( [ ( key , val ) for key , val in result . items ( ) ] , dtype ) #NEWLINE#
pd . concat ( [ df_1 , df_2 . sort_values ( 'y' ) ] ) #NEWLINE#
re . sub ( '(.*)</div>' , '\\1</bad>' , s ) #NEWLINE#
print ( max ( d , key = lambda x : ( d [ x ] [ 'salary' ] , d [ x ] [ 'bonus' ] ) ) ) #NEWLINE#
Book . objects . filter ( author__id = 1 ) . filter ( author__id = 2 ) #NEWLINE#
re . compile ( 'XYZ' , re . IGNORECASE ) . split ( 'fooxyzbar' ) #NEWLINE#
[ sum ( map ( int , s ) ) for s in example . split ( ) ] #NEWLINE#
[ i for i in y if y [ i ] == 1 ] #NEWLINE#
c . decode ( 'unicode_escape' ) #NEWLINE#
pd . melt ( x , id_vars = [ 'farm' , 'fruit' ] , var_name = 'year' , value_name = 'value' ) #NEWLINE#
default_data [ 'item3' ] = 3 #NEWLINE#
default_data . update ( { 'item3' : 3 } ) #NEWLINE#
default_data . update ( { 'item4' : 4 , 'item5' : 5 } ) #NEWLINE#
l [ : 3 ] + l [ - 3 : ] #NEWLINE#
df = df . reset_index ( drop = True ) #NEWLINE#
[ a [ x ] . append ( b [ x ] ) for x in range ( 3 ) ] #NEWLINE#
os . path . realpath ( path ) #NEWLINE#
set ( L [ 0 ] . f . items ( ) ) . issubset ( set ( a3 . f . items ( ) ) ) #NEWLINE#
zip ( * np . where ( a == 1 ) ) #NEWLINE#
np . where ( a == 1 ) #NEWLINE#
df . columns = df . columns . get_level_values ( 0 ) #NEWLINE#
x = scipy . matrix ( [ 1 , 2 , 3 ] ) . transpose ( ) #NEWLINE#
text = re . sub ( '(\\bget\\b)' , '\\1@' , text ) #NEWLINE#
np . array ( [ np . arange ( 3 ) , np . arange ( 2 , - 1 , - 1 ) , np . ones ( ( 3 , ) ) ] ) . min ( axis = 0 ) #NEWLINE#
df [ 'new_col' ] = list ( range ( 1 , len ( df ) + 1 ) ) #NEWLINE#
os . environ [ 'DEBUSSY' ] = '1' #NEWLINE#
print ( os . environ [ 'DEBUSSY' ] ) #NEWLINE#
os . environ [ 'DEBUSSY' ] = '1' #NEWLINE#
b . update ( d ) #NEWLINE#
df [ 'b' ] #NEWLINE#
ebar = plt . errorbar ( x , y , yerr = err , ecolor = 'y' ) #NEWLINE#
results += [ each for each in os . listdir ( folder ) if each . endswith ( '.c' ) ] #NEWLINE#
print ( 'Â£' . decode ( 'utf8' ) + '1' ) #NEWLINE#
re . sub ( '(?<=[a-z])([A-Z])' , '-\\1' , s ) . lower ( ) #NEWLINE#
os . system ( 'ulimit#SPACE#-s#SPACE#unlimited;#SPACE#some_executable' ) #NEWLINE#
"""{0:.3g}""" . format ( num ) #NEWLINE#
numpy . append ( a , a [ 0 ] ) #NEWLINE#
df . ix [ : , ( df . loc [ 0 ] == 38.15 ) ] . columns #NEWLINE#
df2 [ 'revenue' ] = df2 . CET . map ( df1 . set_index ( 'date' ) [ 'revenue' ] ) #NEWLINE#
json_data = json . loads ( json_string ) #NEWLINE#
math . cos ( math . radians ( 1 ) ) #NEWLINE#
sum ( isinstance ( x , int ) for x in a ) #NEWLINE#
"""used​""" . replace ( '\u200b' , '*' ) #NEWLINE#
threading . Thread ( target = SudsMove ) . start ( ) #NEWLINE#
sum ( i * i for i in l ) #NEWLINE#
sum ( map ( lambda x : x * x , l ) ) #NEWLINE#
d = dict ( ( key , value ) for key , value in iterable ) #NEWLINE#
d = { key : value for key , value in iterable } #NEWLINE#
d = { k : v for k , v in iterable } #NEWLINE#
df . round ( { 'Alabama_exp' : 2 , 'Credit_exp' : 3 } ) #NEWLINE#
p . setopt ( pycurl . WRITEFUNCTION , lambda x : None ) #NEWLINE#
print ( random . choice ( words ) ) #NEWLINE#
max ( d , key = lambda x : d [ x ] [ 'count' ] ) #NEWLINE#
[ ( int ( x ) if x else 0 ) for x in data . split ( ',' ) ] #NEWLINE#
""",""" . join ( x or '0' for x in s . split ( ',' ) ) #NEWLINE#
re . compile ( '$^' ) #NEWLINE#
re . compile ( '.\\A|.\\A*|.\\A+' ) #NEWLINE#
re . compile ( 'a^' ) #NEWLINE#
df . columns [ df . max ( ) > 0 ] #NEWLINE#
yourdatetime . date ( ) == datetime . today ( ) . date ( ) #NEWLINE#
print ( '\x1b[1m' + 'Hello' ) #NEWLINE#
re . sub ( '.{20}(.mkv)' , '\\1' , 'unique12345678901234567890.mkv' ) #NEWLINE#
[ 'a' , 'c' , 'b' , 'obj' ] #NEWLINE#
"""#SPACE#""" . join ( mystring . split ( ) ) #NEWLINE#
print ( '{:.100f}' . format ( 2.345e-67 ) ) #NEWLINE#
'key1' in dict #NEWLINE#
'a' in d #NEWLINE#
'c' in d #NEWLINE#
if 'key1' in dict : #NEWLINE# #INDENT# pass #NEWLINE#
if key in d : #NEWLINE# #INDENT# pass #NEWLINE#
Blog . objects . filter ( pk__in = [ 1 , 4 , 7 ] ) #NEWLINE#
f = open ( 'test/test.pdf' , 'rb' ) #NEWLINE#
format ( 12345678.46 , ',' ) . replace ( ',' , '#SPACE#' ) . replace ( '.' , ',' ) #NEWLINE#
pd . merge ( frame_1 , frame_2 , left_on = 'county_ID' , right_on = 'countyid' ) #NEWLINE#
np . isnan ( a ) . sum ( ) / np . prod ( a . shape ) #NEWLINE#
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 2 ] , reverse = True ) #NEWLINE#
sorted ( list ( u . items ( ) ) , key = lambda v : v [ 1 ] ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] , reverse = True ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] ) #NEWLINE#
f = open ( os . path . join ( __location__ , 'bundled-resource.jpg' ) ) #NEWLINE#
f = open ( 'words.txt' , 'rU' ) #NEWLINE#
{ k : ( float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 } #NEWLINE#
{ k : ( d2 [ k ] / d1 [ k ] ) for k in list ( d1 . keys ( ) ) & d2 } #NEWLINE#
dict ( ( k , float ( d2 [ k ] ) / d1 [ k ] ) for k in d2 ) #NEWLINE#
df . to_csv ( filename , date_format = '%Y%m%d' ) #NEWLINE#
my_dict . pop ( 'key' , None ) #NEWLINE#
b = np . where ( np . isnan ( a ) , 0 , a ) #NEWLINE#
subprocess . call ( 'start#SPACE#command#SPACE#-flags#SPACE#arguments' , shell = True ) #NEWLINE#
subprocess . call ( 'command#SPACE#-flags#SPACE#arguments#SPACE#&' , shell = True ) #NEWLINE#
f = urllib . request . urlopen ( url , urllib . parse . unquote ( urllib . parse . urlencode #NEWLINE# ( params ) ) ) #NEWLINE#
"""#SPACE##SPACE##SPACE##SPACE#xyz#SPACE##SPACE##SPACE##SPACE##SPACE#""" . rstrip ( ) #NEWLINE#
urllib . parse . quote ( s . encode ( 'utf-8' ) ) #NEWLINE#
urllib . parse . quote_plus ( 'a#SPACE#b' ) #NEWLINE#
np . array ( map ( int , '100110' ) ) #NEWLINE#
print ( np . array ( list ( mystr ) , dtype = int ) ) #NEWLINE#
img = cv2 . imread ( 'messi5.jpg' , 0 ) #NEWLINE#
lst . sort ( key = lambda x : x [ 2 ] , reverse = True ) #NEWLINE#
indices = [ i for i , x in enumerate ( my_list ) if x == 'whatever' ] #NEWLINE#
subprocess . call ( 'grep#SPACE#-r#SPACE#PASSED#SPACE#*.log#SPACE#|#SPACE#sort#SPACE#-u#SPACE#|#SPACE#wc#SPACE#-l' , shell = True ) #NEWLINE#
len ( my_text ) - len ( my_text . rstrip ( '?' ) ) #NEWLINE#
df [ df . columns [ 1 : ] ] . replace ( '[\\$,]' , '' , regex = True ) . astype ( float ) #NEWLINE#
df1 . merge ( df2 , how = 'left' , on = 'word' ) #NEWLINE#
print ( '' . join ( '' . join ( i ) for i in zip ( a2 , a1 ) ) + a [ - 1 ] if len ( a ) % 2 else '' ) #NEWLINE#
root . attributes ( '-topmost' , True ) #NEWLINE#
root . lift ( ) #NEWLINE#
hex ( int ( '' . join ( [ str ( int ( b ) ) for b in walls ] ) , 2 ) ) #NEWLINE#
hex ( sum ( b << i for i , b in enumerate ( reversed ( walls ) ) ) ) #NEWLINE#
print ( ( 'Total#SPACE#score#SPACE#for' , name , 'is' , score ) ) #NEWLINE#
print ( 'Total#SPACE#score#SPACE#for#SPACE#{}#SPACE#is#SPACE#{}' . format ( name , score ) ) #NEWLINE#
print ( 'Total#SPACE#score#SPACE#for#SPACE#%s#SPACE#is#SPACE#%s#SPACE##SPACE#' % ( name , score ) ) #NEWLINE#
print ( ( 'Total#SPACE#score#SPACE#for' , name , 'is' , score ) ) #NEWLINE#
url ( '^$' , TemplateView . as_view ( template_name = 'your_template.html' ) ) #NEWLINE#
df [ df [ 'A' ] . isin ( [ 3 , 6 ] ) ] #NEWLINE#
instance . __class__ . __name__ #NEWLINE#
system ( '/path/to/my/venv/bin/python#SPACE#myscript.py' ) #NEWLINE#
Employees . objects . values_list ( 'eng_name' , flat = True ) #NEWLINE#
re . findall ( '\\d|\\d,\\d\\)' , '6,7)' ) #NEWLINE#
input ( 'Press#SPACE#Enter#SPACE#to#SPACE#continue...' ) #NEWLINE#
"""ABC""" . encode ( 'hex' ) #NEWLINE#
db . Doc . update ( { '_id' : b [ '_id' ] } , { '$set' : { 'geolocCountry' : myGeolocCountry } } ) #NEWLINE#
re . sub ( 'l+' , 'l' , 'lollll' ) #NEWLINE#
rows = soup . findAll ( 'tr' ) [ 4 : : 5 ] #NEWLINE#
plt . gca ( ) . invert_xaxis ( ) #NEWLINE#
plt . gca ( ) . invert_yaxis ( ) #NEWLINE#
