mc . set_multi ( { 'key' : 'Hello' , 'another' : True } ) #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] , [ 13 , 14 ] ] #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 10 , 20 ] , [ 100 , 200 ] ] ) #NEWLINE#
print ( list ( itertools . combinations ( '123' , 2 ) ) ) #NEWLINE#
return set ( list1 ) . intersection ( list2 ) #NEWLINE#
olib . oshape ( 'b' ) #NEWLINE#
[ x for x in itertools . product ( lst , repeat = 3 ) if sum ( x ) == 0 ] #NEWLINE#
np . bincount ( accmap , weights = a ) #NEWLINE#
[ ( x , y ) for x in range ( 3 ) for y in range ( 2 ) ] #NEWLINE#
print ( '$%0.02f' % amount ) #NEWLINE#
isinstance ( d [ obj ] , list ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
self . canvas . pack ( fill = BOTH , expand = YES ) #NEWLINE#
[ i . partition ( '\t' ) [ - 1 ] for i in l ] #NEWLINE#
[ [ '1' , 'a' , '50' ] , [ '2' , 'b' , '70' ] , [ '3' , 'c' , '90' ] ] #NEWLINE#
ax . set_yticklabels ( labels , rotation = - 15 , va = 'center' , ha = 'left' ) #NEWLINE#
requests . post ( 'http://httpbin.org/post' , files = files ) #NEWLINE#
plt . show ( ) #NEWLINE#
line in ( '\n' , '\r\n' ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
verts = [ ( 0 ) for x in range ( 1000 ) ] #NEWLINE#
[ ( 1 ) for _ in range ( 6 ) ] #NEWLINE#
np . linalg . norm ( x ) #NEWLINE#
connection . connect ( ) #NEWLINE#
time . sleep ( 100 ) #NEWLINE#
changedTypedf = joindf . withColumn ( 'label' , joindf [ 'show' ] . cast ( 'double' ) ) #NEWLINE#
[ ( 1 , 2 , 2 ) , ( 5 , ) , ( 1 , 1 , 1 , 1 , 1 ) , ( 1 , 1 , 1 , 2 ) ] #NEWLINE#
print ( 'yes' if 0 < x < 0.5 else 'no' ) #NEWLINE#
sorted ( Author . objects . all ( ) , key = lambda a : a . full_name ) #NEWLINE#
jsonify ( eqtls = [ e . serialize ( ) for e in my_list_of_eqtls ] ) #NEWLINE#
sum ( len ( i ) for i in x if len ( i ) > 1 ) #NEWLINE#
[ [ k for k in x if x [ k ] != y [ k ] ] for x , y in pairs if x != y ] #NEWLINE#
print ( '\n' . join ( lst ) ) #NEWLINE#
admin . site . register ( Product , ProductAdmin ) #NEWLINE#
norm = [ ( float ( i ) / max ( raw ) ) for i in raw ] #NEWLINE#
df . iloc [ [ 2 , 4 ] ] #NEWLINE#
plt . savefig ( 'filename.png' , bbox_inches = 'tight' ) #NEWLINE#
next ( s for s in list_of_string if s ) #NEWLINE#
IMAP4 . search ( None , 'FLAGGED' ) #NEWLINE#
re . sub ( '\\\\{(\\d+)\\\\}' , '(?P<_\\1>.+)' , re . escape ( 'Version#SPACE#{0}.{1}.{2}' ) ) #NEWLINE#
print ( '%02d' % ( 1 , ) ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
myList = [ x for x in myList if myDict . get ( x [ 1 ] , None ) != x [ 0 ] ] #NEWLINE#
return [ x for x in mylist if x in pattern ] #NEWLINE#
fcntl . flock ( fd , fcntl . LOCK_EX ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x [ : ] for x in [ [ foo ] * 10 ] * 10 ] #NEWLINE#
np . insert ( b , list ( range ( n , len ( b ) , n ) ) , '\n' ) #NEWLINE#
os . getcwd ( ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
arr = arr [ : , : , 0 : : 2 ] #NEWLINE#
pylab . show ( block = True ) #NEWLINE#
df [ ( df . A == 0 ) & ( df . B == 2 ) & ( df . C == 6 ) & ( df . D == 0 ) ] #NEWLINE#
[ set ( i ) for i in OrderedDict . fromkeys ( frozenset ( item ) for item in L ) ] #NEWLINE#
re . sub ( '\nThis.*?ok' , '' , a , flags = re . DOTALL ) #NEWLINE#
filename = '%D7%91%D7%93%D7%99%D7%A7%D7%94.doc' #NEWLINE#
len ( re . findall ( '(a)(?=\\1)' , 'aaa' ) ) #NEWLINE#
d = { 'a' : 'None' } #NEWLINE#
MyModel2 . mymodel1 . through . objects . all ( ) #NEWLINE#
os . chdir ( os . path . dirname ( os . getcwd ( ) ) ) #NEWLINE#
StockRequest . objects . filter ( amount_requested__gt = F ( 'amount_approved' ) ) #NEWLINE#
_ . sum ( ) #NEWLINE#
df . groupby ( df . index . year ) #NEWLINE#
[ i for i in range ( 4 ) if i <= 1 or i >= 4 ] #NEWLINE#
a = [ [ ] ] * 3 #NEWLINE#
plt . show ( ) #NEWLINE#
[ l [ i : i + 2 ] for i in range ( 0 , len ( l ) , 2 ) ] #NEWLINE#
super ( TestStatus , self ) . __init__ ( ) #NEWLINE#
return '<html><body>' + '\n' + '<form#SPACE#enctype="multipart/form-data"#SPACE#action="' + graph_url + '#SPACE#"method="POST">' + '\n' + 'Say#SPACE#something:#SPACE#' + '\n' + '<input#SPACE#name="message"#SPACE#type="text"#SPACE#value=""><br/><br/>' + '\n' + '<input#SPACE#type="submit"#SPACE#value="Send"/><br/>' + '\n' + '</form>' + '\n' + '</body></html>' #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
new_foo = [ item for item in foo if item % 3 != 0 ] #NEWLINE#
app . run ( host = '127.0.0.1' , debug = False ) #NEWLINE#
"""asd0asd0""" . replace ( '0' , '' , 1 ) #NEWLINE#
df . mean ( axis = 1 ) #NEWLINE#
sorted ( a , key = lambda x : aux . index ( x [ 0 ] ) ) #NEWLINE#
np . where ( a == a . max ( ) ) #NEWLINE#
hasattr ( Dynamo , key ) and callable ( getattr ( Dynamo , key ) ) #NEWLINE#
[ 'the' , 'dogs' , 'barked' ] #NEWLINE#
plt . savefig ( 'result.png' , dpi = 300 ) #NEWLINE#
[ math . log10 ( i ) for i in x ] #NEWLINE#
Decimal ( '100' ) * Decimal ( '.56' ) #NEWLINE#
[ 7 , 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
do_something ( ) #NEWLINE#
raw_file = self . request . get ( 'field_name' ) #NEWLINE#
np . where ( condition ( zeta ) , func1 ( zeta ) , func2 ( zeta ) ) #NEWLINE#
numpy . array ( list ( result . items ( ) ) , dtype ) #NEWLINE#
background . paste ( fire , ( x , y ) , fire . convert ( 'RGBA' ) ) #NEWLINE#
a . mean ( axis = - 1 ) . mean ( axis = - 1 ) #NEWLINE#
number = request . POST . get ( 'number' , 0 ) #NEWLINE#
help ( 'BASICMETHODS' ) #NEWLINE#
help ( 'NUMBERMETHODS' ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
print ( groups . apply ( lambda g : g [ g [ 'B' ] == g [ 'B' ] . max ( ) ] ) ) #NEWLINE#
my_dict [ 'a' ] [ 'b' ] = 'c' #NEWLINE#
driver . find_element_by_css_selector ( 'span.hover' ) . click ( ) #NEWLINE#
sys . modules #NEWLINE#
plt . show ( ) #NEWLINE#
parent_id = Column ( Integer , ForeignKey ( 'parent.id' ) ) #NEWLINE#
np . argwhere ( arr ) #NEWLINE#
im = Image . open ( BytesIO ( base64 . b64decode ( data ) ) ) #NEWLINE#
print ( json . dumps ( json_output , indent = 4 ) ) #NEWLINE#
print ( a . pop ( 0 ) ) #NEWLINE#
super ( Child , self ) . my_method ( ) #NEWLINE#
super ( Child , self ) . __init__ ( ** kwargs ) #NEWLINE#
data = np . atleast_2d ( np . loadtxt ( filename ) ) #NEWLINE#
[ [ 'a' , 'b' , 'c' , 'd' ] , [ 'e' , 'f' , 'g' , 'h' ] , [ ] , [ ] ] #NEWLINE#
p = subprocess . Popen ( 'exec#SPACE#' + cmd , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
Employee . objects . active ( ) #NEWLINE#
ax . set_xlim ( 0 , 1 ) #NEWLINE#
my_dict . setdefault ( 1 , { } ) [ 2 ] = 3 #NEWLINE#
print ( '#SPACE#' . join ( [ string [ : 5 ] ] * 2 ) ) #NEWLINE#
os . system ( 'gpio#SPACE#write#SPACE#6#SPACE#1#SPACE#&&#SPACE#gpio#SPACE#write#SPACE#5#SPACE#0' ) #NEWLINE#
plt . savefig ( 'figure.pdf' ) #NEWLINE#
[ ( not x ) for x in some_list ] #NEWLINE#
print ( hex ( int ( string , base = 16 ) ) ) #NEWLINE#
df . dropna ( thresh = len ( df ) - 7 ) #NEWLINE#
from module import * #NEWLINE#
df . replace ( '\\s+' , '_' , regex = True , inplace = True ) #NEWLINE#
len ( [ phrase for phrase in nltk . Chunker ( sentence ) if phrase [ 1 ] == 'VP' ] ) #NEWLINE#
session . query ( Location , func . count ( Work . id ) ) . outerjoin ( Work ) . group_by ( Location ) #NEWLINE#
indices = [ i for i , x in enumerate ( myList ) if re . search ( pattern , x ) ] #NEWLINE#
cursor . execute ( sql , args ) #NEWLINE#
plt . show ( ) #NEWLINE#
numpy . float ( '1.5698D+03' ) #NEWLINE#
[ 'Spring#SPACE#2015' , 'Fall#SPACE#2014' , 'Spring#SPACE#2008' , 'Fall#SPACE#2008' ] #NEWLINE#
[ 'A' , 'B' , 'C' , 'B' , 'B' ] + [ 'D' , 'E' ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
root . geometry ( '600x450+300+300' ) #NEWLINE#
{ ( 2 ) : 3 , ( 3 ) : 1 , ( 4 ) : 1 } #NEWLINE#
subprocess . call ( [ '/bin/echo#SPACE#$HOME' ] , shell = True ) #NEWLINE#
plt . hist ( x , bins = n , range = ( a , b ) ) #NEWLINE#
fig . savefig ( 'aaa.png' ) #NEWLINE#
datetime . datetime . strptime ( '24052010' , '%d%m%Y' ) . date ( ) #NEWLINE#
print ( re . sub ( '\\s+(STREET|ST|TRAIL|TRL|TR)\\s*$' , '' , target , flags = re . M ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( x + 1 if x >= 45 else x + 5 ) for x in l ] #NEWLINE#
reactor . run ( ) #NEWLINE#
sub_df . iloc [ 0 ] [ 'A' ] #NEWLINE#
print ( list ( comb ( [ [ 1 , 2 , 3 ] , [ 3 , 6 , 8 ] , [ 4 , 9 ] , [ 6 , 11 ] ] ) ) ) #NEWLINE#
ret = pycb ( ) #NEWLINE#
list ( chain ( * ( i if isinstance ( i , tuple ) else ( i , ) for i in l ) ) ) #NEWLINE#
struct . unpack ( '>I' , '' . join ( [ chr ( x ) for x in response [ : - 1 ] ] ) ) #NEWLINE#
print ( chr ( 1081 ) ) #NEWLINE#
{ '11' : 1 , '12' : 2 , '21' : 1 , '22' : 2 , '31' : 1 , '32' : 2 } #NEWLINE#
print ( cursor . fetchall ( ) ) #NEWLINE#
crypthash . hexdigest ( ) #NEWLINE#
lst = [ 'He' , 'is' , 'so' , '' , 'cool' ] #NEWLINE# [ _f for _f in lst if _f ] #NEWLINE#
[ func ( x , y ) for x , y in zip ( xs , ys ) ] #NEWLINE#
dateutil . parser . parse ( '2013-02-26#SPACE#21:28:37.261134+01:00' ) #NEWLINE#
pygame . mixer . music . play ( ) #NEWLINE#
[ filterList ( numbers , ranges [ i ] , ranges [ i + 1 ] ) for i in range ( len ( ranges ) - 1 ) ] #NEWLINE#
meds [ i ] = meds [ i ] . replace ( '#SPACE#Cap(s)' , '#SPACE#1#SPACE#Cap(s)' ) #NEWLINE#
new_list = list ( '' . join ( my_list ) ) #NEWLINE#
index , value = max ( enumerate ( my_list ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
""",#SPACE#""" . join ( [ '1' , '2' , '3' ] ) #NEWLINE#
f . close ( ) #NEWLINE#
int ( value or 0 ) #NEWLINE#
sns . barplot ( x = 'timestamp' , y = 'result' , hue = 'objectId' , data = df ) #NEWLINE#
MyModel . objects . filter ( name__exact = models . F ( title ) ) . exists ( ) #NEWLINE#
{ { my_num | intcomma } } #NEWLINE#
infile = open ( '110331_HS1A_1_rtTA.result' , 'r' ) #NEWLINE#
my_variable , = my_function ( ) #NEWLINE#
map ( set , list ( d . values ( ) ) ) #NEWLINE#
list ( df . index . values ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . pivot_table ( 'Sales' , index = 'Fruit' , columns = [ 'Month' ] , aggfunc = 'sum' ) #NEWLINE#
file . write ( 'Spam#SPACE#and#SPACE#eggs!' ) #NEWLINE#
Author . objects . order_by ( 'first_name' , 'last_name' ) #NEWLINE#
pygame . display . set_caption ( 'Jumper' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
"""mARTINEAU""" #NEWLINE#
[ k for k , v in numbers . items ( ) if v == max ( numbers . values ( ) ) ] #NEWLINE#
f . write ( os . linesep . join ( data ) ) #NEWLINE#
df . groupby ( 'ID' ) . agg ( [ 'std' , 'mean' ] ) #NEWLINE#
dt = datetime . datetime . strptime ( new_dt , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
int ( '0x123' , 0 ) #NEWLINE#
dictionary [ new_key ] = dictionary . pop ( old_key ) #NEWLINE#
[ [ 1 , 2 , 6 ] , [ 1 , 3 , 10 ] , [ 1 , 4 , 7 ] , [ 1 , 4 , 8 ] , [ 1 , 2 , 5 , 9 ] , [ 1 , 2 , 5 , 10 ] ] #NEWLINE#
sys . path . insert ( 0 , '../' ) #NEWLINE#
regex . search ( '(?<letter>.)(?!.*?\\g<letter>)(?<!\\g<letter>.+?)' , 'tooth' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
results = soup . findAll ( 'td' , { 'valign' : 'top' } ) #NEWLINE#
[ i for i , ( m , n ) in enumerate ( zip ( bool_array [ : - 1 ] , bool_array [ 1 : ] ) ) if m != n ] #NEWLINE#
plt . show ( ) #NEWLINE#
lst = [ 'He' , 'is' , 'so' , '' , 'cool' ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
fh . close ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . figure ( ) #NEWLINE#
int ( re . sub ( '[^\\d-]+' , '' , your_string ) ) #NEWLINE#
msg = MIMEText ( 'â\x82¬10' . encode ( 'utf-8' ) , _charset = 'utf-8' ) #NEWLINE#
print ( ( key , value ) ) #NEWLINE#
return struct . unpack ( '!L' , packedIP ) [ 0 ] #NEWLINE#
re . compile ( '\\A\\Z|\\A\\Z*|\\A\\Z+' ) #NEWLINE#
sys . modules #NEWLINE#
root_app . mount ( '/admin/' , admin_app ) #NEWLINE#
lst [ 0 ] in lst [ 1 : ] #NEWLINE#
the_list . sort ( key = len , reverse = True ) #NEWLINE#
filtered_dict = { k : v for k , v in d . items ( ) if filter_string in k } #NEWLINE#
"""""" . join ( '{:02X}' . format ( a ) for a in numbers ) #NEWLINE#
"""""" . join ( new ) #NEWLINE#
print ( 'True' if mydict [ 'key' ] else 'False' ) #NEWLINE#
plt . show ( ) #NEWLINE#
str ( chr ( 97 ) ) #NEWLINE#
getattr ( somemodule , 'SomeClass' ) #NEWLINE#
os . environ [ 'GLOG_minloglevel' ] = '2' #NEWLINE#
myList . append ( i ) #NEWLINE#
globals ( ) [ name ] = 10 #NEWLINE#
[ 'a' , 'b' , 'c' , 'x' , 'd' , 'e' , 'f' , 'x' , 'g' , 'h' , 'i' , 'x' , 'j' ] #NEWLINE#
Model . __table__ . create ( session . bind ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
not any ( not isinstance ( y , int ) for y in [ 1 , 'a' , 2 , 3 ] ) #NEWLINE#
df . index = list ( range ( len ( df ) ) ) #NEWLINE#
giant = max ( nx . connected_component_subgraphs ( G ) , key = len ) #NEWLINE#
conn . commit ( ) #NEWLINE#
print ( np . sort ( np . partition ( x , - 10 ) [ - 10 : ] ) ) #NEWLINE#
d [ d [ 'name' ] == 'World' ] . tolist ( ) [ 0 ] #NEWLINE#
[ list ( group ) for k , group in groupby ( l , bool ) if k ] #NEWLINE#
data . to_json ( orient = 'records' ) #NEWLINE#
good_data = [ data [ ( n ) , : ] [ flag == 1 ] for n in range ( data . shape [ 0 ] ) ] #NEWLINE#
input ( ) #NEWLINE#
np . cumsum ( a ) #NEWLINE#
logging . getLogger ( 'foo' ) . setLevel ( logging . WARNING ) #NEWLINE#
datetime . datetime . now ( ) + datetime . timedelta ( days = 1 ) #NEWLINE#
[ l for l in a if l in b ] #NEWLINE#
df1 . loc [ ( df1 > s ) . any ( axis = 1 ) == True ] . index . tolist ( ) #NEWLINE#
my_dictionary [ 'keys' ] [ 'to' ] [ 'subdict' ] = foo #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#public.test#SPACE#VALUES#SPACE#(%s)' , ( psycopg2 . Binary ( data ) , ) ) #NEWLINE#
list ( [ a for a in x if a != 2 ] ) #NEWLINE#
fig . savefig ( 'test.jpg' ) #NEWLINE#
mylist = [ ( 100 if i in ( 0 , 1 , 3 ) else e ) for i , e in enumerate ( mylist ) ] #NEWLINE#
instance = ClassObject ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
myEntry . config ( show = '' ) #NEWLINE#
"""(?:^([ocat]+)(?=\\s)|(?<=\\s)([ocat]+)(?=\\s)|(?<=\\s)([ocat]+)$|^([ocat]+)$)""" #NEWLINE#
sum ( Counter ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 1 , 6 ] ) . values ( ) ) #NEWLINE#
[ x for x in l if '2' in x ] #NEWLINE#
ar . reshape ( ar . shape [ 0 ] , - 1 ) #NEWLINE#
return [ random . uniform ( lbound , rbound ) for i in range ( n ) ] #NEWLINE#
db [ 'a' ] [ 'alpha' ] = 'bbb' #NEWLINE#
{ { ( mylist | slice ) : '3:8' } } #NEWLINE#
re . search ( '[0-9]*#SPACE#(?:ABC(...))' , '123#SPACE#ABCDEF#SPACE#456' ) . group ( 1 ) #NEWLINE#
t . xpath ( '//a[@href#SPACE#=#SPACE#"http://exact#SPACE#url"]/ancestor::table' ) [ - 1 ] #NEWLINE#
[ ( 'F' , 'option3' ) , ( 'F' , 'option1' ) , ( 'F' , 'option2' ) ] #NEWLINE#
sys . path . append ( root ) #NEWLINE#
list ( double ( [ 1 , 2 ] ) ) #NEWLINE#
pnl [ 'Company' ] [ 'Active' ] = pnl [ 'Company' ] [ 'Active' ] . astype ( int ) #NEWLINE#
any ( key . startswith ( mystr ) for key in mydict ) #NEWLINE#
list ( filter ( str . isdigit , 'lol123' ) ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
{ { form . as_table } } #NEWLINE#
plt . show ( ) #NEWLINE#
os . startfile ( 'Pokémon.mp3' ) #NEWLINE#
json . dumps ( { 'a' : 'b' } ) #NEWLINE#
print ( 'No!' ) #NEWLINE#
print ( struct . unpack ( '<L' , d ) [ 0 ] ) #NEWLINE#
return webdriver . Firefox ( firefox_profile = fp ) #NEWLINE#
[ 1 , 0 , 1 , 1 ] #NEWLINE#
server . serve_forever ( ) #NEWLINE#
widget = Entry ( parent , show = '*' , width = 15 ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , 'A_B' ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , '0A' ) #NEWLINE#
reg = re . compile ( '(\\d{3}\\d{3}\\d{4})' ) #NEWLINE#
reg = re . compile ( '(\\d{3}\\D{0,3}\\d{3}\\D{0,3}\\d{4})' ) #NEWLINE#
reg = re . compile ( '(\\(?\\d{3}\\D{0,3}\\d{3}\\D{0,3}\\d{4}).*?' ) #NEWLINE#
reg = re . compile ( '.*?(\\(?\\d{3}\\D{0,3}\\d{3}\\D{0,3}\\d{4}).*?' ) #NEWLINE#
return [ int ( digit ) for digit in bin ( n ) [ 2 : ] ] #NEWLINE#
np . where ( np . logical_or . reduce ( [ ( x == y ) for y in [ 0 , 180 , 360 ] ] ) ) #NEWLINE#
D = np . vstack ( ( np . hstack ( ( A , B ) ) , np . hstack ( ( B . T , C ) ) ) ) #NEWLINE#
a = a + [ 0 ] * ( maxLen - len ( a ) ) #NEWLINE#
list ( d . keys ( ) ) #NEWLINE#
[ [ 2 , 3 , 4 , 5 ] , [ 6 , 7 , 8 ] , [ 9 , 10 ] ] #NEWLINE#
signal . signal ( signal . SIGCHLD , signal . SIG_IGN ) #NEWLINE#
datetime . strptime ( '2015/01/01#SPACE#0:12am' , '%Y/%m/%d#SPACE#%I:%M%p' ) #NEWLINE#
os . system ( 'php#SPACE#-f#SPACE#file.php' ) #NEWLINE#
pytz . timezone ( 'US/Eastern' ) . localize ( datetime . datetime ( 2012 , 1 , 1 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
return re . search ( '\\d+' , filename ) . group ( 0 ) #NEWLINE#
[ True ] * 5000 #NEWLINE#
d . sort ( key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
return sorted ( items , key = cmp_to_key ( comparer ) ) #NEWLINE#
bytetable = [ ( '00000000' + bin ( x ) [ 2 : ] ) [ - 1 : - 9 : - 1 ] for x in range ( 256 ) ] #NEWLINE#
slots = [ None ] * ( len ( A ) + len ( B ) ) #NEWLINE#
self . setupUi ( self ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
np . asarray ( map ( func , arr ) ) #NEWLINE#
empty_dict = dict . fromkeys ( [ 'apple' , 'ball' ] ) #NEWLINE#
return render ( request , 'transactions/transactions_for_account.html' , context ) #NEWLINE#
x , y = - y , x #NEWLINE#
sys . stdout . write ( 'Some#SPACE#output' ) #NEWLINE#
print ( path . abspath ( sys . modules [ '__main__' ] . __file__ ) ) #NEWLINE#
print ( ( cities [ 0 ] [ 1 ] , cities [ 1 ] [ 1 ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
app . logger . addHandler ( file_handler ) #NEWLINE#
set ( [ 'E:\\' , 'D:\\' , 'C:\\' ] ) #NEWLINE#
conset = set ( map ( lambda x : tuple ( sorted ( x ) ) , consarray ) ) #NEWLINE#
coords = np . c_ [ xx . ravel ( ) , yy . ravel ( ) ] #NEWLINE#
re . escape ( 'www.stackoverflow.com' ) #NEWLINE#
parser . add_argument ( '-b' , action = 'store_true' ) #NEWLINE#
return a , b , c #NEWLINE#
result = re . sub ( '(\\d.*?)\\s(\\d.*?)' , '\\1#SPACE#\\2' , string1 ) #NEWLINE#
f ( * ( ( 1 , 4 ) , ) ) #NEWLINE#
result = namedtuple ( 'Result' , result . _fields + ( 'point' , ) ) #NEWLINE#
sys . stdout . write ( '29#SPACE#seconds#SPACE#remaining' ) #NEWLINE#
__init__ . py #NEWLINE#
sys . path . append ( '/path/to/app' ) #NEWLINE#
[ x . strip ( ) for x in my_string . split ( ',' ) ] #NEWLINE#
Achievement . objects . get ( name = str ( b ) ) #NEWLINE#
os . getenv ( 'PWD' ) #NEWLINE#
np . ma . array ( np . tile ( arr , ( cond . shape [ 0 ] , 1 ) ) , mask = ~ cond ) . argmax ( axis = 1 ) #NEWLINE#
plt . imshow ( lena , cmap = plt . cm . gray ) #NEWLINE#
x [ [ [ 1 ] , [ 2 ] ] , [ [ 3 , 4 , 5 ] ] ] #NEWLINE#
server . serve_forever ( ) #NEWLINE#
df . astype ( object ) . fillna ( 'UNKNOWN' ) #NEWLINE#
cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_GRAYSCALE ) . dtype #NEWLINE#
iqr = q75 - q25 #NEWLINE#
array2 [ : , : , : , : ] = array1 . copy ( ) #NEWLINE#
gtk . main ( ) #NEWLINE#
new_a = a + [ '' ] * ( N - len ( a ) ) #NEWLINE#
clr . AddReference ( 'myDll.dll' ) #NEWLINE#
'\n' in 'hello\ngoodbye' #NEWLINE#
df . T #NEWLINE#
my_num = int ( my_str . replace ( ',' , '' ) ) #NEWLINE#
file . write ( s . <STR0> ( 'utf8' ) ) #NEWLINE#
np . insert ( a , 0 , 0 ) #NEWLINE#
[ item for item in my_list if item not in to_be_removed ] #NEWLINE#
os . path . dirname ( 'T:\\Data\\DBDesign\\DBDesign_93_v141b.mdb' ) #NEWLINE#
df . loc [ ( df != 0 ) . any ( axis = 1 ) ] #NEWLINE#
f . close ( ) #NEWLINE#
requests . get ( url , auth = auth ) #NEWLINE#
numpy . fromstring ( v1fColor , dtype = 'uint8' , sep = ',' ) #NEWLINE#
array ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 2 ] ) #NEWLINE#
list ( OrderedDict . fromkeys ( [ 2 , 1 , 1 , 3 ] ) ) #NEWLINE#
package_data = { 'foo' : [ 'bar.txt' ] } #NEWLINE#
plt . xlabel ( 'Nombre#SPACE#tables' ) #NEWLINE#
d = dict ( s . split ( '=' , 1 ) for s in a ) #NEWLINE#
browser . quit ( ) #NEWLINE#
"""{:0{}b}""" . format ( 9 , 8 ) #NEWLINE#
pdfkit . from_url ( 'http://google.com' , 'out.pdf' ) #NEWLINE#
globals ( ) . update ( ( k , v ) for k , v in d . items ( ) if k in [ 'foo' , 'bar' ] ) #NEWLINE#
cherrypy . request . params . get ( key_name ) #NEWLINE#
( ( a == b ) | numpy . isnan ( a ) & numpy . isnan ( b ) ) . all ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
tag . nextSibling . nextSibling #NEWLINE#
np . random . permutation ( arr ) #NEWLINE#
conPG . commit ( ) #NEWLINE#
[ item for item in my_list if 1 <= item <= 5 ] #NEWLINE#
run_wsgi_app ( webapp . WSGIApplication ( [ ( '/' , Example ) ] , debug = True ) ) #NEWLINE#
m = Basemap ( projection = 'spstere' , boundinglat = - 10 , lon_0 = 180 , resolution = 'c' ) #NEWLINE#
print ( [ next ( c ) for _ in range ( 10 ) ] ) #NEWLINE#
t [ - 1 ] = t [ - 1 ] . strip ( ) #NEWLINE#
ax . set_xlim ( [ 0 , len ( df ) ] ) #NEWLINE#
kOUT = np . zeros ( ( N + 1 , N + 1 ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
mu = Normal ( 'mu' , 0 , 1e-06 , size = 2 ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
not set ( list1 ) . isdisjoint ( list2 ) #NEWLINE#
create_engine ( 'sqlite:///some.db' , connect_args = { 'timeout' : 15 } ) #NEWLINE#
z . write ( 'hello.txt' ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
shutil . copy ( filename , dest_dir ) #NEWLINE#
_ ( a + b * c ) #NEWLINE#
return '' . join ( sorted ( comb_ ) ) #NEWLINE#
f . close ( ) #NEWLINE#
arr3D = np . tile ( arr [ ... , None ] , 3 ) #NEWLINE#
string . replace ( '#SPACE#and#SPACE#' , ',#SPACE#' , string . count ( '#SPACE#and#SPACE#' ) - 1 ) #NEWLINE#
csv_output . writerows ( zip ( * rows ) ) #NEWLINE#
[ k for k , v in G . degree ( ) . items ( ) if v == 0 ] #NEWLINE#
fig . savefig ( 'example.png' ) #NEWLINE#
cv2 . imshow ( 'border' , border ) #NEWLINE#
p . append ( tuple ( '{0:.2f}' . format ( c ) for c in b ) ) #NEWLINE#
my_list . sort ( key = lambda x : order . index ( x [ 0 ] ) ) #NEWLINE#
tree . find ( '//BODY' ) #NEWLINE#
df . set_index ( 'ID' ) . idxmax ( axis = 1 ) . reset_index ( name = 'Status' ) #NEWLINE#
np . sin ( - 1.5 ) #NEWLINE#
__init__ . py #NEWLINE#
print ( bool ( re . match ( patter , '#SPACE#' ) ) ) #NEWLINE#
list ( string . ascii_lowercase ) #NEWLINE#
simulation . someloop ( ) #NEWLINE#
setup2 = copy_dict ( setup1 , { 'param1' : val10 , 'param2' : val20 } ) #NEWLINE#
driver . get ( 'http://matrix.itasoftware.com/' ) #NEWLINE#
super ( MainWindow , self ) . __init__ ( parent ) #NEWLINE#
os . system ( 'runme.sh' ) #NEWLINE#
conn . close ( ) #NEWLINE#
Image ( filename = 'test.png' ) #NEWLINE#
"""{0:b}""" . format ( int ) #NEWLINE#
num = struct . unpack ( '>L' , s ) [ 0 ] #NEWLINE#
root . bind ( '<Motion>' , motion ) #NEWLINE#
regex = re . compile ( '[,\\.!?]' ) #NEWLINE#
go ( { 'age' : 6 , 'sex' : 'm' , 'location' : 'somewhere' , 'marital_status' : 'single' } ) #NEWLINE#
arr [ arr < 0 ] = 0 #NEWLINE#
plt . show ( ) #NEWLINE#
config = { 'color' : 'red' , 'numbers' : [ 5 , 8 ] , re . compile ( '^spam' ) : 'eggs' } #NEWLINE#
A [ np . arange ( 3 ) , idx ] #NEWLINE#
print ( _string . encode ( 'utf-8' ) ) #NEWLINE#
np . ix_ ( [ 0 , 1 , 3 ] , [ 0 , 2 ] ) #NEWLINE#
sys . stderr . write ( str ( e ) ) #NEWLINE#
session . query ( RssFeed ) . all ( ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
buffer1 [ : ] = buffer2 #NEWLINE#
print ( element . get_attribute ( 'data-value' ) ) #NEWLINE#
A = np . array ( [ C [ : , ( B == i ) ] . sum ( axis = 1 ) for i in range ( M ) ] ) #NEWLINE#
print ( urllib . request . urlopen ( 'http://python.org/' ) . read ( 100 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
math . hypot ( p2 [ 0 ] - p1 [ 0 ] , p2 [ 1 ] - p1 [ 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . tslib . repr_timedelta64 ( np . timedelta64 ( 180487000000000 , 'ns' ) ) #NEWLINE#
dic = { x : i for i , x in enumerate ( al , 1 ) } #NEWLINE#
f = codecs . open ( 'bar.txt' , 'wt' , encoding = 'utf8' ) #NEWLINE#
m = { k : ( float ( d ) / len ( cs ) ) for k , d in sum ( cs ) . items ( ) } #NEWLINE#
return var [ : - 1 ] #NEWLINE#
sum ( [ _f for _f in [ 1 , 2 , 3 , <STR0> ] if _f ] ) #NEWLINE#
f . close ( ) #NEWLINE#
writer . writerow ( [ 'Date' , 'HighBGL' , 'LowBGL' , 'Weight' , 'Height' ] ) #NEWLINE#
df . drop ( 'level_1' , axis = 1 , inplace = True ) #NEWLINE#
redis_pool = redis . ConnectionPool ( host = '10.0.0.1' , port = 6379 , db = 0 ) #NEWLINE#
yourlistofdicts . sort ( key = operator . itemgetter ( 'date' ) ) #NEWLINE#
sum ( 1 for d in my_list if d . get ( 'id' ) == 2 ) #NEWLINE#
{ '67790' : { '1' : { 'kwh' : 319.4 } } } #NEWLINE#
df [ df . groupby ( 'CUSIP' ) . cumcount ( ascending = False ) == 0 ] #NEWLINE#
np . where ( a == a . max ( axis = 1 , keepdims = True ) , a , 0 ) #NEWLINE#
a = '1' + '2' + '3' - '4' #NEWLINE#
print ( 'Name:#SPACE#%-20s#SPACE#Price:#SPACE#%10d' % ( i . name , i . price ) ) #NEWLINE#
x = [ 1 , 3 , 5 ] #NEWLINE# sum ( d * 10 ** i for i , d in enumerate ( x [ : : - 1 ] ) ) #NEWLINE#
colnames = [ 'Header1' , 'Header2' , 'Header3' ] #NEWLINE#
mlab . show ( ) #NEWLINE#
""",#SPACE#""" . join ( '"' + item + '"' for item in parameters ) #NEWLINE#
return len ( word ) - word . count ( '#SPACE#' ) #NEWLINE#
re . sub ( '(foo)' , '\\g<1>123' , 'foobar' ) #NEWLINE#
self . est . fit ( X , y ) #NEWLINE#
os . makedirs ( dirname ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE##SPACE#' + str ( i [ 0 ] ) + ':#SPACE#' + i [ 1 ] ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_DOWN , self . _onMouseDown ) #NEWLINE#
tar . close ( ) #NEWLINE#
re . sub ( '(?i)abc' , 'Python' , a ) #NEWLINE#
print ( '\\' ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ '$or' : [ { '$and' : [ { 'XXX' : 'M' } , { 'YYY' : 'N' } ] } , { 'YYY' : { '$gte' : 3.0 } } ] } #NEWLINE#
pygame . display . update ( ) #NEWLINE#
return socket . inet_ntoa ( struct . pack ( '!I' , addr ) ) #NEWLINE#
sync ( '/path/big.txt' , 'myserver:/path/' , 'mypassword' ) #NEWLINE#
__init__ . py #NEWLINE#
check_output ( 'dir#SPACE#C:' , shell = True ) #NEWLINE#
tuple ( l ) #NEWLINE#
matplotlib . rcParams [ 'figure.figsize' ] #NEWLINE#
ax . scatter ( x , y , z , depthshade = 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( sorted ( s ) ) #NEWLINE#
[ ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 3 , 5 ) ] #NEWLINE#
"""gg_kkkppp""" #NEWLINE#
np . where ( ( X == searched_values [ : , ( None ) ] ) . all ( - 1 ) ) [ 1 ] #NEWLINE#
re . sub ( '([a-zA-Z])(\\d+)' , '\\1[\\2]' , s ) #NEWLINE#
sum ( 1 for row in open ( 'data.txt' , 'r' ) ) #NEWLINE#
sys . path . append ( '/home/user/python-libs' ) #NEWLINE#
mystr . replace ( '-' , '#SPACE#' ) . split ( '#SPACE#' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
numpy . mean ( x . reshape ( - 1 , 2 ) , 1 ) #NEWLINE#
timediff . total_seconds ( ) #NEWLINE#
np . einsum ( 'ij,jk->jik' , A , B ) . reshape ( 3 , 8 ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
mydict = { 'öö' : 1 , 'ää' : 2 } #NEWLINE#
[ abs ( a - b ) for a , b in zip ( l , l [ 1 : ] + l [ : - 1 ] ) ] #NEWLINE#
self . d . setdefault ( index , [ ] ) . append ( value ) #NEWLINE#
os . fsync ( f . fileno ( ) ) #NEWLINE#
re . findall ( '\\d+' , target_string ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . mean ( ) . sort_values ( ) #NEWLINE#
( 2 , 4 , 8 ) in ( ( 1 , 2 , 3 ) , ( 2 , 4 , 8 ) ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
[ - 2 , - 1 , 0 , 1 , 2 ] #NEWLINE#
d = { 'func' : lambda x : x + 1 } #NEWLINE#
s = re . split ( ',\\s*(?=[^)]*(?:\\(|$))' , x ) #NEWLINE#
super ( Purchase , self ) . save ( * args , ** kwargs ) #NEWLINE#
[ i for i in my_list if '91' not in i and '18' not in i ] #NEWLINE#
sorted ( li , key = operator . itemgetter ( 1 ) ) #NEWLINE#
self . myList = ( self . myList + [ 0 ] * 4 ) [ : 4 ] #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 2 , 3 , 4 ] , [ 4 , 5 , 6 ] , [ 6 , 7 , 8 ] , [ 8 , 9 , 10 ] ] ) #NEWLINE#
df . index = df . index . map ( lambda t : t . replace ( year = 2013 , month = 2 , day = 1 ) ) #NEWLINE#
random . choice ( string . ascii_lowercase ) #NEWLINE#
window . mainloop ( ) #NEWLINE#
df . sort_values ( 'C1' ) . sort_index ( level = 0 , sort_remaining = False ) #NEWLINE#
plt . close ( ) #NEWLINE#
"""^/item/value/(\\d\\.\\d{2})$""" #NEWLINE#
[ ( k , list ( g ) ) for k , g in groups ] #NEWLINE#
reactor . run ( ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
subprocess . call ( [ 'ls' , '-l' ] ) #NEWLINE#
sum ( my_list ) #NEWLINE#
{ { model . datetime | time } } #NEWLINE#
tuple ( map ( tuple , arr ) ) #NEWLINE#
tuples_filtered = [ tup for tup in tuples if tup [ 0 ] in filter_set ] #NEWLINE#
print ( 'hi' ) #NEWLINE#
{ 'Milter' : { 'Malter' : 2 , 'Miler' : 4 , 'Miller' : 4 } } #NEWLINE#
plt . show ( ) #NEWLINE#
"""FOO""" . lower ( ) #NEWLINE#
return HttpResponse ( simplejson . dumps ( to_json ) , mimetype = 'application/json' ) #NEWLINE#
list ( itertools . combinations ( list ( range ( 6 ) ) , 2 ) ) #NEWLINE#
np . searchsorted ( b , a , side = 'right' ) != np . searchsorted ( b , a , side = 'left' ) #NEWLINE#
plt . show ( ) #NEWLINE#
row = [ ( v . decode ( 'utf8' ) if isinstance ( v , str ) else v ) for v in row ] #NEWLINE#
s . sort ( key = operator . itemgetter ( 1 , 2 ) ) #NEWLINE#
x = [ 0 , 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
os . environ [ 'CURRENT_VERSION_ID' ] #NEWLINE#
roundrobin ( my_list , my_list ) #NEWLINE#
df . drop ( 'Name' , axis = 1 , inplace = True ) #NEWLINE#
re . sub ( '[\\W_]+' , '' , s , flags = re . LOCALE ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
return Response ( status = 204 ) #NEWLINE#
ax . set_xlabel ( 'xlabel' ) #NEWLINE#
today = date . today ( ) #NEWLINE#
json . dumps ( result ) #NEWLINE#
print ( '#SPACE#' . join ( item ) ) #NEWLINE#
"""::2012-05-14#SPACE#18:10:20.856000::""" . translate ( { ord ( k ) : None for k in '#SPACE#-.:' } ) #NEWLINE#
url ( '^#SPACE#tasks/(?P<task_id>\\w+)$' , YourTaskView , name = 'task' ) , #NEWLINE#
pyplot . close ( ) #NEWLINE#
win32clipboard . OpenClipboard ( ) #NEWLINE#
"""{num:{fill}{width}}""" . format ( num = 123 , fill = '0' , width = 6 ) #NEWLINE#
plt . show ( ) #NEWLINE#
br . submit ( ) #NEWLINE#
plt . savefig ( 'destination_path.eps' , format = 'eps' , dpi = 1000 ) #NEWLINE#
log . start ( ) #NEWLINE#
s [ : : - 1 ] . replace ( 'bbb' , 'xxx' , 1 ) [ : : - 1 ] #NEWLINE#
User . objects . get ( name = 'Tom' ) . friends . order_by ( '-pet__age' ) [ : 10 ] #NEWLINE#
list_words = [ '<a#SPACE#href="http://url.com/{}">{}</a>' . format ( a , a ) for a in l ] #NEWLINE#
list ( map ( len , s . split ( ) ) ) #NEWLINE#
sum ( 1 for a , b , c in combinations ( l , r = 3 ) if a < b < a + d < c < b + d ) #NEWLINE#
print ( ',#SPACE#' . join ( map ( quote , x ) ) ) #NEWLINE#
process . stdin . close ( ) #NEWLINE#
print ( my_date . strftime ( '%Y,#SPACE#%d#SPACE#%B' ) ) #NEWLINE#
dom = minidom . parseString ( '<eg>example#SPACE#text</eg>' ) #NEWLINE#
print ( item . strip ( ) ) #NEWLINE#
c . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Yes!' ) #NEWLINE#
enc . fit ( [ [ 0 , 0 , 3 ] , [ 1 , 1 , 0 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] ] ) #NEWLINE#
super ( foo , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
a = wd . execute_script ( "return#SPACE#checkdata('" + code + "');" ) #NEWLINE#
sys . stdout = sys . stdout . detach ( ) #NEWLINE#
[ ( items [ : i ] + items [ i + 1 : ] ) for i in range ( len ( items ) ) ] #NEWLINE#
np . arange ( a . shape [ 0 ] ) [ ~ np . in1d ( a , b ) ] . tolist ( ) #NEWLINE#
m = [ row for row in l if 'a' in row [ 0 ] ] #NEWLINE#
cursor . execute ( 'SELECT#SPACE#count(*)#SPACE#FROM#SPACE#components#SPACE#WHERE#SPACE#name#SPACE#=#SPACE#?' , ( name , ) ) #NEWLINE#
version , sdk = re . findall ( '(?:Version:#SPACE#|SDK#SPACE#)([\\w.-]+)' , s ) #NEWLINE#
Poll . objects . filter ( category = 'foo' ) . fetch_reverse_relations ( 'choices_set' ) #NEWLINE#
df . apply ( lambda x : x . value_counts ( ) ) . T . stack ( ) #NEWLINE#
app . run ( ) #NEWLINE#
np . argwhere ( M == 0 ) #NEWLINE#
np . savetxt ( 'myfile.txt' , np . transpose ( [ x , y , z ] ) ) #NEWLINE#
out_file . close ( ) #NEWLINE#
self . vsb . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
{ '1' : [ { '2' : [ [ 2 , 3 ] , [ 1 , 7 ] ] } ] } #NEWLINE#
self . set_header ( 'Content-Type' , 'application/javascript' ) #NEWLINE#
x = dict ( ( i , set ( ) ) for i in range ( 10 ) ) #NEWLINE#
[ y for x in text . split ( ) for y in x . split ( '-' ) ] #NEWLINE#
sys . stdout . write ( '\r2' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 ] #NEWLINE#
output = subprocess . check_output ( 'ls' , stderr = subprocess . STDOUT ) #NEWLINE#
'ttaassdd\n\rssleeroo' #NEWLINE#
parent_dict = [ { 'A' : 'val1' , 'B' : 'val2' } , { 'C' : 'val3' , 'D' : 'val4' } ] #NEWLINE#
"""foo:bar:baz""" . rpartition ( ':' ) [ - 1 ] #NEWLINE#
soup . find ( 'meta' ) [ 'content' ] #NEWLINE#
'abc' + str ( 9 ) #NEWLINE#
s = s [ 0 ] . lower ( ) + s [ 1 : ] #NEWLINE#
picturetags . py #NEWLINE#
map ( list , df . values ) #NEWLINE#
print ( [ i . split ( '/' ) [ 1 ] for i in input if i . find ( '/' ) == 1 ] ) #NEWLINE#
A . __rmul__ ( B ) #NEWLINE#
my_list = [ s for s in my_list if not re . search ( '\\d' , s ) ] #NEWLINE#
return render_to_response ( 'mytemplate.html' , { 'rows' : rows } ) #NEWLINE#
subprocess . check_output ( 'python#SPACE#output.py' , shell = True ) #NEWLINE#
jsonData = json . dumps ( data ) #NEWLINE#
dframe = pd . concat ( [ dframe , to_be_appended ] , axis = 1 ) #NEWLINE#
list ( set ( list1 + list2 ) ) #NEWLINE#
default_app_config = 'projectname.apps.articles.apps.ArticlesConfig' #NEWLINE#
yourlist = [ ( s . rsplit ( '_' , 2 ) [ 0 ] + '_' + x + '_' + y ) for s in yourlist ] #NEWLINE#
plt . step ( x , y ) #NEWLINE#
s . find ( zzz . decode ( 'utf-8' ) ) #NEWLINE#
"""#SPACE#""" . join ( map ( bin , bytearray ( st , 'utf8' ) ) ) #NEWLINE#
fruits . sort ( key = lambda x : x . quantity ) #NEWLINE#
C = np . dot ( A , B ) [ : , : , ( 0 ) , : ] #NEWLINE#
sorted ( iter ( adict . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
numbers = int ( re . search ( '\\d+' , filename ) . group ( ) ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
driver . close ( ) #NEWLINE#
file . writelines ( '%s\n' % item for item in my_list ) #NEWLINE#
np . searchsorted ( a , [ 1.5 ] , side = 'right' ) [ 0 ] #NEWLINE#
( df == 0 ) . sum ( axis = 1 ) #NEWLINE#
bucket = s3 . create_bucket ( Bucket = 'my-bucket-name' ) #NEWLINE#
s . isnull ( ) . sum ( ) #NEWLINE#
[ item for item in my_list if any ( x in item for x in bad ) ] #NEWLINE#
rects = plt . bar ( list ( range ( N ) ) , x , align = 'center' ) #NEWLINE#
f = open ( filename , '' ) #NEWLINE#
output . append ( [ items [ 0 ] , int ( items [ 1 ] ) , int ( items [ 2 ] ) ] ) #NEWLINE#
ax . annotate ( str ( j ) , xy = ( i , j + 0.5 ) ) #NEWLINE#
d [ 'js' ] [ 'title' ] = 'Script1' #NEWLINE#
word in wordList [ : 4 ] #NEWLINE#
app = cherrypy . tree . mount ( MyApp ( ) , '' , 'settings.config' ) #NEWLINE#
pprint . pprint ( filtered ) #NEWLINE#
lambda x : [ f1 ( x ) , f2 ( x ) , f3 ( x ) , x + 1 ] #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
forms . ModelForm . __init__ ( self , * args , ** kwargs ) #NEWLINE#
es . refresh ( ) #NEWLINE#
conn . rollback ( ) #NEWLINE#
np . insert ( a , 1 , np . array ( ( 1 , 1 ) ) , 1 ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , 'A' ) #NEWLINE#
[ line for line in mystr . split ( '\n' ) if line . strip ( ) != '' ] #NEWLINE#
pd . to_datetime ( df [ 'Date' ] + '#SPACE#' + df [ 'Time' ] ) #NEWLINE#
conn . close ( ) #NEWLINE#
wx . Frame . __init__ ( self , None , - 1 , 'Test#SPACE#Stretching!!' ) #NEWLINE#
shutil . rmtree ( 'dir-you-want-to-remove' ) #NEWLINE#
cet = pytz . timezone ( 'CET' ) #NEWLINE#
df . apply ( np . prod , axis = 1 ) #NEWLINE#
re . findall ( '<object.*?</object>(?:<br#SPACE#/><a.*?</a>)?' , a ) #NEWLINE#
my_dict . update ( dict . fromkeys ( [ 'b' , 'e' ] , 20 ) ) #NEWLINE#
p . pattern #NEWLINE#
df . T . drop_duplicates ( ) . T #NEWLINE#
proc = sp . Popen ( 'ls#SPACE#-l#SPACE#*.csv' , shell = True , stdout = sp . PIPE ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
p . stdout . close ( ) #NEWLINE#
asciidata = udata . encode ( 'ascii' , 'ignore' ) #NEWLINE#
self . figure . canvas . draw ( ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#sometable#SPACE#VALUES#SPACE#(...)' ) #NEWLINE#
[ key for key , group in groupby ( li ) if all ( i == 0 for i , j in enumerate ( group ) ) ] #NEWLINE#
len ( set ( L [ : 4 ] ) ) == 1 and len ( set ( L [ - 3 : ] ) ) == 1 #NEWLINE#
{ '#SPACE#q#SPACE#' : 'Do#SPACE#you#SPACE#like#SPACE#pizza?' , 'yes' : 12 , 'no' : 16 } #NEWLINE#
matrix . append ( [ 0 ] * columns ) #NEWLINE#
np . modf ( [ 1.565888 , 2.073744 , 2.962492 , 4.52838 , 5.417127 , 7.025337 ] ) #NEWLINE#
df . set_index ( 'Date' , inplace = True ) #NEWLINE#
a [ : ] = [ ] #NEWLINE#
mydivs = soup . findAll ( 'div' , { 'class' : 'stylelistrow' } ) #NEWLINE#
os . path . dirname ( sys . argv [ 0 ] ) #NEWLINE#
yourstring = 'L' + yourstring + 'LL' #NEWLINE#
ax . set_ylim ( [ - 0.5 , 0.5 ] ) #NEWLINE#
Counter ( re . findall ( "[\\w']+" , text . lower ( ) ) ) #NEWLINE#
print ( os . getcwd ( ) ) #NEWLINE#
transaction . commit ( ) #NEWLINE#
[ ( 'a' , 4 ) , ( 'yellow' , 2 ) , ( 'quick' , 2 ) ] #NEWLINE#
str . split ( '\\s+' ) #NEWLINE#
[ [ 4 , 3 , 1 , 2 ] , [ 15 , 8 , 9 , 6 ] , [ 12 , 18 , 6 , 3 ] ] #NEWLINE#
lst . append ( z ) #NEWLINE#
print ( 'Only#SPACE#numbers#SPACE#and#SPACE#Spaces' ) #NEWLINE#
a [ 0 : 1 ] = [ [ 5 ] ] #NEWLINE#
datetime . datetime . now ( pytz . timezone ( 'Asia/Jerusalem' ) ) . strftime ( '%z' ) #NEWLINE#
sorted ( counter . items ( ) ) #NEWLINE#
a = np . load ( 'test' ) #NEWLINE#
df [ df . Phrase != '[]' ] #NEWLINE#
df . groupby ( 'A' ) . C_sign . value_counts ( ) . unstack ( ) #NEWLINE#
df . groupby ( [ 'candidate_id' , 'enddate' ] ) . max ( ) . reset_index ( ) #NEWLINE#
random . sample ( set ( 'abcdefghijklmnopqrstuvwxyz' ) , 1 ) #NEWLINE#
sys . stdout . write ( '%12.8e\n' % is_float ( n ) ) #NEWLINE#
words = content . lower ( ) . replace ( '-' , '#SPACE#' ) . split ( ) #NEWLINE#
[ ( '1' , '2' ) , ( '1' , '3' ) , ( '2' , '3' ) ] #NEWLINE#
yield json . loads ( jsonline ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ] , #NEWLINE#
df_with_x7 . show ( ) #NEWLINE#
df . index . get_level_values ( 'name_sub_index' ) #NEWLINE#
datetime . timestamp ( ) #NEWLINE#
return HttpResponse ( 'Hello#SPACE#world' ) #NEWLINE#
a [ 2 : 10 ] = [ ] #NEWLINE#
driver . quit ( ) #NEWLINE#
map ( str . upper , letters ) #NEWLINE#
content = urllib . request . urlopen ( url . encode ( 'UTF-8' ) ) . read ( ) #NEWLINE#
matplotlib . use ( 'TKAgg' ) #NEWLINE#
np . array ( [ '' ] ) == np . array ( [ '\x00' ] ) #NEWLINE#
list1 . sort ( key = lambda x : int ( x . split ( '#SPACE#' ) [ 0 ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
pkg_resources . get_distribution ( name ) . activate ( ) #NEWLINE#
sum ( map ( lambda x , y : bool ( x - y ) , [ 1 , 2 ] , [ 1 ] ) ) #NEWLINE#
zip ( t [ : : 2 ] , t [ 1 : : 2 ] ) #NEWLINE#
'hiya\x00\x00\x00' . rstrip ( '\x00' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
parts = [ s [ indices [ i ] : indices [ i + 1 ] ] for i in range ( len ( indices ) - 1 ) ] #NEWLINE#
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 #NEWLINE#
a = eval ( input ( 'Enter#SPACE#number#SPACE#of#SPACE#players:#SPACE#' ) ) #NEWLINE#
[ 4 , 5 , 5 , 6 , 6 , 6 ] #NEWLINE#
list ( chain . from_iterable ( ( i , i ** 2 ) for i in range ( 1 , 6 ) ) ) #NEWLINE#
"""16""" . isdigit ( ) #NEWLINE#
del df [ 'RecordID' ] #NEWLINE#
hash_dict = dict ( itertools . groupby ( list ( dic . values ( ) ) , key = hash ) ) #NEWLINE#
{ { add ( a , b ) } } #NEWLINE#
df2 . swaplevel ( 0 , 1 , 1 ) . sort_index ( 1 ) #NEWLINE#
{ 'category1' : 4500.0 , 'category3' : 4833.3333 , 'category2' : 8000.0 } #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
my_string = my_string . rstrip ( '\\' ) #NEWLINE#
exec ( 'print#SPACE#a' , globals ( ) , { 'a' : 42 } ) #NEWLINE#
return os . path . realpath ( os . path . dirname ( self_file ) ) #NEWLINE#
np . mean ( [ 1 , 2 , 3 ] ) #NEWLINE#
a . sort ( axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
{ ( 0 ) : [ 2 ] , ( 1 ) : [ 5 , 6 ] , ( 3 ) : [ 9 , 10 , 11 , 12 ] } #NEWLINE#
newD = { k : round ( v ) for k , v in list ( d . items ( ) ) } #NEWLINE#
f . close ( ) #NEWLINE#
masked_a = numpy . ma . array ( a , mask = numpy . repeat ( a [ : , ( 0 ) ] == 1 , a . shape [ 1 ] ) ) #NEWLINE#
f . close ( ) #NEWLINE#
return hash ( frozenset ( iter ( self . __dict__ . items ( ) ) ) ) #NEWLINE#
vect . fit ( corpus ) #NEWLINE#
len ( a [ 0 ] ) #NEWLINE#
data2 = np . asarray ( data2 , dtype = np . int16 ) #NEWLINE#
datetime . date . fromordinal ( datetime . date . today ( ) . toordinal ( ) - 1 ) #NEWLINE#
[ 'ip2:port1' , 'ip1:port1' ] #NEWLINE#
a = a . reshape ( ( n , m ) , order = 'FORTRAN' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( list ( map ( lambda args : int ( args [ 1 ] ) , list ( ss . items ( ) ) ) ) ) #NEWLINE#
return cv2 . bitwise_and ( gray , gray , mask = mask ) #NEWLINE#
[ sub for sub in totalist if sub [ : 2 ] == [ 'A' , 'B' ] ] #NEWLINE#
response . headers [ 'location' ] #NEWLINE#
plt . savefig ( 'test.pdf' ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'rhombus.settings' #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . hstack ( ( a , b , c ) ) . ravel ( ) #NEWLINE#
function ( * array ) #NEWLINE#
x_ = tf . reshape ( x , [ - 1 , 1 , 10 , 1 ] ) #NEWLINE#
sum ( 'banana' [ x : x + 3 ] == 'ana' for x in range ( len ( 'banana' ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
lowest_dirs . append ( os . path . split ( root ) [ - 1 ] ) #NEWLINE#
print ( re . sub ( '(?=[_%^$])' , '\\\\' , line ) ) #NEWLINE#
print ( soup . get_text ( ) . strip ( ) ) #NEWLINE#
ax . set_xlim ( - 5 , 5 ) #NEWLINE#
df . read_csv ( 'foo.tsv' , sep = '\t' , thousands = ',' ) #NEWLINE#
g . wa . sum ( ) #NEWLINE#
df . drop ( df . query ( 'amount#SPACE#==#SPACE#0' ) . sample ( frac = 0.5 ) . index ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
data = OrderedDict ( sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] [ 0 ] ) ) #NEWLINE#
tf . initialize_all_variables ( ) . run ( ) #NEWLINE#
url ( '^delete$/(?P<pk>\\d+)' , views . EventDetail . as_view ( ) , name = 'delete_event' ) , #NEWLINE#
eval ( input ( 'Press#SPACE#Enter#SPACE#to#SPACE#continue...' ) ) #NEWLINE#
foo = foo . upper ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
db . close ( ) #NEWLINE#
return min ( max_val , max ( min_val , val ) ) #NEWLINE#
return len ( [ line for line in lines if line . startswith ( '#' ) ] ) #NEWLINE#
item = gtk . MenuItem ( ) #NEWLINE#
[ { 'A' : 1 , 'C' : 4 , 'B' : 2 , 'D' : 4 } , { 'A' : 1 , 'C' : 4 , 'B' : 1 , 'D' : 5 } , { 'A' : #NEWLINE# 1 , 'C' : 3 , 'B' : 2 , 'D' : 6 } ] #NEWLINE#
{ key_for_value ( value ) : value for value in values } #NEWLINE#
f ( 3 , 5 , * ( 1 , 2 , 3 ) ) #NEWLINE#
cv2 . imshow ( 'preview' , frame ) #NEWLINE#
tuple ( list ( x [ 0 ] ) + [ x [ 1 ] ] ) #NEWLINE#
np . take ( A , np . arange ( ncols ) % A . shape [ 1 ] , axis = 1 ) #NEWLINE#
plt . plot ( x , y , drawstyle = 'steps' ) #NEWLINE#
my_list2 , my_list1 = zip ( * my_list ) #NEWLINE#
dict ( e . split ( '#SPACE#-#SPACE#' ) for e in s . split ( ',' ) ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
LOGIN_URL = 'django.contrib.auth.views.login' #NEWLINE#
Entry . objects . get ( headline__exact = 'Man#SPACE#bites#SPACE#dog' ) #NEWLINE#
print ( '\x819' ) #NEWLINE#
plt . savefig ( 'plot.png' ) #NEWLINE#
all ( key in dict_obj for key in properties_to_check_for ) #NEWLINE#
( 1 / np . sqrt ( ( A [ : , ( None ) ] - B ) ** 2 + d ** 2 ) ) . sum ( 1 ) #NEWLINE#
[ 'abcd' , 'acbd' , 'acdb' , 'cabd' , 'cadb' , 'cdab' ] #NEWLINE#
Clock . schedule_once ( partial ( self . update , message ) , 0 ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#users' ) #NEWLINE#
random . uniform ( 1.5 , 1.9 ) #NEWLINE#
do_something ( ) #NEWLINE#
datetime . timedelta ( seconds = 10 ) + datetime . timedelta ( hours = 5 ) #NEWLINE#
[ ( 57 , 'A' ) , ( 62 , 'A' ) ] #NEWLINE#
np . equal . reduce ( [ True , 1 ] ) #NEWLINE#
[ [ x , y ] for x in list1 for y in list2 ] #NEWLINE#
df [ 'new' ] = df . index #NEWLINE#
[ x for x in lelist if lestring . count ( x ) ] #NEWLINE#
termios . tcsetattr ( fd , termios . TCSAFLUSH , old_settings ) #NEWLINE#
5 * ( 4 * ( 3 * ( 2 * ( 1 * f ( f , 0 ) ) ) ) ) #NEWLINE#
super ( Subject , self ) . save ( * args , ** kwargs ) #NEWLINE#
df . drop_duplicates ( cols = 'A' , take_last = True ) #NEWLINE#
f = open ( 'C:\\folder1\\test1.txt' , 'r' ) #NEWLINE#
{ ( 0 , 'LED_NUML' ) : True , ( 1 , 'LED_CAPSL' ) : True , ( 2 , 'LED_SCROLLL' ) : False } #NEWLINE#
L = [ bytes_obj [ i : i + 1 ] for i in range ( len ( bytes_obj ) ) ] #NEWLINE#
a . transpose ( 0 , 2 , 1 ) . ravel ( ) #NEWLINE#
pickle . loads ( pickle . dumps ( PickalableC ( ) ) ) #NEWLINE#
matplotlib . rcParams . update ( { 'font.size' : 12 } ) #NEWLINE#
random . shuffle ( thelist ) #NEWLINE#
print ( a if b else 0 ) #NEWLINE#
li . append ( ( 3 , 'three' ) ) #NEWLINE#
df [ 'value_grp' ] = ( df . Values . diff ( 1 ) != 0 ) . astype ( 'int' ) . cumsum ( ) #NEWLINE#
driver . execute_script ( 'window.onbeforeunload#SPACE#=#SPACE#function()#SPACE#{}' ) #NEWLINE#
[ [ [ '12' , '+' , '2' ] , '+' , '3' ] ] #NEWLINE#
[ i . strip ( ) for i in link . text . strip ( ) [ 5 : ] . split ( '-' ) ] #NEWLINE#
self . appExeCB . addItems ( list ( self . items . keys ( ) ) ) #NEWLINE#
plt . xticks ( xvalues , xlabels ) #NEWLINE#
[ i for i , x in enumerate ( l ) if x == '\n' ] #NEWLINE#
[ ( x * 0.1 ) for x in range ( 0 , 10 ) ] #NEWLINE#
cur . execute ( 'select#SPACE#fname#SPACE#from#SPACE#tblsample1#SPACE#order#SPACE#by#SPACE#fname' ) #NEWLINE#
np . argwhere ( np . all ( e - array ( [ 1 , 2 ] ) == 0 , axis = 2 ) ) #NEWLINE#
pat = re . compile ( '\\d+;[^;]*' ) #NEWLINE#
np . dot ( a , a ) #NEWLINE#
self . response . out . write ( '<html><body>' ) #NEWLINE#
help ( my_list ) #NEWLINE#
strip_list = [ item . strip ( ) for item in lines ] #NEWLINE#
myiter [ '*' ] [ '*.txt' ] [ 'name' ] = 'Woot' #NEWLINE#
print ( '%s%s' % ( str ( count ) . rjust ( 10 ) , conv ) ) #NEWLINE#
map ( lambda x , y : x ( y ) , functions , values ) #NEWLINE#
[ int_or_float ( el ) for el in lst ] #NEWLINE#
local ( 'echo#SPACE#FOO1#SPACE#is#SPACE#$FOO1' ) #NEWLINE#
shutil . copy2 ( file , dest_dir ) #NEWLINE#
filtered_list = [ i for i , v in zip ( list_a , filter ) if v ] #NEWLINE#
self . Center ( ) #NEWLINE#
print ( sorted ( L , key = lambda x : [ int ( i ) for i in x . rstrip ( '.' ) . split ( '.' ) ] ) ) #NEWLINE#
moneyx = float ( money . read ( ) ) #NEWLINE#
print ( sys . argv ) #NEWLINE#
L = [ [ 'x' , 'y' ] for i in range ( 10 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
fileName = input ( 'Please#SPACE#input#SPACE#a#SPACE#valid#SPACE#file#SPACE#name:#SPACE#' ) #NEWLINE#
super ( Course , self ) . save ( * args , ** kwargs ) #NEWLINE#
cv2 . imwrite ( name , imagem ) #NEWLINE#
createkey = '_' . join ( sorted ( str ( wi ) for wi in wordids ) ) #NEWLINE#
toolz . unique ( obj_list , key = lambda x : x . my_attr ) #NEWLINE#
operator . itemgetter ( 1 ) ( row ) #NEWLINE#
return functools . partial ( self . function , instance ) #NEWLINE#
urllib . parse . urlencode ( [ ( 'criterias[]' , 'member' ) , ( 'criterias[]' , 'issue' ) ] ) #NEWLINE#
a [ np . argsort ( ma [ : , ( 1 ) ] ) ] #NEWLINE#
my_array = numpy . array ( my_list , dtype = numpy . float64 ) #NEWLINE#
app . run ( port = port , debug = False ) #NEWLINE#
x [ : ] = [ value for value in x if len ( value ) == 2 ] #NEWLINE#
os . startfile ( filename ) #NEWLINE#
re . compile ( '[a-zA-ZÑñ]+' , re . DEBUG ) #NEWLINE#
[ chr ( i ) for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
sys . argv [ 2 ] #NEWLINE#
sorted ( zip ( keys , values ) , key = lambda x : ( x [ 0 ] is None , x [ 0 ] ) ) #NEWLINE#
not any ( dict . values ( ) ) #NEWLINE#
return [ ( item , value ) for item , value in config . items ( section ) ] #NEWLINE#
plt . gca ( ) . xaxis . set_major_locator ( mdates . DayLocator ( ) ) #NEWLINE#
{ 'a' : 42 , 'b' : 'my_string' , 'c' : { 'e' : { 'f' : 64 } , 'd' : 33 } } #NEWLINE#
np . hstack ( a . flat ) #NEWLINE#
my_list . sort ( key = operator . itemgetter ( 1 ) ) #NEWLINE#
array = [ [ int ( x ) for x in line . split ( ) ] for line in f ] #NEWLINE#
logging . getLogger ( 'other' ) . error ( 'other' ) #NEWLINE#
max ( len ( s ) for s in re . findall ( 'a+' , input ) ) #NEWLINE#
globals ( ) #NEWLINE#
new_dict [ 'a' ] [ 'b' ] [ 'c' ] . append ( 5 ) #NEWLINE#
ssl . get_server_certificate ( ( 'www.sefaz.ce.gov.br' , 443 ) ) #NEWLINE#
print ( '{}#SPACE#=>#SPACE#{}' . format ( a , b ) ) #NEWLINE#
{ 'a' : 1 , 'c' : { 'x' : [ 1 , 2 , 3 ] } , 'b' : 'abc' } #NEWLINE#
df1 . join ( [ df2 , df3 ] , how = 'outer' ) #NEWLINE#
'in' in [ 'indigo' , 'violet' ] #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
sorted ( l , key = lambda x : float ( 'inf' ) if x is None else x ) #NEWLINE#
create_dict_from_variables ( first_name [ : - 3 ] + 'moo' , last_name [ : : 2 ] ) #NEWLINE#
json . dumps ( { 'foo' : 'bar' } ) #NEWLINE#
parse . add_argument ( 'filenames' , nargs = '+' ) #NEWLINE#
print ( '\n' . join ( bids ) ) #NEWLINE#
app . run ( ) #NEWLINE#
[ '1' , '2.3' , 'name' , '229' , '' , '228' , '12' ] #NEWLINE#
print ( len ( [ name for name in os . listdir ( '.' ) if os . path . isfile ( name ) ] ) ) #NEWLINE#
f = open ( 'test.txt' , 'r' ) #NEWLINE#
plt . imshow ( a , cmap = 'hot' , interpolation = 'nearest' ) #NEWLINE#
json . load ( request . body ) #NEWLINE#
np . array ( [ str ( x ) for x in [ 0 , 33 , 4444522 ] ] ) #NEWLINE#
foo ( [ x [ 'uid' ] for x in users ] ) #NEWLINE#
return { c : s . count ( c ) for c in chars } #NEWLINE#
tk . mainloop ( ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
rc2 = np . array ( [ [ 3 , 3 , 2 ] , [ 3 , 0 , 2 ] ] ) #NEWLINE#
B_p . to_csv ( sys . stdout , index = False ) #NEWLINE#
return { str ( k ) : convert_value ( v ) for k , v in list ( d . items ( ) ) } #NEWLINE#
return QtCore . Qt . ItemIsEnabled #NEWLINE#
data = [ map ( int , line . split ( ) ) for line in f ] #NEWLINE#
os . system ( 'mp3splt#SPACE#inputfile.mp3' ) #NEWLINE#
"""Produkcja.........................................""" . rstrip ( '.' ) #NEWLINE#
urllib . parse . urlencode ( f ) #NEWLINE#
d = dict ( zip ( [ o . name for o in object_list ] , object_list ) ) #NEWLINE#
writer . writerows ( lines ) #NEWLINE#
list ( x . keys ( ) ) . index ( 'c' ) #NEWLINE#
r = requests . get ( 'http://www.google.com' ) #NEWLINE#
[ ( 'cat' , 16 , 1 ) , ( 'dog' , 12 , 1 ) ] #NEWLINE#
keys = [ i for i , v in scores . items ( ) if v == max_value ] #NEWLINE#
[ i [ 0 ] for i in x ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( int ( '119' ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
map ( lambda frame : frame . query ( expr ) , [ df , df2 ] ) #NEWLINE#
os . write ( tup [ 0 ] , 'foo\n' ) #NEWLINE#
nums2 . search ( '1e99' ) . group ( 0 ) #NEWLINE#
berlin_now = datetime . now ( tz ) #NEWLINE#
pd . DataFrame ( { 'Genre#SPACE#Count' : genre_count } ) #NEWLINE#
total = sum ( x + y for x in ( 0 , 1 , 2 , 3 ) for y in ( 0 , 1 , 2 , 3 ) if x < y ) #NEWLINE#
urllib . parse . unquote ( 'It%27s%20me%21' ) #NEWLINE#
prod ( list ( range ( 1 , 5 ) ) ) #NEWLINE#
keys . update ( list ( d . keys ( ) ) ) #NEWLINE#
df . groupby ( 'Type' ) . Killed . transform ( lambda x : x . fillna ( x . mean ( ) ) ) #NEWLINE#
list ( key for key , val in itertools . groupby ( 'aaabbccddeefaa' ) ) #NEWLINE#
t . start ( ) #NEWLINE#
( df != 0 ) . dot ( df . columns ) #NEWLINE#
'unique12345678901234567890.mkv' [ : - 24 ] + '.mkv' #NEWLINE#
np . average ( list ( map ( float , meanNumbers . split ( ',' ) ) ) ) #NEWLINE#
[ 'aaaa-aa' , 'bbbb-bb' , 'c-ccccc' , 'd-ddddd' ] #NEWLINE#
df [ 'Last_Name' ] = df [ 'ID' ] . map ( lnames ) #NEWLINE#
tv . modify_text ( gtk . STATE_NORMAL , gtk . gdk . color_parse ( 'white' ) ) #NEWLINE#
some_tag . find ( 'strong' ) . tail #NEWLINE#
{ 'a' : 'b' , 'c' : 'd' } #NEWLINE#
request . environ [ 'REQUEST_METHOD' ] = 'something' #NEWLINE#
a , b , c = struct . unpack ( '>HHi' , some_string ) #NEWLINE#
np . savetxt ( f , line , fmt = '%.2f' ) #NEWLINE#
df [ 'Text' ] . apply ( word_tokenize ) . tolist ( ) #NEWLINE#
ax . plot ( z , y , x , label = 'parametric#SPACE#curve' ) #NEWLINE#
xattr . getxattr ( '/bin/ping' , 'security.capability' ) #NEWLINE#
pd . read_csv ( StringIO ( s2 ) , comment = '#' , sep = ',' ) . dropna ( how = 'all' ) #NEWLINE#
a , b , c = loadtxt ( 'text.txt' ) . reshape ( ( - 1 , 1 ) ) #NEWLINE#
browser . get ( 'http://webpage.com' ) #NEWLINE#
datetime . strptime ( '1998-4-52' , '%Y-%w-%U' ) #NEWLINE#
print ( object . __repr__ ( ) ) #NEWLINE#
return HttpResponse ( 'rendered#SPACE#view:#SPACE#%s' % response . content ) #NEWLINE#
thread . start ( ) #NEWLINE#
( 1 << 7 ) + ( 0 << 6 ) + ( 1 << 5 ) + ( 0 << 4 ) + ( 0 << 3 ) + ( 1 << 2 ) + ( 0 << 1 ) + 1 #NEWLINE#
self . x += STEP #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'Test1' ] #NEWLINE#
{ 'street' : 'sesame#SPACE#street' , 'zip' : '13000' } #NEWLINE#
"""#SPACE#+#SPACE#""" . join ( [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' ] ) #NEWLINE#
X_train , X_test , y_train , y_test = train_test_split ( X , y , stratify = y ) #NEWLINE#
{ 'func1' : func1 , 'func2' : func2 , 'func3' : func3 } . get ( choice , notAfun ) ( ) #NEWLINE#
all_the_ways = [ ( 2 , 1 , 2 ) , ( 2 , 2 , 1 ) ] #NEWLINE#
int ( b , 2 ) #NEWLINE#
f = figure ( figsize = ( 5 , 1 ) ) #NEWLINE#
len ( [ y for y in x if y > 2 ] ) #NEWLINE#
"""#SPACE#""" . join ( soup . findAll ( text = True ) ) #NEWLINE#
ssh . close ( ) #NEWLINE#
{ 'b' : [ '1' , '2' ] , 'd' : [ '3' ] , 'c' : [ '2' , '3' ] , 'a' : [ '1' , '2' ] } #NEWLINE#
fp . close ( ) #NEWLINE#
list ( { x . tag : x for x in myList } . values ( ) ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
p . delete ( ) #NEWLINE#
"""Documentation#SPACE#for#SPACE#myscript""" #NEWLINE#
db [ 'a' ] = { 'alpha' : 'aaa' } #NEWLINE#
l [ 2 : 6 ] = [ '' . join ( l [ 2 : 6 ] ) ] #NEWLINE#
MyModel . objects . filter ( pk = obj . pk ) . update ( val = F ( 'val' ) + 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( '۰۱۲۳۴۵۶۷۸۹' ) #NEWLINE#
all ( i . count ( 1 ) == n for i in l ) #NEWLINE#
df [ 'col1' ] . map ( di ) #NEWLINE#
gtk . main ( ) #NEWLINE#
df . reset_index ( ) #NEWLINE#
urllib . request . urlopen ( 'file:///etc/debian_version' ) . read ( ) #NEWLINE#
print ( strtod ( '(a+2.0)/1e-1' , 8 ) ) #NEWLINE#
result = np . arange ( 20 , dtype = np . float ) . reshape ( ( 2 , 10 ) ) #NEWLINE#
datetime . datetime . fromtimestamp ( 0 ) + datetime . timedelta ( seconds = 2147570047 ) #NEWLINE#
pd . crosstab ( df . A > 0 , df . B > 0 ) #NEWLINE#
return self . get ( ) #NEWLINE#
return [ int ( x ) for x in '8743-12083-15' . split ( '-' ) ] #NEWLINE#
requests . get ( 'http://example.org' , proxies = proxies ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 , 8 , 9 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
np . einsum ( 'iik->ik' , np . dot ( b , a ) ) #NEWLINE#
M . uid ( 'search' , None , 'SUBJECT#SPACE#"New#SPACE#Order"' ) #NEWLINE#
M . uid ( 'search' , None , 'X-GM-RAW#SPACE#"subject:\\"New#SPACE#Order\\""' ) #NEWLINE#
re . split ( '[?.,]' , test ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
f15 = open ( 'Exemplo_15.txt' , 'rU' ) #NEWLINE#
ContactForm . get_reason_display ( ) #NEWLINE#
len ( x ) >= 4 #NEWLINE#
urllib . parse . urlencode ( { 'a' : 1 , 'b' : 2 } ) #NEWLINE#
my_list = [ json . loads ( line ) for line in f ] #NEWLINE#
( c for c in s if c in '+-/*()_' ) #NEWLINE#
session . query ( func . count ( User . id ) ) . scalar ( ) #NEWLINE#
os . popen ( 'cat#SPACE#/etc/services' ) . read ( ) #NEWLINE#
l . append ( elt2 ) #NEWLINE#
df . plot ( kind = 'line' ) #NEWLINE#
all ( v == 0 for v in values ) #NEWLINE#
plt . show ( ) #NEWLINE#
result . wait ( ) #NEWLINE#
clean = re . sub ( '[^#SPACE#-~]' , '' , dirty ) #NEWLINE#
print ( f ( 1 , 2 , 3 , 4 , 5 ) ) #NEWLINE#
df . replace ( { 'N/A' : np . nan } , inplace = True ) #NEWLINE#
ssh . close ( ) #NEWLINE#
zip ( * ( [ iter ( L ) ] * 2 ) ) #NEWLINE#
isnat ( np . timedelta64 ( 'NAT' ) . view ( 'i8' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
img = Image . open ( file ) #NEWLINE#
data [ 'sex' ] . replace ( 1 , 'Male' , inplace = True ) #NEWLINE#
df2 . show ( ) #NEWLINE#
print ( ';#SPACE#' . join ( err . messages ) ) #NEWLINE#
return ( dict ( zip ( dicts , x ) ) for x in itertools . product ( * list ( dicts . values ( ) ) ) ) #NEWLINE#
[ x for x in strings if x ] #NEWLINE#
sum ( v ) == sum ( v + [ n ] ) #NEWLINE#
df . eq ( df . iloc [ : , ( 0 ) ] , axis = 0 ) . all ( 1 ) #NEWLINE#
list ( d . values ( ) ) #NEWLINE#
print ( '{},#SPACE#{}' . format ( row [ 0 ] , 1 if row [ 0 ] in List else 0 ) ) #NEWLINE#
matplotlib . use ( 'cairo.png' ) #NEWLINE#
module1 . Relay ( ) #NEWLINE#
print ( arg , getattr ( args , arg ) ) #NEWLINE#
[ word for word in words if not word . isdigit ( ) ] #NEWLINE#
fig . savefig ( 'auto.png' ) #NEWLINE#
re . findall ( '\\d+' , 'GoTo:#SPACE#7018#SPACE#6453#SPACE#12654\n' ) #NEWLINE#
""",""" . join ( map ( str , record_ids ) ) #NEWLINE#
table ( ax , df , rowLabels = [ '' ] * df . shape [ 0 ] , loc = 'center' ) #NEWLINE#
pd . to_timedelta ( 16 , unit = 'h' ) #NEWLINE#
self . d . append ( '1' ) #NEWLINE#
a , b , c = ( int ( i ) for i in mystr . split ( ) [ 1 ] . split ( '.' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
data2 = sorted ( data , key = operator . itemgetter ( 1 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
w . connect ( 'destroy' , Gtk . main_quit ) #NEWLINE#
ax . set_xticklabels ( labels ) #NEWLINE#
"""^[a-zA-Z]+$""" #NEWLINE#
print ( etree . tostring ( root ) ) #NEWLINE#
[ 'And' , 'the' , 'on,' , 'bla' , 'tw;' , 'th:' , 'fo.' , 'tes' ] #NEWLINE#
system ( 'C:\\Documents#SPACE#and#SPACE#Settings/program.exe' , 'arg1' , 'arg2' ) #NEWLINE#
parser . add_option ( '-c' , '--categories' , dest = 'Categories' , nargs = 4 ) #NEWLINE#
df = df . sort ( 'Date' ) #NEWLINE#
list ( map ( lambda cell : cell . split ( '\t' ) , s . splitlines ( ) ) ) #NEWLINE#
[ 'Foo' , '__init__' , 'meth1' , 'meth2' , 'Bar' , '__init__' , 'meth1' , 'meth2' ] #NEWLINE#
f = opener . open ( 'https://www.google.com/' ) #NEWLINE#
df = pd . DataFrame ( data [ 1 : ] , columns = data [ 0 ] ) #NEWLINE#
shutil . rmtree ( '/path/to/your/dir/' ) #NEWLINE#
print ( '#SPACE#Blastoff!' ) #NEWLINE#
np . einsum ( 'ac,bd->abcd' , A , B ) #NEWLINE#
df . apply ( lambda r : df . sum ( ) [ r . name ] * df . sum ( 1 ) [ r . index ] / df . sum ( ) . sum ( ) ) #NEWLINE#
d [ 'js' ] = [ { 'foo' : 'bar' } , { 'other' : 'thing' } ] #NEWLINE#
mod = sys . modules [ __module__ ] #NEWLINE#
im2 . putdata ( list_of_pixels ) #NEWLINE#
ares = ( a . transpose ( 0 , 1 , 3 , 2 ) * v ) . transpose ( 0 , 1 , 3 , 2 ) #NEWLINE#
np . sqrt ( s . multiply ( s ) . sum ( 1 ) ) #NEWLINE#
np . tile ( data , 5 ) #NEWLINE#
[ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 ] , #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
class Person ( object , metaclass = ValidateType ) : #NEWLINE# #INDENT# pass #NEWLINE#
bool ( re . search ( '((\\w)\\2){2}' , 'bookkeeper' ) ) #NEWLINE#
( ( 1 , 2 ) , ( 3 , 4 ) ) + ( 5 , 6 ) , #NEWLINE#
[ re . findall ( '\\d+\\.\\d+' , line ) for line in f if line . startswith ( 'foo' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
pd . pivot_table ( df , index = 'gender' , columns = 'doctor' , aggfunc = len , fill_value = 0 ) #NEWLINE#
mask = ( df [ 'date' ] > start_date ) & ( df [ 'date' ] <= end_date ) #NEWLINE#
w . writerow ( my_dict ) #NEWLINE#
print ( '\n' . join ( map ( str , ports ) ) ) #NEWLINE#
response = requests . get ( url , headers = headers ) #NEWLINE#
sorted ( [ 'Some' , 'words' , 'sort' , 'differently' ] ) #NEWLINE#
sys . stdout . write ( 'some#SPACE#stuff' ) #NEWLINE#
hex ( int ( '119' ) ) #NEWLINE#
print ( str ( 'ABC\x97abc' , encoding = 'utf-8' , errors = 'replace_with_space' ) ) #NEWLINE#
[ 'f1' , 'f2' , 'f3' , 'f4' ] #NEWLINE#
html = '<img#SPACE#src="' + STATIC_URL + '/icons/flags/tn.gif">' #NEWLINE#
[ '0' , '1' , '2' , '3' , 'mean' ] #NEWLINE#
parser . parse_args ( [ 'fileone' , '-a' , 'filetwo' , '-b' , 'filethree' ] ) #NEWLINE#
newdf . groupby ( [ 'level_0' ] ) [ 'level_1' ] . apply ( list ) #NEWLINE#
Popen ( [ 'firefox' , 'http://www.google.com/#q=this+is+my+query' ] ) #NEWLINE#
plt . savefig ( 'demo.png' ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self , parent ) #NEWLINE#
ax . set_color_cycle ( [ 'red' , 'black' , 'yellow' ] ) #NEWLINE#
print ( output . stdout . read ( ) ) #NEWLINE#
show ( ) #NEWLINE#
all ( x in dct for x in ( 'foo' , 'bar' , 'baz' ) ) #NEWLINE#
print ( tuple ( itertools . chain . from_iterable ( product ) ) ) #NEWLINE#
l . sort ( key = key ) #NEWLINE#
np . repeat ( x , 3 , axis = 1 ) #NEWLINE#
arr [ bisect . bisect ( arr , 320 ) ] #NEWLINE#
self . tableWidget . item ( 3 , 5 ) . setBackground ( QtGui . QColor ( 100 , 100 , 150 ) ) #NEWLINE#
df . groupby ( [ df . a . apply ( tuple ) ] ) #NEWLINE#
s . find ( 'r' ) #NEWLINE#
c . save ( ) #NEWLINE#
count = len ( set ( d [ 'code' ] for d in li ) ) #NEWLINE#
'%d.%06d' % ( delta . seconds , delta . microseconds ) #NEWLINE#
plt . show ( ) #NEWLINE#
var = '{0}#SPACE#{0}#SPACE#{0}' . format ( 'look_at_meeee' ) #NEWLINE#
ax . set_xticks ( xticks ) #NEWLINE#
ax . spines [ 'bottom' ] . set_position ( ( 'outward' , 40 ) ) #NEWLINE#
df1 . iloc [ [ 1 , 3 ] ] #NEWLINE#
root . attrib [ 'myNewAttribute' ] = 'hello#SPACE#world' #NEWLINE#
"""^list_cv/(?:(?P<category>[\\w+])/)?$""" #NEWLINE#
d = dict ( zip ( ( o . name for o in object_list ) , object_list ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
test ( x , 'one' , 'two' ) #NEWLINE#
print ( sum ( os . path . isfile ( f ) for f in glob . glob ( '/tmp/*' ) ) ) #NEWLINE#
[ 'py:attribute' , 'std:label' , 'py:method' , 'py:function' , 'py:class' ] #NEWLINE#
df [ '2017-01-02' : '2017-01-02' ] #NEWLINE#
re . compile ( '(\\s*)+' ) #NEWLINE#
np . repeat ( data , 5 ) #NEWLINE#
pd . concat ( [ df [ col ] . apply ( pd . Series ) for col in cols ] , axis = 1 , keys = cols ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
format ( num if num >= 0 else ( 1 << 16 ) + num , '016b' ) #NEWLINE#
source = 'C:\\Documents#SPACE#and#SPACE#Settings\\Some#SPACE#directory\\My#SPACE#file.txt' #NEWLINE#
pprint . pprint ( a , width = 1 ) #NEWLINE#
Status . objects . latest ( 'date_added' ) #NEWLINE#
zip ( [ 7 , 8 , 9 ] , [ 4 , 5 , 6 ] , [ 1 , 2 , 3 ] ) #NEWLINE#
sum ( ( Counter ( d ) for d in list ( data . values ( ) ) ) , Counter ( ) ) #NEWLINE#
"""&""" . join ( [ ',' . join ( my_list [ : - 1 ] ) , my_list [ - 1 ] ] ) #NEWLINE#
test . __kwdefaults__ #NEWLINE#
print ( sum ( 1 for x in arr if x is False ) ) #NEWLINE#
root . geometry ( '400x250+450+200' ) #NEWLINE#
cherrypy . engine . start ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
circle = np . zeros ( ( height , width ) , dtype = im . dtype ) #NEWLINE#
pd . merge_asof ( trades , quotes , on = 'time' ) #NEWLINE#
super ( Material , self ) . save ( * args , ** kwargs ) #NEWLINE#
db . session . add ( product_obj ) #NEWLINE#
df . iloc [ - 6 : - 1 , ( 2 ) ] #NEWLINE#
os . system ( 'listdlls#SPACE#PID_OR_PROCESS_NAME_HERE' ) #NEWLINE#
subprocess . call ( [ 'pmset' , '-g' , 'assertions' ] ) #NEWLINE#
parse_aYbM ( '0Yfoo' ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS = 'myapp.processor.foos' , #NEWLINE#
extmodule . dontoverride ( ) #NEWLINE#
hello ( ) #NEWLINE#
sum ( [ [ False , False , True ] , [ True , False , True ] ] ) #NEWLINE#
np . linalg . lstsq ( A . T , y ) #NEWLINE#
fruit = re . compile ( '\\b(?:%s)\\b' % '|' . join ( fruit_list ) ) #NEWLINE#
writer . sheets [ 'Summary' ] . column_dimensions [ 'A' ] . width = 15 #NEWLINE#
sys . stdout . write ( 'some#SPACE#data' ) #NEWLINE#
sys . stdout . write ( 'other#SPACE#different#SPACE#data' ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""[Ø-ö]""" #NEWLINE#
value_at_index = list ( dic . values ( ) ) [ index ] #NEWLINE#
[ 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] , #NEWLINE#
print ( is_json ( '{"foo":[5,6.8],"foo":"bar"}' ) ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
b = str ( a . encode ( 'utf-8' ) . decode ( 'ascii' , 'ignore' ) ) #NEWLINE#
s . to_frame ( 'New_Name' ) [ 'New_Name' ] #NEWLINE#
plt . show ( ) #NEWLINE#
pdb . gimp_message ( 'This#SPACE#is#SPACE#displayed#SPACE#as#SPACE#a#SPACE#message' ) #NEWLINE#
headerRows [ 0 ] [ 10 ] . contents [ 0 ] . find ( 'b' ) . string #NEWLINE#
s . replace ( 'l' , 'x' , regex = True ) #NEWLINE#
random . shuffle ( temp ) #NEWLINE#
buckets = [ 0 ] * 100 #NEWLINE#
d2 = dict ( ( k , f ( v ) ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
np . putmask ( elevation , elevation > 0 , np . nan ) #NEWLINE#
plt . draw ( ) #NEWLINE#
re . sub ( '\\s' , '' , 'a#SPACE#b' ) . isalpha ( ) #NEWLINE#
df . rename ( index = lambda x : x . split ( '_' ) [ 0 ] ) #NEWLINE#
[ 'a' , 'c' , 'd' , 'e' ] #NEWLINE#
sorted ( vec , key = itemgetter ( 1 ) , reverse = True ) [ : 5 ] #NEWLINE#
gtk . main ( ) #NEWLINE#
setup ( namespace_packages = [ 'ninja' ] ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
[ name for name , age in list ( mydict . items ( ) ) if age == search_age ] #NEWLINE#
[ l for l in paragraph3 if sublist_contains ( 'Derived:#SPACE#' , l ) ] #NEWLINE#
somelist . sort ( key = predefined_list . index ) #NEWLINE#
df = df . apply ( myfillna ) #NEWLINE#
source . groupby ( [ 'Country' , 'City' ] ) . agg ( lambda x : x . value_counts ( ) . index [ 0 ] ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
- 52.1412276733 - 43.8784096809 - 62.9151309943 #NEWLINE#
- 20.9290995367 - 20.9227157774 - 20.9601319723 #NEWLINE#
foo ( ** { 'foo' : 123 , 'bar' : 456 } ) #NEWLINE#
datetime . strptime ( '02/11/2010' , '%d/%m/%Y' ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
carnamit = open ( 'car_names.txt' ) #NEWLINE#
"""banana""" . count ( 'a' ) #NEWLINE#
print ( url . split ( '/' ) [ 2 ] ) #NEWLINE#
img = cv2 . imread ( 'cameraman.png' , 0 ) #NEWLINE#
session . cookies . set ( 'NID' , 'abc' , domain = '.google.co.uk' , path = '/' ) #NEWLINE#
func . __code__ . co_code #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
graph . add_node ( pydot . Node ( 'literal_1_1' , label = '1' ) ) #NEWLINE#
self . canvas . draw ( ) #NEWLINE#
""",#SPACE#""" . join ( [ ( '"%s"' % w ) for w in words ] ) #NEWLINE#
s . replace ( 'acb' , '' ) #NEWLINE#
print ( 'Request#SPACE#return#SPACE#' + str ( response . status_code ) + '#SPACE#error!' ) #NEWLINE#
re . search ( '\\by\\b' , 'Ã¼yÃ¼' , re . UNICODE ) #NEWLINE#
print ( list ( itertools . chain . from_iterable ( l ) ) ) #NEWLINE#
del myList [ - 2 : ] , myList [ : 2 ] #NEWLINE#
plot . savefig ( 'hanning{0}.pdf' . format ( num ) ) #NEWLINE#
ax2 . set_xlim ( 9 , 10 ) #NEWLINE#
raise ValueError ( 'not#SPACE#enough#SPACE#arguments' ) #NEWLINE#
print ( np . allclose ( sola , solb ) ) #NEWLINE#
zip ( * l ) #NEWLINE#
df . iloc [ : 5 , : 5 ] #NEWLINE#
set ( a ) & set ( b ) & set ( c ) #NEWLINE#
a = [ [ 1 , 2 , 3 , 4 , 5 ] ] * 4 #NEWLINE#
datetime . datetime ( 2010 , 9 , 29 , 11 , 15 ) #NEWLINE#
gevent . monkey . patch_all ( httplib = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
cursor . execute ( query , l ) #NEWLINE#
self . actionthread . start ( ) #NEWLINE#
instance . instance_method ( ) #NEWLINE#
grouped = df . groupby ( df [ 'datetime' ] . apply ( my_grouper ) ) #NEWLINE#
struct . unpack ( '<h' , '\x01\x06' ) #NEWLINE#
dict ( ( x , i ) for i , x in enumerate ( t ) ) #NEWLINE#
pygame . init ( ) #NEWLINE#
legend . figure . canvas . mpl_connect ( 'pick_event' , self . on_pick ) #NEWLINE#
sorted ( my_list , key = operator . itemgetter ( 'name' ) ) #NEWLINE#
app . run ( ) #NEWLINE#
r = re . compile ( '<tr><td>(.*)</td><td>(.*)</td><td>(.*)#SPACE#s</td></tr>' ) #NEWLINE#
ranges = [ ( n , min ( n + step , stop ) ) for n in range ( start , stop , step ) ] #NEWLINE#
label = re . sub ( '([a-z])([A-Z])' , '\\g<1>#SPACE#\\g<2>' , label ) #NEWLINE#
app . register_blueprint ( someappmod ) #NEWLINE#
list ( chunkstring ( 'abcdefghijklmnopqrstuvwxyz' , 5 ) ) #NEWLINE#

sum ( int ( x ) for x in s if x . isdigit ( ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . subplot ( 111 , projection = 'polar' ) #NEWLINE#
g = df_agg [ 'count' ] . groupby ( level = 0 , group_keys = False ) #NEWLINE#
[ x for y in collection for x in y ] #NEWLINE#
"""-""" . join ( [ d [ : 4 ] , d [ 4 : 6 ] , d [ 6 : ] ] ) #NEWLINE#
frame . grid ( row = 0 , column = 0 ) #NEWLINE#
print ( mydict [ 'Person' ] [ 'Male' ] [ 'Boy' ] [ 'Student' ] [ 'id_123' ] [ 'Name' ] ) #NEWLINE#
g . vertices . index . lookup ( ** { 'bad:identifier' : 'value' } ) #NEWLINE#
print ( sys . modules [ '__main__' ] . __file__ ) #NEWLINE#
return the_dict . get ( key , '' ) #NEWLINE#
df1 = df . set_index ( 'Date/Time' ) #NEWLINE#
os . path . dirname ( sys . argv [ 0 ] ) #NEWLINE#
app . config . from_object ( 'settings' ) #NEWLINE#
outfile . close ( ) #NEWLINE#
input = open ( 'input.txt' , 'r' ) . read ( ) . split ( '\n' ) #NEWLINE#
[ ( i , [ j for j in L if j != i ] ) for i in L ] #NEWLINE#
df . groupby ( 'B' ) . aggregate ( { 'D' : np . sum , 'E' : np . mean } ) #NEWLINE#
"""{0:02d}""" . format ( 3 ) #NEWLINE#
remote_file . close ( ) #NEWLINE#
[ '1' , '(2/(3)2/4)s' , '5' ] #NEWLINE#
np . sum ( my_list ) #NEWLINE#
[ int ( i ) for i in str ( bin ( x ) ) [ 2 : ] ] #NEWLINE#
a [ : , ( None ) ] * b #NEWLINE#
dt = datetime . strptime ( start , '%H:%M:%S' ) . time ( ) #NEWLINE#
[ ( 'a' , [ 1 , 2 , 3 ] ) , ( 'b' , [ 1 , 2 ] ) , ( 'c' , [ 1 ] ) ] #NEWLINE#
data_url = 'data:image/jpg;base64,' + base64 . b64encode ( im_data ) #NEWLINE#
list ( itertools . chain ( * list ( d . values ( ) ) ) ) #NEWLINE#
moo . py #NEWLINE#
d = dict ( ( x . key , x ) for x in object_list ) #NEWLINE#
raise Exception ( 'щ' ) #NEWLINE#
( ( x , y ) for x in a for y in b ) #NEWLINE#
data = [ df , df , df , df ] #NEWLINE#
{ '#SPACE#Failures' : 0 , 'Tests#SPACE#run' : 1 , '#SPACE#Errors' : 0 } #NEWLINE#
select ( L , [ 2 , 5 ] ) #NEWLINE#
startsandendswith ( 'earth' , 'earth' ) #NEWLINE#
transposed_l . sort ( key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
( df [ 0 ] - df [ 1 ] ) . astype ( 'timedelta64[us]' ) . astype ( 'int' ) #NEWLINE#
df [ ~ df2 . index . isin ( other2 . index ) ] #NEWLINE#
mystr = mystr [ : mystr . find ( '"' ) + 1 ] #NEWLINE#
strip_accents ( 'Östblocket' ) #NEWLINE#
return [ word for line in open ( words_file , 'r' ) for word in line . split ( ) ] #NEWLINE#
date_paris . astimezone ( pytz . utc ) . astimezone ( pytz . timezone ( 'Europe/Paris' ) ) #NEWLINE#
task . apply_async ( args , kwargs , queue = 'worker1.example.com' ) #NEWLINE#
nonVarargMethod ( args [ 0 ] , args [ 1 ] , args [ 2 ] ) #NEWLINE#
f ( * list ( range ( 5000 ) ) ) #NEWLINE#
print ( line ) #NEWLINE#
return ( dict ( zip ( dicts , x ) ) for x in product ( * iter ( dicts . values ( ) ) ) ) #NEWLINE#
plt . plot ( x , y , linestyle = '-' ) #NEWLINE#
plt . show ( ) #NEWLINE#
shutil . copy ( full_file_name , dest ) #NEWLINE#
os . getenv ( 'PATH' ) #NEWLINE#
mean_values = data . mean ( axis = ( 2 , 3 ) ) #NEWLINE#
random . seed ( [ x ] ) #NEWLINE#
array ( [ 1.05206154 , 1.96929465 , 0.94590444 ] ) , 1 #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
l . append ( '2' ) #NEWLINE#
server . stop ( ) #NEWLINE#
br . open ( 'https://mog.com/hp/sign_in' ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
numpy . histogram ( a , bins = 10 , range = None , normed = False , weights = None , new = None ) #NEWLINE#
plt . savefig ( 'image.png' ) #NEWLINE#
[ 'Hello' , 'World' , 'To' , 'You' ] #NEWLINE#
from functools import reduce #NEWLINE# [ r [ 1 ] for r in reduce ( set . intersection , ( set ( x . items ( ) ) for x in myList ) ) ] #NEWLINE#
print ( 'Sorry,#SPACE#that#SPACE#was#SPACE#an#SPACE#invalid#SPACE#command!' ) #NEWLINE#
{ f ( k ) : v for k , v in d . items ( ) } #NEWLINE#
a = [ t [ 1 ] for t in enumerate ( a [ 1 : ] ) if t [ 1 ] [ 1 ] > a [ t [ 0 ] - 1 ] [ 1 ] ] #NEWLINE#
Index ( [ 'user_id' , 'item_id' , 'channel' , 'time' , 'test' ] , dtype = 'object' ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
[ [ 2 , 4 , 6 ] , [ 8 , 10 , 12 ] , [ 6 , 8 , 12 ] ] #NEWLINE#
df . sort_values ( [ 'Tm' ] ) #NEWLINE#
re . sub ( '([A-z])\\-([A-z])' , '\\1#SPACE#\\2' , original_term ) #NEWLINE#
session . rollback ( ) #NEWLINE#
dict1 = dict ( item . split ( '\t' ) for item in list1 ) #NEWLINE#
[ i for i , d in enumerate ( lod ) if 2 in d ] #NEWLINE#
print ( sorted ( list_of_stuff , key = extract_elem_v2 ( 'name' ) ) ) #NEWLINE#
OrderedDict ( sorted ( list ( d . items ( ) ) , key = lambda t : t [ 0 ] ) ) #NEWLINE#
file . write ( str ( formatted ) ) #NEWLINE#
s . index . isin ( list ( 'BDE' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
DataFrame ( values , columns = columns ) #NEWLINE#
language = request . form [ 'language' ] #NEWLINE#
- - system - site - packages #NEWLINE#
file = service . files ( ) . insert ( body = body , media_body = media_body ) . execute ( ) #NEWLINE#
a_file = open ( 'E:\\Python#SPACE#Win7-64-AMD#SPACE#3.3\\Test\x07.txt' , encoding = 'utf-8' ) #NEWLINE#
a_file = open ( 'E:\\Python#SPACE#Win7-64-AMD#SPACE#3.3\\Test\\a.txt' , encoding = 'utf-8' ) #NEWLINE#
soup . select ( 'div#quote-header-info#SPACE#section#SPACE#span' ) [ 0 ] #NEWLINE#
os . chdir ( path ) #NEWLINE#
ax . plot_surface ( X , Y , Z , facecolors = cm . Oranges ( V ) ) #NEWLINE#
"""XXX""" . join ( 'mississippi' . rsplit ( 'iss' , 1 ) ) #NEWLINE#
ax . spines [ 'polar' ] . set_visible ( False ) #NEWLINE#
goal = [ '<li>{0}</li>' . format ( x ) for x in l ] #NEWLINE#
sorted ( qs , key = lambda x : x . id == id ) #NEWLINE#
self . assertEqual ( 5 , self . testme ) #NEWLINE#
float ( math . factorial ( 170 ) ) #NEWLINE#
return super ( deprecated_base_class , meta ) . __new__ ( meta , name , bases , attrs ) #NEWLINE#
bytes ( [ 3 ] ) #NEWLINE#
the_list . sort ( key = lambda x : ( 3 , 1 , 2 , 4 ) [ int ( x [ 'id' ] ) - 1 ] ) #NEWLINE#
foo ( * i ) #NEWLINE#
hand = dict ( ( k , v ) for k , v in hand . items ( ) if v != 0 ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
[ item for sub_list in a [ 1 : ] for item in sub_list ] . count ( 1 ) #NEWLINE#
kethread . start ( ) #NEWLINE#
print ( os . environ . get ( 'USERNAME' ) ) #NEWLINE#
datetime . now ( ) . strftime ( '%b#SPACE#%d#SPACE#%Y' ) #NEWLINE#
json . loads ( s ) #NEWLINE#
df1 . reset_index ( ) #NEWLINE#
B = A [ [ 0 , 2 ] , [ 0 , 1 ] , [ 1 , 2 ] ] #NEWLINE#
os . system ( 'python#SPACE#yourfile.py' ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
edges . append ( ( m . group ( 1 ) , m . group ( 2 ) ) ) #NEWLINE#
set . intersection ( * map ( set , p ) ) #NEWLINE#
print ( repr ( line ) ) #NEWLINE#
with open ( 'test.txt' ) as f : #NEWLINE# #INDENT# f . write ( 'foo' ) #NEWLINE#
re . sub ( '^\\s+' , '' , 'a\n#SPACE#b\n#SPACE#c' , flags = re . MULTILINE ) #NEWLINE#
sys . exit ( ) #NEWLINE#
print ( '' . join ( lines ) ) #NEWLINE#
tuple ( [ 'hello' ] ) #NEWLINE#
[ main_list [ x ] for x in indexes ] #NEWLINE#
df . apply ( func , axis = 1 ) #NEWLINE#
[ '12' , '12.3' , '0' , '0.8' ] #NEWLINE#
parentId = models . ForeignKey ( 'CategoryModel' ) #NEWLINE#
sys . exit ( ) #NEWLINE#
print ( '%d' % 2 * 4 ) #NEWLINE#
f . newmethod ( ) #NEWLINE#
os . remove ( filename ) #NEWLINE#
event . categories . values ( 'pk' ) . annotate ( count = Count ( 'pk' ) ) #NEWLINE#
print ( '{0:d},#SPACE#{0:02X}' . format ( int ( ten ) ) ) #NEWLINE#
df . sort ( columns = [ 'Name' , 'rank' ] , inplace = True ) #NEWLINE#
print ( top [ 0 ] [ 1 ] ) #NEWLINE#
plt . contour ( X , Y , Z ) #NEWLINE#
bin ( int ( 'ff' , base = 16 ) ) [ 2 : ] #NEWLINE#
return { k : v for k , v in list ( d . items ( ) ) if k . startswith ( s ) } #NEWLINE#
root . mainloop ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
df . approxQuantile ( 'x' , [ 0.5 ] , 0.25 ) #NEWLINE#
print ( '{:\u3000>8s}' . format ( 'ありがとう' ) ) #NEWLINE#
"""»""" . encode ( 'iso8859-2' ) #NEWLINE#
s = sum ( a * b for a , b in zip ( list_1 , list_2 ) ) #NEWLINE#
list ( range ( 10 , 0 , - 1 ) ) #NEWLINE#
l1 . sort ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
stats . sort ( key = lambda x : ( - x [ 'K' ] , - x [ 'B' ] , x [ 'A' ] , x [ 'Z' ] ) ) #NEWLINE#
print ( '\n' . join ( [ 'I' , 'would' , 'expect' , 'multiple' , 'lines' ] ) ) #NEWLINE#
print ( df . groupby ( [ 'company' , 'end_date' ] ) . sum ( ) ) #NEWLINE#
return func ( * args [ : : - 1 ] ) #NEWLINE#
cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_COLOR ) . shape #NEWLINE#
clean = re . sub ( '[\x00\x80-ÿ]' , '' , dirty ) #NEWLINE#
nans , x = np . isnan ( y ) , lambda z : z . nonzero ( ) [ 0 ] #NEWLINE#
df . drop_duplicates ( ) #NEWLINE#
print ( unicodedata . normalize ( 'NFKD' , unicode_string ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
print ( 'a={0},b={1}' . format ( a , b ) ) #NEWLINE#
'%s#SPACE#%f#SPACE#%s' % ( '%d' , 0.1 , '%d#SPACE#%d' ) % ( 1 , 2 , 3 ) #NEWLINE#
main ( ) #NEWLINE#
list ( my_dataframe . columns . values ) #NEWLINE#
s = ',#SPACE#' . join ( [ ( str ( x ) + '#SPACE#' + str ( a [ x ] ) ) for x in a ] ) #NEWLINE#
a [ : , : , : : - 1 , : : - 1 ] #NEWLINE#
C = np . sum ( A [ : , : , : , ( np . newaxis ) ] * B [ : , ( np . newaxis ) , : , : ] , axis = 2 ) #NEWLINE#
df . groupby ( pd . Grouper ( freq = '2D' , level = - 1 ) ) #NEWLINE#
self . assertEqual ( response . get ( 'location' ) , '/url/we/expect' ) #NEWLINE#
ax1 . set_xticklabels ( [ ] ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSADRAIN , old ) #NEWLINE#
array ( [ 21.53 , 8.13 , 3.97 , 10.08 ] ) #NEWLINE#
writer . writerow ( [ 'a' , 'b' ] ) #NEWLINE#
yes_records_sample [ 'name' ] . isnull ( ) #NEWLINE#
b = [ x [ : ] for x in a ] #NEWLINE#
datetime . utcfromtimestamp ( timestamp1 ) #NEWLINE#
ds = xr . open_dataset ( path_file , chunks = { 'year' : 10 } ) #NEWLINE#
matches ( 'bears' , [ 'bea' , 'be' , 'ars' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( l , key = lambda x : x [ : - 1 ] + '{' if x [ - 1 ] . isdigit ( ) else x ) #NEWLINE#
urllib . request . urlopen ( 'http://google.com' ) . info ( ) . headers #NEWLINE#
self . button . clicked . connect ( self . handleButton ) #NEWLINE#
requests . get ( url , headers = headers ) #NEWLINE#
np . repeat ( np . repeat ( a , 2 , axis = 0 ) , 2 , axis = 1 ) #NEWLINE#
from module import * #NEWLINE#
fig . subplots_adjust ( bottom = 0.3 ) #NEWLINE#
a_b = list ( set ( a ) - set ( b ) ) #NEWLINE#
dparser . parse ( 'monkey#SPACE#2010-07-10#SPACE#love#SPACE#banana' , fuzzy = True ) #NEWLINE#
new_list . append ( f ( x ) ) #NEWLINE#
url ( '^' , include ( 'django.contrib.auth.urls' ) ) , #NEWLINE#
plt . show ( ) #NEWLINE#
Counter ( ngrams ( 'AAAAAAA' , 5 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
dfgb [ 'bar' ] . value_counts ( ) . unstack ( ) . fillna ( 0.0 ) #NEWLINE#
logging . debug ( 'This#SPACE#should#SPACE#go#SPACE#to#SPACE#the#SPACE#log#SPACE#file' ) #NEWLINE#
[ ( 2 , 'b' , 'and' ) , ( 3 , 'c' , 'me' ) ] #NEWLINE#
QtGui . QFrame . __init__ ( self ) #NEWLINE#
pycurl_connect . perform ( ) #NEWLINE#
Counter ( { 'a' : 5 , 'c' : 5 , 'b' : 5 } ) #NEWLINE#
df . interpolate ( 'index' ) . plot ( marker = 'o' ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( 'M' ) ) . first ( ) . rolling ( 2 ) . mean ( ) #NEWLINE#
sys . stdout . write ( '\rDoing#SPACE#thing#SPACE#%i' % i ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE#
struct . unpack ( '>H' , s ) #NEWLINE#
pd . to_datetime ( df [ 'time' ] ) #NEWLINE#
( ( s . iloc [ : : 2 ] . values + s . iloc [ 1 : : 2 ] ) / 2 ) . reset_index ( drop = True ) #NEWLINE#
df . ix [ 'x' , 'C' ] = 10 #NEWLINE#
list ( g ) #NEWLINE#
plt . show ( ) #NEWLINE#
any ( x > 10 for x in l ) #NEWLINE#
obj . __dict__ [ 'name' ] #NEWLINE#
powerset ( [ 4 , 5 , 6 ] ) #NEWLINE#
print ( repr ( a ) . decode ( 'unicode-escape' ) ) #NEWLINE#
print ( ( 'this' , 'is' , 'a' , 'test' ) ) #NEWLINE#
df . groupby [ 'year' , 'month' ] . Category . apply ( pd . value_counts ) #NEWLINE#
( vals == ( 0 , 1 ) ) . all ( axis = 1 ) #NEWLINE#
np . unravel_index ( np . argmax ( corr_img ) , corr_img . shape ) #NEWLINE#
text . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
element . click ( ) #NEWLINE#
s . strip ( ) . count ( '#SPACE##SPACE#' ) + 1 == len ( s . split ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'ID' ] = df [ 'ID' ] . apply ( lambda x : x . zfill ( 15 ) ) #NEWLINE#
writer . writerow ( map ( quote , row ) ) #NEWLINE#
pd . Series ( np . bincount ( np . arange ( s1 . size ) // 3 , s1 ) ) #NEWLINE#
requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
time . sleep ( 0.25 ) #NEWLINE#
del my_dict [ x ] #NEWLINE#
[ i for i in range ( len ( string ) ) if string . startswith ( 'test' , i ) ] #NEWLINE#
re . match ( '(?:(\\d+)Y)?(?:(\\d+)M)?' , text ) . groups ( ) #NEWLINE#
os . path . splitext ( 'name.fasta' ) #NEWLINE#
image = PIL . Image . open ( '14767594_in.png' ) #NEWLINE#
Entry . objects . filter ( weekdays = HasBit ( WEEKDAYS . fri ) ) #NEWLINE#
clr . AddReference ( 'MyAssembly' ) #NEWLINE#
any ( a_list ) #NEWLINE#
ftp . set_pasv ( False ) #NEWLINE#
d = dict ( zip ( l , t ) ) #NEWLINE#
os . listdir ( '/sys/class/net/' ) #NEWLINE#
lines = text_file . read ( ) . split ( ',' ) #NEWLINE#
locale . setlocale ( locale . LC_TIME , 'sv_SE' ) #NEWLINE#
__init__ . py #NEWLINE#
[ 1 , 'a' , None , 'b' , 2 , 'c' , 3 , 'd' , 'e' , 'f' , 'g' ] #NEWLINE#
list ( eval ( '0,#SPACE#0,#SPACE#0,#SPACE#11,#SPACE#0,#SPACE#0,#SPACE#0,#SPACE#11' ) ) #NEWLINE#
return 'a' * ( len ( s ) + 1 ) #NEWLINE#
appname = os . environ [ 'APPLICATION_ID' ] #NEWLINE#
{ i [ 0 ] : i [ 1 : ] for i in list1 } #NEWLINE#
df [ [ 'col2' , 'col3' ] ] = df [ [ 'col2' , 'col3' ] ] . apply ( pd . to_numeric ) #NEWLINE#
workbook = xlrd . open_workbook ( 'export_data.xls' , encoding_override = 'utf_16_le' ) #NEWLINE#
foo ( * t ) #NEWLINE#
subprocess . check_call ( [ 'python' , 'file.py' ] , stdout = f ) #NEWLINE#
os . system ( 'anything#SPACE#what#SPACE#you#SPACE#would#SPACE#like#SPACE#to#SPACE#do#SPACE#in#SPACE#the#SPACE#shell' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x <STR0> y , ( iam ( x ) for x in [ False , True , False ] ) ) #NEWLINE#
pd . merge_asof ( dfb , dfa , left_on = 'Timestamp' , right_on = 'StartTime' , by = 'Name' ) #NEWLINE#
send_task ( 'tasks.test_task' , task_id = task_id , queue = queue ) #NEWLINE#
array = np . fromiter ( iter ( result . items ( ) ) , dtype = dtype , count = len ( result ) ) #NEWLINE#
re . findall ( '([^.]*?apple[^.]*\\.)' , txt ) #NEWLINE#
"""""" . join ( c for c in string if c != "'" ) #NEWLINE#
print ( '' . join ( tree . xpath ( './/text()' ) ) ) #NEWLINE#
print ( '#SPACE#' . join ( output ) ) #NEWLINE#
dict ( my_list ) #NEWLINE#
plt . plot ( [ x ] , [ y ] , 'k.' ) #NEWLINE#
super ( Teenager , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ea . Reload ( ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#percentile(x,#SPACE#0.5)#SPACE#FROM#SPACE#df' ) #NEWLINE#
return sorted ( items , cmp = comparer ) #NEWLINE#
plt . show ( ) #NEWLINE#
return datetime ( dt . year , dt . month , 1 ) - timedelta ( days = 1 ) #NEWLINE#
bar ( ) #NEWLINE#
pd . value_counts ( d . values . ravel ( ) ) #NEWLINE#
int ( list ( filter ( str . isdigit , str1 ) ) ) #NEWLINE#
config . write ( open ( 'settings.conf' , 'w' ) ) #NEWLINE#
"""{}#SPACE#and#SPACE#{}""" . format ( 'string' , 1 ) #NEWLINE#
win . geometry ( '{}x{}+{}+{}' . format ( width , height , x , y ) ) #NEWLINE#
[ ( x , y ) for x , y in pairs if x != y ] #NEWLINE#
driver . get ( 'http://html5demos.com/drag' ) #NEWLINE#
x . add_argument ( '-b' , required = True ) #NEWLINE#
y = [ ( '%02d' % v ) for v in x ] #NEWLINE#
print ( path , f , os . path . getsize ( os . path . join ( path , f ) ) ) #NEWLINE#
q = Model . objects . filter ( Q ( field1 = f1 ) | Q ( field2 = f2 ) ) #NEWLINE#
fh . write ( 'Hello#SPACE#World:#SPACE#ä' . encode ( 'utf-8' ) ) #NEWLINE#
result [ k ] . append ( v ) #NEWLINE#
f . write ( '\n' . join ( altered_lines ) + '\n' ) #NEWLINE#
process . terminate ( ) #NEWLINE#
np . fromstring ( VIstring , sep = ',' ) #NEWLINE#
all ( el == 'hello' for el in x ) #NEWLINE#
print ( sys . argv [ 1 ] ) #NEWLINE#
print ( 'Not#SPACE#Found' ) #NEWLINE#
ax1 . plot ( x , y , 'ko' ) #NEWLINE#
plt . plot ( dat0 [ : , ( 0 ) ] , dat0 [ : , ( 1 ) ] ) #NEWLINE#
aapl . index . to_series ( ) . diff ( ) . median ( ) / ( 60 * 60 * 10 ** 9 ) #NEWLINE#
collections . Counter ( found ) [ 'E5' ] #NEWLINE#
ax . imshow ( masked_array , interpolation = 'nearest' , cmap = cmap ) #NEWLINE#
print ( '\n' . join ( lines ) ) #NEWLINE#
bids = [ int ( bid ) for bid in bids ] #NEWLINE#
[ '' , 'tt' , 'pf' , 'test' , 'v1' ] #NEWLINE#
output = [ value for value , count in list ( counts . items ( ) ) if count > 1 ] #NEWLINE#
fig . savefig ( 'output.png' ) #NEWLINE#
"""$Solución#SPACE#\\;#SPACE#{}\\;#SPACE#:\\;#SPACE#{}\\\\$""" . format ( i , value ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
plt . figure ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
A [ 0 ] is A [ 0 ] #NEWLINE#
singleitem = mylist . pop ( ) #NEWLINE#
hashlib . md5 ( 'thecakeisalie' ) . digest ( ) . decode ( 'iso-8859-1' ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#%s' % filename , fhandle . write ) #NEWLINE#
print ( str ( s . get_attribute ( 'textContent' ) ) ) #NEWLINE#
print ( re . sub ( '{[^{}]+}' , lambda x : x . group ( 0 ) . replace ( ',' , ';' ) , text ) ) #NEWLINE#
df . loc [ df [ 'x' ] == 10 , 'value' ] = 1000 #NEWLINE#
data = np . loadtxt ( filename , ndmin = 2 ) #NEWLINE#
min ( timeit . repeat ( lambda : dict ( ( k , v ) for d in ( x , y ) for k , v in list ( d . #NEWLINE# items ( ) ) ) ) ) #NEWLINE#
unidecode ( '影師嗎' ) #NEWLINE#
now_aware = unaware . replace ( tzinfo = pytz . UTC ) #NEWLINE#
writer . writerows ( data ) #NEWLINE#
form . fields [ 'myuser' ] . queryset = User . objects . filter ( groups__name__in = [ 'foo' ] ) #NEWLINE#
Foo . __table__ . insert ( ) . execute ( [ { 'bar' : 1 } , { 'bar' : 2 } , { 'bar' : 3 } ] ) #NEWLINE#
def rgb2hsv ( image ) : #NEWLINE# #INDENT# return image . convert ( 'HSV' ) #NEWLINE#
element . send_keys ( '123.00' ) #NEWLINE#
print ( '%.2f' % 5 ) #NEWLINE#
var = '%(foo)s#SPACE#%(foo)s#SPACE#%(foo)s' % { 'foo' : 'look_at_me_three_times' } #NEWLINE#
model . add ( Activation ( 'tanh' ) ) #NEWLINE#
brr [ : ] = brr [ : : - 1 ] #NEWLINE#
s . replace ( '\\' , '/' ) #NEWLINE#
return os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
ax . set_xlim ( 0 , 10 ) #NEWLINE#
s3 = boto3 . client ( 's3' , region_name = 'eu-central-1' ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
list2b == sorted ( list2b , key = lambda c : list1 . index ( c ) ) #NEWLINE#
print ( sys . argv [ 1 ] . lower ( ) ) #NEWLINE#
gtk . Window . __init__ ( self ) #NEWLINE#
print ( '{}#SPACE#{}#SPACE#{}#SPACE#{}' . format ( 3.5 , 2.5 , 5 , 7 ) ) #NEWLINE#
A [ : , ( 2 ) ] #NEWLINE#
print ( re . findall ( "\\'\\S+?\\':\\s*\\'?(.*?)\\'?(?:,|$)" , st ) ) #NEWLINE#
letters = '' . join ( [ choice ( ascii_lowercase ) for _ in range ( 5 ) ] ) #NEWLINE#
sudo ( 'git#SPACE#reset#SPACE#--hard#SPACE#HEAD' , user = 'web' ) #NEWLINE#
content = content . encode ( 'latin1' ) #NEWLINE#
plt . show ( ) #NEWLINE#
bytes ( int ( x , 0 ) for x in [ '0x28' , '0x0' , '0x0' , '0x0' ] ) #NEWLINE#
ctypes . addressof ( bufstr ) #NEWLINE#
sys . stdout . write ( RESET ) #NEWLINE#
q = Queue ( maxsize = 0 ) #NEWLINE#
[ [ 'MOM' , 'DAD' ] , [ 'GRAND' ] , [ 'MOM' , 'MAX' , 'JULES' ] ] #NEWLINE#
sound . Play ( wx . SOUND_ASYNC ) #NEWLINE#
import pandas as pd #NEWLINE# import numpy as np #NEWLINE#
np . concatenate ( [ a [ a == i ] [ : 2 ] for i in np . unique ( a ) ] ) #NEWLINE#
env . Command ( 'document.tex' , '' , 'python#SPACE#table_generator.py' ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
unittest . TextTestRunner ( ) . run ( suite ) #NEWLINE#
[ 'another#SPACE#event' , 'reading:#SPACE#25.5' , 'reading:#SPACE#25.1' ] #NEWLINE#
plot ( markx , marky , 'o' , color = 'blue' ) #NEWLINE#
find_majority ( [ 'a' , 'a' , 'b' ] ) #NEWLINE#
nodebox . __version__ #NEWLINE#
[ ( x + y ) for x , y in l ] #NEWLINE#
df [ 'datetime' ] = pd . to_datetime ( df [ 'timestamp' ] , unit = 's' ) #NEWLINE#
xy = np . vstack ( ( X . flatten ( ) , Y . flatten ( ) ) ) . T #NEWLINE#
urllib . parse . quote ( item . url ) #NEWLINE#
new_dict = dict ( ( k , v ) for k , v in list ( old_dict . items ( ) ) if v in #NEWLINE# allowed_values ) #NEWLINE#
json . loads ( output . decode ( 'string-escape' ) . strip ( '"' ) ) #NEWLINE#
df . groupby ( 'ID' ) [ 'Variable_1' ] . agg ( { 'Mean' : np . mean , 'SD' : np . std } ) #NEWLINE#
[ [ ch for ch in word ] for word in ( 'apple' , 'banana' , 'pear' , 'the' , 'hello' ) ] #NEWLINE#
ax . yaxis . tick_left ( ) #NEWLINE#
return func ( that , session , * args , ** kwargs ) #NEWLINE#
reactor . run ( ) #NEWLINE#
function ( * args , ** kwargs ) #NEWLINE#
sum ( letterGoodness . get ( c , 0 ) for c in yourstring . upper ( ) ) #NEWLINE#
all_ingredients = Ingredient . objects . filter ( recipe__book = my_book ) #NEWLINE#
lock = threading . Lock ( ) #NEWLINE#
canvas_obj = self . canvas . create_image ( 250 , 250 , image = tkimage ) #NEWLINE#
soup . find ( 'meta' , { 'name' : 'City' } ) #NEWLINE#
list ( d [ 'answer' ] for d in d_values ( a , 3 ) ) #NEWLINE#
self . button . grid ( row = 2 , column = 2 , sticky = W ) #NEWLINE#
exec ( compile ( open ( 'foo#SPACE#bar.py' ) . read ( ) , 'foo#SPACE#bar.py' , 'exec' ) ) #NEWLINE#
arr . argsort ( ) [ : 3 ] #NEWLINE#
cs . collections [ 0 ] . get_paths ( ) #NEWLINE#
np . any ( a == 2 , axis = 0 ) & np . any ( a == 5 , axis = 0 ) #NEWLINE#
q , bins = pd . qcut ( a , 2 , retbins = True ) #NEWLINE#
f . pack_propagate ( 0 ) #NEWLINE#
Matrix = [ [ ( 0 ) for x in range ( w ) ] for y in range ( h ) ] #NEWLINE#
pprint ( sorted ( ranks , key = lambda x : int ( x [ 'rank' ] . replace ( ',' , '' ) ) ) ) #NEWLINE#
sudo ( 'mkdir#SPACE#foo' ) #NEWLINE#
return n * factorial ( n - 1 ) #NEWLINE#
[ c for c in df if c [ 0 ] == 'd' ] #NEWLINE#
{ k : v for k , v in list ( metadata . items ( ) ) if v } #NEWLINE#
table . setItem ( rowPosition , 2 , QtGui . QTableWidgetItem ( 'text3' ) ) #NEWLINE#
self . axes = self . figure . add_subplot ( 111 ) #NEWLINE#
s . groupby ( s . notnull ( ) [ : : - 1 ] . cumsum ( ) [ : : - 1 ] ) . transform ( lambda g : g [ - 1 ] / g . size ) #NEWLINE#
k , v = list ( d . items ( ) ) [ 0 ] #NEWLINE#
mod = imp . load_source ( 'bar' , './foo/bar.py' ) #NEWLINE#
print ( 'success' ) #NEWLINE#
f . write ( 'running#SPACE#in#SPACE#the#SPACE#background!\n' ) #NEWLINE#
ax . set_title ( 'Order#SPACE#of#SPACE#Steps' ) #NEWLINE#
sys . path . append ( 'c:\\X\\Y\\Z' ) #NEWLINE#
[ 'a' , 'b' , 'x' , 'c' , 'd' , 'y' , 'e' , 'f' , 'g' , 'h' ] #NEWLINE#
session . query ( JT . aID ) . filter ( not_ ( JT . bID . in_ ( ids ) ) ) . all ( ) #NEWLINE#
datetime . datetime . today ( ) . replace ( hour = 0 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
{ { text | linebreaks } } #NEWLINE#
df [ 'PtsPerOrder' ] = df . groupby ( 'OrderNum' ) [ 'PtsPerLot' ] . transform ( sum ) #NEWLINE#
plt . show ( ) #NEWLINE#
Table . save ( 'NewTable.tab' ) #NEWLINE#
arr . sum ( axis = 0 , keepdims = True ) #NEWLINE#
print ( ( date_string , dt . date ( ) ) ) #NEWLINE#
[ sum ( l ) for l in l_o_l ] #NEWLINE#
next ( ( i for i , d in enumerate ( lod ) if 3 in d ) , None ) #NEWLINE#
dict ( [ [ 'two' , 2 ] , [ 'one' , 1 ] ] ) #NEWLINE#
driver . find_element_by_css_selector ( 'a[title="Click#SPACE#to#SPACE#Download"]' ) . click ( ) #NEWLINE#
np . average ( list ( map ( float , meanNumbers . split ( ) ) ) ) #NEWLINE#
s = 'svn#SPACE#cp#SPACE#{root_dir}/{trunk}/#SPACE#{root_dir}/{tag}/' . format ( ** locals ( ) ) #NEWLINE#
"""{0:b}""" . format ( 4660 ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
result = set ( d [ 0 ] ) . intersection ( * d ) #NEWLINE#
df . loc [ df [ 'is_isolated' ] , 'group' ] = - 1 #NEWLINE#
[ [ 0 , 1 , 3 , 4 ] , [ 2 , 5 , 6 , 7 , 8 , 10 ] ] #NEWLINE#
[ f for f in dir ( np . lib . financial ) if not f [ 0 ] == '_' ] #NEWLINE#
parser . add_argument ( '-V' , action = 'version' ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . after ( 100 , self . periodiccall ) #NEWLINE#
plt . hist ( x , bins = 50 , color = 'blue' ) #NEWLINE#
tree . write ( 'jerry_new.xml' ) #NEWLINE#
pickled_data . decode ( 'utf8' ) #NEWLINE#
df . fillna ( 0 , inplace = True ) #NEWLINE#
"""""" . join ( sorted ( set ( s ) ) ) #NEWLINE#
"""""" . join ( chr ( c ) for c in b ) . decode ( 'utf-16' ) #NEWLINE#
[ ( sum ( x ) / len ( x ) ) for x in zip ( * a ) ] #NEWLINE#
line = re . sub ( "([^'])'f'(.)" , '\\1THIS_IS_FALSE\\2' , line ) #NEWLINE#
a = np . insert ( a , 0 , 0 ) #NEWLINE#
mechanize . install_opener ( opener ) #NEWLINE#
output = os . linesep . join ( line for line in f if '#SPACE#' in line ) #NEWLINE#
instance . __class__ . __name__ #NEWLINE#
plt . show ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
os . system ( '/usr/bin/php#SPACE#example2.php#SPACE#whatastorymark' ) #NEWLINE#
[ [ 'google' , [ 'http://google.com' ] ] ] #NEWLINE#
os . startfile ( 'my_mp3.mp3' ) #NEWLINE#
b . unpack ( 'uintle:48,#SPACE#<H' ) #NEWLINE#
A . shape #NEWLINE#
raise ValidationError ( { 'field_name' : [ 'error#SPACE#message' ] } ) #NEWLINE#
d = dict ( zip ( keys , values ) ) #NEWLINE#
all ( c in '10' for c in aString ) and len ( aString ) == 8 #NEWLINE#
L = [ [ 1 , 2 , 3 , 0 ] , [ 4 , 5 , 6 , 0 ] ] #NEWLINE#
os . path . dirname ( '/test/one' ) #NEWLINE#
print ( urllib . parse . unquote ( query ) . decode ( 'utf8' ) ) #NEWLINE#
client . close ( ) #NEWLINE#
self . canvas . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
np . repeat ( data , data [ : , ( - 1 ) ] , axis = 0 ) #NEWLINE#
comport = sys . argv [ 2 ] #NEWLINE#
print ( now . year , now . month , now . day , now . hour , now . minute , now . second ) #NEWLINE#
[ ( '%s%02d' % t ) for t in zip ( b , a ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
l = [ ( 2 * x ) for x in l ] #NEWLINE#
all_data = np . concatenate ( ( my_data , new_col ) , 1 ) #NEWLINE#
outfile . write ( line ) #NEWLINE#
list ( range ( 101 , 6284 ) ) + [ 8001 , 8003 , 8010 ] + list ( range ( 10000 , 12322 ) ) #NEWLINE#
string = '' . join ( [ 'a' , 'b' , 'c' ] ) #NEWLINE#
connection . commit ( ) #NEWLINE#
line = ser . readline ( ) #NEWLINE#
pd . concat ( [ df ] , axis = 1 , keys = [ 'C' ] ) . swaplevel ( 0 , 1 , 1 ) #NEWLINE#
df . ix [ 1 , 'foo' ] #NEWLINE#
image = self . request . get ( 'Filedata' ) #NEWLINE#
df . to_sql ( 'demand_forecast_t' , engine , if_exists = 'replace' , chunksize = 10000 ) #NEWLINE#
subprocess . call ( [ 'open' , '-R' , apppath ] ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#count(*)#SPACE#FROM#SPACE#aTable' ) #NEWLINE#
sock . bind ( ( '' , MCAST_PORT ) ) #NEWLINE#
struct . pack ( 'H' , 824 ) #NEWLINE#
sorted ( my_list , key = attrgetter ( 'anniversary_score' ) ) #NEWLINE#
print ( db [ 'han' ] . __dict__ ) #NEWLINE#
plt . imshow ( data , interpolation = 'nearest' ) #NEWLINE#
full_tag = soup . findAll ( 'xyz' ) #NEWLINE#
needles = needle . split ( '*' ) #NEWLINE#
self . setLayout ( self . layout ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
ax . set_xlim ( 0 , 1 ) #NEWLINE#
[ 3 , 5 , 7 ] #NEWLINE#
parser . add_argument ( 'state' , choices = [ 'ON' , 'OFF' ] , nargs = '?' ) #NEWLINE#
len ( your_list ) != len ( set ( your_list ) ) #NEWLINE#
"""["accelerate",#SPACE#"acute",#SPACE#"bear",#SPACE#"big"#SPACE#...]""" #NEWLINE#
"""http://something.com/page?CONTENT_ITEM_ID=1234&param3""" . split ( '&' ) [ 0 ] #NEWLINE#
ax2 . set_zorder ( - 1 ) #NEWLINE#
ax1 . set_xlabel ( 'X#SPACE#data' ) #NEWLINE#
foo = [ { } for _ in range ( n ) ] #NEWLINE#
list ( s ) #NEWLINE#
return dict ( ( k , [ v [ 1 ] for v in itr ] ) for k , itr in grob ) #NEWLINE#
b = a . strip ( '/' ) #NEWLINE#
ftpobj . cwd ( '..' ) #NEWLINE#
pd . DataFrame ( { k : dict . fromkeys ( v , k ) for k , v in list ( dic . items ( ) ) } ) . T . fillna ( #NEWLINE# '-' ) #NEWLINE#
return lambda x : np . dot ( A , x ) - b #NEWLINE#
getattr ( foo , bar ) ( * params , ** keyword_params ) #NEWLINE#
Html_file . close ( ) #NEWLINE#
( a > 1 ) & ( a < 5 ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
os . system ( 'xdg-open#SPACE#"$file"' ) #NEWLINE#
ax1 . set_xlim ( - 4 , 4 ) #NEWLINE#
urllib . request . urlopen ( 'http://www.google.com' ) #NEWLINE#
list ( accumu ( [ 4 , 6 , 12 ] ) ) #NEWLINE#
[ [ 4 , 5 , 10 , 12 ] , [ 2 , 5 , 12 , 13 ] , [ 4 , 5 , 6 , 12 ] ] #NEWLINE#
xvfb = subprocess . Popen ( [ 'Xvfb' , ':99' , '-nolisten' , 'tcp' , '-fbdir' , tempdir ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
admin . site . register ( CustomUser , UserAdmin ) #NEWLINE#
np . multiply ( a , b [ : , ( np . newaxis ) ] ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
[ 'aah' , 'aha' , 'aah' , 'aha' , 'haa' , 'haa' ] #NEWLINE#
super ( ) . save ( ) #NEWLINE#
dev . leds ( ) #NEWLINE#
df [ 'Isin' ] = df . apply ( lambda r : int ( r . Number in r . Lists ) , axis = 1 ) #NEWLINE#
x = [ ( [ None ] * 5 ) for _ in range ( 6 ) ] #NEWLINE#
parser . add_argument ( '-f' , '--file' , nargs = 3 , action = 'append' ) #NEWLINE#
df = pd . concat ( list_of_dataframes ) #NEWLINE#
y = [ int ( val ) for val in x ] #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
img . save ( 'filename.jpg' ) #NEWLINE#
print ( 'key:#SPACE#%s#SPACE#,#SPACE#value:#SPACE#%s' % ( key , mydictionary [ key ] ) ) #NEWLINE#
re . findall ( '\\s' , s ) #NEWLINE#
re . sub ( '[^\\w\\-_\\.#SPACE#]' , '_' , 'some\\*-file._n\\\\ame' ) #NEWLINE#
target . close ( ) #NEWLINE#
re . search ( '\\d+|$' , '' ) . group ( ) #NEWLINE#
array ( [ [ 19 , 18 , 17 , 16 , 15 ] , [ 4 , 3 , 2 , 1 , 0 ] ] ) #NEWLINE#
np . where ( np . any ( a == 2 , axis = 0 ) & np . any ( a == 5 , axis = 0 ) ) #NEWLINE#
my_list = list ( range ( 1 , 1001 ) ) #NEWLINE#
new_list_of_lists = map ( list , map ( intify , list_of_lists ) ) #NEWLINE#
app . config [ 'SECURITY_REGISTERABLE' ] = True #NEWLINE#
self . sendLine ( pickle . dumps ( { 'size' : filesize , 'content' : contents [ : 20 ] } ) ) #NEWLINE#
sorted ( L , key = operator . itemgetter ( 1 ) ) #NEWLINE#
threading . Timer ( 2 , interrupt ) . start ( ) #NEWLINE#
list ( itertools . chain ( * lst ) ) #NEWLINE#
np . arange ( new [ 0 ] ) % old [ 0 ] #NEWLINE#
app . run ( ) #NEWLINE#
driver . quit ( ) #NEWLINE#
print ( len ( path ) - 1 ) #NEWLINE#
print ( nx . shortest_path ( graph , source = 'robots-0' , target = 'agency-15' ) ) #NEWLINE#
re . findall ( '(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])' , 'CamelCaseXYZ' ) #NEWLINE#
next ( i for i , d in enumerate ( lod ) if 3 in d ) #NEWLINE#
print ( b [ 0 ] ) #NEWLINE#
sys . stdout . write ( 'hi' ) #NEWLINE#
[ ( 2 , 5 ) , ( 12 , 17 ) ] #NEWLINE#
print ( df . loc [ i ] . reset_index ( ) ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#test' ) #NEWLINE#
B = np . reshape ( A , ( - 1 , ncols ) ) #NEWLINE#
my_fun ( a = 'abc' , b = 123 , c = 'def' ) #NEWLINE#
newImg1 . save ( 'img1.png' , 'PNG' ) #NEWLINE#
ip = self . request . remote_addr #NEWLINE#
writer . writerows ( a ) #NEWLINE#
df . stack ( ) . str . replace ( 'type#SPACE#' , '' ) . unstack ( ) #NEWLINE#
itemnumber = [ d [ 'itemnumber' ] for d in list_of_dicts ] #NEWLINE#
( ( 1 , 2 ) , ( 3 , 4 ) , 5 , 6 ) , #NEWLINE#
df . reset_index ( level = 1 , drop = True ) . stack ( ) . unstack ( ) #NEWLINE#
"""{0:,.2f}""" . format ( 123466666 ) #NEWLINE#
"""foo:bar:baz""" . rfind ( ':' ) #NEWLINE#
{ '_id' : 'id_1' , 'key_1' : 'value_1' , 'key_2' : 'value_2' } #NEWLINE#
struct . pack ( 'BBB' , * rgb ) . encode ( 'hex' ) #NEWLINE#
df = df . drop_duplicates ( ) #NEWLINE#
__table_args__ = { 'schema' : 'schema_name' } #NEWLINE#
mylist . insert ( 0 , mylist . pop ( 5 ) ) #NEWLINE#
file . write ( 'input' ) #NEWLINE#
f = lambda x : x * 2 #NEWLINE#
data . reshape ( N , Nt , N ) . transpose ( 0 , 2 , 1 ) #NEWLINE#
imshow ( data , interpolation = 'bicubic' ) #NEWLINE#
f . close ( ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
"""client:user:username:type:1234567""" . split ( ':' ) [ - 1 ] #NEWLINE#
format ( x , 'x' ) #NEWLINE#
PROJECT_ROOT = os . path . abspath ( os . path . dirname ( settings_dir ) ) #NEWLINE#
ax . set_title ( 'horizontal#SPACE#bar#SPACE#chart#SPACE#using#SPACE#matplotlib' ) #NEWLINE#
multi ( [ 'a' , 'b' ] , [ 'A' , 'B' ] , [ '1' , '2' ] , { } ) #NEWLINE#
[ 4 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 1 ] #NEWLINE#
max ( lod , key = lambda x : x [ 'score' ] ) #NEWLINE#
df [ 'date' ] . iget ( - 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
answer . extend ( map ( str , list ( range ( int ( start ) , int ( end ) + 1 ) ) ) ) #NEWLINE#
[ '[{"y":#SPACE#0,#SPACE#"x":#SPACE#0},#SPACE#{"y":#SPACE#1,#SPACE#"x":#SPACE#0}]' , [ { 'y' : 0 , 'x' : 0 } , { 'y' : 1 , 'x' : 0 } ] ] #NEWLINE#
f2 . write ( 'bar' ) #NEWLINE#
make_adder ( 5 ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
"""integer:#SPACE#{}#SPACE#float:#SPACE#{}#SPACE#string:#SPACE#{}""" . format ( 1 , 1.1 , 'blah' ) #NEWLINE#
list ( filter ( func , data ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
format ( 12345.678 , ',.2f' ) #NEWLINE#
plt . show ( ) #NEWLINE#
return HttpResponse ( pdf , 'application/pdf' ) #NEWLINE#
raise Exception ( 'cygwin_create_path#SPACE#failed' ) #NEWLINE#
[ ( a + ',' + b ) for a , b in zip ( A , B ) ] #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE#
print ( date_conv . strftime ( '%d.%m.%Y' ) ) #NEWLINE#
os . listdir ( '/tmp/foo' ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] ] #NEWLINE#
json . loads ( '{"a":{"a1":"{\\"foo\\":\\"bar\\",\\"foo1\\":\\"bar1\\"}"}}' ) #NEWLINE#
{ k : d1 [ k ] for k in set ( d1 ) . intersection ( l1 ) } #NEWLINE#
print ( s . split ( ',' ) ) #NEWLINE#
text_file . write ( '{},' . format ( snapshot_name ) ) #NEWLINE#
nx . topological_sort ( G ) #NEWLINE#
[ s for v in ( re . findall ( '\\d+|\\D+' , s ) for s in L ) for s in v ] #NEWLINE#
data = '' . join ( code [ i ] for i in data ) #NEWLINE#
return { 'color' : 'color' , 'message' : 'message' } #NEWLINE#
x = x . split ( ) #NEWLINE#
C [ 0 : 100 , 0 : 100 , : , : ] . sum ( axis = ( 2 , 3 ) ) #NEWLINE#
ax2 . plot ( x , y , 'ko' ) #NEWLINE#
sys . stdout . close ( ) #NEWLINE#
[ ast . literal_eval ( re . sub ( '\\b0+' , '' , pixel ) ) for pixel in pixels ] #NEWLINE#
idx = np . where ( xvalues == xvalues [ - 2 ] ) #NEWLINE#
df . loc [ ( df == 1 ) . any ( axis = 1 ) , df . filter ( regex = '^foo\\.' , axis = 1 ) . columns ] #NEWLINE#
str ( 'ï»¿t_11651497' ) #NEWLINE#
f . close ( ) #NEWLINE#
"""""" . join ( somestring . split ( '\\r' ) ) #NEWLINE#
[ ( x + y ) for x in 'catty' for y in 'pot' ] #NEWLINE#
[ ( x , y ) for x in L for y in L ] #NEWLINE#
model . transform ( df ) . select ( 'rawPrediction' , 'probability' ) . show ( 5 , False ) #NEWLINE#
contents = f . readlines ( ) #NEWLINE#
Mbox ( 'Your#SPACE#title' , 'Your#SPACE#text' , 1 ) #NEWLINE#
c = random . choice ( a ) #NEWLINE#
np . loadtxt ( 'cov.csv' , delimiter = ',' ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
d = datetime . today ( ) - timedelta ( days = days_to_subtract ) #NEWLINE#
function_dictionary [ 'capitalize' ] ( 'word' ) #NEWLINE#
L . sort ( ) #NEWLINE#
soup . find_all ( 'a' , text = re . compile ( '^[pP]rice' ) ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
driver . quit ( ) #NEWLINE#
cleanedHost = re . sub ( '[^a-zA-Z0-9]+' , '' , host ) #NEWLINE#
plt . show ( ) #NEWLINE#
createkey = '_' . join ( sorted ( [ str ( wi ) for wi in wordids ] ) ) #NEWLINE#
print ( win32gui . GetWindowText ( hwnd ) ) #NEWLINE#
a = '123' if b else '456' #NEWLINE#
print ( ZipFile ( path ) . namelist ( ) ) #NEWLINE#
return '' . join ( [ str ( random . randint ( 0 , 9 ) ) for i in range ( x ) ] ) #NEWLINE#
assertTrue ( text in self . driver . page_source ) #NEWLINE#
[ l for l in list_dirs if l . split ( '\\' ) [ - 1 ] not in unwanted_files ] #NEWLINE#
yield os . path . join ( name , path ) #NEWLINE#
print ( 'utf-16#SPACE#w/#SPACE#BOM#SPACE#decoded#SPACE#with#SPACE#utf-16le#SPACE##SPACE#%r' % e16 . decode ( 'utf-16le' ) ) #NEWLINE#
np . in1d ( a [ : , ( 2 ) ] , list ( b ) ) #NEWLINE#
pd . to_datetime ( s , format = '%d/%m/%Y' ) #NEWLINE#
df . loc [ mask ] #NEWLINE#
naive_local_dt = aware_dt . astimezone ( ) . replace ( tzinfo = None ) #NEWLINE#
return n if n <= 1 else fibo ( n - 1 ) + fibo ( n - 2 ) #NEWLINE#
{ k : v for k , v in list ( d1 . items ( ) ) if k in l1 } #NEWLINE#
file1 = dict ( l . strip ( ) . split ( ':' ) for l in open ( 'file1' , 'r' ) ) #NEWLINE#
MySQLdb . connect ( '127.0.0.1' , 'root' , '' , 'db' ) #NEWLINE#
MySQLdb . connect ( 'localhost' , 'root' , '' , 'db' ) #NEWLINE#
help ( bar ) #NEWLINE#
writer . writerow ( [ 'number' , 'text' , 'number' ] ) #NEWLINE#
re . findall ( '[A-Z]?[a-z]+|[A-Z]+(?=[A-Z]|$)' , 'camelCaseXYZ' ) #NEWLINE#
re . findall ( '[A-Z](?:[a-z]+|[A-Z]*(?=[A-Z]|$))' , 'CamelCaseXYZ' ) #NEWLINE#
setattr ( self , key , kwargs [ key ] ) #NEWLINE#
L [ i : i + 2 ] = reversed ( L [ i : i + 2 ] ) #NEWLINE#
user . save ( ) #NEWLINE#
name = 'b' + str ( num ) #NEWLINE#
pylab . text ( max_x , max_y , str ( ( max_x , max_y ) ) ) #NEWLINE#
df = df . dropna ( subset = [ 'comments' ] ) #NEWLINE#
df_with_no_strings = df [ ~ rows_with_strings ] #NEWLINE#
urlpatterns += patterns ( '' , ( '^admin/(.*)' , include ( admin . site . urls ) ) ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 8 , 0 , 0 ] #NEWLINE#
cursor . execute ( stmt ) #NEWLINE#
driver . get ( 'http://testurl' ) #NEWLINE#
df . a + '~' + df . b + '~' + ( df . c * 1 ) . astype ( str ) #NEWLINE#
numpy . matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
print ( dateatt . get_attribute ( 'title' ) ) #NEWLINE#
del foo . fields [ - 1 ] #NEWLINE#
df = pd . read_csv ( filename , error_bad_lines = False ) #NEWLINE#
'%s#SPACE#%s' % ( 'hello' , 'world' ) #NEWLINE#
results . setdefault ( i , [ ] ) . append ( benchmark ( i ) ) #NEWLINE#
prev = driver . find_element_by_xpath ( "//a[text()='Previous']" ) #NEWLINE#
print ( '你好' . encode ( 'utf-8' ) . decode ( 'mbcs' ) ) #NEWLINE#
pivoted . cumsum ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( str ( n ) for n in range ( 10 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( 'temp1:' , '+' , '31.0' , '+' , '107.0' ) ] #NEWLINE#
pool = mp . Pool ( processes = 1 ) #NEWLINE#
A [ B == 1.0 ] . sum ( ) #NEWLINE#
solve ( numericoperand ( 1 ) , min ( min ( a ) ) , 'a' ) #NEWLINE#
return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) ) #NEWLINE#
kwargs [ 'db_index' ] = True #NEWLINE#
( y [ : , ( None ) ] * x [ ... , None ] ) . reshape ( x . shape [ 0 ] , - 1 ) #NEWLINE#
myList = input ( ) . split ( ) #NEWLINE#
len ( re . findall ( '(?=(%s))' % re . escape ( needle ) , haystack ) ) #NEWLINE#
list ( source_list ) == zip ( * zip ( * source_list ) ) #NEWLINE#
file . write ( 'input' ) #NEWLINE#
p . stdin . write ( "source('myrscript.R')\n" ) #NEWLINE#
p . stdin . write ( 'myfirstinput\n' ) #NEWLINE#
df . filter ( regex = '^((?!prefix).)*$' ) #NEWLINE#
print ( s [ 1 : ] ) #NEWLINE#
[ 'cube' , 'is_local' , 'square' ] #NEWLINE#
br . set_handle_referer ( True ) #NEWLINE#
""",#SPACE#""" . join ( [ '{0}#SPACE#({1})' . format ( x [ 0 ] , x [ 1 ] ) for x in a ] ) #NEWLINE#
plt . rcParams [ 'keymap.save' ] = '' #NEWLINE#
sys . stdout . write ( '\x08' ) #NEWLINE#
browser . get ( 'some_url_I_need' ) #NEWLINE#
plt . show ( ) #NEWLINE#
Model . objects . using ( 'uncommitted_db' ) . all ( ) #NEWLINE#
verts = [ None ] * 1000 #NEWLINE#
dict ( zip ( ( 'one' , 'two' ) , ( 1 , 2 ) ) ) #NEWLINE#
ax [ 2 ] . set_title ( 'numpy#SPACE#masked' ) #NEWLINE#
l = [ dict ( zip ( [ 1 ] , [ x ] ) ) for x in range ( 1 , 100 ) ] #NEWLINE#
ax . zaxis . set_major_locator ( LinearLocator ( 10 ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
pkl_file . close ( ) #NEWLINE#
cv2 . imshow ( 'cropped' , crop_img ) #NEWLINE#
list ( gen_items ( ) ) #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . sum ( axis = 1 ) . sum ( ) ) #NEWLINE#
itertools . permutations ( [ 2 , 3 , 4 ] ) #NEWLINE#
any ( map ( lambda v : v in list2 , list1 ) ) #NEWLINE#
print ( some_object . __repr__ ( ) ) #NEWLINE#
a = int ( '0' + someString ) #NEWLINE#
np . where ( ( A > 2 ) & ( A < 8 ) ) #NEWLINE#
print ( et . tostring ( tree ) ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#axis' ) #NEWLINE#
return HttpResponse ( json . dumps ( data ) ) #NEWLINE#
raise cherrypy . HTTPError ( '403#SPACE#Forbidden' ) #NEWLINE#
mydic = { i : o [ 'name' ] } #NEWLINE#
sns . factorplot ( 'size' , 'total_bill' , col = 'smoker' , data = tips_all , kind = 'point' ) #NEWLINE#
datetime . strptime ( '' . join ( iso_ts . rsplit ( ':' , 1 ) ) , '%Y-%m-%dT%H:%M:%S%z' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( 'Valid' ) #NEWLINE#
app . debug = True #NEWLINE#
s . getvalue ( ) #NEWLINE#
ax . set_yticks ( ax . get_yticks ( ) [ : - 1 ] ) #NEWLINE#
return self . order_by ( 'id' ) #NEWLINE#
df_output_lines = [ s . split ( ) for s in os . popen ( 'df#SPACE#-Ph' ) . read ( ) . splitlines ( ) ] #NEWLINE#
pool . terminate ( ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'affiche_all' , devise = ( 'EURO' , ) ) ) #NEWLINE#
a , b , c = func ( ) #NEWLINE#
[ ( 1 , 2 ) ] #NEWLINE#
df . idxmax ( ) . reset_index ( ) . rename ( columns = { 'index' : 'animal' , ( 0 ) : 'idx' } ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : ( x + y ) / 2 , list_of_nums ) #NEWLINE#
np . int32 ( 2971215073 ) #NEWLINE#
raise ValueError ( 'Invalid#SPACE#nargout!' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } ) #NEWLINE#
s . index [ s . rolling ( 3 ) . apply ( np . argmax ) [ 2 : ] . astype ( int ) + np . arange ( len ( s ) - 2 ) ] #NEWLINE#
im = Image . fromarray ( my_array . reshape ( ( 50 , 50 ) ) . astype ( 'uint8' ) * 255 ) #NEWLINE#
numpy . logical_not ( array ) #NEWLINE#
json . dumps ( dict ( foo = 42 ) ) #NEWLINE#
b = np . array ( [ a [ i ] for i in range ( m . shape [ 0 ] ) if i not in indices ] ) #NEWLINE#
ax . plot ( xx , yy , zorder = 100 , linewidth = 3 , color = 'red' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : ( x [ 0 ] + y [ 0 ] , x [ 1 ] + y [ 1 ] ) , nums ) #NEWLINE#
t . strftime ( '%m/%d/%Y' ) #NEWLINE#
print ( sorted ( [ Card ( c [ 0 ] , c [ 1 ] ) for e in a for c in e ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
b [ 2 : 5 ] = [ 1 ] * 3 #NEWLINE#
print ( json . dumps ( data , indent = 4 ) ) #NEWLINE#
df [ [ 'ID_1' , 'ID_2' , 'ID_3' ] ] . apply ( lambda_function ) #NEWLINE#
myf . close ( ) #NEWLINE#
print ( 'self#SPACE#class:#SPACE#' + self . __class__ . __name__ ) #NEWLINE#
plt . scatter ( x , y , color = next ( colors ) ) #NEWLINE#
webapp2 . request . get ( '[parameter]' , '[optionalDefaultValue]' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'no_no' ) #NEWLINE#
myDict = { 'john' : 'johns#SPACE#value' , 'jeff' : 'jeffs#SPACE#value' } #NEWLINE#
root . mainloop ( ) #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
len ( s ) - len ( s . lstrip ( ) ) #NEWLINE#
df . index = pd . Series ( df . index ) . fillna ( method = 'ffill' ) #NEWLINE#
map ( s . __setitem__ , a , m ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( map ( chr , [ 65 , 66 , 67 ] ) ) #NEWLINE#
br . find_control ( 'live' ) . items [ 0 ] . selected = True #NEWLINE#
f ( [ 1 , 1 , 2 ] , [ 1 , 1 ] ) #NEWLINE#
cls . dosomethingelse ( ) #NEWLINE#
'Dear#SPACE#Student,#SPACE#\r\n#SPACE#Please#SPACE#send#SPACE#your#SPACE#report\r\n#SPACE#Thank#SPACE#you#SPACE#for#SPACE#your#SPACE#attention' #NEWLINE#
Image . composite ( image , Image . new ( 'RGB' , image . size , 'white' ) , image ) . show ( ) #NEWLINE#
mpl . rcParams [ 'savefig.directory' ] = os . chdir ( os . path . dirname ( __file__ ) ) #NEWLINE#
ax . set_ylim ( ylim ) #NEWLINE#
CELERY_IMPORTS = os . getenv ( 'CELERY_IMPORTS#SPACE##SPACE#' , 'default.package' ) #NEWLINE#
WSGIApplicationGroup % { GLOBAL } #NEWLINE#
yourmodule . py #NEWLINE#
info = json . loads ( json . loads ( get_info ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
fig . subplots_adjust ( hspace = 0.5 ) #NEWLINE#
output . write ( new_line ) #NEWLINE#
a = numpy . array ( b ) #NEWLINE#
painter . restore ( ) #NEWLINE#
br . form [ 'type' ] = [ '22' ] #NEWLINE#
"""""" . join ( [ ( next ( replacer ) if c == '@' else c ) for c in s ] ) #NEWLINE#
globals ( ) #NEWLINE#
driver . switch_to_window ( window_after ) #NEWLINE#
df . drop ( 'amount_abs' , axis = 1 , inplace = True ) #NEWLINE#
search_img ( 'book' , 'iMgXS.jpg' ) #NEWLINE#
logging . info ( 'Log#SPACE#Entry#SPACE#Here.' ) #NEWLINE#
type ( boardsize ) #NEWLINE#
eval ( '9**9**9**9**9**9**9**9' , { '__builtins__' : None } ) #NEWLINE#
f . close ( ) #NEWLINE#
ax2 . set_rlim ( [ 0 , 1 ] ) #NEWLINE#
ax . xaxis . set_major_formatter ( formatter ) #NEWLINE#
st = st [ : - 1 ] #NEWLINE#
sys . path . append ( os . path . realpath ( '..' ) ) #NEWLINE#
'\x00\x83\x00é\x06version=Baystation+12&mode=traitor&respawn=0&enter=1&vote=1&ai=1&host&players=7&player0=Kosherman&player1=Ghazkull&player2=Doug+H.+Nuts&player3=Lord+Braindead&player4=KirbyElder&player5=Master+of+Apples&player6=Cacophony&end=%23end\x00' #NEWLINE#
soupHandler . findAll ( 'div' , id = re . compile ( '^post-$' ) ) #NEWLINE#
total = sum ( int ( v ) for name , v in table ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Last:#SPACE#' , list [ - 1 ] ) #NEWLINE#
print ( '' . join ( '%02x' % ord ( c ) for c in text ) ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return np . hstack ( np . meshgrid ( * L ) ) . swapaxes ( 0 , 1 ) . reshape ( ndims , - 1 ) . T #NEWLINE#
[ ( sum ( group ) / size ) for group in zip ( * ( data [ x : : size ] for x in range ( size ) ) ) ] #NEWLINE#
count = doc . xpath ( 'count(//author)' ) #NEWLINE#
plt . plot ( x , y , label = 'Data#SPACE#\\cite{<key>}' ) #NEWLINE#
print ( os . lseek ( fd , 0 , os . SEEK_CUR ) ) #NEWLINE#
[ x for x in string . letters if x in ( y for y in 'BigMan#SPACE#on#SPACE#campus' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
h . sub ( 'h' , 'f' ) . sub ( 'f' , 'h' ) #NEWLINE#
list ( product ( [ a , b , c , d ] , [ x ] ) ) #NEWLINE#
re . compile ( '(.*)(?<!\\1)' ) #NEWLINE#
a . sum ( 1 ) / ( a != 0 ) . sum ( 1 ) #NEWLINE#
strIntersection ( 'asdfasdfasfd' , 'qazwsxedc' ) #NEWLINE#
my_string . format ( name = 'minerz029' ) #NEWLINE#
os . system ( 'PowerShell#SPACE#Mount-DiskImage#SPACE#C:\\path\\ConsumerPreview-32bit.iso' ) #NEWLINE#
var = None #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
return webdriver . Firefox ( firefox_profile = fp ) #NEWLINE#
sum ( 1 for x in l if x ) #NEWLINE#
d [ 'new#SPACE#column' ] = d . apply ( lambda row : func ( row ) , axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( chr ( 4 ) ) #NEWLINE#
[ [ 1 , 4 , 7 ] , [ 2 , 5 , 8 ] , [ 3 , 6 , 9 ] ] #NEWLINE#
print ( 'The#SPACE#total#SPACE#defects#SPACE#for#SPACE#date#SPACE#{}#SPACE#is#SPACE#{}' . format ( d , count ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
pd . concat ( [ data , ts ] ) . sort_index ( ) . interpolate ( ) [ ts . index ] #NEWLINE#
math . sqrt ( x ) #NEWLINE#
[ ( d [ 'id' ] , d [ 'name' ] ) for d in l ] #NEWLINE#
a . xaxis . set_minor_formatter ( ticker . FixedFormatter ( [ '1' , '2' , '3' , '4' , '5' ] ) ) #NEWLINE#
np . set_printoptions ( formatter = { 'float_kind' : float_formatter } ) #NEWLINE#
lambda x , y : ( x + y , x - y ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] [ : : - 1 ] #NEWLINE#
json . dump ( data , fp , sort_keys = True , indent = 4 ) #NEWLINE#
ax . xaxis . set_minor_locator ( mdates . MonthLocator ( ) ) #NEWLINE#
exec ( '%s#SPACE#=#SPACE#%d' % ( x , 2 ) ) #NEWLINE#
print ( 'The#SPACE#average#SPACE#is:#SPACE#{:.1%}' . format ( average ) ) #NEWLINE#
print ( ( lbl . winfo_width ( ) , lbl . winfo_height ( ) ) ) #NEWLINE#
pos = nx . graphviz_layout ( G , prog = 'dot' ) #NEWLINE#
parser . add_argument ( 'files' , nargs = '*' ) #NEWLINE#
a [ np . mod ( np . arange ( a . size ) , 4 ) != 0 ] #NEWLINE#
pass #NEWLINE#
np . where ( np . isclose ( a , val , tol ) ) #NEWLINE#
"""C:\\mydir""" #NEWLINE#
logger . info ( 'test2' ) #NEWLINE#
sorted ( list_of_ips , key = lambda ip : struct . unpack ( '!L' , inet_aton ( ip ) ) [ 0 ] ) #NEWLINE#
map ( '' . join , itertools . product ( string . ascii_letters + string . digits , repeat = 3 ) ) #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
c = np . multiply ( a , b [ : , ( None ) ] ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
do_stuff ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( p . communicate ( answer ) [ 0 ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
df = pd . read_csv ( data , delimiter = '\\|\\||!!' , skiprows = 1 ) #NEWLINE#
widget . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( unicodedata . normalize ( 'NFKD' , s ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
np . partition ( data , - 5 , order = 'f1' ) [ - 5 : ] [ : : - 1 ] #NEWLINE#
[ p for p in process_list if all ( e not in p for e in exclude_list ) ] #NEWLINE#
logging . debug ( 'test' ) #NEWLINE#
np . random . multinomial ( 1e+18 , [ 1e-17 , 1 ] ) #NEWLINE#
results = pool . map_async ( slowly_square , list ( range ( 40 ) ) ) . get ( 9999999 ) #NEWLINE#
bad = [ x for x in mylist if x not in goodvals ] #NEWLINE#
dict [ 'Apple' ] #NEWLINE#
plt . show ( ) #NEWLINE#
num_list [ - 9 : ] #NEWLINE#
decimal . Decimal ( '1.1' ) #NEWLINE#
parser . parse_args ( [ ( '--' + p if '=' in p else p ) for p in sys . argv [ 1 : ] ] ) #NEWLINE#
map ( f , my_list ) #NEWLINE#
attacks = [ 'Punch' , 'Kick' , 'Stab' , 'Throw' , 'Fling' , 'Uppercut' ] #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
"""#TAB##TAB##TAB#""" . join ( ( '\n' + myStr . lstrip ( ) ) . splitlines ( True ) ) #NEWLINE#
self . redirect ( newurl ) #NEWLINE#
return np . vstack ( [ np . array ( u ) for u in set ( [ tuple ( p ) for p in points ] ) ] ) #NEWLINE#
d = dict ( ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
dict ( i . split ( '@' ) for i in my_list ) #NEWLINE#
[ rex . split ( i ) for i in sequence_list ] #NEWLINE#
struct . pack_into ( '=III' , buf , 0 , 1 , 2 , 3 ) #NEWLINE#
D [ ( idx ) , : ] #NEWLINE#
escaped_winpath = '%r' % winpath #NEWLINE#
db . session . commit ( ) #NEWLINE#
foo [ arange ( 3 ) ] #NEWLINE#
im . write ( 'file_out-' + str ( p ) + '.png' ) #NEWLINE#
print ( '{},#SPACE#{},#SPACE#{}' . format ( foo , bar , baz ) ) #NEWLINE#
ax . set_yscale ( 'log' ) #NEWLINE#
"""#SPACE##SPACE##SPACE#hello#SPACE#world#SPACE#with#SPACE#2#SPACE#spaces#SPACE#and#SPACE#a#SPACE#tab!""" . lstrip ( '#SPACE#' ) #NEWLINE#
nf . write ( '' . join ( str ( random . randint ( 0 , 1000 ) ) for _ in range ( 1000 ) ) ) #NEWLINE#
print ( ',#SPACE#' . join ( lst [ : - 1 ] ) + '#SPACE#&#SPACE#' + lst [ - 1 ] ) #NEWLINE#
hash ( repr ( d ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
{ d [ 0 ] : d [ 1 : ] for d in data } #NEWLINE#
os . makedirs ( 'folder/subfolder/' ) #NEWLINE#
print ( 'Key#SPACE#pressed:#SPACE#%s' % msvcrt . getch ( ) ) #NEWLINE#
np . delete ( a , list ( range ( 0 , a . shape [ 0 ] , 8 ) ) , axis = 0 ) #NEWLINE#
pdf = pisa . pisaDocument ( StringIO . StringIO ( html . encode ( 'UTF-8' ) ) , result ) #NEWLINE#
list ( reversed ( sorted ( a . keys ( ) ) ) ) #NEWLINE#
dict ( ( v , v ** 2 ) for v in l ) #NEWLINE#
cv2 . namedWindow ( 'preview' ) #NEWLINE#
print ( '---#SPACE#%s#SPACE#seconds#SPACE#---' % ( time . time ( ) - start_time ) ) #NEWLINE#
age_list = [ int ( a [ 0 ] ) for a in ages_iterator ] #NEWLINE#
fig . suptitle ( 'Title#SPACE#for#SPACE#whole#SPACE#figure' , fontsize = 16 ) #NEWLINE#
potion_names = [ p . name for p in list_of_potions ] #NEWLINE#
ax . xaxis . set_minor_locator ( minor_locator ) #NEWLINE#
df = df . apply ( lambda x : x . str . strip ( ) ) . replace ( '' , np . nan ) #NEWLINE#
print ( json_dumps ( d , ensure_ascii = False ) . encode ( 'utf-8' ) ) #NEWLINE#
np . array ( zip ( list1 , list2 , list3 ) ) #NEWLINE#
print ( today . replace ( year = today . year + 1 ) ) #NEWLINE#
pd . concat ( [ s , pd . rolling_mean ( s , window = 4 , min_periods = 1 ) ] , axis = 1 ) #NEWLINE#
bin ( int ( 'ff' , base = 16 ) ) . lstrip ( '0b' ) #NEWLINE#
print ( '#SPACE#"A#SPACE#word#SPACE#that#SPACE#needs#SPACE#quotation#SPACE#marks"#SPACE#' ) #NEWLINE#
C = np . einsum ( 'ia,jb->abij' , M . conj ( ) , M ) #NEWLINE#
self . button [ i ] . grid ( sticky = W + E + N + S , row = row , column = col , padx = 1 , pady = 1 ) #NEWLINE#
df = sids . get_historical ( 'PX_LAST' , '1/1/2014' , '11/12/2014' ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
print ( dt . strftime ( '%d/%m/%Y' ) ) #NEWLINE#
np . tensordot ( a , b , axes = 1 ) #NEWLINE#
p . write ( str ( int ( enable ) ) + '\n' ) #NEWLINE#
[ list ( t ) for t in zip ( * ( [ iter ( list ( range ( 1 , 10 ) ) ) ] * 3 ) ) ] #NEWLINE#
( df - 0.2 ) . round ( ) #NEWLINE#
'abc' + str ( 9 ) #NEWLINE#
writer . writerow ( [ 'foo' , 'foo,bar' , 'bar' ] ) #NEWLINE#
function_that_needs_strings ( * my_list ) #NEWLINE#
print ( etree . tostring ( root ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
matched_lines = [ line for line in my_string . split ( '\n' ) if 'substring' in line ] #NEWLINE#
len ( re . findall ( '[A-Z]' , string ) ) #NEWLINE#
run ( 'localhost' , 8080 ) #NEWLINE#
print ( os . environ [ 'USER' ] ) #NEWLINE#
t . split ( 'Total#SPACE#Value:' ) [ 0 ] #NEWLINE#
datetime . datetime . fromtimestamp ( 1258378322.0 ) #NEWLINE#
shutil . copy2 ( file , 'א' ) #NEWLINE#
shutil . copy2 ( file , '.' ) #NEWLINE#
im = Image . open ( f ) #NEWLINE#
{ 'list#SPACE#key' : [ 1 , 2 , 3 ] } #NEWLINE#
pylab . fill_between ( x , y2 , color = 'red' ) #NEWLINE#
json_data = json . loads ( request . POST . get ( 'mydata' , '{}' ) ) #NEWLINE#
df . mask ( np . random . choice ( [ True , False ] , size = df . shape , p = [ 0.2 , 0.8 ] ) ) #NEWLINE#
[ x for x in l1 if tuple ( x ) in intersection ] #NEWLINE#
sorted ( l , key = lambda x : x . rsplit ( None , 1 ) [ - 1 ] ) #NEWLINE#
root . title ( 'Your#SPACE#title#SPACE#here' ) #NEWLINE#
a , b = 5 , 8 #NEWLINE#
print ( pd . concat ( [ df1 , df2 , df3 ] , keys = [ 'A' , 'B' , 'C' ] ) ) #NEWLINE#
re . sub ( pattern , '' , s ) #NEWLINE#
subprocess . Popen ( cmd , shell = True , stdout = f , stderr = f ) #NEWLINE#
ct . reindex_axis ( a_x_b , axis = 1 ) . fillna ( 0 ) #NEWLINE#
print ( a [ 1 ] [ 1 ] ) #NEWLINE#
return sum ( 1 + count ( i ) for i in l if isinstance ( i , list ) ) #NEWLINE#
[ ( n [ 'name' ] , n [ 'value' ] ) for n in soup . findAll ( 'input' ) ] #NEWLINE#
print ( func ( * args ) ) #NEWLINE#
print ( doc . findAll ( 'a' , { 'class' : 'gp-share' } ) ) #NEWLINE#
numpy . savetxt ( filename , a , newline = '#SPACE#' ) #NEWLINE#
weird . encode ( 'latin1' ) . decode ( 'utf8' ) #NEWLINE#
np . random . shuffle ( dataset ) #NEWLINE#
map ( dict , list ( dict ( sorted ( map ( sorted , map ( dict . items , s ) ) ) ) . items ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
float ( '1.03' ) #NEWLINE#
print ( 'Prob#SPACE#for#SPACE#{}#SPACE#is#SPACE#{}' . format ( k , sum ( i * j for i , j in zip ( v , values ) ) ) ) #NEWLINE#
logging . getLogger ( ) . info ( 'BB' ) #NEWLINE#
X . T [ : , : , ( None ) ] * X . T [ : , ( None ) ] #NEWLINE#
df . fillna ( df . mean ( ) ) #NEWLINE#
print ( 'Decoded#SPACE#String:#SPACE#' + decoded . decode ( 'base64' , 'strict' ) ) #NEWLINE#
[ ( x and int ( x ) or 0 ) for x in s . split ( ',' ) ] #NEWLINE#
app . run ( threaded = True ) #NEWLINE#
file = open ( 'D:\\zzzz\\names2.txt' , 'r' , encoding = 'utf-8-sig' ) #NEWLINE#
from globals import * #NEWLINE#
id . sendcontrol ( 'm' ) #NEWLINE#
return JsonResponse ( { 'key' : 'value' } ) #NEWLINE#
a . split ( ) #NEWLINE#
_create_index_name ( 'people' , [ 'c1' , 'c2' , 'c3' ] , '_uniq' ) #NEWLINE#
print ( '[{one},#SPACE#{two},#SPACE#{three}]' . format ( three = 3 , two = 2 , one = 1 ) ) #NEWLINE#
s . to_frame ( 'Count' ) . to_csv ( 'output.csv' , header = True , index_label = 'Gene_Name' ) #NEWLINE#
plt . show ( ) #NEWLINE#
turtle . pendown ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
print ( m . group ( ) ) #NEWLINE#
max ( index for index , value in data if value == max_value ) #NEWLINE#
print ( chr ( 1 + ord ( 'அ' ) ) ) #NEWLINE#
mylist . sort ( key = lambda val : SORT_ORDER [ val [ 1 ] ] ) #NEWLINE#
row . append ( row [ 0 ] ) #NEWLINE#
[ name for name in names if any ( [ ( p in name ) for p in pattern ] ) ] #NEWLINE#
count = np . all ( listScore == np . array ( [ 2 , 0 ] ) , axis = 1 ) . sum ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
check_call ( [ 'useradd' , 'test' ] ) #NEWLINE#
plt . plot ( xs , ys , 'r-' ) #NEWLINE#
np . cross ( a [ None ] , b [ : , ( None ) ] ) #NEWLINE#
list ( filter ( func , data ) ) #NEWLINE#
os . chdir ( os . path . dirname ( setup_file ) ) #NEWLINE#
print ( customer . attrib [ 'NAME' ] ) #NEWLINE#
f1 ( 'a' , 'b' , 'c' , 'd' , kw1 = 'keyw1' , kw2 = 'keyw2' ) #NEWLINE#
arr = np . arange ( 10 ) . reshape ( 5 , 2 ) #NEWLINE#
plt . scatter ( x , y , c = t , cmap = 'cmap_name_r' ) #NEWLINE#
random . shuffle ( data ) #NEWLINE#
s . rstrip ( ';' ) . split ( ';' ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . system ( 'start#SPACE#' + fileName ) #NEWLINE#
b = re . sub ( '(0x[a-fA-F0-9]+|\\d+)' , '[0-9]' , a ) #NEWLINE#
print ( unicodedata . normalize ( 'NFD' , text ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
( '^password-changed/$' , 'django.contrib.auth.views.password_change_done' ) , #NEWLINE#
max ( s , key = lambda x : x . arity ( ) ) #NEWLINE#
[ '1.7.0rc1' , '1.7.0rc2' , '1.7.0' , '1.7.1' , '1.11.0' ] #NEWLINE#
writer . writerow ( row + [ row [ 0 ] ] ) #NEWLINE#
Achievement . objects . get ( name = "Mirror's#SPACE#Edge™" ) #NEWLINE#
f . __code__ . co_freevars [ 0 ] in creator . __code__ . co_cellvars #NEWLINE#
x = np . fromfile ( f , dtype = np . int ) #NEWLINE#
defaults = { 'move' : 'no' , 'perimeter' : 0.0 , 'gap' : 'yes' } #NEWLINE#
sys . stdout = old_stdout #NEWLINE#
return re . search ( '\\d{2}:\\d{2}(?:am|pm)' , text , re . I ) . group ( ) #NEWLINE#
pd . to_timedelta ( df ) #NEWLINE#
a = [ None ] * 10 #NEWLINE#
renamer ( '*.doc' , '^new\\((.*)\\)\\.doc' , '\\1.doc' ) #NEWLINE#
re . findall ( '\\"(.+?)\\"' , obj ) #NEWLINE#
stream . write ( p + '\n' ) #NEWLINE#
some_func ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
{ { ( blogpost . content | slice ) : ':10' } } #NEWLINE#
np . all ( a == b ) #NEWLINE#
a . take ( np . arange ( 1 , 2 ) , axis = 1 ) #NEWLINE#
f . close ( ) #NEWLINE#
do_something ( '{}#SPACE#{}#SPACE#{}' . format ( 1 , 2 , 3 ) ) #NEWLINE#
dict ( ( x , a . get ( x , 0 ) + b . get ( x , 0 ) ) for x in set ( a ) | set ( b ) ) #NEWLINE#
[ ( 'New#SPACE#York#SPACE#Jets' , 100 ) , ( 'New#SPACE#York#SPACE#Giants' , 78 ) ] #NEWLINE#
versions_list . sort ( key = lambda s : list ( map ( int , s . split ( '.' ) ) ) ) #NEWLINE#
base64 . urlsafe_b64decode ( uenc ) #NEWLINE#
my_func . __doc__ #NEWLINE#
plt . xlabel ( 'x-axis' ) #NEWLINE#
WD = os . path . dirname ( os . path . realpath ( sys . argv [ 0 ] ) ) #NEWLINE#
locale . currency ( 100028282.23 ) #NEWLINE#
DELTAFETCH_ENABLED = True #NEWLINE#
b . widget ( ) . deleteLater ( ) #NEWLINE#
dis . dis ( withlocals ) #NEWLINE#
pd . DataFrame ( np . column_stack ( someTuple ) , columns = [ 'birdType' , 'birdCount' ] ) #NEWLINE#
np . isclose ( a , b ) #NEWLINE#
A [ np . triu_indices ( 3 ) ] #NEWLINE#
cleaned_list = [ _f for _f in some_list if _f ] #NEWLINE#
pat = re . compile ( '((1(2[3456]+2)+1)*)' ) #NEWLINE#
ymin , ymax = axes . get_ylim ( ) #NEWLINE#
self . matches = [ s for s in self . options if text in s ] #NEWLINE#
pylab . show ( ) #NEWLINE#
df [ 'prev_temp' ] = df . groupby ( 'location' ) [ 'temp' ] . shift ( 1 ) #NEWLINE#
lst = [ float ( x ) for x in lst ] #NEWLINE#
x . resample ( 'D' , how = lambda x : x . mean ( ) if len ( x ) > 0 else 0 ) #NEWLINE#
return re . sub ( '[^a-z]' , '' , s . lower ( ) ) #NEWLINE#
[ tuple ( g [ 1 ] ) for g in itertools . groupby ( enumerate ( l ) , lambda i_x : i_x [ 0 ] - #NEWLINE# i_x [ 1 ] ) ] #NEWLINE#
wr . writerows ( RESULTS ) #NEWLINE#
ax . set_ylim ( [ - 10 , 10 ] ) #NEWLINE#
self . txt . grid ( row = 0 , column = 0 , sticky = 'nsew' , padx = 2 , pady = 2 ) #NEWLINE#
np . hstack ( ( test , test [ : , ( [ 0 ] ) ] ) ) #NEWLINE#
return '' . join ( chr ( ord ( a ) ^ ord ( b ) ) for a , b in zip ( s1 , s2 ) ) #NEWLINE#
lm = sns . lmplot ( 'X' , 'Y' , df , col = 'Z' , sharex = False , sharey = False ) #NEWLINE#
df [ 'Text' ] . apply ( word_tokenize ) #NEWLINE#
sps_data = sps_data [ np . argsort ( label_idx ) ] #NEWLINE#
cursor . execute ( sql , args ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) , color = 'lightblue' , lw = 4 ) #NEWLINE#
result = list ( [ _f for _f in orig if _f ] ) #NEWLINE#
print ( sorted ( x . split ( ',' ) , key = lambda k : int ( re . findall ( '(?<=_g)\\d+$' , k ) [ 0 ] ) ) #NEWLINE# ) #NEWLINE#
self . root . after ( 1 , self . openfile ) #NEWLINE#
time . strftime ( '%l:%M%p#SPACE#%Z#SPACE#on#SPACE#%b#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
return functools . partial ( self , obj ) #NEWLINE#
matrix [ 0 ] . pop ( ) #NEWLINE#
[ 'scorch' , 'scorching' , 'dump' , 'dumpster' , 'dumpsters' ] #NEWLINE#
foo ( ) #NEWLINE#
sorted_docs_info = collections . OrderedDict ( sorted ( docs_info . items ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'foo' : 'content#SPACE#for#SPACE#foo' , 'bar' : 'content#SPACE#for#SPACE#bar' } #NEWLINE#
file . close ( ) #NEWLINE#
collections . Counter ( 'xyzabcxyz' ) #NEWLINE#
os . remove ( '/var/run/foo.lock' ) #NEWLINE#
fig . savefig ( 'thumb.png' ) #NEWLINE#
dest = '\n' . join ( line for line in src . split ( '\n' ) if line [ : 1 ] != '#' ) #NEWLINE#
del L [ : ] #NEWLINE#
next ( g ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
[ ( a + b ) for a , b in zip ( A , B ) ] #NEWLINE#
matplotlib . pyplot . scatter ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , color = [ 'red' , 'green' , 'blue' ] ) #NEWLINE#
open ( MYFILE , 'w' ) . writelines ( lines ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
time . sleep ( interval ) #NEWLINE#
[ ( x + y ) for x , y in product ( '12345' , 'ab' ) ] #NEWLINE#
ylim ( - 5 , 5 ) #NEWLINE#
[ tag . decompose ( ) for tag in soup ( 'script' ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
FILE_DIALOG_FILETYPES = ( 'Word#SPACE#list' , '*.tldr' ) , ( 'All#SPACE#files' , '*.*' ) #NEWLINE#
[ [ 'gimme' , [ 'some' , [ 'nested' , ',' , 'nested' , [ 'lists' ] ] ] ] ] #NEWLINE#
buckets = [ [ ( 0 ) for col in range ( 5 ) ] for row in range ( 10 ) ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x / y , l ) #NEWLINE#
load_source ( module_name , path_to_file ) #NEWLINE#
s1 = pd . merge ( dfA , dfB , how = 'inner' , on = [ 'S' , 'T' ] ) #NEWLINE#
sys . path . insert ( 0 , 'lib' ) #NEWLINE#
templates_path = [ '_templates' ] #NEWLINE#
pd . merge ( pd . merge ( df1 , df2 , on = 'name' ) , df3 , on = 'name' ) #NEWLINE#
"""1989,#SPACE#1990,1991""" . replace ( '#SPACE#' , '' ) . split ( ',' ) #NEWLINE#
1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 #NEWLINE#
set ( map ( frozenset , lst ) ) #NEWLINE#
print ( list ( csv . reader ( f ) ) ) #NEWLINE#
lastprice = stock . iloc [ - 1 ] [ 'Close' ] #NEWLINE#
dx , dy = - dy , dx #NEWLINE#
req . add_header ( 'Referer' , 'https://www.site.com/path' ) #NEWLINE#
bin ( 8 ) #NEWLINE#
plt . show ( ) #NEWLINE#
g0 . plot ( ) #NEWLINE#
a [ : 1000 ] = [ 0 ] * 1000 #NEWLINE#
print ( df [ 'a' ] . tolist ( ) ) #NEWLINE#
items . sort ( ) #NEWLINE#
br . retrieve ( 'http://mog.com/my_mog/playlists' , 'playlist.html' ) #NEWLINE#
s1 . combine_first ( s2 ) #NEWLINE#
int ( hashlib . md5 ( 'Hello,#SPACE#world!' ) . hexdigest ( ) , 16 ) #NEWLINE#
A [ tuple ( rc1 ) ] , A [ tuple ( rc2 ) ] = A [ tuple ( rc2 ) ] , A [ tuple ( rc1 ) ] #NEWLINE#
plt . legend ( ) #NEWLINE#
a , b , c , d = node . split ( '/' ) [ 1 : ] #NEWLINE#
p . stdin . write ( 'q\n' ) #NEWLINE#
[ list ( g ) for _ , g in groupby ( bool_array ) ] #NEWLINE#
df = df . divide ( df . sum ( axis = 1 ) , axis = 0 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ word for word in l if word . isalpha ( ) ] #NEWLINE#
return np . array ( [ np . where ( np . in1d ( array , matched ) ) [ 0 ] for array in arrays ] ) #NEWLINE#
print ( len ( set ( map ( len , my_lists ) ) ) <= 1 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
dict ( d ) #NEWLINE#
data . ix [ : , ( [ 'Ralph' , 'John' ] ) ] #NEWLINE#
struct . unpack ( '<f' , decode [ 0 : 4 ] ) #NEWLINE#
ax . plot ( x , y , 'bo-' ) #NEWLINE#
array ( [ [ 5 , 12 ] , [ 21 , 32 ] ] ) #NEWLINE#
dict ( item . split ( '#SPACE#' ) for item in s . split ( '\n' ) ) #NEWLINE#
return urllib . request . urlopen ( url ) #NEWLINE#
process . close ( ) #NEWLINE#
simplejson . dumps ( { 'foo' : 'bar' } ) #NEWLINE#
datetime . strptime ( '2014-12-04' , '%Y-%m-%d' ) . date ( ) #NEWLINE#
list = [ ( str ( a [ i ] ) + str ( b [ i ] ) ) for i in range ( len ( a ) ) ] #NEWLINE#
pd . read_csv ( StringIO ( s ) , quotechar = '"' , skipinitialspace = True ) #NEWLINE#
'%6.*f' % ( 2 , 1.234 ) #NEWLINE#
s = '#SPACE#' . join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ) #NEWLINE#
longest = s1 if len ( s1 ) > len ( s2 ) else s2 #NEWLINE#
self . gSheet1 . plot ( [ 1 , 2 , 3 , 4 , 5 ] , [ 2 , 1 , 4 , 2 , 3 ] ) #NEWLINE#
del d [ max ( d , key = d . get ) ] #NEWLINE#
nextthing = random . choice ( list ( scoreboard . elements ( ) ) ) #NEWLINE#
ax . margins ( 0.1 , 0.1 ) #NEWLINE#
[ i for i , ( l1 , l2 ) in enumerate ( zip ( list1 , list2 ) ) if l1 >= 1 and l2 == 0 ] #NEWLINE#
print ( any ( checkLower == val . lower ( ) for val in [ 'qwert' , 'AsDf' ] ) ) #NEWLINE#
db . session . commit ( ) #NEWLINE#

print ( '%.2f' % 315.15321531321 ) #NEWLINE#
'\n' . join ( [ ',' . join ( h ) for h in zip ( * df . columns ) ] ) + '\n' #NEWLINE#
[ a . __setitem__ ( 'price' , 0 if a [ 'price' ] == '' else a [ 'price' ] ) for a in data ] #NEWLINE#
urlpatterns += patterns ( '' , url ( '^profile/(?P\\d+)/$' , '#SPACE#...' , name = 'profile' ) ) #NEWLINE#
np . einsum ( 'ij,jk->ikj' , A , B ) . reshape ( 8 , 3 ) . T #NEWLINE#
"""""" . join ( L ) #NEWLINE#
int ( re . search ( '\\d+' , string1 ) . group ( ) ) #NEWLINE#
url ( '^register-by-token/(?P<backend>[^/]+)/$' , views . register_by_access_token ) , #NEWLINE#
H = sp . csr_matrix ( H ) #NEWLINE#
ax . set_zlabel ( 'label#SPACE#text' , rotation = 90 ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ k : list ( g ) for k , g in groupby ( sorted ( l , key = len ) , len ) } #NEWLINE#
x [ np . isnan ( x ) ] = 0 #NEWLINE#
fig . subplots_adjust ( wspace = 0 ) #NEWLINE#
plt . ylabel ( 'y' , rotation = 0 ) #NEWLINE#
ax2 . set_xticklabels ( [ ] ) #NEWLINE#
ctypes . windll . WINMM . mciSendStringW ( 'set#SPACE#d_drive#SPACE#door#SPACE#open' , None , 0 , None ) #NEWLINE#
s . encode ( 'unicode-escape' ) #NEWLINE#
print ( square ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
df [ 'osiguranika' ] . plot ( ax = axs [ 1 ] ) #NEWLINE#
print ( link . get ( 'href' ) ) #NEWLINE#
return render_template ( 'p.html' , posts = posts ) #NEWLINE#
sns_plot . savefig ( 'output.png' ) #NEWLINE#
df . drop_duplicates ( ) #NEWLINE#
a [ [ [ 0 ] * 5 , [ 1 ] * 5 ] , index ] #NEWLINE#
button . click ( ) #NEWLINE#
smile = [ [ 255 ] , [ 129 ] , [ 165 ] , [ 129 ] , [ 165 ] , [ 189 ] , [ 129 ] , [ 255 ] ] #NEWLINE#
cmap = plt . get_cmap ( 'cool' , 5 ) #NEWLINE#
ctypes . c_long ( 1 ) . value #NEWLINE#
numpy . array ( point_buffer , dtype = numpy . float32 ) #NEWLINE#
print ( 'My#SPACE#program#SPACE#took' , time . time ( ) - start_time , 'to#SPACE#run' ) #NEWLINE#
first_name_dict = { 'David' : [ 'Dave' , 'Davy' ] , 'Lucas' : [ 'Luke' ] } #NEWLINE#
line = re . sub ( '</?\\[\\d+>' , '' , line ) #NEWLINE#
df = df . set_index ( [ 'a' , 'b' , 'c' ] ) . unstack ( 'c' ) #NEWLINE#
ax . set_ylim ( ( valmin , valmax ) ) #NEWLINE#
np . delete ( a , [ 2 , 4 , 5 ] ) #NEWLINE#
entity = MyModel . all ( ) . order ( 'rand_num' ) . get ( ) #NEWLINE#
document = models . FileField ( upload_to = upload_to ( 'my/path' ) ) #NEWLINE#
im . show ( ) #NEWLINE#
cv . CvtColor ( img , gray , cv . CV_BGR2GRAY ) #NEWLINE#
x [ 2 : 6 ] = [ ] #NEWLINE#
driver = webdriver . Chrome ( chrome_options = chromeOptions ) #NEWLINE#
sys . exit ( main ( sys . argv ) ) #NEWLINE#
url ( '^no_monkeys/$' , 'views.noMonkeys' , { } , 'no-monkeys' ) , #NEWLINE#
X = array ( [ [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 1 , 2 ] , [ 3 , 2 , 0 ] ] ) #NEWLINE#
[ '' . join ( x ) for x in zip ( l1 , l2 , l3 , l4 ) ] #NEWLINE#
df [ 'BrandName' ] . replace ( to_replace [ 'ABC' , 'AB' ] , value = 'A' , inplace = True ) #NEWLINE#
[ '000' , '001' , '010' , '011' , '100' , '101' , '110' , '111' ] #NEWLINE#
df . loc [ df . groupby ( 'type' ) . votes . agg ( 'idxmax' ) ] #NEWLINE#
logger . debug ( 'main#SPACE#message' ) #NEWLINE#
self . assertEqual ( json . loads ( call_args [ 0 ] ) , expected ) #NEWLINE#
parser . add_option ( '-f' , '--foo' , dest = 'foo' , help = 'Enable#SPACE#foo' ) #NEWLINE#
User . objects . create_user ( username = 'uname' , password = 'mypass' ) #NEWLINE#
plt . show ( ) #NEWLINE#
cv2 . namedWindow ( 'preview' ) #NEWLINE#
root . xpath ( '//tr/td//text()' ) #NEWLINE#
a [ numpy . nonzero ( numpy . in1d ( a , b ) ) ] #NEWLINE#
app = webapp2 . WSGIApplication ( [ ( '/' , MainHandler ) ] , debug = True ) #NEWLINE#
np . genfromtxt ( txt , delimiter = '\t' ) #NEWLINE#
int_list = [ int ( i ) for i in line ] #NEWLINE#
the_sum = sum ( a [ k ] * b [ k ] for k in keys ) #NEWLINE#
print ( root . findall ( './/a[@y]' ) ) #NEWLINE#
cursor . execute ( 'select#SPACE#*#SPACE#from#SPACE#table#SPACE#where#SPACE#example=%s' , t ) #NEWLINE#
plot_clustered_stacked ( [ df1 , df2 , df3 ] , [ 'df1' , 'df2' , 'df3' ] ) #NEWLINE#
dict ( OrderedDict ( [ ( 'method' , 'constant' ) , ( 'data' , '1.225' ) ] ) ) #NEWLINE#
pickle . dumps ( data , 0 ) #NEWLINE#
print ( RE . sub ( '' , 'blah' ) . encode ( 'utf-8' ) ) #NEWLINE#
ax . plot ( ts [ 0 ] , ys . T , color = 'r' , lw = 0.5 , alpha = 0.5 ) #NEWLINE#
df . set_index ( 'dt' , inplace = True ) #NEWLINE#
newMenu . add_command ( label = '{0}' . format ( i ) , command = lambda x = i : function1 ( x ) ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_DOWN , self . OnLeftDown ) #NEWLINE#
dates . append ( datetime . strptime ( row [ 5 ] , '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
df [ 'a' ] [ df [ 'a' ] >= maxVal ] = maxVal #NEWLINE#
exit ( 0 ) #NEWLINE#
any ( c . isalpha ( ) for c in string_2 ) #NEWLINE#
sum ( map ( int , zip ( * table ) [ - 1 ] ) ) #NEWLINE#
float ( 2 * 10 ** 308 ) #NEWLINE#
self . legend . figure . canvas . draw ( ) #NEWLINE#
matplotlib . use ( 'WXAgg' ) #NEWLINE#
logging . error ( 'Error#SPACE#Message' ) #NEWLINE#
[ [ ] for _ in range ( 2 ) ] #NEWLINE#
{ k : mylist . count ( k ) for k in set ( mylist ) } #NEWLINE#
sum ( val for val in l1 if isinstance ( val , numbers . Number ) ) #NEWLINE#
ax . set_ylabel ( 'V' ) #NEWLINE#
subprocess . Popen ( [ 'virtualenv2/bin/python' , 'my_other_script.py' ] ) #NEWLINE#
MyClass = type ( 'MyClass' , ( ) , { } ) #NEWLINE#
subprocess . call ( 'mybat.bat' , stdin = subprocess . DEVNULL ) #NEWLINE#
sum ( counter_list , Counter ( ) ) #NEWLINE#
print ( str ( item [ 0 ] ) + ',' ) #NEWLINE#
plt . show ( ) #NEWLINE#
dflist = [ df1 , df2 , df3 , df4 , df5 , df6 , df7 , df8 ] #NEWLINE#
x . astype ( int ) #NEWLINE#
sys . executable #NEWLINE#
logger . debug ( 'test' ) #NEWLINE#
my_out_file = open ( '/home/mytrace.txt' , 'w' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
con . commit ( ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] #NEWLINE# print ( [ [ l [ : i ] , l [ i : ] ] for i in range ( 1 , len ( l ) ) ] ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
tom = [ a , b , c ] #NEWLINE#
print ( 'using#SPACE#EPR#SPACE#C#SPACE#API#SPACE#sources#SPACE#at#SPACE#"{0}"' . format ( eprsrcdir ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
ax . xaxis . set_major_locator ( ScaledLocator ( dx = 6 ) ) #NEWLINE#
result = sum ( timedeltas , datetime . timedelta ( ) ) #NEWLINE#
ts [ datetime ( 2011 , 1 , 8 ) : ] [ 0 ] #NEWLINE#
print ( g ( 1 , 2 , 3 , 4 , 5 ) ) #NEWLINE#
A1 = np . genfromtxt ( 'urls.txt' , dtype = 'U' ) #NEWLINE#
( CENTROIDS - x . mean ( ) ) / x . std ( ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
cv . CvtColor ( cv_img , cv_img , cv . CV_RGB2BGR ) #NEWLINE#
int . from_bytes ( '\x00\x00\x01' , 'big' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( [ ( ( a + b ) / 2 ) for a , b in zip ( data [ : : 2 ] , data [ 1 : : 2 ] ) ] ) #NEWLINE#
secnd_set = set ( map ( tuple , secnd_list ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
pyplot . axis ( 'scaled' ) #NEWLINE#
request = self . factory . get ( reverse ( 'home' ) , HTTP_USER_AGENT = 'Mozilla/5.0' ) #NEWLINE#
list ( something_convertible_to_list ) . remove ( 'item' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
return [ a for a , b in zip ( nums , nums [ 1 : ] + [ not nums [ - 1 ] ] ) if a != b ] #NEWLINE#
django . setup ( ) #NEWLINE#
'{0}#SPACE#{1}#SPACE#{1}' % ( 'foo' , 'bar' ) #NEWLINE#
ax . bar ( list ( range ( len ( dates ) ) ) , values ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
ax2 = ax . twinx ( ) #NEWLINE#
bool ( list ( someDict . keys ( ) ) & set ( someSet ) ) #NEWLINE#
[ { 'age' : 7 , 'name' : 'Pam' } ] #NEWLINE#
print ( weekdays ( 'mercredi' ) ) #NEWLINE#
"""#TAB##TAB##TAB#""" . join ( myStr . splitlines ( True ) ) #NEWLINE#
print ( 'Content-type:#SPACE#text/html' ) #NEWLINE#
dist = math . hypot ( x2 - x1 , y2 - y1 ) #NEWLINE#
rdd1 . cartesian ( rdd2 ) #NEWLINE#
self . bind ( '<Motion>' , self . onmotion ) #NEWLINE#
columns = { ( 0 ) : [ 0 ] , ( 1 ) : [ 1 ] , ( 2 ) : [ 0 , 6 ] , ( 4 ) : [ 3 ] , ( 5 ) : [ 0 , 6 ] , ( 7 ) : [ 2 ] } #NEWLINE#
someclassname . ask ( ) #NEWLINE#
[ { 'id' : 2 , 'name' : 'squats' , 'wrs' : [ [ '55' , 9 ] ] } ] #NEWLINE#
rbs = np . array ( [ ish [ 4 ] for ish in realbooks ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
a . sort ( key = lambda x : x [ 0 ] ) #NEWLINE#
"""{}{}""" . format ( foo , baz ) #NEWLINE#
[ e for e in lelist if e in lestring ] #NEWLINE#
pygame . draw . circle ( screen , ( 0 , 0 , 0 ) , ( 100 , 100 ) , 15 , 1 ) #NEWLINE#
content_sizer . Add ( grid_1 , 1 , wx . EXPAND | wx . ALL , 3 ) #NEWLINE#
np . where ( np . all ( np . all ( win_img == pattern , axis = - 1 ) , axis = - 1 ) ) #NEWLINE#
str2bool ( 'yes' ) #NEWLINE#
print ( a . encode ( 'cp1252' ) . decode ( 'utf-8' ) . encode ( 'cp1252' ) . decode ( 'utf-8' ) ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 ] , 'r' ) #NEWLINE#
__import__ ( 'temp/a40bd22344' ) #NEWLINE#
sc . addPyFile ( '/path/to/BoTree.py' ) #NEWLINE#
return render_to_response ( 'group_details.html' , { 'group' : group } ) #NEWLINE#
MyModel . objects . filter ( pk = instance . id ) . update ( ** data ) #NEWLINE#
sys . stderr . write ( 'Redirected!\n' ) #NEWLINE#
mydic = { ( i + 1 ) : o [ 'name' ] for i , o in enumerate ( iterload ( f ) ) } #NEWLINE#
""",#SPACE#""" . join ( set_3 ) #NEWLINE#
"""#SPACE#""" . join ( hxs . select ( '//body//p//text()' ) . extract ( ) ) #NEWLINE#
self . cursor . execute ( 'SELECT#SPACE#weight#SPACE#FROM#SPACE#Equipment#SPACE#WHERE#SPACE#name#SPACE#=#SPACE#?' , [ item ] ) #NEWLINE#
plt . ylabel ( 'some#SPACE#numbers' ) #NEWLINE#
{ { '${:,.2f}' . format ( 543921.9354 ) } } #NEWLINE#
log . setLevel ( logging . DEBUG ) #NEWLINE#
d = dict ( zip ( [ o . name for o in object_list ] , object_list ) ) #NEWLINE#
url = 'https://api.imgur.com/3/upload.json' #NEWLINE#
np . einsum ( 'ijkl,jl' , H , x ) #NEWLINE#
struct . unpack ( 'f' , file . read ( 4 ) ) #NEWLINE#
tags = soup . find_all ( lambda tag : 'src' in tag . attrs ) #NEWLINE#
with open ( 'Failed.py' , 'w' ) as file : #NEWLINE# #INDENT# file . write ( 'whatever' ) #NEWLINE#
f . read ( ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
subprocess . call ( args , stdout = FNULL , stderr = FNULL , shell = False ) #NEWLINE#
sys . path . append ( os . path . abspath ( '/home/el/foo4/stuff' ) ) #NEWLINE#
[ t for t in enumerate ( l ) ] #NEWLINE#
plt . xlim ( - 2 * np . pi , 2 * np . pi ) #NEWLINE#
print ( ( '%.4f' % n ) [ : 6 ] ) #NEWLINE#
[ np . ma . array ( arr , mask = ~ c ) . argmax ( ) for c in cond ] #NEWLINE#
a = [ 1 , 2 ] #NEWLINE#
cv2 . destroyWindow ( 'preview' ) #NEWLINE#
df . loc [ mask , col ] = df . loc [ mask , 'boost4' ] #NEWLINE#
print ( cls . __name__ ) #NEWLINE#
print ( len ( item_dict [ 'result' ] [ 0 ] [ 'run' ] ) ) #NEWLINE#
lst . sort ( ) #NEWLINE#
return dict ( ( k , v ) for k , v in dictionary . items ( ) if begin <= k <= end ) #NEWLINE#
df . columns = [ 'FABL' , 'HINOON' ] #NEWLINE#
FO . close ( ) #NEWLINE#
df . fillna ( method = 'ffill' ) #NEWLINE#
{ 'Company' : 'SCTL' , 'Address' : 'Mumbai' , 'Location' : 'RCP' , 'Name' : 'Pradeep' } #NEWLINE#
print ( 'child#SPACE#{}' . format ( os . getpid ( ) ) ) #NEWLINE#
print ( args ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( tuple . __add__ , [ ( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) ] ) #NEWLINE#
df . ix [ 0 , 'COL_NAME' ] = x #NEWLINE#
[ y for y in x for x in data ] #NEWLINE#
return super ( ProtectedView , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
sel . click ( "//*[@id='linkout-icon-unknown-vir_full']" ) #NEWLINE#
[ [ 1 ] , [ 3 ] , [ 7 ] , [ 8 ] , [ 9 ] ] #NEWLINE#
y = [ x for x in list ( dict . keys ( ) ) if dict [ x ] > 0.0 ] #NEWLINE#
print ( a [ key ] ) #NEWLINE#
return qs . distinct ( ) #NEWLINE#
self . kwargs [ 'id' ] #NEWLINE#
b = [ a . ix [ i ] for i in a . index if sorted1 [ i ] >= sorted2 [ i ] ] #NEWLINE#
bids . sort ( key = int , reverse = True ) #NEWLINE#
{ { ( sale . validity | date ) : 'd-m-Y' } } #NEWLINE#
msgurl = record [ 'entities' ] . get ( 'urls' ) #NEWLINE#
[ v for k , v in enumerate ( mylist ) if k % 2 == 0 ] #NEWLINE#
df [ 'month_15' ] . astype ( 'datetime64[D]' ) . values . dtype #NEWLINE#
unp = msgpack . unpackb ( f . read ( ) ) #NEWLINE#
"""Convert#SPACE#a#SPACE#Windows#SPACE#path#SPACE#to#SPACE#a#SPACE#Cygwin#SPACE#path""" #NEWLINE#
mydict [ new_key ] = mydict . pop ( old_key ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
re . split ( 'Num\\d{2}' , text ) [ 0 ] #NEWLINE#
next ( i for i , j in enumerate ( '#SPACE##SPACE##SPACE#xyz' ) if j . strip ( ) ) #NEWLINE#
df . set_index ( 'dt' , inplace = True ) #NEWLINE#
a = dict . fromkeys ( list ( range ( n ) ) ) #NEWLINE#
logging . info ( 'Hello' ) #NEWLINE#
plt . show ( ) #NEWLINE#
struct . unpack ( '<i' , chunk + ( '\x00' if chunk [ 2 ] < 128 else 'ÿ' ) ) #NEWLINE#
np . in1d ( data , np . hstack ( test ) ) . reshape ( data . shape ) #NEWLINE#
( len ( word ) for word in wordslist ) #NEWLINE#
self . data += self . ser . read ( ) #NEWLINE#
main ( ) #NEWLINE#
ws . add_image ( img ) #NEWLINE#
f = open ( os . path . join ( sub_dir , filename ) , 'r' ) #NEWLINE#
A . __dict__ [ 'b' ] #NEWLINE#
df . reset_index ( level = 1 , drop = True , inplace = True ) #NEWLINE#
df . stack ( ) [ df . stack ( ) . values == 1 ] . reset_index ( ) #NEWLINE#
match2 . group ( ) #NEWLINE#
self . foo ( ) #NEWLINE#
urllib . parse . quote_plus ( a ) #NEWLINE#
the_doc . append ( FIELD2 ( 'another#SPACE#value#SPACE#again' , name = 'hithere' ) ) #NEWLINE#
"""(?P<name>[A-Za-z\\t#SPACE#.]+)""" #NEWLINE#
return any ( char . isdigit ( ) for char in s ) #NEWLINE#
ax . yaxis . set_ticks ( [ 0 , 2 , 4 , 8 ] ) #NEWLINE#
bttn_0 . grid ( row = 5 , column = 0 , pady = 5 , columnspan = 2 ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = profile ) #NEWLINE#
re . findall ( '[A-Z][^A-Z]*' , 'ABC' ) #NEWLINE#
hashlib . md5 ( 'fred' ) #NEWLINE#
d = dict ( ( str ( n ) , list ( range ( 20 ) ) ) for n in range ( 1000000 ) ) #NEWLINE#
[ s [ a : b ] for a , b in zip ( accumulate ( [ 0 ] + keys ) , accumulate ( keys ) ) ] #NEWLINE#
df . T . drop_duplicates ( ) . T #NEWLINE#
os . rename ( fn , fn + '.pdf' ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
webbrowser . get ( 'firefox' ) . open_new_tab ( 'http://www.google.com' ) #NEWLINE#
pylab . show ( ) #NEWLINE#
lines . sort ( key = lambda x : int ( x . split ( ) [ 0 ] ) ) #NEWLINE#
[ 0 ] + [ ( i + 1 ) for i in [ 4 , 9 , 12 , 14 , 18 ] ] + [ len ( bool_array ) ] #NEWLINE#
print ( '{0}' . format ( s ) ) #NEWLINE#
a = np . array ( [ [ np . array ( [ [ 2 , 2 ] ] ) , np . array ( [ [ 3 , 3 ] ] ) ] ] ) #NEWLINE#
s = s . replace ( '%' , '%%' ) #NEWLINE#
warnings . simplefilter ( 'always' , UserWarning ) #NEWLINE#
[ 3 , 4 , 5 , 6 , 7 ] #NEWLINE#
datetime . datetime . combine ( tdate , datetime . time ( ) ) #NEWLINE#
subprocess . call ( my_cmd , stdout = outfile ) #NEWLINE#
x = np . random . randint ( 0 , 20 , 1000000 ) #NEWLINE#
pd . isnull ( df ) . any ( 1 ) . nonzero ( ) [ 0 ] #NEWLINE#
s = s . replace ( 'z' , 's' ) #NEWLINE# s . split ( 's' ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
super ( DynamicForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
"""(?=({}))""" . format ( 's\\+' . join ( '\\w+' for i in range ( n ) ) ) #NEWLINE#
os . startfile ( 'C:/' ) #NEWLINE#
str ( float ( '123.4506780' ) ) #NEWLINE#
out . append ( dict ( zip ( labels , line . split ( '#' ) ) ) ) #NEWLINE#
print ( '\\u0631\\u064e\\u062c\\u0627' ) #NEWLINE#
ax . xaxis . set_major_formatter ( mdates . DateFormatter ( '%Y' ) ) #NEWLINE#
print ( int ( '0x10' , 16 ) ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 3 , 4 , 5 , 6 , 5 , 6 , 7 , 8 , 7 , 8 , 9 , 10 , 9 , 10 , 1 , 2 ] #NEWLINE#
print ( pix [ x , y ] ) #NEWLINE#
group_sum = df . groupby ( [ 'name' , '>0' ] ) [ 'tickets' ] . sum ( ) #NEWLINE#
app . debug = True #NEWLINE#
os . path . abspath ( checkIP . __file__ ) #NEWLINE#
pprint . pprint ( obj ) #NEWLINE#
client . set_option ( new_url ) #NEWLINE#
kdll = ctypes . windll . LoadLibrary ( 'kernel32.dll' ) #NEWLINE#
set ( [ 1 , 2 , 6 , 8 ] ) - set ( [ 2 , 3 , 5 , 8 ] ) #NEWLINE#
df . resample ( 'D' ) . sum ( ) . fillna ( 0 ) #NEWLINE#
A [ 0 : 4 ] [ 1 ] #NEWLINE#
annotate ( num_products = Count ( 'product' ) ) #NEWLINE#
re . sub ( pattern , replacement , text ) #NEWLINE#
os . system ( 'echo#SPACE#this#SPACE#is#SPACE#also#SPACE#redirected' ) #NEWLINE#
print ( pivot_table ( df , rows = [ 'X2' ] , cols = [ 'X' ] , aggfunc = np . sum ) ) #NEWLINE#
output += os . read ( fd , 4096 ) . decode ( 'utf-8' ) #NEWLINE#
master . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ [ 4 , 3 , 2 , 1 ] , [ 4 , 3 , 2 , 1 ] ] #NEWLINE#
fig . savefig ( 'test.png' , dpi = 300 ) #NEWLINE#
return str ( request . args . getlist ( 'param' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( re . findall ( '\\([^()]*\\)' , string ) ) #NEWLINE#
ast . literal_eval ( some_string ) #NEWLINE#
a . __getitem__ ( slice ( 0 , 1 ) ) . __setitem__ ( 0 , 5 ) #NEWLINE#
strings = 'foo#SPACE#bar#SPACE#apple' . split ( ) #NEWLINE#
time . sleep ( 0 ) #NEWLINE#
bids . append ( bid ) #NEWLINE#
s . sendmail ( me , you . split ( ',' ) , msg . as_string ( ) ) #NEWLINE#
os . path . dirname ( os . path . dirname ( file ) ) #NEWLINE#
Thread ( target = p . start ) . start ( ) #NEWLINE#
plt . savefig ( '/tmp/test.png' , dpi = 80 ) #NEWLINE#
map ( itemgetter ( 'name' ) , li ) . index ( 'Pam' ) #NEWLINE#
sys . modules [ 'google' ] #NEWLINE#
convert_lists . donothing ( [ 1 , 2 , 3 , 0 , 4 , 5 , 6 ] ) #NEWLINE#
list ( foo ) #NEWLINE#
os . remove ( f ) #NEWLINE#
driver . implicitly_wait ( 30 ) #NEWLINE#
print ( counter . most_common ( 3 ) ) #NEWLINE#
[ [ ( k , v ) for k , v in sub_list if v is not None ] for sub_list in oldList ] #NEWLINE#
( ( m . get ( k , k ) , v ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
ax . xaxis . set_major_formatter ( tkr . FuncFormatter ( formatter ) ) #NEWLINE#
logging . info ( 'hello' ) #NEWLINE#
root . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
sum ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ ] ) == [ 1 , 2 , 3 , 4 ] #NEWLINE#
[ [ 2 , 4 ] , [ 5 , 7 ] , [ 7 , 8 ] , [ 9 , 43 ] , [ 4 , 6 ] ] #NEWLINE#
return datetime . now ( ) . strftime ( '%a' ) #NEWLINE#
timeit . timeit ( partial ( function , x ) ) #NEWLINE#
plt . plot ( [ 1 , 2 ] , lw = 4 , c = seaborn . xkcd_rgb [ 'baby#SPACE#poop#SPACE#green' ] ) #NEWLINE#
"""""" . join ( '' . join ( item ) for item in zip ( u , l ) ) #NEWLINE#
pylab . fill_between ( x , y1 , color = 'red' ) #NEWLINE#
y = x . subs ( { a : b , b : a } , simultaneous = True ) #NEWLINE#
submit_something = SubmitField ( 'Add#SPACE#something' ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
print ( '{0}#SPACE#=#SPACE#{1}' . format ( key , value ) ) #NEWLINE#
round ( Decimal ( '33.505' ) , 2 ) #NEWLINE#
f . close ( ) #NEWLINE#
OrderedDict ( ( k , queue [ key ] ) for k in key_order ) #NEWLINE#
my_model . save ( ) #NEWLINE#
return send_file ( img_io , mimetype = 'image/jpeg' ) #NEWLINE#
[ { y : x [ y ] . lower ( ) } for x in messages for y in x ] #NEWLINE#
integer . setParseAction ( lambda t : int ( t [ 0 ] ) ) #NEWLINE#
return [ list ( x ) for x in a_strpadded ] #NEWLINE#
contents = open ( filename ) . read ( ) #NEWLINE#
sorted ( l , key = lambda x : '' . join ( ( x [ : - 1 ] , '{' ) ) if x [ - 1 ] . isdigit ( ) else x ) #NEWLINE#
print ( np . where ( a == a . min ( ) ) ) #NEWLINE#
return super ( forms . ModelForm , self ) . save ( commit ) #NEWLINE#
[ item for item in l for repetitions in range ( 2 ) ] #NEWLINE#
df . iloc [ sort_by_custom_dict ( df [ 'm' ] ) ] #NEWLINE#
"""{0:b}""" . format ( 10 ) #NEWLINE#
df . to_csv ( 'test.csv' , sep = '\t' ) #NEWLINE#
{ d [ 'city' ] : d [ 'country' ] for d in li } #NEWLINE#
data = '"this","is","a","test"' #NEWLINE#
[ x for x in matrix if x [ 2 ] == 1.0 ] #NEWLINE#
self . set_edgecolor ( rcParams [ 'axes.edgecolor' ] ) #NEWLINE#
d1 . groupby ( 'ExamenYear' ) . apply ( ZahlOccurence_0 ) #NEWLINE#
re . split ( '(\\W+)' , 'Words,#SPACE#words,#SPACE#words.' ) #NEWLINE#
worksheet . delete_row ( 42 ) #NEWLINE#
response = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
[ min ( j ) for i , j in itertools . groupby ( A , key = lambda x : x [ : 7 ] ) ] #NEWLINE#
RGB_img = cv2 . cvtColor ( img , cv2 . COLOR_BGR2RGB ) #NEWLINE#
my_result = cb_function ( ) #NEWLINE#
return HttpResponseNotAllowed ( [ 'POST' ] ) #NEWLINE#
urllib . request . urlretrieve ( stream_url , target_path ) #NEWLINE#
d . update ( ( k , v * 0.5 ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
input ( '\n\npause' ) #NEWLINE#
conn = S3Connection ( '<aws#SPACE#access#SPACE#key>' , '<aws#SPACE#secret#SPACE#key>' ) #NEWLINE#
plt . show ( ) #NEWLINE#
res = os . system ( sys . argv [ 1 ] , sys . argv [ 2 ] ) #NEWLINE#
"""abcd""" . encode ( 'hex' ) #NEWLINE#
[ 1.2836621854632262 , 3.9203405733007317 ] #NEWLINE#
return os . environ . get ( 'USER_IS_ADMIN' , '0' ) == '1' #NEWLINE#
cursor . execute ( query_string , varlist ) #NEWLINE#
[ m . group ( ) for m in re . finditer ( '((\\w)\\2)+' , 'bookkeeper' ) ] #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
x = [ [ None ] * 5 ] * 6 #NEWLINE#
result [ [ ( 'B' , 'mean' ) , ( 'C' , 'mean' ) ] ] #NEWLINE#
json . dumps ( { 'a' : 5 , 'b' : 6 , 'c' : 7 } , sort_keys = False ) #NEWLINE#
self . Bind ( wx . EVT_PAINT , self . _onPaint ) #NEWLINE#
return '' . join ( sorted ( string ) ) #NEWLINE#
fcntl . flock ( g , fcntl . LOCK_UN ) #NEWLINE#
[ [ 'A' ] , [ 'B' , 'C' ] , [ 'D' ] ] #NEWLINE#
print ( json . dumps ( json . loads ( json_string ) ) ) #NEWLINE#
[ listofLines [ i ] for i in sortedIndex ] #NEWLINE#
result = Model ( COLLECTION ) . find_one ( { user : 'joe' } ) #NEWLINE#
plt . show ( ) #NEWLINE#
return a . b . c if hasattr ( a , 'b' ) and hasattr ( a . b , 'c' ) else None #NEWLINE#
numpy . zeros ( ( 10 , 4 , 100 ) ) #NEWLINE#
os . path . split ( 'product/bin/client' ) #NEWLINE#
data = '' . join ( code . get ( i , '#SPACE#' ) for i in data ) #NEWLINE#
br . set_response ( resp ) #NEWLINE#
print ( chunked_topsort ( [ 'ac' , 'bc' , 'bde' , 'be' , 'fbcg' ] ) ) #NEWLINE#
cursor . execute ( 'insert#SPACE#into#SPACE#...' ) #NEWLINE#
[ b . append ( item ) for item in a if item not in b ] #NEWLINE#
df . groupby ( [ 'B' ] ) [ 'C' ] . transform ( date_test ) . astype ( 'int64' ) #NEWLINE#
a = np . fromfile ( f , dtype = np . uint32 ) #NEWLINE#
print ( 'こ' ) #NEWLINE#
time . mktime ( d . timetuple ( ) ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"%d"' % value ) #NEWLINE#
( n + 1 ) ** 2 == n ** 2 + ( 2 * n + 1 ) #NEWLINE#
[ [ [ 0 , 0 , 1 ] , [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ] #NEWLINE#
data . ix [ '2010-01-04' ] #NEWLINE#
print ( re . sub ( '^\\S*\\s' , '' , s ) ) #NEWLINE#
sys . _getframe ( ) . __code__ . co_argcount #NEWLINE#
logging . basicConfig ( level = 'INFO' , handlers = [ handler ] ) #NEWLINE#
array ( [ x [ 0 , 0 ] , x [ 1 , 0 ] , x [ 2 , 0 ] ] ) #NEWLINE#
s = '' . join ( random . choice ( '0123456789abcdef' ) for _ in range ( 10 ) ) #NEWLINE#
gems . add ( gem ) #NEWLINE#
"""u'\\'Foo(var=123)\\'#SPACE#<div#SPACE#id="divvy">123</div>'""" #NEWLINE#
dict ( zip ( keys , values ) ) #NEWLINE#
function ( ) #NEWLINE#
session . close ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
split_str . groupby ( [ 0 , 1 ] ) [ 2 ] . apply ( fnc ) #NEWLINE#
requests . post ( 'http://example.com/' , json = { 'hello' : 'world' } ) #NEWLINE#
print ( '\n' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
myfile . write ( buffer ( c_uncompData_p . raw , 0 , c_uncompSize ) ) #NEWLINE#
np . asarray ( t ) #NEWLINE#
return pd . DataFrame ( series_data , columns = series_name ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'df{0:d}.Close' . format ( idx + 1 ) : df [ 'Close' ] for idx , df in enumerate ( dflist ) } #NEWLINE#
print ( '7æ\x9c\x8810æ\x97¥' . decode ( 'utf-8' ) ) #NEWLINE#
sys . getsizeof ( x ) #NEWLINE#
print ( '*WARN*#SPACE#Danger#SPACE#Will#SPACE#Robinson' ) #NEWLINE#
df [ 'First_Name' ] = df [ 'ID' ] . map ( lambda x : names [ x ] [ 0 ] ) #NEWLINE#
data [ data . groupby ( 'tag' ) . pid . transform ( len ) > 1 ] #NEWLINE#
User . objects . filter ( friends = 'Tom' ) . order_by ( '-pet__age' ) [ : 10 ] #NEWLINE#
"""[Bb]eta(\\d+|$|version)|^[Bb]eta#SPACE#""" #NEWLINE#
sorted ( list_of_edges , key = lambda edge : edge [ 'weight' ] ) #NEWLINE#
array . astype ( 'int16' ) . tofile ( filename ) #NEWLINE#
plt . savefig ( 'outfig' ) #NEWLINE#
myl [ : ] = [ ( x if x != 4 else 44 ) for x in myl ] #NEWLINE#
{ 'a' : 1 , 'b' : 2 , 'c' : 3 } #NEWLINE#
format ( num % ( 1 << 16 ) , '016b' ) #NEWLINE#
data [ [ 'a' , 'c' ] ] #NEWLINE#
assert exception . __class__ . __name__ == 'NameError' #NEWLINE#
df . mycolumn . map ( func ) #NEWLINE#
df . idxmax ( axis = 1 ) #NEWLINE#
nested_lst_of_tuples = [ tuple ( l ) for l in nested_lst ] #NEWLINE#
appcfg . py #NEWLINE#
links = soup . find_all ( 'a' , { 'id' : re . compile ( '^c\\d+' ) } ) #NEWLINE#
~ s . index . isin ( list ( 'BDE' ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
map ( ord , 'hello' ) #NEWLINE#
self . update ( dict ( * args , ** kwargs ) ) #NEWLINE#
match = re . search ( '\\d{4}-\\d{2}-\\d{2}' , text ) #NEWLINE# date = datetime . strptime ( match . group ( ) , '%Y-%m-%d' ) . date ( ) #NEWLINE#
cmap ( np . linspace ( 0.2 , 0.8 , 100 ) ) #NEWLINE#
getattr ( 'a' , 'isalpha' ) ( ) #NEWLINE#
{ value : key for key , values in list ( my_map . items ( ) ) for value in values } #NEWLINE#
abort ( '*********#SPACE#Failed#SPACE#to#SPACE#execute#SPACE#deploy!#SPACE#*********' ) #NEWLINE#
self . _driver . quit ( ) #NEWLINE#
matplotlib . use ( 'GTK' ) #NEWLINE#
len ( a ) - len ( a . lstrip ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . append ( x ) #NEWLINE#
sorted ( l ) == list ( range ( min ( l ) , max ( l ) + 1 ) ) #NEWLINE#
print ( u8 . decode ( 'utf-8' ) ) #NEWLINE#
os . stat ( 'test.txt' ) #NEWLINE#
file_obj . seek ( 0 ) #NEWLINE#
url ( '^sitemap\\.xml$' , sitemap , { 'sitemaps' : sitemaps } ) , #NEWLINE#
LINK_MODEL = 'someproject.somemodel' #NEWLINE#
print ( get_ip ( ) ) #NEWLINE#
"""{0:n}""" . format ( 1234567890 ) #NEWLINE#
a = [ [ 1 , 2 , 3 , 4 , 5 ] for _ in range ( 4 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
grouped . apply ( wavg ) #NEWLINE#
matplotlib . use ( 'TkAgg' ) #NEWLINE#
f = open ( os . path . join ( path , infile ) , 'r' ) #NEWLINE#
results = cursor . fetchone ( ) #NEWLINE#
s . lower ( ) #NEWLINE#
map ( ord , s ) #NEWLINE#
app . run ( port = 0 , debug = True ) #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
model . fit ( df . drop ( 'y' , axis = 1 ) , df [ 'y' ] ) #NEWLINE#
""",""" . join ( sorted ( set ( strs ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
a [ : , ( b ) ] #NEWLINE#
sorted ( L , key = operator . itemgetter ( 1 ) ) #NEWLINE#
df . set_index ( [ 'R_Number' , 'C_Number' ] ) . Avg . unstack ( level = 1 ) #NEWLINE#
test = test . decode ( 'cp1252' ) . encode ( 'utf8' ) #NEWLINE#
len ( mylist ) - mylist [ : : - 1 ] . index ( myvalue ) - 1 #NEWLINE#
len ( s ) #NEWLINE#
self . myWidget . HelloWorldButton . clicked . connect ( self . slot1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
n = str ( input ( ) ) #NEWLINE#
map ( sum , l ) == [ n ] * len ( l ) #NEWLINE#
f . write ( content ) #NEWLINE#
mratings . mean ( axis = 1 ) #NEWLINE#
df [ 'Date' ] #NEWLINE#
pip3 - - version #NEWLINE#
plt . show ( ) #NEWLINE#
df = df . sort ( [ 'count' , 'colFromIndex' ] ) #NEWLINE#
df2 . set_index ( 'filename' , inplace = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
fu_list = [ ( k , fus_d . get ( k ) , fus_s . get ( k ) ) for k in s ] #NEWLINE#
np . sum ( c [ : , 1 : ] == c [ : , : - 1 ] , axis = 1 ) #NEWLINE#
sum ( n * ( n - 1 ) // 2 for n in list ( index2count . values ( ) ) ) #NEWLINE#
p [ 0 ] , p [ 1 ] #NEWLINE#
print ( dt . strftime ( '%s' ) ) #NEWLINE#
MyClass . Property1 #NEWLINE#
r . hmget ( 'myhash' , 'field0' ) #NEWLINE#
a = [ int ( x ) for x in input ( ) . split ( ) ] #NEWLINE#
[ d for d in test_list if d [ 'id' ] == 'an#SPACE#id' ] #NEWLINE#
all_strings = [ s for string_list in list ( my_dict . values ( ) ) for s in string_list #NEWLINE# ] #NEWLINE#
"""{:<15}""" . format ( a ) #NEWLINE#
vsampled = numpy . interp ( numpy . arange ( t [ 0 ] , t [ - 1 ] ) , t , v ) #NEWLINE#
re . findall ( '(\\d{2})(020511|00)' , theStr ) #NEWLINE#
[ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ] #NEWLINE#
lm . prob ( 'spain' , [ 'rain' , 'in' ] ) #NEWLINE#
n = SubElement ( root , '{http://purl.org/dc/elements/1.1}foo' ) #NEWLINE#
plt . scatter ( df . col1 , df . col2 , s = df . col3 ) #NEWLINE#
print ( len ( glob . glob ( '/tmp/*' ) ) ) #NEWLINE#
tablero = [ ] #NEWLINE#
population = list ( itertools . chain ( fhd , fhet , fhr ) ) #NEWLINE#
p . getfitness ( ) #NEWLINE#
[ path for path in glob . iglob ( './' + '[0-9]' * 14 ) if os . path . isdir ( path ) ] #NEWLINE#
jinja2 . Template ( '{{#SPACE#"#SPACE#".join(bar)#SPACE#}}' ) . render ( bar = 'baz' ) #NEWLINE#
worst = sorted ( Player ( v , k ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
[ 6 , 5 , 1 ] #NEWLINE#
json . dumps ( list ) #NEWLINE#
[ 'Arthur' , 'Belling' ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + list ( y ) , l , [ ] ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
df [ df [ 'A' ] . str . contains ( 'Hello|Britain' ) ] #NEWLINE#
df_test . iloc [ 0 ] #NEWLINE#
df [ 'new_col' ] = se . values #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . sum ( ) . sum ( ) ) #NEWLINE#
cv2 . drawContours ( image , [ ctr ] , 0 , ( 255 , 255 , 255 ) , 1 ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
df . head ( ) #NEWLINE#
sorted ( iter ( d . items ( ) ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
list ( range ( 0 , 100 + 1 , 5 ) ) #NEWLINE#
"""""" . join ( sorted ( set ( s . lower ( ) ) ) ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"%d"' % value ) #NEWLINE#
p = re . compile ( '^b*(abb*)*a?$' ) #NEWLINE#
func ( 'arg' , 'arg2' , ** { 'arg3' : 'some#SPACE#value' } if condition == True else { } ) #NEWLINE#
function_in_library ( 'Hello#SPACE#%s' , ',#SPACE#' . join ( my_args ) ) #NEWLINE#
Gtk . main_iteration ( ) #NEWLINE#
arr . reshape ( 3 , 12 ) . T #NEWLINE#
int ( '' . join ( bin ( x ) [ : 1 : - 1 ] ) , 2 ) #NEWLINE#
pygame . display . set_caption ( 'Animation' ) #NEWLINE#
"""#SPACE#""" . join ( '{0}{1}' . format ( key , val ) for key , val in sorted ( adict . items ( ) ) ) #NEWLINE#
sorted ( a , key = lambda x : order_dict [ x [ 0 ] ] ) #NEWLINE#
[ 1 , 2 , 4 , 5 ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . legend ( [ 'y#SPACE#=#SPACE#x' , 'y#SPACE#=#SPACE#2x' , 'y#SPACE#=#SPACE#3x' , 'y#SPACE#=#SPACE#4x' ] , loc = 'upper#SPACE#left' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
driver . save_screenshot ( 'screen.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""i""" . join ( '!' * len ( x ) for x in strs . split ( 'i' ) ) #NEWLINE#
q = Session . query ( Articles ) . filter ( Articles . tags . any ( name = 'tag_name' ) ) #NEWLINE#
df . columns = [ 'col1' , 'col2' ] #NEWLINE#
search_pattern = re . compile ( '\\+[a-zA-z]\\+' ) #NEWLINE#
print ( re . sub ( '(?<!^)(?=[A-Z])' , '_' , example ) . lower ( ) ) #NEWLINE#
p . terminate ( ) #NEWLINE#
iter_length = len ( list ( iterable ) ) #NEWLINE#
print ( urlparse . parse_qs ( os . environ [ 'QUERY_STRING' ] ) ) #NEWLINE#
my_list [ : my_list . index ( 'item' ) ] + my_list [ my_list . index ( 'item' ) + 1 : ] #NEWLINE#
np . expand_dims ( np . array ( [ 1 , 2 , 3 , 4 ] ) , 1 ) #NEWLINE#
root . config ( menu = menu ) #NEWLINE#
key . encode ( 'ascii' ) #NEWLINE#
np . argwhere ( np . isnan ( x ) ) #NEWLINE#
canvas . drawString ( 10 , 100 , 'In#SPACE#the#SPACE#Vera#SPACE#TT#SPACE#Font!' ) #NEWLINE#
random . sample ( [ 'some' , 'provider' , 'can' , 'be' , 'null' ] , 3 ) #NEWLINE#
assert response . status_code == 200 #NEWLINE#
p . <VAR0> . write ( 'my#SPACE#message\n' ) #NEWLINE#
return [ ks [ i ] for i in range ( len ( ks ) ) if i == 0 or ks [ i ] != ks [ i - 1 ] ] #NEWLINE#
print ( df . applymap ( lambda x : str ( x ) . isdigit ( ) ) . T ) #NEWLINE#
~ df [ 'second' ] . str . contains ( word ) #NEWLINE#
b . grid ( row = 2 , column = 3 , columnspan = 2 ) #NEWLINE#
re . findall ( p , test_str ) #NEWLINE#
print ( 'THIS#SPACE#WAS#SPACE#PRESERVED' ) #NEWLINE#
[ [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , [ [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ] #NEWLINE#
"""#SPACE#""" . join ( '"{}"' . format ( x ) if x . isdigit ( ) else x for x in words . split ( ) ) #NEWLINE#
sum ( x ** 2 ) * ( x [ 1 ] - x [ 0 ] ) #NEWLINE#
json . dump ( data , jsonFile ) #NEWLINE#
( x * 2 for x in [ 2 , 2 ] ) #NEWLINE#
print ( 'Last:#SPACE#' , lst [ - 1 ] ) #NEWLINE#
a = [ i [ 0 ] for i in sorted ( zip ( a , ind ) , key = lambda x : x [ 1 ] ) ] #NEWLINE#
parser . addoption ( '--bar' , action = 'store_false' , help = 'Do#SPACE#not#SPACE#do#SPACE#bar' ) #NEWLINE#
"""3B""" #NEWLINE#
print ( ddiff [ 'values_changed' ] [ "root[4]['b']" ] [ 'diff' ] ) #NEWLINE#
{ k : v for k , v in ( e . split ( ':' ) for e in a ) } #NEWLINE#
re . findall ( '(?:^|\\+)([A-Z])' , formula ) #NEWLINE#
plt . show ( ) #NEWLINE#
lib . some_function ( ffi . addressof ( lib , 'some_callback' ) ) #NEWLINE#
json . dumps ( cls = MyEncoder ) #NEWLINE#
[ { 'id' : 2 , 'name' : 'bar' } , { 'id' : 1 , 'name' : 'foo' } , { 'id' : 3 , 'name' : 'baz' } ] #NEWLINE#
[ lambda x : x * x ] * 3 #NEWLINE#
db = create_engine ( 'mysql://user:pass@localhost/db?charset=utf8' ) #NEWLINE#
pylab . savefig ( 'foo.png' ) #NEWLINE#
do_stuff ( ) #NEWLINE#
return struct . unpack ( '>d' , bf ) [ 0 ] #NEWLINE#
print ( a [ : , ( 0 ) ] ) #NEWLINE#
[ '' , '"java#SPACE#jobs#SPACE#in#SPACE#delhi"' , '#SPACE#delhi#SPACE#' , '"another#SPACE#text"' , '#SPACE#and#SPACE#this' ] #NEWLINE#
df [ 'GameName' ] = df [ 'user-agent' ] . apply ( select ) #NEWLINE#
template . render ( context ) #NEWLINE#
workbook . close ( ) #NEWLINE#
arr [ np . argsort ( arr [ : , ( 1 ) ] ) ] #NEWLINE#
[ [ 'A' , 0 ] , [ 'B' , 32 ] , [ 'C' , 69 ] , [ 'D' , 117 ] , [ 'E' , 173 ] , [ 'F' , 257 ] ] #NEWLINE#
result = datetime . datetime . now ( ) - datetime . timedelta ( seconds = X ) #NEWLINE#
list . __setitem__ ( index , value ) #NEWLINE#
test_df . where ( test_df >= 4 ) #NEWLINE#
zip ( [ a , b , c , d ] , repeat ( x ) ) #NEWLINE#
session . query ( RssFeed ) . get ( 1 ) #NEWLINE#
return new_list #NEWLINE#
libdl = ctypes . CDLL ( 'libdl.so' ) #NEWLINE#
ivd = { v : k for k , v in list ( d . items ( ) ) } #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( set ( mylist ) , key = lambda x : mylist . index ( x ) ) #NEWLINE#
self . canvas1 . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
[ ( '%.2f' % ( n / d ) ) for n , d in ( map ( float , i . split ( '/' ) ) for i in data ) ] #NEWLINE#
app . config [ 'MAIL_SERVER' ] = 'smtp.googlemail.com' #NEWLINE#
random . shuffle ( x ) #NEWLINE#
os . system ( cmd ) #NEWLINE#
ffprofile . set_preference ( 'extensions.adblockplus.currentVersion' , 'x.x.x' ) #NEWLINE#
system ( 'python#SPACE#{$pyt}' ) #NEWLINE#
a . append ( ( 2 , 3 , 4 ) ) #NEWLINE#
lasts . append ( bpos ) #NEWLINE#
df . agg ( * [ count ( c ) . alias ( c ) for c in df . columns ] ) . show ( ) #NEWLINE#
print ( 'some#SPACE#utf-8#SPACE#encoded#SPACE#bytestring#SPACE#â\x82¬' . decode ( 'utf-8' ) ) #NEWLINE#
match = re . search ( '<a#SPACE#href="(?P<url>[^"]*?)"' , line ) #NEWLINE#
array ( [ 0 , 2 , 1 ] , dtype = int64 ) #NEWLINE#
d = { '1' : 'one' , '3' : 'three' , '2' : 'two' , '5' : 'five' , '4' : 'four' } #NEWLINE# 'one' in list ( d . values ( ) ) #NEWLINE#
m . group ( 1 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
logging . getLoggerClass ( ) . root . handlers [ 0 ] . baseFilename #NEWLINE#
np . digitize ( [ 1.5 ] , a , right = True ) [ 0 ] #NEWLINE#
return math . sqrt ( ( p1 [ 0 ] - p2 [ 0 ] ) ** 2 + ( p1 [ 1 ] - p2 [ 1 ] ) ** 2 ) #NEWLINE#
input ( ) #NEWLINE#
data . objects . filter ( name__regex = '(word1|word2|word3)' ) #NEWLINE#
result = max ( iter ( your_dict . items ( ) ) , key = operator . itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
ITEM_PIPELINES = [ 'myproject.pipeline.somepipeline' ] #NEWLINE#
items = sorted ( list ( ipCount . items ( ) ) , key = lambda item : socket . inet_aton ( #NEWLINE# item [ 0 ] ) ) #NEWLINE#
app . config [ 'DEBUG' ] = os . environ . get ( 'DEBUG' , False ) #NEWLINE#
myA [ ( myA > val ) . nonzero ( ) [ 0 ] [ : 2 ] ] = 0 #NEWLINE#
data [ numpy . where ( data > 3 ) ] #NEWLINE#
intbids = [ int ( bid ) for bid in bids ] #NEWLINE#
isinstance ( a , Test1 ) #NEWLINE#
conn . voidcmd ( 'NOOP' ) #NEWLINE#
messages . success ( self . request . _request , 'Domain#SPACE#Added.' ) #NEWLINE#
ax . set_ylabel ( 'Y-axis' ) #NEWLINE#
server . quit ( ) #NEWLINE#
dict ( ( k , mydict [ k ] ) for k in keys_to_select ) #NEWLINE#
print ( reportlab . Version ) #NEWLINE#
print ( int ( netaddr . IPAddress ( '2001:0db8:0000:0000:0000:ff00:0042:8329' ) ) ) #NEWLINE#
re . findall ( '.{1,6}' , 'Four#SPACE#score#SPACE#and#SPACE#seven#SPACE#years#SPACE#ago.' ) #NEWLINE#
{ 'outer' : { 'middle' : { 'inner' : [ 1 , 2 , 3 ] } } } #NEWLINE#
[ ( ( index % 8 + 2 ) * item ) for index , item in enumerate ( range ( 1 , 21 ) ) ] #NEWLINE#
list ( [ x for x in names if 'aet' in x ] ) #NEWLINE#
df . convert_objects ( convert_numeric = True ) #NEWLINE#
( lambda a , b : a ( a , b ) ) ( lambda a , b : b * a ( a , b - 1 ) if b > 0 else 1 , num ) #NEWLINE#
sys . getsizeof ( s ) #NEWLINE#
__bind_key = 'db1' #NEWLINE#
print ( colored ( 'hello' , 'red' ) , colored ( 'world' , 'green' ) ) #NEWLINE#
list ( itertools . chain . from_iterable ( a ) ) #NEWLINE#
L [ - 3 : ] #NEWLINE#
df1 = df [ ( df . a != - 1 ) & ( df . b != - 1 ) ] #NEWLINE#
[ string for string in dnalist if all ( char in 'GATC' for char in string ) ] #NEWLINE#
excel = client . Dispatch ( 'Excel.Application' ) #NEWLINE#
df #NEWLINE#
app . mainloop ( ) #NEWLINE#
writer . writerows ( [ [ item ] for item in new_text_list ] ) #NEWLINE#
list ( set ( dict_a . values ( ) ) . intersection ( list ( dict_b . values ( ) ) ) ) #NEWLINE#
[ ( x + 2 ) for x in [ 1 , 2 , 3 ] ] #NEWLINE#
[ my_tuple [ isinstance ( x , str ) ] . append ( x ) for x in a_list ] #NEWLINE#
[ [ f for f in family if f != i ] for i , family in enumerate ( families ) ] #NEWLINE#
print ( f ( ) ) #NEWLINE#
ax . yaxis . set_major_locator ( yloc ) #NEWLINE#
return os . path . dirname ( str ( __file__ , encoding ) ) #NEWLINE#
best = sorted ( [ Player ( v , k ) for k , v in list ( d . items ( ) ) ] , reverse = True ) #NEWLINE#
api . update_status ( 'My#SPACE#status#SPACE#update#SPACE#@whoIReplyTo' , tweetId ) #NEWLINE#
plt . show ( ) #NEWLINE#
app . logger . addHandler ( handler ) #NEWLINE#
"""^.*(\\d+\\.\\d+)%#SPACE#packet#SPACE#loss$""" #NEWLINE#
print ( p . communicate ( ) [ 0 ] ) #NEWLINE#
numpy . dstack ( ( A , B ) ) . transpose ( 0 , 2 , 1 ) . reshape ( A . shape [ 0 ] * 2 , A . shape [ 1 ] ) #NEWLINE#
model_instance . image_field . save ( 'filename.jpeg' , fd . read ( ) , True ) #NEWLINE#
{ { request . META . HTTP_NAME } } #NEWLINE#
all ( x == mylist [ 0 ] for x in mylist ) #NEWLINE#
Date . parse ( 'Thu,#SPACE#1#SPACE#July#SPACE#2004#SPACE#22:30:00' ) #NEWLINE#
ax . xaxis . set_major_locator ( ticker . LogLocator ( base = 1000.0 ) ) #NEWLINE#
map ( itemgetter ( 0 ) , ( ( 1 , ) , ( 3 , ) ) ) #NEWLINE#
Counter ( elem [ 0 ] for elem in list1 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ ( '%s:%d' % ( e , i ) ) for e in mylist for i in ( 1 , 2 ) ] #NEWLINE#
print ( 'financial#SPACE#return#SPACE#of#SPACE#outcome#SPACE#1#SPACE#=#SPACE#{:.2f}' . format ( Decimal ( '33.515' ) ) ) #NEWLINE#
browser . get ( 'url' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
df . drop_duplicates ( ) #NEWLINE#
int ( '0x123' , 16 ) #NEWLINE#
pylab . legend ( loc = 'lower#SPACE#left' ) #NEWLINE#
print ( '\n\n' . join ( paras ) ) #NEWLINE#
re . sub ( '[^\\x00-\\x7f]' , '#SPACE#' , s ) #NEWLINE#
list ( itertools . combinations ( [ 1 , 2 , 3 , 4 ] , 2 ) ) #NEWLINE#
function ( ) [ 1 ] #NEWLINE#
df . set_index ( 'filename' , inplace = True ) #NEWLINE#
self . emit ( SIGNAL ( 'newStatuses(PyQt_PyObject)' ) , statuses ) #NEWLINE#
slice = arr [ 0 : 2 , 0 : 2 ] #NEWLINE#
a . reshape ( - 1 , m / k , k ) . swapaxes ( 0 , 1 ) . reshape ( - 1 , k ) #NEWLINE#
from functools import reduce #NEWLINE# print ( reduce ( lambda x , y : x + y * y , l ) ) #NEWLINE#
a = [ ( [ None ] * 7 ) for _ in range ( 7 ) ] #NEWLINE#
"""FireShot3+(2).png""" #NEWLINE#
map ( '' . join , itertools . product ( * letters ) ) #NEWLINE#
set ( [ 'stackoverflow' , 'serverfault' ] ) . issubset ( sites ) #NEWLINE#
return myDict [ 'rank' ] #NEWLINE#
my_list = [ line . rstrip ( '\n' ) for line in f ] #NEWLINE#
df . append ( row , ignore_index = True ) #NEWLINE#
bin ( 1 ) [ 2 : ] . zfill ( 8 ) #NEWLINE#
result = sum ( some_list [ 1 : ] ) #NEWLINE#
res = [ ( i if i < 4 else 0 ) for i in range ( 1 , 6 ) ] #NEWLINE#
print ( ET . tostring ( root ) ) #NEWLINE#
print ( sorted ( filenames , key = lambda f : map ( int , f . split ( '.' ) [ : - 1 ] ) ) ) #NEWLINE#
self . TEXT_INFO . config ( text = self . TEXT_INFO . cget ( 'text' ) + str ) #NEWLINE#
[ '1.1a1' , '1.1b1' , '1.1' ] #NEWLINE#
averages = [ ( ( x + y ) / 2.0 ) for x , y in zip ( my_list [ : - 1 ] , my_list [ 1 : ] ) ] #NEWLINE#
json_object = json . load ( raw ) #NEWLINE#
plt . show ( ) #NEWLINE#
cursor . execute ( '****' ) #NEWLINE#
indices = np . where ( np . in1d ( x , y ) ) [ 0 ] #NEWLINE#
warnings . filterwarnings ( 'ignore' , 'django.contrib.localflavor#SPACE#is#SPACE#deprecated' ) #NEWLINE#
get_keyring ( ) #NEWLINE#
np . unpackbits ( np . arange ( 2 ** r , dtype = 'uint8' ) [ : , ( None ) ] , axis = 1 ) [ : , 8 - r : ] #NEWLINE#
print ( [ x for x in a if x in b ] ) #NEWLINE#
s . find ( 'ÿÀ' ) #NEWLINE#
return int ( '' . join ( map ( str , nums ) ) ) #NEWLINE#
new_dict . setdefault ( v , [ ] ) . append ( k ) #NEWLINE#
newList = [ [ ch , len ( ch ) , ch . upper ( ) ] for ch in sent ] #NEWLINE#
np . sum ( boolarr ) #NEWLINE#
print ( [ { 'type' : x [ 'type_id' ] , 'name' : x [ 'type_name' ] } for x in d ] ) #NEWLINE#
re . sub ( '\\s+' , '#SPACE#' , 'some#SPACE##SPACE##SPACE#test#SPACE#with#SPACE##SPACE##SPACE##SPACE##SPACE#ugly#SPACE##SPACE#whitespace' ) #NEWLINE#
form = UserForm ( user = request . user ) #NEWLINE#
file . close ( ) #NEWLINE#
ROOT_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
a = sorted ( b , key = sortkeypicker ( [ '-Total_Points' , 'TOT_PTS_Misc' ] ) ) #NEWLINE#
db . settings . DATABASES [ 'default' ] [ 'NAME' ] #NEWLINE#
my_dataframe . columns . values . tolist ( ) #NEWLINE#
unistring = 'Μεταλλικα' #NEWLINE#
return [ k for k in seq if counts [ k ] == 1 ] #NEWLINE#
pattern = re . compile ( '^(?=.*Tim)(?=.*stupid).*$' ) #NEWLINE#
result = [ r for r in x if not any ( z in r for z in y ) ] #NEWLINE#
plt . colorbar ( h [ 3 ] , ax = ax ) #NEWLINE#
sock . setsockopt ( socket . IPPROTO_IP , socket . IP_ADD_MEMBERSHIP , mreq ) #NEWLINE#
warnings . warn ( 'deprecated' , DeprecationWarning ) #NEWLINE#
test . replace ( ',' , '#SPACE#' ) . replace ( '.' , '#SPACE#' ) . replace ( '?' , '#SPACE#' ) . split ( ) #NEWLINE#
print ( '' . join ( OrderedDict . fromkeys ( foo ) ) ) #NEWLINE#
df . applymap ( np . isreal ) . all ( 1 ) #NEWLINE#
self . Bind ( wx . EVT_SIZE , self . OnSize ) #NEWLINE#
[ '123' , '235' , '456' , '910' , '911' , '912' , '913' , '915' , '916' ] #NEWLINE#
print ( f . readlines ( ) ) #NEWLINE#
df [ 'deltas' ] = df . groupby ( 'client_id' ) #NEWLINE#
print ( headers [ 'Host' ] ) #NEWLINE#
db . CommitTrans ( ) #NEWLINE#
list ( im . getdata ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
with open ( 'daemons.txt' , 'w' ) as fp : #NEWLINE# #INDENT# fp . write ( '\n' . join ( '%s#SPACE#%s' % x for x in mylist ) ) #NEWLINE#
print ( rankdata ( [ 1 , 2 , 3 , 3 , 3 , 4 , 5 ] ) ) #NEWLINE#
mylist = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
[ ( x + y ) for x , y in zip ( string , string [ i : ] ) ] #NEWLINE#
np . array ( a ) #NEWLINE#
plt . ylabel ( 'Number#SPACE#of#SPACE#occurrence' ) #NEWLINE#
'Hello#SPACE#%s' % ',#SPACE#' . join ( [ str ( e ) for e in my_args ] ) #NEWLINE#
cherrypy . session . regenerate ( ) #NEWLINE#
'this#SPACE#is#SPACE#a#SPACE#%s' % 'unicode#SPACE#string' #NEWLINE#
df [ 'period' ] = df [ [ 'Year' , 'quarter' ] ] . apply ( lambda x : '' . join ( x ) , axis = 1 ) #NEWLINE#
list_of_lists = [ [ ] for _ in columns ] #NEWLINE#
day_indexes = dict ( ( name , i ) for i , name in enumerate ( calendar . day_name ) ) #NEWLINE#
base64 . b64encode ( str ( foo ) . encode ( 'ascii' ) ) #NEWLINE#
print ( recursive_dict_eval ( my_dict ) ) #NEWLINE#
print ( df . to_csv ( columns = [ 'A' , 'B' , 'C' ] , sep = '\t' , index = False ) ) #NEWLINE#
print ( '{latitude}#SPACE#{longitude}' . format ( ** geopoint ) ) #NEWLINE#
plt . savefig ( 'image.png' , bbox_inches = 'tight' , dpi = 100 ) #NEWLINE#
return 'a:%s,#SPACE#b:%s,#SPACE#c:%s' % ( a , b , c ) #NEWLINE#
[ [ 1 , 4 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 7 , 9 ] , [ 8 , 10 ] ] #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
self . emit ( QtCore . SIGNAL ( 'stateChanged(int,#SPACE#int)' ) , index , checkState ) #NEWLINE#
"""""" . join ( char * n for char in s ) #NEWLINE#
df [ 'ColA+ColB' ] = df [ 'ColA' ] . fillna ( '' ) + df [ 'ColB' ] . fillna ( '' ) #NEWLINE#
list ( conn . execute ( query ) . keys ( ) ) #NEWLINE#
nf . write ( str ( random . randint ( 0 , 1000 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
set ( itertools . permutations ( lst ) ) #NEWLINE#
pipe . close ( ) #NEWLINE#
""":#SPACE#Francja""" . lstrip ( ':#SPACE#' ) #NEWLINE#
f = codecs . open ( 'file.csv' , 'r' , 'utf-8' ) #NEWLINE#
NP . array ( v1fColor . split ( ',' ) , dtype = NP . uint8 ) #NEWLINE#
datetime . timedelta ( 0 , 540 ) #NEWLINE#
np . random . multinomial ( 10 , [ 0.1 , 0.2 , 0.7 ] ) #NEWLINE#
plt . legend ( loc = 3 ) #NEWLINE#
t . start ( ) #NEWLINE#
list ( { v [ 'id' ] : v for v in L } . values ( ) ) #NEWLINE#
scrapy . Request ( url = url , callback = callback , headers = { 'Cookie' : my_cookie } ) #NEWLINE#
return JsonResponse ( serializers . serialize ( 'json' , mensajes ) , safe = False ) #NEWLINE#
print ( 'Hi#SPACE#' + eval ( input ( 'Say#SPACE#something:#SPACE#' ) ) ) #NEWLINE#
us . encode ( 'utf-8' ) #NEWLINE#
f = lambda x , y : x [ 0 ] + x [ 1 ] + ( y [ 0 ] + y [ 1 ] ) #NEWLINE#
list_1 , list_2 = zip ( * ( ( x , y ) for x , y in zip ( list_1 , list_2 ) if f ( x ) ) ) #NEWLINE#
os . getenv ( 'PATH' ) #NEWLINE#
urlpatterns += static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) #NEWLINE#
"""{:03d}#SPACE#{:03d}#SPACE#{:03d}""" . format ( * foo ( ) ) #NEWLINE#
dict = { 'name' : 'Monty' , 'age' : 42 , 'food' : 'spam' } #NEWLINE#
os . path . abspath #NEWLINE#
df = pd . concat ( dfs ) #NEWLINE#
ax . set_xticks ( xticks ) #NEWLINE#
writer . writerow ( [ 'label1' , 'label2' , 'label3' ] ) #NEWLINE#
path = os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
content_sizer . Add ( grid_2 , 1 , wx . EXPAND | wx . ALL , 3 ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
numpy . array ( [ sub_array for sub_array in counts_array ] ) #NEWLINE#
mysocket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
"""Hello#SPACE#{user.name}""" . format ( ** stuf ( { 'user' : { 'name' : 'Markus' } } ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( unsorted_list , key = itemgetter ( 3 ) ) #NEWLINE#
self . Bind ( wx . EVT_CHAR_HOOK , self . onKey ) #NEWLINE#
t = s . reshape ( - 1 , 2 ) #NEWLINE#
hasattr ( cls , '_{}__flag' . format ( cls . __name__ ) ) #NEWLINE#
{ { ( news . description | truncatewords ) : 50 } } #NEWLINE#
return sum ( map ( sum , input ) ) #NEWLINE#
subj . translate ( None , '' . join ( chars_to_remove ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( range ( 2 , 2 ) ) #NEWLINE#
t = tuple ( int ( v ) for v in re . findall ( '[0-9]+' , x ) ) #NEWLINE#
re . split ( '\\s{2,}' , text ) #NEWLINE#
x = [ 'fee' , 'fiefoo' , 'fum' ] #NEWLINE#
list1 . sort ( key = int ) #NEWLINE#
ax . set_xlabel ( 't' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
axes . yaxis . set_major_formatter ( FormatStrFormatter ( '%d' ) ) #NEWLINE#
DF3 = DF [ ( DF [ 'a' ] == 0 ) | ( DF [ 'b' ] == 0 ) ] #NEWLINE#
cluster . fit ( X ) #NEWLINE#
sys . stdout = open ( '???' , 'w' , 0 ) #NEWLINE#
unsplitlinks = self . request . get ( 'links' ) #NEWLINE#
print ( re . sub ( '[aeiou]' , repl , 'yesterday' ) ) #NEWLINE#
print ( et . tostring ( tree , pretty_print = True ) ) #NEWLINE#
sys . stdout . write ( output_line ) #NEWLINE#
print ( { k : v for k , v in mime_types . items ( ) } ) #NEWLINE#
Input . objects . filter ( endDate__year = '2011' , endDate__month = '01' ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
[ x for x in [ f ( v ) for v in range ( 3 ) ] if x > 1 ] #NEWLINE#
[ '123' , '456' , '789' , '876' , '567' , '543' ] #NEWLINE#
np . zeros ( ( 2 , 3 , 2 ) ) #NEWLINE#
QtWidgets . QMainWindow . __init__ ( self , parent ) #NEWLINE#
print ( 'Done' ) #NEWLINE#
[ i for i in a if i in '0123456789' ] #NEWLINE#
return list ( filter ( os . path . isdir , [ os . path . join ( d , f ) for f in os . listdir ( d ) ] ) ) #NEWLINE#
date_list = [ ( base - datetime . timedelta ( days = x ) ) for x in range ( 0 , numdays ) ] #NEWLINE#
print ( np . array ( list ( mystr ) ) ) #NEWLINE#
subprocess . call ( [ 'java' , '-jar' , 'temp.jar' ] , env = env ) #NEWLINE#
all ( x == 'QS' or 'H' in x for x in mycards ) #NEWLINE#
conn . close ( ) #NEWLINE#
print ( json . dumps ( info ) ) #NEWLINE#
re . findall ( '\\w+' , 'my.#SPACE#text,#SPACE#--without--#SPACE#(punctuation)#SPACE#123' ) #NEWLINE#
"""""" . join ( sorted ( set ( s . lower ( ) ) ) ) . strip ( ) #NEWLINE#
print ( list ( range ( n , ( m + 1 ) * n , n ) ) ) #NEWLINE#
Sys_team . objects . filter ( hostname__contains = '.amgr.' ) #NEWLINE#
Counter ( { ( 2 ) : 1 , ( 5 ) : 1 , ( 6 ) : 1 , ( 13 ) : 4 , ( 16 ) : 2 , ( 19 ) : 3 , ( 20 ) : 2 , ( 21 ) : 1 } ) #NEWLINE#
browser . get ( 'link#SPACE#to#SPACE#the#SPACE#website' ) #NEWLINE#
set ( mylist ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'fr_FR.utf8' ) #NEWLINE#
'%(message)s' % { 'message' : Exception ( 'щ' ) } #NEWLINE#
dateutil . parser . parse ( '20080903' ) #NEWLINE#
np . genfromtxt ( 'filename' , dtype = None ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
queue . put ( 'DONE' ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
print ( is_cardano_triplet ( 2 , 1 , 5 ) ) #NEWLINE#
btn . grid ( column = x , row = y , sticky = N + S + E + W ) #NEWLINE#
{ value : key for key , values in my_map . items ( ) for value in values } #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#anooog1#SPACE#VALUES#SPACE#(%s,%s)' , ( 188 , 90 ) ) #NEWLINE#
"""read#SPACE#this#SPACE#short#SPACE#text""" . translate ( None , 'aeiou' ) #NEWLINE#
raw_img_data = img . tostring ( ) #NEWLINE#
app . config [ 'TRAP_BAD_REQUEST_ERRORS' ] = True #NEWLINE#
datetime . strptime ( '07/28/2014#SPACE#18:54:55.099000' , '%m/%d/%Y#SPACE#%H:%M:%S.%f' ) #NEWLINE#
a . __class__ . print_x ( b ) #NEWLINE#
model . fit ( X , y ) #NEWLINE#
re . match ( 'cat\\ndog' , s , re . M ) #NEWLINE#
all ( x > 0 for x in list_of_xs ) #NEWLINE#
plt . savefig ( 'second.ps' ) #NEWLINE#
df . set_index ( [ 'ticker' , 'date' ] , inplace = True ) #NEWLINE#
subprocess . Popen ( [ 'xdg-open' , path ] ) #NEWLINE#
file = open ( filename , 'r' , newline = '' ) #NEWLINE#
keep . update ( yoursequenceofvalues ) #NEWLINE#
df . groupby ( lambda x : x , axis = 1 ) . sum ( ) #NEWLINE#
print ( a . count ( '1' ) ) #NEWLINE#
groups = df . groupby ( 'customer_id' ) #NEWLINE#
ax . xaxis . set_major_formatter ( mdates . AutoDateFormatter ( locator ) ) #NEWLINE#
image . save ( image_out_path ) #NEWLINE#
main ( ) #NEWLINE#
[ ( float ( i ) if '.' in i or 'e' in i else int ( i ) ) for i in s ] #NEWLINE#
res = pd . DataFrame ( json . loads ( out ) ) #NEWLINE#
l = list ( gen_items ( ) ) #NEWLINE#
mymodel . objects . get ( pk = a [ i ] ) #NEWLINE#
[ int ( t ) for t in ( True , True , False ) ] #NEWLINE#
config . write ( configfile ) #NEWLINE#
frame . pack ( ) #NEWLINE#
print ( '#SPACE#' . join ( str ( i ) for i in a ) ) #NEWLINE#
os . system ( '/bin/ls' ) #NEWLINE#
Entry . objects . filter ( HasBit ( 'weekdays' , WEEKDAYS . fri ) ) #NEWLINE#
d = defaultdict ( lambda : 1 ) #NEWLINE#
subprocess . call ( [ 'wget' , '-nH' , image_url , '-P#SPACE##SPACE#images/' ] ) #NEWLINE#
row = [ thestring [ i : i + 3 ] for i in range ( 0 , len ( thestring ) , 3 ) ] #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
df [ df . columns [ 2 ] ] #NEWLINE#
return [ [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] ] #NEWLINE#
row . append ( 'Berry' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda v , k : { k : v } , reversed ( 'a/b/c' . split ( '/' ) ) , 42 ) #NEWLINE#
documents = [ sub_list [ 0 ] for sub_list in documents ] #NEWLINE#
pdb . gimp_progress_set_text ( 'This#SPACE#goes#SPACE#to#SPACE#the#SPACE#status#SPACE#bar' ) #NEWLINE#
sorted ( x ) == sorted ( y ) #NEWLINE#
plt . show ( ) #NEWLINE#
logging . getLogger ( ) . addHandler ( logging . StreamHandler ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , 'k.' ) #NEWLINE#
data = [ ( [ 0 ] * cols ) for i in range ( rows ) ] #NEWLINE#
s . start ( ) #NEWLINE#
getattr ( Color , <STR0> ) #NEWLINE#
return urllib . request . urlopen ( req ) #NEWLINE#
sapi . filter ( track = [ 'twitter' , 'python' , 'tweepy' ] ) #NEWLINE#
frw . close ( ) #NEWLINE#
[ 'lmao' , 'rofl' , 'lol' , 'wtf' , 'pwned' ] #NEWLINE#
[ 'the' , 'quick' , 'brown' , 'fox' , 'jumped' ] #NEWLINE#
button . connect_object ( 'event' , self . button_press , menu ) #NEWLINE#
array = np . array ( s . split ( '|' ) , dtype = int ) #NEWLINE#
plt . show ( ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#@@session.tx_isolation' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#bar' ) #NEWLINE#
cur . execute ( 'SET#SPACE#SESSION#SPACE#TRANSACTION#SPACE#ISOLATION#SPACE#LEVEL#SPACE#REPEATABLE#SPACE#READ' ) #NEWLINE#
return 'Unknown#SPACE#{key}' . format ( key = key ) #NEWLINE#
pd . concat ( [ DataFrame ( { 's1' : s1 } ) , DataFrame ( { 's2' : s2 } ) ] ) . ffill ( ) . bfill ( ) #NEWLINE#
new_func ( 'eggs' ) #NEWLINE#
self . emit ( SIGNAL ( 'newStatuses(list)' ) , statuses ) #NEWLINE#
data = numpy . empty ( shape = 1 , dtype = [ ( 'start#SPACE#date' , 'S11' ) , ( 'n' , int ) ] ) [ 0 ] #NEWLINE#
pool . apply_async ( test , ( t , ) , dict ( arg2 = 5 ) ) #NEWLINE#
birthplace = models . ForeignKey ( Birthplace , related_name = 'people' ) #NEWLINE#
profile . save ( ) #NEWLINE#
p = np . arange ( 20 ) . reshape ( ( 4 , 5 ) ) #NEWLINE#
dt = datetime . strptime ( datestring , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
self . fields [ 'support_staff' ] . queryset = User . objects . exclude ( user = 'michael' ) #NEWLINE#
np . <VAR0> ( np . <VAR0> ( x , y ) , z ) #NEWLINE#
df = df . astype ( str ) #NEWLINE#
self . assertTrue ( r . zrangebyscore ( name , '(1' , '(3' ) == [ 'two' ] ) #NEWLINE#
"""{0:08b}""" . format ( 1 ) #NEWLINE#
good_data = data [ : , ( data [ 0 ] == 1 ) ] #NEWLINE#
a != np . array ( None ) #NEWLINE#
setParameters ( [ 'abc' , 'def' , 'ghi' ] ) #NEWLINE#
print ( key , sum ( [ item [ 'tmst' ] for item in group ] ) ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/plain' ) #NEWLINE#
( x . count ( item ) for item in set ( x ) ) #NEWLINE#
[ _f for _f in lis if _f ] #NEWLINE#
re . match ( '^cat$\\ndog' , s , re . M ) . group ( 0 ) #NEWLINE#
a = a . replace ( '"' , "'" ) #NEWLINE#
value = float ( dic [ 'value' ] ) if dic [ 'operator' ] == '!=' else dic [ 'value' ] #NEWLINE#
df . to_csv ( filename ) #NEWLINE#
unpack ( 'hhl' , '\x00\x01\x00\x02\x00\x00\x00\x03' ) #NEWLINE#
urlpatterns += patterns ( '' , ( '^(?P<page_alias>.+?)/$' , 'views.static_page' ) ) #NEWLINE#
df = pd . read_sql ( query . statement , query . session . bind ) #NEWLINE#
"""String#SPACE#Replaced:#SPACE#XXXXX,#SPACE#YYYYY""" #NEWLINE#
w . pack ( ) #NEWLINE#
return np . sum ( np . vstack ( [ dr1 , dr2 , dr3 ] ) / drrp3 , axis = 1 ) #NEWLINE#
array ( [ 5.0 , 3.0 , 3.0 , 2.0 , 1.0 , 1.0 , 1.0 , 0.0 ] ) #NEWLINE#
active = True if request . POST . get ( 'active' ) == 'true' else False #NEWLINE#
documents = [ '#SPACE#' . join ( sentence ) for sentence in documents ] #NEWLINE#
con . commit ( ) #NEWLINE#
return '' . join ( chars [ : - 1 ] ) #NEWLINE#
print ( 'Not#SPACE#OK#SPACE#-#SPACE#MySQL#SPACE#is#SPACE#not#SPACE#running.' ) #NEWLINE#
subList = [ theList [ n : n + N ] for n in range ( 0 , len ( theList ) , N ) ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 'Cats' , 'like' , 'dogs' , 'as' , 'much' , 'cats.' ] #NEWLINE#
result_dict = [ u . __dict__ for u in my_query . all ( ) ] #NEWLINE#
return list ( OrderedDict . fromkeys ( my_list ) ) #NEWLINE#
arr [ np . isnan ( arr ) . cumsum ( 1 ) > 0 ] = np . nan #NEWLINE#
ITEM_PIPELINES = [ 'myproject.pipelines.somepipeline' ] #NEWLINE#
list ( foo . items ( ) ) [ list ( foo . keys ( ) ) . index ( 'apple' ) + 1 ] #NEWLINE#
y = numpy . r_ [ 0 , x [ : - 1 ] ] #NEWLINE#
"""Use#SPACE#BeautifulSoup#SPACE#or#SPACE#lxml#SPACE#instead.""" #NEWLINE#
logging . exception ( 'message' ) #NEWLINE#
[ item for item in full_list if all ( x not in omit for x in item ) ] #NEWLINE#
re . sub ( '(?<!^)(\\B|\\b)(?!$)' , '-' , string ) #NEWLINE#
print ( 'Primary#SPACE#argument#SPACE#is#SPACE#:#SPACE#' , sys . argv [ 1 ] ) #NEWLINE#
df = df [ df . line_race . notnull ( ) ] #NEWLINE#
self . thread . start ( ) #NEWLINE#
'A' == 'A' #NEWLINE#
app . run ( host = '0.0.0.0' ) #NEWLINE#
data = np . genfromtxt ( 'data.csv' , delimiter = ',' , names = True ) #NEWLINE#
sys . path . append ( os . path . abspath ( sys . path [ 0 ] ) + '/../' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
re . sub ( 'I#SPACE#am#SPACE#foo' , 'I#SPACE#am(?:#SPACE#foo)?' , '' ) #NEWLINE#
isinstance ( s , str ) #NEWLINE#
mylist [ 1 ] [ 'd' ] #NEWLINE#
img [ ( ... ) , : : - 1 ] #NEWLINE#
app . mainloop ( ) #NEWLINE#
( x * sin ( y ) ) . subs ( [ ( x , y ) , ( y , x ) ] , simultaneous = True ) #NEWLINE#
df . append ( duplicates ) . sort_index ( ) #NEWLINE#
xmldoc = minidom . parseString ( '{0}' . format ( str ) . encode ( 'utf-8' ) ) #NEWLINE#
set ( second_list ) . difference ( map ( f , first_list ) ) #NEWLINE#
[ 1 , 2 , 3 , 0 , 0 , 6 ] #NEWLINE#
v . decode ( 'iso-8859-1' ) == 'Äpple' #NEWLINE#
df . drop ( remove , axis = 1 , inplace = True ) #NEWLINE#
common_start ( 'apple#SPACE#pie#SPACE#available' , 'apple#SPACE#pies' ) #NEWLINE#
merged . to_csv ( 'merged.csv' , header = None , index = None ) #NEWLINE#
"""#SPACE#""" . join ( word for word in msg . split ( ) if word not in stopWords ) #NEWLINE#
f . apply ( clean , axis = 1 ) #NEWLINE#
max ( ( v , i ) for i , v in enumerate ( a ) ) [ 1 ] #NEWLINE#
DATA = 'line1\nline2\n' #NEWLINE#
pd . merge_asof ( x , y ) #NEWLINE#
[ 0 , 'h' , 1 , 'e' , 2 , 'l' , 3 , 'l' , 4 , 'o' ] #NEWLINE#
plt . legend ( ( line1 , line2 ) , ( 'Text' , 'Other#SPACE#Text' ) , numpoints = 1 , loc = 1 ) #NEWLINE#
self . a , self . b = a , b #NEWLINE#
logging . error ( '%s' , stacktrace ) #NEWLINE#
self . grid_columnconfigure ( 1 , weight = 1 ) #NEWLINE#
text = '<font#SPACE#face="Courier#SPACE#New,#SPACE#Courier,#SPACE#monospace">' + text + '</font>' #NEWLINE#
conn . commit ( ) #NEWLINE#
print ( datetime . now ( ) ) #NEWLINE#
a . resample ( '15S' , base = 5 ) . interpolate ( ) #NEWLINE#
repeat = re . compile ( '(?P<start>[a-z])(?P=start)+-?' ) #NEWLINE#
numpy . array ( [ 1 , 2 , 3 , 4 ] ) ** 2 #NEWLINE#
np . sum ( np . abs ( x ) ** 2 , axis = - 1 ) ** ( 1.0 / 2 ) #NEWLINE#
pylab . show ( ) #NEWLINE#
logging . getLogger ( ) . addHandler ( handler ) #NEWLINE#
metros = [ Metro ( ** k ) for k in data [ 'metros' ] ] #NEWLINE#
sum ( [ '123' , '345' , '567' ] , '' ) #NEWLINE#
cnxn . commit ( ) #NEWLINE#
datetime . date ( 2015 , 8 , 9 ) . isocalendar ( ) [ 1 ] #NEWLINE#
br . set_handle_equiv ( True ) #NEWLINE#
[ 'My' , 'Name' ] #NEWLINE#
plt . draw ( ) #NEWLINE#
[ 'test2' , 'test3' , 'test5' ] #NEWLINE#
print ( lm . prob ( 'word' , [ 'This#SPACE#is#SPACE#a#SPACE#context#SPACE#which#SPACE#generates#SPACE#a#SPACE#word' ] ) ) #NEWLINE#
combs . extend ( els ) #NEWLINE#
DateR = re . compile ( Date ) #NEWLINE#
ax . set_ylim ( 0 , 1 ) #NEWLINE#
datetime . datetime . now ( ) - datetime . timedelta ( minutes = 15 ) #NEWLINE#
my_randoms = random . sample ( range ( 1 , 101 ) , 10 ) #NEWLINE#
np . random . uniform ( - 10 , 10 , size = ( 1 , 5 , 1 ) ) #NEWLINE#
s . run ( 'uptime' ) #NEWLINE#
ax . set_ylabel ( '' ) #NEWLINE#
xVar , yVar = zip ( * ( ( x , y ) for x , y in zip ( xVar , yVar ) if y <= 100 ) ) #NEWLINE#
return dict ( ( key , getattr ( self , key ) ) for key in keys ) #NEWLINE#
new_list_of_dict = [ new_dict ( d ) for d in list_of_dict ] #NEWLINE#
df = pandas . read_excel ( open ( 'your_xls_xlsx_filename' , 'rb' ) , sheetname = 2 ) #NEWLINE#
name_list = root . xpath ( '/rootelement/book/author/name/text()' ) #NEWLINE#
'%d' * len ( s ) % tuple ( map ( ord , s ) ) #NEWLINE#
"""{}""" . format ( 38.2551994324 ) #NEWLINE#
df = pd . concat ( [ pd . read_sql_query ( q , connection ) for q in queries ] ) #NEWLINE#
np . array ( [ x for x in set ( tuple ( x ) for x in A ) & set ( tuple ( x ) for x in B ) ] ) #NEWLINE#
{ { d . content } } #NEWLINE#
print ( hex ( int ( '0xAD4' , 16 ) + 512 ) ) #NEWLINE#
a . reshape ( ( - 1 , 3 ) ) . max ( axis = 1 ) #NEWLINE#
np . array ( [ [ 0 ] , [ 1 ] ] ) #NEWLINE#
bytearray ( 100 ) #NEWLINE#
[ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] , #NEWLINE#
legend . figure . canvas . mpl_connect ( 'button_release_event' , self . on_release ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#a#SPACE#tuple#SPACE#{0}' . format ( t ) ) #NEWLINE#
data = json . loads ( '...' ) #NEWLINE#
e3 . pack ( ) #NEWLINE#
res = df [ df != 0.0 ] . bfill ( axis = 1 ) [ 'A' ] #NEWLINE#
File . create ( collection = 'foobar' , name = '/secret/password' ) #NEWLINE#
l . append ( '' ) #NEWLINE#
patches [ 0 ] . set_hatch ( '/' ) #NEWLINE#
conn . commit ( ) #NEWLINE#
plt . rcParams [ 'patch.linewidth' ] = 0 #NEWLINE#
print ( '\n' . join ( s . splitlines ( ) ) ) #NEWLINE#
results = [ int ( match . group ( 1 ) ) for match in matches ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
os . uname ( ) [ 1 ] #NEWLINE#
f . write ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
a [ 'id' ] [ ( None ) , : ] == b [ : , ( None ) ] #NEWLINE#
fig . savefig ( 'full_figure.png' ) #NEWLINE#
print ( parsedate_tz ( 'Fri,#SPACE#15#SPACE#May#SPACE#2009#SPACE#17:58:28#SPACE#+0700' ) ) #NEWLINE#
return [ val for i , val in enumerate ( values ) if i not in indices ] #NEWLINE#
[ some_string [ i : i + 2 ] for i in range ( 0 , len ( some_string ) , 2 ) ] #NEWLINE#
sum ( 1 for i in l if i % 4 == 3 ) #NEWLINE#
termios . tcsetattr ( sys . stdin , termios . TCSADRAIN , old_settings ) #NEWLINE#
ds . to_netcdf ( new_file ) #NEWLINE#
cython . uchar #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'a' , 'b' , 'c' ] #NEWLINE#
zf . close ( ) #NEWLINE#
a [ : , : , ( [ 5 ] ) ] . shape #NEWLINE#
sampleDF [ 'housing' ] = sampleDF [ 'housing' ] . map ( { 'yes' : 1 , 'no' : 0 } ) #NEWLINE#
tuple ( x for sublist in base_lists for x in sublist ) #NEWLINE#
return min ( l , key = lambda d : d . get ( 'id' , float ( 'inf' ) ) ) [ 'id' ] #NEWLINE#
expense . save ( ) #NEWLINE#
urllib . parse . unquote ( url ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
array ( [ 1 , 1 , 1 , 1 , 0 , 13 , 1 , - 2 , - 7 ] ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
plt . figlegend ( lines , labels , loc = 'lower#SPACE#center' , ncol = 5 , labelspacing = 0.0 ) #NEWLINE#
locale . localeconv ( ) [ 'decimal_point' ] #NEWLINE#
pd . DataFrame ( [ data ] ) #NEWLINE#
re . sub ( '\\s+' , lambda m : str ( m . end ( ) - m . start ( ) ) , string ) #NEWLINE#
admin . site . register ( User , UserProfileAdmin ) #NEWLINE#
pretty_csv . pretty_file ( 'test.csv' , header = False , border = False , delimiter = '|' ) #NEWLINE#
df [ 'count' ] = df . groupby ( [ 'cumsum' ] ) [ 'cumsum' ] . transform ( 'count' ) #NEWLINE#
"""Print#SPACE#percent#SPACE#%#SPACE#in#SPACE#sentence#SPACE#and#SPACE#not#SPACE#{0}""" . format ( test ) #NEWLINE#
np . einsum ( 'ijkl->kl' , M ) #NEWLINE#
s = ',#SPACE#' . join ( str ( x ) + '#SPACE#' + str ( a [ x ] ) for x in a ) #NEWLINE#
list ( groupings . values ( ) ) #NEWLINE#
np . argmin ( df . applymap ( np . isreal ) . all ( 1 ) ) #NEWLINE#
list ( flatten ( a ) ) #NEWLINE#
ax . plot ( x , y , 'k-' ) #NEWLINE#
browser . get ( 'file:///tmp/example.html' ) #NEWLINE#
[ 1 , 0 , 'integer#SPACE#division#SPACE#or#SPACE#modulo#SPACE#by#SPACE#zero' , 0 , 0 ] #NEWLINE#
return HttpResponse ( 'Hello#SPACE#World!' ) #NEWLINE#
df . max ( ) > 0 #NEWLINE#
a = p . stdout . read ( ) . decode ( 'UTF16' ) #NEWLINE#
timestamp = serializers . DateTimeField ( format = '%s.%f' ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
datetime . datetime ( 2011 , 1 , 10 , 9 , 30 , 0 , 934549345 ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( [ 'name' , df [ 1 ] . map ( foo ) ] ) #NEWLINE#
ax . set_xlabel ( 'x#SPACE#label' ) #NEWLINE#
foo ( ) #NEWLINE#
httplib . HTTPConnection ( 'myip.dnsomatic.com/' ) . request ( 'GET' , '/' ) #NEWLINE#
print ( et . tostring ( tree , pretty_print = True ) ) #NEWLINE#
max ( array . flatten ( ) ) #NEWLINE#
df . append ( [ df_try ] * 5 , ignore_index = True ) #NEWLINE#
sys . modules [ 'thepackage.submodule' ] = myreplacement #NEWLINE#
browser . implicitly_wait ( 30 ) #NEWLINE#
result = [ i for k , g in groupby ( lst , bool ) for i in ( ( sum ( g ) , ) if k else g ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . savefig ( 'test.png' , bbox_inches = 'tight' ) #NEWLINE#
p . sub ( 'gray#SPACE#\\1' , s ) #NEWLINE#
my_process . kill ( ) #NEWLINE#
print ( linalg . solve ( A , x ) ) #NEWLINE#
int ( '1,374' . replace ( ',' , '' ) ) #NEWLINE#
[ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ] #NEWLINE#
data = request . stream . read ( ) #NEWLINE#
sorted ( wrong_order , key = lambda x : int ( x . split ( '/' ) [ 0 ] [ 2 : ] ) ) #NEWLINE#
return sum ( delta_list , timedelta ( ) ) / len ( delta_list ) #NEWLINE#
cats = A . objects . annotate ( num_b = Count ( 'b' ) ) . filter ( num_b__lt = 2 ) #NEWLINE#
data = ( float ( row [ 1 ] ) for row in incsv ) #NEWLINE#
ax . scatter ( x , y , c = z , s = 100 , edgecolor = '' ) #NEWLINE#
f ( 3 , 5 , * [ 1 , 2 , 3 ] ) #NEWLINE#
[ 1 , 2 , 1 , 1 , 2 , 1 , 2 , 2 , 1 , 2 ] #NEWLINE#
time . sleep ( 0.001 ) #NEWLINE#
urllib . parse . quote ( 'í\x95\x9cê¸\x80' ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
{ 'layer1' : { 'layer2' : { 'layer3_3' : { 'b' : 1 , 'a' : 2 } , 'layer3_2' : 'string' } } } #NEWLINE#
[ 'hattrick' , 'google' , 'wampum' , 'newcom' , 'smithsonian' ] #NEWLINE#
py . test #NEWLINE#
val , idx = min ( ( val , idx ) for idx , val in enumerate ( my_list ) ) #NEWLINE#
textb = 'so#SPACE#is#SPACE#very#SPACE#cool' #NEWLINE#
time . strptime ( '20100304#SPACE#082835' , '%Y%m%d#SPACE#%H%M%S' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
ax2 . yaxis . set_major_locator ( matplotlib . ticker . LinearLocator ( nticks ) ) #NEWLINE#
[ 'aet2000' , 'aet2001' ] #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_title ( 'Likelihood#SPACE#of#SPACE#Reaching#SPACE#the#SPACE#Frontpage' ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
uniq . append ( max ( scores , key = itemgetter ( 'score' ) ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
arr . ravel ( order = 'F' ) . tofile ( 'output.dat' ) #NEWLINE#
write ( 'Temperature#SPACE#is#SPACE#{0:.1f}#SPACE#and#SPACE#pressure#SPACE#is#SPACE#{1:.2f})' . format ( X , Y ) ) #NEWLINE#
result = pd . merge ( samples , df , how = 'inner' ) #NEWLINE#
print ( new_func . __name__ ) #NEWLINE#
A . astype ( 'bar' ) #NEWLINE#
plt . show ( ) #NEWLINE#
versions_list . sort ( key = lambda s : map ( int , s . split ( '.' ) ) ) #NEWLINE#
lambda x , i = i : x % i == 0 #NEWLINE#
obj = result . json ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
pd . read_csv ( 'whitespace.csv' , header = None , sep = '\\s+|\t+|\\s+\t+|\t+\\s+' ) #NEWLINE#
print ( 'os.stat().st_size#SPACE#returns:' , os . stat ( 'out.txt' ) . st_size ) #NEWLINE#
exit ( ) #NEWLINE#
df . groupby ( 'country' ) . apply ( lambda df : df . irow ( df . value . argmax ( ) ) ) #NEWLINE#
self . view . setModel ( model ) #NEWLINE#
a [ 2 : 4 ] = a [ 3 : 1 : - 1 ] #NEWLINE#
quote_df = quote_df . ix [ : , ( [ 0 , 3 , 2 , 1 , 4 , 5 , 8 , 9 , 30 , 31 ] ) ] #NEWLINE#
plt . plot ( x , y , '--' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#rowid#SPACE#FROM#SPACE#components#SPACE#WHERE#SPACE#name#SPACE#=#SPACE#?' , ( name , ) ) #NEWLINE#
glColor3ub ( 0 , 0 , 255 ) #NEWLINE#
sum ( np . einsum ( 'ij...,i->ij...' , A , p ) ) #NEWLINE#
conn . commit ( ) #NEWLINE#
np . dot ( a , b ) #NEWLINE#
print ( json . loads ( json_string ) ) #NEWLINE#
print ( 'Yes#SPACE#sir#SPACE#:)' ) #NEWLINE#
print ( 'strncmp#SPACE#success!' ) #NEWLINE#
"""""" . join ( map ( '' . join , zip ( * ( [ iter ( a ) ] * 2 ) ) ) [ : : - 1 ] ) #NEWLINE#
newwords = set ( words ) . difference ( englishwords ) #NEWLINE#
a [ np . arange ( a . shape [ 0 ] ) [ : , ( np . newaxis ) ] , i ] #NEWLINE#
myiter = ( 100 if i in ( 0 , 1 , 3 ) else e for i , e in enumerate ( mylist ) ) #NEWLINE#
df . select_dtypes ( include = [ 'datetime64' ] ) #NEWLINE#
df . loc [ ( 'A' ) , : ] = df_ #NEWLINE#
self . response . headers . add_header ( 'Set-Cookie' , C2 . output ( header = '' ) ) #NEWLINE#
pyplot . plot ( [ point [ 0 ] , point2 [ 0 ] ] , [ point [ 1 ] , point2 [ 1 ] ] ) #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
c = b [ 1 : ] #NEWLINE#
pool = multiprocessing . Pool ( 2 ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
ax1 . set_yticklabels ( [ ] ) #NEWLINE#
os . environ [ 'my_namespace.some_param' ] #NEWLINE#
datetime . strptime ( date_string , '%Y-%m-%d' ) #NEWLINE#
nltk . downlad ( 'all' ) #NEWLINE#
del sys . modules [ 'Mod_1' ] #NEWLINE#
list ( lrange ( 138264128374162347812634134 , 138264128374162347812634140 ) ) #NEWLINE#
subprocess . call ( cmd ) #NEWLINE#
set ( pd . DataFrame ( df . genres . tolist ( ) ) . stack ( ) . tolist ( ) ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
array ( [ 0 , 7 , 1 , 0 , 4 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ] ) #NEWLINE#
"""{0},#SPACE#{1},#SPACE#{2}""" . format ( 1 , 2 , 3 ) . encode ( ) #NEWLINE#
df1 . ix [ [ 1 , 3 ] ] #NEWLINE#
np . ravel_multi_index ( X . T , dims ) #NEWLINE#
[ x for t in zip ( * lists ) for x in t ] #NEWLINE#
re . sub ( '\\W+' , '' , your_string ) #NEWLINE#
re . findall ( '\\w+' , string ) #NEWLINE#
print ( ( 'global:' , x ) ) #NEWLINE#
print ( np . sort ( np . partition ( y , - 10 , axis = 1 ) [ : , - 10 : ] , axis = 1 ) ) #NEWLINE#
os . chmod ( 'mydir' , 493 ) #NEWLINE#
print ( 'â\x99\x9e' . decode ( 'utf-8' ) ) #NEWLINE#
df . index . get_loc ( ds ) #NEWLINE#
re . findall ( '[^\\W\\d_]+|\\d+' , 'Westminister15London#SPACE#England' ) #NEWLINE#
[ entry for tag in tags for entry in entries if tag in entry ] #NEWLINE#
print ( 'unmarked#SPACE#nodes:#SPACE#' + '#SPACE#' . join ( str ( x ) for x , y in list ( d . items ( ) ) if #NEWLINE# not y ) ) #NEWLINE#
os . chdir ( 'd:' ) #NEWLINE#
os . chdir ( 'c:' ) #NEWLINE#
scatter ( x , y , s = [ 5 , 50 , 500 , 1000 , 1500 , 2000 ] , color = 'green' , marker = 'h' ) #NEWLINE#
df = pd . read_csv ( file_path , header = None , usecols = [ 3 , 6 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'x' , 'sin' , 'x' , 2 , 'pow' , '*' ] #NEWLINE#
outputfile . close ( ) #NEWLINE#
pattern = '##SPACE#REG#SPACE#{0}([^#]*(?:#(?!#SPACE#reg#SPACE#{0})[^#]*)*)' #NEWLINE#
pd . concat ( [ s1 , s2 ] , axis = 1 ) #NEWLINE#
return cipher . decrypt ( base64 . b64decode ( text ) ) #NEWLINE#
len ( set ( map ( len , ( a , b , c ) ) ) ) == 1 #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#from#SPACE#foo' ) #NEWLINE#
list ( bin ( 6 ) [ 2 : ] ) #NEWLINE#
print ( datetime . strftime ( '%b#SPACE#%d,%Y' ) ) #NEWLINE#
self . Bind ( wx . EVT_ENTER_WINDOW , self . _onMouseEnter ) #NEWLINE#
sorted ( top_n , key = lambda t : ( - t [ 1 ] , t [ 0 ] ) ) #NEWLINE#
parser . add_option ( '-f' , '--file' , dest = 'filename' , help = 'foo#SPACE#help' ) #NEWLINE#
d [ 'word' ] [ keys [ 0 ] ] [ keys [ 1 ] ] #NEWLINE#
p1 = subprocess . Popen ( [ 'cmd' , '/C' , 'date' ] , stdout = subprocess . PIPE ) #NEWLINE#
setattr ( self , key , initial_data [ key ] ) #NEWLINE#
b . __class__ . __class__ #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( html_string ) #NEWLINE#
[ item for item in l for _ in range ( r ) ] #NEWLINE#
print ( np . array ( [ 1.123456789 ] ) ) #NEWLINE#
sorted ( unsorted_list , key = lambda x : order . get ( x , float ( 'inf' ) ) ) #NEWLINE#
l . sort ( key = lambda x : x . timetuple ( ) [ 1 : 3 ] ) #NEWLINE#
print ( '\n' . join ( '{}:#SPACE#{}' . format ( * k ) for k in enumerate ( lst ) ) ) #NEWLINE#
self . log_message ( 'STUFF' ) #NEWLINE#
baz = models . ManyToManyField ( Child , related_name = 'baz+' ) #NEWLINE#
yaml . dump ( dataMap , f , default_flow_style = False ) #NEWLINE#
rdd = df . rdd . map ( list ) #NEWLINE#
d += dt . timedelta ( days = 1 ) #NEWLINE#
root . destroy ( ) #NEWLINE#
[ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ] , #NEWLINE#
ax6 . set_yticks ( np . linspace ( 0 , 1 , 7 ) ) #NEWLINE#
request = urllib . request . Request ( url ) #NEWLINE#
test = 'I#SPACE#have#SPACE#one#SPACE#{fruit}#SPACE#on#SPACE#the#SPACE#{place}.' . format ( ** dic ) #NEWLINE#
list ( csv . reader ( open ( 'demo.txt' , 'rb' ) , delimiter = '\t' ) ) #NEWLINE#
print ( df . to_html ( ) ) #NEWLINE#
permissions = Permission . objects . filter ( user = user ) #NEWLINE#
lst = [ [ 1 , 2 , 3 ] , [ 1000000.0 , 2000000.0 , 3000000.0 ] , [ 1e-06 , 2e-06 , 3e-06 ] ] #NEWLINE#
[ ( n - 9 * int ( ( n - 1 ) / 9 ) ) for n in list1 ] #NEWLINE#
dic . get ( 'b' , 'b' ) #NEWLINE#
personId = request . form . get ( 'personId' , type = int ) #NEWLINE#
requests . post ( url , params = params , data = json . dumps ( data ) , headers = headers ) #NEWLINE#
self . configure ( relief = 'sunken' ) #NEWLINE#
c = dict ( a , ** b ) #NEWLINE#
k . append ( ( str ( item [ 0 ] ) , { 'num' : str ( item [ 1 ] ) } ) ) #NEWLINE#
array ( [ [ [ 4 , 5 ] , [ 12 , 14 ] , [ 24 , 27 ] ] , [ [ 0 , 0 ] , [ 6 , 7 ] , [ - 8 , - 9 ] ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( re . sub ( 'blah' , callback , s ) ) #NEWLINE#
fig . savefig ( 'test.png' , dpi = 600 ) #NEWLINE#
sort_me . sort ( key = attr_or_itemgetter ( 'name' ) ) #NEWLINE#
df [ ( df . a > 0 ) & df . index . isin ( [ 0 , 2 , 4 ] ) ] #NEWLINE#
print ( 'Upload#SPACE#Error:' , uploadr [ 0 ] ) #NEWLINE#
pow ( Decimal ( '2' ) , Decimal ( '2.5' ) ) #NEWLINE#
f . close ( ) #NEWLINE#
s = '{foo}#SPACE#{{bar}}' #NEWLINE#
plt . show ( ) #NEWLINE#
logging . info ( 'Danger#SPACE#Will#SPACE#Robinson!' ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
"""I#SPACE#am#SPACE#a#SPACE#string""" . encode ( 'ASCII' ) #NEWLINE#
mainloop ( ) #NEWLINE#
sort ( data , key = datekey , reverse = True ) #NEWLINE#
subprocess . check_call ( [ 'ping' , 'google.com' ] , shell = True ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
profile . save ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
file . write ( bytes ( chr ( int ( mgcnmbr ) ) , 'iso8859-1' ) ) #NEWLINE#
ord ( 'Â£' ) #NEWLINE#
sys . stdout = self . _stdout #NEWLINE#
img . save ( 'image.png' ) #NEWLINE#
session . commit ( ) #NEWLINE#
df . groupby ( [ 'a' , 'name' ] , as_index = False ) . median ( ) #NEWLINE#
c = [ x [ 0 ] for x in A ] #NEWLINE#
json . dumps ( o ) #NEWLINE#
app . run ( ) #NEWLINE#
QtCore . QObject . connect ( a , QtCore . SIGNAL ( 'QtSig()' ) , pyClass . pyMethod ) #NEWLINE#
sorted ( unsorted_list , key = order . __getitem__ ) #NEWLINE#
array = np . fromiter ( s . split ( '|' ) , dtype = int ) #NEWLINE#
self . lc . Bind ( wx . EVT_LIST_BEGIN_DRAG , self . onDrag ) #NEWLINE#
[ ( A [ x ] , B [ x % len ( B ) ] ) for x in range ( len ( A ) ) ] #NEWLINE#
is_dir = lambda zipinfo : zipinfo . filename . endswith ( '/' ) #NEWLINE#
ax . set_xlabel ( 'Distance' ) #NEWLINE#
activate ( 'en' ) #NEWLINE#
value = list ( d . values ( ) ) [ index ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ [ - 1 , - 2 , - 3 ] , [ - 4 , - 5 , - 6 ] , [ - 7 , - 8 , - 9 ] ] #NEWLINE#
pattern . match ( string ) #NEWLINE#
g . add_nodes_from ( l ) #NEWLINE#
df = pd . read_csv ( 'my.csv' , dtype = { 'my_column' : np . float64 } ) #NEWLINE#
uuid . uuid4 ( ) #NEWLINE#
re . sub ( '[^\\w\\-_\\.#SPACE#]' , '_' , filename ) #NEWLINE#
return Response ( status = 401 , data = { 'detail' : 'Bad#SPACE#Access#SPACE#Token' } ) #NEWLINE#
np . log ( df / df . shift ( ) ) #NEWLINE#
br . set_cookiejar ( cj ) #NEWLINE#
file . write ( your_string + '\n' ) #NEWLINE#
plt . show ( ) #NEWLINE#
file_old = open ( '1.php' , mode = 'rU' , encoding = 'gbk' , errors = 'strict' ) #NEWLINE#
{ 'b' : [ 2 , 3 ] , 'c' : [ 3 ] , 'a' : [ 1 , 2 ] } #NEWLINE#
files = sorted ( ( f for f in files if firstFile <= int ( f ) < lastFile ) , key = int ) #NEWLINE#
tree = ET . parse ( 'blah.xml' ) #NEWLINE#
get_multi ( keys , key_prefix = '' , namespace = None ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
logging . config . fileConfig ( 'logging.conf' ) #NEWLINE#
'is' , 'a' , 'quote' , 'from' , 'JFK' , 'who' , 'is' , 'a' , 'former' #NEWLINE#
'ask' , 'what' , 'you' , 'can' , 'do' , 'for' , 'your' , 'country' , '!' #NEWLINE#
binary_representation = struct . pack ( '{}i' . format ( len ( numbers ) ) , * numbers ) #NEWLINE#
a = pd . read_table ( 'out.file' , header = None , sep = '#SPACE#' ) #NEWLINE#
[ 'm' , 'on' , 'key' ] #NEWLINE#
[ 'm' , 'onk' , 'ey' ] #NEWLINE#
[ 'm' , 'onke' , 'y' ] #NEWLINE#
[ 'mo' , 'n' , 'key' ] #NEWLINE#
[ 'mo' , 'nk' , 'ey' ] #NEWLINE#
[ 'mo' , 'nke' , 'y' ] #NEWLINE#
[ 'mon' , 'k' , 'ey' ] #NEWLINE#
[ 'mon' , 'ke' , 'y' ] #NEWLINE#
[ 'monk' , 'e' , 'y' ] #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
os . system ( 'mkdir#SPACE#c:\\temp\\vhd' ) #NEWLINE#
l [ len ( l ) : - len ( l ) - 1 : - 1 ] #NEWLINE#
sum ( 1 for _ in iterable ) #NEWLINE#
newmethod_a = functools . partial ( newmethod , foo = 'a' ) #NEWLINE#
dict [ 'data' ] . append ( { 'type' : 'locale' , 'lat' : 321 } ) #NEWLINE#
df = pd . DataFrame ( list_of_series , columns = cols ) #NEWLINE#
ax2 . set_title ( 'Cells' ) #NEWLINE#
d = { k : ( lambda s , k = k : s * A [ k ] ) for k in range ( n ) } #NEWLINE#
ax1 . set_xlim ( [ 0 , 5 ] ) #NEWLINE#
{ { ( your_date_value | date ) : 'SHORT_DATE_FORMAT' } } #NEWLINE#
parser . parse ( io . BytesIO ( '<a>Ã©</a>' ) ) #NEWLINE#
people = [ 'Lisa' , 'Pam' , 'Phil' , 'John' ] #NEWLINE#
signchange [ 0 ] = 0 #NEWLINE#
[ ( p [ 0 ] , sum ( p [ 1 : ] ) / 2.0 ) for p in PlayerList ] #NEWLINE#
top_package = __import__ ( __name__ . split ( '.' ) [ 0 ] ) #NEWLINE#
lst = [ ( 'apple' , 1 ) , ( 'banana' , 2 ) , { 'k' : [ 1 , 2 , 3 ] } , { 'l' : [ 4 , 5 , 6 ] } ] #NEWLINE#
plt . show ( ) #NEWLINE#
re . split ( '(\\W)' , """foo/bar#SPACE#spam#NEWLINE#eggs""" ) #NEWLINE#
set ( a ) . intersection ( b ) #NEWLINE#
summary_dict = { c : [ ] for c in new . columns [ 1 : ] } #NEWLINE#
df . merge ( s . to_frame ( ) , left_index = True , right_index = True ) #NEWLINE#
print ( f . reap ( [ 1 , 2 , 3 ] , 4 ) ) #NEWLINE#
[ [ i for i in sublist if counts [ i ] == 1 ] for sublist in mylist ] #NEWLINE#
np . matmul ( a , b ) #NEWLINE#
( '^home/?$' , 'user_home_page' ) , #NEWLINE#
buckets = [ [ 0 ] * 100 ] * 100 #NEWLINE#
ex . reset_index ( ) . pivot_table ( index = 'A' , aggfunc = lambda x : x . nunique ( ) ) #NEWLINE#
sum ( item . get ( 'one' , 0 ) is True for item in list ( tadas . values ( ) ) ) #NEWLINE#
ax . set_ylim ( - 5 , 5 ) #NEWLINE#
df [ 'col_name' ] = df [ 'col_name' ] . astype ( object ) #NEWLINE#
foo_for_today = Foo . objects . filter ( datefield__date = datetime . today ( ) ) #NEWLINE#
print ( get_domain ( 'http://abcde.co.uk' , tlds ) ) #NEWLINE#
p = np . delete ( p , 2 , axis = 1 ) #NEWLINE#
next ( a for a in s if s . count ( a ) == 1 ) #NEWLINE#
ax . set_ylabel ( 'Percentage#SPACE#of#SPACE#Frontpaged#SPACE#Submissions' ) #NEWLINE#
df . reorder_levels ( [ 'Firstlevel' , 'A' , 'B' ] ) #NEWLINE#
df . set_index ( 'recd' ) . resample ( '1M' , how = 'count' ) #NEWLINE#
worksheet . update_cells ( cell_list ) #NEWLINE#
bigList . sort ( key = operator . itemgetter ( * args ) ) #NEWLINE#
print ( '[%s]#SPACE#%s' % ( mod . __name__ , msg ) ) #NEWLINE#
print ( sum ( 1 for elem in list1 if elem [ 0 ] == entry [ 0 ] ) ) #NEWLINE#
dict ( { 'one' : 1 , 'two' : 2 } ) #NEWLINE#
var = 'dork1' #NEWLINE#
tostring ( element ) . split ( '>' , 1 ) #NEWLINE#
map ( tuple , map ( flatten , zip ( a , b , c ) ) ) #NEWLINE#
ax . set_ylabel ( 'Frequency' ) #NEWLINE#
pd . concat ( [ df [ [ 'Knownvalue' ] ] , new_cols ] , axis = 1 ) #NEWLINE#
return '\n' . join ( '{}#SPACE#{}' . format ( k , v ) for k , v in list ( self . items ( ) ) ) #NEWLINE#
[ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) ] #NEWLINE#
mylist = [ '' . join ( word . split ( 'l' ) [ : 2 ] ) for word in [ 'Hello' , 'world' ] ] #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
re . compile ( '<!-([^-])' ) , lambda match : '<!--' + match . group ( 1 ) #NEWLINE#
d = { 'foo' : 'bar' } #NEWLINE#
finder . score_ngrams ( bigram_measures . pmi ) #NEWLINE#
print ( np . nanmean ( arr , axis = 0 ) ) #NEWLINE#
ivd = dict ( ( v , k ) for k , v in list ( d . items ( ) ) ) #NEWLINE#
do_something ( '{0}#SPACE#{1}#SPACE#{2}' . format ( 1 , 2 , 3 ) ) #NEWLINE#
a [ np . arange ( np . shape ( a ) [ 0 ] ) [ : , ( np . newaxis ) ] , np . argsort ( a ) ] #NEWLINE#
np . expand_dims ( np . array ( [ 1 , 2 , 3 , 4 ] ) , 0 ) #NEWLINE#
keys = set ( l1 ) . intersection ( d1 ) #NEWLINE#
df = pd . concat ( [ df , dummy_df ] , axis = 1 ) #NEWLINE#
doc . toxml ( ) #NEWLINE#
print ( d [ 1 ] [ 2 ] [ 3 ] ) #NEWLINE#
isinstance ( fn , collections . Callable ) #NEWLINE#
df . reindex ( prev_dates . union ( df . index ) ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
foo . save ( ) #NEWLINE#
print ( struct . pack ( '>I' , your_int ) ) #NEWLINE#
r = requests . get ( 'https://api.github.com' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
len ( words ) #NEWLINE#
MainWindow . show ( ) #NEWLINE#
max ( glob . iglob ( 'PermissionsOnSystems*' ) , key = os . path . getmtime ) #NEWLINE#
plot . plot ( * np . log10 ( np . loadtxt ( 'plot_me.dat' , unpack = True ) ) , linewidth = 2.0 ) #NEWLINE#
map ( centroids . __delitem__ , sorted ( index , reverse = True ) ) #NEWLINE#
array ( [ 3 , 4 , 5 , 1 , 2 ] ) #NEWLINE#
a = [ 0 , 1 ] #NEWLINE#
plt . savefig ( 'test.pdf' ) #NEWLINE#
return render_to_response ( 'template.htm' , { 'people' : people } ) #NEWLINE#
testDf . iloc [ : , 1 : ] . stack ( ) . groupby ( level = 0 ) . nunique ( ) #NEWLINE#
np . where ( np . all ( a == b , axis = 1 ) ) #NEWLINE#
s = set ( lst ) #NEWLINE#
[ '(' , '2' , '.' , 'x' , '.' , '(' , '3' , '-' , '1' , ')' ] #NEWLINE#
nums . search ( '1' ) . group ( 0 ) #NEWLINE#
df . eq ( 3.2 ) . any ( axis = 1 ) & ~ df . isin ( [ 0.1 , 1.2 ] ) . any ( axis = 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ item for item , count in list ( collections . Counter ( a ) . items ( ) ) if #NEWLINE# count > 1 ] ) #NEWLINE#
outfile . writelines ( lines ) #NEWLINE#
iqr = np . subtract ( * np . percentile ( x , [ 75 , 25 ] ) ) #NEWLINE#
product ( [ [ 1 , 2 ] , [ 4 , 5 ] ] ) #NEWLINE#
print ( { k : round ( v ) for k , v in x . items ( ) } ) #NEWLINE#
array ( [ [ 1 , 0 , 1 ] , [ 2 , 0 , 1 ] ] ) #NEWLINE#
list ( ordered_merge ( mapping , [ 'B' , 'C' , 'A' , 'A' , 'B' , 'C' ] ) ) #NEWLINE#
max ( glob . glob ( os . path . join ( directory , '*/' ) ) , key = os . path . getmtime ) #NEWLINE#
ax . set_ylim ( [ 0 , 1 ] ) #NEWLINE#
df . plot ( x = 'C1' , y = 'C3' , ax = ax ) #NEWLINE#
shutil . copyfile ( 'xxx.mp4' , 'yyy.mp4' ) #NEWLINE#
print ( df . iloc [ : , ( np . r_ [ 1 : 3 , 6 : len ( df . columns ) ] ) ] ) #NEWLINE#
Foo . allocate_ids ( max = 26740080011050 ) #NEWLINE#
print ( ( old_string , '=' , new_string ) ) #NEWLINE#
sys . exit ( test ( ) ) #NEWLINE#
ax . scatter ( [ 0.2 , 0.5 , 0.8 ] , [ 2.3 , 0.47 , 1.0 ] , [ 2.1 , 5.3 , 0.7 ] ) #NEWLINE#
x_pieces = [ x [ i : i + step ] for i in range ( 0 , len ( x ) , step ) ] #NEWLINE#
hex ( random . randint ( 0 , 16777215 ) ) [ 2 : ] . upper ( ) #NEWLINE#
print ( dict ( a = dict ( b = True ) ) ) #NEWLINE#
numpy . vstack ( ( a , b , c ) ) . T #NEWLINE#
server . serve_forever ( ) #NEWLINE#
print ( #NEWLINE# 'â\x94\x94â\x94\x80â\x94\x80â\x94\x80â\x94\x80â\x94\x80â\x94\x80â\x94\x80â\x94\x98' #NEWLINE# ) #NEWLINE#
"""NLTK#SPACE#is#SPACE#a#SPACE#python#SPACE#library#SPACE#for#SPACE#working#SPACE#human-written#SPACE#text.#SPACE#Summarize#SPACE#is#SPACE#a#SPACE#package#SPACE#that#SPACE#uses#SPACE#NLTK#SPACE#to#SPACE#create#SPACE#summaries.""" #NEWLINE#
B = list ( A [ 0 ] ) #NEWLINE#
b = [ x for x in a if x not in itemsToRemove ] #NEWLINE#
super ( PaginationFormSet , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
[ [ [ [ 1 ] , [ 2 ] ] , [ [ 3 ] , [ 4 ] ] ] , [ [ [ 5 ] , [ 6 ] ] , [ [ 7 ] , [ 8 ] ] ] ] #NEWLINE#
return redirect ( 'anotherView' , username = request . user . username , ** kwargs ) #NEWLINE#
[ ( ( '' , i [ 1 ] ) if i [ 0 ] == None else i ) for i in map ( None , a , b ) ] #NEWLINE#
pprint . pprint ( shallow ( parser . st2list ( parser . expr ( '(((1+0)+1)+1)' ) ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
'b' in list ( vars ( Foo ) . values ( ) ) #NEWLINE#
[ [ 2 , 3 ] , [ 7 , 1 ] ] #NEWLINE#
print ( binascii . hexlify ( 'ABCZ' ) ) #NEWLINE#
df = pd . DataFrame ( df_dict ) #NEWLINE#
intersect = { key : [ o , spec2 [ key ] ] for key , o in list ( spec1 . items ( ) ) if key in #NEWLINE# spec2 } #NEWLINE#
{ 'default_extend_env' : { 'PATH' : '{PATH};C:\\Python27' } } #NEWLINE#
root . mainloop ( ) #NEWLINE#
dlg . show_all ( ) #NEWLINE#
( np . arange ( 2 ** r ) [ : , ( None ) ] & 2 ** np . arange ( r ) [ : : - 1 ] > 0 ) . astype ( int ) #NEWLINE#
from functools import reduce #NEWLINE# return sum ( reduce ( operator . mul , data ) for data in zip ( * lists ) ) #NEWLINE#
df [ df . duplicated ( subset = 'website' , keep = False ) ] #NEWLINE#
fruits = { k : [ ] for k in names } #NEWLINE#
br . form [ 'prodclass' ] = [ '1' ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
d . setdefault ( x , [ ] ) . append ( y ) #NEWLINE#
df . groupby ( level = 0 ) [ 3 ] . transform ( lambda x : x [ 0 ] / x [ 1 ] ) #NEWLINE#
soup . select ( 'div[class=aa]' ) #NEWLINE#
print ( os . path . isdir ( '/home/el' ) ) #NEWLINE#
re . sub ( '(?<=fo+)bar(?=baz)' , 'quux' , 'foobarbaz' ) #NEWLINE#
unpack ( 'cchs*' , data ) #NEWLINE#
parser . add_argument ( 'stop' , type = int , help = 'Specify#SPACE#stop.' ) #NEWLINE#
parser . add_argument ( 'step' , type = int , help = 'Specify#SPACE#step.' ) #NEWLINE#
sess = tf . InteractiveSession ( '' , config = config ) #NEWLINE#
[ ( int ( i ) if not i % 1 else i ) for i in li ] #NEWLINE#
return json . JSONEncoder . default ( self , obj ) #NEWLINE#
( x - y for x , y in it . izip ( a [ 1 : ] , a ) ) #NEWLINE#
c = a [ ( np . searchsorted ( a [ : , ( 0 ) ] , b ) ) , : ] #NEWLINE#
np . concatenate ( [ [ 88 ] , a , [ 77 ] ] ) #NEWLINE#
print ( [ item for item in text . split ( ) if item . count ( '-' ) == 5 ] ) #NEWLINE#
'dammitimmad' [ : : - 1 ] == 'dammitimmad' #NEWLINE#
XMLFILES_FOLDER = os . path . join ( PROJECT_ROOT , 'f1/f2/xml_files/' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
diffs == array ( [ 0.1 , 0.2 , 0.3 ] ) #NEWLINE#
pylab . show ( ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
return HttpResponse ( '' ) #NEWLINE#
pd . read_csv ( 'test.csv' , sep = '|' , skiprows = list ( range ( 1 , 10 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
r . setdefault ( key , [ ] ) . append ( lst2dct ( val ) ) #NEWLINE#
admin . site . register ( Email , EmailAdmin ) #NEWLINE#
len ( arr ) #NEWLINE#
size = fields . IntegerRangeField ( min_value = 1 , max_value = 50 ) #NEWLINE#
print ( element . tag , element . text , element . tail ) #NEWLINE#
pytz . timezone ( 'Europe/Helsinki' ) . localize ( datetime_obj ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
"""Wilbur#SPACE#Smith#SPACE#(son#SPACE#of#SPACE#John#SPACE#(Johnny,#SPACE#son#SPACE#of#SPACE#James),#SPACE#aka#SPACE#Billy),#SPACE#Eddie#SPACE#Murphy#SPACE#(John)""" #NEWLINE#
reactor . run ( ) #NEWLINE#
help ( assign2 ) #NEWLINE#
d = dict ( [ ( k , v ) for k , v in zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ] ) #NEWLINE#
print ( re . sub ( '(.)\\1+' , '\\1' , a ) ) #NEWLINE#
np . array ( [ [ d [ str ( i ) ] , d [ str ( j ) ] ] for i , j in A ] ) #NEWLINE#
os . listdir ( '.' ) #NEWLINE#
print ( colorstr ( 'Red' , 'RED' ) ) #NEWLINE#
"""earth""" . endswith ( 'earth' ) #NEWLINE#
self . response . out . write ( simplejson . dumps ( data ) ) #NEWLINE#
tst . save ( ) #NEWLINE#
new_y = sp . interpolate . interp1d ( x , y , kind = 'cubic' ) ( new_x ) #NEWLINE#
list ( range ( 0 , 10 , 2 ) ) #NEWLINE#
B . objects . filter ( a__name = 'Test' ) #NEWLINE#
H = data . reshape ( N , Nt , N ) . transpose ( 0 , 2 , 1 ) #NEWLINE#
df [ ( df [ [ 0 , 1 ] ] > 0 ) . all ( 1 ) ] #NEWLINE#
v1 , v2 , v3 , v4 = [ max ( x , 0 ) for x in ( A , B , C , D ) ] #NEWLINE#
cnxn . commit ( ) #NEWLINE#
df . where ( ~ outliers_low , down_quantiles , axis = 1 ) #NEWLINE#
datetime . datetime ( * d . timetuple ( ) [ : 6 ] ) #NEWLINE#
GC . remove_edge ( clique [ 0 ] , clique [ 1 ] ) #NEWLINE#
df [ df . filter ( regex = '^sps' ) . eq ( df . sps1 , axis = 'rows' ) . sum ( axis = 1 ) == 1 ] #NEWLINE#
[ ( 6 , 3 , 18 , 12 ) , ( 1 , 2 , 3 , 4 ) , ( 9 , 6 , 8 , 15 ) ] #NEWLINE#
scipy . stats . chi2 . ppf ( 0.05 , 5 ) #NEWLINE#
ax1 . set_ylim ( 0 , 1 ) #NEWLINE#
logo = "\nhello'''world\n" . replace ( "'" , '"' ) #NEWLINE#
b . reindex ( a . index , method = 'ffill' ) #NEWLINE#
gca ( ) . xaxis . set_major_formatter ( xfmt ) #NEWLINE#
myMethod ( myVariable , * myTuple ) #NEWLINE#
'xyz' . format ( Pluralizer ( 2 ) ) == 'xyz' #NEWLINE#
list ( csv . reader ( open ( filename , 'rb' ) , delimiter = ',' , quotechar = '"' ) ) [ 1 : ] #NEWLINE#
a = array ( [ 2 , 3 , 4 ] ) #NEWLINE#
dict ( x . split ( ':' ) for x in a ) #NEWLINE#
logger . info ( 'The#SPACE#sky#SPACE#is#SPACE#so#SPACE#blue' ) #NEWLINE#
print ( np . unravel_index ( result . argmax ( ) , result . shape ) ) #NEWLINE#
ax . zaxis . set_major_formatter ( FormatStrFormatter ( '%.02f' ) ) #NEWLINE#
ipdb . set_trace ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
cursor = conn . cursor ( MySQLdb . cursors . DictCursor ) #NEWLINE#
format ( addrint , '#04x' ) #NEWLINE#
re . compile ( '(\\W+)' ) . split ( 'hello,#SPACE#foo' ) #NEWLINE#
np . fill_diagonal ( out , np . diag ( A ) ) #NEWLINE#
big = np . random . randint ( - 10 , 10 , size = 10000000 ) #NEWLINE#
fig . savefig ( 'ax2_figure.png' , bbox_inches = extent ) #NEWLINE#
random_lines = random . choice ( open ( 'file' ) . readlines ( ) ) #NEWLINE#
b = [ list ( x ) for x in b_set ] #NEWLINE#
slack . chat . post_message ( '@to_user' , msg , username = '@from_user' ) #NEWLINE#
{ 'key1' : 'val1' , 'key2' : 'val2' } #NEWLINE#
help ( random . random ) #NEWLINE#
ax . spines [ 'top' ] . set_visible ( False ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
x [ - 2 : : - 1 ] #NEWLINE#
print ( '%s#SPACE#%s#SPACE#%s' % ( row [ 'Id' ] , row [ 'Name' ] , row [ 'Price' ] ) ) #NEWLINE#
json . dumps ( o ) #NEWLINE#
return x ** 2 + 1 #NEWLINE#
ax . yaxis . set_major_formatter ( mpl . ticker . FuncFormatter ( mjrFormatter ) ) #NEWLINE#
msg . send ( ) #NEWLINE#
print ( somefake . readlines ( ) ) #NEWLINE#
C = [ [ ( 0 ) for row in range ( len ( A ) ) ] for col in range ( len ( B [ 0 ] ) ) ] #NEWLINE#
[ a [ 'a' ] for a in x1 ] == [ b [ 'a' ] for b in x2 ] #NEWLINE#
model . rx ( 'importance' ) [ 0 ] #NEWLINE#
db . Close ( ) #NEWLINE#
swf = boto3 . client ( 'swf' ) #NEWLINE#
ax . get_xaxis ( ) . set_minor_locator ( mpl . ticker . AutoMinorLocator ( ) ) #NEWLINE#
ser . write ( 'Your#SPACE#text' ) #NEWLINE#
worksheet . conditional_format ( 'B2:B8' , { 'type' : '3_color_scale' } ) #NEWLINE#
pd . DataFrame ( data , tid1 , ucat ) #NEWLINE#
SomeModule . SomeFunctionW ( str ( s . encode ( 'utf-16-le' ) ) ) #NEWLINE#
self . linenumbers . tag_configure ( 'line' , justify = 'right' ) #NEWLINE#
tar . addfile ( tarfile . TarInfo ( 'myfilename.txt' ) , file ( '/path/to/filename.txt' ) ) #NEWLINE#
file = forms . FileField ( required = False ) #NEWLINE#
main ( ) #NEWLINE#
logging . getLogger ( __name__ ) . setLevel ( logging . WARNING ) #NEWLINE#
return re . compile ( '\\w+' ) . findall ( text ) #NEWLINE#
collection . find ( ) . sort ( { 'timestamp' : - 1 } ) . limit ( 10 ) #NEWLINE#
df = pd . read_sql_query ( 'select#SPACE#*#SPACE#from#SPACE#Stat_Table' , con = engine ) #NEWLINE#
re . findall ( '\\b\\d\\d\\d\\d\\d\\b' , 'Helpdesk-Agenten#SPACE#(m/w)#SPACE#Kennziffer:#SPACE#12966' ) #NEWLINE#
return queryset . filter ( ** { 'attributes__value' : value } ) #NEWLINE#
exec ( compile ( open ( 'main.py' ) . read ( ) , 'main.py' , 'exec' ) ) #NEWLINE#
bits = [ 0 , 0 , 0 , 0 ] #NEWLINE#
from functools import reduce #NEWLINE# pd . expanding_apply ( s , lambda s : reduce ( lambda x , y : x * ( 1 + y ) , s , 1 ) ) #NEWLINE#
print ( 'temp1:#SPACE#+31.0°C#SPACE##SPACE#(crit#SPACE#=#SPACE#+107.0°C)' . encode ( 'utf-8' ) ) #NEWLINE#
df . loc [ 'Total' ] = df . sum ( ) #NEWLINE#
my_dict = { k : [ ] for k in keys } #NEWLINE#
print ( '\n' * 100 ) #NEWLINE#
input_seq [ ix1 ] , input_seq [ ix2 ] = input_seq [ ix2 ] , input_seq [ ix1 ] #NEWLINE#
lst_int = [ int ( x ) for x in test . split ( '-' ) ] #NEWLINE#
L1 [ 0 : 1 ] = 'cake' #NEWLINE#
namedtype . NamedType ( 'rfc822Name' , char . IA5String ( ) ) , #NEWLINE#
return HttpResponse ( 'updated' ) #NEWLINE#
return super ( MyResource , self ) . obj_update ( bundle , ** kwargs ) #NEWLINE#
return math . sqrt ( ( p0 [ 0 ] - p1 [ 0 ] ) ** 2 + ( p0 [ 1 ] - p1 [ 1 ] ) ** 2 ) #NEWLINE#
cur . execute ( sql , ( data , ) ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
ax . scatter ( x , y ) #NEWLINE#
d = { c : i for i , c in enumerate ( ascii_lowercase , 1 ) } #NEWLINE#
conn . commit ( ) #NEWLINE#
np . dot ( r , y . reshape ( 1 , 3 ) ) #NEWLINE#
self . assertTrue ( issubclass ( QuizForm , forms . Form ) ) #NEWLINE#
cursor . execute ( sql , args ) #NEWLINE#
conn . execute ( sql , list ) #NEWLINE#
dict_compare ( dict_a , dict_b ) #NEWLINE#
chat_messages . objects . all ( ) . values_list ( 'name' ) #NEWLINE#
nums2 . search ( '0.1e-456' ) . group ( 0 ) #NEWLINE#
type = models . CharField ( max_length = 10 , choices = TYPES , default = 'Customer' ) #NEWLINE#
[ 'Arts#SPACE#&#SPACE#Entertainment' , 'Television' , 'Talk#SPACE#Show' ] #NEWLINE#
np . arange ( new [ 1 ] ) % old [ 1 ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
re . compile ( '|' . join ( list_patterns ) ) #NEWLINE#
shutil . copyfile ( 'file.txt' , '/dev/usb/lp0' ) #NEWLINE#
env . Append ( CPPDEFINES = { 'BLUB' : None , 'VALUE2' : None , 'Foo' : 1 } ) #NEWLINE#
aapl . index . to_series ( ) . diff ( ) . mean ( ) / ( 60 * 60 * 10 ** 9 ) #NEWLINE#
shapesMatch ( [ ( 0 , 0 ) , ( 1 , 0 ) , ( 1 , 1 ) , ( 2 , 1 ) , ( 2 , 2 ) , ( 0 , 2 ) ] , l_shape ) #NEWLINE#
def a ( ) : #NEWLINE# #INDENT# globals ( ) [ 'something' ] = 'bob' #NEWLINE#
print ( c . most_common ( 3 ) ) #NEWLINE#
dictionary = df . to_dict ( orient = 'index' ) #NEWLINE#
df [ 'value' ] . ffill ( ) . shift ( 1 ) #NEWLINE#
df = pd . read_csv ( 'sample_file.csv' , comment = '#' ) #NEWLINE#
hashlib . new ( 'sha' , 'Ò\x04\x00\x00' ) . hexdigest ( ) #NEWLINE#
( my_array [ : , ( np . newaxis ) ] == my_array ) . all ( axis = 2 ) . sum ( axis = 1 ) #NEWLINE#
sorted ( [ 'Some' , 'words' , 'sort' , 'differently' ] , key = lambda word : word . lower ( ) ) #NEWLINE#
"""""" . join ( random . choice ( 'abcde' ) for _ in range ( 3 ) ) #NEWLINE#
x = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE#
flask . redirect ( flask . url_for ( 'operation' ) , code = 307 ) #NEWLINE#
[ d [ k ] for k in lst ] #NEWLINE#
print ( myObject . myVar if hasattr ( myObject , 'myVar' ) else 'not#SPACE#defined' ) #NEWLINE#
[ i for i , x in enumerate ( t ) if x ] #NEWLINE#
sys . path . append ( '/path/ra_list/' ) #NEWLINE#
[ ( ord ( x ) % 32 ) for x in char2 ] #NEWLINE#
traceback . print_stack ( ) #NEWLINE#
mock_function . run ( 'wrong#SPACE#arguments' ) #NEWLINE#
json . loads ( '["foo",#SPACE#{"bar":["baz",#SPACE#null,#SPACE#1.0,#SPACE#2]}]' ) #NEWLINE#
{ '$where' : 'function()#SPACE#{#SPACE#for#SPACE#(var#SPACE#i=0;#SPACE#i<1000000;#SPACE#i++)#SPACE#{};#SPACE#return#SPACE#true;#SPACE#}' } #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
Entry . objects . bulk_create ( [ Entry ( id = x ) for x in list ] ) #NEWLINE#
'n' , 'no' , 'f' , 'false' , 'off' , '0' #NEWLINE#
return jsonify ( json_list = qryresult . all ( ) ) #NEWLINE#
t = map ( lambda s : s . strip ( ) , t ) #NEWLINE#
dict ( a ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
""" """ #NEWLINE#
[ ( 4.0 , [ 4.0 , 4.1 , 4.2 , 4.3 ] ) , ( 8.9 , [ 8.9 , 9.0 , 9.4 ] ) ] #NEWLINE#
{ { myexample } } #NEWLINE#
parser . add_argument ( '-r' , default = '0' , action = 'store' ) #NEWLINE#
bytes_string . decode ( 'UTF-8' ) #NEWLINE#
b = dict ( zip ( i , i ) ) #NEWLINE#
self . transport . write ( self . message . encode ( ) ) #NEWLINE#
self . canvas . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
print ( '\t' . join ( nested_list ) ) #NEWLINE#
a , b = [ 1 , 3 , 4 , 5 , 6 ] [ : 2 ] #NEWLINE#
np . sort ( m ) [ : , - N : ] #NEWLINE#
array ( [ [ 4 , 5 ] , [ 1 , 4 ] ] ) #NEWLINE#
foo . __class__ . __class__ #NEWLINE#
"""\\s+(?P<name>\\w+)\\D*(?P<num>\\d+)\\sof\\s(?P<item>[^,]+)(?:,\\D+)?(?P<costs>\\d+)?""" #NEWLINE#
print ( list ( itertools . combinations ( '123' , 2 ) ) ) #NEWLINE# [ ( '1' , '2' ) , ( '1' , '3' ) , ( '2' , '3' ) ] #NEWLINE#
self . redirect ( '/tasks' ) #NEWLINE#
set ( listA ) & set ( listB ) #NEWLINE#
dict ( list ( x . items ( ) ) | list ( y . items ( ) ) ) #NEWLINE#
[ e for l in lst for e in l ] #NEWLINE#
"""#SPACE##SPACE##SPACE##SPACE##SPACE#hello#SPACE#world!""" . lstrip ( ) #NEWLINE#
{ 'id' : '83' , 'password' : '12345' } #NEWLINE#
return [ y for y in listOfLists if y [ x ] . isdigit ( ) ] #NEWLINE#
result . append ( os . path . join ( root , name ) ) #NEWLINE#
urllib . request . urlopen ( 'http://' + domain_idna ) . read ( ) #NEWLINE#
setattr ( self , pointer , group ) #NEWLINE#
plt . ylim ( - 6 , 6 ) #NEWLINE#
a [ [ 0 , 1 ] , [ 1 , 2 ] , 2 ] #NEWLINE#
np . asarray ( [ 123 ] , dtype = '|S2' ) #NEWLINE#
raise NotImplementedError ( ) #NEWLINE#
re . findall ( 'bus|cars|car|\\S' , s ) #NEWLINE#
"""two#SPACE#quotes:#SPACE#'\"""" #NEWLINE#
a [ 'abc' ] = [ 1 , 2 ] #NEWLINE#
G . add_edge ( 1 , 2 , color = 'blue' ) #NEWLINE#
f = open ( '%s.csv' % name , 'wb' ) #NEWLINE#
sum ( 1 for _ in takewhile ( lambda x : x == a [ 0 ] , a ) ) #NEWLINE#
i = int ( math . floor ( x ) - 1 ) #NEWLINE#
shutil . make_archive ( 'simonsZip' , 'zip' , 'files' ) #NEWLINE#
f ( [ [ 0.0 , 0.0 ] , [ 1.0 , 1.0 ] ] , [ [ 0.0 , 1.0 ] , [ 0.0 , 1.0 ] ] ) #NEWLINE#
df [ 'flag' ] [ df . name . str . contains ( 'e$' ) ] = 'Blue' #NEWLINE#
logging . warn ( 'disable#SPACE#me#SPACE#with#SPACE#the#SPACE#-O#SPACE#option' ) #NEWLINE#
self . setWindowTitle ( 'Window#SPACE#Title' ) #NEWLINE#
[ ( x , y ) for x , y , label in data_one ] #NEWLINE#
print ( a [ 'key3' ] ) #NEWLINE#
"""This#SPACE#is#SPACE#\\n#SPACE#a#SPACE#test#SPACE#\\r""" #NEWLINE#
jdf = df . _jdf #NEWLINE#
pprint ( dict ( grouped_by_soundex ) ) #NEWLINE#
print ( 'First#SPACE#number#SPACE#is#SPACE#{}#SPACE#and#SPACE#second#SPACE#number#SPACE#is#SPACE#{}' . format ( first , second ) ) #NEWLINE#
custom [ 1 ] [ 'b' ] #NEWLINE#
cv2 . imshow ( 'bottom' , bottom ) #NEWLINE#
time . strftime ( '%D#SPACE#%H:%M' , time . localtime ( int ( '1284101485' ) ) ) #NEWLINE#
portalocker . lock ( file , flags ) #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
hand = { k : v for k , v in hand . items ( ) if v != 0 } #NEWLINE#
ftp . quit ( ) #NEWLINE#
red , green , blue , alpha = img . split ( ) #NEWLINE#
print ( bytes . encode ( 'utf-8' ) . decode ( 'utf-8' ) ) #NEWLINE#
nx . draw_networkx ( G ) #NEWLINE#
df . reorder_levels ( [ 'Letter' , 'Color' , 'Number' ] ) #NEWLINE#
pl . show ( ) #NEWLINE#
f = open ( 'lst' , 'r' ) #NEWLINE#
x [ 'result' ] . fillna ( method = 'ffill' , inplace = True ) #NEWLINE#
"""{0:<15}#SPACE#=#SPACE#{2:6.{1}f}""" . format ( id , i , val ) #NEWLINE#
return '{},#SPACE#D({})' . format ( super ( D , self ) . __repr__ ( ) , self . __dict__ ) #NEWLINE#
print ( '{0}#SPACE#{1}#SPACE#{2}' . format ( * mystuff [ x : x + 3 ] ) ) #NEWLINE#
f = open ( os . path . join ( sub_dir , file ) ) #NEWLINE#
[ [ copy . deepcopy ( foo ) for x in range ( 10 ) ] for y in range ( 10 ) ] #NEWLINE#
'String#SPACE#with#SPACE#\\n#SPACE#escape#SPACE#ignored' == 'String#SPACE#with#SPACE#\\n#SPACE#escape#SPACE#ignored' #NEWLINE#
data . select ( lambda x : x [ 1 ] in [ 'a' , 'b' ] , axis = 1 ) #NEWLINE#
dict ( ( x1 , ( x0 , x2 ) ) for x0 , x1 , x2 in zip ( x [ : - 2 ] , x [ 1 : - 1 ] , x [ 2 : ] ) ) #NEWLINE#
{ ( '10.10.10.10' , 'RED' ) : 64540 , ( '192.168.10.10' , 'BLUE' ) : 3802 } #NEWLINE#
df . div ( df . sum ( 1 ) , axis = 0 ) #NEWLINE#
image = cv2 . cvtColor ( image , cv2 . cv . CV_BGR2RGB ) #NEWLINE#
dill . pickles ( f ) #NEWLINE#
ls_output = subprocess . Popen ( [ 'ls' , '-a' ] , stdout = subprocess . PIPE ) #NEWLINE#
m = sqrt ( a ** 2 + b ** 2 ) #NEWLINE#
dt = yaml . load ( "dt:#SPACE#!!timestamp#SPACE#'2010-11-17#SPACE#13:12:11'" ) #NEWLINE#
logging . basicConfig ( filename = 'error.log' , level = logging . DEBUG ) #NEWLINE#
int ( '10' ) < int ( '2' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . close ( ) #NEWLINE#
self . render ( 'register_page.html' ) #NEWLINE#
re . sub ( '#SPACE#\\(\\s+|\\s+\\)' , lambda x : x . group ( ) . strip ( ) , my_string ) #NEWLINE#
df . reindex ( df . index . drop ( 1 ) ) #NEWLINE#
d [ 'key1' ] [ 'key2' ] [ 'key3' ] [ 'key4' ] [ 'key5' ] #NEWLINE#
x [ index ] if len ( x ) > index else default #NEWLINE#
ax . ticklabel_format ( style = 'sci' , scilimits = ( - 3 , 4 ) , axis = 'both' ) #NEWLINE#
df . apply ( you_function , axis = 1 ) #NEWLINE#
result = subprocess . check_output ( [ 'your_program.exe' , 'arg1' , 'arg2' ] ) #NEWLINE#
self . show ( ) #NEWLINE#
print ( capitalize_nested ( [ 'this' , 'that' , [ 'other' ] ] ) ) #NEWLINE#
driver . get ( 'http://jsfiddle.net/falsetru/mLGnB/show/' ) #NEWLINE#
cursor . execute ( query_insert , data * 2 ) #NEWLINE#
canvas . config ( scrollregion = canvas . bbox ( ALL ) ) #NEWLINE#
list ( itertools . chain ( * list ( foo . values ( ) ) ) ) #NEWLINE#
"""""" . join ( t ) #NEWLINE#
1 , 0 , 0 , 0 , 0 , 0 , 0 #NEWLINE#
data [ data [ : , ( 0 ) ] . argsort ( ) ] #NEWLINE#
struct . pack ( '>i' , 456 ) . lstrip ( chr ( 0 ) ) or chr ( 0 ) #NEWLINE#
mystring = mystring . replace ( '\r' , '' ) . replace ( '\n' , '' ) #NEWLINE#
plt . show ( ) #NEWLINE#
word = word [ : x ] + ',\n' #NEWLINE#
len ( lst ) - lst . count ( <VAR0> ) #NEWLINE#
'%(0)s#SPACE#%(1)s#SPACE#%(1)s' % { '0' : 'foo' , '1' : 'bar' } #NEWLINE#
logging . handlers . pop ( ) #NEWLINE#
list ( min ( x , y ) for x , y in zip ( [ 1 , 2 , 3 , 4 ] , [ 0 , 10 , 0 , 10 ] ) ) #NEWLINE#
result = [ numbers [ i ] for i in indices ] #NEWLINE#
driver . save_screenshot ( 'testing2.png' ) #NEWLINE#
setattr ( type ( obj ) , 1 , 'change' ) #NEWLINE#
ax . set_ylim ( 0 , 3 ) #NEWLINE#
Hsub = H [ 1 : H . shape [ 0 ] - 1 , 1 : H . shape [ 1 ] - 1 ] #NEWLINE#
logging . config . stopListening ( ) #NEWLINE#
domain = a . split ( '@' ) [ 1 ] #NEWLINE#
x = y [ np . arange ( A ) [ : , ( None ) ] + np . arange ( B ) ] #NEWLINE#
ax . plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) ) #NEWLINE#
re . findall ( 'imgurl=([^&]+)&' , url ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] #NEWLINE#
result . append ( '\n' . join ( row_result ) ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
random . seed ( SEED ) #NEWLINE#
re . compile ( '\\d{3}' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( proc . stdout . readline ( ) ) #NEWLINE#
pd . DataFrame ( L ) #NEWLINE#
s = open ( filename , 'r' ) . read ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
urlpatterns = patterns ( '' , url ( '^tasks/' , include ( 'djcelery.urls' ) ) ) #NEWLINE#
root . title ( 'FeudHjelper#SPACE#av#SPACE#Martin#SPACE#Skow#SPACE#RÃ¸ed' ) #NEWLINE#
cursor . execute ( sql , ( val1 , val2 ) ) #NEWLINE#
random . choice ( string . ascii_letters ) #NEWLINE#
cv2 . imwrite ( 'color_img.jpg' , img ) #NEWLINE#
'%i#SPACE#%i' % ( True , False ) #NEWLINE#
x . groupby ( [ 'name' , x [ 'value' ] > 0 ] ) [ 'tickets' ] . sum ( ) #NEWLINE#
User . query . filter_by ( ** kwargs ) #NEWLINE#
array ( [ 0 , 1 , 0 , 0 ] ) #NEWLINE#
df . drop ( df . columns [ [ 1 , 69 ] ] , axis = 1 , inplace = True ) #NEWLINE#
fileh . close ( ) #NEWLINE#
print ( link . get_attribute ( 'href' ) ) #NEWLINE#
df . groupby ( pd . PeriodIndex ( df . columns , freq = 'Q' ) , axis = 1 ) . mean ( ) #NEWLINE#
ax . set_xlabel ( 'X#SPACE#Label' ) #NEWLINE#
super ( Stop , self ) . save ( ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'none' ) #NEWLINE#
a = np . delete ( a , zero_row , 0 ) #NEWLINE#
file_writer . writerow ( [ x [ i ] for x in lol ] ) #NEWLINE#
[ x [ 'fileMod' ] for x in fileList if x [ 'fileName' ] == 'filename2.typ' ] [ 0 ] #NEWLINE#
len ( s . encode ( 'UTF-32' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( 'XXX' if item == 'abc' else item ) for item in mylist ] #NEWLINE#
g . filter ( lambda x : len ( x ) > 1 ) #NEWLINE#
request . session [ '_username' ] = request . user . username #NEWLINE#
df . T . groupby ( level = 0 ) . first ( ) . T #NEWLINE#
sorted_df = df . sort_values ( df . last_valid_index ( ) , axis = 1 ) #NEWLINE#
[ [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
'Development' in os . environ [ 'SERVER_SOFTWARE' ] #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
[ sympy . diff ( sum ( m * m . T ) , i ) for i in m ] #NEWLINE#
programs = tapjoy - game1 , tapjoy - game2 #NEWLINE#
arr [ [ 2 , 1 ] ] #NEWLINE#
t . start ( ) #NEWLINE#
np . in1d ( fake , [ 0 , 2 , 6 , 8 ] ) . reshape ( fake . shape ) #NEWLINE#
thread . start_new_thread ( interrupt_user , ( ) ) #NEWLINE#
merge ( df1 , df2 , on = 'key' ) [ [ 'col1' , 'col2' , 'col3' ] ] #NEWLINE#
datetime . date ( 2010 , 6 , 16 ) . strftime ( '%V' ) #NEWLINE#
requests . post ( url , data = data ) #NEWLINE#
graph . post ( 'me/feed' , message = 'Hello#SPACE#World!' ) #NEWLINE#
soup . findAll ( re . compile ( '^a$|(div)' ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
parser . add_argument ( '--doh' , action = 'store_true' ) #NEWLINE#
return JsonResponse ( { 'foo' : 'bar' } ) #NEWLINE#
5.55 % 1 #NEWLINE#
json_string = json . dumps ( row ) #NEWLINE#
s . flush ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
df [ ( df . A == 'blue' ) & ( df . B == 'red' ) & ( df . C == 'square' ) ] [ 'D' ] = 'succeed' #NEWLINE#
plt . show ( ) #NEWLINE#
cursor . execute ( 'SET#SPACE#TRANSACTION#SPACE#ISOLATION#SPACE#LEVEL#SPACE#REPEATABLE#SPACE#READ' ) #NEWLINE#
return len ( os . listdir ( directory ) ) #NEWLINE#
print ( socket . gethostbyname_ex ( socket . gethostname ( ) ) [ 2 ] ) #NEWLINE#
cgi . parse_qs ( qs ) #NEWLINE#
d . get ( 'ham' , { } ) . get ( 'fry' , 88 ) #NEWLINE#
all ( 0 < n < 50 for n in thetuple ) #NEWLINE#
songs . sort_index ( by = [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] ) #NEWLINE#
list_of_nums [ : ] = [ x for x in list_of_nums if x != 2 ] #NEWLINE#
lambda m : replacement_dict . get ( m . group ( ) , m . group ( ) ) #NEWLINE#
s . call ( [ 'gpio' , '-g' , 'read' , '17' ] ) #NEWLINE#
helv36 = tkFont . Font ( family = 'Helvetica' , size = 36 , weight = 'bold' ) #NEWLINE#
return df . groupby ( [ 'State' , 'City' ] ) . resample ( '2D' ) . sum ( ) #NEWLINE#
sum ( [ i for i in l1 if isinstance ( i , int ) ] ) #NEWLINE#
[ [ k , len ( list ( g ) ) ] for k , g in groupby ( strs ) ] #NEWLINE#
print ( '' . join ( '{}_{}' . format ( k , v ) for k , v in r . items ( ) ) ) #NEWLINE#
timedelta ( hours = 3 ) + timedelta ( hours = 2 ) #NEWLINE#
ax1 . set_yticks ( [ int ( j ) for j in range ( 0 , 4 ) ] ) #NEWLINE#
STATIC_ROOT = os . path . join ( BASE_DIR , 'play/' ) #NEWLINE#
f = parser . parse ( 'sin(x)*x^2' ) . to_pyfunc ( ) #NEWLINE#
os . system ( 'firefox' ) #NEWLINE#
print ( s . issuperset ( '013456789' ) ) #NEWLINE#
plt . subplot ( 122 ) , plt . imshow ( cv2 . cvtColor ( img , cv2 . COLOR_BGR2RGB ) ) #NEWLINE#
ax . set_zlim ( 0 , 100 ) #NEWLINE#
im = cv2 . imread ( path , - 1 ) #NEWLINE#
blob_service . get_blob_to_path ( 'containername' , 'blobname' , 'localfilename' ) #NEWLINE#
Country . objects . filter ( code = country_reverse [ 'france' ] ) #NEWLINE#
return zip ( xnew [ 1 : ] , ynew [ 1 : ] ) #NEWLINE#
return super ( LinguistResource , self ) . build_filters ( filters ) #NEWLINE#
f = lambda x , a = a : x ** a #NEWLINE#
p = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
raise Exception ( 'Message' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#username,#SPACE#password#SPACE#FROM#SPACE#galaxy_user' ) #NEWLINE#
re . sub ( '\n*' , '' , yourstring ) #NEWLINE#
df . loc [ 3 ] = [ 'V1' , 4.3 , 2.2 , 2.2 , 20.2 ] #NEWLINE#
pygame . mixer . music . play ( ) #NEWLINE#
print ( 'OHAI' ) #NEWLINE#
django . setup ( ) #NEWLINE#
datetime . date . today ( ) #NEWLINE#
setattr ( instance , function . __name__ , function . __get__ ( instance ) ) #NEWLINE#
"""(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'".,<>?«»“”‘’]))""" #NEWLINE#
subprocess . call ( [ 'grep' , 'one' , 'file_1.txt' ] ) #NEWLINE#
"""xpath=//a[text()='Submit#SPACE#»')]""" #NEWLINE#
array ( [ [ 1 , 1 , 1 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 4 , 4 , 4 ] ] ) #NEWLINE#
dis . dis ( compile ( 'a,#SPACE#b,#SPACE#c' , '' , 'eval' ) ) #NEWLINE#
zip ( * filterer ( list1 , list2 ) ) #NEWLINE#
max ( l1 , l2 , key = len ) #NEWLINE#
numpy . sqrt ( numpy . sum ( ( A - B ) ** 2 ) ) #NEWLINE#
sorted ( nums , key = lambda x : str ( x ) . ljust ( 10 , '#SPACE#' ) , reverse = True ) #NEWLINE#
print ( var . get ( ) ) #NEWLINE#
all ( isinstance ( e , int ) and e > 0 for e in [ 1 , 2 , 'joe' ] ) #NEWLINE#
re . findall ( '\\{(.+?)\\}' , request . params [ 'upsell' ] ) #NEWLINE#
v = np . array ( [ [ 3 ] , [ 4 ] , [ 5 ] ] ) #NEWLINE#
ax . plot ( x , y , z ) #NEWLINE#
"""""" . join ( format ( ord ( c ) , '02x' ) for c in text ) #NEWLINE#
sys . stdout . write ( '{0:<7}{1:<51}{2:<25}\n' . format ( code , name , industry ) ) #NEWLINE#
__init__ . py #NEWLINE#
np . argsort ( K ) [ - 5 : ] #NEWLINE#
"""{:.2f}""" . format ( 1.679 ) #NEWLINE#
getattr ( module_a , mod ) ( ) #NEWLINE#
pd . DataFrame ( rows , columns = df . columns ) #NEWLINE#
plt . plot ( dates , values , 'xb-' ) #NEWLINE#
c [ a & b ] #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , oldflags ) #NEWLINE#
print ( '' . join ( c for c in s if c . islower ( ) ) ) #NEWLINE#
lol = lambda lst , sz : [ lst [ i : i + sz ] for i in range ( 0 , len ( lst ) , sz ) ] #NEWLINE#
output_file . close ( ) #NEWLINE#
df . groupby ( 'A' ) [ 'C' ] . apply ( sum ) #NEWLINE#
GPIO . output ( 4 , False ) #NEWLINE#
"""{name}#SPACE#is#SPACE#a#SPACE#{adjective}#SPACE#{noun}#SPACE#that#SPACE#{verb}""" . format ( ** locals ( ) ) #NEWLINE#
f ( 3 , [ 'a' , 'b' ] ) #NEWLINE#
p . update ( ** { 'set__name' : 'Hank' , 'set__address' : 'Far#SPACE#away' } ) #NEWLINE#
print ( 'Key:#SPACE#%d;#SPACE#Value:#SPACE#%s<br#SPACE#/>' % ( key , value ) ) #NEWLINE#
plt . legend ( ) #NEWLINE#
canvas . save ( ) #NEWLINE#
[ 2 , 5 , 7 , 8 , 9 , 12 ] #NEWLINE#
min ( alist , key = itemgetter ( 1 ) ) [ 1 ] , max ( alist , key = itemgetter ( 1 ) ) [ 1 ] #NEWLINE#
print ( '{:0>8.4f}' . format ( 2.02 ) ) #NEWLINE#
main ( ) #NEWLINE#
ax . plot ( x , y , '-' , color = 'black' , linewidth = 5 ) #NEWLINE#
[ re . findall ( '\\w+|\\W+' , s ) for s in lst ] #NEWLINE#
setattr ( self , k , v ) #NEWLINE#
a [ ~ np . isnan ( a ) . any ( axis = 1 ) ] #NEWLINE#
[ ( a . split ( '-' , 1 ) [ 0 ] , b ) for a , b in sorted_x ] #NEWLINE#
scipy . signal . ltisys . lti #NEWLINE#
log . warning ( 'test' ) #NEWLINE#
"""#SPACE#?\\(\\w+\\)""" #NEWLINE#
return [ x for x in result . stdout . readlines ( ) if 'Duration' in x ] #NEWLINE#
urllib . request . urlopen ( url ) #NEWLINE#
execute ( ssh_keygen , 'jbloggs' , '/home/jbloggs' , host = 'server1' ) #NEWLINE#
dfUnstacked2 . columns #NEWLINE#
meta . Session . commit ( ) #NEWLINE#
self . layout . addWidget ( self . button ) #NEWLINE#
re . split ( '(?<=>)(.+?)(?=<)' , '<label>Olympic#SPACE#Games</label>' ) #NEWLINE#
np . tensordot ( A , B , axes = [ [ 0 , 1 ] , [ 0 , 2 ] ] ) #NEWLINE#
set_vibration ( 0 , 1.0 , 0.5 ) #NEWLINE#
list ( insert_none ( [ 1 , 2 , 3 , 4 , 5 ] ) ) #NEWLINE#
fig . canvas . mpl_connect ( 'draw_event' , on_draw ) #NEWLINE#
p . apply ( f , 'items' ) #NEWLINE#
io . open ( 'test.txt' , 'r' , newline = '' ) . readlines ( ) #NEWLINE#
cv . WaitKey ( 0 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
text = re . sub ( '(get)' , '\\1@' , text ) #NEWLINE#
pipe = subprocess . Popen ( [ 'perl' , 'uireplace.pl' , var ] ) #NEWLINE#
result = set ( d [ 0 ] ) . intersection ( * d [ : 1 ] ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
rc ( 'mathtext' , fontset = 'stixsans' ) #NEWLINE#
print ( re . findall ( '[^-]+-[^-]+' , s ) ) #NEWLINE#
gevent . wait ( ) #NEWLINE#
plt . savefig ( 'test.pdf' ) #NEWLINE#
sess . run ( y , feed_dict = { i : d for i , d in zip ( inputs , data ) } ) #NEWLINE#
c = list ( chain ( * zip ( a , b ) ) ) #NEWLINE#
df [ 'Name' ] . isin ( [ 'Alice' , 'Bob' ] ) #NEWLINE#
outfile . write ( '\n' ) #NEWLINE#
response = requests . post ( url , data = json . dumps ( payload ) , headers = headers ) #NEWLINE#
df [ 'hb' ] - 5 #NEWLINE#
math . isnan ( x ) #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
print ( Counter ( ngrams ( 'abbabcbabbabr' ) ) ) #NEWLINE#
a , b = [ f ( ) [ k ] for k in ( 'a' , 'b' ) ] #NEWLINE#
return re . sub ( '(-?\\d+)|(\\+1)' , lambda m : str ( int ( m . group ( 0 ) ) - 1 ) , text ) #NEWLINE#
255 , 255 , 255 #NEWLINE#
[ '*' , 'sin' , 'x' , 'pow' , 'x' , 2 ] #NEWLINE#
res . drop ( [ 'abstract' , '_merge' ] , axis = 1 ) #NEWLINE#
return { k : v for k , v in d . items ( ) if k . startswith ( s ) } #NEWLINE#
[ set ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) , set ( [ 9 , 10 , 11 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
( dict ( x = x [ ii ] , y = y [ ii ] , z = z [ ii ] ) for ii in range ( 10 ) ) #NEWLINE#
igd . connect ( 'mapped-external-port' , mep ) #NEWLINE#
np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) . size #NEWLINE#
f . write ( 'foo' ) #NEWLINE#
cur . execute ( 'select#SPACE#x#SPACE#from#SPACE#test#SPACE#order#SPACE#by#SPACE#x#SPACE#collate#SPACE#reverse' ) #NEWLINE#
time . sleep ( 1000 ) #NEWLINE#
res = [ dict ( ( k , None ) for k in line ) for line in l ] #NEWLINE#
__tablename__ = 'paste_code' #NEWLINE#
new_module = __import__ ( modulename ) #NEWLINE#
path = path . decode ( 'utf8' ) #NEWLINE#
driver . quit ( ) #NEWLINE#
print ( my_list ) #NEWLINE#
result = json . dumps ( response [ 1 ] ) #NEWLINE#
leaderboard = session . query ( Player ) . order_by ( Player . score ) . all ( ) #NEWLINE#
labels = [ 'a' , 'b' , 'c' , 'A' , 'B' , 'A+B' , 'C' , 'A+B+C' ] #NEWLINE#
s = map ( sum , zip ( * ( [ s ] * 2 ) ) ) #NEWLINE#
np . random . rand ( 2 , 3 ) #NEWLINE#
max_index = max ( max_index , index ) #NEWLINE#
data . tz_localize ( 'utc' ) #NEWLINE#
[ ( x + y ) for x , y in itertools . zip_longest ( '12345' , 'ab' , fillvalue = '*' ) ] #NEWLINE#
doc . xpath ( '//prefix:element' , namespaces = nsmap ) #NEWLINE#
print ( repr ( input ( ) ) ) #NEWLINE#
run ( 'mkdir#SPACE#-p#SPACE#/home/frodo/tmp' ) #NEWLINE#
self . assertEqual ( result , 'Mary#SPACE#had#SPACE#a#SPACE#little#SPACE#lamb.\n' ) #NEWLINE#
a = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE# sum ( map ( sum , a ) ) #NEWLINE#
timeit ( lambda : list ( test ( 12 , 5 ) ) , number = 1 ) #NEWLINE#
print ( obj . __class__ . __name__ . replace ( '_Deferred_name' , '' ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
striped = [ l . split ( ) for l in [ c . strip ( ) for c in file_desc . readlines ( ) ] if l ] #NEWLINE#
test . dosomethingelse ( ) #NEWLINE#
df . words . str . contains ( 'he|wo' ) #NEWLINE#
agent = driver . execute_script ( 'return#SPACE#navigator.userAgent' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( ',#SPACE#' . join ( str ( e ) for e in s ) ) #NEWLINE#
Logfile . write ( msg + '\n' ) #NEWLINE#
list ( filter ( or_ ( cots . langauge == 'en' , cots . language == None ) ) ) #NEWLINE#
sys . stdout = open ( 'file' , 'w' ) #NEWLINE#
plt . bar ( x , y , color = 'indianred' , tick_label = label , align = 'center' ) #NEWLINE#
plt . show ( ) #NEWLINE#
res = list ( timestables ( 5 ) ) #NEWLINE#
return np . exp ( 2.0j * np . pi * np . random . rand ( n , 1 ) ) . view ( dtype = np . float64 ) #NEWLINE#
model . _meta . get_field ( 'g' ) . get_internal_type #NEWLINE#
setattr ( self , k , kwargs [ k ] ) #NEWLINE#
df . columns = [ ( 'log(gdp)' if x == 'gdp' else x ) for x in df . columns ] #NEWLINE#
d . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
b2 [ np . in1d ( b1 , a ) ] #NEWLINE#
[ x for t in a for x in t ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
f . close ( ) #NEWLINE#
ax . set_aspect ( 'auto' ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
print ( doc . xpath ( '//element[text()="A"]' ) [ 0 ] . text ) #NEWLINE#
temp = lambda x , i = i : x + i #NEWLINE#
a = [ [ None ] * 7 ] * 7 #NEWLINE#
np . any ( [ ( x == i ) for i in ( 2 , 3 ) ] , axis = 0 ) #NEWLINE#
s * a == s * a + s * 0 #NEWLINE#
plt . plot ( * zip ( * a ) ) #NEWLINE#
'%.2f' % round ( 2606.89579999999 , 2 ) #NEWLINE#
dict . fromkeys ( my_list ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( { v [ 'id' ] : v for v in L } . values ( ) ) #NEWLINE#
ax . axes . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
parser . add_argument ( '-a' , narg = 2 ) #NEWLINE#
print ( '%s#SPACE#%s#SPACE#%s' % ( 'python' , 'is' , 'fun' ) ) #NEWLINE#
object = object . __iadd__ ( value ) #NEWLINE#
struct . pack ( '>I' , 1 ) #NEWLINE#
try : #NEWLINE# #INDENT# float ( element ) #NEWLINE# except ValueError : #NEWLINE# #INDENT# print ( 'Not#SPACE#a#SPACE#float' ) #NEWLINE#
[ 'hattrick' , 'google' , 'wampum' , 'newcom' ] #NEWLINE#
myList [ : ] = [ x for x in myList if x not in totoss ] #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
pandas . set_option ( 'expand_frame_repr' , False ) #NEWLINE#
dict ( lst ) #NEWLINE#
out . sort_index ( level = [ 'Book' , 'Trader' ] ) #NEWLINE#
ax . imshow ( img , interpolation = 'none' ) #NEWLINE#
logging . info ( 'Finished' ) #NEWLINE#
a = a [ 0 : 100 ] #NEWLINE#
dt . datetime . strptime ( '30MAR1990' , '%d%b%Y' ) #NEWLINE#
next ( n for n in range ( 1000 , 3 , - 1 ) if str ( n ) == str ( n ) [ : : - 1 ] and is_prime ( n ) ) #NEWLINE#
[ '%Y-%m-%d' , '%m/%d/%Y' , '%m/%d/%y' ] #NEWLINE#
parser . parse_args ( ) #NEWLINE#
workbook . close ( ) #NEWLINE#
__init__ . py #NEWLINE#
open ( 'newfile.txt' , 'wb' ) . write ( data ) #NEWLINE#
numpy . random . seed ( 42 ) #NEWLINE#
canvas . pack ( side = LEFT , expand = True , fill = BOTH ) #NEWLINE#
command3 . stdin . close ( ) #NEWLINE#
self . write ( jsonp ) #NEWLINE#
re . findall ( '\\w+' , 'abc#SPACE#def#SPACE#gÃ¼i#SPACE#jkl' , re . UNICODE ) #NEWLINE#
0 , 1 , 0 , 0 , 0 , 0 , 0 #NEWLINE#
conn . commit ( ) #NEWLINE#
self . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
"""say#SPACE#(?P<value>.+)#SPACE#endsay""" #NEWLINE#
Foobar . objects . filter ( Q ( blah = 1 ) ^ Q ( bar = 2 ) ) #NEWLINE#
re . findall ( '.{1,2}' , '123456789' ) #NEWLINE#
re . findall ( '..' , '1234567890' ) #NEWLINE#
re . findall ( '..?' , '123456789' ) #NEWLINE#
size = re . findall ( '\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?' , my_string ) #NEWLINE#
del mylist [ - 2 : ] #NEWLINE#
parser . parse_intermixed_args ( [ 'fileone' , '-a' , 'filetwo' , '-b' , 'filethree' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
"""""" . join ( '%3d' % num for num in nums ) #NEWLINE#
ax2 . yaxis . set_major_locator ( MaxNLocator ( nbins = nbins , prune = 'upper' ) ) #NEWLINE#
s = [ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ] #NEWLINE#
[ 'tc2' , 'tc1' , 'Er' , 'tc4' , 'tc3' ] #NEWLINE#
"""абвгд""" #NEWLINE#
ax . set_ylabel ( 'Radiation#SPACE#($MJ\\,m^{-2}\\,d^{-1}$)' ) #NEWLINE#
plt . show ( ) #NEWLINE#
worker . start ( ) #NEWLINE#
plt . figure ( ) #NEWLINE#
child . kill ( ) #NEWLINE#
df2 = concat ( [ df . ix [ : 2 ] , line , df . ix [ 3 : ] ] ) . reset_index ( drop = True ) #NEWLINE#
[ item for item in yourlist if item % 2 ] #NEWLINE#
{ 'phrase' : "I'm#SPACE#cool!" , 'age' : 12 , 'name' : 'bob' , 'hobbies' : 'games,reading' } #NEWLINE#
""",""" . join ( L ) #NEWLINE#
a . encode ( 'latin-1' ) #NEWLINE#
df [ 'data' ] . convert_objects ( convert_numeric = True ) #NEWLINE#
return [ int ( i in locs ) for i in range ( size ) ] #NEWLINE#
cur . execute ( 'select#SPACE#d#SPACE#from#SPACE#test' ) #NEWLINE#
""",#SPACE#""" . join ( subdict [ 'data3' ] for subdict in list ( maindict . values ( ) ) ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
"""|""" . join ( list ( x . values ( ) ) ) #NEWLINE#
s . groupby ( s . index . weekday ) . transform ( lambda x : pd . rolling_mean ( x , window = n ) ) #NEWLINE#
matrix [ 0 ] . extend ( [ 'str6' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for x in matrix if x [ 2 ] == 0.0 ] #NEWLINE#
ax . xaxis . set_major_formatter ( ScaledFormatter ( dx = 6 ) ) #NEWLINE#
run ( 'hostname' ) #NEWLINE#
s . quit ( ) #NEWLINE#
doc = lxml . html . fromstring ( res . content ) #NEWLINE#
time . time ( ) #NEWLINE#
set ( a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] == a [ i - 1 ] ) #NEWLINE#
A [ np . isnan ( A ) ] = 0.0 #NEWLINE#
re . escape ( '[' ) == '[' #NEWLINE#
new_list = [ dict ( ( transform [ k ] , v ) for k , v in list ( d . items ( ) ) ) for d in #NEWLINE# old_list ] #NEWLINE#
pandas . set_option ( 'display.max_rows' , 0 ) #NEWLINE#
super ( MainWindow , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sys . path . append ( root ) #NEWLINE#
outfile . write ( 'new#SPACE#line3\n' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'Col' ] . plot ( style = '.' ) #NEWLINE#
max ( t , key = lambda e : ( - e [ 1 ] , e [ 2 ] ) ) #NEWLINE#
print ( pd . merge ( t2 , t4 [ [ 'store_code' , 'groups' ] ] ) ) #NEWLINE#
urlparse . urljoin ( 'http://www.foo.com/Stuff/Mike/Doc.html' , '../Bob/Doc.html' ) #NEWLINE#
[ ( 2 , 3 ) ] #NEWLINE#
struct . unpack ( '>I' , bytes ) #NEWLINE#
regex . findall ( s ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y * y , [ l [ : 1 ] [ 0 ] ** 2 ] + l [ 1 : ] ) #NEWLINE#
sorted ( l , key = lambda x : ( x is None , x ) ) #NEWLINE#
result_list = list ( map ( list , deduped ) ) #NEWLINE#
test ( [ 'important' ] ) #NEWLINE#
re . split ( '\\[|\\]#SPACE#*\\[?' , s ) [ 1 : ] #NEWLINE#
f . seek ( 0 ) #NEWLINE#
display . sendstop ( ) #NEWLINE#
input . close ( ) #NEWLINE#
print ( '2#SPACE#+#SPACE#' + str ( integer ) + '#SPACE#=#SPACE#' + str ( rslt ) ) #NEWLINE#
counter_list = [ item for item in counter_list if item ] #NEWLINE#
ax . set_title ( 'lalala' ) #NEWLINE#
driver . implicitly_wait ( secs ) #NEWLINE#
return app . config [ 'SESSION_COOKIE_DOMAIN' ] #NEWLINE#
proc . stdin . write ( 'here,#SPACE#have#SPACE#some#SPACE#data\n' ) #NEWLINE#
logger . error ( 'an#SPACE#error' ) #NEWLINE#
x . reindex ( pd . date_range ( '2013-11-1' , periods = 4 ) , fill_value = 0 ) #NEWLINE#
print ( vars ( args ) [ <STR0> ] ) #NEWLINE#
print ( s . strftime ( '%H:%M#SPACE#%d#SPACE#%B#SPACE#%Y#SPACE#(UTC)' ) ) #NEWLINE#
print ( 'i#SPACE#is#SPACE#5#SPACE#and#SPACE#ii#SPACE#is#SPACE#10' ) #NEWLINE#
data . groupby ( [ lambda x : x . year , lambda x : x . time ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
locale . atof ( '1,000,000.53' ) #NEWLINE#
print ( "You'll#SPACE#see#SPACE#this" ) #NEWLINE#
plt . xticks ( list ( range ( 10 ) ) , labels ) #NEWLINE#
exec ( '\n' . join ( '%s=%r' % i for i in list ( d . items ( ) ) ) ) #NEWLINE#
res = service . cse ( ) . list ( q = search_term , cx = my_cse_id ) . execute ( ) #NEWLINE#
matplotlib . use ( 'GTKAgg' ) #NEWLINE#
os . chdir ( 'C:\\Users\\username\\Desktop\\headfirstpython' ) #NEWLINE#
{ p . id : { 'id' : p . id , 'position' : i } for i , p in enumerate ( p_list ) } #NEWLINE#
clean = [ x for x in lis if x is not None ] #NEWLINE#
figure . set_size_inches ( 8 , 6 ) #NEWLINE#
__init__ . py #NEWLINE#
print ( 'éa' [ : : - 1 ] ) #NEWLINE#
result = [ x . decode ( 'utf8' ) for x in proc . stdout . readlines ( ) ] #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#of#SPACE#posting#SPACE#(US#SPACE#EST)' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
max ( enumerate ( ld ) , key = lambda x_y : x_y [ 1 ] [ 'size' ] ) [ 0 ] #NEWLINE#
( np . arange ( a . max ( ) ) == a [ : , : , ( None ) ] - 1 ) . astype ( int ) #NEWLINE#
os . rmdir ( temp_dir ) #NEWLINE#
plt . show ( ) #NEWLINE#
subprocess . call ( cmd , shell = True ) #NEWLINE#
hasattr ( obj , '__call__' ) #NEWLINE#
pua = re . compile ( '[\ue000-\uf8ff\U000f0000-\U000fffff\U00100000-\U0010ffff]' ) #NEWLINE#
[ ( a [ 'a' ] == b [ 'a' ] ) for a , b in zip ( x1 , x2 ) ] #NEWLINE#
[ 'a' , 'b' , 'c' ] #NEWLINE#
cur . execute ( query , ( sortname , limit1 , limit2 ) ) #NEWLINE#
dt = dt_tz . replace ( tzinfo = None ) #NEWLINE#
print ( [ d . isoformat ( ) for d in get_week ( datetime . datetime . now ( ) . date ( ) ) ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 'five' , 'two' , 'three' , 'six' , 'four' , 'one' ] #NEWLINE#
self . stdout . write ( serializers . serialize ( 'json' , records , indent = 2 ) ) #NEWLINE#
bisect . bisect_left ( mylist , compareValue ) #NEWLINE#
spam_list = [ spam_list [ i ] for i in spam_order ] #NEWLINE#
ax . set_xlim ( [ 0 , N ] ) #NEWLINE#
fh4 . close ( ) #NEWLINE#
print ( '{:x}' . format ( num ) ) #NEWLINE#
plot ( x , y ) #NEWLINE#
np . vstack ( { tuple ( row ) for row in a } ) #NEWLINE#
print ( find_values ( 'P1' , json_repr ) ) #NEWLINE#
data . decode ( 'hex' ) #NEWLINE#
conn = S3Connection ( '<aws#SPACE#access#SPACE#key>' , '<aws#SPACE#secret#SPACE#key>' ) #NEWLINE#
ser . read ( 5 ) #NEWLINE#
random . sample ( list ( range ( 1 , 10 ) ) , 10 - 1 ) #NEWLINE#
print ( data . groupby ( 'currency' ) . apply ( f ) ) #NEWLINE#
l = L [ 1 : : 2 ] #NEWLINE#
plt . show ( ) #NEWLINE#
b = a [ : , : , : : - 1 ] #NEWLINE#
parser . parse_args ( ) #NEWLINE#
fn = lambda x : sys . stdout . write ( str ( x ) + '\n' ) #NEWLINE#
[ ( a % 1 ) for a in l ] #NEWLINE#
ax . set_xticklabels ( years , rotation = 30 ) #NEWLINE#
foo ( 1 , 2 , 3 ) #NEWLINE#
se2 . commit ( ) #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' , time . gmtime ( ) ) #NEWLINE#
sys . path . insert ( 0 , './lib' ) #NEWLINE#
print ( element . get_attribute ( 'value' ) ) #NEWLINE#
[ j for i in x for j in i ] #NEWLINE#
r = requests . post ( url , data = body , headers = headers ) #NEWLINE#
ax . axis ( 'image' ) #NEWLINE#
d . strftime ( '%m' ) #NEWLINE#
print ( np . allclose ( cols , cols2 ) ) #NEWLINE#
data . sort ( key = lambda entry : entry [ 1 ] , reverse = True ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
df . to_csv ( 'names' , encoding = 'utf-8' ) #NEWLINE#
print ( expon . rvs ( 5 , size = 30 ) ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
df [ 'column_new' ] = df [ 'column' ] . str . split ( ',' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return l [ : : - 1 ] #NEWLINE#
rolling_corr . iloc [ - 200 : ] . mean ( axis = 0 ) #NEWLINE#
list ( itertools . permutations ( set ( [ 1 , 1 , 2 , 2 ] ) ) ) #NEWLINE#
[ t for t in mylist if t [ 0 ] == 10 ] #NEWLINE#
d = Image . objects . filter ( ** { 'image__endswith' : 'jpg' } ) #NEWLINE#
X [ 0 , 0 ] - a [ 0 ] , X [ 0 , 1 ] - a [ 1 ] , X [ 0 , 2 ] - a [ 2 ] , X [ 0 , 3 ] - a [ 3 ] #NEWLINE#
X [ 0 , 0 ] - a [ 0 ] , X [ 1 , 0 ] - a [ 1 ] , X [ 2 , 0 ] - a [ 2 ] , X [ 3 , 0 ] - a [ 3 ] #NEWLINE#
df . isnull ( ) . values . ravel ( ) . sum ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
a [ a < 0 ] += 1 #NEWLINE#
isinstance ( re . compile ( '' ) , re . _pattern_type ) #NEWLINE#
print ( myintfunction ( 5.0j ) ) #NEWLINE#
"""{0:15.2f}""" . format ( 1464.1000000000001 ) #NEWLINE#
new_list = [ foo for foo in foos if foo . location == 2 ] #NEWLINE#
a . reshape ( - 1 , m / k , k ) . transpose ( 1 , 0 , 2 ) . reshape ( - 1 , k ) #NEWLINE#
socket . setdefaulttimeout ( 15 ) #NEWLINE#
print ( list ( chain . from_iterable ( A ) ) ) #NEWLINE#
[ hex ( ord ( c ) ) for c in chars ] #NEWLINE#
return HttpResponse ( response . content ) #NEWLINE#
os . startfile ( file ) #NEWLINE#
Gtk . main_iteration ( ) #NEWLINE#
A = [ operation ( A [ i ] , A [ i + 1 ] ) for i in range ( len ( A ) - 1 ) ] #NEWLINE#
df [ [ 'Col2' , 'Col3' ] ] . drop_duplicates ( ) #NEWLINE#
print ( etree . tostring ( builder , pretty_print = True ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
4 * scipy . integrate . nquad ( f , [ [ 0 , 1 ] , [ 0 , 1 ] ] ) [ 0 ] / 12.565472446489999 #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
max ( self . allPartners , key = attrgetter ( 'attrOne' ) ) #NEWLINE#
return '' . join ( i for i in s if ord ( i ) < 128 ) #NEWLINE#
array ( [ [ 1.0 , 0.0 , 0.0 ] , [ 0.0 , 1.0 , 0.0 ] , [ 0.0 , 1.0 , 0.0 ] , [ 0.0 , 0.0 , 1.0 ] ] ) #NEWLINE#
[ ( 2 , 3 , 4 , 5 ) , ( 6 , 7 , 8 ) , ( 9 , 10 ) ] #NEWLINE#
len ( [ i for i in a if i [ 'Value' ] == 'Blah' ] ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE#%27s#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#%5s' % ( key , value ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
numpy . array ( data ) [ : , ( [ 0 , 2 ] ) ] #NEWLINE#
task . retry ( queue = 'worker1.example.com' ) #NEWLINE#
s . configure ( 'My.TFrame' , background = 'red' ) #NEWLINE#
""",#SPACE#""" . join ( '"{0}"' . format ( w ) for w in words ) #NEWLINE#
a = set ( ) #NEWLINE#
demo ( ( 5 , 5 ) , [ ( 5 , 3 ) , ( 5 , 1 ) , ( 8 , 2 ) , ( 4 , 3 ) , ( 1 , 5 ) , ( 3 , 5 ) ] ) #NEWLINE#
bin = '{:0{}b}' . format ( r , self . n ) #NEWLINE#
print ( etree . tostring ( new_root , pretty_print = True ) ) #NEWLINE#
a = list ( set ( a ) ) #NEWLINE#
result_array , result_variable = my_function ( ) #NEWLINE#
A . sort ( key = lambda x : B . count ( x ) ) #NEWLINE#
my_dict = { x [ 0 ] : { k : v for k , v in zip ( my_headers , x [ 1 : ] ) } for x in my_list } #NEWLINE#
input ( 'Hello#SPACE#%r,#SPACE#what#SPACE#is#SPACE#your#SPACE#age?#SPACE#' % firstname ) #NEWLINE#
end_date = date_1 + datetime . timedelta ( days = 10 ) #NEWLINE#
manager . add_command ( 'runserver' , GunicornServer ( ) ) #NEWLINE#
random . sample ( the_list , 50 ) #NEWLINE#
a , b , c , d = [ x [ i : i + step ] for i in range ( 0 , len ( x ) , step ) ] #NEWLINE#
subprocess . call ( [ 'C:\\Temp\\a#SPACE#b#SPACE#c\\Notepad.exe' , 'C:\\test.txt' ] ) #NEWLINE#
ax . hist ( mydata , weights = np . zeros_like ( data ) + 1.0 / data . size ) #NEWLINE#
imshow ( b , interpolation = 'nearest' ) #NEWLINE#
wavwriter . writeframes ( data_bytes [ 0 : 3 ] ) #NEWLINE#
"""C:\\Program#SPACE#Files\\Python\\Python.exeD:\\github\\Miscellaneous-Programs\\Python\\check.py""" #NEWLINE#
data . view ( dtype = [ ( n , 'float64' ) for n in csv_names ] ) . reshape ( len ( data ) ) #NEWLINE#
x , y = y , x #NEWLINE#
a = min ( a , b ) #NEWLINE#
wx . Frame . __init__ ( self , parent , ID , title , pos , size , style ) #NEWLINE#
grayimg = cv2 . cvtColor ( image , cv2 . cv . CV_BGR2GRAY ) #NEWLINE#
str ( hrs ) + ':' + str ( min ) + ':' + str ( sec ) + '.' + str ( msec ) #NEWLINE#
subprocess . call ( [ 'gpsctl' , '-c' , '0.2' ] ) #NEWLINE#
this_function_name = sys . _getframe ( ) . f_code . co_name #NEWLINE#
df_new . head ( ) #NEWLINE#
min ( li , key = lambda x : x . number ) #NEWLINE#
print ( datetime . datetime . strptime ( '2010-15-27' , '%Y-%m-%d' ) ) #NEWLINE#
datetime . fromtimestamp ( timestamp2 ) #NEWLINE#
socket . inet_ntoa ( struct . pack ( '<L' , addr_long ) ) #NEWLINE#
nx . write_graphml ( G , 'my_graph.graphml' ) #NEWLINE#
print ( json . dumps ( s ) ) #NEWLINE#
sorted ( flist , key = lambda friend : friend [ 'name' ] ) #NEWLINE#
print ( df . interpolate ( method = 'nearest' , axis = 0 ) . ffill ( ) . bfill ( ) ) #NEWLINE#
tk . Button ( root , text = 'Refresh' , command = refresh ) . grid ( ) #NEWLINE#
cv2 . imshow ( 'dst_rt' , img ) #NEWLINE#
re . findall ( '([A-Z][\\w-]*(?:\\s+[A-Z][\\w-]*)+)' , article ) #NEWLINE#
df . ix [ idx ] #NEWLINE#
rest = text . split ( sep , 1 ) [ 0 ] #NEWLINE#
cursor . executemany ( sql , rows ) #NEWLINE#
a . append ( s ) #NEWLINE#
df . replace ( d ) #NEWLINE#
print ( 'mystr#SPACE#is#SPACE#empty' ) #NEWLINE#
btn1 . grid ( row = 0 , column = 0 , columnspan = 1 , sticky = 'EWNS' ) #NEWLINE#
[ m . start ( ) for m in re . finditer ( 'ab' , s ) ] [ 2 ] #NEWLINE#
return unique_a . view ( a . dtype ) . reshape ( ( unique_a . shape [ 0 ] , a . shape [ 1 ] ) ) #NEWLINE#
f ( ** arg_dict ( 'a,#SPACE#b,#SPACE#c,#SPACE#d,#SPACE#e' ) ) #NEWLINE#
f . close ( ) #NEWLINE#
parser . add_argument ( 'command' ) #NEWLINE#
tuple ( a . split ( ';' ) [ : - 1 ] ) #NEWLINE#
self . Bind ( wx . EVT_LEAVE_WINDOW , self . _onMouseLeave ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax2 . scatter ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
print ( translit ( 'Die#SPACE#größten#SPACE#Katzenrassen#SPACE#der#SPACE#Welt' , 'de' ) ) #NEWLINE#
link . get ( 'href' ) #NEWLINE#
set ( range ( 1 , 101 ) ) - s #NEWLINE#
self . bind ( 's' , self . sharpen ) #NEWLINE#
[ x for x in [ 'a' , 'b' , 'c' , 'd' , 'e' ] if x not in [ 'b' , 'c' ] ] #NEWLINE#
results = MyClass . objects . all ( ) . distinct ( 'my_integer' ) . order_by ( 'created_ts' ) #NEWLINE#
list1 . sort ( key = natural_sort_key ) #NEWLINE#
plt . xlim ( - 3 , 3 ) #NEWLINE#
a = global_dict [ 'foo' ] #NEWLINE#
sns . kdeplot ( x , shade = True ) #NEWLINE#
kwargs . pop ( 'obj' , None ) #NEWLINE#
ast . literal_eval ( "['first',#SPACE#'sec',#SPACE#'third']" ) #NEWLINE#
set ( list2 ) . issubset ( list1 ) #NEWLINE#
local_file . close ( ) #NEWLINE#
json_string = json . dumps ( foo . __dict__ ) #NEWLINE#
df . iloc [ df . index . get_loc ( datetime . datetime ( 2016 , 2 , 2 ) , method = 'nearest' ) ] #NEWLINE#
return self . queue . pop ( ) #NEWLINE#
left_df . merge ( right_df , how = 'outer' , indicator = True ) #NEWLINE#
button1 . pack ( side = 'bottom' , padx = 5 , pady = 5 ) #NEWLINE#
super ( CacheMix , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
list = map ( str . strip , list ) #NEWLINE#
session . flush ( ) #NEWLINE#
plt . savefig ( 'mytable.png' ) #NEWLINE#
[ list ( t ) for t in zip ( * l ) ] #NEWLINE#
res_list = [ x for x , _ in rows ] #NEWLINE#
s_datetime = datetime . datetime . strptime ( s , '%Y%m%d' ) #NEWLINE#
workbook = xlsxwriter . Workbook ( '2016' + str ( name_get ) ) #NEWLINE#
return Template ( var ) . render ( context ) #NEWLINE#
x [ 5 : ] #NEWLINE#
[ var for var in combinations ( [ 1 , 2 , 3 , 4 , 5 ] , 3 ) ] #NEWLINE#
imshow ( A , interpolation = 'nearest' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ x for x in filter ( lambda x : x not in [ 'b' , 'c' ] , [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) ] #NEWLINE#
list ( object [ 'value' ] for object in test_data ) #NEWLINE#
shutil . rmtree ( name ) #NEWLINE#
q = [ [ None for i in range ( 5 ) ] for j in range ( 4 ) ] #NEWLINE#
df [ 'pct_diff' ] = df [ 'Dew_P#SPACE#Temp#SPACE#(C)' ] / df [ 'Dew_P#SPACE#Temp#SPACE#(C)' ] . iat [ 0 ] - 1 #NEWLINE#
np . flipud ( your_array ) #NEWLINE#
p . wait ( ) #NEWLINE#
df . apply ( lambda row : row [ 1 ] if row [ 0 ] > 0 else row [ 2 ] , 1 ) #NEWLINE#
vbar . pack ( side = RIGHT , fill = Y ) #NEWLINE#
set ( a [ i ] for i in range ( 1 , len ( a ) ) if a [ i ] == a [ i - 1 ] ) #NEWLINE#
np . multiply ( np . arange ( 1 , 5 ) , np . cumprod ( [ 1 , 2 , 2 , 2 ] ) [ np . newaxis ] . T ) #NEWLINE#
timestamps . sort ( ) #NEWLINE#
QtCore . QObject . __init__ ( self ) #NEWLINE#
df . to_csv ( filename , date_format = '%Y-%m-%d' ) #NEWLINE#
url ( '^polls/(?P<string>[\\w\\-]+)/$' , 'polls.views.detail' ) #NEWLINE#
k . append ( ( str ( x ) , { 'num' : str ( y ) } ) ) #NEWLINE#
return '\n' . join ( res ) #NEWLINE#
foo_bar = __import__ ( 'foo#SPACE#bar' ) #NEWLINE#
list ( k for k , g in itertools . groupby ( x for x in numbers if x != 0 ) ) #NEWLINE#
fvtool ( Hd1 , Hd2 ) #NEWLINE#
[ int ( i ) for i in x [ num - n : num ] ] #NEWLINE#
res = cv2 . matchTemplate ( img , template , cv2 . TM_CCORR_NORMED ) #NEWLINE#
foo = None #NEWLINE#
y = x . reshape ( x . shape [ 0 ] / 2 , 2 , x . shape [ 1 ] , 2 ) #NEWLINE#
print ( "You're#SPACE#not#SPACE#an#SPACE#admin." , os . getpid ( ) , 'params:#SPACE#' , sys . argv ) #NEWLINE#
a = datetime . datetime . today ( ) . year #NEWLINE#
from functools import reduce #NEWLINE# result = [ reduce ( lambda x , y : x + y , l ) for l in a ] #NEWLINE#
{ 'Name2' : 'Value2' , 'Name3' : 'Value3' , 'Name1' : 'Value1=2' } #NEWLINE#
typedString = input ( ) #NEWLINE#
print ( re . search ( '(?P<url>https?://[^\\s]+)' , myString ) . group ( 'url' ) ) #NEWLINE#
numpy . rollaxis ( t . reshape ( 3 , 3 , 3 , 3 ) , 2 , 1 ) #NEWLINE#
test = df . sort_values ( [ 'one' ] , ascending = [ 0 ] ) #NEWLINE#
con = MySQLdb . connect ( ) #NEWLINE#
__import__ ( 'abc.def.ghi.jkl.myfile.mymethod' , fromlist = [ '' ] ) #NEWLINE#
os . system ( 'pause' ) #NEWLINE#
newList = [ ( x / myInt ) for x in myList ] #NEWLINE#
self . setWindowState ( QtCore . Qt . WindowMinimized ) #NEWLINE#
main ( sys . argv [ 1 ] , sys . argv [ 2 ] , sys . argv [ 3 ] ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
datetime . datetime ( 1890 , 1 , 1 , 0 , 0 ) #NEWLINE#
pd . read_csv ( Reader ( gen ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
session . query ( MyTable . col1 ) . count ( ) #NEWLINE#
array ( [ [ 18 , 6 ] , [ 19 , 5 ] , [ 17 , 9 ] , [ 10 , 5 ] ] ) , #NEWLINE#
r = requests . get ( url , cookies = cj ) #NEWLINE#
df . iloc [ : , ( [ 1 ] ) ] #NEWLINE#
val0 = f ( list [ 0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
br . open ( 'https://github.com/login' ) #NEWLINE#
signal . signal ( signal . SIGQUIT , handler ) #NEWLINE#
re . match ( '^org/(?P<company_name>\\w+)/?$' , 'org/companyA' ) . groupdict ( ) #NEWLINE#
self . top_frame . grid_columnconfigure ( 1 , weight = 1 ) #NEWLINE#
df3 = df2 . sort_values ( by = 'SomeQuantity' , ascending = False ) #NEWLINE#
sys . stderr . write ( 'DEBUG:#SPACE#got#SPACE#line:#SPACE#' + line ) #NEWLINE#
sorted ( ( i , j ) for i , j in zip ( x , y ) ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
lambda x , y : x + y #NEWLINE#
open ( location , mode ) . write ( content ) #NEWLINE#
parameters = urllib . parse . urlencode ( { 'param1' : '7' , 'param2' : 'seven' } ) #NEWLINE#
self . response . out . write ( 'Hello#SPACE#' + name + '!' ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
users = Table ( 'users' , metadata , autoload = True ) #NEWLINE#
db . commit ( ) #NEWLINE#
print ( 'bar' ) #NEWLINE#
time . mktime ( dt . timetuple ( ) ) + dt . microsecond / 1000000.0 #NEWLINE#
myList = [ item for item in data if item == 'number1' ] #NEWLINE#
( ( 0 , 1 ) , ) * 5 #NEWLINE#
array ( [ [ 0.96488889 , 0.73641667 , 0.67521429 , 0.592875 , 0.53172222 ] ] ) #NEWLINE#
round ( 315.15321531321 , 2 ) #NEWLINE#
sys . path . append ( '/home/john/dependancies/pycharm-debug.egg' ) #NEWLINE#
float ( 'NaN' ) #NEWLINE#
return '#SPACE##SPACE#' . join ( input_string . split ( ) ) == input_string . strip ( ) #NEWLINE#
return HttpResponse ( 'Please#SPACE#enable#SPACE#cookies#SPACE#and#SPACE#try#SPACE#again.' ) #NEWLINE#
plt . savefig ( 'pal1.png' ) #NEWLINE#
[ False ] * 10 #NEWLINE#
clusters = [ X [ labels == i ] for i in range ( n_clusters_ ) ] #NEWLINE#
x2 [ : , ( 0 ) ] = np . roll ( x2 [ : , ( 0 ) ] , - 2 ) #NEWLINE#
print ( eval ( '2#SPACE#+#SPACE#4' ) ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Got#SPACE#error#SPACE#{!r},#SPACE#errno#SPACE#is#SPACE#{}' . format ( e , e . args [ 0 ] ) ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
ax1 . plot ( x [ i : i + 2 ] , y [ i : i + 2 ] ) #NEWLINE#
return f ( * args , ** kw ) #NEWLINE#
is_private = request . POST . get ( 'is_private' , False ) #NEWLINE#
datetime . datetime . today ( ) . weekday ( ) #NEWLINE#
return '%s#SPACE#and#SPACE#%s' % ( ',#SPACE#' . join ( words [ : - 1 ] ) , words [ - 1 ] ) #NEWLINE#
os . path . dirname ( file ) #NEWLINE#
stream . close ( ) #NEWLINE#
added . sort ( key = lambda x : os . stat ( os . path . join ( path_to_watch , x ) ) . st_mtime ) #NEWLINE#
f . close ( ) #NEWLINE#
my_model . save ( ) #NEWLINE#
c . ravel ( ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
fig . savefig ( 'gradColorLine.png' ) #NEWLINE#
ctx . Process ( target = foo , args = ( x , ) ) . start ( ) #NEWLINE#
json . loads ( s . replace ( "'" , '"' ) ) #NEWLINE#
obj . refresh_from_db ( ) #NEWLINE#
[ i for i in my_list if my_counter [ i ] > 1 ] #NEWLINE#
'%s%d' % ( s , i ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
infile . close ( ) #NEWLINE#
client . images . data ( img ) #NEWLINE#
np . random . seed ( 1977 ) #NEWLINE#
f = lambda x : x if x is not None else '' #NEWLINE#
df . iloc [ df . index . get_indexer ( [ 2 , 7 ] ) ] #NEWLINE#
{ 'description' : 'Some#SPACE#Description#SPACE#for#SPACE#the#SPACE#build' } #NEWLINE#
df . stack ( ) #NEWLINE#
s . ix [ 1 : 10 , ( 'b' ) ] #NEWLINE#
"""""" . join ( c for c in s if c . islower ( ) ) #NEWLINE#
sys . path . append ( '/home/visgean/scripty/pymodules/' ) #NEWLINE#
"""^patternhere$""" #NEWLINE#
numpy . array ( list ( c ) ) #NEWLINE#
browser = webdriver . PhantomJS ( desired_capabilities = dcap ) #NEWLINE#
self . frame . pack ( ) #NEWLINE#
G . remove_nodes_from ( to_remove ) #NEWLINE#
list ( Blog . objects . filter ( name__startswith = 'Beatles' ) . values ( ) ) #NEWLINE#
e1sq = 0.006739497 #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( line ) #NEWLINE#
df . apply ( lambda f : to_number ( f [ 0 ] ) , axis = 1 ) . sum ( ) #NEWLINE#
plt . xlim ( 0 , 10000 ) #NEWLINE#
matplotlib . pyplot . plot_date ( dates , values ) #NEWLINE#
file_name = os . environ [ 'mapreduce_map_input_file' ] #NEWLINE#
text_content = sel . xpath ( '//a[1]//text()' ) . extract ( ) #NEWLINE#
wx . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
arr = arr [ : , : , : : 2 ] #NEWLINE#
"""hello world""" . replace ( chr ( 160 ) , 'X' ) #NEWLINE#
df = pd . DataFrame . from_dict ( map ( dict , df_list ) ) #NEWLINE#
print ( 'x#SPACE#is#SPACE#3!' ) #NEWLINE#
print ( match . group ( 'peer_id' ) ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
d . sort_values ( [ 'ANO' , 'MNO' ] ) . reset_index ( drop = True ) #NEWLINE#
"""Not-Meta""" #NEWLINE#
plt . ylim ( 0 , 30 ) #NEWLINE#
Row . _make ( [ 1 , 2 , 3 ] ) #NEWLINE#
bmp . SaveFile ( 'screenshot.png' , wx . BITMAP_TYPE_PNG ) #NEWLINE#
os . startfile ( 'C:\\sampleBatch.bat' ) #NEWLINE#
self . checkqueue ( ) #NEWLINE#
df . groupby ( 'ID' ) . agg ( fnc ) . reindex_axis ( df . columns . drop ( 'ID' ) , 1 ) #NEWLINE#
print ( rdd . collect ( ) ) #NEWLINE#
os . system ( 'rmdir#SPACE#/S#SPACE#/Q#SPACE#"{}"' . format ( directory ) ) #NEWLINE#
np . array ( [ int ( i ) for line in data for i in line . split ( ) ] ) . reshape ( ( 3 , 6 ) ) #NEWLINE#
[ 'a' , 'c' ] #NEWLINE#
np . all ( a == 0 ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#posts#SPACE#WHERE#SPACE#tags#SPACE#LIKE#SPACE#?' , ( tag , ) ) #NEWLINE#
process_file ( sys . argv [ 1 ] ) #NEWLINE#
dirname2 = os . path . split ( dir ) [ 1 ] #NEWLINE#
ax . scatter ( x , y , c = z , s = 50 , edgecolor = '' ) #NEWLINE#
ax1 . yaxis . set_visible ( False ) #NEWLINE#
d . set_start_comment ( 'Data#SPACE#for#SPACE#Class#SPACE#A' ) #NEWLINE#
{ 'y' : 5 , 'z' : 2 } #NEWLINE#
weightMatrix = [ { 'A' : 0 , 'C' : 0 , 'G' : 0 , 'T' : 0 } for k in range ( motifWidth ) ] #NEWLINE#
m = [ row for row in l if 'a' == row [ 0 ] ] #NEWLINE#
logging . getLogger ( 'base.bar' ) . error ( 'Log#SPACE#from#SPACE#bar' ) #NEWLINE#
result = sum ( itertools . islice ( some_list , 1 , None ) ) #NEWLINE#
eval ( '2#SPACE##SPACE##SPACE#+#SPACE##SPACE##SPACE##SPACE#2' ) #NEWLINE#
df [ 'Delta' ] = df [ 'index_col' ] . diff ( ) #NEWLINE#
A [ np . ix_ ( [ - 1 , 0 , 1 ] , [ 2 , 3 , 4 ] ) ] += np . ones ( ( 3 , 3 ) ) #NEWLINE#
assert datetime . now ( ) == datetime ( 2012 , 1 , 14 ) #NEWLINE#
time . time ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
'%d:%d:d' % ( hours , minutes , seconds ) #NEWLINE#
df [ 'label' ] . str . join ( sep = '*' ) . str . get_dummies ( sep = '*' ) #NEWLINE#
translation [ 'data' ] [ 'translations' ] [ 1 ] [ 'translate' ] #NEWLINE#
help ( [ 'foo' , 'bar' , 'baz' ] ) #NEWLINE#
return NOT_DONE_YET #NEWLINE#
foo ( [ 1 , 3 , 5 ] , [ 2 , 4 , 6 ] ) #NEWLINE#
inspect . signature ( datetime . datetime . now ) #NEWLINE#
print ( 'poll#SPACE#=' , proc . poll ( ) ) #NEWLINE#
{ { ( mylist | slice ) : ':' } } #NEWLINE#
struct . pack ( '>i' , 34 ) #NEWLINE#
print ( np . allclose ( rows , rows2 ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
f ( ) #NEWLINE#
prepopulated_fields = { 'slug' : ( 'title' , ) } #NEWLINE#
{ t [ 0 ] : t [ 1 : ] for t in s } #NEWLINE#
con . commit ( ) #NEWLINE#
response = requests . get ( 'http://example.com/api/add.json' , params = data ) #NEWLINE#
print ( timestables ( 5 ) ) #NEWLINE#
print ( ( animals [ 0 ] , animals [ 3 ] ) ) #NEWLINE#
df1 . ix [ : , ( 1 ) ] #NEWLINE#
self . frames [ 'PageTwo' ] . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
np . log ( 42 ** np . array ( [ 3 , 4 ] ) ) / np . log ( 42 ) #NEWLINE#
admin . site . register ( Session , SessionAdmin ) #NEWLINE#
logging . getLogger ( '' ) . addHandler ( console ) #NEWLINE#
df [ 'c' ] = [ a . join ( b ) for a , b in zip ( df . a , df . b ) ] #NEWLINE#
my_dictionary [ 'foo' ] += whatever #NEWLINE#
import imp #NEWLINE# imp . reload ( user ) #NEWLINE#
new_lst . sort ( ) #NEWLINE#
regex . findall ( '\\p{Lu}' , 'ÜìÑ' ) #NEWLINE#
print ( [ v for v in simplex . vertices ] ) #NEWLINE#
print ( #NEWLINE# 'Whatever#SPACE#you#SPACE#would#SPACE#like#SPACE#to#SPACE#print#SPACE#goes#SPACE#here,#SPACE#preferably#SPACE#in#SPACE#between#SPACE#tags#SPACE#to#SPACE#make#SPACE#it#SPACE#look#SPACE#nice' #NEWLINE# ) #NEWLINE#
os . kill ( cpid , signal . SIGKILL ) #NEWLINE#
install . packages ( 'package' , '/Users/yourusernamehere/anaconda/lib/R/library' ) #NEWLINE#
df . values == rowmax [ : , ( None ) ] #NEWLINE#
tiffiles . sort ( key = getint ) #NEWLINE#
arr . argsort ( ) [ : n ] #NEWLINE#
print ( re . findall ( '\\A^.*\\.$' , data , re . MULTILINE ) ) #NEWLINE#
random . shuffle ( lst ) #NEWLINE#
my_array . pop ( ) #NEWLINE#
my_dictionary [ 'foo' ] += new_variable #NEWLINE#
EXTENSIONS = { 'spiders.extensions.faillog.FailLogger' : 599 } #NEWLINE#
print ( hashlib . md5 ( 'whatever#SPACE#your#SPACE#string#SPACE#is' . encode ( 'utf-8' ) ) . hexdigest ( ) ) #NEWLINE#
fliplr ( m . swapaxes ( 0 , 1 ) ) #NEWLINE#
dict ( map ( lambda l : l . split ( ) , s . splitlines ( ) ) ) #NEWLINE#
fig . savefig ( 'theplot.png' ) #NEWLINE#
df . index = pd . to_datetime ( df . index ) #NEWLINE#
print ( len ( '정정' . encode ( 'UTF-32' ) ) ) #NEWLINE#
logger . debug ( 'Some#SPACE#message' ) #NEWLINE#
[ sum ( e ) for e in zip ( * data ) ] #NEWLINE#
logging . config . fileConfig ( os . path . join ( DIRNAME , 'logging.conf' ) ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
plt . show ( ) #NEWLINE#
resp = requests . get ( 'http://example.com' , proxies = proxies ) #NEWLINE#
os . symlink ( '/usr/bin/python' , 'python' ) #NEWLINE#
doc = lxml . html . parse ( url ) #NEWLINE#
cur . execute ( 'select#SPACE#arr#SPACE#from#SPACE#test' ) #NEWLINE#
word = list ( '*' * len ( word ) ) #NEWLINE#
plt . savefig ( 'AnswersSA1a.png' ) #NEWLINE#
median = numpy . median ( a [ - 30 : ] ) #NEWLINE#
arr [ : , ( None ) ] #NEWLINE#
pd . DataFrame ( list ( d . items ( ) ) ) #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1976' , '182208407088.856' ] #NEWLINE#
ax . set_xlabel ( 'Amount#SPACE#($)' ) #NEWLINE#
print ( '{}:#SPACE#{}' . format ( name , getattr ( mod , name ) ) ) #NEWLINE#
sys . stdout . write ( '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#[' ) #NEWLINE#
sys . stdout . write ( '\n#SPACE##SPACE##SPACE##SPACE#]\n#SPACE##SPACE#}' ) #NEWLINE#
sys . stdout . write ( ',' ) #NEWLINE#
sys . stdout . write ( ']' ) #NEWLINE#
C = [ [ ( 0 ) for col in range ( len ( B [ 0 ] ) ) ] for row in range ( len ( A ) ) ] #NEWLINE#
pickle . loads ( encoded . encode ( 'latin1' ) ) #NEWLINE#
pd . value_counts ( list ( concat ( df . categories . values . tolist ( ) ) ) ) #NEWLINE#
fh . close ( ) #NEWLINE#
adate + datetime . timedelta ( days = 30 ) #NEWLINE#
random . shuffle ( x ) #NEWLINE#
result = sorted ( mylist , key = lambda x : d [ x [ 0 ] ] ) #NEWLINE#
df [ 'ID' ] = df [ 'ID' ] . str . zfill ( 15 ) #NEWLINE#
list_of_hets . append ( hets ) #NEWLINE#
MAYBECHOICE = ( 'y' , 'Yes' ) , ( 'n' , 'No' ) , ( 'u' , 'Unknown' ) #NEWLINE#
w . bind ( '<1>' , lambda event : w . focus_set ( ) ) #NEWLINE#
np . unravel_index ( [ 0 , 18 , 26 ] , a . shape ) #NEWLINE#
cursor . execute ( 'insert#SPACE#into#SPACE#table#SPACE#values(%s,%d,%s)' , t ) #NEWLINE#
urllib . request . urlopen ( url ) . geturl ( ) #NEWLINE#
plt . ylim ( - 3 , 3 ) #NEWLINE#
np . where ( ( a >= 6 ) & ( a <= 10 ) ) #NEWLINE#
print ( a . dtype ) #NEWLINE#
df [ df . isnull ( ) . any ( axis = 1 ) ] #NEWLINE#
datetime ( 2011 , 2 , 11 , 20 , 0 , 0 , 0 , pacific ) . astimezone ( utc ) . strftime ( '%s' ) #NEWLINE#
index = numpy . clip ( index , 0 , len ( my_list ) - 1 ) #NEWLINE#
[ i for i in range ( 10 ) if i == 9 ] #NEWLINE#
print ( s . encode ( 'string-escape' ) ) #NEWLINE#
input ( ) #NEWLINE#
plt . subplot ( 212 , sharex = ax1 , sharey = ax1 ) #NEWLINE#
print ( 'All#SPACE#following#SPACE#prints#SPACE#will#SPACE#be#SPACE#red#SPACE#...' ) #NEWLINE#
w . setParent ( None ) #NEWLINE#
d = dict ( itertools . zip_longest ( * ( [ iter ( l ) ] * 2 ) , fillvalue = '' ) ) #NEWLINE#
list ( s ) [ 0 ] #NEWLINE#
re . sub ( '(\\w)([A-Z])' , '\\1#SPACE#\\2' , 'WordWordWord' ) #NEWLINE#
glOrtho ( self . left , self . right , self . bottom , self . top , 1 , - 1 ) #NEWLINE#
pc . set_edgecolor ( 'black' ) #NEWLINE#
s = re . sub ( pattern2 , '#SPACE#' , s ) . strip ( ) #NEWLINE#
time += datetime . timedelta ( hours = 1 ) #NEWLINE#
print ( type ( 'نص#SPACE#عربي' ) ) #NEWLINE#
main ( ) #NEWLINE#
print ( '{foo}' . format ( foo = foo ) ) #NEWLINE#
""""'""" #NEWLINE#
[ random . random ( ) for _ in range ( 100000 ) ] #NEWLINE#
driver = webdriver . Chrome ( chrome_options = chrome_options ) #NEWLINE#
links = soup . findAll ( 'a' , { 'id' : re . compile ( '^c' ) } ) #NEWLINE#
getpass . getuser ( ) #NEWLINE#
return render_template ( 'users.html' , users = users ) #NEWLINE#
f . close ( ) #NEWLINE#
stokes_list = np . vstack ( ( stokes_list , stokes_line ) ) #NEWLINE#
print ( 'Group#SPACE#somegrp#SPACE#does#SPACE#not#SPACE#exist.' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
new_foo = ( item for item in foo if item % 3 != 0 ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . stack ( ) . apply ( pd . Series ) . unstack ( ) . swaplevel ( 0 , 1 , 1 ) . sort_index ( 1 ) #NEWLINE#
offset = dt . astimezone ( cet ) . utcoffset ( ) #NEWLINE#
os . system ( 'echo#SPACE#-e#SPACE#"AT+SAPBR=3,1,"APN","TATA.DOCOMO.INTERNET"\r\n"#SPACE#>>#SPACE#ttyAMA0' ) #NEWLINE#
print ( '<%*s>' % ( len ( text ) - 2 , text ) ) #NEWLINE#
versions_list . sort ( key = lambda s : [ int ( u ) for u in s . split ( '.' ) ] ) #NEWLINE#
"""""" . join ( [ c for c in subj if c not in sc ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
out_file . write ( replace_all ( text , spelling_dict ) ) #NEWLINE#
pytz . timezone ( 'US/Eastern' ) . localize ( datetime . datetime ( 1901 , 1 , 1 ) ) #NEWLINE#
ax1 . set_ylim ( [ 0 , 5 ] ) #NEWLINE#
f . close ( ) #NEWLINE#
top5 = itertools . islice ( my_list , 5 ) #NEWLINE#
print ( '%s:%s:%s' % ( hours , minutes , seconds ) ) #NEWLINE#
list_2 = [ i for i in list_1 if isinstance ( i , ( int , float ) ) ] #NEWLINE#
return render_to_response ( 'template.html' , { 'message' : e . message } ) #NEWLINE#
np . dtype ( [ ( 'a' , double ) , ( 'b' , double ) ] ) #NEWLINE#
print ( ',#SPACE#' . join ( repr ( e ) for e in LIST ) ) #NEWLINE#
property = models . ForeignKey ( Doc , related_name = 'images' ) #NEWLINE#
plt . show ( ) #NEWLINE#
reverse_dict = { value : keypath for keypath , value in keypaths ( example_dict ) } #NEWLINE#
proc . stdin . write ( 'foo\n' ) #NEWLINE#
G = nx . DiGraph ( ) #NEWLINE#
df . to_csv ( 'dfTest.txt' , '\t' , header = True , cols = [ 'b' , 'a' , 'c' ] ) #NEWLINE#
out = np . linalg . norm ( row . data ) #NEWLINE#
contains_non_string = s [ s . apply ( type ) != str ] . any ( ) #NEWLINE#
np . array ( _ ) #NEWLINE#
ax . plot ( x , y , label = '$\\sin#SPACE#(x)$' ) #NEWLINE#
filename = self . request . POST [ 'content' ] . filename #NEWLINE#
multi_line_word . setParseAction ( lambda t : '' . join ( t ) ) #NEWLINE#
import numpy as np #NEWLINE#
self . listbox . selection_set ( first = 0 ) #NEWLINE#
ax . plot ( x , y , marker = 's' , linestyle = 'none' , label = 'big' ) #NEWLINE#
ser . write ( 'Your#SPACE#text' ) #NEWLINE#
b3 . insert ( END , item ) #NEWLINE#
np . fromiter ( ( row [ index ] for row , index in zip ( X , Y ) ) , dtype = int ) #NEWLINE#
sorted ( l , key = lambda x : ( x [ : - 1 ] , x [ - 1 ] . isdigit ( ) ) ) #NEWLINE#
help ( func ) #NEWLINE#
print ( sys . stdout . isatty ( ) ) #NEWLINE#
np . subtract . outer ( a , b ) #NEWLINE#
min ( a , key = lambda t : t [ 1 ] ) #NEWLINE#
self . check_object_permissions ( self . request , obj ) #NEWLINE#
struct . unpack ( 'f' * n , file . read ( 4 * n ) ) #NEWLINE#
df = df [ df [ 'score' ] > 50 ] #NEWLINE#
p = multiprocessing . Pool ( 1000000 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( myDict [ 'jeff' ] ) #NEWLINE#
list ( tuple ( mydata . transpose ( ) ) ) #NEWLINE#
print ( single_date . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
subprocess . Popen ( [ 'python' , '-c' , 'exit(-11)' ] ) . wait ( ) #NEWLINE#
tuples = list ( genreDictionary . items ( ) ) #NEWLINE#
return '' . join ( reversed ( result ) ) #NEWLINE#
a [ ... , numpy . newaxis ] * b [ numpy . newaxis , ... ] #NEWLINE#
logging . debug ( 'Debug#SPACE#Message' ) #NEWLINE#
m = re . search ( '//([^/]*)' , str ) #NEWLINE# print ( m . group ( 1 ) ) #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
self . logr = logging . getLogger ( 'root' ) #NEWLINE#
self . value = value #NEWLINE#
theproc . communicate ( ) #NEWLINE#
df [ df . C . str . contains ( 'XYZ' ) == False ] #NEWLINE#
return [ item for item in theList if item in theDict ] #NEWLINE#
self . assertTrue ( com . isnull ( df . ix [ 'c' , 'timestamp' ] ) ) #NEWLINE#
user . save ( ) #NEWLINE#
execute ( secondSSH , hosts = [ ( 'notmmaley@%s:8101' % h ) for h in env . hosts ] ) #NEWLINE#
[ 497.72447701 , 984.39685939 , 3377.17916825 , 4126.77552299 , 237.92397237 ] #NEWLINE#
d . update ( { 'key1' : [ 'val1' , 'val2' ] , 'key2' : DictRef ( d , 'key1' ) } ) #NEWLINE#
df1 . count ( ) #NEWLINE#
[ 1 , 2 , 3 , 6 , 8 , 9 , 10 , 16 ] #NEWLINE#
setattr ( self , k , v ) #NEWLINE#
client . GET ( '/admin' ) . responds_access_denied ( ) #NEWLINE#
story . append ( Paragraph ( '<bullet>The#SPACE#rain#SPACE#in#SPACE#spain</bullet>' , TEXT_STYLE ) ) #NEWLINE#
print ( sorted ( set ( my_list ) ) ) #NEWLINE#
color ( '#%06x' % random . randint ( 0 , 16777215 ) ) #NEWLINE#
plt . imsave ( 'foo.png' , a , dpi = 1 ) #NEWLINE#
s = pd . Series ( [ 1 , 5 , 20 , - 1 ] ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
"""#SPACE#Returns#SPACE#the#SPACE#string#SPACE#without#SPACE#non#SPACE#ASCII#SPACE#characters""" #NEWLINE#
'foo\n\rbar' . splitlines ( ) #NEWLINE#
self . Bind ( wx . EVT_MOTION , self . OnMouseMove ) #NEWLINE#
user . save ( ) #NEWLINE#
'%.3g' % num #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
do_it_lots ( ) #NEWLINE#
l = map ( int , num_str . split ( ',' ) ) #NEWLINE#
df . select ( * [ ( count ( c ) / count ( '*' ) ) . alias ( c ) for c in df . columns ] ) . show ( ) #NEWLINE#
np . where ( ( vals [ : , ( 0 ) ] == 0 ) & ( vals [ : , ( 1 ) ] == 1 ) ) [ 0 ] #NEWLINE#
numpy . array ( [ [ elem for elem in x_row ] for x_row in X ] ) #NEWLINE#
lst . extend ( data ) #NEWLINE#
self . _conn = create_engine ( src , client_encoding = 'utf8' ) #NEWLINE#
[ '.' , '.' , '0' , '0' , '0' , '0' , '0' , '.' , '.' ] , #NEWLINE#
[ '.' , '.' , '.' , '0' , '0' , '0' , '.' , '.' , '.' ] , #NEWLINE#
{ 'is_staff' : True , 'last_name__startswith' : 'A' } #NEWLINE#
request . remote_addr #NEWLINE#
round ( 1.5145 , 2 ) #NEWLINE#
f = open ( 'links.csv' , 'rb' ) #NEWLINE#
print ( [ m . start ( 1 ) for m in matches ] ) #NEWLINE#
re . sub ( '(\\d)([-+])' , '\\1E\\2' , number ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
s = line . replace ( '\x0c' , '' ) #NEWLINE#
ax . set_xlim ( [ datetime . date ( 2014 , 1 , 26 ) , datetime . date ( 2014 , 2 , 1 ) ] ) #NEWLINE#
super ( AuthorForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
some_class ( * os . path . split ( somefile ) ) #NEWLINE#
return set ( word_list ) . intersection ( a_string . split ( ) ) #NEWLINE#
plt . pause ( 1 ) #NEWLINE#
chardet . detect ( open ( 'file.txt' , 'rb' ) . read ( ) ) #NEWLINE#
re . sub ( '(.)(.)' , '\\g<2>\\g<1>' , s ) #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
cursor . execute ( 'select#SPACE#field1,#SPACE#field2,#SPACE#fieldn#SPACE#from#SPACE#table1' ) #NEWLINE#
print ( lxml . etree . tostring ( tree2 ) ) #NEWLINE#
'Fizz' if i % 3 == 0 else '' #NEWLINE#
return np . sum ( drr . T / dr3 , axis = 1 ) #NEWLINE#
list ( chain ( * ( x . split ( ',' ) if ',' in x else x for x in lis ) ) ) #NEWLINE#
return self . baseDict [ key ] #NEWLINE#
"""It#SPACE#will#SPACE#cost#SPACE#${0}#SPACE#dollars.""" . format ( 95 ) #NEWLINE#
{ { ( variable | stringformat ) : '.3f' } } #NEWLINE#
getattr ( CallMe , variable ) ( ) #NEWLINE#
b . resample ( 'M' , how = 'sum' ) . dropna ( ) #NEWLINE#
merged . to_csv ( 'merged.csv' , index = False ) #NEWLINE#
r . sadd ( 'a' , 1 , 2 , 3 ) #NEWLINE#
cl . getlevel ( 2 ) #NEWLINE#
"""bword#SPACE#Bword""" #NEWLINE#
ordered = OrderedDict ( ( k , mydict [ k ] ) for k in myorder ) #NEWLINE#
np . MAXDIMS #NEWLINE#
plt . plot ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
time . sleep ( 0.2 ) #NEWLINE#
f ( [ 3 , 2 , 2 , 4 ] , [ 2 , 4 , 2 ] ) #NEWLINE#
zip ( s , s [ 1 : ] , s [ 2 : ] ) #NEWLINE#
{ ( 0 ) : [ 0 , 1 , 3 ] , ( 2 ) : [ 4 , 5 ] , ( 47 ) : [ 2 , 6 ] } #NEWLINE#
proc = subprocess . Popen ( [ 'cat' , '/tmp/baz' ] , stdout = subprocess . PIPE ) #NEWLINE#
__init__ . py #NEWLINE#
self . assertTrue ( 'expected_part_of_string' in my_longer_string ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
df . set_index ( 'time' , inplace = True ) #NEWLINE#
system ( 'python#SPACE#myscript.py#SPACE#' + args ) #NEWLINE#
[ 'Cmaj7' , 'F#m' , 'C7' ] #NEWLINE#
plt . show ( ) #NEWLINE#
decimal . Decimal ( 1.1 ) #NEWLINE#
server . sendmail ( msg [ 'from' ] , [ msg [ 'to' ] ] , msg . as_string ( ) ) #NEWLINE#
ax . set_zlabel ( 'z_values' ) #NEWLINE#
uni = [ k for k , v in a . items ( ) if countMap [ v ] == 1 ] #NEWLINE#
lowercase = [ c for c in s if c . islower ( ) ] #NEWLINE#
[ [ 2.5 , 20 ] , [ 3.5 , 30 ] ] #NEWLINE#
df . apply ( lambda x : '%s#SPACE#is#SPACE#%s' % ( x [ 'bar' ] , x [ 'foo' ] ) , axis = 1 ) #NEWLINE#
list ( '' . join ( l + 'x' * ( n % 3 == 2 ) for n , l in enumerate ( letters ) ) ) #NEWLINE#
self . __dict__ . update ( * args , ** kwargs ) #NEWLINE#
df2 [ 'one' ] == np . nan #NEWLINE#
x = x [ : 50 ] #NEWLINE#
self . navbar . pack ( side = 'left' , fill = 'y' ) #NEWLINE#
print ( list ( itertools . product ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) ) #NEWLINE# [ ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 2 , 6 ) , ( 3 , 4 ) , ( 3 , 5 ) , ( 3 , 6 ) ] #NEWLINE#
return '' . join ( chars [ - i : ] ) #NEWLINE#
text = Text ( app , state = 'disabled' , width = 44 , height = 5 ) #NEWLINE#
z = dict ( list ( x . items ( ) ) + list ( y . items ( ) ) ) #NEWLINE#
ax . margins ( 0.05 ) #NEWLINE#
[ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
logging . basicConfig ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ '{0:06}' . format ( i ) for i in range ( 1000000 ) if sum ( map ( int , str ( i ) ) ) == 20 ] #NEWLINE#
[ _f for _f in lst if _f ] #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
msg [ 'Subject' ] = 'Auto#SPACE#Hella#SPACE#Restart#SPACE#Report#SPACE#' + sys . argv [ 1 ] #NEWLINE#
plt . ylabel ( 'Distribution#SPACE#[%]' , fontsize = 16 ) #NEWLINE#
system ( 'say#SPACE#Hello#SPACE#world!' ) #NEWLINE#
webbrowser . open ( 'http://www.google.com' ) #NEWLINE#
Friend_id = db . Column ( db . Integer , db . ForeignKey ( 'User.ID' ) ) #NEWLINE#
[ y for x in list ( d . values ( ) ) for y in x ] #NEWLINE#
df3 . resample ( 'H' ) . plot ( ) #NEWLINE#
self . linenumbers . pack ( side = 'left' , fill = 'y' ) #NEWLINE#
sorted ( [ ( 0 , 0 , 0 , int ( random . getrandbits ( 4 ) ) ) for x in range ( 10 ) ] ) #NEWLINE#
min ( a , b ) / max ( a , b ) #NEWLINE#
self . client . post ( url , data = post_data ) #NEWLINE#
plt . plot ( x , y , linestyle = '-' , color = color ) #NEWLINE#
f . write ( foo . encode ( 'utf8' ) ) #NEWLINE#
d = { t [ 0 ] : t [ 1 : ] for t in arr } #NEWLINE#
[ '1.0,4' , '2.0,5' , '3.0,6' , '' ] #NEWLINE#
plt . show ( ) #NEWLINE#
vc = df . date . value_counts ( ) #NEWLINE#
print ( 'Pototo\x08\x08\x08a\x1b[2Ces' ) #NEWLINE#
[ 'ab' , 'cde' , 'fghi' , 'jkl' , 'mn' ] #NEWLINE#
wb . save ( 'test.xlsx' ) #NEWLINE#
driver . find_element_by_id ( 'main_buttonMissionTextNext' ) . click ( ) #NEWLINE#
self . frame . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
setattr ( self , 'string' , var ) #NEWLINE#
asps += glob . glob ( os . path . join ( root , '*.asp' ) ) #NEWLINE#
admin . autodiscover ( ) #NEWLINE#
ax . set_axis_bgcolor ( 'y' ) #NEWLINE#
from django . conf import settings #NEWLINE#
re . findall ( '(.{6}|.+$)' , 'Four#SPACE#score#SPACE#and#SPACE#seven#SPACE#years#SPACE#ago.' ) #NEWLINE#
x , y , z = ( v + 2 for v in l ) #NEWLINE#
min ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
f . write ( '\x00' ) #NEWLINE#
print ( pix [ x , y ] ) #NEWLINE#
s = re . sub ( '(?<!#SPACE#)(?=[.,!?()])|(?<=[.,!?()])(?!#SPACE#)' , '#SPACE#' , s ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
olib . oshape ( 'b' , b ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , labelspacing = 2 ) #NEWLINE#
words_list . extend ( contents [ i ] . split ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . path . normpath ( os . path . join ( os . getcwd ( ) , os . path . dirname ( __file__ ) ) ) #NEWLINE#
f . close ( ) #NEWLINE#
d = pd . concat ( [ d , temp ] ) #NEWLINE#
quantiles = df . quantile ( [ 0.01 , 0.25 , 0.5 , 0.75 , 0.99 ] ) #NEWLINE#
df . selectExpr ( '*' , 'date_sub(date_col,#SPACE#day_col)#SPACE#as#SPACE#subtracted_dates' ) #NEWLINE#
rows = session . query ( func . count ( Congress . id ) ) . scalar ( ) #NEWLINE#
self . label . pack ( ) #NEWLINE#
seaborn . kdeplot ( df [ 'col2' ] , ax = ax ) #NEWLINE#
file = models . FileField ( blank = True , null = True ) #NEWLINE#
text_area . pack ( ) #NEWLINE#
cur . execute ( 'SET#SPACE#SESSION#SPACE#TRANSACTION#SPACE#ISOLATION#SPACE#LEVEL#SPACE#READ#SPACE#UNCOMMITTED' ) #NEWLINE#
myFile . write ( '</html>' ) #NEWLINE#
plt . plot ( list ( range ( 5 ) ) ) #NEWLINE#
word1 = '#SPACE#' . join ( re . findall ( '[a-zA-Z]+' , st ) ) #NEWLINE#
[ y for x in zip_longest ( l1 , l2 ) for y in x if y is not None ] #NEWLINE#
eval ( '"x"+str(i)+"="+"123"' ) #NEWLINE#
time . strptime ( '2009-09-09#SPACE#16:26:57' , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
ids = [ t [ 'id' ] for t in json [ 'test' ] if t [ 'description' ] == 'Test#SPACE#1' ] #NEWLINE#
[ tuple ( zip ( * x ) ) for x in lst ] #NEWLINE#
proc = subprocess . Popen ( [ 'python' , 'fake_utility.py' ] , stdout = subprocess . PIPE ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 5 ) , columns = [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
matplotlib . use ( 'wx' ) #NEWLINE#
a [ 1 ] = 'b' #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( Foo . bar ) #NEWLINE#
[ a . index ( item ) for item in b ] #NEWLINE#
a [ np . arange ( a . shape [ 0 ] ) [ : , ( None ) ] , inds ] #NEWLINE#
writer . writerow ( list ( d . keys ( ) ) ) #NEWLINE#
u . encode ( 'ascii' , 'ignore' ) #NEWLINE#
userincrease = int ( input ( 'Increase#SPACE#>#SPACE#' ) ) #NEWLINE#
sock . bind ( ( MCAST_GRP , MCAST_PORT ) ) #NEWLINE#
shutil . copy ( file , dest_dir ) #NEWLINE#
return map ( lambda x : x ** 2 , list ) #NEWLINE#
"""{:,.2f}""" . format ( num ) . replace ( '.' , '%' ) . replace ( ',' , '.' ) . replace ( '%' , ',' ) #NEWLINE#
update_fitness ( ) #NEWLINE#
<STR0> . sort ( ) #NEWLINE#
os . chdir ( os . path . expanduser ( newdir ) ) #NEWLINE#
shutil . rmtree ( dirpath ) #NEWLINE#
[ 1 , 8 , 9 , 10 , 11 , 20 ] #NEWLINE#
new_list = [ f ( x ) for x in it . takewhile ( lambda x : condition ( x ) , l ) ] #NEWLINE#
nx . draw_networkx_nodes ( G , pos , cmap = plt . get_cmap ( 'jet' ) , node_color = values ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
plt . gca ( ) . set_aspect ( 'equal' , adjustable = 'box' ) #NEWLINE#
super ( Match , self ) . save ( * args , ** kwargs ) #NEWLINE#
os . unsetenv ( 'PYTHONHOME' ) #NEWLINE#
pattern = re . compile ( '^/(?:\\\\.|[^/\\\\])*/' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ i [ 0 ] for i in list ( zip ( listOfTuples , bools ) ) if i [ 1 ] == True ] #NEWLINE#
os . path . dirname ( __file__ ) #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
re . findall ( '({{.*?}})(?:\\Z|\\s+)' , OUTPUT ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
re . search ( '\\$.' , str ( p ) ) . group ( 0 ) #NEWLINE#
np . einsum ( 'ij,ik->ijk' , x , x ) #NEWLINE#
arbiter . run ( ) #NEWLINE#
login_required ( TemplateView . as_view ( template_name = 'foo_index.html' ) ) #NEWLINE#
H = dict ( line . strip ( ) . split ( '=' ) for line in open ( 'filename.txt' ) ) #NEWLINE#
__init__ . py #NEWLINE#
screen . fill ( ( 255 , 255 , 255 ) ) #NEWLINE#
data . append ( [ int ( v ) for v in line . split ( ) ] ) #NEWLINE#
raise ValueError ( 'minval#SPACE#or#SPACE#maxval#SPACE#must#SPACE#be#SPACE#specified' ) #NEWLINE#
import imp #NEWLINE# imp . reload ( myModule ) #NEWLINE#
exec ( compile ( open ( activate_this_file ) . read ( ) , activate_this_file , 'exec' ) , #NEWLINE# dict ( __file__ = activate_this_file ) ) #NEWLINE#
pylab . show ( ) #NEWLINE#
super ( X , self ) . __init__ ( ) #NEWLINE#
subprocess . call ( 'explorer#SPACE#C:\\temp\\yourpath' , shell = True ) #NEWLINE#
s = 'cat#SPACE#goose#SPACE##SPACE#mouse#SPACE#horse#SPACE#pig#SPACE#cat#SPACE#cow' #NEWLINE# re . sub ( '^((.*?cat.*?){1})cat' , '\\1Bull' , s ) #NEWLINE#
s = 'cat#SPACE#goose#SPACE##SPACE#mouse#SPACE#horse#SPACE#pig#SPACE#cat#SPACE#cow' #NEWLINE# re . sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat' , '\\1Bull' , s ) #NEWLINE#
pat = re . compile ( '[a-f]+\\d+' ) #NEWLINE#
( df [ 0 ] - df [ 1 ] ) . astype ( 'timedelta64[us]' ) #NEWLINE#
a = re . sub ( 'This.*ok' , '' , a , flags = re . DOTALL ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
list ( map ( fs . format , sum ( map ( str . split , l ) , [ ] ) ) ) #NEWLINE#
max ( re . findall ( 'g+' , 'fggfggggfggfg' ) , key = len ) #NEWLINE#
print ( '{:10s}#SPACE#{:3d}#SPACE#Â\xa0{:7.2f}' . format ( 'zz' , 42 , 123.34 ) ) #NEWLINE#
plt . xticks ( [ ] ) #NEWLINE#
return '{}#SPACE#and#SPACE#{}' . format ( ',#SPACE#' . join ( lst [ : - 1 ] ) , lst [ - 1 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
list_display = [ 'name' , 'companyid' , 'active' , 'modified' , 'created' ] #NEWLINE#
logging . getLogger ( 'base.foo' ) . error ( 'Log#SPACE#from#SPACE#foo' ) #NEWLINE#
print ( list ( keep_dupes ( [ 1 , 2 , 2 , 2 , 3 , 4 , 5 , 6 , 6 , 7 ] ) ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
[ b for a in ( ( x , - x ) for x in range ( 1 , 10 + 1 ) ) for b in a ] #NEWLINE#
print ( soup . get_text ( ) ) #NEWLINE#
list ( r . keys ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . reset_index ( inplace = True ) #NEWLINE#
[ item for item in my_list if any ( x in item for x in bad ) ] #NEWLINE#
[ { 'type' : k , 'items' : v } for k , v in list ( res . items ( ) ) ] #NEWLINE#
df . columns . get_loc ( 'pear' ) #NEWLINE#
client . connect ( ( '127.0.0.1' , 57120 ) ) #NEWLINE#
[ [ 10 , 6 , 45 , 18 , 49 ] , [ 5 , 6 , 45 , 6 , 14 ] ] #NEWLINE#
im = imread ( 'farm.jpg' ) #NEWLINE#
df [ 'stops' ] = df [ 'stops' ] . bfill ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
skipsdist = BOOL #NEWLINE#
u . replace ( '%7C' , '|' ) #NEWLINE#
[ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] , [ 'g' , 'h' ] ] #NEWLINE#
struct . pack ( 'i' , - 4 ) #NEWLINE#
c . execute ( 'select#SPACE#*#SPACE#from#SPACE#foo' ) #NEWLINE#
data . groupby ( 'ContactID' ) . filter ( lambda g : ( g . PaymentType == 160 ) . any ( ) ) #NEWLINE#
postcodes = re . findall ( '[A-Z]{1,2}[0-9R]?[0-9A-Z]?#SPACE#[0-9][A-Z]{2}' , content ) #NEWLINE#
print ( '#SPACE#' . join ( get_words ( [ 'ம' , 'ப' , 'ட' , 'ம்' ] ) ) ) #NEWLINE#
pl . pcolormesh ( x , y , z , cmap = 'Blues' , linewidth = 0 , rasterized = True ) #NEWLINE#
cur . execute ( 'select#SPACE#*#SPACE#from#SPACE#contacts#SPACE#where#SPACE#name#SPACE#like#SPACE#?' , ( '%' + search + '%' , ) ) #NEWLINE#
csv_writer . writerow ( [ x for x in line ] ) #NEWLINE#
mars . circle ( 228 , 1 ) #NEWLINE#
print ( [ len ( x ) for x in partition ( list ( range ( 105 ) ) , 10 ) ] ) #NEWLINE#
testobj = { 'test' : [ a1 , a2 , b2 ] , 'test2' : 'something#SPACE#else' , 'test3' : 1 } #NEWLINE#
super ( MyException , self ) . __init__ ( arg1 ) #NEWLINE#
result = [ '_' . join ( ( i , j ) ) for i , j in zip ( la , itertools . cycle ( lb ) ) ] #NEWLINE#
row [ x ] . lstrip ( '-' ) . isdigit ( ) #NEWLINE#
sorted ( s2 , key = prefixed_digits ( 'B' , 'D' ) ) #NEWLINE#
ax . set_xticklabels ( ( 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ) ) #NEWLINE#
[ 4 , 4 , 2 , 1 , 2 ] #NEWLINE#
plt . ylim ( [ - 4 , 2 ] ) #NEWLINE#
et . find ( 'img' ) . tail #NEWLINE#
foo . __getitem__ ( slice ( a , b , c ) ) #NEWLINE#
form = UserForm ( request . form , obj = user ) #NEWLINE#
return hashed . digest ( ) . encode ( 'base64' ) . rstrip ( '\n' ) #NEWLINE#
df2 . boxplot ( column = [ 'obs1' ] , by = df2 . index . month , showmeans = True , ax = ax ) #NEWLINE#
output_list = list ( set ( itertools . chain ( first_list , second_list ) ) ) #NEWLINE#
mystr . replace ( '#SPACE#' , '' ) #NEWLINE#
re . sub ( '@\\w+' , my_replace , string ) #NEWLINE#
plt . show ( ) #NEWLINE#
mydll = ctypes . CDLL ( '...' ) #NEWLINE#
mydll = ctypes . CDLL ( './mylib.so' ) #NEWLINE#
socket . gethostbyname ( socket . gethostname ( ) ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ { env [ 'XMPP_DOMAIN' ] or 'localhost' } } #NEWLINE#
data = pandas . read_csv ( myfile , encoding = 'utf-8' , quotechar = '"' , delimiter = ',' ) #NEWLINE#
struct . unpack ( '>i' , '\x00' + '\x00\x00\x01' ) #NEWLINE#
plt . contour ( xi , yi , zi , 20 , linewidths = 1 ) #NEWLINE#
print ( df . loc [ df . groupby ( 'type' ) . votes . agg ( 'idxmax' ) ] ) #NEWLINE#
[ [ 'S4S1' ] [ 'S4S2' ] [ 'S4S3' ] [ 'S5S1' ] [ 'S5S2' ] [ 'S5S3' ] ] #NEWLINE#
ax . spines [ 'bottom' ] . set_position ( 'zero' ) #NEWLINE#
df . apply ( pd . to_numeric , errors = 'coerce' ) . dtypes #NEWLINE#
math . modf ( x ) #NEWLINE#
pfile . seek ( 0 ) #NEWLINE#
lines = [ line for line in open ( '/some/file' ) if random ( ) >= 0.5 ] #NEWLINE#
{ { ( wrapping | slice ) : ':-3' } } #NEWLINE#
f = open ( os . path . dirname ( __file__ ) + '/../data.yml' ) #NEWLINE#
str ( round ( value ) ) . rstrip ( '0' ) . rstrip ( '.' ) #NEWLINE#
imagePath = os . path . dirname ( __file__ ) + '/1.jpg' #NEWLINE#
USE_TZ = False #NEWLINE#
root . winfo_toplevel ( ) . wm_geometry ( '' ) #NEWLINE#
subprocess . call ( shlex . split ( 'command#SPACE#-option#SPACE#value#SPACE#-option#SPACE#value' ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
f = np . vectorize ( f , otypes = [ np . float ] ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
new_list = sorted_set ( my_list ) #NEWLINE#
d [ 'text' ] #NEWLINE#
base64 . b64decode ( coded_string ) #NEWLINE#
a [ ( a != 5 ) . all ( 1 ) ] #NEWLINE#
plt . figure ( ) #NEWLINE#
return [ ( i , sublist . index ( item ) ) for i , sublist in enumerate ( list ) ] #NEWLINE#
[ v for k , v in d . items ( ) if k not in ( 2 , 5 ) ] #NEWLINE#
filtered_list = list ( [ x for x in input_list if x % 2 == 0 ] ) #NEWLINE#
print ( '{0}*10^({1})' . format ( * item ) ) #NEWLINE#
fdf . pivot_table ( 'percent' , rows = 'row' , cols = 'col' , aggfunc = 'sum' ) . values #NEWLINE#
do_something ( ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
urllib . request . urlretrieve ( dls , 'test.xls' ) #NEWLINE#
data = np . array ( [ float ( f ) for f in file ( filename ) . read ( ) . split ( ) ] ) #NEWLINE#
{ 'id' : 10150133855458396 , 'name' : 'my-name' } #NEWLINE#
print ( datetime ( 2012 , 3 , 1 , 0 , 0 , 0 , 0 , tzinfo = tz ) ) #NEWLINE#
print ( 'foo' ) #NEWLINE#
raise ValueError ( 'Fields#SPACE#must#SPACE#not#SPACE#be#SPACE#empty.' ) #NEWLINE#
print ( list ( isplit ( 'abcb' , 'b' ) ) ) #NEWLINE#
main ( ) #NEWLINE#
result = [ r for r in x if all ( z not in r for z in y ) ] #NEWLINE#
any ( kidname == row [ ct ] for row in csv . reader ( file ) ) #NEWLINE#
query_wildcard = '%{0}%' . format ( query . replace ( '%' , '\\%' ) ) #NEWLINE#
return HttpResponse ( 'return#SPACE#this#SPACE#string' ) #NEWLINE#
""",""" . join ( map ( str , numbers ) ) #NEWLINE#
p . set_preference ( 'webdriver.log.file' , '/tmp/firefox_console' ) #NEWLINE#
plt . show ( ) #NEWLINE#
stealth_check = { range ( 1 , 6 ) : 'You#SPACE#are#SPACE#about#SPACE#as#SPACE#stealthy#SPACE#as#SPACE#thunderstorm.' } #NEWLINE#
br . form [ 'type' ] = '22' #NEWLINE#
list ( map ( chr , [ 66 , 53 , 0 , 94 ] ) ) #NEWLINE#
newd = dict . fromkeys ( origdict ) #NEWLINE#
print ( count ( 'adnndaend' , 'and' ) ) #NEWLINE#
- - honour - stdin #NEWLINE#
[ [ int ( i ) for i in line . split ( ) ] for line in data ] #NEWLINE#
print ( s . replace ( ',' , '\t' ) ) #NEWLINE#
STATIC_ROOT = os . path . join ( PROJECT_DIR , 'static' ) #NEWLINE#
"""<b>""" . join ( s . split ( '/b' ) ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
sum ( 1 for _ in itertools . takewhile ( str . isspace , a ) ) #NEWLINE#
con . commit ( ) #NEWLINE#
open ( filename , 'w' ) . write ( text . replace ( LASTKNOWN , CURRENT ) ) #NEWLINE#
{ ( 1 ) : [ 1 , 1 ] , ( 2 ) : [ 2 , 2 ] , ( 3 ) : [ 3 ] , ( 4 ) : [ 4 ] , ( 5 ) : [ 6 ] , ( 7 ) : [ 8 ] } #NEWLINE#
test . reshape ( - 1 , 2 ) [ : : 2 ] . reshape ( - 1 , 4 ) #NEWLINE#
df [ 'last_value' ] = g [ 'value' ] . apply ( lambda x : x . ffill ( ) . shift ( 1 ) ) #NEWLINE#
fout . write ( struct . pack ( '>f' , 2.71828182846 ) ) #NEWLINE#
w . show_all ( ) #NEWLINE#
return JsonResponse ( list ( data ) , safe = False ) #NEWLINE#
{ 'outer' : { 'foo' : 'x' , 'bar' : 'y' } } #NEWLINE#
[ x for x in foo if not 2 == x . get ( 'id' ) ] #NEWLINE#
l = [ [ 4 , 5 , 6 , 7 ] , [ 2 , 2 , 6 , 3 ] , [ 4 , 4 , 9 , 4 ] , [ 8 , 1 , 6 , 1 ] ] #NEWLINE#
"""Nín#SPACE#hǎo.#SPACE#Wǒ#SPACE#shì#SPACE#zhōng#SPACE#guó#SPACE#rén""" #NEWLINE#
ax . plot ( [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , Z - 1 ] , 'k-' ) #NEWLINE#
np . savetxt ( 'test.csv' , example [ 1 , ... ] , delimiter = ',' ) #NEWLINE#
[ ( k , v ) ] = list ( d . items ( ) ) #NEWLINE#
driver . refresh ( ) #NEWLINE#
return { } #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
timeit . timeit ( lambda : function ( x ) ) #NEWLINE#
result . stack ( ) #NEWLINE#
Link = Link1 . css ( 'span.title#SPACE#a::attr(href)' ) . extract ( ) [ 0 ] #NEWLINE#
Link = Link1 . css ( 'span[class=title]#SPACE#a::attr(href)' ) . extract ( ) [ 0 ] #NEWLINE#
app . run ( ) #NEWLINE#
nf . write ( '' . join ( str ( random . randint ( 0 , 1000 ) ) for _ in range ( 1000000 ) ) ) #NEWLINE#
df2 [ 1 : ] . to_sql ( 'table_name' , con , if_exists = 'append' ) #NEWLINE#
plt . show ( ) #NEWLINE#
type ( d . copy ( ) ) #NEWLINE#
grouped . boxplot ( ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
df [ 'text' ] #NEWLINE#
return tuple ( sum ( z ) for z in zip ( a , b ) ) #NEWLINE#
ax . add_patch ( circ ) #NEWLINE#
[ [ True , False ] , [ False , True ] ] #NEWLINE#
plt . imshow ( rotate_lena , cmap = plt . cm . gray ) #NEWLINE#
print ( binascii . unhexlify ( line ) . decode ( 'utf-16-be' ) ) #NEWLINE#
aa = dict ( [ ( k , d [ k ] ) for k in f ] ) #NEWLINE#
return sum ( strat ( line ) for line in f ) #NEWLINE#
pd . value_counts ( d [ [ 1 , 3 , 4 , 6 , 7 ] ] . values . ravel ( ) ) #NEWLINE#
[ [ 10 , 6 , 45 , 18 , 49 ] , [ 5 , 6 , 45 , 6 , 14 ] ] #NEWLINE#
print ( pd . concat ( [ d1 , df ] , axis = 1 ) ) #NEWLINE#
msg = email . message_from_string ( msgtxt ) #NEWLINE# print ( msg [ 'Subject' ] ) #NEWLINE#
datetime . datetime . strptime ( 'Februar' , '%B' ) #NEWLINE#
'^watch/(?P<id>\\d+)/' , 'watch' #NEWLINE#
df [ 'col1' ] . update ( pd . Series ( di ) ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
nx . draw ( G , pos ) #NEWLINE#
float_to_hex ( 17.5 ) #NEWLINE#
number = list ( filter ( str . isdigit , filename ) ) #NEWLINE#
linkstodomain = SoupStrainer ( 'a' , href = re . compile ( 'example.com/' ) ) #NEWLINE#
df [ 'month' ] = df [ 'ArrivalDate' ] . dt . month #NEWLINE#
avg = y . mean ( axis = ( 1 , 3 ) ) #NEWLINE#
mass_replace ( sys . argv [ 1 ] , sys . argv [ 2 ] , sys . argv [ 3 ] ) #NEWLINE#
return result [ 'Attributes' ] [ 'some_attr' ] #NEWLINE#
with open ( 'Path/to/file' , 'r' ) as content_file : #NEWLINE# #INDENT# content = content_file . read ( ) #NEWLINE#
df = df [ ( df [ 'date' ] > '2000-6-1' ) & ( df [ 'date' ] <= '2000-6-10' ) ] #NEWLINE#
list ( map ( lambda x : x . strip ( ) , l ) ) #NEWLINE#
[ x [ 0 ] for x in listD [ 1 ] ] #NEWLINE#
return control_char_re . sub ( '' , s ) #NEWLINE#
print ( sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) [ 0 ] ) #NEWLINE#
result = [ a for a in A if a not in subset_of_A ] #NEWLINE#
main ( ) #NEWLINE#
help ( re . compile ( '' ) ) #NEWLINE#
a , b = map ( int , sys . stdin . readline ( ) . split ( ) ) #NEWLINE#
tree . xpath ( "//table[not(descendant::table)]/*[contains(.,#SPACE#'Header1')]" ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#name,#SPACE#category#SPACE#FROM#SPACE#animal' ) #NEWLINE#
[ 'a' , 'bbb' ] #NEWLINE#
content = text . selection_get ( ) #NEWLINE#
"""#SPACE#""" . join ( format ( x , 'b' ) for x in bytearray ( st ) ) #NEWLINE#
with open ( 'text.txt' , 'a' , encoding = 'utf-8' ) as file : #NEWLINE# #INDENT# file . write ( 'Spam#SPACE#and#SPACE#eggs!' ) #NEWLINE#
root . configure ( background = 'gold' ) #NEWLINE#
[ ( x * y ) for x , y in zip ( lis [ 0 ] , cyc ) ] #NEWLINE#
app . run ( ) #NEWLINE#
req . send_header ( 'Content-Disposition' , 'attachment;filename=%s' % filename ) #NEWLINE#
print ( re . sub ( '(?![\\d_])\\w' , 'X' , 'dfÃ¤g' ) ) #NEWLINE#
ext_id = db . Column ( db . Integer , primary_key = True , autoincrement = False ) #NEWLINE#
os . environ [ 'AUTH_DOMAIN' ] = 'testbed' #NEWLINE#
os . environ [ 'USER_IS_ADMIN' ] = '1' #NEWLINE#
SERIALIZATION_MODULES = { 'json' : 'wadofstuff.django.serializers.json' } #NEWLINE#
print ( matcher . match ( '100{"1":{"a":"b",#SPACE#"c":"d"},#SPACE#"3":4}312' ) . group ( 1 ) ) #NEWLINE#
Toy . objects . filter ( owner__parent = parent ) #NEWLINE#
np . in1d ( arr1 , arr2 ) #NEWLINE#
parser . add_argument ( 'foo' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
sock . setsockopt ( socket . SOL_SOCKET , socket . SO_KEEPALIVE , 1 ) #NEWLINE#
os . environ [ 'REQUESTS_CA_BUNDLE' ] = os . path . join ( os . getcwd ( ) , 'cacert.pem' ) #NEWLINE#
json . dump ( feeds , feedsjson ) #NEWLINE#
title_year = [ ( i [ 'title' ] , i [ 'year' ] ) for i in movie_dicts ] #NEWLINE#
data [ : , ( set_col ) ] = val #NEWLINE#
re . findall ( '\\{date:.*\\}(?=\\{)' , str ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
'%s#SPACE#%%s#SPACE#%s' % ( 'foo' , 'bar' ) #NEWLINE#
re . sub ( 'url(#[0-9]+|$)' , 'new_url\\1' , test2 ) #NEWLINE#
Mailbox . quit ( ) #NEWLINE#
att . SaveAsFile ( os . getcwd ( ) + '\\new.xlsx' ) #NEWLINE#
background = pygame . transform . scale ( background , ( 1200 , 800 ) ) #NEWLINE#
records . sort ( key = lambda x : x [ 'date' ] ) #NEWLINE#
socket . setdefaulttimeout ( 10 ) #NEWLINE#
ax1 . set_aspect ( 'equal' ) #NEWLINE#
myForm . fields [ 'description' ] #NEWLINE#
del myDict [ 'key' ] #NEWLINE#
browser . find_elements_by_xpath ( './/span[@class#SPACE#=#SPACE#"gbts"])' ) [ 2 ] . text #NEWLINE#
colors = [ 'red' , 'green' , 'blue' , 'orange' , 'yellow' ] #NEWLINE#
B [ : , ( 1 ) ] [ ( A == B [ : , ( 0 ) ] . astype ( int ) [ : , ( None ) , ( None ) ] ) . argmax ( 0 ) ] #NEWLINE#
plt . contour ( xx , yy , Z , cmap = plt . cm . Paired ) #NEWLINE#
print ( 'BRL#SPACE#x#SPACE#USD#SPACE#rate#SPACE#today:#SPACE#%s' % brlxusd ) #NEWLINE#
return all ( word [ i + 1 ] >= word [ i ] for i in range ( len ( word ) - 1 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
file . split ( '\n' ) #NEWLINE#
list ( sum ( list ( dict . items ( ) ) , ( ) ) ) #NEWLINE#
driver . get ( 'http://cn.bing.com' ) #NEWLINE#
print ( [ s . strip ( '8' ) for s in lst ] ) #NEWLINE#
p = multiprocessing . Process ( target = write , args = ( 'hello' , ) ) #NEWLINE#
print ( pandas . concat ( [ x , y ] , axis = 1 ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
return sorted ( l , key = alphanum_key ) #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
sys . stdout . write ( '\r' ) #NEWLINE#
foo . split ( '\n' , 2 ) #NEWLINE#
MyFormatter ( ) . format ( '{0}#SPACE#{1:t}' , 'Hello' , 4.567 ) #NEWLINE#
a . repeat ( 2 , axis = 0 ) . repeat ( 2 , axis = 1 ) #NEWLINE#
list . focus_set ( ) #NEWLINE#
pdf . trailer [ '/Root' ] [ '/PageLabels' ] [ '/Nums' ] #NEWLINE#
df . values [ : ] = df . sum ( ) #NEWLINE#
return [ m . group ( 0 ) for m in matches ] #NEWLINE#
gb . get_group ( 'foo' ) #NEWLINE#
os . makedirs ( dir_path ) #NEWLINE#
newstr = oldstr [ : 4 ] + oldst [ 5 : ] #NEWLINE#
logging . basicConfig ( level = your_level ) #NEWLINE#
print ( '' . join ( e [ 0 ] for e in x . split ( ) ) ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , saved ) #NEWLINE#
f_minkowski = theano . function ( [ X , Y , P ] , minkowski_distances ) #NEWLINE#
func = lambda s : [ ( t * 2 + s * 2 ) <STR0> t in range ( 1 , 100 ) ] #NEWLINE#
ax . set_ylabel ( 'Y' ) #NEWLINE#
res . to_csv ( 'foo.csv' ) #NEWLINE#
c = b . groupby ( 'node' ) [ 'lfreq' ] . unique ( ) . reset_index ( name = 'lfreq' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
newData = np . array ( [ d [ : 4 ] for d in data ] ) #NEWLINE#
A . a . __get__ ( a , A ) #NEWLINE#
vf ( numpy . outer ( phases , numpy . arange ( 1 , 4 ) ) ) #NEWLINE#
ax . scatter ( X , [ 1 ] * len ( X ) , c = values , marker = 's' , s = 100 ) #NEWLINE#
print ( date . isoformat ( ) ) #NEWLINE#
print ( a , 'plus' , b , 'equals' , a + b ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . a . value_counts ( ) #NEWLINE#
fib = lambda n : reduce ( lambda x , n : [ x [ 1 ] , x [ 0 ] + x [ 1 ] ] , list ( range ( n ) ) , [ 0 , 1 ] #NEWLINE# ) [ 0 ] #NEWLINE#
mydict = default . copy ( ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#Label' ) #NEWLINE#
Y [ : , ( 1 ) ] #NEWLINE#
df = df . loc [ : , ( ~ df . columns . duplicated ( ) ) ] #NEWLINE#
timestamp = int ( time . mktime ( time . strptime ( date , '%d.%m.%Y#SPACE#%H:%M:%S' ) ) ) #NEWLINE#
return re . search ( 'id(\\d+)' , toParse ) . groups ( ) [ 0 ] #NEWLINE#
listView . setWindowTitle ( 'listview' ) #NEWLINE#
main_sizer . Add ( self . centred_text , 0 , wx . ALIGN_CENTRE | wx . ALL , 3 ) #NEWLINE#
d [ n1 ] = 'Node#SPACE#1' #NEWLINE#
re . findall ( '[a-zA-Z]+(?![a-zA-Z(])' , 'movav(x/2,#SPACE#2)*movsum(y,#SPACE#3)*z' ) #NEWLINE#
np . where ( idx ) #NEWLINE#
plt . show ( ) #NEWLINE#
matplotlib . use ( 'TKAgg' ) #NEWLINE#
data [ 'result' ] . replace ( regex = True , inplace = True , to_replace = '\\D' , value = '' ) #NEWLINE#
array ( [ 0 , 0 , 0 , 0 ] ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
raise Exception ( 'My#SPACE#error!' ) #NEWLINE#
test ( x , * [ 'one' , 'two' ] ) #NEWLINE#
np . iinfo ( np . int32 ) #NEWLINE#
parser . add_argument ( '-a' , '--arg' , nargs = '+' , type = int ) #NEWLINE#
session . commit ( ) #NEWLINE#
[ [ w for w in L if len ( w ) == num ] for num in set ( len ( i ) for i in L ) ] #NEWLINE#
file2 . write ( ',' . join ( buffer ) ) #NEWLINE#
df . loc [ ( 'A' ) , : ] = df_ . values #NEWLINE#
return render_template ( 'output.html' ) #NEWLINE#
links = [ rel . get_accessor_name ( ) for rel in a . _meta . get_all_related_objects ( ) ] #NEWLINE#
unicodedata . normalize ( 'NFKD' , title ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
hex ( 291 ) #NEWLINE#

setattr ( c , key , value ) #NEWLINE#
result_list = [ elements [ i ] for i in indices ] #NEWLINE#
app = wx . App ( redirect = True , filename = 'mylogfile.txt' ) #NEWLINE#
sys . path . append ( 'C:/python/files/folder1' ) #NEWLINE#
print ( '01000111000011' . replace ( '1' , '%s' ) % tuple ( 'ORANGE' ) ) #NEWLINE#
dictget = lambda d , * k : [ d [ i ] for i in k ] #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , bbox_to_anchor = ( 0 , 1.3 ) ) #NEWLINE#
print ( dom . find ( 'Body' ) ) #NEWLINE#
print ( 'Created#SPACE#new#SPACE#file.' ) #NEWLINE#
assert f ( x , y ) != z , 'Expected:#SPACE#f(%r,#SPACE#%r)#SPACE#==#SPACE#%r' % ( x , y , z ) #NEWLINE#
test_file . write ( ',' . join ( [ str ( j ) for j in write_row ] ) ) #NEWLINE#
print ( open ( 'yourfile.ext' ) . read ( ) ) #NEWLINE#
np . modf ( [ 1.565888 , 2.073744 , 2.962492 , 4.52838 , 5.417127 , 7.025337 ] ) [ 0 ] #NEWLINE#
os . kill ( pid , signal . SIGTERM ) #NEWLINE#
plt . show ( ) #NEWLINE#
A [ np . arange ( A . shape [ 0 ] ) , ( A != 0 ) . cumsum ( 1 ) . argmax ( 1 ) ] = 0 #NEWLINE#
my_dict = { '+' : add , '-' : sub , '*' : mult , '/' : div } #NEWLINE#
open ( 'test.txt' , 'U' ) . read ( ) #NEWLINE#
{ 'my_key' : 'my_value' } #NEWLINE#
line [ 0 : 3 ] + [ line [ 3 ] [ : 2 ] , line [ 3 ] [ 2 : ] ] #NEWLINE#
json . dumps ( dct , separators = ( ',' , ':' ) ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
a [ a != np . array ( None ) ] #NEWLINE#
print ( ( item [ 0 ] , 'has#SPACE#a#SPACE#price#SPACE#of' , item [ 1 ] ) ) #NEWLINE#
a = [ ( 'a' , ) , ( 'b' , ) , ( 'c' , 'd' ) ] #NEWLINE#
pprint . pprint ( dictionary [ 'age' ] ) #NEWLINE#
SomeModel . objects . filter ( id__in = ids_list ) . delete ( ) #NEWLINE#
pandas . DataFrame . sort_values ( by = 'Scores' ) #NEWLINE#
convolve ( [ 1 , 5 , 2 ] , [ 6 , 1 , 4 , 3 ] ) #NEWLINE#
yield Request ( url , callback = self . parse ) #NEWLINE#
app . register_blueprint ( account_api , url_prefix = '/accounts' ) #NEWLINE#
print ( i , '#SPACE##SPACE#' , type ( getattr ( X , i ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
td_series . astype ( 'timedelta64[D]' ) . astype ( int ) #NEWLINE#
re . sub ( '([A-Z])\\1' , lambda pat : pat . group ( 1 ) . lower ( ) , s ) #NEWLINE#
con . commit ( ) #NEWLINE#
{ { a . name } } #NEWLINE#
sample [ 'somedate' ] = str ( datetime . now ( ) ) #NEWLINE#
parser . add_argument ( '--file2' ) #NEWLINE#
cygstart / cygdrive / c / Python27 / python . exe #NEWLINE#
y = [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 ] #NEWLINE#
r . findall ( 'fffagggaahhh' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
df2 = df . set_index ( 'timestamp' ) #NEWLINE#
some_value = os . environ [ 'DEBUSSY' ] #NEWLINE#
print ( response . content ) #NEWLINE#
L4 = [ item for item in L1 if item not in unwanted ] #NEWLINE#
os . remove ( 'myfile.csv.bak' ) #NEWLINE#
self . fields . pop ( 'nickname' ) #NEWLINE#
p1 = Process ( target = f , args = ( d , ) ) #NEWLINE#
pd . DataFrame ( list ( zip ( * someTuple ) ) , columns = [ 'Bird' , 'BirdCount' ] ) #NEWLINE#
np . dot ( a , b ) #NEWLINE#
gtk . main ( ) #NEWLINE#
scipy . misc . imsave ( 'outfile.bmp' , data ) #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( x > i for i in x ) #NEWLINE#
draw = ImageDraw . Draw ( im ) #NEWLINE#
map ( itemgetter ( 0 ) , G ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
print ( getattr ( test , a_string ) ) #NEWLINE#
plt . figure ( figsize = ( 4 , 4 ) ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#df1#SPACE#LEFT#SPACE#OUTER#SPACE#JOIN#SPACE#df2#SPACE#ON#SPACE#df1.k#SPACE#=#SPACE#df2.k' ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#df1#SPACE#JOIN#SPACE#df2' ) #NEWLINE#
df . loc [ df [ 'precedingWord' ] == 'de' , 'gender' ] = 'neuter' #NEWLINE#
print ( 'One#SPACE#line#SPACE#in,#SPACE#one#SPACE#line#SPACE#out!' ) #NEWLINE#
this_row . append ( s . cell_value ( row , col ) . encode ( 'utf8' ) ) #NEWLINE#
resp_dict [ 'value' ] [ 'queryInfo' ] [ 'creationTime' ] #NEWLINE#
legend ( ( 'label1' , 'label2' , 'label3' ) , loc = 'upper#SPACE#left' ) #NEWLINE#
"""somestring""" . decode ( 'UTF-8' ) #NEWLINE#
fileObj = open ( 'scrpt.py' , 'r' ) #NEWLINE#
{ i : words . count ( i ) for i in set ( words ) } #NEWLINE#
sys . setrecursionlimit ( 10000 ) #NEWLINE#
res = df - df . shift ( ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
return sum ( ( doSomething ( x ) for x in originalList ) , [ ] ) #NEWLINE#
subprocess . call ( 'net#SPACE#use#SPACE#Y:#SPACE#\\\\live.sysinternals.com\\tools' ) #NEWLINE#
return re . findall ( '\\d{2}:\\d{2}(?:am|pm)' , text , re . I ) #NEWLINE#
df . groupby ( [ 'A' ] ) . max ( ) #NEWLINE#
return [ ( [ 0 ] * cols ) for x in range ( rows ) ] #NEWLINE#
[ pair for pair in itertools . combinations ( li , 2 ) if sum ( pair ) == 10 ] #NEWLINE#
print ( max ( max ( x ) if isinstance ( x , list ) else x for x in my_list ) ) #NEWLINE#
sys . modules [ 'original' ] = myreplacement #NEWLINE#
root . update_idletasks ( ) #NEWLINE#
any ( s . startswith ( 'three' ) for s in test_list ) #NEWLINE#
numpy . array ( [ 1.2 , 'abc' ] , dtype = float ) #NEWLINE#
( s . iloc [ : : 2 ] . values + s . iloc [ 1 : : 2 ] ) / 2 #NEWLINE#
shuffle ( x ) #NEWLINE#
{ 'a' : 1 , 'b' : 2 } == { 'b' : 2 , 'a' : 1 } #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
p . dumps ( re . compile ( 'a*b+c*x+y*' ) ) #NEWLINE#
Reporter . objects . all ( ) . delete ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
[ - 0.666 , - 0.666 , - 0.333 ] #NEWLINE#
fig . savefig ( 'test.png' ) #NEWLINE#
list ( map ( str . strip , x . split ( 'or' ) ) ) #NEWLINE#
plt . axvline ( x = xc , color = 'k' , linestyle = '--' ) #NEWLINE#
hasmethod ( obj , 'some_method' ) #NEWLINE#
driver . get ( 'http://www.kahoot.it' ) #NEWLINE#
f . write ( reversed . encode ( 'utf-8' ) ) #NEWLINE#
return base64 . b64encode ( num . decode ( 'hex' ) ) #NEWLINE#
p . stdin . write ( '\x1bOA' ) #NEWLINE#
p . stdin . write ( 'q' ) #NEWLINE#
d = { k : [ ] for k in keys } #NEWLINE#
stack [ - 1 ] #NEWLINE#
some_list . append ( dic ) #NEWLINE#
blogpost . tags [ : ] = [ ] #NEWLINE#
plt . show ( ) #NEWLINE#
os . remove ( path ) #NEWLINE#
result [ np . lexsort ( ( result [ : , ( 0 ) ] , result [ : , ( 0 ) ] ) ) ] #NEWLINE#
[ i for i in range ( 10 ) if i not in digits ] #NEWLINE#
my_list [ 0 : 1 ] = [ 'cake' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( [ m . start ( ) for m in re . finditer ( '\\btest#SPACE#and\\b' , a ) ] ) #NEWLINE#
print ( '{0[0]:{1[0]}s}#SPACE#{0[1]:{1[1]}d}#SPACE#{0[2]:{1[2]}f}' . format ( res , args ) ) #NEWLINE#
loop . run_forever ( ) #NEWLINE#
ctypes . windll . kernel32 . SetConsoleTitleA ( 'My#SPACE#New#SPACE#Title' ) #NEWLINE#
print ( u16 . decode ( 'utf16' ) ) #NEWLINE#
print ( json . dumps ( data ) ) #NEWLINE#
dateutil . parser . parse ( date_string ) #NEWLINE#
plt . show ( ) #NEWLINE#
messages = re . split ( '(?:(?:ÿ){8})+' , payload ) #NEWLINE#
pd . DataFrame ( OrderedDict ( { 'foo' : pd . Series ( foo ) , 'bar' : pd . Series ( bar ) } ) ) #NEWLINE#
filename = 'C:\\Documents#SPACE#and#SPACE#Settings\\file%d.txt' % i #NEWLINE#
self . txt . pack ( expand = True , fill = 'both' ) #NEWLINE#
return new_string , np . tensordot ( tensor1 , tensor2 , axes ) #NEWLINE#
last = df . index [ - 1 ] #NEWLINE#
[ item for item in re . split ( '(\\*)' , '*abc*bbc' ) if item ] #NEWLINE#
writer . writerow ( [ latlon ] ) #NEWLINE#
a . reshape ( ( len ( a ) / 3 , 3 ) ) . max ( axis = 1 ) #NEWLINE#
codes = Enumerate ( 'FOO#SPACE#BAR#SPACE#BAZ' ) #NEWLINE#
parser = parse_args ( sys . argv [ 1 : ] ) #NEWLINE#
print ( e . get ( 'title' ) . text ) #NEWLINE#
output = proc . communicate ( ) [ 0 ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
result = '' . join ( tmp [ : : - 1 ] ) #NEWLINE#
set ( [ 'a' , 'b' ] ) #NEWLINE#
return itertools . chain ( * lists ) #NEWLINE#
print ( 'FOO="A_Value"' ) #NEWLINE#
text2_re = re . sub ( '(\\d+)/(\\d+)/(\\d+)' , '\\3-\\1-\\2' , text2 ) #NEWLINE#
df . col2 . replace ( - 1 , np . nan ) . interpolate ( ) . astype ( int ) . astype ( 'category' ) #NEWLINE#
print ( "can't#SPACE#convert" ) #NEWLINE#
df [ 'date' ] [ df . index [ 0 ] ] #NEWLINE#
df . insert ( 0 , 'mean' , df . mean ( 1 ) ) #NEWLINE#
super ( ) . __init__ ( name , year ) #NEWLINE#
ax . contourf ( x , y , z , zdir = 'y' , offset = y_max , cmap = cm . coolwarm ) #NEWLINE#
fout . writelines ( data [ 1 : ] ) #NEWLINE#
noise = np . random . normal ( 0 , 1 , 100 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
ax . xaxis . set_major_locator ( mdates . YearLocator ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return '' . join ( sorted ( diff . elements ( ) ) ) #NEWLINE#
a , b = 2 , 3 #NEWLINE#
contained = [ x for x in d if x in paid [ j ] ] #NEWLINE#
self . send ( data ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
os . startFile ( 'path_to_pdf.pdf' ) #NEWLINE#
array ( [ nan , nan , nan , 0.0 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 ] ) #NEWLINE#
zeroMatrix = [ ( [ 0 ] * Np ) for i in range ( Np ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
[ i for i in zip ( narrative , subject , activity , filer ) ] #NEWLINE#
writer . writerow ( [ 'name' , 'address' , 'phone' , 'etc' ] ) #NEWLINE#
a_parser . add_argument ( 'something' , choices = [ 'a1' , 'a2' ] ) #NEWLINE#
df . drop ( [ col for col in [ 'column_name1' , 'column_name2' ] ] , axis = 1 ) #NEWLINE#
os . system ( 'notepad.exe#SPACE#' + fileName ) #NEWLINE#
subprocess . call ( [ 'grep' , 'jdoe' , '/etc/passwd' ] ) #NEWLINE#
df . groupby ( 'A' ) . apply ( zscore ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) , 'ro-' ) #NEWLINE#
self . progressbar . pack ( padx = 10 , pady = 10 ) #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( len ( s ) + 1 ) ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
OrderedDict ( itertools . islice ( iter ( d . items ( ) ) , 500 ) ) #NEWLINE#
strip_accents ( 'A#SPACE#À#SPACE#Δ#SPACE#Ύ' ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#OR#SPACE#IGNORE#SPACE#INTO#SPACE#foo#SPACE#(bar,baz)#SPACE#VALUES#SPACE#(?,#SPACE#?)' , ( 1 , 3 ) ) #NEWLINE#
nx . draw_networkx ( G , pos , node_size = 200 , node_color = 'blue' ) #NEWLINE#
{ l [ 'n' ] for l in lst } #NEWLINE#
sheet . merge ( top_row , bottom_row , left_column , right_column ) #NEWLINE#
pandas . to_datetime ( '2012-05-01T01:00:00.000000+0100' ) #NEWLINE#
seq_iter = x if isinstance ( x , dict ) else range ( len ( x ) ) #NEWLINE#
resultlist . append ( M [ : ] ) #NEWLINE#
[ t . parent for t in x . findAll ( text = <STR0> ) ] #NEWLINE#
print ( 'True' ) #NEWLINE#
binascii . b2a_hex ( '\x02P\x1cAÑ\x00\x00\x02Ë\x11\x00' ) #NEWLINE#
outfile . write ( line ) #NEWLINE#
g . es [ 'label' ] = [ 'A' , 'B' , 'C' ] #NEWLINE#
print ( _ ( 'This#SPACE#is#SPACE#a#SPACE#translatable#SPACE#string.' ) ) #NEWLINE#
data [ idx == 0 ] . shape #NEWLINE#
df1 . date = pd . to_datetime ( df1 . date ) #NEWLINE#
fig . canvas . set_window_title ( 'Test' ) #NEWLINE#
figure ( 1 , figsize = ( 6 , 6 ) ) #NEWLINE#
self . timer . cancel ( ) #NEWLINE#
writer . writerow ( [ val ] ) #NEWLINE#
'ï»¿' + 'Text#SPACE#with#SPACE#a#SPACE#UTF-8#SPACE#BOM' #NEWLINE#
df = pd . DataFrame ( { 'a' : a , 'b' : b } ) #NEWLINE#
print ( matrix . data ) #NEWLINE#
print ( '#SPACE#' . join ( '("%s"#SPACE#%d)' % c for c in counts if c [ 0 ] not in '#SPACE#\t\n' ) ) #NEWLINE#
[ ( 'D' , 'option5' ) , ( 'D' , 'option1' ) , ( 'D' , 'option2' ) ] #NEWLINE#
os . remove ( filename ) #NEWLINE#
ip = urllib . request . urlopen ( 'http://automation.whatismyip.com/n09230945.asp' #NEWLINE# ) . read ( ) #NEWLINE#
print ( HorQS ( [ '0H' , '8H' , '7K' , '6H' , 'AH' , 'HS' ] ) ) #NEWLINE#
a [ np . argpartition ( - a , np . arange ( ( ~ np . isnan ( a ) ) . sum ( ) ) ) ] #NEWLINE#
ws0 . write ( row , col , value , style ) #NEWLINE#
"""""" . join ( '%*s' % i for i in zip ( widths , items ) ) #NEWLINE#
next ( v for k , v in list ( my_dict . items ( ) ) if 'c' in k ) #NEWLINE#
super ( MyDateField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( line . strip ( ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
x , y = map ( list , zip ( * [ ( e , - e ) for e in range ( 10 ) ] ) ) #NEWLINE#
writer . writerow ( [ word ] ) #NEWLINE#
ax . legend ( handles , labels ) #NEWLINE#
return render_to_response ( 'template.html' , { 'user' : user } ) #NEWLINE#
return session . query ( SomeClass ) . all ( ) #NEWLINE#
root . find ( './/tag3' ) #NEWLINE#
[ p [ 0 ] for p in datapoints [ 0 : 5 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
SOCIAL_AUTH_EDXORG_EXTRA_DATA = [ 'updated_at' ] #NEWLINE#
re . sub ( pattern , '' , txt ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
[ 'dog' , 'duck' , 'goose' , 'duck' , 'goose' , 'duck' , 'goose' , 'duck' ] #NEWLINE#
raise ValueError ( 'lo#SPACE#must#SPACE#be#SPACE#non-negative' ) #NEWLINE#
request . environ [ 'REMOTE_ADDR' ] #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
np . sum ( M , axis = ( 0 , 1 ) ) #NEWLINE#
bool ( np . where ( np . array ( [ 0 , 0 ] ) ) ) #NEWLINE#
print ( '2#SPACE#+#SPACE#{}#SPACE#=#SPACE#{}' . format ( integer , rslt ) ) #NEWLINE#
meta = { 'indexes' : [ { 'fields' : ( 'course_name' , 'group_name' ) , 'unique' : True } ] } #NEWLINE#
url = browser . execute_script ( 'return#SPACE#window.location;' ) #NEWLINE#
df2 = df2 [ [ 'A' , 'B' , 'C' ] ] #NEWLINE#
print ( re . search ( '[a-zA-Z]+' , string ) ) #NEWLINE#
print ( '%02i,%02i,%05.2f' % ( 3 , 4 , 5.66 ) ) #NEWLINE#
sudo ( 'chpasswd#SPACE#<#SPACE#my_password_file' ) #NEWLINE#
opener . addheaders = [ ( 'User-agent' , 'Mozilla/5.0' ) ] #NEWLINE#
parser . add_argument ( '-m' , action = 'store' ) #NEWLINE#
print ( Temperature . value ) #NEWLINE#
ROOT_PATH = os . path . split ( os . path . abspath ( __file__ ) ) [ 0 ] #NEWLINE#
result = [ x for x in orig if x ] #NEWLINE#
hours , rest = ( lambda t : ( int ( t [ 0 ] ) , t [ 1 ] ) ) ( s . split ( ':' ) ) #NEWLINE#
cursor . execute ( 'desc#SPACE#table_name' ) #NEWLINE#
return encoded . decode ( 'hex' ) #NEWLINE#
istr . close ( ) #NEWLINE#
scipy . stats . chi2_contingency ( data ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr2d [ np . arange ( 10 ) [ : , ( None ) ] , np . random . rand ( 10 , 10 ) . argsort ( 1 ) [ : , : 3 ] ] = 1 #NEWLINE#
mylist [ : ] = ( i for i in mylist if i != '' ) #NEWLINE#
[ True , True , False ] . count ( True ) #NEWLINE#
df . loc [ df . Col4 . isin ( target_array ) ] . index #NEWLINE#
element = wait . until ( EC . element_to_be_clickable ( ( By . XPATH , '//div' ) ) ) #NEWLINE#
print ( '789' ) #NEWLINE#
list ( chain . from_iterable ( zip_longest ( d , reversed ( e ) ) ) ) #NEWLINE#
singletest . addTest ( MyTestSuite ( 'test_false' ) ) #NEWLINE#
del mydict [ key ] #NEWLINE#
all ( a != b for a , b in itertools . combinations ( [ 'a' , 'b' , 'c' , 'd' ] , 2 ) ) #NEWLINE#
print ( cls . __base__ ) #NEWLINE#
solve ( [ x + 5 * y - 2 == 0 , - 3 * x + 6 * y - 15 == 0 ] , [ x , y ] ) #NEWLINE#
np . column_stack ( ( np . repeat ( coords [ 0 ] , 3 ) , np . tile ( coords [ 1 ] , 3 ) ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ ( '10' , 'people' ) , ( '5' , 'cars' ) ] #NEWLINE#
return os . path . abspath ( inspect . getsourcefile ( local_function ) ) #NEWLINE#
domain = a . partition ( '@' ) [ 2 ] #NEWLINE#
list_1 , list_2 = list ( list_1 ) , list ( list_2 ) #NEWLINE#
my_dictionary = dict ( line . split ( ) for line in f ) #NEWLINE#
conn . execute ( 'insert#SPACE#into#SPACE#example#SPACE#values#SPACE#(?,#SPACE#?);' , ( 0 , 200 ) ) #NEWLINE#
a . max ( axis = 0 ) . max ( ) #NEWLINE#
( 1 , ) + ( 2 , 3 ) * 4 #NEWLINE#
objs . append ( MyClass ( ) ) #NEWLINE#
ans = [ i for i in xy if i [ 1 ] > 0 ] #NEWLINE#
df [ 'NEW_DATE' ] = df [ 'ACC_DATE' ] . apply ( lambda x : x . replace ( year = x . year - 1 ) ) #NEWLINE#
[ len ( max ( i , key = len ) ) for i in tableData ] #NEWLINE#
msg . attach ( html_text ) #NEWLINE#
logging . error ( 'more#SPACE#of#SPACE#the#SPACE#same' ) #NEWLINE#
t . tz_localize ( None ) #NEWLINE#
smtp . sendmail ( send_from , send_to , msg . as_string ( ) ) #NEWLINE#
[ 0.013306 , 0.059634 , 0.09832 , 0.059634 , 0.013306 ] , #NEWLINE#
[ 0.021938 , 0.09832 , 0.162103 , 0.09832 , 0.021938 ] , #NEWLINE#
[ int ( s [ x [ 1 ] : x [ 2 ] ] ) for x in parser . parse ( s ) [ 1 ] ] #NEWLINE#
setattr ( self , attr , val ) #NEWLINE#
response = re . search ( '^(http://)?(www\\.)?(vimeo\\.com/)?(\\d+)' , embed_url ) #NEWLINE#
np . arange ( 1000000 ) . dtype #NEWLINE#
f . seek ( 0 ) #NEWLINE#
self . fields [ 'is_staff' ] = None #NEWLINE#
label . destroy ( ) #NEWLINE#
def is_member ( user ) : #NEWLINE# #INDENT# return user . groups . filter ( name = 'Member' ) . exists ( ) #NEWLINE#
out = [ ( 1 if num & 1 << 7 - n else 0 ) for n in range ( 8 ) ] #NEWLINE#
raise RuntimeError ( "Doesn't#SPACE#make#SPACE#sense." ) #NEWLINE#
np . pi #NEWLINE#
n . append ( float ( row [ 8 ] ) ) #NEWLINE#
my_list . remove ( item ) #NEWLINE#
re . sub ( '([^\\s\\w]|_)+' , '' , origList ) #NEWLINE#
file . close ( ) #NEWLINE#
a [ : 5 , : 5 ] #NEWLINE#
re . findall ( '\\b([a-zA-Z]\\S{8}\\d)\\b' , txt ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
"""""" . join ( str_list ) #NEWLINE#
[ 'C' , 'B' , 'D' , 'A' , 'B' , 'C' , 'D' , 'A' ] #NEWLINE#
[ 'B' , 'D' , 'A' , 'C' , 'A' , 'B' , 'D' , 'C' ] #NEWLINE#
[ 'D' , 'C' , 'A' , 'B' , 'C' , 'D' , 'A' , 'B' ] #NEWLINE#
[ 'C' , 'D' , 'A' , 'B' , 'D' , 'C' , 'A' , 'B' ] #NEWLINE#
[ 'C' , 'D' , 'A' , 'B' , 'C' , 'D' , 'A' , 'B' ] #NEWLINE#
[ 'C' , 'B' , 'A' , 'D' , 'A' , 'B' , 'D' , 'C' ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
tag = soup . find ( lambda tag : tag . name == 'script' and 'src' in tag . attrs ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
df [ ( df <= 2 ) . any ( axis = 1 ) ] #NEWLINE#
Counter ( words ) . most_common ( 10 ) #NEWLINE#
"""""" . join ( sorted ( set ( foo ) , key = foo . index ) ) #NEWLINE#
list ( wrapper ( raisinggenfunc ( ) ) ) #NEWLINE#
parser . add_argument ( '-ipv4' , '--ipv4' , action = 'store_true' , dest = 'ipv4' ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
plt . show ( ) #NEWLINE#
x = np . array ( [ - 3 , - 2 , - 1 , 0 , 1 , 2 , 3 ] ) . astype ( np . float ) #NEWLINE#
plt . plot ( [ 4 , 5 , 6 ] , 'g' ) #NEWLINE#
nine_hours_from_now = datetime . now ( ) + timedelta ( hours = 9 ) #NEWLINE#
ax1 . set_xlim ( 0 , 1 ) #NEWLINE#
"""{:g}""" . format ( float ( your_string_goes_here ) ) #NEWLINE#
my_array = np . array ( map ( lambda x : numpy . nan if x == None else x , my_list ) ) #NEWLINE#
imshow ( A , interpolation = 'nearest' ) #NEWLINE#
f = open ( filename , 'rb' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
mylist . sort ( key = lambda x : x . lower ( ) ) #NEWLINE# mylist . sort ( key = str . lower ) #NEWLINE#
do_something ( ) #NEWLINE#
"""#SPACE#""" . join ( [ item . replace ( '#SPACE#' , '' ) for item in shlex . split ( text ) ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
git . Git ( ) . clone ( 'git://gitorious.org/git-python/mainline.git' ) #NEWLINE#
df [ [ col for col in list ( 'bcd' ) if col in df . columns ] ] #NEWLINE#
subprocess . call ( [ 'touch' , 'mainpgm.py' ] ) #NEWLINE#
urllib . request . build_opener ( HTTPCookieProcessor ) . open ( url ) #NEWLINE#
df2 . reset_index ( drop = True , inplace = True ) #NEWLINE#
sys . modules [ 'tools' ] = tools #NEWLINE#
plt . show ( ) #NEWLINE#
aggregated . plot ( x = 'training_examples' , y = 'accuracy' , label = 'model' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
row . save ( ) #NEWLINE#
list_of_tuples #NEWLINE#
logging . basicConfig ( level = logging . INFO ) #NEWLINE#
matplotlib . use ( 'Qt4Agg' ) #NEWLINE#
print ( self . request . body ) #NEWLINE#
print ( 'U+%04x' % ord ( c ) ) #NEWLINE#
plt . colorbar ( im , cax = cax ) #NEWLINE#
shutil . copy ( str ( my_file ) , str ( to_file ) ) #NEWLINE#
len ( repr ( float ( x ) / 3 ) ) #NEWLINE#
plt . rcParams [ 'lines.linewidth' ] = 2 #NEWLINE#
plt . show ( ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
print ( d [ key ] ) #NEWLINE#
return '' . join ( c if c . isalnum ( ) else '#SPACE#' for c in text ) . split ( ) #NEWLINE#
datetime . datetime ( 2013 , 9 , 20 , 14 , 8 , 4 , 89761 ) #NEWLINE#
logging . getLogger ( 'py.warnings' ) . addHandler ( console_handler ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
subprocess . call ( [ 'test.exe' , files [ i ] ] ) #NEWLINE#
buffer . append ( np . ndarray ( ( len ( my_buf ) , ) , buffer = my_buf , dtype = datatype ) ) #NEWLINE#
print ( config . get ( 'job2' , 'logfile' ) ) #NEWLINE#
func1 ( 1 , 2 ) #NEWLINE#
yesterday . strftime ( '%m%d%y' ) #NEWLINE#
path = 'D:\\work\\Kindle\\srcs\\test1.html' #NEWLINE#
datetime . datetime . now ( ) - datetime . timedelta ( days = 3 * 365 ) #NEWLINE#
[ ( i ** 2 ) for i in l ] #NEWLINE#
"""VE9LOjxNWV9UT0tFTj4K""" #NEWLINE#
sorted ( [ 0 , 0 , 0 , 1 , 2 , 3 , 4 ] , key = lambda x : x if x != 0 else float ( 'inf' ) ) #NEWLINE#
myDict [ x ] += 1 #NEWLINE#
"""{:%m/%d/%Y}""" . format ( dt ) #NEWLINE#
pylab . show ( ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
s . sendmail ( me , to , msg . as_string ( ) ) #NEWLINE#
users_list = [ int ( x ) for x in users_list ] #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
base_dir = os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
driver . switch_to_frame ( 'tinymcewindow_ifr' ) #NEWLINE#
p = [ ( i + 1 ) for i , ( x , y ) in enumerate ( zip ( a , a [ 1 : ] ) ) if x > y ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( re . findall ( '(nn\\d+)' , st ) [ - 1 ] ) #NEWLINE#
tag . findNextSibling ( 'h2' ) #NEWLINE#
a_view . __dict__ . get ( 'login_is_required' , False ) #NEWLINE#
c = ( a + b ) [ : len ( b ) ] #NEWLINE#
plt . xlabel ( 'Spacing#SPACE#(m)' , fontsize = 15 ) #NEWLINE#
mask = numpy . repeat ( a [ : , ( 0 ) ] == 1 , a . shape [ 1 ] ) #NEWLINE#
[ '1.7.0rc0' , '1.7.0' , '1.11.0' ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
{ 'a' : 1 , 'b' : 1 , 'c' : 2 } #NEWLINE#
inspect . getframeinfo ( inspect . currentframe ( ) ) . function #NEWLINE#
type ( myinst ) . __dict__ [ 'attr' ] . __set__ ( myinst , 1234 ) #NEWLINE#
json . dumps ( new_D ) #NEWLINE#
printx2 ( ) #NEWLINE#
tf . initialize_all_variables ( ) . run ( ) #NEWLINE#
print ( simplejson . loads ( s2 ) [ 'Z' ] [ 0 ] [ 'A' ] ) #NEWLINE#
[ 'Miami' , 'Jacksonville' , 'Macon' , 'Charlotte' , 'Charleston' ] #NEWLINE#
parser . add_argument ( '-m' , '--my-dict' , type = str ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
assert quotify ( '""type"#SPACE#/?"' ) == '""type"#SPACE#/?"' #NEWLINE#
return super ( ClassA , cls ) . __new__ ( cls , theirnumber ) #NEWLINE#
df . T . groupby ( level = 0 ) . agg ( ',' . join ) . T #NEWLINE#
final_dict [ key ] = int ( item . split ( '#SPACE#=#SPACE#' ) [ 1 ] ) #NEWLINE#
num = int ( your_str , 8 ) #NEWLINE#
map ( list , list_of_tuples ) #NEWLINE#
[ [ 1 , 2 , 4 , 8 ] , [ 2 , 3 , 21 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ] #NEWLINE#
delta . total_seconds ( ) #NEWLINE#
min ( double ( x ) for x in [ 1 , 2 , 3 ] ) #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#x2_new#SPACE#select#SPACE#*#SPACE#from#SPACE#x2' ) #NEWLINE#
"""^[work|accus*|planet]""" #NEWLINE#
print ( soup . get_text ( ) ) #NEWLINE#
list ( k for k , _ in itertools . groupby ( k ) ) #NEWLINE#
str ( dec ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , bbox_to_anchor = ( 0 , 1.1 ) ) #NEWLINE#
re . sub ( '(^|\\s)(\\S)' , repl_func , s ) #NEWLINE#
top . mainloop ( ) #NEWLINE#
return MyModel . filter ( id__in = ids ) #NEWLINE#
df . loc [ ~ ( df == 0 ) . all ( axis = 1 ) ] #NEWLINE#
[ 'Dit#SPACE#is#SPACE#de#SPACE#eerste#SPACE#zin.' , 'Dit#SPACE#is#SPACE#de#SPACE#tweede#SPACE#zin.' ] #NEWLINE#
max ( len ( list ( y ) ) for c , y in itertools . groupby ( my_str ) if c == 'b' ) #NEWLINE#
img . putalpha ( alpha ) #NEWLINE#
plt . show ( ) #NEWLINE#
id . send ( '\x03' ) #NEWLINE#
[ x for x , v in enumerate ( str ) if v == '|' ] #NEWLINE#
config . readfp ( open ( 'settings.conf' ) ) #NEWLINE#
A = [ ( [ None ] * x ) for i in range ( y ) ] #NEWLINE#
return self . __class__ ( os . path . expanduser ( str ( self ) ) ) #NEWLINE#
self . redirect ( url ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 1 , 4 , 2 , 3 , - 13 , 5 , 6 , 7 , 3 , 1 , - 5 , 4 , 9 , - 12 ] #NEWLINE#
os . system ( "awk#SPACE#'{print#SPACE#$2}'#SPACE#inputdata1.txt" ) #NEWLINE#
plt . subplots_adjust ( left = 0.2 , top = 0.8 ) #NEWLINE#
list ( map ( chr , list ( range ( 97 , 123 ) ) ) ) #NEWLINE#
return QtCore . Qt . ItemIsEditable | QtCore . Qt . ItemIsEnabled #NEWLINE#
pd . DataFrame ( df . values . reshape ( - 1 , 2 , df . shape [ 1 ] ) . mean ( 1 ) ) #NEWLINE#
doc_df = pd . DataFrame ( list ( iter_docs ( etree ) ) ) #NEWLINE#
zzz = '\\u0101' #NEWLINE#
re . findall ( '[^aeiou]+' , 'concertation' ) #NEWLINE#
sys . path . append ( submod_path ) #NEWLINE#
wM . reset ( ) #NEWLINE#
return A . stack ( 0 ) . dot ( twos ) . unstack ( ) #NEWLINE#
render_template ( 'result.html' , result = figdata_png . decode ( 'utf8' ) ) #NEWLINE#
print ( parser . parse_args ( ) ) #NEWLINE#
now . replace ( hour = 0 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
p . wait ( ) #NEWLINE#
print ( a . decode ( 'unicode-escape' ) ) #NEWLINE#
print ( df . sort_index ( axis = 1 ) ) #NEWLINE#
file . write ( content ) #NEWLINE#
a , b , c , d , e = my_string . split ( ) [ : 5 ] #NEWLINE#
dir ( __builtins__ ) #NEWLINE#
hivmsrej = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
forms . ModelForm . __init__ ( self , * args , ** kwargs ) #NEWLINE#
ax . set_title ( 'Amount#SPACE#Frequency' ) #NEWLINE#
sys . stdout . write ( '%s' % c ) #NEWLINE#
unique_filename = uuid . uuid4 ( ) #NEWLINE#
connection . close ( ) #NEWLINE#
country = tree . findall ( './/country' ) #NEWLINE#
window . show_all ( ) #NEWLINE#
onedollar . match ( '$1#SPACE#off#SPACE#delicious#SPACE#$5#SPACE#ham.' ) #NEWLINE#
word [ 1 : ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
'%d,%d,%s' % ( x + ( y , ) ) #NEWLINE#
print ( 'foo\\nbar\\n\\tbaz' . decode ( 'string_escape' ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ 409 , 422 , 430 , 437 , 451 ] #NEWLINE#
model . objects . filter ( id = i [ 1 ] ) . update ( order = i [ 0 ] ) #NEWLINE#
x . ravel ( ) . tolist ( ) [ 0 ] #NEWLINE#
diff = set ( dictb . keys ( ) ) - set ( dicta . keys ( ) ) #NEWLINE#
print ( list ( product ( * with_nones ) ) ) #NEWLINE#
socket . getfqdn ( ) #NEWLINE#
os . listdir ( '.' ) #NEWLINE#
rows = csv . reader ( f1 , delimiter = dialect . delimiter ) #NEWLINE#
plt . savefig ( 'table.png' ) #NEWLINE#
A [ np . arange ( A . shape [ 0 ] ) , A . shape [ 1 ] - 1 - ( A [ : , : : - 1 ] != 0 ) . argmax ( 1 ) ] = 0 #NEWLINE#
print ( sys . modules [ 'os' ] ) #NEWLINE#
print ( ',' . join ( '(%s,%s)' % tup for tup in myList ) ) #NEWLINE#
[ ( 'b' , 2 ) , ( 'c' , 2 ) , ( 'a' , 3 ) , ( 'b' , 3 ) , ( 'c' , 3 ) ] #NEWLINE#
result , data = mail . search ( None , '(TO#SPACE#"johndoe@gmail.com")' ) #NEWLINE#
libraries = [ 'rt' ] #NEWLINE#
isinstance ( your_var , str ) #NEWLINE#
pd . DataFrame ( zip ( a , b ) , columns = [ a . name , b . name ] ) #NEWLINE#
s . split ( 'mango' , 1 ) [ 1 ] #NEWLINE#
db . commit ( ) #NEWLINE#
p1 = Process ( target = func1 ) #NEWLINE#
return render_template ( 'path.html' , token = session [ 'token' ] ) #NEWLINE#
print ( '{},#SPACE#{}' . format ( item , 1 if item in List else 0 ) ) #NEWLINE#
next ( ( x for x in lst if matchCondition ( x ) ) , None ) #NEWLINE#
empty_dict = { 'apple' : None , 'ball' : None } #NEWLINE#
content = urlopen ( url ) . read ( ) #NEWLINE#
main ( ) #NEWLINE#
imshow ( data ) #NEWLINE#
pylab . plot ( x , y ) #NEWLINE#
"""Location:#SPACE#{0:20}#SPACE#Revision#SPACE#{1}""" . format ( Location , Revision ) #NEWLINE#
[ x for x in collection ] #NEWLINE#
df . update ( df [ lifestyle_var ] . fillna ( 1 ) ) #NEWLINE#
browser . implicitly_wait ( 10 ) #NEWLINE#
my_item = next ( ( item for item in my_list if item [ 'id' ] == my_unique_id ) , None ) #NEWLINE#
tuples = [ tuple ( [ _f for _f in t . strip ( '()' ) . strip ( ) . split ( ',' ) if _f ] ) for #NEWLINE# t in input ] #NEWLINE#
import imp #NEWLINE# imp . reload ( sys . modules [ 'module' ] ) #NEWLINE#
canvas . save ( ) #NEWLINE#
created_weekday . short_description = 'Foo' #NEWLINE#
df [ 'fruit' ] = df [ 'fruit' ] . str . lower ( ) #NEWLINE#
df_new1 , df_new2 = df [ : 10 , : ] , df [ 10 : , : ] if len ( df ) > 10 else df , None #NEWLINE#
parse = ElementTree . parse ( 'foo.xml' ) #NEWLINE#
s = '' . join ( l ) #NEWLINE#
logging . getLogger ( ) . handlers [ 0 ] . setFormatter ( formatter ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
bit_array . setall ( 0 ) #NEWLINE#
type ( us . encode ( 'utf8' ) ) #NEWLINE#
app . run ( debug = False ) #NEWLINE#
rs = client . CreateObject ( 'ADODB.Recordset' , dynamic = True ) #NEWLINE#
2 ** np . arange ( m ) #NEWLINE#
options = { 'py2exe' : { 'bundle_files' : 1 , 'compressed' : True } } , #NEWLINE#
print ( key , value ) #NEWLINE#
foo ( * ( v1 , v2 , v3 ) ) #NEWLINE#
[ ( 2 ** i ) for i , v in enumerate ( bin ( 109 ) [ : 1 : - 1 ] ) if int ( v ) ] [ : : - 1 ] #NEWLINE#
struct . unpack ( 'f' , 'Û\x0fI@' ) #NEWLINE#
wb . save ( 'border_test.xlsx' ) #NEWLINE#
os . makedirs ( os . path . join ( base , 'John#SPACE#Smith' ) ) #NEWLINE#
im . save ( 'text.jpg' ) #NEWLINE#
output = [ { 'name' : k , 'playing' : list ( v ) } for k , v in list ( merged . items ( ) ) ] #NEWLINE#
"""Scheme:#SPACE#{0},#SPACE#User:#SPACE#{1},#SPACE#Password:#SPACE#{2},#SPACE#Host:#SPACE#{3},#SPACE#Port:#SPACE#{4},#SPACE#Params:#SPACE#{5},#SPACE#Headers:#SPACE#{6}""" #NEWLINE#
dic = dict ( [ ( x , y ) for x , y in list ( dic . items ( ) ) if not x . startswith ( 's_' ) ] ) #NEWLINE#
datetime . strftime ( datetime . now ( ) - timedelta ( 1 ) , '%Y-%m-%d' ) #NEWLINE#
root . findall ( 'owl:Class' , namespaces ) #NEWLINE#
p . legend . label_text_font = 'times' #NEWLINE#
scipy . ndimage . convolve #NEWLINE#
'%(foo)s#SPACE#%(foo)s#SPACE#%(bar)s' % { 'foo' : 'foo' , 'bar' : 'bar' } #NEWLINE#
numpy . fromstring ( data , dtype = int , sep = '|' ) #NEWLINE#
df . groupby ( [ 'candidate_id' , 'enddate' ] , as_index = False ) . last ( ) #NEWLINE#
super ( MyModel , self ) . save ( ) #NEWLINE#
fig . savefig ( 'equal.png' ) #NEWLINE#
print ( ( name , ':' , name . lower ( ) ) ) #NEWLINE#
browser . find_elements_by_xpath ( '//input[@id="createFolderCreateBtn"]' ) #NEWLINE#
matched = np . array ( list ( set ( arrays [ 0 ] ) . intersection ( * arrays [ 1 : ] ) ) ) #NEWLINE#
return map ( sum , data ) #NEWLINE#
dates . dt . strftime ( '%Y-%m-%d' ) #NEWLINE#
{ 'count' : '786' , 'year' : '1603' } , { 'count' : '779' , 'year' : '1609' } #NEWLINE#
{ 'count' : '762' , 'year' : '1597' } , { 'count' : '753' , 'year' : '1594' } #NEWLINE#
{ 'count' : '740' , 'year' : '1596' } , { 'count' : '738' , 'year' : '1612' } #NEWLINE#
{ 'count' : '718' , 'year' : '1590' } , { 'count' : '717' , 'year' : '1610' } #NEWLINE#
{ 'count' : '715' , 'year' : '1602' } , { 'count' : '680' , 'year' : '1606' } #NEWLINE#
{ 'count' : '674' , 'year' : '1603' } , { 'count' : '639' , 'year' : '1603' } #NEWLINE#
{ 'count' : '637' , 'year' : '1603' } , { 'count' : '634' , 'year' : '1590' } #NEWLINE#
{ 'count' : '633' , 'year' : '1599' } , { 'count' : '616' , 'year' : '1596' } #NEWLINE#
{ 'count' : '614' , 'year' : '1596' } , { 'count' : '612' , 'year' : '1595' } #NEWLINE#
{ 'count' : '607' , 'year' : '1603' } , { 'count' : '579' , 'year' : '1593' } #NEWLINE#
{ 'count' : '570' , 'year' : '1600' } , { 'count' : '541' , 'year' : '1599' } #NEWLINE#
{ 'count' : '525' , 'year' : '1608' } , { 'count' : '520' , 'year' : '1599' } #NEWLINE#
{ 'count' : '518' , 'year' : '1602' } , { 'count' : '486' , 'year' : '1595' } #NEWLINE#
{ 'count' : '470' , 'year' : '1593' } , { 'count' : '433' , 'year' : '1609' } #NEWLINE#
{ 'count' : '429' , 'year' : '1607' } , { 'count' : '421' , 'year' : '1611' } #NEWLINE#
cursor . execute ( query ) #NEWLINE#
( ( df == 0 ) * 1 ) . astype ( str ) . sum ( axis = 1 ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
df . to_html ( classes = 'mytable' ) #NEWLINE#
"""""" . join ( [ c for c in a if c in '1234567890.' ] ) #NEWLINE#
x [ 0 ] [ 0 ] . append ( value1 ) #NEWLINE#
<STR0> = models . CharField ( max_length = 140 , default = 'DEFAULT#SPACE#VALUE' ) #NEWLINE#
""",#SPACE#""" . join ( '%s=%s' % pair for pair in zip ( a , b ) ) #NEWLINE#
ax . set_xticklabels ( [ '1/1' , '1/2' , '1/3' ] ) #NEWLINE#
browser . get ( 'http://www.google.com' ) #NEWLINE#
A [ : , ( np . arange ( ncols ) % A . shape [ 1 ] ) ] #NEWLINE#
screen . blit ( transsurface , ( 0 , 0 ) ) #NEWLINE#
return min ( [ val for obj in ids for key , val in list ( obj . items ( ) ) if key == #NEWLINE# 'id' ] ) #NEWLINE#
mydict [ 'a' ] [ 'b' ] = 4 #NEWLINE#
parser . add_argument ( '--opt1' , help = 'first#SPACE#optional#SPACE#parameter' ) #NEWLINE#
sum ( 1 for x in frequencies if x > 0 ) #NEWLINE#
con . close ( ) #NEWLINE#
run ( 'command' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
return len ( [ _f for _f in a_list if _f ] ) > 0 #NEWLINE#
x if x is not None else some_value #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
list ( find_format_specifiers ( 'Worker#SPACE#name#SPACE#is#SPACE#%s#SPACE#and#SPACE#id#SPACE#is#SPACE#%d#SPACE#but#SPACE#%%q' ) ) #NEWLINE#
os . unlink ( filename ) #NEWLINE#
f . flush ( ) #NEWLINE#
run ( 'hostname' ) #NEWLINE#
rows . append ( { 'ID' : '1' , 'name' : 'Cat' , 'year' : '1998' , 'priority' : '1' } ) #NEWLINE#
transmission_array . append ( 1 ) #NEWLINE#
sorted ( lst , key = lambda L : ( L . lower ( ) , L ) ) #NEWLINE#
yvalues [ idx ] #NEWLINE#
print ( ( k , v ) ) #NEWLINE#
mtcars [ 'n' ] = mtcars . groupby ( 'cyl' ) [ 'cyl' ] . transform ( 'count' ) #NEWLINE#
array ( [ 1715.37476 , 1715.37476 , 1715.37476 ] ) #NEWLINE#
print ( os . path . dirname ( os . path . realpath ( sys . argv [ 0 ] ) ) ) #NEWLINE#
coru . send ( 'hello' ) #NEWLINE#
magnitudes = np . sqrt ( ( vectors ** 2 ) . sum ( - 1 ) ) [ ... , np . newaxis ] #NEWLINE#
sid = session . key ( ) . id ( ) #NEWLINE#
yticks [ - 1 ] . set_visible ( False ) #NEWLINE#
x = np . delete ( a , zero_row , 0 ) #NEWLINE#
files = { 'file' : f } #NEWLINE#
User . objects . create_user ( ** data ) #NEWLINE#
"""(\\d+\\.?)+$""" #NEWLINE#
b = [ ( n >> i & 1 ) for i in range ( 7 , - 1 , - 1 ) ] #NEWLINE#
input ( 'Press#SPACE#<Enter>#SPACE#for#SPACE#more' ) #NEWLINE#
os . rename ( thisFile , base + '.aln' ) #NEWLINE#
element = ET . parse ( fp ) #NEWLINE#
my_stuff . append ( 'apple' ) #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
{ k : ( d . get ( k , '' ) + d1 . get ( k , '' ) ) for k in keys } #NEWLINE#
{ { ( object . created | date ) : 'U' } } #NEWLINE#
ax . invert_yaxis ( ) #NEWLINE#
locals ( ) #NEWLINE#
np . may_share_memory ( a , a [ [ 3 , 4 , 5 , 6 , 7 ] ] ) #NEWLINE#
self . ReportServiceStatus ( win32service . SERVICE_STOPPED ) #NEWLINE#
OrderedDict ( sorted ( list ( d . items ( ) ) , key = lambda t : len ( t [ 0 ] ) ) ) #NEWLINE#
B = [ i for i in A ] #NEWLINE#
d1 . update ( { 'c' : '3' } ) #NEWLINE#
print ( p [ 'id' ] ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
info = data [ : 75 ] + '..' if len ( data ) > 75 else data #NEWLINE#
cv2 . imwrite ( 'image_processed.jpg' , img ) #NEWLINE#
array ( [ 1.00002202 , 1.00004222 ] ) #NEWLINE#
logging . basicConfig ( stream = sys . stdout , level = logging . INFO ) #NEWLINE#
print ( ( 'But#SPACE#locals()#SPACE#is#SPACE#now' , locals ( ) ) ) #NEWLINE#
Func2 ( 'a' , 'b' , 'c' , 'd' , 'e' ) #NEWLINE#
p = subprocess . Popen ( 'a.bat' , creationflags = subprocess . CREATE_NEW_CONSOLE ) #NEWLINE#
{ x : 1 , y : 2 } #NEWLINE#
super ( MyModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
orig = list ( csv . reader ( open ( 'googlel.csv' , 'rb' ) , delimiter = ';' ) ) #NEWLINE#
f . __globals__ [ '__builtins__' ] [ '__import__' ] ( <STR0> ) #NEWLINE#
data [ i ] [ 0 ] = math . sin ( data [ i ] [ 0 ] ) #NEWLINE#
rel = Membership . objects . filter ( group = your_group ) . select_related ( ) #NEWLINE#
signal . pause ( ) #NEWLINE#
os . path . join ( * choices [ : - 1 ] ) #NEWLINE#
dfrm . ix [ dfrm [ 'A' ] . idxmax ( ) ] #NEWLINE#
a [ : , ( np . newaxis ) , : ] - v #NEWLINE#
[ tuple ( y for y in x if y ) for x in a ] #NEWLINE#
print ( max ( flatten ( l ) ) ) #NEWLINE#
[ 'fill' , 'shape' , 'angle' , 'size' ] #NEWLINE#
tf . initialize_all_variables ( ) . run ( ) #NEWLINE#
functools . reduce ( operator . add , map ( collections . Counter , dict1 ) ) #NEWLINE#
setattr ( A , the_name , classmethod ( func ) ) #NEWLINE#
max ( [ l1 , l2 ] , key = len ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
return HttpResponse ( 'Yoohoo!' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
ax [ 0 ] . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
group . set_index ( 'month' ) . plot ( ) #NEWLINE#
random . shuffle ( shufflethis ) #NEWLINE#
"""abc\\dev\\t""" #NEWLINE#
[ ( 1 , 4 ) , ( 2 , 5 ) , ( 3 , 6 ) ] #NEWLINE#
ax . xaxis . set_major_formatter ( ticks ) #NEWLINE#
print ( 'Height#SPACE#=' , GetSystemMetrics ( 1 ) ) #NEWLINE#
admin . site . register ( Book ) #NEWLINE#
plt . imshow ( data , interpolation = 'none' ) #NEWLINE#
sudo ( 'touch#SPACE#tmp/test' ) #NEWLINE#
f ( [ 3 , 2 , 5 , 4 ] , [ 2 , 4 , 2 ] ) #NEWLINE#
print ( '%s#SPACE#=#SPACE#%s' % ( key , value ) ) #NEWLINE#
somedict = { x : ( 1 ) for x in somelist } #NEWLINE#
"""Boat.txt""" . replace ( '.txt' , '' ) #NEWLINE#
print ( ',#SPACE#' . join ( names ) ) #NEWLINE#
next ( i for i , j in enumerate ( lst ) if j ) #NEWLINE#
return pd . concat ( [ total , xtabs ] , axis = 1 ) #NEWLINE#
print ( request . params [ 'username' ] ) #NEWLINE#
any ( re . search ( '\\d{4}' , s ) for s in lst ) #NEWLINE#
ax . set_ylabel ( 'y_values' ) #NEWLINE#
list ( incremental_window ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) ) #NEWLINE#
list ( set ( tuple ( sorted ( s ) ) for s in all_the_ways ) ) #NEWLINE#
ax . format_coord = lambda x , y : '({0:f},#SPACE#' . format ( y ) + '{0:f})' . format ( x ) #NEWLINE#
[ ( b . index ( x ) + 1 if x in b else None ) for x in a ] #NEWLINE#
super ( MyModel , self ) . save ( ) #NEWLINE#
return np . sum ( arr , axis = 0 ) #NEWLINE#
df [ 'new_column' ] = df [ 'source_column' ] . diff ( ) #NEWLINE#
datetime . strptime ( datestr , '%m/%d/%Y#SPACE#%H:%M' ) #NEWLINE#
print ( re . sub ( '(\\b\\w+)(\\s+\\1\\b)+' , '\\1' , 'hello#SPACE##SPACE##SPACE##SPACE##SPACE#there#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#there' ) ) #NEWLINE#
return hex ( struct . unpack ( '<Q' , struct . pack ( '<d' , f ) ) [ 0 ] ) #NEWLINE#
table . c . column . contains ( 'needle' ) #NEWLINE#
return [ 'Thing1' , 'other_thing' , 'Thing2' ] #NEWLINE#
df . groupby ( df . index / 3 ) . mean ( ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
os . unlink ( 'testdv.py' ) #NEWLINE#
ax1 . set_title ( 'Scattered#SPACE#Points' ) #NEWLINE#
id = models . CharField ( max_length = 10 ) #NEWLINE#
tuple ( small_list ) <STR0> zip ( big_list [ : ] , big_list [ 1 : ] , big_list [ 2 : ] ) #NEWLINE#
__loader__ . fullname #NEWLINE#
values , vectors = scipy . sparse . linalg . eigs ( P , k = 1 , sigma = 1 ) #NEWLINE#
[ 'data1' , '#SPACE#data2#SPACE#' , "data3'''" , '#SPACE#\'data4""\'' , '' , '' , 'data5' , '' ] #NEWLINE#
"""""" . join ( filter ( str . isdigit , '+123-456-7890' ) ) #NEWLINE#
[ x for i , x in enumerate ( myList ) if i not in toRemove ] #NEWLINE#
solve ( eqs , [ x , y ] ) #NEWLINE#
print ( '' . join ( [ ( c if c . isalnum ( ) else '*' ) for c in s ] ) ) #NEWLINE#
print ( '#SPACE#error#SPACE#was#SPACE#' + str ( type ( e ) ) + str ( e . args ) ) #NEWLINE#
np . intersect1d ( A , B ) #NEWLINE#
timeit . timeit ( 'function(x)' , setup = 'from#SPACE#__main__#SPACE#import#SPACE#function,#SPACE#x' ) #NEWLINE#
df . to_csv ( 'names.csv' , index = False ) #NEWLINE#
sys . path . append ( os . path . abspath ( path ) ) #NEWLINE#
admin . site . register ( Item , ItemAdmin ) #NEWLINE#
df . query ( 'b#SPACE#!=#SPACE#b' ) #NEWLINE#
conv . ravel ( ) #NEWLINE#
dftest . groupby ( [ 'Name' , 'Year' ] ) . Amt . apply ( f ) . unstack ( ) #NEWLINE#
ax1 . set_ylabel ( 'Y1#SPACE#data' , color = 'g' ) #NEWLINE#
sorted_list = sorted ( results , key = attrgetter ( 'person.birthdate' ) ) #NEWLINE#
BeautifulSoup ( html , 'lxml' ) #NEWLINE#
ax1 . imshow ( [ [ 0 , 1 ] , [ 2 , 0 ] ] ) #NEWLINE#
[ 6 , 2 , 6 , 3 , 2 , 3 ] #NEWLINE#
e [ np . all ( e - np . array ( [ 1 , 2 ] ) == 0 , axis = 2 ) ] #NEWLINE#
sc . parallelize ( List ( line ) ) . collect ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
time . timetuple ( ) #NEWLINE#
re . match ( '[^[]*\\[([^]]*)\\]' , yourstring ) . groups ( ) [ 0 ] #NEWLINE#
location_out = [ ',#SPACE#' . join ( locations [ n : ] ) for n in range ( len ( locations ) ) ] #NEWLINE#
[ name for name in names if 'aet' in name ] #NEWLINE#
second_input = eval ( input ( 'enter#SPACE#second#SPACE#input:#SPACE#' ) ) #NEWLINE#
sample_dict = { ( 8 ) : [ 9 ] , ( 3 ) : [ 6 , 8 ] , ( 4 ) : [ 2 , 1 ] , ( 5 ) : [ 4 , 3 ] , ( 6 ) : [ 0 , 7 ] } #NEWLINE#
s . multiply ( sparse . csr_matrix ( 1 / np . sqrt ( s . multiply ( s ) . sum ( 1 ) ) ) ) #NEWLINE#
format ( 14 , '08b' ) #NEWLINE#
conn . execute ( 'VACUUM' ) #NEWLINE#
A [ : ] = [ 1 , 2 ] #NEWLINE#
cv2 . imshow ( 'masked' , masked_data ) #NEWLINE#
print ( sum ( i == 1 for i in flatten_list ( x ) ) ) #NEWLINE#
a [ [ 3 , 4 , 5 , 6 , 7 ] ] #NEWLINE#
set ( [ 'a' , 'c' , 'b' ] ) #NEWLINE#
obj . save ( ) #NEWLINE#
print ( str ( socket . gethostbyname ( socket . getfqdn ( ) ) ) ) #NEWLINE#
np . std ( sample ) #NEWLINE#
print ( '%s#SPACE#is#SPACE#%3d.%d' % ( 'pi' , 3 , 14159 ) ) #NEWLINE#
print ( re . search ( '(?P<url>https?://[^\\s]+)' , myString ) . group ( 'url' ) ) #NEWLINE#
os . path . abspath ( os . path . dirname ( __file__ ) ) #NEWLINE#
selenium . get_text ( "//div[@id='1']/descendant::*[not(self::h1)]" ) #NEWLINE#
sys . modules [ 'packageA.moduleA' ] = moduleA #NEWLINE#
f . write ( line . rstrip ( '\r\n' ) + '\n' + content ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . set_index ( 'concatenated' ) #NEWLINE#
print ( '{:.6s}' . format ( '{:0.4f}' . format ( n ) ) ) #NEWLINE#
return np . isnan ( y ) , lambda z : z . nonzero ( ) [ 0 ] #NEWLINE#
driver . get ( 'http://httpbin.org/headers' ) #NEWLINE#
b = np . array ( [ list ( word ) for word in a ] ) #NEWLINE#
help ( parrot . Norwegian ) #NEWLINE#
"""what"ever""" #NEWLINE#
re . split ( '\\s|-' , text ) #NEWLINE#
( lambda a , b : a ( a , b ) ) ( X , b ) #NEWLINE#
plt . grid ( ) #NEWLINE#
A [ : , 1 : 3 ] #NEWLINE#
instance . set_password ( 'my_pw' ) #NEWLINE#
os . write ( 1 , bytes ( 'Your#SPACE#string#SPACE#to#SPACE#Stdout' , 'UTF-8' ) ) #NEWLINE#
writer . writerow ( [ 'bob' , '2#SPACE#main#SPACE#st' , '703' , 'yada' ] ) #NEWLINE#
A [ 0 : 2 , 0 : 2 ] #NEWLINE#
round ( 2606.89579999999 , 2 ) #NEWLINE#
model . fit ( S ) #NEWLINE#
plt . style . use ( 'ggplot' ) #NEWLINE#
df [ : 5 ] [ 'duration' ] / np . timedelta64 ( 1 , 's' ) #NEWLINE#
output . write ( bytearray ( int ( i , 16 ) for i in yoursequence ) ) #NEWLINE#
super ( Child , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( a [ 'y' ] ) #NEWLINE#
"""I#SPACE#like#SPACE#{food}""" . format ( food = 'chocolate' ) #NEWLINE#
thumb = base64 . b64encode ( im . tostring ( ) ) #NEWLINE#
np . take ( a , b , axis = 1 ) #NEWLINE#
[ 'I#SPACE#am' , 'show' ] #NEWLINE#
matches = [ m . span ( ) for m in re . finditer ( pattern , text ) ] #NEWLINE#
data . sort ( key = lambda x : sorted ( tally [ i ] for i in x ) ) #NEWLINE#
( np . cumsum ( np . bincount ( v , minlength = u . size ) ) - 1 ) [ v ] #NEWLINE#
cursor . close ( ) #NEWLINE#
pipeline . fit_transform ( data ) #NEWLINE#
raise Exception ( 'Not#SPACE#a#SPACE#dict#SPACE#in#SPACE#AdditionalKeyValuePair' ) #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
lambda i : isinstance ( i , ( int , float ) ) #NEWLINE#
{ x : ( x + 6 ) for x in range ( 1 , 5 ) } #NEWLINE#
fig . savefig ( 'violins.gif' ) #NEWLINE#
np . concatenate ( [ [ 0.2 ] , linspace ( 1 , 60 , 60 ) , [ 60.8 ] ] ) #NEWLINE#
print ( sys . argv [ 0 ] ) #NEWLINE#
{ 'comment_counts' : { '33519766' : 226 } } #NEWLINE#
return '"' + encodable . replace ( '"' , '""' ) + '"' #NEWLINE#
a . shape = a = a . reshape ( ( a . shape [ 0 ] , - 1 , n ) ) #NEWLINE#
"""#SPACE#-#SPACE#spam#SPACE#ham#SPACE#and#SPACE#eggs#SPACE#-#SPACE#""" . join ( l ) #NEWLINE#
all ( x > limit for x in my_list ) #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . sum ( axis = 1 ) ) #NEWLINE#
a [ 1 : ] -= a [ : - 1 ] #NEWLINE#
ax . plot_trisurf ( triang , z_refi , cmap = cm . jet , lw = 0.0 ) #NEWLINE#
process = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) #NEWLINE#
img . mean ( axis = 0 ) . mean ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
my_array = numpy . empty ( [ 1 , 2 ] , dtype = 'S10' ) #NEWLINE#
Foo . objects . filter ( bar_y__name = 'bar#SPACE#y' ) #NEWLINE#
Image ( filename = 'data/empire.jpg' ) #NEWLINE#
_cache . clear ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
return all ( getattr ( self , key ) == val for key , val in list ( kwargs . items ( ) ) ) #NEWLINE#
a [ : , : : 2 ] + a [ : , 1 : : 2 ] #NEWLINE#
len ( set ( [ 9 , 20 , 413 , 425 ] ) . intersection ( list ( range ( 34 , 566 ) ) ) ) #NEWLINE#
{ k : v } #NEWLINE#
data . decode ( 'utf-16' ) #NEWLINE#
print ( 'The#SPACE#abbreviation#SPACE#for#SPACE#%s#SPACE#is#SPACE#%s.' % ( key , value ) ) #NEWLINE#
s . close ( ) #NEWLINE#
Gtk . Window . __init__ ( self , title = 'Dialog#SPACE#Example' ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
print ( json . dumps ( [ 23.67 , 23.97 , 23.87 ] ) ) #NEWLINE#
df . groupby ( [ 'A' , 'B' ] ) . tail ( 2 ) . groupby ( [ 'A' , 'B' ] ) . head ( 1 ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
df . apply ( lambda x : x . argmax ( ) , axis = 1 ) #NEWLINE#
a = [ [ ] , [ ] , [ ] , [ ] ] #NEWLINE#
chr ( ord ( 'a' ) + 5 ) #NEWLINE#
posts = Post . objects . filter ( likes__21__exists = True ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
urllib . request . urlopen ( 'http://www.example.com/login.html' ) #NEWLINE#
df = dd . read_csv ( '2000-*.csv' , parse_dates = [ 'timestamp' ] ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
plt . pause ( 3 ) #NEWLINE#
[ { 'type' : 6 , 'name' : 'Type#SPACE#1' } , { 'type' : 12 , 'name' : 'Type#SPACE#2' } ] #NEWLINE#
list ( df [ 'foo' ] * df [ 'bar' ] ) #NEWLINE#
SQLALCHEMY_DATABASE_URI = 'sqlite://' #NEWLINE#
scipy . signal . fftconvolve ( may_a , may_b , mode = 'valid' ) #NEWLINE#
con . execute ( 'ALTER#SPACE#TABLE#SPACE#`example_table`#SPACE#ADD#SPACE#PRIMARY#SPACE#KEY#SPACE#(`ID_column`);' ) #NEWLINE#
openmode = 'w' or 'wt' #NEWLINE#
list ( '1111' ) #NEWLINE#
list ( starmap ( add , zip ( lst , lst [ 1 : ] ) ) ) #NEWLINE#
b = [ ( n >> i & 1 ) for i in range ( 0 , n . bit_length ( ) - 1 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ n . tolist ( ) for n in diags ] ) #NEWLINE#
pattern = re . compile ( '/(\\w+)\\.mp3$' ) #NEWLINE#
resp = requests . post ( url , data = values , allow_redirects = True ) #NEWLINE#
{ tuple ( x ) for x in l1 } & { tuple ( x ) for x in l2 } #NEWLINE#
[ ( fname , hashlib . md5 ( open ( fname , 'rb' ) . read ( ) ) . digest ( ) ) for fname in fnamelst ] #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
plt . pcolormesh ( x , y , z , cmap = mpl . cm . Reds ) #NEWLINE#
edges = cv2 . Canny ( image_blurred , 100 , 300 , apertureSize = 3 ) #NEWLINE#
label . pack ( fill = BOTH , expand = 1 ) #NEWLINE#
testa4 . testa4 ( [ 'aa' , 'bb' , 'cc' ] ) #NEWLINE#
X_train = scaler . fit_transform ( X_train ) #NEWLINE# X_test = scaler . transform ( X_test ) #NEWLINE#
re . search ( '\\[\\[([^\\]|]*)(?=.*\\]\\])' , '[[aaabbb]]' ) . group ( 1 ) #NEWLINE#
np . isnan ( [ nan , nan ] ) . any ( ) #NEWLINE#
list ( y ) #NEWLINE#
f = open ( 'C:\\\\' + str ( i ) + '.gif' , 'wb' ) #NEWLINE#
cb . ax . xaxis . set_ticks ( minorticks , minor = True ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] [ 5 : - 7 : - 1 ] #NEWLINE#
max ( [ [ '1' , '2' , '3' ] , [ '7' , '8' , '9' ] ] , key = mymaxfunction ) #NEWLINE#
result = requests . get ( LOGIN_URL , auth = ( USERNAME , PASSWORD ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . split ( '[\u200b\\s]+' , 'some#SPACE#string' , flags = re . UNICODE ) #NEWLINE#
self . canvas . pack ( ) #NEWLINE#
g . dropna ( ) . reset_index ( ) #NEWLINE#
request . session [ 'card' ] = card . id #NEWLINE#
alist = [ row for row in alist if 2 not in row ] #NEWLINE#
resamp . dropna ( ) . reset_index ( ) #NEWLINE#
one , two , three = list ( range ( 1 , 4 ) ) #NEWLINE#
root . title ( 'app' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
MPI_Finalize ( ) #NEWLINE#
page . findAll ( 'img' ) #NEWLINE#
a = [ 'a' , 'a' , 'a' , 'a' , 'b' , 'b' , 'c' , 'c' , 'c' , 'd' , 'e' , 'e' , 'e' , 'e' , 'e' ] #NEWLINE#
posts = Post . objects . filter ( tags__in = tags ) #NEWLINE#
splitlists = [ mylist [ i : i + n ] for i in range ( 0 , len ( mylist ) , n - 1 ) ] #NEWLINE# splitlists [ - 1 ] . append ( splitlists [ 0 ] [ 0 ] ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'foo' ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
var = '{foo}#SPACE#{foo}#SPACE#{foo}' . format ( foo = 'python#SPACE#you#SPACE#so#SPACE#crazy' ) #NEWLINE#
x_str = '$%s#SPACE#\\times#SPACE#10^{%s}$' % ( l [ 0 ] , str ( int ( l [ 1 ] ) ) ) #NEWLINE#
'@' + 'blahblah@gmail.com' . split ( '@' ) [ - 1 ] #NEWLINE#
file . close ( ) #NEWLINE#
l = [ 'ch' , '' , '' , 'e' , '' , 'e' , 'se' ] #NEWLINE#
im = Image . open ( '1_tree.jpg' ) #NEWLINE#
form . save ( ) #NEWLINE#
import imp #NEWLINE# imp . reload ( mainscript ) #NEWLINE#
df = sqlContext . table ( 'df' ) #NEWLINE#
plt . plot ( x_list , y_list ) #NEWLINE#
df [ 'target' ] . values #NEWLINE#
new_df = pd . DataFrame ( { 'class' : [ j for i in repeated_items for j in i ] } ) #NEWLINE#
print ( 'Upload#SPACE#Error:#SPACE#' + uploadr [ 0 ] ) #NEWLINE#
first_element = myList [ i ] [ 0 ] #NEWLINE#
sorted ( zip ( listofTimes , listofLines ) ) #NEWLINE#
print ( ( '2#SPACE#+' , integer , '=' , rslt ) ) #NEWLINE#
set ( list1 + list2 ) #NEWLINE#
soup = BeautifulSoup ( page . read ( ) , 'html.parser' ) #NEWLINE#
foo_bar_mod = importlib . import_module ( 'path.to.foo#SPACE#bar' ) #NEWLINE#
print ( tips . groupby ( [ 'sex' , 'day' , 'smoker' ] ) [ 'tip' , 'size' ] . mean ( ) ) #NEWLINE#
new_dict = dict ( ( k , v ) for k , v in dict . items ( ) if k in list ) #NEWLINE#
A = np . array ( A ) #NEWLINE#
session . commit ( ) #NEWLINE#
df2 . T . drop_duplicates ( ) . T #NEWLINE#
plt . show ( ) #NEWLINE#
stream . filter ( track = [ 'twitterapi' ] ) #NEWLINE#
json . dumps ( separators = ( ',' , ':#SPACE#' ) ) #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . sum ( ) ) #NEWLINE#
pipe . stdin . close ( ) #NEWLINE#
( a [ n : n + 1 ] + [ default ] ) [ 0 ] #NEWLINE#
"""Cyrillic#SPACE#and#SPACE#кириллический""" #NEWLINE#
re . search ( '(?u)\\by\\b' , 'Ã¼yÃ¼' ) #NEWLINE#
zip ( * ( [ iter ( x ) ] * 3 ) ) #NEWLINE#
rstr . xeger ( '[A-Z]\\d[A-Z]#SPACE#\\d[A-Z]\\d' ) #NEWLINE#
web . setcookie ( 'session' , '' , expires = - 1 , domain = session_cookie_domain ) #NEWLINE#
pprint . pprint ( obj , compact = True ) #NEWLINE#
"""string#SPACE#to#SPACE#search""" . index ( 'needle' ) #NEWLINE#
A . sum ( axis = 0 ) #NEWLINE#
pylab . plot ( x , y , 'o' ) #NEWLINE#
ax . get_yaxis ( ) . set_minor_locator ( mpl . ticker . AutoMinorLocator ( ) ) #NEWLINE#
[ { 'event' : 'd' , '_id' : ObjectId ( '4d5b...0003' ) , 'uid' : 3 , 'time' : 4 } ] #NEWLINE#
ts [ datetime ( 2011 , 1 , 8 ) : ] #NEWLINE#
np . diff ( index ) / np . timedelta64 ( 1 , 's' ) #NEWLINE#
b = numpy . vstack ( ( numpy . zeros ( a . shape , int ) , a ) ) #NEWLINE#
print ( list ( map ( lambda x , y : x + [ y ] , A , list ( range ( 1 , len ( A ) + 1 ) ) ) ) ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
print ( df . to_csv ( sep = '\t' , index = False ) ) #NEWLINE#
{ 'a' : [ 1 , nan , nan ] , 'b' : [ 2 , 3 , nan ] , 'c' : [ 3 , 4 , 4 ] , 'd' : [ nan , nan , 4 ] } #NEWLINE#
file . write ( 'second#SPACE#line\n' ) #NEWLINE#
return render ( request , 'books.html' , books_list ) #NEWLINE#
conn . commit ( ) #NEWLINE#
pylab . show ( ) #NEWLINE#
value = root [ 'A' ] [ 0 ] [ 'B' ] [ 0 ] [ 'C' ] [ 0 ] #NEWLINE#
df = df [ df [ 'Sale#SPACE#Item' ] != 'item1' ] #NEWLINE#
return sum ( functools . reduce ( operator . mul , data ) for data in zip ( * lists ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
class A ( object ) : #NEWLINE# #INDENT# __slots__ = [ ] #NEWLINE#
return render_to_response ( 'template.html' , { 'mylist' : mylist } ) #NEWLINE#
print ( s . seconds / 60 ) #NEWLINE#
return [ ( i , lst . count ( i ) ) for i in set ( lst ) ] #NEWLINE#
[ 'mo' , 'nkey' ] #NEWLINE#
[ 'mon' , 'key' ] #NEWLINE#
[ 'monk' , 'ey' ] #NEWLINE#
[ 'monke' , 'y' ] #NEWLINE#
image_model . image_field ( 'path' , File ( ) . read ( ) ) #NEWLINE#
re . sub ( 'blah' , lambda m , i = iter ( '123' ) : next ( i ) , 'blah#SPACE#blah#SPACE#blah' ) #NEWLINE#
return line [ 5 : ] #NEWLINE#
sorted ( a , key = my_key ) #NEWLINE#
arr = np . array ( list_of_arrays ) #NEWLINE#
df . ix [ df . cherry == 'bad' , [ 'apple' , 'banana' ] ] = np . nan #NEWLINE#
print ( match . group ( 2 ) ) #NEWLINE#
tuple ( re . findall ( '\\{([^{}]+)\\}' , s ) ) #NEWLINE#
print ( s . replace ( '\n' , '\n#SPACE##SPACE##SPACE##SPACE#' ) ) #NEWLINE#
browser . get ( 'mikekus.com' ) #NEWLINE#
sys . stdout . write ( '%d#SPACE#%%#SPACE#Completed#SPACE#\r' % ( i , ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
return sum ( i for i in range ( a , b + 1 ) if i % 2 == 0 ) #NEWLINE#
sys . path . append ( '..' ) #NEWLINE#
nx . draw_networkx_labels ( G , pos_higher , labels ) #NEWLINE#
conn . escape_string ( ) #NEWLINE#
"""repr()#SPACE#shows#SPACE#quotes:#SPACE#{!r};#SPACE#str()#SPACE#doesn't:#SPACE#{!s}""" . format ( 'test1' , 'test2' ) #NEWLINE#
df . iloc [ df . index . get_level_values ( 'f' ) == 'a' ] #NEWLINE#
msg [ 'To' ] = 'a@b.com,#SPACE#b@b.com,#SPACE#c@b.com' #NEWLINE#
from functools import reduce #NEWLINE# dict = reduce ( lambda x , y : { y : x } , reversed ( myList ) , { } ) #NEWLINE#
"""""" . join ( random . sample ( s , 10 ) ) #NEWLINE#
return os . path . dirname ( f ) #NEWLINE#
random . shuffle ( migrant ) #NEWLINE#
numpy . setxor1d ( a , b ) #NEWLINE#
df . cumsum ( ) #NEWLINE#
str = re . sub ( '(&[a-zA-Z])' , '%(\\1)s' , str ) #NEWLINE#
logging . config . fileConfig ( '/path/to/logging.conf' ) #NEWLINE#
plt . show ( ) #NEWLINE#
arr . sum ( axis = ( 0 , 1 ) ) . shape #NEWLINE#
xy = np . mgrid [ - 5 : 5.1 : 0.5 , - 5 : 5.1 : 0.5 ] . reshape ( 2 , - 1 ) . T #NEWLINE#
s % { 'x' : 'apples' , 'y' : 'oranges' } #NEWLINE#
print ( re . sub ( '(.{64})' , '\\1\n' , s , 0 , re . DOTALL ) ) #NEWLINE#
[ x for x in x if x [ id ] == 20 ] #NEWLINE#
return self . get_model ( ) . objects . all ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
repr ( a ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE# print ( soup . get_text ( ) ) #NEWLINE#
str . lower ( 'HELLO' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
sort ( arr , arr . size ) #NEWLINE#
ordered_dictionary = [ OrderedDict ( zip ( names , subl ) ) for subl in list_of_lists ] #NEWLINE#
print ( '#SPACE#' . join ( to_search [ NAME ] ) ) #NEWLINE#
len ( gzip . open ( 'fuse-ext2-0.0.7.tar.gz' ) . read ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . xlabel ( '$\\frac{\\phi#SPACE#+#SPACE#x}{2}$' ) #NEWLINE#
element = ET . parse ( fp ) . getroot ( ) #NEWLINE#
df . drop ( df . columns [ 11 : ] , axis = 1 ) #NEWLINE#
2 ** 2 ** numpy . arange ( 5 ) #NEWLINE#
a [ 'pos' ] [ [ 'y' , 'x' ] ] > b [ 'pos' ] [ [ 'y' , 'x' ] ] #NEWLINE#
print ( str ( netaddr . IPAddress ( 42540766411282592856904265327123268393 ) ) ) #NEWLINE#
pl . show ( ) #NEWLINE#
a . insert ( 0 , a . pop ( ) ) #NEWLINE#
print ( '%f' % x ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
r . mainloop ( ) #NEWLINE#
np . random . shuffle ( a ) #NEWLINE#
app . run ( ) #NEWLINE#
print ( MyClass ( ) ) #NEWLINE#
re . findall ( '{([^{}]*)}' , '{a}#SPACE#{#SPACE#{b}#SPACE#c#SPACE#{#SPACE#{d}#SPACE#}#SPACE#}' ) #NEWLINE#
self . show ( ) #NEWLINE#
data = numpy . array ( f . read ( ) . split ( ) , dtype = float ) . reshape ( 7000 , 8 ) #NEWLINE#
x . astype ( 'M8[D]' ) . astype ( 'O' ) #NEWLINE#
df . mean ( axis = 1 ) #NEWLINE#
dfSearch [ 'str_value' ] . map ( lambda x : urllib . parse . unquote ( x ) . decode ( 'utf8' ) ) #NEWLINE#
print ( result . get ( 'link' ) ) #NEWLINE#
new_dict [ key ] . extend ( value ) #NEWLINE#
raise forms . ValidationError ( 'Must#SPACE#enter#SPACE#a#SPACE#start#SPACE#date' ) #NEWLINE#
urllib . parse . quote ( '/test' , safe = '' ) #NEWLINE#
print ( get_lists_with_sum ( 11 , 8 ) ) #NEWLINE#
session . expunge_all ( ) #NEWLINE#
s . decode ( 'utf-8' ) . upper ( ) #NEWLINE#
xx , yy = np . mgrid [ : 5 , : 5 ] #NEWLINE#
plt . grid ( True , color = 'w' , linestyle = '-' , linewidth = 2 ) #NEWLINE#
urllib . parse . urlencode ( { 'lang' : 'en' , 'tag' : 'python' } ) #NEWLINE#
big + np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
A [ : : - 1 , : ] #NEWLINE#
print ( '{foo}' . format ( ** locals ( ) ) ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
return itertools . chain . from_iterable ( lists ) #NEWLINE#
df . groupby ( [ 'Level0' , 'Level1' ] ) . cumcount ( ) #NEWLINE#
ax . plot ( x , y , '--' , color = 'lawngreen' , linewidth = 5 ) #NEWLINE#
np . mean ( t , axis = 1 ) #NEWLINE#
super ( Test , self ) . save ( force_insert , force_update ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
session . query ( WhateverClass ) . filter ( WhateverClass . _containerClassId == 5 ) . all ( ) #NEWLINE#
deviceparent = fexdata [ destdevice ] [ 'parent' ] #NEWLINE#
driver . quit ( ) #NEWLINE#
return s . decode ( 'ascii' , 'ignore' ) #NEWLINE#
df = df . replace ( '0' , np . nan ) #NEWLINE#
open ( filename , 'wb' ) #NEWLINE#
webb . traceroute ( 'your-web-page-url' ) #NEWLINE#
h . setLevel ( logging . DEBUG ) #NEWLINE#
raise ImportError ( 'Reportlab#SPACE#Version#SPACE#2.1+#SPACE#is#SPACE#needed!' ) #NEWLINE#
return np . cos ( np . pi * x ) * np . sin ( np . pi * y ) #NEWLINE#
parser . add_argument ( 'FILES' , nargs = '*' ) #NEWLINE#
len ( s ) - len ( s . rstrip ( '0' ) ) #NEWLINE#
self . clickcursor . execute ( query ) #NEWLINE#
plt . show ( ) #NEWLINE#
return HttpResponse ( 'OK' ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
[ whatever_data ] = pickle . load ( open ( 'myallData.p' , 'rb' ) ) #NEWLINE#
"""{0}^{{{1:+03}}}""" . format ( * frexp10 ( - 1234000000.0 ) ) #NEWLINE#
pd . value_counts ( list ( chain ( * df . categories . values . tolist ( ) ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""#SPACE#""" . join ( '#SPACE#' . join ( x ) for x in merged ) #NEWLINE#
pd . date_range ( start = datetime . datetime . now ( ) , periods = 5 , freq = 'A' ) #NEWLINE#
json = serializers . serialize ( 'json' , some_queryset [ 0 : 1 ] ) #NEWLINE#
sample = [ [ 'CGG' , 'ATT' ] , [ 'GCGC' , 'TAAA' ] , [ 'ACAA' , 'CAAC' ] ] #NEWLINE#
type ( variable_name ) #NEWLINE#
A [ A == NDV ] = numpy . nan #NEWLINE#
print ( any ( l [ i : i + len ( pat ) ] == pat for i in range ( len ( l ) - len ( pat ) + 1 ) ) ) #NEWLINE#
urllib . request . urlopen ( 'http://www.example.com/' , jdata ) #NEWLINE#
pygame . init ( ) #NEWLINE#
testData [ 'value' ] . str . contains ( testData [ 'value' ] [ 0 ] ) . any ( ) #NEWLINE#
x [ np . r_ [ 0 : 2 , - 2 : 0 ] ] #NEWLINE#
s += '#SPACE#' . join ( str ( a [ i , j , k ] . imag ) ) #NEWLINE#
sys . path . append ( 'c:\\python24\\lib' ) #NEWLINE#
print ( s . tell ( ) ) #NEWLINE#
re . findall ( 'this#SPACE#is#SPACE#(\\d+)#SPACE#the#SPACE#string#SPACE#(\\d+)#SPACE#that,#SPACE#i#SPACE#need#SPACE#(\\d+)' , s ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
dest = dict ( list ( orig . items ( ) ) + list ( extra . items ( ) ) ) #NEWLINE#
result = 'function#SPACE#(%s)' % ',#SPACE#' . join ( map ( str , args ) ) #NEWLINE#
print ( my_new_list ) #NEWLINE#
df . loc [ row , key ] = data [ key ] #NEWLINE#
parser . add_argument ( '-e' , '--example' , action = make_action ( 'your#SPACE#arg' ) ) #NEWLINE#
pipeline . steps [ 1 ] [ 1 ] #NEWLINE#
dir ( request . body ) #NEWLINE#
df [ ( df > 16 ) & mask ] #NEWLINE#
order = [ 'Gender' , 'Male' , 'Female' , 'Unknown' ] #NEWLINE# pd . concat ( [ df , pd . get_dummies ( df , '' , '' ) . astype ( int ) ] , axis = 1 ) [ order ] #NEWLINE#
writer . writerow ( [ 'Subject' , 'itemID' , 'bias1Answer' ] ) #NEWLINE#
[ 'big' , 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
re . sub ( '(.*)iss' , '\\1XXX' , myStr ) #NEWLINE#
bar ( x , y , width = 30 ) #NEWLINE#
fp = urllib . request . urlopen ( 'http://remotedomain.com/file.mp3' ) #NEWLINE#
xvfb . wait ( ) #NEWLINE#
[ x for x in lis if x > 2 ] #NEWLINE#
print ( new_string ) #NEWLINE#
files = [ f for f in os . listdir ( dirToScreens ) if path . isfile ( f ) ] #NEWLINE#
print ( re . search ( '\\d.*[A-Z]|[A-Z].*\\d' , x ) ) #NEWLINE#
[ random . randrange ( 1 , 10 ) for _ in range ( 0 , 4 ) ] #NEWLINE#
cur . execute ( 'SELECT#SPACE#Host,User#SPACE#FROM#SPACE#user' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ [ 1 , 3 , 4 , 5 ] , [ 1 , 3 , 8 ] , [ 1 , 7 , 8 ] , [ 6 , 7 , 8 ] , [ 9 ] ] #NEWLINE#
print ( eval ( '+' . join ( lines ) ) ) #NEWLINE#
print ( 'length#SPACE#of#SPACE#{0}#SPACE#is#SPACE#{1}' . format ( repr ( myunicode ) , len ( myunicode ) ) ) #NEWLINE#
[ i for i in Records if i [ 'Price' ] != 0 ] #NEWLINE#
plt . savefig ( 'figure1.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( 1 for i in x if i ) #NEWLINE#
x = ( x + y ) % 48 #NEWLINE#
int ( 3.745 ) #NEWLINE#
return struct . unpack ( '<q' , bytes ) #NEWLINE#
isascii = lambda s : len ( s ) == len ( s . encode ( ) ) #NEWLINE#
users = models . ManyToManyField ( Users ) #NEWLINE#
df [ 'col2' ] = df [ 'col2' ] . astype ( 'category' ) #NEWLINE#
[ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ] #NEWLINE#
pprint . pprint ( obj , depth = 1 ) #NEWLINE#
re . search ( 'a{1,65535}' , 'aaa' ) #NEWLINE#
df . query ( '@start#SPACE#<=#SPACE#timestamp#SPACE#<=#SPACE#@end' ) #NEWLINE#
sortedtotal . rename ( columns = lambda x : x . strip ( ) . replace ( '#SPACE#' , '_' ) , inplace = True ) #NEWLINE#
req . close ( ) #NEWLINE#
return hash ( self . __key__ ( ) ) #NEWLINE#
func ( np . array ( [ 10 , 20 , 30 ] ) ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
[ 'mo' , 'n' , 'k' , 'e' , 'y' ] #NEWLINE#
a . __getitem__ ( slice ( 0 , 1 ) ) . __getitem__ ( 0 ) . __setitem__ ( 0 , 5 ) #NEWLINE#
np . einsum ( 'ijkl,jk' , H , x ) #NEWLINE#
app = create_app ( ) #NEWLINE#
len ( set ( a ) ) == len ( a ) == max ( a ) and min ( a ) == 1 #NEWLINE#
super ( waypointForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( input ( '>#SPACE#' ) ) #NEWLINE#
df3 . groupby ( [ 'Item1' , 'Item2' ] , as_index = False ) . sum ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( etree . tostring ( page , pretty_print = True ) ) #NEWLINE#
"""eW91ciB0ZXh0""" . decode ( 'base64' ) #NEWLINE#
sess . run ( train_op ) #NEWLINE#
label . pack ( ) #NEWLINE#
system ( '"C:\\Path\\To\\chrome.exe"#SPACE#-incognito#SPACE#www.foo.com' ) #NEWLINE#
site . delete ( os . path . join ( path , ftpfile . name ) ) #NEWLINE#
[ 'Joe' , 'Dave' , 'Professional,#SPACE#Ph.D.' , 'Someone#SPACE#else' ] #NEWLINE#
( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
plt . savefig ( 'graph.pdf' , dpi = 1000 , bbox_inches = 'tight' ) #NEWLINE#
ax1 . set_zorder ( 1 ) #NEWLINE#
m = types . ModuleType ( 'm' , 'The#SPACE#m#SPACE#module' ) #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ) #NEWLINE#
np . any ( ( 0 < x ) & ( x < 1 ) ) #NEWLINE#
gtk . main ( ) #NEWLINE#
[ a for a , b in zip ( aa , bb ) if a == b ] #NEWLINE#
datetime . strptime ( '2011-05-25T20:34:05.787Z' , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
issubclass ( C , A ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
df . set_index ( 'subindex' , append = True ) #NEWLINE#
df = pd . concat ( [ df , pd . DataFrame ( new_data ) ] ) #NEWLINE#
matplotlib . get_backend ( ) #NEWLINE#
df . to_records ( ) . view ( [ ( 'ID' , '<i8' ) , ( 'A' , '<f8' ) , ( 'B' , '<f8' ) , ( 'C' , '<f8' ) ] ) #NEWLINE#
sum ( i for i , j in enumerate ( s , 1 ) if j == 'A' ) #NEWLINE#
process . stdin . write ( '\n' ) #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE# zip ( * a ) #NEWLINE#
conn . commit ( ) #NEWLINE#
print ( list ( igroups ( [ 9 , 1 , 2 , 3 , 1 , 1 , 2 , 3 , 5 ] ) ) ) #NEWLINE#
[ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ] #NEWLINE#
pd . merge_asof ( dfa , dfb , 'datetime' ) #NEWLINE#
os . path . basename ( f . name ) #NEWLINE#
plt . ticklabel_format ( style = 'sci' , axis = 'x' , scilimits = ( 0 , 0 ) ) #NEWLINE#
p . start ( ) #NEWLINE#
parser . add_argument ( 'foo' , nargs = '*' , action = Extender ) #NEWLINE#
any ( x [ 1 : ] == x [ : - 1 ] for x in zip ( * arr ) ) #NEWLINE#
df . stack ( ) . reset_index ( 1 ) #NEWLINE#
self . assertEqual ( 0 , os . getpid ( ) ) #NEWLINE#
int ( '' . join ( s . split ( ) ) , 16 ) #NEWLINE#
""",#SPACE#""" . join ( str ( e ) for e in s ) #NEWLINE#
my_array [ : , ( 0 ) ] , my_array [ : , ( 1 ) ] = my_array [ : , ( 1 ) ] , my_array [ : , ( 0 ) ] . copy ( ) #NEWLINE#
re . findall ( '\\b[a-zA-Z]+\\b(?!\\()' , 'movav(x/2,#SPACE#2)*movsum(y,#SPACE#3)*z' ) #NEWLINE#
df . shape [ 1 ] #NEWLINE#
len ( df ) #NEWLINE#
utc_dt = datetime ( 1970 , 1 , 1 ) + timedelta ( seconds = timestamp ) #NEWLINE#
import nltk #NEWLINE#
a [ : , ( 1 ) , ( None ) ] #NEWLINE#
cts . minute == 0 and cts . second == 0 #NEWLINE#
[ 0 ] * 10 #NEWLINE#
pyplot . show ( ) #NEWLINE#
return fragments #NEWLINE#
app = Flask ( __name__ , static_url_path = '/static' ) #NEWLINE#
locations = sorted ( list ( range ( len ( A ) ) ) , key = A . __getitem__ ) #NEWLINE#
print ( yesterday . strftime ( '%m%d%y' ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ ( 'aa' , 2 ) , ( 'bb' , 2 ) , ( 'cc' , 1 ) ] #NEWLINE#
root = tree . getroot ( ) #NEWLINE#
ax . xaxis . set_major_locator ( myLocator ) #NEWLINE#
print ( min ( Mylist , key = lambda x : x [ 1 ] ) ) #NEWLINE#
print ( '-' * 3 ) #NEWLINE#
ET . fromstring ( '<c><a><b></b></a></c>' ) . find ( './/b/..' ) #NEWLINE#
ax . contourf ( x , y , z , zdir = 'y' , offset = y_min , cmap = cm . coolwarm ) #NEWLINE#
city = models . CharField ( max_length = 50 , blank = True , default = '' ) #NEWLINE#
raise ValueError ( 'Non#SPACE#increasing#SPACE#matches#SPACE#for#SPACE#a' ) #NEWLINE#
tup [ 0 ] = tup [ 0 ] . __iadd__ ( ( 4 , 5 , 6 ) ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
config . readfp ( open ( 'abc.txt' ) ) #NEWLINE#
python - devel #NEWLINE#
print ( '{0:<10}#SPACE#{1:>8}#SPACE#{2:>8}' . format ( * args ) ) #NEWLINE#
[ '' . join ( x ) for x in product ( * ( d [ y ] for y in seq ) ) ] #NEWLINE#
super ( StoppableThread , self ) . __init__ ( ) #NEWLINE#
y [ 1 : - 1 , 1 : - 1 ] *= x [ 1 : - 1 , 2 : ] #NEWLINE#
ax . set_xlim ( 1 , 11 ) #NEWLINE#
logging . info ( 'Finished' ) #NEWLINE#
logging . info ( 'Started' ) #NEWLINE#
lines = line . split ( '\n' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
decimal . Decimal ( '4' ) / decimal . Decimal ( '100' ) #NEWLINE#
my_int_list = [ int ( v ) for v in open ( 'myfile.txt' ) . read ( ) . split ( ) ] #NEWLINE#
{ i : a [ i ] for i in np . nonzero ( a ) [ 0 ] } #NEWLINE#
return [ i . strip ( ) for i in txt . split ( default_sep ) ] #NEWLINE#
p . wait ( ) #NEWLINE#
tmp [ : , : - 1 ] += a [ : , 1 : ] #NEWLINE#
df . to_sql ( 'table_name' , engine ) #NEWLINE#
plt . show ( ) #NEWLINE#
l2 = zip ( l1 [ 0 : : 2 ] , l1 [ 1 : : 2 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
RPT . <STR0> ( level = [ 'STK_ID' , 'RPT_Year' ] ) [ 'sales' ] . apply ( sale_per_q ) #NEWLINE#
x = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
db = MySQLdb . connect ( 'localhost' , 'root' , 'password' , 'testdb' ) #NEWLINE#
[ a [ 'b' ] [ 'c' ] [ key ] [ 'answer' ] for key in list ( a [ 'b' ] [ 'c' ] . keys ( ) ) ] #NEWLINE#
df_example . groupby ( 'ID_1' ) . apply ( collapse ) . reset_index ( drop = True ) #NEWLINE#
newD = dict ( zip ( list ( d . keys ( ) ) , [ round ( v ) for v in list ( d . values ( ) ) ] ) ) #NEWLINE#
s3 . meta . client . get_bucket_location ( Bucket = 'boto3.region' ) #NEWLINE#
key = '' . join ( chr ( x ) for x in [ 19 , 0 , 0 , 0 , 8 , 0 ] ) #NEWLINE#
numcount = Counter ( numstring . split ( ',' ) ) #NEWLINE#
self . save ( ) #NEWLINE#
gtk . main_quit ( ) #NEWLINE#
outfile . write ( 'new#SPACE#line2\n' ) #NEWLINE#
outfile . write ( 'new#SPACE#line1\n' ) #NEWLINE#
A [ ( ( 0 , ) , ( 1 , ) ) , B ] #NEWLINE#
return int ( t [ 0 ] , 2 ) + int ( t [ 1 ] , 2 ) / 2.0 ** len ( t [ 1 ] ) #NEWLINE#
[ '1' , <STR0> , '3' , '4' , <STR0> ] #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'myproject.settings' #NEWLINE#
print ( [ ( int ( i ) + 1 ) for i in s . split ( ) ] ) #NEWLINE#
ax . plot_surface ( x , y , z , rstride = 4 , cstride = 4 , color = 'b' ) #NEWLINE#
print ( 'Not#SPACE#float' ) #NEWLINE#
print ( '>' + '\n' . join ( pair ) ) #NEWLINE#
df . apply ( calculateC2 , axis = 1 ) #NEWLINE#
window . show ( ) #NEWLINE#
db . insert_many ( df . to_dict ( 'records' ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
str = str [ : 1 ] . upper ( ) + str [ 1 : ] #NEWLINE#
fig . savefig ( 'ax2_figure.png' , bbox_inches = extent ) #NEWLINE#
ax2 . set_xticklabels ( [ '7' , '8' , '99' ] ) #NEWLINE#
df . index = df . index [ : - 1 ] . append ( pd . Index ( [ 'A' ] ) ) #NEWLINE#
collections . OrderedDict ( sorted ( result . items ( ) ) ) #NEWLINE#
Group ( 'news_providers_loading' ) . send ( { 'content' : str ( provider ) } ) #NEWLINE#
( 10 ) ( ) #NEWLINE#
rc ( 'text' , usetex = True ) #NEWLINE#
f . close ( ) #NEWLINE#
mail . login ( 'emailaccount@live.com' , 'yourpassword' ) #NEWLINE#
test ( x , 'one' ) #NEWLINE#
plt . show ( ) #NEWLINE#
x = ( x + y ) % 48 #NEWLINE#
df_with_x5 . show ( ) #NEWLINE#
[ [ 'alpha' , 'beta' ] , [ 'delta' , 'gamma' ] ] #NEWLINE#
return condition1 or condition2 or condition3 #NEWLINE#
array2 = [ i for i in array2 if i not in array1 ] #NEWLINE#
return unicodedata . normalize ( 'NFKD' , unicodeText ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
t2c . main ( ) #NEWLINE#
sorted ( get , key = sortkey ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
spamwriter . writerow ( [ 'Spam' , 'Lovely#SPACE#Spam' , 'Wonderful#SPACE#Spam' ] ) #NEWLINE#
[ i for sublist in zip_longest ( * a ) for i in sublist if i is not None ] #NEWLINE#
rdd = sc . parallelize ( [ ( 'a' , 1 ) ] ) #NEWLINE#
return requests . get ( url ) #NEWLINE#
os . remove ( filename ) #NEWLINE#
url = os . environ [ 'HTTP_HOST' ] #NEWLINE#
print ( line . rstrip ( ) ) #NEWLINE#
print ( df . loc [ df [ 'Col1' ] . isnull ( ) , [ 'Col1' , 'Col2' , 'Col3' ] ] ) #NEWLINE#
pivot . sort ( 'sum' , ascending = False , inplace = True ) #NEWLINE#
watchout ( ) #NEWLINE#
skycake ( ) #NEWLINE#
[ [ '-' . join ( ( min ( a , b ) , max ( a , b ) ) ) for b in shops if b != a ] for a in shops ] #NEWLINE#
fig . savefig ( 'test.png' , dpi = fig . dpi ) #NEWLINE#
plt . show ( ) #NEWLINE#
df = df [ df [ 'col.2' ] < 2 ] #NEWLINE#
return func ( self , * args , ** kwargs ) #NEWLINE#
show ( ) #NEWLINE#
foo . update ( list ( range ( 2 , 6 ) ) ) #NEWLINE#
pg . mixer . set_num_channels ( 50 ) #NEWLINE#
a = np . genfromtxt ( 'test.txt' , delimiter = [ 19 , 4 , 5 , 5 ] , skip_header = 1 ) #NEWLINE#
df . mask ( np . arange ( df . shape [ 0 ] ) >= np . arange ( df . shape [ 1 ] ) [ : , ( np . newaxis ) ] ) #NEWLINE#
[ os . path . join ( root , * choices [ : i + 1 ] ) for i in range ( len ( choices ) ) ] #NEWLINE#
print ( iter2 ( A . copy ( ) , rc1 , rc2 ) ) #NEWLINE#
p . communicate ( "insert#SPACE#into#SPACE#egg#SPACE#values#SPACE#('egg');" ) #NEWLINE#
df . loc [ target_index ] #NEWLINE#
b = a [ 0 : 2 ] #NEWLINE#
dsp . close ( ) #NEWLINE#
from nltk . collocations import * #NEWLINE#
np . savetxt ( 'test.txt' , ab , fmt = '%10s#SPACE#%10.3f' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
check_all ( [ 'bc' , 'ab' ] , [ 'abc' ] ) #NEWLINE#
Foo = type ( 'Foo' , ( ) , { 'bar' : True } ) #NEWLINE#
my_dictionary [ 'norway' ] #NEWLINE#
df [ sorted ( df . columns , key = lambda x : datetime . strptime ( x , '%m/%y' ) ) ] #NEWLINE#
driver . get ( 'https://localhost/test/' ) #NEWLINE#
np . nanmean ( data , axis = 0 ) #NEWLINE#
Counter ( test . split ( ) ) . most_common ( ) #NEWLINE#
print ( df . sum ( ) . sum ( ) ) #NEWLINE#
glob . glob ( '/path/to/dir/*.csv' ) #NEWLINE#
all ( i in list ( a3 . f . items ( ) ) for i in list ( L [ 0 ] . f . items ( ) ) ) #NEWLINE#
isinstance ( dates , pd . DatetimeIndex ) #NEWLINE#
df . columns = [ str ( i ) for i in df . columns . values . tolist ( ) ] #NEWLINE#
data [ 'realms' ] [ 0 ] [ 'name' ] #NEWLINE#
canvas . pack ( ) #NEWLINE#
( my_array [ : - 1 ] * my_array [ 1 : ] < 0 ) . sum ( ) #NEWLINE#
raise ValueError ( 'int#SPACE#value#SPACE#is#SPACE#required' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
isdeployed . strip ( ) #NEWLINE#
print ( a [ 0 ] [ 0 ] ) #NEWLINE#
parser . add_argument ( 'foo' , type = int , choices = range ( 0 , 1000 ) ) #NEWLINE#
super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
np . asarray ( Z ) [ : , ( 0 ) ] #NEWLINE#
s = df1 [ 'value' ] . unstack ( 0 ) . asfreq ( 'D' ) . ffill ( ) . stack ( ) #NEWLINE#
list ( set ( a ) & set ( b ) ) #NEWLINE#
ws . write ( rowi , coli , converters [ coli ] ( value ) ) #NEWLINE#
max_value = max ( my_list ) #NEWLINE# max_index = my_list . index ( max_value ) #NEWLINE#
array ( [ [ - 1 , - 2 , - 1 , 2 ] , [ 1 , 0 , 1 , 4 ] ] ) #NEWLINE#
glColor3ub ( 0 , 255 , 0 ) #NEWLINE#
df . groupby ( 'A' , group_keys = False ) . apply ( lambda x : x . ix [ x . B . idxmax ( ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
do_something ( ) #NEWLINE#
cv2 . imshow ( 'frame' , frame ) #NEWLINE#
self . tcp_socket . connect ( '0.0.0.0' , '6767' ) #NEWLINE#
f . close ( ) #NEWLINE#
x [ : : 2 , 1 : : 2 ] #NEWLINE#
setattr ( instance , function . __name__ , function ) #NEWLINE#
print ( [ i for i in range ( len ( list ) ) if list [ i ] == '\n' ] ) #NEWLINE#
df . groupby ( level = 'Project' ) . last ( ) #NEWLINE#
np . exp ( 1.3938 ) #NEWLINE#
a , b = my_list [ : 2 ] #NEWLINE#
req . add_header ( 'Content-Length' , '%d' % len ( data ) ) #NEWLINE#
{ 'a' : 'A' , 'b' : 'B' } #NEWLINE#
[ a [ i ] for i in np . argsort ( a ) [ - 2 : ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
s = 'please#SPACE#answer#SPACE#my#SPACE#question' #NEWLINE# len ( s ) #NEWLINE#
url ( '^login/$' , views . login , name = 'login' ) , #NEWLINE#
ax [ 0 ] . imshow ( arr , interpolation = 'nearest' , cmap = cmap ) #NEWLINE#
df [ 'NEW_DATE' ] = df [ 'ACC_DATE' ] - pd . Timedelta ( days = 365 ) #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#(h)' ) #NEWLINE#
[ { 'column1' : 'value_column1' } , { 'column2' : 'value_column2' } ] #NEWLINE#
np . allclose ( r1 , r2 ) #NEWLINE#
emp . save ( ) #NEWLINE#
[ 1 , 3 , 4 , 5 , 6 , 7 , 10 , 11 , 12 , 13 , 14 , 15 ] #NEWLINE#
requests . get ( endpoint_url , verify = '/path/to/file.crt' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
[ ( ord ( x ) % 32 ) for x in char1 [ 0 ] ] #NEWLINE#
os . makedirs ( dir ) #NEWLINE#
os . makedirs ( mypath ) #NEWLINE#
t [ 'foo' ] [ 'spam' ] #NEWLINE#
list1 , list2 = f ( ) #NEWLINE#
cc . send ( 'starttls\r\n' ) #NEWLINE#
pygame . joystick . init ( ) #NEWLINE#
ipython . magic ( 'timeit#SPACE#abs(-42)' ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
[ substring . strip ( ) for substring in string . split ( ',' ) ] #NEWLINE#
plt . gcf ( ) . canvas . get_supported_filetypes_grouped ( ) #NEWLINE#
first3 = numpy . dstack ( firstmatrices ) #NEWLINE#
return super ( HMM , self ) . __call__ ( PriorProbs ) #NEWLINE#
[ { 'play' : 5.0 , 'uid' : 'abc' , 'id' : 1 } , { 'play' : 1.0 , 'uid' : 'def' , 'id' : 2 } ] #NEWLINE#
df . reindex ( stk_list , level = 0 ) #NEWLINE#
del c [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
os . remove ( i ) #NEWLINE#
plt . show ( ) #NEWLINE#
float ( 'inf' ) < Ellipsis #NEWLINE#
d . strftime ( '%s' ) #NEWLINE#
func ( ) #NEWLINE#
string_val = '' . join ( choice ( lowercase ) for i in range ( n ) ) #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
GTK_ICONS = os . path . join ( 'share' , 'icons' ) #NEWLINE#
d = dict ( map ( str . split , list1 ) ) #NEWLINE#
time . strptime ( example , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
np . array ( [ arr [ ( [ 0 , n ] ) , : ] , arr [ : , ( [ 0 , n ] ) ] . T ] ) . ravel ( ) #NEWLINE#
random . choice ( [ True , False ] ) #NEWLINE#
feature3 = [ d . get ( 'Feature3' ) for d in a ] #NEWLINE#
[ x for x , _ in lst ] #NEWLINE#
( abs ( x ) + x ) / 2 #NEWLINE#
mydtype = np . dtype ( ( np . void , arr . dtype . itemsize * arr . shape [ 1 ] * arr . shape [ 2 ] ) ) #NEWLINE#
cgi . parse_qsl ( qs ) #NEWLINE#
s . sendmail ( 'xyz@gmail.com' , [ 'xyz@gmail.com' ] , msg . as_string ( ) ) #NEWLINE#
dict1 . update ( [ ( key , dict2 [ key ] ) for key in list ( dict2 . keys ( ) ) ] ) #NEWLINE#
ax . scatter ( x , y , z , zdir = 'z' , c = 'red' ) #NEWLINE#
df . groupby ( [ 'Year' , 'Fungicide' ] ) . sum ( ) . unstack ( ) . plot ( ) #NEWLINE#
pd . read_csv ( StringIO ( s ) , parse_dates = [ 0 ] , date_parser = parser ) #NEWLINE#
root . findall ( 'owl:Class' , my_namespaces ) #NEWLINE#
Peers . select ( ) . where ( ( Peers . user == 'foo' ) & Peers . deleted >> None ) #NEWLINE#
plt . legend ( [ arrow ] , [ 'My#SPACE#label' ] ) #NEWLINE#
__import__ ( 'pkg_resources' ) . declare_namespace ( __name__ ) #NEWLINE#
blogpost . tags [ : ] = new_tags #NEWLINE#
[ 'barker' , 'baker' , 'bismark' , 'park' ] #NEWLINE#
d [ 'a' ] [ 'b' ] [ 'c' ] #NEWLINE#
int_list = map ( int , re . findall ( '\\d+' , data ) ) #NEWLINE#
redirect ( request . path ) #NEWLINE#
ax = df . plot ( kind = 'bar' , rot = 0 ) #NEWLINE#
plt . ylabel ( 'y-axis' ) #NEWLINE#
sys . path . append ( os . path . normpath ( os . path . join ( SCRIPT_DIR , PACKAGE_PARENT ) ) ) #NEWLINE#
re . sub ( '\\s' , '' , string ) . split ( ',' ) #NEWLINE#
csvdata_old = csvdata . copy ( ) #NEWLINE#
sys . path . append ( '/home/you/gyp' ) #NEWLINE#
cv . SaveImage ( 'patch.jpg' , patch ) #NEWLINE#
self . send_header ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
return pd . DataFrame ( np . random . randn ( n , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE#
losses = tf . reshape ( tf . concat ( 1 , losses ) , [ - 1 , size ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
with open ( 'words.txt' ) as f : #NEWLINE# #INDENT# [ line . split ( ) for line in f ] #NEWLINE#
os . system ( 'grep#SPACE#one#SPACE#file_1.txt' ) #NEWLINE#
model . compile ( loss = 'binary_crossentropy' , optimizer = sgd3 ) #NEWLINE#
dict ( zip ( range ( 1 , 5 ) , count ( 7 ) ) ) #NEWLINE#
parser . parse_args ( [ '--test2' , '2' , '--test1' , '1' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
x , y = zip ( * [ l . split ( ) for l in f ] ) #NEWLINE#
np . genfromtxt ( np . array ( [ '1' , '2' , '3.14' , '1e-3' , 'b' , 'nan' , 'inf' , '-inf' ] ) ) #NEWLINE#
len ( set ( map ( tuple , M ) ) ) == len ( M ) #NEWLINE#
Superlist . __init__ #NEWLINE#
return ( self . x , self . y , self . z ) [ item ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . imshow ( image , interpolation = 'nearest' , cmap = 'gray' ) #NEWLINE#
print ( '#SPACE#' . join ( get_words ( [ 'o' , 'c' , 'a' , 't' ] ) ) ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'German' ) #NEWLINE#
alist . sort ( key = operator . attrgetter ( 'foo' ) ) #NEWLINE#
admin . site . register ( Product , padmin ) #NEWLINE#
test ( ) #NEWLINE#
"""1989,#SPACE#1990""" . split ( ',#SPACE#' ) #NEWLINE#
warnings . warn ( 'deprecated' , DeprecationWarning ) #NEWLINE#
print ( i , '->' , format ( i , ',' ) . split ( ',' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_xlabel ( '' ) #NEWLINE#
s = sorted ( s , key = operator . itemgetter ( 1 , 2 ) ) #NEWLINE#
return '' . join ( digits ) #NEWLINE#
y [ ( 1 < x ) & ( x < 5 ) ] #NEWLINE#
data = np . fromregex ( fname , regexp , dtype = 'f' ) #NEWLINE#
plt . savefig ( 'speed_400.png' ) #NEWLINE#
pg . init ( ) #NEWLINE#
first_elements , second_elements = map ( list , zip ( * data ) ) #NEWLINE#
print ( '1' ) #NEWLINE#
key_precedence = dict ( ( x , n ) for n , x in enumerate ( string_list ) ) #NEWLINE#
example = csv . writer ( open ( 'test.csv' , 'wb' ) , dialect = 'excel' ) #NEWLINE#
ax . set_zlim ( - 10 , 0 ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
s . connect ( sockaddr ) #NEWLINE#
result . extend ( list ( t ) ) #NEWLINE#
ax . axis ( 'tight' ) #NEWLINE#
bytes = cell . encode ( 'utf8' ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
array ( [ 0.35082878 , 0.27012396 , 0.26986049 , 0.39887847 , 0.36116341 ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
EMAIL_HOST_PASSWORD = 'password' #NEWLINE#
plt . show ( ) #NEWLINE#
[ tuple ( x ) for x in data_set . to_records ( index = False ) ] #NEWLINE#
fixed = value . replace ( '"' , '\\"' ) #NEWLINE#
fixed = value . replace ( '"' , '' ) #NEWLINE#
re . findall ( '[a]' , 'abcd' ) #NEWLINE# re . findall ( '[^a]' , 'abcd' ) #NEWLINE#
return render_to_response ( 'app/index.html' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
bin / qrproject #NEWLINE#
fts = ustyle . create_featuretypestyle ( ) #NEWLINE#
urllib . parse . quote ( s . encode ( 'utf8' ) ) #NEWLINE#
plt . annotate ( 'Something' , xy = ( 0.05 , 0.95 ) , xycoords = 'axes#SPACE#fraction' ) #NEWLINE#
plt . legend ( loc = 'best' ) #NEWLINE#
a . add ( [ 1 , 2 ] ) #NEWLINE#
return os . path . join ( os . path . dirname ( parent ) , template ) #NEWLINE#
m = re . search ( '^(.*?)(?:Arguments:(.*?))?(?:Returns:(.*?))?$' , doc , re . DOTALL ) #NEWLINE#
time . mktime ( datetime_object . timetuple ( ) ) #NEWLINE#
Label ( root , text = 'Text#SPACE#to#SPACE#get' ) . grid ( row = 0 , sticky = W ) #NEWLINE#
[ [ 7 , 6 , 5 ] , [ 4 , 3 ] , [ 2 , 1 ] ] #NEWLINE#
a = np . array ( [ [ 1 , 1 ] , [ 0 , 1 ] ] ) #NEWLINE#
plt . close ( 'all' ) #NEWLINE#
employee . license_set . all ( ) #NEWLINE#
subprocess . call ( [ 'java' , '-jar' , 'temp.jar' , '-Xmx1024m' , '-Xms256m' ] ) #NEWLINE#
print ( s . encode ( 'latin1' ) . decode ( 'utf-8' ) ) #NEWLINE#
{ 'url' : 'http://db.tt/APqhX1' , 'expires' : 'Wed,#SPACE#17#SPACE#Aug#SPACE#2011#SPACE#02:34:33#SPACE#+0000' } #NEWLINE#
input = open ( fullpath , 'r' ) #NEWLINE#
[ '>Safr10' , 'T' , '110' ] [ '>Safr07' , 'T' , '78' ] #NEWLINE#
inspect . getargspec ( g ) #NEWLINE#
self . start_urls = [ 'http://www.bankofwow.com/' ] #NEWLINE#
plt . show ( ) #NEWLINE#
cherrypy . quickstart ( Root ( ) ) #NEWLINE#
conn . close ( ) #NEWLINE#
map ( lambda x : 3 * x , [ 111 , 222 , 333 ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
os . close ( f ) #NEWLINE#
[ j for i in sequence_list for j in rex . split ( i ) ] #NEWLINE#
limit = int ( user_data [ 'limit' ] ) #NEWLINE#
result [ : a . shape [ 0 ] , : a . shape [ 1 ] ] = a #NEWLINE#
return func ( ) #NEWLINE#
user_count = serializers . IntegerField ( source = 'user_set.count' , read_only = True ) #NEWLINE#
df . iloc [ 0 , df . columns . get_loc ( 'COL_NAME' ) ] = x #NEWLINE#
widget2 . grid ( row = 0 , column = 1 ) #NEWLINE#
dic . pop ( 'c' , 0 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
numpy . linalg . norm ( A - B , numpy . inf ) #NEWLINE#
print ( int ( '0x77' , 16 ) ) #NEWLINE#
f . seek ( 0 , 0 ) #NEWLINE#
myString . index ( 's' ) #NEWLINE#
for i in range ( 0 , 9 , 2 ) : #NEWLINE# #INDENT# dosomething ( i ) #NEWLINE#
df . update ( df . loc [ idx [ : , ( mask_1 ) ] , idx [ ( [ mask_2 ] ) , : ] ] . fillna ( value = 0 ) ) #NEWLINE#
nx . draw ( G ) #NEWLINE#
QtNetwork . QSslSocket . supportsSsl ( ) #NEWLINE#
p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
text ( 1 , 1 , 'foobar' , rasterized = True ) #NEWLINE#
map_string_string ( { 'a' : 'b' } ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_xlabel ( 'Oxygen#SPACE#level#SPACE#[ppm]' ) #NEWLINE#
result = np . einsum ( 'ijk,i#SPACE#->#SPACE#jk' , data , vector ) #NEWLINE#
set ( map ( itemgetter ( 0 ) , l1 ) ) & set ( map ( itemgetter ( 0 ) , l2 ) ) #NEWLINE#
re . sub ( '\\((\\w+)\\)' , '\\1' , s ) #NEWLINE#
return HttpResponse ( json . dumps ( { 'foo' : 'bar' } ) , mimetype = 'application/json' ) #NEWLINE#
return etree . fromstring ( s , parser = utf8_parser ) #NEWLINE#
m2 [ np . array ( m2 [ : , ( 1 ) ] > 10 ) [ : , ( 0 ) ] ] #NEWLINE#
format ( 3735928559 , 'x' ) #NEWLINE#
request . user_agent #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#medicoes#SPACE#values#SPACE#(?,?,?,?,?,?,?)' , keys ) #NEWLINE#
self . configure ( relief = 'raised' ) #NEWLINE#
df3 [ 'color' ] = df3 [ 'fruit_name' ] . map ( dict ( colors ) ) . fillna ( 'unknown' ) #NEWLINE#
pckl_file . close ( ) #NEWLINE#
conn . execute ( 'insert#SPACE#into#SPACE#example#SPACE#values#SPACE#(?,#SPACE#?);' , ( 1 , 201 ) ) #NEWLINE#
shutil . rmtree ( sub_folder ) #NEWLINE#
print ( ( 'P-Value:' , pval ) ) #NEWLINE#
( now . astype ( 'uint64' ) / 1000000.0 ) . astype ( 'uint32' ) #NEWLINE#
[ ( my_array + [ i ] ) for i in input_elements ] #NEWLINE#
pygame . font . init ( ) #NEWLINE#
sympy . solve ( l - r , c ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
dt . strftime ( '%Y%m%d' ) #NEWLINE#
self . worker . start ( ) #NEWLINE#
a = [ [ ( 0 ) for _ in range ( ROWS ) ] for _ in range ( COLUMNS ) ] #NEWLINE#
print ( os . environ . get ( 'PYTHONPATH' , '' ) ) #NEWLINE#
collections . Counter ( [ 'a' , 'a' , 'b' ] ) #NEWLINE#
df = pd . DataFrame ( { 'Y' : [ 'A' , 'B' , 'B' , 'A' , 'B' ] , 'Z' : [ 10 , 5 , 6 , 11 , 12 ] } ) #NEWLINE#
print ( sys . _getframe ( ) . f_code . co_name ) #NEWLINE#
msgBox . addButton ( QtGui . QPushButton ( 'Cancel' ) , QtGui . QMessageBox . RejectRole ) #NEWLINE#
pyplot . hist ( x , bins , alpha = 0.5 , label = 'x' ) #NEWLINE#
print ( [ f for f in glob . glob ( '/tmp/*' ) if os . path . isfile ( f ) ] ) #NEWLINE#
df = df [ [ 'user' , 'item' , 'value' ] ] . reset_index ( drop = True ) #NEWLINE#
[ ( x ** 2 ) for x in range ( 10 ) if x < 7 ] #NEWLINE#
return [ 'Amelie' , 'John' , 'Carmen' ] #NEWLINE#
print ( webb . get_ip ( 'your-web-page-url' ) ) #NEWLINE#
thingy1 . f ( ) #NEWLINE#
print ( 'Hello#SPACE#world!' ) #NEWLINE#
self . panel = wx . Panel ( self ) #NEWLINE#
body = body . decode ( 'utf-8' ) #NEWLINE#
configfiles = glob . glob ( 'C:\\Users\\sam\\Desktop\\**\\*.txt' , recursive = True ) #NEWLINE#
f = anotherdecorator ( lambda x : x * 2 ) #NEWLINE#
np . ma . array ( a , mask = mask ) #NEWLINE#
request . form . getlist ( 'address[US]' ) #NEWLINE#
response . content_disposition = 'attachment;#SPACE#filename="my_filename.txt"' #NEWLINE#
np . where ( np . char . find ( x , '.' ) > - 1 ) #NEWLINE#
list ( set ( a ) & set ( b ) ) #NEWLINE#
return '#SPACE#' . join ( reversed ( out ) ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
json . dump ( data , sys . stdout , indent = 2 ) #NEWLINE#
pl . plot ( [ x1 , x2 ] , [ 0 , 0 ] , 'o' ) #NEWLINE#
[ x for x in lst if float ( x . split ( ) [ - 1 ] ) not in s ] #NEWLINE#
newDict . append ( { 'name' : newList [ i ] , 'hieght' : newList [ i + 1 ] } ) #NEWLINE#
sess = tf . Session ( config = tf . ConfigProto ( log_device_placement = True ) ) #NEWLINE#
sentence = re . sub ( '\\bbean\\b' , 'robert' , sentence ) #NEWLINE#
a [ : , ( None ) ] - b #NEWLINE#
print ( occs [ 'ĺ' ] ) #NEWLINE#
"""abc{0}""" . format ( 9 ) #NEWLINE#
return StringIO ( ) #NEWLINE#
ax2 . set_ylim ( [ 0 , 1 ] ) #NEWLINE#
r . destroy ( ) #NEWLINE#
raise TypeError ( 'bool(NA)#SPACE#is#SPACE#undefined.' ) #NEWLINE#
return str1 . replace ( str2 , str2 . upper ( ) ) #NEWLINE#
paragraph . text = 'new#SPACE#text#SPACE#containing#SPACE#ocean' #NEWLINE#
self . assertEqual ( kwargs [ 'subject' ] , 'Hello#SPACE#World' ) #NEWLINE#
[ 'big' , 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' ] #NEWLINE#
[ 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
df = df . set_index ( 'idx' ) #NEWLINE#
array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE#
plt . gca ( ) . set_aspect ( 'equal' ) #NEWLINE#
return { 'ss' : 'ssssssssss' } #NEWLINE#
url ( '^tokenapi/' , include ( router . urls ) ) , #NEWLINE#
self . transport . write ( data . encode ( ) ) #NEWLINE#
np . array ( lists ) #NEWLINE#
im . save ( 'PNG' ) #NEWLINE#
[ ( y if y not in b else other_value ) for y in a ] #NEWLINE#
array ( [ [ 100 , 200 ] , [ 255 , 255 ] ] , dtype = uint16 ) #NEWLINE#
s [ - 4 : ] . rjust ( len ( s ) , '*' ) #NEWLINE#
np . in1d ( a , [ 14 , 16 , 18 ] ) #NEWLINE#
df . between_time ( '9:00' , '10:00' ) #NEWLINE#
t . start ( ) #NEWLINE#
{ 'color' : 'orange' , 'data' : 'none' , 'size' : 'big' } #NEWLINE#
driver . execute_script ( 'arguments[0].scrollIntoView();' , reviews [ - 1 ] ) #NEWLINE#
[ 'Porsche' , '230,000' , '10,000km' ] , [ 'Porsche' , '200,210' , '10,000km' ] #NEWLINE#
parser . parse_args ( read_my_file ( sys . argv [ 1 : ] ) ) #NEWLINE#
l1 = np . array ( [ a1 , b1 ] ) #NEWLINE#
"""""" . join ( l ) #NEWLINE#
any ( [ 2 , 3 ] == v [ i : i + 2 ] for i in range ( len ( v ) - 1 ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
browser . get ( url ) #NEWLINE#
logging . info ( 'info' ) #NEWLINE#
measure . grid ( row = 0 , column = 0 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
where ( ( my_array > 3 ) * ( my_array < 7 ) ) #NEWLINE#
target_file . write ( line . replace ( ',' , ';' ) . replace ( '|' , ',' ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
os . close ( fh2 ) #NEWLINE#
"""Demo#SPACE#(¬#SPACE#Δημώ)""" #NEWLINE#
T . setStyle ( TableStyle ( [ ( 'TEXTCOLOR' , ( 0 , 1 ) , ( 1 , 1 ) , colors . black ) ] ) ) #NEWLINE#
value = next ( v for i , v in enumerate ( d . values ( ) ) if i == index ) #NEWLINE#
m [ : , : 1 ] . shape #NEWLINE#
somestring = re . sub ( '#SPACE#rec$' , '' , somestring ) #NEWLINE#
pl . show ( ) #NEWLINE#
{ x [ 0 ] for x in list1 } & { y [ 0 ] for y in list2 } #NEWLINE#
out_im . putpalette ( ( 0 , 0 , 0 , 255 , 0 , 0 , 0 , 255 , 0 , 255 , 255 , 0 ) ) #NEWLINE#
tmp [ : , 1 : ] += a [ : , : - 1 ] #NEWLINE#
return os . path . abspath ( os . path . expanduser ( path ) ) #NEWLINE#
fwrite . close ( ) #NEWLINE#
int ( mylist [ 0 ] [ 0 ] ) if mylist [ 0 ] [ 0 ] . strip ( ) else 0 #NEWLINE#
example = [ [ x . replace ( '\r\n' , '' ) for x in l ] for l in example ] #NEWLINE#
print ( re . sub ( '(?s)(.)(?=\\1)' , '' , 'aabbccaabb' ) ) #NEWLINE#
f = lambda X , model , ** kw : cost ( X , model , sparse = np . random . rand ( 10 , 10 ) , ** kw ) #NEWLINE#
e = next ( iter ( S ) ) #NEWLINE#
[ { 'c' : '2' } , { 'b' : '2' } ] #NEWLINE#
plt . show ( ) #NEWLINE#
my_fun ( a = 'abc' , b = 123 ) #NEWLINE#
parseaddr ( '[invalid!email]' ) #NEWLINE#
word = word [ : len ( word ) ] + ',\n' #NEWLINE#
sorted ( L , key = lambda x : x [ 0 ] / ( x [ 1 ] * 1.0 ) ) #NEWLINE#
print ( '{}-{}({}):{}({})' . format ( l1 [ 0 ] , l1 [ 1 ] , l1 [ 2 ] , l2 [ 1 ] , l2 [ 2 ] ) ) #NEWLINE#
pprint . pprint ( { 'second' : 1 , 'first' : 0 } ) #NEWLINE#
<STR0> = models . CharField ( max_length = 140 , default = 'SOME#SPACE#STRING' ) #NEWLINE#
print ( '\n' . join ( matches ) ) #NEWLINE#
self . main ( ) #NEWLINE#
alphs = '' . join ( chr ( i ) for i in range ( 97 , 123 ) ) #NEWLINE#
shutil . rmtree ( '/path/to/directory/that/contains/pdfs' ) #NEWLINE#
'blah' * 5 #NEWLINE#
( df * weight [ 0 ] ) . sum ( 1 ) #NEWLINE#
list ( range ( 3 , 7 ) ) #NEWLINE#
pygame . draw . rect ( screen , black , ( 0 , 0 , width , height ) , 0 ) #NEWLINE#
return super ( SageSerializer , self ) . run_validation ( data ) #NEWLINE#
a , b , c , d = [ 1 , 2 , 3 ] #NEWLINE#
return int ( n ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#an#SPACE#admin!' , os . getpid ( ) , 'params:#SPACE#' , sys . argv ) #NEWLINE#
L1 [ 0 : 1 ] = [ 'cake' ] #NEWLINE#
raise ValueError ( 'Found#SPACE#more#SPACE#than#SPACE#one' ) #NEWLINE#
f . write ( struct . pack ( '2i' , * array . shape ) ) #NEWLINE#
test ( ) #NEWLINE#
dest = dict ( chain . from_iterable ( map ( dict . items , list_of_dicts ) ) ) #NEWLINE#
parser . add_option ( '--xls' , action = 'store_true' , dest = 'xls' ) #NEWLINE#
self . __dict__ . update ( b ) #NEWLINE#
[ 'ab' , 'abc' , 'aÃ¡' ] #NEWLINE#
"""foo#SPACE#and#SPACE#foo,#SPACE#or#SPACE#foobar#SPACE#and#SPACE#not#SPACE#foo.""" . split ( '#SPACE#' ) #NEWLINE#
return pickle . load ( f ) #NEWLINE#
df [ df . apply ( pd . Series . nunique , axis = 1 ) == 1 ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1969' , '35797666653.6002' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1970' , '39062044200.4362' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1971' , '45271917893.3429' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1972' , '54936622019.8224' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1973' , '69564884441.8264' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1974' , '132123836511.468' ] #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1975' , '147666389454.913' ] #NEWLINE#
keep_this = f ( ) [ 1 ] #NEWLINE#
sys . stdout . write ( 'hello#SPACE#world\n' ) #NEWLINE#
listbox . insert ( 'end' , 'A#SPACE#list#SPACE#item' ) #NEWLINE#
sorted ( l1 ) #NEWLINE#
driver = webdriver . Firefox ( capabilities = caps , firefox_profile = profile ) #NEWLINE#
msg . send ( ) #NEWLINE#
es = Elasticsearch ( ) #NEWLINE#
self . setWindowTitle ( 'Quit#SPACE#button' ) #NEWLINE#
{ { 'Number:#SPACE#%d' % variable } } #NEWLINE#
plt . hist ( a , bins ) #NEWLINE#
p . poll ( ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
f . close ( ) #NEWLINE#
plt . title ( 'Original#SPACE#Code' ) #NEWLINE#
plt . ylabel ( 'Some#SPACE#label' ) #NEWLINE#
f . close ( ) #NEWLINE#
x = Example ( ) #NEWLINE#
file . write ( port . read ( ) ) #NEWLINE#
df . plot ( x = 'x' , y = 'y' , kind = 'scatter' ) #NEWLINE#
title = re . search ( '<title>(.*)</title>' , html , re . IGNORECASE ) . group ( 1 ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
list ( collections . deque ( ( 1 , 2 , 3 ) ) ) #NEWLINE#
210.184175597721 , 210.184175597721 , 210.184175597721 , 210.184175597721 #NEWLINE#
print ( test ( ) ) #NEWLINE#
proc . stdin . write ( '%d\n' % i ) #NEWLINE#
a . append ( 3 ) #NEWLINE#
with open ( 'yyy.mp4' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( open ( 'xxx.mp4' , 'rb' ) . read ( ) ) #NEWLINE#
df . columns = [ x . lower ( ) . replace ( '#SPACE#' , '_' ) for x in df . columns ] #NEWLINE#
image = gtk . image_new_from_pixbuf ( pixbuf ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
new_list = [ sorted ( sublist , key = '*/+-' . index ) for sublist in my_lists ] #NEWLINE#
pandas . read_json ( 'input.json' ) . to_excel ( 'output.xlsx' ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
metadata . reflect ( engine ) #NEWLINE#
map ( lambda x : f ( x , fixed ) , srclist ) #NEWLINE#
f . close ( ) #NEWLINE#
br . set_handle_refresh ( mechanize . _http . HTTPRefreshProcessor ( ) , max_time = 1 ) #NEWLINE#
data . ix [ : , ( 'Ralph' ) ] #NEWLINE#
ws . cell ( 'A1' ) . value = '=HYPERLINK("#sheet2!E5","Link#SPACE#name")' #NEWLINE#
[ '/test/fruit/apple' , '/test/fruit/pineapple' , '/test/animal/python' ] #NEWLINE#
pl . savefig ( 'arrow_axis.png' , dpi = 300 ) #NEWLINE#
os . path . getsize ( path ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
appdata = path . expanduser ( path . join ( '~' , '.' + APPNAME ) ) #NEWLINE#
os . unlink ( path ) #NEWLINE#
super ( Form , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sys . stdout . write ( '\x1b]2;Another#SPACE#Title\x07' ) #NEWLINE#
ax . add_patch ( circle1 ) #NEWLINE#
'2' , '0' , '1' , '0' , ':' , '0' , '8' , ':' , '0' , '1' , '#SPACE#' , '2' , '3' , ':' , '4' , '5' , ':' , '4' , '6' , '\x00' #NEWLINE#
df . columns = col_list #NEWLINE#
gtk . main ( ) #NEWLINE#
dis . dis ( compile ( '(((a,b,c)))=(((1,2,3)))' , '' , 'exec' ) ) #NEWLINE#
np . asarray ( 'abc' ) #NEWLINE#
QTcpSocket . __init__ ( self ) #NEWLINE#
A = dot ( A , R . T ) #NEWLINE#
ax1 . tick_params ( axis = 'x' , ** tkw ) #NEWLINE#
[ ( x + y ) for x , y in grouper ( 2 , q ) ] #NEWLINE#
ssh . close ( ) #NEWLINE#
{ ( x , y ) for x in r for y in r if x + 2 == y } #NEWLINE#
df . set_index ( [ 'Symbol' , 'TimeStamp' ] ) . sortlevel ( 0 ) #NEWLINE#
date = models . DateTimeField ( ) #NEWLINE#
wx . Icon ( sys . argv [ 0 ] , wx . BITMAP_TYPE_ICO ) #NEWLINE#
[ ( [ 0 ] * 8 ) for x in range ( 8 ) ] #NEWLINE#
print ( '{0}#SPACE#Here#SPACE#is#SPACE#a#SPACE#really#SPACE#long#SPACE#sentence#SPACE#with#SPACE#{1}' . format ( 3 , 5 ) ) #NEWLINE#
unittest . main ( argv = [ sys . argv [ 0 ] ] ) #NEWLINE#
array2 = [ int ( x == 4 ) for x in array1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
html . escape ( string ) #NEWLINE#
print ( '£' ) #NEWLINE#
full_url = request . build_absolute_uri ( None ) #NEWLINE#
max ( item [ 1 ] for item in alkaline_earth_values ) #NEWLINE#
sorted ( list ( d . items ( ) ) , lambda a , b : b [ 1 ] - a [ 1 ] or a [ 0 ] - b [ 0 ] ) #NEWLINE#
numbers = [ n for n in numbers if n >= 20 ] #NEWLINE#
comparable_date ( '01/Aug/1995:23:59:53' ) #NEWLINE#
next ( i for i , j in enumerate ( a ) if j . startswith ( 'a' ) ) #NEWLINE#
[ ( next ( z ) if i < 0 else i ) for i in y ] #NEWLINE#
unpack ( '<IIII' , md5 ( 'thestring' ) . digest ( ) ) [ 0 ] #NEWLINE#
output = open ( os . path . join ( dir_path , file_name ) , 'wb' ) #NEWLINE#
np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
proc . wait ( ) #NEWLINE#
arr . tolist ( ) #NEWLINE#
print ( Model . objects . get ( pk = 1 ) . ranking ) #NEWLINE#
equation1 ( ** dict_of_parameters ) #NEWLINE#
n = np . apply_along_axis ( np . linalg . norm , 1 , a ) #NEWLINE#
c . set_edgecolor ( 'face' ) #NEWLINE#
[ ( x , y ) for x , y in zip ( it , it1 ) ] #NEWLINE#
my_list . insert ( index , item ) #NEWLINE#
soup . find_all ( 'a' , { 'class' : 'black' } ) #NEWLINE#
hash ( set ( ) ) #NEWLINE#
1 , 2 , 3 , 1 #NEWLINE#
re . sub ( 'url((?:#[0-9]+)?)' , 'new_url\\1' , test1 ) #NEWLINE#
set ( [ ( 4 , 5 ) , ( 2 , 2 , 5 ) , ( 1 , 20 ) , ( 2 , 10 ) ] ) #NEWLINE#
f2 . close ( ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
group . plot ( x = 'saleDate' , y = 'MeanToDate' , title = str ( i ) ) #NEWLINE#
self . assertEqual ( 2 , 0 ) #NEWLINE#
[ k for k in l if 'Derived:#SPACE#' in k ] #NEWLINE#
f1 . writelines ( lines ) #NEWLINE#
A . extend ( B ) #NEWLINE#
connection . close ( ) #NEWLINE#
isinstance ( MyTransformedDict ( [ ( 'Test' , 'test' ) ] ) , dict ) #NEWLINE#
root . deiconify ( ) #NEWLINE#
return cv2 . rectangle ( eroded , ( 0 , 0 ) , ( x , y ) , ( 255 , 255 , 255 ) , 1 ) #NEWLINE#
df = pandas . concat ( [ df1 , df2 ] , axis = 1 ) #NEWLINE#
print ( '"%s":#SPACE#%x#SPACE#%x' % ( hashstr , hash , hash2 ) ) #NEWLINE#
result += [ ( g . start ( ) , g . group ( ) ) for g in re . compile ( 'AB' ) . finditer ( string ) ] #NEWLINE#
1 if ssf . type == 'Full' else 2 if ssf . type == 'Full#SPACE#(Instrumental)' else 3 if ssf . type == 'Shorts' else 4 if ssf . type == 'Loops' else 5 if ssf . type == 'Stems' else 0 #NEWLINE#
X_test = scaler . transform ( X_test ) #NEWLINE#
re . search ( re . escape ( stringB ) + '(.*?)' + re . escape ( stringC ) , stringA ) . group ( 1 ) #NEWLINE#
os . system ( 'echo#SPACE#"#SPACE#foo"#SPACE#>>#SPACE#/Users/bob/foostore.txt' ) #NEWLINE#
a [ a . argsort ( ) [ - 10 : ] ] #NEWLINE#
QtGui . QTableView . __init__ ( self , * args , ** kwargs ) #NEWLINE#
print ( '\n' . join ( map ( '' . join , zip ( * grid ) ) ) ) #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 8 , 10 , 12 ] , [ 6 , 8 , 6 ] ] #NEWLINE#
list ( x ) #NEWLINE#
s1 = pd . merge ( df1 , df2 , how = 'left' , on = [ 'Year' , 'Week' , 'Colour' ] ) #NEWLINE#
test [ 1 ] . index + pd . DateOffset ( hours = 16 ) #NEWLINE#
legend . get_title ( ) . set_fontsize ( '6' ) #NEWLINE#
eval ( 'L[%s]' % S ) #NEWLINE#
[ ( ( x + ( x - 1 ) ) / 2 ) for x in list_of_nums ] #NEWLINE#
print ( input [ indices [ ( 0 <= indices ) & ( indices < 5 ) ] ] ) #NEWLINE#
f . close ( ) #NEWLINE#
d . pop ( your_key ) #NEWLINE#
plt . show ( ) #NEWLINE#
array . array ( 'i' ) #NEWLINE#
print ( ( 'outer:#SPACE#' , x ) ) #NEWLINE#
s = set ( str ( 4059304593 ) ) #NEWLINE#
result = ( M [ : , : 9 ] * N [ : 9 , : ] . T ) . sum ( 1 ) #NEWLINE#
queue . Queue ( maxsize = 0 ) #NEWLINE#
[ i for i in itertools . chain ( * itertools . zip_longest ( l1 , l2 ) ) if i is not None ] #NEWLINE#
( lambda i : lambda x : x % i ) ( i ) #NEWLINE#
session . query ( inc_type_md_col ) . filter ( cnt_col > 0 ) #NEWLINE#
zip ( itertools . repeat ( ls [ 0 ] ) , ls [ 1 : ] ) #NEWLINE#
s . plot ( kind = 'bar' , color = my_colors ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
window . show_all ( ) #NEWLINE#
ax . set_ylim ( [ 0 , 5 ] ) #NEWLINE#
s . replace ( 'CDEFG' , pattern ) . split ( '|' ) #NEWLINE#
MyClass . objects . order_by ( 'my_integer' , '-created_ts' ) . distinct ( 'my_integer' ) #NEWLINE#
np . delete ( np . arange ( 11 ) , np . s_ [ 3 : 7 ] ) #NEWLINE#
safe_cast ( 'tst' , int , 0 ) #NEWLINE#
self . process . start ( ) #NEWLINE#
result = [ key for key , value in dict . items ( ) if value == min_value ] #NEWLINE#
[ x for x in [ 'a' , 'b' , 'c' , 'd' , 'e' ] if x not in [ 'b' , 'c' ] ] #NEWLINE#
source . groupby ( [ 'Country' , 'City' ] ) . agg ( lambda x : stats . mode ( x ) [ 0 ] [ 0 ] ) #NEWLINE#
ob = MyModel . objects . select_for_update ( ) . <STR0> ( pk = 1 ) #NEWLINE#
dict . fromkeys ( list ( range ( 2 ) ) , object ( ) ) #NEWLINE#
pd . set_option ( 'display.expand_frame_repr' , False ) #NEWLINE#
plt . plot ( x , y1 ) #NEWLINE#
df [ 'a' ] % df [ 'c' ] #NEWLINE#
main ( ) #NEWLINE#
window . attributes ( '-topmost' , 1 ) #NEWLINE#
f . flush ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""""" . join ( struct . pack ( '>B' , x ) for x in vals ) #NEWLINE#
df . query ( 'color#SPACE#not#SPACE#in#SPACE#@exclude' ) #NEWLINE#
next ( ( e for e in mylist if my_criteria ( e ) ) , None ) #NEWLINE#
np . savetxt ( your_output_file , np . array ( data ) , delimiter = '\t' ) #NEWLINE#
[ v [ 0 ] for v in sorted ( list ( dict . items ( ) ) , key = lambda k_v : ( - k_v [ 1 ] , k_v [ 0 ] ) ) ] #NEWLINE#
print ( template . render ( ) ) #NEWLINE#
my_list = [ 1 , 2 , 3 , 4 ] #NEWLINE#
print ( json . dumps ( jsonobj ) ) #NEWLINE#
string . ascii_uppercase + string . digits #NEWLINE#
session . query ( self . stats . c . ID , func . max ( self . stats . c . STA_DATE ) ) #NEWLINE#
any ( ( myrow1 == x ) . all ( ) for x in myarray ) #NEWLINE#
pandas . read_csv ( s ) #NEWLINE#
ax . xaxis . set_major_formatter ( mdates . DateFormatter ( '%Y.%m.%d' ) ) #NEWLINE#
open ( datetime . datetime . now ( ) . ctime ( ) , 'w' ) . write ( 'foo' ) #NEWLINE#
return [ y for y in listOfLists if y [ x ] . lstrip ( '-' ) . isdigit ( ) ] #NEWLINE#
line = line . rstrip ( '\r\n' ) #NEWLINE#
x , y = y , x + y #NEWLINE#
numpy . all ( rolling_window ( a , 3 ) == [ 8 , 4 , 0 ] , axis = 1 ) #NEWLINE#
date . strftime ( '%Y-%m-%d' ) #NEWLINE#
print ( '{0:<25}#SPACE#${1:.2f}' . format ( t , v ) ) #NEWLINE#
super ( Point , self ) . __init__ ( point , srid = srid ) #NEWLINE#
driver . get ( 'http://insta.friendorfollow.com' ) #NEWLINE#
y = [ i [ j ] for i in x for j in range ( len ( i ) ) ] #NEWLINE#
my_list = list ( my_set ) #NEWLINE#
plt . show ( ) #NEWLINE#
return first_type if all ( type ( x ) is first_type for x in iseq ) else False #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
run ( 'ls#SPACE#-t#SPACE#/usr/local/lib/backups#SPACE#|#SPACE#head#SPACE#-1' ) #NEWLINE#
any ( t . isupper ( ) for t in month [ 1 : ] ) #NEWLINE#
random . choice ( string . ascii_letters + string . digits ) #NEWLINE#
text = eval ( '[' + text + ']' ) #NEWLINE#
{ 'a' : 2 , 'b' : 3 } #NEWLINE#
[ s [ sum ( keys [ : i ] ) : sum ( keys [ : i ] ) + k ] for i , k in enumerate ( keys ) ] #NEWLINE#
cursor . execute ( 'UPDATE#SPACE#mytable#SPACE#SET#SPACE#col1#SPACE#=#SPACE#%s,#SPACE#col2#SPACE#=#SPACE#%s;' , [ arg1 , arg2 ] ) #NEWLINE#
return list ( [ x for x in mylist if x in pattern ] ) #NEWLINE#
sum ( i * j for i , j in zip ( v1 , v2 ) ) #NEWLINE#
data . groupby ( df [ 'date' ] . map ( is_in_range ) ) #NEWLINE#
train_likes_df [ 'time' ] = pd . to_datetime ( train_likes_df [ 'time' ] , unit = 's' ) #NEWLINE#
print ( 'Width#SPACE#%d,#SPACE#Height#SPACE#%d' % ( width , height ) ) #NEWLINE#
plt . rc ( 'legend' , ** { 'fontsize' : 6 } ) #NEWLINE#
sum ( map ( lambda x , y : bool ( x - y ) , a , b ) ) #NEWLINE#
tfactory = TTransport . TBufferedTransportFactory ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = 'polar' ) #NEWLINE#
User . objects . filter ( id = user_id ) . update ( name = 'tom' ) #NEWLINE#
sorted ( list ( structure . keys ( ) ) , key = lambda x : structure [ x ] [ 'sorting' ] ) #NEWLINE#
print ( list ( Counter ( l ) . items ( ) ) ) #NEWLINE#
s = sum ( b for a , b in zip ( list_1 , list_2 ) if a ) #NEWLINE#
run ( 'apt-get#SPACE#upgrade' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
model . objects . all ( ) #NEWLINE#
data = np . random . randint ( 0 , 10 , size = ( 100000 , 2 ) ) #NEWLINE#
print ( sys . version ) #NEWLINE#
a . append ( ( 1 , 2 , 4 ) ) #NEWLINE#
print ( '%.2f' % x ) #NEWLINE#
df = df . reindex ( columns = cols ) #NEWLINE#
df . dropDuplicates ( [ 'value' ] ) . show ( ) #NEWLINE#
writer . writerow ( 'my_utf8_string' ) #NEWLINE#
exp . evalf ( subs = { a : 6 , b : 5 , c : 2 } ) #NEWLINE#
( 54.458333 , 17.041667 , 31.945 ) , #NEWLINE#
( 54.458333 , 17.083333 , 31.866 ) , #NEWLINE#
df1 [ 'randomNumCol' ] = np . random . choice ( list ( range ( 1 , 6 ) ) , df1 . shape [ 0 ] ) #NEWLINE#
tup = tuple ( ( element . foo , element . bar ) for element in alist ) #NEWLINE#
settings . __dict__ #NEWLINE#
print ( '#SPACE#' . join ( re . findall ( pattern , 'HDMWhoSomeMONKEYThingX' ) ) ) #NEWLINE#
A . data = np . array ( [ 10 , 6 ] ) #NEWLINE#
master . mainloop ( ) #NEWLINE#
params = { arg : self . request . get_all ( arg ) for arg in self . request . arguments ( ) } #NEWLINE#
s3 . Object ( 'mybucket' , 'hello.txt' ) . put ( Body = open ( '/tmp/hello.txt' , 'rb' ) ) #NEWLINE#
req . add_header ( 'Content-Type' , 'application/json' ) #NEWLINE#
return '\n' . join ( [ '#SPACE#' . join ( ( a , b ) ) for a , b in zip ( list1 , list2 ) ] ) #NEWLINE#
dict ( list ( i . items ( ) ) [ 0 ] for i in L ) #NEWLINE#
A = P * D . sum ( axis = 1 ) - D . dot ( P ) #NEWLINE#
plt . hist ( x , bins = 20 ) #NEWLINE#
subprocess . Popen ( cmd ) . communicate ( ) #NEWLINE#
test ( ) #NEWLINE#
record = forms . ModelChoiceField ( queryset = table_obj . objects . all ( ) ) #NEWLINE#
oct ( os . stat ( 'test.txt' ) . st_mode & 511 ) #NEWLINE#
map ( max , arr ) #NEWLINE#
ax . set_xlabel ( 'x_values' ) #NEWLINE#
[ ( 7 , 20 ) , ( 23 , 39 ) ] #NEWLINE#
mail . Send ( ) #NEWLINE#
data = np . arange ( - 50 , 50 , 10 ) #NEWLINE#
print ( text . split ( '.' , 1 ) [ 0 ] ) #NEWLINE#
"""Lorem#SPACE#ipsum#SPACE#dolor#SPACE#sit#SPACE#amet,#SPACE#consectetur#SPACE#adipiscing#SPACE#elit,#SPACE#sed#SPACE#do#SPACE#eiusmod#SPACE#tempor#SPACE#incididunt#SPACE#ut#SPACE#labore#SPACE#et#SPACE#dolore#SPACE#magna#SPACE#aliqua.#SPACE#Ut#SPACE#enim#SPACE#ad#SPACE#minim#SPACE#veniam,#SPACE#quis#SPACE#nostrud#SPACE#exercitation#SPACE#ullamco#SPACE#laboris#SPACE#nisi#SPACE#ut#SPACE#aliquip#SPACE#ex#SPACE#ea#SPACE#commodo#SPACE#consequat.#SPACE#Duis#SPACE#aute#SPACE#irure#SPACE#dolor#SPACE#in#SPACE#reprehenderit#SPACE#in#SPACE#voluptate#SPACE#velit#SPACE#esse#SPACE#cillum#SPACE#dolore#SPACE#eu#SPACE#fugiat#SPACE#nulla#SPACE#pariatur.#SPACE#Excepteur#SPACE#sint#SPACE#occaecat#SPACE#cupidatat#SPACE#non#SPACE#proident,#SPACE#sunt#SPACE#in#SPACE#culpa#SPACE#qui#SPACE#officia#SPACE#deserunt#SPACE#mollit#SPACE#anim#SPACE#id#SPACE#est#SPACE#laborum.""" #NEWLINE#
str . replace ( '\\' , '' ) #NEWLINE#
print ( '\t' . join ( row ) ) #NEWLINE#
df . eq ( df . iloc [ : , ( 0 ) ] , axis = 0 ) #NEWLINE#
print ( [ x for x in re . split ( '(\\*)' , x ) if x ] ) #NEWLINE#
sys . path . append ( os . path . abspath ( '..' ) ) #NEWLINE#
timeit . Timer ( '[str(x)#SPACE#for#SPACE#x#SPACE#in#SPACE#range(100)]' ) . timeit ( ) #NEWLINE#
{ 'value1' : 'key1' } #NEWLINE#
timeString += time . strftime ( "%H'%M'" , time . gmtime ( abs ( timezone ) ) ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( map ( int , [ '1' , '2' ] ) ) #NEWLINE#
sortedtotal . rename ( columns = lambda x : x . replace ( '#SPACE#' , '_' ) , inplace = True ) #NEWLINE#
( np . arange ( new [ 0 ] ) % old [ 0 ] ) [ : , ( None ) ] #NEWLINE#
d [ d [ 'name' ] == 'World' ] . tolist ( ) [ index ] #NEWLINE#
stdout , stderr = process . communicate ( ) #NEWLINE#
ax . plot ( fx , fy , fz , linestyle = 'None' , marker = 'o' ) #NEWLINE#
sorted ( d , key = lambda i : int ( d [ i ] ) ) #NEWLINE#
self . _droplock ( ) #NEWLINE#
result = [ dict ( item , elem = 'value' ) for item in myList ] #NEWLINE#
new_foo . append ( item ) #NEWLINE#
df . to_excel ( 'FormulaTest.xls' ) #NEWLINE#
X = imp . fit_transform ( X ) #NEWLINE#
warnings . warn ( 'you#SPACE#are#SPACE#warned!' ) #NEWLINE#
e = [ x [ 0 ] for x in eagles ] #NEWLINE#
[ key for key , group in groupby ( li ) if len ( tuple ( group ) ) == 1 ] #NEWLINE#
np . unravel_index ( match_indices , result . shape ) #NEWLINE#
return pd . DataFrame ( res ) #NEWLINE#
index_file . write ( output . encode ( 'utf-8' ) ) #NEWLINE#
self . assertEqual ( item [ 'title' ] , 'My#SPACE#Title' ) #NEWLINE#
session . commit ( ) #NEWLINE#
'Dealer#SPACE#has#SPACE#%s#SPACE#showing.' % ( self . dealer [ : 2 ] , ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
print ( repr ( combined_astr . encode ( 'utf_8' ) ) ) #NEWLINE#
[ ( val , np . sum ( A [ B == val ] ) ) for val in np . unique ( B ) ] #NEWLINE#
[ ( 0 , 4 ) , ( 1 , 5 ) , ( 2 , 6 ) , ( 3 , 7 ) ] #NEWLINE#
'%s' % ( datetime . datetime . utcnow ( ) - datetime . timedelta ( hours = 11 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
itertools . product ( list ( C . items ( ) ) , repeat = 2 ) #NEWLINE#
instance . save ( ) #NEWLINE#
hey ( ) #NEWLINE#
new_list = deepcopy ( [ [ 1 ] , [ 1 , 2 ] , [ 1 , 2 , 3 ] ] ) #NEWLINE#
hist ( b . ravel ( ) . astype ( np . uint8 ) , bins = 255 , range = ( 0 , 255 ) ) #NEWLINE#
return { k : v for k , v in list ( dictionary . items ( ) ) if begin <= k <= end } #NEWLINE#
np . add . reduceat ( mdata , cnt1 , 0 ) / cnt [ : , ( None ) ] #NEWLINE#
struct . unpack ( '<h' , '\x00\x06' ) #NEWLINE#
first = l . pop ( 0 ) #NEWLINE#
conn . close ( ) #NEWLINE#
timetable . insert ( bslindex , { 'time' : '0359' } ) #NEWLINE#
tkmc . close ( ) #NEWLINE#
pygame . mixer . music . load ( 'alert.ogg' ) #NEWLINE#
cleaned = [ i for i in ( word . strip ( ) for word in words ) if i ] #NEWLINE#
f . close ( ) #NEWLINE#
print ( '{:>8}#SPACE#{:>8}#SPACE#{:>8}' . format ( * words ) ) #NEWLINE#
log_file = '/path/to/file' #NEWLINE#
G . data = np . ones ( G . nnz ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
p . legend ( ) . label_text_font = 'times' #NEWLINE#
return HttpResponseRedirect ( request . META [ 'HTTP_REFERER' ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
lambda a , b : b * a ( a , b - 1 ) if b > 0 else 1 , b #NEWLINE#
sys . getsizeof ( s ) #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
[ 'man' , 'who' , 'run' , 'behind' , 'car' , 'get' , 'exhausted' ] #NEWLINE#
return [ list ( s ) for s in sets ] #NEWLINE#
ser . close ( ) #NEWLINE#
"""""" . join ( [ j for i , j in enumerate ( foo ) if j not in foo [ : i ] ] ) #NEWLINE#
print ( ( np . r_ [ 1 , 2 , 3 , 4 , 5 ] > 3 ) . astype ( int ) ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
warnings . filterwarnings ( 'error' ) #NEWLINE#
[ set ( [ 0 , 2 , 3 , 7 ] ) , set ( [ 1 , 4 , 5 , 6 ] ) ] #NEWLINE#
test [ : 3 ] = [ 0 , 1 , 2 ] #NEWLINE#
result = [ dict ( item , ** { 'elem' : 'value' } ) for item in myList ] #NEWLINE#
urllib . parse . unquote ( 'myemail%40gmail.com' ) #NEWLINE#
df [ '1/2#SPACE#ID' ] . str . upper ( ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.17 ) #NEWLINE#
logging . Logger . debugv = debugv #NEWLINE#
s [ 4 : 4 ] = '-' #NEWLINE#
bool ( my_list ) #NEWLINE#
os . _exit ( 1 ) #NEWLINE#
re . sub ( '(e)' , 'ub\\1' , 'speak' ) #NEWLINE#
x . findAll ( text = <STR0> ) #NEWLINE#
logger . debug ( 'DEBUG' ) #NEWLINE#
__init__ . py #NEWLINE#
[ ( x + 1 if x >= 45 else x + 5 ) for x in l ] #NEWLINE#
"""This#SPACE#is#SPACE#a#SPACE#paragraph.#SPACE#This#SPACE#is#SPACE#another#SPACE#paragraph.""" #NEWLINE#
"""This#SPACE#is#SPACE#a#SPACE#paragraph.This#SPACE#is#SPACE#another#SPACE#paragraph.""" #NEWLINE#
client . exec_command ( 'ssh#SPACE#user@host2#SPACE#"apt-get#SPACE#install#SPACE#sl#SPACE#-y#SPACE#--force-yes"' ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
print ( list ( mydict . keys ( ) ) [ list ( mydict . values ( ) ) . index ( 16 ) ] ) #NEWLINE#
ref_a = models . OneToOneField ( related_name = 'ref_b' , null = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
print ( df1 . groupby ( [ 'Name' , 'City' ] ) . size ( ) . reset_index ( name = 'count' ) ) #NEWLINE#
graph . post ( path = 'me/feed' , message = 'Your#SPACE#message#SPACE#here' ) #NEWLINE#
ax . plot ( center_x , center_y , 'bo' , fillstyle = 'none' , markersize = 5 ) #NEWLINE#
id ( copy_my_list [ 0 ] ) == id ( my_list [ 0 ] ) #NEWLINE#
u = User ( request . POST ) #NEWLINE#
x . append ( i ) #NEWLINE#
"""""" . join ( [ _f for _f in re . split ( '(?:\\s*(".*?")\\s*)|[#SPACE#]' , s ) if _f ] ) #NEWLINE#
df1 . sort ( axis = 1 ) == df2 . sort ( axis = 1 ) #NEWLINE#
np . einsum ( 'i,i->' , weights , features ) + bias * len ( weights ) #NEWLINE#
my_list = list ( my_set ) #NEWLINE#
df . groupby ( [ 'IP' , 'Color' ] ) . sum ( ) #NEWLINE#
solve ( my_func , 16 ) #NEWLINE#
int ( a ) #NEWLINE#
df . merge ( df2 , on = [ 'Date' , 'ID' ] , suffixes = ( '' , '_lag1' ) , how = 'left' ) #NEWLINE#
df . groupby ( df . columns . tolist ( ) , as_index = False ) . size ( ) #NEWLINE#
frame . show ( ) #NEWLINE#
example_df = example_df . set_index ( [ 'Letter' ] , append = True ) #NEWLINE#
rc ( 'font' , ** { 'family' : 'sans-serif' , 'sans-serif' : [ 'Helvetica' ] } ) #NEWLINE#
run ( host = 'localhost' , port = 8080 ) #NEWLINE#
d . groupby ( 'A' ) [ 'B' ] . apply ( list ) #NEWLINE#
foo ( np . arange ( 9 ) . reshape ( 3 , 3 ) , np . arange ( 9 ) . reshape ( 3 , 3 ) ) #NEWLINE#
__init__ . py #NEWLINE#
setattr ( self , name , number ) #NEWLINE#
pylab . plot ( x , pmf ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
a = db . ReferenceProperty ( A ) #NEWLINE#
d + datetime . timedelta ( hours = 8 ) #NEWLINE#
im . save ( 'result.gif' ) #NEWLINE#
is_binary_string ( open ( '/usr/bin/dh_python3' , 'rb' ) . read ( 1024 ) ) #NEWLINE#
sys . path . pop ( 0 ) #NEWLINE#
print ( '#SPACE#%s' % incl ) #NEWLINE#
b . remove ( i ) #NEWLINE#
print ( [ x for x in words if len ( x ) > average ] ) #NEWLINE#
sorted ( text , key = lambda x : ( str . lower ( x ) , x ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
distance [ 0 ] [ 1 ] [ 2 ] #NEWLINE#
fig . set_size_inches ( 18.5 , 10.5 , forward = True ) #NEWLINE#
rankdata ( b , method = 'min' ) #NEWLINE#
"""my#SPACE#request#SPACE#url#SPACE#was#SPACE#{0}""" . format ( request . get_full_path ( ) ) #NEWLINE#
{ k : v for k , v in zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) } #NEWLINE#
super ( ClientForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
set ( [ 'a' , 'x' ] ) . issubset ( d ) #NEWLINE#
p . start ( ) #NEWLINE#
r . source ( 'script.R' ) #NEWLINE#
pattern = '^DT(\\s+DT)*((\\s+RB)+|(\\s+JJ)+)(\\s+NN)+$' #NEWLINE#
self . setWindowFlags ( QtCore . Qt . Tool ) #NEWLINE#
query = [ 'OR' , [ 'AND' , 'maria' , 'sharapova' ] , 'tennis' ] #NEWLINE#
print ( [ x for x in a if counts [ x ] >= 2 ] ) #NEWLINE#
sys . stderr = sys . __stderr__ #NEWLINE#
__init__ . py #NEWLINE#
Pages = [ { } , { } , { 'yes' : 12 , 'no' : 16 } ] #NEWLINE#
logging . info ( 'Started' ) #NEWLINE#
super ( CallableWrapper , self ) . __init__ ( ) #NEWLINE#
QMainWindow . __init__ ( self , parent ) #NEWLINE#
x2 [ : , ( 4 ) ] = np . roll ( x2 [ : , ( 4 ) ] , 2 ) #NEWLINE#
df [ 'b' ] = 1 - df [ 'b' ] #NEWLINE#
df_object . to_csv ( 'xgboost.txt' , sep = '\t' , index = False ) #NEWLINE#
super ( C , self ) . __init__ ( ) #NEWLINE#
print ( is_list_of_strings ( i ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
e / e . sum ( axis = 1 , keepdims = True ) #NEWLINE#
print ( 'Hello,#SPACE#world!' ) #NEWLINE#
subprocess . Popen ( cmd ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'default_extend_env' : { 'PATH' : '/Users/anton/anaconda/envs/py3k/bin:{PATH}' } } #NEWLINE#
x = x [ : - 1 ] #NEWLINE#
mList = [ ( int ( e ) if e . isdigit ( ) else e ) for e in mStr . split ( ',' ) ] #NEWLINE#
f2 . write ( line . replace ( ';' , '#SPACE#' ) ) #NEWLINE#
__builtins__ . set #NEWLINE#
weights = { 'east' : 1 , 'west' : 2 , 'south' : 3 } #NEWLINE#
'#SPACE#27.72' , '#SPACE#22.25' , '#SPACE#28.52' , '#SPACE#25.57' , '#SPACE#22.44' , '#SPACE#27.06' , '#SPACE#24.24' #NEWLINE#
'#SPACE#21.74' , '#SPACE#26.72' , '#SPACE#27.23' , '#SPACE#21.48' , '#SPACE#26.14' , '#SPACE#21.09' , '#SPACE#28.28' #NEWLINE#
'#SPACE#29.05' , '#SPACE#23.52' , '#SPACE#24.74' , '#SPACE#29.08' , '#SPACE#21.57' , '#SPACE#21.98' , '#SPACE#26.66' #NEWLINE#
'#SPACE#21.99' , '#SPACE#20.91' , '#SPACE#28.07' , '#SPACE#26.06' , '#SPACE#22.54' , '#SPACE#25.9' , '#SPACE#21.78' #NEWLINE#
'#SPACE#25.96' , '#SPACE#25.25' , '#SPACE#28.08' , '#SPACE#23.79' , '#SPACE#29.99' , '#SPACE#21.41' , '#SPACE#21.67' #NEWLINE#
'#SPACE#47.15' , '#SPACE#46.71' , '#SPACE#51.7' , '#SPACE#46.68' , '#SPACE#48.36' , '#SPACE#52.15' , '#SPACE#59.02' #NEWLINE#
'#SPACE#45.1' , '#SPACE#45.21' , '#SPACE#51.13' , '#SPACE#45.27' , '#SPACE#57.24' , '#SPACE#57.17' , '#SPACE#49.47' #NEWLINE#
'#SPACE#46.32' , '#SPACE#42.47' , '#SPACE#41.14' , '#SPACE#46.86' , '#SPACE#40.1' , '#SPACE#58.67' , '#SPACE#48.91' #NEWLINE#
'#SPACE#48.21' , '#SPACE#43.63' , '#SPACE#43.11' , '#SPACE#46.97' , '#SPACE#52.07' , '#SPACE#47.71' , '#SPACE#53.27' #NEWLINE#
'#SPACE#57.54' , '#SPACE#56.19' , '#SPACE#47.79' , '#SPACE#45.32' , '#SPACE#50.56' , '#SPACE#51.23' , '#SPACE#40.6' #NEWLINE#
'#SPACE#89.93' , '#SPACE#103.19' , '#SPACE#80.6' , '#SPACE#113.44' , '#SPACE#105.44' , '#SPACE#95.54' , '#SPACE#121.98' #NEWLINE#
'#SPACE#102.73' , '#SPACE#104.57' , '#SPACE#100.83' , '#SPACE#75.59' , '#SPACE#79.86' , '#SPACE#91.11' , '#SPACE#94.75' #NEWLINE#
'#SPACE#109.89' , '#SPACE#117.39' , '#SPACE#74.71' , '#SPACE#71.04' , '#SPACE#92.97' , '#SPACE#88.87' , '#SPACE#92.95' #NEWLINE#
'#SPACE#86.67' , '#SPACE#101.46' , '#SPACE#92.4' , '#SPACE#85.2' , '#SPACE#107.19' , '#SPACE#117.81' , '#SPACE#90.95' #NEWLINE#
'#SPACE#82.02' , '#SPACE#87.31' , '#SPACE#106.53' , '#SPACE#86.28' , '#SPACE#106.62' , '#SPACE#107.57' , '#SPACE#89.38' #NEWLINE#
'#SPACE#105.88' , '#SPACE#74.45' , '#SPACE#90.03' , '#SPACE#107.96' , '#SPACE#77.42' , '#SPACE#98.9' , '#SPACE#109.81' #NEWLINE#
'#SPACE#102.51' , '#SPACE#116.71' , '#SPACE#82.92' , '#SPACE#81.78' , '#SPACE#74.42' , '#SPACE#76.27' , '#SPACE#73.84' #NEWLINE#
'#SPACE#75.55' , '#SPACE#102.29' , '#SPACE#108.1' , '#SPACE#98.84' , '#SPACE#101.48' , '#SPACE#77.75' , '#SPACE#98.57' #NEWLINE#
df [ 'city' ] = df . apply ( match_city , axis = 1 ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
not set ( a ) . isdisjoint ( b ) #NEWLINE#
br . submit ( ) #NEWLINE#
r = requests . put ( 'http://somedomain.org/endpoint' , data = payload ) #NEWLINE#
return render ( request , 'foo/login_form.html' ) #NEWLINE#
print ( w . readline ( ) . strip ( ) ) #NEWLINE#
s = s . encode ( 'utf-32-be' ) #NEWLINE#
print ( urllib . request . urlopen ( 'http://www.google.com' ) . read ( ) ) #NEWLINE#
l . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
data = np . genfromtxt ( 'myfile.dat' , delimiter = ',' ) #NEWLINE#
pd . read_csv ( StringIO ( x ) , skipinitialspace = True ) . iloc [ : , ( [ 2 , 3 , 2 ] ) ] #NEWLINE#
5.095245182683146 , 1.9546341057106007 , 0.0 , 1.0 #NEWLINE#
client . GET ( '/' ) . responds_access_denied ( ) #NEWLINE#
ax2 . set_ylim ( 0 , 10 ) #NEWLINE#
platform . system ( ) #NEWLINE#
setattr ( obj , prop_list [ 0 ] , something ) #NEWLINE#
centroids . append ( ( x , y ) ) #NEWLINE#
matrix ( [ [ - 0.5549 , 0.0 , 0.0 ] , [ 0.0 , 3.4356e-08 , 0.0 ] , [ 0.0 , 0.0 , 34.3422 ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( ( 'After#SPACE#truncate:' , open ( filename ) . read ( ) ) ) #NEWLINE#
random . sample ( list ( enumerate ( a ) ) , 5 ) #NEWLINE#
DATA = [ [ '5' , '1' ] , [ '5' , '5' ] , [ '3' , '1' ] , [ '6' , '1' ] , [ '4' , '3' ] ] #NEWLINE# d = [ list ( map ( int , x ) ) for x in DATA ] #NEWLINE#
dtwithoutseconds = dt . replace ( second = 0 , microsecond = 0 ) #NEWLINE#
df . to_html ( classes = [ 'my_class' , 'my_other_class' ] ) #NEWLINE#
tuple_containment ( ( 1 , 2 , 3 , 4 , 5 ) , ( 2 , 6 ) ) #NEWLINE#
br . open ( 'http://www.imdb.com/title/tt0108778/' ) #NEWLINE#
return render_to_string ( self . template , { 'queryset' : self . queryset } ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( soup . find ( 'div' , id = 'navbutton_account' ) [ 'title' ] . encode ( 'utf-8' ) ) #NEWLINE#
ax . set_ylabel ( 'Y' ) #NEWLINE#
print ( dict ( s . split ( '=' ) for s in my_list ) ) #NEWLINE#
sys . version #NEWLINE#
received_json_data = json . loads ( request . body ) #NEWLINE#
numpy . array ( SympyMatrix . tolist ( ) ) . astype ( numpy . float64 ) #NEWLINE#
print ( '' . join ( char if char in string . printable else '#SPACE#' for char in s ) ) #NEWLINE#
round ( 1.2345 , 2 ) #NEWLINE#
self . response . out . write ( 'Some#SPACE#output#SPACE#here' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
"""{:x}""" . format ( int ( line ) ) #NEWLINE#
"""{0:x}""" . format ( int ( line ) ) #NEWLINE#
outfile . write ( '##SPACE#Array#SPACE#shape:#SPACE#{0}\n' . format ( data . shape ) ) #NEWLINE#
pd . concat ( [ df [ 'B' ] , df [ 'C' ] ] ) . reset_index ( name = 'D' ) #NEWLINE#
return super ( MyModelAdmin , self ) . formfield_for_dbfield ( db_field , ** kwargs ) #NEWLINE#
soup = BeautifulSoup ( page ) #NEWLINE#
line = line [ 2 : ] #NEWLINE#
main . run ( ) #NEWLINE#
func ( 'arg' , 'arg2' , * ( ( 'some#SPACE#value' , ) if condition == True else ( ) ) ) #NEWLINE#
p . start ( ) #NEWLINE#
nonscripttags = htmlDom . findAll ( lambda t : t . name != 'script' , recursive = False ) #NEWLINE#
lst [ : ] = [ v for v in lst if pred ( v ) ] #NEWLINE#
df . drop ( 'b' , axis = 1 ) #NEWLINE#
cv2 . imwrite ( 'roi.png' , im [ r [ 0 ] : r [ 0 ] + r [ 2 ] , r [ 1 ] : r [ 1 ] + r [ 3 ] ] ) #NEWLINE#
return [ x for x in L if not any ( set ( x ) <= set ( y ) for y in L if x is not y ) ] #NEWLINE#
plt . subplots_adjust ( wspace = 0.001 ) #NEWLINE#
print ( re . sub ( "[^\\w\\d'\\s]+" , '' , sentence ) ) #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
plt . imshow ( data_masked , interpolation = 'none' , vmin = 0 ) #NEWLINE#
shutil . rmtree ( '/my/path/to/folder/to/destroy' ) #NEWLINE#
df [ df [ 'c' ] > 0.5 ] [ [ 'b' , 'e' ] ] #NEWLINE#
parser . error ( 'Filename#SPACE#not#SPACE#given' ) #NEWLINE#
n [ : ] = [ [ ( b - 1 ) for b in a ] for a in n ] #NEWLINE#
data_file = models . FileField ( upload_to = content_path ) #NEWLINE#
urllib . request . urlopen ( request ) . read ( ) #NEWLINE#
self . socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
"""jvm.args=#SPACE#-Dappdynamics.com=true,#SPACE#-Dsomeotherparam=false,""" . partition ( '=' ) #NEWLINE#
np . random . uniform ( 5 , 10 ) #NEWLINE#
formattedList = [ ( '%.2f' % member ) for member in theList ] #NEWLINE#
print ( myListWidget . currentItem ( ) . text ( ) ) #NEWLINE#
key = next ( iter ( d ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . ix [ : , 'b' : ] #NEWLINE#
( dummy_df == '0%' ) . all ( ) #NEWLINE#
clf . fit ( X ) #NEWLINE#
reactor . run ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
df = df . loc [ mask ] #NEWLINE#
db . rename_column ( 'app_foo' , 'full_name' , 'name' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
[ array ( [ 1.28366219 , 3.92034057 ] ) ] #NEWLINE#
main ( ) #NEWLINE#
df . head ( ) #NEWLINE#
print ( 'not#SPACE#valid' ) #NEWLINE#
j2 = [ i for i in j if i >= 5 ] #NEWLINE#
return '#SPACE#' . join ( [ word [ : : - 1 ] for word in sentence . split ( ) ] ) #NEWLINE#
proc . wait ( ) #NEWLINE#
plt . ylabel ( 'Frequency#SPACE#(count)' , fontsize = 15 ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
els = document . getElementsByTagNameNS ( '*' , 'tag' ) #NEWLINE#
all ( v is None for v in l ) #NEWLINE#
rf . merge_arrays ( ( arr , x ) , flatten = True ) #NEWLINE#
set ( x ) == set ( y ) #NEWLINE#
X_test = sc . transform ( X_test ) #NEWLINE#
mylen ( 'Ã¡Ã©Ã\xadÃ³Ãº' ) #NEWLINE#
summation ( f ( i ) , ( i , 0 , 3 ) ) #NEWLINE#
json . dumps ( d ) #NEWLINE#
print ( '☃' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
cv2 . imshow ( 'window' , img ) #NEWLINE#
form = MyForm ( questions = your_list_of_questions ) #NEWLINE#
print ( Matrix [ x ] [ y ] ) #NEWLINE#
element = driver . find_element_by_xpath ( '//span[span/input[@name="lift"]]' ) #NEWLINE# element . click ( ) #NEWLINE#
print ( json . dumps ( { '4' : 5 , '6' : 7 } , sort_keys = True , indent = 4 ) ) #NEWLINE#
df [ 'AB' ] . str . split ( '-' , 1 ) . str [ 1 ] #NEWLINE#
url ( '^hello/' , 'myapp.views.hello' ) , #NEWLINE#
ser . close ( ) #NEWLINE#
self . SetTitle ( 'dialog_1' ) #NEWLINE#
isinstance ( b , Test2 ) #NEWLINE#
curs . execute ( 'SELECT#SPACE#NOW()' ) #NEWLINE#
normal_dist . set_shape ( [ input_data . get_shape ( ) [ 1 ] , labels . get_shape ( ) [ 1 ] ] ) #NEWLINE#
sys . stdout . write ( REVERSE + CYAN ) #NEWLINE#
print ( float ( re . sub ( '^\\((.*?)\\)$' , '-\\1' , a ) . replace ( ',' , '' ) ) ) #NEWLINE#
logger . critical ( 'CRITICAL' ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = np . array ( [ d ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y [ 0 ] . upper ( ) , str . split ( ) , '' ) #NEWLINE#
IOLoop . instance ( ) . start ( ) #NEWLINE#
re . sub ( '(?<=sentence=")(.*)(?="#SPACE#/>)' , lambda m : m . group ( ) . replace ( '"' , "'" ) , s ) #NEWLINE#
married = models . CharField ( max_length = 1 , choices = MAYBECHOICE ) #NEWLINE#
return HttpResponseRedirect ( '/' ) #NEWLINE#
df1 . groupby ( pd . TimeGrouper ( '5Min' ) ) . sum ( ) #NEWLINE#
[ 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' ] #NEWLINE#
[ 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
return [ { 'text' : text , 'tokens' : text . split ( ) } for i , text in enumerate ( texts ) ] #NEWLINE#
rstr . xeger ( '[A-Z]\\d[A-Z]#SPACE#\\d[A-Z]\\d' ) #NEWLINE#
im . save ( blah , quality = 5 ) #NEWLINE#
l . extend ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) #NEWLINE#
session . post ( 'https://users.premierleague.com/accounts/login/' , data = values ) #NEWLINE#
df = pd . DataFrame ( data , columns = [ 'id' , 'A' , 'B' , 'C' ] ) #NEWLINE#
s . split ( '#SPACE#' , 1 ) #NEWLINE#
df . loc [ : , ( [ 'b' ] ) ] #NEWLINE#
print ( [ obj . name for obj in gc . get_objects ( ) if isinstance ( obj , potions ) ] ) #NEWLINE#
return QtCore . Qt . ItemIsEditable | QtCore . Qt . ItemIsEnabled #NEWLINE#
print ( '{x:.2f}' . format ( x ) ) #NEWLINE#
csv_writer . writerow ( [ i [ 0 ] for i in cursor . description ] ) #NEWLINE#
values = [ max ( x , 0 ) for x in values ] #NEWLINE#
return HttpResponse ( simplejson . dumps ( data_dict ) ) #NEWLINE#
print ( Header ( 'ä¸»é¡\x8c' , 'utf-8' ) . encode ( ) ) #NEWLINE#
list ( csv . reader ( s , skipinitialspace = True ) ) #NEWLINE#
[ 5.0062 , 10.003333333333332 ] #NEWLINE#
df [ 'datestart' ] . values . astype ( 'datetime64[Y]' ) #NEWLINE#
[ x [ 0 ] for x in listD [ 0 ] ] #NEWLINE#
output . write ( '\n' ) #NEWLINE#
workbook . close ( ) #NEWLINE#
print ( hex ( new_int ) ) #NEWLINE#
s . decode ( 'latin1' ) #NEWLINE#
pd . melt ( piv . reset_index ( ) , id_vars = [ 'month' ] , value_name = 'stock' ) #NEWLINE#
df . to_csv ( 'data_out.csv' , header = None ) #NEWLINE#
df #NEWLINE#
mylist [ : ] = [ ( not x ) for x in mylist ] #NEWLINE#
ax . set_axis_bgcolor ( ( 1 , 0 , 0 ) ) #NEWLINE#
print ( 'dic[%s]#SPACE#=#SPACE#%s' % ( key , dic [ key ] ) ) #NEWLINE#
random . sample ( s , 1 ) [ 0 ] #NEWLINE#
print ( list ( traversals ( tree ) ) ) #NEWLINE#
c = [ item for t in zip ( a , b ) for item in t ] #NEWLINE#
succeeded , b = f ( 'a' ) #NEWLINE#
input ( 'Prompt:#SPACE#' ) #NEWLINE#
ax . margins ( 0.2 ) #NEWLINE#
glob . glob ( '*.gif' ) #NEWLINE#
setup . py #NEWLINE#
json . loads ( json . dumps ( { None : None } ) ) #NEWLINE#
ssh . connect ( server , username = username , password = password ) #NEWLINE#
df [ 'y' ] = df [ 'y' ] . replace ( { 'N/A' : np . nan } ) #NEWLINE#
ordered = [ item for item in ordered if item in unordered ] #NEWLINE#
sys . path . insert ( 0 , 'libs' ) #NEWLINE#
[ OrderedDict ( row ) for i , row in df . iterrows ( ) ] #NEWLINE#
print ( '' . join ( sorted ( x ) ) ) #NEWLINE#
c = dict . fromkeys ( s , 0 ) #NEWLINE#
print ( datetime . utcfromtimestamp ( tai_timestamp ) ) #NEWLINE#
list ( myBigList [ i ] for i in [ 87 , 342 , 217 , 998 , 500 ] ) #NEWLINE#
numpy . r_ [ True , a [ 1 : ] < a [ : - 1 ] ] & numpy . r_ [ a [ : - 1 ] < a [ 1 : ] , True ] #NEWLINE#
yield line [ : - 1 ] + line [ - 1 ] . split ( '\t' ) #NEWLINE#
ax2 . set_ylabel ( 'Y2#SPACE#data' , color = 'b' ) #NEWLINE#
a [ : , ( 0 ) , ( 0 ) ] , b [ : , ( 0 ) , ( 0 ) ] = b [ : , ( 0 ) , ( 0 ) ] , a [ : , ( 0 ) , ( 0 ) ] . copy ( ) #NEWLINE#
tree . write ( projectFile , xml_declaration = True , encoding = 'utf-8' , method = 'xml' ) #NEWLINE#
np . zeros ( ( 3 , 3 ) ) #NEWLINE#
fout . close ( ) #NEWLINE#
data . reset_index ( drop = True ) #NEWLINE#
vals = numpy . delete ( vals , numpy . where ( a ) , axis = 0 ) #NEWLINE#
img . save ( 'sample-out.jpg' ) #NEWLINE#
[ sum ( int ( c ) for c in str ( num ) ) for num in list1 ] #NEWLINE#
s = requests . session ( auth = ( 'username' , 'password' ) ) #NEWLINE#
logging . basicConfig ( filename = '/opt/python/log/my.log' , level = logging . DEBUG ) #NEWLINE#
open ( '\\\\HOST\\share\\path\\to\\file' ) #NEWLINE#
open ( '\\HOST\\share\\path\to\x0cile' ) #NEWLINE#
os . startfile ( 'YourDocument' , 'print' ) #NEWLINE#
np . array ( [ [ 8 ] , [ 18 ] ] ) . shape #NEWLINE#
list ( map ( hash , list ( range ( 1 , 6 ) ) ) ) #NEWLINE#
nx . has_path ( G , 1 , 5 ) #NEWLINE#
user . save ( ) #NEWLINE#
self . changeA ( ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
ax . tick_params ( axis = 'x' , which = 'minor' , bottom = 'off' ) #NEWLINE#
date = models . DateTimeField ( default = datetime . now , blank = True ) #NEWLINE#
results = qs . values ( 'Year' ) . annotate ( dcount = Count ( 'Year' ) ) #NEWLINE#
df1 . combine_first ( df2 ) #NEWLINE#
s . tolist ( ) #NEWLINE#
cur . execute ( "SELECT#SPACE#*#SPACE#FROM#SPACE#bar#SPACE#WHERE#SPACE#thing#SPACE#=#SPACE#'bar';#SPACE#SELECT#SPACE#*#SPACE#FROM#SPACE#bar" ) #NEWLINE#
MY_XML = { 'url' : '/pathToTree/myTree.xml' , 'schema' : 'myXSD.xsd' } #NEWLINE#
wx . Frame . __init__ ( self , parent , id , title ) #NEWLINE#
plt . show ( ) #NEWLINE#
A - mean . reshape ( mean . shape [ 0 ] , 1 ) #NEWLINE#
int ( '00000000053' , 10 ) #NEWLINE#
row . reset_index ( ) . set_index ( 0 ) . loc [ 38.15 ] #NEWLINE#
app . run ( ) #NEWLINE#
splitre = re . compile ( '\\s*(?:,(?![^()]*\\))|\\bwith\\b|\\band\\b)\\s*' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
input ( 'Question:#SPACE#' ) #NEWLINE#
return len ( alist ) - alist [ - 1 : : - 1 ] . index ( value ) - 1 #NEWLINE#
webbrowser . open ( '/home/test/test_folder' ) #NEWLINE#
file . write ( unicode_text ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
output = subprocess . check_output ( 'ls' ) #NEWLINE#
s . replace ( '||' , '~' ) . replace ( '|' , '' ) . replace ( '~' , '|' ) #NEWLINE#
regr . fit ( Xtrain , ytrain ) #NEWLINE#
plt . show ( ) #NEWLINE#
p = subprocess . call ( [ 'program_name' , '-input' , i , '-output' , o ] ) #NEWLINE#
print ( '{0:{1}}#SPACE#-#SPACE#{2}' . format ( item , column_width , qty ) ) #NEWLINE#
re . sub ( '(0x[\\da-fA-F]+)|(\\d+)' , '[0-9]' , a ) #NEWLINE#
df . rolling ( window = 10 ) . mean ( ) . applymap ( round ) . shift ( ) #NEWLINE#
os . kill ( process . pid , signal . SIGINT ) #NEWLINE#
{ 'color' : 'golden' , 'mpg' : 10 , 'model' : 'ford' , 'battery_type' : 'battery' } #NEWLINE#
'%.2f' % 1.679 #NEWLINE#
c . subs ( { 'a' : 3 , 'b' : 4 } ) #NEWLINE#
circular ( ) #NEWLINE#
final_l = [ ] #NEWLINE#
re . match ( '^org/(?P<company_name>\\w+)/?$' , 'org/companyA' ) #NEWLINE#
return [ i for i in range ( len ( bv ) ) if bv [ i ] ] #NEWLINE#
plt . draw ( ) #NEWLINE#
f . write ( line ) #NEWLINE#
re . search ( 'world' , testString ) #NEWLINE#
query = session . query ( TestUser ) . filter ( TestUser . numbers . any ( 25 ) ) . all ( ) #NEWLINE#
self . process . terminate ( ) #NEWLINE#
super ( A , self ) . __init__ ( ) #NEWLINE#
subprocess . call ( [ 'python' , script ] ) #NEWLINE#
plt . text ( 0.05 , 0.9 , '\\underline{Parameters}:#SPACE#' , fontsize = 12 ) #NEWLINE#
proc . stdin . write ( 'password\n' ) #NEWLINE#
sorted ( A , key = A . get ) #NEWLINE#
df = pd . DataFrame ( data , columns = columns ) #NEWLINE#
plt . figure ( figsize = [ 6 , 6 ] ) #NEWLINE#
driver = webdriver . Chrome ( chrome_options = options ) #NEWLINE#
hist ( b . ravel ( ) . astype ( np . uint8 ) , bins = 255 ) #NEWLINE#
return [ 'a' , 'b/' , 'c' ] #NEWLINE#
parser . add_option ( '--ipv4' , action = 'store_true' , dest = 'ipv4' ) #NEWLINE#
raise cherrypy . HTTPError ( '401#SPACE#Unauthorized' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : b + ( a , ) , reversed ( t ) , ( ) ) #NEWLINE#
return matchobj . group ( 0 ) + str ( self . matchcnt ) #NEWLINE#
d . update ( { 'items' : [ 'jacket' , 'necktie' , 'trousers' ] } ) #NEWLINE#
my_list = list ( the_tuple ) #NEWLINE#
ax1 . xaxis . set_visible ( False ) #NEWLINE#
[ x for x in l if 'ab' in x ] #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
ax . scatter ( theta , r , color = 'k' , marker = '+' ) #NEWLINE#
login ( request , user ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
result = re . sub ( regex , subst , file_contents ) #NEWLINE#
df [ [ 'cycle' , 'passs' , 'ip' ] ] = df [ [ 'cycle' , 'passs' , 'ip' ] ] . astype ( int64 ) #NEWLINE#
Foo . _bar ( ) #NEWLINE#
[ 'a' , 'b' ] #NEWLINE#
[ random . shuffle ( x ) for x in workList ] #NEWLINE#
print ( 'xls#SPACE#flag' ) #NEWLINE#
urllib . request . urlopen ( 'http://username:password@host.com/path' ) #NEWLINE#
plt . show ( ) #NEWLINE#
pi = ( a + b ) ** 2 / ( 4 * t ) #NEWLINE#
df . groupby ( 'manager' ) . sum ( ) #NEWLINE#
FILE = open ( 'report.pdf' , 'w' ) #NEWLINE#
Foo . __dict__ [ 'a' ] = None #NEWLINE#
l = l [ 0 ] + ( l [ 1 ] , ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . query ( '2.0#SPACE#<=#SPACE#A#SPACE#<=#SPACE#4.0' ) #NEWLINE#
reverse ( viewname , urlconf = None , args = None , kwargs = None ) #NEWLINE#
interpolate360 ( 90 , [ [ 1 , 0 ] , [ 0 , 1 ] ] ) #NEWLINE#
df . to_excel ( ew ) #NEWLINE#
np . random . seed ( 3 ) #NEWLINE#
City . objects . filter ( name__iregex = insert_whitespace ( 'newyork' ) ) #NEWLINE#
a [ ... , [ 1 , 1 ] ] #NEWLINE#
print ( b [ 0 ] [ 'addr' ] ) #NEWLINE#
"""{number:0{width}d}""" . format ( width = 2 , number = 4 ) #NEWLINE#
{ 'fizz' : [ 123.0 ] , 'foo' : [ 'barbat' ] } #NEWLINE#
return [ ( s [ i ] , i ) for i in indices ] #NEWLINE#
print ( ( name , 'has#SPACE#been#SPACE#sorted#SPACE#into' , ransport ) ) #NEWLINE#
d = dict ( list ( row . items ( ) ) ) #NEWLINE#
rgb = np . dstack ( ( r , g , b ) ) #NEWLINE#
data = np . genfromtxt ( path_to_csv , dtype = float , delimiter = ',' , names = True ) #NEWLINE#
writer . writerow ( ( 'title' , 'intro' , 'tagline' ) ) #NEWLINE#
ax . xaxis . set_ticks ( x ) #NEWLINE#
a - a . min ( axis = 0 ) #NEWLINE#
infloop ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
user_list = User . objects . filter ( ** kwargs ) . order_by ( 'last_name' ) #NEWLINE#
getattr ( web , 'input' ) ( 'Jim' , 30 , 'A#SPACE#cool#SPACE#person' ) #NEWLINE#
[ ( 9 , 3 , 2 ) , ( 9 , 4 , 7 ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
{ 'and' : 'CONJ' , 'go' : 'VERB' , 'tree' : 'NOUN' , 'have' : 'VERB' } #NEWLINE#
root . mainloop ( ) #NEWLINE#
s = pd . Series ( [ 1 , 0 , 2 ] , list ( 'abc' ) , name = 's' ) #NEWLINE#
list ( subseqs ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] , 3 ) ) #NEWLINE#
glob . glob ( '*.gif' ) #NEWLINE#
glob . glob ( './[0-9].*' ) #NEWLINE#
np . minimum ( arr , 255 , out = arr ) #NEWLINE#
app = Flask ( __name__ , static_folder = 'pdf' ) #NEWLINE#
re . findall ( '\\d+[a-z]+\\d+([a-z]+)' , s , re . I ) #NEWLINE#
f . write ( 'new#SPACE#line\n' + old ) #NEWLINE#
sorted ( list ( range ( len ( K ) ) ) , key = lambda x : K [ x ] ) [ - 5 : ] #NEWLINE#
[ 'Alaska' , 'Alabama' , 'Arkansas' , 'American' , 'Samoa' , 'Arizona' , #NEWLINE# 'California' , 'Colorado' ] #NEWLINE#
plt . xlim ( - 1 , 1 ) #NEWLINE#
tf . multiply ( x , y ) . eval ( ) #NEWLINE#
urllib . request . urlretrieve ( 'ftp://server/path/to/file' , 'file' ) #NEWLINE#
s [ s . str . contains ( 'og|at' ) ] #NEWLINE#
open ( 'test_newlines.txt' , 'rb' ) . read ( ) #NEWLINE#
plt . savefig ( './figures/miles_to_km.png' , dpi = 300 ) #NEWLINE#
elements . append ( table ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
arr . flat [ [ 3 , 4 ] ] #NEWLINE#
primes = list ( range ( 2 , 20 ) ) #NEWLINE#
found = any ( word in line . split ( ) for line in file ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
my_dictionary [ 'foo' ] = new_variable #NEWLINE#
print ( '' . join ( sorted ( x ) ) ) #NEWLINE#
print ( zerowidthsplit ( '(?<!foo)(?=bar)' , 'foobarbarbazbar' ) ) #NEWLINE#
my_form . french . args = [ 'mustard' , 'fries' , 'wine' ] #NEWLINE#
app . MainLoop ( ) #NEWLINE#
form = CModelForm ( UPOST ( request . POST , c_instance ) , instance = c_instance ) #NEWLINE#
'value2' in ( item for sublist in mylist for item in sublist ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df . a / df . b . replace ( { ( 0 ) : np . nan } ) #NEWLINE#
zip ( np . nonzero ( starts ) [ 0 ] , np . nonzero ( ends ) [ 0 ] ) #NEWLINE#
print ( pandas . concat ( [ s1 , s2 ] , axis = 1 ) . min ( axis = 1 ) ) #NEWLINE#
my_dict . clear ( ) #NEWLINE#
xlbook . close ( ) #NEWLINE#
print ( repr ( test ) , bool ( re . match ( '[A-Za-z]\\w*\\Z' , test ) ) ) #NEWLINE#
del df [ 'X' ] #NEWLINE#
df [ 'A' ] = pd . to_numeric ( df [ 'A' ] , 'coerce' ) . combine_first ( df [ 'A' ] ) #NEWLINE#
return [ seq [ i : i + n ] for i in range ( len ( seq ) - n + 1 ) ] #NEWLINE#
h = { k : v for k , v in l } #NEWLINE#
[ len ( list ( group ) ) for key , group in groupby ( a ) ] #NEWLINE#
do_something ( ) #NEWLINE#
1 - residual / sum ( ( y - y . mean ( ) ) ** 2 ) #NEWLINE#
re . match ( '(?![\\d.]*([\\d.])[\\d.]*\\1)^[\\d.]+$' , str_number ) . group ( 0 ) #NEWLINE#
ModeResult ( mode = array ( [ [ 1 , 3 , 2 , 2 , 1 , 1 ] ] ) , count = array ( [ [ 1 , 2 , 2 , 2 , 1 , 2 ] ] ) ) #NEWLINE#
"""#SPACE#""" . join ( format ( ord ( x ) , 'b' ) for x in st ) #NEWLINE#
ax . set_xlim ( ts . index . min ( ) , ts . index . min ( ) + 24 ) #NEWLINE#
newdf . sort_values ( by = 'a' ) #NEWLINE#
lambda x , y : x [ 0 ] + '.' + y [ 0 ] #NEWLINE#
ast . literal_eval ( df . to_json ( orient = 'values' ) ) #NEWLINE#
np . fromfile ( 'f_order.dat' , dtype = np . uint8 ) [ : 10 ] #NEWLINE#
df . fillna ( 0 , inplace = True ) #NEWLINE#
return all ( x <= y for x , y in zip ( L , L [ 1 : ] ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
s2 . replace ( '#SPACE#' , 'v' ) #NEWLINE#
recipientData = json . loads ( recipientContent . decode ( 'ascii' , 'ignore' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . write ( 'm' ) #NEWLINE#
y = int ( x , 16 ) #NEWLINE#
ax . set_title ( 'azim=' + str ( azim ) + '#SPACE#elev=' + str ( elev ) ) #NEWLINE#
decoded_x = hex ( x ) [ 2 : ] . decode ( 'hex' ) #NEWLINE#
argparser . add_argument ( 'extra' , nargs = '*' , help = 'Other#SPACE#commands' ) #NEWLINE#
driver . execute_script ( '<put#SPACE#the#SPACE#above#SPACE#javascript#SPACE#here#SPACE#as#SPACE#string>' ) #NEWLINE#
layout . setContentsMargins ( 20 , 0 , 20 , 0 ) #NEWLINE#
print ( '%s=%s' % ( y , x ) , end = '#SPACE#' ) #NEWLINE#
[ 8 , 5 , 6 ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
os . rename ( tmpFile , myFile ) #NEWLINE#
lst . sort ( key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
admin . site . register ( TestModel , TestModelAdmin ) #NEWLINE#
[ ( 0 , 3 ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 3 , 0 ) , ( 3 , 1 ) ] #NEWLINE#
print ( etree . tostring ( tag , pretty_print = True ) ) #NEWLINE#
[ '/home/pat/foobar/lib/python2.6/site-packages' , '/usr/lib/python2.6' ] #NEWLINE#
print ( len ( japanese . decode ( 'utf-8' ) ) ) #NEWLINE#
m = re . search ( '(?<=//)[^/]*' , str ) #NEWLINE# print ( m . group ( ) ) #NEWLINE#
pd . Series ( np . add . reduceat ( s1 . values , np . arange ( 0 , s1 . shape [ 0 ] , 3 ) ) ) #NEWLINE#
data . loc [ data [ 'Brand' ] . isin ( group_clients ) , 'FreeSec' ] = True #NEWLINE#
root = Tk ( ) #NEWLINE#
print ( textarea . get_attribute ( 'cols' ) ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
soup . find ( 'dcterms:valid' ) #NEWLINE#
os . killpg ( os . getpgid ( p . pid ) , signal . SIGTERM ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( myDict [ 'Apple' ] [ 'American' ] ) #NEWLINE#
class Car ( models . Model ) : #NEWLINE# #INDENT# manufacturer = models . ForeignKey ( 'production.Manufacturer' ) #NEWLINE#
return ( ( a [ : , ( np . newaxis ) , : ] - v ) ** 2 ) . sum ( axis = - 1 ) . min ( axis = 0 ) . sum ( ) #NEWLINE#
time . sleep ( x ) #NEWLINE#
list ( x for x in string . letters if x in ( y for y in 'BigMan#SPACE#on#SPACE#campus' ) ) #NEWLINE#
[ RNA [ i : i + 3 ] for i in range ( position , len ( RNA ) - 2 , 3 ) ] #NEWLINE#
[ index [ start : end ] for start , end in zip ( slices [ : : 2 ] , slices [ 1 : : 2 ] ) ] #NEWLINE#
"""C:\\Program#SPACE#Files\\Sublime#SPACE#Text#SPACE#2\\sublime_text.exe""" #NEWLINE#
G . add_edges_from ( [ ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 1 ) , ( 1 , 4 ) ] ) #NEWLINE#
app . run ( debug = False ) #NEWLINE#
print ( next ( val for key , val in my_dict . items ( ) if key . startswith ( 'Date' ) ) ) #NEWLINE#
f . write ( '#SPACE#' . join ( ( 'whatever' , str ( var2 ) , 'etc' ) ) ) #NEWLINE#
today + datetime . timedelta ( days = - today . weekday ( ) , weeks = 1 ) #NEWLINE#
shlex . split ( '-o#SPACE#1#SPACE#--long#SPACE#"Some#SPACE#long#SPACE#string"' ) #NEWLINE#
uniq_animal_groups = [ list ( t ) for t in set ( map ( tuple , animal_groups ) ) ] #NEWLINE#
df . append ( dm2 ) #NEWLINE#
my_frame . title ( 'My#SPACE#new#SPACE#title,#SPACE#with#SPACE#no#SPACE#tk#SPACE#(except#SPACE#that#SPACE#one)' ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
print ( match . group ( 'brackets' ) ) #NEWLINE#
( 1 for i in x if 60 < i < 70 ) #NEWLINE#
s . decode ( 'CP1252' ) . encode ( 'UTF-8' ) #NEWLINE#
img = Image . open ( sys . argv [ 1 ] ) . convert ( 'L' ) #NEWLINE#
[ ( 'team' , 0.0260560163563 ) , ( 'customer' , 0.0247838 ) ] , #NEWLINE#
[ ( 'customer' , 0.0171786268847 ) , ( 'footfall' , 0.012 ) ] , #NEWLINE#
[ ( 'team' , 0.0290787264225 ) , ( 'product' , 0.01570401 ) ] , #NEWLINE#
[ ( 'team' , 0.0197917953222 ) , ( 'data' , 0.0134322663 ) ] , #NEWLINE#
[ ( 'customer' , 0.0263740639141 ) , ( 'team' , 0.0251677 ) ] , #NEWLINE#
[ ( 'customer' , 0.0289764173735 ) , ( 'team' , 0.0249938 ) ] , #NEWLINE#
myStr [ : : - 1 ] . replace ( 'iss' [ : : - 1 ] , 'XXX' [ : : - 1 ] , 1 ) [ : : - 1 ] #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
print ( '#SPACE#' . join ( x ) ) #NEWLINE#
a , b , c = do_something ( ) #NEWLINE#
bane . astype ( np . float ) . view ( np . complex64 ) #NEWLINE#
self . configure ( width = width , height = height ) #NEWLINE#
[ m . group ( ) for m in re . finditer ( '((\\w)\\2)+' , 'committee' ) ] #NEWLINE#
requests . post ( url = url , data = data , headers = headers ) #NEWLINE#
dict ( urlparse . parse_qsl ( 'foo=bar&baz=qux' ) ) #NEWLINE#
plt . clabel ( cs , inline = 1 , fontsize = 9 ) #NEWLINE#
keys . sort ( lambda x , y : cmp ( dict [ x ] , dict [ y ] ) ) #NEWLINE#
[ 0 , 1 , 2 , 4 ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df [ 'C' ] = pd . Series ( df . fillna ( '' ) . values . tolist ( ) ) . str . join ( '#SPACE#' ) #NEWLINE#
random . sample ( zip ( xs , ys ) , 1000 ) #NEWLINE#
print ( requests . get ( 'http://httpbin.org/ip' ) . text ) #NEWLINE#
'print' , '__code__' , 'co_freevars' , 'co_names' , 'ModuleVar' #NEWLINE#
ax . set_xticklabels ( [ t . get_text ( ) . split ( 'T' ) [ 0 ] for t in ax . get_xticklabels ( ) ] ) #NEWLINE#
shutil . copytree ( src , dest ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
- ( a + b ) + ( sin ( + x + y ) + z ** 2 ) * 4 / 365.12 - h #NEWLINE#
warnings . filterwarnings ( 'ignore' ) #NEWLINE#
parser . parse ( 'Tue#SPACE#May#SPACE#08#SPACE#15:14:45#SPACE#+0800#SPACE#2012' ) #NEWLINE#
print ( '{1}-grams:#SPACE#{0}' . format ( vect . get_feature_names ( ) , ngram_size ) ) #NEWLINE#
[ j ( ) for j in [ ( lambda i = i : i ) for i in range ( 10 ) ] ] #NEWLINE#
line = sys . stdin . readline ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
split = pd . concat ( [ df , TScolumns ] , axis = 1 ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( numpy . round ( dataAC , 10 ) [ : , : 4 ] ) #NEWLINE#
lst = [ ] #NEWLINE#
[ y for x in data for y in x ] #NEWLINE#
X = [ [ 'A' , 'B' , 'C' ] , [ 'A' , 'B' , 'D' ] , [ 'W' , 'X' ] , [ 'W' , 'Y' , 'Z' ] ] #NEWLINE#
return unicodedata . normalize ( 'NFKD' , x ) . encode ( 'ASCII' , 'specials' ) #NEWLINE#
pivot_table ( df , 'Y' , rows = 'X' , cols = 'X2' ) #NEWLINE#
a [ 0 ] . append ( 1 ) #NEWLINE#
return x . astype ( 'i8' ) == np . datetime64 ( 'NaT' ) . astype ( 'i8' ) #NEWLINE#
'%02d-%02d-%02d#SPACE#%02d:%02d' % ( d . year , d . month , d . day , d . hour , d . minute ) #NEWLINE#
np . where ( np . any ( x != [ 0 , 1 ] , axis = 1 ) ) #NEWLINE#
ax . set_ylabel ( 'Label#SPACE#Two' , size = 16 ) #NEWLINE#
obj = PageModel . get_by_id ( page_id ) #NEWLINE#
f = open ( curdir + sep + self . path , 'rb' ) #NEWLINE#
datetime . strptime ( '2012-may-31#SPACE#19:00' , '%Y-%b-%d#SPACE#%H:%M' ) #NEWLINE#
M = np . column_stack ( ( x ** 2 , x , np . ones_like ( x ) ) ) #NEWLINE#
M_D1 = { '#SPACE#foo#SPACE#bar#SPACE#' : 1 , '#SPACE#a#SPACE#bc' : 2 , '#SPACE#' : 3 } #NEWLINE#
solve ( eqs2 , [ x , y ] ) #NEWLINE#
ax . contourf ( x , y , z , zdir = 'z' , offset = z_min , cmap = cm . coolwarm ) #NEWLINE#
return [ item for item in mylist if item [ 0 ] [ 0 ] == letter ] #NEWLINE#
plt . show ( ) #NEWLINE#
fh . close ( ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
int ( s . replace ( ',' , '' ) , 2 ) #NEWLINE#
opener . open ( 'http://example.com' , login_data ) #NEWLINE#
df . append ( data ) #NEWLINE#
testUrl . rsplit ( '?' ) #NEWLINE#
__loader__ . get_data ( 'path/within/the/egg' ) #NEWLINE#
sum ( 1 if item . get ( 'one' , False ) is True else 0 for item in list ( tadas . values ( ) ) #NEWLINE# ) #NEWLINE#
print ( '' . join ( node . findAll ( text = True ) ) ) #NEWLINE#
trace [ 'mu' ] . mean ( axis = 0 ) [ : 3 ] #NEWLINE#
client . GET ( '/admin' , auth = 'user' ) . responds_access_denied ( ) #NEWLINE#
"""aa""" #NEWLINE#
{ 'a' : [ 'b' , 'd' , 'f' ] , 'c' : [ 'd' , 'f' ] , 'b' : [ 'd' , 'f' ] , 'd' : [ 'f' ] } #NEWLINE#
print ( Foo . bar . __get__ ( f , Foo ) ) #NEWLINE#
len ( regex . findall ( '\\X' , 'A̲̅BC' ) ) #NEWLINE#
np . sort ( data , order = 'f1' ) [ - 5 : ] [ : : - 1 ] #NEWLINE#
all ( e == a [ 0 ] for e in a ) #NEWLINE#
return next ( x for x in ( f ( y ) for f in hundreds ) if x ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
self . process . wait ( ) #NEWLINE#
pygame . joystick . quit ( ) #NEWLINE#
print ( '' . join ( [ etree . tostring ( child ) for child in root . iterdescendants ( ) ] ) ) #NEWLINE#
[ item for item in ( 'a' , 'b' , 'c' ) ] #NEWLINE#
print ( search ( myDict , 'Mary' ) ) #NEWLINE#
worksheet . save ( ) #NEWLINE#
row0 = ynew [ 0 ] . toarray ( ) #NEWLINE#
fig . suptitle ( 'Matplotlib#SPACE#xticklabels#SPACE#Example' ) #NEWLINE#
d [ i [ i < d . shape [ 0 ] ] ] #NEWLINE#
[ 'c' , 'z' , 'b' , 'a' ] #NEWLINE#
self . _socket . bind ( ( self . _host , self . _port ) ) #NEWLINE#
printf ( '\n' ) #NEWLINE#
np . dot ( 2 ** np . arange ( 3 ) , flags ) #NEWLINE#
f . write ( text ) #NEWLINE#
real_root ( - 1 , 3 ) #NEWLINE#
df = df . set_index ( [ 'index' ] , drop = True ) #NEWLINE#
print ( str ( n ) [ : : - 1 ] ) #NEWLINE#
b = [ ( n >> i & 1 ) for i in range ( n . bit_length ( ) - 1 , - 1 , - 1 ) ] #NEWLINE#
res [ 0 ] = datetime . strptime ( res [ 0 ] , '...' ) #NEWLINE#
self . tableWidget . setItem ( 3 , 5 , QtGui . QTableWidgetItem ( ) ) #NEWLINE#
[ sorted ( item , key = priority . get ) for item in my_lists ] #NEWLINE#
17.9 , 18.2 , 18.3 , 18.1 , 18.0 , 18.4 , 18.5 , 18.6 , 19.0 , 19.1 , 18.9 , 19.2 #NEWLINE#
test [ n : ] #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
{ { ( object . created | date ) : 'SHORT_DATETIME_FORMAT' } } #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
time . sleep ( 30 ) #NEWLINE#
input [ : - len ( input . lstrip ( '0123456789' ) ) ] #NEWLINE#
return zip ( * [ ( lst [ i : ] + lst [ : i ] ) for i in range ( n ) ] ) #NEWLINE#
print ( [ ( x - i ) for i , x in enumerate ( a ) ] ) #NEWLINE#
lists [ 0 ] . append ( 1 ) #NEWLINE#
Image . fromarray ( result ) . save ( sys . argv [ 2 ] ) #NEWLINE#
dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ) #NEWLINE#
self . centred_text = wx . StaticText ( self . panel , label = 'Title' ) #NEWLINE#
sess . close ( ) #NEWLINE#
result = [ r [ 0 ] for r in result ] #NEWLINE#
[ 'I' , 'ST' , 'HE' , 'RE' , 'A' , 'FAST' , 'WAY' ] #NEWLINE#
[ 'I' , 'ST' , 'HER' , 'EA' , 'FA' , 'ST' , 'WAY' ] #NEWLINE#
[ 'I' , 'ST' , 'HERE' , 'A' , 'FA' , 'ST' , 'WAY' ] #NEWLINE#
[ 'IS' , 'THE' , 'RE' , 'A' , 'FA' , 'ST' , 'WAY' ] #NEWLINE#
arr . reshape ( 3 , 9 ) . T #NEWLINE#
list ( running_sum ( [ 1 , 2 , 3 , 4 , 5 ] ) ) #NEWLINE#
S = np . dot ( np . dot ( H , Y ) , H . T ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
last_name = models . CharField ( max_length = 30 ) #NEWLINE#
df [ 'tag' ] = df [ 'tweet' ] . str . findall ( '(#[^#SPACE#]*)' ) #NEWLINE#
[ 12588042 , 0.9473684210526315 ] #NEWLINE#
print ( 'not#SPACE#existe' ) #NEWLINE#
any ( [ ( x [ 1 : ] == x [ : - 1 ] ) for x in zip ( * arr ) ] ) #NEWLINE#
dsub = df1 . reset_index ( drop = True ) . sub ( df2 . reset_index ( drop = True ) ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
ax . set_zlabel ( 'Z' ) #NEWLINE#
rows = np . array ( [ 2 , 3 , 1 ] ) #NEWLINE#
logging . getLogger ( ) . getEffectiveLevel ( ) #NEWLINE#
df #NEWLINE#
MyThread ( ) . start ( ) #NEWLINE#
print ( parser . parse ( 'Mon,#SPACE#08#SPACE#Jun#SPACE#2009#SPACE#19:37:51#SPACE#GMT' ) . timestamp ( ) ) #NEWLINE#
tap ( [ ] , lambda x : x . append ( 1 ) ) #NEWLINE#
round ( 2.607 , 2 ) #NEWLINE#
vq ( array ( [ 0 , 5 , 5 ] ) , array ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
return [ k for k , n in Counter ( seq ) . items ( ) if n == 1 ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
paras = [ '' . join ( x . findAll ( text = True ) ) for x in span . findAllNext ( 'p' ) ] #NEWLINE#
ast . literal_eval ( '1,-2,3,4,-5' ) #NEWLINE#
indices = [ i for i , x in enumerate ( myList ) if re . search ( regex , x ) ] #NEWLINE#
[ t . parent for t in x . findAll ( text = <STR0> ) if t . parent . name == 'th' ] #NEWLINE#
input = int ( input ( 'Enter#SPACE#the#SPACE#inputs#SPACE#:#SPACE#' ) or '42' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
np . abs ( A [ : , ( np . newaxis ) ] - B ) #NEWLINE#
self . timer . stop ( ) #NEWLINE#
print ( '' . join ( str ( x ) for x in This ) ) #NEWLINE#
shutil . move ( 'a.txt' , 'b.kml' ) #NEWLINE#
username = request . user . username #NEWLINE#
return pd . read_csv ( f , ** kwargs ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( html ) #NEWLINE#
regexp = '^"?(.+?)"?$' #NEWLINE#
"""r'{}'""" . format ( regex . pattern ) #NEWLINE#
return djng . Response ( 'Hello,#SPACE#world' ) #NEWLINE#
sys . path . append ( path ) #NEWLINE#
float ( 'nan' ) #NEWLINE#
del my_list [ 1 ] #NEWLINE#
foo ( ( noniterable , ) ) #NEWLINE#
canvas . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
return struct . unpack ( '>f' , s ) [ 0 ] #NEWLINE#
df [ 'Region' ] = df [ 'Country' ] . apply ( lambda x : dict [ x ] ) #NEWLINE#
base64 . b64encode ( combined . digest ( ) , altchars = 'AB' ) #NEWLINE#
df . sort_values ( [ 'Store' , 'Date' ] ) . head ( 8 ) #NEWLINE#
app . root . mainloop ( ) #NEWLINE#
print ( sorted ( iter ( counter . items ( ) ) , key = lambda x : x [ : : - 1 ] ) ) #NEWLINE#
urljoin ( 'http://mysite.com/foo/bar/x.html' , '../../images/img.png' ) #NEWLINE#
vectors /= np . sqrt ( ( vectors ** 2 ) . sum ( - 1 ) ) [ ... , np . newaxis ] #NEWLINE#
[ x for x in ( k . replace ( '\n' , '' ) . strip ( ) for k in foo ) if x ] #NEWLINE#
'asd' + str ( 9 ) #NEWLINE#
ax1 . legend ( lines [ : 2 ] , labels [ : 2 ] , loc = 'best' ) #NEWLINE#
s . find_longest_match ( 0 , len ( a ) , 0 , len ( b ) ) #NEWLINE#
{ k : v for k , v in list ( dict . items ( ) ) if v > something } #NEWLINE#
db . session . commit ( ) #NEWLINE#
results = sorted ( list ( results . items ( ) ) , cmp = lambda a , b : b [ 1 ] - a [ 1 ] ) #NEWLINE#
[ k for k , g in groupby ( data ) ] #NEWLINE#
html . unescape ( '"' ) #NEWLINE#
names = [ name for name in names if name [ - 5 : ] != 'Smith' ] #NEWLINE#
my_func ( * arr . T ) #NEWLINE#
'f#SPACE#ooba#SPACE#r' , 'f#SPACE#oob#SPACE#ar' , 'f#SPACE#oob#SPACE#a#SPACE#r' , 'f#SPACE#oo#SPACE#bar' , 'f#SPACE#oo#SPACE#ba#SPACE#r' #NEWLINE#
'f#SPACE#oo#SPACE#b#SPACE#ar' , 'f#SPACE#oo#SPACE#b#SPACE#a#SPACE#r' , 'f#SPACE#o#SPACE#obar' , 'f#SPACE#o#SPACE#oba#SPACE#r' , 'f#SPACE#o#SPACE#ob#SPACE#ar' #NEWLINE#
plot ( ar , len ( ar ) * [ 1 ] , 'x' ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 , 3 , 4 ] #NEWLINE#
'%0*d' % ( 5 , 123 ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( 'Suppress#SPACE#me!' ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS = 'myproject.context_processors.django_version' , #NEWLINE#
sum ( map ( len , [ s for s in x if len ( s ) > 1 ] ) ) #NEWLINE#
df [ 'D' ] = df [ 'A' ] . map ( mapping ) #NEWLINE#
df . columns = df . columns . strftime ( '%Y-%m-%d' ) #NEWLINE#
test_rec [ indices ] #NEWLINE#
Color ( * Color2 . as_list ( ) ) #NEWLINE#
xbook . close ( ) #NEWLINE#
[ i for i in '1111' ] #NEWLINE#
print ( str . format ( '{0:.15f}' , val ) ) #NEWLINE#
( t . text + '' . join ( map ( etree . tostring , t ) ) ) . strip ( ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
A [ A > 1e+308 ] = 0 #NEWLINE#
combined = [ item for sublist in lists for item in sublist ] #NEWLINE#
del c [ : ] #NEWLINE#
dir_files = os . listdir ( '.' ) #NEWLINE#
__all__ = [ 'echo' , 'surround' , 'reverse' ] #NEWLINE#
query = sa . select ( [ '*' ] , from_obj = childJoins ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
ws . cell ( row = index , column = 2 ) . value = x1 #NEWLINE#
datetime ( 1970 , 1 , 1 ) #NEWLINE#
my_dict = json . load ( f ) #NEWLINE#
dot ( x , y ) #NEWLINE#
print ( 'quux=' , quux ) #NEWLINE#
print ( match . groups ( ) ) #NEWLINE#
Y = X - X . mean ( axis = 1 , keepdims = True ) #NEWLINE#
db = MySQLdb . connect ( host = 'localhost' , user = 'appuser' , passwd = '' , db = 'onco' ) #NEWLINE#
df . where ( df . eq ( df . max ( 1 ) , 0 ) , - 1 ) #NEWLINE#
os . system ( 'ps2ascii#SPACE#%s#SPACE#%s' % ( input , output ) ) #NEWLINE#
f_out . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
Handlers = [ ( '/(.*)' , webchat ) ] #NEWLINE#
format ( 0.001 , 'f' ) . rstrip ( '0' ) #NEWLINE#
print ( 'Who#SPACE#lives#SPACE#in#SPACE#a#SPACE#Pineapple#SPACE#under#SPACE#the#SPACE#sea?#SPACE#%(name)s.' % locals ( ) ) #NEWLINE#
maxlen = len ( max ( a , key = len ) ) #NEWLINE#
data = pickle . load ( f ) #NEWLINE#
return Response ( serializer . data , status = status . HTTP_201_CREATED ) #NEWLINE#
[ i for i , j in zip ( count ( ) , [ 'foo' , 'bar' , 'baz' ] ) if j == 'foo' ] #NEWLINE#
plot_data = [ [ ] ] * len ( positions ) #NEWLINE#
application = django . core . handlers . wsgi . WSGIHandler ( ) #NEWLINE#
DEV = os . environ [ 'SERVER_SOFTWARE' ] . startswith ( 'Development' ) #NEWLINE#
struct . unpack ( 'i' * ( ( len ( fileContent ) - 24 ) // 4 ) , fileContent [ 20 : - 4 ] ) #NEWLINE#
[ int ( d ) for d in file . split ( '-' ) ] #NEWLINE#
get_full_name . short_description = 'my#SPACE#label' #NEWLINE#
print ( 'ok' ) #NEWLINE#
itertools . combinations ( iterable , r ) #NEWLINE#
len ( regex . findall ( '\\X' , '\u200c' ) ) #NEWLINE#
subprocess . call ( [ 'cmd.exe' , '/c' , 'file.txt' ] ) #NEWLINE#
print ( re . search ( '(\\d)(\\d+?)(?=\\1)' , testString ) . group ( 0 ) ) #NEWLINE#
sum ( map ( r , v ) ) == - n #NEWLINE#
img . save ( 'img2.png' , 'PNG' ) #NEWLINE#
Index ( [ 'bad' , 'good' ] , dtype = 'object' ) #NEWLINE#
np . cross ( c , d ) . reshape ( 5 , 4 ) #NEWLINE#
e = Example ( size = 10 ) #NEWLINE#
result . append ( x [ : 2 ] . tolist ( ) ) #NEWLINE#
method ( ) #NEWLINE#
return render ( request , 'theTemplate.html' , context ) #NEWLINE#
self . ProgressBar . SetValue ( 0 ) #NEWLINE#
cv2 . destroyWindow ( 'preview' ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
print ( replace ( 'p' , 'apple' , '12345' ) ) #NEWLINE#
plt . savefig ( 'image2.png' ) #NEWLINE#
df . loc [ df . index . tolist ( ) + missing ] #NEWLINE#
"""I#SPACE#will#SPACE#be#SPACE#{}#SPACE#on#SPACE#{}#SPACE#{}""" . format ( 19 , 'January' , 23 ) #NEWLINE#
logging . getLogger ( 'requests' ) . setLevel ( logging . CRITICAL ) #NEWLINE#
pickle . dump ( driver . get_cookies ( ) , open ( 'cookies.pkl' , 'wb' ) ) #NEWLINE#
nonspace = re . compile ( '(\\S+)' ) #NEWLINE#
return result [ : - 1 ] #NEWLINE#
print ( 'hello' + '-' + 'world' ) #NEWLINE#
df . loc [ set ( df . index ) - set ( blacklist ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
np . where ( a == a . max ( ) ) #NEWLINE#
remotefile . info ( ) [ 'Content-Disposition' ] #NEWLINE#
s . encode ( 'ASCII' ) #NEWLINE#
[ f ( a ) for f in funcs for a in args ] #NEWLINE#
current_module = sys . modules [ __name__ ] #NEWLINE#
response = mechanize . urlopen ( request , data = data ) #NEWLINE#
re . match ( 'Run.*\\.py$' ) #NEWLINE#
sys . path . append ( path ) #NEWLINE#
print ( datetime . datetime . strptime ( 'Apr#SPACE#14,#SPACE#2016#SPACE#9:59:54' , '%b#SPACE#%d,#SPACE#%Y#SPACE#%I:%M:%S' ) ) #NEWLINE#
super ( DynamicModelSerializer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( f . stdout . readline ( ) ) #NEWLINE#
tup = tuple ( [ ( element . foo , element . bar ) for element in alist ] ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( '#SPACE##SPACE#<li>%s</li>' % line . split ( '*' ) [ 1 ] . strip ( ) ) #NEWLINE#
list ( window ( list ( range ( 10 ) ) ) ) #NEWLINE#
print ( c . most_common ( ) [ 0 ] ) #NEWLINE#
window . connect ( 'destroy' , lambda _ : gtk . main_quit ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
main ( ) #NEWLINE#
return df . iloc [ np . argmin ( np . abs ( df . index . to_pydatetime ( ) - dtObj ) ) ] #NEWLINE#
a [ : ] = [ s . strip ( ) for s in a ] #NEWLINE#
p [ s ] == np . arange ( n ) #NEWLINE#
parser . set ( 'test' , 'option' , 'Spam#SPACE#spam#SPACE#spam!' ) #NEWLINE#
random . shuffle ( newcolors ) #NEWLINE#
self . fields [ 'author' ] . queryset = choices #NEWLINE#
"""c""" . encode ( 'hex' ) #NEWLINE#
list ( filter ( lambda x : x not in [ 'b' , 'c' ] , [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) ) #NEWLINE#
params . add ( 'some_param' , '1' ) #NEWLINE#
c1 [ ( c2 == 2 ) & ( c3 == 3 ) ] #NEWLINE#
"""{"a":#SPACE#["1"],#SPACE#"b":#SPACE#["2"]}""" #NEWLINE#
t + np . roll ( t , - 1 ) #NEWLINE#
driver = webdriver . Firefox ( executable_path = '/path/to/geckodriver' ) #NEWLINE#
{ { form . name ( placeholder = 'Name' , ng_model = 'NameModel' ) } } #NEWLINE#
l . sort ( operator . itemgetter ( 0 ) , reverse = True ) #NEWLINE#
model . fit ( X = X , y = y ) #NEWLINE#
al [ 0 ] , al [ 1 ] = float ( strs [ 0 ] ) , float ( strs [ 1 ] ) #NEWLINE#
str ( random . random ( ) ) [ 2 : ] #NEWLINE#
r = requests . post ( URL , data = payload ) #NEWLINE#
list ( set ( ) . union ( a , b , c ) ) #NEWLINE#
main ( ) #NEWLINE#
itemIds = lambda : ( ( 'q42' , ) , ( 'Q42' , ) , ( 'Q1' , ) , ( 'Q1000' , ) , ( 'Q31337' , ) ) #NEWLINE#
self . graph = self . ax . hexbin ( self . xData , self . yData ) #NEWLINE#
csvwriter . writerow ( row ) #NEWLINE#
c . setopt ( c . HEADERFUNCTION , storage . write ) #NEWLINE#
np . searchsorted ( np . sort ( reference ) , data , side = 'left' ) #NEWLINE#
map ( len , [ 'abcd' , 'abc' , 'a' ] ) #NEWLINE#
admin . site . unregister ( Group ) #NEWLINE#
A [ [ [ - 1 ] , [ 0 ] , [ 1 ] ] , [ 2 , 3 , 4 ] ] += np . ones ( ( 3 , 3 ) ) #NEWLINE#
sys . stderr = sys . __stderr__ #NEWLINE#
return '\n' . join ( [ p . products for p in obj . product . all ( ) ] ) #NEWLINE#
plt . scatter ( df [ 'col_name_1' ] , df [ 'col_name_2' ] ) #NEWLINE#
a = [ 10.23 , 11.65 , 12.36 , 12.96 ] #NEWLINE#
hasattr ( object , '__call__' ) #NEWLINE#
'At' , 'Aunt' , 'Aw' , 'Bedlam' , 'Behind' , 'Besides' , 'Biblical' , 'Bill' #NEWLINE#
print ( 'test' ) #NEWLINE#
R = np . array ( mean_data ) [ : , ( 0 ) ] #NEWLINE#
df . groupby ( df [ 'b' ] . cumsum ( ) ) [ 'a' ] . cummax ( ) #NEWLINE#
numpy . invert ( array ) #NEWLINE#
sum ( 1 for x in gen ) #NEWLINE#
print ( a [ x ] [ y ] ) #NEWLINE#
a [ 1 ] . append ( 2 ) #NEWLINE#
np . log ( df . col1 / df . col1 . shift ( ) ) #NEWLINE#
addrport = ADDRPORT ( addrbytes , portshort ) #NEWLINE#
df [ 'A' ] [ d1 : d2 ] #NEWLINE#
print ( 'Not#SPACE#a#SPACE#float' ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
L = [ [ 0 , 1 , 1 , 1 ] , [ 1 , 0 , 1 , 1 ] , [ 1 , 1 , 0 , 1 ] , [ 1 , 1 , 1 , 0 ] ] #NEWLINE#
return pd . DataFrame ( res , columns = [ 'a' , 'b' , 'c' ] ) #NEWLINE#
sys . stdout . close ( ) #NEWLINE#
rdata . set_index ( [ 'race_date' , 'track_code' ] ) #NEWLINE#
r = redis . Redis ( connection_pool = pool ) #NEWLINE#
print ( '"{}"#SPACE#â\x86\x92#SPACE#"{}"' . format ( sent , subent ) ) #NEWLINE#
print ( [ '{:0.2f}' . format ( x ) for x in a ] ) #NEWLINE#
ax . set_ylim ( 0 , 300 ) #NEWLINE#
c . execute ( 'SELECT#SPACE#cleanseq#SPACE#FROM#SPACE#cleanseqs#SPACE#WHERE#SPACE#newID=:t' , locals ( ) ) #NEWLINE#
url_for ( 'add' , variable = foo ) #NEWLINE#
make_adder ( 5 ) ( 10 ) #NEWLINE#
cbar . set_ticks ( [ mn , md , mx ] ) #NEWLINE#
driver . get ( 'http://www.google.com/recaptcha/demo/recaptcha' ) #NEWLINE#
mag = np . sqrt ( x . dot ( x ) ) #NEWLINE#
raise MyError ( 'some#SPACE#error#SPACE#message' ) #NEWLINE#
np . random . seed ( 1977 ) #NEWLINE#
url ( '^(?P<optional>.+)/$' , 'myapp.so' , name = 'something_else' ) #NEWLINE#
print ( contents . replace ( 's' , '3' ) ) #NEWLINE#
lol = [ list ( range ( 10 ) ) , list ( range ( 2 , 12 ) ) , list ( range ( 5 , 15 ) ) ] #NEWLINE#
ssh . exec_command ( 'ls' ) #NEWLINE#
split_curve ( np . array ( [ 0 , 1 ] ) , np . array ( [ 0 , 1 ] ) , 2 ) #NEWLINE#
print ( colored ( 'hello' , 'red' ) , colored ( 'world' , 'green' ) ) #NEWLINE#
tk . Label ( start , text = 'What#SPACE#is#SPACE#the#SPACE#name#SPACE#of#SPACE#your#SPACE#table?' ) . pack ( ) #NEWLINE#
sys . stderr . close ( ) #NEWLINE#
rcParams [ 'toolbar' ] = 'None' #NEWLINE#
[ i for i in a if i not in b ] #NEWLINE#
for x in [ 'a' , 'b' , 'c' , 'd' , 'e' ] : #NEWLINE# #INDENT# setattr ( i , x , f ( getattr ( i , x ) ) ) #NEWLINE#
sys . stdout . write ( '%-6s#SPACE#%-50s#SPACE#%-25s\n' % ( code , name , industry ) ) #NEWLINE#
[ ( x + y ) for x , y in zip ( '12345' , 'ab' ) ] #NEWLINE#
print ( my_new_list ) #NEWLINE#
{ 'field2' : 'h' , 'field3' : 'i' , 'field1' : 'g' } #NEWLINE#
subprocess . Popen ( 'ver' , shell = True , stdout = subprocess . PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
'%0*d' % ( 3 , 4 ) #NEWLINE#
conn = boto . emr . connect_to_region ( 'us-east-1' ) #NEWLINE#
import my_module #NEWLINE#
gfunctions = { } #NEWLINE#
logger . debug ( 'No#SPACE#one#SPACE#expects#SPACE#the#SPACE#spammish#SPACE#repetition' ) #NEWLINE#
[ 'xy' , 'abc' ] #NEWLINE#
json . loads ( '[[0,0,0],#SPACE#[0,0,1],#SPACE#[1,1,0]]' ) #NEWLINE#
[ [ 'a' , 'd' , 'e' , 'b' , 'c' ] , [ 'f' , 'g' ] ] #NEWLINE#
soup . find_all ( 'tr' , class_ = re . compile ( 'colour#SPACE#blue.+' ) ) #NEWLINE#
window . show_all ( ) #NEWLINE#
a . append ( str ( wi ) ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
d . strftime ( '%b#SPACE#%d,%Y' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * y , map ( int , [ '2' , '3' , '4' ] ) ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
[ 'F' , 'B' , 'C' , 'E' ] #NEWLINE#
ax7 . yaxis . set_label_coords ( - 0.2 , 0.5 ) #NEWLINE#
ax2 . set_xlim ( 0 , 10 ) #NEWLINE#
s . resample ( 'D' , how = 'last' , fill_method = 'ffill' ) #NEWLINE#
list ( od . items ( ) ) [ : 3 ] #NEWLINE#
ax . yaxis . set_ticks_position ( 'none' ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
t . date ( ) #NEWLINE#
len ( set ( perms ) ) #NEWLINE#
np . random . choice ( array1 , 5 , replace = False ) #NEWLINE#
df3 . groupby ( df3 . index ) . mean ( ) #NEWLINE#
img . show ( ) #NEWLINE#
getattr ( module , class_name ) #NEWLINE#
plt . imshow ( crop_lena , cmap = plt . cm . gray ) #NEWLINE#
sys . path . append ( os . path . abspath ( '../bar_dir' ) ) #NEWLINE#
print ( list ( '^' . join ( mystring . lower ( ) ) ) ) #NEWLINE#
{ 'fill' : 'unchanged' , 'size' : 'unchanged' , 'angle' : 'unchanged' } #NEWLINE#
plt . show ( ) #NEWLINE#
{ { 'å½±å¸«å\x97\x8e#SPACE#1#SPACE#2#SPACE#3' | slug } } #NEWLINE#
ax . set_zlabel ( 'Z#SPACE#Label' ) #NEWLINE#
con . close ( ) #NEWLINE#
print ( 'It#SPACE#Does#SPACE#not#SPACE#Match#SPACE#:(' ) #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE#
big_df = pd . concat ( df_list ) #NEWLINE#
data = [ tuple ( line ) for line in csv . reader ( f ) ] #NEWLINE#
raise serializers . ValidationError ( 'error' ) #NEWLINE#
Counter ( ngrams ( words , 3 ) ) #NEWLINE#
html . parser . HTMLParser ( ) . unescape ( 'Suzy#SPACE#&#SPACE#John' ) #NEWLINE#
wx . Panel . __init__ ( self , parent ) #NEWLINE#
a [ - 9 : ] #NEWLINE#
ax . grid ( True ) #NEWLINE#
date = models . DateField ( _ ( 'Date' ) , default = datetime . date . today ) #NEWLINE#
os . path . realpath ( '/..' ) #NEWLINE#
plt . show ( ) #NEWLINE#
s . bind ( ( 'eth1' , 0 ) ) #NEWLINE#
[ 'title' , "I'm#SPACE#a#SPACE#paragraph!" ] #NEWLINE#
df . reindex ( s . index ) #NEWLINE#
ax . set_zlabel ( 'z' ) #NEWLINE#
a . repeat ( 2 , axis = 0 ) . repeat ( 2 , axis = 1 ) #NEWLINE#
os . system ( 'cls' ) #NEWLINE#
jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( { 'f' : var3 , 'g' : var4 , 'h' : var5 } ) #NEWLINE#
signal . signal ( signal . SIGALRM , signal_handler ) #NEWLINE#
a . reshape ( - 1 , 100 ) [ : : 2 ] . ravel ( ) #NEWLINE#
a [ np . arange ( len ( a ) ) , [ 1 , 0 , 2 ] ] #NEWLINE#
new_r = dict ( ( k , v ) for k , v in r . items ( ) if v is not None ) #NEWLINE#
value = next ( v for k , v in some_dict . items ( ) if 'substring' in k ) #NEWLINE#
sys . exit ( ) #NEWLINE#
Project . objects . all ( ) #NEWLINE#
[ 'test.py' , 'test.jpg' , 'wasp.jpg' ] #NEWLINE#
isinstance ( f , float ) #NEWLINE#
o . write ( 'C:\\Temp\\example.png' , 'word/settings.xml' ) #NEWLINE#
print ( dict ( re . findall ( '"([^"]*)"\\s*:\\s*"([^"]*)"' , my_string ) ) ) #NEWLINE#
plt . plot ( x , y2 ) #NEWLINE#
form = MyForm ( request . user ) #NEWLINE#
print ( df . astype ( float ) . sum ( ) . astype ( int ) . astype ( str ) ) #NEWLINE#
entry . focus_set ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
subprocess . call ( [ sys . executable , '-m' , 'unittest' , 'discover' ] ) #NEWLINE#
[ myfunc ( a , b ) for a , b in zip ( data [ : : 2 ] , data [ 1 : : 2 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
return pd . DataFrame ( a . reshape ( A . shape [ 0 ] , - 1 ) , A . index ) #NEWLINE#
s = 'freø̯̯nt' #NEWLINE# print ( s . encode ( 'unicode_escape' ) ) #NEWLINE#
name = next ( name for name , value in list ( vars ( Status ) . items ( ) ) if value == 1 ) #NEWLINE#
return super ( MyJSONEncoder , self ) . default ( obj ) #NEWLINE#
ax . plot ( x_model , model1 , '-k' , label = 'Model#SPACE#(k=1)' ) #NEWLINE#
driver . execute_script ( 'document.body.style.background#SPACE#=#SPACE#"black"' ) #NEWLINE#
mask = np . in1d ( a [ : , ( 0 ) ] , b ) #NEWLINE#
time . sleep ( 0 ) #NEWLINE#
y [ y . nonzero ( ) ] #NEWLINE#
1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 4 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
sys . path . append ( 'lib' ) #NEWLINE#
print ( list ( f ( ) ) ) #NEWLINE#
list ( Blog . objects . values ( ) ) #NEWLINE#
ax . xaxis . set_major_formatter ( dates . AutoDateFormatter ( locator ) ) #NEWLINE#
high_scores1 . merge ( high_scores2 [ [ 'match_id' , 'inn2' , 'runs2' ] ] , on = 'match_id' ) #NEWLINE#
plt . title ( 'name' , fontsize = 20 , color = 'black' ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
json . loads ( '{}{}' ) #NEWLINE#
subprocess . call ( [ 'pip' , 'install' , '-E' , home_dir , '-r' , path_to_req_txt ] ) #NEWLINE#
self . assertRaises ( TypeError , test_function , args ) #NEWLINE#
table = [ row . strip ( ) . split ( '\t' ) for row in file ] #NEWLINE#
print ( cmod . greet ( a ) ) #NEWLINE#
im_data = output . getvalue ( ) #NEWLINE#
ax2 . plot ( list ( range ( 20 ) ) , 'r^' ) #NEWLINE#
print ( random . choice ( a ) ) #NEWLINE#
ax . contourf ( x , y , z , zdir = 'x' , offset = x_min , cmap = cm . coolwarm ) #NEWLINE#
[ key for key , grp in itertools . groupby ( [ 1 , 2 , 2 , 3 ] ) ] #NEWLINE#
re . split ( '[^A-Za-z#SPACE#]|#SPACE##SPACE#' , 'My#SPACE#string#SPACE#is#SPACE##not#SPACE#very#SPACE#beautiful' ) [ 0 ] . strip ( ) #NEWLINE#
re . split ( '[^A-Za-z#SPACE#]|#SPACE##SPACE#' , 'this#SPACE#is#SPACE#the#SPACE#last#SPACE##SPACE#example' ) [ 0 ] . strip ( ) #NEWLINE#
df [ df [ 'col' ] . apply ( lambda x : 'pre' not in x ) ] = 'nonpre' #NEWLINE#
writer . writerows ( new_data ) #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , DataCursor ( plt . gca ( ) ) ) #NEWLINE#
getattr ( obj , 'func' ) ( 'foo' , 'bar' , 42 ) #NEWLINE#
plt . plot ( [ 7 , 8 , 9 ] , 'b' ) #NEWLINE#
np . array_split ( a , 2 , axis = 1 ) #NEWLINE#
logging . info ( 'blah' , exc_info = True ) #NEWLINE#
f . write ( leds [ 0 ] ) #NEWLINE#
( vals [ : , ( 0 ) ] == 0 ) & ( vals [ : , ( 1 ) ] == 1 ) #NEWLINE#
{ key : data [ key ] for key in one_by_ip } #NEWLINE#
ax . xaxis . set_major_locator ( mdates . YearLocator ( ) ) #NEWLINE#
tk . mainloop ( ) #NEWLINE#
item_labels . sort ( key = lambda t : c [ t [ 1 ] ] ) #NEWLINE#
br . title ( ) #NEWLINE#
return list ( set ( theList ) . intersection ( theDict ) ) #NEWLINE#
super ( parent2 , self ) . __init__ ( x , y ) #NEWLINE#
{ 'keyword2' : 'bar' , 'keyword1' : 'foo' } #NEWLINE#
Decimal ( 1 ) / Decimal ( 7 ) #NEWLINE#
tomorrow = twtomorrow . strftime ( '%Y-%m-%d' ) #NEWLINE#
heapq . nsmallest ( l , 2 ) #NEWLINE#
tree . write ( f , encoding = 'utf-8' ) #NEWLINE#
repo . git . reset ( '--hard' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
return max ( i [ 0 ] for i in oceans [ regcode - 1 ] ) #NEWLINE#
sorted ( a , key = lambda x : ( x [ 0 ] . isdigit ( ) , x ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
return tuple ( tryint ( x ) for x in re . split ( '([0-9]+)' , s ) ) #NEWLINE#
a . dot ( v ) #NEWLINE#
reader = csv . reader ( f , delimiter = '\t' ) #NEWLINE#
print ( proto . buffer . replace ( '\x00' , '#SPACE#' ) ) #NEWLINE#
[ 'big' , 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' ] #NEWLINE#
[ 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' ] #NEWLINE#
[ 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' ] #NEWLINE#
[ 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
set ( [ x for x in l if l . count ( x ) > 1 ] ) #NEWLINE#
row0 . append ( 'berry' ) #NEWLINE#
next ( item for item in dicts if item [ 'name' ] == 'Pam' ) #NEWLINE#
G . add_edge ( 1 , 2 , color = 'red' ) #NEWLINE#
"""{0.month}/{0.day}/{0.year}""" . format ( today ) #NEWLINE#
f . seek ( 0 , 2 ) #NEWLINE#
root = Tk ( ) #NEWLINE#
buf = '' . join ( str ( random . randint ( 0 , 1000 ) ) for j in range ( 1000 ) ) #NEWLINE#
map ( '' . join , itertools . product ( * ( ( c . upper ( ) , c . lower ( ) ) for c in 'Fox' ) ) ) #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
cv2 . imwrite ( sys . argv [ 3 ] , img ) #NEWLINE#
re . findall ( '\\d+|$' , '' ) [ 0 ] #NEWLINE#
"""Votes-[member#SPACE#name]-(2010-2014)-[download-time].csv""" . split ( '-' ) [ 1 ] #NEWLINE#
logging . basicConfig ( level = logging . DEBUG ) #NEWLINE#
df . to_excel ( writer , sheet_name = 'Sheet1' ) #NEWLINE#
pd . DatetimeIndex ( montdist [ 'date' ] ) + pd . DateOffset ( 1 ) #NEWLINE#
orcl . close ( ) #NEWLINE#
print ( 'e#SPACE#with#SPACE#obfuscation:#SPACE#é' ) #NEWLINE#
root . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
query . parse ( 'key:value#SPACE#AND#SPACE#"hey#SPACE#now":5#SPACE#OR#SPACE#"what#SPACE#is":up' ) #NEWLINE#
df . apply ( lambda s : s . value_counts ( ) . get ( 0 , 0 ) , axis = 1 ) #NEWLINE#
first2pairs = { k : mydict [ k ] for k in sorted ( mydict . keys ( ) ) [ : 2 ] } #NEWLINE#
df [ 'Col3' ] = df [ 'Col2' ] . map ( lambda x : 42 if x > 1 else 55 ) #NEWLINE#
df [ pd . to_numeric ( df . A , errors = 'coerce' ) . notnull ( ) ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
ax . set_xticklabels ( x_labels ) #NEWLINE#
Index ( [ 'col7' ] , dtype = 'object' ) #NEWLINE#
return '' . join ( dec ) #NEWLINE#
compact ( 'b' , 'd' ) #NEWLINE#
re . sub ( '(?!-)\\W' , '#SPACE#' , 'black#white' ) #NEWLINE#
s = ',' . join ( itertools . chain ( * li ) ) #NEWLINE#
return dict ( form = form ) #NEWLINE#
plt . xlim ( 0 , data . shape [ 0 ] ) #NEWLINE#
[ a [ i : i + 3 ] for i in range ( 0 , len ( a ) , 3 ) ] #NEWLINE#
df = df [ df . line_race != 0 ] #NEWLINE#
s == 'True' #NEWLINE#
df [ 'c' ] = df [ [ 'a' , 'b' ] ] . min ( axis = 1 ) #NEWLINE#
plt . contourf ( xi , yi , zi , v , cmap = plt . cm . jet ) #NEWLINE#
plt . rcParams [ 'text.latex.preamble' ] = [ '\\usepackage{xcolor}' ] #NEWLINE#
zip ( * data ) #NEWLINE#
print ( row [ 0 ] . read ( ) ) #NEWLINE#
bc = 'on' if c . page == 'blog' else 'off' #NEWLINE#
return map ( int , '8743-12083-15' . split ( '-' ) ) #NEWLINE#
[ int ( x . group ( ) ) for x in re . finditer ( '\\d+' , string1 ) ] #NEWLINE#
data . merge ( df . reset_index ( ) , how = 'left' , on = [ 'Date' , 'Store' ] ) #NEWLINE#
lines [ 2 ] [ 1 ] = '30' #NEWLINE#
L . append ( l ) #NEWLINE#
answer = sum ( float ( i ) for i in equation . split ( '+' ) ) #NEWLINE#
return any ( i . isdigit ( ) for i in string ) #NEWLINE#
print ( 'There#SPACE#are#SPACE#%d#SPACE#user#SPACE#connected#SPACE#%s' % ( userCount , 'today' ) ) #NEWLINE#
f . seek ( - len ( line ) , os . SEEK_CUR ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
cl . get_messages ( 'example_vhost' , 'example_queue' ) [ 0 ] [ 'message_count' ] #NEWLINE#
print ( '\x07' ) #NEWLINE#
return sum ( s [ i : ] . startswith ( subs ) for i in range ( len ( s ) ) ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
logging . getLogger ( ) . addFilter ( Aggregator ) #NEWLINE#
int ( headers [ 'content-length' ] ) #NEWLINE#
answer = [ len ( item ) for item in re . findall ( '1+' , test_string ) ] #NEWLINE#
return render_to_response ( 'article_update.html' , { 'form' : form } ) #NEWLINE#
a = [ 'a' , 'a' , 'a' , 'a' , 'b' , 'b' , 'c' , 'c' , 'c' , 'd' , 'e' , 'e' , 'e' , 'e' , 'e' ] #NEWLINE#
line = line [ 3 : ] #NEWLINE#
return len ( [ x for x in myList if x in myDict ] ) > 0 #NEWLINE#
print ( date . isoformat ( ) ) #NEWLINE#
len ( cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_GRAYSCALE ) . shape ) #NEWLINE#
array ( [ 1 , 2 , 3 ] ) #NEWLINE#
self . text . tag_configure ( 'bigfont' , font = ( 'Helvetica' , '24' , 'bold' ) ) #NEWLINE#
table . create ( ) #NEWLINE#
nhat = nhat / np . sqrt ( np . dot ( nhat , nhat ) ) #NEWLINE#
x = d . get ( i , '?' ) #NEWLINE#
sampleDF [ 'housing' ] = sampleDF [ 'housing' ] == 'yes' #NEWLINE#
return HttpResponse ( status = 500 ) #NEWLINE#
sys . stderr . write ( 'this#SPACE#is#SPACE#stderr\n' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
my_dict [ key ] . append ( value ) #NEWLINE#
writer . writerows ( row . split ( ) for row in infile ) #NEWLINE#
file = open ( 'Failed.py' , 'w' ) #NEWLINE#
o4 . __dict__ [ 'var' ] #NEWLINE#
[ 'Anna__67' , 'Dyogo_3' , 'Kiki_P1' , 'BEN_40001' ] #NEWLINE#
df . drop ( drops , inplace = True ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
writer . writerow ( dict ( zip ( fieldnames , row ) ) ) #NEWLINE#
exec ( open ( './path/to/script.py' ) . read ( ) , globals ( ) ) #NEWLINE#
print ( { k : [ d [ k ] for d in dd if k in d ] for k in all_keys } ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'foo' , start = 12 , stop = 15 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
ax . set_xlabel ( '' ) #NEWLINE#
fig . savefig ( 'test.png' , dpi = fig . dpi ) #NEWLINE#
layout . addWidget ( btn ) #NEWLINE#
sorted ( a . keys ( ) ) #NEWLINE#
A [ np . lexsort ( ( A [ : , ( 0 ) ] , A [ : , ( 1 ) ] ) ) ] #NEWLINE#
"""\\bCVE[\\d-]+""" #NEWLINE#
check_call ( 'echo#SPACE#"input#SPACE#data"#SPACE#|#SPACE#a#SPACE#|#SPACE#b#SPACE#>#SPACE#outfile.txt' , shell = True ) #NEWLINE#
session . commit ( ) #NEWLINE#
plt . hist ( np . clip ( values_A , bins [ 0 ] , bins [ - 1 ] ) , bins = bins ) #NEWLINE#
plt . show ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . intersection , x [ 1 : ] , set ( x [ 0 ] ) ) #NEWLINE#
new_string = '' . join ( re . findall ( '\\d+' , s ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
lst [ : ] = [ word for words in lst for word in words . split ( ) ] #NEWLINE#
return min ( x for x in list_of_nums if x is not None ) #NEWLINE#
print ( 'hi' ) #NEWLINE#
strjson = json . dumps ( str ( dic ) . replace ( "'" , '"' ) ) #NEWLINE#
locale . atoi ( '1,000,000' ) #NEWLINE#
return object . __getattribute__ ( self , name ) #NEWLINE#
return - abs ( x ) ** ( 1 / 3 ) #NEWLINE#
requests . delete ( url , data = json . dumps ( data ) ) #NEWLINE#
earth . speed ( 0 ) #NEWLINE#
mars . speed ( 0 ) #NEWLINE#
r . search ( '0123dog789cat' ) . span ( ) #NEWLINE#
df . stack ( ) . value_counts ( ) #NEWLINE#
ax . spines [ 'left' ] . set_linewidth ( 2 ) #NEWLINE#
ax . spines [ 'bottom' ] . set_linewidth ( 2 ) #NEWLINE#
subsets ( [ 1 , 2 , 3 ] ) #NEWLINE#
proc . stdin . write ( 'bar\n' ) #NEWLINE#
b . sort ( key = float ) #NEWLINE#
sftp . put ( '/home/me/file.ext' , '/remote/home/file.ext' ) #NEWLINE#
a [ np . ix_ ( a [ : , ( 0 ) ] > 3 , ( 0 , 1 , 3 ) ) ] #NEWLINE#
autoreconf - i #NEWLINE#
hdf5 . close ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
arr . append ( [ 'aa1' , 'aa2' ] ) #NEWLINE#
return dict ( i = i , j = j , k = k ) #NEWLINE#
plt . savefig ( 'confusion_matrix.png' , format = 'png' ) #NEWLINE#
df . dropna ( subset = [ 'comments' ] ) #NEWLINE#
sorted ( lst , key = lambda x : ( counts [ x ] , - firstidx [ x ] ) , reverse = True ) #NEWLINE#
changewriter . writerow ( [ productcode , amountentered ] + changecoins ) #NEWLINE#
opener . open ( 'http://website.com' ) . read ( ) #NEWLINE#
template = jinja_environment . get_template ( 'templates/index.html' ) #NEWLINE#
{ 'username' : 'admin' , 'email' : 'admin@localhost' , 'id' : 42 } #NEWLINE#
pd . read_csv ( 'wspace.csv' , header = None , sep = '\\s+' ) #NEWLINE#
dic [ 'Test' ] [ 'class' ] = { 'section' : 5 } #NEWLINE#
print ( '{0:d}' . format ( '1' ) ) #NEWLINE#
os . system ( cmd ) #NEWLINE#
df = df [ ~ df [ 'User#SPACE#Name' ] . str . contains ( '(?:DA|PL)$' ) ] #NEWLINE#
[ x for y in l for x in y ] #NEWLINE#
plt . gcf ( ) . canvas . get_supported_filetypes ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
list ( itertools . combinations_with_replacement ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 2 ) ) #NEWLINE#
answer = [ 0 , 1 , 1 , 1 , 1 , 0 ] #NEWLINE#
set ( [ ( 1 , 0 ) , ( 3 , 0 ) , ( 0 , 1 ) , ( 1 , 1 ) , ( 2 , 1 ) , ( 0 , 2 ) ] ) #NEWLINE#
holes = [ ( 4 , 4 ) , ( 7 , 11 ) , ( 26 , 27 ) , ( 29 , 34 ) , ( 49 , 52 ) ] #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_LINGER , linger_struct ) #NEWLINE#
main ( ) #NEWLINE#
s . loc [ 'b' , slice ( 2 , 10 ) ] #NEWLINE#
w , h = draw . textsize ( text , font ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
IP ( 'foobar' ) #NEWLINE#
x [ y . nonzero ( ) ] = y [ y . nonzero ( ) ] #NEWLINE#
a = myobject . getattr ( 'id' , None ) #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
vars ( funkytown ) #NEWLINE#
root . geometry ( '%sx%s+%s+%s' % ( w , h , a , b ) ) #NEWLINE#
raise Exception ( "Node#SPACE#'%s'#SPACE#could#SPACE#not#SPACE#be#SPACE#found#SPACE#in#SPACE#template." % name ) #NEWLINE#
"""""" . join ( map ( str , range ( 10 ) ) ) #NEWLINE#
return pd . concat ( [ pd . DataFrame ( out , df . index , a ) , df ] , axis = 1 ) #NEWLINE#
stats . sort ( key = lambda x : ( x [ 'A' ] , x [ 'Z' ] ) ) #NEWLINE#
urllib . request . urlopen ( req ) #NEWLINE#
return self . __getitem__ ( slice ( start , stop ) ) #NEWLINE#
print ( '\n-----\n' . join ( tokenizer . tokenize ( data ) ) ) #NEWLINE#
random . sample ( range ( 158609739 ) , 3609739 ) #NEWLINE#
itertools . chain ( * ( [ i ] * i for i in range ( 1 , 5 ) ) ) #NEWLINE#
"""""" . join ( [ c for c in a if c . isdigit ( ) or c == '.' ] ) #NEWLINE#
[ range ( 2 , 5 ) , range ( 12 , 17 ) , 20 ] #NEWLINE#
driver . save_screenshot ( 'screenshot.png' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
mySet = { x [ 0 ] for x in TUPLES } #NEWLINE#
print ( os . listdir ( path ) ) #NEWLINE#
cursor . execute ( sql , args ) #NEWLINE#
df . ix [ ( df . groupby ( 'obj_id' ) . data_date . idxmax ( ) ) , : ] #NEWLINE#
extra_logger . setLevel ( logging . INFO ) #NEWLINE#
a = np . array ( [ 'hello' , 'how' , 'are' , 'you' ] ) #NEWLINE#
cursor . execute ( 'SET#SPACE#CHARACTER#SPACE#SET#SPACE#utf8mb4;' ) #NEWLINE#
cursor . execute ( 'SET#SPACE#character_set_connection=utf8mb4;' ) #NEWLINE#
pylab . show ( ) #NEWLINE#
v = int ( float ( s ) ) if int ( float ( s ) ) == float ( s ) else float ( s ) #NEWLINE#
'\x01\x02\x03\n' == '\x01\x02\x03\n' #NEWLINE#
id_map = { k : v for v , k in enumerate ( df . phone_no . unique ( ) , 1 ) } #NEWLINE#
del foo . fields [ index ] #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
isnat ( np . timedelta64 ( 'NAT' ) ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
print ( ( char , char . isalpha ( ) ) ) #NEWLINE#
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 , 'e' : 5 , 'f' : 6 , 'g' : 7 , 'h' : 8 } #NEWLINE#
re . sub ( '^((.*?cat.*?){2})cat' , '\\1Bull' , #NEWLINE# 'cat#SPACE#goose#SPACE##SPACE#mouse#SPACE#horse#SPACE#pig#SPACE#cat#SPACE#foo#SPACE#cat#SPACE#cow' ) #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' , time . localtime ( p . create_time ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
mapping [ ord ( 'a' ) ] = 'b' #NEWLINE#
plt . draw ( ) #NEWLINE#
distances = np . sqrt ( ( x - x0 ) ** 2 + ( y - y0 ) ** 2 + ( z - z0 ) ** 2 ) #NEWLINE#
parser . add_argument ( 'servername' , nargs = '?' ) #NEWLINE#
cursor . execute ( 'CQL#SPACE#QUERY' , dict ( kw = 'Foo' , kw2 = 'Bar' , kwn = 'etc...' ) ) #NEWLINE#
df [ df [ 'col' ] . str . contains ( 'this' | 'that' ) == False ] #NEWLINE#
return getattr ( someobject , foostring ) #NEWLINE#
np . append ( a , z , axis = 1 ) #NEWLINE#
map ( str . strip , my_list ) #NEWLINE#
list ( ordered_dict . values ( ) ) [ 2 ] #NEWLINE#
np . concatenate ( ( arr [ ( [ 0 , n ] ) , : ] . ravel ( ) , arr [ 1 : - 1 , ( [ 0 , n ] ) ] . ravel ( ) ) ) #NEWLINE#
cur . execute ( 'PRAGMA#SPACE#database_list' ) #NEWLINE#
a = wd . execute_script ( 'return#SPACE#checkdata(arguments[0])' , code ) #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
f . close ( ) #NEWLINE#
from functools import reduce #NEWLINE# print ( reduce ( lambda x , y : x + y , l ) / len ( l ) ) #NEWLINE#
obj . date_modified = datetime . now ( ) #NEWLINE#
list ( set ( a ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
return [ int ( i ) for i in bin ( x ) [ 2 : ] ] #NEWLINE#
return HttpResponse ( line ) #NEWLINE#
br . set_cookiejar ( cj ) #NEWLINE#
plot_data = [ [ ] for _ in positions ] #NEWLINE#
a . reshape ( ( 3 , 3 ) , order = 'F' ) #NEWLINE#
print ( ',\t' . join ( map ( str , row ) ) ) #NEWLINE#
uniqlines = set ( open ( '/tmp/foo' ) . readlines ( ) ) #NEWLINE#
return sys . stdin . read ( 1 ) #NEWLINE#
m = 14313749767032793493 #NEWLINE#
a = np . array ( [ np . array ( list ( ) ) for _ in y ] ) #NEWLINE#
def textOf ( soup ) : #NEWLINE# #INDENT# return '' . join ( soup . findAll ( text = True ) ) #NEWLINE#
print ( df [ df [ 'Admission_Source_Code' ] == 1 ] ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#tablename' ) #NEWLINE#
( np . abs ( a - val ) <= tol ) . argmax ( ) #NEWLINE#
s . count ( 't#SPACE#a' ) #NEWLINE#
proc . stdin . write ( 'password' ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . clear_cookie ( 'user' ) #NEWLINE#
__init__ . py #NEWLINE#
print ( re . search ( '\\S+(?=\\n)' , line ) . group ( ) ) #NEWLINE#
raise TypeError ( 'Type#SPACE#not#SPACE#serializable' ) #NEWLINE#
xmlstr = ElementTree . tostring ( et , encoding = 'utf8' , method = 'xml' ) #NEWLINE#
"""You#SPACE#need#SPACE#Python#SPACE#2.6#SPACE#or#SPACE#later.""" #NEWLINE#
plt . xlabel ( 'A#SPACE#rose#SPACE#diagram#SPACE#colored#SPACE#by#SPACE#a#SPACE#second#SPACE#variable' ) #NEWLINE#
re . findall ( '\\w+[.]\\w+(?=@)' , s ) #NEWLINE#
[ seen [ c ] for c in list ] #NEWLINE#
print ( getattr ( Ls , 'thelist' ) [ 0 ] ) #NEWLINE#
QApplication . restoreOverrideCursor ( ) #NEWLINE#
throwaway = datetime . datetime . strptime ( '20110101' , '%Y%m%d' ) #NEWLINE#
df . query ( "(b#SPACE#==#SPACE#'foo'#SPACE#and#SPACE#c#SPACE#==#SPACE#'can')#SPACE#or#SPACE#(b#SPACE#==#SPACE#'bar'#SPACE#and#SPACE#c#SPACE#==#SPACE#'baz')" ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . where ( bool_arr , 'r' , 'k' ) #NEWLINE#
array ( [ [ 1 , 1 ] , [ 2 , 3 ] , [ 5 , 4 ] ] ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
d [ 'js' ] . append ( { 'foo' : 'bar' } ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
print ( '{0:.2f}' . format ( f ) ) #NEWLINE#
widget . destroy ( ) #NEWLINE#
pd . concat ( [ df . iloc [ : , : 1 ] , df . shift ( 1 ) , df . shift ( 2 ) . iloc [ : , 4 : ] ] , axis = 1 ) #NEWLINE#
A . indices = np . array ( [ 4 , 7 ] , dtype = np . int32 ) #NEWLINE#
transmission_array . append ( 0 ) #NEWLINE#
print ( '' . join ( '{:02x}' . format ( x ) for x in array_alpha ) ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
finder1 . apply_freq_filter ( 2 ) #NEWLINE# bigram_measures = nltk . collocations . BigramAssocMeasures ( ) #NEWLINE#
dateutil . parser . parse ( '2008-09-03T20:56:35.450686' ) #NEWLINE#
print ( '|#SPACE#{:<2}#SPACE##SPACE##SPACE##SPACE#|' . format ( self . value ) ) #NEWLINE#
[ 'GGC' , 'CAU' ] #NEWLINE#
np . insert ( B , np . arange ( len ( A ) ) , A ) #NEWLINE#
plt . show ( ) #NEWLINE#
sheet . write_merge ( 0 , 0 , 0 , 1 , 'Long#SPACE#Cell' ) #NEWLINE#
df #NEWLINE#
ax . set_ylim ( ( 0 , 10 ) ) #NEWLINE#
mylist . append ( item ) #NEWLINE#
my_string = mybytes . decode ( 'utf-8' ) #NEWLINE#
os . mkdir ( '/home/you/Desktop/stuff' ) #NEWLINE#
inverse = numpy . linalg . inv ( x ) #NEWLINE#
pickle . dump ( favorite_color , open ( 'save.p' , 'w' ) ) #NEWLINE#
myZipFile . write ( 'test.py' , 'dir\\test.py' , zipfile . ZIP_DEFLATED ) #NEWLINE#
out . write ( 'some#SPACE#text' ) #NEWLINE#
df . show ( ) #NEWLINE#
re . split ( '\\t+' , strs ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
subprocess . call ( [ 'xdg-open' , file ] ) #NEWLINE#
""",#SPACE#""" . join ( b ) #NEWLINE#
plt . axis ( 'on' ) #NEWLINE#
print ( s . encode ( 'latin-1' ) ) #NEWLINE#
button1 . config ( height = WHATEVER , width = WHATEVER2 ) #NEWLINE#
a [ - 1 ] #NEWLINE#
func . __dict__ = getattr ( self , 'dict' , { } ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 6 , 5 , 8 , 7 ] #NEWLINE#
[ x for x in ls if ls . count ( x ) == 1 ] #NEWLINE#
data = np . memmap ( 'tmp' , dtype = 'i' , mode = 'r+' , order = 'F' , shape = shape ) #NEWLINE#
r . plot ( rpy2 . robjects . Formula ( 'c3~c2' ) , data ) #NEWLINE#
ones = [ x for x in l if x [ 1 ] == 1 ] #NEWLINE#
main ( ) #NEWLINE#
plt . savefig ( 'sampleFileName.png' ) #NEWLINE#
f . close ( ) #NEWLINE#
checkMAC ( 'This#SPACE#is#SPACE#not#SPACE#a#SPACE#mac' ) #NEWLINE#
DCNS = 'http://purl.org/dc/elements/1.1' #NEWLINE#
fout . close ( ) #NEWLINE#
json_data = json . loads ( response . text ) #NEWLINE#
self . fig . canvas . draw ( ) #NEWLINE#
termios . tcsetattr ( sys . stdin , termios . TCSADRAIN , old_settings ) #NEWLINE#
print ( repr ( 123456789.98765433 ) ) #NEWLINE#
reverse_dict . setdefault ( value , [ ] ) . append ( keypath ) #NEWLINE#
[ [ 3 , 1 ] , [ 5 , 4 , 0 ] , [ 8 , 3 , 4 ] ] #NEWLINE#
mlab . show ( ) #NEWLINE#
driver . get ( 'http://gmail.com' ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
list ( itertools . chain ( * l2 ) ) #NEWLINE#
im . show ( ) #NEWLINE#
foo [ 0 : 3 ] #NEWLINE#
results . append ( line . strip ( ) . split ( ',' ) ) #NEWLINE#
new_list . append ( item [ 1 ] ) #NEWLINE#
print ( re . sub ( '([\\"#SPACE#\\\'])' , '\\\\\\1' , 'it\'s#SPACE#"this"' ) ) #NEWLINE#
out = [ l for l in out if l ] #NEWLINE#
plt . plot ( xx , yy , 'k-' ) #NEWLINE#
json . loads ( text ) #NEWLINE#
nltk . tokenize . sent_tokenize ( text ) #NEWLINE#
list ( wrapper ( csv . reader ( open ( 'test.csv' , 'r' ) ) ) ) #NEWLINE#
widget_set = { tuple ( sorted ( widget . items ( ) ) ) } #NEWLINE#
[ 'foo' , 'bar' ] [ eggs > 5 ] #NEWLINE#
print ( '' . join ( lst ) . lower ( ) . count ( letter ) ) #NEWLINE#
self . response . out . write ( photo . imageblob ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
( x [ i : j ] for i , j in itertools . combinations ( range ( len ( x ) + 1 ) , 2 ) ) #NEWLINE#
bool ( np . array ( [ '#SPACE#' ] ) ) #NEWLINE#
print ( '{0}' . format ( s ) ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , borderpad = 2 ) #NEWLINE#
print ( '%d#SPACE##SPACE##SPACE#%f' % ( count , conv ) ) #NEWLINE#
return [ i for i , j in zip ( x , y ) if i == j ] #NEWLINE#
driver . switch_to_window ( driver . window_handles [ 0 ] ) #NEWLINE#
ts . ix [ ts . index . indexer_between_time ( datetime . time ( 9 ) , datetime . time ( 18 ) ) ] #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) #NEWLINE#
p . communicate ( input = 'Hello,#SPACE#World' ) #NEWLINE#
ax . set_xlabel ( 'X-axis' ) #NEWLINE#
any ( x == 'a' for x , y in seq_of_tups ) #NEWLINE#
Fractions = { '¼' : 0.25 , '½' : 0.5 , '¾' : 0.75 , '⅕' : 0.2 } #NEWLINE#
max ( max ( p [ 1 : ] ) for p in PlayerList ) #NEWLINE#
s = smtplib . SMTP ( 'localhost' ) #NEWLINE#
print ( os . walk ( DIR_PATH ) . next ( ) [ 1 ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . intersection , map ( set , list ( d . values ( ) ) ) ) #NEWLINE#
subparsers = parser . add_subparsers ( title = 'Commands' , metavar = '<command>' ) #NEWLINE#
date . strftime ( '%Y-%m-%d' ) #NEWLINE#
os . path . split ( 'C:\\foo\\bar\\file_name.txt' ) #NEWLINE#
pool = Pool ( processes = 4 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( aslocaltimestr ( datetime . utcnow ( ) ) ) #NEWLINE#
[ chunk for chunk in line . split ( ) if not chunk . endswith ( ':' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
ser . read ( bytesToRead ) #NEWLINE#
raise NotImplementedError ( 'Subclass#SPACE#must#SPACE#implement#SPACE#abstract#SPACE#method' ) #NEWLINE#
fig . savefig ( 'multipleplots.png' ) #NEWLINE#
tags = models . ManyToManyField ( Tag , related_name = 'photos' ) #NEWLINE#
humanizer ( 'STACK#SPACE#OVER#SPACE#FLOW' ) #NEWLINE#
g . es [ 'name' ] = map ( str , np . arange ( N ) ) #NEWLINE#
aa = [ d [ k ] for k in f ] #NEWLINE#
np . transpose ( arr , [ 2 , 0 , 1 ] ) . reshape ( 5 , - 1 ) #NEWLINE#
s = 'test.zip.zyz' #NEWLINE# s = s . split ( '.zip' , 1 ) [ 0 ] + '.zip' #NEWLINE#
f ( lambda x , y : x + y , 1 , 2 ) #NEWLINE#
print ( etree . tostring ( bar , pretty_print = False , with_tail = True ) ) #NEWLINE#
results [ i ] . append ( benchmark ( i ) ) #NEWLINE#
unique_list . append ( sorted ( item ) ) #NEWLINE#
launchWithoutConsole ( 'd:\\bin\\gzip.exe' , [ '-d' , 'myfile.gz' ] ) #NEWLINE#
[ 'I' , 'ST' , 'HER' , 'EA' , 'FAS' , 'TWAY' ] #NEWLINE#
[ 'I' , 'ST' , 'HERE' , 'A' , 'FAS' , 'TWAY' ] #NEWLINE#
[ 'IS' , 'THE' , 'RE' , 'A' , 'FAS' , 'TWAY' ] #NEWLINE#
[ 'I' , 'ST' , 'HER' , 'EA' , 'FAST' , 'WAY' ] #NEWLINE#
[ 'I' , 'ST' , 'HERE' , 'A' , 'FAST' , 'WAY' ] #NEWLINE#
[ 'IS' , 'THE' , 'RE' , 'A' , 'FAST' , 'WAY' ] #NEWLINE#
[ 'IS' , 'THERE' , 'A' , 'FA' , 'ST' , 'WAY' ] #NEWLINE#
plt . show ( ) #NEWLINE#
newdict = { k : olddict [ k ] for k in goodkeys } #NEWLINE#
print ( 'After' , func . __name__ ) #NEWLINE#
db . close ( ) #NEWLINE#
plt . gca ( ) . add_artist ( myline ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ i for i in range ( 1000 ) if i % 3 == 0 or i % 5 == 0 ] #NEWLINE#
foo ( 'argvalue' , 5 , myarg = 'value' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sorted ( l , key = lambda x : int ( '' . join ( filter ( str . isdigit , x ) ) ) ) #NEWLINE#
isinstance ( n , int ) #NEWLINE#
a . reshape ( ( 2 , a . shape [ 0 ] // 2 , 3 , - 1 ) ) . mean ( axis = 3 ) . mean ( 1 ) #NEWLINE#
img = cv2 . cvtColor ( img , cv2 . COLOR_BGRA2BGR ) #NEWLINE#
ax2 . plot ( x [ i ] , y [ i ] , 'ro' , markersize = 20 ) #NEWLINE#
extractedData = data [ : , ( [ 1 , 9 ] ) ] #NEWLINE#
ranges = [ list ( range ( 11 , 30 ) ) , list ( range ( 6 , 20 ) ) , list ( range ( 11 , 25 ) ) ] #NEWLINE#
pylab . show ( ) #NEWLINE#
return [ x [ 0 ] for x in G ] #NEWLINE#
result = [ y for y in ( expensive ( x ) for x in mylist ) if y ] #NEWLINE#
[ 'G' , 'B' , 'D' , 'C' , 'F' , 'E' ] #NEWLINE#
self . connection . commit ( ) #NEWLINE#
open ( 'fubar.txt' , 'rb' ) . read ( ) #NEWLINE#
c = signal . fftconvolve ( a , numpy . fliplr ( numpy . flipud ( b ) ) , 'valid' ) #NEWLINE#
np . concatenate ( [ a [ ( np . newaxis ) , : ] , b [ ( np . newaxis ) , : ] ] , axis = 0 ) #NEWLINE#
with open ( 'file.txt' , 'r' ) as f : #NEWLINE# #INDENT# contents = f . readlines ( ) #NEWLINE#
del sys . modules [ 'mod' ] #NEWLINE#
objects = ndb . get_multi ( [ ndb . Key ( Model , k ) for k in ids ] ) #NEWLINE#
import imp #NEWLINE# imp . reload ( my_module ) #NEWLINE#
filtered = [ i for i in full if not regex . search ( i ) ] #NEWLINE#
avgs = [ ( ( a + b ) / 2 ) for a , b in zip ( * ( [ iter ( data ) ] * 2 ) ) ] #NEWLINE#
tekstboks2 . pack ( ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#last_insert_id()' ) #NEWLINE#
cursor . execute ( 'select#SPACE#@@identity' ) #NEWLINE#
plt . subplot ( 211 ) #NEWLINE#
return { 'foo' : 'bar' } #NEWLINE#
t . tz_convert ( None ) #NEWLINE#
list ( permutations ( list_of_tuples ) ) #NEWLINE#
self . ax . set_xlim ( 0 , R + pR ) #NEWLINE#
app . register_blueprint ( blog , url_prefix = '/blog' ) #NEWLINE#
del d [ k ] #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
x . shape #NEWLINE#
mydatetime . strftime ( '%Y%M%d' ) #NEWLINE#
pattern = re . compile ( 'package\\s+(\\w+)\\s+is(.*)end\\s+(package|\x01)\\s*;' , #NEWLINE# re . DOTALL ) #NEWLINE#
ts1 . corr ( ts2 ) #NEWLINE#
pkgutil - - pkgs #NEWLINE#
res . reset_index ( ) #NEWLINE#
libraries = [ 'externlib' ] #NEWLINE#
z = [ x ] + ( y if isinstance ( y , list ) else [ y ] ) #NEWLINE#
formatdate ( time . mktime ( dt . timetuple ( ) ) ) #NEWLINE#
sys . getsizeof ( 'this' ) #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , onpick3 ) #NEWLINE#
[ [ [ 'ASD' , ';' , '!' ] , '^' , [ 'FFF' , ';' , '!' ] ] ] #NEWLINE#
np . array_equiv ( A , B ) #NEWLINE#
newstring = re . sub ( '(Banana)' , '\\1Toothpaste' , oldstring ) #NEWLINE#
packages = [ 'fbuildbot' , 'fbuildbot.create' ] , #NEWLINE#
relative_paths = [ os . path . relpath ( path , common_prefix ) for path in paths ] #NEWLINE#
myArray [ 1 ] [ 1 ] == 2.71828 #NEWLINE#
return '' . join ( [ c for c in nfkd_form if not unicodedata . combining ( c ) ] ) #NEWLINE#
df . to_dict ( 'records' ) #NEWLINE#
nums = [ float ( eval ( input ( 'enter#SPACE#number#SPACE#{}:#SPACE#' . format ( i + 1 ) ) ) ) for i in #NEWLINE# range ( 100 ) ] #NEWLINE#
deque_slice = collections . deque ( itertools . islice ( my_deque , 10 , 20 ) ) #NEWLINE#
sudo ( 'mkdir#SPACE#tmp' ) #NEWLINE#
fro . close ( ) #NEWLINE#
zip ( * ( [ s ] * 2 ) ) #NEWLINE#
df [ filter . values ] . groupby ( 'movie#SPACE#title' ) . age . mean ( ) . nsmallest ( 5 ) #NEWLINE#
f_new . write ( 'extra#SPACE#stuff\n' ) #NEWLINE#
list ( itertools . chain . from_iterable ( L ) ) #NEWLINE#
df . columns = [ 'x' , 'y' ] #NEWLINE#
sns . plt . title ( 'YOUR#SPACE#TITLE#SPACE#HERE' ) #NEWLINE#
clf = linear_model . LinearRegression ( ) #NEWLINE#
x = str ( something ) #NEWLINE#
print ( ( value , count ) ) #NEWLINE#
[ ( len ( list ( g ) ) , k ) for k , g in itertools . groupby ( l ) ] #NEWLINE#
get_bucket ( bucket_name , validate = True , headers = None ) #NEWLINE#
test . append ( pd . Series ( 200 , index = [ 101 ] ) ) #NEWLINE#
[ 1 ] * 5 #NEWLINE#
return str ( int ( value ) ) #NEWLINE#
Dataset . objects . filter ( i_end_int__gte = x , i_begin_int__lte = x ) #NEWLINE#
parse_aYbM ( 'foo' ) #NEWLINE#
f . close ( ) #NEWLINE#
ax . set_ylabel ( 'depth' ) #NEWLINE#
zip ( a , x ) #NEWLINE#
ax . set_ylabel ( 'Scores' ) #NEWLINE#
pd . reset_option ( '^display.' , silent = True ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
next ( gen ) #NEWLINE#
print ( first . lower ( ) <= second . lower ( ) <= third . lower ( ) ) #NEWLINE#
test_cases . append ( TestCase ( 'FileCheck:#SPACE#PropertyServer' , '' , 0.0452 , '' , '' ) ) #NEWLINE#
[ 'aaaa-aa-bbbb' , 'bb-c-ccccc' ] #NEWLINE#
STATIC_URL = 'http://yourdomain.com/static/' #NEWLINE#
{ 'type' : 'Point' , 'coordinates' : [ - 73.6051013 , 45.5115944 ] } #NEWLINE#
list ( chain . from_iterable ( a ) ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#goes#SPACE#back#SPACE#to#SPACE#stdout' ) #NEWLINE#
"""x#SPACE#=#SPACE#{}""" . format ( x ) . encode ( 'utf8' ) #NEWLINE#
aces = map ( lambda x : 'a' + x , suits ) #NEWLINE#
[ ( x * ( 2 - x % 2 ) ) for x in a_list ] #NEWLINE#
hashlib . sha1 ( bytearray ( unpack ( '>4B' , pack ( 'I' , 1234 ) ) ) ) . hexdigest ( ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
import nltk #NEWLINE#
print ( eformat ( 1.1e-123 , 4 , 4 ) ) #NEWLINE#
print ( '_' . join ( combo ) ) #NEWLINE#
instance . save ( ) #NEWLINE#
curs . execute ( 'select#SPACE#max(x)#SPACE#from#SPACE#t' ) #NEWLINE#
sys . path . insert ( 0 , './python' ) #NEWLINE#
random . shuffle ( array ) #NEWLINE#
print ( '</table>' ) #NEWLINE#
p . fig . text ( 0 , 1 , 'Left#SPACE#the#SPACE#plot' , fontsize = 20 , rotation = 90 ) #NEWLINE#
return X_train , y_train , X_val , y_val , X_val , y_val #NEWLINE#
p . wait ( ) #NEWLINE#
list1 = [ _f for _f in list1 if _f ] #NEWLINE#
return '' . join ( [ random . choice ( '0123456789ABCDEF' ) for x in range ( 6 ) ] ) #NEWLINE#
request . FILES [ 'file' ] #NEWLINE#
print ( len ( unique_values ) ) #NEWLINE#
ax . set_xticks ( np . arange ( data . shape [ 1 ] ) + 0.5 , minor = False ) #NEWLINE#
self . __init__ ( * args , ** kwargs ) #NEWLINE#
df . iloc [ key . argsort ( ) ] #NEWLINE#
return HttpResponseRedirect ( '/' ) #NEWLINE#
assert is_subseq ( [ 'i' , 'n' , 'd' , 'i' , 'a' ] , [ 'i' , 'n' , 'd' , 'o' , 'n' , 'e' , #NEWLINE# 's' , 'i' , 'a' ] ) #NEWLINE#
return Response ( status = 204 ) #NEWLINE#
rec = lambda x : sum ( map ( rec , x ) ) if isinstance ( x , list ) else x #NEWLINE#
fp . write ( '</body></html>' ) #NEWLINE#
plt . figure ( figsize = plt . figaspect ( 1 ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . draw ( ) #NEWLINE#
print ( self . bar ) #NEWLINE#
l = re . compile ( '\\W' , re . UNICODE ) . split ( s ) #NEWLINE#
nlargest ( 5 , vector , key = itemgetter ( 1 ) ) #NEWLINE#
random . shuffle ( s ) #NEWLINE#
new_re_df = [ s . iloc [ np . where ( ts . astype ( int ) == int ( i ) ) ] for i in ts ] #NEWLINE#
""",#SPACE#""" . join ( str ( x ) for x in range ( 1 , 4 ) ) #NEWLINE#
bin ( 10 ) #NEWLINE#
os . walk ( '.' ) . next ( ) [ 1 ] #NEWLINE#
list ( product ( x , chain . from_iterable ( y ) ) ) #NEWLINE#
msg . attach ( MIMEText ( text ) ) #NEWLINE#
del request . session [ 'message_type' ] #NEWLINE#
with open ( 'filename.txt' , 'r' ) as handle : #NEWLINE# #INDENT# parsed = json . load ( handle ) #NEWLINE#
maxLPFt = max ( lpfData , key = operator . itemgetter ( 1 ) ) [ 1 ] #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#10000);' ) #NEWLINE#
wordnet . synset ( 'dog.n.1' ) . lemma_names ( ) #NEWLINE#
SomeModule . SomeUnicodeFunction ( str ( s . encode ( 'utf-8' ) ) ) #NEWLINE#
super ( Discount , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
with open ( 'hk_L1.ref' ) as f : #NEWLINE# #INDENT# data = numpy . array ( f . read ( ) . split ( ) , dtype = float ) . reshape ( 7000 , 8 ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
{ 'foo@bar.com' : set ( [ 'work' , 'notebook' ] ) , 'bob@example.net' : set ( [ 'gtalk' ] ) } #NEWLINE#
BillboardTracker . objects . filter ( expiry_date__le = datetime . now ( ) ) #NEWLINE#
func2 ( ** locals ( ) ) #NEWLINE#
print ( ( 'foo:' , foo ) ) #NEWLINE#
[ tr . findAll ( 'td' ) [ - 1 ] . text for tr in soup . findAll ( 'tr' ) ] #NEWLINE#
urllib . parse . unquote ( '%20' ) #NEWLINE#
bsizer . Add ( yourTxtCtrl , 1 , wx . EXPAND ) #NEWLINE#
lid = x . dot ( np . append ( 1 , ( x . max ( 0 ) + 1 ) [ : : - 1 ] [ : - 1 ] . cumprod ( ) ) [ : : - 1 ] ) #NEWLINE#
dict = { 'location' : 'somewhere' , 'arrival' : '1000' , 'departure' : None } #NEWLINE#
plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) , label = 'test#SPACE#label' ) #NEWLINE#
sum ( n for _ , n in structure ) #NEWLINE#
Post . objects ( tags__contains = 'mongodb' ) #NEWLINE#
ssh . close ( ) #NEWLINE#
do_something ( ) #NEWLINE#
do_something ( f ) #NEWLINE#
ax1 . set_xlabel ( 'time' ) #NEWLINE#
sys . stdout . write ( '%s' % line ) #NEWLINE#
a [ index ] += 1 #NEWLINE#
[ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) , ( 9 , None , None ) ] #NEWLINE#
x [ 'image_urls' ] [ 0 ] #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
handler . setLevel ( logging . DEBUG ) #NEWLINE#
warnings . filterwarnings ( 'error' , message = '*equal#SPACE#comparison#SPACE#failed*' ) #NEWLINE#
return super ( Factory , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
json . dumps ( data , ensure_ascii = False ) #NEWLINE#
"""""" . join ( '20#SPACE#01' . split ( ) ) #NEWLINE#
a . add ( 2 ) #NEWLINE#
zip ( s , s ) #NEWLINE#
x [ np . isnan ( x ) ] = something_not_nan #NEWLINE#
re . findall ( '(\\w+)' , sentence ) #NEWLINE#
x_file = open ( 'path/to/direct/filename.txt' ) #NEWLINE#
uncompressedData = bz2 . BZ2File ( zipFile ) . read ( ) #NEWLINE#
self . grid_columnconfigure ( 2 , weight = 1 ) #NEWLINE#
self . grid_columnconfigure ( 2 , weight = 1 ) #NEWLINE#
B = np . linalg . inv ( A . T ) . T #NEWLINE#
m = re . search ( '867-?5309' , data ) #NEWLINE#
nums = [ int ( n ) for n in text . split ( ) ] #NEWLINE#
re . split ( '\\W+' , 'Words,#SPACE#words,#SPACE#words.' , 1 ) #NEWLINE#
"""\\""" . join ( existGDBPath . split ( '\\' ) [ 0 : - 1 ] ) #NEWLINE#
self . connect ( self , SIGNAL ( 'clicked()' ) , self . close ) #NEWLINE#
'blah' , 'bleh' #NEWLINE#
df . groupby ( [ 'score' , 'type' ] , as_index = False ) . sum ( ) #NEWLINE#
print ( ',#SPACE#' . join ( map ( str , g ) ) ) #NEWLINE#
nums = [ int ( i ) for i in input ( 'Enter#SPACE#space#SPACE#separated#SPACE#inputs:#SPACE#' ) . split ( ) ] #NEWLINE#
INSTALLED_APPS += 'foo' , #NEWLINE#
[ ( sum ( e ) / len ( e ) ) for e in zip ( * data ) ] #NEWLINE#
[ literal_eval ( re . sub ( '(?<=\\(|,)(\\w+)(?=\\)|,)' , '"\\1"' , x ) ) for x in input ] #NEWLINE#
df1 [ df1 == 1 ] . count ( ) #NEWLINE#
os . getlogin ( ) #NEWLINE#
print ( os . getenv ( 'not_existing_variable' ) ) #NEWLINE#
sys . modules [ 'newname' ] = oldname #NEWLINE#
process . wait ( ) #NEWLINE#
driver . get ( 'http://www.httpbin.org' ) #NEWLINE#
OrderedDict ( [ ( 'id' , '0' ) , ( 'last_modified' , 'undefined' ) ] ) #NEWLINE#
np . random . shuffle ( data ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
sleep ( uniform ( 0 , 0.3 ) ) #NEWLINE#
return '%s#SPACE#%s' % ( alpha . upper ( ) , num ) #NEWLINE#
H = np . array ( [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] , [ 13 , 14 , 15 , 16 ] ] ) #NEWLINE#
words = f . read ( ) . split ( ) #NEWLINE#
return tf . reduce_mean ( tf . cast ( mistakes , tf . float32 ) ) #NEWLINE#
exec ( compile ( open ( 'execfile_example.py' ) . read ( ) , 'execfile_example.py' , 'exec' ) #NEWLINE# ) #NEWLINE#
cursor . close ( ) #NEWLINE#
body = body . replace ( block . text , hilited ) #NEWLINE#
[ [ x for x in row . findAll ( 'td' ) ] for row in soup . findAll ( 'tr' ) ] #NEWLINE#
b += int ( a ) #NEWLINE#
br . add_handler ( PrettifyHandler ( ) ) #NEWLINE#
reactor . run ( ) #NEWLINE#
writer . writerow ( csvdata ) #NEWLINE#
a = np . hstack ( ( [ 0.2 ] , np . linspace ( 1 , 60 , 60 ) , [ 60.8 ] ) ) #NEWLINE#
current_command ( ) #NEWLINE#
some_instance . add_method ( 'blah' , skel ) #NEWLINE#
pylab . hist ( [ random_triangular ( 1 , 6 , 5 ) for t in range ( 10000 ) ] ) #NEWLINE#
[ '.net' , 'python#SPACE#.net' , 'c++#SPACE#.net' ] #NEWLINE#
print ( ( 'x=' , x , 'func1' ) ) #NEWLINE#
moving_average ( a , n = 4 ) #NEWLINE#
return tf . py_func ( func , inp , Tout , stateful = stateful , name = name ) #NEWLINE#
result = set ( x for l in array for x in l ) #NEWLINE#
plt . show ( ) #NEWLINE#
return jsonify ( success = True , data = jsonData ) #NEWLINE#
timeit ( [ x for x in a if x in b ] ) #NEWLINE#
print ( '' . join ( lab7 ) . count ( input_char ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . show ( ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self ) #NEWLINE#
d = dict ( ( k , v ) for k , v in list ( d . items ( ) ) if k ) #NEWLINE#
raise Exception ( 'This#SPACE#object#SPACE#should#SPACE#be#SPACE#used#SPACE#only#SPACE#with#SPACE#`with`' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
img = Image . open ( 'image.png' ) . convert ( 'LA' ) #NEWLINE#
text = text . replace ( 'very' , 'not#SPACE#very' , 1 ) #NEWLINE#
u = str ( s , 'utf-8' ) #NEWLINE#
re . findall ( '[^A-Za-z0-9_\\-\\\\]' , userpath ) #NEWLINE#
self . assertRaises ( TypeError , lambda : self . testListNone [ : 1 ] ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
print ( re . escape ( '<b*>' ) ) #NEWLINE#
conn . request ( 'HEAD' , '/index.html' ) #NEWLINE#
fh . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . apply ( lambda x : x . apply ( lambda x : [ ] if math . isnan ( x ) else x ) ) #NEWLINE#
app . run ( server = server ) #NEWLINE#
datetime . datetime . strptime ( date_text , '%Y-%m-%d' ) #NEWLINE#
arr . sum ( axis = 1 ) . shape #NEWLINE#
self . le . setText ( 'Host' ) #NEWLINE#
df . drop ( 'samples' , axis = 1 ) . join ( s ) #NEWLINE#
r = [ [ ] for i in range ( 4 ) ] #NEWLINE#
houses = [ House ( ( 1 , 3 ) ) , House ( ( 3 , 3 ) ) , House ( ( 4 , 3 ) ) ] #NEWLINE#
return HttpResponse ( data , mimetype = 'application/json' ) #NEWLINE#
df = numpy . genfromtxt ( 'minimal.csv' , names = True , dtype = None , delimiter = ',' ) #NEWLINE#
x = [ 'a' , 'one#SPACE#"two"#SPACE#three' , 'foo,#SPACE#bar' , 'both"\'' ] #NEWLINE#
list ( map ( min , [ 1 , 2 , 3 , 4 ] , [ 0 , 10 , 0 , 10 ] ) ) #NEWLINE#
df . append ( df . sum ( numeric_only = True ) , ignore_index = True ) #NEWLINE#
print ( 'Hey,#SPACE#{fruit}' . format ( ** locals ( ) ) ) #NEWLINE#
return a . get ( ) + b . get ( ) #NEWLINE#
super ( ListField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return np . einsum ( 'ij,im,mj->i' , xdiff , xdiff , Sigma_inv ) #NEWLINE#
lst . append ( lambda x : f ( x , i ) ) #NEWLINE#
textwidget . pack ( side = tk . LEFT , fill = tk . BOTH ) #NEWLINE#
element = driver . find_element_by_xpath ( '//div[@class="network-items"]/a' ) #NEWLINE#
app . root . mainloop ( ) #NEWLINE#
[ x for x in L if x >= 0 ] #NEWLINE#
print ( key , value ) #NEWLINE#
setattr ( module , name , value ) #NEWLINE#
print ( df . applymap ( lambda x : x > 1 ) ) #NEWLINE#
[ x [ 1 ] for x in sorted ( random . sample ( enumerate ( myList ) , K ) ) ] #NEWLINE#
mylist . insert ( 0 , ( 'foo' , 'bar' ) ) #NEWLINE#
logging . set_up_done = True #NEWLINE#
np . hstack ( results ) #NEWLINE#
( a == b ) . sum ( ) #NEWLINE#
print ( b [ 0 ] [ 'addr' ] ) #NEWLINE#
newsampledata . sample ( n , replace = True ) . reset_index ( drop = True ) #NEWLINE#
[ sum ( map ( f , x ) ) for x in data ] #NEWLINE#
sns . heatmap ( data , ax = ax ) #NEWLINE#

f = lambda x : None #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
my_copy [ 'a' ] [ 2 ] #NEWLINE#
"""123456""" [ 2 : : - 2 ] #NEWLINE#
super ( ProjectAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
lines = my_string . split ( '\n' ) #NEWLINE#
map ( lambda s : map ( list , s ) [ 0 ] , [ [ 'ANTT' ] , [ 'XSOB' ] ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( mul , list , 1 ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
list ( dict ( ( tuple ( x [ : 2 ] ) , x ) for x in L ) . values ( ) ) #NEWLINE#
cur . execute ( 'create#SPACE#table#SPACE#test(d#SPACE#decimal)' ) #NEWLINE#
'My#SPACE#name#SPACE#is#SPACE#%(name)s,#SPACE#I#SPACE#am#SPACE#%(age)s#SPACE#years#SPACE#old' % { 'name' : 'John' , 'age' : 98 } #NEWLINE#
[ wordList [ i ] for i in indexList ] #NEWLINE#
print ( s . recv ( 1024 ) ) #NEWLINE#
re . sub ( '\\{(\\d+)\\}' , lambda m : '{' + dict_ [ m . group ( 1 ) ] + '}' , line ) #NEWLINE#
return sum ( a [ i ] != b [ i ] for i in range ( len ( a ) ) ) #NEWLINE#
do_something_with ( lines ) #NEWLINE#
print ( 'a#SPACE#is#SPACE#in#SPACE#b' ) #NEWLINE#
print ( ',#SPACE#' . join ( set_3 ) ) #NEWLINE#
df . to_sql ( 'df' , sql_cnxn , flavor = 'mysql' , if_exists = 'replace' , chunksize = 100 ) #NEWLINE#
window . Minimize ( ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
fig . canvas . draw_idle ( ) #NEWLINE#
print ( '{:,}' . format ( value ) ) #NEWLINE#
fileReader = csv . reader ( csv_file . split ( '\n' ) ) #NEWLINE#
dict . __init__ ( self , * args , ** kwargs ) #NEWLINE#
self . table . setColumnCount ( 5 ) #NEWLINE#
foundItems = ( key for key , vals in list ( mydict . items ( ) ) if item in vals ) #NEWLINE#
root . destroy ( ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
ax . pcolormesh ( x , y , z , cmap = mpl . cm . Reds ) #NEWLINE#
return unittest . main ( * args , ** kwargs ) #NEWLINE#
print ( self . _haircolor ) #NEWLINE#
Orange . data . Table ( 'yourFile.basket' ) #NEWLINE#
soup . select ( 'a[href$=price]' ) #NEWLINE#
sc = SparkContext ( 'local' , 'Simple#SPACE#App' ) #NEWLINE#
y = { 'b' : 3 , 'c' : 4 } #NEWLINE#
"""""" . join ( [ ( i . replace ( 'dehli' , '' ) if '"' in i else i ) for i in sp ] ) #NEWLINE#
result = map ( sum , a ) #NEWLINE#
super ( CharField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
replace_right ( 'asd.asd.asd.' , '.' , '.#SPACE#-' , 1 ) #NEWLINE#
next ( item for item in a if item is not None ) #NEWLINE#
pd . concat ( [ pd . DataFrame ( a ) , pd . DataFrame ( b ) ] , axis = 1 ) #NEWLINE#
[ ( 'aa' , [ 0 , 1 , 2 ] ) , ( 'cc' , [ 7 , 8 , 9 ] ) , ( 'bb' , [ 3 , 4 , 5 , 6 ] ) ] #NEWLINE#
array ( [ [ 1 , 2 , 3 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 4 , 0 , 0 ] , [ 0 , 0 , 0 , 0 , 5 , 6 ] ] ) #NEWLINE#
ax . set_zlabel ( 'Intensity' ) #NEWLINE#
raise RuntimeError ( 'I#SPACE#want#SPACE#to#SPACE#report#SPACE#exception#SPACE#here...' ) #NEWLINE#
driver . get ( 'http://stackoverflow.com' ) #NEWLINE#
str ( 3 ) . zfill ( 2 ) #NEWLINE#
tree . xpath ( 'namespace-uri(.)' ) #NEWLINE#
[ i for i , xs in enumerate ( [ [ 1 , 2 ] , [ 2 , 3 ] , [ 9 , 3 ] ] ) if 3 in xs ] #NEWLINE#
lst . extend ( [ 5 , 6 , 7 ] ) #NEWLINE#
print ( x . replace ( '^M' , '' ) ) #NEWLINE#
'0x%08X' % 3652458 #NEWLINE#
x = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE# y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
getattr ( globals ( ) [ 'Foo' ] ( ) , 'bar2' ) ( ) #NEWLINE#
col . find_one ( ) #NEWLINE#
numbers = iter ( list ( range ( 100 ) ) ) #NEWLINE#
result = [ v for i , v in enumerate ( L ) if L [ i : i + 2 ] != [ '**' , '**' ] ] #NEWLINE#
my_queue . put ( x ) #NEWLINE#
msgBox . addButton ( QtGui . QPushButton ( 'Accept' ) , QtGui . QMessageBox . YesRole ) #NEWLINE#
df . apply ( lambda x : x . dropna ( ) . rolling ( 3 ) . mean ( ) . reindex ( x . index ) ) #NEWLINE#
len ( { s [ i : i + n ] for i in range ( len ( s ) - n + 1 ) } ) #NEWLINE#
shutil . copyfileobj ( buf , fd ) #NEWLINE#
ftp . cwd ( path ) #NEWLINE#
[ x for item in l for x in repeat ( item , 2 ) ] #NEWLINE#
dict ( zip ( headers , zip ( * sdata ) ) ) #NEWLINE#
return pattern . format ( s ) #NEWLINE#
label . setText ( 'Window#SPACE#Title' ) #NEWLINE#
random . shuffle ( x ) #NEWLINE#
[ ( lambda : x ) for x in [ 1 , 5 , 7 , 3 ] ] #NEWLINE#
ax . set_yticks ( pos , ( 'Tom' , 'Dick' , 'Harry' , 'Slim' , 'Jim' ) ) #NEWLINE#
print ( ( 'after,#SPACE#outer_string#SPACE#=' , outer_string ) ) #NEWLINE#
virtualenv #NEWLINE#
list ( map ( f , [ 'a' , 'b' , 'c' , 'd' ] , itertools . cycle ( '12' ) ) ) #NEWLINE#
my_string . format ( my_name = 'minerz029' ) #NEWLINE#
pd . isnull ( df ) . any ( ) #NEWLINE#
writer . writerow ( list ( row [ 0 ] . timetuple ( ) ) [ : 3 ] + row [ 1 : ] ) #NEWLINE#
button . connect ( 'clicked' , self . on_button_clicked ) #NEWLINE#
plt . show ( ) #NEWLINE#
tasklist . append ( newtask ) #NEWLINE#
[ x for x in lst if x . lower ( ) not in seen and not seen . add ( x . lower ( ) ) ] #NEWLINE#
print ( request . args . get ( 'b' ) ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
[ 0 , 1 , 2 , 0 , 3 , 1 , 4 , 0 ] #NEWLINE#
print ( list ( itertools . product ( ( False , True ) , repeat = 3 ) ) ) #NEWLINE#
Counter ( { ( 0.5 , 2.0 ) : 2 , ( 1.0 , 2.5 ) : 1 , ( 0.5 , 3.0 ) : 1 , ( 2.3 , 2.0 ) : 1 } ) #NEWLINE#
len ( z [ 'results' ] ) #NEWLINE#
'%0.2f' % ( num , ) #NEWLINE#
array ( [ [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] , [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] , [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] ] ) #NEWLINE#
log = logging . getLogger ( __name__ ) #NEWLINE#
[ ( 'donald#SPACE#trump' , 'is' , 'worst#SPACE#president' ) , ( 'hillary' , 'is' , 'better' ) ] #NEWLINE#
app . run ( ) #NEWLINE#
html = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
( 'Permissions' , { 'fields' : ( 'is_active' , 'is_superuser' ) } ) , #NEWLINE#
pd . DataFrame ( np . einsum ( 'ijk->ik' , df . values . reshape ( - 1 , 2 , df . shape [ 1 ] ) ) / 2.0 ) #NEWLINE#
ax1 . set_ylabel ( 'km$^3$/year' ) #NEWLINE#
df . drop ( [ 'total_days' , 'hols' ] , axis = 'columns' , inplace = True ) #NEWLINE#
array ( [ [ 0 , 0 , 0 ] , [ 0 , 2 , 0 ] , [ 3 , 2 , 4 ] ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
button = Tk . Button ( mainWin , text = 'press' , command = fce ) #NEWLINE#
list ( takewhile ( lambda x : x < 5 , list ( range ( 5 ) ) ) ) #NEWLINE#
p . kill ( ) #NEWLINE#
webbrowser . open ( 'http://www.google.com' , new = 1 ) #NEWLINE#
np . array_equal ( A , B ) #NEWLINE#
plt . show ( ) #NEWLINE#
check_call ( [ 'dot' , '-Tpng' , 'InputFile.dot' , '-o' , 'OutputFile.png' ] ) #NEWLINE#
print ( stations [ 'KORD' ] ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
new_array = np . array ( df . index . to_pydatetime ( ) , dtype = numpy . datetime64 ) #NEWLINE#
return [ child . get ( 'value' ) for child in parent ] #NEWLINE#
'%.3g' % x #NEWLINE#
sns . regplot ( x = idx , y = df [ 'y' ] , ax = ax2 ) #NEWLINE#
count_letters ( 'The#SPACE#grey#SPACE#old#SPACE#fox#SPACE#is#SPACE#an#SPACE#idiot.' ) #NEWLINE#
output . close ( ) #NEWLINE#
assert revdict [ 'def' ] == 'abc' #NEWLINE#
tn . write ( 'exit\n' ) #NEWLINE#
print ( '' . join ( [ ( '(' + str ( r ) + ',' + str ( c ) + ')\n' ) for r , c in skel_coords ] ) ) #NEWLINE#
grid = QtGui . QGridLayout ( ) #NEWLINE#
nodes . CallBlock ( [ call ] , [ ] , [ ] , [ ] ) #NEWLINE#
requests . post ( url , data = data , headers = headers ) #NEWLINE#
print ( s . replace ( ',' , '#SPACE#' * 4 ) ) #NEWLINE#
os . path . basename ( 'home/robert/Documents/Workspace/datafile.xlsx' ) #NEWLINE#
grades = [ x . strip ( ) for x in files . readlines ( ) ] #NEWLINE#
lambda i : isinstance ( i , int ) #NEWLINE#
return any ( isinstance ( e , list ) for e in my_list ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
ssh_client = paramiko . SSHClient ( ) #NEWLINE#
Lines = [ ( 'B' , 'C' ) , ( 'D' , 'A' ) , ( 'D' , 'C' ) , ( 'A' , 'B' ) , ( 'D' , 'B' ) ] #NEWLINE#
elapsed_time = time . time ( ) - start_time #NEWLINE#
{ { value | unlocalize } } #NEWLINE#
test [ ( 1 ) , : ] #NEWLINE#
ax . spines [ 'left' ] . set_position ( 'zero' ) #NEWLINE#
df [ 0 ] . to_json ( ) #NEWLINE#
plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
s . getvalue ( ) #NEWLINE#
sentence = sentence [ 8 : 12 ] . replace ( '#SPACE#' , '*' ) #NEWLINE#
plt . pie ( values , labels = labels , autopct = '%.2f' ) #NEWLINE#
print ( '%*s#SPACE#=#SPACE#%s' % ( hwidth , row . _fields [ i ] , row [ i ] ) ) #NEWLINE#
t = tuple ( lst ) #NEWLINE#
math . ceil ( x / 500.0 ) * 500.0 #NEWLINE#
print ( ET . tostring ( graph , pretty_print = True ) ) #NEWLINE#
print ( re . escape ( 'www.stackoverflow.com' ) ) #NEWLINE#
zip ( * [ s , s ] ) #NEWLINE#
Popen ( [ 'nice' ] , preexec_fn = lambda : os . nice ( 20 ) ) . communicate ( ) #NEWLINE#
fixed = '' . join ( s . split ( ':' , 1 ) ) #NEWLINE#
data [ '2013-08-17' ] . boxplot ( by = 'SPECIES' ) #NEWLINE#
im = Image . open ( StringIO . StringIO ( buffer ) ) #NEWLINE#
df . withColumn ( 'map' , map ( lit ( 'key1' ) , lit ( 1 ) , lit ( 'key2' ) , lit ( 2 ) ) ) #NEWLINE#
test [ : , ( 0 ) ] #NEWLINE#
c = list ( itertools . chain . from_iterable ( zip ( a , b ) ) ) #NEWLINE#
[ item for item , flag in zip ( s , b ) if flag == 1 ] #NEWLINE#
res = pd . concat ( d ) . groupby ( 'own' ) . mean ( ) #NEWLINE#
assert data [ 'activity' ] [ 'type' ] == 'read' #NEWLINE#
ax . spines [ 'bottom' ] . set_position ( 'zero' ) #NEWLINE#
df . T . set_index ( np . repeat ( 'C' , df . shape [ 1 ] ) , append = True ) . T #NEWLINE#
a [ 'pos' ] [ [ 'y' , 'x' ] ] #NEWLINE#
leg . legendHandles [ 1 ] . set_color ( 'yellow' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
_draw_point ( renderer , position , j , i ) #NEWLINE#
os . path . dirname ( sys . executable ) #NEWLINE#
print ( min ( strings , key = len ) ) #NEWLINE#
{ ( 1 ) : { ( 2 ) : { 'test' : 6 , ( 3 ) : 4 } , ( 3 ) : { ( 3 ) : 5 } } } #NEWLINE#
list ( itertools . combinations_with_replacement ( list ( range ( 10 ) ) , 3 ) ) #NEWLINE#
ax . set_xlim ( 0.5 , 5 ) #NEWLINE#
plt . show ( ) #NEWLINE#
boxplot ( [ 1 , 2 , 3 , 4 , 5 , 10 ] , sym = '' ) #NEWLINE#
[ ( x + ( y , ) ) for x , y in zip ( a , h ) ] #NEWLINE#
self . sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
sorted ( mydict . items ( ) ) #NEWLINE#
os . path . exists ( '/proc/12' ) #NEWLINE#
self . log . setLevel ( logging . INFO ) #NEWLINE#
mystring = mystring . replace ( '\n' , '#SPACE#' ) . replace ( '\r' , '' ) #NEWLINE#
np . multiply ( np . arange ( 1 , 5 ) , 2 ** np . arange ( 0 , 4 ) [ np . newaxis ] . T ) #NEWLINE#
ax . set_title ( 'Trending#SPACE#words#SPACE#and#SPACE#their#SPACE#counts' ) #NEWLINE#
[ 0 , 1 , 2 ] #NEWLINE#
'nunca' , 'RG' , 'success' , 'VM' #NEWLINE#
sys . path . append ( 'C:\\Users\\Cube\\Documents\\Python' ) #NEWLINE#
'a' , 'b' , 'c' , 'd' , 'e' #NEWLINE#
print ( re . sub ( '\\s{2,}' , '|' , your_string . strip ( ) ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda res , name : { name : res } , reversed ( mylist ) , { } ) #NEWLINE#
x = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
plot ( x , y , color = color ) #NEWLINE#
any_func ( 'John' , 45 , capital_letters = ( 'H' , 'K' , 'L' ) ) #NEWLINE#
sorted_by_medals = sorted ( list_of_medals , key = lambda tup : ( - tup [ 1 ] , tup [ 0 ] ) ) #NEWLINE#
pd . set_option ( 'display.width' , 200 ) #NEWLINE#
Image . open ( file ) . verify ( ) #NEWLINE#
[ x for pair in zip ( l , l ) for x in pair ] #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
ax . plot ( t , y , 'g-' , linewidth = 1.5 ) #NEWLINE#
reactor . run ( ) #NEWLINE#
{ randint ( 0 , 9 ) : ( v + 1 ) for v in list ( mydict . values ( ) ) } #NEWLINE#
R = np . array ( mean_data [ : , ( 0 ) ] ) #NEWLINE#
layout . addWidget ( QtGui . QLineEdit ( self ) ) #NEWLINE#
c . execute ( 'INSERT#SPACE#INTO#SPACE#test#SPACE#VALUES#SPACE#(?,?)' , data ) #NEWLINE#
fcntl . flock ( self . __lock_file . fileno ( ) , fcntl . LOCK_EX | fcntl . LOCK_NB ) #NEWLINE#
os . path . splitext ( 'Boat.txt' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
r . grid ( sticky = ( N , E , S , W ) ) #NEWLINE#
sc . textFile ( path , use_unicode = False ) . map ( lambda x : x . decode ( 'iso-8859-1' ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
final_df = pd . DataFrame . from_dict ( final , orient = 'index' ) #NEWLINE#
re . findall ( '.{1,3}' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
alpha = map ( str , list ( range ( 10 ) ) ) + [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' ] #NEWLINE#
matches . append ( os . path . join ( root , filename ) ) #NEWLINE#
print ( d . get ( 'b' , 0 ) ) #NEWLINE#
my_package . py #NEWLINE#
regex . findall ( filename ) #NEWLINE#
print ( '|#SPACE##SPACE##SPACE##SPACE#{:>2}#SPACE#|' . format ( self . value ) ) #NEWLINE#
return a + b #NEWLINE#
print ( ( m . span ( ) , m . group ( 0 ) ) ) #NEWLINE#
date_utc . astimezone ( pytz . timezone ( 'Europe/Paris' ) ) #NEWLINE#
list ( s ) #NEWLINE#
sys . modules [ 'Mod_1' ] = __import__ ( 'Mod_2' ) #NEWLINE#
len ( mylist ) == 2 and mylist [ 1 ] == 'comment' #NEWLINE#
[ a for a , b in list ( params . items ( ) ) ] #NEWLINE#
cur . close ( ) #NEWLINE#
df . groupby ( [ 'SAMPLE' , 'Sequence' ] ) . count ( ) #NEWLINE#
datetime . datetime . combine ( tdate , datetime . time . min ) #NEWLINE#
c = tuple ( x - y for x , y in zip ( a , b ) ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'df' ) #NEWLINE#
A . reshape ( ( - 1 , 3 , 3 ) ) . swapaxes ( - 1 , 1 ) #NEWLINE#
soup = bs4 . BeautifulSoup ( S , 'xml' ) #NEWLINE#
max ( range ( len ( ld ) ) , key = lambda index : ld [ index ] [ 'size' ] ) #NEWLINE#
f . write ( 'hello' ) #NEWLINE#
super ( EnhZipFile , self ) . close ( ) #NEWLINE#
ax . get_children ( ) [ 2 ] . set_color ( 'r' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ lst [ i ] for i in range ( 3 ) ] ) #NEWLINE#
def clean ( self ) : #NEWLINE# #INDENT# return self . cleaned_data #NEWLINE#
[ e for sub in a for e in sub ] #NEWLINE#
frame . set_edgecolor ( 'red' ) #NEWLINE#
driver . get ( "Name#SPACE#of#SPACE#web#SPACE#site#SPACE#I'm#SPACE#grabbing#SPACE#from" ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
m = mmap . mmap ( f . fileno ( ) , length = 1024 * 1024 * 1024 , offset = 1536 * 1024 * 1024 ) #NEWLINE#
p . start ( ) #NEWLINE#
dall . update ( d ) #NEWLINE#
X - np . dot ( A , B ) #NEWLINE#
Blender . Redraw ( ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
a [ np . argpartition ( a , idx ) [ idx ] ] #NEWLINE#
mail . select ( 'inbox' ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*\\Z' , 'A' ) #NEWLINE#
im . wcs [ : : 2 , : : 2 ] #NEWLINE#
yourdf . to_csv ( 'PythonExport.csv' , sep = ',' ) #NEWLINE#
dict ( map ( None , * ( [ iter ( l ) ] * 2 ) ) ) #NEWLINE#
min_keys = [ k for k , x in list ( d . items ( ) ) if not any ( y < x for y in list ( d . #NEWLINE# values ( ) ) ) ] #NEWLINE#
numpy . asarray ( a , dtype = None , order = None ) #NEWLINE#
print ( re . findall ( '[A-Z][a-z]?|[0-9]+' , 'Na2SO4MnO4' ) ) #NEWLINE#
print ( node . attrib [ 'topic' ] ) #NEWLINE#
server_socket . close ( ) #NEWLINE#
subprocess . call ( [ 'python' , DIR ] ) #NEWLINE#
{ 'k' : [ 1 , 2 , 3 ] } #NEWLINE#
print ( [ key for key , group in groupby ( x ) if len ( list ( group ) ) > 1 ] ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
temp_df [ temp_df [ 'key' ] . isnull ( ) ] . drop ( 'key' , axis = 1 ) #NEWLINE#
np . where ( arr [ : , ( None ) ] == arr2 [ ( None ) , : ] ) #NEWLINE#
print ( 'not#SPACE#a#SPACE#string' ) #NEWLINE#
func ( ) #NEWLINE#
requests . get ( url , verify = path_to_bundle ) #NEWLINE#
ax1 . plot ( x , y1 , 'g-' ) #NEWLINE#
all ( x [ i ] - x [ i - 1 ] == x [ i + 1 ] - x [ i ] for i in range ( 1 , len ( x ) - 1 ) ) #NEWLINE#
entry . bind ( '<KeyRelease>' , key ) #NEWLINE#
from my_package . timing . danger . internets import function_of_love #NEWLINE#
df . sort ( 'B' ) . groupby ( 'A' ) . first ( ) #NEWLINE#
app . run ( ) #NEWLINE#
{ col : df1 . loc [ df1 [ col ] . lt ( 0 ) , col ] . to_dict ( ) for col in [ 'cell_1' , 'cell_2' ] } #NEWLINE#
split ( 'a#SPACE#b.c' , '.' ) #NEWLINE#
s . seek ( 0 , os . SEEK_END ) #NEWLINE#
per_row . append ( line . strip ( ) . split ( '\t' ) ) #NEWLINE#
re . compile ( '(?!.*google)^http://(www.)?.*' ) #NEWLINE#
pd . __version__ #NEWLINE#
r . hget ( 'myhash' , 'field0' ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 5 , 3 ) , columns = list ( 'abc' ) ) #NEWLINE#
pdb . run ( 'mymodule.test()' ) #NEWLINE#
new . send ( '\n\x0b\x0c\r\x0e\x0f' ) #NEWLINE#
s . rsplit ( ',' , 2 ) #NEWLINE#
{ 'errors' : { } } #NEWLINE#
'src' , 'lowsrc' , 'href' #NEWLINE#
self . redirect ( '/success?email=' + email + '&product=' + product ) #NEWLINE#
count = lambda x : methodcaller ( 'count' , x ) #NEWLINE#
"""{dt:%A}#SPACE#{dt:%B}#SPACE#{dt.day},#SPACE#{dt.year}""" . format ( dt = datetime . datetime . now ( ) ) #NEWLINE#
parse_bin ( '10.11' ) #NEWLINE#
r = re . compile ( 'foo' ) #NEWLINE#
any ( 3 in d for d in lod ) #NEWLINE#
mainwin . mainloop ( ) #NEWLINE#
re . sub ( '\\S*\\d\\S*' , '' , s ) . strip ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
content , = struct . unpack ( '%ds' % length , packed [ 4 : ] ) #NEWLINE#
map ( tuple , np . array ( list ( combinations ( list ( range ( N - 1 , - 1 , - 1 ) ) , M ) ) ) [ : : - 1 ] ) #NEWLINE#
g = f . copy ( ) . discard ( 3 ) #NEWLINE#
pat = re . compile ( '(?=(?:[^%]|^)(?:%%)*(%[a-z]))' ) #NEWLINE#
return [ 1 , 2 , 3 ] , [ 'a' , 'b' , 'c' ] #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
model . add ( Dense ( 1 , init = 'normal' , activation = 'sigmoid' ) ) #NEWLINE#
"""Ag'ain#SPACE#qu"oted""" #NEWLINE#
return HttpResponse ( 'OK' ) #NEWLINE#
plt . bar ( x , y ) #NEWLINE#
widget . deleteLater ( ) #NEWLINE#
raise MyError ( 'some#SPACE#message' ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
df . columns = df . columns . str . lower ( ) #NEWLINE#
size = fields . IntegerRangeField ( min_value = - 100 , max_value = 100 ) #NEWLINE#
[ 'here' , 'go' , 'list' , 'elements' ] #NEWLINE#
pd . concat ( [ df , dict_col . apply ( pd . Series ) ] , axis = 1 ) #NEWLINE#
array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
[ ( 1 , [ 'a' , 'b' ] ) , ( 2 , [ 'c' , 'd' , 'e' ] ) , ( 3 , [ 'f' ] ) ] #NEWLINE#
main ( ) #NEWLINE#
app . run ( ) #NEWLINE#
sns . lmplot ( x = 'obs' , y = 'val' , col = 'vars' , hue = 'vars' , data = tidy ) #NEWLINE#
my_cmap = matplotlib . colors . ListedColormap ( my_rgb , name = 'my_name' ) #NEWLINE#
root . destroy ( ) #NEWLINE#
map ( lambda c : c ( ) , classArray ) #NEWLINE#
ax2 . xaxis . set_visible ( False ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
site [ i : i + 35 ] . decode ( 'utf-8' ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
os . remove ( os . path . join ( dir , f ) ) #NEWLINE#
plt . legend ( ) #NEWLINE# plt . show ( ) #NEWLINE#
( dt - datetime . datetime . utcfromtimestamp ( 0 ) ) . total_seconds ( ) #NEWLINE#
logger . debug ( 'your#SPACE#message' ) #NEWLINE#
df [ df [ 'A' ] . str . contains ( 'Hello|Britain' ) == True ] #NEWLINE#
return func ( that , * args , session = session , ** kwargs ) #NEWLINE#
date = datetime . datetime . fromtimestamp ( your_timestamp / 1000.0 ) #NEWLINE#
print ( np . mgrid [ : 5 , : 5 ] ) #NEWLINE#
im = Image . open ( 'lena.ppm' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return [ x for x in seq if x [ 'id' ] not in s and not s . add ( x [ 'id' ] ) ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
numpy . random . seed ( 0 ) #NEWLINE#
zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) #NEWLINE#
window . mainloop ( ) #NEWLINE#
v_dict [ 'code' ] . encode ( 'utf-8' ) #NEWLINE#
df [ 'Q' ] = df . concat ( [ df [ 'Q1' ] , df [ 'Q2' ] , df [ 'Q3' ] ] ) . dropna ( ) #NEWLINE#
pprint ( stiff ) #NEWLINE#
AB = [ ( A [ i ] + B [ i ] ) for i in range ( len ( A ) ) ] #NEWLINE#
subversion = re . compile ( '(?<=SDK#SPACE#)\\d*.\\d*.\\d*.\\d*' ) #NEWLINE#
logging . info ( 'Jackdaws#SPACE#love#SPACE#my#SPACE#big#SPACE#sphinx#SPACE#of#SPACE#quartz.' ) #NEWLINE#
return len ( manipulandum ) - len ( manipulandum . rstrip ( '0' ) ) #NEWLINE#
d = [ { 'x' : 1 , 'y' : 2 } , { 'x' : 3 , 'y' : 4 } ] #NEWLINE# [ dict ( y ) for y in set ( tuple ( x . items ( ) ) for x in d ) ] #NEWLINE#
print ( 'Celex#SPACE#number:' , celex . contents [ 0 ] . splitlines ( ) [ 1 ] ) #NEWLINE#
os . environ [ 'XML_CATALOG_FILES' ] = 'file:///to/my/catalog.xml' #NEWLINE#
wx . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
plt . subplot ( 2 , 1 , 2 ) #NEWLINE#
bool ( re . search ( '((\\w)\\2){2}' , 'committee' ) ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
a [ np . array ( n1 ) [ : , ( np . newaxis ) ] , np . array ( n2 ) [ ( np . newaxis ) , : ] ] #NEWLINE#
re . search ( '|' . join ( search ) , string ) #NEWLINE#
return dict ( ( <VAR1> ( k ) , convert_keys_to_string ( v ) ) for k , v in list ( dictionary #NEWLINE# . items ( ) ) ) #NEWLINE#
plt . legend ( loc = 0 ) #NEWLINE#
scipy . io . savemat ( 'c:/tmp/arrdata.mat' , mdict = { 'arr' : arr } ) #NEWLINE#
print ( repr ( astr . encode ( 'utf_8' ) ) ) #NEWLINE#
L = [ [ 'x' , 'y' ] for i in range ( 20 ) ] #NEWLINE#
f_in . close ( ) #NEWLINE#
print ( a [ s ] ) #NEWLINE#
[ [ y for y in x if y not in to_del ] for x in my_list ] #NEWLINE#
self . canvas2 . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
self . canvas3 . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
global_dict [ 'foo' ] = 2 #NEWLINE#
return render ( request , 'graph/graph.html' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
print ( '' . join ( str ( random_utf8_seq ( ) , 'utf8' ) for i in range ( 10 ) ) ) #NEWLINE#
plt . gca ( ) . patch . set_facecolor ( '0.8' ) #NEWLINE#
f . write ( np . array2string ( x , separator = ',#SPACE#' ) ) #NEWLINE#
[ ( 'a' , 'Arthur' ) , ( 'b' , 'Belling' ) ] #NEWLINE#
print ( parsed_message [ 'Records' ] [ 0 ] [ 's3' ] [ 'bucket' ] [ 'name' ] ) #NEWLINE#
testVar = input ( 'Ask#SPACE#user#SPACE#for#SPACE#something.' ) #NEWLINE#
return [ t for t in tuples if all ( f ( t ) for f in filters ) ] #NEWLINE#
hex ( int ( '0000010010001101' , 2 ) ) #NEWLINE#
json . loads ( json . loads ( b ) ) #NEWLINE#
os . path . basename ( os . readlink ( '/jffs2/a.bin' ) ) #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
d = { '1' : 'one' , '3' : 'three' , '2' : 'two' , '5' : 'five' , '4' : 'four' } #NEWLINE#
plt . show ( ) #NEWLINE#
dfs [ 'left_only' ] #NEWLINE#
[ ( 1 , 5 ) , ( 8 , 11 ) , ( 200 , 202 ) ] #NEWLINE#
self . txt . bind ( '<<Modified>>' , self . modified ) #NEWLINE#
my_dict = { k : ( v if len ( v ) > 1 else v [ 0 ] ) for k , v in list ( tmp . values ( ) ) } #NEWLINE#
return '' . join ( x . capitalize ( ) or '_' for x in word . split ( '_' ) ) #NEWLINE#
dict1 . update ( ( k , dict2 [ k ] ) for k in keys ) #NEWLINE#
df . drop ( df . ix [ df [ 'Sale#SPACE#Item' ] != 'item1' ] . index ) #NEWLINE#
[ 'big' , 'fat' , 'cat' , 'sits' , 'on' , 'the' ] #NEWLINE#
[ 'fat' , 'cat' , 'sits' , 'on' , 'the' , 'mat' ] #NEWLINE#
[ 'cat' , 'sits' , 'on' , 'the' , 'mat' , 'eating' ] #NEWLINE#
[ 'sits' , 'on' , 'the' , 'mat' , 'eating' , 'a' ] #NEWLINE#
[ 'on' , 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
list ( itertools . combinations ( items , 2 ) ) #NEWLINE#
return int ( '' . join ( str ( i ) for i in bitlist ) , 2 ) #NEWLINE#
print ( 'here#SPACE#comes#SPACE#the#SPACE#data:#SPACE#' + str ( some_internal_var ) ) #NEWLINE#
print ( sum ( x is not <VAR0> for x in lst ) ) #NEWLINE#
return pid , stdin , stdout , stderr #NEWLINE#
MyDiccoSorted = sorted ( list ( MyDicco . items ( ) ) , key = lambda x : x [ 1 ] [ 0 ] ) #NEWLINE#
time . mktime ( datetime . datetime . now ( ) . timetuple ( ) ) * 1000 #NEWLINE#
ax . collections #NEWLINE#
data = [ float ( fractions . Fraction ( x ) ) for x in data ] #NEWLINE#
doc = lxml . etree . parse ( xml ) #NEWLINE#
conn . request ( 'POST' , 'http://202.45.139.58:8080/ppod-web' , params , headers ) #NEWLINE#
conn . request ( 'POST' , 'wireless' , params , headers ) #NEWLINE#
a = np . arange ( 30 ) . reshape ( 2 , 3 , 5 ) #NEWLINE#
return ( s [ i : j ] for i in range ( length ) for j in range ( i + 1 , length + 1 ) ) #NEWLINE#
my_list . remove ( 4 ) #NEWLINE#
scipy . array ( x ) . ravel ( ) . tolist ( ) #NEWLINE#
pdfkit . from_string ( 'Hello!' , 'out.pdf' ) #NEWLINE#
print ( '#SPACE#' . join ( T ) ) #NEWLINE#
[ 'tcp4' , '0' , '0' , '*.mysql' , '*.*' , 'LISTEN' ] #NEWLINE#
name = models . CharField ( max_length = 255 ) #NEWLINE#
call_attrs ( a , [ 'method1' , 'method2' , 'method3' ] ) #NEWLINE#
itertools . chain . from_iterable ( [ i ] * i for i in range ( 1 , 5 ) ) #NEWLINE#
s = '{0:0<22}' . format ( s ) #NEWLINE#
cv2 . imwrite ( 'gray.jpg' , gray_image ) #NEWLINE#
print ( reverse ( [ 1 , 2 , 3 , 4 , 5 ] ) ) #NEWLINE#
result = getattr ( foo , 'bar' ) ( ) #NEWLINE#
print ( sum ( map ( lambda x : sub ( * x ) , zip ( * ( [ iter ( l ) ] * 2 ) ) ) ) ) #NEWLINE#
lb . bind ( '<<ListboxSelect>>' , onselect ) #NEWLINE#
l . append ( x [ : len ( x ) - k ] ) #NEWLINE#
b = a [ 0 ] [ : ] #NEWLINE#
re . sub ( '([a-zA-Z0-9])\\s+(?=[a-zA-Z0-9])' , '\\1*' , '3#SPACE#a#SPACE#5#SPACE#b' ) #NEWLINE#
json . loads ( json . dumps ( { None : None } ) ) #NEWLINE#
data = p . stdout . readline ( ) #NEWLINE#
print ( '{0[0]:{1}s}#SPACE#{0[1]:{2}d}#SPACE#{0[2]:{3}f}' . format ( res , 10 , 5 , 0.2 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
assert np . all ( list ( filter ( df , [ 1 , 0 ] , 'A' , 'B' ) ) == df [ ( df . A == 1 ) & ( df . B == #NEWLINE# 0 ) ] ) #NEWLINE#
from django . utils import simplejson #NEWLINE#
[ element for tupl in tupleOfTuples for element in tupl ] #NEWLINE#
ofp . write ( re . sub ( '(?m)([a-z])[\r\n]+$' , '\\1#SPACE#' , line ) ) #NEWLINE#
GC . remove_edge ( clique [ 0 ] , clique [ 1 ] ) #NEWLINE#
new_list = [ { transform [ k ] : v for k , v in list ( d . items ( ) ) } for d in old_list ] #NEWLINE#
li . index ( 'example' ) #NEWLINE#
pylab . show ( ) #NEWLINE#
np . place ( arr , ~ np . in1d ( arr , valid ) , 0 ) #NEWLINE#
conn . send ( stranza ) #NEWLINE#
self . top_right . pack ( side = 'right' , fill = 'x' , expand = True ) #NEWLINE#
output . write ( line . replace ( 'find#SPACE#this' , 'replace#SPACE#by#SPACE#this' ) ) #NEWLINE#
plt . legend ( loc = 'best' ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
split_file ( 'srcdata1.txt' ) #NEWLINE#
ax . set_ylabel ( 'CONC#SPACE#($\\mu#SPACE#g.#SPACE#m^{-3}$)' ) #NEWLINE#
pil_im = Image . open ( strio ) #NEWLINE#
df . groupby ( [ 'a' , 'name' ] ) . median ( ) . index . get_level_values ( 1 ) #NEWLINE#
map ( ord , s . decode ( 'hex' ) ) #NEWLINE#
STATICFILES_DIRS = os . path . join ( BASE_DIR , 'static' ) , #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
print ( parser . parse ( date ) . strftime ( '%Y%m%d' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
( A == B ) . all ( ) #NEWLINE#
startupinfo . dwFlags |= subprocess . STARTF_USESHOWWINDOW #NEWLINE#
assert request . method == 'POST' #NEWLINE#
c . setFillColorRGB ( 1 , 1 , 0 ) #NEWLINE#
c . execute ( 'commit' ) #NEWLINE#
date += datetime . timedelta ( days = 1 ) #NEWLINE#
glob . glob ( './[0-9].*' ) #NEWLINE#
p . stdin . write ( 'y' ) #NEWLINE#
print ( datetime . utcnow ( ) . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
cbar . set_clim ( newimg . min ( ) , newimg . max ( ) ) #NEWLINE#
writer . writerows ( sheet . row_values ( row ) for row in range ( sheet . nrows ) ) #NEWLINE#
f = ( lambda a , b , c : lambda x : a + b * c - x ) ( a , b , c ) #NEWLINE#
[ a for a in x if a != 2 ] #NEWLINE#
return HttpResponseRedirect ( reverse ( 'dashboard' ) ) #NEWLINE#
mvv = mvv_count_df . select ( 'mvv' ) . rdd . flatMap ( lambda x : x ) . collect ( ) #NEWLINE#
connection = redis . StrictRedis ( host = 'localhost' , port = 6379 , db = 0 ) #NEWLINE#
s1 [ s1 . isin ( s2 ) ] #NEWLINE#
pygame . event . poll ( ) #NEWLINE#
data = json . loads ( resp . text ) #NEWLINE#
df . to_dict ( 'records' ) #NEWLINE#
sorted ( lst ) [ - 20 : ] #NEWLINE#
pptable ( x_axis , y_axis , a . tolist ( ) ) #NEWLINE#
rescaled = np . uint8 ( b ) #NEWLINE#
match = re . match ( '<a#SPACE#href="(?P<url>[^"]*?)"' , line ) #NEWLINE#
exec ( open ( filename ) . read ( ) ) #NEWLINE#
re . findall ( '\\{([^{}]+)\\}' , s ) #NEWLINE#
[ x for x in range ( len ( a ) ) if a [ x : x + len ( b ) ] == b ] #NEWLINE#
plt . imsave ( 'filename.png' , np . array ( data ) . reshape ( 50 , 50 ) , cmap = cm . gray ) #NEWLINE#
s . reset_index ( ) #NEWLINE#
list ( set ( [ ( a , l . count ( a ) ) for a in l ] ) ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 2 , 3 , 4 , 1 , 2 ] #NEWLINE#
{ 'a' : 10 , 'b' : 1223 , 'f' : 'Hello#SPACE#World' } #NEWLINE#
b = np . fill_diagonal ( np . zeros ( ( N , N ) ) , value ) #NEWLINE#
rf . append_fields ( arr , 'vel' , x , usemask = False ) #NEWLINE#
re . sub ( '\\$_([^$]*)\\$' , '<sub>\\1</sub>' , w ) #NEWLINE#
QtCore . QThread . __init__ ( self ) #NEWLINE#
scc . send ( base64 . b64encode ( 'password' ) + '\r\n' ) #NEWLINE#
f . write ( '䔀#SPACE#blah#SPACE#blah#SPACE#blah\n' ) #NEWLINE#
session = request . session #NEWLINE#
numpy . matrix ( numpy . identity ( n ) , copy = False ) #NEWLINE#
resources_dir = path . join ( path . dirname ( __file__ ) , 'resources' ) #NEWLINE#
Table . query . filter ( "name#SPACE#~#SPACE#'foo'" ) #NEWLINE#
list ( itertools . product ( * arrays ) ) #NEWLINE#
bytearray ( random . getrandbits ( 8 ) for _ in range ( size ) ) #NEWLINE#
db = MySQLDatabase ( 'jonhydb' , user = 'john' , passwd = 'megajonhy' ) #NEWLINE#
plt . show ( ) #NEWLINE#
translate_non_alphanumerics ( '<foo>!' , 'bad' ) #NEWLINE#
fig . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
a . A * ~ mask . A #NEWLINE#
warnings . filterwarnings ( 'ignore' ) #NEWLINE#
sorted ( array , key = lambda x : x [ : 24 ] ) #NEWLINE#
re . split ( '(?<=\\))\\.' , '(1.2).(2.1)' ) #NEWLINE#
print ( mirror ( [ mirror ( sublist ) for sublist in inputs ] ) ) #NEWLINE#
im = Image . new ( 'RGBA' , ( 100 , 100 ) , ( 0 , 0 , 0 , 0 ) ) #NEWLINE#
del mydict [ k ] #NEWLINE#
from functools import reduce #NEWLINE# Profile . objects . filter ( reduce ( or_ , [ Q ( full_name__icontains = q ) for q in li ] ) ) #NEWLINE#
m ( [ 100 , 200 , 300 ] ) #NEWLINE#
ax . set_yscale ( 'log' ) #NEWLINE#
my_func ( numpy . split ( array , 3 , 1 ) ) #NEWLINE#
object_list . sort ( key = lambda x : string_list . index ( x . key ) ) #NEWLINE#
minidx . append ( np . argsort ( cluster ) [ : 3 ] ) #NEWLINE#
list ( itertools . zip_longest ( * lists , fillvalue = 0 ) ) #NEWLINE#
print ( bs2 . find ( 'a' ) . contents ) #NEWLINE#
driver . find_element_by_id ( tc . value ) . click ( ) #NEWLINE#
return '' . join ( soup . findAll ( text = True ) ) #NEWLINE#
cherrypy . engine . block ( ) #NEWLINE#
r = urllib . request . Request ( url . encode ( 'utf-8' ) , data , headers ) #NEWLINE#
pixbuf = pixbuf . scale_simple ( width , height , gtk . gdk . INTERP_BILINEAR ) #NEWLINE#
plt . draw ( ) #NEWLINE#
pprint ( { k : getattr ( f . __code__ , k ) for k in dir ( f . __code__ ) } ) #NEWLINE#
return [ x for x in lst if x % 2 ] #NEWLINE#
print ( d [ 'Name' ] ) #NEWLINE#
BeautifulSoup ( '<div>#SPACE#<#SPACE#20#SPACE#</div>' , 'html5lib' ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
print ( ( '%.6f' % your_float ) . strip ( '0' ) ) #NEWLINE#
plt . scatter ( x , y , c = t , cmap = cm . jet ) #NEWLINE#
print ( tag . find ( 'ns1:orgname' ) . text ) #NEWLINE#
del my_dict [ key [ - 1 ] ] #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
module . py #NEWLINE#
print ( in_list ( [ 4 , 2 , 1 ] , [ 1 , 2 , 3 , 4 , 2 , 1 , 0 , 5 ] ) ) #NEWLINE#
print ( uuid . uuid4 ( ) ) #NEWLINE#
A [ ~ np . isnan ( A ) ] . mean ( ) #NEWLINE#
P [ np . arange ( n ) , x , y ] #NEWLINE#
form = ContactForm ( ) #NEWLINE#
re . findall ( '(?<=\\()[0-9+/*-]+(?=\\))' , x ) #NEWLINE#
numbers . append ( random . randint ( a , b ) ) #NEWLINE#
G . add_edges_from ( [ ( 'A' , 'B' ) , ( 'A' , 'C' ) , ( 'B' , 'D' ) , ( 'C' , 'D' ) ] ) #NEWLINE#
client . close ( ) #NEWLINE#
return s . index ( t . lower ( ) ) #NEWLINE#
pygame . mouse . get_pos ( ) #NEWLINE#
print ( parser . unescape ( 'Ð¾Ð¿Ð°' ) ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_formatter ( FormatStrFormatter ( '%d#SPACE#km' ) ) #NEWLINE#
t = s . reshape ( - 1 , k ) #NEWLINE#
po ( 'ok.cmd' ) . wait ( ) #NEWLINE#
random . shuffle ( l , random . random ) #NEWLINE#
temp . iloc [ [ 0 , 1 , 4 ] ] . index . tolist ( ) #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#testing#SPACE#(myimage)#SPACE#VALUES#SPACE#(?)' , ( pyodbc . Binary ( data ) , ) ) #NEWLINE#
x . replace ( x [ : 3 ] , '' ) #NEWLINE#
urlfetch . set_default_fetch_deadline ( 60 ) #NEWLINE#
print ( [ ( x - empty ) for x in test ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return float ( s ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
page = opener . open ( 'http://www.google.com' ) #NEWLINE#
plot ( x , sin ( x ) * cos ( x ) ) #NEWLINE#
[ x for x in range ( m ) for y in range ( n ) ] #NEWLINE#
request = client . read_holding_registers ( 0 , 4 , unit = 1 ) #NEWLINE#
Example ( root ) . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
zlib . decompress ( data ) #NEWLINE#
print ( line . rstrip ( ) ) #NEWLINE#
return sorted ( list ( counts . items ( ) ) , reverse = True , key = lambda tup : tup [ 1 ] ) [ : top ] #NEWLINE#
df . stack ( 0 ) . reset_index ( 1 ) #NEWLINE#
self . data [ 'my_field' ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
datetime . now ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
log . start ( ) #NEWLINE#
print ( a . get_fields ( ) ) #NEWLINE#
s = 'AAAC**ACGTACGTA**ATTCC**GTGTGT**CCCC**TATACGTATACG**TTT' #NEWLINE#
out = ( m [ 1 : ] > m [ : - 1 ] ) . sum ( ) + m [ 0 ] #NEWLINE#
driver . get ( 'http://www.somewebsite.com/' ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
ax . set_yscale ( 'symlog' ) #NEWLINE#
plt . show ( ) #NEWLINE#
d . strftime ( '%m%d%Y' ) #NEWLINE#
list ( filter ( os . path . isdir , os . listdir ( os . getcwd ( ) ) ) ) #NEWLINE#
df . columns [ df . isnull ( ) . any ( ) ] . tolist ( ) #NEWLINE#
ax . scatter ( x , y , zflat ) #NEWLINE#
print ( pd . merge ( A , B , on = 'serial#SPACE#number' ) ) #NEWLINE#
mean , sigma = a . mean ( ) , a . std ( ) #NEWLINE#
tk . Text . __init__ ( self , * args , ** kwargs ) #NEWLINE#
df . groupby ( df . index ) . max ( ) #NEWLINE#
sys . modules [ 'package' ] #NEWLINE#
os . urandom ( 16 ) . encode ( 'base64' ) [ : 21 ] #NEWLINE#
n = numpy . longdouble ( 1e+300 ) * 1000000000.0 #NEWLINE#
re . split ( '(\\d+)' , s ) #NEWLINE#
match = re . sub ( '([0-9])(!+)' , '\\1#SPACE#\\2' , input_string ) #NEWLINE#
raise ImportError ( 'Requires#SPACE#either#SPACE#simplejson,#SPACE#Python#SPACE#2.6#SPACE#or#SPACE#django.utils' ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
[ '1' , '1' , '1' , '0' , '0' , '0' , '0' , '0' , '0' , '1' , '0' ] #NEWLINE#
d = ast . literal_eval ( some_string ) #NEWLINE#
return dict ( list ( dict1 . items ( ) ) + list ( dict2 . items ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
return type . attr ( '__new__' ) ( cls . attr ( '__class__' ) , name , bases , attrs ) #NEWLINE#
obj = session . query ( ObjectRes ) . order_by ( ObjectRes . id . desc ( ) ) . first ( ) #NEWLINE#
plt . ylim ( [ - 0.5 , 1.5 ] ) #NEWLINE#
os . listdir ( '.' ) #NEWLINE#
B = C . sum ( axis = ( 2 , 3 ) ) #NEWLINE#
indices = [ i for i , x in enumerate ( myList ) if re . match ( regex , x ) ] #NEWLINE#
Series ( df . values . ravel ( ) ) . unique ( ) #NEWLINE#
foo = lambda x : x + x #NEWLINE#
pobj . stdin . write ( '\n' ) #NEWLINE#
plt . ylim ( - 1 , 1 ) #NEWLINE#
driver . close ( ) #NEWLINE#
return pyodbc . connect ( connect_string , autocommit = True ) #NEWLINE#
fig . savefig ( '/Users/paul/Desktop/so.png' , dpi = 300 ) #NEWLINE#
self . widget_name . deleteLater ( ) #NEWLINE#
len ( set ( len ( x ) for x in l ) ) <= 1 #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
val = img . getpixel ( ( x , y ) ) #NEWLINE#
a = [ a ] #NEWLINE#
re . sub ( '\\w+' , sub , words ) #NEWLINE#
filename = str ( uuid . uuid4 ( ) ) #NEWLINE#
D ( ) #NEWLINE#
foo = decorator ( foo ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
[ 'HELLO' , 'HOW' , 'A' , 'RE' , 'YOU' ] #NEWLINE#
[ 'THIS' , 'EX' , 'AMPLE' , 'WORK' , 'SWELL' ] #NEWLINE#
[ 'THIS' , 'EX' , 'AMPLE' , 'WORKS' , 'WELL' ] #NEWLINE#
[ 'IS' , 'THERE' , 'A' , 'FAS' , 'TWAY' ] #NEWLINE#
[ 'IS' , 'THERE' , 'A' , 'FAST' , 'WAY' ] #NEWLINE#
a = [ 0 ] * 10000000 #NEWLINE#
df . reindex ( columns = cols ) #NEWLINE#
model . fit ( X , y , nb_epoch = 40 , batch_size = 32 , validation_split = 0.2 , verbose = 1 ) #NEWLINE#
print ( 'Done' ) #NEWLINE#
tags = json . loads ( s , object_pairs_hook = collections . OrderedDict ) #NEWLINE#
s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n' #NEWLINE# [ map ( int , x . split ( '\t' ) ) for x in s . rstrip ( ) . split ( '\r\n' ) ] #NEWLINE#
cnx = sqlite3 . connect ( ':memory:' ) #NEWLINE#
[ row [ 'value' ] for row in table . where ( 'key#SPACE#==#SPACE#search_key' ) ] #NEWLINE#
outfile . write ( block . decode ( 'latin1' ) . encode ( 'utf8' ) ) #NEWLINE#
A = map ( lambda t : list ( t ) , A ) #NEWLINE#
df = pd . DataFrame ( list , columns = [ 'col1' , 'col2' ] ) #NEWLINE#
while True : #NEWLINE# #INDENT# pass #NEWLINE#
open ( 'file_name.pdf' ) #NEWLINE#
img = client . images . get ( IMAGE_ID ) #NEWLINE#
[ [ 1 , 4 ] , [ 1 , 5 ] , [ 2 , 4 ] , [ 2 , 5 ] , [ 3 , 4 ] , [ 3 , 5 ] ] #NEWLINE#
return _test ( request . form [ 'test' ] ) #NEWLINE#
text . splitlines ( ) [ 0 ] #NEWLINE#
stripped_markup = markup . replace ( '{' , '{{' ) . replace ( '}' , '}}' ) #NEWLINE#
return app . send_static_file ( 'index.html' ) #NEWLINE#
stock_vals = { 'goog' : [ 12 , 132 , 124 , 234 , 234 ] , 'msft' : [ 432 , 23 , 234 , 54 , 23 ] } #NEWLINE#
canvas . create_window ( 10 , 20 , window = label_frame , anchor = 'w' ) #NEWLINE#
self . response . out . write ( template . render ( path , template_values ) ) #NEWLINE#
raise FileNotFoundError ( errno . ENOENT , os . strerror ( errno . ENOENT ) , filename ) #NEWLINE#
os . environ . get ( 'DESKTOP_SESSION' ) == 'ubuntu' #NEWLINE#
cursor . execute ( "SELECT#SPACE#x#SPACE#FROM#SPACE#myTable#SPACE#WHERE#SPACE#x#SPACE#LIKE#SPACE#'%s%%'" % beginningOfString ) #NEWLINE#
file . close ( ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
element = doc . xpath ( '//text' ) [ 0 ] #NEWLINE#
print ( getglobals ( f ) ) #NEWLINE#
return max ( set ( lst ) , key = lst . count ) #NEWLINE#
return not set ( 'abcdefghijklmnopqrstuvwxyz' ) - set ( s . lower ( ) ) #NEWLINE#
ax1 . plot ( x [ i ] , y [ i ] , 'ro' , markersize = 20 ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
d2 . get ( 'ham' , { } ) . get ( 'fry' , 88 ) #NEWLINE#
ExampleApp ( ) . run ( ) #NEWLINE#
[ 1 ] [ 2 ] [ 3 ] #NEWLINE#
legend ( ( p1 , p2 , p3 ) , ( 'proj1' , 'proj2' , 'proj3' ) ) #NEWLINE#
re . findall ( '{}(.*){}' . format ( left_identifier , right_identifier ) , text ) #NEWLINE#
author = models . CharField ( max_length = 60 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
{ 'x' : 1 , 'y' : 2 , 'z' : 3 } #NEWLINE#
print ( 'Hello!' ) #NEWLINE#
return len ( data . encode ( 'UTF-16BE' ) . decode ( 'UTF-16BE' ) ) #NEWLINE#
plt . axis ( [ min ( x_arr ) , max ( x_arr ) , max ( y_arr ) , 0 ] ) #NEWLINE#
[ myfunc ( x , y ) for x , y in myiter ( data ) ] #NEWLINE#
a [ [ 0 , 1 , 3 ] ] [ : , ( [ 0 , 2 ] ) ] #NEWLINE#
p1 = Popen ( [ 'cat' ] , stdout = PIPE , stdin = PIPE ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'autotester.settings' #NEWLINE#
"""{:.2f}""" . format ( 2606.89579999999 ) . replace ( '.' , '' ) #NEWLINE#
L1 [ 0 ] = 'cake' #NEWLINE#
{ 'other' : [ 'some' ] , 'parameter' : [ 'value' ] } #NEWLINE#
raise TimeoutError ( 'Stream#SPACE#is#SPACE#still#SPACE#not#SPACE#active,#SPACE#aborting...' ) #NEWLINE#
all ( bb [ k ] == v for k , v in aa . items ( ) if k in bb ) #NEWLINE#
send_task ( 'socialreport.tasks.twitter_save' ) #NEWLINE#
assert r . status_code == 200 #NEWLINE#
new_sheet = wb . get_sheet_by_name ( 'Sheet1' ) #NEWLINE#
datetime . date ( 2002 , 12 , 4 ) . isoformat ( ) . replace ( '-' , '' ) #NEWLINE#
plt . show ( ) #NEWLINE#
config . add_site_route ( 'site_items' , '/items' ) #NEWLINE#
datetime . date . fromordinal ( datetime . date . today ( ) . toordinal ( ) - 1 ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
root . destroy ( ) #NEWLINE#
return render_to_string ( 'form.html' , { 'form' : form } ) #NEWLINE#
set ( x ) #NEWLINE#
text . configure ( state = 'normal' ) #NEWLINE#
x [ : , ( i ) ] = np . roll ( x [ : , ( i ) ] , i ) #NEWLINE#
plt . axis ( 'scaled' ) #NEWLINE#
B = [ ( [ None ] * n ) for _ in range ( n ) ] #NEWLINE#
print ( getattr ( other , 'name_of_variable' ) ) #NEWLINE#
myvar = request . args [ 'myvar' ] #NEWLINE#
p1 . stdout . close ( ) #NEWLINE#
print ( cmp ( list1 , list2 ) ) #NEWLINE#
pd . DatetimeIndex ( f_dtflt [ 'COLLECTION_DATE' ] ) . to_period ( 'M' ) #NEWLINE#
self . main . show ( ) #NEWLINE#
parser . add_argument ( '--send' , action = 'store_true' ) #NEWLINE#
fw . write ( name . encode ( 'utf-8' ) + '<br>\n' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'newcolumn' ] = df . A * df . B #NEWLINE#
cv2 . namedWindow ( 'GoPro' , cv2 . CV_WINDOW_AUTOSIZE ) #NEWLINE#
import imp #NEWLINE# imp . reload ( package ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
dict ( zip ( unique , counts ) ) #NEWLINE#
sorted ( lst , key = str . lower , reverse = True ) #NEWLINE#
sorted ( myList , key = itemgetter ( 1 ) ) #NEWLINE#
p . wait ( ) #NEWLINE#
results = dict . fromkeys ( inputs , [ ] ) #NEWLINE#
[ indexes [ x ] for x in l ] #NEWLINE#
f = x ** 2 + 1 #NEWLINE#
"""""" . join ( '' . join ( s ) [ : 2 ] for _ , s in groupby ( 'haaaaapppppyyy' ) ) #NEWLINE#
root . bind ( '<Key>' , key ) #NEWLINE#
self . list_of_strings . append ( str_to_add ) #NEWLINE#
words [ word [ 0 ] + word [ - 1 ] ] . append ( word ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
self . a = a , self . b = b #NEWLINE#
ax1 . scatter ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
df . groupby ( [ 'Group' , 'Size' ] ) . size ( ) . reset_index ( name = 'Time' ) #NEWLINE#
sock . setsockopt ( socket . IPPROTO_TCP , TCP_KEEPALIVE , interval_sec ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . path . append ( '/vagrant/pycharm-debug.egg' ) #NEWLINE#
cheese = 'smelly' #NEWLINE#
( i * i for i in range ( 5 ) ) #NEWLINE#
return re . sub ( '&#?\\w+;' , fixup , text ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE##SPACE#</td><td>' . join ( sublist ) ) #NEWLINE#
call ( [ command , parameter ] ) #NEWLINE#
my_lists = collections . defaultdict ( list ) #NEWLINE#
re . search ( '\\bNot#SPACE#Ok\\b' , strs ) . group ( 0 ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
myTel . write ( 'login\n' ) #NEWLINE#
sys . modules [ 'collections' ] . __file__ #NEWLINE#
d [ key ] [ 0 ] = x #NEWLINE#
( dt . replace ( month = dt . month % 12 + 1 , day = 1 ) - timedelta ( days = 1 ) ) . day #NEWLINE#
get_nested_list ( [ [ [ [ 1 , 2 ] , [ 3 ] ] ] ] ) #NEWLINE#
f = open ( 'file.txt' , 'w' , bufsize ) #NEWLINE#
plt . close ( ) #NEWLINE#
dtyp = np . dtype ( list ( zip ( X . dtypes . index , X . dtypes ) ) ) #NEWLINE#
from . import finding #NEWLINE#
'%d#SPACE#days#SPACE#and#SPACE#%d#SPACE#nights' % ( 40 , 40 ) #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
print ( match . group ( 0 ) ) #NEWLINE#
time . sleep ( float ( sys . argv [ 1 ] ) ) #NEWLINE#
np . where ( ~ a . any ( axis = 1 ) ) [ 0 ] #NEWLINE#
[ z0 ] * len ( seconds ) #NEWLINE#
a [ - 1 ] * ( a [ - 1 ] + 1 ) / 2 - sum ( a ) #NEWLINE#
50 - List1 [ 0 ] [ 0 ] + List [ 0 ] [ 1 ] - List [ 0 ] [ 2 ] #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
mymethod = getattr ( __import__ ( 'abc.def.ghi.jkl.myfile' , fromlist = [ 'mymethod' ] ) ) #NEWLINE#
print ( 'a#SPACE#=#SPACE#%f#SPACE#and#SPACE#b#SPACE#=#SPACE#%f' % ( a , b ) ) #NEWLINE#
shutil . copy2 ( src , dst ) #NEWLINE#
df = pd . DataFrame . from_records ( [ { 'A' : a , 'B' : b } ] ) #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
client . disconnect ( ) #NEWLINE#
df2 = pd . crosstab ( df [ 'node' ] , df [ 'comp' ] ) #NEWLINE#
df = df . loc [ mask ] #NEWLINE#
process_url ( url , ( 'CONTENT_ITEM_ID' , 'other_value' ) ) #NEWLINE#
m . save ( ) #NEWLINE#
return [ i for i , _ in itertools . groupby ( ks ) ] #NEWLINE#
entity . key ( ) . id_or_name ( ) #NEWLINE#
SFrame ( { 'xy_unique' : np . unique ( sf [ [ 'x' , 'y' ] ] . to_numpy ( ) ) } ) #NEWLINE#
self . chstate ( ) #NEWLINE#
ax . set_ylim ( [ - 1 , 10 ] ) #NEWLINE#
return np . reshape ( data , newshape = ( len ( data ) / 5 , 5 ) ) #NEWLINE#
W = tf . constant ( embedding , name = 'W' ) #NEWLINE#
self . Bind ( wx . EVT_ERASE_BACKGROUND , self . _onEraseBackground ) #NEWLINE#
transport . write ( 'some#SPACE#data' ) #NEWLINE#
1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 #NEWLINE#
mysaver = tf . train . Saver ( { 'w1' : W1 , 'w2' : W2 , 'b1' : b1 } ) #NEWLINE#
super ( Foo , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
subprocess . Popen ( [ 'make' ] , stdout = subprocess . PIPE , cwd = '../dir1/dir2/dir3' ) #NEWLINE#
plot ( x , y , 'bo-' ) #NEWLINE#
return '0' * ( len ( x ) % 2 ) + x #NEWLINE#
df [ df [ 'var2' ] . isin ( [ 5 , 8 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
G . add_edge ( 'B' , 'C' ) #NEWLINE#
G . add_edge ( 'C' , 'A' ) #NEWLINE#
pd . rolling_mean ( aapl , 200 ) . plot ( ) #NEWLINE#
df = pd . DataFrame ( { 'A' : l1 , 'B' : l2 } ) #NEWLINE#
counts = Counter ( sentence . lower ( ) . split ( ) ) #NEWLINE#
bitfield ( 1234567 ) #NEWLINE#
df [ ~ pd . isnull ( df [ list_of_cols ] ) . all ( axis = 1 ) ] #NEWLINE#
df . apply ( lambda x : x . apply ( lambda x : [ ] if isnan ( x ) else x ) ) #NEWLINE#
min ( t , key = lambda i : ( i [ 1 ] , - i [ 2 ] ) ) #NEWLINE#
ax . autoscale ( ) #NEWLINE#
print ( '#SPACE#' . join ( hex ( ord ( n ) ) for n in x ) ) #NEWLINE#
age = df . groupby ( 'age' ) #NEWLINE#
print ( 'value:::#SPACE#' , sheet . cell ( row , column ) . value ) #NEWLINE#
btn3 . grid ( row = 1 , column = 0 , columnspan = 1 , sticky = 'EWNS' ) #NEWLINE#
vsb . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
print ( ( '+' . join ( map ( str , n_nx1lst ) ) + '#SPACE#=#SPACE#' , sum ( n_nx1lst ) ) ) #NEWLINE#
response = br . submit ( ) #NEWLINE#
string_list . sort ( key = lambda s : len ( s ) , reverse = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( 4 , 6 , 17 ) , array ( [ 0.70723863 , 0.907611 , 0.46214047 ] ) ] #NEWLINE#
print ( [ int ( value ) for value in list ( ss . values ( ) ) ] ) #NEWLINE#
next ( ( i , d ) for i , d in enumerate ( lod ) if 1 in d ) #NEWLINE#
sorted ( l , key = lambda name_score : int ( name_score [ 1 ] ) , reverse = True ) #NEWLINE#
rows = table . tbody . find_all ( True , recursive = False ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
df1 [ 'id' ] . str . get_dummies ( sep = ',' ) #NEWLINE#
mpl . use ( 'pgf' ) #NEWLINE#
replace ( my_dict ) #NEWLINE#
print ( '${}#SPACE#\\times#SPACE#10^{{{}}}$' . format ( * '3.5e+20' . split ( 'e+' ) ) ) #NEWLINE#
json . dumps ( c . __dict__ ) #NEWLINE#
workbook = xlsxwriter . Workbook ( 0 , '2016' + str ( name_get ) ) #NEWLINE#
df . query ( '"Restaurants"#SPACE#in#SPACE#categories' ) #NEWLINE#
root . option_add ( '*Font' , default_font ) #NEWLINE#
result = '%s#SPACE#limit#SPACE#1' % ( sql % ( table , ) , ) #NEWLINE#
{ 'e' : '}' } #NEWLINE#
print ( document [ 'body' ] ) #NEWLINE#
response = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
images = ProductImageSerializer ( many = True , source = 'images.all' ) #NEWLINE#
np . random . shuffle ( arr ) #NEWLINE#
b . pack ( side = 'bottom' , padx = 0 , pady = 0 ) #NEWLINE#
f . write ( data ) #NEWLINE#
foo = Foo ( ) #NEWLINE#
return render_to_response ( 'sequencing/file_upload.html' ) #NEWLINE#
first2vals = [ mydict [ k ] for k in sorted ( mydict . keys ( ) ) [ : 2 ] ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ item for item in [ 'a' , 'b' , 'c' ] ] #NEWLINE#
super ( BaseTestSuite , self ) . addTest ( test ) #NEWLINE#
fig . savefig ( 'pic.png' ) #NEWLINE#
next ( [ i for i in userInput if i in wordsTask ] ) #NEWLINE#
QtGui . QDialog . __init__ ( self , parent ) #NEWLINE#
with open ( 'foo.txt' , 'a' ) as f : #NEWLINE# #INDENT# f . write ( 'new#SPACE#line\n' ) #NEWLINE#
numpy . linalg . lstsq ( a , b ) #NEWLINE#
parser . get ( 'Some#SPACE#Section' , 'spam' ) #NEWLINE#
pyplot . hist ( y , bins , alpha = 0.5 , label = 'y' ) #NEWLINE#
browser . submit ( ) #NEWLINE#
ax . spines [ 'bottom' ] . set_smart_bounds ( True ) #NEWLINE#
[ ( entry if tag in entry else [ ] ) for tag in tags for entry in entries ] #NEWLINE#
open ( 'file' , 'w' ) . write ( datetime . datetime . now ( ) . ctime ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
super ( Command , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
b = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
a [ 3 : ] #NEWLINE#
return pattern . sub ( '\\1\\1' , s ) #NEWLINE#
element . clear ( ) #NEWLINE#
xpath ( '//html:table' ) #NEWLINE#
df . ix [ df . A == 0 , 'B' ] = df . ix [ df . A == 0 , 'B' ] / 2 #NEWLINE#
conn . commit ( ) #NEWLINE#
logging . debug ( 'hello#SPACE#-#SPACE#noshow' ) #NEWLINE#
random . getrandbits ( 128 ) #NEWLINE#
A . test ( ) #NEWLINE#
QMainWindow . __init__ ( self ) #NEWLINE#
py24 , py25 , py26 , py27 , py30 , py31 , py32 , py33 , py34 , jython , pypy , pypy3 #NEWLINE#
s . sendmail ( sender , recipients , msg . as_string ( ) ) #NEWLINE#
map ( id , a ) #NEWLINE#
self . assertTrue ( 'Account#SPACE#verified' in response . cookies [ 'messages' ] . value ) #NEWLINE#
msgBox . addButton ( QtGui . QPushButton ( 'Reject' ) , QtGui . QMessageBox . NoRole ) #NEWLINE#
{ '#one' : 'cat' , '#three' : 'birds' , '#two' : 'dogs' } #NEWLINE#
return int ( '' . join ( str ( num ) for num in nums ) ) #NEWLINE#
array ( [ 5.19615242 , 6.92820323 , 8.66025404 ] ) #NEWLINE#
proc . stdin . close ( ) #NEWLINE#
return ',' . join ( [ k . name for k in obj . book_set . all ( ) ] ) #NEWLINE#
y *= np . hanning ( len ( y ) ) #NEWLINE#
return render_to_response ( 'template.htm' , { 'logins' : logins } ) #NEWLINE#
foo ( np . array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] ) ) #NEWLINE#
root . destroy ( ) #NEWLINE#
a . shape #NEWLINE#
return np . where ( np . triu ( np . ones ( A . shape [ 0 ] , dtype = bool ) , 1 ) , A . T , A ) #NEWLINE#
return np . reshape ( self . data , newshape = ( self . data . shape [ 0 ] / 5 , 5 ) ) #NEWLINE#
print ( sum ( iter ( lambda : len ( sys . stdin . read ( 4096 ) ) , 0 ) ) ) #NEWLINE#
str_version . encode ( 'utf-8' ) #NEWLINE#
data = data [ list ( df . columns . tolist ( ) [ - 1 ] ) + df . columns . tolist ( ) [ : - 1 ] ] #NEWLINE#
numpy . set_printoptions ( threshold = 'nan' ) #NEWLINE#
contents = self . view . substr ( sublime . Region ( 0 , self . view . size ( ) ) ) #NEWLINE#
undoicon = QIcon . fromTheme ( 'edit-undo' , QIcon ( ':/undo.png' ) ) #NEWLINE#
super ( DecoratedClass , self ) . __init__ ( ) #NEWLINE#
sorted ( new_lst , reverse = True ) #NEWLINE#
json . dumps ( 'ĀЄ' . encode ( 'utf8' ) ) #NEWLINE#
gevent . sleep ( 5 ) #NEWLINE#
print ( '.' . join ( s . split ( '.' ) [ : - 1 ] ) ) #NEWLINE#
print ( df . to_latex ( index = None , column_format = 'rrr' ) ) #NEWLINE#
print ( expr . evalf ( subs = dict ( a = 2 , b = 4 , n = 5 ) ) ) #NEWLINE#
np . where ( arr == arr . min ( ) ) #NEWLINE#
dct = [ v [ 'data3' ] for v in list ( oridict . values ( ) ) ] #NEWLINE#
final_data [ 'ROOT' ] . append ( dict [ 'ROOT' ] ) #NEWLINE#
a . __getitem__ ( slice ( 0 , 1 ) ) . __setitem__ ( 0 , 1 ) #NEWLINE#
lst_gen = sum ( [ ( i , i * i ) for i in range ( 1 , 10 ) ] , ( ) ) #NEWLINE#
len ( mylist ) == 2 and mylist [ 1 ] == 'comment' #NEWLINE#
os . lseek ( fd , 0 , os . SEEK_SET ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
dict . fromkeys ( my_list , 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
wsh . SendKeys ( '{F11}' ) #NEWLINE#
s2 = s2 . replace ( '1' , 'v' ) #NEWLINE#
conv1d = theano . function ( [ x , y ] , outputs = conv1d_expr ) #NEWLINE#
pool . join ( ) #NEWLINE#
Counter ( [ 'h' , 'e' , 'l' , 'o' , 'o' , 'z' ] ) #NEWLINE#
bin ( int ( binascii . hexlify ( st ) , 16 ) ) #NEWLINE#
df . loc [ ( idx [ : , ( 'foo' ) , ( 'can' ) ] , idx [ : , ( 'bar' ) , ( 'baz' ) ] ) , ] #NEWLINE#
return np . sqrt ( ( ( A - B ) ** 2 ) . sum ( - 1 ) ) #NEWLINE#
regex . match ( 'ABCaAAC' ) #NEWLINE#
print ( json . dumps ( out ) ) #NEWLINE#
df [ 0 ] . str . split ( '|' ) #NEWLINE#
np . savetxt ( 'file.txt' , output , fmt = '%10.7f' , delimiter = '\t' ) #NEWLINE#
plt . show ( ) #NEWLINE#
return lookup . index ( 'PL' ) #NEWLINE#
list ( { t [ 1 ] : t for t in reversed ( l ) } . values ( ) ) #NEWLINE#
ax . add_artist ( rect ) #NEWLINE#
web . HTTPError . __init__ ( self , status , headers , data ) #NEWLINE#
ax . set_xticks ( list ( range ( 0 , 11 ) ) ) #NEWLINE#
user = models . ForeignKey ( settings . AUTH_USER_MODEL ) #NEWLINE#
img = cv2 . imdecode ( nparr , cv2 . CV_LOAD_IMAGE_COLOR ) #NEWLINE#
value . Increament ( ) #NEWLINE#
eval ( '1/3' ) #NEWLINE#
return soup . findAll ( 'table' ) #NEWLINE#
it = heapq . nlargest ( 20 , allrows , key = lambda x : x [ 2 ] ) #NEWLINE#
df1 . merge ( df2 ) #NEWLINE#
"""{:.2f}""" . format ( a if a != 0 else abs ( a ) ) #NEWLINE#
[ ( ( ( x - 1 ) % 8 + 2 ) * x ) for x in range ( 1 , 21 ) ] #NEWLINE#
pyl . draw ( ) #NEWLINE#
print ( '' . join ( last16 ) ) #NEWLINE#
f . write ( 'abcdef' ) #NEWLINE#
grequests . get ( url , hooks = { 'response' : partial ( process_response , index ) } ) #NEWLINE#
converted_text = pattern . sub ( lambda m : format_term ( m . group ( 0 ) ) , text ) #NEWLINE#
ax [ 1 ] . autoscale ( True ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
Z = Y . transpose ( 1 , 2 , 0 ) #NEWLINE#
{ k : d1 [ k ] for k in d1 . keys ( ) & l1 } #NEWLINE#
a = '123456789' #NEWLINE# [ int ( a [ i : i + 3 ] ) for i in range ( 0 , len ( a ) , 3 ) ] #NEWLINE#
content = urllib . request . urlopen ( url . encode ( 'utf-8' ) ) . read ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
raise ValidationError ( 'Concatenation#SPACE#should#SPACE#be#SPACE#FooBar.' ) #NEWLINE#
type ( ctypes . c_long ( 1 ) . value ) #NEWLINE#
scipy . io . savemat ( 'test.mat' , mdict = { 'my_list' : my_list } ) #NEWLINE#
str ( 'Text' , encoding ) #NEWLINE#
x . loc [ ( x . B >= 111.0 ) & ( x . B <= 500.0 ) ] #NEWLINE#
output_wb . save ( 'output.xls' ) #NEWLINE#
dict ( y , ** x ) #NEWLINE#
list_ . sort ( key = lambda x : len ( x [ 1 ] ) ) #NEWLINE#
server . login ( user , password ) #NEWLINE#
w . writerow ( [ d . get ( k , restval ) for k in fieldnames ] ) #NEWLINE#
array ( [ [ 1 , 2 ] , [ 0 , 2 ] ] ) #NEWLINE#
importee . call_me ( 4 ) #NEWLINE#
return render_template ( 'index.html' , ** locals ( ) ) #NEWLINE#
x = np . random . randint ( 16 , size = ( 4 , 4 ) ) . astype ( 'uint8' ) #NEWLINE#
Note . objects . filter ( created__year = years . year ) #NEWLINE#
( '' . join ( s ) for s in p ) #NEWLINE#
print ( df [ 'Date_Time' ] . dt . date ) #NEWLINE#
"""{:.1%}""" . format ( average ) #NEWLINE#
np . nonzero ( starts ) [ 0 ] , np . nonzero ( ends ) [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
def revbits ( x ) : #NEWLINE# #INDENT# return int ( bin ( x ) [ 2 : ] . zfill ( 32 ) [ : : - 1 ] , 2 ) #NEWLINE#
br . addheaders = [ ( 'Referer' , 'http://google.com' ) ] #NEWLINE#
print ( p . stdout . read ( ) ) #NEWLINE#
print ( handle . read ( ) ) #NEWLINE#
[ el for el in lst if isinstance ( el , collections . Iterable ) and st in el ] #NEWLINE#
random . shuffle ( keys ) #NEWLINE#
print ( test [ numpy . in1d ( test [ : , ( 1 ) ] , wanted ) ] ) #NEWLINE#
return int ( numberA ) , int ( numberB ) #NEWLINE#
pygame . image . save ( img , 'filename.jpg' ) #NEWLINE#
np . linalg . lstsq ( a , b ) #NEWLINE#
somelist . sort ( cmp = lambda x , y : cmp ( x . resultType , y . resultType ) ) #NEWLINE#
soup . find ( 'p' , text = re . compile ( '\\$.' ) ) #NEWLINE#
common_keys = list ( dict_a . keys ( ) & dict_b . keys ( ) ) #NEWLINE#
set ( df . Col1 ) . union ( set ( df . Col2 ) ) #NEWLINE#
return s . decode ( encoding ) #NEWLINE#
[ c for c in words if not c . isalpha ( ) and not c . isdigit ( ) and not c . isspace ( ) ] #NEWLINE#
np . array ( map ( str , [ 0 , 33 , 4444522 ] ) ) #NEWLINE#
print_key ( locals ( ) , 'foo' ) #NEWLINE#
[ 0.013427019119262695 , 0.013586044311523438 , 0.013450145721435547 ] #NEWLINE#
[ 0.014491081237792969 , 0.01442408561706543 , 0.01484990119934082 ] #NEWLINE#
[ d [ x ] for x in a ] #NEWLINE#
print ( ( y , ':' , cars [ x ] [ y ] ) ) #NEWLINE#
float ( 1.001 ) . is_integer ( ) #NEWLINE#
foo ( ) #NEWLINE#
return self . user . get_full_name ( ) #NEWLINE#
my_output_file = os . readlink ( '/proc/%d/fd/1' % os . getpid ( ) ) #NEWLINE#
plt . rc ( 'font' , family = 'Helvetica' ) #NEWLINE#
gb = df . groupby ( pd . TimeGrouper ( key = 'dateonly' , freq = '9D' ) ) #NEWLINE#
self . Bind ( wx . EVT_CHAR_HOOK , self . hotkey ) #NEWLINE#
im . transform ( size , MESH , data ) #NEWLINE#
person . id . extend ( [ 1 , 32 , 43432 ] ) #NEWLINE#
arr [ 1 , - 2 ] #NEWLINE#
image [ idx ] = chex [ idx ] #NEWLINE#
ax . scatter ( x , y , - z , zdir = 'z' , c = 'red' ) #NEWLINE#
print ( [ tuple ( t [ 1 ] for t in v ) for k , v in groupby ( myList , key = itemgetter ( 0 ) ) ] ) #NEWLINE#
p . kill ( ) #NEWLINE#
"""{0:.02f}""" . format ( float ( cents ) / 100.0 ) #NEWLINE#
df [ 'date' ] . values #NEWLINE#
ax1 . legend ( loc = 2 ) #NEWLINE#
match = re . search ( re . escape ( string ) , text ) #NEWLINE#
re . sub ( '(:[a-z]+)' , '<span>\\1</span>' , method ) #NEWLINE#
f . close ( ) #NEWLINE#
root = etree . fromstring ( '<a>5</a>' , parser ) #NEWLINE#
list ( my_dataframe ) #NEWLINE#
finalPath = os . path . abspath ( os . path . join ( p . netloc , p . path ) ) #NEWLINE#
soup . findAll ( 'div' , { 'class' : lambda x : x and 'stylelistrow' in x . split ( ) } ) #NEWLINE#
l = [ [ 1 , 2 , 3 ] , 'bar' , 'buz' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ k for k , v in list ( my_counter . items ( ) ) if v > 1 ] #NEWLINE#
return re . sub ( '(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s ) #NEWLINE#
ax . scatter ( x , y , z , color = 'black' ) #NEWLINE#
matplotlib . use ( 'qt4agg' ) #NEWLINE#
now = datetime . now ( ) #NEWLINE#
df = pd . concat ( list_of_series , axis = 1 ) . transpose ( ) #NEWLINE#
img = img . convert ( 'RGB' ) #NEWLINE#
driver . switch_to_window ( driver . window_handles [ 1 ] ) #NEWLINE#
[ 1 , 2 , 'a' , 3 , 'X' , 4 , 5 , 'a' , 6 , 7 , 'X' , 8 , 'a' , 9 , 10 ] #NEWLINE#
wb . save ( 'sample.xlsx' ) #NEWLINE#
dict = eval ( open ( 'yourfile.txt' ) . read ( ) ) #NEWLINE#
return render ( request , 'ExampleTemplate.html' , { 'MyObject' : profile } ) #NEWLINE#
[ ( 'c' , '1' ) , ( 'c' , '2' ) ] #NEWLINE#
os . path . abspath ( '~' ) #NEWLINE#
sys . stdout . write ( chr ( c + 48 ) ) #NEWLINE#
print ( [ list ( [ _f for _f in re . split ( '(\\w+)' , i ) if _f ] ) for i in l ] ) #NEWLINE#
response [ 'Content-Length' ] = myfile . tell ( ) #NEWLINE#
equation1 ( * list_of_parameters ) #NEWLINE#
sys . stdout . write ( '{0}' . format ( new_string ) ) #NEWLINE#
tf . Variable ( my_weights , trainable = False ) #NEWLINE#
bool ( set ( a ) & set ( b ) ) #NEWLINE#
os . kill ( pid , 0 ) #NEWLINE#
self . create_socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
datetime . now ( timezone . utc ) . strftime ( '%Y%m%d' ) #NEWLINE#
print ( line ) #NEWLINE#
"""{0:.6g}""" . format ( 5.5657188485 ) #NEWLINE#
data1 . groupby ( [ 'Bool' , 'Dir' , 'Date' ] ) . sum ( ) . groupby ( level = [ 0 , 1 ] ) . cumsum ( ) #NEWLINE#
return Player . objects . filter ( Q ( games1__pk = self . pk ) | Q ( games2__pk = self . pk ) ) #NEWLINE#
values = json . loads ( data ) #NEWLINE#
yaml . add_constructor ( '!ruby/sym' , construct_ruby_sym ) #NEWLINE#
np . triu ( A . T , 1 ) + A #NEWLINE#
[ 14 , 24 , 32 , 41 , 50 , 60 ] #NEWLINE#
pdf . output ( 'yourfile.pdf' , 'F' ) #NEWLINE#
x = rnorm ( n = 100 , mean = 0 , sd = 1 ) #NEWLINE#
stdin . write ( 'Hello#SPACE#there\n' ) #NEWLINE#
return _opener . open ( url , data , timeout ) #NEWLINE#
{ 'a' : 42 , 'b' : 'my_string' , 'c' : '{\'d\':#SPACE#33,#SPACE#\'e\':#SPACE#"{\'f\'#SPACE#:#SPACE#64}"}' } #NEWLINE#
for col in df . columns : #NEWLINE# #INDENT# df [ col ] = df [ col ] . apply ( lambda i : '' . join ( i ) ) #NEWLINE#
return '' . join ( c for c in text if c . isdigit ( ) ) #NEWLINE#
def is_pangram ( s ) : #NEWLINE# #INDENT# return not set ( 'abcdefghijklmnopqrstuvwxyz' ) - set ( s . lower ( ) ) #NEWLINE#
l . append ( ( 4 , 5 ) ) #NEWLINE#
float ( '5.785e1' ) #NEWLINE#
ax . set_xlim ( [ - 1 , 10 ] ) #NEWLINE#
[ [ j . span ( ) for j in rex . finditer ( i ) ] for i in sequence_list ] #NEWLINE#
a = a . astype ( numpy . float32 , copy = False ) #NEWLINE#
browser . set_window_size ( 1400 , 1000 ) #NEWLINE#
map ( math . log10 , x ) #NEWLINE#
return sorted ( tuples , key = lambda x : ( x [ 0 ] , x [ 2 ] ) ) #NEWLINE#
A [ np . isnan ( A ) ] = 0 #NEWLINE#
froms [ p [ 0 ] ] . append ( p ) #NEWLINE#
print ( '{x},#SPACE#{y}' . format ( ** vars ( ) ) ) #NEWLINE#
df [ 'DOB1' ] = df [ 'DOB' ] . dt . strftime ( '%m/%d/%Y' ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
result = np . array ( [ list ( g ) for _ , g in groupby ( a ) ] ) #NEWLINE#
BeautifulSoup ( r . content ) . title . text #NEWLINE#
rfc822 . parsedate_tz ( 'Sun,#SPACE#09#SPACE#Mar#SPACE#1997#SPACE#13:45:00#SPACE#-0500' ) #NEWLINE#
s . decode ( 'unicode-escape' ) #NEWLINE#
gevent . monkey . patch_all ( ) #NEWLINE#
print ( 'User#SPACE#someusr#SPACE#does#SPACE#not#SPACE#exist.' ) #NEWLINE#
ax . scatter ( [ 0.2 , 0.5 , 0.8 ] , [ 2.1 , 5.3 , 0.7 ] , [ 2.3 , 0.47 , 1.0 ] ) #NEWLINE#
out = np . concatenate ( input_list ) . ravel ( ) #NEWLINE#
( area_width - string_width ) / 2 #NEWLINE#
p . add_argument ( 'vars' , nargs = '*' ) #NEWLINE#
p . add_argument ( 'vars' , nargs = '+' ) #NEWLINE#
print ( urllib . parse . unquote ( urllib . parse . quote ( s . encode ( 'utf8' ) ) ) . decode ( 'utf8' ) #NEWLINE# ) #NEWLINE#
engine . execute ( 'USE#SPACE#dbname' ) #NEWLINE#
from functools import reduce #NEWLINE# Profile . objects . filter ( reduce ( and_ , [ Q ( full_name__icontains = q ) for q in li ] ) ) #NEWLINE#
Label ( self , text = '#SPACE#' ) . grid ( row = 0 , column = 0 ) #NEWLINE#
urlparse . urljoin ( url , urlparse . urlparse ( url ) . path ) #NEWLINE#
'AZ' , 'WI' , 'ND' , 'PA' , 'OK' , 'KY' , 'RI' , 'NH' , 'MO' , 'ME' , 'VT' , 'GA' #NEWLINE#
pprint ( sorted ( ranks , key = lambda x : int ( locale . atoi ( x [ 'rank' ] ) ) ) ) #NEWLINE#
relations = request . form . getlist ( 'relations' ) #NEWLINE#
mydict = dict ( ( k , v if v else '' ) for k , v in list ( mydict . items ( ) ) ) #NEWLINE#
self . assertRaises ( TypeError , ukol1 . SummaryFormula , 'testtest' ) #NEWLINE#
return HttpResponse ( 'We#SPACE#had#SPACE#some#SPACE#errors<pre>%s</pre>' % escape ( html ) ) #NEWLINE#
mrg . drop ( drops , axis = 1 ) #NEWLINE#
home = os . path . expanduser ( '~' ) #NEWLINE#
[ 'm' , 'o' , 'nkey' ] #NEWLINE#
print ( text . partition ( '#SPACE#' ) [ 2 ] ) #NEWLINE#
list ( compress ( seq , criteria ) ) #NEWLINE#
print ( re . findall ( '-' . join ( [ '[^-]+' ] * n ) , s ) ) #NEWLINE#
( np . unique ( s , return_inverse = True ) [ 1 ] + 1 ) . astype ( 'float' ) #NEWLINE#
x = 256 * ord ( pS [ 0 ] ) + ord ( pS [ 1 ] ) #NEWLINE#
return unicodedata . normalize ( 'NFKD' , s ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
my_list = [ [ 'a' ] , [ 'a' ] , [ 'b' ] , [ 'c' ] ] #NEWLINE# sorted ( set ( my_list ) ) #NEWLINE#
xvfb . terminate ( ) #NEWLINE#
( e . T / e . sum ( axis = 1 ) ) . T #NEWLINE#
myuser = models . ForeignKey ( User , related_name = 'groups' ) #NEWLINE#
pylab . show ( ) #NEWLINE#
[ 0 , 1 , 0 , 9 , 0 , 25 , 0 , 49 , 0 , 81 ] #NEWLINE#
quit_gracefully ( ) #NEWLINE#
f . write ( address . toxml ( 'utf-8' ) ) #NEWLINE#
a . sort ( key = lambda v : b . index ( v [ 'id' ] ) ) #NEWLINE#
dllname = os . path . join ( dllname [ 0 ] , 'win32service.pyd' ) #NEWLINE#
a += b [ idx ] . sum ( 0 ) #NEWLINE#
d = np . array ( dataPoints . tolist ( ) ) #NEWLINE#
elements . append ( Paragraph ( 'Hello' , styles [ 'Normal' ] ) ) #NEWLINE#
[ s for s in code . splitlines ( ) if s . strip ( ) ] #NEWLINE#
posts = TodaysObject . objects . filter ( datafilter ) #NEWLINE#
first2vals = [ v for v in list ( mydict . values ( ) ) [ : 2 ] ] #NEWLINE#
np . random . shuffle ( A ) #NEWLINE#
df . drop ( 'abandon' , 1 ) . drop ( 'abandon' ) #NEWLINE#
plt . legend ( ) #NEWLINE#
threading . Timer ( 10 , delayfunction , [ x ] ) . start ( ) #NEWLINE#
data [ 0 ] #NEWLINE#
return map ( lambda d : { 'content' : d [ 'content' ] . lower ( ) } , tweets ) #NEWLINE#
img . save ( 'rgbamode.tiff' ) #NEWLINE#
s . close ( ) #NEWLINE#
return cls . objects . get ( pk = self . pk ) #NEWLINE#
wb . save ( 'foo.xls' ) #NEWLINE#
fig . savefig ( 'plotcircles.png' ) #NEWLINE#
d2 = dict ( ( k , v ) for k , v in list ( d1 . items ( ) ) if v > 0 ) #NEWLINE#
ax . set_xlabel ( 'x' ) #NEWLINE#
ax . w_zaxis . _axinfo . update ( { 'grid' : { 'color' : ( 0 , 0 , 0 , 1 ) } } ) #NEWLINE#
data = simplejson . dumps ( { 'a' : 1 } ) #NEWLINE#
[ 1 , 1 ] #NEWLINE#
z = dict ( itertools . chain ( iter ( x . items ( ) ) , iter ( y . items ( ) ) ) ) #NEWLINE#
f . write ( struct . pack ( '%dB' % len ( bytes ) , * bytes ) ) #NEWLINE#
print ( '' . join ( [ chr ( i ) for i in s ] ) ) #NEWLINE#
print ( arr [ 1 : 3 , ( 2 ) ] ) #NEWLINE#
np . median ( [ 2 , 0 , 1 , 0 , 0 ] ) #NEWLINE#
B [ X . ravel ( ) ] = A . ravel ( ) #NEWLINE#
Person . objects . value ( 'name' , 'age' ) . filter ( id__in = employee_query ) #NEWLINE#
print ( [ k for k , v in d . items ( ) if v == 1 ] ) #NEWLINE#
draw ( ) #NEWLINE#
object . <STR0> ( ) #NEWLINE#
df [ 'text' ] . str . lower ( ) . str . split ( ) #NEWLINE#
[ ( a , b , c ) for a , b , c in product ( A , B , C ) if a + b - c == 3 ] #NEWLINE#
runserver . py #NEWLINE#
plt . plot ( x , f ( x ) , zorder = 1 ) #NEWLINE#
"""they're#SPACE#bill's#SPACE#friends#SPACE#from#SPACE#the#SPACE#UK""" . title ( ) #NEWLINE#
return redirect ( client . authorize_url ) #NEWLINE#
s = urlparse . urlunparse ( ( o . scheme , o . netloc , '' , '' , '' , '' ) ) #NEWLINE#
urllib . request . urlopen ( url , postData ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ df . ix [ : , 2 : ] . abs ( ) . lt ( 1 ) . all ( 1 ) ] #NEWLINE#
sys . getsizeof ( 'abc' ) #NEWLINE#
"""foo""" . decode ( 'mac-turkish' ) #NEWLINE#
print ( post_response . read ( ) ) #NEWLINE#
df . pivot_table ( rows = 'category' , aggfunc = [ len , np . sum ] ) #NEWLINE#
k . set_contents_from_string ( data_file . readlines ( ) ) #NEWLINE#
plt . plot ( x , y , 'o' ) #NEWLINE#
df . reindex ( idx ) #NEWLINE#
subprocess . Popen ( [ name ] , stdout = devnull , stderr = devnull ) . communicate ( ) #NEWLINE#
response . status_code #NEWLINE#
print ( ( 'a:' , a , 'b:' , b ) ) #NEWLINE#
df . a . plot ( kind = <STR0> , ax = ax , secondary_y = True ) #NEWLINE#
reactor . run ( ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
[ ( 7 , 4 , 1 ) , ( 8 , 5 , 2 ) , ( 9 , 6 , 3 ) ] #NEWLINE#
warnings . warn ( 'achtung' ) #NEWLINE#
self . assertTrue ( 'Hello#SPACE#World' in args ) #NEWLINE#
gtk . main ( ) #NEWLINE#
im . paste ( ImageOps . colorize ( w , ( 0 , 0 , 0 ) , ( 255 , 255 , 84 ) ) , ( 242 , 60 ) , w ) #NEWLINE#
print ( link . attr [ 'href' ] ) #NEWLINE#
print ( dt . year , dt . month , dt . day ) #NEWLINE#
with open ( 'my_file' ) as f : #NEWLINE# #INDENT# my_list = [ json . loads ( line ) for line in f ] #NEWLINE#
print ( 'Hello#SPACE#world!' ) #NEWLINE#
logging . getLogger ( '' ) . setLevel ( logging . DEBUG ) #NEWLINE#
requests . get ( 'http://not.a.real.url/really_not' ) #NEWLINE#
f = open ( '{0}.csv' . format ( name ) , 'wb' ) #NEWLINE#
[ l [ i : : 3 ] for i in range ( 3 ) ] #NEWLINE#
assert Implementation ( ) . frobnicate ( ) #NEWLINE#
timedelta ( hours = 6 ) / 2 #NEWLINE#
logging . info ( 'Started' ) #NEWLINE#
self . modules = [ ] #NEWLINE#
self . assertEqual ( content , 'Mary#SPACE#had#SPACE#a#SPACE#little#SPACE#lamb.\n' ) #NEWLINE#
help ( 'SPECIALMETHODS' ) #NEWLINE#
foo [ : - 3 ] . strip ( ) . replace ( '#SPACE#' , '' ) . upper ( ) #NEWLINE#
obj [ 'nested_list' ] . sort ( key = lambda d : int ( d [ 'id' ] ) ) #NEWLINE#
df1 . merge ( df2 ) #NEWLINE#
binascii . hexlify ( struct . pack ( '2I' , 12 , 33 ) ) #NEWLINE#
setattr ( self , k , v ) #NEWLINE#
"""{number:02d}""" . format ( number = 4 ) #NEWLINE#
df . select ( lambda col : col . startswith ( 'd' ) , axis = 1 ) #NEWLINE#
os . unlink ( path ) #NEWLINE#
sum ( 1 for a , b , c in combinations ( l , r = 3 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '' . join ( c . data for c in screen [ 0 ] ) . rstrip ( ) ) #NEWLINE#
[ 'b' ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
l [ i ] . append ( j ) #NEWLINE#
map ( list , map ( itemgetter ( 0 ) , [ [ 'ANTT' ] , [ 'XSOB' ] ] ) ) #NEWLINE#
matplotlib . rc ( 'pdf' , fonttype = 42 ) #NEWLINE#
return os . path . dirname ( sys . executable ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
np . argwhere ( M . T == 0 ) . squeeze ( ) #NEWLINE#
df_html = df . to_html ( ) #NEWLINE#
print ( list ( set ( tuple ( i ) for i in a ) ) ) #NEWLINE#
d = [ { 'x' : 1 , 'y' : 2 } , { 'x' : 3 , 'y' : 4 } ] #NEWLINE#
return HttpResponse ( pdf , content_type = 'application/pdf' ) #NEWLINE#
df . groupby ( df . index ) . apply ( lambda x : np . average ( x . wt , weights = x . value ) ) #NEWLINE#
browser . get ( url ) #NEWLINE#
btn2 . grid ( row = 0 , column = 1 , columnspan = 2 , sticky = 'EWNS' ) #NEWLINE#
x . reshape ( 2 , 2 , 2 , 2 ) . swapaxes ( 1 , 2 ) . reshape ( 4 , - 1 ) #NEWLINE#
REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS' : 'my.customize.MyMetadata' } #NEWLINE#
mpl_plt . show ( ) #NEWLINE#
noclubs = [ x for x in suits if x != 'c' ] #NEWLINE#
con . close ( ) #NEWLINE#
locals ( ) . update ( parm ) #NEWLINE#
result = DataFrame ( result ) . reset_index ( drop = True ) #NEWLINE#
SequenceMatcher ( None , 'Apple' , 'Orange' ) . ratio ( ) #NEWLINE#
type ( b ) is Test1 #NEWLINE#
return super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
return map ( list , set ( map ( tuple , k ) ) ) #NEWLINE#
d = { t . key : t for t in [ t0 , t1 , t2 ] } #NEWLINE#
b . shape #NEWLINE#
job . download_to_file ( 'mybackup.tgz' ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , unit = 's' ) #NEWLINE#
os . path . isfile ( 'C:\\Users\\xxx\\Desktop\\xxx' ) #NEWLINE#
model . add ( Dense ( 2 , init = 'normal' , activation = 'softmax' ) ) #NEWLINE#
Decimal ( '33.505' ) #NEWLINE#
self . setWindowTitle ( 'Learning' ) #NEWLINE#
m . mask = np . identity ( 10 ) [ ... , None ] * np . ones ( ( 1 , 1 , 30 ) ) #NEWLINE#
any ( x in someDict for x in someList ) #NEWLINE#
dists /= dists . max ( axis = ( 0 , 1 ) ) #NEWLINE#
print ( '\\' + path . split ( '\\' , 2 ) [ - 1 ] ) #NEWLINE#
d = dict ( ( k , tuple ( v ) ) for k , v in d1 . items ( ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
plt . show ( ) #NEWLINE#
re_ident = re . compile ( '^[^\\d\\W]\\w*$' , re . UNICODE ) #NEWLINE#
array1 . reshape ( array2 . shape ) #NEWLINE#
l . pop ( 0 ) #NEWLINE#
b = map ( lambda x : x [ : 9 ] , g ) #NEWLINE#
return os . path . join ( path , format ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
df = df . drop ( 'toDROP' , 1 ) #NEWLINE#
plt . clf ( ) #NEWLINE#
dict ( ( v , 1234 + i ) for i , v in enumerate ( ( 'foo' , 'bar' ) ) ) #NEWLINE#
sub_form . producetype . choices = [ ( '2' , 'apples' ) , ( '2' , 'oranges' ) ] #NEWLINE#
[ ( S + str ( i ) ) for i in range ( 1 , 11 ) for S in 'ABCD' ] #NEWLINE#
np . random . choice ( np . flatnonzero ( b == b . max ( ) ) ) #NEWLINE#
instance . save ( ) #NEWLINE#
print ( np . allclose ( r [ 1 ] , b ) ) #NEWLINE#
df2 [ df2 . Name == 'Jane' ] . T #NEWLINE#
list ( d . keys ( ) ) #NEWLINE#
is_valid_code ( 'if#SPACE#(x#SPACE#==' ) #NEWLINE#
parse_freebase_quadruple_tsv_file ( file_name ) #NEWLINE#
first2pairs = { k : mydict [ k ] for k in list ( mydict . keys ( ) ) [ : 2 ] } #NEWLINE#
writer . close ( ) #NEWLINE#
print ( data [ 'statuses' ] [ i ] [ 'text' ] ) #NEWLINE#
[ ( i , z ) for i in [ 1 , 2 ] for z in zs_i ] #NEWLINE#
( ( x , y ) for x in range ( width ) for y in range ( height ) ) #NEWLINE#
pylab . show ( ) #NEWLINE#
str = "(lambda#SPACE#x:#SPACE#__import__('pwd').getpwuid(x))(1000)" #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
cursor . execute ( sql , args ) #NEWLINE#
print ( pq ( link ) . attr ( 'href' ) ) #NEWLINE#
d [ cols [ 0 ] ] = dict ( ( headers [ idx ] , v ) for idx , v in enumerate ( cols [ 1 : ] ) ) #NEWLINE#
( pd . Timestamp ( '2000-01-05' ) - pd . Timestamp ( '2000-01-01' ) ) . days #NEWLINE#
base64 . b64decode ( 'AME=' ) . decode ( 'UTF-16LE' ) #NEWLINE#
base64 . b64decode ( 'AME=' ) . decode ( 'UTF-16' ) #NEWLINE#
df [ 'diffs' ] = df [ 'value' ] . diff ( ) #NEWLINE#
super ( ArtefactForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
subprocess . check_call ( [ 'explorer' , path ] ) #NEWLINE#
b = bytearray . fromhex ( 'deadbeef' ) #NEWLINE#
group [ group . apply ( lambda x : len ( x ) > 1 ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
ax . bar ( xticks , y , align = 'center' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
random . shuffle ( itrange ) #NEWLINE#
os . path . join ( * s . split ( '\\' ) ) #NEWLINE#
D [ 'Key2' ] [ 2 ] #NEWLINE#
print ( 'oops!' ) #NEWLINE#
dom = xml . dom . minidom . parse ( 'docmap.xml' ) #NEWLINE#
winfile . close ( ) #NEWLINE#
"""""" . join ( e if ( i + 1 ) % 2 else e + '#SPACE#' for i , e in enumerate ( list ( s ) ) ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( 'http://example.com' ) . read ( ) ) #NEWLINE#
[ ( i for i in 'a' ) , 'b' , 'c' ] #NEWLINE#
print ( 'parent#SPACE#{}' . format ( os . getpid ( ) ) ) #NEWLINE#
self . exec_ ( ) #NEWLINE#
result [ i ] . append ( j ) #NEWLINE#
avgs [ np . where ( binplace == 1 ) ] #NEWLINE#
return self . user_set . all ( ) #NEWLINE#
fnmatch . filter ( glob . glob ( '/../../nodes/*/views/assets/js/**/*' ) , '*.js' ) #NEWLINE#
app . logger . critical ( '.....' ) #NEWLINE#
print ( "I#SPACE#am#SPACE#jack's#SPACE#raging#SPACE#bile#SPACE#duct" ) #NEWLINE#
parser . add_argument ( 'foo' , type = int , choices = range ( 5 , 10 ) ) #NEWLINE#
win . connect ( 'delete-event' , gtk . main_quit ) #NEWLINE#
sys . exit ( ) #NEWLINE#
sess . run ( train_op ) #NEWLINE#
random . randint ( 1 , 6 ) #NEWLINE#
server . mainloop ( ) #NEWLINE#
return server . NOT_DONE_YET #NEWLINE#
raise KeyError ( 'It#SPACE#should#SPACE#never#SPACE#happen:#SPACE#pop#SPACE#from#SPACE#an#SPACE#empty#SPACE#priority#SPACE#queue' ) #NEWLINE#
tree = soupparser . parse ( StringIO ( text ) ) #NEWLINE#
SERIALIZATION_MODULES = { 'json' : 'wadofstuff.django.serializers.json' } #NEWLINE#
df [ 'B' ] = new_val #NEWLINE#
a = numpy . nan_to_num ( a ) #NEWLINE#
array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
my_file . copy ( to_file ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
find_eulerian_tour ( cg4 ) #NEWLINE#
df [ - mask . any ( axis = 1 ) ] #NEWLINE#
H = data . reshape ( N , Nt , N ) . swapaxes ( 1 , 2 ) #NEWLINE#
filtered_string = re_pattern . sub ( '�' , unicode_string ) #NEWLINE#
capture = cv . CaptureFromCAM ( - 1 ) #NEWLINE#
del test [ 2 ] #NEWLINE#
df . query ( '(a#SPACE#<#SPACE#b)#SPACE#&#SPACE#(b#SPACE#<#SPACE#c)' ) #NEWLINE#
timePattern . match ( '02:40PM' ) . group ( 0 ) #NEWLINE#
b += [ c ] #NEWLINE#
plt . gcf ( ) . axes [ 0 ] . xaxis . set_major_formatter ( formatter ) #NEWLINE#
rdd = df . rdd #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Add#SPACE#"{}"#SPACE#to#SPACE#position#SPACE#{}' . format ( s [ - 1 ] , i ) ) #NEWLINE#
json . dumps ( { 'script' : cmd } ) #NEWLINE#
ssh . connect ( 'first.com' , username = 'luser' , password = 'secret' ) #NEWLINE#
df [ 'result' ] . str . lstrip ( '+-' ) . str . rstrip ( 'aAbBcC' ) #NEWLINE#
sys . path . append ( '/home/myusername' ) #NEWLINE#
print ( doc . toxml ( ) ) #NEWLINE#
return 'default' if x is None else x #NEWLINE#
plt . plot ( xs , density ( xs ) ) #NEWLINE#
values . sort ( key = somefunction ) #NEWLINE#
[ s for s in somestrings if not s . startswith ( '#' ) ] #NEWLINE#
print ( get_id ( 'http://itunes.apple.com/us/album/brawn/id472335316?ign-mpt=uo' ) ) #NEWLINE#
numpy . column_stack ( ( a , b , c ) ) #NEWLINE#
A - mean [ : , ( np . newaxis ) ] #NEWLINE#
df . query ( 'Symbol1#SPACE#==#SPACE#Symbol2#SPACE#and#SPACE#BB#SPACE#==#SPACE#CC' ) #NEWLINE#
pd . to_numeric ( s , errors = 'coerce' ) #NEWLINE#
grid [ [ a [ second_mask ] for a in np . where ( mask ) ] ] = 100 #NEWLINE#
urlencode ( { 'pram1' : 'foo' , 'param2' : 'bar' } ) #NEWLINE#
func ( ) #NEWLINE#
fcntl . ioctl ( s . fileno ( ) , SIOCGIFFLAGS , ifr ) #NEWLINE#
foo = OrderedDict ( sorted ( iter ( foo . items ( ) ) , key = lambda x : x [ 1 ] [ 'depth' ] ) ) #NEWLINE#
Template ( '{{#SPACE#name#SPACE#}}' ) . render ( Context ( { 'name' : mark_safe ( '<b>Brad</b>' ) } ) ) #NEWLINE#
auth_login ( request , user ) #NEWLINE#
array ( [ 1 , 5 , 7 , 13 , 17 , 19 ] ) #NEWLINE#
print ( os . path . commonprefix ( [ '/tmp' , '/usr/var' ] ) ) #NEWLINE#
soup . find_all ( 'a' , href = lambda href : href and 'price' in href ) #NEWLINE#
a [ 0 , 1 , 2 ] #NEWLINE#
zip . close ( ) #NEWLINE#
matrix = [ [ 'str1' , 'str2' ] , [ 'str3' ] , [ 'str4' , 'str5' ] ] #NEWLINE#
A . reshape ( ( - 1 , 3 , 3 ) ) #NEWLINE#
hex_string = '' . join ( '%02x' % b for b in array_alpha ) #NEWLINE#
print ( ( key , values ) ) #NEWLINE#
frame . axes . get_xaxis ( ) . set_ticks ( [ ] ) #NEWLINE#
ax2 . contour ( theta_edges [ : - 1 ] , r_edges [ : - 1 ] , H ) #NEWLINE#
cleaned = stringwithslashes . decode ( 'string_escape' ) #NEWLINE#
BASE_DIR = os . path . dirname ( os . path . dirname ( __file__ ) ) #NEWLINE#
print ( t . total_seconds ( ) ) #NEWLINE#
map ( len , s . split ( ) ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_us' ) #NEWLINE#
max ( set ( list ) , key = list . count ) #NEWLINE#
ax1 . yaxis . tick_left ( ) #NEWLINE#
""":""" . join ( hex ( ord ( x ) ) [ 2 : ] for x in 'Hello#SPACE#World!' ) #NEWLINE#
foo = _log_error ( logger ) ( partial ( bar , someparam ) ) #NEWLINE#
list ( intermix ( [ 1 , 0 , 1 , 1 , 2 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 ] , nconsecutive = 3 ) ) #NEWLINE#
input_list = [ int ( a ) for a in input_list ] #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
install_requires = [ 'django-profiles' , 'django-uni-forms' ] , #NEWLINE#
self . box . grid ( column = 0 , row = 0 ) #NEWLINE#
json . dumps ( { 'IP' : 'aaa' } ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
request . session . set_expiry ( request . session . get_expiry_age ( ) ) #NEWLINE#
matplotlib . use ( 'GTKAgg' ) #NEWLINE#
conn . execute ( 'insert#SPACE#into#SPACE#foo#SPACE#values(?)' , ( np . int64 ( 100 ) , ) ) #NEWLINE#
plt . title ( 'Signal#SPACE#Wave...' ) #NEWLINE#
dict ( [ ( an_object . name , an_object ) for an_object in object_list ] ) #NEWLINE#
sys . exit ( ) #NEWLINE#
return render_to_response ( your_custom_template , ctx ) #NEWLINE#
image . save ( 'content.png' ) #NEWLINE#
df . ix [ 0 ] #NEWLINE#
draw . text ( ( 10 , 0 ) , txt , ( 0 , 0 , 0 ) , font = font ) #NEWLINE#
"""http://www.test.com/page/TEST2""" . rsplit ( '/' , 1 ) [ 1 ] #NEWLINE#
form . fields [ 'field_name' ] . widget = forms . HiddenInput ( ) #NEWLINE#
layout . addWidget ( self . lineedit ) #NEWLINE#
ax . add_patch ( polygon1 ) #NEWLINE#
sorted ( glob . glob ( os . path . join ( directory , '*/' ) ) , key = os . path . getmtime ) [ - n ] #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
pylab . tight_layout ( ) #NEWLINE#
bin ( int ( 'ff' , base = 16 ) ) #NEWLINE#
a . split ( ) #NEWLINE#
pool . map ( calc_dist , [ 'lat' , 'lon' ] ) #NEWLINE#
[ 9.444064187694842 , 1.2256912728995506 ] #NEWLINE#
ax . set_xticklabels ( [ 'tom' , 'dick' , 'harry' ] , rotation = 45 ) #NEWLINE#
parser . add_option ( '-k' , '--known-arg' , dest = 'known_arg' , nargs = 1 , type = 'int' ) #NEWLINE#
{ { jsonData | safe } } #NEWLINE#
not seen . add ( x ) #NEWLINE#
a = numpy . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE#
f . close ( ) #NEWLINE#
{ x : ( x * x ) for x in range ( 10 ) } #NEWLINE#
<VAR0> ( 'hello' ) #NEWLINE#
ax . plot_surface ( X , Y , Z , color = 'red' , alpha = 0.5 , linewidth = 0 , zorder = 1 ) #NEWLINE#
webbrowser . open ( 'https://www.youtube.com/.....' ) #NEWLINE#
plt . xlim ( [ 0 , 3 ] ) #NEWLINE#
bydiscra = sorted ( promotion_items , key = bydra ) #NEWLINE#
a = numpy . array ( A , copy = True , order = 'C' ) #NEWLINE#
Blog . objects . values ( 'id' , 'name' ) #NEWLINE#
sys . stdout . write ( data ) #NEWLINE#
return [ ( 1 if digit == '1' else 0 ) for digit in bin ( n ) [ 2 : ] ] #NEWLINE#
plot ( X , Y ) #NEWLINE#
wx . Dialog . __init__ ( self , * args , ** kwds ) #NEWLINE#
out . write ( var + '\n' ) #NEWLINE#
return datetime . timedelta ( hours = - 5 ) #NEWLINE#
time . mktime ( now . timetuple ( ) ) #NEWLINE#
table = [ row for row in data ] #NEWLINE#
os . path . isfile ( 'C:\\Users\\xxx\\Desktop\\xxx' ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
pd . read_csv ( StringIO ( '' . join ( q ) ) , header = None ) #NEWLINE#
tuple ( l . T ) #NEWLINE#
data = myfile . read ( ) . replace ( '\n' , '' ) #NEWLINE#
mngr . window . setGeometry ( newX , newY , dx , dy ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = '8080' , quiet = True ) #NEWLINE#
[ '0x0' , '0xb' , '0x10' , '0x20' , '0x21' , '0x29' , '0x2d' , '0x2a6' , '0x8c5ad' ] #NEWLINE#
isinstance ( b , Test1 ) #NEWLINE#
params = { 'CC' : 1.2345 , 'ID' : 'Yo!' , 'foo' : 'bar' } #NEWLINE#
my_file . seek ( 0 , os . SEEK_END ) #NEWLINE#
sorted ( objs , key = lambda x : id_orders [ x [ 'id' ] ] ) #NEWLINE#
[ s [ i : j ] for i , j in zip_longest ( start , end ) ] #NEWLINE#
parser . parse ( '2011-10-23T08:00:00-07:00' ) #NEWLINE#
np . random . shuffle ( b ) #NEWLINE#
writer . writerows ( new_rows ) #NEWLINE#
logging . basicConfig ( filename = 'myapp.log' , level = logging . INFO ) #NEWLINE#
print ( list ( matdata . keys ( ) ) ) #NEWLINE#
Counter ( k [ 'sign' ] for k in data if k . get ( 'sign' ) ) #NEWLINE#
con . close ( ) #NEWLINE#
with open ( DATA_FILENAME , mode = 'w' , encoding = 'utf-8' ) as f : #NEWLINE# #INDENT# json . dump ( [ ] , f ) #NEWLINE#
{ 'a' : 2 , 'c' : 3 , 'b' : 1 } #NEWLINE#
return reverse ( str1 [ 1 : ] ) + str1 [ 0 ] #NEWLINE#
df . groupby ( 'grp' ) . apply ( lambda x : x [ [ 'x1' , 'x2' ] ] . apply ( ols_res , y = x [ 'y' ] ) ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
"""hello""" #NEWLINE#
print ( simplejson . loads ( json_string ) ) #NEWLINE#
__init__ . py #NEWLINE#
"""logger.h""" #NEWLINE#
ax . plot ( x , y , 'ko' ) #NEWLINE#
self . canvas . draw ( ) #NEWLINE#
{ { form . certification ( ) } } #NEWLINE#
[ ComVisible ( true ) ] #NEWLINE#
re . findall ( '<[^<>]*fnd_date[^<>]*>[^>]*>' , r . text ) #NEWLINE#
print ( zip ( * ( line . strip ( ) . split ( '\t' ) for line in input ) ) ) #NEWLINE#
( '%.2f' % ( value , ) ) . rstrip ( '0' ) . rstrip ( '.' ) #NEWLINE#
surface . write_to_png ( '/tmp/out.png' ) #NEWLINE#
self . text . tag_add ( 'BOLD' , 'sel.first' , 'sel.last' ) #NEWLINE#
scipy . stats . f_oneway ( * list ( archive . values ( ) ) ) #NEWLINE#
print ( etree . tostring ( root ) ) #NEWLINE#
res = db . session . query ( alchemyClassDict [ 'user' ] ) . first ( ) #NEWLINE#
df = pd . concat ( list ( pd . read_csv ( Reader ( gen ( ) ) , chunksize = 10000 ) ) , axis = 1 ) #NEWLINE#
new_term = re . sub ( '(?<=[A-z])\\-(?=[A-z])' , '#SPACE#' , original_term ) #NEWLINE#
return len ( haystack ) - len ( parts [ - 1 ] ) - len ( needle ) #NEWLINE#
sorted ( l , key = lambda x : ( x [ : - 1 ] , x [ - 1 ] . isdigit ( ) , x ) ) #NEWLINE#
dict ( widget_set . pop ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
len ( x1 ) == len ( x2 ) and all ( a [ 'a' ] == b [ 'a' ] for a , b in zip ( x1 , x2 ) ) #NEWLINE#
print ( dt . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
s . group ( 0 ) #NEWLINE#
list ( q ) [ 0 ] #NEWLINE#
shortword = re . compile ( '\\W*\\b\\w{1,3}\\b' ) #NEWLINE#
[ None , None , None , None , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 ] #NEWLINE#
print ( lilfoo . baaz ) #NEWLINE#
sorted ( l , key = lambda x : float ( x [ 1 ] ) ) #NEWLINE#
self . button . pack ( ) #NEWLINE#
zfp = zipfile . ZipFile ( fp , 'r' ) #NEWLINE#
writer = csv . writer ( open ( '/tmp/output.csv' , 'w' ) ) #NEWLINE# writer . writerows ( lines ) #NEWLINE#
print ( regex . search ( data ) . groups ( ) ) #NEWLINE#
sys . exit ( ) #NEWLINE#
data = tf . Variable ( [ 1 , 2 , 3 ] ) #NEWLINE#
diag = [ mat [ i ] [ i ] for i in range ( len ( mat ) ) ] #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
matching_lines = [ line for line in string_list if filter_func ( line ) ] #NEWLINE#
csv_input . to_csv ( 'output.csv' , index = False ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ n for n in ( x . giveMyNum ( ) for x in q ) if n > 1 ] ) #NEWLINE#
( - 3.66 / 26.32 + 0.0j ) ** 0.2 #NEWLINE#
L2 . sort ( key = lambda x : L . index ( x ) ) #NEWLINE#
print ( video [ 'link' ] [ 0 ] [ 'href' ] ) #NEWLINE#
df [ df . categories . map ( lambda x : 'restaurant' in x ) ] #NEWLINE#
int ( log10 ( x ) ) + 1 #NEWLINE#
print ( 'Delete#SPACE#"{}"#SPACE#from#SPACE#position#SPACE#{}' . format ( s [ - 1 ] , i ) ) #NEWLINE#
mySet = set ( x [ 0 ] for x in TUPLES ) #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
suspect = { } #NEWLINE#
os . kill ( 9999999999999 , 0 ) #NEWLINE#
user . profile . save ( ) #NEWLINE#
'^company/(?P<key>.*)/doclist/$' , 'CompanyHub.views.docList' #NEWLINE#
Foo . __init__ . __self__ . __class__ #NEWLINE#
print ( track . permalink_url ) #NEWLINE#
a , b = int ( a ) , a - int ( a ) #NEWLINE#
{ 'b' : 2 , 'a' : 1 } #NEWLINE#
plt . title ( 'Random#SPACE#Gaussian#SPACE#data#SPACE#(fixed#SPACE#number#SPACE#of#SPACE#bins)' ) #NEWLINE#
plt . savefig ( 'test.ps' ) #NEWLINE#
cur . mogrify ( sql , ( data , ) ) #NEWLINE#
"""#id_cv_upload""" . css ( 'display' , 'inline' ) #NEWLINE#
[ 2 , 0 , 3 , 1 , 2 , 0 , 1 , 3 , 2 , 0 , 1 ] #NEWLINE#
parser . add_argument ( '--foo' , nargs = '?' , metavar = 'bar' , default = 'baz' ) #NEWLINE#
plt . show ( ) #NEWLINE#
newlist . append ( i ) #NEWLINE#
np . frombuffer ( test ) #NEWLINE#
dict ( [ ( k , v ) for k , v in list ( mydict . items ( ) ) if k >= 6 ] ) #NEWLINE#
self . button . setText ( 'Horizontal' ) #NEWLINE#
return l [ : 1 ] + [ b for a , b in zip ( l , l [ 1 : ] ) if a != b ] #NEWLINE#
response . set_cookie ( 'cookie_name2' , 'cookie_name2_value' ) #NEWLINE#
left . remove ( left [ 0 ] ) #NEWLINE#
local_file . write ( f . read ( ) ) #NEWLINE#
[ seq for seq in my_list if [ item for item in seq if some_condition ( ) ] ] #NEWLINE#
ones . groupby ( 'level_0' ) . agg ( lambda x : set ( chain ( x . level_0 , x . level_1 ) ) ) . values #NEWLINE#
[ ( 2 ** i ) for i , v in enumerate ( bin ( 109 ) [ : 1 : - 1 ] ) if int ( v ) ] #NEWLINE#
server . serve_forever ( ) #NEWLINE#
linsolve ( [ x + y + z - 1 , x + y + 2 * z - 3 ] , ( x , y , z ) ) #NEWLINE#
datetime . utcnow ( ) . replace ( tzinfo = simple_utc ( ) ) . isoformat ( ) #NEWLINE#
print ( key , d [ key ] ) #NEWLINE#
root . geometry ( '400x600' ) #NEWLINE#
model_to_dict ( instance , fields = [ field . name for field in instance . _meta . fields ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
{ k : min ( h1 . get ( k ) or h2 [ k ] , h2 . get ( k ) or h1 [ k ] ) for k in list ( h1 . keys ( ) ) + #NEWLINE# list ( h2 . keys ( ) ) } #NEWLINE#
platform . system ( ) #NEWLINE#
sorted ( A , key = A . get , reverse = True ) [ : 5 ] #NEWLINE#
[ { 'item2' : '34' , 'item1' : 'a' } , { 'item2' : '2' , 'item3' : 'fg' , 'item1' : 'sd' #NEWLINE# } , { 'item1' : 'f' } ] #NEWLINE#
stdout , stderr = p . communicate ( ) #NEWLINE#
[ age ] = [ t [ 1 ] for t in mylist if t [ 0 ] == 10 ] #NEWLINE#
comb = list ( comb ) #NEWLINE#
Publication . objects . all ( ) . delete ( ) #NEWLINE#
ie . Navigate ( 'http://website/file.xml' ) #NEWLINE#
store [ 'df' ] . groupby ( ) . sum ( ) #NEWLINE#
[ ( a , b ) for a in A for b in B if a in b ] #NEWLINE#
number = random . randint ( 5 , 20 ) #NEWLINE#
some_queue . get ( ) #NEWLINE#
print ( '#SPACE#' . join ( '%0.2f' % item for item in mylist ) ) #NEWLINE#
RadioField ( 'Label' , choices = [ ( 'value' , 'description' ) , ( 'value_two' , #NEWLINE# 'whatever' ) ] ) #NEWLINE#
re . findall ( s , text ) #NEWLINE#
np . min ( np . nonzero ( np . hstack ( ( B , 1 ) ) ) ) #NEWLINE#
m = coo_matrix ( ( v , ( l - 1 , c - 1 ) ) , shape = ( l . max ( ) , c . max ( ) ) ) #NEWLINE#
uppers = [ l for l in letters if l . isupper ( ) ] #NEWLINE#
grid [ 0 ] . set_title ( 'Default#SPACE#behavior#SPACE#(hard#SPACE#to#SPACE#see#SPACE#bias)' , fontsize = 8 ) #NEWLINE#
return func ( func , * args , ** kwargs ) #NEWLINE#
urllib . parse . unquote ( 'id%253D184ff84d27c3613d%26quality%3Dmedium' ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
s = s . replace ( 'z' , 's' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( os . environ [ 'not_existing_variable' ] ) #NEWLINE#
median ( [ 1 , 3 , 5 , 7 ] ) #NEWLINE#
canvas . setFont ( 'Vera' , 32 ) #NEWLINE#
timeit . timeit ( 'type(s)#SPACE#==#SPACE#str' , "s#SPACE#=#SPACE#''" ) #NEWLINE#
c . setopt ( pycurl . WRITEFUNCTION , lambda bytes : len ( bytes ) ) #NEWLINE#
unsure_rows [ key ] . append ( row [ key ] ) #NEWLINE#
df = df . iloc [ : , 16 : 27 ] . groupby ( [ lambda x : x . strftime ( '%d%m%Y' ) ] ) . sum ( ) #NEWLINE#
( item for sublist in list_of_lists ) #NEWLINE#
numpy . digitize ( b , a ) #NEWLINE#
cleaned = [ _f for _f in map ( str . strip , words ) if _f ] #NEWLINE#
ax . set_xlim ( - 10 , 10 ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
p = sparse . dia_matrix ( 1.0 / np . array ( x ) , shape = ( len ( x ) , len ( x ) ) ) #NEWLINE#
numpy . array ( [ 0.24 ] ) [ 0 ] == 0.24 #NEWLINE#
type ( list ( d . values ( ) ) ) #NEWLINE#
X = 1 #NEWLINE#
self . assertEqual ( content , expected_content ) #NEWLINE#
ordering = [ 'surname' , 'name' ] #NEWLINE#
s . replace ( 'â' , '' ) #NEWLINE#
s = pd . Series ( [ 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 ] ) #NEWLINE#
return glob . glob ( name ) [ 0 ] #NEWLINE#
int ( '' . join ( map ( str , my_list ) ) , 2 ) #NEWLINE#
pandas . set_option ( 'display.width' , 500 ) #NEWLINE#
print ( hasattr ( Foo , 'bar' ) ) #NEWLINE#
l . sort ( key = lambda x : int ( x . rsplit ( '#SPACE#' , 1 ) [ 1 ] ) ) #NEWLINE#
re . split ( '\\s|\u200b' , your_string ) #NEWLINE#
test = df . sort ( 'one' , ascending = False ) #NEWLINE#
"""""" . join ( bin ( int ( c , 16 ) ) [ 2 : ] . zfill ( 4 ) for c in h ) #NEWLINE#
headrev = client . info ( svnroot ) . get ( 'revision' ) . number #NEWLINE#
getattr ( myobject , 'date%s' % i ) #NEWLINE#
[ ( 1 , 3 , 5 ) , ( 2 , 4 , 6 ) ] #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#*,#SPACE#day(date_time)#SPACE#as#SPACE#day#SPACE#FROM#SPACE#df' ) #NEWLINE#
result_dict = [ u . __dict__ for u in my_query . fetchall ( ) ] #NEWLINE#
curses . endwin ( ) #NEWLINE#
running_sum ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
db . session . add ( User ( 'Joe#SPACE#Quimby' , 'eat@joes.com' ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
getattr ( filters , method ) ( ** options ) #NEWLINE#
driver . switch_to_window ( driver . window_handles [ - 1 ] ) #NEWLINE#
linematcher ( 'new_foo.txt' , 'old_foo.txt' , [ 1 , 3 , 4 ] ) #NEWLINE#
{ k : map ( sum , zip ( * v ) ) for k , v in list ( d . items ( ) ) } #NEWLINE#
gtk . main ( ) #NEWLINE#
a [ : , ( 1 ) ] #NEWLINE#
s . call ( 'gpio#SPACE#-g#SPACE#read#SPACE#17' ) #NEWLINE#
df . join ( new_cols . rename ( columns = lambda x : 'scaled_' + x ) ) #NEWLINE#
item ( ) #NEWLINE#
stripped_markup = BeautifulSoup ( stripped_markup ) #NEWLINE#
print ( sum ( 1 for x in list ( tadas . values ( ) ) if x [ 'one' ] ) ) #NEWLINE#
( '/static/(.*)?' , MainHandler ) , #NEWLINE#
self . button . setMenu ( QtGui . QMenu ( self . button ) ) #NEWLINE#
fig . savefig ( 'samplefigure' , bbox_extra_artists = ( lgd , ) , bbox_inches = 'tight' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
a . max ( axis = 1 ) . idxmax ( ) #NEWLINE#
print ( 'name={}#SPACE#value={}' . format ( 'link' , soup . link [ 'href' ] ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
newNums = [ i for i , x in enumerate ( nums ) if x == 12 ] #NEWLINE#
os . close ( fh1 ) #NEWLINE#
sorted ( [ 'name' , 'weight' , 'height' ] , key = ordering . get ) #NEWLINE#
"""""" . join ( x ) . replace ( '\n' , '#SPACE#' ) #NEWLINE#
bytearray . fromhex ( '7061756c' ) . decode ( ) #NEWLINE#
fig = plt . figure ( figsize = ( 6 , 6 ) ) #NEWLINE#
now = datetime . now ( ) #NEWLINE#
print ( flatten ( doc . xpath ( '/review/text/node()' ) ) ) #NEWLINE#
s . play ( ) #NEWLINE#
werte [ 1 : - 1 ] [ ( diff ( werte ) [ : - 1 ] > 0 ) * ( diff ( werte ) [ 1 : ] < 0 ) ] #NEWLINE#
{ 'a' : 3 , 'c' : 6 , 'b' : 5 } #NEWLINE#
numpy . unravel_index ( A . argmin ( ) , A . shape ) #NEWLINE#
print ( 'Jânis' . decode ( 'cp1252' ) ) #NEWLINE#
f . __dict__ . update ( b ) #NEWLINE#
arg = [ '1' , '2' , '3' , '7-10' , '15' , '20-25' ] #NEWLINE#
sys . stdout . buffer . write ( pdf_file . read ( ) ) #NEWLINE#
iterrange = itertools . islice ( items , 1 , None ) #NEWLINE#
ax . xaxis . set_minor_locator ( MultipleLocator ( 0.2 ) ) #NEWLINE#
df = df [ df . columns [ : 11 ] ] #NEWLINE#
imp . find_module ( 'sys' ) #NEWLINE#
imp . find_module ( 'lxml' ) #NEWLINE#
[ True , True , False , True , True ] #NEWLINE#
m = Message ( content = request . POST . get ( 'text' ) , user = u ) #NEWLINE#
{ ( 'A' , '4/7/2016' ) : [ '10:40' , '11:30' , '12:40' ] , ( 'B' , '4/7/2016' ) : [ '07:35' ] } #NEWLINE#
f = lambda * x : sum ( x ) - 1 #NEWLINE#
item . update ( { 'elem' : 'value' } ) #NEWLINE#
"""mysql+mysqlconnector://yourusername:yourpassword@yourhostname.com/your_database""" #NEWLINE#
print ( dir ( __builtins__ ) ) #NEWLINE#
array ( [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] ] ) #NEWLINE#
chords = '(?:maj|min|m|sus|aug|dim)?' #NEWLINE#
dict_ = { '3' : 'NAME2' , '2' : 'NAME1' } #NEWLINE#
contents = urllib . request . urlopen ( request ) . read ( ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#being#SPACE#imported#SPACE#by' , sys . _getframe ( 1 ) . f_globals . get ( '__name__' ) ) #NEWLINE#
( a [ : , ( None ) ] != np . arange ( 2 ) ) . astype ( int ) . tolist ( ) #NEWLINE#
json . dumps ( { 'created' : datetime . datetime . now ( ) } ) #NEWLINE#
self . dbobject = getattr ( ret , 'all' ) ( ) #NEWLINE#
print ( args ) #NEWLINE#
ax . yaxis . set_ticks ( [ 16 , 8 , 4 , 2 , 1 , 0 ] ) #NEWLINE#
driver . get ( 'url' ) #NEWLINE#
numpy . reshape ( array , array . shape + ( 1 , ) ) #NEWLINE#
min ( timeit . repeat ( lambda : dict ( ( k , v ) for k , v in zip ( keys , values ) ) ) ) #NEWLINE#
user = models . ForeignKey ( User ) #NEWLINE#
del x [ i + 1 : ] #NEWLINE#
self . setWindowFlags ( Qt . FramelessWindowHint ) #NEWLINE#
driver . get ( 'someURL' ) #NEWLINE#
df . join ( pd . DataFrame ( s ) . T ) . fillna ( method = 'ffill' ) #NEWLINE#
profile . set_preference ( 'browser.migration.version' , 9001 ) #NEWLINE#
list [ 0 ] . pop ( 0 ) #NEWLINE#
return render_to_response ( 'my_template_dir/my_template.html' , response_dict ) #NEWLINE#
df [ 'YearMonth' ] = df [ 'ArrivalDate' ] . map ( lambda x : 1000 * x . year + x . month ) #NEWLINE#
req . close ( ) #NEWLINE#
return [ x [ 0 ] for x in sorted ( data , key = lambda x : x [ 1 ] , reverse = True ) [ 0 : 6 ] ] #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'project.settings' #NEWLINE#
np . random . choice ( [ 0 , 1 ] , size = ( 10 , ) , p = [ 1.0 / 3 , 2.0 / 3 ] ) #NEWLINE#
plt . errorbar ( x , y , xerr = xerr , yerr = yerr , ls = 'none' ) #NEWLINE#
df_ranked = df . groupby ( 'Date' ) . apply ( grouping ) #NEWLINE#
[ x for x in list_of_strings if re . search ( '(.)\\1{2}' , x ) ] #NEWLINE#
[ '1' , 'Test' , 'NULL' , 'items#SPACE#(one,#SPACE#two,#SPACE#etc.)' , '1' , 'long,#SPACE#list' ] #NEWLINE#
sorted ( wrong_order , key = lambda x : int ( x . partition ( '/' ) [ 0 ] [ 2 : ] ) ) #NEWLINE#
df [ 'counts' ] = 1 #NEWLINE#
df . xs ( 'a' , level = 'A' , axis = 1 , drop_level = False ) #NEWLINE#
sorted ( ( time . strptime ( d , '%H:%M:%S' ) for d in time_list ) , reverse = True ) #NEWLINE#
br . open ( 'http://mspc.bii.a-star.edu.sg/tankp/run_depth.html' ) #NEWLINE#
pygame . mixer . music . load ( 'file.mp3' ) #NEWLINE#
""":""" . join ( re . findall ( '..' , s ) ) #NEWLINE#
sys . path . append ( '/usr/local/python/lib' ) #NEWLINE#
sys . path . append ( '/home/alvas/python/lib' ) #NEWLINE#
os . stat ( 'testfile' ) . st_blocks * 512 #NEWLINE#
print ( 'test' ) #NEWLINE#
degs = degrees ( rads ) #NEWLINE#
df = df . append ( { 'foo' : 1 , 'bar' : 2 } , ignore_index = True ) #NEWLINE#
re . sub ( '\\W+' , '#SPACE#' , s ) . upper ( ) #NEWLINE#
[ elem [ : 12 ] for elem in g ] #NEWLINE#
plt . show ( ) #NEWLINE#
np . tile ( b , ( 3 , 1 , 1 ) ) #NEWLINE#
setattr ( module_obj , method_name , func ) #NEWLINE#

self . clickcnx . close ( ) #NEWLINE#
s = '' . join ( next ( g ) if c == '@' else c for c in s ) #NEWLINE#
super ( QuestionSerializer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
dict1 = { x : dict1 [ x ] for x in keys } #NEWLINE#
df . reindex ( approach1 ( df . A . values , df . B . values ) ) #NEWLINE#
vol += [ val for name , val in list ( globals ( ) . items ( ) ) if name . startswith ( #NEWLINE# 'volume' ) ] #NEWLINE#
set ( [ 'someone' , 'ft.jgt' , 'my' , 'is' , 'to' , 'going' , 'place' , 'nickname' ] ) #NEWLINE#
df . set_index ( [ 'Symbol' , 'TimeStamp' ] ) #NEWLINE#
as_strided ( arr2 . T , strides = ( 8 , 8 , 32 ) , shape = ( 3 , 2 , 3 ) ) #NEWLINE#
return re . findall ( pattern , s ) #NEWLINE#
print ( '2' in s ) #NEWLINE#
plt . savefig ( 'test.pdf' ) #NEWLINE#
tf . initialize_all_variables ( ) . run ( ) #NEWLINE#
Input . objects . filter ( startDate__range = [ '2011-01-01' , '2011-01-31' ] ) #NEWLINE#
[ 'NfT' , 'NxS' ] #NEWLINE#
pd . tslib . repr_timedelta64 #NEWLINE#
np . einsum ( 'i,#SPACE#jki' , v , a ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
fig . savefig ( 'pointandfigure.png' ) #NEWLINE#
next ( x for x in lst if x % 2 == 0 ) #NEWLINE#
self . assertDictEqual ( a , b ) #NEWLINE#
sns_plot . savefig ( 'output.png' ) #NEWLINE#
problem = importlib . import_module ( sys . argv [ 1 ] ) #NEWLINE#
b . insert ( bisect ( b , a ) , a ) #NEWLINE#
ax . legend ( [ blue_proxy , red_proxy ] , [ 'cars' , 'bikes' ] ) #NEWLINE#
posts = Post . objects . filter ( __raw__ = { '$where' : 'this.likes.length#SPACE#>#SPACE#20' } ) #NEWLINE#
union ( [ ( 10 , 12 ) , ( 9 , 16 ) ] ) #NEWLINE#
f . write ( line ) #NEWLINE#
build_stylus ( ) #NEWLINE#
br . set_response ( response ) #NEWLINE#
set ( [ 2 , 1 ] ) <= set ( [ 1 , 2 , 3 ] ) #NEWLINE#
contours , _ = cv2 . findContours ( img , cv2 . RETR_LIST , cv2 . cv . CV_CHAIN_APPROX_NONE ) #NEWLINE#
df = pd . read_csv ( 'my_secret_file.csv' ) #NEWLINE#
[ k for k , v in list ( mydict . items ( ) ) if list ( mydict . values ( ) ) . count ( v ) > 1 ] #NEWLINE#
os . startfile ( filename , 'edit' ) #NEWLINE#
cmb . extend ( itertools . combinations ( range ( 1 , n + 1 ) , i ) ) #NEWLINE#
pygame . init ( ) #NEWLINE#
dev . leds ( verbose = True ) #NEWLINE#
[ sum ( sublist ) for sublist in zip ( * myListOfLists ) ] #NEWLINE#
last_row = df . ix [ df . last_valid_index ( ) ] #NEWLINE#
pygame . init ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
writer . writerow ( { 'first_name' : 'Baked' , 'last_name' : 'Beans' } ) #NEWLINE#
res = cv2 . bitwise_and ( closex , closey ) #NEWLINE#
print ( __file__ ) #NEWLINE#
[ 'B' , 'D' , 'A' , 'C' , 'A' , 'D' , 'C' , 'B' ] #NEWLINE#
"""""" . join ( [ ( '%s' % randint ( 0 , 9 ) ) for num in range ( 0 , n ) ] ) #NEWLINE#
os . path . expandvars ( '$C/test/testing' ) #NEWLINE#
df2 = df2 . drop ( [ 'yes' ] , axis = 1 ) #NEWLINE#
parser . add_argument ( 'start' , type = int , help = 'Specify#SPACE#start.' ) #NEWLINE#
hist ( hmag , 30 , range = [ 6.5 , 12.5 ] , facecolor = 'gray' , align = 'mid' ) #NEWLINE#
plt . show ( ) #NEWLINE#
eval ( x ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
c = [ [ ( x + b [ i ] ) for i , x in enumerate ( y ) ] for y in a ] #NEWLINE#
print ( '{0:b}' . format ( y ) ) #NEWLINE#
self . text . bind ( '<Configure>' , self . _on_change ) #NEWLINE#
funkytown . _asdict ( ) #NEWLINE#
my_string = my_string . replace ( k , v ) #NEWLINE#
self . ax . xaxis . set_label_position ( 'top' ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( read_records ( data ) ) #NEWLINE#
Foo ( ) . bar ( ) #NEWLINE#
glUniform1i ( self . tex2D , 0 ) #NEWLINE#
return list . __getitem__ ( self , index ) #NEWLINE#
( array [ 'x' ] < y ) . sum ( ) #NEWLINE#
print ( parser . parse ( treebank . sents ( ) [ 0 ] ) ) #NEWLINE#
numpy . vstack ( ( x , y ) ) #NEWLINE#
np . array ( [ 1 , 2 , 3 ] ) == np . squeeze ( np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) ) #NEWLINE#
[ [ ] , [ ] ] #NEWLINE#
ax . set_xticks ( xticks ) #NEWLINE#
yield ( i , ) + tuple ( d [ i ] for d in dcts ) #NEWLINE#
"""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_""" #NEWLINE#
print ( '۰۱۲۳۴۵۶۷۸۹' [ 1 ] ) #NEWLINE#
any ( [ k for k in l if 'Derived:#SPACE#' in k ] ) #NEWLINE#
button . clicked . connect ( lambda : self . commander ( command ) ) #NEWLINE#
self . exporter . export_item ( item ) #NEWLINE#
return render ( request , 'your_template.html' , { 'h' : h , 'var1' : var1 } ) #NEWLINE#
l [ 0 ] [ 0 ] += 1 #NEWLINE#
sys . modules [ 'mymodule' ] = mymodule #NEWLINE#
height = img . get_height ( ) #NEWLINE#
tree . removeItemWidget ( i , 0 ) #NEWLINE#
df . loc [ index , 'COL_NAME' ] = x #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
sys . getsizeof ( i ) #NEWLINE#
print ( fibonacci ( int ( eval ( input ( ) ) ) ) ) #NEWLINE#
settings = sys . modules [ 'django.conf' ] . settings #NEWLINE#
subprocess . Popen ( 'explorer#SPACE#/select,"C:\\path\\of\\folder\\file"' ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#Label' ) #NEWLINE#
birth_years = dict ( zip ( name , year ) ) #NEWLINE#
print ( 'the#SPACE#label#SPACE#is' , l . cget ( 'text' ) ) #NEWLINE#
template = 'example.html.j2' #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
print ( form . cleaned_data [ 'my_form_field_name' ] ) #NEWLINE#
d = { b : a [ : , ( i ) ] for i , b in enumerate ( a ) } #NEWLINE#
plt . ylabel ( 'Line#SPACE#Number' ) #NEWLINE#
tk . mainloop ( ) #NEWLINE#
ax . set_title ( 'Scores#SPACE#by#SPACE#group#SPACE#and#SPACE#gender' ) #NEWLINE#
ax . set_ylabel ( 'Label#SPACE#One' , size = 16 ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
f . write ( content ) #NEWLINE#
requests_session . get ( 'file://<some_local_path>' ) #NEWLINE#
TextCtrlInstance . GetValue ( ) #NEWLINE#
[ x . _asdict ( ) for x in df . itertuples ( ) ] #NEWLINE#
np . flatnonzero ( ~ a [ : - 2 ] & a [ 1 : - 1 ] & a [ 2 : ] ) #NEWLINE#
cherrypy . request . hooks . attach ( 'on_end_request' , mycallbackfunction ) #NEWLINE#
hdfpivot = hdfreset . pivot ( 'a' , 'b' ) #NEWLINE#
[ y [ 0 ] for y in [ x . split ( ')' ) for x in s . split ( '%(' ) ] if len ( y ) > 1 ] #NEWLINE#
nums = [ int ( n ) for n in with_open ( 'test.txt' ) ] #NEWLINE#
asdf . save ( ) #NEWLINE#
plt . ylim ( 10 , 40 ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] [ : 5 ] #NEWLINE#
print ( my_dict [ 'foo' ] [ 'bar' ] ) #NEWLINE#
libdl . dlclose ( handle ) #NEWLINE#
Z = func ( X , Y ) #NEWLINE#
args = parser . parse_args ( [ argString ] ) #NEWLINE#
print ( matcher ( 'AACTATAAATTTACCA' , 'AT' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_yticklabels ( y_label , fontsize = 20 ) #NEWLINE#
cursor . execute ( qry , list ( myDict . keys ( ) ) + list ( myDict . values ( ) ) ) #NEWLINE#
os . _exit ( 0 ) #NEWLINE#
random . shuffle ( r ) #NEWLINE#
my_treeview . setEditTriggers ( QAbstractItemView . NoEditTriggers ) #NEWLINE#
s = ':dfa:sif:e' #NEWLINE# print ( s [ 1 : ] ) #NEWLINE#
total = value [ c1 - 1 ] + value [ c2 - 1 ] #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( level = 0 , sort = False ) . transform ( lambda x : sorted ( x , key = pd . isnull ) ) #NEWLINE#
print ( lxml . etree . tostring ( doc ) ) #NEWLINE#
m . mask = np . repeat ( i == j , k . size , axis = 2 ) #NEWLINE#
"""Hello#SPACE#{user.name}""" . format ( user = User ( 'Markus' ) ) #NEWLINE#
"""""" . join ( [ chr ( int ( p , 2 ) ) for p in wrap ( binstr , 8 ) ] ) #NEWLINE#
df [ df . col . str . match ( '^(?![tc])' ) ] #NEWLINE#
print ( pattern . sub ( '\\1#' , str ) ) #NEWLINE#
MEDIA_ROOT = os . path . join ( os . path . dirname ( BASE_DIR ) , 'media_cdn' ) #NEWLINE#
subversion . search ( s ) . group ( ) #NEWLINE#
raise AssertionError ( expression2 ) #NEWLINE#
calendar . monthrange ( 2012 , 2 ) [ 1 ] #NEWLINE#
frames . append ( pandas . DataFrame ( row ) ) #NEWLINE#
subprocess . call ( 'netsh#SPACE#interface#SPACE#ip#SPACE#set#SPACE#address#SPACE#....' . split ( ) ) #NEWLINE#
ax . set_xlabel ( 'time#SPACE#(hours)' ) #NEWLINE#
droid . eventPost ( 'echo' , 'hello#SPACE#world' ) #NEWLINE#
np . sqrt ( ( a * a ) . sum ( axis = 1 ) ) #NEWLINE#
c [ 'columnMeta' ] = { 'age' : { } , 'full_name' : { 'label' : 'name' } } #NEWLINE#
idx = np . nonzero ( a == a ) [ 0 ] #NEWLINE#
par2 . set_ylabel ( 'Velocity' ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
print ( os . path . abspath ( my_module . __file__ ) ) #NEWLINE#
{ 'name' : 'product' , 'attributes' : [ 'id' , 'name' ] } , #NEWLINE#
[ next ( iterable ) for x in range ( 10 ) ] #NEWLINE#
app . run ( host = '0.0.0.0' , port = port ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . view . setModel ( self . model ) #NEWLINE#
map ( '' . join , itertools . product ( * zip ( s . upper ( ) , s . lower ( ) ) ) ) #NEWLINE#
random . shuffle ( word ) #NEWLINE#
img_as_np = np . asarray ( img . getdata ( ) ) . reshape ( img . size [ 1 ] , img . size [ 0 ] , - 1 ) #NEWLINE#
doc = parse ( 'filename.xml' ) #NEWLINE#
os . symlink ( linkto , dstname ) #NEWLINE#
[ [ 2 , 5 , 13 , 14 ] , [ 2 , 5 , 12 , 13 ] ] #NEWLINE#
bool ( re . compile ( '^[a-z0-9\\.]+$' ) . match ( '1234\n' ) ) #NEWLINE#
data . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
return self . func ( * args , ** self . kwargs ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#' + filename , file . write ) #NEWLINE#
print ( y . max ( ) ) #NEWLINE#
df . apply ( OrderedDict ) #NEWLINE#
print ( list ( date_range ( 5 , 2 ) ) ) #NEWLINE#
output . write ( '\n' . join ( outputData ) ) #NEWLINE#
QMainWindow . __init__ ( self , * args ) #NEWLINE#
phrase . strip ( ) . capitalize ( ) #NEWLINE#
df . set_index ( 'day' ) . ix [ order ] . groupby ( 'group' ) . plot ( kind = 'bar' ) #NEWLINE#
[ '1.0.0' , '1.0.2' , '1.0.12' , '1.1.2' , '1.3.3' ] #NEWLINE#
min_keys = [ k for k in d if d [ k ] == min_value ] #NEWLINE#
list ( set ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
print ( average ( 'cat' [ : : - 1 ] , 'doggie' [ : : - 1 ] ) [ : : - 1 ] ) #NEWLINE#
utc_datetime . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
return list ( choice ( json_obj [ k ] ) . values ( ) ) [ 0 ] #NEWLINE#
df . head ( ) #NEWLINE#
df . plot ( subplots = True ) #NEWLINE#
f . close ( ) #NEWLINE#
[ tuple ( d . values ( ) ) for d in l ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( '%6f' % i ) #NEWLINE#
sys . path . insert ( 0 , p ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . write ( next ( spinner ) ) #NEWLINE#
data = twitchdata . decode ( ) . split ( ':' ) [ 1 ] #NEWLINE#
new_lst . append ( x ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
PyErr_Clear ( ) #NEWLINE#
array ( [ [ 't' , 'h' , 'a' , 'n' , 'k' ] ] , dtype = '<U1' ) #NEWLINE#
np . asarray ( np . bmat ( [ [ A , Z ] , [ Z , B ] ] ) ) #NEWLINE#
ax . add_patch ( polygon2 ) #NEWLINE#
5.696963536654355 , 2.000525270283701 , - 0.06044330722840492 , 1.058027841408646 #NEWLINE#
payload = { 'user' : 'newuser' , 'pass' : '12345' , 'tos_understood' : 'on' } #NEWLINE#
cleaned_string = '' . join ( c for c in input_string if valid_xml_char_ordinal ( c ) ) #NEWLINE#
sock . bind ( ( UDP_IP , UDP_PORT ) ) #NEWLINE#
find_nth_overlapping ( 'foofoofoofoo' , 'foofoo' , 2 ) #NEWLINE#
ax2 . set_xticklabels ( [ '0' , '1' , '2' ] ) #NEWLINE#
setattr ( self , name , name ) #NEWLINE#
list ( iterdir ( '/' , 'usr' ) ) #NEWLINE#
nodeenv - - python - virtualenv #NEWLINE#
print ( 'Read:#SPACE#(%s)#SPACE#%r' % ( time . time ( ) , sys . stdin . readline ( ) ) ) #NEWLINE#
p . wait ( ) #NEWLINE#
[ ( sum ( group ) / size ) for group in zip ( * ( [ iter ( data ) ] * size ) ) ] #NEWLINE#
j . save ( 'C:/Users/User/Desktop/mesh_trans.bmp' ) #NEWLINE#
list ( itertools . product ( * l ) ) #NEWLINE#
helloworld . helloworld ( ) #NEWLINE#
print ( 'This#SPACE#gets#SPACE#logged#SPACE#to#SPACE#file' , file = open ( '/tmp/logfile.txt' , 'a' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . to_numeric ( s ) #NEWLINE#
m = MyStruct ( 'foo' , 'bar' , 'baz' ) #NEWLINE#
[ 'HELLO' , 'HO' , 'WARE' , 'YOU' ] #NEWLINE#
[ 'HELLO' , 'HOW' , 'ARE' , 'YOU' ] #NEWLINE#
[ 'THIS' , 'EXAMPLE' , 'WORK' , 'SWELL' ] #NEWLINE#
[ 'THIS' , 'EXAMPLE' , 'WORKS' , 'WELL' ] #NEWLINE#
vals = np . array ( [ 3 , 4 , 5 , 6 , 7 , 7 , 9 , 1 , 0 ] ) #NEWLINE#
sum ( x > 7 for x in a ) #NEWLINE#
abs ( n ) #NEWLINE#
s . decode ( 'hex' ) #NEWLINE#
img = cv2 . imread ( 'lenna.png' ) #NEWLINE#
ax . xaxis . set_major_formatter ( FormatStrFormatter ( '%d' ) ) #NEWLINE#
df = pd . read_csv ( io . StringIO ( string ) , delim_whitespace = True ) #NEWLINE#
ax = pylab . gca ( ) #NEWLINE#
print ( '\n' . join ( [ '' . join ( [ '{:4}' . format ( item ) for item in row ] ) for row in A ] ) ) #NEWLINE#
uf . accumulate ( [ 2 , 3 , 5 , 8 , 3 , 5 ] , dtype = np . object ) . astype ( np . float ) #NEWLINE#
p . stdin . close ( ) #NEWLINE#
file . close ( ) #NEWLINE#
threading . Timer ( 60 , f ) . start ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ 1 , 1 , 5 , 5 , 9 , 9 ] , [ 2 , 2 , 7 , 7 , 3 , 3 ] , [ 8 , 8 , 4 , 4 , 6 , 6 ] ] ) #NEWLINE#
[ ( 'J' , 20 , 50 ) , ( 'Q' , 10 , 30 ) , ( 'F' , 2 , 10 ) ] #NEWLINE#
self . create_socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
x [ 0 ] . append ( [ ] ) #NEWLINE#
l = list ( t ) #NEWLINE#
obj . func1 ( ) #NEWLINE#
msg_image . add_header ( 'Content-ID' , '<{}>' . format ( img [ 'cid' ] ) ) #NEWLINE#
return requests . get ( 'http://example.com' ) . content #NEWLINE#
list_of_nums = [ x for x in list_of_nums if x != 2 ] #NEWLINE#
btlabel1 . grid ( row = 0 , column = 1 , padx = 10 , sticky = 'w' ) #NEWLINE#
print ( subprocess . check_output ( [ 'ls' , '-l' ] ) ) #NEWLINE#
execute ( 'task2' ) #NEWLINE#
return self . title . replace ( '#SPACE#' , '' ) #NEWLINE#
return HttpResponse ( html ) #NEWLINE#
a [ 0 ] [ 'tuple' ] = np . array ( ( 1 , 2 ) ) #NEWLINE#
ax . axis ( 'The#SPACE#list#SPACE#of#SPACE#range' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
[ 'big' , 'fat' , 'cat' , 'sits' , 'on' ] #NEWLINE#
[ 'fat' , 'cat' , 'sits' , 'on' , 'the' ] #NEWLINE#
[ 'cat' , 'sits' , 'on' , 'the' , 'mat' ] #NEWLINE#
[ 'sits' , 'on' , 'the' , 'mat' , 'eating' ] #NEWLINE#
[ 'on' , 'the' , 'mat' , 'eating' , 'a' ] #NEWLINE#
[ 'the' , 'mat' , 'eating' , 'a' , 'rat' ] #NEWLINE#
sum ( bool ( x ) for x in l ) #NEWLINE#
super ( Item , self ) . save ( * args , ** kwargs ) #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . values . sum ( ) ) #NEWLINE#
c = np . in1d ( a , b ) #NEWLINE#
diag = [ row [ i ] for i , row in enumerate ( mat ) ] #NEWLINE#
[ 0 , 0 , 0 , 0 , 1 , 1 ] , #NEWLINE#
x . most_common ( 1 ) [ 0 ] [ 0 ] #NEWLINE#
pygame . quit ( ) #NEWLINE#
self . sections . clear ( ) #NEWLINE#
return all ( a % i for i in range ( 2 , a ) ) #NEWLINE#
sys . stderr = logger #NEWLINE#
format ( 10000.21 , ',' ) #NEWLINE#
sys . exit ( 100 ) #NEWLINE#
print ( 'Yay!' ) #NEWLINE#
render ( request , 'wardform_template' , c ) #NEWLINE#
print ( 'Yeah!' ) #NEWLINE#
browser . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
ax . set_xscale ( 'symlog' ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
urlparse ( 'http://www.cwi.nl:80/%7Eguido/Python.html' ) #NEWLINE#
start_date = datetime . datetime . now ( ) + datetime . timedelta ( - 30 ) #NEWLINE#
[ [ item for item in seq if some_condition ] for seq in my_list ] #NEWLINE#
list ( range ( start , end , step ) ) #NEWLINE#
re . split ( '[^\\d]' , str ) [ - 1 ] #NEWLINE#
conn . close ( ) #NEWLINE#
matplotlib . font_manager . findSystemFonts ( fontpaths = None , fontext = 'ttf' ) #NEWLINE#
d = dict ( ( k , v ) for k , v in list ( d . items ( ) ) if k is not None and k != '' ) #NEWLINE#
proc . wait ( ) #NEWLINE#
parser . add_argument ( '--foo' , nargs = '*' , dest = 'foo' , action = Extender ) #NEWLINE#
self . widget . config ( text = '\n' . join ( self . content ) ) #NEWLINE#
plt . plot ( ) #NEWLINE#
v1 , v2 , v3 , v4 = [ max ( x , 0 ) for x in [ a , b , c , d ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
with open ( 'test.json' , 'w' ) as f : #NEWLINE# #INDENT# json . dump ( data , f ) #NEWLINE#
PyObject_HEAD_INIT ( NULL ) #NEWLINE#
df . query ( 'Col1#SPACE#in#SPACE#@search_list' ) #NEWLINE#
ax1 . plot ( [ ( 1 , 2 ) , ( 3 , 4 ) ] , [ ( 4 , 3 ) , ( 2 , 3 ) ] ) #NEWLINE#
age = models . IntegerField ( ) #NEWLINE#
print ( response . status_code ) #NEWLINE#
'Dealer#SPACE#has#SPACE#%s#SPACE#showing.' % self . dealer [ : 2 ] #NEWLINE#
plt . gca ( ) . set_color_cycle ( [ 'red' , 'green' , 'blue' , 'yellow' ] ) #NEWLINE#
main ( ) #NEWLINE#
xp = root . xpath ( '/x:data' , namespaces = my_namespaces ) #NEWLINE#
dt . strftime ( '%Y-%m-%d' ) #NEWLINE#
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 0 ] , reverse = True ) #NEWLINE#
warnings . warn ( 'this#SPACE#is#SPACE#a#SPACE#warning#SPACE#message' ) #NEWLINE#
f . write ( bytes ( bin_array ) ) #NEWLINE#
student_names = [ 'harold' , 'harry' , 'herb' , 'humphrey' ] #NEWLINE#
{ { form . name ( size = 20 , class_ = 'input-small' ) } } #NEWLINE#
return sum ( [ i for i in l1 if isinstance ( i , int ) ] ) #NEWLINE#
np . meshgrid ( x , x , sparse = True ) #NEWLINE#
data . apply ( lambda r : sorted ( r ) , axis = 1 ) . drop_duplicates ( ) . sort_values ( 'A' ) #NEWLINE#
[ ( 10 , 20 ) , ( 13 , 20 ) , ( 50 , 60 ) , ( 51 , 62 ) , ( 100 , 120 ) ] #NEWLINE#
[ setitem ( x , 1 , - 2 ) for x in lol ] #NEWLINE#
wildcards = ',' . join ( [ '?' ] * len ( frame . columns ) ) #NEWLINE#
df . iloc [ 0 : 2 , : ] #NEWLINE#
webbrowser . open ( 'www.youtube.com' ) #NEWLINE#
logging . getLogger ( ) . addHandler ( console_handler ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
super ( LoginFormWithoutNickname , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
table = soup . find ( 'table' , attrs = { 'class' : 'lineItemsTable' } ) #NEWLINE#
max ( [ x for x in ls if x < 0 ] ) #NEWLINE#
data = numpy . arange ( 5 * 4 ) . reshape ( 5 , 4 ) #NEWLINE#
subdict = dict ( ( k , v ) for k , v in myDict . items ( ) if v . field2 >= 2 ) #NEWLINE#
return all ( x * y > 0 for x , y in zip ( l1 , l2 ) ) #NEWLINE#
Button ( root , text = 'Create#SPACE#win2' , command = create_win ) . pack ( ) #NEWLINE#
ax2 . set_xlabel ( 'Modified#SPACE#x-axis:#SPACE#$1/(1+X)$' ) #NEWLINE#
self . scroller . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
f . write ( struct . pack ( 'B' * len ( bytes ) , * bytes ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
f = lambda x : x [ 0 ] * x [ 0 ] * x [ 0 ] + x [ 1 ] * x [ 1 ] #NEWLINE#
a = np . arange ( n * 3 ) . reshape ( n , 3 ) #NEWLINE#
datetime . datetime . date ( 2011 , 1 , 1 ) #NEWLINE#
jsonobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( dict ( f = var3 ) ) #NEWLINE#
self . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
DEBUG = os . environ . get ( 'DEBUG' , False ) #NEWLINE#
plt . xlim ( 0 , 125 ) #NEWLINE#
min_unfairness = min ( num [ i + k - 1 ] - num [ i ] for i in range ( n - k + 1 ) ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
doit ( 'three' ) #NEWLINE#
'function(%s)' % ',#SPACE#' . join ( args ) #NEWLINE#
print ( [ int ( x ) for x in T1 ] ) #NEWLINE#
return A [ ~ np . in1d ( A . dot ( cumdims ) , B . dot ( cumdims ) ) ] #NEWLINE#
[ x for x , y in groupby ( L ) if len ( list ( y ) ) < 2 ] #NEWLINE#
_sock . close ( ) #NEWLINE#
super ( programmers , self ) . info ( ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
TimeModel . objects . create ( time = td . total_seconds ( ) ) #NEWLINE#
ax . xaxis . set_major_formatter ( FormatStrFormatter ( '%0.1f' ) ) #NEWLINE#
subprocess . Popen ( [ 'xdg-open' , d ] ) #NEWLINE#
__init__ . py #NEWLINE#
print ( list ( zip_longest ( a , b , fillvalue = '' ) ) ) #NEWLINE#
df . columns [ pd . isnull ( df ) . any ( ) ] . tolist ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
ts = df . set_index ( 'DateTime' ) #NEWLINE#
a = [ ( [ 0 ] * 8 ) for _ in range ( 8 ) ] #NEWLINE#
text . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
print ( binascii . hexlify ( content ) ) #NEWLINE#
requests . post ( url , data = payload ) #NEWLINE#
n = [ x for x in main_text if x == '#SPACE#' or x not in string . printable ] #NEWLINE#
obj_to_store = cPickle . dumps ( input_obj ) . encode ( 'hex' ) #NEWLINE#
now . replace ( minute = 0 , hour = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
p . wait ( ) #NEWLINE#
fig . savefig ( 'test.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
writer . writerow ( [ row . get ( field , '' ) for field in fieldnames ] ) #NEWLINE#
sys . exit ( ) #NEWLINE#
writer . writerows ( rows ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
lines = set ( f . readlines ( ) ) #NEWLINE#
float ( x ) #NEWLINE#
sys . path . append ( dirname ( __file__ ) ) #NEWLINE#
return all ( x == L [ 0 ] for x in L ) #NEWLINE#
"""☺️""" [ 1 ] . encode ( 'unicode_escape' ) #NEWLINE#
[ a for a in s if s . count ( a ) == 1 ] #NEWLINE#
re . findall ( 'aaa\\?aaa' , s ) #NEWLINE#
numpy . savetxt ( fname = 'newPicksData.txt' , X = x , fmt = '%i' ) #NEWLINE#
outf . write ( 'data!' ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
np . multiply ( a , b ) #NEWLINE#
m . update ( string . encode ( 'utf-8' ) ) #NEWLINE#
result = [ separator . join ( map ( str , x ) ) for x in product ( * lists ) ] #NEWLINE#
[ name for name in data1 if name in data2 ] #NEWLINE#
p = multiprocessing . Pool ( processes = 3 ) #NEWLINE#
ax . set_ylabel ( '$\\phi_\\mathrm{im}$' ) #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
c = '{0}{1}' . format ( a , b ) #NEWLINE#
reversed_arr = np . swapaxes ( np . swapaxes ( arr , 0 , k ) [ : : - 1 ] , 0 , k ) #NEWLINE#
app . secret_key = os . urandom ( 32 ) #NEWLINE#
df . drop_duplicates ( ) #NEWLINE#
server_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
return '' . join ( d ) #NEWLINE#
DATABASE_ROUTERS = [ 'routers.DefaultRouter' , 'routers.DB1Router' ] #NEWLINE#
writer . close ( ) #NEWLINE#
print ( imap_conn . list ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
user_pass = dict ( cursor . fetchall ( ) ) #NEWLINE#
from django . utils . safestring import mark_safe #NEWLINE#
return os . path . dirname ( sys . argv [ 0 ] ) #NEWLINE#
json . dumps ( data ) #NEWLINE#
headers = { 'content-type' : 'application/json' } #NEWLINE#
df . resample ( '30s' , how = { 'price' : 'ohlc' } ) #NEWLINE#
numpy . array ( [ 0.3 , 0.4 , 0.3 ] ) . cumsum ( ) . searchsorted ( numpy . random . sample ( 5 ) ) #NEWLINE#
[ [ random . random ( ) for i in range ( N ) ] for j in range ( M ) ] #NEWLINE#
src . close ( ) #NEWLINE#
btn4 . grid ( row = 1 , column = 1 , columnspan = 1 , sticky = 'EWNS' ) #NEWLINE#
gtk . main ( ) #NEWLINE#
len ( a ) / np . sum ( 1.0 / a ) #NEWLINE#
ax . plot ( list ( range ( len ( y ) ) ) , y [ : , ( 0 ) ] + y [ : , ( 1 ) ] , 'k--' ) #NEWLINE#
return datetime . date . fromtimestamp ( ts ) . month #NEWLINE#
cv2 . destroyWindow ( 'preview' ) #NEWLINE#
super ( Item , self ) . save ( * args , ** kwargs ) #NEWLINE#
"""hello{0},#SPACE#world!""" . format ( 'z' ) #NEWLINE#
x . remove ( 'ala@ala.com' ) #NEWLINE#
urllib . request . urlopen ( 'https://fw.io/' ) . info ( ) . getdate ( 'Date' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
s . split ( '#' , 1 ) [ 0 ] #NEWLINE#
parsed_data = parse_data [ 'data' ] [ 'translations' ] #NEWLINE#
my_round ( 0.3125 , 3 ) #NEWLINE#
df . divide ( df . ix [ 0 ] / 100 ) #NEWLINE#
df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 0 ) #NEWLINE#
"""{:.2f}""" . format ( 1.5 ) #NEWLINE#
favorite_animal = models . CharField ( max_length = 20 , default = 'Dragons.' ) #NEWLINE#
print ( json . dumps ( e , cls = new_alchemy_encoder ( ) , check_circular = False ) ) #NEWLINE#
writer . write ( line ) #NEWLINE#
print ( d . get ( frozenset ( ( 2 , 1 ) ) ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
l = [ d for d in days if d . weekday ( ) in [ 1 , 2 ] ] #NEWLINE#
s = 'Zaptoit:685158:zaptoit@hotmail.com' #NEWLINE# s . split ( ':' , 1 ) [ 1 ] #NEWLINE#
barbar . py #NEWLINE#
[ x for i , x in enumerate ( y ) if i != 1 ] #NEWLINE#
print ( 'foo#SPACE#package#SPACE#loaded' ) #NEWLINE#
""",""" . join ( [ str ( elem ) for elem in a ] ) #NEWLINE#
elements . append ( Paragraph ( 'World' , styles [ 'Normal' ] ) ) #NEWLINE#
elements . append ( Paragraph ( 'You#SPACE#are#SPACE#in#SPACE#page#SPACE#2' , styles [ 'Normal' ] ) ) #NEWLINE#
cc . send ( 'helo#SPACE#tester.com\r\n' ) #NEWLINE#
s . lstrip ( punctuation ) #NEWLINE#
data = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
super ( Cat , self ) . __init__ ( name , weight , ** kwargs ) #NEWLINE#
plt . savefig ( __file__ + '.png' ) #NEWLINE#
request . GET . get ( 'section' , '' ) #NEWLINE#
wav_file . close ( ) #NEWLINE#
w = sklearn . preprocessing . normalize ( Pxx [ 1 : , : ] , norm = 'l1' , axis = 0 ) #NEWLINE#
ax . legend ( ) #NEWLINE#
x ( ) #NEWLINE#
max ( 1 , float ( 'nan' ) ) #NEWLINE#
socket . send ( 'Hello' ) #NEWLINE#
self . text_box . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
os . rename ( os . path . join ( base , old_name ) , os . path . join ( base , new_name ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . scatter ( x , y , c = c , cmap = cmap ) #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( 1 , len ( s ) + 1 ) ) #NEWLINE#
pprint ( rollup_to_dict ( df , [ '2013#SPACE#Total' ] ) ) #NEWLINE#
df . sum ( axis = 1 ) . order ( ascending = False ) . head ( 3 ) #NEWLINE#
df . merge ( df1 , on = 'sku' , how = 'left' ) #NEWLINE#
len ( re . findall ( '#available' , aa ) ) #NEWLINE#
bool ( '' ) #NEWLINE#
np . vstack ( a ) #NEWLINE#
ftpc . close ( ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
ssh_client . connect ( '192.168.122.55' , username = 'user' , password = 'password' ) #NEWLINE#
print ( Decimal ( 1 ) / Decimal ( 3 ) ) #NEWLINE#
print ( cleaner . clean_html ( body ) . text_content ( ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
ax . set_ylim ( 0 , 10 ) #NEWLINE#
Obj3 . grid_forget ( ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
s . split ( '23' , 1 ) [ 0 ] #NEWLINE#
A = csr_matrix ( [ [ 1 , 0 , 2 ] , [ 0 , 3 , 0 ] ] ) #NEWLINE#
"""string#SPACE#to#SPACE#search""" . find ( 'needle' ) #NEWLINE#
ax . set_xlim ( 0 , 20 ) #NEWLINE#
plt . savefig ( 'T2.png' ) #NEWLINE#
plt . legend ( ) #NEWLINE#
kNN1 . fit ( data , class_labels ) #NEWLINE#
df . index #NEWLINE#
reg = conn . fetchall ( ) #NEWLINE#
return '' . join ( builder [ : - 1 ] ) #NEWLINE#
a = a [ ( a >= - 100 ) & ( a <= 100 ) ] #NEWLINE#
array ( [ '1' , '2' , '3' , '4' , '5' ] , dtype = '|S11' ) , #NEWLINE#
datetime . datetime . fromtimestamp ( 1004256400 ) #NEWLINE#
regex . findall ( 'a.*?a' , 'a#SPACE#1#SPACE#a#SPACE#2#SPACE#a#SPACE#3#SPACE#a#SPACE#4#SPACE#a' , overlapped = True ) #NEWLINE#
p2 = Process ( target = f , args = ( d , ) ) #NEWLINE#
set ( [ 'c' , 'd' ] ) #NEWLINE#
self . finish ( ) #NEWLINE#
p . terminate ( ) #NEWLINE#
Image ( url = 'http://my_site.com/my_picture.jpg' , width = 100 , height = 100 ) #NEWLINE#
plot . savefig ( 'hanning%s.pdf' % num ) #NEWLINE#
seats = Seat . query . filter ( Seat . invite != None ) . all ( ) #NEWLINE#
a . reshape ( - 1 , np . prod ( a . shape [ - 2 : ] ) ) [ : , : : - 1 ] . reshape ( a . shape ) #NEWLINE#
for i in range ( 1 , 6 ) : #NEWLINE# #INDENT# for c1 in itertools . combinations ( c , i ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
editors = models . ManyToManyField ( User , related_name = 'mymodel_can_edit' ) #NEWLINE#
df . max ( 1 ) #NEWLINE#
l = [ x [ : k ] for k in ( - 5 , - 4 , - 3 , - 2 , - 1 , None ) ] #NEWLINE#
len ( 'こんにちは' ) #NEWLINE#
print ( list ( zip_longest ( a , b , fillvalue = '' ) ) ) #NEWLINE#
matches . append ( [ os . path . join ( root , filename ) , error ] ) #NEWLINE#
sock . connect ( ( address , port ) ) #NEWLINE#
func ( ) #NEWLINE#
self . d = self . d + [ '1' ] #NEWLINE#
__init__ . py #NEWLINE#
lst . sort ( key = lambda d : d [ 'name' ] ) #NEWLINE#
fig . close ( ) #NEWLINE#
"""{lorem:*>10}""" . format ( lorem = 'Lorem' ) #NEWLINE#
dic . pop ( 'a' , 0 ) #NEWLINE#
forms [ 4 ] [ 'vehicle' ] = [ 'Bike' , 'Car' ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
f = File ( open ( os . path . join ( IMPORT_DIR , 'fotos' , photo ) , 'rb' ) ) #NEWLINE#
R2a . __init__ ( self ) #NEWLINE#
map ( int , sum ( map ( lambda x : list ( str ( x ) ) , lst ) , [ ] ) ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
imp . find_module ( 'pip' ) #NEWLINE#
f . write ( 'koko' ) #NEWLINE#
f . write ( 'coco' ) #NEWLINE#
[ ( x or '' ) for x in l ] #NEWLINE#
MyFormatter ( ) . vformat ( '{a.b}' , [ ] , { 'a.b' : 'Success!' } ) #NEWLINE#
yourstring = 'L{0}LL' . format ( yourstring ) #NEWLINE#
plt . plot ( x , x ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
pound = '£' #NEWLINE#
klass = getattr ( mod , 'my_class' ) #NEWLINE#
sys . path . append ( '../' ) #NEWLINE#
d = dict ( [ ( 'two' , 2 ) , ( 'one' , 1 ) , ( 'three' , 3 ) ] ) #NEWLINE#
Series ( df . Letter . values , index = df . Position ) . to_dict ( ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#id,#SPACE#parent_id#SPACE#from#SPACE#test#SPACE#LIMIT#SPACE#2' ) #NEWLINE#
"""""" . join ( tup ) #NEWLINE#
df . loc [ ( idx [ : , ( '2014-05' ) ] ) , : ] #NEWLINE#
np . dtype ( 'float' ) #NEWLINE#
df . prod ( axis = 1 ) #NEWLINE#
l . sort ( ) #NEWLINE#
dicts . flatMap ( lambda x : list ( x . items ( ) ) ) #NEWLINE#
df . groupby ( 'a' ) . max ( ) #NEWLINE#
logging . basicConfig ( format = '%(process)d#SPACE#%(message)s' ) #NEWLINE#
ax . lines [ - 1 ] . set_marker ( 's' ) #NEWLINE#
print ( soup ( text = re . compile ( 'exact#SPACE#text' ) ) ) #NEWLINE#
sorted ( li , key = lambda x : x [ 1 ] ) #NEWLINE#
[ myfunc ( a , b ) for a , b in zip ( idata , idata ) ] #NEWLINE#
sum ( data [ x : : size ] for x in range ( size ) ) / size #NEWLINE#
root . overrideredirect ( True ) #NEWLINE#
sys . path . insert ( 0 , 'pychess.zip' ) #NEWLINE#
[ np . max ( arr ) for arr in np . split ( v , np . where ( mask ) [ 0 ] + 1 ) ] #NEWLINE#
r = client . post ( URL , data = login_data , headers = dict ( Referer = URL ) ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#{0})' . format ( y ) ) #NEWLINE#
setattr ( self , name , value ) #NEWLINE#
f . write ( 'Hello#SPACE#world' ) #NEWLINE#
print ( top [ 0 ] [ 1 ] [ 2 ] ) #NEWLINE#
[ ( char . upper ( ) if char != 'B' else char . lower ( ) ) for char in 'aBcDeF' ] #NEWLINE#
( 'Aelian#SPACE#Thilakeratne' , 'aelian_thi.html' ) , #NEWLINE#
( 'Ahamed#SPACE#Mohideen' , 'ahamed.html' ) , #NEWLINE#
bool ( re . match ( 'he' , 'Hello' , re . I ) ) #NEWLINE#
random . seed ( 1 ) #NEWLINE#
url ( '^tasks/attachments/$' , 'www.views.tasks' , name = 'task-attachments' ) , #NEWLINE#
np . histogramdd ( data , bins = ( 2 , 2 , 2 ) ) [ 0 ] #NEWLINE#
numpy . count_nonzero ( ( 25 < a ) & ( a < 100 ) ) #NEWLINE#
referer = self . request . headers . get ( 'Referer' ) #NEWLINE#
self . setWindowTitle ( 'Equation#SPACE#Editor' ) #NEWLINE#
"""http://192.168.1.61:8080/api/call""" #NEWLINE#
a += numpy . histogram ( b , numpy . arange ( len ( a ) + 1 ) ) [ 0 ] #NEWLINE#
surface = pygame . Surface ( ( 100 , 100 ) ) #NEWLINE#
sorted ( arr [ ind ] ) #NEWLINE#
socks . setdefaultproxy ( socks . PROXY_TYPE_SOCKS5 , 'socks.proxy.lan' , 8080 , True ) #NEWLINE#
array ( [ [ 0.0 , 3.0 ] , [ 0.1 , 1.0 ] ] ) #NEWLINE#
response = view ( request ) #NEWLINE#
s = 'foo#SPACE#bar#SPACE#foo#SPACE#bar#SPACE#foo#SPACE#bar' #NEWLINE# re . sub ( '\\b(.+)(\\s+\\1\\b)+' , '\\1' , s ) #NEWLINE#
a [ np . isfinite ( a ) ] #NEWLINE#
ax . xaxis . set_major_locator ( MultipleLocator ( 20 ) ) #NEWLINE#
print ( re . findall ( '^.*\\.$' , data , re . MULTILINE ) ) #NEWLINE#
np . eye ( d . shape [ 1 ] ) * d [ : , : , ( np . newaxis ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
super ( models . Model , self ) . __init__ ( self , * args , ** kwargs ) #NEWLINE#
plt . show ( ) #NEWLINE#
imageblob = db . BlobProperty ( ) #NEWLINE#
dict ( d1 , ** d2 ) #NEWLINE#
SelectMultipleField ( choices = my_choices , default = [ '1' , '3' ] ) #NEWLINE#
bad_authors = Author . objects . exclude ( name__in = [ 'A1' , 'A2' ] ) #NEWLINE#
[ ( 'key' , 'value' ) , ( 'key2' , 'value2' ) ] #NEWLINE#
clf . fit ( X_train , y_train ) #NEWLINE#
return '' . join ( s ) #NEWLINE#
local_dt = datetime . datetime . fromtimestamp ( timestamp ) #NEWLINE#
[ ( 0 ) for _ in range ( 10000 ) ] #NEWLINE#
print ( '\n' . join ( re . findall ( "'(.*?)'" , pprint . pformat ( something ) ) ) ) #NEWLINE#
string . format_map ( { k : Pluralizer ( v ) for k , v in list ( data . items ( ) ) } ) #NEWLINE#
[ c for c in df ] #NEWLINE#
ax . set_navigate ( False ) #NEWLINE#
data = json . loads ( response . body ) #NEWLINE#
dict ( ( c , string . count ( c ) ) for c in string ) #NEWLINE#
yourDict [ 'data' ] [ 'compound' ] [ 'hcl' ] [ 'xyzfunction' ] #NEWLINE#
sys . path . insert ( 0 , p ) #NEWLINE#
[ 'd:' , 'stuff' , 'morestuff' , 'furtherdown' , 'THEFILE.txt' ] #NEWLINE#
self . stdout . write ( data ) #NEWLINE#
return render_to_response ( 'template.html' , { 'obj_as_json' : json . dumps ( obj ) } ) #NEWLINE#
dropped_copies = [ [ x [ i ] for x in copies [ i ] ] for i in range ( 2 ) ] #NEWLINE#
mydecorator . function_to_be_mocked = mydecorator . my_decorator ( mock_function ) #NEWLINE#
temp [ : : - 1 ] . sort ( ) #NEWLINE#
[ peaks ( [ x , y ] ) for x , y in zip ( xscat , yscat ) ] #NEWLINE#
filename = "ad\nbla'{-+\\)(ç?" #NEWLINE#
Person . objects . filter ( query ) #NEWLINE#
[ 1 , 4 , 7 ] #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
[ ( arr [ i ] , arr [ - i - 1 ] ) for i in range ( len ( arr ) // 2 ) ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
df . plot ( kind = 'bar' , stacked = True ) #NEWLINE#
maltparser . mco = '/path/to/your/model.mco' #NEWLINE#
df . loc [ df . A . isin ( a ) ] #NEWLINE#
list ( _ ) #NEWLINE#
print ( "md[%d]#SPACE#=#SPACE#'%s'" % ( k , w ) ) #NEWLINE#
print ( output [ 0 ] ) #NEWLINE#
[ [ 1 , 5 ] , [ 6 , 11 ] ] #NEWLINE#
imga = zeros ( [ 100 , 100 , 3 ] , dtype = np . uint8 ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
df [ [ 'PromoInterval' , 'Month' ] ] . apply ( lambda x : x [ 1 ] in x [ 0 ] , axis = 1 ) #NEWLINE#
lambda x : x [ 'name' ] . upper ( ) . strip ( ) if isinstance ( x , str ) else x #NEWLINE#
print ( argparse . _sys . argv [ 0 ] ) #NEWLINE#
django . contrib . auth . authenticate ( username = email , password = password ) #NEWLINE#
print ( str ( d ) . replace ( '{' , '' ) . replace ( '}' , '' ) ) #NEWLINE#
pd . DataFrame ( data ) #NEWLINE#
regex2 = re . compile ( '.*(%s).*' % what2look4 ) #NEWLINE#
[ ( x + '_' + y ) for x , y in zip ( la , itertools . cycle ( lb ) ) ] #NEWLINE#
f_first_layer = theano . function ( [ x ] , first_layer ) #NEWLINE#
suite = unittest . TestSuite ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
driver . manage ( ) . timeouts ( ) . pageLoadTimeout ( 15 , TimeUnit . SECONDS ) #NEWLINE#
next ( ( item for item in a if item is not None ) , 'All#SPACE#are#SPACE#Nones' ) #NEWLINE#
matches . extend ( isbn . findall ( line ) ) #NEWLINE#
return [ ( item % 3 ) for item in l ] #NEWLINE#
map ( lambda x : func1 ( * x ) , [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
print ( vars ( db [ 'han' ] ) ) #NEWLINE#
print ( b . get_payload ( ) ) #NEWLINE#
start_urls = [ 'http://www.example.com' ] #NEWLINE#
y [ : , : : 2 ] #NEWLINE#
OrderedDict ( items ) #NEWLINE#
{ 'one' : 1 , 'two' : 2 } #NEWLINE#
datetime . datetime . now ( ) . strftime ( '%m_%d_%y%H_%M_%S' ) #NEWLINE#
beginnings = numpy . where ( diffs == 1 ) #NEWLINE#
myvar = request . form [ 'myvar' ] #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
a = np . array ( a ) #NEWLINE#
application = wsgi . WSGIHandler ( ) #NEWLINE#
a = a . clip ( min = 0 ) #NEWLINE#
Mercedes = car . Car ( 'Mercedes' , 'S#SPACE#Class' , 'Red' ) #NEWLINE#
open ( 'file%03d.txt' % x , 'w' ) . write ( 'some#SPACE#text' ) #NEWLINE#
array ( [ [ [ 1 , 3 ] , [ 0 , 2 ] ] , [ [ 4 , 6 ] , [ 5 , 7 ] ] , [ [ 9 , 11 ] , [ 8 , 10 ] ] ] ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
lambda x , y : set ( [ x ] ) == ( y if b else lambda x , y : x in y ) #NEWLINE#
name = request . cookies [ 'cookie_name' ] #NEWLINE#
main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
Func ( 'a' , 'b' , 'c' , 'd' , 'e' ) #NEWLINE#
del os . environ [ 'PYTHONHOME' ] #NEWLINE#
os . popen ( 'python#SPACE#helloworld.py' ) . read ( ) #NEWLINE#
browser . get ( 'http://wwwhatever.com' ) #NEWLINE#
{ f ( 1 ) : f ( 2 ) , f ( 3 ) : f ( 4 ) } #NEWLINE#
l = Location . objects . get_or_create ( location_name = sq ) [ 0 ] #NEWLINE#
random . randrange ( 100 , 20001 , 100 ) #NEWLINE#
file_ = open ( os . path . join ( PROJECT_ROOT , 'filename' ) ) #NEWLINE#
parser . add_argument ( '--an_opt' , metavar = 'N' , type = int , help = 'An#SPACE#option' ) #NEWLINE#
plt . figure ( figsize = ( 10 , 7 ) ) #NEWLINE#
raise TypeError ( 'Item#SPACE#is#SPACE#not#SPACE#a#SPACE#`DjangoItem`#SPACE#or#SPACE#is#SPACE#misconfigured' ) #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
response = urllib . request . urlopen ( request ) #NEWLINE#
d . xpath ( '//link[@rel="shortcut#SPACE#icon"]/@href' ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#blach#SPACE#WHERE#SPACE#x#SPACE#=#SPACE#?#SPACE#AND#SPACE#y#SPACE#=#SPACE#?' , ( x , y ) ) #NEWLINE#
pos = nx . spring_layout ( G , k = 0.15 , iterations = 20 ) #NEWLINE#
f . close ( ) #NEWLINE#
self . cursor . execute ( 'SELECT#SPACE#weight#SPACE#FROM#SPACE#Equipment#SPACE#WHERE#SPACE#name#SPACE#=#SPACE#?' , ( item , ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
results . append ( ( url , urlopen ( url ) . read ( ) ) ) #NEWLINE#
ax2 . set_xlim ( [ 0 , repeat_length ] ) #NEWLINE#
df . query ( 'time#SPACE#>#SPACE#@start#SPACE#&#SPACE#time#SPACE#<=#SPACE#@end' ) #NEWLINE#
self . setGeometry ( 300 , 300 , 250 , 150 ) #NEWLINE#
{ 'A' : 4 , 'C' : 1 , 'B' : 1 } #NEWLINE#
root . mainloop ( ) #NEWLINE#
template = Template ( 'Hello#SPACE#{{#SPACE#name#SPACE#}}!' ) #NEWLINE#
array = list ( range ( numCase ) ) #NEWLINE#
mydict = { 'key1' : 1 , 'key2' : 2 , 'key3' : 3 } #NEWLINE#
list ( solve ( 4 ) ) #NEWLINE#
return super ( UserView , self ) . retrieve ( request , pk ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
str ( 'hello' , encoding ) #NEWLINE#
np . einsum ( 'ij,ij->i' , X , X ) #NEWLINE#
assert isidentifier ( 'â\x84\x98á§\x9a' ) #NEWLINE#
plt . show ( ) #NEWLINE#
convertfile . write ( line ) #NEWLINE#
url ( '^so/(?P<required>\\d+)/$' , 'myapp.so' , name = 'something' ) , #NEWLINE#
match . start ( 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . put ( a , np . ravel_multi_index ( idx . T , a . shape ) , 5 ) #NEWLINE#
admin . site . site_header = 'My#SPACE#administration' #NEWLINE#
stackless . run ( ) #NEWLINE#
line = re . sub ( "([^'])'t'(.)" , '\\1THIS_IS_TRUE\\2' , line ) #NEWLINE#
A . reshape ( ( - 1 , 3 , 3 ) ) . swapaxes ( - 1 , 1 ) . reshape ( A . shape ) #NEWLINE#
return np . argmax ( np . random . multinomial ( 1 , a , 1 ) ) #NEWLINE#
format ( 1.679 , '.2f' ) #NEWLINE#
""",#SPACE#""" . join ( l + [ 'x' ] * ( 4 - len ( l ) ) ) #NEWLINE#
lin . split ( ) #NEWLINE#
writer = csv . writer ( open ( '/tmp/output.csv' , 'w' ) ) #NEWLINE#
c . execute ( 'select#SPACE#bar,#SPACE#baz#SPACE#as#SPACE#"ts#SPACE#[timestamp]"#SPACE#from#SPACE#foo' ) #NEWLINE#
c . execute ( 'select#SPACE#max(baz)#SPACE#as#SPACE#"ts#SPACE#[timestamp]"#SPACE#from#SPACE#foo' ) #NEWLINE#
print ( dict ( zip ( keys , zip ( * data ) ) ) ) #NEWLINE#
elementwiseApply ( add , [ ( 4 , ) , [ 0 , ( 1 , 3 , [ 1 , 1 , 1 ] ) ] ] , [ 1 , 1 , 1 ] ) #NEWLINE#
df = pd . concat ( list ( data . values ( ) ) , keys = [ 'foo' , 'bar' ] , axis = 1 ) #NEWLINE#
result = [ dishes [ key ] for key in list ( crucial . keys ( ) ) & list ( dishes . keys ( ) ) ] #NEWLINE#
myintfunction ( 'text' ) #NEWLINE#
df [ 'Day' ] = df [ 'Date' ] . dt . day #NEWLINE#
driver . get ( 'http://www.whatismyip.com/' ) #NEWLINE#
h = d . hour + d . minute / 60.0 + d . second / 3600.0 #NEWLINE#
df #NEWLINE#
[ x . upper ( ) for x in [ 'a' , 'b' , 'c' ] ] #NEWLINE#
fpath = os . path . join ( direct , '5_1.txt' ) #NEWLINE#
A . dot ( B ) . dot ( C ) #NEWLINE#
sorted ( points ) #NEWLINE#
ax [ 3 ] . imshow ( np . random . rand ( 30 , 30 ) , interpolation = 'none' , cmap = cmap4 ) #NEWLINE#
nukedir ( '/home/mb/test' ) #NEWLINE#
lines . append ( line . rstrip ( ) . split ( ',' ) ) #NEWLINE#
1 / 2 #NEWLINE#
re . findall ( '(.{,15})\\s(.*$)' , 'A#SPACE#string#SPACE#wth#SPACE#words' ) #NEWLINE#
print ( 'exiting' ) #NEWLINE#
numpy . nanmin ( a ) #NEWLINE#
solution . sort_index ( ) #NEWLINE#
df . isnull ( ) . any ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US.UTF8' ) #NEWLINE#
locale . setlocale ( locale . LC_NUMERIC , 'German' ) #NEWLINE#
plt . ylabel ( 'Number#SPACE#of#SPACE#occurrence' , verticalalignment = 'top' ) #NEWLINE#
df [ 'end_date' ] = df . groupby ( 'company' ) [ 'end_date' ] . apply ( lambda x : x . bfill ( ) ) #NEWLINE#
ax . set_xscale ( 'log' ) #NEWLINE#
data = data . groupby ( data . index ) . sum ( ) #NEWLINE#
subprocess . Popen ( 'python#SPACE#demo.py' ) #NEWLINE#
"""""" . join ( x for x in s if x not in '#SPACE#-.:' ) #NEWLINE#
print ( '%.2f' % some_var ) #NEWLINE#
print ( 'Name#SPACE#is#SPACE#{0}' . format ( name ) ) #NEWLINE#
memory2 . clear ( ) #NEWLINE#
db = mysql . connector . connect ( user = 'root' , database = 'test' ) #NEWLINE#
pic . setPixmap ( QtGui . QPixmap ( os . getcwd ( ) + '/logo.png' ) ) #NEWLINE#
session . visit ( '<url_where_is_login_form>' ) #NEWLINE#
numpy . hstack ( ( x , y ) ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
L [ 0 ] [ 0 ] = 'z' #NEWLINE#
{ x . split ( '=' ) [ 0 ] : int ( x . split ( '=' ) [ 1 ] ) for x in strs . split ( '&' ) } #NEWLINE#
sums = [ sum ( subseq ) for subseq in subseqs ] #NEWLINE#
[ ( i + i ) for i in re . findall ( '([a-z])\\1' , 'abbbbcppq' ) ] #NEWLINE#
name . ljust ( 15 ) [ : 15 ] #NEWLINE#
im . save ( 'alive_parrot.png' ) #NEWLINE#
client_socket . send ( 'received' ) #NEWLINE#
termios . tcsetattr ( sys . stdin , termios . TCSADRAIN , old_attrs ) #NEWLINE#
{ 'a' : 49801 , 'c' : 33548 , 'b' : 16650 } #NEWLINE#
[ datetime . date ( 2010 , 2 , 27 ) , datetime . date ( 2010 , 2 , 28 ) ] #NEWLINE#
print ( '\n' . join ( mylist ) ) #NEWLINE#
f2 . write ( lines [ i + 2 ] ) #NEWLINE#
c . setFillColorRGB ( 255 , 0 , 0 ) #NEWLINE#
print ( os . walk ( DIR_PATH ) . next ( ) [ 2 ] ) #NEWLINE#
sys . stdout . write ( os . read ( stdout . fileno ( ) , 1024 ) ) #NEWLINE#
return df [ ( id . cumsum ( ) == 1 ) [ : - 2 ] ] #NEWLINE#
[ a for a in permutations ( [ 3 , 3 , 4 ] ) ] #NEWLINE#
foo ( map_string_string ( { 'a' : 'b' } ) ) #NEWLINE#
[ line [ i : i + n ] for i in range ( 0 , len ( line ) , n ) ] #NEWLINE#
ax . set_title ( 'Test#SPACE#Axes#SPACE#{}' . format ( i ) ) #NEWLINE#
PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
return Point ( x , y ) #NEWLINE#
ax = fig . add_subplot ( 211 ) #NEWLINE#
queryset = MyModel . objects . all ( ) #NEWLINE#
my_python_object = my_qvariant . toPyObject ( ) #NEWLINE#
db . session . add ( new_provider ) #NEWLINE#
threading . Thread ( target = play_audio ) . start ( ) #NEWLINE#
ax2 . plot ( x , y2 , 'b-' ) #NEWLINE#
Counter ( words ) . most_common ( 10 ) #NEWLINE#
np . where ( np . array ( [ 0 , 1 ] ) ) #NEWLINE#
warnings . simplefilter ( 'ignore' , DeprecationWarning ) #NEWLINE#
[ 100 , 10 , 20 ] #NEWLINE#
cur . execute ( query , args ) #NEWLINE#
ax . plot ( x , y , '+' , color = 'grey' ) #NEWLINE#
df = df . sort ( ) #NEWLINE#
L = [ 'A' , 'B' , 'C' ] #NEWLINE# """#SPACE#""" . join ( L ) #NEWLINE#
max ( l_one + l_two ) #NEWLINE#
a . astype ( int32 ) #NEWLINE#
df . loc [ df [ df [ 'b' ] == 0 ] . index . tolist ( ) [ n ] , 'a' ] = 0 #NEWLINE#
c = c . annotate ( variance = F ( 'metric' ) - F ( 'metric_prior' ) ) #NEWLINE#
set ( [ 'bacon' , 'cake' , 'milk' ] ) #NEWLINE#
gnuplot . stdin . flush ( ) #NEWLINE#
ppf ( q , loc = 0 , scale = 1 ) #NEWLINE#
to_file . write ( replacement_line ) #NEWLINE#
ax . yaxis . set_major_locator ( MultipleLocator ( 0.5 ) ) #NEWLINE#
pylab . show ( ) #NEWLINE#
content = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
hatch_path_stroke . width ( 1.0 ) #NEWLINE#
next ( ( x for x in test_list if x . value == value ) , None ) #NEWLINE#
f . from_file ( 'testdata/test.txt' ) #NEWLINE#
( e . text + '' . join ( map ( etree . tostring , e ) ) ) . strip ( ) #NEWLINE#
ctypes . c_void_p ( offset ) #NEWLINE#
self . appExeCB . setCurrentIndex ( list ( self . items . keys ( ) ) . index ( 'Maya#SPACE#Executable' ) ) #NEWLINE#
__init__ . py #NEWLINE#
XYZ . all ( ) . extra ( select = { 'z' : 'MAX(x/y)' } ) [ 0 ] . z #NEWLINE#
s . apply ( pd . to_datetime , dayfirst = True ) #NEWLINE#
Example ( root ) . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
locals ( ) [ string1 + string2 ] ( ) #NEWLINE#
print ( ) #NEWLINE#
ax . set_ylabel ( 'Count' ) #NEWLINE#
pickle . dump ( favorite_color , open ( 'save.p' , 'wb' ) ) #NEWLINE#
popt , pcov = scipy . optimize . curve_fit ( func , x , ynoisy ) #NEWLINE#
np . mean ( gp ) #NEWLINE#
mynumbers . append ( [ int ( n ) for n in line . strip ( ) . split ( ',' ) ] ) #NEWLINE#
print ( dt . strftime ( '%d/%m/%Y' ) ) #NEWLINE#
'%07.1f' % 2.11 #NEWLINE#
m = re . search ( 'AAA(.+?)ZZZ' , text ) #NEWLINE#
1 , 2 , 3 , 4 #NEWLINE#
df = pd . read_csv ( 'foo.csv' , index_col = 0 ) #NEWLINE#
print ( ( 'Capital#SPACE#Letters:#SPACE#' , sum ( 1 for c in message if c . isupper ( ) ) ) ) #NEWLINE#
df [ df . groupby ( level = 0 ) . transform ( np . size ) . gt ( 1 ) . values ] #NEWLINE#
combo . focus_set ( ) #NEWLINE#
ws . write ( rowi , coli , float_if_possible ( value ) ) #NEWLINE#
results = Stores . objects . filter ( query ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
favorite_color = pickle . load ( open ( 'save.p' , 'rb' ) ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
x [ 'hgS_070000' ] [ 0 , 0 ] . __dict__ #NEWLINE#
np . count_nonzero ( a [ : 2 , : 2 ] ) #NEWLINE#
ax1 . set_xlabel ( 'Original#SPACE#x-axis:#SPACE#$X$' ) #NEWLINE#
df [ cols ] = np . where ( df [ cols ] < 0 , np . nan , df [ cols ] ) #NEWLINE#
ndimage . map_coordinates ( data . astype ( float ) , [ [ 1.2 ] , [ 0.3 ] , [ 1.4 ] ] ) #NEWLINE#
__import__ ( 'herp.derp' ) #NEWLINE#
distancesDF . join ( datesDF . set_index ( 'flights' ) , on = 'names' ) #NEWLINE#
list ( itertools . product ( ( 0 , 1 ) , repeat = 3 ) ) #NEWLINE#
remove_extras_and_sort ( my_list ) #NEWLINE#
t . split ( '#SPACE#' ) #NEWLINE#
for line in open ( filename ) : #NEWLINE# #INDENT# listWords = line . split ( '\t' ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
del di [ 'children' ] [ : ] #NEWLINE#
d [ len ( lst ) ] += 1 #NEWLINE#
za = ( p31 < 200 ) . sum ( ) #NEWLINE#
sets = [ ( myList [ i - 1 ] , j ) for i , j in enumerate ( myList ) if j == 9 ] #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
df . loc [ ( idx [ : , ( 'foo' , 'bar' ) , ( 'can' ) ] ) , : ] #NEWLINE#
game = models . ForeignKey ( Game ) #NEWLINE#
df [ df . columns [ 1 : - 1 ] ] . apply ( lambda x : x . corr ( df [ 'special_col' ] ) ) #NEWLINE#
new_instance . save ( ) #NEWLINE#
zip_longest ( * ( ( iter ( list ( range ( 10 ) ) ) , ) * 3 ) ) #NEWLINE#
sum ( [ 'a' , 'b' ] , 'c' ) #NEWLINE#
return subprocess . check_output ( [ 'git' , 'rev-parse' , '--short' , 'HEAD' ] ) #NEWLINE#
br . set_handle_redirect ( True ) #NEWLINE#
p [ i : j ] = list ( sorted ( p [ i : j ] ) ) #NEWLINE#
print ( html . unescape ( 'Â£682m' ) ) #NEWLINE#
string = string . replace ( '#SPACE##SPACE#' , '#SPACE#' ) #NEWLINE#
tag_name = indexes . CharField ( model_attr = 'tag' ) #NEWLINE#
print ( pd . DataFrame ( { 'Data' : data , 'Windowed#SPACE#mean' : windowed_mean } ) ) #NEWLINE#
[ '1.0.0' , '1.0.2' , '1.0.12' , '1.1.2' , '1.3.3' ] #NEWLINE#
return pd . DataFrame ( intersections , columns = [ 'Start' , 'End' ] + data_cols ) #NEWLINE#
text_classifier . fit ( X_vectorized , y_train ) #NEWLINE#
df . groupby ( 'col1' ) [ 'col2' ] . apply ( lambda x : x . tolist ( ) ) . to_dict ( ) #NEWLINE#
salesdata . Outlet_Size . dropna ( ) . unique ( ) #NEWLINE#
s3_key . _key . set_contents_from_string ( data ) #NEWLINE#
child . expect ( '.*\\$#SPACE#' ) #NEWLINE#
print ( '%1.29f' % ( 11 * 0.1 ) ) #NEWLINE#
l . extend ( map ( int , ( w for w in line . split ( ) if w . isdigit ( ) ) ) ) #NEWLINE#
plt . xticks ( x_tick_location , x_tick_labels , rotation = '25' ) #NEWLINE#
oldest_files_in_tree ( '/home/user' , 20 , ( '.avi' , '.mov' ) ) #NEWLINE#
struct . pack ( '{0}B' . format ( len ( myintegers ) ) , * myintegers ) #NEWLINE#
{ { person . get_gender_display } } #NEWLINE#
words = open ( 'words-by-frequency.txt' ) . read ( ) . split ( ) #NEWLINE#
str ( Decimal ( '10.000' ) ) #NEWLINE#
instance . save ( ) #NEWLINE#
files . extend ( glob ( os . path . join ( dir , pattern ) ) ) #NEWLINE#
[ os . path . splitext ( os . path . basename ( fn ) ) [ 0 ] for fn in a ] #NEWLINE#
ppp_data . rename ( columns = dict ( zip ( columns [ 2 : ] , names ) ) , inplace = True ) #NEWLINE#
lines = random . sample ( f . readlines ( ) , 5 ) #NEWLINE#
f . write ( text ) #NEWLINE#
regex . match ( '(?>a+)ab' , 'aaaaaaaaaab' ) #NEWLINE#
sumlog ( [ 5 , 4 , 1 , 0 , 2 ] ) < sumlog ( [ 5 , 1 , 4 , 0.0001 , 1 ] ) #NEWLINE#
a [ [ [ 1 , 2 , 3 ] ] , [ [ 1 ] , [ 2 ] , [ 3 ] ] ] #NEWLINE#
sys . path . append ( 'C:\\X\\Y' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , a ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE' ) #NEWLINE#
LOGNORM . DIST ( x , Ln ( mean ) , standard_dev , FALSE ) #NEWLINE#
LOGNORM . DIST ( x , Ln ( mean ) , standard_dev , TRUE ) #NEWLINE#
re . match ( 'sample' , line ) #NEWLINE#
"""'{0}'#SPACE#is#SPACE#longer#SPACE#than#SPACE#'{1}'""" . format ( name1 , name2 ) #NEWLINE#
self . attr2 = attr2 #NEWLINE#
bottle . run ( ) #NEWLINE#
def is_prime ( a ) : #NEWLINE# #INDENT# return all ( a % i for i in range ( 2 , a ) ) #NEWLINE#
a . any ( axis = 1 ) #NEWLINE#
raise ValueError ( '(x,#SPACE#y)#SPACE#not#SPACE#within#SPACE#the#SPACE#rectangle' ) #NEWLINE#
pd . date_range ( '2011-01-05' , '2011-01-09' , freq = BDay ( ) ) #NEWLINE#
array ( [ 2 , 2 , 2 , 2 , 1 , 2 , 1 , 2 ] ) #NEWLINE#
tagger . tag ( [ 'select' , 'the' , 'files' ] ) #NEWLINE#
print ( file ( path ) . read ( ) ) #NEWLINE#
nx . draw ( G , pos = pos , with_labels = True ) #NEWLINE#
open_smbus . restype = ctypes . c_void_p #NEWLINE#
plt . suptitle ( 'Figure#SPACE#Title' ) #NEWLINE#
expit ( 0.458 ) #NEWLINE#
http . request ( 'http://example.org' , headers = { 'Connection' : 'close' } ) #NEWLINE#
stdin , stdout , stderr = ssh . exec_command ( 'sudo#SPACE#dmesg' ) #NEWLINE#
a . max ( axis = 0 ) [ 0 ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df . drop ( [ 'streak2' , 'cumsum' ] , axis = 1 , inplace = True ) #NEWLINE#
letter2 , letter1 , letter4 , letter5 #NEWLINE#
cur . close ( ) #NEWLINE#
list ( find_all ( 'spam#SPACE#spam#SPACE#spam#SPACE#spam' , 'spam' ) ) #NEWLINE#
os . path . split ( s ) #NEWLINE#
ax . add_patch ( rect1 ) #NEWLINE#
df [ 'expand' ] = df . apply ( lambda x : ',' . join ( [ x [ 'B' ] ] * x [ 'quantity' ] ) , axis = 1 ) #NEWLINE#
sys . path . append ( path ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return any ( char . isdigit ( ) for char in inputString ) #NEWLINE#
"""#SPACE#""" . join ( format ( n , '02X' ) for n in struct . pack ( '2I' , 12 , 33 ) ) #NEWLINE#
print ( 'sum#SPACE#of#SPACE#2nd#SPACE#items#SPACE#=#SPACE#%d' % sum ( [ float ( v [ 1 ] ) for v in list ( dictData . #NEWLINE# values ( ) ) ] ) ) #NEWLINE#
{ 'geneid' : 'hello' , 'tx_id' : 'NR432' , 'col_name1' : '4.5' , 'col_name2' : 6.7 } #NEWLINE#
t1 = set ( frozenset ( i ) for i in t ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
out_file . write ( line ) #NEWLINE#
print ( xls . sheet_names ( ) ) #NEWLINE#
list ( itertools . product ( * l ) ) #NEWLINE#
list ( filter ( bool , my_str . split ( ';' ) ) ) #NEWLINE#
spp1 . add_argument ( 'bar' ) #NEWLINE#
bool ( np . array ( [ 0 , 0 ] ) ) #NEWLINE#
( 1 , 2 ) [ 0 : 1 ] #NEWLINE#
sys . path . insert ( 0 , 'dir_or_path' ) #NEWLINE#
pickle . loads ( pickle . dumps ( C ( ) ) ) #NEWLINE#
print ( 'hi' ) #NEWLINE#
print ( 'where#SPACE#are#SPACE#the#SPACE#nuclear#SPACE#wessels?' ) #NEWLINE#
print ( 'my#SPACE#message' ) #NEWLINE#
result = mystring . split ( ':' ) [ - 1 ] #NEWLINE#
[ '1' , '2' , '3' ] #NEWLINE#
list ( itertools . chain . from_iterable ( a ) ) #NEWLINE#
array ( [ 0.74513377 , 1.84148744 ] ) #NEWLINE#
df . a . plot ( kind = <STR0> , ax = ax1 , secondary_y = True ) #NEWLINE#
DBSession . close ( ) #NEWLINE#
output_stream . close ( ) #NEWLINE#
sorted_li = sorted ( li , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) ) #NEWLINE#
print ( 'Sorry!' ) #NEWLINE#
print ( '' . join ( c . upper ( ) if i in indices else c for i , c in enumerate ( s ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
cherrypy . engine . exit ( ) #NEWLINE#
"""""" . join ( map ( chr , rgb ) ) . encode ( 'hex' ) #NEWLINE#
tmp_file = os . path . join ( settings . MEDIA_ROOT , path ) #NEWLINE#
self . assertEqual ( value , 'it#SPACE#is#SPACE#a#SPACE#test!' ) #NEWLINE#
print ( 'getcwd#SPACE#after:' , os . getcwd ( ) ) #NEWLINE#
shutil . move ( '/tmp/file' , '.' ) #NEWLINE#
df [ 'categories' ] = ( df . groups != df . groups . shift ( ) ) . cumsum ( ) #NEWLINE#
os . execl ( sys . executable , sys . executable , * sys . argv ) #NEWLINE#
print ( ( k , '#SPACE#' , v ) ) #NEWLINE#
queryset . filter ( mycolname__len__gte = 10 ) #NEWLINE#
parse ( '2003-09-251' ) #NEWLINE#
print ( next ( ( x for x in range ( 10 ) if x == 11 ) , None ) ) #NEWLINE#
file_out [ - 1 ] = file_out [ - 1 ] [ : - 1 ] #NEWLINE#
A [ ( 0 , 1 , 2 ) , ( 0 , 1 , 0 ) ] #NEWLINE#
reactor . run ( ) #NEWLINE#
choices = [ df [ 'two' ] , df [ 'one' ] ] #NEWLINE#
list_ . sort ( key = lambda x : float ( x [ 1 ] ) ) #NEWLINE#
list ( chain ( * [ l1 , l2 , l3 ] ) ) #NEWLINE#
[ 0.0 , 0.0 , 0.0 , 0.4 , 0.6 ] #NEWLINE#
print ( match . group ( ) , match . start ( ) , match . end ( ) ) #NEWLINE#
e = Example ( ) #NEWLINE#
ipshell ( ) #NEWLINE#
values [ np . where ( ( coo == [ 1 , 2 ] ) . all ( 1 ) ) ] . mean ( ) #NEWLINE#
diff = List . objects . filter ( datamode = 'A' ) . exclude ( member__id = memberid , #NEWLINE# datamode = 'A' ) #NEWLINE#
list ( adjacent_tuples ( list ( range ( 8 ) ) , 4 ) ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_UP , self . OnLeftUp ) #NEWLINE#
app . run ( ) #NEWLINE#
list = [ i . lstrip ( '0' ) for i in listOfNum ] #NEWLINE#
print ( soup . find ( 'strong' , text = 'some#SPACE#value' ) ) #NEWLINE#
wildcard = 'pictures#SPACE#(*.jpeg,*.png)|*.jpeg;*.png' #NEWLINE#
subprocess . call ( [ 'say' , 'Hello#SPACE#World!#SPACE#(MESSAGE)' ] ) #NEWLINE#
words |= set ( ( '4' , '2' , 'slartibartfast' ) ) #NEWLINE#
base = df . index . get_indexer_for ( df [ df . A == 2 ] . index ) #NEWLINE#
"""#SPACE#""" . join ( [ '' . join ( i . split ( ) ) for i in re . split ( '#SPACE#{2,}' , s ) ] ) #NEWLINE#
regex = '\\b%s\\b' % '\\b|\\b' . join ( states ) #NEWLINE#
self . _tree = ( lambda f : f ( f ) ) ( lambda t : defaultdict ( lambda : t ( t ) ) ) #NEWLINE#
arr3D = np . repeat ( arr [ ... , None ] , 3 , axis = 2 ) #NEWLINE#
window . geometry ( '300x300' ) #NEWLINE#
[ ( 'a' , 3 ) , ( 'b' , 2 ) , ( 'c' , 2 ) ] #NEWLINE#
print ( json . dumps ( data , ensure_ascii = False ) ) #NEWLINE#
print ( _string [ _string . index ( '.' ) + 1 : _string . rindex ( '.' ) + 1 ] ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
oceans = [ [ ] , [ ] , [ ] , [ ] , [ ] ] #NEWLINE#
re . sub ( 'Description:#SPACE#' , '' , text , 1 ) #NEWLINE#
assert [ 1 , 2 , 3 , 4 ] [ : : 2 ] == [ 1 , 3 ] #NEWLINE#
m . fillcontinents ( color = 'gray' , lake_color = 'white' , zorder = 2 ) #NEWLINE#
sock . bind ( ( 'localhost' , port ) ) #NEWLINE#
logging . basicConfig ( level = logging . DEBUG ) #NEWLINE#
( m [ 1 : ] > m [ : - 1 ] ) . sum ( ) + m [ 0 ] #NEWLINE#
my_list . append ( 'F' ) #NEWLINE#
complete = tf . add ( tf . add ( left , middle ) , right , name = 'COMPLETE' ) #NEWLINE#
cords_set . add ( ( x , y ) ) #NEWLINE#
print ( list ( message . keys ( ) ) ) #NEWLINE#
subprocess . Popen ( 'taskkill#SPACE#/F#SPACE#/T#SPACE#/PID#SPACE#%i' % p . pid , shell = True ) #NEWLINE#
print ( '%s' % ( var , ) ) #NEWLINE#
t = dt . time ( 0 , 0 , 0 ) #NEWLINE#
4.186006622559839 , 12.621690438955586 #NEWLINE#
os . makedirs ( os . path . join ( base , 'Fred#SPACE#Jones' ) ) #NEWLINE#
os . makedirs ( os . path . join ( base , 'Ben#SPACE#Jack#SPACE#Martin' ) ) #NEWLINE#
re . findall ( '\\d' , text ) [ : 3 ] #NEWLINE#
name = models . CharField ( max_length = 32 ) #NEWLINE#
'%(fruit)s' % locals ( ) #NEWLINE#
[ 'Chuck#SPACE#Ragan' , 'Rotterdam' , 'Folkadelphia#SPACE#Session' ] #NEWLINE#
df . tail ( 1 ) . index #NEWLINE#
cleaned = content . split ( "'" ) [ 0 ] [ 4 : - 1 ] + ']' #NEWLINE#
df . pivot ( 'day' , 'group' , 'amount' ) . ix [ order ] . plot ( kind = 'bar' ) #NEWLINE#
df . replace ( '-' , None ) #NEWLINE#
{ 'a' : { 'b' : { 'c' : 11 , 'd' : 32 , 'e' : [ { 'f' : 444 } ] } } } #NEWLINE#
curs . execute ( 'Select#SPACE#*#SPACE#FROM#SPACE#people' ) #NEWLINE#
my_function ( ) #NEWLINE#
driver . get ( 'url_to_open' ) #NEWLINE#
syncdict . update ( [ ( key , 0 ) ] ) #NEWLINE#
"""^/\\?code=(?P<code>.*)$""" #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#foo#SPACE#values(?,#SPACE#?)' , ( 23 , datetime . datetime . now ( ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
self . window2 . show ( ) #NEWLINE#
( s + mystring for s in mylist ) #NEWLINE#
return '.' . join ( [ fn . __module__ , fn . __name__ ] ) #NEWLINE#
other_list . remove ( other_list [ index ] ) #NEWLINE#
iso = time . strftime ( '%Y-%m-%dT%H:%M:%SZ' , timetup ) #NEWLINE#
d . get ( 'b' , 'default' ) #NEWLINE#
( a [ n : ] + [ default ] ) [ 0 ] #NEWLINE#
pl . gca ( ) . set_xscale ( 'log' ) #NEWLINE#
maxlen = max ( len ( sublist ) for sublist in a ) #NEWLINE#
x , y = zip ( * lst ) #NEWLINE#
distribution = scipy . stats . gengamma ( 100 , 70 , loc = 50 , scale = 10 ) #NEWLINE#
queue . get ( timeout = 10 ) #NEWLINE#
return super ( MyCustomDateField , self ) . get_prep_value ( self , value ) #NEWLINE#
[ 'bar' , 'quux' ] #NEWLINE#
run ( ) #NEWLINE#
str ( dt ) #NEWLINE#
"""Gaga’s""" #NEWLINE#
ax . set_ylabel ( 'y' ) #NEWLINE#
print ( "There's#SPACE#a#SPACE#newline#SPACE#in#SPACE#variable#SPACE#foo" ) #NEWLINE#
fig . savefig ( 'iconsbelow.png' ) #NEWLINE#
pd . to_datetime ( '2008-02-27' ) #NEWLINE#
[ ( x - 1 ) for x in perm_index [ i ] [ 1 : ] ] #NEWLINE#
np . allclose ( np . einsum ( 'ik,jk->kij' , puy , puy2 ) , zz ) #NEWLINE#
{ foo ( a ) : bar ( a ) for a in ( 1 , 2 , 3 ) } #NEWLINE#
g . set_axis_labels ( 'Gender' , '2013-2014#SPACE#Assessment#SPACE#Score' ) #NEWLINE#
os . listdir ( a . decode ( 'utf8' ) ) #NEWLINE#
s . sendmail ( from_email , emails , msg . as_string ( ) ) #NEWLINE#
"""PROCESS：类型：关爱积分[NOTIFY]#SPACE##SPACE##SPACE#交易号：2012022900000109#SPACE##SPACE##SPACE#订单号：W12022910079166#SPACE##SPACE##SPACE##SPACE#交易金额：0.01元#SPACE##SPACE##SPACE##SPACE#交易状态：true#SPACE#2012-2-29#SPACE#10:13:08""" #NEWLINE#
"""{:>30}""" . format ( 'right#SPACE#aligned' ) #NEWLINE#
self . entry . pack ( ) #NEWLINE#
sub_dict = dict ( [ ( key , round ( a [ key ] - b . get ( key , 0 ) , 1 ) ) for key in a ] ) #NEWLINE#
"""abcde""" . translate ( mpa ) #NEWLINE#
return True #NEWLINE#
Series ( np . random . randn ( 3 ) ) . apply ( lambda x : '%.3f' % x ) #NEWLINE#
[ ( 'a' , 2 ) , ( 'b' , 2 ) , ( 'c' , 2 ) ] #NEWLINE#
sent_detector . tokenize ( your_text ) #NEWLINE#
driver . get ( 'http://www.quora.com/Andrew-Delikat/followers' ) #NEWLINE#
tuples = [ tuple ( x ) for x in subset . values ] #NEWLINE#
return self . function ( * args , ** kwargs ) #NEWLINE#
list_of_groups = zip ( * ( ( iter ( the_list ) , ) * group_size ) ) #NEWLINE#
o = urlparse . urlparse ( self . request . url ) #NEWLINE#
( A [ : , ( None ) ] * B ) . sum ( 2 ) #NEWLINE#
url ( '^([a-z0-9]{5})/$' , open ) #NEWLINE#
[ '#SPACE#' , '65' , '3' ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
[ - 3 , 7 , 10 , 10 ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
a /= a . sum ( axis = 1 ) [ : , ( numpy . newaxis ) ] #NEWLINE#
layout . addWidget ( grview ) #NEWLINE#
A [ 0 : 4 , ( 1 ) ] #NEWLINE#
module . workflow_set . filter ( trigger_roles__in = [ self . role ] , allowed = True ) #NEWLINE#
do_something_with ( wrapper [ 0 ] ) #NEWLINE#
print ( cmd % ( 'foo' , 'boo' , 'bar' ) ) #NEWLINE#
answer = sum ( int ( i ) for i in equation . split ( '+' ) ) #NEWLINE#
return [ ( [ 0 ] * len ( row ) if 0 in row else row ) for row in matrix ] #NEWLINE#
return Column ( String ( 50 ) , ForeignKey ( 'locations.table_name' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
matchingVals = [ x for x in a if x > 2 ] #NEWLINE#
re . compile ( '[a-zA-Z0-9]*' ) #NEWLINE#
re . compile ( '\\w*' ) #NEWLINE#
pd . read_csv ( 'whitespace.csv' , header = None , delim_whitespace = True ) #NEWLINE#
locale . format ( '%.2f' , 100028282.23 , grouping = True ) #NEWLINE#
url ( '^accounts/' , include ( 'allauth.account.urls' ) ) , #NEWLINE#
datetime . time ( 0 ) #NEWLINE#
st = xlwt . easyxf ( 'pattern:#SPACE#pattern#SPACE#solid;' ) #NEWLINE#
mydog = re . compile ( ',#SPACE#(.*)\n' ) #NEWLINE#
r = requests . delete ( URL_delete , params = mydata ) #NEWLINE#
ax . set_zlim3d ( 0 , 1000 ) #NEWLINE#
driver . get ( 'http://stackoverflow.com' ) #NEWLINE#
colorline ( x , y , cmap = 'cubehelix' , linewidth = 1 ) #NEWLINE#
app . register_blueprint ( heysyni ) #NEWLINE#
print ( os . getcwd ( ) ) #NEWLINE#
( labels == 2 ) . astype ( np . float32 ) #NEWLINE#
self . fail ( 'myFunc()#SPACE#raised#SPACE#ExceptionType#SPACE#unexpectedly!' ) #NEWLINE#
plt . subplots_adjust ( right = 0.75 ) #NEWLINE#
return any ( sublst == lst [ i : i + n ] for i in range ( len ( lst ) - n + 1 ) ) #NEWLINE#
out . remove ( x ) #NEWLINE#
winsound . Beep ( Freq , Dur ) #NEWLINE#
print ( sorted ( inputWords , key = lambda word : [ alphabet . index ( c ) for c in word ] ) ) #NEWLINE#
my_array = my_array . reshape ( ( 50 , 50 ) ) . astype ( 'uint8' ) #NEWLINE#
urllib . parse . unquote ( s ) #NEWLINE#
testit ( ) #NEWLINE#
task . cancel ( ) #NEWLINE#
bothlists [ x [ 0 ] ] . append ( x ) #NEWLINE#
request . data #NEWLINE#
dgtsv = lapack . dgtsv_ #NEWLINE#
[ t for t in l if t [ 0 ] . startswith ( 'img' ) ] #NEWLINE#
requests . delete ( url , ** kwargs ) #NEWLINE#
ax . autoscale ( ) #NEWLINE#
ax . set_zlabel ( 'z#SPACE#label' ) #NEWLINE#
print ( '{:<18}#SPACE#{:>6}' . format ( name + ':' , val_str ) ) #NEWLINE#
new_list = map ( operator . itemgetter ( 1 ) , old_list ) #NEWLINE#
return { 'user' : user } #NEWLINE#
glVertex2i ( 10 , 10 ) #NEWLINE#
zip ( * lis ) #NEWLINE#
df = pd . DataFrame . from_records ( [ { 'A' : a , 'B' : b } ] , index = 'A' ) #NEWLINE#
return render_template ( 'create_user.html' , form = form ) #NEWLINE#
df . ix [ : , ( ( df == 0 ) . all ( ) ) ] #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'settings' ) #NEWLINE#
Command ( 'speed_analysis.tex' , 'code/speed.py' , 'python#SPACE#$SOURCE#SPACE#-o#SPACE#$TARGET' ) #NEWLINE#
self . assertEqual ( set ( [ 'a' , 'a' , 'b' , 'a' ] ) , set ( [ 'a' , 'b' ] ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
with open ( 'myfile.txt' , 'r' ) as f : #NEWLINE# #INDENT# first_line = f . readline ( ) #NEWLINE#
req . headers [ 'content-type' ] #NEWLINE#
print ( 'https://{0}/result' . format ( ip . rstrip ( ) ) ) #NEWLINE#
subprocess . call ( [ 'C:\\R\\R.exe' , 'CMD' , 'BATCH' , 'C:\\Files\\MyRcode.R' ] ) #NEWLINE#
print ( np . where ( ~ mask ) [ 0 ] ) #NEWLINE#
print ( '{:10s}#SPACE#{:3d}#SPACE#Â\xa0{:7.2f}' . format ( 'yyyy' , 3 , 1.0 ) ) #NEWLINE#
super ( TypeAwareManager , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ax . legend ( ) #NEWLINE#
plt . imshow ( im2 , cmap = plt . cm . gray ) #NEWLINE#
print ( '{0[0]:<15}{0[1]:<15}{0[2]:<5}{0[3]:<15}{0[4]:>15}' . format ( data ) ) #NEWLINE#
p = Process ( target = fn ) #NEWLINE#
grid [ 2 ] . set_title ( 'Recentered#SPACE#cmap#SPACE#with#SPACE#function' , fontsize = 8 ) #NEWLINE#
application = webapp2 . WSGIApplication ( [ ( '/api/.*' , ReSTify . ReST ) ] , debug = True ) #NEWLINE#
print ( map ( lambda x : x . strip ( "'#SPACE#" ) , s . split ( '|' ) ) [ 1 : - 1 ] ) #NEWLINE#
ffs ( 136 ) #NEWLINE#
super ( Dad , self ) . __init__ ( ) #NEWLINE#
ax . set_yticklabels ( [ 'Paw#SPACE#1' , 'Paw#SPACE#2' , 'Paw#SPACE#3' , 'Paw#SPACE#4' ] ) #NEWLINE#
print ( '' . join ( r ) ) #NEWLINE#
popen . wait ( ) #NEWLINE#
f . write ( 'Or#SPACE#that#SPACE#the#SPACE#everlasting#SPACE#had#SPACE#not#SPACE#fixed#SPACE#his#SPACE#canon\n' ) #NEWLINE#
self . periodiccall ( ) #NEWLINE#
pattern = '(?:DT\\s+)+(?:(RB\\s+)+|(JJ\\s+)+)(?:NN\\s+)*NN$' #NEWLINE#
plt . ylim ( [ - 400 , 400 ] ) #NEWLINE#
return [ Teaser ( Context ( result ) ) for result in self . post . results ] #NEWLINE#
print ( pq ( link ) . attr [ 'href' ] ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
app . secret_key = 'why#SPACE#would#SPACE#I#SPACE#tell#SPACE#you#SPACE#my#SPACE#secret#SPACE#key?' #NEWLINE#
print ( '{}#SPACE#total#SPACE#comparisons#SPACE#done' . format ( len ( survivors ) + precount ) ) #NEWLINE#
{ 'age' : [ 15 , 30 , 10 ] , 'name' : [ 'andy' , 'janice' , 'peter' ] } #NEWLINE#
assert my_module . get_response ( 'blah' , 'blah' ) . content == 'OK' #NEWLINE#
[ e for e in bad if e in '\n' . join ( my_list ) ] #NEWLINE#
mp . Process ( target = run , args = ( _QUEUE , cb , func , args , kwargs ) ) . start ( ) #NEWLINE#
itertools . accumulate ( [ 1 , 3 , 5 ] ) #NEWLINE#
print ( ( dt . datetime . combine ( dt . date ( 1 , 1 , 1 ) , t ) + delta ) . time ( ) ) #NEWLINE#
print ( df2 [ df2 [ 'count' ] != 0 ] [ 'count' ] ) #NEWLINE#
second_smallest ( [ 1 , 2 , [ 0 , 3 , [ - 1 , - 2 ] ] ] ) #NEWLINE#
print ( keys . isdisjoint ( { 1 , 2 , 3 } ) ) #NEWLINE#
return len ( [ _f for _f in a_list if _f ] ) == len ( a_list ) #NEWLINE#
a [ : , 1 : ] #NEWLINE#
<STR0> . method ( ) #NEWLINE#
return '' . join ( html_table ( lol ) ) #NEWLINE#
print ( '%s' % x ) #NEWLINE#
curs . execute ( 'select#SPACE#first_name#SPACE#from#SPACE#people' ) #NEWLINE#
curs . execute ( 'select#SPACE#*#SPACE#from#SPACE#people' ) #NEWLINE#
plt . show ( block = True ) #NEWLINE#
parser . add_argument ( '--foo' , '-f' , type = str ) #NEWLINE#
df [ 'NumTags' ] = df . Tags . apply ( lambda x : len ( x ) ) #NEWLINE#
s . multiply ( 1 / np . sqrt ( s . multiply ( s ) . sum ( 1 ) ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
os . path . exists ( my_path ) #NEWLINE#
ax . set_ylim ( [ - 2 , 2 ] ) #NEWLINE#
df [ df . Group == 'C' ] . Age . hist ( ) #NEWLINE#
return 'Hello,#SPACE#world' #NEWLINE#
{ 'pos' : 3 , 'string' : 'foo' } #NEWLINE#
mp . Process . __init__ ( self ) #NEWLINE#
sys . stdout . write ( '\r' ) #NEWLINE#
m [ : , ( [ 0 ] ) ] . shape #NEWLINE#
"""aaa#SPACE#bbb#SPACE#ccc#SPACE#ddd#SPACE#eee#SPACE#fff""" . partition ( 'ddd' ) #NEWLINE#
filepath = os . path . abspath ( filepath ) #NEWLINE#
self . button . clicked . connect ( self . testMethod ) #NEWLINE#
print ( len ( '정정' . encode ( 'UTF-16-LE' ) ) ) #NEWLINE#
print ( len ( '정정' . encode ( 'UTF-16' ) ) ) #NEWLINE#
print ( len ( '정정' . encode ( 'UTF-32-LE' ) ) ) #NEWLINE#
print ( json . loads ( '"\\u0123"' ) ) #NEWLINE#
topdirs = [ os . path . split ( x ) [ 0 ] for x in dirs ] #NEWLINE#
print ( ( m . group ( 1 ) , m . group ( 2 ) ) ) #NEWLINE#
a . reshape ( 2 , 2 , 2 , 2 ) . sum ( axis = 1 ) . sum ( axis = 2 ) #NEWLINE#
package_path = os . path . dirname ( __file__ ) #NEWLINE#
check_call ( [ './driver.exe' , 'bondville.dat' ] ) #NEWLINE#
ax . set_xlabel ( 'X#SPACE#LABEL' ) #NEWLINE# ax . xaxis . set_label_position ( 'top' ) #NEWLINE#
x . reshape ( 4 , 2 , 2 ) #NEWLINE#
{ 'X-Attribute' : 'A' } #NEWLINE#
sendmail ( 'a@a.com' , [ 'a@b.com' , 'b@b.com' , 'c@b.com' ] , 'Howdy' ) #NEWLINE#
- '7722:22' #NEWLINE#
df . select_dtypes ( exclude = [ 'string' , 'object' ] ) . apply ( your_other_function ) #NEWLINE#
raise ValueError #NEWLINE#
word_tokenize ( "I#SPACE#won't#SPACE#fix#SPACE#your#SPACE#computer" ) #NEWLINE#
sorted ( s1 , key = prefixed_digits ( ) ) #NEWLINE#
print ( 'Test' ) #NEWLINE#
plt . show ( ) #NEWLINE#
return numpy . mean ( arr [ : end ] . reshape ( - 1 , n ) , 1 ) #NEWLINE#
'%d#SPACE#' * 3 % ( 1 , 2 , 3 ) #NEWLINE#
[ ( 'foofo' , '21' ) , ( 'bar' , '432' ) , ( 'foobar' , '12345' ) ] #NEWLINE#
df . index = pd . DatetimeIndex ( df . index ) #NEWLINE#
list ( range ( 1 , 6 ) ) + list ( range ( 15 , 20 ) ) #NEWLINE#
df . index . level_map #NEWLINE#
dic [ 'a' ] = val #NEWLINE#
root . title ( 'Message' ) #NEWLINE#
ax . set_zlabel ( 'Z#SPACE#Label' ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
pd . rolling_apply ( df , 12 , lambda x : np . prod ( 1 + x ) - 1 ) #NEWLINE#
assert k [ 'Z' ] [ 0 ] [ 'A' ] == 'value3' #NEWLINE#
temp . append ( sub_list [ 0 ] ) #NEWLINE#
rows = table . tbody . find_all ( 'tr' ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
admin . site . register ( Employee , EmployeeAdmin ) #NEWLINE#
print ( 'Success!' ) #NEWLINE#
ax . imshow ( masked_data , cmap = cm . jet , interpolation = 'none' ) #NEWLINE#
i += 1 #NEWLINE#
print ( np . sqrt ( np . sum ( ( p [ : , ( np . newaxis ) ] - p [ ( np . newaxis ) , : ] ) ** 2 , axis = - 1 ) ) ) #NEWLINE#
plt . axvline ( x = 0.33088437 ) #NEWLINE#
y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
set ( x for x , count in common if count == common [ 0 ] [ 1 ] ) #NEWLINE#
cat_sorted = zip ( * sorted ( zip ( * cat ) , key = itemgetter ( 2 ) ) ) #NEWLINE#
print ( my_list ) #NEWLINE#
signal . signal ( signal . SIGALRM , handler ) #NEWLINE#
plt . show ( ) #NEWLINE#
testFunc . __self__ . __class__ #NEWLINE#
map ( None , '1111' ) #NEWLINE#
return pd . DataFrame ( MM , dtype = int , columns = Col ) #NEWLINE#
conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
db . session . add ( region2 ) #NEWLINE#
search = re . compile ( '(T|A)' ) #NEWLINE#
loaded = np . load ( 'file.npz' ) #NEWLINE#
len ( [ y for y in x if y > 2 ] ) #NEWLINE#
print ( 'utf-8#SPACE##SPACE#w/#SPACE#BOM#SPACE#decoded#SPACE#with#SPACE#utf-8-sig#SPACE#%r' % e8s . decode ( 'utf-8-sig' ) ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
print_matrix ( spiral ( 5 , 5 ) ) #NEWLINE#
map ( list , list ( result . items ( ) ) ) #NEWLINE#
data [ '2013-08-17' ] . boxplot ( by = 'SPECIES' ) #NEWLINE#
"""""" . join ( random . choice ( ( str . upper , str . lower ) ) ( x ) for x in s ) #NEWLINE#
mylist = [ ( w [ 0 ] + w [ 1 ] ) for w in words ] #NEWLINE#
df1 [ df1 . Col1 . str . split ( '-' ) . apply ( toolz . isdistinct ) ] #NEWLINE#
L1 = [ 'cat' , 'dog' , 'fish' , 'rabbit' , 'horse' , 'bird' , 'frog' , 'mouse' ] #NEWLINE#
label = re . sub ( '((?<=[a-z])[A-Z]|(?<!\\A)[A-Z](?=[a-z]))' , '#SPACE#\\1' , label ) #NEWLINE#
cursor . execute ( 'CREATE#SPACE#TABLE#SPACE#foo#SPACE#(bar#SPACE#INTEGER#SPACE#UNIQUE,#SPACE#baz#SPACE#INTEGER)' ) #NEWLINE#
data = 'important#SPACE#data' #NEWLINE#
img . fill ( 255 ) #NEWLINE#
super ( MainWindow , self ) . __init__ ( ) #NEWLINE#
list ( ( Counter ( [ 2 , 2 , 1 , 1 ] ) & Counter ( [ 1 , 3 , 3 , 1 ] ) ) . elements ( ) ) #NEWLINE#
print ( os . environ [ 'test1' ] ) #NEWLINE#
db . delete ( index = 'reestr' , doc_type = 'some_type' , id = r [ '_id' ] ) #NEWLINE#
random . randrange ( 5 , 10 ) #NEWLINE#
conn . request ( 'GET' , '/' ) #NEWLINE#
clr . AddReference ( 'assembly#SPACE#name#SPACE#here' ) #NEWLINE#
df [ 1 ] . fillna ( 0 , inplace = True ) #NEWLINE#
__mycode = True #NEWLINE#
b . unpack ( '<H,#SPACE#uintle:48' ) #NEWLINE#
run ( host = 'mindwriting.org' , port = 8079 , debug = True ) #NEWLINE#
plt . savefig ( 'my_fig.png' , dpi = my_dpi ) #NEWLINE#
max ( iter ( stats . items ( ) ) , key = operator . itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
pickle . dump ( cj , open ( './cookies.txt' , 'wb' ) ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
now . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
return render_template ( 'index.html' , obj = 'object' , data = 'a223jsd' ) #NEWLINE#
print ( line ) #NEWLINE#
some_module . py #NEWLINE#
list ( obj . children ) #NEWLINE#
file . close ( ) #NEWLINE#
print ( map ( str , young_fellas ) ) #NEWLINE#
do_something ( ) #NEWLINE#
return sorted ( list ( the_dict . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) [ : 10 ] #NEWLINE#
print ( "I'm#SPACE#sender" ) #NEWLINE#
{ { ( value | floatformat ) : 2 | intcomma } } #NEWLINE#
a = [ two for one , two in zip ( a , a [ 1 : ] ) if two [ 1 ] > one [ 1 ] ] #NEWLINE#
ax . set_ylim ( [ 0 , 3.5 ] ) #NEWLINE#
book . save ( 'simple.xls' ) #NEWLINE#
parser = argparse . ArgumentParser ( usage = 'Any#SPACE#text#SPACE#you#SPACE#want\n' ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
regex . sub ( 'url(#[0-9]+)?' , 'new_url\\1' , test2 ) #NEWLINE#
open ( 'attachment.png' , 'wb' ) . write ( attachment . get_payload ( decode = True ) ) #NEWLINE#
f . close ( ) #NEWLINE#
df = df [ dupemask ] #NEWLINE#
check_output ( cmd , shell = True , env = env ) #NEWLINE#
df [ 'split' ] = np . random . randint ( 0 , 2 , size = len ( df ) ) #NEWLINE#
list2 = [ x for x in list1 if x . find ( 'CONTENT_ITEM_ID#SPACE#' ) != - 1 ] #NEWLINE#
foobar = imp . load_source ( 'foobar' , '/path/to/foobar' ) #NEWLINE#
cursor = db . cursor ( ) #NEWLINE#
plt . xlim ( x . min ( ) , x . max ( ) ) #NEWLINE#
os . remove ( temp_file ) #NEWLINE#
ax . set_ylabel ( '$y$#SPACE#/mm' ) #NEWLINE#
MEDIA_ROOT = os . path . join ( os . path . dirname ( PROJECT_ROOT ) , 'media_cdn' ) #NEWLINE#
[ ( 'c' , 2 ) , ( 'b' , 2 ) , ( 'a' , 3 ) ] #NEWLINE#
app . MainLoop ( ) #NEWLINE#
pd . concat ( [ df , df1 ] , axis = 0 , ignore_index = True ) #NEWLINE#
ax . grid ( ) #NEWLINE#
pd . melt ( df , id_vars = [ 'Date' ] , value_name = 'Adj#SPACE#Close' , var_name = 'Minor' ) #NEWLINE#
pprint ( sorted ( docs , key = lambda item : weights . get ( item [ 'category' ] ) ) ) #NEWLINE#
parser . add_argument ( '-a' , '--aggregation' , help = 'aggregation' , required = False ) #NEWLINE#
[ '' . join ( elem ) for elem in itertools . permutations ( A + B , 3 ) ] #NEWLINE#
return tuple . __new__ ( cls , ( x , y ) ) #NEWLINE#
sessions . append ( sessionmaker ( bind = engine ) ( ) ) #NEWLINE#
f . geturl ( ) #NEWLINE#
mpl . rcParams [ 'lines.linewidth' ] = 2 #NEWLINE#
df . columns . values [ 2 ] = 'new_name' #NEWLINE#
v , b , n = j [ 4 : 7 ] [ : : - 1 ] #NEWLINE#
df = df . groupby ( [ 'IDnumber' , 'Subid' , 'Subsubid' , 'Date' ] ) #NEWLINE#
( a [ : , ( None ) , : ] * b [ : , : , ( None ) ] ) . T #NEWLINE#
np . array ( [ [ x ] for x in a1 ] ) #NEWLINE#
pd . read_csv ( StringIO ( s ) , sep = ',' , comment = '#' , skiprows = 1 ) #NEWLINE#
log . start ( ) #NEWLINE#
print ( test2 ( ) ) #NEWLINE#
bytearray ( '\x00\x00\x00\x00\x00\x00\x00\x00Ñ\x07\x00\x00\x00\x00\x00\x00' ) #NEWLINE#
form . save ( ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.1 ) #NEWLINE#
re . escape ( '192.168.1.1' ) #NEWLINE#
df #NEWLINE#
app . run ( debug = True ) #NEWLINE#
ftpc . retrbinary ( 'RETR#SPACE#%s' % ( somefile , ) , callback ) #NEWLINE#
rnd = np . random . rand ( n ) #NEWLINE#
sometuple + ( someitem , ) #NEWLINE#
sns . heatmap ( data , cmap = ListedColormap ( [ 'green' , 'yellow' , 'red' ] ) , annot = True ) #NEWLINE#
x [ x . columns [ 0 ] ] #NEWLINE#
driver . quit ( ) #NEWLINE#
list ( itertools . accumulate ( [ 1 , 2 , 3 , 4 , 5 ] ) ) #NEWLINE#
data . groupby ( [ 'A' , 'B' ] ) . agg ( [ pd . Series . mean , pd . Series . std , pd . Series . count ] ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
knapp . pack ( pady = 10 ) #NEWLINE#
views / __init__ . py #NEWLINE#
df . rdd . map ( extract ) . toDF ( [ 'word' ] ) #NEWLINE#
return super ( YourView , self ) . dispatch ( request , * args , ** kwargs ) #NEWLINE#
data = df [ [ 'feature1' , 'feature2' ] ] . values #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
QMainWindow . __init__ ( self , parent ) #NEWLINE#
func ( * args ) #NEWLINE#
int ( n ** 0.5 ) + 1 #NEWLINE#
return HttpResponseRedirect ( '/' ) #NEWLINE#
main ( ) #NEWLINE#
nx . dijkstra_path_length ( g , 'b' , 'b' , 'distance' ) #NEWLINE#
plt . legend ( loc = 'best' ) #NEWLINE#
self . top_right_label . grid ( row = 0 , column = 0 , sticky = 'e' ) #NEWLINE#
wand . save ( filename = 'animated.gif' ) #NEWLINE#
app . config [ 'BABEL_DEFAULT_LOCALE' ] = 'pt_BR' #NEWLINE#
xml = document . documentElement . toxml ( 'utf-8' ) #NEWLINE#
model . add ( Activation ( 'softmax' ) ) #NEWLINE#
list ( chain . from_iterable ( ( i , i * i ) for i in range ( 1 , 10 ) ) ) #NEWLINE#
bar = foo ( bar ) #NEWLINE#
L += [ 4 ] * 10 #NEWLINE#
df . describe ( ) . loc [ [ 'count' , 'max' ] ] #NEWLINE#
ufunc . reduceat ( mat . data , mat . indptr [ : - 1 ] ) #NEWLINE#
pygame . init ( ) #NEWLINE#
response . set_data ( json . dumps ( d ) ) #NEWLINE#
ftp . cwd ( '/Dir' ) #NEWLINE#
x = np . array ( [ '1.1' , '2.2' , '3.3' ] , dtype = '|S4' ) #NEWLINE#
import numpy as np #NEWLINE#
"""=#SPACE#cap_net_raw+p""" #NEWLINE#
reversed_df = df . iloc [ : : - 1 ] #NEWLINE#
df [ col_values ] = df [ col_values ] . astype ( float ) #NEWLINE#
print ( 'It#SPACE#may#SPACE#have#SPACE#been#SPACE#an#SPACE#ascii-encoded#SPACE#unicode#SPACE#string' ) #NEWLINE#
y = [ ( 'aaa' + str ( i ) ) for i in np . random . randint ( 0 , 10000 , size = 5000000 ) ] #NEWLINE#
run_wsgi_app ( applications [ os . environ [ 'HTTP_HOST' ] ] ) #NEWLINE#
f . write ( text ) #NEWLINE#
window2 . title ( 'Sighnup' ) #NEWLINE#
df . to_json ( ) #NEWLINE#
"""str#SPACE#is#SPACE#now#SPACE#'agctgcta""" #NEWLINE#
print ( time . mktime ( new . timetuple ( ) ) ) #NEWLINE#
book . authors . filter ( name = 'Georfe' ) . delete ( ) #NEWLINE#
session . add ( obj ) #NEWLINE#
[ 0 , 1 , 3 , 6 , 10 , 15 ] #NEWLINE#
yourList = [ [ 'a' , 'b' ] , [ 'c' , 'd' , 'e' ] , [ 'f' ] ] #NEWLINE#
df_new = df_sum . combine_first ( df ) #NEWLINE#
print ( '{:<30}{:<100}' . format ( key , value ) ) #NEWLINE#
def get_fun ( fn ) : #NEWLINE# #INDENT# return '.' . join ( [ fn . __module__ , fn . __name__ ] ) #NEWLINE#
log ( 'Processing#SPACE#account...' ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 0.3 ) #NEWLINE#
termios . tcsetattr ( sys . stdin , termios . TCSADRAIN , new_settings ) #NEWLINE#
goal = [ '<li>{0}</li>' . format ( x ) for x in l ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
self . entry . focus ( ) #NEWLINE#
k . reshape ( k . shape + ( 1 , ) ) #NEWLINE#
s . encode ( 'utf8' , 'ignore' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
return collection . find ( { 'title' : { '$in' : titles } } ) #NEWLINE#
assert not is_subseq ( 'ais' , 'indonesia' ) #NEWLINE#
assert not is_subseq ( 'mali' , 'banana' ) #NEWLINE#
return a , b , c #NEWLINE#
def __init__ ( self , a = None , b = None , c = None ) : #NEWLINE# #INDENT# self . a = a #NEWLINE#
y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
result = first_date + np . arange ( 24 ) * datetime . timedelta ( hours = 1 ) #NEWLINE#
print ( str2seconds ( '255:25:60' ) ) #NEWLINE#
dictionary [ next ( iter ( dictionary ) ) ] #NEWLINE#
setattr ( foo , '__doc__' , 'My#SPACE#Doc#SPACE#string' ) #NEWLINE#
[ 'cccc' , 'cccc' , 'aaa' , 'ss' ] #NEWLINE#
printme ( 'CC' ) #NEWLINE#
super ( MyWidget , self ) . __init__ ( parent ) #NEWLINE#
powd = DataFrame ( data2 ) #NEWLINE#
self . assertEqual ( resp . content [ 'twitter_handle' ] , '@twitter' ) #NEWLINE#
ax . set_ylabel ( 'y#SPACE#label' ) #NEWLINE#
page_ids = request . form . getlist ( 'do_delete' ) #NEWLINE#
del c [ : 2 ] #NEWLINE#
input ( ) #NEWLINE#
print ( int ( date [ : 4 ] ) + 1 ) #NEWLINE#
foo ( ) #NEWLINE#
__main__ ( ) #NEWLINE#
values = struct . unpack ( '!7h' , data ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self ) #NEWLINE#
print ( a . encode ( 'utf8' ) ) #NEWLINE#
send_from_directory ( '/some/path/to/static' , 'my_image_file.jpg' ) #NEWLINE#
df . mean ( ) #NEWLINE#
logging . info ( 'outer' ) #NEWLINE#
logging . info ( 'get#SPACE#ready#SPACE#for#SPACE#an#SPACE#error...' ) #NEWLINE#
r = requests . post ( 'http://httpbin.org/post' , json = { 'key' : 'value' } ) #NEWLINE#
dt . strftime ( '%Y-%m-%dT%H:%M:%S.%f' ) #NEWLINE#
print ( sys . path ) #NEWLINE#
print ( '#SPACE#' * line_width + 'RIGHT' * 3 ) #NEWLINE#
t = threading . Thread ( target = task , args = ( data , ) ) #NEWLINE#
lineEdits = form . findChildren ( QtGui . QLineEdit ) #NEWLINE#
m . imshow ( im , interpolation = 'lanczos' , origin = 'upper' ) #NEWLINE#
pd . DataFrame . from_dict ( d ) #NEWLINE#
yx . sort ( ) #NEWLINE#
color = ebar [ 0 ] . get_color ( ) #NEWLINE#
window . show_all ( ) #NEWLINE#
f = open ( 'foo.file' , 'wb' ) #NEWLINE#
f . close ( ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
'MIN' , 'NJN' , 'NOH' , 'NOK' , 'NOP' , 'NYK' , 'OKC' , 'ORL' , 'PHI' , 'PHO' #NEWLINE#
browser . quit ( ) #NEWLINE#
ax . set_ylabel ( 'abc' , rotation = 0 , fontsize = 20 , labelpad = 20 ) #NEWLINE#
filtered_list = [ x for x in input_list if x % 2 == 0 ] #NEWLINE#
after , outer_list = [ 'we' , 'like' , 'proper' , 'English' ] #NEWLINE#
axes [ 0 ] . axis ( 'image' ) #NEWLINE#
newdf . head ( ) #NEWLINE#
pyplot . text ( x , y , string , fontdict = None , withdash = False , ** kwargs ) #NEWLINE#
d = datetime . date . today ( ) #NEWLINE#
d = dict ( ( t . key , t ) for t in [ t0 , t1 , t2 ] ) #NEWLINE#
print ( list ( tb_notes . select ( ) . execute ( ) ) ) #NEWLINE#
[ ( 'raz' , 3 ) , ( 'dwa' , 2 ) , ( 'trzy' , 2 ) , ( 'cztery' , 1 ) ] #NEWLINE#
checkForNonUnicode ( open ( '/whoah/softlink/myObscureUtilityFile.py' ) . read ( ) ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
parser . add_argument ( '--file1' ) #NEWLINE#
[ 'H' , 'C' , '2' , 'H' , '3' , 'O' , '2' , 'Na' ] #NEWLINE#
f . __doc__ #NEWLINE#
p . parse_args ( '--sizes#SPACE#1,3#SPACE#4,6' . split ( ) ) #NEWLINE#
result . append ( ( [ key ] * len ( values ) , values ) ) #NEWLINE#
tostring ( element ) . replace ( '</%s>' % element . tag , '' , - 1 ) #NEWLINE#
plt . axis ( [ 0 , 10 , 0 , 1 ] ) #NEWLINE#
with open ( 'text.txt' ) as myfile : #NEWLINE# #INDENT# count = sum ( 1 for line in myfile if line . rstrip ( '\n' ) ) #NEWLINE#
pickle . load ( f ) #NEWLINE#
p . communicate ( ) #NEWLINE#
all_potion_names = list ( all_potions . keys ( ) ) #NEWLINE#
button . setText ( 'Press#SPACE#Me' ) #NEWLINE#
b . view ( [ ( 'x' , float ) , ( 'y' , float ) ] ) #NEWLINE#
df [ 'a' ] . value_counts ( ) #NEWLINE#
{ 'p' : { '@id' : 1 , '$' : 'text' } } #NEWLINE#
df1 . join ( df2 , how = 'outer' ) #NEWLINE#
re . sub ( '\\|(?!\\|)' , '' , s ) #NEWLINE#
wkt = dane [ 0 ] [ 0 ] . read ( ) #NEWLINE#
print ( '#SPACE#' . join ( L ) ) #NEWLINE#
df [ 'F' ] = df [ 'Fint' ] . map ( str ) + '#SPACE#+/-#SPACE#' + df [ 'Fint#SPACE#Err' ] . map ( to_4digit_str ) #NEWLINE#
sys . path . append ( os . path . dirname ( __file__ ) ) #NEWLINE#
url ( '^([0-9]+)/view$' , ContactView . as_view ( ) , name = 'contact_view' ) , #NEWLINE#
[ ( lower + x * ( upper - lower ) / length ) for x in range ( length ) ] #NEWLINE#
print ( line . replace ( 'x' , '' ) , end = '#SPACE#' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return get_object_or_404 ( Book , pk = id ) #NEWLINE#
return inspect . stack ( ) [ 2 ] #NEWLINE#
logging . info ( '%s|%s' % ( self . account_name , message ) ) #NEWLINE#
names = [ d [ 'name' ] for d in j [ 0 ] [ 'trends' ] ] #NEWLINE#
self . response . out . write ( 'The#SPACE#task#SPACE#has#SPACE#been#SPACE#started!' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 2 , 4 , 7 ] ] ) #NEWLINE#
unformatted_tag_list . append ( str ( tag ) ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
df . ix [ ( df . C <= df . B ) , 'B' : 'E' ] #NEWLINE#
dists . shape #NEWLINE#
return render_to_response ( 'bunseki:templates/form.pt' , { } , request ) #NEWLINE#
plt . xlim ( 0 , 20 ) #NEWLINE#
list ( _ ) #NEWLINE#
sns . set_palette ( 'hls' , 1 ) #NEWLINE#
parser . add_argument ( 'bar' ) #NEWLINE#
time . mktime ( dt . timetuple ( ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
subprocess . Popen ( [ 'xdg-open' , filename ] ) #NEWLINE#
print ( txtrecord . to_text ( ) ) #NEWLINE#
return bstr . decode ( 'utf-8' ) . encode ( 'latin-1' ) . decode ( 'utf-8' ) #NEWLINE#
parser . add_argument ( 'file1' , nargs = 1 , metavar = 'file' ) #NEWLINE#
return HttpResponse ( status = 410 ) #NEWLINE#
ax . set_xlim ( 0 , 6 ) #NEWLINE#
name [ 0 ] [ 0 ] [ - 1 ] [ - 1 ] #NEWLINE#
pool . append ( Process ( target = pool_func , args = ( q , ) ) ) #NEWLINE#
sys . stdout . writelines ( sorted_lines ) #NEWLINE#
p . terminate ( ) #NEWLINE#
ip = request . META . get ( 'REMOTE_ADDR' ) #NEWLINE#
return thestring [ : - len ( ending ) ] #NEWLINE#
output_list = [ x for x in input_list if isinstance ( x , list ) ] #NEWLINE#
dftmtx ( 2 ) #NEWLINE#
sorted ( a , key = operator . itemgetter ( 0 ) ) #NEWLINE#
lambda x : ( 0 , 1 ) [ x [ 'workingday' ] == 1 and x [ 'humidity' ] >= 60 ] #NEWLINE#
{ key : val for key , val in list ( mime_types . items ( ) ) if 'image/tiff' == val } #NEWLINE#
img = pygame . image . load ( filename ) #NEWLINE#
socket . close ( ) #NEWLINE#
[ 1 , 2 , 3 ] [ : 5 ] #NEWLINE#
last_lines . append ( line ) #NEWLINE#
X . dot ( A . T ) #NEWLINE#
foo ( ) #NEWLINE#
[ ( i . start ( ) , i . end ( ) ) for i in re . finditer ( 'o+' , test ) ] #NEWLINE#
xl . Workbooks . Open ( 'c:/excel_file.xls' ) #NEWLINE#
blob . delete ( ) #NEWLINE#
zeros = [ ( [ 0 ] * N ) for _ in range ( M ) ] #NEWLINE#
list ( chain . from_iterable ( ls [ : 1 ] + ls [ 2 : ] ) ) #NEWLINE#
[ 'something' , 'else' ] #NEWLINE#
l [ i ] [ 0 ] = 'new#SPACE#value' #NEWLINE#
root . mainloop ( ) #NEWLINE#
return [ item for item in sequence if item < value ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
self . toolbar . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
lock . acquire ( ) #NEWLINE#
next ( ( name for name , age in list ( mydict . items ( ) ) if age == search_age ) , None ) #NEWLINE#
v . setdefault ( value , [ ] ) . append ( key ) #NEWLINE#
dict_setitem ( self , key , value ) #NEWLINE#
[ 1 ] [ 0 ] [ 0 ] #NEWLINE#
res = requests . post ( url , files = files , data = data , headers = headers ) #NEWLINE#
items = SomeModel . objects . all ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . union , data [ 'Col1' ] . str . findall ( pattern ) , set ( ) ) #NEWLINE#
from PyQt4 import QtCore , QtGui #NEWLINE#
b_t = np . vstack ( ( b , np . ones_like ( b ) ) ) #NEWLINE#
user . save ( ) #NEWLINE#
list_of_tuples = [ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE#
a = '#SPACE#' . join ( unique_list ( a . split ( ) ) ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
pylab . xlim ( [ - 2.5 , 2.5 ] ) #NEWLINE#
shutil . rmtree ( '/folder_path' ) #NEWLINE#
sudo ( command , user = sudouser ) #NEWLINE#
print ( tok , '=' , re . search ( needle , xml_result ) . groups ( ) [ 0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
return dict ( [ ( k , v ) for k , v in d . items ( ) if k >= begin and k <= end ] ) #NEWLINE#
Dataset . objects . filter ( i_begin_int__lte = 170 , i_end_int__gte = 170 ) #NEWLINE#
data . append ( sheet1 . cell ( i , 1 ) . value ) #NEWLINE#
time . mktime ( then . timetuple ( ) ) * 1000.0 + then . microsecond / 1000.0 #NEWLINE#
regex = '|' . join ( [ ( '\\b' + str ( state ) + '\\b' ) for state in states ] ) #NEWLINE#
not sum ( [ ( not i in A ) for i in B ] ) if len ( A ) == len ( B ) else False #NEWLINE#
plt . show ( ) #NEWLINE#
0 , 1 , 2 , 6 , 8 , 9 , 12 , 16 , 19 , 23 , 25 , 27 , 35 , 44 , 65 , 66 , 72 , 73 , 76 , 83 , 85 , 91 , 94 , 96 , 117 , 127 , 130 , 139 , 142 , 147 , 158 , 170 , 175 , 513 , 514 , 520 , 539 , 547 , 549 , 551 , 553 , 562 , 563 , 576 , 581 , 601 , 605 , 663 , 690 , 699 #NEWLINE#
"""123456""" [ : : - 2 ] #NEWLINE#
plt . savefig ( 'two.png' ) #NEWLINE#
plt . savefig ( 'one.png' ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
data_array = numpy . fromfile ( inputfilename , numpy . int16 ) #NEWLINE#
v1 , v2 , v3 , v4 = map ( lambda x : max ( x , 0 ) , [ a , b , c , d ] ) #NEWLINE#
""""{0}\"""" . format ( '",#SPACE#"' . join ( words ) ) #NEWLINE#
minute = time . strftime ( '%M' ) #NEWLINE#
writer . writerow ( str . decode ( 'utf8' ) . encode ( 'utf_16_le' ) ) #NEWLINE#
df . reset_index ( inplace = True ) #NEWLINE#
[ a . join ( b ) for a , b in zip ( df . a [ 10 : 20 ] , df . b [ 10 : 20 ] ) ] #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
plt . ylim ( 0 , 5 ) #NEWLINE#
"""退""" . decode ( 'utf-8' ) #NEWLINE#
return HttpResponse ( 'hello#SPACE#%s' % request . user ) #NEWLINE#
[ x for x in dnalist if not re . search ( '[^AGTC]' , x ) ] #NEWLINE#
print ( sys . argv [ 0 ] ) #NEWLINE#
newMyList = [ ( v , k ) for v , k in myList if not k in myDict ] #NEWLINE#
textwidget . window_create ( tk . INSERT , window = tk . Label ( textwidget , text = f ) ) #NEWLINE#
top . mainloop ( ) #NEWLINE#
[ [ i for i , n in enumerate ( li ) if n == x ] for x in sorted ( set ( li ) ) ] #NEWLINE#
print ( k , d2 . get ( k , 0 ) ) #NEWLINE#
graph . es [ 'weight' ] = list ( range ( g . ecount ( ) ) ) #NEWLINE#
df . filter ( regex = '[A-CEG-I]' ) #NEWLINE#
print ( now . strftime ( '%A' ) ) #NEWLINE#
data = [ [ 'C' ] , [ 'B' ] , [ 'A' ] , [ 'C' , 'B' ] , [ 'B' , 'A' ] , [ 'A' , 'C' ] ] #NEWLINE# sorted ( ( sorted ( item ) for item in data ) , key = lambda x : ( len ( x ) , x ) ) #NEWLINE#
f . __code__ . co_name in creator . __code__ . co_varnames #NEWLINE#
os . startfile ( path ) #NEWLINE#
reactor . run ( ) #NEWLINE#
limit = int ( limit ) #NEWLINE#
two_d [ [ 0 , 1 ] , [ 3 , 4 ] ] #NEWLINE#
sheet . set_portrait ( False ) #NEWLINE#
return simplejson . JSONEncoder . default ( self , obj ) #NEWLINE#
df [ 'binned' ] = pd . cut ( df . val1 , bins = bins , labels = labels ) #NEWLINE#
plt . pcolor ( data , vmin = 0.01 , vmax = 0.99 , cmap = my_cmap ) #NEWLINE#
package_dir = { '' : 'src' } , #NEWLINE#
df . Group . value_counts ( ) #NEWLINE#
foo ( ) #NEWLINE#
random . sample ( set ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) , 2 ) #NEWLINE#
import sys #NEWLINE# id ( sys . intern ( chr ( 99 ) + chr ( 97 ) + chr ( 116 ) ) ) == id ( 'cat' ) #NEWLINE#
cherrypy . response . headers [ 'Content-Type' ] = 'image/png' #NEWLINE#
s . configure ( '.' , indicatorsize = '0' ) #NEWLINE#
re . sub ( '[^-\\w]' , '#SPACE#' , 'black-white' ) #NEWLINE#
return redirect ( url_for ( 'login' ) ) #NEWLINE#
cv2 . imshow ( 'GoPro' , image ) #NEWLINE#
sandwich . encode ( 'utf-8' ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSANOW , newattr ) #NEWLINE#
P . ylabel ( '$\\sin{(x)}$' , labelpad = 20 ) #NEWLINE#
x , y = ( os . getpid ( param ) for param in ( 'process1' , 'process2' ) ) #NEWLINE#
print ( len ( repr ( 2 ** ( 2 ** 10 - 1 ) ) . rstrip ( 'L' ) ) ) #NEWLINE#
df . a . sort_values ( ) #NEWLINE#
im . save ( output , format = 'JPEG' ) #NEWLINE#
return Number ( randint ( 1 , 100 ) ) #NEWLINE#
result = [ makedict ( elem ) for elem in yourlist ] #NEWLINE#
os . mkdir ( os . path . join ( hd , '.my-config' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'monke' , 'y' ] #NEWLINE#
pass #NEWLINE#
server . serve_forever ( ) #NEWLINE#
pt_ids = Profile_Tag . objects . values_list ( 'profile' , flat = True ) #NEWLINE#
regex . findall ( s ) #NEWLINE#
nx . draw ( H , pos , with_labels = True , node_shape = 'o' ) #NEWLINE#
any ( ( a [ : ] == [ 1 , 20 ] ) . all ( 1 ) ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = 8080 ) #NEWLINE#
_my_field . short_description = 'my#SPACE#custom#SPACE#label' #NEWLINE#
print ( '%.08f' % x ) #NEWLINE#
plt . gcf ( ) . show ( ) #NEWLINE#
return iter ( self . books . values ( ) ) #NEWLINE#
sys . exit ( 'not#SPACE#found' ) #NEWLINE#
listbox . pack ( ) #NEWLINE#
probas_ = clf . predict_proba ( Kt ) #NEWLINE#
self . connection . commit ( ) #NEWLINE#
ax . add_patch ( rect2 ) #NEWLINE#
df . set_index ( 'OrderDate' , inplace = True ) #NEWLINE#
json_obj = json . dumps ( a_dict , ensure_ascii = False ) #NEWLINE#
x = np . fromfile ( 'f' , dtype = 'u1' ) #NEWLINE#
[ 'http://blah' ] #NEWLINE#
df [ 'datetime' ] . apply ( my_grouper ) #NEWLINE#
tuple ( map ( operator . add , a , b ) ) #NEWLINE#
sheet1 = book . add_sheet ( 'Sheet#SPACE#1' ) #NEWLINE#
allow_unicode = True #NEWLINE#
btlabel2 . grid ( row = 1 , column = 1 , padx = 10 , sticky = 'w' ) #NEWLINE#
s . replace ( d ) #NEWLINE#
driver . get ( 'https://ps.rsd.edu/public/' ) #NEWLINE#
pd . DataFrame ( stdf . tolist ( ) ) #NEWLINE#
cursor . execute ( 'insert#SPACE#into#SPACE#Attendees#SPACE#values#SPACE#(?,#SPACE#?,#SPACE#?)' , ( name , seminar , paid ) ) #NEWLINE#
print ( [ element for element , count in Counter ( list1 ) . most_common ( ) ] ) #NEWLINE#
plt . gcf ( ) . autofmt_xdate ( ) #NEWLINE#
[ ( next ( car ) if item else next ( a ) ) for item in lyst ] #NEWLINE#
list_of_files = glob . glob ( '/path/to/folder/*' ) #NEWLINE#
pd . concat ( g for i , g in grouped if len ( g ) > 2 ) #NEWLINE#
print ( int ( netaddr . IPAddress ( '192.168.4.54' ) ) ) #NEWLINE#
Foo . objects . create ( name = 'a1' ) #NEWLINE#
Foo . objects . create ( name = 'a2' ) #NEWLINE#
proc . stdin . close ( ) #NEWLINE#
getattr ( obj , 'attr2' ) #NEWLINE#
alist = [ arr [ ( 0 ) , : ] , arr [ 1 : , ( - 1 ) ] , arr [ ( - 1 ) , : - 1 ] , arr [ 1 : - 1 , ( 0 ) ] ] #NEWLINE#
main ( ) #NEWLINE#
[ w for w in [ 'ONE' , 'TWO' ] if data [ 'Col1' ] . str . contains ( w ) . any ( ) ] #NEWLINE#
100 * np . round ( newdf3 . pivot_table ( rows = [ 'Quradate' ] , aggfunc = np . mean ) , 2 ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
p = Popen ( 'ssh#SPACE#servername#SPACE#cat#SPACE#/proc/cpuinfo' , shell = True , stdout = PIPE ) #NEWLINE#
s = '356a192b7913b04c54574d18c28d46e6395428ab' #NEWLINE# s . decode ( 'hex' ) #NEWLINE#
cherrypy . engine . start ( ) #NEWLINE#
extra_logger . setLevel ( logging . DEBUG ) #NEWLINE#
"""""" . join ( chr ( sum ( nums [ i : i + 2 ] ) ) for i in range ( 0 , len ( nums ) , 2 ) ) #NEWLINE#
df . columns = pd . MultiIndex . from_product ( [ df . columns , [ 'C' ] ] ) #NEWLINE# print ( df ) #NEWLINE#
print ( ',' . join ( str ( x ) for x in numbers ( 1 , [ 1 , 3 ] , 100 ) ) ) #NEWLINE#
MyClass . __dict__ . __setitem__ ( '_MyClass__protectedVariable' , '...but#SPACE#it#SPACE#is#SPACE#not' ) #NEWLINE#
msg . add_header ( 'Content-Disposition' , 'attachment' , filename = the_file + '.zip' ) #NEWLINE#
logger2 . addHandler ( logging . FileHandler ( '/tmp/logger2' ) ) #NEWLINE#
logger1 . addHandler ( logging . FileHandler ( '/tmp/logger1' ) ) #NEWLINE#
[ match for match in matches ] #NEWLINE#
s [ : : - 1 ] #NEWLINE#
toarchive . filter ( date__gt = interval ) . delete ( ) #NEWLINE#
driver . get ( 'https://stackoverflow.com' ) #NEWLINE#
s += str ( a [ i , j , k ] . imag ) + '#SPACE#' #NEWLINE#
data = loadtxt ( 'myfile.txt' , dtype = int ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * int ( y ) , [ '2' , '3' , '4' ] , 1 ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
data . pop ( ) #NEWLINE#
df . col . str . extract ( 'http://(?P<Site>.*?)/landing/(?P<RestUrl>.*)' ) #NEWLINE#
np . prod ( A , axis = 1 ) [ : , ( None ) ] / A #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( df [ 'A' ] / df [ 'sum' ] * np . log ( df [ 'A' ] / df [ 'sum' ] ) ) #NEWLINE#
'a7' , 'a0' , '21' , '19' , '7f' , '6f' , 'be' , '94' , 'a8' , '67' , 'd4' , 'bb' #NEWLINE#
df_c = pd . concat ( [ df_a . reset_index ( drop = True ) , df_b ] , axis = 1 ) #NEWLINE#
[ ( x + 1 ) for x in L ] #NEWLINE#
a = 'settings.py#SPACE#in#SPACE#package2' #NEWLINE#
s = '2-Methyl-3-phythyl-1,4-naphthochinon,Vitamin,#SPACE#K1,Antihemorrhagic#SPACE#vitamin' #NEWLINE#
sum ( i for i in range ( a , b + 1 ) if not i % 2 ) #NEWLINE#
[ ( '2013-10-10' , 45.0 ) , ( '2013-10-09' , 11.0 ) ] #NEWLINE#
z = dict ( x , ** y ) #NEWLINE#
return np . sum ( a ) , np . nonzero ( np . any ( a , axis = 0 ) ) [ 0 ] #NEWLINE#
open ( 'test' , 'w' ) . write ( my_data ) #NEWLINE#
conn . close ( ) #NEWLINE#
[ 0.024325847625732422 , 0.0254058837890625 , 0.02396702766418457 ] #NEWLINE#
print ( 'Thrown#SPACE#from' , mod . __name__ ) #NEWLINE#
input ( 'Now#SPACE#run#SPACE#b.py#SPACE#and#SPACE#press#SPACE#ENTER' ) #NEWLINE#
eliminated = eliminated . append ( x ) #NEWLINE#
rect . set_visible ( True ) #NEWLINE#
[ vali [ i ] for i , vali in enumerate ( f ( * vals ) ) ] #NEWLINE#
pd . melt ( piv ) #NEWLINE#
urllib . request . install_opener ( my_opener ) #NEWLINE#
obj = json . loads ( json_string ) #NEWLINE#
a . max ( axis = 0 ) . idxmax ( ) #NEWLINE#
client . subscribe ( '$SYS/#' ) #NEWLINE#
s = s . lower ( ) #NEWLINE#
globals ( ) [ module_name ] = __import__ ( module_name ) #NEWLINE#
f = open ( 'c:/dir/jsondec.json' ) #NEWLINE# data = json . load ( f ) #NEWLINE#
df [ 'region_num' ] = df [ 'region' ] . apply ( region_to_numeric ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
results . extend ( re . findall ( key , message , re . IGNORECASE ) ) #NEWLINE#
foo = self . session . get ( 'foo' ) #NEWLINE#
print ( list ( partitions ( '4824' ) ) ) #NEWLINE#
print ( [ list ( v ) for k , v in groupby ( sorted_list , key = move ) ] ) #NEWLINE#
exit ( 'ohoh' ) #NEWLINE#
url ( '^partner/(?P<author>[-\\w]+)/(?P<video>\\w+)/(?P<related>\\w+)/$' , #NEWLINE# 'video_player' ) , #NEWLINE#
print ( dumps ( a . __dict__ ) ) #NEWLINE#
"""""" . join ( n for n in phone_str if n . isdigit ( ) ) #NEWLINE#
mergedgroupdict ( '(?P<b>.b.)|(?P<i>.i.)' , 'abcdefghijk' ) #NEWLINE#
angle = atan2 ( a . x * b . y - a . y * b . x , a . x * b . x + a . y * b . y ) #NEWLINE#
super ( Foo , self ) . __setattr__ ( attr , value ) #NEWLINE#
api = falcon . API ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
weekly . append ( sum ( visitors [ x : x + 7 ] ) ) #NEWLINE#
arr . argsort ( ) [ - 3 : ] [ : : - 1 ] #NEWLINE#
randomvalue = myRandom . randint ( 0 , 10 ) #NEWLINE#
df [ column_list ] . iloc [ row_index_list ] . mean ( axis = 0 ) #NEWLINE#
df . groupby ( [ 'a' , 'name' ] ) . median ( ) . index . get_level_values ( 1 ) . tolist ( ) #NEWLINE#
'nunca' , 'RG' , 'success' , 'VM23SDF' #NEWLINE#
natural_sort_key ( '342B' ) #NEWLINE#
list ( powerset ( set ( [ 1 , 2 , 3 ] ) ) ) #NEWLINE#
func ( ) #NEWLINE#
L4 = [ n for n in L1 if n not in tmpset ] #NEWLINE#
[ 'duck' , 'bird' , 'cow' ] #NEWLINE#
ax . plot ( x , y , color = 'k' , marker = None , zorder = 0 ) #NEWLINE#
template_file = os . path . join ( templates_dir , 'template.txt' ) #NEWLINE#
curs . execute ( 'select#SPACE#*#SPACE#from#SPACE#foo' ) #NEWLINE#
shutil . copyfile ( path , os . path . join ( * path_rel ) ) #NEWLINE#
counter_list = [ item for item in counter_list if len ( item ) != 0 ] #NEWLINE#
{ { f . following_set . count ( ) } } #NEWLINE#
a [ np . r_ [ : 3 , - 4 : 0 ] ] #NEWLINE#
stripped_list = [ j . strip ( ) for j in initial_list ] #NEWLINE#
indices = [ i for i , elem in enumerate ( mylist ) if 'aa' in elem ] #NEWLINE#
print ( df [ 'month' ] . astype ( str ) . str . zfill ( 2 ) ) #NEWLINE#
enc . fit ( [ [ 0 , 0 , 3 ] , [ 1 , 1 , 0 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] ] ) , #NEWLINE#
autoencoder . compile ( optimizer = 'adadelta' , loss = 'binary_crossentropy' ) #NEWLINE#
A [ np . all ( np . any ( A - B [ : , ( None ) ] , axis = 2 ) , axis = 0 ) ] ( I ) #NEWLINE#
self . assertEqual ( my_module . my_function_with_global_var ( ) , 'Second#SPACE#result' ) #NEWLINE#
helplines . append ( '' ) #NEWLINE#
image = image . convert ( 'RGBA' ) #NEWLINE#
cur . execute ( 'PRAGMA#SPACE#user_version#SPACE#=#SPACE#{v:d}' . format ( v = version ) ) #NEWLINE#
[ k for k , v in G . out_degree ( ) . items ( ) if v == 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
np . isclose ( [ 10000000000.0 , 0 ] , [ 1.00001e-10 , 0 ] ) #NEWLINE#
df . xs ( 'C' ) [ 'x' ] = 10 #NEWLINE#
workbook . close ( ) #NEWLINE#
axnum . yaxis . set_major_formatter ( FormatStrFormatter ( '%.2f' ) ) #NEWLINE#
my_exec ( "1+1\n'''" ) #NEWLINE#
print ( df2 . set_index ( [ 0 , 1 ] ) ) #NEWLINE#
df #NEWLINE#
ax . imshow ( pawprint ) #NEWLINE#
dict ( zip ( ( 'one' , 'two' ) , ( 1 , 2 ) ) ) #NEWLINE#
df [ 'result' ] = df #NEWLINE#
g . plot ( ) #NEWLINE#
df [ ( df != 0 ) . all ( 1 ) ] #NEWLINE#
list . remove ( item_to_be_removed ) #NEWLINE#
set ( x [ 0 ] for x in zip ( a , a [ 1 : ] ) if x [ 0 ] == x [ 1 ] ) #NEWLINE#
palin = [ 'parrot' , polly ] #NEWLINE#
print ( os . path . getmtime ( os . path . join ( SOME_DIR , filename ) ) ) #NEWLINE#
win = gtk . Window ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . environ [ 'LD_LIBRARY_PATH' ] = os . getcwd ( ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 9 , 0 ] #NEWLINE#
subprocess . call ( [ 'dir' , 'c:\\temp' ] , shell = True , stdout = f ) #NEWLINE#
ctypes . cast ( x , ctypes . POINTER ( ctypes . c_ulong ) ) #NEWLINE#
{ text . replace ( '\n' , markupsafe . Markup ( '<br#SPACE#/>' ) ) } #NEWLINE#
now_epoch = ( datetime . utcnow ( ) - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
vec . fit_transform ( measurements ) . toarray ( ) #NEWLINE#
print ( '{:.6e}' . format ( i ) ) #NEWLINE#
another_matrix = numpy . load ( 'output.mat' ) #NEWLINE#
win . connect ( 'delete-event' , Gtk . main_quit ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE' ) #NEWLINE#
map ( bool , a ) . index ( True ) #NEWLINE#
'hello#SPACE#there#SPACE#%(5)s' % { ( 5 ) : 'you' } #NEWLINE#
output_df = pd . DataFrame ( output_nparray , columns = target_feature_names ) #NEWLINE#
l [ 0 ] [ 1 ] #NEWLINE#
print ( a [ : - 10 : - 1 ] ) #NEWLINE#
super ( CustomHandler , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
3434 #NEWLINE#
print ( datetime . now ( ) . strftime ( '%a,#SPACE#%b' ) ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = [ 'a' , 'b' ] ) #NEWLINE# df #NEWLINE#
element . send_keys ( 'hi#SPACE#mom' ) #NEWLINE#
bottleneck . partsort ( a , a . size - 10 ) [ - 10 : ] #NEWLINE#
_winreg . DeleteKey ( key , 'Test1' ) #NEWLINE#
l = list ( zip_longest ( x , x , fillvalue = [ ] ) ) #NEWLINE#
super ( MyModel , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
raise Exception ( 'SSH#SPACE#failed' ) #NEWLINE#
draw . ellipse ( ( x - r , y - r , x + r , y + r ) , fill = ( 255 , 0 , 0 , 0 ) ) #NEWLINE#
self . vsb . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
df . sort ( columns = 'sort' ) . drop ( 'sort' , axis = 1 ) #NEWLINE#
__init__ . py #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
dset . attrs [ 'Name' ] = 'My#SPACE#Dataset' #NEWLINE#
df . groupby ( 'SOME_COL' ) . apply ( weighed_average ) #NEWLINE#
return [ ( A [ k ] , B [ k ] ) for k in A if k in B ] #NEWLINE#
plt . contour ( xi , yi , zi , v , linewidths = 0.5 , colors = 'k' ) #NEWLINE#
RNA_integers = [ RNA_dictionary [ i ] for i in RNA_list if i in RNA_dictionary ] #NEWLINE#
p . stdout . close ( ) #NEWLINE#
df = web . DataReader ( 'F' , 'JSE:MTN' , '2011-11-01' , '2011-11-30' ) #NEWLINE#
min ( items , key = lambda item : p1 . compute_distance_to ( item . loc ) ) #NEWLINE#
{ { ( value | markdown ) : 'nl2br' } } #NEWLINE#
word_re = re . compile ( '\\w+(?u)' ) #NEWLINE#
arr = numpy . random . randint ( 2 , size = ( n , ) ) #NEWLINE#
parser . add_argument ( 'arg2' , type = str ) #NEWLINE#
df = df . reindex ( [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' ] ) #NEWLINE#
list ( chain . from_iterable ( l ) ) #NEWLINE#
round ( random . random ( ) * ( m_time - min_time ) + min_time , 1 ) #NEWLINE#
serial . write ( '\x03' ) #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . datetime ( 2003 , 11 , 5 , 0 , 0 ) #NEWLINE#
frozenset ( [ '136' ] ) <= frozenset ( [ '24' , '277' ] ) #NEWLINE#
print ( '' . join ( comb ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
COMMANDS_MODULE = 'YOURPROJECTNAME.commands' #NEWLINE#
logger . info ( 'INFO' ) #NEWLINE#
np . allclose ( C0 , C2 ) #NEWLINE#
doc3 . cssselect ( 'meta[property="og:locality"]' ) [ 0 ] . get ( 'content' ) #NEWLINE#
xs = [ [ '1' , '2' , '4' , '6' ] , [ '7' , '0' , '1' , '4' ] , [ [ '0' , '1' , '1' ] , [ '1' ] ] ] #NEWLINE#
print ( 'THIS#SPACE#WILL#SPACE#BE#SPACE#PRESERVED' ) #NEWLINE#
ax . plot ( data ) #NEWLINE#
mydog . findall ( s ) [ 0 ] #NEWLINE#
sum ( ( c . A for c in cList ) , timedelta ( ) ) #NEWLINE#
uniq_animal_groups = set ( map ( tuple , animal_groups ) ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled #NEWLINE#
time . strptime ( datestring , '%d.%m.%Y#SPACE#%H:%M:%S' ) #NEWLINE#
"""FFFFFFFF""" #NEWLINE#
vars ( type ( obj ) ) [ 1 ] = 'change' #NEWLINE#
print ( pythonFunction . function ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
self . losses . append ( logs . get ( 'loss' ) ) #NEWLINE#
ingredients . append ( { 'name' : name , 'amount' : float ( amount ) , 'metric' : metric } ) #NEWLINE#
writer . writerow ( the_list ) #NEWLINE#
logging . info ( 'Finished' ) #NEWLINE#
array ( [ 'text2' , '2' , 'longertext2' , '0.2222' ] , dtype = '|S11' ) , #NEWLINE#
string = float ( string ) if string . isdigit ( ) else string #NEWLINE#
parser_on . add_argument ( '--fast' , action = 'store_true' ) #NEWLINE#
element = driver . find_element_by_name ( 'q' ) #NEWLINE#
self . wfile . write ( 'Request#SPACE#has#SPACE#failed#SPACE#to#SPACE#process.#SPACE#Error:#SPACE#%s' , exc . message ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
re . split ( '(?<!day)\\|(?!night)' , s ) #NEWLINE#
FullName = ',#SPACE#' . join ( [ _f for _f in ( LastName , FirstName ) if _f ] ) #NEWLINE#
a / ( a - 1 ) #NEWLINE#
xlim ( [ lims [ 1 ] , lims [ 0 ] ] ) #NEWLINE#
A [ 1 ] , A [ 0 ] , A [ 1 ] = A [ 0 ] , A [ 1 ] , A [ 1 ] #NEWLINE#
next ( e in lestring for e in lelist if e in lestring ) #NEWLINE#
"""{1}{0}{1}""" . format ( s . join ( lis ) , s ) #NEWLINE#
"""Returns#SPACE#a#SPACE#raw#SPACE#string#SPACE#representation#SPACE#of#SPACE#text""" #NEWLINE#
sys . stdout . write ( 'Bugs:#SPACE#5|Other:#SPACE#10\n' ) #NEWLINE#
logging . getLogger ( 'sqlalchemy' ) . addHandler ( logging . StreamHandler ( ) ) #NEWLINE#
print ( np . all ( norm1 == norm2 ) ) #NEWLINE#
canvas . pack ( ) #NEWLINE#
django . setup ( ) #NEWLINE#
dict_names = { 'd1' : { 'name' : 'bob' , 'place' : 'lawn' , 'animal' : 'man' } , 'd2' : #NEWLINE# { 'name' : 'spot' , 'place' : 'bed' , 'animal' : 'dog' } } #NEWLINE#
print ( df2 . reindex ( df . index [ df . index . isin ( df2 . index ) ] ) ) #NEWLINE#
lattice = [ [ Site ( i + j ) for i in range ( 3 ) ] for j in range ( 3 ) ] #NEWLINE#
fox . get ( 'http://stackoverflow.com/' ) #NEWLINE#
ii = np . nonzero ( a == 4 ) #NEWLINE#
subprocess . Popen ( command , stdout = subprocess . PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
return json . loads ( data , object_hook = _json_object_hook ) #NEWLINE#
"""a*(ab|b(ba*b)*(a|ba+b))((a|ba+b)(ba*b)*(a|ba+b)|ba*b)*""" #NEWLINE#
os . path . abspath ( 'file' ) #NEWLINE#
print ( 'Found#SPACE#é' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
a [ : : 2 ] = 1 #NEWLINE#
value = my_dic . get ( 100 , 0 ) #NEWLINE#
print ( float ( '4.5' ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
SCHEDULER = 'myproject.schedulers.MyScheduler' #NEWLINE#
alldata [ 'pos' ] [ 'x' ] #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , oldflags | os . O_NONBLOCK ) #NEWLINE#
numpy . isnan ( myarray ) . any ( ) #NEWLINE#
b = a [ : ] #NEWLINE#
do_something_with ( result ) #NEWLINE#
print ( 'Randomly#SPACE#wait#SPACE#1#SPACE#to#SPACE#2#SPACE#seconds#SPACE#between#SPACE#retries' ) #NEWLINE#
subprocess . call ( ( 'xdg-open' , filepath ) ) #NEWLINE#
ax . set_yticks ( [ 0.5 , 1.0 ] ) #NEWLINE#
m = re . search ( '//([^/]*)' , str ) #NEWLINE#
print ( 'Hello,#SPACE#World!' ) #NEWLINE#
cnx . sendInitPresence ( ) #NEWLINE#
np . average ( a , axis = - 1 ) . repeat ( a . shape [ - 1 ] ) . reshape ( a . shape ) #NEWLINE#
re . sub ( '#SPACE#mytable' , '"#SPACE#id="mytable' , df . to_html ( classes = 'mytable' ) ) #NEWLINE#
classifier . fit ( X , y ) #NEWLINE#
df . plot ( 'x' , 'y' , kind = 'scatter' ) #NEWLINE#
with open ( '/Users/.../Desktop/Name_Python.txt' , 'w' , encoding = 'utf-8' ) as file : #NEWLINE# #INDENT# file . writelines ( '%s\n' % item for item in my_list ) #NEWLINE#
Z = interpolate . griddata ( ( X_table , Y_table ) , Z_table , ( X , Y ) , method = 'cubic' ) #NEWLINE#
t . date ( ) == datetime . date ( 2013 , 12 , 25 ) #NEWLINE#
print ( d [ 'this#SPACE#key#SPACE#does#SPACE#not#SPACE#exist' ] ) #NEWLINE#
log . setLevel ( logging . DEBUG ) #NEWLINE#
print ( array . array ( 'B' , 'ABCD' ) ) #NEWLINE#
print ( parser . parse_args ( ) ) #NEWLINE#
print ( trks . name ( ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
a . setdefault ( key , [ ] ) #NEWLINE#
line_new = '{:>12}#SPACE##SPACE#{:>12}#SPACE##SPACE#{:>12}' . format ( word [ 0 ] , word [ 1 ] , word [ 2 ] ) #NEWLINE#
axcut . set_visible ( False ) #NEWLINE#
array ( [ [ 1.0 , 0.0 , 0.0 ] , [ 0.0 , 1.0 , 0.0 ] , [ 0.0 , 0.0 , 1.0 ] , [ 0.0 , 1.0 , 0.0 ] ] ) #NEWLINE#
reactor . run ( ) #NEWLINE#
imp . find_module ( 'sqlalchemy' ) #NEWLINE#
pd . isnull ( df ) . any ( axis = 1 ) #NEWLINE#
win . run ( ) #NEWLINE#
urlsIwant = [ x for x in allurls if any ( w in x for w in words ) ] #NEWLINE#
img = color . rgb2gray ( io . imread ( 'image.png' ) ) #NEWLINE#
new_list . extend ( i ) #NEWLINE#
text_file . close ( ) #NEWLINE#
return np . exp ( - 4 * np . log ( 2 ) * ( ( x - x0 ) ** 2 + ( y - y0 ) ** 2 ) / fwhm ** 2 ) #NEWLINE#
font_file = os . path . join ( package_directory , 'fonts' , 'myfont.ttf' ) #NEWLINE#
A . objects . filter ( id = some_a . id ) . update ( hidden = True ) #NEWLINE#
return '%s#SPACE#%s' % ( sql , strlimit ) #NEWLINE#
s . apply ( lambda x : Series ( 1 , index = x ) ) . fillna ( 0 ) #NEWLINE#
Rule ( SgmlLinkExtractor ( allow = ( '/index/new\\?new_start=\\d+' , ) ) , follow = True ) , #NEWLINE#
self . SetSizerAndFit ( sizer ) #NEWLINE#
pkl_file . close ( ) #NEWLINE#
os . write ( sys . stdout . fileno ( ) , struct . pack ( 'b' , c + 48 ) ) #NEWLINE#
df . groupby ( 'A' ) . B . sum ( ) . map ( set ) #NEWLINE#
foo [ 1 : : 3 ] #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
return resp . text , resp . status_code , list ( resp . headers . items ( ) ) #NEWLINE#
"""\\b([a-zA-Z]\\S{8}\\d)\\b""" #NEWLINE#
ax . set_xlim ( 0 , 30 ) #NEWLINE#
self . tcp_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
replaceAll ( '/fooBar.txt' , 'Hello\\sWorld!$' , 'Goodbye\\sWorld.' ) #NEWLINE#
def is_in_multiple_groups ( user ) : #NEWLINE# #INDENT# return user . groups . filter ( name__in = [ 'group1' , 'group2' ] ) . exists ( ) #NEWLINE#
def consecutive_in ( B , A ) : #NEWLINE# #INDENT# return B in ( A [ i : i + len ( B ) ] for i in range ( len ( A ) ) ) #NEWLINE#
ITEM_PIPELINES = { 'mybot.pipelines.MybotPipeline' : 1000 } #NEWLINE#
X_train = scaler . fit_transform ( X_train ) #NEWLINE#
print ( struct . unpack ( '<I' , s + '\x00' ) [ 0 ] ) #NEWLINE#
f . close ( ) #NEWLINE#
request . user . get_profile ( ) . token #NEWLINE#
session . commit ( ) #NEWLINE#
my_dict . setdefault ( 'foo' , { } ) [ 'bar' ] = some_var #NEWLINE#
self . frame . pack ( fill = BOTH , expand = YES ) #NEWLINE#
count = sum ( 1 for line in myfile ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
pattern = '##SPACE#REG#SPACE#{0}(.*?)##SPACE#reg#SPACE#{0}' . format ( reg_name ) #NEWLINE#
"""#SPACE#Tr""" #NEWLINE#
df2 [ 'E' ] #NEWLINE#
re . sub ( '\\s+' , '#SPACE#' , mystring ) . strip ( ) #NEWLINE#
random . choice ( list ( range ( 100 , 20100 , 100 ) ) ) #NEWLINE#
tank = forms . IntegerField ( widget = forms . HiddenInput ( ) , initial = 123 ) #NEWLINE#
assert all ( run_function ( i ) == j for i , j in zip ( inputs , expected_values ) ) #NEWLINE#
[ f ( aItem , bItem ) for aItem , bItem in zip ( a , b ) ] #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
match . group ( 0 ) #NEWLINE#
print ( sum ( map ( lambda x : x * x , l ) ) ) #NEWLINE#
normalizedscores = { u : ( float ( l ) / maxscore ) for u , l in list ( linkscores . #NEWLINE# items ( ) ) } #NEWLINE#
res = [ next ( coupler , None ) for _ in range ( 5 ) ] #NEWLINE#
conn . close ( ) #NEWLINE#
resp = urllib . request . urlopen ( req ) #NEWLINE#
[ ( 9 , 3 , 'C' ) , ( 9 , 4 , 'G' ) ] #NEWLINE#
all_data = [ ] #NEWLINE#
shell . SHGetSpecialFolderPath ( 0 , shellcon . CSIDL_COMMON_STARTMENU ) #NEWLINE#
lambda x : next ( i for i in x if i [ 'id' ] == 20 ) #NEWLINE#
a . extend ( a , b ) #NEWLINE#
logging . info ( 'Notify' ) #NEWLINE#
return open ( fn , 'w' ) #NEWLINE#
dict ( ( k , sum ( d [ k ] for d in dict1 ) ) for k in dict1 [ 0 ] ) #NEWLINE#
root . geometry ( '%dx%d+%d+%d' % ( w , h , x , y ) ) #NEWLINE#
return urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
return datetime . timedelta ( 0 ) #NEWLINE#
eval ( 'x*2' ) #NEWLINE#
subprocess . call ( [ <STR0> , 'setup.py' , 'install' ] ) #NEWLINE#
parser . add_argument ( 'USER' , type = str , help = 'Grooveshar#SPACE#user#SPACE#name' ) #NEWLINE#
M = scipy . sparse . csr_matrix ( M ) #NEWLINE#
getattr ( getattr ( f , 'bar' ) , 'baz' ) #NEWLINE#
runserver . py #NEWLINE#
s . bind ( ( 'localhost' , 1234 ) ) #NEWLINE#
return dict ( itertools . islice ( iter ( dictionary . items ( ) ) , begin , end + 1 ) ) #NEWLINE#
print ( "request#SPACE#wasn't#SPACE#from#SPACE#a#SPACE#unknown#SPACE#proxy.#SPACE#Not#SPACE#a#SPACE#trusted#SPACE#IP." ) #NEWLINE#
main1 ( ) #NEWLINE#
'%s' % [ 1 , 2 ] #NEWLINE#
[ a for a , a in list ( params . items ( ) ) ] #NEWLINE#
p . parse_args ( '1#SPACE#2#SPACE#8#SPACE#9#SPACE#--spam#SPACE#8' . split ( ) ) #NEWLINE#
p . parse_args ( '1#SPACE#2#SPACE#--spam#SPACE#8#SPACE#8#SPACE#9' . split ( ) ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
{ { ( user | hash ) : item } } #NEWLINE#
len ( set ( sum ( sl ) for sl in L ) ) == 1 #NEWLINE#
ax . plot ( x , 2 * x ** 2 , color = 'b' , linestyle = '' , marker = 'o' ) #NEWLINE#
[ id ( x ) for x in test ] #NEWLINE#
return [ x for x in L if x not in delitems ] #NEWLINE#
return sum ( i != j for i , j in zip ( a , b ) ) #NEWLINE#
k . set_acl ( 'public-read' ) #NEWLINE#
a . reshape ( - 1 , R ) #NEWLINE#
struct . unpack ( 'i' , 'AAAA' ) [ 0 ] #NEWLINE#
import imp #NEWLINE# imp . reload ( my . module ) #NEWLINE#
random . shuffle ( myList ) #NEWLINE#
conn . commit ( ) #NEWLINE#
parser . add_argument ( '--name' ) #NEWLINE#
parser . add_argument ( '-o' ) #NEWLINE#
pd . concat ( [ df ] * 3 ) #NEWLINE#
df . merge ( weird_cumsum , left_on = 'OrderNum' , right_index = True , how = 'left' ) #NEWLINE#
return self . thisptr . clone ( ) #NEWLINE#
np . average ( df . y - df . x , weights = df . index . asi8 ) #NEWLINE#
[ line for time , line in sorted ( zip ( listofTimes , listofLines ) ) ] #NEWLINE#
VVg = np . sum ( np . dot ( GinvVV [ : , : - 1 ] , GRZVV . T ) , axis = - 1 ) * VV #NEWLINE#
frame . axes . get_yaxis ( ) . set_ticks ( [ ] ) #NEWLINE#
plt . xlabel ( 'variable#SPACE#X#SPACE#(20#SPACE#evenly#SPACE#spaced#SPACE#bins)' ) #NEWLINE#
all_potions [ 'Freezing#SPACE#Potion' ] #NEWLINE#
e . pack ( ) #NEWLINE#
self . window1 . show ( ) #NEWLINE#
foo ( ) #NEWLINE#
driver = webdriver . Chrome ( service_log_path = '/dev/null' ) #NEWLINE#
"""This#SPACE#is#SPACE#the#SPACE#first#SPACE#line#SPACE#of#SPACE#my#SPACE#text,#SPACE#which#SPACE#will#SPACE#be#SPACE#joined#SPACE#to#SPACE#a#SPACE#second.""" #NEWLINE#
resp . peercert #NEWLINE#
df . iloc [ 0 ] #NEWLINE#
cursor . execute ( insert_query , data ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
super ( b , self ) . __init__ ( ) #NEWLINE#
sorted ( map ( float , data . split ( ) ) , reverse = True ) [ : 3 ] #NEWLINE#
spherical_dist ( locations_1 , locations_2 [ : - 1 ] ) #NEWLINE#
df [ df . sort ( 'C' ) . groupby ( 'A' ) . cumcount ( ascending = False ) >= 2 ] #NEWLINE#
plt . show ( ) #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
print ( repr ( line ) ) #NEWLINE#
root . title ( 'MyApp' ) #NEWLINE#
sock . connect ( ( host , port ) ) #NEWLINE#
window . connect ( 'destroy' , lambda x : gtk . main_quit ( ) ) #NEWLINE#
color ( '#%03x' % random . randint ( 0 , 4095 ) ) #NEWLINE#
print ( ( 'a:' , a , 'b:' , b , 'c:' , c ) ) #NEWLINE#
df [ 'C' ] = df [ 'A' ] . where ( df [ 'B' ] . isnull ( ) , df [ 'B' ] ) #NEWLINE#
del df [ 'hour' ] #NEWLINE#
possibles . update ( locals ( ) ) #NEWLINE#
message . as_string ( ) . replace ( '\n' , '\r\n' ) #NEWLINE#
que = multiprocessing . Manager ( ) . Queue ( ) #NEWLINE#
fh . write ( base64 . decodestring ( imgData ) ) #NEWLINE#
self . sock . send ( 'Oi#SPACE#you#SPACE#sent#SPACE#something#SPACE#to#SPACE#me' ) #NEWLINE#
subprocess . call ( [ 'xdg-screensaver' , 'suspend' , window_id ] ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
r = re . compile ( '\\w+' ) #NEWLINE#
ax . set_ylabel ( 'y' ) #NEWLINE#
return re . compile ( regex ) . groups #NEWLINE#
return [ ( v * v ) for v in vals ] #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
print ( self . time ) #NEWLINE#
[ char for char in yourstring ] #NEWLINE#
child . append ( Element ( 'D' , { 'name' : 'error' } ) ) #NEWLINE#
new_f . to_csv ( 'newFile.csv' , index = False ) #NEWLINE#
print ( 'Â©' ) #NEWLINE#
SomeModule . SomeFunction ( str ( s . encode ( 'utf-8' ) ) ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
sum ( 1 for item in arr if item == 0 and type ( item ) is type ( 0 ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
m [ 0 ] [ 0 ] . append ( 's1' ) #NEWLINE#
[ { 'key' : 'red' , 'title' : 'foo' } , { 'key' : 'green' , 'title' : 'foo' } ] #NEWLINE#
np . stack ( np . nonzero ( df . values ) ) . T #NEWLINE#
df [ 'c' ] . apply ( lambda x : np . mean ( x ) ) #NEWLINE#
user . user_trips . all ( ) #NEWLINE#
logging . info ( 'Jackdaws#SPACE#love#SPACE#my#SPACE#big#SPACE#sphinx#SPACE#of#SPACE#quartz.' ) #NEWLINE#
list ( map ( lambda f , a : f ( a ) , * zip ( * itertools . product ( funcs , args ) ) ) ) #NEWLINE#
matplotlib . rc ( 'font' , ** font ) #NEWLINE#
print ( result . group ( 1 ) ) #NEWLINE#
example_list = [ int ( k ) for k in example_string . split ( ',' ) ] #NEWLINE#
app = wx . App ( False ) #NEWLINE#
np . core . records . fromrecords ( r . tolist ( ) + [ ( 5 , 'cc' , 43.0 ) ] ) #NEWLINE#
browser . select_form ( nr = 0 ) #NEWLINE#
print ( r . data ( ) ) #NEWLINE#
print ( sorted ( a , key = Counter ( a ) . get , reverse = True ) ) #NEWLINE#
cursor . execute ( 'select#SPACE#id#SPACE#from#SPACE#bs' ) #NEWLINE#
pandas . DataFrame . from_records ( [ s . to_dict ( ) for s in signals ] ) #NEWLINE#
conn . execute ( 'BEGIN' ) #NEWLINE#
df . loc [ 2 , 'StartDate' ] #NEWLINE#
df . groupby ( level = 0 , as_index = False ) . nth ( 2 ) #NEWLINE#
c = a [ ( a [ : , ( 0 ) ] == b [ : , ( None ) ] ) . any ( 0 ) ] #NEWLINE#
proc . stdin . flush ( ) #NEWLINE#
dictionary = json . loads ( cur . fetchone ( ) [ 0 ] ) #NEWLINE#
proc . wait ( ) #NEWLINE#
[ 1.0135619640350342 , 1.0107290744781494 , 1.0090651512145996 ] #NEWLINE#
A = np . vstack ( ( array1 , array2 , array3 ) ) #NEWLINE#
print ( sint ( 'Hello#SPACE#World' ) ) #NEWLINE#
db . delete ( index = 'reestr' , doc_type = 'some_type' , id = 1919 ) #NEWLINE#
c = ( len ( a ) * a - sum ( a ) ) / b #NEWLINE#
ax . set_title ( title ) #NEWLINE#
[ 0 ] [ 0 ] [ 0 ] #NEWLINE#
field . setAlignment ( QtCore . Qt . AlignCenter ) #NEWLINE#
gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
__init__ . py #NEWLINE#
perms = [ '' . join ( p ) for p in permutations ( str , 5 ) ] #NEWLINE#
a . func ( ** kwargs ) #NEWLINE#
a = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE# """""" . join ( a ) #NEWLINE#
handles , labels = ax . get_legend_handles_labels ( ) #NEWLINE# ax . legend ( handles [ : : - 1 ] , labels [ : : - 1 ] , title = 'Line' , loc = 'upper#SPACE#left' ) #NEWLINE#
def remove_odd ( l ) : #NEWLINE# #INDENT# return [ x for x in l if x % 2 == 0 ] #NEWLINE#
pattern . sub ( 'hello' , input_string ) #NEWLINE#
print ( df . loc [ : , ( 'a' ) ] . tolist ( ) ) #NEWLINE#
bool ( number % 2 ) #NEWLINE#
A [ np . lexsort ( A . T ) ] #NEWLINE#
sample ( 10 , [ 2 , 4 , 8 , 16 ] ) #NEWLINE#
sum ( a , b ) #NEWLINE#
L = [ 'one' , 'two' , 'three' , 'four' , 'five' , 'six' , 'seven' , 'eight' , 'nine' ] #NEWLINE#
len ( np . atleast_1d ( a ) ) #NEWLINE#
[ '1' , 'Test' , 'items#SPACE#(one,#SPACE#two,#SPACE#etc.)' , '1' , 'long,#SPACE#list' ] #NEWLINE#
df = pd . DataFrame ( data . tolist ( ) , columns = data . dtype . names ) #NEWLINE#
np . equal ( a , None ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
os . makedirs ( dst ) #NEWLINE#
list ( map ( len , s . split ( ) ) ) #NEWLINE#
foo ( 'a' , b = '2' , c = '3' , bar = 'bar' ) #NEWLINE#
user . put ( ) #NEWLINE#
a = sorted ( list ( a . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
plt . xlim ( X [ 0 ] - day , X [ - 1 ] + day ) #NEWLINE#
data . ix [ : , ( data . columns . get_level_values ( 1 ) . isin ( { 'a' , 'c' } ) ) ] #NEWLINE#
{ { ( game . description | safe | slice ) : '65' } } #NEWLINE#
[ 3 , 5 , 7 ] #NEWLINE#
var_1 = [ 'hello' ] #NEWLINE#
p = re . compile ( '([-+]?[\\.]?(?=\\d)(?:\\d*)(?:\\.\\d+)?)' ) #NEWLINE#
content . encode ( 'latin1' ) . decode ( 'utf8' ) #NEWLINE#
[ list ( t ) for t in zip ( * ( [ iter ( num_str . split ( ',' ) ) ] * 2 ) ) ] #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
a = numpy . tile ( [ 1 , - 1 ] , 15 ) #NEWLINE#
server . quit ( ) #NEWLINE#
sys . stdout . write ( line . replace ( 'sit' , 'SIT' ) ) #NEWLINE#
print ( 'Why,#SPACE#hello#SPACE#there#SPACE#wonderful#SPACE#stackoverflow#SPACE#people!' ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
mylist = [ mylist [ i ] for i in myorder ] #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
p1 . join ( ) #NEWLINE#
print ( 'Yes!' ) #NEWLINE#
new_array = map ( list , old_array ) #NEWLINE#
"""\\noindent#SPACE#$V_2#SPACE#=#SPACE#{0:.5}#SPACE#\\text{{V}}$""" . format ( voltage ) #NEWLINE#
infile . close ( ) #NEWLINE#
Base . metadata . bind = engine #NEWLINE#
list_of_lines = [ next ( f ) for _ in range ( chunk_len ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
self . assertContains ( result , 'abcd' ) #NEWLINE#
print ( key , sum ( r [ 2 ] for r in rows ) ) #NEWLINE#
driver . get ( 'http://www.stackoverflow.com' ) #NEWLINE#
sys . stderr = sys . __stderr__ #NEWLINE#
parser . add_argument ( 'bar' , nargs = '*' , default = [ 1 , 2 , 3 ] , help = 'BAR!' ) #NEWLINE#
content = content_file . read ( ) #NEWLINE#
logging . config . dictConfig ( yaml . load ( open ( 'logging.conf' ) ) ) #NEWLINE#
print ( operator . attrgetter ( 'bar.baz.quux' ) ( f ) ) #NEWLINE#
print ( list ( solve ( [ 0 , 1 , - 1 , 3 , 7 , 4 , 5 , 3 , 2 , 4 , 8 ] , 2 ) ) ) #NEWLINE#
fout . write ( str ( chunk ) + '\n\n' ) #NEWLINE#
[ v for elt in stuff for v in ( 'a' , elt ) ] #NEWLINE#
ax . set_ylim ( 0 , 10 ) #NEWLINE#
( inputx [ : , ( None ) ] == np . unique ( inputx ) ) . astype ( float ) #NEWLINE#
conda - - version #NEWLINE#
story . append ( Paragraph ( text , TEXT_STYLE , bulletText = '-' ) ) #NEWLINE#
self . redirect ( 'home.view' ) #NEWLINE#
Page . query . get ( page_id ) . query . delete ( ) #NEWLINE#
field_names = [ i [ 0 ] for i in cursor . description ] #NEWLINE#
ax . set_xlabel ( 'X#SPACE#Label' ) #NEWLINE#
np . allclose ( result_data , result_data2 ) #NEWLINE#
time . sleep ( 1800 ) #NEWLINE#
project_root = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
print ( x . result ( ) ) #NEWLINE#
{ 'animals' : [ 'dog' , 'lots#SPACE#of#SPACE#mice' , 'cat' ] } #NEWLINE#
print ( 'json.dumps({0})#SPACE#=#SPACE#{1}' . format ( data , jsonString ) ) #NEWLINE#
c . fetchall ( ) #NEWLINE#
run ( host = 'localhost' , port = 8080 , debug = True ) #NEWLINE#
print ( len ( unicode_string ) ) #NEWLINE#
pl . plot ( X , Cosine ) #NEWLINE#
[ ( 'blue' , [ 2 , 4 ] ) , ( 'red' , [ 1 ] ) , ( 'yellow' , [ 1 , 3 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
tkMessageBox . showinfo ( 'Key#SPACE#you!' , '#SPACE#' . join ( sys . argv [ 1 : ] ) ) #NEWLINE#
array ( [ [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ] ) #NEWLINE#
hex ( 15 ) #NEWLINE#
self . assertEqual ( dt , osw , 'walk()#SPACE#currentdir' ) #NEWLINE#
[ 0 , 1 , 1 , 0 , 0 , 0 ] , #NEWLINE#
Peak ( ) #NEWLINE#
{ 'a' : 1 , 'c' : { 'x' : [ 1 , 2 , 3 ] } , 'b' : 'abc' } #NEWLINE#
raise ValueError ( 'Too#SPACE#many#SPACE#command#SPACE#line#SPACE#arguments' ) #NEWLINE#
agent_list = [ list ( ast . literal_eval ( line ) ) for line in f ] #NEWLINE#
os . system ( 'pkill#SPACE#-TERM#SPACE#-P#SPACE#{pid}' . format ( pid = 12345 ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
data [ 'Value' ] == True #NEWLINE#
print ( list ( set ( a ) . difference ( b ) ) [ : 3 ] ) #NEWLINE#
df . resample ( 'D' ) . sum ( ) . fillna ( 0 ) . rolling ( n ) . sum ( ) [ - 1 : : - k ] [ : : - 1 ] #NEWLINE#
sess . run ( var ) #NEWLINE#
return struct . unpack ( '>l' , s ) [ 0 ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
cyclic_equiv ( [ 3 , 1 , 2 ] , [ 1 , 2 , 3 ] ) #NEWLINE#
cnxn = pyodbc . connect ( connectString ) #NEWLINE#
plt . subplot ( 122 ) #NEWLINE#
mylist . count ( mylist [ 0 ] ) == len ( mylist ) #NEWLINE#
"""documentation#SPACE#for#SPACE#foo""" #NEWLINE#
"""additional#SPACE#notes#SPACE#for#SPACE#bar""" #NEWLINE#
p . join ( ) #NEWLINE#
r = requests . post ( url , files = files , headers = headers ) #NEWLINE#
list ( '0xff' ) #NEWLINE#
raise ValueError #NEWLINE#
scrapyd #NEWLINE#
new_dict [ v ] . append ( k ) #NEWLINE#
t [ 'foo' ] [ 'bar' ] [ 'baz' ] #NEWLINE#
encoded = base64 . b64encode ( open ( 'filename.png' , 'rb' ) . read ( ) ) #NEWLINE#
avg . append ( sum ( d [ key ] ) / len ( d [ key ] ) ) #NEWLINE#
l = [ 'element1\t0238.94' , 'element2\t2.3904' , 'element3\t0139847' ] #NEWLINE# [ i . split ( '\t' , 1 ) [ 0 ] for i in l ] #NEWLINE#
testData [ 'value' ] . str . contains ( testData [ 'value' ] [ 0 ] ) #NEWLINE#
string . Template ( 'I#SPACE#like#SPACE#$food' ) . substitute ( food = 'spinach' ) #NEWLINE#
return { k : v for k , v in list ( d [ 'item' ] . items ( ) ) if k in l } #NEWLINE#
{ 'MinimumRate' : 14 , 'CanGoNext' : 1 , 'CanPause' : 0 } #NEWLINE#
list ( merge ( list1 , list2 ) ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
{ { form . content ( ) } } #NEWLINE#
ax . legend ( numpoints = 1 , loc = 'upper#SPACE#left' ) #NEWLINE#
df . set_index ( 'A' ) . reindex ( new_index ) #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
df [ 'diffs' ] = df . groupby [ 'ticker' ] [ 'value' ] . transform ( np . diff ) #NEWLINE#
df . dropna ( thresh = df . shape [ 1 ] - 7 ) #NEWLINE#
lines . sort ( key = extract_time , reverse = True ) #NEWLINE#
parser . parse_args ( [ '--arg2' , 'bar' ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
return { 'format_list' : format_list } #NEWLINE#
return s [ : 4 ] + '-' + s [ 4 : 6 ] + '-' + s [ 6 : ] #NEWLINE#
sys . path . insert ( 0 , os . path . join ( 'BASE_DIR' , 'apps' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = np . array ( df . C ) #NEWLINE#
dsub = df1 [ 'x1' ] . reset_index ( drop = True ) . sub ( df2 [ 'x2' ] . reset_index ( drop = True ) ) #NEWLINE#
soup . find ( 'valid' ) #NEWLINE#
median ( [ 1 , 3 , 5 ] ) #NEWLINE#
return HttpResponse ( 'email_two' ) #NEWLINE#
lst . sort ( key = attrgetter ( 'date' ) , reverse = True ) #NEWLINE#
from functools import reduce #NEWLINE# return int ( reduce ( mul , ( Fraction ( n - i , i + 1 ) for i in range ( k ) ) , 1 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
lambda name : ( name [ 0 ] , - len ( name ) , name ) #NEWLINE#
a . set_xticklabels ( [ '1' , '2' , '3' , '4' , '5' ] , minor = True ) #NEWLINE#
print ( nodes [ 0 ] . firstChild . nodeValue ) #NEWLINE#
cv2 . imshow ( 'colorhist' , h ) #NEWLINE#
__init__ . py #NEWLINE#
df . stack ( ) . str . replace ( '#SPACE#' , '_' ) . unstack ( ) #NEWLINE#
import sys #NEWLINE# a = [ sys . intern ( 'foo' . replace ( 'o' , '1' ) ) for a in range ( 0 , 1000000 ) ] #NEWLINE#
parser . add_argument ( '-v' , '--value' , type = convertvalues ) #NEWLINE#
cur . execute ( 'create#SPACE#table#SPACE#test#SPACE#(timecol#SPACE#timeobj)' ) #NEWLINE#
sorted ( list ( d . items ( ) ) , key = foo ) #NEWLINE#
d . pop ( None , None ) #NEWLINE#
session . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
dateobject = datetime . date . today ( ) #NEWLINE# datetime . datetime . combine ( dateobject , datetime . time ( ) ) #NEWLINE#
bytearray ( hex_data ) #NEWLINE#
final_data [ cnames [ i ] ] = np . zeros ( ( nalpha , nmach , nbeta , nalt ) ) #NEWLINE#
hello . helloworld ( ) #NEWLINE#
Motifs . insert ( x , Motif ) #NEWLINE#
main ( ) #NEWLINE#
tree = ET . fromstring ( msg ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 ] ] #NEWLINE#
[ { 'key1' : 'value1' , 'key2' : 'value2' , 'key3' : 'value3' } , { 'key4' : 'value4' , #NEWLINE# 'key5' : 'value5' } ] #NEWLINE#
list ( zip ( foo , bar ) ) #NEWLINE#
[ x for x in range ( LOW , HIGH ) if len ( set ( str ( x ) ) ) == len ( str ( x ) ) ] #NEWLINE#
print ( '' . join ( [ '_' , '_' , '_' , '_' ] ) ) #NEWLINE#
[ 1 , 2 , 3 ] [ : 5 ] #NEWLINE#
13.09409 , 12.18347 , 11.33447 , 10.32184 , 9.544922 , 8.813385 , 8.181152 #NEWLINE#
db . session . commit ( ) #NEWLINE#
print ( variable , '=' , repr ( eval ( variable ) ) ) #NEWLINE#
sys . modules [ 'numpy' ] = None #NEWLINE#
nx . single_source_shortest_path_length ( G , source = i , cutoff = p ) #NEWLINE#
self . _file . close ( ) #NEWLINE#
s . decode ( 'ascii' ) #NEWLINE#
s = serial . Serial ( '/dev/ttyACM0' , 115200 , timeout = 2 ) #NEWLINE#
return request . user #NEWLINE#
categories = { k : ( sum ( v ) / len ( v ) ) for k , v in list ( categories . items ( ) ) } #NEWLINE#
cv . NamedWindow ( 'Target' , 1 ) #NEWLINE#
logging . setLoggerClass ( ColoredLogger ) #NEWLINE#
return flask . render_template ( 'page.html' ) #NEWLINE#
d > timedelta ( minutes = 1 ) #NEWLINE#
p2 = sql . read_frame ( 'select#SPACE#*#SPACE#from#SPACE#price2' , cnx ) #NEWLINE#
image . save ( 'output2.png' ) #NEWLINE#
choices = [ 'Arkansas' , 'Manchuria' , 'Bengal' , 'Baja#SPACE#California' ] #NEWLINE#
logging . debug ( 'detect#SPACE#mimetypes#SPACE#faild#SPACE#because#SPACE#%s' , e ) #NEWLINE#
ftp . cwd ( 'testing123' ) #NEWLINE#
hashlib . md5 ( 'thecakeisalie' ) . hexdigest ( ) #NEWLINE#

plt . xticks ( list ( range ( 3 ) ) , [ 'A' , 'Big' , 'Cat' ] , color = 'red' ) #NEWLINE#
print ( json . dumps ( obj , indent = 2 ) ) #NEWLINE#
print ( output . getvalue ( ) == open ( 'test.png' , 'rb' ) . read ( ) ) #NEWLINE#
SendKeys . SendKeys ( '\n{CAPSLOCK}\n' ) #NEWLINE#
mlab . show ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
np . allclose ( omega , slicing_summing ( a , b , c ) ) #NEWLINE#
Popen ( cmd , shell = True , cwd = newpath ) #NEWLINE#
re . sub ( '("[^"]*")|delhi' , lambda m : m . group ( 1 ) if m . group ( 1 ) else '' , a ) #NEWLINE#
conn . commit ( ) #NEWLINE#
rdd . collect ( ) #NEWLINE#
print ( filename . rsplit ( '.' , 1 ) [ 0 ] ) #NEWLINE#
[ '' . join ( v ) for k , v in groupby ( s ) if k != '-' ] #NEWLINE#
win32clipboard . OpenClipboard ( ) #NEWLINE#
window . show ( ) #NEWLINE#
[ a for b , b in list ( params . items ( ) ) ] #NEWLINE#
mylist = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
func ( a = 1 , b = 2 , c = 3 ) #NEWLINE#
hex ( int ( time . time ( ) ) ) #NEWLINE#
np . repeat ( np . arange ( 0 , len ( breaks ) - 1 ) , np . diff ( breaks ) ) #NEWLINE#
response = requests . get ( url , headers = headers ) #NEWLINE#
mlab . show ( ) #NEWLINE#
type ( a ) ( b ) #NEWLINE#
[ tuple ( reversed ( x ) ) for x in tuples ] #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
dicts = [ dict ( zip ( fields , d ) ) for d in data ] #NEWLINE#
os . environ [ 'SPARK_HOME' ] = '/path/to/spark/root' #NEWLINE# sys . path . append ( os . path . join ( os . environ [ 'SPARK_HOME' ] , 'bin' ) ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
student_users = Students . objects ( name = 'Tom' ) . distinct ( 'class' ) #NEWLINE#
print ( bcrypt . hashpw ( password , bcrypt . gensalt ( ) ) ) #NEWLINE#
os . chdir ( 'C:\\Users\\me\\Documents' ) #NEWLINE#
print ( team . __dict__ == team2 . __dict__ ) #NEWLINE#
subprocess . call ( [ 'pdftotext' , 'forms.pdf' , 'output' ] ) #NEWLINE#
std_2 = numpy . std ( list_size_2 , axis = 1 ) #NEWLINE#
type ( C3 ) #NEWLINE#
df . loc [ ( idx [ : , : , ( 'H' ) ] ) , : ] #NEWLINE#
return '\n' . join ( trimmed ) #NEWLINE#
print ( bytes . decode ( 'utf-8' ) ) #NEWLINE#
w . pack ( ) #NEWLINE#
output = p . communicate ( ) [ 0 ] #NEWLINE#
sum ( len ( word ) for word in wordslist ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
"""""" . join ( hashlist ) #NEWLINE#
df . TIMESTAMP . dt . hour #NEWLINE#
menu . add_cascade ( label = 'Commands' , menu = filemenu ) #NEWLINE#
bView = np . array ( [ [ 0 , 3 ] , [ 3 , 0 ] ] ) . flatten ( ) . view ( mydtype ) #NEWLINE#
ax . margins ( 0.1 ) #NEWLINE#
parser . add_argument ( '-s' , '--school' , default = 'My#SPACE#U' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
PyArray_ENABLEFLAGS ( arr , NPY_ARRAY_OWNDATA ) #NEWLINE#
return sum ( num for num in numbers if num % 2 == 1 ) #NEWLINE#
re . sub ( '([A-Z])' , '#SPACE#\\1' , s ) . split ( ) #NEWLINE#
return np . append ( xs , arr [ i ] ) #NEWLINE#
return scipy . signal . fftconvolve ( im1_gray , im2_gray [ : : - 1 , : : - 1 ] , mode = 'same' ) #NEWLINE#
fobj = open ( '../filename' , 'w' ) #NEWLINE#
s = numpy . fromstring ( s , numpy . int16 ) / 10 * 5 #NEWLINE#
app . config [ 'CORS_HEADERS' ] = 'Content-Type' #NEWLINE#
graph . write_png ( 'somefile.png' ) #NEWLINE#
start_time = start_time . replace ( minute = ceil_to , second = 0 , microsecond = 0 ) #NEWLINE#
cursor . execute ( 'SET#SPACE#search_path#SPACE#TO#SPACE#public,#SPACE#shared;' ) #NEWLINE#
dict_with_ints = dict ( ( k , int ( v ) ) for k , v in dict_with_strs . items ( ) ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
df [ ( df . col . str [ 0 ] [ : , ( None ) ] == [ 't' , 'c' ] ) . any ( 1 ) ] #NEWLINE#
[ k for k , v in list ( self . __class__ . __dict__ . items ( ) ) if type ( v ) is property ] #NEWLINE#
rdd1 = sc . parallelize ( [ ( 'foo' , 1 ) , ( 'bar' , 2 ) , ( 'baz' , 3 ) ] ) #NEWLINE# rdd2 = sc . parallelize ( [ ( 'foo' , 4 ) , ( 'bar' , 5 ) , ( 'bar' , 6 ) ] ) #NEWLINE#
x [ ( slice ( None ) , ) + t ] #NEWLINE#
print ( line , end = '#SPACE#' , file = file ) #NEWLINE#
conn . send ( 'Quit' ) #NEWLINE#
distance = skfmm . distance ( m ) #NEWLINE#
print ( d [ 'a' ] ) #NEWLINE#
urllib . request . urlopen ( url ) #NEWLINE#
df . plot ( kind = 'bar' , stacked = True , ax = fig . gca ( ) ) #NEWLINE#
counts . sort ( key = operator . itemgetter ( 1 ) ) #NEWLINE#
app = Flask ( __name__ , static_url_path = '/s' ) #NEWLINE#
transaction . commit ( ) #NEWLINE#
[ ( 2 , 3 ) , ( 2 , - 1 ) , ( - 2 , 1 ) , ( 4 , 1 ) ] #NEWLINE#
print ( get_currency_subunit ( 'TND' ) ) #NEWLINE#
ax . set_yticks ( [ 1 , 2 , 8 ] ) #NEWLINE#
my_array = my_array . reshape ( ( 50 , 50 ) ) #NEWLINE#
test . pop ( ) #NEWLINE#
return int ( x ) #NEWLINE#
p . close ( ) #NEWLINE#
plt . imshow ( filtered_array , cmap = plt . cm . gray , interpolation = 'nearest' ) #NEWLINE#
plt . xlim ( [ - 400 , 400 ] ) #NEWLINE#
requests . get ( 'http://httpbin.org/' ) #NEWLINE#
print ( my_list [ 1 : : 2 ] ) #NEWLINE#
df . replace ( { 'set' : mapping , 'tesst' : mapping } ) #NEWLINE#
ax2 . yaxis . set_visible ( False ) #NEWLINE#
len ( x ) >= 4 #NEWLINE#
process . stdin . flush ( ) #NEWLINE#
app . ActiveWorkbook . ActiveSheet . Cells ( r , c ) . Formula #NEWLINE#
not any ( not isinstance ( y , int ) for y in [ 1 , 2 , 3 ] ) #NEWLINE#
return Frog ( ** fields ) #NEWLINE#
[ ( 0 if i < 0 else i ) for i in a ] #NEWLINE#
subprocess . check_call ( cmd , startupinfo = startupinfo ) #NEWLINE#
"""(https?://)?(www\\.)?youtube\\.(com|nl)/watch\\?v=([\\w-]+)(&.*?)?(?=[^-\\w&=%])""" #NEWLINE#
g . add_argument ( '-b' , action = 'store_true' , default = False ) #NEWLINE#
smagnoni #NEWLINE#
print ( fn ( 3 ) ) #NEWLINE#
d . setdefault ( year , [ ] ) . append ( value ) #NEWLINE#
db [ nosql ] . insert ( post ) #NEWLINE#
[ 0.005961179733276367 , 0.005975961685180664 , 0.005918025970458984 ] #NEWLINE#
lst [ 3 ] [ 0 ] [ 0 ] #NEWLINE#
name = 'hello' #NEWLINE# globals ( ) [ name ] = 10 #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 ] , #NEWLINE#
plt . show ( ) #NEWLINE#
[ child for child in soup . td . children if isinstance ( child , str ) ] #NEWLINE#
print ( dt . date ( ) - timedelta ( days = 1 ) ) #NEWLINE#
os . makedirs ( 'c:/your/full/path' ) #NEWLINE#
[ f for f in list ( globals ( ) . values ( ) ) if inspect . isfunction ( f ) ] #NEWLINE#
dg . Items . Add ( value ) #NEWLINE#
ax . get_xaxis ( ) . set_ticklabels ( [ ] ) #NEWLINE#
s . save ( ) #NEWLINE#
app . register_blueprint ( mod ) #NEWLINE#
output . write ( data ) #NEWLINE#
outputstr = ',' . join ( inputstr ) #NEWLINE#
re . sub ( '\\B' , '-' , string ) #NEWLINE#
return '#SPACE#' . join ( content [ : length + 1 ] . split ( '#SPACE#' ) [ 0 : - 1 ] ) + suffix #NEWLINE#
divtd ( datetime . timedelta ( hours = 12 ) , datetime . timedelta ( hours = 2 ) ) #NEWLINE#
cubefunction = lambda x : add ( f ( x ) , f ( x ) ) #NEWLINE#
df_out = pd . concat ( [ df , df_v ] , 1 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
super ( Dict , self ) . __setitem__ ( k , v ) #NEWLINE#
sum ( map ( operator . mul , vector1 , vector2 ) ) #NEWLINE#
[ 0 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 ] #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
df . T . squeeze ( ) #NEWLINE#
dict ( ( x , data . count ( x ) ) for x in data ) #NEWLINE#
fileMenu = Menu ( menubar , tearoff = False ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 , 4 ] , [ 1 , 4 , 9 , 16 ] , 'ro' ) #NEWLINE#
return B in ( A [ i : i + len ( B ) ] for i in range ( len ( A ) ) ) #NEWLINE#
dt = datetime . datetime . strptime ( entity2 [ 'a' ] , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
buf . seek ( 0 ) #NEWLINE#
root . bind ( '<Return>' , lambda e , b = b : b . invoke ( ) ) #NEWLINE#
sum ( itertools . starmap ( operator . mul , itertools . combinations ( l , 2 ) ) ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = 80 ) #NEWLINE#
letters [ : : - 1 ] . replace ( ';' , '#SPACE#&#SPACE#' , 1 ) [ : : - 1 ] . replace ( ';' , ',#SPACE#' ) #NEWLINE#
np . array ( [ [ [ 1 , 2 ] , [ 3 ] ] , [ 1 , 2 ] ] , dtype = object ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
my_shelf . close ( ) #NEWLINE#
foo_bar_mod = importlib . import_module ( 'foo#SPACE#bar' ) #NEWLINE#
sortid = request . GET . get ( 'sortid' ) #NEWLINE#
strat2 . execute ( ) #NEWLINE#
main ( ) #NEWLINE#
[ 2.0 , 2.5 , 3.75 , 5.875 , 4.4375 , 4.71875 ] #NEWLINE#
table . to_csv ( 'output.csv' ) #NEWLINE#
msg = MIMEText ( fp . read ( ) ) #NEWLINE#
yourProcess . terminate ( ) #NEWLINE#
x2 = sorted ( x1 , key = lambda t : t [ 1 ] ) #NEWLINE#
conn . close ( ) #NEWLINE#
x = data_3levels . reset_index ( level = 2 , drop = True ) * data_2levels #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
np . diagonal ( np . dot ( b , a ) ) . T #NEWLINE#
plt . subplots_adjust ( top = 0.85 ) #NEWLINE#
product ( [ 'Long' , 'Med' ] , [ 'Yes' , 'No' ] ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
writer . UpdatePipeline ( ) #NEWLINE#
( 'head' , models . ImageField ( upload_to = wrapper ) ) , #NEWLINE#
f . write ( 'new#SPACE#text#SPACE#at#SPACE#end#SPACE#of#SPACE#last#SPACE#line' + os . linesep ) #NEWLINE#
axes [ 0 ] . plot ( x , color = 'lightblue' ) #NEWLINE#
text = text [ : 1 ] + 'Z' + text [ 2 : ] #NEWLINE#
print ( is_json ( '{asdf}' ) ) #NEWLINE#
print ( is_json ( '{"age":100}' ) ) #NEWLINE#
A [ ( [ 0 , 2 ] ) , : , 1 : ] #NEWLINE#
print ( 'the#SPACE#answer#SPACE#is#SPACE#%s' % human_format ( 7436313 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
module2 . py #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
ax1 . plot ( X , Y ) #NEWLINE#
[ k for k , v in G . out_degree ( ) . items ( ) if v > 0 ] #NEWLINE#
subprocess . call ( [ BINARY + '#SPACE#<#SPACE#nul' ] , shell = True ) #NEWLINE#
do_something ( ) #NEWLINE#
s = '{}#SPACE#{}' . format ( 'foo' , 'bar' ) #NEWLINE#
d = OrderedDict ( [ ( 'b' , 2 ) , ( 'a' , 1 ) ] ) #NEWLINE#
datetime . datetime . strptime ( 'apr' , '%b' ) . strftime ( '%B' ) #NEWLINE#
data [ idx == 0 , 0 ] . shape #NEWLINE#
df . set_index ( [ 'celltype' ] , inplace = True ) #NEWLINE#
f . write ( struct . pack ( '<' + 'B' * len ( bytes ) , * bytes ) ) #NEWLINE#
data . columns = [ x . lower ( ) for x in data . columns ] #NEWLINE#
image_blurred = cv2 . GaussianBlur ( image_y , ( 3 , 3 ) , 0 ) #NEWLINE#
[ '' . join ( s ) for s in p ] #NEWLINE#
sys . path . insert ( 0 , 'boto.zip' ) #NEWLINE#
mlab . show ( ) #NEWLINE#
[ doSomethingWith ( ch ) for ch in s ] #NEWLINE#
[ ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 4 ) ] #NEWLINE#
df . values . tolist ( ) #NEWLINE#
print ( ',#SPACE#' . join ( str ( item ) for item in s ) ) #NEWLINE#
s . sum ( ) #NEWLINE#
plt . draw ( ) #NEWLINE#
eval ( "__import__('os').remove('important#SPACE#file')" ) #NEWLINE#
num = int ( '' . join ( map ( str , numList ) ) ) #NEWLINE#
plt . scatter ( x , y , color = rgba_colors ) #NEWLINE#
page = urllib . request . urlopen ( url ) #NEWLINE#
d = datetime . datetime . strptime ( '2013-03-31' , '%Y-%m-%d' ) #NEWLINE#
plt . savefig ( '3hist.png' ) #NEWLINE#
matplotlib . pylab . show ( block = False ) #NEWLINE#
xcode - select - - install #NEWLINE#
{ 'attr4' : 'added' , 'attr2' : None , 'attr3' : 'overridden' , 'attr1' : None } #NEWLINE#
print ( result [ 'source_link' ] ) #NEWLINE#
np . mean ( t , axis = ( 1 , 3 ) ) #NEWLINE#
img . putdata ( data ) #NEWLINE#
service = build ( 'admin' , 'directory_v1' ) #NEWLINE#
max ( [ a for a in yourlist if a [ 2 ] >= 100 ] , key = itemgetter ( 1 ) ) #NEWLINE#
globals ( ) [ 'fullName' ] ( ** argsdict ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
"""<br/>""" . join ( '::#SPACE#' . join ( _ ) for _ in list ( mydict . items ( ) ) ) #NEWLINE#
if form . is_valid ( ) : #NEWLINE# #INDENT# chapter = form . save ( ) #NEWLINE#
( df == 1 ) . any ( axis = 1 ) #NEWLINE#
args = main_parser . parse_args ( ) #NEWLINE#
plt . close ( ) #NEWLINE#
print ( str ( 'Libië' ) ) #NEWLINE#
ax . set_yticks ( np . arange ( data . shape [ 0 ] ) + 0.5 , minor = False ) #NEWLINE#
eval ( input ( ) ) #NEWLINE#
16.4 , 16.5 , 16.7 , 16.8 , 17.0 , 17.1 , 17.8 , 17.7 , 17.6 , 17.4 , 17.5 , 17.3 #NEWLINE#
bar ( ) #NEWLINE#
br . submit ( ) #NEWLINE#
res = g . apply ( lambda x : x . order ( ascending = False ) . head ( 3 ) ) #NEWLINE#
sum ( Counter ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 1 , 6 ] ) . values ( ) ) #NEWLINE#
df = DataFrame ( data ) #NEWLINE#
driver . execute_script ( "$(window.open('https://twitter.com'))" ) #NEWLINE#
[ '' . join ( islice ( it , k ) ) for k in keys ] #NEWLINE#
M . uid ( 'search' , None , 'HEADER#SPACE#Subject#SPACE#"New#SPACE#Order"' ) #NEWLINE#
random . shuffle ( list ( range ( n ) ) ) [ : k ] #NEWLINE#
time . sleep ( 20 ) #NEWLINE#
print ( '%.6s' % ( '%.4f' % n ) ) #NEWLINE#
'%' , 'MHz' , 'GHz' #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
arr = np . fromiter ( gendata ( ) , dtype = '<f8,|S20' ) #NEWLINE#
""",""" . join ( map ( str , l ) ) #NEWLINE#
{ 'username' : 'bob' , 'alias' : 'bobby' , 'avatar' : 'default' , 'fullname' : 'bob' } #NEWLINE#
urllib . request . urlopen ( 'http://www.example.com/login.html' ) #NEWLINE#
mat = hstack ( [ mat [ : , 0 : i ] , mat [ : , i + 1 : ] ] ) #NEWLINE#
tree = etree . parse ( 'filename.xml' ) #NEWLINE#
self . response . out . write ( zipstream . getvalue ( ) ) #NEWLINE#
parse_qs ( urlparse ( url ) . query ) #NEWLINE#
ax . plot ( x , 2 * x ** 2 , color = 'b' , label = 't#SPACE#=#SPACE#50' ) #NEWLINE#
o , e = p . communicate ( 'break#SPACE#scriptname.py:lineno' ) #NEWLINE#
p . xpath ( '//ul[@class="errorList"]/li/text()' ) #NEWLINE#
shutil . copyfile ( 'file_to_read.pdf' , 'file_to_save.pdf' ) #NEWLINE#
set ( [ 1 , 2 ] ) in { 1 , 2 , frozenset ( [ 1 , 2 ] ) } #NEWLINE#
arr . insert ( 0 , 'D' ) #NEWLINE#
gtk . gdk . notify_startup_complete ( ) #NEWLINE#
with open ( 'Output.txt' , 'w' ) as text_file : #NEWLINE# #INDENT# text_file . write ( 'Purchase#SPACE#Amount:#SPACE#{0}' . format ( TotalAmount ) ) #NEWLINE#
print ( lel . text . replace ( '"' , '' ) ) #NEWLINE#
data [ 'maps' ] [ 0 ] [ 'id' ] #NEWLINE#
print ( getFiletime ( 13024882639633631 ) . strftime ( '%a,#SPACE#%d#SPACE#%B#SPACE#%Y#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
numpy . where ( your_array_name != 0 , 1 , 0 ) . sum ( ) #NEWLINE#
chr ( ord ( 'c' ) + 1 ) #NEWLINE#
setattr ( self , property , getattr ( self , property ) + amount ) #NEWLINE#
print ( '{0}#SPACE#{1}#SPACE#{2}' . format ( * x ) ) #NEWLINE#
print ( 'Main#SPACE#done' ) #NEWLINE#
self . cursor . execute ( query ) #NEWLINE#
random . choice ( states . split ( ) ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
print ( j [ 'places' ] [ 1 ] [ 'post#SPACE#code' ] ) #NEWLINE#
yield os . path . abspath ( os . path . join ( dirpath , f ) ) #NEWLINE#
random . sample ( list ( D . items ( ) ) , K ) #NEWLINE#
print ( time . strptime ( line , '%d/%b/%Y:%H:%M:%S' ) ) #NEWLINE#
active_id = hex ( ewmh . EWMH ( ) . getActiveWindow ( ) . id ) #NEWLINE#
self . foo . kill ( ) #NEWLINE#
results = [ [ 1 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 1 , 1 , 0 ] ] #NEWLINE#
classifier . classify ( test_sent_features ) #NEWLINE#
scipy . signal . filtfilt #NEWLINE#
p . stdout . close ( ) #NEWLINE#
results = map ( int , results ) #NEWLINE#
img . save ( fpath , 'image/png' , quality = 100 , optimize = True ) #NEWLINE#
cursor . close ( ) #NEWLINE#
a = forms . CharField ( max_length = 20 ) #NEWLINE#
print ( a [ '1' ] ) #NEWLINE#
zelib = ctypes . CDLL ( 'testlib.so' ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'main_page' ) ) #NEWLINE#
[ ( m . start ( 0 ) , m . end ( 0 ) ) for m in re . finditer ( '(AA+B+)|(ABB+)' , data ) ] #NEWLINE#
sum ( p ) * ( c [ 1 ] - c [ 0 ] ) #NEWLINE#
self . process . stdin . flush ( ) #NEWLINE#
pipeline . fit ( X , y ) #NEWLINE#
'cug' , 'ccu' , 'ccc' , 'cca' , 'ccg' , 'cau' , 'cac' , 'caa' , 'cag' , 'cgu' #NEWLINE#
'cgc' , 'cga' , 'cgg' , 'auu' , 'auc' , 'aua' , 'acu' , 'acc' , 'aca' , 'acg' #NEWLINE#
'aau' , 'aac' , 'aaa' , 'aag' , 'agu' , 'agc' , 'aga' , 'agg' , 'guu' , 'guc' #NEWLINE#
'gua' , 'gug' , 'gcu' , 'gcc' , 'gca' , 'gcg' , 'gau' , 'gac' , 'gaa' , 'gag' #NEWLINE#
sum ( 1 for _ in re . finditer ( '(?=11)' , text ) ) #NEWLINE#
msg [ 'reply-to' ] = 'email2@domain2.com' #NEWLINE#
df4 = pandas . concat ( [ df3 , df1 ] , axis = 1 ) #NEWLINE#
print ( type ( a [ 0 ] [ 'tuple' ] ) ) #NEWLINE#
f . write ( response . content ) #NEWLINE#
data = input ( '>#SPACE#' ) #NEWLINE#
array = np . array ( [ int ( x ) for x in s . split ( '|' ) ] ) #NEWLINE#
im . save ( newpathname ) #NEWLINE#
Counter ( chain . from_iterable ( map ( set , listOfLists ) ) ) #NEWLINE#
temp_list = [ i for i in squares ( ) ] #NEWLINE#
window . SetFocus ( ) #NEWLINE#
mask1 &= ~ mask2 #NEWLINE#
print ( 'File#SPACE#on#SPACE#disk#SPACE#after#SPACE#download:' , len ( f . read ( ) ) ) #NEWLINE#
s [ s . str . endswith ( 'dd' ) ] . values #NEWLINE#
self . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
query . filter ( '__key__#SPACE#>=' , Key . from_path ( 'User' , 'abc' ) ) #NEWLINE#
evt . Skip ( ) #NEWLINE#
return ( idx [ 1 : : 2 ] - idx [ : : 2 ] ) . max ( ) #NEWLINE#
print ( ctypes . windll . shell32 . IsUserAnAdmin ( ) ) #NEWLINE#
inv . fill ( ( 255 , 255 , 255 , 255 ) ) #NEWLINE#
print ( collections . Counter ( words ) ) #NEWLINE#
stream = io . StringIO ( str ( request . FILES [ 'foo' ] . read ( ) ) , newline = None ) #NEWLINE#
uniq = [ x for x in a if x not in seen and not seen . add ( x ) ] #NEWLINE#
os . path . getmtime ( '..\\path\to\x0cile' ) #NEWLINE#
[ 'Jones,#SPACE#Fred' , 'Martin,#SPACE#Ben#SPACE#Jack' , 'Smith,#SPACE#John' ] #NEWLINE#
pd . concat ( [ T , df ] ) #NEWLINE#
return getattr ( obj , name ) #NEWLINE#
it = pool . imap_unordered ( do , glob . iglob ( aglob ) , chunksize = 100 ) #NEWLINE#
array ( [ [ 3.5 , 5.5 , 7.5 ] , [ 15.5 , 17.5 , 19.5 ] , [ 27.5 , 29.5 , 31.5 ] ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
line = line . rstrip ( ) #NEWLINE#
someMethod . __code__ . co_argcount #NEWLINE#
lst . append ( 'hello' ) #NEWLINE#
sorted ( li , key = itemgetter ( 1 ) ) #NEWLINE#
plt . clf ( ) #NEWLINE#
return serve_pil_image ( img ) #NEWLINE#
cursor = db . test . find ( timeout = False ) #NEWLINE#
solution . loc [ df . index ] #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE# sum ( i * i for i in l ) #NEWLINE#
foo [ i ] , foo [ j ] = foo [ j ] , foo [ i ] #NEWLINE#
sys . stdout . write ( line . rstrip ( ) + '#SPACE#{}\n' . format ( arg ) ) #NEWLINE#
w . writerow ( [ d [ k ] for k in fieldnames ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
raise Exception ( 'The#SPACE#length#SPACE#of#SPACE#sentence#SPACE#+#SPACE#padding(s)#SPACE#<#SPACE#skip' ) #NEWLINE#
find_majority ( [ 1 , 1 , 1 , 1 , - 1 , - 1 , - 1 , 0 ] ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
driver . manage ( ) . window ( ) . maximize ( ) #NEWLINE#
a = np . empty ( ( 2 , 3 , 5 ) ) #NEWLINE#
gnb . fit ( X , y ) #NEWLINE#
matches = [ x for x in a if x in str ] #NEWLINE#
check_output ( 'dir#SPACE#C:' , shell = True ) . decode ( ) #NEWLINE#
i = __import__ ( 'matplotlib.text' ) #NEWLINE#
d [ 'a' ] #NEWLINE#
list ( it . product ( ( '1' , '11' ) , ( '2' , '22' ) , ( '3' , '33' ) ) ) #NEWLINE#

mysql_cursor . execute ( 'call#SPACE#get_lastpoll();' ) #NEWLINE#
sorted ( templist , key = int , reverse = True ) #NEWLINE#
( 0 , '%*.*s' ) , ( 8 , '%.3d' ) , ( 15 , '%lC' ) , ( 21 , '%s' ) , ( 23 , '%%' ) , ( 25 , '%02d' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
d = defaultdict ( lambda : defaultdict ( lambda : defaultdict ( list ) ) ) #NEWLINE#
return lxml . html . fragments_fromstring ( 'some#SPACE#sample#SPACE#<em>text</em>' ) #NEWLINE#
s . get ( 'https://93.184.216.34' , headers = { 'Host' : 'example.org' } ) #NEWLINE#
s = 'badcfe' #NEWLINE# """""" . join ( [ s [ x : x + 2 ] [ : : - 1 ] for x in range ( 0 , len ( s ) , 2 ) ] ) #NEWLINE#
self . assertEqual ( len ( results ) , 3 ) #NEWLINE#
lis = [ ( 1 , 'a' ) , ( 3 , 'c' ) , ( 4 , 'e' ) , ( - 1 , 'z' ) ] #NEWLINE#
cursor . close ( ) #NEWLINE#
rgb_to_name ( ( 0 , 0 , 0 ) ) #NEWLINE#
"""hurr..\\n..durr""" . decode ( 'string-escape' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
graph = facebook . GraphAPI ( oauth_access_token ) #NEWLINE#
filtered_objs = [ obj for obj in objs if 'b' in obj [ 'categories' ] ] #NEWLINE#
y [ : ] [ : : 2 ] #NEWLINE#
df [ 'Adj#SPACE#Close' ] = df [ 'Adj#SPACE#Close' ] . interpolate ( ) #NEWLINE#
db . Execute ( 'CREATE#SPACE#TABLE#SPACE#test#SPACE#(ID#SPACE#Text,#SPACE#numapples#SPACE#Integer)' ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
commands [ com ] ( * args ) #NEWLINE#
U = struct . unpack ( '999H' , B ) #NEWLINE#
file . flush ( ) #NEWLINE#
print ( in_nested_list ( x , [ 1 , 2 , 3 ] ) ) #NEWLINE#
np . add . reduceat ( X [ : , ( idx0 ) ] , cut_idx , axis = 1 ) #NEWLINE#
ax . plot ( x , x , color = 'red' , ls = '-' , label = '$P_1(x)$' ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
return dict ( zip ( tokens [ 0 : : 2 ] , tokens [ 1 : : 2 ] ) ) #NEWLINE#
return len ( set ( items ) ) == 1 #NEWLINE#
{ { price | intcomma } } #NEWLINE#
[ 0 , 1 , 'a' , 3 , 4 ] , [ 0 , 1 , 2 , 3 , 4 ] #NEWLINE#
upper_blue = np . array ( [ 130 , 255 , 255 ] , dtype = np . uint8 ) #NEWLINE#
setattr ( self , name , value ) #NEWLINE#
writer = csv . writer ( csvoutput , lineterminator = '\n' ) #NEWLINE#
pd . DataFrame ( [ s1 , s2 ] ) . min ( ) #NEWLINE#
urlpatterns += patterns ( 'contact.views' , ( '^/contact/search/$' , 'search' ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
soup . find_all ( 'div' , nested_img ) #NEWLINE#
cnxn . close ( ) #NEWLINE#
"""hi""" . ljust ( 10 ) #NEWLINE#
tracer . run ( 'main()' ) #NEWLINE#
valid = re . match ( '^[\\w-]+$' , str ) is not None #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
df . astype ( int ) #NEWLINE#
ax . legend ( ) #NEWLINE#
kana = a + k + g + s + z + t + d + n + h + b + p + m + y + n #NEWLINE#
df2 . mi . value_counts ( ) . reset_index ( name = 'count' ) . query ( 'count#SPACE#>#SPACE#5' ) [ 'index' ] #NEWLINE#
l1 . append ( [ 4 , 5 , 6 ] ) #NEWLINE#
time . sleep ( ( future - t ) . seconds ) #NEWLINE#
signal . signal ( signal . SIGALRM , original_handler ) #NEWLINE#
self . companion . stdin . write ( '\n' ) #NEWLINE#
x , y = a [ 0 : 2 ] #NEWLINE#
round ( ( len ( array ) - 1 ) * ( percentile / 100.0 ) ) #NEWLINE#
print ( response . text ) #NEWLINE#
return super ( C , cls ) . __new__ ( cls , x , y ) #NEWLINE#
return min ( items , key = lambda x : abs ( x - pivot ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
logging . info ( 'Hello' ) #NEWLINE#
len ( good_things [ 'fruit' ] [ 'apple' ] [ 'color' ] ) #NEWLINE#
a [ 3 : - 1 ] #NEWLINE#
a [ 2 ] = 'm' #NEWLINE# print ( '' . join ( a ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( f . getvalue ( ) ) #NEWLINE#
numpy . all ( product1 == product2 ) #NEWLINE#
regex = re . compile ( '[%s]' % re . escape ( string . punctuation ) ) #NEWLINE#
y = 3 * x ** 2 + 5 + 2 * np . sin ( x ) #NEWLINE#
print ( model . stats ( ) [ 'std_dev' ] [ 'mean' ] ) #NEWLINE#
with open ( 'out.txt' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( something ) #NEWLINE#
raise RuntimeError ( 'Database#SPACE#name#SPACE#has#SPACE#already#SPACE#been#SPACE#set.' ) #NEWLINE#
return User . query . get ( id ) #NEWLINE#
Index ( [ 'time' , 'contact' , 'address' ] , dtype = 'object' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
re . findall ( '"\\s*([^"]*?)\\s*"' , x ) #NEWLINE#
values = [ d [ k ] for k in keys ] #NEWLINE#
return g . groupby ( 'end_date' ) [ 'measure' ] . sum ( ) #NEWLINE#
df . where ( df . a . isNull ( ) ) . count ( ) #NEWLINE#
plt . gca ( ) . set_ylim ( bottom = 0 ) #NEWLINE#
a . symmetric_difference ( b ) #NEWLINE#
os . system ( 'which#SPACE#obscurepackagenotgoingtobefound' ) #NEWLINE#
{ v : k for k , vs in list ( extension_to_type_mapping . items ( ) ) for v in vs } #NEWLINE#
"""#TAB#""" . join ( str ( x ) for x in nums ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
"""Linda#SPACE#Lost#SPACE#(Secret#SPACE#Icecone#SPACE#Incorporated)#SPACE#lost#SPACE#their#SPACE#Kronos#SPACE#in#SPACE#Osmon#SPACE#(The#SPACE#Forge).#SPACE#Final#SPACE#Blow#SPACE#by#SPACE#Liberty#SPACE#Prime#SPACE#(Exit-Strategy)#SPACE#flying#SPACE#in#SPACE#a#SPACE#Arbitrator""" #NEWLINE#
[ '1,000' , '$0.05' , '$0.05' , '1,000' ] #NEWLINE#
map ( sum , zip ( ( 1 , 2 ) , ( 3 , 4 ) ) ) #NEWLINE#
self . request . query_string #NEWLINE#
array ( [ [ 0 , 1 , 2 , 3 ] , [ 4 , 5 , 6 , 7 ] , [ 8 , 21 , 10 , 11 ] ] ) #NEWLINE#
new = str [ : 1 ] + new + str [ 6 : ] #NEWLINE#
print ( 'Here' ) #NEWLINE#
merged = df2 . join ( df1 , rsuffix = '_y' ) #NEWLINE#
parser . add_argument ( '--foo' ) #NEWLINE#
print ( sys . exit . __doc__ ) #NEWLINE#
im . show ( ) #NEWLINE#
log . info ( 'Reset#SPACE#at#SPACE#me' ) #NEWLINE#
pdfkit . from_url ( 'http://google.com' , 'out.pdf' ) #NEWLINE#
return render_template ( 'index.html' ) #NEWLINE#
"""angle#SPACE#brackets""" #NEWLINE#
print ( f ( 4 ) ) #NEWLINE#
df [ 'recession' ] = df [ 'recession' ] . ffill ( ) . fillna ( False ) #NEWLINE#
json . dumps ( data ) #NEWLINE#
header = input . readline ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
tn . read_until ( 'Password:#SPACE#' ) #NEWLINE#
x [ ( list ( range ( 0 , i ) ) + list ( range ( i + 1 , x . shape [ 0 ] ) ) ) , : , : ] #NEWLINE#
main ( ) #NEWLINE#
proc . stdin . close ( ) #NEWLINE#
out , err = p . communicate ( ) #NEWLINE#
pygame . sprite . Sprite . __init__ ( self ) #NEWLINE#
testdataframe2 . plot ( style = styles2 , ax = ax ) #NEWLINE#
np . log ( absd , absd ) #NEWLINE#
df [ 'ratio' ] = df [ 'ibm#SPACE#value' ] / df [ 'ford#SPACE#value' ] #NEWLINE#
plt . contour ( data ) #NEWLINE#
ax . patch . set_visible ( False ) #NEWLINE#
server . login ( username , password ) #NEWLINE#
map = [ [ a , b ] for a , b in map if a > 0 and b > 0 ] #NEWLINE#
set ( [ 'apple' ] ) #NEWLINE#
print ( Digit [ i ] ) #NEWLINE#
re . sub ( '\\ba\\+\\s' , 'aplus#SPACE#' , 'a+b' ) #NEWLINE#
print ( doc . find ( 'web:total' ) . string ) #NEWLINE#
{ { car . date_of_manufacture | strftime } } #NEWLINE#
cherrypy . quickstart ( Root ( ) , '/' , config ) #NEWLINE#
print ( 'unicode#SPACE#string' ) #NEWLINE#
test = float ( 'inf' ) #NEWLINE#
"""hello""" . encode ( 'hex' ) #NEWLINE#
df . set_index ( [ 'Date' , 'Store' ] ) . unstack ( 'Store' ) . plot ( legend = False ) #NEWLINE#
panel . pack ( side = 'bottom' , fill = 'both' , expand = 'yes' ) #NEWLINE#
df . iloc [ : , ( n ) ] #NEWLINE#
ax . get_xaxis ( ) . set_ticks ( [ 2 , 4 , 6 , 8 ] ) #NEWLINE#
xprt . excel ( ) #NEWLINE#
run ( ) #NEWLINE#
data . append ( ruamel . yaml . load ( open ( file_name ) ) ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSAFLUSH , oldterm ) #NEWLINE#
bytes ( b ) . decode ( 'utf-16' ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 ] + [ 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
tostring ( element ) . replace ( '<%s>' % element . tag , '' , 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
records . update ( ( k , 0 ) for k , v in records . items ( ) if v is None ) #NEWLINE#
( object [ 'value' ] for object in test_data ) #NEWLINE#
plt . ylabel ( 'Hour' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US' ) #NEWLINE#
~ a . any ( axis = 1 ) #NEWLINE#
subprocess . Popen ( cmd_str , shell = True ) #NEWLINE#
pool . terminate ( ) #NEWLINE#
function ( [ 2 , 3 ] ) #NEWLINE#
print ( '{0:<20s}#SPACE#{1}' . format ( key , value ) ) #NEWLINE#
os . environ [ 'something' ] #NEWLINE#
process . terminate ( ) #NEWLINE#
Test . __init__ ( ) #NEWLINE#
bisect . insort ( L , X ) #NEWLINE#
con . set_option ( ldap . OPT_X_TLS_REQUIRE_CERT , ldap . OPT_X_TLS_NEVER ) #NEWLINE#
print ( line ) #NEWLINE#
super ( MyModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
result = self . cur . executemany ( sql , data ) #NEWLINE#
driver . find_element_by_class_name ( 'button-green' ) . click ( ) #NEWLINE#
plt . figure ( ) #NEWLINE#
np . argwhere ( ( Ax == Bx . min ( ) ) & ( Ay == By . min ( ) ) ) #NEWLINE#
return np . lib . stride_tricks . as_strided ( a , shape = ( nrows , L ) , strides = ( S * n , n ) ) #NEWLINE#
s . stack ( ) . reset_index ( level = 1 , drop = True ) #NEWLINE#
[ 'Joe' , ',' , 'Dave' , ',' , 'Professional' , ',' , 'Ph.D.' , 'and' , 'Someone#SPACE#else' ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . ylim ( 0 , 20 ) #NEWLINE#
defectdetails [ i ] [ 0 ] == defectdetailscopy [ 30 ] [ 0 ] #NEWLINE#
df . A . isin ( df . B . to_dict ( 'list' ) ) . all ( 1 ) | df . B . isin ( df . A . to_dict ( 'list' ) ) . all ( 1 ) #NEWLINE#
"""lipsum""" [ 3 : ] #NEWLINE#
[ 0.3239913 , 0.7786444 , 0.41692853 , 0.10467392 ] , #NEWLINE#
result = df . loc [ df . groupby ( 'type' ) . votes . agg ( 'idxmax' ) ] #NEWLINE#
df . loc [ df [ 'col1' ] >= 1 , 'col1' ] #NEWLINE#
a = array ( 'i' , ( int ( val ) for row in stdin for val in row . split ( ) ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
re . search ( '\\b[a-z]{2}\\b' , subject , re . I ) #NEWLINE#
array ( [ [ 1 , 0 , 0 ] , [ 1 , 0 , 0 ] , [ 2 , 1 , 1 ] , [ 1 , 1 , 0 ] ] , dtype = int32 ) #NEWLINE#
df [ 'date' ] = df [ 'date' ] . apply ( dateutil . parser . parse ) #NEWLINE#
dan . split ( '|' ) [ 1 ] #NEWLINE#
df . values . nbytes + df . index . nbytes + df . columns . nbytes #NEWLINE#
print ( datetime . fromtimestamp ( timestamp ) ) #NEWLINE#
( g [ 'end_timestamp' ] - g [ 'start_timestamp' ] ) . groupby ( level = 0 ) . mean ( ) #NEWLINE#
len ( soup . findAll ( 'a' , { 'class' : 'manga_img' } ) ) #NEWLINE#
obj . save ( ) #NEWLINE#
re . findall ( '\\d+|\\D+' , s ) #NEWLINE#
df . loc [ df [ 'c' ] > 0.5 , [ 'a' , 'd' ] ] #NEWLINE#
any_func ( 'John' , 45 , ( 'H' , 'K' , 'L' ) ) #NEWLINE#
df . astype ( float ) . sum ( ) . map ( lambda x : '{:.0f}' . format ( x ) ) #NEWLINE#
time . sleep ( wtime ) #NEWLINE#
print ( '#SPACE#' . join ( str ( i ) for i in x ) ) #NEWLINE#
formulas = [ ( 'c' , 'a+b' ) , ( 'd' , 'a*c' ) ] #NEWLINE#

ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""The#SPACE#title#SPACE#is#SPACE#{0.title}s""" . format ( a ) #NEWLINE#
df_one . join ( df_two , df_one [ 'col1' ] == df_two [ 'col2' ] , 'inner' ) #NEWLINE#
plt . ylim ( - 1 , 1 ) #NEWLINE#
d = [ ( 0.25 * math . sin ( math . radians ( i ) ) ) for i in range ( 0 , 1024 ) ] #NEWLINE#
sns . palplot ( sns . color_palette ( 'coolwarm' , 7 ) ) #NEWLINE#
os . path . join ( dir_name , base_filename + suffix ) #NEWLINE#
sizer . Add ( buttons , 0 , wx . EXPAND | wx . ALL , 5 ) #NEWLINE#
plt . figure ( ) #NEWLINE#
scc . send ( 'auth#SPACE#login\r\n' ) #NEWLINE#
print ( to_float ( 'ÛµÛµ' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
m = re . search ( reg , s ) #NEWLINE#
cherrypy . tree . mount ( root ) #NEWLINE#
print ( hash . hexdigest ( ) [ : 10 ] ) #NEWLINE#
smtp . starttls ( ) #NEWLINE#
{ 'cell_2' : { 'gene_c' : - 1.0 } , 'cell_1' : { 'gene_a' : - 1.0 } } #NEWLINE#
pd . to_datetime ( dte . stack ( ) ) . unstack ( ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#VERSION()' ) #NEWLINE#
msg . attach ( body ) #NEWLINE#
return '' . join ( reversed ( result ) ) #NEWLINE#
cax . get_xaxis ( ) . set_visible ( False ) #NEWLINE#
b = [ i for i in itertools . chain ( * [ ( 1 , 3 ) , ( 5 , 4 ) ] ) ] #NEWLINE#
ffi . cdef ( 'void#SPACE#(*const#SPACE#some_callback)();' ) #NEWLINE#
re . compile ( '[A-Za-z_][A-Za-z0-9_]*' ) #NEWLINE#
show ( ) #NEWLINE#
plt . xticks ( [ ] ) #NEWLINE#
print ( d [ 'dict1' ] [ 'foo' ] ) #NEWLINE#
perm ( [ ] , [ 'a' , 'b' , 'c' ] ) #NEWLINE#
child . expect ( '.*assword:' ) #NEWLINE#
colors [ : ] = [ c for c in colors if c != 'green' ] #NEWLINE#
a = [ x for x in names if any ( pat in x for pat in pattern ) ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
struct . pack ( '>d' , try_quiet_nan ) . encode ( 'hex_codec' ) #NEWLINE#
scatter ( x , y , color = 'green' , marker = 'h' , markersize = 20 ) #NEWLINE#
[ '2+2' , '3+5' ] #NEWLINE#
indices = tf . where ( where ) #NEWLINE#
map ( attrgetter ( 'my_attr' ) , my_list ) #NEWLINE#
ax . scatter ( dates , zaxisvalues0 , highs , color = 'g' , marker = 'o' ) #NEWLINE#
driver . get ( 'http://facebook.com' ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
print ( link . text ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
input = [ 'a/b' , 'g' , 'c/d' , 'h' , 'e/f' ] #NEWLINE#
cbar . set_label ( 'Mean#SPACE#Rainfall#SPACE#-#SPACE#mm' ) #NEWLINE#
arr . T . reshape ( 5 , - 1 ) #NEWLINE#
ax . set_xlim ( 0 , 24 ) #NEWLINE#
print ( x [ np . unique ( a ) ] ) #NEWLINE#
driver . save_screenshot ( 'out.png' ) #NEWLINE#
cur . execute ( 'select#SPACE#*#SPACE#from#SPACE#Updates' ) #NEWLINE#
plt . show ( ) #NEWLINE#
errf . close ( ) #NEWLINE#
browser . get ( 'http://www.mywebsite.com/' ) #NEWLINE#
os . system ( 'bzip2#SPACE#%s' % path ) #NEWLINE#
[ 'version-1.9' , 'version-1.10' , 'version-1.11' , 'version-2.0' ] #NEWLINE#
inheritance_graph_attrs = dict ( rankdir = 'TB' , size = '""' ) #NEWLINE#
proc . terminate ( ) #NEWLINE#
{ 'name' : 'date' } #NEWLINE#
ax . set_ylim ( - 40 , 40 ) #NEWLINE#
my_list_sortable = [ ( x or '' ) for x in my_list ] #NEWLINE#
if word in mystring : #NEWLINE# #INDENT# pass #NEWLINE#
output = [ int ( x ) for x in '{:08b}' . format ( input ) ] #NEWLINE#
max_water_heldover ( [ 3 , 1 , 2 , 1 , 3 ] ) #NEWLINE#
p = regex . compile ( '\\p{Lu}' ) #NEWLINE#
abort ( 404 ) #NEWLINE#
fitnessFunction ( [ 'ABC' , 'ABB' , 'ABBC' ] , [ 1 , 2 , 3 ] , 'ABC' , [ 1 , 1 , 0 ] ) #NEWLINE#
return render_to_response ( 'url' , { 'r' : r } ) #NEWLINE#
ax . set_title ( 'title' ) #NEWLINE#
print ( ( a , b , c ) ) #NEWLINE#
connection . commit ( ) #NEWLINE#
df = df2 . transpose ( ) #NEWLINE#
c . py #NEWLINE#
bmp . Bind ( wx . EVT_ENTER_WINDOW , onWindow ) #NEWLINE#
[ ( not i ) for i in mylist ] #NEWLINE#
pdfkit . from_string ( html_text , output_filename ) #NEWLINE#
agg_10m = df . groupby ( pd . TimeGrouper ( freq = '10Min' ) ) . aggregate ( numpy . sum ) #NEWLINE#
ax1 . plot ( list ( range ( 10 ) ) , 'b-' ) #NEWLINE#
param2 = request . form . get ( 'param2' ) #NEWLINE#
issubclass ( A , A ) #NEWLINE#
abs ( b - c ) < abs ( b ) / 1000000000000 #NEWLINE#
map ( lambda s : '#SPACE#' . join ( [ reps . get ( w , w ) for w in s . split ( ) ] ) , li ) #NEWLINE#
get_random_string ( ) #NEWLINE#
u = Union ( a , b ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
s += str ( n ) #NEWLINE#
print ( roundGrade ( np . array ( [ - 2.1 , 6.3 , 8.9 , 9 ] ) ) ) #NEWLINE#
df . rename ( index = lambda x : tup ) #NEWLINE#
seaborn . voilinplot ( ax = ax , data = df , ** violin_options ) #NEWLINE#
ax . set_xlim ( [ - 0.5 , 4.5 ] ) #NEWLINE#
logger . warning ( "'Twas#SPACE#brillig,#SPACE#and#SPACE#the#SPACE#slithy#SPACE#toves" ) #NEWLINE#
[ x for y in zip ( list , list ) for x in y ] #NEWLINE#
[ 'm' , 'onkey' ] #NEWLINE#
df1 . corr ( ) #NEWLINE#
initpyxmod ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
dat1 = pd . concat ( [ dat1 , dat2 ] , axis = 1 ) #NEWLINE#
map ( f , list ( range ( 10 ) ) ) #NEWLINE#
( 54.5 , 17.083333 , 31.911 ) , #NEWLINE#
self . frames [ 'PageOne' ] . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
s . str . match ( '(b[x-y]+)' ) . str . get ( 0 ) . count ( ) #NEWLINE#
re . sub ( '([a-zA-Z_]+)' , '"\\1"' , '{foo:3,#SPACE#bar:4}' ) #NEWLINE#
line = line . rstrip ( ) #NEWLINE#
imgtag = re . match ( '<img.*?>' , line ) #NEWLINE#
np . einsum ( '...j,...j->...' , vf , vf ) [ - 1 , - 1 , - 1 ] #NEWLINE#
self . assertEqual ( [ attr , val ] , [ attr , getattr ( self . nu , val ) ] ) #NEWLINE#
logger2 = logging . getLogger ( '' ) #NEWLINE#
logger2 = logging . getLogger ( 'dev' ) #NEWLINE#
timeit . timeit ( 's#SPACE#if#SPACE#type(s)#SPACE#is#SPACE#str#SPACE#else#SPACE#str(s)' , "s#SPACE#=#SPACE#''" ) #NEWLINE#
print ( 'sum#SPACE#of#SPACE#1st#SPACE#items#SPACE#=#SPACE#%d' % sum ( [ float ( v [ 0 ] ) for v in list ( dictData . #NEWLINE# values ( ) ) ] ) ) #NEWLINE#
par1 . set_ylabel ( 'Temperature' ) #NEWLINE#
filename = sys . argv [ - 1 ] #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
array ( [ [ 23.2 , 17.9 ] , [ 13.4 , 16.9 ] ] ) #NEWLINE#
nums . search ( '+0.123' ) . group ( 0 ) #NEWLINE#
nums . search ( '123' ) . group ( 0 ) #NEWLINE#
fig . savefig ( os . path . join ( my_path , my_file ) ) #NEWLINE#
urllib . parse . urljoin ( '/media/' , 'js/foo.js' ) #NEWLINE#
f . write ( '\n' . join ( '#SPACE#' . join ( str ( x ) for x in tu ) for tu in lot ) ) #NEWLINE#
admin . site . register ( * model ) #NEWLINE#
"""-""" . join ( a + b for a , b in zip_longest ( s [ : : 2 ] , s [ 1 : : 2 ] , fillvalue = '' ) ) #NEWLINE#
x [ 'abc' ] #NEWLINE#
[ str ( item ) for item in [ 'accelerate' , 'acute' , 'bear' , 'big' ] ] #NEWLINE#
instance . __dict__ #NEWLINE#
sum ( tuples , ( ) ) #NEWLINE#
df #NEWLINE#
os . system ( 'df#SPACE#-k#SPACE#/' ) #NEWLINE#
re . sub ( '\\s(\\d)' , repl , '1#SPACE#2#SPACE#3' ) #NEWLINE#
ax2 . plot ( t , y2 , 'g-' , label = 'y2' ) #NEWLINE#
df [ 'AB' ] . str [ 1 ] #NEWLINE#
sys . argv [ 1 : ] #NEWLINE#
k = lambda x : x [ 1 ] #NEWLINE#
list ( k for k , g in itertools . groupby ( numbers ) ) #NEWLINE#
cur . executemany ( "UPDATE#SPACE#file#SPACE#SET#SPACE#fil_name='%s'#SPACE##SPACE#WHERE#SPACE#fil_name='%s'" , data ) #NEWLINE#
print ( "That's#SPACE#not#SPACE#an#SPACE#int!" ) #NEWLINE#
r = requests . get ( 'https://github.com/timeline.json' , stream = True ) #NEWLINE#
pd . to_timedelta ( df . Duration . str . replace ( '\\.' , '' ) ) . astype ( 'timedelta64[m]' ) #NEWLINE#
ax . set_xlim ( ( 0 , 10 ) ) #NEWLINE#
ax . yaxis . set_major_locator ( ticker . MultipleLocator ( 1 ) ) #NEWLINE#
df [ 'new_col' ] = list ( zip ( df . lat , df . long ) ) #NEWLINE#
return object . __getattribute__ ( self , name ) #NEWLINE#
return cmp ( x . lower ( ) , y . lower ( ) ) #NEWLINE#
print ( ) #NEWLINE#
fps = cap . get ( cv2 . cv . CV_CAP_PROP_FPS ) #NEWLINE#
re . sub ( '^\\s+' , '' , s ) #NEWLINE#
value = None #NEWLINE# cursor . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#(`column1`)#SPACE#VALUES#SPACE#(%s)' , ( value , ) ) #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
dict ( zip_longest ( x , y ) ) #NEWLINE#
df . apply ( update_vals , axis = 1 ) #NEWLINE#
return cleared , dominated #NEWLINE#
fill_between ( x . values , y . min ( ) , y . values , alpha = 0.5 ) #NEWLINE#
l = [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 ] #NEWLINE# index_list ( l ) #NEWLINE#
filename = os . path . join ( dir , '/relative/path/to/file/you/want' ) #NEWLINE#
next ( i for i , value in gen if value == 'a' ) #NEWLINE#
plt . show ( ) #NEWLINE#
""",""" . join ( re . findall ( '([\\+-]\\d+\\.\\d+)' , str ) ) #NEWLINE#
print ( '#SPACE#' . join ( map ( str , list2 ) ) in '#SPACE#' . join ( map ( str , list1 * 2 ) ) ) #NEWLINE#
print ( [ ele for ele in map ( lambda x : x . strip ( ',#SPACE#' ) , i . split ( "'" ) ) if ele ] ) #NEWLINE#
print ( name . lower ( ) ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
getElements ( 9 , [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] ) #NEWLINE#
b . doSomething ( ) #NEWLINE#
cur . execute ( 'insert#SPACE#into#SPACE#meta#SPACE#values#SPACE#(%s);' , ( str ( metadata ) , ) ) #NEWLINE#
sock . connect ( ( host , port ) ) #NEWLINE#
config . read ( 'FILE.INI' ) #NEWLINE#
bulk . execute ( ) #NEWLINE#
gevent . wait ( ) #NEWLINE#
libxslt - devel #NEWLINE#
eval ( real_eval ( ) , { '__builtins__' : None } ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
( OrderedDict ( row ) for i , row in df . iterrows ( ) ) #NEWLINE#
"""{}#SPACE#-->#SPACE#|#SPACE#{:>10}#SPACE#|#SPACE#{:>10}#SPACE#|#SPACE#{:>10}#SPACE#|""" . format ( * bounds ) #NEWLINE#
aDict = dict ( zip ( 'abcdefghijklmnopqrstuvwxyz' , list ( range ( 1 , 27 ) ) ) ) #NEWLINE#
mylist [ : ] #NEWLINE#
menu . remove ( i ) #NEWLINE#
window . configure ( background = 'grey' ) #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
globals ( ) [ n ] = 1 #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#NULL#SPACE#!=#SPACE#NULL' ) . show ( ) #NEWLINE#
new_array = list ( set ( main_array ) - set ( second_array ) ) #NEWLINE#
np . corrcoef ( df1 . s1 , df1 . s2 ) #NEWLINE#
row . delete ( ) #NEWLINE#
requests . get ( 'http://example.org' , proxies = proxies ) #NEWLINE#
result = re . sub ( '[a-z]([A-Z])' , '-\\1' , inputstring ) . lower ( ) #NEWLINE#
t . start ( ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
hex_list = [ '{:02x}' . format ( ord ( c ) ) for c in fp . read ( ) ] #NEWLINE#
[ [ ix . upper ( ) for ix in x ] for x in nested_list ] #NEWLINE#
array2 = np . tile ( array1 , ( 20 , 20 , 1 , 1 ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
req . close ( ) #NEWLINE#
s [ - 1 ] . isdigit ( ) #NEWLINE#
print ( arr [ idx ] ) #NEWLINE#
bin = struct . pack ( 'q' , num ) #NEWLINE#
pd . Series ( * zip ( * ( ( b , a ) for a , b in data ) ) ) #NEWLINE#
ET . register_namespace ( '' , 'XXXXX#SPACE#YOUR#SPACE#NAMESPACEXXXXXX' ) #NEWLINE#
plt . connect ( 'button_press_event' , on_click ) #NEWLINE#
[ '12345678' , '123456789a' , '1234567891' , '2345678912' , '3' ] #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
ind = np . flatnonzero ( mask ) #NEWLINE#
df . date_time . map ( lambda x : x . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
{ 'Name' : 'Aardvark' , 'Priority' : '1' , 'Row' : '4' , 'Year' : '2000' } #NEWLINE#
del d [ 'k1' ] #NEWLINE#
re . split ( '\\.\\s*' , s ) #NEWLINE#
conn . close ( ) #NEWLINE#
df . iloc [ : 5 , : 4 ] #NEWLINE#
items = root . findall ( 'items' ) #NEWLINE#
items = root . findall ( 'items/item' ) #NEWLINE#
parser . add_option ( '--debug' , action = 'store_true' , dest = 'debug' ) #NEWLINE#
tangent = np . array ( [ 1 / ds_dt ] * 2 ) . transpose ( ) * velocity #NEWLINE#
[ [ 2 , 3 , 4 , 'bar' ] , [ 8 , 9 , 1 , 'bar' ] ] #NEWLINE#
[ '_' . join ( numind [ i ] [ 0 ] + v for i , v in enumerate ( c ) ) for c in combinations ] #NEWLINE#
"""{:%H:%M:%S}""" . format ( nine_hours_from_now ) #NEWLINE#
subprocess . call ( [ 'xterm' , '-e' , 'python#SPACE#bb.py' ] ) #NEWLINE#
df [ 'ranks' ] = df . groupby ( 'Date' ) [ 'V1' ] . apply ( foo ) #NEWLINE#
req . write ( 'Hello#SPACE#World' ) #NEWLINE#
app . run ( threaded = True ) #NEWLINE#
l . sort ( key = asum ) #NEWLINE#
width , height = img . size #NEWLINE#
session . commit ( ) #NEWLINE#
print ( etree . tostring ( document , xml_declaration = True ) ) #NEWLINE#
dataframe [ 'period' ] = dataframe [ 'Year' ] . map ( str ) + dataframe [ 'quarter' ] #NEWLINE#
print ( unicode_text . encode ( sys . getfilesystemencoding ( ) ) ) #NEWLINE#
root . overrideredirect ( True ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
{ key : list ( set ( a [ key ] ) - set ( b . get ( key , [ ] ) ) ) for key in a } #NEWLINE#
epoch_time = int ( time . time ( ) ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
return np . reshape ( self . data , newshape = ( len ( self . data ) / 5 , 5 ) ) #NEWLINE#
[ flatten [ int ( i * 2 ) ] for i in range ( int ( len ( flatten ) / 2 ) ) ] #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
ts == pd . Timestamp ( datetime . date ( 2013 , 12 , 25 ) ) #NEWLINE#
super ( A , self ) . __init__ ( i ) #NEWLINE#
n = SubElement ( root , '{%s}foo' % DCNS ) #NEWLINE#
listbox . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
ax . bar3d ( xpos [ : 8 ] , ypos [ : 8 ] , zpos [ : 8 ] , dx , dy , dz , color = 'b' , zsort = 'average' ) #NEWLINE#
Fraction ( * ( 0.25 ) . as_integer_ratio ( ) ) #NEWLINE#
H [ 0 , 2 ] = 0 #NEWLINE#
pass #NEWLINE#
signal . signal ( signal . SIGINT , self . handler ) #NEWLINE#
np . may_share_memory ( a , a [ : , 1 : : 2 ] ) #NEWLINE#
o = numpy . delete ( n , deletions , axis = 0 ) #NEWLINE#
print ( 'several#SPACE#words' ) #NEWLINE#
ALLOWED_HOSTS = [ '127.0.0.1' , 'example.com' , 'www.example.com' ] #NEWLINE#
sum ( r ( i ) ) == - n #NEWLINE#
foo . bar ( ) #NEWLINE#
rightMost = fullPath . replace ( 'Path=' , '' , 1 ) #NEWLINE#
unittest . main ( ) #NEWLINE#
[ 2 , 4 , 5 , 3 , 1 , 6 , 0 ] #NEWLINE#
df [ <STR0> ] . dt . <STR0> #NEWLINE#
self . logger . setLevel ( logging . INFO ) #NEWLINE#
np . linspace ( x [ 0 ] , x [ - 1 ] , 10 ) #NEWLINE#
Counter ( { ( 0.5 , 2.0 ) : 2 , ( 1.0 , 2.5 ) : 1 , ( 2.6 , 2.0 ) : 1 , ( 0.5 , 3.0 ) : 1 } ) #NEWLINE#
B [ : , : , ( 2 ) ] = 0 #NEWLINE#
super ( Circle , self ) . __init__ ( x , y ) #NEWLINE#
df . values #NEWLINE#
print ( 'I#SPACE#am#SPACE#here' ) #NEWLINE#
open ( filename . encode ( sys . getfilesystemencoding ( ) ) , 'r' ) #NEWLINE#
s1 [ s1 . index . isin ( s2 . index ) & s1 . isin ( s2 ) ] #NEWLINE#
tmp = os . popen ( 'ls' ) . read ( ) #NEWLINE#
nobj . __dict__ = oobj . __dict__ . copy ( ) #NEWLINE#
plt . savefig ( 'test.png' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
( a > 2 ) . sum ( ) #NEWLINE#
df . ix [ d1 : d2 ] #NEWLINE#
print ( re . findall ( "[\\w']+" , DATA ) ) #NEWLINE#
writer = csv . writer ( outfile , delimiter = '\t' ) #NEWLINE#
list6 . append ( eval ( input ( 'some#SPACE#input#SPACE#from#SPACE#theuser' ) ) ) #NEWLINE#
format ( 10 , '02x' ) #NEWLINE#
x = np . arange ( 27 ) . reshape ( 3 , 3 , 3 ) #NEWLINE#
print ( oct ( 9 ) ) #NEWLINE#
setattr ( my_model , attr_name , 'something' ) #NEWLINE#
d . xpath ( './/span[@class="python"]/a[2]/text()' ) #NEWLINE#
norm . ppf ( 0.95 , loc = 10 , scale = 2 ) #NEWLINE#
[ ( s % x ) for x in itertools . product ( l1 , l2 ) ] #NEWLINE#
r . json ( ) #NEWLINE#
print ( re . search ( find , l ) . group ( 0 ) ) #NEWLINE#
return bool ( re . search ( '\\d' , inputString ) ) #NEWLINE#
plt . plot ( X , Y , 'g' ) #NEWLINE#
words = line . split ( '-' ) #NEWLINE#
ax . set_xlabel ( 'x' ) #NEWLINE#
return max ( self . left . depth ( ) , self . right . depth ( ) ) + 1 #NEWLINE#
print ( os . name ) #NEWLINE#
r = requests . get ( 'https://api.github.com/users/burhankhalid' ) #NEWLINE#
r = requests . get ( 'http://www.google.com/' ) #NEWLINE#
cv2 . imshow ( 'img' , img ) #NEWLINE#
os . rename ( 'outfile.txt' , 'inputFile.txt' ) #NEWLINE#
cv2 . FONT_HERSHEY_SIMPLEX #NEWLINE#
print ( keys [ values . index ( 'bar' ) ] ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
qdict . update ( dict ) #NEWLINE#
df . stack ( level = 1 ) . reset_index ( level = 1 , drop = True ) . reset_index ( ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
outFile = sys . argv [ 2 ] #NEWLINE#
urlpatterns = patterns ( 'myproject.views' , url ( '^$' , 'index' , name = 'index' ) ) #NEWLINE#
root = Tk ( ) #NEWLINE#
server = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) #NEWLINE#
ax . set_title ( 'Matplotlib#SPACE#is#SPACE#fun!' , size = 16 , weight = 'bold' ) #NEWLINE#
print ( '' . join ( map ( str , l ) ) ) #NEWLINE#
print ( s . group ( ) ) #NEWLINE#
item [ 'title' ] = sel . xpath ( '//*[@id="titletextonly"]' ) . extract_first ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
etree_to_dict ( tree . getroot ( ) ) #NEWLINE#
np . repeat ( np . arange ( 4 ) , 4 ) #NEWLINE#
mod = importlib . import_module ( 'vfs_tests' ) #NEWLINE#
raise KeyError ( 'non-alphanumeric#SPACE#character#SPACE#in#SPACE#input' ) #NEWLINE#
ws . Range ( 'A1' ) . GetCharacters ( 2 , 4 ) . Font . Bold = True #NEWLINE#
reader = csv . reader ( open ( 'copy-john.csv' ) , delimiter = ',' , quotechar = '"' ) #NEWLINE#
img_io . seek ( 0 ) #NEWLINE#
run ( 'ls#SPACE#-l' ) #NEWLINE#
plt . savefig ( 'pie' ) #NEWLINE#
l = [ 'a' , 'b' , 'a' , 'c' ] #NEWLINE#
re . match ( '^cat$\\ndog' , s ) . group ( 0 ) #NEWLINE#
data . columns = map ( str . lower , data . columns ) #NEWLINE#
d = { ( 1 , 4 ) : 120 , ( 2 , 2 ) : 72 , ( 2 , 3 ) : 100 , ( 5 , 2 ) : 88 } #NEWLINE#
print ( df1 [ df1 [ 'count' ] != 0 ] [ 'count' ] ) #NEWLINE#
df . groupby ( diff_to_previous . cumsum ( ) ) #NEWLINE#
print ( [ ( a + b + c ) for a , b , c in zip ( * ( [ iter ( nums ) ] * 3 ) ) ] ) #NEWLINE#
'/locale/fr_FR/LC_MESSAGES/myapp.mo' , '/locale/en_US/LC_MESSAGES/myapp.mo' , '/locale/en_IN/LC_MESSAGES/myapp.mo' #NEWLINE#
hello ( ) #NEWLINE#
print ( ElementTree . tostring ( xmlET ) ) #NEWLINE#
button . pack ( ) #NEWLINE#
re . search ( '**%s+pattern**' % some_variable , str_for_pattern_match , flags ) #NEWLINE#
parser . feed ( data ) #NEWLINE#
new_list #NEWLINE#
ax2 . yaxis . get_major_ticks ( ) [ 0 ] . label1 . set_visible ( False ) #NEWLINE#
G . add_edge ( 1 , 2 , key = 0 , color = 'blue' ) #NEWLINE#
lines = open ( 'textfile.txt' ) . readlines ( ) #NEWLINE# open ( 'newfile.txt' , 'w' ) . writelines ( lines [ 3 : - 1 ] ) #NEWLINE#
{ data [ k ] . append ( v ) for k , v in list ( line_dict . items ( ) ) } #NEWLINE#
print ( [ 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' ] [ weekday ] ) #NEWLINE#
'LINEBELOW' , ( 0 , 0 ) , ( - 1 , - 2 ) , 1 , colors . black #NEWLINE#
return [ s [ i : j ] for i in range ( length ) for j in range ( i + 1 , length + 1 ) ] #NEWLINE#
c = numpy . vstack ( ( a , b ) ) . reshape ( ( - 1 , ) , order = 'F' ) #NEWLINE#
list ( split_on_members ( l , s ) ) #NEWLINE#
serializer = PhotoSerializer ( data = request . DATA , files = request . FILES ) #NEWLINE#
sorted ( the_list , key = splitter ) #NEWLINE#
f . write ( '#SPACE#' . join ( [ '#SPACE#' . join ( v ) for v in sent ] ) + '\n' ) #NEWLINE#
url ( '^testws/$' , 'testmo.views.ws_test' ) , #NEWLINE#
os . write ( 1 , 'Your#SPACE#string#SPACE#to#SPACE#Stdout\n' ) #NEWLINE#
sys . path . append ( path . dirname ( path . dirname ( path . abspath ( __file__ ) ) ) ) #NEWLINE#
music . play ( ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
pivot_table ( df , rows = 'X' , cols = 'X2' ) [ 'Y' ] #NEWLINE#
return model . objects . filter ( id__gte = min_id ) [ 0 ] #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#stocks#SPACE#values#SPACE#(?,?,?,?,?)' , t ) #NEWLINE#
raise AttributeError ( 'No#SPACE#attribute:#SPACE#%s' % name ) #NEWLINE#
print ( 'line#SPACE#one' + os . linesep + 'line#SPACE#two' ) #NEWLINE#
return Py_BuildValue ( '' ) #NEWLINE#
my_func ( * my_list ) #NEWLINE#
test4 = 'foo#SPACE#\\\\\\' #NEWLINE#
a [ idx [ : , ( 0 ) ] , idx [ : , ( 1 ) ] , idx [ : , ( 2 ) ] ] = 5 #NEWLINE#
classifier . fit ( X , Y , sample_weight = weights ) #NEWLINE#
indices = np . arange ( len ( arr ) ) #NEWLINE#
tf . constant ( [ ] , dtype = tf . int32 ) , #NEWLINE#
pprint ( [ cities [ i ] for i in [ 37810 , 15755 , 16276 ] ] ) #NEWLINE#
r = requests . post ( url , data = json . dumps ( payload ) ) #NEWLINE#
df1 [ 'mylist' ] = df1 . apply ( add_list , axis = 1 ) . apply ( list ) #NEWLINE#
plt . show ( ) #NEWLINE#
add_matrices ( c , d ) #NEWLINE#
[ 'bench1' , 'bench2' , 'bench3' ] #NEWLINE#
sns . set ( ) #NEWLINE#
number = int ( string ) #NEWLINE#
data . reshape ( 2 , - 1 ) . mean ( 0 ) #NEWLINE#
a [ np . arange ( 3 ) [ : , ( None ) ] , inds ] #NEWLINE#
random . shuffle ( x ) #NEWLINE#
d [ tup [ 0 ] ] [ tup [ 1 ] ] = [ tup [ 2 ] ] #NEWLINE#
cursor . execute ( 'SHOW#SPACE#columns#SPACE#FROM#SPACE#table_name' ) #NEWLINE#
np . dot ( a , b ) == np . tensordot ( a , b , axes = ( [ - 1 ] , [ 2 ] ) ) #NEWLINE#
file = codecs . open ( 'data.txt' , 'w' , 'utf-8' ) #NEWLINE#
from gevent import socket #NEWLINE#
lcmm ( * list ( range ( 1 , 21 ) ) ) #NEWLINE#
request . add_header ( 'Content-Type' , 'your/contenttype' ) #NEWLINE#
( 'rf' + 'lfrf' * n ) * 4 #NEWLINE#
mult_comb ( ( 3 , 2 , 2 , 2 ) ) #NEWLINE#
len ( list ( d . items ( ) ) [ 0 ] [ 1 ] ) #NEWLINE#
y . do_something ( ) #NEWLINE#
df . xs ( 'C' ) . plot ( kind = 'bar' , ax = a [ 2 ] ) #NEWLINE#
print ( 'it#SPACE#does!' ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
df . values is df . values #NEWLINE#
ax . set_yticks ( [ 0.2 , 0.55 , 0.76 ] ) #NEWLINE#
print ( evil_vals [ 0 ] in list ( dict_with_evil_keys . keys ( ) ) ) #NEWLINE#
woduplicates = set ( lseparatedOrblist ) #NEWLINE#
list = [ i . strip ( '0' ) for i in listOfNum ] #NEWLINE#
df [ ( df == pd . Series ( conditions ) ) . all ( axis = 1 ) ] #NEWLINE#
map ( int , str ( 12345 ) ) #NEWLINE#
ax . legend ( ) #NEWLINE#
sys . setdefaultencoding ( 'utf-8' ) #NEWLINE#
return self . clslength ( ) #NEWLINE#
e2 = np . array ( [ 0 , 1 , 0 ] ) #NEWLINE#
x = np . array ( [ [ 1 , 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 1 ] ] ) #NEWLINE#
ax . scatter ( dates , zaxisvalues0 , lows , color = 'y' , marker = '^' ) #NEWLINE#
pprint . pprint ( search ( 'docs*::md5' , db ) ) #NEWLINE#
Books . objects . exclude ( authors__in = bad_authors ) #NEWLINE#
thread . start ( ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
round ( 2.615 , 2 ) #NEWLINE#
super ( MyUser , self ) . save ( using = 'database_1' ) #NEWLINE#
list ( [ _f for _f in re . split ( '([.,]+(?:\\s+[.,]+)*)|\\s' , s ) if _f ] ) #NEWLINE#
admin . site . register ( Game , MyModelAdmin ) #NEWLINE#
dbconf . get ( 'database' , 'server' ) #NEWLINE#
setattr ( self . __class__ , 'Apple' , property ( lambda s : 'Apple' ) ) #NEWLINE#
new_str = '#SPACE#' . join ( word [ : : - 1 ] for word in reordered ) #NEWLINE#
self . proc . wait ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
termios . tcsetattr ( self . fd , termios . TCSAFLUSH , self . old_term ) #NEWLINE#
scipy . stats . poisson . interval ( 0.95 , [ 10 , 20 , 30 ] ) #NEWLINE#
output = subprocess . Popen ( cmd , shell = True , stdout = subprocess . PIPE ) #NEWLINE#
re . sub ( '(\\d+)p(\\d+)' , '\\1.\\2' , out_info ) #NEWLINE#
StockRequest . objects . filter ( amount_requested = F ( 'amount_approved' ) ) #NEWLINE#
mpl . rc ( 'figure' , facecolor = 'white' ) #NEWLINE#
raise ValueError ( 'Enumeration#SPACE#ended' ) #NEWLINE#
ax . set_zlabel ( '$z$' ) #NEWLINE#
r = requests . get ( 'http://httpbin.org/get' , params = payload ) #NEWLINE#
s [ : s . find ( 'gggfdf' ) ] #NEWLINE#
self . linenumbers . config ( state = DISABLED ) #NEWLINE#
matrix = [ list ( line . strip ( ) ) for line in matrixfile ] #NEWLINE#
zlib . decompress ( decrypt ( data ) ) #NEWLINE#
shapely . ops . unary_union ( list ( shapely . ops . polygonize ( lines ) ) ) #NEWLINE#
print ( get_sec ( '0:04:15' ) ) #NEWLINE#
print ( df . values . tolist ( ) ) #NEWLINE#
wb = xl . Workbooks . Open ( 'C:\\Documents#SPACE#and#SPACE#Settings\\GradeBook.xls' ) #NEWLINE#
print ( list ( d . values ( ) ) ) #NEWLINE#
d . astimezone ( est ) . replace ( tzinfo = None ) #NEWLINE#
'Ã\x84' . decode ( 'utf8' ) == 'Ä' #NEWLINE#
[ x for x in library if terms . issubset ( x ) ] #NEWLINE#
is_pangram ( 'Does#SPACE#the#SPACE#quick#SPACE#brown#SPACE#fox#SPACE#jump#SPACE#over#SPACE#the#SPACE#lazy#SPACE#dog?' ) #NEWLINE#
is_pangram ( 'the#SPACE#quick#SPACE#brown#SPACE#fox#SPACE#jumps#SPACE#over#SPACE#the#SPACE#lazy#SPACE#dog' ) #NEWLINE#
out = proc . communicate ( ) [ 0 ] #NEWLINE#
sock . sendto ( 'robot' , ( MCAST_GRP , MCAST_PORT ) ) #NEWLINE#
delta = df . groupby ( [ 'dob' , 'name' ] ) . apply ( differ ) #NEWLINE#
counter += 1 #NEWLINE#
func ( xdata , * popt ) . reshape ( - 1 , len ( xdata ) ) . T #NEWLINE#
plt . show ( ) #NEWLINE#
df_grouped . plot ( kind = 'bar' , x = 'day' ) #NEWLINE#
fig . savefig ( 'output.png' ) #NEWLINE#
print ( ( 'changed#SPACE#to' , the_list ) ) #NEWLINE#
print ( ( 'set#SPACE#to' , the_list ) ) #NEWLINE#
assert expression1 , expression2 #NEWLINE#
merge ( { ( 1 ) : { 'a' : 'A' } , ( 2 ) : { 'b' : 'B' } } , { ( 1 ) : { 'a' : 'A' } , ( 2 ) : { 'b' : 'C' } } ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
todb . commit ( ) #NEWLINE#
dict [ 'data' ] . append ( { 'type' : 'poi' , 'lat' : 123 } ) #NEWLINE#
return np . argsort ( a ) [ : : - 1 ] [ : N ] #NEWLINE#
re . sub ( '[^a-zA-Z0-9:#SPACE#]' , '' , x ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
re . sub ( '[\\W_]+' , '' , sall ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
db . session . remove ( ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
Gtk . Entry . __init__ ( self ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( [ type ( x ) for x in htmldata ] ) #NEWLINE#
model . fit ( X ) #NEWLINE#
""",#SPACE#""" . join ( set_3 ) #NEWLINE#
pl . pop ( ) #NEWLINE#
print ( dumps ( datetime . now ( ) , default = json_serial ) ) #NEWLINE#
data [ 'masks' ] [ 'id' ] #NEWLINE#
y = np . matrix ( [ 1 , 2 , 3 ] ) . T #NEWLINE#
[ 'MOR129-1' , 'MOR129-3' , '0.115' ] #NEWLINE#
process . wait ( ) #NEWLINE#
workbook . close ( ) #NEWLINE#
method2 ( 'abc' , 1 ) #NEWLINE#
print ( sys . version ) #NEWLINE#
x . total_seconds ( ) #NEWLINE#
return os . path . dirname ( sys . executable ) #NEWLINE#
db . execute ( 'CREATE#SPACE#TABLE#SPACE#t#SPACE#(thebin#SPACE#BLOB)' ) #NEWLINE#
( dict ( zip ( keys , row ) ) for row in zip ( nums , chars ) ) #NEWLINE#
draw . line ( ( 100 , 200 , 150 , 300 ) , fill = 128 , width = 3 ) #NEWLINE#
im . shape #NEWLINE#
re . findall ( '-(?P<one>\\w+)' , match . group ( 'all' ) ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 7 , 8 ) , ( 9 , 0 ) ] #NEWLINE# [ sum ( x ) for x in zip ( * l ) ] #NEWLINE#
any ( 1 in x for x in d ) #NEWLINE#
[ 'a' , 'b' , 'c' ] #NEWLINE#
df [ 'time' ] = df [ 'datetime' ] . apply ( lambda x : x . strftime ( '%H%M%S' ) ) #NEWLINE#
multiprocessing . Process . __init__ ( self ) #NEWLINE#
print ( [ n for n in range ( len ( text ) ) if text . find ( 'll' , n ) == n ] ) #NEWLINE#
{ 'p' : { '$t' : 'text' } } #NEWLINE#
print ( soup . find ( 'big' ) . nextSibling . next . text ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . crosstab ( df . A , df . B , normalize = 'index' ) #NEWLINE#
x = int ( eval ( input ( '6#SPACE#divided#SPACE#by#SPACE#2#SPACE#is' ) ) ) #NEWLINE#
"""τoρνoς""" . decode ( 'utf-16' ) #NEWLINE#
pattern = re . compile ( '(.+?)\\1+' ) #NEWLINE# [ match . group ( 0 ) for match in pattern . finditer ( '44442(2)2(2)44' ) ] #NEWLINE#
data = numpy . asarray ( im ) #NEWLINE#
df . columns = columns #NEWLINE#
map ( len , s . split ( ) ) #NEWLINE#
self . send_header ( 'WWW-Authenticate' , 'Basic#SPACE#realm="Test"' ) #NEWLINE#
sorted ( s ) #NEWLINE#
ewmh . display . flush ( ) #NEWLINE#
checkbox . Click ( ) #NEWLINE#
pdb . Pdb . interaction ( self , * args , ** kwargs ) #NEWLINE#
decompressedString = zlib . decompress ( compressedString ) #NEWLINE#
print ( list ( range ( 1 , 8 , 3 ) ) ) #NEWLINE#
data = json . loads ( mtext ) #NEWLINE#
return self . func ( * args , ** kwargs ) #NEWLINE#
print ( buffalo ) #NEWLINE#
time . ctime ( ) #NEWLINE#
print ( '%r\n%s\n' % ( truc , truc ) ) #NEWLINE#
run ( 'ls' ) #NEWLINE#
ax . set_title ( 'Gantt#SPACE#Chart' ) #NEWLINE#
zip ( it , it ) #NEWLINE#
model . fit ( X_train , y_train ) #NEWLINE#
do_something ( ) #NEWLINE#
bytes ( 10 ) #NEWLINE#
msg . attach ( attachment ) #NEWLINE#
ax . axis ( 'tight' ) #NEWLINE#
return dict ( map ( convert , list ( data . items ( ) ) ) ) #NEWLINE#
return redirect ( redirect_url ( ) ) #NEWLINE#
return render_template ( 'index.html' ) #NEWLINE#
list ( itertools . chain ( * [ ( [ k ] * v ) for k , v in sorted ( d . items ( ) ) ] ) ) #NEWLINE#
p . stdin . write ( 'some#SPACE#input\n' ) #NEWLINE#
lki . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
rreplace ( s , '2' , '#SPACE#' , 0 ) #NEWLINE#
bool ( re . match ( pattern , '10000' ) ) #NEWLINE#
cur = db . cursor ( ) #NEWLINE#
from mpl_toolkits . mplot3d import proj3d #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
answer = [ len ( item ) for item in [ _f for _f in re . split ( '[^1]+' , test_string #NEWLINE# ) if _f ] ] #NEWLINE#
[ [ [ 'a' , 'b' ] , [ 'a' , 'd' ] , [ 'b' , 'd' ] , [ 'b' , 'f' ] ] , [ [ 'r' , 's' ] , [ 't' , 'r' ] ] ] #NEWLINE#
d [ 'dict4' ] [ 'queen' ] = 8 #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
x [ ~ np . any ( np . isnan ( x ) , axis = 1 ) ] #NEWLINE#
a . replace ( '>' , '>#SPACE#\n' ) #NEWLINE#
plt . savefig ( 'temp.png' , bbox_inches = 'tight' ) #NEWLINE#
ax . set_title ( 'Scatter#SPACE#with#SPACE#zorder={0}' . format ( zord ) ) #NEWLINE#
file = open ( 'Failed.py' , 'w' ) #NEWLINE# file . write ( 'whatever' ) #NEWLINE# file . close ( ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
return min ( itertools . product ( * lists ) , key = distance ) #NEWLINE#
df . AC = df . AC . astype ( float ) #NEWLINE#
result = json . dumps ( d , ensure_ascii = False ) #NEWLINE#
df . plot ( subplots = True , layout = ( 1 , 2 ) ) #NEWLINE#
a . __dict__ #NEWLINE#
root . state ( 'zoomed' ) #NEWLINE#
sqlite3 . register_converter ( 'pickle' , cPickle . loads ) #NEWLINE#
workbook . close ( ) #NEWLINE#
print ( match . groups ( ) ) #NEWLINE#
self . ui . testLabel . setText ( 'Button#SPACE#Clicked!' ) #NEWLINE#
df2 = df . stack ( ) . reset_index ( 1 ) #NEWLINE#
[ 0 , 1 , 1 , 1 , 1 ] , #NEWLINE#
ax1 . set_xlabel ( 'Latitude#SPACE#[degrees]' ) #NEWLINE#
print ( df . groupby ( df . A // 2 ) . A . apply ( pd . Series . sample , n = 2 ) ) #NEWLINE#
User . objects . count ( ) #NEWLINE#
"""""" . join ( '' . join ( list ( group ) [ : 2 ] ) for unused , group in groupby ( s ) ) #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
str_to_datetime ( '2010-04-20#SPACE#10:07:30' ) #NEWLINE#
json . dump ( LoL , myfile ) #NEWLINE#
f . flush ( ) #NEWLINE#
sorted ( a , key = lambda x : x [ : 3 ] ) #NEWLINE#
cleantext = BeautifulSoup ( raw_html ) . text #NEWLINE#
return HttpResponseRedirect ( '/' ) #NEWLINE#
groups_no_a = [ group for group in groups if a . isdisjoint ( group ) ] #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
"""eval(unhexlify('6576696c2e5f5f6d6574686f645f5f2829'))""" #NEWLINE#
random . sample ( deq , 10 ) #NEWLINE#
print ( dt - datetime . fromtimestamp ( s ) ) #NEWLINE#
CHOICES = [ ( i , i ) for i in range ( 11 ) ] #NEWLINE#
[ re . match ( '(?:[A-Za-z]:)?\\\\?([^\\\\]+)' , p ) . groups ( ) [ 0 ] for p in paths ] #NEWLINE#
imRes = cv2 . resize ( im , maxsize , interpolation = cv2 . CV_INTER_AREA ) #NEWLINE#
q , bins = pd . qcut ( a , 2 , retbins = True ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
l = [ 'This' , 'is' , 'a' , 'sentence' , 'of' , 'seven' , 'words' ] #NEWLINE#
[ seq for seq in dna_list if get_long ( seq , 3 ) ] #NEWLINE#
ax . set_xlim ( - 40 , 40 ) #NEWLINE#
foo ( None , 'Antioch' , 3 ) #NEWLINE#
app . url_map #NEWLINE#
ax1 . set_ylim ( 0 , 1.2 ) #NEWLINE#
ws . send ( '5:1::{"name":"newimg",#SPACE#"args":"bla"}' ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
func ( 1 , 2 , 3 ) #NEWLINE#
array ( [ 0.19844887 , 0.44858679 , 0.35370919 , 0.84074259 , 0.74513377 ] ) #NEWLINE#
f . write ( '{}#SPACE#=#SPACE#{!r}\n' . format ( name , value ) ) #NEWLINE#
del l [ 100 : ] #NEWLINE#
self . response . out . write ( simplejson . dumps ( [ p . to_dict ( ) for p in photos ] ) ) #NEWLINE#
return len ( points ) - 1 #NEWLINE#
[ ( lambda : x ) for x in [ 1 , 5 , 7 , 3 ] ] [ 1 ] #NEWLINE#
TorCtl . Connection . send_signal ( conn , 'NEWNYM' ) #NEWLINE#
array . tolist ( ) #NEWLINE#
{ 'message' : 'Conditions#SPACE#can#SPACE#be#SPACE#of#SPACE#length#SPACE#1#SPACE#or#SPACE#2#SPACE#only' } #NEWLINE#
a . flat [ np . abs ( a - a0 ) . argmin ( ) ] #NEWLINE#
return object . __getattribute__ ( self , attr ) #NEWLINE#
matplotlib . pylab . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
cursor . execute ( 'SET#SPACE#@X:=0;' ) #NEWLINE#
new_string = string_list . replace ( '\n' , '#SPACE#' ) #NEWLINE#
print ( zip ( list ( range ( 5 ) ) , 'hello' ) ) #NEWLINE#
myStr . split ( 'FROM' ) [ 0 ] . replace ( 'NAME' , '' ) . strip ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . test_status . mark ( 'test_accountSignup' , result , 'Signup#SPACE#was#SPACE#successful' ) #NEWLINE#
os . path . expanduser ( '~' ) #NEWLINE#
session . commit ( ) #NEWLINE#
return df . reset_index ( drop = True ) . T #NEWLINE#
result [ 'value' ] [ 'total_days' ] = str ( timedelta . days ) #NEWLINE#
final_image = cv2 . warpPerspective ( image , H , ( 2150 , 2800 ) ) #NEWLINE#
df [ ~ ( ( df [ 'Last#SPACE#Name,#SPACE#First#SPACE#Name' ] == 'Reid,#SPACE#Mark#SPACE#and#SPACE#Connie' ) & ( df [ #NEWLINE# 'Actual#SPACE#Sale#SPACE#Date' ] == '3/8/2015' ) ) ] #NEWLINE#
QtGui . QApplication . __init__ ( self , argv ) #NEWLINE#
print ( '{}#SPACE#is#SPACE#at#SPACE#list[2][2]' . format ( item ) ) #NEWLINE#
y = int ( '0x000000001' , 16 ) #NEWLINE#
fig . subplots_adjust ( wspace = 0.5 ) #NEWLINE#
plt . xlabel ( 'Day' ) #NEWLINE#
array ( [ [ 4 , 5 ] , [ 12 , 13 ] , [ 14 , 15 ] ] ) #NEWLINE#
cmaps = [ 'Reds' , 'Blues' , 'Purples' , 'Oranges' , 'Greys' ] #NEWLINE#
self . transport . write ( data ) #NEWLINE#
isinstance ( some_object , str ) #NEWLINE#
[ '1.0' , '4.7' , '4.7' ] #NEWLINE#
cur . execute ( 'insert#SPACE#into#SPACE#new_test#SPACE#(curent_dt)#SPACE#values#SPACE#(?)' , ( temp , ) ) #NEWLINE#
string += '#SPACE#' * ( length - len ( name ) ) #NEWLINE#
some = namedtuple ( 'some' , set ( k for k in list ( d . keys ( ) ) for d in dl ) ) #NEWLINE#
out = [ ( 1 if num & 1 << bits - 1 - n else 0 ) for n in range ( bits ) ] #NEWLINE#
mainloop ( ) #NEWLINE#
group . add_argument ( '--arg2' ) #NEWLINE#
tn . write ( 'command2\r\n' ) #NEWLINE#
tuple ( A [ : , ( 0 ) ] ) #NEWLINE#
df . sort_values ( [ 'a' , 'b' ] ) . diff ( ) . fillna ( 0 ) . ne ( 0 ) . any ( 1 ) . cumsum ( ) . add ( 1 ) #NEWLINE#
text . insert ( END , 'This#SPACE#is#SPACE#a#SPACE#phrase.\n' ) #NEWLINE#
ssh . close ( ) #NEWLINE#
print ( connection . getresponse ( ) . read ( ) ) #NEWLINE#
is_cardano_triplet ( 2 , 1 , 5 ) #NEWLINE#
pd . concat ( [ df3 , df4 ] , axis = 0 ) #NEWLINE#
random . shuffle ( new_lst ) #NEWLINE#
FFnetlayer0 = FFnetlayer0 . reshape ( - 1 , 2 ) #NEWLINE#
max ( i + 1 for i in range ( 20 ) if n % ( 2 << i ) == 0 ) #NEWLINE#
target_dir = 'E:\\Backup' #NEWLINE#
dates . apply ( lambda x : x . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
ax . tick_params ( axis = 'x' , which = 'major' , bottom = 'off' , top = 'off' ) #NEWLINE#
new_data = [ float ( n ) for n in data ] #NEWLINE#
return '{}{}{}{}' . format ( * ( 'A' * ( 4 - len ( s [ - 4 : ] ) ) + s [ - 4 : ] ) ) #NEWLINE#
L [ - 1 : ] , L [ : - 1 ] = L [ : 1 ] , L [ 1 : ] #NEWLINE#
request . resolver_match . app_name #NEWLINE#
s . replace ( ',' , '' ) #NEWLINE#
[ 6 , 7 , 8 ] #NEWLINE#
hello = request . form . getlist ( 'hello[]' ) #NEWLINE#
list1 = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
df . columns = df . columns . str . strip ( ) #NEWLINE#
print ( yaml . dump ( data , default_style = '"' ) ) #NEWLINE#
plt . yscale ( 'symlog' , linthreshy = 0.1 ) #NEWLINE#
[ '12' , '347' , '568' ] #NEWLINE#
[ '12' , '348' , '567' ] #NEWLINE#
[ '12' , '356' , '478' ] #NEWLINE#
[ '12' , '357' , '468' ] #NEWLINE#
[ '12' , '358' , '467' ] #NEWLINE#
[ '12' , '367' , '458' ] #NEWLINE#
[ '12' , '368' , '457' ] #NEWLINE#
pylab . show ( ) #NEWLINE#
line5 = [ ( 'Wave#SPACE#2:' , 0 ) , ( '__XX_XXX_X__X_X' , 0 ) ] #NEWLINE#
assert get_words ( [ 'k' , 'c' , 't' , 'a' ] ) == [ 'cat' , 'tack' ] #NEWLINE#
plt . pause ( 0.05 ) #NEWLINE#
image = cv2 . imread ( image_path , cv2 . IMREAD_UNCHANGED ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
property_asel = [ property_a [ i ] for i in good_indices ] #NEWLINE#
linregress ( X , Y ) #NEWLINE#
image = tk . PhotoImage ( data = b64_data ) #NEWLINE#
np . fill_diagonal ( corrs . values , - 2 ) #NEWLINE#
print ( 'Error#SPACE#{0}' . format ( str ( e . args [ 0 ] ) ) . encode ( 'utf-8' ) ) #NEWLINE#
return { 'DEBUG' : settings . DEBUG } #NEWLINE#
ax . text ( v + 3 , i + 0.25 , str ( v ) , color = 'blue' , fontweight = 'bold' ) #NEWLINE#
f . close ( ) #NEWLINE#
a . remove ( x ) #NEWLINE#
<STR0> = models . CharField ( max_length = 140 , null = True ) #NEWLINE#
dest = '' . join ( line for line in buffer if line [ : 1 ] != '#' ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
sess . run ( init_op ) #NEWLINE#
self . response . write ( current . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
print ( channel . recv ( 1024 ) ) #NEWLINE#
assert 'Hello#SPACE#world!' in response . data #NEWLINE#
r = requests . post ( url , data = json . dumps ( payload ) , headers = headers ) #NEWLINE#
status , data = conn . uid ( 'fetch' , fetch_ids , '(RFC822.PEEK#SPACE#BODY)' ) #NEWLINE#
g . incident ( root , mode = 'out' ) #NEWLINE#
numpy . count_nonzero ( boolarr ) #NEWLINE#
im = im . convert ( '1' ) #NEWLINE#
np . random . shuffle ( x ) #NEWLINE#
super ( MediaStorage , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
p . stdin . close ( ) #NEWLINE#
[ a for b , a in list ( params . items ( ) ) ] #NEWLINE#
df = df [ df [ 'A' ] > 2 ] #NEWLINE#
rowmax = df . max ( axis = 1 ) #NEWLINE#
[ ( a * b ) for a , b in combinations ( [ 1 , 2 , 3 , 4 ] , 2 ) ] #NEWLINE#
super ( MyThread , self ) . __init__ ( ) #NEWLINE#
module = importlib . import_module ( var1 ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
x = int ( eval ( input ( '6#SPACE#divided#SPACE#by#SPACE#2#SPACE#is' ) ) ) #NEWLINE#
Y == np . array ( [ 6 , 7 , 8 , 9 ] ) #NEWLINE#
MM ( ) . __dict__ #NEWLINE#
l1 . extend ( [ 4 , 5 , 6 ] ) #NEWLINE#
self . assertEqual ( a , b ) #NEWLINE#
logger . addHandler ( mh ) #NEWLINE#
shutil . copyfileobj ( source_file , target_file ) #NEWLINE#
input ( ) #NEWLINE#
ordering = [ 'ordering' ] #NEWLINE#
user . save ( ) #NEWLINE#
lookup . setdefault ( key ( item ) , [ ] ) . append ( item ) #NEWLINE#
ax . set_xlim ( ( 0 , 130 ) ) #NEWLINE#
root . bind ( '<Escape>' , lambda e : root . destroy ( ) ) #NEWLINE#
print ( '%d' % 2 * 4 ) #NEWLINE#
f . close ( ) #NEWLINE#
skrift2 . pack ( pady = 10 ) #NEWLINE#
writer . save ( ) #NEWLINE#
a . dtype . char == 'S' #NEWLINE#
df . col2 . replace ( - 1 , np . nan ) . interpolate ( ) . astype ( int ) #NEWLINE#
zip ( dir ( ) , [ eval ( var ) for var in dir ( ) ] ) [ - 4 : ] #NEWLINE#
[ '' . join ( ( myl [ i ] , myl [ i + 1 ] ) ) for i in range ( 0 , len ( myl ) , 2 ) ] #NEWLINE#
print ( '--#SPACE#{}#SPACE#--' . format ( word ) ) #NEWLINE#
print ( name , sys . modules [ name ] . __file__ ) #NEWLINE#
theanswer = Item . objects . values ( 'category' ) . annotate ( Count ( 'category' ) ) #NEWLINE#
( a [ : , ( None ) ] != np . arange ( 2 ) ) . astype ( int ) #NEWLINE#
isinstance ( a , Test2 ) #NEWLINE#
session2 . add ( obj1 ) #NEWLINE#
dff . drop ( c , axis = 1 , inplace = True ) #NEWLINE#
with open ( 'text.txt' ) as myfile : #NEWLINE# #INDENT# count = sum ( 1 for line in myfile ) #NEWLINE#
ax . set_xlabel ( 'x#SPACE#label' ) #NEWLINE#
array ( [ 8.0 , 5.5 ] ) #NEWLINE#
m . groups ( ) [ 0 ] #NEWLINE#
do_something ( ) #NEWLINE#
wr . writerow ( [ item ] ) #NEWLINE#
product ( list ( range ( 2 ) ) , repeat = k ) #NEWLINE#
x + ( ( 0 , 0 ) , ) #NEWLINE#
[ chr ( ord ( uc ) ) for uc in udata ] #NEWLINE#
return np . take ( mat , ixs , axis = 0 ) . sum ( axis = 0 ) #NEWLINE#
im . save ( 'accept.jpg' , 'JPEG' ) #NEWLINE#
int_arr [ - 2 , - 2 ] + int_arr [ 0 , 0 ] - int_arr [ - 2 , 0 ] - int_arr [ 0 , - 2 ] #NEWLINE#
self . socket . close ( ) #NEWLINE#
conn . set_timeout ( self . timeout ) #NEWLINE#
return { 'photos' : get_photos ( ) } #NEWLINE#
conn . start_instances ( instance_ids = [ 'instance_id_1' , 'instance_id_1' ] ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS = 'django.core.context_processors.static' , #NEWLINE#
result = func ( ) #NEWLINE#
main ( ) #NEWLINE#
print ( round ( a , 2 ) ) #NEWLINE#
sys . getsizeof ( 10 ** 10 ** 7 ) #NEWLINE#
return all ( x == items [ 0 ] for x in items ) #NEWLINE#
df2 = df . transpose ( ) #NEWLINE#
form . category_select . choices . insert ( 0 , ( '' , 'Some#SPACE#default#SPACE#value...' ) ) #NEWLINE#
active = request . POST . get ( 'active' ) == 'true' #NEWLINE#
subprocess . call ( [ 'gksudo' , 'python#SPACE#that_file.py' ] ) #NEWLINE#
label . mainloop ( ) #NEWLINE#
proc . wait ( ) #NEWLINE#
print ( ( 'before,#SPACE#outer_list#SPACE#=' , outer_list ) ) #NEWLINE#
csum = np . cumsum ( b ) #NEWLINE#
wb = open_workbook ( 'sample.xls' ) #NEWLINE#
[ Object ( name = '' ) , Object ( name = 'fake_name' ) ] #NEWLINE#
print ( 'This#SPACE#user#SPACE#does#SPACE#not#SPACE#exist...' ) #NEWLINE#
ax . set_xticklabels ( dates , rotation = 90 ) #NEWLINE#
url_for ( 'protected' , filename = 'data/example.csv' ) #NEWLINE#
matplotlib . rcParams [ 'backend' ] = 'WXAgg' #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
print ( '<a#SPACE#href="{0}">{0}</a>' . format ( my_url ) ) #NEWLINE#
super ( GameScene , self ) . __init__ ( ) #NEWLINE#
print ( 'Hi' ) #NEWLINE#
urlpatterns = patterns ( '' , ( '^one/$' , RedirectView . as_view ( url = '/another/' ) ) ) #NEWLINE#
self . response . out . write ( row ) #NEWLINE#
r = requests . get ( 'http://httpbin.org/get?foo=bar&baz=python' ) #NEWLINE#
G . add_node ( 'abc' , { 'dob' : 1185 , 'pob' : 'usa' , 'dayob' : 'monday' } ) #NEWLINE#
y . astype ( int ) #NEWLINE#
db . collection . find ( ) . limit ( 1 ) . skip ( Math . floor ( Math . random ( ) * N ) ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#from#SPACE#?#SPACE#WHERE#SPACE#name#SPACE#=#SPACE#?' , ( table_name , name ) ) #NEWLINE#
dlg . ShowModal ( ) #NEWLINE#
ser = serial . Serial ( '/dev/pts/4' , 19200 ) #NEWLINE#
main ( ) #NEWLINE#
"""\\p{Lu}[\\w-]*(?:\\s+\\p{Lu}[\\w-]*)+""" #NEWLINE#
m = Message ( request . POST ) #NEWLINE#
signal . signal ( signal . SIGALRM , handler ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
path3 = config . get ( 'My#SPACE#Section' , 'path3' ) #NEWLINE#
[ [ 7.25 ] [ 7.76315789 ] [ 8.10526316 ] [ 9.47368421 ] [ 9.69736842 ] [ 9.78947368 ] ] #NEWLINE#
df1 . apply ( lambda x : df2 . iloc [ g2 . groups [ x [ 'val1' ] ] [ x [ 'idx' ] ] ] , axis = 1 ) #NEWLINE#
1260 , 1395 , 1435 , 1530 , 1827 , 2187 , 6880 , 102510 , 104260 , 105210 , 105264 #NEWLINE#
rnd = np . random . rand ( n ) / np . sqrt ( 2.0 * np . pi ) #NEWLINE#
df2 . columns = pd . MultiIndex . from_tuples ( eval ( ',' . join ( df2 . columns ) ) ) #NEWLINE#
datetime . date ( 2011 , 1 , 1 ) #NEWLINE#
print ( 'MyEventletActor#SPACE#Received:#SPACE#{message}' . format ( message = message ) ) #NEWLINE#
import imp #NEWLINE# imp . reload ( MyPak ) #NEWLINE#
my_instance = my_class ( ) #NEWLINE#
IamInstanceProfile = { 'Arn' : 'string' , 'Name' : 'string' } #NEWLINE#
Decimal ( '1.63' ) . quantize ( Decimal ( '0.05' ) , rounding = ROUND_HALF_DOWN ) #NEWLINE#
fig . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
return abs ( A [ 0 ] - B [ 0 ] ) + abs ( A [ 1 ] - B [ 1 ] ) #NEWLINE#
unicodedata . normalize ( 'NFKD' , teststr ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
B = numpy . fromfunction ( numpy . maximum , ( 3 , 3 ) , dtype = int ) #NEWLINE#
missing_elements ( [ 10 , 13 , 14 , 15 ] , 2 ) #NEWLINE#
event . update ( { 'base' : base , 'base2' : base2 } ) #NEWLINE#
np . any ( ( x , y , z ) , axis = 0 ) #NEWLINE#
df . groupby ( 'A' ) . transform ( lambda x : x . sum ( ) ) #NEWLINE#
conn = sqlite3 . connect ( 'shane.sqlite' ) #NEWLINE#
set_trace ( ) #NEWLINE#
read_file ( 'ips.txt' ) #NEWLINE#
db . relationship ( 'Team' , uselist = False , backref = 'memberships' , lazy = 'dynamic' ) #NEWLINE#
db . relationship ( 'Role' , uselist = False , backref = 'memberships' , lazy = 'dynamic' ) #NEWLINE#
form . populate_obj ( user ) #NEWLINE#
app . run ( ) #NEWLINE#
os . path . dirname ( filepath ) #NEWLINE#
ip = f . next ( ) . split ( '#SPACE#' ) [ 3 ] [ : - 1 ] #NEWLINE#
l [ 2 : 6 ] = [ '' . join ( l [ 2 : 6 ] ) ] #NEWLINE#
d1 . A . eq ( 'Cash' ) . eq ( d1 . B . isnull ( ) ) . all ( ) #NEWLINE#
max ( map ( len , tup ) ) #NEWLINE#
sys . stdout = open ( 'CONOUT$' , 'wt' ) #NEWLINE#
plt . axvline ( x = 0.22058956 ) #NEWLINE#
a . f4 ( 1 ) #NEWLINE#
r = requests . post ( url , cookies = cookie ) #NEWLINE#
re . escape ( '.' ) #NEWLINE#
y = [ '{0:0>2}' . format ( v ) for v in x ] #NEWLINE#
set ( [ 1 ] ) #NEWLINE#
win . connect ( 'delete-event' , Gtk . main_quit ) #NEWLINE#
rs = ( grequests . get ( u ) for u in urls ) #NEWLINE#
ax . add_patch ( patch ) #NEWLINE#
r = requests . get ( 'http://example.com/api/params' , params = payload ) #NEWLINE#
document . write ( '<img#SPACE#src="http://localhost/cgi-bin/test.py"#SPACE#/>' ) #NEWLINE#
numpy . uint32 ( 0 ) - numpy . uint32 ( 1 ) #NEWLINE#
df2 = sqlContext . sql ( 'SELECT#SPACE#Name#SPACE#AS#SPACE#name,#SPACE#askdaosdka#SPACE#as#SPACE#age#SPACE#from#SPACE#myTable' ) #NEWLINE#
sum ( 1 for _ in assignments ( 12 , 5 ) ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
print ( OpenSSL . crypto . dump_certificate ( OpenSSL . crypto . FILETYPE_TEXT , x509 ) ) #NEWLINE#
QtGui . QFrame . __init__ ( self ) #NEWLINE#
sys . path . insert ( 0 , self . install_lib ) #NEWLINE#
setup ( ) #NEWLINE#
np . median ( x , axis = 0 ) #NEWLINE#
np . where ( cond , arr , - inf ) . argmax ( axis = 1 ) #NEWLINE#
[ k for k in paragraphs3 if 'Derived:' not in k [ 2 ] ] #NEWLINE#
newstr = oldstr [ : midlen ] + oldstr [ midlen + 1 : ] #NEWLINE#
db . close ( ) #NEWLINE#
person = db . relationship ( 'Person' ) #NEWLINE#
pylab . plot ( x , y , 'f:' , '$sin(x)$' ) #NEWLINE#
print ( ( a , b , c , d ) ) #NEWLINE#
self . assertEqual ( r , 'this-is-a-test' ) #NEWLINE#
wb . save ( 'output.xlsx' ) #NEWLINE#
ftp . cwd ( '..' ) #NEWLINE#
hasattr ( some_var , 'username' ) #NEWLINE#
sorteditems = sorted ( iter ( mydict . items ( ) ) , key = itemgetter ( 1 ) ) #NEWLINE#
set_contents_from_string ( data_file . read ( ) ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = 9998 , debug = False ) #NEWLINE#
k . set_contents_from_filename ( 'yourfile.txt' ) #NEWLINE#
"""1:20""" . split ( ':' ) [ : 1 ] #NEWLINE#
return decorator_to_enhance ( func , * args , ** kwargs ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ 1.5 , 2.5 ] , [ 3.0 , 4.0 ] , [ 1.0 , 3.0 ] ] ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
numpy . ma . masked_invalid ( a ) . sum ( ) #NEWLINE#
random . sample ( lst , 3 ) #NEWLINE#
df . show ( ) #NEWLINE#
A . view ( dtype = np . complex64 ) #NEWLINE#
l . sort ( ) #NEWLINE#
x . pop ( 0 ) #NEWLINE#
self . __dict__ . update ( d ) #NEWLINE#
del sys . modules [ 'mymodule' ] #NEWLINE#
ax . xaxis . set_major_formatter ( FormatStrFormatter ( '%0.0f' ) ) #NEWLINE#
print ( wjdata [ 'data' ] [ 'current_condition' ] [ 0 ] [ 'temp_C' ] ) #NEWLINE#
self . body . append ( '</p>\n' ) #NEWLINE#
d . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
print ( get_sec ( '1:23:45' ) ) #NEWLINE#
print ( df . ix [ values ] , '\n\n' ) #NEWLINE#
frame . pack ( ) #NEWLINE#
A [ : , ( np . mod ( np . arange ( ncols ) , A . shape [ 1 ] ) ) ] #NEWLINE#
df = df . replace ( '-' , np . nan ) #NEWLINE#
print ( [ x for x in p . findall ( s ) if x ] ) #NEWLINE#
subprocess . call ( [ 'open' , '-W' , f . name ] ) #NEWLINE#
{ 'odds' : [ 1 , 3 , 5 , 7 , 9 ] , 'evens' : [ 2 , 4 , 6 , 8 , 10 ] } #NEWLINE#
d [ 'dict1' ] [ 'innerkey' ] = 'value' #NEWLINE#
plt . close ( ) #NEWLINE#
data = json . loads ( input_str ) #NEWLINE#
self . assertEqual ( callresult , [ xargs , yargs ] ) #NEWLINE#
getattr ( sys . modules [ __name__ ] , 'clean_%s' % fieldname ) ( ) #NEWLINE#
az1 , el1 , az2 , el2 , rfsspe = data_point . split ( ';' ) [ : 5 ] #NEWLINE#
json . load ( urllib . request . urlopen ( 'http://graph.facebook.com/Ideas4India' ) ) #NEWLINE#
list ( metadata . tables . keys ( ) ) #NEWLINE#
Counter ( { 'f' : 3 , 'a' : 2 , 'd' : 2 , 's' : 1 } ) #NEWLINE#
subprocess . Popen ( [ 'start' , d ] , shell = True ) #NEWLINE#
outfile . write ( '#SPACE#' . join ( outputline ) ) #NEWLINE#
print ( datetime . datetime . utcfromtimestamp ( dt ) ) #NEWLINE#
mlab . show ( ) #NEWLINE#
[ 'robots-0' , 'are-4' , 'remind-7' , 'of-9' , 'awesomeness-11' ] #NEWLINE#
df [ ( df == 3.2 ) . any ( 1 ) & ~ df . isin ( [ 0.1 , 1.2 ] ) . any ( 1 ) ] #NEWLINE#
print ( clf . coef_ ) #NEWLINE#
"""{0:#SPACE#<5}""" . format ( 'sssss' ) #NEWLINE#
fopen . close ( ) #NEWLINE#
setattr ( someobject , name , user ) #NEWLINE#
out_file = open ( 'csv_write.csv' , 'w' , newline = '' ) #NEWLINE#
p . parse ( '9/19#SPACE#LAB:#SPACE#Serial#SPACE#encoding#SPACE#(Section#SPACE#2.2)' ) #NEWLINE#
label_indices = [ ( labels == i ) . nonzero ( ) for i in range ( 1 , numL + 1 ) ] #NEWLINE#
x = struct . pack ( 4 * 'B' + 'HB' [ ALPHA < 256 ] + 4 * 'B' , * data ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.mail.yahoo.com' , 587 ) #NEWLINE#
op . worksheet . Worksheet . iter_rows ( ) #NEWLINE#
docvec = model . docvecs [ 99 ] #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
do_something_with ( cursor ) #NEWLINE#
plt . xticks ( list ( range ( 10 ) ) , labels , rotation = 30 ) #NEWLINE#
print ( 'bob#SPACE#does#SPACE#stuff#SPACE#with#SPACE#%s' % data ) #NEWLINE#
set ( [ 2 , 1 ] ) in list #NEWLINE#
CATSDllApiProto = ctypes . WINFUNCTYPE ( ctypes . c_uint8 , ctypes . c_double ) #NEWLINE#
default_app_config = 'yourapp.apps.YourAppConfig' #NEWLINE#
[ [ 'a1' , 3 ] , [ 'b1' , 6 ] , [ 'c1' , 2 ] ] #NEWLINE#
pd . pivot ( index = df [ 'A1' ] , columns = df . index , values = df [ 'A2' ] ) . plot ( ) #NEWLINE#
db . close ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
return ( list ( g ) for k , g in grouped ) #NEWLINE#
print ( request . args . get ( 'a' ) ) #NEWLINE#
time . asctime ( time . strptime ( '2008#SPACE#50#SPACE#1' , '%Y#SPACE#%W#SPACE#%w' ) ) #NEWLINE#
res = np . array ( sorted ( a , key = lambda x : - x [ 0 ] ) ) #NEWLINE#
plt . figure ( figsize = ( 5.15 , 5.15 ) ) #NEWLINE#
plt . imshow ( Z , interpolation = 'nearest' ) #NEWLINE#
sorted ( L , key = natural_key ) #NEWLINE#
d . copy ( ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
ax . set_ylim ( [ 177 , 196 ] ) #NEWLINE#
c = numpy . linalg . lstsq ( b . T , a . T ) [ 0 ] . T #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'From#SPACE#now#SPACE#on#SPACE#change#SPACE#to#SPACE#cyan,#SPACE#in#SPACE#reverse#SPACE#mode' ) #NEWLINE#
print ( "NOTE:#SPACE#'CYAN#SPACE#+#SPACE#REVERSE'#SPACE#wouldn't#SPACE#work" ) #NEWLINE#
print ( "'REVERSE'#SPACE#and#SPACE#similar#SPACE#modes#SPACE#need#SPACE#be#SPACE#reset#SPACE#explicitly" ) #NEWLINE#
print ( 'For#SPACE#color#SPACE#alone#SPACE#this#SPACE#is#SPACE#not#SPACE#needed;#SPACE#just#SPACE#change#SPACE#to#SPACE#new#SPACE#color' ) #NEWLINE#
hasproperty = np . all ( C ) #NEWLINE#
fp . write ( line + '\n' ) #NEWLINE#
pd . set_printoptions ( max_colwidth , 1000 ) #NEWLINE#
pd . concat ( [ A , B , C ] , axis = 1 , keys = [ 'df1' , 'df2' , 'df3' ] ) #NEWLINE#
result = dict ( setup1 ) #NEWLINE#
g . add_edge ( a [ 0 ] , a [ 1 ] ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
dateutil . parser . parse ( '01-Jan-1995' ) . date ( ) #NEWLINE#
a = { '1' : 'a' , '2' : 'b' , '3' : 'c' , '4' : 'd' } #NEWLINE#
os . setsid ( ) #NEWLINE#
put ( 'testdirectory' , '/home/frodo/tmp' ) #NEWLINE#
label = tk . Label ( root , text = 'Hello,#SPACE#world' ) #NEWLINE#
geopoint = { 'latitude' : 41.123 , 'longitude' : 71.091 } #NEWLINE# print ( '{latitude}#SPACE#{longitude}' . format ( ** geopoint ) ) #NEWLINE#
[ a [ max ( i - 3 , 0 ) : i ] for i in range ( len ( a ) , 0 , - 3 ) ] [ : : - 1 ] #NEWLINE#
self . response . out . write ( str ( datetime . datetime . now ( ) - starttime ) ) #NEWLINE#
cursor . execute ( 'DROP#SPACE#TABLE#SPACE#IF#SPACE#EXISTS#SPACE#B' ) #NEWLINE#
cursor . execute ( 'CREATE#SPACE#TABLE#SPACE#A#SPACE#(#SPACE#K#SPACE#INTEGER#SPACE#)' ) #NEWLINE#
cursor . execute ( 'CREATE#SPACE#TABLE#SPACE#B#SPACE#(#SPACE#K#SPACE#INTEGER,#SPACE#L#SPACE#INTEGER#SPACE#)' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#Writers#SPACE#LIMIT#SPACE#4' ) #NEWLINE#
isinstance ( obj , ModuleType ) #NEWLINE#
[ ( x * x ) for x in range ( 10 ) ] #NEWLINE#
request . user . social_auth . values_list ( 'provider' ) #NEWLINE#
[ x for x in ls if c [ x ] == 1 ] #NEWLINE#
y = dict ( ( k . lower ( ) , v ) for k , v in x . items ( ) ) #NEWLINE#
return { key : d [ key ] for key in keys } #NEWLINE#
a . replace ( str ( i ) , '' ) #NEWLINE#
ax2 . ticklabel_format ( style = 'sci' , scilimits = ( 0 , 0 ) , axis = 'y' ) #NEWLINE#
s . startswith ( '-' ) and s [ 1 : ] . isdigit ( ) #NEWLINE#
os . isatty ( sys . stdout . fileno ( ) ) #NEWLINE#
df . applymap ( '${:,.2f}' . format ) #NEWLINE#
img_resized = image . resize ( ( 188 , 45 ) , Image . ANTIALIAS ) #NEWLINE#
df [ 'New_Sample' ] = df . Sample . str [ : 1 ] #NEWLINE#
csvobj = csv . reader ( f , delimiter = ',' , quotechar = "'" ) #NEWLINE#
np . isnan ( np . nan ) #NEWLINE#
config . write ( configfile ) #NEWLINE#
d = eval ( some_string ) #NEWLINE#
secnd_tuple_list = [ tuple ( lst ) for lst in secnd_list ] #NEWLINE#
print ( list ( map ( int , list ( ss . values ( ) ) ) ) ) #NEWLINE#
myString = re . sub ( '<[^>]*>' , '#SPACE#' , myString ) #NEWLINE#
my_insort_left ( data , ( 'brown' , 7 ) , key = lambda v : v [ 1 ] ) #NEWLINE#
return super ( CarInline , self ) . get_formset ( * args , ** kwargs ) #NEWLINE#
display . flush ( ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( operator . or_ , a_list , False ) #NEWLINE#
min ( s . find ( i ) for i in a if i in s ) #NEWLINE#
round ( x / 500.0 ) * 500.0 #NEWLINE#
newPic = ImageModel ( imgfile = request . FILES [ 'imgfile' ] ) #NEWLINE#
file = open ( '<FILENAME>.txt' , 'w' ) #NEWLINE#
f ( a , b ) #NEWLINE#
images . reshape ( ( images . shape [ 0 ] , - 1 ) ) #NEWLINE#
self . assertEqual ( len ( result ) , 2 ) #NEWLINE#
sorted ( [ 'a' , 'b' , 'c' , 'Ã¤' ] , key = collator . getSortKey ) #NEWLINE#
javasphinx - apidoc - - help #NEWLINE#
success_url = reverse_lazy ( 'complete-registration' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
self . response . out . write ( row ) #NEWLINE#
timeit . timeit ( 'any(map(lambda#SPACE#c:c.isdigit(),value))' , setup = 'value#SPACE#=#SPACE#"abcd1"' ) #NEWLINE#
self . d = self . d + 1 #NEWLINE#
min ( value for value in [ None , 1 , 2 ] if value is not None ) #NEWLINE#
x = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
formset . save ( ) #NEWLINE#
np . random . seed ( 1977 ) #NEWLINE#
keys = [ k for k , v in list ( dict . items ( ) ) if v == maxval ] #NEWLINE#
lines = tuple ( lines ) #NEWLINE#
map ( tuple , ( N - 1 - np . array ( list ( combinations ( list ( range ( N ) ) , M ) ) ) ) [ : : - 1 ] ) #NEWLINE#
os . path . relpath ( filename , blog_images ) #NEWLINE#
return s . decode ( 'utf-8' ) #NEWLINE#
print ( sess . run ( z , feed_dict = { x : [ [ 3.0 , 4.0 ] , [ 5.0 , 6.0 ] ] } ) ) #NEWLINE#
ax . set_ylabel ( 'Y' ) #NEWLINE#
batch . execute ( http = http ) #NEWLINE#
self . ax . set_xlim3d ( FLOOR , CEILING ) #NEWLINE#
s . isin ( [ 'a' ] ) #NEWLINE#
frame . grid ( row = 0 , column = 0 , sticky = 'news' ) #NEWLINE#
plt . savefig ( 'plot' ) #NEWLINE#
2 * ( 3 , 4 ) #NEWLINE#
bin ( 1 ) #NEWLINE#
df1 = df . filter ( regex = 'cm' ) #NEWLINE#
"""""" . join ( string . uppercase [ i ] if b else '#SPACE#' for i , b in enumerate ( bools ) ) #NEWLINE#
getattr ( foo , 'x' ) #NEWLINE#
cv2 . imwrite ( 'siftkpgray.jpg' , img2 ) #NEWLINE#
text = '' . join ( [ s for s in code . splitlines ( True ) if s . strip ( '\r\n' ) ] ) #NEWLINE#
d . dot ( d . T ) #NEWLINE#
setattr ( namespace , dest , value ) #NEWLINE#
key , value = key_value_pair . split ( '=' ) #NEWLINE#
f . write ( '1#SPACE#\n2#SPACE#\n3#SPACE#\n4#SPACE#\n5' ) #NEWLINE#
tags = db . mycoll . find ( { 'category' : 'movie' } ) . distinct ( 'tags' ) #NEWLINE#
ax . set_ylim ( [ 0 , 2 ] ) #NEWLINE#
output = [ { 'name' : i , 'score' : max ( j ) } for i , j in list ( data . items ( ) ) ] #NEWLINE#
return pd . Series ( dict ( col1 = a , col2 = b ) ) #NEWLINE#
a = '1\\2\\3\\4' #NEWLINE# print ( a . split ( '\\' ) ) #NEWLINE#
shutil . copyfileobj ( open ( filename , 'rb' ) , destination ) #NEWLINE#
data = np . array ( data ) #NEWLINE#
convert ( 'convert.py' , 'convert.ipynb' ) #NEWLINE#
listSum ( [ 1 , 3 , 4 , 5 , 6 ] , 0 , 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'DjangoProject.settings' #NEWLINE#
r = 'abc\\' #NEWLINE#
r = requests . patch ( 'http://httpbin.org/patch' ) #NEWLINE#
y = r * np . sin ( t ) #NEWLINE#
d = { 'P' : 'Shtg1' , 'R' : 'Shtg2' , 'D' : 'Shtg3' } #NEWLINE#
print ( any ( x in regx . split ( string ) for x in search ) ) #NEWLINE#
d = { '1' : [ '1' , '2' , '3' , '4' ] , '2' : [ '1' , '4' ] , '3' : [ '43' , '176' ] } #NEWLINE# d = { int ( k ) : [ int ( i ) for i in v ] for k , v in list ( d . items ( ) ) } #NEWLINE#
ent2 . grid ( row = 1 , column = 1 ) #NEWLINE#
[ tuple ( chain . from_iterable ( prod ) ) for prod in product ( * lists ) ] #NEWLINE#
sess = tf . Session ( ) #NEWLINE# sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
df [ 'match' ] = np . ediff1d ( df [ 'col1' ] . values , to_begin = np . NaN ) == 0 #NEWLINE#
{ { mywidget . script ( ) } } #NEWLINE#
{ { item } } #NEWLINE#
print ( re . sub ( '(\\\\u[0-9A-Fa-f]{1,4})' , unescapematch , 'Wi\\u2011Fi' ) ) #NEWLINE#
dateutil . parser . parse ( date_string ) #NEWLINE#
app . run ( ) #NEWLINE#
print ( etree . tostring ( elem ) ) #NEWLINE#
[ 0 , 1 , 1 , 0 , 0 , 1 ] , #NEWLINE#
fh . writelines ( itertools . starmap ( '{}#SPACE#{}\n' . format , itertools . product ( a , b ) ) ) #NEWLINE#
print ( __loader__ . get_data ( os . path . join ( 'package_name' , 'README.txt' ) ) ) #NEWLINE#
[ 'FC#SPACE#Ingolstadt#SPACE#04' , '13' , '4' , '6' ] #NEWLINE#
array ( [ 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 , nan , nan , nan ] ) #NEWLINE#
[ x for x in list ( x . items ( ) ) if x [ 1 ] == 'A' ] #NEWLINE#
ax . get_yticklabels ( ) [ i ] . set_visible ( False ) #NEWLINE#
sys . modules [ __name__ ] = Foo ( ) #NEWLINE#
l . append ( [ ] ) #NEWLINE#
path3 = 'D:\test2\third' #NEWLINE#
input ( 'Does#SPACE#it#SPACE#work#SPACE#now?' ) #NEWLINE#
struct . pack ( '>BIB' , 1 , 4660 , 0 ) #NEWLINE#
self . master . destroy ( ) #NEWLINE#
print ( json . dumps ( 'Б' , ensure_ascii = 'False' ) ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
murders . resample ( 'W-MON' ) . count ( ) . plot ( ) #NEWLINE#
plt . close ( ) #NEWLINE#
backup . close ( ) #NEWLINE#
t5 . start ( ) #NEWLINE#
user . groups . all ( ) [ 0 ] . name == 'groupname' #NEWLINE#
plt . axhline ( y = 0.002 , xmin = 0 , xmax = 1 , hold = None ) #NEWLINE#
fro . readline ( ) #NEWLINE#
return view_func ( request , * args , ** kwargs ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
lines = sorted ( shopping . readlines ( ) ) #NEWLINE#
a = dict ( ( key , value ) for key , value in a . items ( ) if key not in exclusion ) #NEWLINE#
df = df . loc [ : , ( [ 3 , 5 ] ) ] #NEWLINE#
return HttpResponse ( "You're#SPACE#logged#SPACE#in." ) #NEWLINE#
g . add_argument ( '--c' , help = 'Argument#SPACE#c' ) #NEWLINE#
return s [ 0 ] . lower ( ) + s [ 1 : ] #NEWLINE#
csum = np . cumsum ( a [ : , ( 1 ) ] ) #NEWLINE#
pattern = '(?<=X)([a-z])X' #NEWLINE#
pkgutil . iter_modules ( ) #NEWLINE#
mpl . dates . date2num ( df . index . to_pydatetime ( ) ) #NEWLINE#
float ( test_utf16 . decode ( 'utf-16' ) . encode ( 'ascii' ) ) #NEWLINE#
pattern = re . compile ( pattern_string ) #NEWLINE#
df . groupby ( 'A' ) . transform ( lambda x : ( x [ 'C' ] - x [ 'D' ] ) . mean ( ) ) #NEWLINE#
ax . set_yticks ( np . linspace ( 0 , 200 , 11 ) ) #NEWLINE#
sorted ( re . findall ( 'g\\d+$' , s ) ) #NEWLINE#
scipy . io . mmread ( '/tmp/my_array' ) . tolil ( ) #NEWLINE#
Tablename . objects . filter ( fieldname__lt = value ) #NEWLINE#
return re . sub ( '([a-z0-9])([A-Z])' , '\\1_\\2' , s1 ) . lower ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
map ( list , my_array ) #NEWLINE#
sys . path . append ( os . getcwd ( ) [ : os . getcwd ( ) . index ( 'Dev' ) ] ) #NEWLINE#
float ( x ) #NEWLINE#
df . withColumn ( 'some_map' , create_map ( lit ( 'key1' ) , lit ( 1 ) , lit ( 'key2' ) , lit ( 2 ) ) ) #NEWLINE#
conn = boto . connect_s3 ( AWS_ACCESS_KEY_ID , AWS_SECRET_ACCESS_KEY ) #NEWLINE#
"""#SPACE#""" . join ( numbers . split ( '#SPACE#,#SPACE#' ) ) #NEWLINE#
print ( HorQS ( [ '0H' , '8H' , '7H' , '6H' , 'AH' , 'HS' ] ) ) #NEWLINE#
print ( data . split ( ) ) #NEWLINE#

einsum_py . myeinsum ( '...j,...k->...jk' , x , x , debug = True ) #NEWLINE#
set ( d [ 0 ] ) . intersection ( * d [ 1 : ] ) #NEWLINE#
np . full ( ( 200 , 20 , 10 , 20 ) , 0 ) #NEWLINE#
plt . setp ( ax . get_xticklabels ( ) [ - 1 ] , visible = False ) #NEWLINE#
check ( 'abc' ) #NEWLINE#
[ _f for _f in a . split ( '\n' ) if _f ] #NEWLINE#
{ 'attr4' : 'added' , 'attr2' : 0 , 'attr3' : 'overridden' , 'attr1' : None } #NEWLINE#
raise AssertionError ( 'File#SPACE#not#SPACE#exists#SPACE#in#SPACE#path#SPACE#"' + path + '".' ) #NEWLINE#
subprocess . call ( [ 'python3' , 'docxcript.py' ] ) #NEWLINE#
driver . get ( 'http://www.baidu.com' ) #NEWLINE#
driver . get ( 'http://gs.swjtu.edu.cn/ws/gsedu' ) #NEWLINE#
ax . plot_surface ( X2 , Y3 , Z3 , color = 'blue' , alpha = 0.5 , linewidth = 0 , zorder = - 1 ) #NEWLINE#
CELERY_ROUTES = { 'myproject.tasks.do_work' : { 'queue' : 'red' } } #NEWLINE#
str ( 0.1 ) #NEWLINE#
"""#SPACE#""" . join ( map ( str , a ) ) #NEWLINE#
L1 = [ [ x . split ( '#SPACE#A#SPACE#' ) [ - 1 ] . split ( '#SPACE#B#SPACE#' ) [ - 1 ] ] for x in L ] #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
setattr ( self , key , dictionary [ key ] ) #NEWLINE#
webbrowser . get ( ) . open ( 'http://www.google.com' ) #NEWLINE#
plt . subplots_adjust ( hspace = 0.001 ) #NEWLINE#
dict ( zip ( headers , sdata ) ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSADRAIN , old ) #NEWLINE#
func ( * parameters ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
str_id = '{:08}' . format ( i ) #NEWLINE#
Jan , Feb , Mar , Apr , May , Jun , Jul , Aug , Sep , Oct , Nov , Dec = values #NEWLINE#
f = open ( 'test' , 'w' ) #NEWLINE#
pythoncom . PumpMessages ( ) #NEWLINE#
PrintLn ( Abs ( vf ) ) #NEWLINE#
image . show ( ) #NEWLINE#
old_init ( self , * args , ** kwargs ) #NEWLINE#
print ( Animals . DOG ) #NEWLINE#
re . escape ( '\n#SPACE#[hello#SPACE#world!]' ) #NEWLINE#
os . remove ( path ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.25 ) #NEWLINE#
mock_logger . error . assert_called_with ( 'Your#SPACE#log#SPACE#message#SPACE#here' ) #NEWLINE#
print ( urlparse . urlunparse ( url_parts ) ) #NEWLINE#
super ( MyCustomForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
self . fd = sys . stdin . fileno ( ) #NEWLINE#
list ( chain ( * x ) ) #NEWLINE#
sorted ( a , key = lambda d : d [ 'name' ] ) #NEWLINE#
raise ThreadError ( 'This#SPACE#lock#SPACE#was#SPACE#released#SPACE#already.' ) #NEWLINE#
datetime . date . fromordinal ( datetime . date . today ( ) . toordinal ( ) - 1 ) . strftime ( '%F' ) #NEWLINE#
locale . setlocale ( locale . LC_NUMERIC , 'English' ) #NEWLINE#
np . array ( list ( itertools . zip_longest ( * ll , fillvalue = np . nan ) ) ) . T #NEWLINE#
model . compile ( loss = dummy_objective , optimizer = 'adadelta' ) #NEWLINE#
logging . getLogger ( ) . addHandler ( handler ) #NEWLINE#
characters = [ 'T' , 'ב' , '€' , '木' , '♥' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
a [ len ( a ) - 1 : - len ( a ) - 1 : - 1 ] #NEWLINE#
list ( itertools . accumulate ( [ 2 , 3 , 5 , 8 , 3 , 5 ] , lambda a , b : a + ( b - a ) * 0.5 ) ) #NEWLINE#
H = np . sum ( np . diag ( np . ones ( n - k ) , k ) [ : - m + 1 , : ] for k in range ( m ) ) #NEWLINE#
foo ( * t ) #NEWLINE#
imshow ( 'Image' , im ) #NEWLINE#
df . dropna ( axis = 0 , subset = [ [ 'city' , 'longitude' , 'latitude' ] ] , thresh = 2 ) #NEWLINE#
return None #NEWLINE#
tupleX = tuple ( x for x in tupleX if condition ) #NEWLINE#
numpy . random . shuffle ( ids ) #NEWLINE#
my_list . append ( int ( i ) ) #NEWLINE#
im . write ( 'tiger-rgb-strip-contig-16-zip.tif' ) #NEWLINE#
myList = s . split ( ',#SPACE#' ) #NEWLINE#
df . loc [ ~ df . index . isin ( t ) ] #NEWLINE#
return re . split ( '\\||<>' , input ) #NEWLINE#
only_roman_chars ( 'russian:#SPACE#гага' ) #NEWLINE#
myform . fields [ 'status' ] . widget . attrs [ 'disabled' ] = True #NEWLINE#
ax . set_xticklabels ( x_labels ) #NEWLINE#
session . query ( Address ) . join ( User ) . filter ( User . name == 'test' ) . first ( ) #NEWLINE#
set ( my_list ) - { i for e in bad for i in my_list if e in i } #NEWLINE#
cur . execute ( 'CREATE#SPACE#DATABASE#SPACE#%s#SPACE##SPACE#;' % self . db_name ) #NEWLINE#
super ( ValueObject , self ) . __setattr__ ( attr , val ) #NEWLINE#
list ( x [ x > 0 ] . stack ( ) . index ) #NEWLINE#
ax . boxplot ( [ data [ name ] [ item ] for item in [ 'A' , 'B' , 'C' ] ] ) #NEWLINE#
dll . add . restype = c_double #NEWLINE#
numpy . where ( M == 0 ) #NEWLINE#
[ ( x + 1 ) for x in mylist ] #NEWLINE#
l = [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 ] #NEWLINE#
bytes ( myintegers ) #NEWLINE#
self . redirect ( '/' ) #NEWLINE#
assert not os . path . exists ( f . name ) #NEWLINE#
[ col for col in df . columns if df [ col ] . dtype == 'datetime64[ns]' ] #NEWLINE#
ax . set_axis_bgcolor ( 'red' ) #NEWLINE#
ax . set_xlabel ( 'Structure' ) #NEWLINE#
var = self . __helper ( record ) #NEWLINE#
pprint ( [ ( my_array + [ i ] ) for i in input_elements ] ) #NEWLINE#
ax . plot ( [ X - 1 , X - 1 ] , [ 0 , 0 ] , [ 0 , Z - 1 ] , 'k-' ) #NEWLINE#
all ( len ( set ( random . sample ( word_drills , 3 ) ) ) == 3 for i in range ( 10 ** 5 ) ) #NEWLINE#
mydict [ key ] . append ( line . strip ( ) ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
x [ x & x - 1 == 0 ] #NEWLINE#
l [ 2 : : 3 ] #NEWLINE#
df . groupby ( 'Name' ) . agg ( { 'Duration' : 'mean' , 'Payment' : 'sum' } ) #NEWLINE#
shallow_copy_of_set = old_set . copy ( ) #NEWLINE#
return random . choice ( files ) #NEWLINE#
Entry . parseString ( 'ABC_123_SPEED_X#SPACE#123' ) #NEWLINE#
self . log . error ( 'error#SPACE#from#SPACE#test#SPACE#class#SPACE#B' ) #NEWLINE#
del sys . path [ 0 ] #NEWLINE#
model4 . py #NEWLINE#
re . escape ( 'www.stackoverflow.com' ) #NEWLINE#
df . merge ( df1 , left_index = True , right_index = True , how = 'left' ) #NEWLINE#
scipy . signal . lfilter #NEWLINE#
raise Exception ( 'Some#SPACE#exception#SPACE#occurs!!' ) #NEWLINE#
kv = [ ( k , d [ k ] ) for k in l if k in d ] #NEWLINE#
return Department . _objects . filter ( group__exact = self . group ) #NEWLINE#
root . bind ( '<Return>' , handleReturn ) #NEWLINE#
return next ( i for i , j in list ( enumerate ( s ) ) [ : : - 1 ] if j == x ) #NEWLINE#
result = json . loads ( result ) #NEWLINE#
c = concatenate ( ( a [ : , : , : , ( None ) ] , b [ : , : , : , ( None ) ] ) , axis = 3 ) #NEWLINE#
pd . read_stata ( 'stata.dta' ) #NEWLINE#
[ 'cos' , 'x' ] #NEWLINE#
server . close ( ) #NEWLINE#
driver . close ( ) #NEWLINE#
outer_list . sort ( key = MyOrdering ) #NEWLINE#
plt . plot ( y ) #NEWLINE#
fig = plt . figure ( figsize = ( 5 , 5 ) ) #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( link . get ( 'href' , None ) , link . get_text ( ) ) #NEWLINE#
r = random . choice ( numbers ) #NEWLINE#
logging . disable ( logging . CRITICAL ) #NEWLINE#
ax2 . imshow ( [ [ 0 , 1 ] , [ 2 , 0 ] ] ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
a = MyString ( 'some#SPACE#string' ) #NEWLINE#
the_sum += A [ k ] * B [ k ] #NEWLINE#
type ( a . tolist ( ) [ 0 ] ) #NEWLINE#
return [ ( slice ( * map ( int , a ) ) if len ( a ) > 1 else int ( a [ 0 ] ) ) for a in ranges ] #NEWLINE#
value . encode ( 'utf8' ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
ftp . login ( ) #NEWLINE#
[ ( x < 0 and x + 4 or x ) for x in [ 1 , - 2 , 2 ] ] #NEWLINE#
[ ( 'a' , 17094 ) , ( 'e' , 8734 ) , ( 'i' , 8797 ) , ( 'o' , 7847 ) , ( 'u' , 16385 ) ] #NEWLINE#
[ '' , f , b , f + b ] [ ( x % 3 == 0 ) + 2 * ( x % 5 == 0 ) ] #NEWLINE#
maze_dict [ r , c ] = [ ( r - 1 , c ) , ( r , c + 1 ) ] #NEWLINE#
e . update ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
date . fromtimestamp ( 1241711346274 / 1000 ) #NEWLINE#
print ( 'Pause' ) #NEWLINE#
return simplejson . JSONEncoder . default ( self , obj ) #NEWLINE#
mylist . sort ( key = lambda v : v . x ** 2 + v . y ** 2 ) #NEWLINE#
req . add_header ( 'Content-Type' , 'application/octet-stream' ) #NEWLINE#
s . sendmail ( msg [ 'From' ] , recipients , msg . as_string ( ) ) #NEWLINE#
sys . modules [ 'config' ] = config_test #NEWLINE#
plt . connect ( 'axes_enter_event' , on_enter ) #NEWLINE#
ax . imshow ( data ) #NEWLINE#
figure ( figsize = ( 4 , 4 ) ) #NEWLINE#
time . time ( ) #NEWLINE#
setattr ( bar . __class__ , 'x' , property ( bar . __class__ . x ) ) #NEWLINE#
asin ( 2 ) . evalf ( ) #NEWLINE#
f . close ( ) #NEWLINE#
d = pd . DataFrame ( { 's1' : s1 , 's2' : s2 } ) #NEWLINE#
xDate = sys . argv [ 1 ] #NEWLINE#
myfile . write ( line + '\n' ) #NEWLINE#
process . stdin . write ( 'World\n' ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
fxn ( ) #NEWLINE#
"""^list_cv/(?:(?P<category>[\\w+])?/)$""" #NEWLINE#
parser . add_argument ( '-o' , '--operation' , choices = [ '+' , 'minus' , '*' , '/' ] ) #NEWLINE#
dict ( zip ( x , map ( x . count , x ) ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
painter . setPen ( Qt . QColor ( 100 , 100 , 100 ) ) #NEWLINE#
re . search ( re . escape ( stringB ) + '(.*?)' + re . escape ( stringC ) , stringA ) . group ( 1 ) #NEWLINE#
self . assertEqual ( 1 , 0 ) #NEWLINE#
print ( '#SPACE#' . join ( my_dashes ) ) #NEWLINE#
connection . close ( ) #NEWLINE#
wx . Yield ( ) #NEWLINE#
[ c for c in 'foobar' ] #NEWLINE#
z = [ 'z+2-44' , '4+55+((z+88))' ] #NEWLINE#
tk . Button ( bop , text = 'Exit' , command = top . destroy ) . pack ( ) #NEWLINE#
[ i for i , j in c . most_common ( ) ] #NEWLINE#
plt . clf ( ) #NEWLINE#
warnings . filterwarnings ( 'ignore' , category = DeprecationWarning ) #NEWLINE#
os . system ( '/bin/bash#SPACE#--rcfile#SPACE#/path/to/myscript.sh' ) #NEWLINE#
sum ( value for key , value in list ( d . items ( ) ) if key != '?' ) #NEWLINE#
print ( ET . tostring ( root . find ( 'test' ) ) ) #NEWLINE#
print ( json . load ( json_file ) ) #NEWLINE#
et . xpath ( 'f:bar' , namespaces = { 'b' : 'bar' , 'f' : 'foo' } ) #NEWLINE#
counts = pd . DataFrame ( counts , columns = [ 'count' ] ) #NEWLINE#
os . remove ( os . path . join ( parent , fn ) ) #NEWLINE#
raise OSError ( 'getdents' ) #NEWLINE#
isinstance ( var , str ) #NEWLINE#
l = list ( t ) #NEWLINE#
np . dot ( a , a ) #NEWLINE#
x [ 'hgS_070000' ] [ 0 , 0 ] . children [ 0 , 0 ] . children [ 0 , 0 ] . properties [ 0 , 0 ] . YData #NEWLINE#
df [ 'a' ] . where ( df [ 'a' ] <= maxVal , maxVal ) #NEWLINE#
strs . strip ( '.txt' ) . split ( '_' , 2 ) [ - 1 ] . split ( '-' ) #NEWLINE#
r = requests . post ( url , files = files , data = values ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#ALL#SPACE#*#SPACE#FROM#SPACE#foo' ) #NEWLINE#
array ( [ [ 'h' , 'e' , 'l' , 'l' , 'o' ] , [ 's' , 'n' , 'a' , 'k' , 'e' ] , [ 'p' , 'l' , 'a' , #NEWLINE# 't' , 'e' ] ] , dtype = '|S1' ) #NEWLINE#
( ( df [ 'A' ] == 2 ) & ( df [ 'B' ] == 3 ) ) . any ( ) #NEWLINE#
model = sm . Logit ( y , x . astype ( float ) ) . fit ( ) #NEWLINE#
array ( [ [ 24 , 20 , 21 ] , [ 4 , 0 , 1 ] , [ 9 , 5 , 6 ] ] ) #NEWLINE#
os . remove ( os . path . join ( dirpath , file ) ) #NEWLINE#
foo ( [ 1 , 2 , 3 , 3.1 , 'HELLO' , 'WORLD' ] ) #NEWLINE#
fib = lambda n : n if n < 2 else fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
print ( template . format ( ** rec ) ) #NEWLINE#
root . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
Image . open ( path ) #NEWLINE#
dx , dy = 1 , 0 #NEWLINE#
raise TypeError ( "relative#SPACE#imports#SPACE#require#SPACE#the#SPACE#'package'#SPACE#argument" ) #NEWLINE#
x [ 'cat' ] = x . cat . map ( lambda x : ord ( x ) - 64 ) #NEWLINE#
[ ( 'A' , 2055 ) , ( 'B' , 2034 ) , ( 'D' , 1995 ) , ( 'E' , 1977 ) , ( 'C' , 1939 ) ] #NEWLINE#
d . update ( [ 3 , 3 , 3 ] ) #NEWLINE#
[ list ( group ) for k , group in groupby ( l , lambda x : x == '' ) if not k ] #NEWLINE#
gluLookAt ( eX , eY , eZ , cX , cY , cZ , 0 , 1 , 0 ) #NEWLINE#
np . einsum ( 'ijk->kij' , M ) . shape #NEWLINE#
set ( [ ] ) #NEWLINE#
np . diagonal ( np . dot ( np . rollaxis ( a , 2 ) , a ) , 0 , 2 ) . T #NEWLINE#
thedate = datetime . datetime . strptime ( userdatestring , '%Y-%m-%d' ) #NEWLINE#
res = [ ( [ x ] * len ( y ) , y ) for x , y in d . items ( ) ] #NEWLINE#
return func ( * posargs , ** fkwargs ) #NEWLINE#
print ( rawstr ( test4 ) ) #NEWLINE#
b [ x , y ] = z #NEWLINE#
ps = soup . findAll ( 'p' , { 'class' : 'i' } ) #NEWLINE#
parser . add_argument ( '--date' , type = lambda d : datetime . strptime ( d , '%Y%m%d' ) ) #NEWLINE#
urlparse . urlparse ( 'http://www.vimeo.com/52422837' ) . path . lstrip ( '/' ) #NEWLINE#
self . sftp . putfo ( fileobj , path ) #NEWLINE#
[ ( 'A' * 1024 ) for _ in range ( 0 , 1024 * 1024 * 1024 ) ] #NEWLINE#
[ n . name for n in tf . get_default_graph ( ) . as_graph_def ( ) . node ] #NEWLINE#
im . show ( ) #NEWLINE#
re . match ( 'e+' , 'eee3' , pos = 1 ) #NEWLINE#
helper = __import__ ( 'helper_{0}' . format ( check_situation ( ) ) ) #NEWLINE#
inset . set_ylim ( axis . get_ylim ( ) ) #NEWLINE#
screen . blit ( background , ( 0 , 0 ) ) #NEWLINE#
dict . __setitem__ ( self , key , value ) #NEWLINE#
Hn = np . fft . fft ( Moisture_mean_x [ 0 ] ) #NEWLINE#
return application . wsgi_app ( environ , start_response ) #NEWLINE#
print ( str ( names ) [ 1 : - 1 ] ) #NEWLINE#
ssh . close ( ) #NEWLINE#
res . cluster . value_counts ( ) #NEWLINE#
raise Exception ( 'Test' ) #NEWLINE#
list ( itertools . chain ( pat . split ( line ) for line in data ) ) #NEWLINE#
list . pop ( 1 ) #NEWLINE#
[ ( i * j ) for i , j in combinations ( array , 2 ) ] #NEWLINE#
msg [ 'Reply-To' ] = 'THIS#SPACE#IS#SPACE#THE#SPACE#EMAIL#SPACE#I#SPACE#WANT#SPACE#TO#SPACE#CHANGE@domain.com' #NEWLINE#
"""ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ""" #NEWLINE#
bcrypt . check_password_hash ( users_doc [ 'password' ] , request . form [ 'password' ] ) #NEWLINE#
my_objects . append ( MyClass ( i ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
[ [ 0.4 , 0.6 , 0.0 , 0.0 ] , [ 0.2 , 0.4 , 0.4 , 0.0 ] , [ 0.0 , 0.0 , 0.4 , 0.6 ] ] #NEWLINE#
self . setLayout ( self . layout ) #NEWLINE#
query ( extract ( 'hour' , timeStamp ) . label ( 'h' ) ) . group_by ( 'h' ) #NEWLINE#
past_time = datetime . datetime . now ( ) - dt #NEWLINE#
a . writerows ( data ) #NEWLINE#
df . values - df2 . values #NEWLINE#
json . dump ( data , f , ensure_ascii = False ) #NEWLINE#
turtle . forward ( 200 ) #NEWLINE#
listRegex = re . findall ( '[*][[][[].*' , testString ) #NEWLINE#
url ( '^([a-z]{5})/$' , open ) #NEWLINE#
return { 'successful' : True , 'message' : 'auth#SPACE#OK' } #NEWLINE#
theano . printing . debugprint ( f ) #NEWLINE#
{ { ( mydate | date ) : 'U' } } #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 ] } ) #NEWLINE#
list ( filter ( pred , soup . find ( 'tbody' ) . find_all ( 'a' ) ) ) #NEWLINE#
"""""" . join ( soup . html . findAll ( text = True , recursive = False ) ) #NEWLINE#
ax . lines . remove ( lines [ 0 ] ) #NEWLINE#
lis = [ '1' , '100' , '111' , '2' ] #NEWLINE#
logger . error ( 'Test#SPACE#:#SPACE#ABC' ) #NEWLINE#
parser . add_argument ( 'command' ) #NEWLINE#
warnings . warn ( 'Warning...........Message' ) #NEWLINE#
test . py #NEWLINE#
return super ( PersonAdmin , self ) . formfield_for_dbfield ( db_field , ** kwargs ) #NEWLINE#
smtp . sendmail ( from_addr , to_addr , m . as_string ( ) ) #NEWLINE#
ch . setLevel ( logging . DEBUG ) #NEWLINE#
mask = cv2 . cvtColor ( mask , cv2 . COLOR_GRAY2BGR ) #NEWLINE#
old_sheet = wb . get_sheet_by_name ( 'Sheet1' ) #NEWLINE#
print ( '\n-----\n' . join ( sentences ) ) #NEWLINE#
open ( 'datafile' , 'w' ) . write ( serializedData ) #NEWLINE#
db . create_all ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
help ( dir ) #NEWLINE#
break #NEWLINE#
plt . show ( ) #NEWLINE#
df . to_csv ( 'data.csv' , index = False ) #NEWLINE#
glColor3ub ( 255 , 0 , 0 ) #NEWLINE#
op . create_primary_key ( 'similar_orders_pk' , 'similar_orders' , [ 'order_id' ] ) #NEWLINE#
func1 ( 'aaaa' , 'bbbb' , { 'f2_a' : 1 , 'f2_b' : 2 } , { 'f3_a' : 37 , 'f3_b' : 69 } ) #NEWLINE#
button . pack ( ) #NEWLINE#
self . browse_button = Gtk . Button ( label = 'Some#SPACE#Label' , image = image ) #NEWLINE#
T = map ( lambda i : L [ i ] , Idx ) #NEWLINE#
f . write ( '\n' ) #NEWLINE#
f = lambda x , y : x if x > 100 and y < 50 else y #NEWLINE#
return line [ len ( prefix ) : ] #NEWLINE#
ax . set_ylabel ( 'RMSD' ) #NEWLINE#
proc . stdin . flush ( ) #NEWLINE#
{ { a } } #NEWLINE#
parser . add_option ( '-s' , '--start-date' , help = '[REQUIRED]#SPACE#Start#SPACE#date' ) #NEWLINE#
self . create_socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
Server ( '/tmp/server.sock' ) . run ( ) #NEWLINE#
a . split ( '\n' ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
print ( s , s [ - 1 ] . isdigit ( ) ) #NEWLINE#
wait = WebDriverWait ( driver , 10 ) #NEWLINE# wait . until ( EC . visibility_of_element_located ( ( By . CLASS_NAME , 'searchbox' ) ) ) #NEWLINE#
t . pack ( ) #NEWLINE#
s = 'Ã\x89tienne' #NEWLINE#
self . fail ( 'conditions#SPACE#not#SPACE#met' ) #NEWLINE#
self . Layout ( ) #NEWLINE#
frame . ModifyStyle ( win32con . WS_THICKFRAME , 0 ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , unit = 's' ) #NEWLINE#
lst . remove ( None ) #NEWLINE#
print ( my_bytes . decode ( 'unicode_escape' ) ) #NEWLINE#
app . logger . handlers [ : ] = [ ] #NEWLINE#
return df . set_index ( 'hour' ) . reindex ( [ 0 , 6 , 12 , 18 ] ) . reset_index ( ) #NEWLINE#
df . na . drop ( subset = [ 'dt_mvmt' ] ) #NEWLINE#
mock . patch ( __name__ + '.' + 'function_name' ) #NEWLINE#
pd . concat ( [ df . reindex ( [ 2 , 0 , 1 ] ) , df . iloc [ 3 : ] ] ) #NEWLINE#
pickle . load ( open ( 'file' , 'rb' ) ) #NEWLINE#
list1 = [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 200 , 201 , 202 ] #NEWLINE#
data . split ( ) #NEWLINE#
today . day #NEWLINE#
sys . path . append ( '/path/to/Project' ) #NEWLINE#
"""""" . join ( random . choice ( '0123456789ABCDEF' ) for i in range ( 16 ) ) #NEWLINE#
dVal . apply ( lambda series : series / dX ) #NEWLINE#
imshow ( Z , cmap = get_cmap ( 'Spectral' ) , interpolation = 'nearest' ) #NEWLINE#
plt . show ( ) #NEWLINE#
array ( [ [ [ True , True ] , [ True , True ] ] , [ [ True , False ] , [ False , True ] ] , [ [ #NEWLINE# False , True ] , [ True , False ] ] , [ [ True , True ] , [ True , True ] ] ] , dtype = bool ) #NEWLINE#
print ( 'Needle#SPACE#not#SPACE#found.' ) #NEWLINE#
abc = dict ( ( c , string . count ( c ) ) for c in string ) #NEWLINE#
plt . text ( 3 , 0 , t , family = 'serif' , style = 'italic' , ha = 'right' ) #NEWLINE#
do_something ( ) #NEWLINE#
diag_T = np . ravel ( T . diagonal ( ) . copy ( ) ) #NEWLINE#
d . dropna ( subset = [ 'b' ] ) #NEWLINE#
result [ key ] += int ( row [ 0 ] ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
names = pd . concat ( names , frame , ignore_index = True ) #NEWLINE#
s = re . sub ( '<(\\w+)>' , lambda m : replacement_dict . get ( m . group ( ) ) , s ) #NEWLINE#
m . match ( 'Ã¶dipus' ) #NEWLINE#
print ( my_list ) #NEWLINE#
pd . melt ( df , id_vars = 'topic' , value_vars = keys , value_name = 'key' ) #NEWLINE#
result [ key ] [ 'Email' ] . append ( item [ 'Email' ] ) #NEWLINE#
scores . close ( ) #NEWLINE#
len ( [ y for y in x if y > 2 ] ) #NEWLINE#
self . text . insert ( 'end' , 'five\n' ) #NEWLINE#
DATABASES [ 'default' ] [ 'OPTIONS' ] [ 'init_command' ] = 'SET#SPACE#TRANSACTION...' #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
[ 2 , 5 , 3 ] #NEWLINE#
writer . writerow ( row ) #NEWLINE#
plt . ylabel ( 'JPEG#SPACE#quality' ) #NEWLINE#
threading . Timer ( 1 , greeting , ( oh_hi , ) ) . start ( ) #NEWLINE#
os . rename ( filename , filename [ : - 4 ] + '.las' ) #NEWLINE#
raise TypeError ( 'Var#SPACE#should#SPACE#be#SPACE#an#SPACE#iterable,#SPACE#not#SPACE#str#SPACE#or#SPACE#bytes' ) #NEWLINE#
[ row [ s ] for row in LoL [ r ] ] #NEWLINE#
df = pd . concat ( [ df [ 'Track#SPACE#ID' ] , dfpart ] , axis = 1 ) #NEWLINE#
ax . set_zlim3d ( - 2 , 2 ) #NEWLINE#
x = userData . query ( ) . filter ( ndb . GenericProperty ( 'age' ) >= 1 ) . get ( ) #NEWLINE#
np . random . choice ( np . squeeze ( a ) ) #NEWLINE#
'dealer#SPACE#has#SPACE#%s#SPACE#showing' % list ( self . dealer [ : 2 ] ) #NEWLINE#
list ( dict1 . items ( ) ) ^ list ( dict2 . items ( ) ) #NEWLINE#
new_dict = { k : list ( v ) for k , v in list ( my_dict . items ( ) ) } #NEWLINE#
blowfish ( ) #NEWLINE#
"""#SPACE#""" . join ( np . hstack ( [ a . T . real , a . T . imag ] ) . astype ( str ) . flat ) #NEWLINE#
default_app_config = 'your_app.apps.YourAppConfig' #NEWLINE#
return super ( MyModelView , self ) . post ( self , * args , ** kwargs ) #NEWLINE#
[ x [ 0 ] for x in a ] . index ( 53 ) #NEWLINE#
np . in1d ( a , b ) #NEWLINE#
( k , v ) , = list ( d . items ( ) ) #NEWLINE#
df2 = pd . read_csv ( StringIO ( sample_b ) , parse_dates = [ 'from_date' , 'to_date' ] ) #NEWLINE#
df = df1 . join ( df2 , how = 'outer' ) #NEWLINE#
pass #NEWLINE#
output . append ( float ( row [ 4 ] ) ) #NEWLINE#
log = logging . getLogger ( __name__ ) #NEWLINE#
print ( '\rFinished' ) #NEWLINE#
r . match ( 'org/companyA' ) . groups ( ) #NEWLINE#
sys . argv [ i ] #NEWLINE#
f . write ( '\n' . join ( new_list ) ) #NEWLINE#
i = numpy . where ( a != '' ) [ 0 ] #NEWLINE#
a . remove ( set ( [ 2 ] ) ) #NEWLINE#
self . table . setRowCount ( 5 ) #NEWLINE#
array ( [ 1 , 1 , 1 , 1 , 0 ] ) #NEWLINE#
y = np . hsplit ( x , np . arange ( 10 , 129 , 10 ) ) #NEWLINE#
self . queue . add ( item ) #NEWLINE#
print ( list ( a [ b ] ) ) #NEWLINE#
print ( b . __class__ . __name__ ) #NEWLINE#
a [ 2 ] . append ( 3 ) #NEWLINE#
return int ( n ) == n #NEWLINE#
x [ : : 2 ] #NEWLINE#
any ( isinstance ( e , int ) and e > 0 for e in [ 1 , 2 , 'joe' ] ) #NEWLINE#
plt . plot ( data ) #NEWLINE#
{ { form . as_div } } #NEWLINE#
userpath = os . path . normpath ( '(path-to-wiki)/foo/bar.txt' ) #NEWLINE# re . findall ( '[^A-Za-z0-9_\\-\\\\]' , userpath ) #NEWLINE#
files = list ( filter ( path . isfile , os . listdir ( dirToScreens ) ) ) #NEWLINE#
return { 'algo0' : algo0 , 'algo1' : algo1 } [ name ] #NEWLINE#
pd . to_datetime ( df . Date ) . order ( ) . index #NEWLINE#
return func ( func , * args , ** kwargs ) #NEWLINE#
print ( '#SPACE#' . join ( arr ) ) #NEWLINE#
{ str ( key ) : value for key , value in zip ( bins , count ) } #NEWLINE#
df . applymap ( lambda x : str ( x ) . lower ( ) . replace ( '#SPACE#' , '_' ) ) #NEWLINE#
m . put ( ) #NEWLINE#
[ i for i in x if all ( j . isdigit ( ) or j in string . punctuation for j in i ) ] #NEWLINE#
post_response = requests . post ( upload_url , data = response . iter_content ( ) ) #NEWLINE#
x . astype ( 'unicode' ) #NEWLINE#
skrift1 . pack ( pady = 5 ) #NEWLINE#
tekstboks . pack ( pady = 5 ) #NEWLINE#
y = dict ( x , foo_bar = 'spam_eggs' ) #NEWLINE#
np . full ( ( 1 , 3 , 2 , 4 ) , 0 ) #NEWLINE#
print ( sorted ( [ obj ( 'Jack' ) , d ] , key = extract_name ) ) #NEWLINE#
t . start ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
os . system ( cmd ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'arch-summary' , args = [ 1945 ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( midnight_with_tzinfo . astimezone ( pytz . utc ) ) #NEWLINE#
self . add ( record ) #NEWLINE#
"""{:<30}""" . format ( 'left#SPACE#aligned' ) #NEWLINE#
subprocess . call ( args ) #NEWLINE#
df = df . reindex ( pd . date_range ( '2011-01-01' , '2011-10-31' ) , fill_value = 'NaN' ) #NEWLINE#
f . close ( ) #NEWLINE#
Tk . attributes ( '-fullscreen' , False ) #NEWLINE#
right . remove ( right [ 0 ] ) #NEWLINE#
random . choice ( [ chr ( c ) for c in range ( ord ( 'A' ) , ord ( 'D' ) + 1 ) ] ) #NEWLINE#
match = re . search ( '(\\d+/\\d+/\\d+)' , 'The#SPACE#date#SPACE#is#SPACE#99/99/99' ) #NEWLINE# match . group ( 1 ) #NEWLINE#
os . system ( "printf#SPACE#'\x07'" ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ item for item in data if item == 'number1' ] #NEWLINE#
int ( s . decode ( 'base64' ) ) #NEWLINE#
main ( ) #NEWLINE#
admin . site . register ( ItemPending , ItemAdminPending ) #NEWLINE#
parser . add_argument ( 'file' ) #NEWLINE#
outfile . write ( line . replace ( '\r' ) ) #NEWLINE#
ax [ 1 ] . imshow ( arr , interpolation = 'nearest' , cmap = new_cmap ) #NEWLINE#
out . extend ( map ( str , list ( range ( a , b + 1 ) ) ) ) #NEWLINE#
self . connect ( entry , QtCore . SIGNAL ( 'triggered()' ) , lambda : self . doStuff ( item ) ) #NEWLINE#
pygame . init ( ) #NEWLINE#
ax . invert_yaxis ( ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 0 ] #NEWLINE#
x = [ '123' ] * 10 #NEWLINE#
a . xaxis . set_major_formatter ( ticker . NullFormatter ( ) ) #NEWLINE#
data = json . loads ( '{1:}' ) #NEWLINE#
foo . __class__ #NEWLINE#
id = models . AutoField ( primary_key = True ) #NEWLINE#
return functools . reduce ( lambda f , g : lambda x : g ( f ( x ) ) , fns ) #NEWLINE#
config . set ( 'main' , 'key1' , 'value1' ) #NEWLINE#
config . set ( 'main' , 'key2' , 'value2' ) #NEWLINE#
config . set ( 'main' , 'key3' , 'value3' ) #NEWLINE#
threading . Thread ( target = play_audio ) . start ( ) #NEWLINE#
word_dict [ 'foo' ] = word_dict [ 'foo' ] . add ( 'baz' ) #NEWLINE#
df . columns = [ 'date' , 'id' , 'value' ] #NEWLINE#
self . response . out . write ( 'hello#SPACE#%s' % user ) #NEWLINE#
sum ( isinstance ( i , int ) for i in a ) #NEWLINE#
print ( map ( lambda x , y : x + [ y ] , A , list ( range ( 1 , len ( A ) + 1 ) ) ) ) #NEWLINE#
root . bind ( '<Control-Q>' , lambda event = None : root . destroy ( ) ) #NEWLINE#
sys . stdout . write ( message ) #NEWLINE#
pylab . plot ( x , y ) #NEWLINE#
exec ( compile ( open ( filename ) . read ( ) , filename , 'exec' ) ) #NEWLINE#
map ( dict , map ( lambda t : zip ( ( 'num' , 'char' ) , t ) , zip ( list_nums , list_chars ) ) ) #NEWLINE#
proc = subprocess . Popen ( command , startupinfo = startupinfo ) #NEWLINE#
[ [ int ( y ) for y in x . split ( ) ] for x in s . split ( '#SPACE#3#SPACE#4#SPACE#' ) ] #NEWLINE#
print ( is_json ( '{}' ) ) #NEWLINE#
Series ( [ 1 , 2 , 'blah' , '#DIV/0!' ] ) . convert_objects ( convert_numeric = True ) #NEWLINE#
print ( conn . notices [ - 1 ] ) #NEWLINE#
"""|""" . join ( [ s . replace ( '|' , '' ) for s in t . split ( '||' ) ] ) #NEWLINE#
cur . execute ( 'update#SPACE#X#SPACE#set#SPACE#total#SPACE#=#SPACE#80#SPACE#where#SPACE#id#SPACE#=#SPACE#1' ) #NEWLINE#
dict ( re . findall ( '(?:^|\x01)(34|49|56)=(.*?)\x01' , raw_msg ) ) #NEWLINE#
self . method ( ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( ( x [ 0 ] , y [ 0 ] ) ) #NEWLINE#
{ { video . pub_date | timesince } } #NEWLINE#
df . index . values #NEWLINE#
list ( map ( list , product ( list ( range ( amin , amax ) ) , repeat = 3 ) ) ) #NEWLINE#
User . objects . filter ( groups__name = 'monkeys' ) #NEWLINE#
pd . Panel . from_dict ( d , orient = 'minor' ) #NEWLINE#
bmp . Bind ( wx . EVT_LEAVE_WINDOW , onWindow ) #NEWLINE#
data = np . loadtxt ( f ) #NEWLINE#
list ( itertools . dropwhile ( lambda k : k != 'key2' , iter ( d . keys ( ) ) ) ) #NEWLINE#
window . set_icon_name ( 'myapp' ) #NEWLINE#
parser . add_argument ( '-f' , '--fields' , help = 'field#SPACE#names' , required = False ) #NEWLINE#
super ( self . __class__ , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
plt . xticks ( list ( range ( 10 ) ) , labels , rotation = 30 , ha = 'right' ) #NEWLINE#
order_array = np . array ( rows_list ) #NEWLINE#
screen = pygame . display . set_mode ( size ) #NEWLINE#
data = serializers . serialize ( 'json' , YourEntity . objects . all ( ) , fields = ( 'id' , ) ) #NEWLINE#
[ s for s in my_dict if s . startswith ( 'for' ) ] #NEWLINE#
instance . save ( ) #NEWLINE#
ax . plot ( xx , yy ) #NEWLINE#
sum ( map ( pow , l , count ( 1 ) ) ) #NEWLINE#
print ( list ( consecutive_groups ( 'abcd' ) ) ) #NEWLINE#
ts = time . mktime ( dtt ) #NEWLINE#
response = opener . open ( 'http://site.com/login' , data ) #NEWLINE#
print ( map ( hex , a ) ) #NEWLINE#
abs_path = os . path . abspath ( file . name ) #NEWLINE#
print ( same_direction ( [ - 1 , 2 , 3 ] , [ - 1 , 2 , 3 ] ) ) #NEWLINE#
from django . db . models import Q #NEWLINE#
df = pd . DataFrame ( dts , columns = [ 'Date' , 'Value' ] ) . set_index ( 'Date' ) #NEWLINE#
d [ 'searchResult' ] . sort ( key = itemgetter ( 'ranking' ) , reverse = True ) #NEWLINE#
logging . basicConfig ( level = logging . INFO ) #NEWLINE#
s . execute ( 'SET#SPACE#AUTOCOMMIT=0' ) #NEWLINE#
f . write ( myString . encode ( 'latin-1' ) ) #NEWLINE#
SomeClass ( ) . foo ( 'thing' ) #NEWLINE#
print ( dt . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S#SPACE#%Z%z' ) ) #NEWLINE#
res = urllib . request . urlopen ( req ) #NEWLINE#
( myset - ( myset - set ( [ b ] ) ) ) . pop ( ) is a #NEWLINE#
app . MainLoop ( ) #NEWLINE#
df = pd . DataFrame . from_dict ( my_dict , orient = 'index' ) . T #NEWLINE#
app . logger . addHandler ( stream_handler ) #NEWLINE#
x , y = map ( int , input ( 'Enter#SPACE#coordinates' ) . split ( ',' ) ) #NEWLINE#
print ( '{:{}s}#SPACE#{:{}d}#SPACE#{:{}f}' . format ( * sum ( zip ( res , args ) , ( ) ) ) ) #NEWLINE#
plt . gca ( ) . set_xscale ( 'custom' ) #NEWLINE# plt . show ( ) #NEWLINE#
kwargs . update ( dict ( zip ( myfunc . __code__ . co_varnames , args ) ) ) #NEWLINE#
array = np . random . randint ( 0 , 3 , size = ( 200 , 200 ) ) #NEWLINE#
plt . savefig ( 'gridpoints.png' ) #NEWLINE#
plt . scatter ( x , y , marker = '+' , s = 150 , linewidths = 4 , c = y , cmap = plt . cm . coolwarm ) #NEWLINE#
f . read ( ) #NEWLINE#
return f . read ( ) #NEWLINE#
self . root . after ( 1000 , self . update_clock ) #NEWLINE#
min ( s . find ( i ) for i in a ) #NEWLINE#
session . query ( Foo ) . filter ( tuple_ ( Foo . a , Foo . b , Foo . c ) . in_ ( items ) ) #NEWLINE#
plt . savefig ( 'spines3.png' , dpi = 300 ) #NEWLINE#
pyplot . savefig ( 'x.eps' ) #NEWLINE#
bad_chars = { 'a' , 'b' , 'c' } #NEWLINE#
data = f . readframes ( chunk ) #NEWLINE#
print ( pd . DataFrame ( v ) . fillna ( 0 ) . values . astype ( np . int32 ) ) #NEWLINE#
l . append ( list ( func ( 10 ) ) ) #NEWLINE#
fig . savefig ( 'plot.png' ) #NEWLINE#
numpy . array ( [ 'hello' , 'world!' ] ) #NEWLINE#
return QtCore . QVariant ( ) #NEWLINE#
im . save ( 'foo_new.png' ) #NEWLINE#
print ( re . sub ( '(.)(?=.*\\1)|(.)' , fun , x ) ) #NEWLINE#
s = s . replace ( 'honeysuckle' , '' ) #NEWLINE#
[ 2 , 5 , 6 , 7 , 8 , 10 ] #NEWLINE#
map ( list_to_int , [ [ 1 ] , [ 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
"""{0:0>4X}""" . format ( int ( '0000010010001101' , 2 ) ) #NEWLINE#
alice . toys = [ 'doll' , 'teddy#SPACE#bear' ] #NEWLINE#
tom . friends . order_by ( '-pet__age' ) [ : 10 ] #NEWLINE#
ar = map ( int , input ( ) . split ( None , n ) [ : n ] ) #NEWLINE#
print ( item + ',' ) #NEWLINE#
r = requests . get ( 'http://example.org' , proxies = urllib . getproxies ( ) ) #NEWLINE#
class ModelWithImage ( models . Model ) : #NEWLINE# #INDENT# image = models . ImageField ( upload_to = 'images' ) #NEWLINE#
app . config . from_object ( 'config' ) #NEWLINE#
return '#SPACE#' . join ( str ( s ) for s in parts if s is not None ) #NEWLINE#
zipped = zip ( mylist [ 0 : : 2 ] , mylist [ 1 : : 2 ] ) #NEWLINE#
return Product . objects . all ( ) . values ( 'pk' ) . query #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
mySet = { 'abc' } #NEWLINE#
print ( pd . concat ( [ df , df1 ] ) ) #NEWLINE#
f ( 'ten' ) #NEWLINE#
sys . exit ( 2 ) #NEWLINE#
plt . show ( ) #NEWLINE#
return re . findall ( '.{%d}' % length , string ) #NEWLINE#
make_password ( pwd , None , 'md5' ) #NEWLINE#
r = urllib . request . urlopen ( 'https://paypal.com/' ) #NEWLINE#
m = np . einsum ( 'ij,ji->i' , M [ : , : 9 ] , N [ : 9 , : ] ) #NEWLINE#
data = np . empty ( nchars , dtype = 'S' ) #NEWLINE#
keyring . set_password ( 'system' , 'username' , 'password' ) #NEWLINE# keyring . get_password ( 'system' , 'username' ) #NEWLINE#
board [ i ] . append ( 0 ) #NEWLINE#
df . join ( df . groupby ( 'month' ) [ 'A' ] . sum ( ) , on = 'month' , rsuffix = '_r' ) #NEWLINE#
df = pd . DataFrame ( dict ( A = [ 1 , '2' , '_' , '4' ] ) ) #NEWLINE#
return [ { 'This#SPACE#is#SPACE#a#SPACE#word' : arg } for arg in args ] #NEWLINE#
f ( * args , ** kwargs ) #NEWLINE#
yticks ( range ( 10 ) , rotation = 'vertical' ) #NEWLINE#
print ( datetime . timedelta ( days = 1 ) ) #NEWLINE#
{ 'font_face' : 'Source#SPACE#Code#SPACE#Pro' } #NEWLINE#
[ item for item in my_list if item not in to_be_removed ] #NEWLINE#
print ( div . find ( 'img' ) [ 'src' ] ) #NEWLINE#
items = sorted ( list ( d . items ( ) ) , key = keyfunc ) #NEWLINE#
worksheet . update_cells ( cell_list ) #NEWLINE#
plt . scatter ( x , y , c = z , s = 20 ) #NEWLINE#
return query_set . filter ( deleted_at__isnull = True ) #NEWLINE#
plot ( data ) #NEWLINE#
parser . add_argument ( '-c' ) #NEWLINE#
a = set ( a ) #NEWLINE#
t . strftime ( gettext ( '%H:%M' ) ) #NEWLINE#
self . bottom_frame . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
y = np . arange ( 10 , 20 ) #NEWLINE#
sys . stdout . write ( '!!!#SPACE#Failed#SPACE#CaptureFromCAM' ) #NEWLINE#
sys . stdout . write ( '!!!#SPACE#Failed#SPACE#to#SPACE#retrieve#SPACE#first#SPACE#frame' ) #NEWLINE#
sys . stdout . write ( '!!!#SPACE#Error#SPACE#in#SPACE#creating#SPACE#video#SPACE#writer' ) #NEWLINE#
settings . py #NEWLINE#
mech . set_handle_robots ( False ) #NEWLINE#
class Entry ( models . Model ) : #NEWLINE# #INDENT# weekdays = models . PositiveIntegerField ( choices = WEEKDAYS ) #NEWLINE#
raise ValueError ( 'no#SPACE#solution#SPACE#found' ) #NEWLINE#
df = df . sortlevel ( level = 1 , axis = 1 ) #NEWLINE#
dir ( sys . modules [ __name__ ] ) #NEWLINE#
file . seek ( - len ( line ) , 1 ) #NEWLINE#
[ k for k in x if type ( k ) == str ] #NEWLINE#
"""""" . join ( tmp . split ( ',' ) [ : : - 1 ] ) #NEWLINE#
list1 . sort ( ) #NEWLINE#
app . root . mainloop ( ) #NEWLINE#
df [ 'b' ] . apply ( pd . Series ) #NEWLINE#
print ( 'i#SPACE#equals#SPACE#9' if i == 9 else None ) #NEWLINE#
a = [ row for row in a if all ( row [ j ] <= 0 for j in range ( 0 , len ( row ) , 2 ) ) ] #NEWLINE#
loop . run ( ) #NEWLINE#
exit ( 0 ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
zip ( list_a , list_b ) #NEWLINE#
print ( dss ) #NEWLINE#
yield l [ i : i + n ] #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
rank = models . IntegerField ( ) #NEWLINE#
return { 'username' : 'foo' , 'password' : 'bar' } #NEWLINE#
plt . show ( ) #NEWLINE#
string [ 0 ] . isdigit ( ) #NEWLINE#
application = django . core . handlers . wsgi . WSGIHandler ( ) #NEWLINE#
data = response . json ( ) #NEWLINE#
sys . stdout = FlushFile ( sys . __stdout__ ) #NEWLINE#
d = { x : y for x , y in zip ( m [ : : 2 ] , m [ 1 : : 2 ] ) } #NEWLINE#
re_range ( [ 1 , 3 , 5 , 7 , 8 , 9 , 10 , 11 , 13 , 15 , 17 ] ) #NEWLINE#
return render_to_response ( 'products/product_list.html' , { 'products' : products } ) #NEWLINE#
[ '' . join ( v ) for k , v in groupby ( s ) ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
x [ np . ix_ ( np . arange ( x . shape [ 0 ] ) , x_range , y_range ) ] #NEWLINE#
int ( s [ : - 3 ] ) * 60 + int ( s [ - 2 : ] ) #NEWLINE#
cygstart / cygdrive / c / Python27 / Scripts / ipython . exe #NEWLINE#
from flask import request #NEWLINE#
os . path . getsize ( 'C:\\Python27\\Lib\\genericpath.py' ) #NEWLINE#
win32clipboard . CloseClipboard ( ) #NEWLINE#
out . write ( line . replace ( 'blah' , '!blah!' ) ) #NEWLINE#
output . write ( '{0}\n' . format ( feature ) ) #NEWLINE#
a = np . where ( np . eye ( 7 ) , np . nan , 1 ) #NEWLINE#
with open ( '1' , 'r' ) as fp : #NEWLINE# #INDENT# content = fp . read ( ) #NEWLINE#
opener = urllib . request . build_opener ( ) #NEWLINE#
print ( strtod ( '(a+2.0)/1e-1' , 3 ) ) #NEWLINE#
areas . apply ( multiply_by_demand ) . unstack ( 0 ) #NEWLINE#
btn . pack ( ) #NEWLINE#
df [ ( df . values > 1.5 ) . any ( 1 ) ] #NEWLINE#
elapsed3s . append ( elapsed3 ) #NEWLINE#
student_objects . sort ( key = attrgetter ( 'age' ) ) #NEWLINE#
x + [ 1 , 2 , 3 ] #NEWLINE#
re1 = re . compile ( 'one' ) #NEWLINE#
"""""" . join ( a for a , b in zip ( sa , sb ) if terminating ( a == b ) ) #NEWLINE#
[ ( [ k ] * v ) for k , v in list ( Counter ( L ) . items ( ) ) ] #NEWLINE#
path2 = re . sub ( '(\\[|])' , '[\\1]' , path ) #NEWLINE#
client . post ( '/login/' , { 'username' : 'john.smith' , 'password' : 'secret' } ) #NEWLINE#
zip ( * ( [ iter ( num_str . split ( ',' ) ) ] * 2 ) ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#' + filename , open ( i , 'wb' ) . write ) #NEWLINE#
os . listdir ( base ) #NEWLINE#
yourcode ( ) #NEWLINE#
indices = np . where ( a >= 1.5 ) #NEWLINE#
return render_to_response ( 'blog/index.html' , { 'posts' : posts } ) #NEWLINE#
window . show ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
df . columns = [ 'a' , 'b' ] #NEWLINE#
line = re . sub ( regx , '\\1' , line ) #NEWLINE#
ET . SubElement ( e , 'D' , dict ( name = 'error' ) ) #NEWLINE#
"""{0:.3f}""" . format ( a + 0 ) #NEWLINE#
x = list ( x ) #NEWLINE#
plt . subplot ( 122 ) #NEWLINE#
content = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
sift = cv2 . xfeatures2d . SIFT_create ( ) #NEWLINE#
return HttpResponse ( message ) #NEWLINE#
np . where ( np . isnan ( a ) , ma . array ( a , mask = np . isnan ( a ) ) . mean ( axis = 0 ) , a ) #NEWLINE#
[ '>Safr04' , 'A' , '104' ] [ '>Safr04' , 'Y' , '15' ] #NEWLINE#
[ '>Safr10' , 'A' , '104' ] [ '>Safr07' , 'Y' , '15' ] #NEWLINE#
[ '>Safr02' , 'K' , '110' ] [ '>Safr01' , 'Y' , '78' ] #NEWLINE#
[ '>Safr03' , 'T' , '110' ] [ '>Safr02' , 'Y' , '78' ] #NEWLINE#
[ '>Safr04' , 'T' , '110' ] [ '>Safr04' , 'T' , '78' ] #NEWLINE#
print ( hkweather . select ( 'div[class="fnd_date"]' ) ) #NEWLINE#
return { k : v for k , v in somedict . items ( ) if key_criteria_func ( k ) } #NEWLINE#
print ( df . sort_index ( ) ) #NEWLINE#
hex ( b [ 0 ] ) #NEWLINE#
print ( df ) #NEWLINE#
[ 'a' , 'a' , 'r' , 'g' , 'h' ] #NEWLINE#
parser . add_argument ( '-o' , '--output' , required = True ) #NEWLINE#
np . roll ( a , - 1 ) #NEWLINE#
return [ ( new_element if i in indices else e ) for i , e in enumerate ( lst ) ] #NEWLINE#
BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) #NEWLINE#
threading . Thread . __init__ ( self , args = ( ) , kwargs = None ) #NEWLINE#
plt . show ( ) #NEWLINE#
return all ( any ( substr in s for s in strings ) for substr in substrings ) #NEWLINE#
map ( int , list ( bin ( YOUR_NUMBER ) [ 2 : ] ) ) #NEWLINE#
df . loc [ df [ 'y' ] == 'N/A' , 'y' ] = np . nan #NEWLINE#
d = { name : int ( value ) for name , value in splitstrs } #NEWLINE#
plot ( x , y ) #NEWLINE#
plt . ylim ( 1 , 0 ) #NEWLINE#
print ( np . may_share_memory ( a , b ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . connect ( 'axes_leave_event' , on_leave ) #NEWLINE#
pd . DataFrame ( d ) #NEWLINE#
print ( datetime . datetime . fromtimestamp ( dt ) ) #NEWLINE#
conn . send ( 'close' ) #NEWLINE#
shutil . move ( 'file' , '/tmp' ) #NEWLINE#
print ( 'xpath#SPACE#query:#SPACE#wrong#SPACE#node#SPACE#set#SPACE#value' ) #NEWLINE#
files = glob . glob ( '*.txt' ) #NEWLINE#
gevent . joinall ( [ job1 , job2 ] ) #NEWLINE#
print ( link . find ( 'a' ) . attrs [ 'href' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
socket . send ( 'Hello' ) #NEWLINE#
shutil . rmtree ( self . name ) #NEWLINE#
_exec ( 'do_print();#SPACE#do_print();#SPACE#do_print()' , globals ( ) , locals ( ) ) #NEWLINE#
b . shape #NEWLINE#
return s . isdigit ( ) #NEWLINE#
elementwiseApply ( add , [ [ 0 , 0 , 0 ] , [ 0 , 0 ] , 0 ] , [ [ 4 , 4 , 4 ] , [ 4 , 4 ] , 4 ] ) #NEWLINE#
[ x for x in list_1 if isinstance ( x , numbers . Number ) ] #NEWLINE#
datetime . datetime . utcfromtimestamp ( x . tolist ( ) / 1000000000.0 ) #NEWLINE#
'1' + 'Â©' #NEWLINE#
f . write ( mytext ) #NEWLINE#
print ( gsm_encode ( 'Hello#SPACE#World' ) ) #NEWLINE#
set ( [ 0 , 9 , 4 , 6 , 7 ] ) #NEWLINE#
apps . get_models ( ) #NEWLINE#
print ( match . group ( 0 ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
compiled_code = compile ( 'x1#SPACE#=#SPACE#(1,#SPACE#5);#SPACE#y1#SPACE#=#SPACE#(1,#SPACE#5)' , 'string' , 'exec' ) #NEWLINE#
s = re . sub ( '([a-z]+)([0-9]+)' , '\\1' + '[' + '\\2' + ']' , s ) #NEWLINE#
ax . scatter ( x , y , z ) #NEWLINE#
list ( set ( q ) & set ( w ) ) #NEWLINE#
group . add_argument ( '--vid' , type = auto_int , help = 'vid#SPACE#of#SPACE#DUT' ) #NEWLINE#
user . save ( ) #NEWLINE#
figure ( num = None , figsize = ( 8 , 6 ) , dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) #NEWLINE#
int ( tree . xpath ( "count(//ol/li[.#SPACE#=#SPACE#'%s']/preceding-sibling::li)" % value ) ) #NEWLINE#
return response #NEWLINE#
df . apply ( lambda x : pd . to_numeric ( x , errors = 'force' ) ) #NEWLINE#
l2 = [ item for item in l1 if item [ 0 ] . startswith ( 'img' ) ] #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
cbar = fig . colorbar ( result ) #NEWLINE#
self . frame . Show ( ) #NEWLINE#
prettyHTML = soup . prettify ( ) #NEWLINE#
re . sub ( '-{1,2}' , dashrepl , 'pro----gram-files' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
return np . count_nonzero ( np . bitwise_xor ( a , b ) & r != 0 ) #NEWLINE#
wn . synset ( 'dog.n.1' ) . name ( ) #NEWLINE#
list [ : 10 ] #NEWLINE#
return '\n' . join ( result ) #NEWLINE#
client . connect ( 'iot.eclipse.org' , 1883 , 60 ) #NEWLINE#
"""Command#SPACE#line#SPACE#options""" #NEWLINE#
return struct . unpack ( '<d' , struct . pack ( '<q' , n ) ) [ 0 ] #NEWLINE#
run_cmd ( ) #NEWLINE#
bytearray ( '\x00\x00\x00\x00\x00\x00\x00\x00è\x03\x00\x00\x00\x00\x00\x00' ) #NEWLINE#
print ( soup . find ( 'age' ) . string ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
spp1 . add_argument ( '-x' ) #NEWLINE#
file . writelines ( data ) #NEWLINE#
self . show ( ) #NEWLINE#
s [ : s . rfind ( 'b' ) ] . rfind ( 'b' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
import scipy . optimize #NEWLINE#
conn . request ( 'POST' , '/' , body , headers ) #NEWLINE#
history = model . fit ( X_train , y_train , batch_size = 7 , nb_epoch = 3 , verbose = 1 ) #NEWLINE#
example1 ( ) #NEWLINE#
assertDictEqual ( dict1 , dict2 ) #NEWLINE#
df . sort ( axis = 1 , inplace = True ) #NEWLINE#
Eat = 0 #NEWLINE#
text = sys . stdin . read ( ) #NEWLINE#
return min ( max ( num , start ) , end ) #NEWLINE#
df2 = df . pivot ( columns = 'hour' , index = 'date' ) #NEWLINE#
[ 1 , 1 , 2 , 2 , 3 , 3 ] #NEWLINE#
print ( '%r,#SPACE#%r' % ( True , False ) ) #NEWLINE#
df [ 'new' ] = new_column . reset_index ( level = 0 , drop = True ) #NEWLINE#
print ( bs2 . find ( 'a' ) . string ) #NEWLINE#
extension = os . path . splitext ( filename ) [ 1 ] [ 1 : ] #NEWLINE#
index_list . append ( [ ( i + temp ) for i in range ( items ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . Cat1 = np . where ( df . Cat1 . isnull ( ) , df . Cat2 , df . Cat1 ) #NEWLINE#
url ( '^accounts/login/$' , 'my_app.view.Login' , name = 'login' ) , #NEWLINE#
print ( '#SPACE#' . join ( s ) ) #NEWLINE#
socket . send ( 'ah#SPACE#ha!' ) #NEWLINE#
[ ( 'client' , 0.0265082412402 ) , ( 'want' , 0.016477447 ) ] #NEWLINE#
defaultval if myval is None else myval #NEWLINE#
unique_longest_strings = list ( set ( longest_strings ) ) #NEWLINE#
re . sub ( '(.)' , '\\1-' , 'Nissim' ) #NEWLINE#
df = pd . DataFrame . from_records ( data ) #NEWLINE#
Tkinter . Frame . __init__ ( self , root ) #NEWLINE#
cb . set_label ( label = 'a#SPACE#label' , weight = 'bold' ) #NEWLINE#
print ( 'The#SPACE#current#SPACE#user#SPACE#is#SPACE#"%s"' % request . user . username ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
testvar = 'MyVariable' #NEWLINE#
( lambda : 1 ) ( ) == ( lambda : 1 ) ( ) #NEWLINE#
app . jinja_env . filters . update ( my_filters ) #NEWLINE#
data [ 'a' ] . ravel ( 'F' ) #NEWLINE#
stopword_pattern = re . compile ( stopstring ) #NEWLINE#
startupinfo . dwFlags |= subprocess . STARTF_USESHOWWINDOW #NEWLINE#
x = np . delete ( x , np . arange ( 0 , x . size , 3 ) ) #NEWLINE#
globals ( ) [ 'a' ] = a #NEWLINE#
plt . xlabel ( 'Purchase#SPACE#amount' , fontsize = 18 ) #NEWLINE#
df . sort_values ( 'impwealth' , inplace = True ) #NEWLINE#
graph . set_xticklabels ( [ date . strftime ( '%Y-%m-%d' ) for date , value in data ] ) #NEWLINE#
data . append ( row ) #NEWLINE#
print ( 'done' ) #NEWLINE#
line = 'A=15,#SPACE#B=8,#SPACE#C=false,#SPACE#D=[somevar!#SPACE#a?0.1!#SPACE#b?77!#SPACE#c?true]' #NEWLINE#
[ LoL [ i ] [ s ] for i in range ( len ( LoL ) ) [ r ] ] #NEWLINE#
table . setItem ( rowPosition , 1 , QtGui . QTableWidgetItem ( 'text2' ) ) #NEWLINE#
df [ df . index . levels [ 0 ] . isin ( stk_list ) ] #NEWLINE#
DBSession = scoped_session ( sessionmaker ( bind = engine ) ) #NEWLINE#
plt . pause ( 0.5 ) #NEWLINE#
print ( time . mktime ( datetime . datetime . now ( ) . timetuple ( ) ) ) #NEWLINE#
raise ValidationError ( 'Invalid#SPACE#password' ) #NEWLINE#
getattr ( parent , collection ) . append ( child ) #NEWLINE#
result . append ( b [ index - 1 ] ) #NEWLINE#
unittest . TestCase . __init__ ( self , 'evenTest' ) #NEWLINE#
row = [ item [ 0 ] for item in cursor . fetchall ( ) ] #NEWLINE#
if x is None : #NEWLINE# #INDENT# return None #NEWLINE#
parser . parse ( '2012-11-06T15:08:51.393631' ) #NEWLINE#
ax1 . axis [ 'bottom' ] . set_visible ( False ) #NEWLINE#
print ( 'Elapsed#SPACE#time#SPACE#was#SPACE#%g#SPACE#seconds' % ( end_time - start_time ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
B , C = A [ : : 2 ] , A [ 1 : : 2 ] #NEWLINE#
b = [ 'k' , 'h' , 'p' ] #NEWLINE#
proc . communicate ( ) #NEWLINE#
np . arange ( 1 , a . shape [ 1 ] , 2 ) #NEWLINE#
word = word [ : x ] + ',\n' #NEWLINE#
plt . show ( ) #NEWLINE#
ax . lines = [ ] #NEWLINE#
a = np . array ( [ 0 , 1 , 2 , 3 , 4 , 5 , 5 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
return re . sub ( '/.' , to_tag , text ) #NEWLINE#
verbose_name = 'owned#SPACE#object' #NEWLINE#
result = re . sub ( '\\*+' , '*' , '***abc**de*fg******h' ) #NEWLINE#
df1 . ix [ 0 , ] #NEWLINE#
x = all ( list_of_bools ) #NEWLINE#
{ { ordered_dicts | byattr ( 'id' , 'foo' ) } } #NEWLINE#
return datetime . date . today ( ) #NEWLINE#
custom_sort = make_custom_sort ( [ [ 'site' , 'A1' , 'A5' , 'A10' ] ] ) #NEWLINE#
ax . add_patch ( rect3 ) #NEWLINE#
subprocess . Popen ( [ 'python' , 'manage.py' , 'runserver' ] ) #NEWLINE#
print ( [ ( k , len ( index [ k ] ) ) for k in sorted ( index . keys ( ) ) ] ) #NEWLINE#
my_model . duration = datetime . timedelta ( days = 20 , hours = 10 ) #NEWLINE#
np . argwhere ( np . in1d ( a , np . intersect1d ( a , b ) ) == False ) . flatten ( ) . tolist ( ) #NEWLINE#
open ( 'drive:\\path\\to\\file:streamname' , 'wb' ) #NEWLINE#
print ( 'Ä\x83' ) #NEWLINE#
print ( ( len ( s ) , len ( data ) , data ) ) #NEWLINE#
def main ( ) : #NEWLINE# #INDENT# print ( 'In#SPACE#sub_main' ) #NEWLINE#
return pickle . loads ( '' ) #NEWLINE#
[ 'jumped' , 'fox' , 'over' , 'brown' , 'log' , 'the' , 'quick' ] #NEWLINE#
return sorted ( qs , key = lambda n : ( n [ 0 ] , int ( n [ 1 : ] ) ) ) #NEWLINE#
print ( '\n' . join ( [ ( '%i:#SPACE#%s' % ( n , l [ n ] ) ) for n in range ( len ( l ) ) ] ) ) #NEWLINE#
dict ( enumerate ( google_price_data , start = 1 ) ) #NEWLINE#
return json . load ( f ) #NEWLINE#
cur . execute ( 'create#SPACE#table#SPACE#test(x)' ) #NEWLINE#
array . array ( 'B' , [ 0 ] * 10000 ) #NEWLINE#
print ( decoded . strip ( ) ) #NEWLINE#
r = re . compile ( '^[a-z]{1,15}$' ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_formatter ( dates . DateFormatter ( '%H:%M' ) ) #NEWLINE#
return [ k for k , v in list ( d1 . items ( ) ) if v == max ( d1 . values ( ) ) ] [ 0 ] #NEWLINE#
[ 'http://www.domainname.com/page?CONTENT_ITEM_ID=1234' , 'param2' , 'param3' ] #NEWLINE#
lst [ 0 ] = '' #NEWLINE#
struct . pack ( 'I%ds' % ( len ( s ) , ) , len ( s ) , s ) #NEWLINE#
print ( row . get_text ( ) ) #NEWLINE#
process . exit ( ) #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#tablename#SPACE#values#SPACE#(?,?,?)' , item ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
plt . savefig ( 'textvals.png' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
gtk . main ( ) #NEWLINE#
[ x for x in seq if x not in seen and not seen . add ( x ) ] #NEWLINE#
p . start ( ) #NEWLINE#
print ( socket . gethostname ( ) ) #NEWLINE#
itertools . permutations ( lst , 3 ) #NEWLINE#
return { 'ABC' : '123' } #NEWLINE#
""",#SPACE#""" . join ( '=' . join ( ( k , str ( v ) ) ) for k , v in sorted ( mydict . items ( ) ) ) #NEWLINE#
driver . close ( ) #NEWLINE#
anyTrue = any ( somePredicate ( elem ) for elem in someIterable ) #NEWLINE#
loop . close ( ) #NEWLINE#
return weekdays [ datetime . now ( ) . weekday ( ) ] #NEWLINE#
match = re . search ( '\\<(?P<brackets>[^\\>]+)>' , text ) #NEWLINE#
now = datetime . datetime ( 2014 , 3 , 14 , 12 , 34 ) #NEWLINE#
data_json = simplejson . dumps ( data_dict ) #NEWLINE#
getattr ( obj , name ) #NEWLINE#
np . unique ( a . round ( decimals = 4 ) ) #NEWLINE#
data = dom . getElementsByTagName ( 'data' ) [ 0 ] . childNodes [ 0 ] . data #NEWLINE#
datetime . fromtimestamp ( str ( unix_timestamp ) [ 0 : - 3 ] ) #NEWLINE#
new_array = np . fromiter ( means , dtype = np . float32 ) . reshape ( new_shape ) #NEWLINE#
set ( x * x for x in range ( 10 ) ) #NEWLINE#
df . set_index ( [ 'Price' , 'City' , 'Quantity' ] , inplace = True ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
d . setdefault ( item [ 0 ] , [ ] ) . append ( item [ 1 : ] ) #NEWLINE#
print ( line . replace ( '\n' , '' ) ) #NEWLINE#
print ( map ( int , list ( '' . join ( row ) [ 1 : ] ) ) ) #NEWLINE#
"""238#SPACE#NEO#SPACE#Sports""" . split ( None , 1 ) #NEWLINE#
sys . path . append ( 'c:\\Python' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '' . join ( letters [ : i ] + letters [ i : : - 1 ] ) ) #NEWLINE#
cbar . set_label ( 'My#SPACE#Label' ) #NEWLINE#
utc_offset = time . localtime ( ) . tm_gmtoff #NEWLINE#
print ( [ a . text for a in soup . select ( 'section.staff-picks#SPACE#h6.project-title#SPACE#a' ) ] ) #NEWLINE#
matches = tree . xpath ( '//name[text()="Espresso"]' ) #NEWLINE#
next ( v for k , v in list ( my_dict . items ( ) ) if 'Date' in k ) #NEWLINE#
[ dict ( zip ( keys , row ) ) for row in zip ( nums , chars ) ] #NEWLINE#
f . seek ( old_file_position , os . SEEK_SET ) #NEWLINE#
app . jinja_env . globals . update ( clever_function = clever_function ) #NEWLINE#
len ( pickle . dumps ( 23 , - 1 ) ) #NEWLINE#
df = df . set_index ( 'Index' ) . loc [ list ( range ( 1 , 11 ) ) ] . reset_index ( ) #NEWLINE#
mylist . pop ( 0 ) #NEWLINE#
sys . path . insert ( 0 , '.' ) #NEWLINE#
( df . ix [ 0 ] - df . ix [ 1 ] ) . astype ( 'timedelta64[Y]' ) #NEWLINE#
df . sort ( [ 'issue' , 'start' ] , inplace = True ) #NEWLINE#
return self . function ( other ( * args , ** kwargs ) ) #NEWLINE#
return ( '' . join ( t ) for t in itertools . product ( * zip ( s . lower ( ) , s . upper ( ) ) ) ) #NEWLINE#
new_d = pd . Series ( d ) #NEWLINE#
df = df . applymap ( str ) #NEWLINE#
print ( 'line[{}]#SPACE#=#SPACE#{}' . format ( i , line ) ) #NEWLINE#
ax . set_ylabel ( 'Row(s)' ) #NEWLINE#
self . fields [ 'tst' ] . queryset = someData . objects . filter ( name__icontains = '1' ) #NEWLINE#
inv . blit ( img , ( 0 , 0 ) , None , BLEND_RGB_SUB ) #NEWLINE#
df . apply ( lambda x : x . str . replace ( 'type#SPACE#' , '' ) . astype ( int ) ) #NEWLINE#
( X [ : , ( None ) , : ] * X ) . swapaxes ( 0 , 2 ) #NEWLINE#
print ( 'COMMENT' + '#SPACE#' + tok ) #NEWLINE#
df = pd . DataFrame ( [ ] ) #NEWLINE#
links = table . xpath ( ".//a[contains(@href,#SPACE#'http://www.example.com/filter/')]" ) #NEWLINE#
np . arange ( 11 ) [ np . r_ [ 0 : 3 , 7 : 11 ] ] #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
a . append ( 1 ) #NEWLINE#
q = { ( i , j ) : ( 0 ) for i in range ( 5 ) for j in range ( 4 ) } #NEWLINE#
P [ np . ogrid [ 0 : M , 0 : N , 0 : 2 ] + [ indices [ ... , None ] ] ] #NEWLINE#
print ( request . get_message ( ) . request_body . flatten ( ) . data ) #NEWLINE#
models . py #NEWLINE#
func ( ) #NEWLINE#
plt . plot ( x , g ( x ) , zorder = 1 ) #NEWLINE#
set ( d2 . items ( ) ) . issubset ( set ( d1 . items ( ) ) ) #NEWLINE#
re . sub ( '\\|(?!\\|)' , '' , t ) #NEWLINE#
session . query ( BlogPost ) . filter_by ( visible = True ) #NEWLINE#
Gtk . main_quit ( ) #NEWLINE#
command = 'ls#SPACE#-l' #NEWLINE#
_num_pages . append ( 1 ) #NEWLINE#
"""{:08b}""" . format ( 1 ) #NEWLINE#
my_func ( 20 , 30 , 40 , 50 , kwarg1 = 'spam' , kwarg2 = 'eggs' ) #NEWLINE#
values = ',' . join ( [ str ( i ) for i in value_list ] ) #NEWLINE#
return regex . sub ( '' , s ) #NEWLINE#
df [ df . select_dtypes ( include = [ 'number' ] ) . columns ] *= 3 #NEWLINE#
df . unstack ( [ 'A' , 'B' ] ) . fillna ( 0 ) . stack ( [ 'A' , 'B' ] ) #NEWLINE#
twrv . start ( ) #NEWLINE#
data = { 'name' : 'André' } #NEWLINE#
tasks [ sys . argv [ 1 ] ] ( ) #NEWLINE#
fig . set_size_inches ( 5 , 8 ) #NEWLINE#
users = db . session . query ( User ) . all ( ) #NEWLINE#
random . shuffle ( items ) #NEWLINE#
f . close ( ) #NEWLINE#
mail . login ( 'myusername@gmail.com' , 'mypassword' ) #NEWLINE#
self . show ( ) #NEWLINE#
im . write ( 'file_out-' + str ( p ) + '.png' ) #NEWLINE#
name = models . CharField ( max_length = 10 , default = 'bar#SPACE#x' ) #NEWLINE#
subprocess . call ( row , shell = True ) #NEWLINE#
"""a#SPACE#b#SPACE#c,d,e,f""" . rsplit ( ',' , 1 ) #NEWLINE#
print ( [ columns [ 0 ] for column in cursor . fetchall ( ) ] ) #NEWLINE#
np . minimum . accumulate ( a ) #NEWLINE#
return interleaveHelper ( lst [ : len ( lst ) / 2 ] , lst [ len ( lst ) / 2 : ] ) #NEWLINE#
print ( json . loads ( json . dumps ( s ) ) ) #NEWLINE#
df = pandas . DataFrame ( { 'user_id' : [ 1 , 2 , 1 , 4 ] , 'value' : [ 100 , 100 , 200 , 200 ] } ) #NEWLINE#
print ( soup . find ( 'strong' , text = 'some#SPACE#value' ) == soup . find ( 'strong' ) . text ) #NEWLINE#
self . response . out . write ( '</td><td>' ) #NEWLINE#
self . response . out . write ( '</td></tr>' ) #NEWLINE#
return int ( input ( msg ) ) #NEWLINE#
app . config . from_envvar ( 'MYAPP_SETTINGS' , silent = True ) #NEWLINE#
print ( json . dumps ( somedict ) ) #NEWLINE#
return HttpResponse ( simplejson . dumps ( result ) , mimetype = 'application/json' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
pl . show ( ) #NEWLINE#
print ( now . millisecond ( ) , now . microsecond ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
name . __class__ . __class__ #NEWLINE#
win32gui . ShowWindow ( firefox [ 0 ] , win32con . SW_MINIMIZE ) #NEWLINE#
session . query ( ZKUser ) . filter ( ZKGroup . id . in_ ( [ 1 , 2 ] ) ) . all ( ) #NEWLINE#
plt . colorbar ( sm , ax = ax ) #NEWLINE#
return len ( [ char for char in unistr if unicodedata . combining ( char ) == 0 ] ) #NEWLINE#
return x . as_matrix ( ) #NEWLINE#
os . environ [ 'SPARK_HOME' ] = '/path/to/spark/root' #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return [ elem for elem in some_iterable ] #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US.utf8' ) #NEWLINE#
imshow ( gray1 , cmap = cm . gray , alpha = 0.5 ) #NEWLINE#
os . stat ( '.' ) #NEWLINE#
dict ( dict_list ) #NEWLINE#
c . flatten ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
return matched [ 0 ] #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
zipDocment . extractall ( ) #NEWLINE#
np . sort ( reference ) #NEWLINE#
v = data [ row ] [ col ] #NEWLINE#
list_2 = [ num for num in list_1 if isinstance ( num , ( int , float ) ) ] #NEWLINE#
sys . stdout . write ( alphabet [ bisect . bisect ( f_list , random . random ( ) ) - 1 ] ) #NEWLINE#
print ( parmap ( lambda i : i * 2 , [ 1 , 2 , 3 , 4 , 6 , 7 , 8 ] ) ) #NEWLINE#
session . rollback ( ) #NEWLINE#
plt . savefig ( 'labelAtEnd.png' ) #NEWLINE#
map ( numpy . random . shuffle , a ) #NEWLINE#
ax . set_ylim ( 0 , 1 ) #NEWLINE#
results = np . einsum ( 'ij,jkl->ikl' , factor , input ) #NEWLINE#
[ item for item in x if not y . intersection ( item ) ] #NEWLINE#
nextmonth = datetime . date . today ( ) + relativedelta . relativedelta ( months = 1 ) #NEWLINE#
x [ index ] if - len ( l ) <= index < len ( l ) else default #NEWLINE#
result = [ r for r , in result ] #NEWLINE#
self . assertRaises ( RuntimeError , lambda : list ( Example ( ) . generatorExample ( ) ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
engine = sqlalchemy . create_engine ( 'mysql+mysqldb://root:123@127.0.0.1/%s' % db ) #NEWLINE#
list_of_tuples = [ ( x , y ) for x , y , label in data_one ] #NEWLINE#
print ( np . einsum ( 'mnr,ndr->mdr' , A , B ) . shape ) #NEWLINE#
bisect . bisect ( grid , value ) #NEWLINE#
print ( Matrix [ 0 ] [ 0 ] ) #NEWLINE#
frame . grid ( row = 0 , column = 0 , sticky = N + S + E + W ) #NEWLINE#
string = 'string%d' % ( i , ) #NEWLINE#
print ( sys . argv [ 0 ] ) #NEWLINE#
a . deiconify ( ) #NEWLINE#
datetime . time ( * map ( int , '03:55' . split ( ':' ) ) ) #NEWLINE#
self . assertEqual ( 314 , self . widget . foo ( ) ) #NEWLINE#
df [ 'fruitname' ] . value_counts ( ) #NEWLINE#
self . conn . send ( msg ) #NEWLINE#
window . connect ( 'delete-event' , Gtk . main_quit ) #NEWLINE#
print ( calendar . timegm ( d . timetuple ( ) ) ) #NEWLINE#
keys = set ( ) . union ( * all_dicts ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
for_df = pd . concat ( [ for_df , for_df ] , axis = 1 , keys = [ 'FOR' ] ) #NEWLINE#
return x ** 2 #NEWLINE#
ax . grid ( ) #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
shutil . move ( name , dst ) #NEWLINE#
os . remove ( 'C:\\system\x07_very_important_system_file' ) #NEWLINE#
text = dlg . ui . lineEdit . text ( ) #NEWLINE#
driver . get ( 'http://foo.com' ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
{ ( 0 ) : [ 'a' , 'b' ] , ( 1 ) : [ 'c' , 'd' ] , ( 2 ) : [ 'e' ] , ( 3 ) : [ 'f' ] } #NEWLINE#
"""{:^30}""" . format ( 'centered' ) #NEWLINE#
app . logger . setLevel ( logging . DEBUG ) #NEWLINE#
next ( i for i , j in enumerate ( '#SPACE##SPACE##SPACE#xyz' ) if j not in string . whitespace ) #NEWLINE#
start_server ( ) #NEWLINE#
np . random . shuffle ( a . flat ) #NEWLINE#
shutil . copytree ( from_path , to_path ) #NEWLINE#
cogrouped . mapValues ( lambda x : ( list ( x [ 0 ] ) , list ( x [ 1 ] ) ) ) . collect ( ) #NEWLINE#
im = Image . open ( 'test.png' ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
plt . text ( 5 , 10 , t , fontsize = 18 , ha = 'center' , va = 'top' ) #NEWLINE#
print ( k , v ) #NEWLINE#
G . add_edge ( 'Grandchild_%i' % i , 'Greatgrandchild_%i' % i ) #NEWLINE#
l . sort ( key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
pd . DataFrame ( data ) #NEWLINE#
[ 10 , 40 , 60 , 90 , 100 ] #NEWLINE#
data = pd . read_csv ( 'http://domain.com/passkey=wedsmdjsjmdd' ) #NEWLINE#
legend_labels = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
np . random . choice ( array1 , 5 ) #NEWLINE#
t . plot ( x = 'date' , y = 'sample_data' , style = '.' ) #NEWLINE#
model . most_similar ( positive = [ 'woman' , 'king' ] , negative = [ 'man' ] ) #NEWLINE#
{ k : ( p [ k ] - m [ k ] ** 2 ) for k in m } #NEWLINE#
f = open ( fpath ) #NEWLINE#
df [ ( df . select_dtypes ( include = [ 'number' ] ) != 0 ) . any ( 1 ) ] #NEWLINE#
"""#SPACE#""" . join ( str ( int ( x ) ) if x . isdigit ( ) else x for x in s . split ( ) ) #NEWLINE#
ast . literal_eval ( '["mixed",#SPACE#\'quoting\',#SPACE#"""styles"""]' ) #NEWLINE#
t . start ( ) #NEWLINE#
hasattr ( Foo , 'echo_bar' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
object . __setattr__ ( self , name , value ) #NEWLINE#
return [ [ m [ row ] [ col ] for col in range ( 0 , width ) ] for row in range ( 0 , height ) ] #NEWLINE#
""".""" #NEWLINE#
json_data . close ( ) #NEWLINE#
df_test . groupby ( by = [ 'Cus_ID' ] ) . apply ( tw_avg , 'Value' , 'Date' ) #NEWLINE#
self . setSizePolicy ( QtGui . QSizePolicy . Expanding , QtGui . QSizePolicy . Fixed ) #NEWLINE#
os . isatty ( sys . stdout . fileno ( ) ) #NEWLINE#
t . bind ( on_press = function ) #NEWLINE#
stmt6 = 'a#SPACE#in#SPACE#s#SPACE#;#SPACE#b#SPACE#in#SPACE#s' #NEWLINE#
list ( b ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
"""You#SPACE#need#SPACE#Python#SPACE#2.6#SPACE#or#SPACE#later.""" #NEWLINE#
os . killpg ( process . pid , signal . SIGKILL ) #NEWLINE#
nx . dijkstra_path ( g , 'b' , 'c' , 'distance' ) #NEWLINE#
tn . write ( 'ls\n' ) #NEWLINE#
scaling = np . array ( [ dx , dy , dz ] ) #NEWLINE#
complete_path = os . path . join ( root_path , sanitised_path ) #NEWLINE#
print ( f ( ) ) #NEWLINE#
sorted_l = sorted ( l , key = lambda x : x . get ( 'genre' , '' ) ) #NEWLINE#
control = win32gui . FindWindowEx ( window , 0 , 'Static' , 0 ) #NEWLINE#
df . sort_values ( [ 'col1' , 'rk' ] , inplace = True ) #NEWLINE#
action . get ( 'nn' ) ( type = 'foo' ) #NEWLINE#
df = pd . DataFrame ( { 'x' : [ 1 , 2 , 3 , 4 ] , 'y' : [ 4 , 5 , 6 , 7 ] } ) #NEWLINE#
Photo . objects . filter ( tags = t1 ) . filter ( tags = t2 ) #NEWLINE#
data = [ [ eval ( x ) for x in y ] for y in data ] #NEWLINE#
list ( s ) #NEWLINE#
myfunction = lambda x : x == 2 #NEWLINE#
writes . writerows ( mygen ( reader ) ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled #NEWLINE#
print ( '' . join ( line ) ) #NEWLINE#
myDict [ 'jeff' ] = 'jeffs#SPACE#value' #NEWLINE#
cur . execute ( 'SELECT#SPACE#%s#SPACE#FROM#SPACE#Data#SPACE#where#SPACE#%s=?' % ( column , goal ) , ( constrain , ) ) #NEWLINE#
M = imaplib . IMAP4_SSL ( 'imap.gmail.com' , 993 ) #NEWLINE#
print ( json . dumps ( testvar ) ) #NEWLINE#
ax [ 1 ] . set_title ( 'numpy' ) #NEWLINE#
plt . pcolormesh ( X , Y , Z ) #NEWLINE#
root . title ( 'Multicolumn#SPACE#Treeview/Listbox' ) #NEWLINE#
def foo ( ) : #NEWLINE# """Frob#SPACE#the#SPACE#bar#SPACE#baz""" #NEWLINE#
df . sort_values ( 'date_of_last_hoorah_given' , na_position = 'first' ) #NEWLINE#
assert f ( [ [ 0 , 100 ] , [ 0 , 10 ] , [ 10 , 20 ] , [ 15 , 40 ] ] ) == [ [ 0 , 10 ] , [ 15 , 40 ] ] #NEWLINE#
ser . close ( ) #NEWLINE#
print ( json . loads ( line ) ) #NEWLINE#
primes = { x for x in range ( 2 , 101 ) if all ( x % y for y in range ( 2 , min ( x , 11 ) ) ) } #NEWLINE#
mylist = replace_element ( mylist , 100 , [ 0 , 1 , 3 ] ) #NEWLINE#
[ 0 , 2 , 3 , 4 ] , [ 1 , 5 , 6 ] #NEWLINE#
dups = [ x for x in list_a if list_a . count ( x ) > 1 ] #NEWLINE#
super ( Dog , self ) . __init__ ( name , weight , ** kwargs ) #NEWLINE#
df [ 'date_col' ] = df [ 'date_col' ] . apply ( pd . to_datetime ) #NEWLINE#
email . send ( ) #NEWLINE#
x . encode ( 'hex' ) #NEWLINE#
r . match ( '10' ) . groupdict ( ) #NEWLINE#
wd . get ( 'http://www.google.com' ) #NEWLINE#
print ( r . url ) #NEWLINE#
list ( chain . from_iterable ( sorted ( sub ) if len ( sub ) > 1 else sub for sub in G ) ) #NEWLINE#
test14 = "out1#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#'str1''str2''str3'#SPACE#out2" #NEWLINE#
cprint ( 'Hello,#SPACE#World!' , 'green' , 'on_red' ) #NEWLINE#
crop_img = img_full [ d . top ( ) : d . bottom ( ) , d . left ( ) : d . right ( ) ] #NEWLINE#
s3 . Object ( 'my-bucket' , 'dootdoot.jpg' ) . load ( ) #NEWLINE#
with open ( 'output.csv' , 'w' , newline = '' ) as csvfile : #NEWLINE# #INDENT# writer = csv . writer ( csvfile ) #NEWLINE# writer . writerows ( data ) #NEWLINE#
row . remove ( row . getchildren ( ) [ 1 ] ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
ax . set_ylim3d ( numpy . min ( z ) , numpy . max ( z ) ) #NEWLINE#
file . write ( '%-15s#SPACE#%s\n' % ( i , j ) ) #NEWLINE#
x = np . linspace ( - np . pi , np . pi , 100 ) #NEWLINE#
print ( model . summary ( ) ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
the_list = [ the_list [ i - 1 ] for i in ( 2 , 3 , 1 , 4 ) ] #NEWLINE#
result = sorted ( iter ( dictionary . items ( ) ) , key = lambda k_v : ( k_v [ 0 ] . field , #NEWLINE# k_v [ 1 ] ) ) #NEWLINE#
ax . set_xticks ( np . arange ( 0 , 6 , 1 ) ) #NEWLINE#
queryset = PlaylistVideo . objects . all ( ) . order_by ( 'position' ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #INDENT# bar = True #NEWLINE#
self . statusbar . pack ( side = 'bottom' , fill = 'x' ) #NEWLINE#
math . isnan ( b ) #NEWLINE#
df2 . plot ( ax = axes [ 0 , 1 ] ) #NEWLINE#
json . dumps ( a , default = encode_b ) #NEWLINE#
return self . item_set . order_by ( '-created_date' ) [ : 10 ] #NEWLINE#
pd . end_time = pandas . to_datetime ( pd . end_time ) #NEWLINE#
print ( i / len ( some_list ) * 100 , '#SPACE#percent#SPACE#complete#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#\r' , end = '#SPACE#' ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
x = tf . Variable ( tf . constant ( 0 , shape = [ 2 , 2 ] ) ) #NEWLINE#
file = codecs . open ( 'lol' , 'w' , 'utf-8' ) #NEWLINE#
string = string . replace ( '\n' , '\n#SPACE##SPACE##SPACE##SPACE#' ) #NEWLINE#
pat = re . compile ( 'x{65535}' ) #NEWLINE#
return int ( ( value - epoch ) . total_seconds ( ) ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
print ( 'save#SPACE#cache' ) #NEWLINE#
a = dict . fromkeys ( a , 0 ) #NEWLINE#
panel . pack ( side = 'bottom' , fill = 'both' , expand = 'yes' ) #NEWLINE#
[ [ 2 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
self . root . destroy ( ) #NEWLINE#
itertools . combinations ( [ 1 , 2 , 3 , 4 ] , 2 ) #NEWLINE#
self . Acceuil . show ( ) #NEWLINE#
return set ( x [ 0 ] for x in flatten ( l ) if x [ 1 ] in [ 'NN' , 'VB' , 'JJ' ] ) #NEWLINE#
print ( re . findall ( '[^*]+|\\*' , x ) ) #NEWLINE#
lst . append ( st [ i : i + 10 ] ) #NEWLINE#
current_module . new_name = func #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , oldflags ) #NEWLINE#
values = ',' . join ( [ str ( i ) for i in value_list ] ) #NEWLINE#
self . configure ( image = self . image ) #NEWLINE#
animals . sort ( key = lambda name : ( name [ 0 ] , - len ( name ) , name ) ) #NEWLINE#
return HttpResponse ( status = 204 ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : a . intersection ( b ) , mysets ) #NEWLINE#
array ( [ 1 ] ) , array ( [ 0 ] ) #NEWLINE#
print ( datetime . now ( ) - datetime . combine ( bday , time ( ) ) ) #NEWLINE#
self . _calendar . bind ( '<Map>' , self . __minsize ) #NEWLINE#
urllib . request . urlopen ( 'http://www.python.org' ) #NEWLINE#
[ k for k , v in sorted ( iter ( d . items ( ) ) , key = lambda k_v : ( - k_v [ 1 ] , k_v [ 0 ] ) ) ] #NEWLINE#
"""a#SPACE#b#SPACE#c,d,e,f""" . rsplit ( ',' , 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
data = [ [ 'apple' , 'cat' ] , [ 'banana' , 'dog' ] , [ 'pear' , 'fish' ] ] #NEWLINE#
print ( 'Hello,#SPACE#World!' ) #NEWLINE#
np . where ( a > 0 ) #NEWLINE#
return '%04Xh' % n #NEWLINE#
cursor . execute ( 'TRUNCATE#SPACE#TABLE#SPACE#`books`' ) #NEWLINE#
isinstance ( y , float ) #NEWLINE#
zip ( * a ) #NEWLINE#
classifier . fit ( X_train , y_train ) #NEWLINE#
ax . set_xlim ( [ - 2 , 2 ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return np . split ( data , np . where ( np . diff ( data ) != stepsize ) [ 0 ] + 1 ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . intersection , L ) #NEWLINE#
url_for ( 'static' , filename = 'path/to/file' ) #NEWLINE#
return super ( Employee , self ) . queryset ( request ) . filter ( active = True ) #NEWLINE#
conn . commit ( ) #NEWLINE#
self . __dict__ . update ( kwargs ) #NEWLINE#
return [ self [ n ] for n in range ( start , stop ) ] #NEWLINE#
print ( 'Here#SPACE#it#SPACE#is:#SPACE#%s' % ( tup , ) ) #NEWLINE#
gdb . execute ( 'quit' ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
sys . argv [ 1 ] #NEWLINE#
sum ( x for x in range ( 1 , 1000 ) if x % 3 == 0 or x % 5 == 0 ) #NEWLINE#
d = make_defaultdict ( 2 , list ) #NEWLINE#
print ( ( x , y ) ) #NEWLINE#
sum ( dict [ i ] for i in range ( 1 , 5 ) ) #NEWLINE#
[ k for k , v in G . out_degree ( ) . items ( ) if v > 2 ] #NEWLINE#
subprocess . call ( cmd , shell = True ) #NEWLINE#
gtk . main ( ) #NEWLINE#
return pandas . Series ( { 'pvalue' : pvalue , 'mean_ratio' : mean_ratio } ) #NEWLINE#
df [ [ 'b1' , 'b2' ] ] = df [ [ 'b1' , 'b2' ] ] . where ( df [ [ 'b1' , 'b2' ] ] != '' , df [ [ 'a1' , #NEWLINE# 'a2' ] ] . values ) #NEWLINE#
arr . sum ( axis = ( 0 , 1 ) ) #NEWLINE#
wordset = set ( wordlist ) #NEWLINE#
shutil . copy ( src , dst ) #NEWLINE#
b . remove ( e ) #NEWLINE#
dict ( MyClass ( 5 , 6 , 7 ) ) #NEWLINE#
images = driver . find_elements ( By . TAG_NAME , 'img' ) #NEWLINE#
( A [ ... , None ] * B [ : , ( None ) ] ) . reshape ( A . shape [ 0 ] , - 1 ) #NEWLINE#
socket . setsockopt ( zmq . SUBSCRIBE , 'Child:' ) #NEWLINE#
df . ix [ [ '2' , 'E' , '5' , 'D' ] ] #NEWLINE#
"""""" . join ( a if a == b else stop_iter ( ) for a , b in zip ( sa , sb ) ) #NEWLINE#
new_file . close ( ) #NEWLINE#
raw_bytes = ( ctypes . c_ubyte * 20 ) . from_buffer_copy ( str_bytes ) #NEWLINE#
[ ( 'hello' + str ( x ) ) for x in a ] #NEWLINE#
pylab . plot ( 0 , 0 , 'ro' , label = 'one#SPACE#point' ) #NEWLINE#
data_filtered . to_excel ( writer , 'Main' , cols = [ 'Diff1' , 'Diff2' ] ) #NEWLINE#
olib . oshape ( 'a' ) #NEWLINE#
return dict ( itertools . chain . from_iterable ( list ( dct . items ( ) ) for dct in dicts ) ) #NEWLINE#
my_dict [ 'foo' ] [ 'bar' ] = some_var #NEWLINE#
super ( a , self ) . __init__ ( ) #NEWLINE#
params . add ( 'color' , 'Green' ) #NEWLINE#
params . add ( 'color' , 'Blue' ) #NEWLINE#
plt . show ( ) #NEWLINE#
A [ i , j ] = D [ i , j ] #NEWLINE#
return msvcrt . getch ( ) #NEWLINE#
return datetime . date . today ( ) #NEWLINE#
return self . _body #NEWLINE#
self . setLayout ( layout ) #NEWLINE#
listSum ( [ 1 , 3 , 4 , 5 , 6 ] , 0 ) #NEWLINE#
[ k for k in itertools . chain ( * ( list ( d . keys ( ) ) for d in list ( foo . values ( ) ) ) ) ] #NEWLINE#
pyplot . show ( ) #NEWLINE#
sorted ( [ 'Some' , 'words' , 'sort' , 'differently' ] , key = str . lower ) #NEWLINE#
def count_letters ( word ) : #NEWLINE# #INDENT# return len ( word ) - word . count ( '#SPACE#' ) #NEWLINE#
serversocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
cursor = connection . execute ( 'select#SPACE#*#SPACE#from#SPACE#bar' ) #NEWLINE#
s = pd . Series ( np . random . randn ( 5 ) ) #NEWLINE#
plt . ylabel ( 'Number#SPACE#of#SPACE#occurrence' , horizontalalignment = 'right' ) #NEWLINE#
main ( ) #NEWLINE#
array ( [ [ 1.0 , 0.0 , 0.0 , 1.0 ] , [ 0.0 , 1.0 , 0.0 , 1.0 ] , [ 0.0 , 0.0 , 1.0 , 1.0 ] ] ) #NEWLINE#
form = waypointForm ( user ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
sys . stdout . write ( mystdout . get_text ( ) ) #NEWLINE#
l . index ( d ) #NEWLINE#
r . db ( 'test' ) . table_create ( 'stories' ) . run ( ) #NEWLINE#
{ { 1 , 2 } , { 3 , 4 } } #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
filtered_numbers = [ n for n in numbers if len ( repr ( n ) ) == len ( set ( repr ( n ) ) ) ] #NEWLINE#
modernthingy = zopethingy . asdatetime ( ) #NEWLINE#
self . server . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
time . sleep ( 0.3 ) #NEWLINE#
"""WAM""" #NEWLINE#
[ list ( x ) for x in dt . T . itertuples ( ) ] #NEWLINE#
df . apply ( func , axis = 1 ) #NEWLINE#
[ [ '1' , '2' , '3' ] , [ 'a' , 'b' , 'c' ] , [ '50' , '70' , '90' ] ] #NEWLINE#
print ( [ x for x in range ( 2 , 100 ) if not [ t for t in range ( 2 , x ) if not x % t ] ] ) #NEWLINE#
c = property ( fset = attrsetter ( '_c' ) ) #NEWLINE#
time . strftime ( '%X#SPACE#%x#SPACE#%Z' ) #NEWLINE#
soup = BeautifulSoup ( f ) #NEWLINE#
self . render ( '../resources/register_page.html' ) #NEWLINE#
A [ 1 : 1 ] = B #NEWLINE#
new_df = pd . concat ( [ new_df , extract_df ] , ignore_index = True ) #NEWLINE#
print ( ( 'input#SPACE#2:' , inputarr [ 1 ] ) ) #NEWLINE#
np . diff ( m . tocsr ( ) . indptr ) #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
ax . set_xlabel ( 'Age' ) #NEWLINE#
foo ( ) #NEWLINE#
df . selectExpr ( 'date_sub(date_col,#SPACE#day_col)#SPACE#as#SPACE#subtracted_dates' ) #NEWLINE#
df = pd . DataFrame ( dict ( A = list ( 'aabb' ) , B = list ( range ( 4 ) ) ) ) #NEWLINE#
data = re . sub ( '<.*?>' , '' , data ) #NEWLINE#
self . ax . axis ( [ - 10 , 10 , - 10 , 10 ] ) #NEWLINE#
[ j ( ) for j in [ create_lambda ( i ) for i in range ( 10 ) ] ] #NEWLINE#
print ( list_end_counter ( [ 1 , 2 , 1 , 1 , 1 ] ) ) #NEWLINE#
jinja2 . default_config [ 'template_path' ] = '' #NEWLINE#
df = pd . DataFrame ( data [ 1 : ] , columns = data [ 0 ] ) #NEWLINE#
ax . get_yticklines ( ) [ i ] . set_visible ( False ) #NEWLINE#
socket . inet_ntoa ( struct . pack ( '!L' , ipint ) ) #NEWLINE#
p . terminate ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
Clock . schedule_interval ( self . update , 2 ) #NEWLINE#
foo = d . get ( x , bar ) #NEWLINE#
plot_df . plot ( subplots = True ) #NEWLINE#
"""__version__""" #NEWLINE#
plt . draw ( ) #NEWLINE#
print ( '<a#SPACE#href="%s"#SPACE#class="size-%s">%s</a>' % ( tag , css , tag ) , end = '#SPACE#' ) #NEWLINE#
[ ( ix , iy ) for ix , row in enumerate ( a ) for iy , i in enumerate ( row ) if i == 0 ] #NEWLINE#
self . set_tab_reorderable ( tab . child , True ) #NEWLINE#
df . apply ( pd . value_counts ) #NEWLINE#
self . origstream . write ( self . escape_char ) #NEWLINE#
all ( x in '10' for x in binary_string ) #NEWLINE#
return render_template ( 'show_entry.html' , entry = entry ) #NEWLINE#
print ( 'Yes!' ) #NEWLINE#
notlast = lambda lst : itertools . islice ( lst , 0 , len ( lst ) - 1 ) #NEWLINE#
p1 . start ( ) #NEWLINE#
filename = 'weights.sav' #NEWLINE#
np . einsum ( 'kij' , M ) #NEWLINE#
return s [ : s . rfind ( '\n' ) ] #NEWLINE#
driver . get ( 'https://twitter.com/BarackObama' ) #NEWLINE#
s = set ( A ( ) for i in range ( 1000000 ) ) #NEWLINE#
sys . path . append ( '/home/user/' ) #NEWLINE#
endfunction #NEWLINE#
y = random . randint ( 1 , 10 ) #NEWLINE#
images [ idx ] . reshape ( 90 , 90 ) #NEWLINE#
imshow ( 'src' , src ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
db . execute ( 'alter#SPACE#table#SPACE#appname_modelname#SPACE#alter#SPACE#column#SPACE#fieldname#SPACE#charset=utf8' ) #NEWLINE#
db . execute ( 'alter#SPACE#table#SPACE#appname_modelname#SPACE#charset=latin1' ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
dict ( ( key , value ) for key , value in a . items ( ) if key == 1 ) #NEWLINE#
ran_floats = [ random . uniform ( low , high ) for _ in range ( size ) ] #NEWLINE#
( '/downloads/' , 'downloads' , 'Downloads' ) , #NEWLINE#
results = map ( lambda x : ( x [ 0 ] , x [ 1 : ] ) , reader ) #NEWLINE#
session . commit ( ) #NEWLINE#
sample = [ [ 'ATTA' , 'TTGA' ] , [ 'TTCA' , 'TTTA' ] ] #NEWLINE#
axis . set_major_formatter ( ScalarFormatter ( ) ) #NEWLINE#
root . bind ( '<Motion>' , motion ) #NEWLINE#
ax . set_yticklabels ( [ "$'{e}$" , '$\tilde{a}$' , '$\\hat{a}$' ] ) #NEWLINE#
print ( 'Found#SPACE#one!' ) #NEWLINE#
a = np . array ( [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] ) #NEWLINE#
print ( 'redirect' ) #NEWLINE#
response = serializers . BooleanField ( required = True ) #NEWLINE#
G . adj = numpy . genfromtxt ( 'arr.txt' , dtype = bool ) #NEWLINE#
df = df . iloc [ : , ( [ j for j , c in enumerate ( df . columns ) if j != i ] ) ] #NEWLINE#
date = models . DateTimeField ( default = datetime . now , blank = True ) #NEWLINE#
x , y = ( val - delta for val , delta in zip ( ( x , y ) , ( 1 , 2 ) ) ) #NEWLINE#
[ np . argmin ( a ) for a in A2 ] #NEWLINE#
celery . config_from_object ( 'celeryconfig' ) #NEWLINE#
{ 'and' : 'CONJ' , 'go' : 'VERB' , 'tree' : 'NOUN' , 'have' : 'VERB' } #NEWLINE#
parser . parse_args ( [ '--arg1' , 'foo' , '--arg2' , 'bar' ] ) #NEWLINE#
df #NEWLINE#
query = query % conn . escape ( args ) #NEWLINE#
setattr ( Foo , v , 0 ) #NEWLINE#
process . start ( ) #NEWLINE#
return np . abs ( a - b ) < atol + rtol * np . abs ( b ) #NEWLINE#
packet = [ chr ( int ( x , 16 ) ) for x in packet . split ( '#SPACE#' ) ] #NEWLINE#
map ( list . __add__ , L1 , L2 ) #NEWLINE#
cnxn . commit ( ) #NEWLINE#
big_array [ tup + ( 3 , 2 ) ] #NEWLINE#
list ( range ( x1 , x2 + 1 ) ) #NEWLINE#
listOfA , listOfB = [ [ idx for idx , x in enumerate ( s ) if x == c ] for c in 'AB' ] #NEWLINE#
np . delete ( arr , 2 , axis = 1 ) #NEWLINE#
parseaddr ( 'invalid-email' ) #NEWLINE#
plt . scatter ( X , Y ) #NEWLINE#
everyone = [ friendlies + enemies ] #NEWLINE#
return cls ( a , b ) #NEWLINE#
jsonFile . close ( ) #NEWLINE#
ax . set_xticklabels ( alphab ) #NEWLINE#
name = 'b%s' % num #NEWLINE#
ast . literal_eval ( repr ( d ) . replace ( '.' , '_' ) ) #NEWLINE#
sns . set ( style = 'darkgrid' ) #NEWLINE#
__init__ . py #NEWLINE#
print ( case_sensitive_replace ( 'abc#SPACE#Abc#SPACE#aBc#SPACE#abC#SPACE#ABC' , 'abc' , 'defg' ) ) #NEWLINE#
str ( bytearray ( [ 0 , 1 , 2 , 3 , 127 , 200 , 255 ] ) ) . encode ( 'hex' ) #NEWLINE#
scipy . linalg . cython_blas #NEWLINE#
admin . site . register ( Contest , ContestAdmin ) #NEWLINE#
pattern . match ( 'foo#SPACE#/bar/bam/#SPACE#baz' ) . group ( 1 ) #NEWLINE#
files_list . sort ( key = operator . itemgetter ( 1 ) ) #NEWLINE#
l2 = [ l1 . index ( x ) for x in sorted ( l1 ) ] #NEWLINE#
ax . set_xlabel ( 'Third#SPACE#dimension' ) #NEWLINE#
dict = { 'a' : 'one' , 'b' : 'two' } #NEWLINE#
plt . show ( ) #NEWLINE#
print ( list ( db . keys ( ) ) ) #NEWLINE#
lowess ( y , x ) #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 3 ) ) #NEWLINE#
np . tile ( z , ( 3 , 1 ) ) + np . tile ( v , ( 1 , 2 ) ) #NEWLINE#
return len ( [ x for x in combinations ( all_s , len ( word ) ) if '' . join ( x ) == word ] ) #NEWLINE#
print ( time . time ( ) ) #NEWLINE#
df = pd . read_csv ( 'in.csv' ) #NEWLINE#
code = { 'l' : '1' , 'a' : '2' , 'r' : '3' , 'y' : '4' } #NEWLINE#
y = tuple ( [ ( z * 10 ) for z in img . size ] ) #NEWLINE#
return ',#SPACE#' . join ( l ) #NEWLINE#
mydict = { x [ 0 ] : x [ 1 ] } #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#medicoes#SPACE#values(?,?,?,?,?,?,?)' % keys ) #NEWLINE#
pumpedThread . start ( ) #NEWLINE#
Fraction ( 0.185 ) . limit_denominator ( ) #NEWLINE#
c . update ( line . split ( ) ) #NEWLINE#
b = cosfromsin ( x , a ) #NEWLINE#
raise TypeError ( 'Singletons#SPACE#must#SPACE#be#SPACE#accessed#SPACE#through#SPACE#`Instance()`.' ) #NEWLINE#
raise Exception ( 'Failed#SPACE#to#SPACE#take#SPACE#lock' ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
map ( str , numbers ) #NEWLINE#
lbl7 . grid ( row = 1 , column = 0 ) #NEWLINE#
mybar [ 1 ] . set_edgecolor ( 'r' ) #NEWLINE#
os . mkdir ( 'index' ) #NEWLINE#
pygame . display . set_caption ( 'My#SPACE#Game' ) #NEWLINE#
np . where ( cond , arr , - 100 ) . argmax ( 1 ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
list_1 = [ x for x in list_1 if x [ 3 ] <= 0.3 and x [ 2 ] < 5 ] #NEWLINE#
app . run ( processes = 2 ) #NEWLINE#
df = pd . DataFrame ( { 'foo' : [ 1 , 2 , 3 , 4 ] } ) #NEWLINE#
d . update ( { 'key1' : [ 'val1' , 'val2' ] , 'key2' : DictRef ( d , 'key1' ) } ) #NEWLINE#
sock . bind ( ( '127.0.0.1' , 0 ) ) #NEWLINE#
"""""" . join ( b ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
return int ( num_bytes . encode ( 'hex' ) , 16 ) #NEWLINE#
ax2 . set_ylabel ( 'Temperature#SPACE#($^\\circ$C)' ) #NEWLINE#
return send_file ( tempcreator . somePath ) #NEWLINE#
Decimal ( '.1' ) + Decimal ( '.1' ) + Decimal ( '.1' ) - Decimal ( '.3' ) #NEWLINE#
df = pd . DataFrame ( { 'x' : [ 1 , 1 , 2 , 2 , 1 , 1 ] , 'y' : [ 1 , 2 , 2 , 2 , 2 , 1 ] } ) #NEWLINE#
tkMessageBox . showinfo ( message = 'Hello' ) #NEWLINE#
out = cv2 . VideoWriter ( 'output.avi' , - 1 , 20.0 , ( 640 , 480 ) ) #NEWLINE#
grequests . map ( rs ) #NEWLINE#
print ( neigh . predict_proba ( [ [ 0.9 ] ] ) ) #NEWLINE#
return all ( v not in L [ i + 1 : ] for i , L in enumerate ( L ) ) #NEWLINE#
directory_list . append ( os . path . join ( root , name ) ) #NEWLINE#
from functools import reduce #NEWLINE# val = reduce ( operator . __or__ , ( b << 8 * i for i , b in enumerate ( bits ) ) ) #NEWLINE#
foo ( a [ : , : , ( np . newaxis ) ] - b [ : , ( np . newaxis ) ] ) #NEWLINE#
img = Image . open ( 'daisy.jpg' ) . convert ( 'L' ) #NEWLINE#
s = re . sub ( '\\b(.+)(\\s+\\1\\b)+' , '\\1' , s ) #NEWLINE#
tree . write ( filename , pretty_print = True ) #NEWLINE#
df . groupby ( [ 'Name' , 'Type' , 'ID' ] , as_index = False ) . count ( ) #NEWLINE#
cursor . execute ( 'DROP#SPACE#TABLE#SPACE#IF#SPACE#EXISTS#SPACE#A' ) #NEWLINE#
timestamp = ( utc_naive - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
i += 1 #NEWLINE#
abc = dict ( ( c , string . count ( c ) ) for c in set ( string ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
d1 = OrderedDict ( [ ( 'a' , '1' ) , ( 'b' , '2' ) , ( 'c' , 4 ) ] ) #NEWLINE#
timestamp = dt . timestamp ( ) #NEWLINE#
orig = cv2 . imread ( 'tmp.png' ) #NEWLINE#
estils = { '+' : 'color:green;' , '-' : 'color:red;text-decoration:line-through;' } #NEWLINE#
r [ 'source' ] ( 'script.R' ) #NEWLINE#
Cov . columns = [ 'Sequence' , 'Start' , 'End' , 'Coverage' ] #NEWLINE#
tree = html . fromstring ( page ) #NEWLINE#
plt . show ( ) #NEWLINE#
__init__ . py #NEWLINE#
axe . set_xticklabels ( df . index , rotation = 0 ) #NEWLINE#
self . dayOffsets . update ( { "aujourd'hui" : 0 , 'demain' : 1 , 'hier' : - 1 } ) #NEWLINE#
df . plot ( x = 'Time' , y = 'Bid' , ax = ax ) #NEWLINE#
df . set_index ( 'dt' , inplace = True ) #NEWLINE#
return self . _dynprop #NEWLINE#
print ( list ( set ( L1 ) - set ( L2 ) - set ( L3 ) ) ) #NEWLINE#
from my_modules import * #NEWLINE#
dict [ array [ i ] [ 0 ] ] = array [ i ] [ 1 ] #NEWLINE#
subprocess . call ( command . split ( ) , shell = False ) #NEWLINE#
self . root . bind ( '<Right>' , self . ship . rotate ) #NEWLINE#
sources . write ( re . sub ( '^##SPACE#deb' , 'deb' , line ) ) #NEWLINE#
print ( _ [ 0 ] [ 0 ] . decode ( _ [ 0 ] [ 1 ] ) ) #NEWLINE#
[ c for c in col_names if not any ( f in c for f in filter_array ) ] #NEWLINE#
print ( 'focus#SPACE#is:' , root . focus_get ( ) ) #NEWLINE#
"""""" . join ( re . findall ( '(?:".*?")|(?:\\S+)' , s ) ) #NEWLINE#
list . __setitem__ ( self , index , value ) #NEWLINE#
b = word in wordList [ : 1 ] + wordList [ 2 : ] #NEWLINE#
scatter ( [ ( a , b ) for a , b in zip ( x , y ) if a > 0 and a < 10 ] ) #NEWLINE#
list_of_tuples = [ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE# list_of_tuples #NEWLINE#
ZipFile . write ( os . path . basename ( a ) , compress_type = zipfile . ZIP_DEFLATED ) #NEWLINE#
mydict = dict . fromkeys ( string . printable , 0 ) #NEWLINE#
return int ( math . log ( n , 2 ) ) #NEWLINE#
print ( [ a [ i ] , a [ i + 1 ] ] ) #NEWLINE#
np . einsum ( 'ijk,i#SPACE#->#SPACE#jk' , data , vector ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
v . split ( ) #NEWLINE#
return json . dumps ( pyDict ) #NEWLINE#
f . write ( unicode_object . encode ( 'utf8' ) ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_UP , self . _onMouseUp ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
results = cur . fetchall ( ) #NEWLINE#
print ( 'result#SPACE#=#SPACE#false' ) #NEWLINE#
s . map ( lambda x : x . strftime ( '%d-%m-%Y' ) ) #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
re . sub ( '["]\\s*["]' , '"' , doc ) #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
A [ ( 0 , 2 ) , : , 1 : ] #NEWLINE#
return [ a [ row , col ] for row , col in enumerate ( col_index ) ] #NEWLINE#
popt , pcov = curve_fit ( goal , xdata , ydata , p0 = [ 1 ] * 5 ) #NEWLINE#
metadata . create_all ( engine ) #NEWLINE#
my_word_list = [ 'one' , 'two' , 'three' ] #NEWLINE#
sys . path . insert ( 0 , os . path . join ( os . path . dirname ( __file__ ) , 'lib' ) ) #NEWLINE#
"""#SPACE#""" . join ( '#SPACE#' . join ( reversed ( chunk ) ) for chunk in chunks ( s . split ( ) , 4 ) ) #NEWLINE#
ax . set_title ( 'click#SPACE#on#SPACE#points' ) #NEWLINE#
return 'something' #NEWLINE#
form = super ( ProductAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
{ 'a' : 2 , 'c' : 5 , 'b' : 3 } #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
ax . xaxis . set_major_formatter ( FormatStrFormatter ( '%.0f' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . setupUi ( self ) #NEWLINE#
super ( BMENUS , self ) . __init__ ( ) #NEWLINE#
super ( AMENUS , self ) . __init__ ( ) #NEWLINE#
df . groupby ( 'OrderNum' ) [ 'PtsPerLot' ] . transform ( 'sum' ) #NEWLINE#
[ [ 4 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 5 , 1 ] , [ 5 , 2 ] , [ 5 , 3 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 6 , 3 ] ] #NEWLINE#
super ( MyVersionOfAClass , self ) . someMethod ( * args , ** kwargs ) #NEWLINE#
print ( ( name , val ) ) #NEWLINE#
[ hex ( ord ( c ) ) for c in data ] #NEWLINE#
[ 2 , 1 , 0 ] #NEWLINE#
return redirect ( request . args . get ( 'state' ) or url_for ( 'index' ) ) #NEWLINE#
Latex ( '\\begin{tabular}{l}#SPACE#1#SPACE#\\\\#SPACE#2#SPACE#\\end{tabular}' ) #NEWLINE#
"""fred""" . encode ( 'utf' ) #NEWLINE#
sm [ ( np . random . sample ( sm . shape [ 0 ] , K , replace = False ) ) , : ] #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
key = '#SPACE#=#SPACE#' . join ( ( key , str ( value ) . decode ( 'utf-8' ) . replace ( '\n' , '\n\t' ) ) ) #NEWLINE#
plt . close ( ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
list ( filterer ( list1 , list2 ) ) #NEWLINE#
data = { tuple ( item ) for item in map ( sorted , lst ) } #NEWLINE#
con . close ( ) #NEWLINE#
sys . excepthook = myexcepthook #NEWLINE#
return '#SPACE#' . join ( [ words [ - 1 ] ] + words [ : - 1 ] ) #NEWLINE#
sorted ( gen ) #NEWLINE#
my_handler . setLevel ( logging . INFO ) #NEWLINE#
larray . append ( struct . unpack ( '@q' , b [ i : i + 8 ] ) [ 0 ] ) #NEWLINE#
plt . close ( ) #NEWLINE#
session2 . commit ( ) #NEWLINE#
np . fill_diagonal ( a , 0 ) #NEWLINE#
[ item for t in tuples for item in t ] #NEWLINE#
return qs . filter ( name__startswith = self . kwargs . name ) #NEWLINE#
( foo ( ) . bar ( ) if condition else foo ( ) ) . baz ( ) #NEWLINE#
s = '' . join ( l ) #NEWLINE#
d = [ { 'x' : 1 , 'y' : 2 } ] #NEWLINE# [ dict ( y ) for y in set ( tuple ( x . items ( ) ) for x in d ) ] #NEWLINE#
print ( 'hex#SPACE#x#SPACE#%d#SPACE#0x%08X' % ( x , x & 4294967295 ) ) #NEWLINE#
df = pd . DataFrame . from_csv ( 'data.csv' ) #NEWLINE#
hscrollbar . grid ( row = 1 , column = 0 , sticky = E + W ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
pd . concat ( [ df . T [ x ] for x in df . T ] , ignore_index = True ) #NEWLINE#
round ( 0 , 4 ) #NEWLINE#
yield len ( items ) , sum ( map ( int , items ) ) #NEWLINE#
L = [ e for e in L if 'pie' not in e ] #NEWLINE#
print ( Foo ( ) . bar ( 1 , 2 ) ) #NEWLINE#
cor . loc [ : , : ] = np . tril ( cor . values , k = - 1 ) #NEWLINE#
class amodel ( models . Model ) : #NEWLINE# #INDENT# file = models . FileField ( blank = True , null = True ) #NEWLINE#
return struct . unpack ( '>d' , bf ) [ 0 ] #NEWLINE#
logging . getLogger ( my_module . __name__ ) . setLevel ( logging . DEBUG ) #NEWLINE#
ax . grid ( which = 'minor' , color = 'w' , linestyle = '-' , linewidth = 2 ) #NEWLINE#
print ( df . groupby ( ind ) . head ( ) ) #NEWLINE#
o . buggedMethod ( [ '1' , '2' , None , '5' ] ) #NEWLINE#
print ( ( 'start' , transport ) ) #NEWLINE#
np . where ( a == a . max ( ) ) #NEWLINE#
ord ( 'a' ) #NEWLINE#
if item not in mylist : #NEWLINE# #INDENT# mylist . append ( item ) #NEWLINE#
R = np . einsum ( 'ij,kj' , A , A ) #NEWLINE#
print ( map ( joiner , sixgrams ) ) #NEWLINE#
time . mktime ( time . strptime ( time1 , format ) ) #NEWLINE#
foobars . select ( 'foobar.foo' , 'foobar.bar' ) . show ( ) #NEWLINE#
a [ ( 0 ) , : , : ] , a [ ( 1 ) , : , : ] , a [ ( 2 ) , : , : ] #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_zlabel ( 'Z#SPACE#Label' ) #NEWLINE#
f . close ( ) #NEWLINE#
asyncio . get_event_loop ( ) . run_until_complete ( hello ( ) ) #NEWLINE#
soup . find ( id = 'intro-text' ) #NEWLINE#
ax . yaxis . set_minor_locator ( MultipleLocator ( 0.2 ) ) #NEWLINE#
[ ( i in fruit_dict2 ) for i in fruits ] #NEWLINE#
workbook . close ( ) #NEWLINE#
response . headers [ 'Content-Type' ] = 'text/csv' #NEWLINE#
plt . show ( ) #NEWLINE#
print ( my_list [ - 1 ] ) #NEWLINE#
html = driver . page_source #NEWLINE#
fig = PLT . figure ( ) #NEWLINE#
fruitdict [ i ] = locals ( ) [ i ] #NEWLINE#
plt . show ( ) #NEWLINE#
np . savetxt ( file1 , aa , fmt = '%10.6f' ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
plt . rc ( 'text' , usetex = True ) #NEWLINE#
your_method ( ) #NEWLINE#
np . sum ( arr [ 1 : - 1 , 1 : - 1 ] ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
print ( '' . join ( sorted ( open ( 'data.txt' , 'rb' ) , key = k ) ) ) #NEWLINE#
all ( [ 1 , 2 , 3 , False ] ) #NEWLINE#
print ( '' . join ( result ) ) #NEWLINE#
print ( os . getenv ( 'not_existing_variable' , 'that#SPACE#variable#SPACE#does#SPACE#not#SPACE#exist' ) ) #NEWLINE#
print ( 'found' ) #NEWLINE#
print ( flatten_count ( x , 1 ) ) #NEWLINE#
pool = multiprocessing . Semaphore ( multiprocessing . cpu_count ( ) ) #NEWLINE#
np . getbufsize ( ) #NEWLINE#
return self . decorator ( func ) #NEWLINE#
item_set [ category ] . append ( item ) #NEWLINE#
os . listdir ( '\\\\myshare' ) #NEWLINE#
plt . xticks ( ) #NEWLINE#
list ( zip ( lst [ : - 2 ] , lst [ 1 : - 1 ] , lst [ 2 : ] ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
DF [ 'new_column' ] = DF [ 'dic_column' ] . apply ( lambda dic : dic . get ( 'word' , 0 ) ) #NEWLINE#
result = [ ( x * P ) for x in S ] #NEWLINE#
bar [ a : b : c ] . foo ( ) #NEWLINE#
cv2 . imwrite ( 'result2.jpg' , result ) #NEWLINE#
difflib . SequenceMatcher ( None , str1 , str2 ) #NEWLINE# difflib . SequenceMatcher ( None , file1 . read ( ) , file2 . read ( ) ) #NEWLINE#
runfile ( 'C:/Users/.../.spyder2/temp.py' , wdir = 'C:/Users/.../.spyder2' ) #NEWLINE#
urllib . request . urlretrieve ( 'http://example.com/captcha.png' , 'captcha.png' ) #NEWLINE#
return json . JSONEncoder . default ( self , obj ) #NEWLINE#
pl . clf ( ) #NEWLINE#
data = [ ( line [ 0 ] , line [ 1 : ] ) for line in csv . reader ( f ) ] #NEWLINE#
with open ( 'names.txt' , 'r' ) as f : #NEWLINE# #INDENT# myNames = [ line . strip ( ) for line in f ] #NEWLINE#
writer . writerow ( row ) #NEWLINE#
sheet . write_merge ( top_row , bottom_row , left_column , right_column , 'Long#SPACE#Cell' ) #NEWLINE#
[ 100.0 , 93.08 , 92.85 , 92.62 , 91.12 , 90.89 ] #NEWLINE#
re . sub ( '([a-z])([A-Z])|(?<=[A-Z])([A-Z]+)' , '\\g<3>\\g<1>#SPACE#\\g<2>' , vendor ) #NEWLINE#
print ( cv2 . __version__ ) #NEWLINE#
[ log ( y , 10 ) for y in x ] #NEWLINE#
return df #NEWLINE#
[ ( 'foo' , [ 'value1' , 'value2' , 'value3' ] ) , ( 'xxx' , 'yyy' ) ] #NEWLINE#
self . assertEqual ( 'success' , response . body ) #NEWLINE#
a , b = d [ 'a' ] , d [ 'b' ] #NEWLINE#
print ( d [ 'a' ] [ 'b' ] [ 'c' ] ) #NEWLINE#
pd . concat ( [ df , pd . concat ( [ df4 ] , keys = [ 'D' ] ) ] ) #NEWLINE#
[ x for i , x in enumerate ( unculledlist ) if i % 6 % 2 == 0 if i % 5 % 2 == 0 ] #NEWLINE#
DIRECTIONS = set ( [ 'up' , 'down' , 'left' , 'right' ] ) #NEWLINE#
url = 'http://www.python.org/' #NEWLINE#
time . sleep ( delay ) #NEWLINE#
"""""" #NEWLINE#
startupinfo . dwFlags |= subprocess . STARTF_USESHOWWINDOW #NEWLINE#
compile ( "id('foo')" , '<stdin>' , 'single' ) . co_consts #NEWLINE#
[ x for x in lst if x % 2 == 0 ] #NEWLINE#
sys . getsizeof ( 'this#SPACE#also' ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
new_df . iloc [ 0 , 0 ] = 1 #NEWLINE#
[ ( 1 , 2 , 3 ) , ( 10 , 2 , 3 ) ] #NEWLINE#
s . setsockopt ( SOL_SOCKET , SO_BROADCAST , 1 ) #NEWLINE#
min ( l1 , l2 ) #NEWLINE#
os . remove ( file_list . pop ( ) ) #NEWLINE#
self . crawler . engine . unpause ( ) #NEWLINE#
ax2 . set_yticklabels ( y_label2 , fontsize = 20 ) #NEWLINE#
urllib . parse . quote_plus ( url , safe = ':' ) #NEWLINE#
[ float ( '-0.0' ) , 0.0 ] * 3 #NEWLINE#
print ( 'exÃ¡mple' . upper ( ) ) #NEWLINE#
self . driver . quit ( ) #NEWLINE#
print ( '' . join ( map ( str , list ( range ( 1 , 11 ) ) ) ) ) #NEWLINE#
Books . objects . exclude ( authors__in = bad_authors ) . exclude ( authors = None ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , map ( lambda x , y : x * y , topo [ : - 1 ] , topo [ 1 : ] ) ) #NEWLINE#
ax . legend ( numpoints = 1 ) #NEWLINE#
con . commit ( ) #NEWLINE#
ax . add_patch ( BA ) #NEWLINE#
print ( '' . join ( [ child . text for child in element ] ) ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
string [ start : end ] #NEWLINE#
return tuple ( d [ k ] for k in keys ) #NEWLINE#
ax . barh ( ind , df [ 'EndUse_91_1.0' ] , color = '#FFFF00' ) #NEWLINE#
etree . fromstring ( xml_response ) #NEWLINE#
conn . close ( ) #NEWLINE#
mylogger = logging . getLogger ( package_name ) #NEWLINE#
tel = d [ 'entries' ] [ 0 ] [ 'extensions' ] . get ( 'telelphone' , '' ) #NEWLINE#
subprocess . call ( cmd , stdin = subprocess . PIPE ) #NEWLINE#
driver . get ( 'Your-URL' ) #NEWLINE#
{ k : d1 [ k ] for k in list ( d1 . keys ( ) ) & l1 } #NEWLINE#
json_docs = [ json . dumps ( doc , default = json_util . default ) for doc in cursor ] #NEWLINE#
[ 27.16 , 6.96 , 33.79 ] , #NEWLINE#
[ 25.94 , 7.78 , 35.25 ] , #NEWLINE#
[ 25.98 , 9.09 , 36.02 ] , #NEWLINE#
[ 26.74 , 10.1 , 35.32 ] , #NEWLINE#
[ 26.75 , 10.94 , 35.86 ] , #NEWLINE#
[ 24.64 , 7.79 , 34.46 ] , #NEWLINE#
[ 24.53 , 8.51 , 33.5 ] , #NEWLINE#
[ 23.59 , 7.07 , 34.76 ] , #NEWLINE#
[ 23.59 , 6.55 , 35.61 ] , #NEWLINE#
[ 22.42 , 7.01 , 33.9 ] , #NEWLINE#
[ 21.62 , 5.76 , 34.27 ] , #NEWLINE#
[ 21.59 , 8.22 , 34.04 ] , #NEWLINE#
[ 22.48 , 4.21 , 33.97 ] , #NEWLINE#
return render_to_response ( 'gallery.html' , { 'images' : img_list } ) #NEWLINE#
plt . show ( ) #NEWLINE#
lst = sorted ( open ( 'appendedFile' , 'rt' ) . readlines ( ) , key = str . lower ) #NEWLINE#
"""""" . join ( i + j for i , j in zip_longest ( a , b , fillvalue = '' ) ) #NEWLINE#
dtest = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] , dtype = np . uint8 ) #NEWLINE#
df . columns [ np . argsort ( df . values ) ] #NEWLINE#
rows , columns = os . popen ( 'stty#SPACE#size' , 'r' ) . read ( ) . split ( ) #NEWLINE#
print ( '{0:<16}:#SPACE#{1}' . format ( field [ 0 ] , field [ 1 ] ) ) #NEWLINE#
df . groupby ( level = 0 , group_keys = False ) . apply ( first_last ) #NEWLINE#
plt . show ( ) #NEWLINE#
g . sum ( ) #NEWLINE#
logging . getLogger ( 'this.is.the.module' ) . warning ( 'Testing#SPACE#for#SPACE#SO' ) #NEWLINE#
"""""" . join ( [ x for x in node . itertext ( ) ] ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
[ [ 400 , 200 ] ] #NEWLINE#
url ( '^.*' , MainView . as_view ( ) ) #NEWLINE#
self . foo = 'bar' #NEWLINE#
df1 . loc [ df2 . index [ 0 ] ] = df2 . iloc [ 0 ] #NEWLINE#
[ re . findall ( '\\d+\\.\\d+' , line . partition ( 'foo' ) [ 2 ] ) for line in f ] #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
get_color ( 1 ) #NEWLINE#
print ( 'Human#SPACE#Readable#SPACE#Word' ) #NEWLINE#
fig . set_figwidth ( 24 ) #NEWLINE#
"""""" . join ( c for c , _ in groupby ( 'haaaaapppppyyy' ) ) #NEWLINE#
array ( [ [ 3.0 , 3.0 , 3.0 ] , [ 3.0 , 3.0 , 3.0 ] , [ 3.0 , 3.0 , 3.0 ] ] ) #NEWLINE#
[ a [ x : x + seg_length ] for x in range ( 0 , len ( a ) , seg_length ) ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( [ zip ( A , item ) for item in product ( B , repeat = len ( A ) ) ] ) #NEWLINE#
print ( sys . stdin . readline ( ) ) #NEWLINE#
area += ( x2 - x1 + x4 - x3 ) * 0.1 #NEWLINE#
plt . ylabel ( 'Count' ) #NEWLINE#
random . shuffle ( data ) #NEWLINE#
np . einsum ( 'ij,ij->i' , np . dot ( a , b ) , a ) #NEWLINE#
parser . add_argument ( 'foo' , nargs = '+' ) #NEWLINE#
self . layout ( ) . addWidget ( self . child ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
print ( '#SPACE#' . join ( tokenizer . tokenize ( text , realign_boundaries = True ) ) ) #NEWLINE#
graph . post ( path = 'me/feed' , message = 'Your#SPACE#message#SPACE#here' ) #NEWLINE#
return render_template ( 'mypage.html' , person = person ) #NEWLINE#
np . count_nonzero ( df . isnull ( ) ) #NEWLINE#
start_time = time . time ( ) #NEWLINE#
tn . read_until ( 'password:#SPACE#' ) #NEWLINE#
pixbuf = gtk . gdk . pixbuf_new_from_file ( '/path/to/the/image.png' ) #NEWLINE#
intbids . append ( int ( bid ) ) #NEWLINE#
sys . path . append ( path . abspath ( '../Foo' ) ) #NEWLINE#
[ dict ( template , ** { k : value } ) for value in add ] #NEWLINE#
dict_no_dupl ( ( k , v ) for k , v in ( 'a1' , 'a2' , 'b3' ) ) #NEWLINE#
print ( '' . join ( s ) ) #NEWLINE#
print ( time . mktime ( d . timetuple ( ) ) ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#foo#SPACE#(bar,baz)#SPACE#VALUES#SPACE#(?,#SPACE#?)' , ( 1 , 2 ) ) #NEWLINE#
onedollar = re . compile ( '^[^\\$]*\\$[^\\$]*$' ) #NEWLINE#
return [ Request ( self . start_url , callback = self . parse_listings , follow = True ) ] #NEWLINE#
{ ( 1 , 2 , 3 ) , ( 2 , 4 , 5 ) } #NEWLINE#
time . sleep ( 20 ) #NEWLINE#
cv2 . imshow ( 'circles' , im ) #NEWLINE#
ws . cell ( row = 1 , column = 1 ) . style . border . top . border_style = borders . BORDER_MEDIUM #NEWLINE#
[ ( x + y ) for x , y in zip_longest ( reversed ( P ) , reversed ( Q ) , fillvalue = 0 ) ] [ : : - 1 ] #NEWLINE#
{ 'column1' : 'value_column1' } #NEWLINE#
soup . findAll ( 'td' , valign = 'top' ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , 'bo-' , markerfacecolor = ( 1 , 1 , 0 , 0.5 ) ) #NEWLINE#
line_new = '%12s#SPACE##SPACE#%12s#SPACE##SPACE#%12s' % ( word [ 0 ] , word [ 1 ] , word [ 2 ] ) #NEWLINE#
"""#TAB#""" #NEWLINE#
df2 = df2 . drop ( 'n' , axis = 1 ) . reset_index ( drop = True ) #NEWLINE# df2 #NEWLINE#
print ( '(x,#SPACE#y):#SPACE#({},#SPACE#{})' . format ( x , y ) ) #NEWLINE#
cutBins = [ float ( '-inf' ) ] + bins . tolist ( ) + [ float ( 'inf' ) ] #NEWLINE#
unittest . main ( ) #NEWLINE#
q = request . GET . get ( 'q' ) #NEWLINE#
df [ 'newCol' ] = np . split ( id_arr . cumsum ( ) , idx [ : - 1 ] ) #NEWLINE#
x [ mask ] = np . nan #NEWLINE#
f . write ( str ( yEst ) + '\n' ) #NEWLINE# f . close ( ) #NEWLINE#
s . connect ( ( HOST , PORT ) ) #NEWLINE#
table . append ( row ) #NEWLINE#
len ( ) #NEWLINE#
P . plot ( x , y , 'r.' , alpha = 0.2 ) #NEWLINE#
workbook . close ( ) #NEWLINE#
"""http://xxx.yyy.zzz/{web}/{page}.html""" . format ( ** d ) #NEWLINE#
nsolve ( [ x * y - 1 , 4 * x ** 2 + y ** 2 - 5 ] , [ x , y ] , [ 1 , 1 ] ) #NEWLINE#
_illegal_xml_chars_RE = re . compile ( '[%s]' % '' . join ( _illegal_ranges ) ) #NEWLINE#
raise Exception ( 'abc' ) #NEWLINE#
wcswidth ( '\u200c' ) #NEWLINE#
sqlContext . read . jdbc ( url = url , table = 'baz' , properties = properties ) #NEWLINE#
reactor . run ( ) #NEWLINE#
client . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#r' ) #NEWLINE#
resources = [ _f for _f in ( obj . get ( 'file' ) for obj in iterator ) if _f ] #NEWLINE#
df [ 'fut' ] . fill ( method = 'pad' ) / df [ 'fut' ] . fill ( method = 'pad' ) . shift ( 600 ) #NEWLINE#
print ( math . ceil ( v * 100 ) / 100 ) #NEWLINE#
x , y , z = symbols ( 'x,#SPACE#y,#SPACE#z' ) #NEWLINE#
ax . plot ( xy_line , 'r--' , label = 'Random#SPACE#guess' ) #NEWLINE#
modules . append ( __import__ ( module_name [ : - 3 ] ) ) #NEWLINE#
example [ 4 : 1 ] #NEWLINE#
User . objects . filter ( owns__tenant = bob ) #NEWLINE#
out = [ np . sum ( data [ c ] ) for c in contribs ] #NEWLINE#
plt . show ( ) #NEWLINE#
pylab . rcParams [ 'ytick.major.pad' ] = '8' #NEWLINE#
re . split ( reg , 'fOO1foo2FOO3' ) #NEWLINE#
ax3 . yaxis . set_major_locator ( MaxNLocator ( nbins = nbins , prune = 'upper' ) ) #NEWLINE#
conn . rollback ( ) #NEWLINE#
""":""" . join ( [ s [ x : x + 2 ] for x in range ( 0 , len ( s ) - 1 , 2 ) ] ) #NEWLINE#
return next ( x for x in list_of_tuples if value in x ) #NEWLINE#
screen . blit ( image , ( 0 , 0 ) ) #NEWLINE#
[ ( 0 , 3 ) , ( 4 , 7 ) ] #NEWLINE#
arr . resize ( ( arr . shape [ 0 ] * 2 , arr . shape [ 1 ] ) ) #NEWLINE#
pylab . bar ( list ( range ( 1 , 4 ) ) , list ( range ( 1 , 4 ) ) , align = 'center' ) #NEWLINE#
b . close ( ) #NEWLINE#
int ( round ( 5678 , - 3 ) ) #NEWLINE#
[ item . get_ydata ( ) [ 0 ] for item in B [ 'whiskers' ] ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
a [ tuple ( idx . T ) ] = 5 #NEWLINE#
[ 'm' , 'o' , 'n' , 'ke' , 'y' ] #NEWLINE#
[ 'm' , 'o' , 'nk' , 'e' , 'y' ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
libc . cprogram ( wts , res , kks , byref ( n ) , ex ) #NEWLINE#
c = np . concatenate ( ( a , b ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ ( 'E' , 'option1' ) , ( 'E' , 'option2' ) , ( 'E' , 'option3' ) ] #NEWLINE#
[ ( 'C' , 'option2' ) , ( 'C' , 'option5' ) , ( 'C' , 'option1' ) ] #NEWLINE#
df . reindex ( [ 2 , 0 , 1 ] ) #NEWLINE#
print ( 'Wrong#SPACE#Password' ) #NEWLINE#
del df [ 'foo' ] #NEWLINE#
lists = [ [ 'dog' , 1 ] , [ 'cat' , 2 , 'a' ] , [ 'rat' , 3 , 4 ] , [ 'bat' , 5 ] ] #NEWLINE# result = '\n' . join ( '\t' . join ( map ( str , l ) ) for l in lists ) #NEWLINE#
[ list ( combinations ( data , i ) ) for i in range ( 1 , len ( data ) + 1 ) ] #NEWLINE#
np . array ( map ( str , a ) ) #NEWLINE#
buff += sys . stdin . read ( 1 ) #NEWLINE#
lst . sort ( ) #NEWLINE#
assert json . load ( r ) [ 'success' ] #NEWLINE#
lambda x : x or '' #NEWLINE#
{ { a . some_other_field } } #NEWLINE#
parser . add_argument ( 'input1' , nargs = '+' , type = int ) #NEWLINE#
mydic = { } #NEWLINE#
datetime . datetime ( 2001 , 12 , 11 , 0 , 0 ) #NEWLINE#
[ [ i ] for i in '#SPACE#' . join ( L ) . split ( '#SPACE#' ) if i . count ( i [ 0 ] ) == len ( i ) and len ( i ) > 1 ] #NEWLINE#
plt . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
html_context = { 'css_files' : [ '_static/custom.css' ] } #NEWLINE#
re . sub ( '&' , '&' , parsed . text . encode ( 'utf-8' ) ) #NEWLINE#
ax . set_aspect ( 2 ) #NEWLINE#
re . findall ( '(?<!%)%\\(([^)]+)\\)[diouxXeEfFgGcrs]' , x ) #NEWLINE#
return len ( c . encode ( 'utf-8' ) ) #NEWLINE#
print ( eval ( bad_code ) ) #NEWLINE#
PyRun_SimpleString ( 'sys.path.append(".")' ) #NEWLINE#
[ len ( list ( group ) ) for value , group in itertools . groupby ( b_List ) if value ] #NEWLINE#
Frame3 . grid ( row = 0 , column = 2 , rowspan = 6 , columnspan = 3 , sticky = W + E + N + S ) #NEWLINE#
[ 'Joe' , 'Dave' , 'Professional' , 'H' , 'icaped' , 'Ph.D.' , 'Someone#SPACE#else' ] #NEWLINE#
df . set_index ( [ 'ticker' , 'date' ] , inplace = True ) #NEWLINE#
"""http://fdasdf.fdsfîășîs.fss/ăîăî""" #NEWLINE#
output = stdout . read ( ) #NEWLINE#
db_col_data = json . dumps ( latest_data ) #NEWLINE#
[ list ( tup ) for tup in itertools . zip_longest ( * l , fillvalue = '' ) ] #NEWLINE#
img = Image . open ( 'my_chart.png' ) #NEWLINE#
do_stuff ( ) #NEWLINE#
sum ( len ( v ) for v in d . values ( ) ) #NEWLINE#
table = '' . join ( mapping ) #NEWLINE#
Index ( [ 'col7' ] , dtype = 'object' ) #NEWLINE#
print ( new_list ) #NEWLINE#
names = np . array ( [ 'H' , 'B' , 'D' , 'A' , 'I' , 'C' , 'F' ] ) #NEWLINE#
df . groupBy ( 'k' ) . agg ( groupConcat ( 'v' ) . alias ( 'vs' ) ) . show ( ) #NEWLINE#
file_path = os . path . join ( BASE_DIR , 'relative_path' ) #NEWLINE#
frame2 = PhotoImage ( file = imagefilename , format = 'gif#SPACE#-index#SPACE#2' ) #NEWLINE#
result . append ( ( btoa [ k ] , k ) ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
bus = smbus . SMBus ( 1 ) #NEWLINE#
"""hello#SPACE#world""" . encode ( 'utf-8' ) #NEWLINE#
datetime . datetime ( 2008 , 2 , 29 , 0 , 0 ) #NEWLINE#
[ 0 , 1 , 1 , 1 , 0 ] , #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
[ phi , psi , x ] = pywt . Wavelet ( 'db2' ) . wavefun ( level = 4 ) #NEWLINE#
pixels . append ( ( ( x , y ) , pixel [ : - 1 ] ) ) #NEWLINE#
[ x for x in list_of_data_from_database if x != 'no#SPACE#price' ] #NEWLINE#
open ( 'test.txt' , 'rb' ) . readlines ( ) #NEWLINE#
pd . DataFrame ( { 'foo' : [ 42 , 51 ] , 'arr' : [ a , b ] } ) #NEWLINE#
a [ 'key3' ] ( 'additional' , arguments = 'accepted' ) #NEWLINE#
cursor . callproc ( 'getperson' , [ 1 ] ) #NEWLINE#
dist = numpy . linalg . norm ( a - b ) #NEWLINE#
x . reshape ( - 1 , np . prod ( x . shape [ - 2 : ] ) ) . shape #NEWLINE#
newshapeA = A . shape + ( 1 , ) * ( N + 1 - A . ndim ) #NEWLINE#
df_pivot . plot ( kind = 'bar' , x = 'day' ) #NEWLINE#
plt . savefig ( 'graph.svg' ) #NEWLINE#
predictions = [ t . predict ( testData ) for t in trees ] #NEWLINE#
data . append ( json . loads ( line ) ) #NEWLINE#
print ( '{:20}#SPACE#{:25}#SPACE#X' . format ( name , type ( x ) ) ) #NEWLINE#
List_name = df_name . values . tolist ( ) #NEWLINE#
hex ( 158 ^ 255 ) #NEWLINE#
json_output = json . dumps ( my_query ) #NEWLINE#
window . show ( ) #NEWLINE#
[ 'gnu' , 'fish' ] #NEWLINE#
[ - 100.0 , 5.0 , 110.0 , 215.0 , 320.0 , 425.0 , 530.0 , 635.0 , 740.0 , 845.0 , 950.0 ] #NEWLINE#
fixpath = os . path . join ( filepath , 'Contents' , 'MacOS' , 'ErrorScatter' ) #NEWLINE#
y = set ( x . flat ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
first_td = table . find ( 'td' ) #NEWLINE#
[ sum ( int ( i ) for i in num ) for num in list ] #NEWLINE#
cur . execute ( 'CREATE#SPACE#TABLE#SPACE#IF#SPACE#NOT#SPACE#EXISTS#SPACE#Docs(Data#SPACE#BLOB)' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 0 , 0 ] #NEWLINE#
ax . zaxis . set_scale ( 'log' ) #NEWLINE#
binascii . unhexlify ( '02' ) #NEWLINE#
print ( np . allclose ( coeffs1 , coeffs2 ) ) #NEWLINE#
df [ 'session_label' ] = df . groupby ( 'user_id' ) [ 'session_break' ] . cumsum ( ) #NEWLINE#
s . bind ( ( '' , 0 ) ) #NEWLINE#
{ 'bar' : [ 'baz' , 'che' ] } #NEWLINE#
shutil . copytree ( src , dst ) #NEWLINE#
message . attach ( 'filename.txt' ) #NEWLINE#
demjson . decode ( '{foo:3}' ) #NEWLINE#
build_daily_history_table ( 'test' ) . __table__ . create ( bind = engine ) #NEWLINE#
logging . getLogger ( 'suds.transport' ) . setLevel ( logging . DEBUG ) #NEWLINE#
print ( soup . find ( 'div' ) . get_text ( ) ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"%d",#SPACE#but#SPACE#math.pi#SPACE#is#SPACE#%.2f' % ( value , math . pi ) ) #NEWLINE#
{ 'tags2' : [ ] , 'cnt2' : 0 , 'cnt1' : 1 , 'tags1' : [ 'work' ] } #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
kOUT = np . zeros ( N + 1 , dtype = object ) #NEWLINE#
br . form [ 'previewOrderButton' ] #NEWLINE#
cython . ushort #NEWLINE#
cython . longlong #NEWLINE#
cython . ulonglong #NEWLINE#
SPHINXBUILD = sphinx3 - build #NEWLINE#
def quit ( ) : #NEWLINE# #INDENT# root . destroy ( ) #NEWLINE#
"""3.8.6""" #NEWLINE#
[ ( i - 1 ) for i in l ] #NEWLINE#
re . escape ( 'escape#SPACE#this.#SPACE#/' ) #NEWLINE#
SOCIAL_AUTH_PIPELINE += '<application>.pipelines.save_profile_picture' , #NEWLINE#
printbob . main ( 'arg1#SPACE#arg2#SPACE#arg3#SPACE#arg4' . split ( '#SPACE#' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
print ( kwargs . get ( 'install_requires' , [ ] ) ) #NEWLINE#
browser . _update_state ( response ) #NEWLINE#
OrderedDict ( lla [ : : - 1 ] ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 ] , 'b-' ) #NEWLINE#
subprocess . check_call ( [ 'tcpdump' , '-c5' , '-vvv' , '-w' , raw , 'host' , ip ] ) #NEWLINE#
trainer = BackpropTrainer ( n , dataset = ds , learningrate = 0.1 , verbose = True ) #NEWLINE#
regex . sub ( '\\p{Mn}' , '' , unicodedata . normalize ( 'NFKD' , s ) ) #NEWLINE#
self . close ( ) #NEWLINE#
image . close ( ) #NEWLINE#
value in dictionary or any ( value in dictionary [ key ] for key in dictionary ) #NEWLINE#
df [ ~ df . index . isin ( df_a . index + df_b . index ) ] #NEWLINE#
ent . grid ( row = 0 , column = 1 ) #NEWLINE#
( '^(?P<function>.+)/$' , router , { 'module' : 'mysite.app.views' } ) , #NEWLINE#
from module . submodule import submodule #NEWLINE#
i . setGridIntersection ( i . pos ( ) ) #NEWLINE#
main ( ) #NEWLINE#
kwargs [ 'count' ] = 100000 #NEWLINE#
return coords . reshape ( - 1 , 2 ) #NEWLINE#
re . findall ( '[A-Z][a-z]*' , 'ABC' ) #NEWLINE#
result = my_func ( ** vars ( args ) ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
list ( itertools . chain ( l1 , l2 , l3 ) ) #NEWLINE#
return '\n' . join ( [ p . products for p in self . product . all ( ) ] ) #NEWLINE#
hsz = wx . BoxSizer ( wx . HORIZONTAL ) #NEWLINE#
df . groupby ( dr5minute . asof ) . agg ( ohlcsum ) #NEWLINE#
plt . savefig ( 'shade.png' , dpi = 300 ) #NEWLINE#
nonempty_dict = dict . fromkeys ( [ 'apple' , 'ball' ] , default_value ) #NEWLINE#
print ( "%s's#SPACE#number#SPACE#is#SPACE#%s." % ( 'John' , numbers [ 'John' ] ) ) #NEWLINE#
print ( standardize_date ( 'Mon,#SPACE#16#SPACE#Aug#SPACE#2010#SPACE#24:00:00' ) ) #NEWLINE#
sum ( 1 for _ in iter ) #NEWLINE#
df . max ( ) [ [ 'A' , 'F' , 'G' ] ] #NEWLINE#
warnings . filterwarnings ( 'ignore' , category = DeprecationWarning ) #NEWLINE#
self . ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
seen . add ( i ) #NEWLINE#
output , error = subprocess . Popen ( [ 'ls' , '-l' ] , stdout = subprocess . PIPE , #NEWLINE# stderr = subprocess . PIPE ) . communicate ( ) #NEWLINE#
plt . imshow ( rotate_lena_noreshape , cmap = plt . cm . gray ) #NEWLINE#
s . send ( data ) #NEWLINE#
VVg1 = np . sum ( np . multiply ( EVV1 [ : n , : ] , VV [ : , ( np . newaxis ) ] ) , axis = 0 ) #NEWLINE#
def upcase_first_letter ( s ) : #NEWLINE# #INDENT# return s [ 0 ] . upper ( ) + s [ 1 : ] #NEWLINE#
return [ tuple ( sequence [ i : i + n ] ) for i in range ( count ) ] #NEWLINE#
print ( '<H1>This#SPACE#is#SPACE#my#SPACE#first#SPACE#CGI#SPACE#script</H1>' ) #NEWLINE#
c = copy . deepcopy ( a ) #NEWLINE#
print ( sys . path ) #NEWLINE#
self . ax . set_ylim3d ( FLOOR , CEILING ) #NEWLINE#
print ( ( 'ratio:' , Eucl [ - 1 ] / np . sqrt ( ( res * res ) . sum ( ) ) ) ) #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
a = np . fromfile ( 'filename.ext' , dtype = 'uint8' ) #NEWLINE#
pprint ( re . findall ( '.{1,16}(?:\\s+|$)' , text ) ) #NEWLINE#
urllib . parse . quote ( a ) #NEWLINE#
re . sub ( '[-+]\\d+' , dump , s ) #NEWLINE#
[ dict ( template , z = value ) for value in add ] #NEWLINE#
output . append ( '<input#SPACE#type="text"#SPACE#name="test">' ) #NEWLINE#
output . append ( '<h1>FORM#SPACE#DATA</h1>' ) #NEWLINE#
output . append ( '</form>' ) #NEWLINE#
print ( ( dt1 - dt2 ) . total_seconds ( ) ) #NEWLINE#
plt . plot ( * zip ( * a ) , marker = 'o' , color = 'r' , ls = '' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
subprocess . check_call ( [ 'df' , '--type=fat32' , path ] , stdout = os . devnull ) #NEWLINE#
return wrapped ( ) #NEWLINE#
sorted ( lst , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
df . iloc [ : , 2 : ] = a #NEWLINE#
re . search ( p , 'aaab' ) #NEWLINE#
print ( int ( Nationality . PL ) ) #NEWLINE#
myForm . fields [ 'description' ] . label #NEWLINE#
data_octets = data_unicode . encode ( 'utf-8' ) #NEWLINE#
re . compile ( '(\\w+)' ) . split ( 'hello,#SPACE#foo' ) #NEWLINE#
p . stdin . write ( 'exit\n' ) #NEWLINE#
as_strided ( a , shape = ( 2 , 2 , 2 , 2 ) , strides = ( 2 * s , 0 , s , 0 ) ) . reshape ( 4 , 4 ) #NEWLINE#
items = { 'Item1' : 'bill' , 'Item2' : 'cows' , 'Item3' : 'abcdef' } #NEWLINE#
f . read ( ) #NEWLINE#
root . destroy ( ) #NEWLINE#
map ( min , zip ( * alist ) ) #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
df . groupby ( 'company_id' ) . first ( ) . loc [ df . company_id ] . reset_index ( ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
dict ( lst ) #NEWLINE#
s . bind ( ( '0.0.0.0' , 1444 ) ) #NEWLINE#
items . append ( 3 ) #NEWLINE#
print ( random . choice ( [ '#' , 'o' , '~' , '*' ] ) , end = '#SPACE#' ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
main ( ) #NEWLINE#
print ( ET . tostring ( tree ) ) #NEWLINE#
driver = webdriver . Chrome ( chrome_options = options ) #NEWLINE#
c . execute ( 'select#SPACE#*#SPACE#from#SPACE#table' ) #NEWLINE#
'_' . join ( groups [ : n ] ) , '_' . join ( groups [ n : ] ) #NEWLINE#
br . addheaders = [ ( 'User-agent' , 'Chrome' ) ] #NEWLINE#
filtered_d = dict ( ( k , d [ k ] ) for k in keys if k in d ) #NEWLINE#
[ token for token in text . split ( ) if token . isdigit ( ) ] #NEWLINE#
return HttpResponseRedirect ( 'admin/edit_inline/picture_editor.html' ) #NEWLINE#
print ( np . fft . fft ( x ) ) #NEWLINE#
d [ k ] . append ( v ) #NEWLINE#
main ( ) #NEWLINE#
a_unique_max [ np . argsort ( perm [ last ] ) ] #NEWLINE#
lst . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
ax . scatter ( x , y , z ) #NEWLINE#
L = [ list ( 'ABCDE' ) for i in range ( 5 ) ] #NEWLINE#
TEST_RUNNER = 'myproject.test.test_runner.run_tests' #NEWLINE#
df2 . join ( df . B ) . reset_index ( drop = True ) #NEWLINE#
print ( ( cities [ 0 ] [ 0 ] , cities [ 1 ] [ 0 ] ) ) #NEWLINE#
p . Start ( ) #NEWLINE#
return dict ( zip ( keys , values ) ) #NEWLINE#
max_value = max ( my_list ) #NEWLINE#
user = models . ForeignKey ( User ) #NEWLINE#
listings = list ( get_listings ( ) ) #NEWLINE#
reversed ( sorted ( a . keys ( ) ) ) #NEWLINE#
x , y = np . broadcast_arrays ( * np . ogrid [ 0 : 2 , 0 : 3 ] ) #NEWLINE#
D . fromkeys ( 'abc' ) #NEWLINE#
signal . signal ( signal . SIGALRM , _handle_timeout ) #NEWLINE#
[ 1 , 1 , 0 , 1 , 0 , 1 ] #NEWLINE#
im . save ( 'test.png' ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'my-named-url' ) ) #NEWLINE#
ax . set_ylim3d ( - 2 , 2 ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
return self . _s . get ( k . lower ( ) ) #NEWLINE#
r = requests . post ( url , data = data , verify = '/path/to/public_key.pem' ) #NEWLINE#
p1 = subprocess . Popen ( [ 'echo' , 'This_is_a_testing' ] , stdout = subprocess . PIPE ) #NEWLINE#
return lst [ 1 : : 2 ] #NEWLINE#
lots_list . sort ( mycmp ) #NEWLINE#
url_match ( 'this#SPACE#is#SPACE#a#SPACE#<a#SPACE#href="test">' , 'test' ) #NEWLINE#
variable = sys . stdin . read ( ) #NEWLINE#
return '' #NEWLINE#
f1 . write ( line ) #NEWLINE#
self . socket . close ( ) #NEWLINE#
mobile = models . CharField ( max_length = 16 ) #NEWLINE#
soup . find ( 'li' , { 'class' : 'test' } , recursive = False ) #NEWLINE#
list1 = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE# list2 = [ 1 , 2 , 3 , 4 ] #NEWLINE#
"""java#SPACE#jobs#SPACE#in#SPACE#delhi#SPACE#python#SPACE#jobs#SPACE#in#SPACE#mumbai#SPACE#""" #NEWLINE#
len ( df . columns ) #NEWLINE#
print ( get_drives ( ) ) #NEWLINE#
res = [ s [ i - 2 : i + 1 ] for i in range ( 2 , len ( s ) ) if s [ i ] == s [ i - 2 ] ] #NEWLINE#
str ( float ( your_string_goes_here ) ) #NEWLINE#
name_to_rgb ( 'navy' ) #NEWLINE#
[ int ( x . split ( '#SPACE#' ) ) for x in data . split ( '\n' ) ] #NEWLINE#
df [ ~ df . field . isin ( ban_field ) ] #NEWLINE#
slices = diagonal . reshape ( - 1 , 2 ) #NEWLINE#
self . assertEqual ( output , 'hello#SPACE#world!' ) #NEWLINE#
[ 'B' , 'C' , 'D' , 'E' , 'F' ] #NEWLINE#
__init__ . py #NEWLINE#
gtk . main ( ) #NEWLINE#
return json . dumps ( json_result ) #NEWLINE#
test ( ) #NEWLINE#
[ 'zzddzdddznddndddnndddddd' ] #NEWLINE#
self . send_response ( 200 ) #NEWLINE#
pl . figure ( 1 ) #NEWLINE#
print ( ucontent [ 76 : 110 ] . encode ( 'utf-8' ) ) #NEWLINE#
df [ 'col1' ] . put ( list ( di . keys ( ) ) , list ( di . values ( ) ) ) #NEWLINE#
def close_window ( ) : #NEWLINE# #INDENT# root . destroy ( ) #NEWLINE#
[ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ] #NEWLINE# [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , 'X' , '9' ] #NEWLINE#
str ( list_of_menuitems ) . translate ( None , "[]'" ) . split ( ',' ) #NEWLINE#
pyplot . grid ( True , color = 'white' ) #NEWLINE#
cur . execute ( 'CREATE#SPACE#TABLE#SPACE#t#SPACE#(col1,#SPACE#col2);' ) #NEWLINE#
print ( 'bacon' ) #NEWLINE#
result = cursor . fetchall ( ) #NEWLINE#
letters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE# [ ord ( x ) for x in letters ] #NEWLINE#
sum ( 1 for _ in filter ( <VAR0> . __ne__ , lst ) ) #NEWLINE#
np . concatenate ( ( a1 , b1 ) ) #NEWLINE#
foo . my_parallelized_function ( ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/csv' #NEWLINE#
my_list2 = [ i [ 0 ] for i in my_list ] #NEWLINE#
[ 1 ] [ 0 ] [ 1 ] #NEWLINE#
vectors / norms . reshape ( 1 , - 1 ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x and y in x and x [ y ] , list_of_keys , target_dictionary ) #NEWLINE#
settings_dir = os . path . dirname ( __file__ ) #NEWLINE#
pattern = re . compile ( 'A\\*(.*?)(\\*.*?B\\*)(.*?)\\*' ) #NEWLINE#
print ( line ) #NEWLINE#
m . create_all ( ) #NEWLINE#
( 'key1' , 1 ) , ( 'key2' , 2 ) #NEWLINE#
lines . append ( ax . plot ( np . arange ( 1000 ) / 2.0 ) ) #NEWLINE#
g [ 'people' ] . agg ( OrderedDict ( [ ( 'C' , len ) , ( 'B' , len ) , ( 'A' , len ) ] ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
self . button . clicked . connect ( self . handleButton ) #NEWLINE#
result . update ( ( k , dol1 [ k ] + dol2 [ k ] ) for k in set ( dol1 ) . intersection ( dol2 ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
SOCIAL_AUTH_STEAM_API_KEY = '...' #NEWLINE#
"""</dd><dt>#SPACE#Fine,#SPACE#thank#SPACE#you. </dt><dd>#SPACE#Molt#SPACE#bé,#SPACE#gràcies.#SPACE#(<i>mohl#SPACE#behh,#SPACE#GRAH-syuhs</i>)""" #NEWLINE#
response = requests . delete ( url , data = json . dumps ( payload ) , headers = headers ) #NEWLINE#
a [ 0 : 1 ] [ 0 ] = 1 #NEWLINE#
[ i for i in my_list if all ( not i . startswith ( x ) for x in [ '91' , '18' ] ) ] #NEWLINE#
out = cv2 . VideoWriter ( 'output.avi' , fourcc , 20.0 , ( 640 , 480 ) ) #NEWLINE#
df = pd . DataFrame ( [ series ] ) #NEWLINE#
print ( nplats [ index ] , nplons [ index ] ) #NEWLINE#
exec ( compile ( open ( 'binds.zdata' ) . read ( ) , 'binds.zdata' , 'exec' ) ) #NEWLINE#
[ x for x in 'a1a2a3s3d4f5fg6h' if x . isalpha ( ) ] #NEWLINE#
print ( [ tuple ( x for x in y if x ) for y in a ] ) #NEWLINE#
history . append ( next ( sequence ) ) #NEWLINE#
stream = open ( 'test' , 'r' ) #NEWLINE#
zip ( t [ : : 2 ] , t [ 1 : : 2 ] ) #NEWLINE#
print ( max ( foo ) ) #NEWLINE#
a . replace ( 'in.' , '#SPACE#in.#SPACE#' ) #NEWLINE#
sys . modules [ __name__ ] . __file__ #NEWLINE#
test ( ) #NEWLINE#
np . sum ( [ 1 , 5 , 2 ] ) #NEWLINE#
plt . savefig ( 'example.png' ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 0 , 1 ] , 'B' : [ 1 , 6 ] } ) #NEWLINE# df . to_csv ( ) #NEWLINE#
[ 'a' , 'b' , 'c' ] #NEWLINE#
new_set = set ( [ 'Hello' ] ) #NEWLINE#
x [ 'basic_col1' ] *= 10 #NEWLINE#
print ( 'Hello#SPACE#%s#SPACE#%s!#SPACE#You#SPACE#have#SPACE#%d#SPACE#messages.' % ( title , name , count ) ) #NEWLINE#
f = codecs . open ( 'test.html' , 'r' , 'utf-8' ) #NEWLINE#
<STR0> ( 'bar()' , globals ( ) , foo ) #NEWLINE#
self . fields [ 'start_year' ] . required = True #NEWLINE#
return itertools . zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
Z [ ( raw [ : , 0 : 2 ] - minimum ( raw [ : , 0 : 2 ] , axis = 0 ) ) . T . tolist ( ) ] = raw [ : , ( 2 ) ] #NEWLINE#
df . dates . values . astype ( 'M8[D]' ) #NEWLINE#
sns . kdeplot ( x , shade = True ) #NEWLINE#
nodes = dom . getElementsByTagName ( 'data' ) #NEWLINE#
c . save ( ) #NEWLINE#
value = convert ( '5' , 'int' ) #NEWLINE#
zip ( * np . where ( np . char . find ( x , '.' ) > - 1 ) ) #NEWLINE#
all ( x . isalpha ( ) for x in [ 'abc' , 'def' ] ) #NEWLINE#
return '#SPACE#' . join ( ( lambda x : [ i [ : : - 1 ] for i in x ] ) ( sentence . split ( '#SPACE#' ) ) ) #NEWLINE#
df . groupby ( [ 'score' , 'type' ] ) . sum ( ) #NEWLINE# df . groupby ( [ 'score' , 'type' ] , as_index = False ) . sum ( ) #NEWLINE#
site . cwd ( '/pub' ) #NEWLINE#
plt . close ( ) #NEWLINE#
dirList = [ name for name in dirList if re . search ( '\\.mp3' , name ) ] #NEWLINE#
Counter ( words ) . most_common ( 10 ) #NEWLINE#
'social.pipeline.user.get_username' , #NEWLINE#
df . plot ( ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
celery . config_from_object ( celeryconfig ) #NEWLINE#
return int ( '' . join ( '%d' % num for num in nums ) ) #NEWLINE#
time . sleep ( random . random ( ) ) #NEWLINE#
self . send_response ( 200 ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'app_name:url_name' ) ) #NEWLINE#
return HttpResponseRedirect ( reverse ( 'app_name:login' ) ) #NEWLINE#
time . sleep ( 0.0001 ) #NEWLINE#
dic . setdefault ( key , [ ] ) . append ( item [ - 1 ] ) #NEWLINE#
p . fig . text ( 1.02 , 1 , 'Right#SPACE#the#SPACE#plot' , fontsize = 20 , rotation = 270 ) #NEWLINE#
list ( itertools . product ( ( 0 , 1 ) , repeat = 4 ) ) #NEWLINE#
df [ 'description' ] = df . animal . map ( mapping ) #NEWLINE#
print ( find_nearest ( array , value ) ) #NEWLINE#
print ( ast . literal_eval ( "{12:#SPACE#'mydict',#SPACE#14:#SPACE#(1,#SPACE#2,#SPACE#3)}" ) ) #NEWLINE#
hashstr = 'Four#SPACE#score#SPACE#and#SPACE#seven#SPACE#years#SPACE#ago' #NEWLINE#
logfile . close ( ) #NEWLINE#
plt . legend ( ) #NEWLINE#
pygame . sprite . Sprite . __init__ ( self , self . groups ) #NEWLINE#
print ( len ( someList ) ) #NEWLINE#
d [ pair [ 0 ] ] = int ( pair [ 1 ] ) #NEWLINE#
easy_install . main ( [ 'pythonModule' ] ) #NEWLINE#
return 'None' #NEWLINE#
items = sorted ( list ( ipCount . items ( ) ) , key = my_key ) #NEWLINE#
array ( [ 1.0 , 2.01 , 4.402 , 6.132 , 7.613 , 8.761 , 14.257 , 18.128 , 16.316 ] ) #NEWLINE#
csv_file . write ( '\n' . join ( map ( ',' . join , my_list ) + '\n' ) ) #NEWLINE#
page = html . fromstring ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
l . sort ( key = lambda x : x . count ( '+' ) ) #NEWLINE# l #NEWLINE#
str ( name , 'latin-1' ) #NEWLINE#
SequenceMatcher ( None , 'Hello#SPACE#you!' , 'Hello#SPACE#you' ) . ratio ( ) #NEWLINE#
list = x . split ( ) #NEWLINE#
nic . EnableDHCP ( ) #NEWLINE#
Transaction = namedtuple ( 'Transaction' , [ 'account' , 'amount' ] ) #NEWLINE#
map ( id , a [ 1 : ] ) #NEWLINE#
logging . basicConfig ( level = logging . ERROR ) #NEWLINE#
lst . count ( 1 ) > 1 #NEWLINE#
df1 . groupby ( [ 'Name' , 'City' ] , as_index = False ) . count ( ) #NEWLINE#
if line . startswith ( 'Path=' ) : #NEWLINE# #INDENT# return line [ 5 : ] #NEWLINE#
return self . run_in_executor ( func , * args , ** kwargs ) #NEWLINE#
req . add_header ( 'Content-type' , 'application/x-www-form-urlencoded' ) #NEWLINE#
msg . send ( ) #NEWLINE#
print ( string . split ( '#SPACE#' , 1 ) ) #NEWLINE#
csv_pd [ mask ] . groupby ( 'D' ) . count ( ) #NEWLINE#
sorted ( adict , key = adict . get , reverse = True ) #NEWLINE#
convert_file ( sys . argv [ 1 ] , sys . argv [ 2 ] ) #NEWLINE#
"""/""" . join ( a . strip ( '/' ) . split ( '/' ) [ 1 : ] ) #NEWLINE#
wb . save ( filename = dest_filename ) #NEWLINE#
sorted ( l1 , key = lambda id_and_name : id_and_name [ 0 ] ) #NEWLINE#
regex = 'N[^P][ST]' #NEWLINE#
logging . info ( 'Jackdaws#SPACE#love#SPACE#my#SPACE#big#SPACE#sphinx#SPACE#of#SPACE#quartz.' ) #NEWLINE#
client . put ( 'test.txt' , 'Hello#SPACE#world\n' ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 ] , #NEWLINE#
r = re . compile ( '(?<!\\[)\\d{4}(?!\\])' ) #NEWLINE#
break #NEWLINE#
beat ( app = app ) . run ( ) #NEWLINE#
tree = ET . parse ( 'test.xml' ) #NEWLINE#
return self . cleaned_data [ 'username' ] #NEWLINE#
new_dic . setdefault ( 1 , { } ) [ 2 ] = 5 #NEWLINE#
matrix . append ( [ 0 ] * ncols ) #NEWLINE#
fig . canvas . mpl_connect ( 'button_press_event' , self . onpress ) #NEWLINE#
print ( gs . translate ( 'carpe#SPACE#diem' , 'en' , 'la' ) ) #NEWLINE#
print ( f ( 2 ) ) #NEWLINE#
random . shuffle ( values ) #NEWLINE#
apply_to_zeros ( [ [ 1 , 2 , 3 ] , [ 2 ] , [ 2 , 4 ] ] ) #NEWLINE#
print ( requests . post ( 'http://localhost:5000/post' , data = address_dict ) . content ) #NEWLINE#
splitlists = [ mylist [ i : i + n ] for i in range ( 0 , len ( mylist ) , n - 1 ) ] #NEWLINE#
cv2 . imwrite ( 'output.png' , out ) #NEWLINE#
pd . DataFrame ( dfN , columns = wordlist ) . fillna ( 0 ) #NEWLINE#
print ( line ) #NEWLINE#
print ( 'Er#SPACE#liebt' , m . group ( 1 ) ) #NEWLINE#
return next ( key for key , value in d . items ( ) if value == my_value ) #NEWLINE#
data = File . read ( 16 * 1024 * 1024 ) #NEWLINE#
plt . show ( ) #NEWLINE#
time . sleep ( sleep_time ) #NEWLINE#
result = 'i#SPACE#like#SPACE#the#SPACE#following#SPACE#fruits:#SPACE#' + ',#SPACE#' . join ( fruits ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
dict ( ( ( a , b , c ) , 1 ) for a in A for b in B for c in C ) #NEWLINE#
numpy . savetxt ( filename , ( a , b ) , fmt = '%d' ) #NEWLINE#
pygame . display . set_mode ( ( infoObject . current_w , infoObject . current_h ) ) #NEWLINE#
nested_lst = [ [ 'tom' , 'cat' ] , [ 'jerry' , 'mouse' ] , [ 'spark' , 'dog' ] ] #NEWLINE# [ tuple ( l ) for l in nested_lst ] #NEWLINE#
win32gui . ReleaseDC ( hwnd , wDC ) #NEWLINE#
array ( [ [ 1.0 , - 0.0 ] , [ 0.8232233 , 0.1767767 ] ] ) #NEWLINE#
[ x for x in '[^\t\n\r#SPACE#-\ud7ff\ue000-�𐀀-\U0010ffff]' ] #NEWLINE#
[ f ( v ) for v in range ( 3 ) if f ( v ) > 1 ] #NEWLINE#
ax . set_yscale ( 'squareroot' ) #NEWLINE#
scanl ( lambda a , b : a + ( b - a ) * 0.5 , [ 2 , 3 , 5 , 8 , 3 , 5 ] ) #NEWLINE#
[ i for i in s . split ( ) if i . startswith ( '#' ) ] #NEWLINE#
os . path . dirname ( foo . __file__ ) #NEWLINE#
plt . contour ( r * np . cos ( t ) , r * np . sin ( t ) , z ) #NEWLINE#
nx . draw_networkx ( G , pos ) #NEWLINE#
df [ s . str . contains ( 'og|at' ) ] #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
naive = datetime . datetime . strptime ( '2001-2-3#SPACE#10:11:12' , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
ts . resample ( 'D' , how = f ) #NEWLINE#
Index ( [ 1 , 1 , 2 , 2 , 3 , 4 ] ) . get_loc ( 2 ) #NEWLINE#
print ( [ [ int ( x ) , int ( y ) ] for x , y in pairwise ( fields ) ] ) #NEWLINE#
default_app_config = 'polls.apps.PollsConfig' #NEWLINE#
plot ( b [ : , ( 0 ) ] , b [ : , ( 1 ) ] ) #NEWLINE#
label . pack ( ) #NEWLINE#
len ( gc . get_referrers ( my_obj ) ) #NEWLINE#
data . get ( num , data [ min ( list ( data . keys ( ) ) , key = lambda k : abs ( k - num ) ) ] ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
json . dumps ( row ) #NEWLINE#
print ( line ) #NEWLINE#
foo ( 'a((b(c))d)(e)' ) #NEWLINE#
[ 3 , 3 , 3 ] #NEWLINE#
make_list = ArrayField ( models . CharField ( max_length = 200 ) , blank = True ) #NEWLINE#
mod == __import__ ( module_name ) #NEWLINE#
data = np . loadtxt ( fname = f , delimiter = ',' ) #NEWLINE#
os . system ( 'v4l2-ctl#SPACE#-d#SPACE#0#SPACE#-c#SPACE#focus_auto=0' ) #NEWLINE#
self . assertEqual ( res , 7 ) #NEWLINE#
file1 . close ( ) #NEWLINE#
subset = df2 . columns [ - k : ] #NEWLINE#
a = np . array ( [ int ( v ) for v in line . strip ( ) . split ( '#SPACE#' ) ] ) #NEWLINE#
A = ( B == np . arange ( M ) [ : , ( np . newaxis ) ] ) . dot ( C . T ) #NEWLINE#
numpy . savetxt ( sys . stdout , a , fmt = '%.4f' ) #NEWLINE#
lst . attr . get ( idx , default_value ) #NEWLINE#
screen . fill ( ( 0 , 0 , 0 ) ) #NEWLINE#
a = { ( 3 ) : '3' , ( 0 ) : '0' , ( 1 ) : '1' } #NEWLINE#
df = df . merge ( df . apply ( calculate , axis = 1 ) , left_index = True , right_index = True ) #NEWLINE#
regex = re . compile ( 'foo#SPACE#(?:bar)*' ) #NEWLINE#
str = re . sub ( '[^atcg]' , '' , str ) #NEWLINE#
image_response = browser . open_novisit ( img [ 'src' ] ) #NEWLINE#
[ ( 1 , 4 ) , ( 6 , 8 ) , ( 10 , 10 ) ] #NEWLINE#
lbl6 . grid ( row = 0 , column = 0 ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
return inspect . stack ( ) [ 1 ] [ 3 ] #NEWLINE#
np . empty ( ( M , N , L ) ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
print ( '%s#SPACE#[%s]' % ( row_label , '#SPACE#' . join ( '%03s' % i for i in row ) ) ) #NEWLINE#
return sorted ( lst ) #NEWLINE#
Route . objects . filter ( stops_forwards__contains = [ 285 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
random . shuffle ( random_order ) #NEWLINE#
sess . run ( train_op ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
line = linecache . getline ( thefilename , 33 ) #NEWLINE#
print ( list ( fooiter ) ) #NEWLINE#
items . sort ( ) #NEWLINE#
yas = 'yas\t\tbs\tcda\t\t' #NEWLINE# re . split ( '\\t+' , yas . rstrip ( '\t' ) ) #NEWLINE#
writer . writerow ( [ test_data [ 0 ] [ 1 ] ] ) #NEWLINE#
signal . signal ( signal . SIGINT , self . old_handler ) #NEWLINE#
zelib = ctypes . CDLL ( '...' ) #NEWLINE#
dct . setdefault ( 'foo' , [ ] ) . append ( 'bar' ) #NEWLINE#
dir ( settings ) #NEWLINE#
python - V #NEWLINE#
print ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
{ 'key_x' , 'key_y' } , { 'key_x' , 'key_y' , 'key_z' } , { 'key_x' , 'key_y' } #NEWLINE#
print ( re . sub ( '{.+?}' , lambda match : r . pop ( 0 ) , s , count = len ( r ) ) ) #NEWLINE#
driver . find_element_by_tag_name ( 'body' ) . send_keys ( Keys . COMMAND + 'w' ) #NEWLINE#
self . text . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
pprint . pprint ( list ( cursor ) ) #NEWLINE#
s . bind ( ( '' , 0 ) ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
list ( fd [ 'A/B' ] . keys ( ) ) #NEWLINE#
matchre = re . compile ( '([^(]*)(?:\\(([^)]*)\\))?' ) #NEWLINE#
splitparts = re . compile ( '\\s*,\\s*' ) #NEWLINE#
numpy . random . choice ( [ 'a' , 'b' , 'c' ] , size = 20 , p = [ 0.3 , 0.4 , 0.3 ] ) #NEWLINE#
df . stack ( ) . dropna ( ) . reset_index ( drop = True ) #NEWLINE#
pygame . display . list_modes ( ) #NEWLINE#
list ( chain ( repeat ( 0 , a . count ( 0 ) ) , compress ( a , a ) ) ) #NEWLINE#
file_date_tuple_list . sort ( key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
lst = [ 'paragraph#SPACE#1' , 'paragraph#SPACE#2' , 'paragraph#SPACE#3' ] #NEWLINE#
plt . gcf ( ) . canvas . draw ( ) #NEWLINE#
sum ( totals . values ( ) ) #NEWLINE#
data = json . loads ( result . text , object_pairs_hook = OrderedDict ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
myscript . py | xclip #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
idValue = values [ 'criteria' ] [ 0 ] [ 'id' ] #NEWLINE#
pg . display . flip ( ) #NEWLINE#
print ( df [ 'X' ] . notnull ( ) & df [ 'Y' ] . notnull ( ) & df [ 'Z' ] . notnull ( ) ) #NEWLINE#
fig . savefig ( 'image.png' , dpi = 100 ) #NEWLINE#
self . assertEqual ( foo . bar ( ) , 'test_VAR1' ) #NEWLINE#
"""this#SPACE#isar#SPACE#ando#SPACE#msen#SPACE#tenc#SPACE#e""" #NEWLINE#
[ [ next ( b ) for _ in range ( x ) ] for x in l ] #NEWLINE#
webbrowser . open ( url ) #NEWLINE#
return simplejson . JSONEncoder . default ( self , obj ) #NEWLINE#
"""{0:032b}""" . format ( x ) #NEWLINE#
( 'an' , 'o' ) , ( 'an' , 'r' ) , ( 'car' , 'k' ) , ( 'rock' , 'h' ) , ( 'pig' , 'p' ) #NEWLINE#
return np . einsum ( '...i,...i->...' , xdiff , dposv ( Sigma , xdiff . T ) [ 1 ] . T ) #NEWLINE#
QtCore . QObject . connect ( a , QtCore . SIGNAL ( 'QtSig()' ) , pyFunction ) #NEWLINE#
start_date = local_tz . localize ( start_date ) #NEWLINE#
dict . __init__ ( self , * args , ** kwargs ) #NEWLINE#
sum ( n * ( n - 1 ) // 2 for n in list ( index2count . values ( ) ) ) #NEWLINE#
df . groupby ( 'Employer' ) . Account_Num . nunique ( ) #NEWLINE#
print ( match . group ( 1 ) ) #NEWLINE#
c . execute ( 'drop#SPACE#table#SPACE#x2' ) #NEWLINE#
c . execute ( 'alter#SPACE#table#SPACE#x2_new#SPACE#rename#SPACE#to#SPACE#x2' ) #NEWLINE#
d . save ( ) #NEWLINE#
[ fname . rsplit ( '.' , 1 ) [ 0 ] for fname in os . listdir ( 'C:\\X\\Data\\' ) ] #NEWLINE#
ax . legend ( ) #NEWLINE#
csv . writer ( f , quoting = csv . QUOTE_NONE ) . writerows ( cursor ) #NEWLINE#
draw = ImageDraw . Draw ( im ) #NEWLINE#
self . driver . implicitly_wait ( 20 ) #NEWLINE#
writer . writerows ( data ) #NEWLINE#
x . name = 'x' #NEWLINE#
silvermoon [ 'wintergrasp' ] [ 'controlling-faction' ] #NEWLINE#
sock . sendto ( bytes ( MESSAGE , 'utf-8' ) , ( UDP_IP , UDP_PORT ) ) #NEWLINE#
self . lb2 . pack ( side = 'left' , fill = 'x' , expand = True ) #NEWLINE#
all_words = set ( gen_words ( txt ) ) #NEWLINE#
foo , bar = map ( d . get , ( 'foo' , 'bar' ) ) #NEWLINE#
df . join ( s ) #NEWLINE#
s [ s == 12 ] . index #NEWLINE#
print ( json . dumps ( { 'key1' : 'value' , 'key2' : 'value2' } , indent = 4 ) ) #NEWLINE#
return all ( x != y for x , y in itertools . combinations ( objs , 2 ) ) #NEWLINE#
test_f ( ) #NEWLINE#
ax . patch . set_visible ( False ) #NEWLINE#
a_file = open ( 'E:\\Python#SPACE#Win7-64-AMD#SPACE#3.3\\Test' , encoding = 'utf-8' ) #NEWLINE#
stage2 = re . compile ( '^\\s*(.+?)\\s*$' , re . MULTILINE ) #NEWLINE#
fh . write ( h . hexdigest ( ) ) #NEWLINE#
return date . strftime ( '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' ) #NEWLINE#
parser . unescape ( 'Ð¾Ð¿Ð°' ) #NEWLINE#
ax [ 1 ] . plot ( np . arange ( 2 ) / p , c = c ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
writer . writerows ( zip_list ) #NEWLINE#
sys . path #NEWLINE#
Quit = eval ( input ( 'Press#SPACE#Q#SPACE#to#SPACE#Quit' ) ) #NEWLINE#
bar . sort ( reverse = True ) #NEWLINE#
for i in range ( 1 , 6 ) : #NEWLINE# #INDENT# for c1 in itertools . combinations ( c , i ) : #NEWLINE# #INDENT# #INDENT# c1 = set ( c1 ) #NEWLINE#
'=Start=' , 'From:#SPACE#You' , 'To:#SPACE#Me' , 'Good!' , 'How#SPACE#bout#SPACE#you?' , '=End' #NEWLINE#
app . mainloop ( ) #NEWLINE#
df = df . rename ( columns = { 'variable' : 'hour' } ) #NEWLINE#
df [ 'grouped' ] = df [ 'B' ] + df [ 'C' ] #NEWLINE#
s [ s . str . contains ( '|' . join ( searchfor ) ) ] #NEWLINE#
a . reshape ( - 1 , R ) . mean ( axis = 1 ) #NEWLINE#
subprocess . check_call ( [ 'cp' , '-rt' , 'to_dir' ] + glob . glob ( 'from_dir/*' ) ) #NEWLINE#
locale . setlocale ( locale . LC_TIME , 'C' ) #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
np . where ( np . logical_and ( a >= 6 , a <= 10 ) ) #NEWLINE#
pool = Pool ( processes = 5 ) #NEWLINE#

from lala import * #NEWLINE#
{ { my_json | safe } } #NEWLINE#
[ 'g' , 'j' ] #NEWLINE#
{ 'A' : 1 , 'B' : 2 } #NEWLINE#
root . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
app . run ( host = '0.0.0.0' , debug = False ) #NEWLINE#
writer . writerow ( reorderfunc ( row ) ) #NEWLINE#
allsum = mask . sum ( ) #NEWLINE#
self . assertEqual ( res , 'bob' ) #NEWLINE#
logging . getLogger ( 'one.two' ) . error ( 'one.two' ) #NEWLINE#
logging . getLogger ( 'one.two.three' ) . error ( 'one.two.three' ) #NEWLINE#
data_file = pd . read_excel ( 'path_to_file.xls' , sheetname = 'sheet_name' ) #NEWLINE#
print ( my_file . read ( ) ) #NEWLINE#
return fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
platform . architecture ( ) #NEWLINE#
min ( x , key = lambda t : ( t [ 1 ] , - t [ 0 ] ) ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
print ( Matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) ** x ) #NEWLINE#
[ x for x in A if x not in subset_of_A ] #NEWLINE#
subprocess . Popen ( cmd ) #NEWLINE#
np . array ( [ 1368431149 , 1368431150 ] ) . astype ( 'datetime64[s]' ) #NEWLINE#
tuple ( set ( dir ( Foo ) ) - set ( dir ( Bar ) ) ) #NEWLINE#
with open ( 'filename.txt' , 'r' ) as f : #NEWLINE# #INDENT# data = [ map ( int , line . split ( ) ) for line in f ] #NEWLINE#
greeter . greet ( ) #NEWLINE#
matplotlib . rcParams . update ( { 'font.size' : 22 } ) #NEWLINE#
sys . maxsize + 1 #NEWLINE#
ast . literal_eval ( '{' + s + '}' ) #NEWLINE#
plt . savefig ( '~/Documents/output.png' ) #NEWLINE#
self . _handle . close ( ) #NEWLINE#
output , err = process . communicate ( ) #NEWLINE#
os . system ( 'pause' ) #NEWLINE#
print ( '|' . join ( row ) ) #NEWLINE#
base64 . b64encode ( chr ( 255 ) ) #NEWLINE#
obj_key = dct . pop ( '@uuid' ) #NEWLINE#
out_2 = cv . fromarray ( np . zeros ( ( 3000 , 3000 , 3 ) , np . uint8 ) ) #NEWLINE#
list ( ordered_dict . keys ( ) ) [ 2 ] #NEWLINE#
np . diag ( A . dot ( B . T ) ) #NEWLINE#
ax . locator_params ( nbins = 10 , axis = 'x' ) #NEWLINE#
3820 , 4070 , 9356 , 9708 , 3238 , 9380 , 5572 , 9491 , 3038 , 7434 , 7771 , 288 #NEWLINE#
8632 , 3962 , 9136 , 8106 , 7295 , 3699 , 4136 , 3459 , 8120 , 6018 , 8963 , 5779 #NEWLINE#
3635 , 3984 , 4850 , 9633 , 2588 , 7631 , 9591 , 1067 , 7182 , 1301 , 8041 , 1361 #NEWLINE#
parts = [ s [ i : j ] for i , j in zip ( indices , indices [ 1 : ] + [ None ] ) ] #NEWLINE#
yourdf . to_excel ( writer , 'Sheet5' ) #NEWLINE#
pylab . show ( ) #NEWLINE#
br . select_form ( name = 'simTrade' ) #NEWLINE#
keys . add ( parts [ 1 ] ) #NEWLINE#
myreportscode . py #NEWLINE#
return HttpResponse ( result . getvalue ( ) , content_type = 'application/pdf' ) #NEWLINE#
plt . xlim ( 0 , 4 ) #NEWLINE#
main ( ) #NEWLINE#
buff . seek ( 0 ) #NEWLINE#
find . sub ( '\x01' , text ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
any ( first == c for c in letter ) #NEWLINE#
[ 'dan' , 'daN' , 'dAn' , 'dAN' , 'Dan' , 'DaN' , 'DAn' , 'DAN' ] #NEWLINE#
print ( '\x1b[%d;%dH' % ( y , x ) ) #NEWLINE#
vectors . T / norms . reshape ( - 1 , 1 ) #NEWLINE#
im0 = ax0 . imshow ( im2 , aspect = 'auto' , extent = [ - 0.15 , 0.15 , 0 , 4 ] ) #NEWLINE#
wx . Frame . __init__ ( self , wx . GetApp ( ) . TopWindow , title = self . title ) #NEWLINE#
formatter = logging . Formatter ( '%(asctime)s#SPACE#%(app_name)s#SPACE#:#SPACE#%(message)s' ) #NEWLINE#
import imp #NEWLINE# imp . reload ( myFile ) #NEWLINE#
sorted ( list ( some_dict . items ( ) ) , key = operator . itemgetter ( 1 ) , reverse = True ) [ : 10 ] #NEWLINE#
os . system ( 'rm#SPACE#' + test ) #NEWLINE#
array ( [ [ 11.4 , 4.0 ] , [ 12.0 , 5.0 ] ] ) , #NEWLINE#
self . text . focus ( ) #NEWLINE#
[ e . value for e in Color ] #NEWLINE#
T3 ( ) #NEWLINE#
clean = re . sub ( '[^\\s!-~]' , '' , dirty ) #NEWLINE#
path , file = os . path . split ( path_and_file ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
foo = open ( '/tmp/baz' ) . read ( ) #NEWLINE#
[ 'T' , 'P' , 'M' , 'M' , 'A' , 'R' , 'k' , 'mis' , 'S' , 'G' , 'C' , 'N' ] #NEWLINE#

random . sample ( list ( range ( 10 ) ) , 3 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
[ 'method_of_subclass' ] #NEWLINE#
ax . add_artist ( circle3 ) #NEWLINE#
cb = plt . colorbar ( sc , ax = ax1 , aspect = 10 ) #NEWLINE#
data = json . load ( urllib . request . urlopen ( 'http://someurl/path/to/json' ) ) #NEWLINE#
f . write ( file_str ) #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
'#SPACE#' . join ( map ( str , L ) ) . index ( '#SPACE#' . join ( map ( str , x ) ) ) / 2 #NEWLINE#
copy . copy ( ) #NEWLINE#
list ( open ( 'test_newlines.txt' , 'U' ) ) #NEWLINE#
_ ( 'str1#SPACE#' ) + _ ( 'str2' ) #NEWLINE#
load_documentation ( ) #NEWLINE#
{ { toctree ( collapse = False ) } } #NEWLINE#
self . run ( ) #NEWLINE#
g [ : ] = ( elem [ : 12 ] for elem in g ) #NEWLINE#
{ 'phones' : [ { 'phone_number' : 22 } ] } #NEWLINE#
print ( ( i , p ) ) #NEWLINE#
df = pd . DataFrame ( { i : list ( range ( 1000 ) ) for i in range ( 100 ) } ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
list ( groupedby ( [ 'B' , 'D' , 'A' , 'C' , 'E' ] , key = next_dict . __getitem__ ) . values ( ) ) #NEWLINE#
output = passthru ( 'python#SPACE#wordgame2.py#SPACE#$start_word#SPACE#$end_word' ) #NEWLINE#
sum ( 1 for i in set ( list_of_purple_items ) if i not in main_set ) #NEWLINE#
users = User . objects . filter ( event__in = events ) #NEWLINE#
return int ( utc_mktime ( dt . timetuple ( ) ) ) #NEWLINE#
scroll = Gtk . ScrolledWindow ( hexpand = True , vexpand = True ) #NEWLINE#
self . wfile . write ( 'Request#SPACE#has#SPACE#been#SPACE#processed.' ) #NEWLINE#
"""President#SPACE#[P]#SPACE#Barack#SPACE#Obama#SPACE#[/P]#SPACE#met#SPACE#Microsoft#SPACE#founder#SPACE#[P]#SPACE#Bill#SPACE#Gates#SPACE#[/P],#SPACE#yesterday.""" #NEWLINE#
config . readfp ( open ( 'defaults.cfg' ) ) #NEWLINE#
a . decode ( 'utf-8' ) #NEWLINE#
f2 . close ( ) #NEWLINE#
element . text = 'TRUE' #NEWLINE#
raise SystemError ( 'PyThreadState_SetAsyncExc#SPACE#failed' ) #NEWLINE#
plt . title ( 'Skinny#SPACE#shift#SPACE#-#SPACE#3#SPACE#at#SPACE#a#SPACE#time' ) #NEWLINE#
plt . title ( 'With#SPACE#steps' ) #NEWLINE#
print ( name , 'is' , age , 'years#SPACE#old' ) #NEWLINE#
datetime . timedelta ( 2.5 ) #NEWLINE#
print ( r [ 'key_name' ] ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
norm . cdf ( norm . ppf ( 0.95 ) ) #NEWLINE#
print ( '♠' ) #NEWLINE#
not float ( your_number ) . is_integer ( ) #NEWLINE#
snort_parse ( 'snort_file' ) #NEWLINE#
mlab . mesh ( x , y , z , scalars = z , mask = mask ) #NEWLINE#
arr . append ( [ 0 , 0 , 0 , 0 ] ) #NEWLINE#
df . as_matrix ( columns = df . columns [ 1 : ] ) #NEWLINE#
open ( path , 'a' ) . close ( ) #NEWLINE#
return self . setdefault ( key , self . default_factory ( key ) ) #NEWLINE#
array ( [ [ 1 , 1 ] , [ 2 , 2 ] ] ) #NEWLINE#
common_keys = [ k for k in dict1 if k in dict2 ] #NEWLINE#
vertex_dtype = [ ( 'index' , 'i' ) , ( 'x' , 'f' ) , ( 'y' , 'f' ) ] #NEWLINE#
l . last_index ( ) #NEWLINE#
rule_list = [ cls ( ) for cls in Rule . __subclasses__ ( ) ] #NEWLINE#
PROJECT_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE# STATIC_ROOT = os . path . join ( PROJECT_DIR , 'static' ) #NEWLINE#
collections . Counter ( dictionary ) . most_common ( 2 ) #NEWLINE#
[ 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 ] , #NEWLINE#
data . groupby ( 'col1' ) . agg ( { 'col2' : max , 'col3' : min } ) #NEWLINE#
set ( tuple ( element ) for element in xx ) #NEWLINE#
sys . stderr = sys . __stderr__ #NEWLINE#
f . close ( ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#the#SPACE#1st#SPACE#argument:#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' + sys . argv [ 1 ] ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
ax1 . plot ( list ( range ( 2 ) ) , list ( range ( 2 ) ) , linewidth = 2 ) #NEWLINE#
df [ 'col3' ] = df [ 'col3' ] . astype ( 'category' ) #NEWLINE#
c [ tuple ( list1 [ 0 ] ) ] #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
return { 'systems' : systems } #NEWLINE#
zoomout . pack ( side = 'left' ) #NEWLINE#
all ( item1 == item2 for item1 , item2 in zip ( list1 , list2 ) ) #NEWLINE#
shutil . copy ( fname , os . path . join ( path_res , '{}{}{}' . format ( name , '(A)' , ex ) ) ) #NEWLINE#
mvprintw ( COLS - length ( 'here#SPACE#is#SPACE#more' ) , LINES - 1 , 'here#SPACE#is#SPACE#more' ) #NEWLINE#
sorted_rows [ i [ 0 ] ] . append ( ( i [ 1 ] , i [ 2 ] ) ) #NEWLINE#
sc = plt . scatter ( [ 1 , 1 ] , [ data . min ( ) , data . max ( ) ] ) #NEWLINE#
sys . modules [ 'tmp.bar' ] . foo #NEWLINE#
"""Formats#SPACE#the#SPACE#data#SPACE#for#SPACE#typeA""" #NEWLINE#
return Response ( serializer . data , status = status . HTTP_200_OK ) #NEWLINE#
AC_SUBST ( [ PYTHON_CFLAGS ] ) #NEWLINE#
107275873 , 107281000 , 107287770 , 106452671 , 106471246 , 106478110 #NEWLINE#
some_list . append ( some_list ) #NEWLINE#
threading . Thread ( target = access_thlocal ) . start ( ) #NEWLINE#
imagedata . put ( ) #NEWLINE#
a [ ~ b ] = np . nan #NEWLINE#
return { 'True' : True , 'False' : False } #NEWLINE#
conn . commit ( ) #NEWLINE#
pool = Pool ( processes = 1 ) #NEWLINE#
p = numpy . vstack ( [ p , q ] ) #NEWLINE#
sys . stderr = open ( 'errorLog.txt' , 'w' ) #NEWLINE#
print ( format ( dec , '7.2f' ) ) #NEWLINE#
myLists . append ( [ 25427.9 , 13694.0 , 5148.9 , 141419.9 ] ) #NEWLINE#
logging . info ( 'Creating#SPACE#a#SPACE#pool' ) #NEWLINE#
logging . info ( 'Saving#SPACE#files#SPACE#in#SPACE#bucket...' ) #NEWLINE#
row = [ item [ 'id' ] for item in cursor . fetchall ( ) ] #NEWLINE#
transaction . commit ( ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
ax . xaxis . set_major_formatter ( hfmt ) #NEWLINE#
del mylist [ : ] #NEWLINE#
pyplot . show ( ) #NEWLINE#
1 / 2 / 3 / 4 / 5 / 6 #NEWLINE#
ax . plot ( x_data1 , data1 , 'ok' , markerfacecolor = 'none' , label = 'Data#SPACE#(k=1)' ) #NEWLINE#
p . start ( ) #NEWLINE#
st = { '2' , '4' , '17' , '21' , '22' , '24' , '27' , '28' , '29' , '33' , '39' } #NEWLINE# filtered_dict = { k : v for k , v in my_dict . items ( ) if not st . isdisjoint ( v ) } #NEWLINE#
return os . path . join ( expanded , filename ) #NEWLINE#
[ m . start ( ) for m in re . finditer ( 'ab' , s ) ] #NEWLINE#
opener = urllib . request . build_opener ( MyHTTPHandler ) #NEWLINE#
c . execute ( 'SELECT#SPACE#color,#SPACE#fluffiness#SPACE#FROM#SPACE#table' ) #NEWLINE#
node = doc . getElementsByTagName ( 'nodeB' ) [ 0 ] #NEWLINE#
parser . add_argument ( '--othername' , dest = 'name' , choices = list_of_choices ) #NEWLINE#
sheet . write ( 0 , 0 , 'Hello\nWorld' ) #NEWLINE#
win . set_app_paintable ( True ) #NEWLINE#
ax . plot ( theoryX , theoryY , 'r-' ) #NEWLINE#
my_string = 'The#SPACE#quick#SPACE#brown#SPACE#dog#SPACE#jumped#SPACE#over#SPACE#the#SPACE#lazy#SPACE#fox' #NEWLINE#
app . exec_ ( ) #NEWLINE#
IOLoop . instance ( ) . start ( ) #NEWLINE#
df [ 'z_s' ] = df [ 'z' ] . shift ( - 1 ) #NEWLINE#
sys . stdout . write ( 'Bob#SPACE#here.' ) #NEWLINE#
win32api . MessageBox ( 0 , 'yes#SPACE#no#SPACE#cancel?' , 'title' , 3 ) #NEWLINE#
version = Column ( Integer , info = { 'description' : 'Version#SPACE#Number' } ) #NEWLINE#
parser . add_argument ( 'input_data' , action = FooAction , help = 'some#SPACE#help' ) #NEWLINE#
l = [ y for x , y in sorted ( zip ( [ key ( i ) for i in l ] , l ) ) ] #NEWLINE#
all_my_models = MyModel . objects . all ( ) #NEWLINE#
sm = plt . cm . ScalarMappable ( cmap = my_cmap ) #NEWLINE#
function ( ) #NEWLINE#
fsock . close ( ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
rx . findall ( 'abc_def,k9' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
[ ( x + y ) for x , y in zip_longest ( P , Q , fillvalue = 0 ) ] #NEWLINE#
MPI_Finalize ( ) #NEWLINE#
s . close ( ) #NEWLINE#
print ( x . apply ( lambda a : list ( [ v for v in a if v == v ] ) ) ) #NEWLINE#
ax . add_patch ( rect ) #NEWLINE#
print ( get_pretty_print ( my_json_obj ) ) #NEWLINE#
print ( 'Before' , func . __name__ ) #NEWLINE#
message = MIMEText ( 'Message#SPACE#goes#SPACE#here.' ) #NEWLINE#
( 0 , '%10c' ) , ( 4 , '%5hc' ) , ( 8 , '%5C' ) , ( 11 , '%5lc' ) #NEWLINE#
re . search ( '(?<!(asp|php|jsp))\\?.*' , s ) #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#(ms)#SPACE#Since#SPACE#Beginning#SPACE#of#SPACE#Experiment' ) #NEWLINE#
return jsonify ( result = { 'status' : 200 } ) #NEWLINE#
array ( [ [ 0 ] , [ 0 ] , [ 0 ] , [ 1 ] , [ 1 ] , [ 0 ] ] ) #NEWLINE#
print ( '0x' + binascii . hexlify ( struct . pack ( '<d' , 123.456789 ) ) ) #NEWLINE#
sorted ( trial_list , key = trial_dict . get ) #NEWLINE#
wx . Frame . __init__ ( self , None , title = 'Nested#SPACE#Splitters' , size = ( 800 , 600 ) ) #NEWLINE#
return inspect . getouterframes ( inspect . currentframe ( ) ) [ 1 ] [ 1 : 4 ] [ 2 ] #NEWLINE#
[ [ 1 , 2 ] , [ 2 , 5 ] , [ 3 , 7 ] , [ 4 , 9 ] , [ 5 , 4 ] ] #NEWLINE#
stringvar . append ( tuplevar ) #NEWLINE#
min_num = min ( li , key = attrgetter ( 'number' ) ) #NEWLINE#
return set ( a_list ) . intersection ( a_string . split ( ) ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
termios . tcsetattr ( self . fd , termios . TCSAFLUSH , self . new_term ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
compiler . parse ( '(3*x**(x+(5/x)+(x/33))+y)/(32#SPACE#+#SPACE#5)' ) #NEWLINE#
return object . __getattribute__ ( self , name ) #NEWLINE#
pfile . close ( ) #NEWLINE#
zin . close ( ) #NEWLINE#
[ x for x in l if '2' not in x ] #NEWLINE#
return redirect ( '/' ) #NEWLINE#
print ( 'Dealer#SPACE#has#SPACE#{}#SPACE#{}#SPACE#showing' . format ( * dealer [ : 2 ] ) ) #NEWLINE#
x == y and type ( x ) == type ( y ) #NEWLINE#
return Spam . all ( ) . filter ( 'eggs' , self . key ( ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
print ( hashlib . sha1 ( json . dumps ( b , sort_keys = True ) ) . hexdigest ( ) ) #NEWLINE#
print ( line ) #NEWLINE#
[ ( 4 if x == 1 else x ) for x in a ] #NEWLINE#
cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_GRAYSCALE ) . shape #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
y = np . where ( x > a , 2 * x + 7 , 3 * x + 9 ) #NEWLINE#
list ( chain ( * zip_longest ( d , e [ : : - 1 ] ) ) ) #NEWLINE#
f . write ( 'Would#SPACE#melt,#SPACE#thaw,#SPACE#resolve#SPACE#itself#SPACE#into#SPACE#a#SPACE#dew\n' ) #NEWLINE#
colorbar ( ) #NEWLINE#
input = [ x . strip ( '|' ) . split ( '|' ) for x in fd . readlines ( ) ] #NEWLINE#
f = open ( filename , 'r+' ) #NEWLINE#
p . terminate ( ) #NEWLINE#
from selenium . webdriver . common . by import By #NEWLINE#
new_list #NEWLINE#
array ( [ 0 , 0 , 0 , 1 , 1 ] , dtype = int32 ) , 4.576996142441375 , 1 #NEWLINE#
ax0c . yaxis . set_major_locator ( MaxNLocator ( nbins = nbins , prune = 'upper' ) ) #NEWLINE#
float . hex ( 8.25 ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
plt . plot ( dates , jec , 'k.' , markersize = 20 ) #NEWLINE#
file = open ( '/tmp/test.json' , 'w' ) #NEWLINE#
[ '(' , '2' , '.' , 'x' , '.' , '(' , '3' , '-' , '1' , ')' ] #NEWLINE# [ '4' , ')' , '/' , '3' , '.' , 'x' , '^' , '2' ] #NEWLINE#
np . hstack ( [ np . repeat ( a , len ( a ) , 0 ) , np . tile ( b , ( len ( b ) , 1 ) ) ] ) #NEWLINE#
secnd_set = set ( secnd_tuple_list ) #NEWLINE#
{ k : get ( get ( d , k ) , 'a.b' ) for k in list ( d . keys ( ) ) } #NEWLINE#
queryset . filter ( search_name__icontains = 'whatever#SPACE#text' ) #NEWLINE#
server . quit ( ) #NEWLINE#
print ( '{:>15}:#SPACE#{:<30}' . format ( el . tag , el . text ) ) #NEWLINE#
a . sort ( ) #NEWLINE#
""",#SPACE#""" . join ( [ '1' , '2' , '3' ] ) #NEWLINE#
json . dumps ( dict ) #NEWLINE#
( 1245427 ) . to_bytes ( 3 , byteorder = 'big' ) #NEWLINE#
self . layout . addWidget ( self . button ) #NEWLINE#
ax . set_ylim ( 0.1 , 300 ) #NEWLINE#
a [ slice ( * b ) ] #NEWLINE#
reactor . run ( ) #NEWLINE#
return s [ start : end ] #NEWLINE#
"""http://www.domain.com/?s=some""" #NEWLINE#
df [ 'idx' ] = df . groupby ( 'Salesman' ) . cumcount ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
m = pd . MultiIndex . from_arrays ( zip ( * df [ 0 ] . str . split ( '|' ) ) ) #NEWLINE#
"""""" . join ( x ) #NEWLINE#
var = 1 #NEWLINE#
rank = models . IntegerField ( default = 0 ) #NEWLINE#
xax . setTicks ( ticks ) #NEWLINE#
indata = fp . read ( ) #NEWLINE#
pd . stats . moments . rolling_std ( timeseries , periods , ddof = 0 ) #NEWLINE#
sorted ( list ( a_dict . items ( ) ) , key = lambda k_v1_v2 : k_v1_v2 [ 1 ] [ 1 ] ) #NEWLINE#
df . T . apply ( lambda x : x . nunique ( ) , axis = 1 ) #NEWLINE#
savefig ( 'foo.png' , bbox_inches = 'tight' ) #NEWLINE#
parser . add_argument ( '--verbose' , default = 0 , type = int ) #NEWLINE#
print ( cls . __name__ ) #NEWLINE#
turtle . speed ( 0 ) #NEWLINE#
print ( request . LANGUAGE_CODE ) #NEWLINE#
return self . cls . instances [ key ] #NEWLINE#
plt . gca ( ) . set_color_cycle ( None ) #NEWLINE#
q = Queue . Queue ( ) #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
driver . find_element_by_name ( 'password' ) . send_keys ( password ) #NEWLINE#
self . save_m2m ( ) #NEWLINE#
'%s' % ( name + "'s#SPACE#interest#SPACE#payable#SPACE#-#SPACE#" + interestPayable ) #NEWLINE#
self . show ( ) #NEWLINE#
warnings . simplefilter ( 'ignore' ) #NEWLINE#
[ random . random ( ) for i in range ( N ) ] #NEWLINE#
requests . get ( url , cookies = load_cookies ( filename ) ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
[ ( i [ 0 ] + j [ 0 ] , i [ 1 ] + j [ 1 ] ) for i , j in zip ( a , b ) ] #NEWLINE#
[ i for i in L1 if i in L2 ] #NEWLINE#
sys . path . insert ( - 1 , '..' ) #NEWLINE#
check_call ( [ 'gzip' , fullFilePath ] ) #NEWLINE#
print ( x . encode ( 'utf-8' ) ) #NEWLINE#
f = open ( filename , 'rb' ) #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
fig , axes = plot . subplots ( nrows = 2 , ncols = 3 , sharex = True , sharey = True ) #NEWLINE#
os . path . basename ( fullpath ) #NEWLINE#
matplotlib . rcParams [ 'legend.handleheight' ] = 1 #NEWLINE#
main ( ) #NEWLINE#
new_node_ref = index . get ( 'key' , 'value' ) #NEWLINE#
values = map ( int , values . split ( ',' ) ) #NEWLINE#
a [ 1 : 4 ] . sort ( ) #NEWLINE#
bar ( 1 , 2 , 3 , 'a' , 'b' ) #NEWLINE#
pos_translate = { 'J' : 'a' , 'V' : 'v' , 'N' : 'n' , 'R' : 'r' } #NEWLINE#
matrix ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 3 ] ] ) #NEWLINE#
from scrapy . conf import settings #NEWLINE#
return np . where ( detected_minima ) #NEWLINE#
my_string = bytearray ( iter ( read_next_byte , 0 ) ) . decode ( 'utf-8' ) #NEWLINE#
[ [ 'a' , 'b' ] , [ 'a' , 'c' , 'd' ] ] #NEWLINE#
class Photo ( db . Model ) : #NEWLINE# #INDENT# imageblob = db . BlobProperty ( ) #NEWLINE#
sorted ( s1 , key = trailing_digits ) #NEWLINE#
ssc . awaitTermination ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
r = requests . post ( 'http://httpbin.org/post' , data = iterable ) #NEWLINE#
file = open ( zipname , 'rb' ) #NEWLINE#
print ( collections . Counter ( 'google' ) ) #NEWLINE#
with open ( 'words.txt' ) as f : #NEWLINE# #INDENT# [ word for line in f for word in line . split ( ) ] #NEWLINE#
ax . w_xaxis . set_major_formatter ( ticker . FuncFormatter ( format_date ) ) #NEWLINE#
myFunction ( ) #NEWLINE#
response = subprocess . check_output ( cmd , shell = True , stderr = subprocess . STDOUT ) #NEWLINE#
text = text . translate ( replace_punctuation ) #NEWLINE#
self . redirect ( '/yourpage#home' ) #NEWLINE#
print ( now - dateutil . relativedelta . relativedelta ( months = 1 ) ) #NEWLINE#
tree . write ( 'output.xml' , xml_declaration = True , encoding = 'utf-8' ) #NEWLINE#
main ( ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
root . clear ( ) #NEWLINE#
s = 'my#SPACE#string#SPACE#with#SPACE#"double#SPACE#quotes"#SPACE#blablabla' #NEWLINE# json . dumps ( s ) #NEWLINE#
Article . objects . all ( ) . delete ( ) #NEWLINE#
print ( eval ( 'BuildType.debug' ) ) #NEWLINE#
ftp . login ( 'UserName' , 'Password' ) #NEWLINE#
list1 = [ self . tr ( 'First#SPACE#Item' ) , self . tr ( 'Second#SPACE#Item' ) , self . tr ( 'Third#SPACE#Item' ) ] #NEWLINE#
sqlContext . createDataFrame ( rdd ) #NEWLINE#
screen_width = root . winfo_screenwidth ( ) #NEWLINE#
dupl = np . where ( mask ) [ 1 ] #NEWLINE#
self . lc . Bind ( wx . EVT_MOTION , self . OnMouseMotion ) #NEWLINE#
a = [ x [ : ] for x in [ [ 0 ] * cols ] * rows ] #NEWLINE#
[ f ( x ) for x in l if f ( x ) ] #NEWLINE#
result = child . communicate ( ) [ 0 ] #NEWLINE#
test . myfun ( f ) #NEWLINE#
par2 . xaxis . set_major_locator ( ticker . FixedLocator ( [ 0 , 1 , 2 , 3 ] ) ) #NEWLINE#
print ( montreal_json [ 'features' ] [ 0 ] [ 'geometry' ] ) #NEWLINE#
return '#SPACE#' . join ( w [ : : - 1 ] for w in s . split ( ) ) #NEWLINE#
self . driver . set_script_timeout ( max_wait ) #NEWLINE#
ax . set_yticklabels ( [ '{:3.2f}%' . format ( x * 100 ) for x in vals ] ) #NEWLINE#
espeak . synth ( 'Hello#SPACE#world.' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
print ( '-' * 10 ) #NEWLINE#
mylogger . setLevel ( logging . INFO ) #NEWLINE#
return self . create ( request , * args , ** kwargs ) #NEWLINE#
foo . mymethod ( 1 , 2 ) #NEWLINE#
return df . loc [ df . loc [ : , ( columns ) ] . eq ( value ) . all ( axis = 1 ) ] #NEWLINE#
return re . findall ( '[a-zA-Z]' , s ) == re . findall ( '\\+([a-zA-Z])\\+' , s ) #NEWLINE#
return HttpResponseSeeOther ( '/other-url/' ) #NEWLINE#
data . groupby ( data . date . dt . year ) #NEWLINE#
zzz = str ( zzz , encoding = 'latin1' ) #NEWLINE#
dir ( ) #NEWLINE#
df . groupby ( [ times . hour , times . minute ] ) . value_col . sum ( ) #NEWLINE#
df = DataFrame ( np . random . randn ( 1000 , 2 ) ) #NEWLINE#
"""forward""" [ : : - 1 ] #NEWLINE#
sudo ( 'apt-get#SPACE#update' ) #NEWLINE#
plt . show ( ) #NEWLINE#
app . run ( ) #NEWLINE#
print ( 'Now#SPACE#calling#SPACE#foo#SPACE#without#SPACE#context' ) #NEWLINE#
[ dict ( items ) for items in product ( * flat ) ] #NEWLINE#
pl . figure ( 'Profits' ) #NEWLINE#
print ( sum ( 1 for _ in f ) ) #NEWLINE#
r = np . hypot ( x , y ) #NEWLINE#
return super ( MyClass , cls ) . __new__ ( cls , a , b ) #NEWLINE#
print ( cts . minute == 0 ) #NEWLINE#
reactor . run ( ) #NEWLINE#
mydict = { rows [ 0 ] : rows [ 1 ] for rows in reader } #NEWLINE#
pprint ( d , width = 40 ) #NEWLINE#
subprocess_cmd ( 'echo#SPACE#a;#SPACE#echo#SPACE#b' ) #NEWLINE#
pass #NEWLINE#
ax . legend ( ( rep , inter ) , ( 'Representatives' , 'Intersections' ) ) #NEWLINE#
files = { 'obvius_session_id' : '72c2b6f406cdabd578c5fd7598557c52' } #NEWLINE#
y = dict ( list ( x . items ( ) ) + [ ( 2 , 3 ) ] ) #NEWLINE#
def split_iter ( string ) : #NEWLINE# #INDENT# return ( x . group ( 0 ) for x in re . finditer ( "[A-Za-z']+" , string ) ) #NEWLINE#
binary_string = binascii . unhexlify ( hex_string ) #NEWLINE#
self . bbutton . grid ( row = 1 , column = 3 ) #NEWLINE#
dict ( a ) #NEWLINE#
d = d . replace ( tzinfo = tz ) #NEWLINE#
a . sum ( axis = 0 ) #NEWLINE#
super ( MyList , self ) . __init__ ( ) #NEWLINE#
proc . kill ( ) #NEWLINE#
print ( 'Usage:#SPACE#' + sys . argv [ 0 ] + '#SPACE#<filename>' ) #NEWLINE#
p = Process ( target = f , args = ( arr , ) ) #NEWLINE#
df2 = df . apply ( lambda x : [ pd . Timestamp ( ts ) for ts in x ] ) #NEWLINE#
dburl = os . environ [ 'DATABASE_URL' ] #NEWLINE#
req . add_header ( 'Content-Type' , 'text/xml;#SPACE#charset=utf-8' ) #NEWLINE#
d . text ( ( 20 , 20 ) , 'Hello' , fill = ( 255 , 0 , 0 ) ) #NEWLINE#
main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
return render_template ( 'users.html' ) #NEWLINE#
random . uniform ( 0 , numpy . nextafter ( 0 , 1 ) ) #NEWLINE#
ax . plot ( x , y , '--k' , lw = 2.0 ) #NEWLINE#
"""%c""" #NEWLINE#
"""Decimal:#SPACE#%d#SPACE##SPACE#Justified:#SPACE#%.6d""" #NEWLINE#
"""%10c%5hc%5C%5lc""" #NEWLINE#
"""The#SPACE#temp#SPACE#is#SPACE#%.*f""" #NEWLINE#
"""%ss%lii""" #NEWLINE#
"""%*.*s#SPACE#|#SPACE#%.3d#SPACE#|#SPACE#%lC#SPACE#|#SPACE#%s%%%02d""" #NEWLINE#
os . system ( "xrandr#SPACE##SPACE#|#SPACE#grep#SPACE#\\*#SPACE#|#SPACE#cut#SPACE#-d'#SPACE#'#SPACE#-f4" ) #NEWLINE#
return [ e for e in lelist if e in lestring ] #NEWLINE#
df [ 'group_class' ] . str . extract ( '(?P<group>group\\d+)(?P<class>class\\d+)' ) #NEWLINE#
re . sub ( 'est$' , 'er' , word1 ) #NEWLINE#
re . split ( '(,)' , '1,2,3' ) #NEWLINE#
result = [ item . rsplit ( '[' , 1 ) [ 0 ] for item in flatten ( lst ) ] #NEWLINE#
ax . grid ( True ) #NEWLINE#
plt . show ( ) #NEWLINE#
retcode = subprocess . call ( [ 'at' , 'x' , 'y' , 'z' ] ) #NEWLINE#
print ( 'Byte#SPACE#{0}#SPACE#as#SPACE#binary:#SPACE#{1:08b}' . format ( i , ord ( c ) ) ) #NEWLINE#
print ( iorf . fup ( 2 ) ) #NEWLINE#
im . save ( 'your_file.jpeg' ) #NEWLINE#
x . pop ( ) #NEWLINE#
print ( kwargs [ 'str' ] ) #NEWLINE#
random . shuffle ( idx ) #NEWLINE#
ax . plot ( [ i , i ] , [ j , j ] , [ k , h ] , color = 'g' ) #NEWLINE#
ax0 . yaxis . set_ticks ( np . arange ( 70000 , 80000 , 2500 ) ) #NEWLINE#
response = requests . post ( url , files = files ) #NEWLINE#
plt . show ( ) #NEWLINE#
url ( '^mymodel/(?P<name>\\d+)/$' , MyDetailView . as_view ( ) ) #NEWLINE#
print ( valid ( y , ( 'hello' , 'goodbye' ) , { 'c' : 'what?' } ) ) #NEWLINE#
source . close ( ) #NEWLINE#
window . connect ( 'destroy' , on_destroy ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
open ( 'outfile' , 'w' ) . write ( '' . join ( data ) ) #NEWLINE#
mpmath . besselk ( 0 , 1714 ) #NEWLINE#
plt . savefig ( 'confusionmatrix.png' ) #NEWLINE#
int ( 1 / 2 ) #NEWLINE#
ax . plot ( x , 3 * x ** 2 , color = 'g' , linestyle = '' , marker = 'o' ) #NEWLINE#
my_string = "hello#SPACE#python#SPACE#world#SPACE#,#SPACE#i'm#SPACE#a#SPACE#beginner#SPACE#" #NEWLINE# print ( my_string . split ( 'world' , 1 ) [ 1 ] ) #NEWLINE#
self . a , self . b = a , b #NEWLINE#
name = models . CharField ( max_length = 64 ) #NEWLINE#
bucket . delete_key ( 'versioned_object' ) #NEWLINE#
ord ( '®' ) << 8 | ord ( '®' ) #NEWLINE#
class UserProfile ( models . Model ) : #NEWLINE# #INDENT# user = models . ForeignKey ( settings . AUTH_USER_MODEL ) #NEWLINE#
Tk . attributes ( '-fullscreen' , True ) #NEWLINE#
del globals ( ) [ name ] #NEWLINE#
print ( str ( i ) + 'g#SPACE#ok' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
solve ( x ** 3 + 2 * x ** 2 + 4 * x + 8 , x ) #NEWLINE#
df . subtract ( df2 , fill_value = 0 ) . reindex_like ( df ) . astype ( int ) #NEWLINE#
fox . save_screenshot ( 'screenshot.png' ) #NEWLINE#
arrow . get ( s , 'YYYY/M/D#SPACE#HH:mm:ss' ) . replace ( tzinfo = '+08:00' ) #NEWLINE#
any ( c . islower ( ) for c in 'WORD' ) #NEWLINE#
[ x for x in lst if x % 2 == 0 ] #NEWLINE#
print ( z [ k . astype ( int ) ] ) #NEWLINE#
bigfloat . exp ( 5000 , bigfloat . precision ( 100 ) ) #NEWLINE#
con . commit ( ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
[ ( ) , ( 0 , ) , ( 1 , ) , ( 2 , ) , ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 2 ) , ( 0 , 1 , 2 ) ] #NEWLINE#
xarr , yarr = array [ ( 0 ) , : ] , array [ ( 1 ) , : ] #NEWLINE#
time . time ( ) - os . path . getmtime ( oldLoc ) > 3 * 30 * 24 * 60 * 60 #NEWLINE#
raise CloseSpider ( 'termination#SPACE#condition#SPACE#met' ) #NEWLINE#
ax . add_patch ( polygon ) #NEWLINE#
plt . imshow ( np . array ( img . tolist ( ) ) ) #NEWLINE#
with open ( file ) as f : #NEWLINE# #INDENT# words = f . read ( ) . split ( ) #NEWLINE#
d [ 'k' ] += 1 #NEWLINE#
pygame . display . set_caption ( 'Title' , get_image_file ( 'icon.png' ) ) #NEWLINE#
sys . exit ( start_ipython ( ) ) #NEWLINE#
time . sleep ( timeout ) #NEWLINE#
return df . groupby ( 'ID' ) . apply ( lambda group : group . iloc [ 1 : , 1 : ] ) #NEWLINE#
set . union ( * lis ) #NEWLINE#
__init__ . py #NEWLINE#
s . encode ( 'utf-8' ) #NEWLINE#
plt . plot ( [ 0 , 1 ] , [ 0 , 1 ] , '-r' , lw = 1 , label = 'Line' ) #NEWLINE#
sorted ( a , key = a . count , reverse = True ) #NEWLINE#
driver . add_cookie ( cookie ) #NEWLINE#
import_from ( 'abc.def.ghi.jkl.myfile' , 'mymethod' ) #NEWLINE#
r . resolve2 ( '12.12.12.12' ) #NEWLINE#
net [ 'hidden0' ] . outputbuffer [ net [ 'hidden0' ] . offset ] #NEWLINE#
ax . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
df . ix [ df [ 'A' ] < df [ 'B' ] , 'C' ] == - 1 #NEWLINE#
( s [ : - 1 ] if s . endswith ( ';' ) else s ) . split ( ';' ) #NEWLINE#
mydic [ i ] = o [ 'name' ] #NEWLINE#
{ { count } } #NEWLINE#
sys . exit ( ) #NEWLINE#
itertools . chain ( * itertools . zip_longest ( * iters ) ) #NEWLINE#
[ i for i , j in mylist ] #NEWLINE#
scipy . misc . imsave ( 'image.png' , img ) #NEWLINE#
main_list = [ [ ( 1 , 2 ) , ( 3 , 4 ) ] , [ ( 5 , 6 ) , ( 7 , 8 ) ] ] #NEWLINE# zip ( * main_list ) #NEWLINE#
strata = np . array ( strata ) #NEWLINE#
self . show ( ) #NEWLINE#
print ( getpath ( dictionary , 'image/svg+xml' ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
mylist . sort ( key = sort_func ) #NEWLINE#
client . close ( ) #NEWLINE#
return self . __dict__ [ key ] #NEWLINE#
print ( '#SPACE##SPACE##SPACE#%22s#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#%5s' % ( key , value ) ) #NEWLINE#
result_string = re . sub ( '([a-z]+)[?:!.,;]*' , '\\1' , subject_string ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
thread . start ( ) #NEWLINE#
requests . post ( url , params = params , json = data ) #NEWLINE#
df . T . groupby ( level = 0 ) . agg ( ',' . join ) #NEWLINE#
open ( 'myfile.txt' , 'w' ) . writelines ( lines ) #NEWLINE#
document . getElementById ( 'location' ) . value = pos #NEWLINE#
zip ( * list ( <STR0> . items ( ) ) ) #NEWLINE#
np . arange ( 3 ) [ : , ( None ) ] #NEWLINE#
d [ k ] . append ( v ) #NEWLINE#
os . chdir ( os . path . dirname ( __file__ ) ) #NEWLINE#
grid . cbar_axes [ 1 ] . colorbar ( im1 ) #NEWLINE#
main ( ) #NEWLINE#
numpy . where ( data > 3 ) #NEWLINE#
Index ( [ 1 , 1 , 2 , 1 , 3 , 2 , 4 ] ) . get_loc ( 2 ) #NEWLINE#
main ( ) #NEWLINE#
set ( sum ( sl ) for sl in L ) == set ( [ 3 ] ) #NEWLINE#
imp . find_module ( 'lxml' ) [ 1 ] #NEWLINE#
root . withdraw ( ) #NEWLINE#
plt . plot ( y ) #NEWLINE#
plt . plot ( x [ i ] , y [ i ] , c [ i ] , label = colors [ i ] + '#SPACE#' + str ( i ) ) #NEWLINE#
'%.5f' % 0.12345678 #NEWLINE#
raise ValueError ( 'too#SPACE#many#SPACE#values#SPACE#to#SPACE#unpack' ) #NEWLINE#
set ( [ 'foo' , 'bar' , 'baz' ] ) <= set ( dct ) #NEWLINE#
url_for ( 'admin.user' ) #NEWLINE#
np . split ( indices , np . where ( np . diff ( args ) ) [ 0 ] + 1 ) #NEWLINE#
print ( '%s' % str ( obj ) ) #NEWLINE#
tree . xpath ( xpathselector ) #NEWLINE#
Bar . objects . filter ( pk = foo . id ) . update ( a = bar . id ) #NEWLINE#
simplejson . loads ( _ ) #NEWLINE#
print ( '%3d' * len ( nums ) % tuple ( nums ) ) #NEWLINE#
timeit . timeit ( "print('true')#SPACE#if#SPACE#2+2#SPACE#==#SPACE#4#SPACE#else#SPACE#print('false')" ) #NEWLINE#
q . queue . clear ( ) #NEWLINE#
capcheck ( ':xpath' ) #NEWLINE#
plt . legend ( loc = 'upper#SPACE#right' ) #NEWLINE#
print ( str ( line . decode ( 'hex' ) , 'utf-16-be' ) . encode ( 'utf8' ) ) #NEWLINE#
msg = email . message_from_string ( msgtxt ) #NEWLINE#
print ( df . ix [ values ] , '\n' ) #NEWLINE#
{ { a . some_field } } #NEWLINE#
sorted ( l , key = custom_key_function ) #NEWLINE#
browser . get ( 'http://www.google.com' ) #NEWLINE#
data . iloc [ : , ( [ 0 , 3 ] ) ] #NEWLINE#
self . extbtn = tkinter . Button ( self . bframe , text = 'Exit' ) #NEWLINE#
gc . collect ( ) #NEWLINE#
f . write ( g ) #NEWLINE#
s2 = [ 'A' , 'B' , 'B11' , 'B2' , 'B21' , 'C' , 'C11' , 'C2' , 'D12' , 'D2' ] #NEWLINE#
[ tup [ 0 ] for tup in mylist ] #NEWLINE#
[ { 'id' : 1 , 'ts' : '1475890361' } , { 'id' : 2 , 'ts' : '1475833070' } ] #NEWLINE#
clean = [ x for x in lis if x != None ] #NEWLINE#
ylabel ( 'signal' ) #NEWLINE#
root . geometry ( '500x400' ) #NEWLINE#
df = pandas . read_csv ( filename , skiprows = skip ) #NEWLINE#
session2 . commit ( ) #NEWLINE#
w . configure ( state = 'disabled' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
l = nx . topological_sort ( g ) #NEWLINE#
m = re . match ( '\\d{2,}$' , s ) #NEWLINE#
start_time = time . time ( ) #NEWLINE# elapsed_time = time . time ( ) - start_time #NEWLINE#
np . insert ( a , 1 , np . array ( ( 1 , 1 ) ) , 0 ) #NEWLINE#
[ '#SPACE#' . join ( [ reps . get ( w , w ) for w in sentence . split ( ) ] ) for sentence in li ] #NEWLINE#
len ( zdumps ( z ) ) #NEWLINE#
sys . path . append ( './dir2/dir3' ) #NEWLINE#
"""﻿foo""" . decode ( 'utf-8-sig' ) #NEWLINE#
log ( self . __class__ . __name__ ) . error ( 'error#SPACE#from#SPACE#test#SPACE#class#SPACE#B' ) #NEWLINE#
c [ 1 : ] = c [ : - 1 ] + c [ 1 : ] #NEWLINE#
list ( map ( str . strip , re . split ( 'or' , x ) ) ) #NEWLINE#
return HttpResponseRedirect ( '/page/?title=%s' % urlquote ( query_string ) ) #NEWLINE#
msg = MIMEText ( 'messageÂ\xa0bodyâ\x80¦' , 'plain' , 'utf-8' ) #NEWLINE#
raise AttributeError ( "can't#SPACE#set#SPACE#attribute" ) #NEWLINE#
df . loc [ df [ col ] . value_counts ( ) [ df [ col ] ] . values < 10 , col ] = 'RARE_VALUE' #NEWLINE#
dir ( MyClass ) #NEWLINE#
list ( dict ( ( len ( i ) , i ) for i in l ) . values ( ) ) #NEWLINE#
calendar . day_name [ 1 ] #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
main ( ) #NEWLINE#
return HttpResponseRedirect ( user . redirect_to ( ) ) #NEWLINE#
output = subprocess . check_output ( [ <STR0> , 'pull' ] ) #NEWLINE#
self . __dict__ [ name ] += 1 #NEWLINE#
[ 0 , 1 , 3 , 7 ] #NEWLINE#
my_list = [ 'foo' , 'bar' , 'baz' , '>=' , '5.2' ] #NEWLINE#
def process_item ( self , item , spider ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( 'https://{ip}/result' . format ( ip = ip . rstrip ( ) ) ) #NEWLINE#
s . replace ( '0' , 'd' ) #NEWLINE#
subprocess . call ( [ 'ffmpeg' , '-i' , '/input/file.mp3' , '/output/file.wav' ] ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
assert is_subseq ( 'india' , 'indonesia' ) #NEWLINE#
df . dictionary . apply ( str2dict ) . apply ( pd . Series ) #NEWLINE#
plt . text ( 0.5 , 0.5 , 'my#SPACE#title' , ha = 'center' , va = 'center' ) #NEWLINE#
"""#NEWLINE#""" . join ( elem [ 0 ] for elem in queryresult ) #NEWLINE#
f . save ( ) #NEWLINE#
x2 = '' . join ( chr ( c ) for c in x ) #NEWLINE#
print ( to_float ( 'äº\x94' ) ) #NEWLINE#
print ( root . xpath ( "./*[local-name()='Buckets']" ) ) #NEWLINE#
ftp . login ( 'user' , 'password' ) #NEWLINE#
print ( 'رَجا' ) #NEWLINE#
return [ woman for woman in list ( graph . keys ( ) ) if woman not in list ( match . #NEWLINE# keys ( ) ) ] #NEWLINE#
stream . close ( ) #NEWLINE#
t = threading . Thread ( target = run ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
g = myfunct ( ) #NEWLINE#
text = str ( combobox1 . currentText ( ) ) #NEWLINE#
files = [ x for x in os . listdir ( DIR ) if x . endswith ( '.tga' ) ] #NEWLINE#
'\n' . join ( [ '' . join ( x ) for x in pic ] ) + '\n' #NEWLINE#
timeout . cancel ( ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#OR#SPACE#REPLACE#SPACE#INTO#SPACE#foo#SPACE#(bar,baz)#SPACE#VALUES#SPACE#(?,#SPACE#?)' , ( 1 , 3 ) ) #NEWLINE#
plt . gcf ( ) . autofmt_xdate ( ) #NEWLINE#
a [ [ 0 , 1 ] , [ 1 , 1 ] , [ 2 , 2 ] ] #NEWLINE#
a = [ [ ] ] * 2 #NEWLINE#
pass #NEWLINE#
d = OrderedDict ( [ ( 'a' , '1' ) , ( 'b' , '2' ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . excepthook ( type , value , traceback ) #NEWLINE#
prefix = '%s_%d_' % ( os . path . basename ( sys . argv [ 0 ] ) , os . getpid ( ) ) #NEWLINE#
global var #NEWLINE#
logging . getLogger ( 'one' ) . error ( 'one' ) #NEWLINE#
outfile . close ( ) #NEWLINE#
time . sleep ( 0.02 ) #NEWLINE#
w . start ( ) #NEWLINE#
cursor . fetchone ( ) #NEWLINE#
globals ( ) [ 'string%s' % x ] = 'Hello' #NEWLINE#
myfile . write ( template . format ( ** context ) ) #NEWLINE#
sec_since_epoch = ( date_obj . date ( ) - date ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
from dateutil . relativedelta import relativedelta #NEWLINE#
f1 . write ( 'foo' ) #NEWLINE#
self . foo . wait ( ) #NEWLINE#
a . get ( 'Jenny' ) #NEWLINE#
df . groupby ( level = 'element' ) . transform ( demean ) #NEWLINE#
arr = np . empty ( ( N , M ) ) #NEWLINE#
print ( list ( mydict . keys ( ) ) [ list ( mydict . values ( ) ) . index ( 16 ) ] ) #NEWLINE#
image_parent = label . find ( 'image' ) . getparent ( ) #NEWLINE#
foo ( a = 1 , b = 2 ) #NEWLINE#
return_equals ( a , b , d , c ) #NEWLINE#
items = [ item . time for item in objects ] #NEWLINE#
for i in itertools . product ( list ( range ( 0 , 100 ) ) , repeat = 3 ) : #NEWLINE# #INDENT# list . append ( run ( i [ 0 ] , i [ 1 ] , i [ 2 ] ) ) #NEWLINE#
MyClass . __dict__ [ '__dict__' ] . __objclass__ == MyClass #NEWLINE#
df [ 'date' ] . iloc [ - 1 ] #NEWLINE#
return { k : v for k , v in list ( d . items ( ) ) if k . startswith ( s ) } #NEWLINE#
parser . add_argument ( '-d' , '--dry-run' , action = 'store_true' ) #NEWLINE#
( ( df [ 'cond' ] != df [ 'cond' ] . shift ( ) ) | ( df [ 'cond' ] != True ) ) . cumsum ( ) #NEWLINE#
is_pangram ( 'abc' ) #NEWLINE#
heapq . nlargest ( 3 , list ( range ( len ( a ) ) ) , a . __getitem__ ) #NEWLINE#
words . add ( line . strip ( ) ) #NEWLINE#
insert_spaces ( 'Hello#SPACE#how#SPACE#are#SPACE#you#SPACE#today#SPACE#Joe' , list ( range ( 0 , 27 , 2 ) ) ) #NEWLINE#
print ( 'Not#SPACE#found' ) #NEWLINE#
ax . add_line ( Line2D ( [ - 50 , 0 , 50 ] , [ - 50 , 0 , 0 ] , linewidth = 80 ) ) #NEWLINE#
print ( i , repr ( binify ( i ) ) ) #NEWLINE#
sqlalchemy . extract ( 'year' , model . MyRecord . dfield ) == selected_year #NEWLINE#
screen . blit ( picture , rect ) #NEWLINE#
server . sendmail ( FROM , TO , message ) #NEWLINE#
entryFrame . grid ( row = 0 , column = 1 ) #NEWLINE#
{ k : adict [ k ] for k in ( 'key1' , 'key2' , 'key99' ) if k in adict } #NEWLINE#
return [ l [ : 1 ] , l [ 1 : ] ] #NEWLINE#
curses . endwin ( ) #NEWLINE#
output . close ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
range ( - 20 , 0 , - 1 ) #NEWLINE#
print ( check_list ( [ 1 , 3 , 2 , 3 , 4 , 0 , 8 , 3 , 7 , 3 , 1 , 1 , 0 ] , 3 , 4 ) ) #NEWLINE#
tree = etree . HTML ( result . read ( ) , etree . HTMLParser ( ) ) #NEWLINE#
eprint ( 'foo' , 'bar' , 'baz' , sep = '---' ) #NEWLINE#
window . show_all ( ) #NEWLINE#
print ( v . decode ( 'iso-8859-1' ) ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
plt . clf ( ) #NEWLINE#
X . argmin ( axis = 1 ) #NEWLINE#
self . lb1 . pack ( side = 'left' , fill = 'x' , expand = True ) #NEWLINE#
[ '11' , '12221\n' ] #NEWLINE#
nf . write ( str ( random . randint ( 0 , 1000 ) ) ) #NEWLINE#
"""Remove#SPACE#duplicates#SPACE#in#SPACE#a#SPACE#case#SPACE#insensitive,#SPACE#but#SPACE#case#SPACE#preserving#SPACE#manner""" #NEWLINE#
isinstance ( x , collections . Iterable ) #NEWLINE#
[ [ 0 ] , [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
ax . spines [ 'left' ] . set_color ( 'none' ) #NEWLINE#
reduce ( lambda d , key : d [ key ] , path , aDict ) . update ( aSecondDict ) #NEWLINE#
df . apply ( lambda col : col . dtype , reduce = False ) #NEWLINE#
ax . set_xlabel ( '$x$#SPACE#/mm' ) #NEWLINE#
plt . show ( ) #NEWLINE#
locale . currency ( 188518982.18 , grouping = True ) #NEWLINE#
im . save ( 'font.png' , 'PNG' ) #NEWLINE#
os . unlink ( self . dest ) #NEWLINE#
return '' . join ( c for c in s . lower ( ) if c in string . ascii_lowercase ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
int ( round ( 2606.89579999999 , 2 ) * 100 ) #NEWLINE#
x . append ( 1 ) #NEWLINE#
x . astype ( int ) #NEWLINE#
inspect . getmembers ( MyClass , lambda a : not inspect . isroutine ( a ) ) #NEWLINE#
return _function ( ( args , kwargs ) ) #NEWLINE#
df . groupby ( 'a' ) . count ( ) #NEWLINE#
pass #NEWLINE#
output . close ( ) #NEWLINE#
[ e for i , e in enumerate ( a ) if i % 30 < 10 ] #NEWLINE#
plt . imshow ( Z , interpolation = 'gaussian' ) #NEWLINE#
list ( x . keys ( ) ) . index ( 'd' ) #NEWLINE#
arr [ 0 ] . append ( 'aa2' ) #NEWLINE#
any ( [ False , False , True ] ) #NEWLINE#
ax . plot ( xs = x , ys = [ 0 ] * len ( x ) , zs = y , zdir = 'z' , label = 'ys=0,#SPACE#zdir=z' ) #NEWLINE#
lpr . stdin . write ( your_data_here ) #NEWLINE#
s = mydatetime . strftime ( '%m/%d/%Y#SPACE#%I:%M%p' ) . lstrip ( '0' ) . replace ( '#SPACE#0' , '#SPACE#' ) #NEWLINE#
q . put ( 'Bye' ) #NEWLINE#
assert analyse ( '(#SPACE#A#SPACE#and#SPACE#(#SPACE#B#SPACE#or#SPACE#C#SPACE#)#SPACE#)' ) == [ [ 'A' , 'B' ] , [ 'A' , 'C' ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( url ) ) #NEWLINE#
cv2 . imshow ( 'output' , drawing ) #NEWLINE#
print ( '</%s>' % name ) #NEWLINE#
"""[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$""" #NEWLINE#
print ( { key : a [ key ] for key in a if key not in keys } ) #NEWLINE#
invite_reason = models . CharField ( max_length = 64 ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
self . setWindowTitle ( 'Arx#SPACE#Submitter' ) #NEWLINE#
df [ 'ColA' ] [ 0 ] #NEWLINE#
"""123456""" [ 1 : : - 2 ] #NEWLINE#
ModelA . objects . filter ( Q ( instance_of = ModelB ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
profile . save ( ) #NEWLINE#
nums2 . search ( '-1.23E+45' ) . group ( 0 ) #NEWLINE#
print ( '' . join ( difflib . restore ( diff , 2 ) ) ) #NEWLINE#
map ( dict . fromkeys , l ) #NEWLINE#
call_with_dict ( some_func , my_dict ) #NEWLINE#
cursor . execute ( 'PRAGMA#SPACE#foreign_keys=ON;' ) #NEWLINE#
self . SetSize ( ( self . Size [ 0 ] , self . figurecanvas . Size [ 1 ] ) ) #NEWLINE#
return { c . name : getattr ( self , c . name ) for c in self . __table__ . columns } #NEWLINE#
out = np . vstack ( ( lats , lons , vals ) ) #NEWLINE#
ax . axis ( [ 0 , 10 , 0 , 10 ] ) #NEWLINE#
mymethod ( a = 'foo' , b = 'bar' , c = 'baz' ) #NEWLINE#
driver . get ( 'url' ) #NEWLINE#
result = process . stdout . readline ( ) #NEWLINE#
s [ 0 ] . astype ( int ) #NEWLINE#
return json . dumps ( recursive_asdict ( data ) ) #NEWLINE#
plt . title ( 'y#SPACE#vs#SPACE#x' ) #NEWLINE#
json_object [ 0 ] [ 'title' ] #NEWLINE#
javadoc_url_map = { '<namespace_here>' : ( '<base_url_here>' , 'javadoc' ) } #NEWLINE#
plt . savefig ( './test.png' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
return pd . DataFrame ( result , columns = [ 'hour' , 'value' ] ) #NEWLINE#
f ( ) #NEWLINE#
return tuple ( [ x [ 0 ] for x in G ] ) #NEWLINE#
T ( lambda : 'four' in d . values ( ) ) . repeat ( ) #NEWLINE#
button . pack ( ) #NEWLINE#
time_obj = datetime . datetime . strptime ( time_str [ : 19 ] , '%Y-%m-%dT%H:%M:%S' ) #NEWLINE#
print ( requests . post ( target_url , data = xml , headers = headers ) . text ) #NEWLINE#
hs . write ( name + '\n' ) #NEWLINE#
return ( a * 67108864.0 + b ) / 9007199254740992.0 #NEWLINE#
RichIPythonWidget . __init__ ( self , * args , ** kw ) #NEWLINE#
( ( a + a [ : 0 : - 1 ] ) * len ( a ) ) [ : : len ( a ) ] [ : len ( a ) ] #NEWLINE#
print ( document . text_content ( ) ) #NEWLINE#
c . setopt ( c . URL , 'http://www.demaziere.fr/eve/' ) #NEWLINE#
self . newargument = myarg #NEWLINE#
first_element = myList [ i [ 0 ] ] #NEWLINE#
title = models . CharField ( max_length = 60 ) #NEWLINE#
df . index [ np . in1d ( df [ 'Col4' ] , target_array ) ] #NEWLINE#
[ 1 , 2 , 3 ] [ 1 ] #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'your_project_name.settings' ) #NEWLINE#
shows = { ( 1 ) : 'Sesaeme#SPACE#Street' , ( 2 ) : 'Dora#SPACE#the#SPACE#Explorer' } #NEWLINE#
ax . plot ( [ 1 , 2 , 3 , 4 ] , [ 1 , 4 , 2 , 6 ] ) #NEWLINE#
f . flush ( ) #NEWLINE#
return [ [ m [ row ] [ col ] for row in range ( 0 , height ) ] for col in range ( 0 , width ) ] #NEWLINE#
series . dt . date . astype ( str ) . to_json ( ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
mask [ : : 4 ] = 0 #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
a . append ( 2 ) #NEWLINE#
x = { k : v for k , v in spec1 . items ( ) if k in spec2 and spec2 [ k ] == v } #NEWLINE#
print ( occs [ 'h' ] ) #NEWLINE#
[ entry for tag in tags for entry in entries if tag in entry ] #NEWLINE#
tuples = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
df . loc [ df . ID == 103 , 'LastName' ] = 'Jones' #NEWLINE#
p . Start ( ) #NEWLINE#
f = csv . writer ( open ( 'test.csv' , 'wb+' ) ) #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
screen . blit ( surf1 , ( 100 , 100 , 100 , 100 ) ) #NEWLINE#
print ( urlparse . parse_qs ( qs ) ) #NEWLINE#
shutil . rmtree ( os . path . join ( os . getcwd ( ) , 'slave1' , 'slave' ) ) #NEWLINE#
combo . pack ( ) #NEWLINE#
path = path . to . module . __file__ #NEWLINE#
a = numpy . array ( [ Register ( ) for _ in range ( 4 ) ] ) #NEWLINE#
driver . save_screenshot ( 'screen.png' ) #NEWLINE#
sorted ( list ( mydict . items ( ) ) , key = itemgetter ( 1 ) ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
get_ipython ( ) . shell . run_cell ( open ( 'path/to/commands' ) . read ( ) ) #NEWLINE#
super ( SummingThread , self ) . __init__ ( ) #NEWLINE#
urls = [ { 'url' : key , 'nbr' : value } for key , value in list ( urls_d . items ( ) ) ] #NEWLINE#
[ 0 ] [ 1 ] [ 0 ] #NEWLINE#
timeit ( lambda : lensorting ( [ 1 , 2 , 3 ] , [ 3 , 2 , 1 , 0 ] ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
plt . title ( 'Using#SPACE#masked#SPACE#arrays' ) #NEWLINE#
bar = dict ( foo ) #NEWLINE#
print ( parser . parse_args ( '--head' . split ( ) ) ) #NEWLINE#
logging . exception ( 'Deliberate#SPACE#divide#SPACE#by#SPACE#zero#SPACE#traceback' ) #NEWLINE#
print ( meta [ 'Video#SPACE#stream#SPACE##1' ] [ 'Image#SPACE#width' ] ) #NEWLINE#
node . split ( '/' ) #NEWLINE#
return reverse ( text [ 1 : ] ) + text [ 0 ] #NEWLINE#
DELTAFETCH_ENABLED = True #NEWLINE#
[ ( 1 , 2 , 3 , 4 ) ] #NEWLINE#
arduino = serial . Serial ( '/dev/ttyACM0' , 9600 , timeout = 0.0001 ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
ws . cell ( row = 2 , column = 2 ) . value = 2 #NEWLINE#
df . rename ( columns = lambda x : int ( x ) if type ( x ) == float else x ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
word_list = [ punctuation . sub ( '' , word ) for word in word_list ] #NEWLINE#
Mailbox = poplib . POP3_SSL ( 'pop.googlemail.com' , '995' ) #NEWLINE#
h5File . create_dataset ( 'xxx' , ( len ( asciiList ) , 1 ) , 'S10' , asciiList ) #NEWLINE#
self . canvas . mpl_connect ( 'button_press_event' , self . on_press ) #NEWLINE#
timediff = datetime . datetime . now ( ) - self . pub_date #NEWLINE#
view . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
rgb_uint8 = ( np . dstack ( ( r , g , b ) ) * 255.999 ) . astype ( np . uint8 ) #NEWLINE#
return hasattr ( iterable , '__iter__' ) and not hasattr ( iterable , '__len__' ) #NEWLINE#
link . click ( ) #NEWLINE#
s . rsplit ( '.' , 2 ) [ 0 ] #NEWLINE#
entry . pack ( ) #NEWLINE#
np . allclose ( C0 , C1 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . plot ( x , density ( x ) ) #NEWLINE#
f . write ( bin_array ) #NEWLINE#
ax . yaxis . set_major_formatter ( mpl . ticker . ScalarFormatter ( ) ) #NEWLINE#
plt . hist ( data , bins = bins , alpha = 0.5 ) #NEWLINE#
ax . get_xaxis ( ) . set_minor_locator ( mpl . ticker . AutoMinorLocator ( ) ) #NEWLINE#
urlfetch . set_default_fetch_deadline ( 60 ) #NEWLINE#
ax2 . get_position ( ) #NEWLINE#
any ( [ ( i in fruit_dict2 ) for i in fruits ] ) #NEWLINE#
parser . add_argument ( '-f' , '--filename' , help = 'Any#SPACE#text#SPACE#file#SPACE#will#SPACE#do.' ) #NEWLINE#
os . chdir ( path_dir ) #NEWLINE#
derefrenced_spams = prefetch_refprops ( Spams , models . Spam . eggs ) #NEWLINE#
run ( 'pip#SPACE#install#SPACE#-r#SPACE#requirements.txt' ) #NEWLINE#
ax . set_xlim ( 0 , 10 ) #NEWLINE#
raise Exception ( e . message + 'the#SPACE#violation#SPACE#is#SPACE#because#SPACE#of#SPACE#' + str ( i ) ) #NEWLINE#
dt = datetime . fromtimestamp ( mktime ( struct ) ) #NEWLINE#
sentence . count ( 'a' ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = sps . csr_matrix ( ( a . data , a . indices , a . indptr ) , shape = ( 10000 , 10020 ) ) #NEWLINE#
return str ( self . left ) + '#SPACE#' + self . op + '#SPACE#' + str ( self . right ) #NEWLINE#
mocked_bar . assert_called_with ( 'spam' , 'ham' , 'eggs' ) #NEWLINE#
url ( '^admin/' , include ( admin . site . urls ) ) , #NEWLINE#
tk . Tk . __init__ ( self ) #NEWLINE#
return set ( itertools . combinations ( S , m ) ) #NEWLINE#
label . master . geometry ( '+250+250' ) #NEWLINE#
ax . xaxis . set_major_formatter ( DateFormatter ( '%H:%M:%S' ) ) #NEWLINE#
self . grid_columnconfigure ( 1 , weight = 1 ) #NEWLINE#
xs . intersection ( y ) #NEWLINE#
my_file . seek ( 0 , 0 ) #NEWLINE#
time . sleep ( remain ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/plain' #NEWLINE#
print ( next ( ( i for i , r in enumerate ( reader ) if float ( r [ 1 ] ) < 5 ) , 'Not#SPACE#found' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . xaxis . set_major_formatter ( FormatStrFormatter ( '%i' ) ) #NEWLINE#
next ( islice ( iterator , n , n ) , None ) #NEWLINE#
log ( array ( [ 6.8820748596850905 , 1.8553346917584836 ] ) ) #NEWLINE#
"""\\n""" #NEWLINE#
value = cache . get ( key ) or cache . setdefault ( cache , func ( key ) ) #NEWLINE#
return { k : mylist . count ( k ) for k in set ( mylist ) } #NEWLINE#
print ( len ( driver . get_log ( 'browser' ) ) ) #NEWLINE#
data = pkgutil . get_data ( 'hermes' , 'templates/python.tpl' ) #NEWLINE#
obj . foo42 ( ) #NEWLINE#
proc . wait ( ) #NEWLINE#
a , b , c = [ ( lambda n = n : n * n ) for n in l ] #NEWLINE#
pycode . init ( 'address' ) #NEWLINE#
print ( re . findall ( '\\d+' , str1 ) ) #NEWLINE#
min_x , max_x , min_y , max_y = temp [ 0 ] [ 0 ] , temp [ 0 ] [ - 1 ] , temp [ 1 ] [ 0 ] , temp [ 1 ] [ - 1 ] #NEWLINE#
x . __add__ ( x ) #NEWLINE#
sum ( 1 for m in re . finditer ( '[GATC]+' , joined ) ) #NEWLINE#
signal . signal ( signal . SIGALRM , handler ) #NEWLINE#
print ( etree . tostring ( root , encoding = 'iso-8859-1' ) ) #NEWLINE#
print ( '--#SPACE#{}#SPACE#--' . format ( 'Pride#SPACE#and#SPACE#Prejudcie#SPACE#-#SPACE#Chapter#SPACE#3#SPACE#' ) ) #NEWLINE#
ax2 . plot ( [ ( 7 , 2 ) , ( 5 , 3 ) ] , [ ( 1 , 6 ) , ( 9 , 5 ) ] ) #NEWLINE#
run ( 'bash#SPACE#/home/ubuntu/sample.sh' ) #NEWLINE#
return np . frombuffer ( ftdi . read ( RXcount ) , dtype = np . uint8 ) #NEWLINE#
numbers = [ int ( s [ i : i + 3 ] , 2 ) for i in range ( 0 , len ( s ) , 3 ) ] #NEWLINE#
re . sub ( '([A-Z]){2}' , callback , s ) #NEWLINE#
self . ax = self . fig . add_subplot ( 111 ) #NEWLINE#
ax [ 0 ] . set_title ( 'mpl' ) #NEWLINE#
plt . plot ( [ x ] , [ y ] , marker = ( n , 2 ) , color = 'k' , markersize = 18 ) #NEWLINE#
plt . close ( ) #NEWLINE#
key_1 , key_2 = dictget ( d , 'key_1' , 'key_2' ) #NEWLINE#
d . get ( 'get' , 'Not#SPACE#there,#SPACE#but#SPACE#working' ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE#
[ ( 100 * abs ( aItem - bItem ) / aItem < 3 ) for aItem , bItem in zip ( a , b ) ] #NEWLINE#
setattr ( someobject , key , value ) #NEWLINE#
db = MySQLdb . connect ( user = 'root' , passwd = '' , db = 'my_db' , unix_socket = #NEWLINE# '/opt/lampp/var/mysql/mysql.sock' ) #NEWLINE#
plt . axvline ( x = xc ) #NEWLINE#
loss = tf . cast ( loss , tf . float32 ) #NEWLINE#
return zip ( * args ) #NEWLINE#
return frame . values [ 0 ] [ 0 ] #NEWLINE#
xl = pd . ExcelFile ( 'dummydata.xlsx' ) #NEWLINE#
itertools . cycle ( list ( range ( 2 , 10 ) ) ) #NEWLINE#
conn . close ( ) #NEWLINE#
os . chdir ( prevdir ) #NEWLINE#
return super ( UserViewSet , self ) . dispatch ( request , * args , ** kwargs ) #NEWLINE#
blocks = re . findall ( '(?m)^##SPACE#REG#SPACE#(.*)\\n((?:.*\\n)*?)##SPACE#reg#SPACE#' , fh . read ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ 'name' , 'height' , 'weight' ] #NEWLINE#
print ( { v [ 0 ] : v [ 1 : ] for v in list ( d . values ( ) ) } ) #NEWLINE#
plt . show ( ) #NEWLINE#
indices = np . where ( a == a . max ( ) ) #NEWLINE#
d = np . diag ( a [ : , ( 0 ) ] ) #NEWLINE#
5 * ( 4 * f ( f , 3 ) ) #NEWLINE#
plt . setp ( ax . get_xticklabels ( ) , rotation = 30 , horizontalalignment = 'right' ) #NEWLINE#
dict ( re . findall ( '(\\S+)=(".*?"|\\S+)' , s ) ) #NEWLINE#
matplotlib . use ( 'agg' ) #NEWLINE#
table . reorder_levels ( [ 1 , 2 , 0 ] , axis = 1 ) . sort_index ( axis = 1 ) #NEWLINE#
my_unicode = 'This#SPACE#is#SPACE#an#SPACE#Unicode#SPACE#string' #NEWLINE#
parser . add_argument ( '-x' , '--expression' ) #NEWLINE#
parser . add_argument ( '-n' , '--name' ) #NEWLINE#
parser . add_argument ( '-f' , '--file' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
s . reset_index ( ) . groupby ( s . index . names ) . first ( ) #NEWLINE#
ax . add_collection ( coll ) #NEWLINE#
d = { 'a' : None } #NEWLINE#
return self . __class__ . __name__ #NEWLINE#
[ ( v + 1 if i % 2 != 0 else v ) for i , v in enumerate ( list1 ) ] #NEWLINE#
msg = 'time' #NEWLINE#
k , v = list ( d . items ( ) ) [ 0 ] #NEWLINE#
new_arr = append_fields ( arr , 'vel' , data , usemask = False ) #NEWLINE#
{ 'End#SPACE#Date' : 'i' , 'Start#SPACE#Date' : 'h' , 'Event' : 'g' } #NEWLINE#
"""{}#SPACE#minutes,#SPACE#{}#SPACE#hours""" . format ( minutes , hours ) #NEWLINE#
Decimal ( 33.505 ) #NEWLINE#
p = multiprocessing . Pool ( ) #NEWLINE#
uuid . UUID ( int = rd . getrandbits ( 128 ) ) #NEWLINE#
del the_dict [ key ] #NEWLINE#
parser . add_argument ( 'input' , nargs = '+' , action = MyAction ) #NEWLINE#
df . groupby ( by = [ df . index . year , df . index . month ] ) . sum ( ) . transpose ( ) #NEWLINE#
ax . plot ( x , y , marker = 's' , linestyle = 'none' , label = 'small' ) #NEWLINE#
__init__ . py #NEWLINE#
[ x for x in lst if [ ( x [ A ] , x [ C ] ) not in seen , seen . add ( ( x [ A ] , x [ C ] ) ) ] [ 0 ] ] #NEWLINE#
A [ ( 2 ) , ( 2 ) , : , : ] #NEWLINE#
df [ 'Text_Search' ] = df [ 'Employer' ] . str . lower ( ) . str . split ( ) #NEWLINE#
return http . HttpResponseRedirect ( '' ) #NEWLINE#
cvuint8 . dtype #NEWLINE#
self . __dict__ . update ( s ) #NEWLINE#
admin . site . register ( TwitterUser , TwitterUserAdmin ) #NEWLINE#
pygame . image . save ( window , 'screenshot.jpeg' ) #NEWLINE#
df [ 'que' ] = df . apply ( que , axis = 1 ) #NEWLINE#
new_list #NEWLINE#
do_something_with_frame ( frame ) #NEWLINE#
return super ( MyViewSet , self ) . get_serializer ( * args , ** kwargs ) #NEWLINE#
[ 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 ] , #NEWLINE#
pd . set_option ( 'display.width' , 1000 ) #NEWLINE#
my_type = field . get_internal_type ( ) #NEWLINE#
context . update ( { 'contact' : instance , 'form' : form } ) #NEWLINE#
data = json . loads ( contactFile . read ( ) ) #NEWLINE#
sslsock . context . set_ciphers ( 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2' ) #NEWLINE#
ciao . ciao ( ) #NEWLINE#
server . starttls ( ) #NEWLINE#
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , '..' ) ) #NEWLINE#
"""""" . join ( [ ( c if x [ i ] == c else s ) for i , s in enumerate ( y ) ] ) #NEWLINE#
pprint ( sorted ( flatten ( THIS ) ) ) #NEWLINE#
lst = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
lists = [ [ 'hello' ] , [ 'world' , 'foo' , 'bar' ] ] #NEWLINE# combined = [ item for sublist in lists for item in sublist ] #NEWLINE#
r = size ** ( 1 / ( n - 1 ) ) #NEWLINE#
ast . literal_eval ( 'False' ) #NEWLINE#
s . split ( 'mango' , 1 ) [ - 1 ] #NEWLINE#
signal . alarm ( 0 ) #NEWLINE#
numpy . apply_along_axis ( lambda row : numpy . linalg . norm ( row , ord = 1 ) , 1 , a ) #NEWLINE#
self . treestore . append ( piter , [ 'consistent' ] ) #NEWLINE#
print ( '' . join ( [ c for i , c in enumerate ( s ) if i == 0 or s [ i - 1 ] != c ] ) ) #NEWLINE#
numpy . where ( numpy . all ( a_view == may_b , axis = 1 ) ) [ 0 ] #NEWLINE#
print ( m . group ( 'tag' ) ) #NEWLINE#
matplotlib . use ( 'Qt4Agg' ) #NEWLINE#
[ x for x in a if x not in b ] #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
pattern = re . compile ( '(.+?)\\1+' ) #NEWLINE#
next ( x for x in lst if matchCondition ( x ) ) #NEWLINE#
return queryset . filter ( id__in = articles ) #NEWLINE#
"""(?<!\\\\)%.*""" #NEWLINE#
modernthingy = datetime . datetime . fromtimestamp ( zopethingy . timeTime ( ) ) #NEWLINE#
bool ( re . search ( '((\\w)\\2){2}' , 'arrange' ) ) #NEWLINE#
sys . modules [ 'codecs' ] . __file__ #NEWLINE#
plt . ylabel ( 'Amplitude' ) #NEWLINE#
session . query ( Page . url ) . filter ( tuple_ ( Page . url_crc , Page . url ) . in_ ( keys ) ) #NEWLINE#
listSum ( [ 1 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
f . write ( str ( x ) ) #NEWLINE#
solve ( [ 5 , 10 ] , [ 1 , 4 ] ) #NEWLINE#
main_sizer = wx . BoxSizer ( wx . VERTICAL ) #NEWLINE#
[ j for i in powerset ( s ) for j in permutations ( i ) ] #NEWLINE#
list ( chain ( * a ) ) #NEWLINE#
return [ int ( x ) for x in arg . split ( ',' ) ] #NEWLINE#
pd . DataFrame ( x . T ) . T . drop_duplicates ( keep = False ) . as_matrix ( ) #NEWLINE#
lines = lines [ : - 1 ] #NEWLINE#
ax . plot ( x , 1 * x ** 2 , color = 'r' , linestyle = '' , marker = 'o' ) #NEWLINE#
a = '{}{}' . format ( b , a ) #NEWLINE#
connection . connection . create_function ( 'greatest' , 2 , max ) #NEWLINE#
transaction . rollback ( ) #NEWLINE#
lst . sort ( key = lambda c : POS [ c ] ) #NEWLINE#
logger . debug ( 'help!' ) #NEWLINE#
app = Flask ( __name__ , static_url_path = '' , static_folder = 'tmp' ) #NEWLINE#
fin = cv2 . warpPerspective ( img , h , ( back . shape [ 1 ] , back . shape [ 0 ] ) ) #NEWLINE#
ax . xaxis . set_major_locator ( locator ) #NEWLINE#
C = np . dot ( A , B ) #NEWLINE#
re . sub ( '<.*?>' , '' , string ) #NEWLINE#
return ip_list #NEWLINE#
time_in_range ( start , end , datetime . time ( 12 , 30 , 0 ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( '' . join ( d ) ) #NEWLINE#
ax . w_xaxis . set_major_locator ( ticker . FixedLocator ( some_dates ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df = pd . DataFrame ( { 'A' : list ( range ( 1000 ) ) , 'B' : list ( range ( 1000 ) ) } ) #NEWLINE#
[ sum ( x ) for x in zip ( * lis ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
"""^(?P<parts>(?:[\\w-]+/)*[\\w-]+)/$""" #NEWLINE#
bincount ( dot ( a , array ( [ 4 , 2 , 1 ] ) ) ) #NEWLINE#
result = json . load ( urllib . request . urlopen ( url ) ) #NEWLINE#
os . chdir ( '/tmp/' ) #NEWLINE#
print ( k , ':' , dict1 [ k ] , '->' , dict2 [ k ] ) #NEWLINE#
namespace_manager . set_namespace ( os . environ [ 'CURRENT_VERSION_ID' ] ) #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
- r72 - g595x842 #NEWLINE#
s1 . translate ( None , string . punctuation ) #NEWLINE#
plt . figure ( ) #NEWLINE#
inverted_image . save ( 'new_name.png' ) #NEWLINE#
indexes = [ i for i , val in enumerate ( list ) if val == '\n' ] #NEWLINE#
return render_template ( 'index.html' , data = json . dumps ( data ) ) #NEWLINE#
pd . options . display . max_colwidth #NEWLINE#
pattern = re . compile ( '.+?\\((.+?),#SPACE#(.+?)\\)' ) #NEWLINE#
ax . set_rmax ( 1 ) #NEWLINE#
[ 1 ] [ 1 ] [ 0 ] #NEWLINE#
np . random . seed ( 5 ) #NEWLINE#
ax . grid ( 'on' ) #NEWLINE#
url ( '^accounts/login/$' , 'userbase.views.force_pwd_login' ) , #NEWLINE#
result = { k : ( v / len ( list_of_dicts ) ) for k , v in list ( summed . items ( ) ) } #NEWLINE#
next ( iter ( q ) ) #NEWLINE#
libxml2 - devel #NEWLINE#
run ( 'mv#SPACE#maintenance-mode-off#SPACE#maintenance-mode-on' ) #NEWLINE#
file_2 . write ( file_1 . read ( ) ) #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
origin . pivot_table ( values = 'value' , index = 'label' , columns = 'type' ) #NEWLINE#
return { 'i' : i , 'j' : j , 'k' : k } #NEWLINE#
temp . write ( 'This#SPACE#has#SPACE#♭' ) #NEWLINE#
[ x for y in z if sum ( y ) > 10 for x in y if x < 10 ] #NEWLINE#
subprocess . Popen ( [ sys . executable , 'helper.py' ] ) #NEWLINE#
foo . my_function ( ) #NEWLINE#
print ( test . __class__ . __dict__ [ 'a' ] ) #NEWLINE#
result = re . split ( 'a+' , string ) #NEWLINE#
plt . plot ( x , y , label = 'test' ) #NEWLINE#
max ( 'foobar' , 'angstalot' , key = len ) #NEWLINE#
return 'Monthly,#SPACE#%s#SPACE#of#SPACE#the#SPACE#month' % self . data [ 1 : ] #NEWLINE#
locale . setlocale ( locale . LC_ALL , saved ) #NEWLINE#
tuple ( itertools . chain . from_iterable ( t ) ) #NEWLINE#
[ hex ( i ) for i in data ] #NEWLINE#
tag . name = 'new_name' #NEWLINE#
DATABASES [ 'default' ] [ 'NAME' ] = 'databasename.db3' #NEWLINE#
ax . plot_surface ( x , y , z , rstride = 4 , cstride = 4 , facecolors = bm ) #NEWLINE#
plt . show ( ) #NEWLINE#
modules [ module ] = sys . modules [ module ] #NEWLINE#
driver . get ( 'http://facebook.com' ) #NEWLINE#
driver . get ( 'https://linkedin.com' ) #NEWLINE#
print ( df . apply ( lambda x : x - a . ix [ x . index , 'b' ] , axis = 1 ) ) #NEWLINE#
file . write ( ',{}]' . format ( json . dumps ( dictionary ) ) ) #NEWLINE#
sys . getsizeof ( string_drawer ) #NEWLINE#
doc = yaml . load ( f ) #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
print ( files . ljust ( 20 ) + 'Passed' . ljust ( 5 ) + '64-bit' ) #NEWLINE#
app . config [ 'SERVER_NAME' ] = 'example.com:5000' #NEWLINE#
df = df [ ( df . one > 0 ) | ( df . two > 0 ) | ( df . three > 0 ) & ( df . four < 1 ) ] #NEWLINE#
logging . getLevelName ( 'DEBUGGISH' ) #NEWLINE#
name = self . request . get ( 'name' ) . decode ( 'utf8' ) #NEWLINE#
max ( im . getcolors ( im . size [ 0 ] * im . size [ 1 ] ) ) #NEWLINE#
o . decode ( 'latin-1' ) . encode ( 'utf-8' ) #NEWLINE#
[ { 'play' : 6.0 , 'uid' : 'ghi' , 'id' : 3 } , { 'play' : 7.0 , 'uid' : 'jkl' , 'id' : 4 } ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
current_app . logger . info ( 'I#SPACE#have#SPACE#the#SPACE#application#SPACE#context' ) #NEWLINE#
pd . Series ( a , a . _fields ) #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#table#SPACE#VALUES#SPACE#' + args_str ) #NEWLINE#
l = [ max ( g , key = lambda x : x [ 1 ] ) [ 0 ] for _ , g in groups ] #NEWLINE#
urlpatterns = patterns ( '' , url ( '^' , views . home , name = 'home' ) ) #NEWLINE#
return True #NEWLINE#
raise ValueError ( 'No#SPACE#such#SPACE#type:#SPACE#%r' % name ) #NEWLINE#
__init__ . py #NEWLINE#
chain . delay ( ) #NEWLINE#
s . write ( 'bar' ) #NEWLINE#
x . reshape ( ( x . shape [ 0 ] , - 1 ) ) . mean ( axis = 1 ) #NEWLINE#
regex = ')' #NEWLINE#
browser . find_element_by_class_name ( 'welcomeLoginButton' ) . click ( ) #NEWLINE#
list ( dd . values ( ) ) #NEWLINE#
print ( 'not#SPACE#connected' ) #NEWLINE#
ax . plot ( x ) #NEWLINE#
logging . basicConfig ( filename = settings . log_file , level = logging . DEBUG ) #NEWLINE#
browser . get ( 'http://www.example.com' ) #NEWLINE#
app = application ( urls , globals ( ) ) #NEWLINE#
del x [ : N ] #NEWLINE#
fh . seek ( 0 ) #NEWLINE#
with open ( 'names.txt' , 'r' ) as f : #NEWLINE# #INDENT# myNames = f . readlines ( ) #NEWLINE#
etree . fromstring ( goodxml ) #NEWLINE#
newdict = { x : [ ] for x in range ( 10 ) } #NEWLINE#
gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
ax . set_ylim ( 0 , 30 ) #NEWLINE#
pd . DataFrame ( arr , columns = ( 'lat' , 'long' , 'val' ) ) #NEWLINE#
super ( ) . run ( result ) #NEWLINE#
str ( 'a' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
xl . Quit ( ) #NEWLINE#
print ( 'Not#SPACE#found.' ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
items = hxs . select ( '//table[@class="tablehd"]/td' ) #NEWLINE#
a . func ( b = b , c = c ) #NEWLINE#
window . show ( ) #NEWLINE#
base64 . b64encode ( '\x80ÿ' ) #NEWLINE#
return None if i == - 1 else s [ : i ] #NEWLINE#
df [ 'time' ] = df [ 'time' ] . map ( lambda x : x [ 8 : - 8 ] ) #NEWLINE#
logger . warning ( 'etc.etc.' ) #NEWLINE#
json . dumps ( [ 1 , 2 , 'foo' , 'bar' ] ) #NEWLINE#
print ( Outputstring ) #NEWLINE#
set ( [ 'a' , 'c' , 'b' ] ) #NEWLINE# set ( [ 'a' , 'b' , 'c' ] ) #NEWLINE#
walls = [ True , True , True , False ] #NEWLINE# hex ( int ( '' . join ( [ str ( int ( b ) ) for b in walls ] ) , 2 ) ) #NEWLINE#
worksheet . update_cell ( 2 , 1 , '42' ) #NEWLINE#
self . y += STEP #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
clf = joblib . load ( 'filename.pk1' ) #NEWLINE#
print ( 'Connected' ) #NEWLINE#
df . groupby ( [ 'A' , 'C' ] ) . filter ( lambda df : df . shape [ 0 ] == 1 ) #NEWLINE#
self . bind ( '<KeyRelease>' , self . handle_keyrelease ) #NEWLINE#
{ i : [ ] for i in x } #NEWLINE#
os . chdir ( 'c:/mydir' ) #NEWLINE#
diag = [ row [ - i - 1 ] for i , row in enumerate ( mat ) ] #NEWLINE#
os . makedirs ( savedir ) #NEWLINE#
request . session [ 'last_activity' ] = now #NEWLINE#
myfun ( 'testing#SPACE#again' ) #NEWLINE#
maxLPFt = max ( lpfData , key = operator . itemgetter ( 1 ) ) #NEWLINE#
data = np . random . rand ( 10 , 15 , 5 ) #NEWLINE#
type ( f ) . __str__ is not object . __str__ #NEWLINE#
dict ( ( name , getattr ( f , name ) ) for name in dir ( f ) if not name . startswith ( '__' ) ) #NEWLINE#
( - avgDists ) . argsort ( ) [ : n ] #NEWLINE#
super ( Cancellation , self ) . save ( ** kw ) #NEWLINE#
datetime . <STR0> ( ) #NEWLINE#
os . path . getsize ( '<path#SPACE#to#SPACE#file#SPACE#of#SPACE#interest>/..namedfork/rsrc' ) #NEWLINE#
sys . modules [ 'os' ] #NEWLINE#
sys . modules [ 'django' ] #NEWLINE#
lambda x , i = i : x % i == 0 #NEWLINE#
~ pd . isnull ( df [ list_of_cols ] ) . all ( axis = 1 ) #NEWLINE#
text . collocations ( num = 20 ) #NEWLINE#
plt . show ( ) #NEWLINE#
s += timedelta ( minutes = minutes , seconds = seconds * 100 ) #NEWLINE#
L . append ( [ ] ) #NEWLINE#
"""\\d{4}[-/]\\d{2}[-/]\\d{2}""" #NEWLINE#
setattr ( self , varargs , remaining_args ) #NEWLINE#
tqdm_notebook ( ) . pandas ( * args , ** kwargs ) #NEWLINE#
np . array ( [ [ int ( i ) for i in line . split ( ) ] for line in data ] ) #NEWLINE#
ax . clear ( ) #NEWLINE#
basemodule . dontoverride ( ) #NEWLINE#
print ( 'Found#SPACE#string' ) #NEWLINE#
results = pool . map ( slowly_square , list ( range ( 40 ) ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
[ zip ( x , main2 ) for x in itertools . combinations ( main1 , len ( main2 ) ) ] #NEWLINE#
my_failing_task ( ) #NEWLINE#
lambda x : group ( 0 ) . replace ( ',' , '' ) #NEWLINE#
unixtime = time . mktime ( d . timetuple ( ) ) #NEWLINE#
ax1 . imshow ( source , cmap = plt . cm . gray ) #NEWLINE#
[ _f for _f in re . compile ( '(\\w+)' ) . split ( 'hello,#SPACE#foo' ) if _f ] #NEWLINE#
return key in self . __dict__ #NEWLINE#
f . write ( '' . join ( lines ) ) #NEWLINE#
re . sub ( '[^a-z]+' , '' , s ) #NEWLINE#
pool . close ( ) #NEWLINE#
{ 'test' : 33 , 'this' : 99 , 'something#SPACE#bigger' : [ 1 , 2 , 3 , { 'a' : 44 } ] } #NEWLINE#
self . send_header ( 'Content-Type' , 'application/xml' ) #NEWLINE#
complete_path = os . path . join ( root_path , sanitised_filename ) #NEWLINE#
type ( plain_string ) , type ( unicode_string ) #NEWLINE#
self . rect . set_xy ( ( self . x0 , self . y0 ) ) #NEWLINE#
[ ( x [ 0 ] , len ( x [ 1 ] ) , x [ 1 ] [ 0 ] [ 0 ] ) for x in l ] #NEWLINE#

data [ 'sex' ] . replace ( 0 , 'Female' , inplace = True ) #NEWLINE#
return regex . sub ( '' , s ) #NEWLINE#
AB = np . einsum ( 'ijm,imk->ijk' , A , B ) #NEWLINE#
print ( is_json ( "{'age':100#SPACE#}" ) ) #NEWLINE#
a [ ( 0 ) , ( None ) , : ] #NEWLINE#
print ( is_json ( '{asdf}' ) ) #NEWLINE#
print ( is_json ( '{#SPACE#"age":100}' ) ) #NEWLINE#
browser . close ( ) #NEWLINE#
m . dot ( m . T ) #NEWLINE#
[ [ ( j if j is not None else findMax ( k ) ) for k , j in enumerate ( i ) ] for i in l ] #NEWLINE#
[ 0 ] [ 0 ] [ 1 ] #NEWLINE#
df #NEWLINE#
Decimal ( math . factorial ( 171 ) ) #NEWLINE#
print ( osgeo . gdal . __version__ ) #NEWLINE#
Base . metadata . create_all ( ) #NEWLINE#
greetings = request . POST . getlist ( 'hi' ) #NEWLINE#
fliplr ( matrix ) #NEWLINE#
regex . match ( 'foo-12345' ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
'gist_yarg' , 'BuGn' , 'Paired_r' , 'hsv_r' , 'bwr' , 'YlOrRd' , 'Greens' #NEWLINE#
'gist_gray' , 'flag' , 'seismic_r' , 'RdBu_r' , 'BrBG' , 'Reds' , 'BuGn_r' #NEWLINE#
'summer_r' , 'GnBu_r' , 'BrBG_r' , 'Reds_r' , 'RdGy' , 'PuRd' , 'Accent_r' #NEWLINE#
'Blues' , 'Greys' , 'autumn' , 'PRGn_r' , 'Greys_r' , 'pink' , 'binary' #NEWLINE#
'Purples' , 'bwr_r' , 'autumn_r' , 'ocean' , 'Set1_r' , 'PuOr' , 'PuBuGn' #NEWLINE#
[ name for name , thing in inspect . getmembers ( [ ] ) ] #NEWLINE#
self . _2d_array = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
pd . io . json . dumps ( summary , orient = 'records' ) #NEWLINE#
super ( ModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ax1 . plot ( t , y1 , 'r-' , label = 'y1' ) #NEWLINE#
matrix [ 0 ] [ 1 ] #NEWLINE#
app . run ( ) #NEWLINE#
object . bar2 = 'value2' #NEWLINE#
"""{:n}""" . format ( x ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS = 'django.core.context_processors.request' , #NEWLINE#
toppings = models . ManyToManyField ( Topping ) #NEWLINE#
output . ix [ : , ( [ 'TDR1' , 'TDR2' , 'TDR3' , 'TDR4' , 'TDR' ] ) ] #NEWLINE#
berlin . delete ( ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#a#SPACE#tuple:#SPACE#%s' % ( thetuple , ) ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( getattr , attr . split ( '.' ) , obj ) #NEWLINE#
ax . plot ( xp , yp , zs = zp ) #NEWLINE#
deduped . to_csv ( 'myfilewithoutduplicates.csv' ) #NEWLINE#
subprocess . check_output ( [ 'espeak' , text ] ) #NEWLINE#
tk . Toplevel . __init__ ( self , master , ** kwargs ) #NEWLINE#
UserProfile . objects . create ( user = instance ) #NEWLINE#
dict ( ( c , string . count ( c ) ) for c in set ( string ) ) #NEWLINE#
plt . imshow ( data , vmin = - 10 , vmax = 10 ) #NEWLINE#
pd . concat ( [ price , vol ] , axis = 1 ) #NEWLINE#
all ( [ ( xdiff [ 0 ] == xdiff [ n ] ) for n in range ( 1 , len ( xdiff ) ) ] ) #NEWLINE#
data . boxplot ( column = '2013-08-17' , by = 'SPECIES' ) #NEWLINE#
print ( len ( japanese ) ) #NEWLINE#
master . mainloop ( ) #NEWLINE#
return s [ : : - 1 ] . replace ( old [ : : - 1 ] , new [ : : - 1 ] , count ) [ : : - 1 ] #NEWLINE#
print ( im . size ) #NEWLINE#
plusone . append ( int ( value ) ) #NEWLINE#
temp = '{0:b}' . format ( i ) #NEWLINE#
DialApp ( ) . run ( ) #NEWLINE#
a_b = [ e for e in a if not e in b ] #NEWLINE#
[ ( 50 , 2.738745180381648e-13 , 219 ) , ( 40 , 3.458745180381648e-13 , 220 ) ] #NEWLINE#
print ( sys . exc_info ( ) [ 0 ] ) #NEWLINE#
{ 'field1' : 'some#SPACE#text,JP,2007-04-25#SPACE#06:24:00' } #NEWLINE#
ax . set_xticklabels ( xdays , rotation = 45 , horizontalalignment = 'right' ) #NEWLINE#
extension = os . path . splitext ( filename ) [ 1 ] #NEWLINE#
print ( '<title>{:h}</title>' . format ( title ) ) #NEWLINE#
os . setpgrp ( ) #NEWLINE#
raise ValueError ( 'sorry,#SPACE#you#SPACE#lose' ) #NEWLINE#
df . rename ( columns , inplace = True ) #NEWLINE#
L [ - 1 ] #NEWLINE#
- 51.3932079772 - 43.3559607159 - 62.2080540769 #NEWLINE#
- 20.9366239523 - 20.9227157774 - 20.9591815321 #NEWLINE#
l [ 1 : : 2 ] = [ ( x * 2 ) for x in l [ 1 : : 2 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
fig . savefig ( 'c:/test2.png' ) #NEWLINE#
"""{{{0}}}""" . format ( 3 ) #NEWLINE#
ts . index . freq #NEWLINE#
np . nonzero ( np . all ( ( lower_bound < m2D ) & ( higher_bound > m2D ) , axis = 1 ) ) [ 0 ] [ 0 ] #NEWLINE#
file . seek ( 0 ) #NEWLINE#
graph . add_node ( pydot . Node ( 'literal_0_0' , label = '0' ) ) #NEWLINE#
list ( range ( 0 , 30 , 5 ) ) #NEWLINE#
s . replace ( 'abc' , '' ) #NEWLINE#
s . replace ( 'cba' , '' ) #NEWLINE#
self . cursor . execute ( 'statement' ) #NEWLINE#
np . array ( x == 'True' for x in my_list ) #NEWLINE#
self . data . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
print ( list ( solve ( ( x for x in [ 0 , 1 , - 1 , 3 , 7 , 4 , 5 , 3 , 2 , 4 , 8 ] ) , 2 ) ) ) #NEWLINE#
d = ordereddict ( dic , relax = True ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
p . start ( ) #NEWLINE#
[ len ( t ) for t in tuples ] #NEWLINE#
file . write ( line ) #NEWLINE#
self . window . unfullscreen ( ) #NEWLINE#
DataFrameDict [ 'Joe' ] #NEWLINE#
df1 . to_sparse ( ) . info ( ) #NEWLINE#
self . capture = cv . CaptureFromCAM ( 0 ) #NEWLINE#
cursor . execute ( 'insert#SPACE#into#SPACE#table#SPACE#(column)#SPACE#values#SPACE#(%s)' , ( dinosaur , ) ) #NEWLINE#
print ( '##SPACE#audio' ) #NEWLINE#
sum ( d * 3 ** ( - i - 1 ) for i , d in enumerate ( base3fraction ( x ) ) ) #NEWLINE#
print ( zed ( ) ) #NEWLINE#
a = b <STR0> a < b else a #NEWLINE#
np . random . seed ( 3 ) #NEWLINE#
self . _calendar = ttk . Treeview ( self , show = '' , selectmode = 'none' , height = 7 ) #NEWLINE#
scores = np . array ( [ 0.1 , 0.4 , 0.35 , 0.8 ] ) #NEWLINE#
df1 . merge ( df2 , how = 'outer' ) #NEWLINE#
layout . setSpacing ( 10 ) #NEWLINE#
"""ABCDEFGHI""" #NEWLINE#
return func ( parameters [ 0 ] , parameters [ 1 ] , parameters [ 2 ] ) #NEWLINE#
super ( QtGui . QWidget , self ) . __init__ ( ) #NEWLINE#
slicer_vectorized ( a , 0 , 3 ) #NEWLINE#
mail . settings . login = 'you:password' #NEWLINE#
unittest . main ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( or_ , map ( Counter , dicts ) , Counter ( ) ) #NEWLINE#
print ( self . cleaned_data [ 'print_name' ] ) #NEWLINE#
sheet1 . write ( i , 0 , n , fmt ) #NEWLINE#
from functools import reduce #NEWLINE# dict ( reduce ( find_common , mysets ) ) #NEWLINE#
re . sub ( '\\W' , 'X' , str ) #NEWLINE#
delete_module ( 'psyco' ) #NEWLINE#
dic [ keys [ - 1 ] ] = value #NEWLINE#
cbar = fig . colorbar ( im ) #NEWLINE#
application = webapp . WSGIApplication ( [ ( '/' , MainHandler ) ] , debug = True ) #NEWLINE#
return count . most_common ( ) [ : 10 ] #NEWLINE#
plt . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
struct . unpack ( '<h' , '\x00\x05' ) #NEWLINE#
data = np . array ( zip ( x , y , z ) , dtype = [ ( 'x' , float ) , ( 'y' , float ) , ( 'z' , float ) ] ) #NEWLINE#
random . shuffle ( l ) #NEWLINE#
conn = pyodbc . connect ( odbc_conn_str ) #NEWLINE#
import scipy . ndimage #NEWLINE#
len ( max ( re . compile ( '(b+b)*' ) . findall ( my_str ) ) ) #NEWLINE#
heapq . nsmallest ( 1 , ( ( k , i ) for i , k in enumerate ( s ) ) ) #NEWLINE#
models . py #NEWLINE#
print ( check_call ( [ 'dot' , '-o9.png' , '-Tpng' , './6.dot' ] ) ) #NEWLINE#
2.50611752 , 2.52982213 , 2.27623593 , 2.31651678 , 2.20127804 , 2.37065392 #NEWLINE#
{ { ( model . datetime | date ) : 'g:i#SPACE#a' } } #NEWLINE#
answer = [ v for v in itertools . product ( * ranges ) if sum ( v ) == 100 ] #NEWLINE#
s = c . connect ( ) #NEWLINE#
return { 'message' : 'Hello#SPACE#World!' } #NEWLINE#
return render_to_response ( 'twoproducts.mako' , opts , request ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
[ i for i , v in enumerate ( list1 ) if v >= 1 and list2 [ i ] == 0 ] #NEWLINE#
[ 3 , 4 , 1 ] #NEWLINE#
df [ 'FREQ' ] = df . groupby ( 'ID_PERSON' ) [ 'EVALUATION_GRADE' ] . transform ( 'size' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 1 , 2 , 1 , 1 , 0 ] , 'b' : list ( range ( 7 ) ) } ) #NEWLINE#
print ( '%X' % 255 ) #NEWLINE#
L [ 2 ] = 'a' #NEWLINE#
print ( [ ( num if num > 0 else z . pop ( 0 ) ) for num in y ] ) #NEWLINE#
print ( [ i for i in results ] ) #NEWLINE#
""",""" . join ( d ) #NEWLINE#
frozenset ( [ 1 , 2 , 2 , 3 , 3 ] ) == frozenset ( [ 3 , 2 , 1 , 1 , 1 ] ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#tbl_subscriber#SPACE#LIMIT#SPACE#%i,%i;' , ( actualLimit , steps ) ) #NEWLINE#
print ( res [ 'senpai' ] ) #NEWLINE#
"""Description:#SPACE#""" #NEWLINE#
win32only = pytest . mark . skipif ( "sys.platform#SPACE#!=#SPACE#'win32'" ) #NEWLINE#
[ a for a in my_array if a != 'abc' ] #NEWLINE#
mainloop ( ) #NEWLINE#
print ( np . argmax ( counts ) ) #NEWLINE#
data [ : 5 ] #NEWLINE#
index1 = np . array ( [ [ 0 , 0 ] , [ 1 , 1 ] ] ) #NEWLINE#
list ( chain . from_iterable ( chain ( islice ( ls , 1 ) , islice ( ls , 2 , None ) ) ) ) #NEWLINE#
print ( rsp . content ) #NEWLINE#
1 , 2 , 3 #NEWLINE#
df . words . str . contains ( 'he|wo' ) . sum ( ) #NEWLINE#
import imp #NEWLINE# imp . reload ( foo ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
{ 'username' : 'mariodev' , 'password' : '12345' } #NEWLINE#
[ id ( x ) for x in l2 ] #NEWLINE#
return sys . modules [ module_name ] #NEWLINE#
moduleA . py #NEWLINE#
ScrolledText ( root ) . pack ( ) #NEWLINE#
my_dict = { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } #NEWLINE#
content = f . read ( ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' , '#SPACE#' ] #NEWLINE# d = dict ( [ ( k , v ) for k , v in zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ] ) #NEWLINE#
[ 2 ] * 3 #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
len ( max ( sum ( tableData , [ ] ) , key = len ) ) #NEWLINE#
list_of_lists #NEWLINE#
counter . save ( ) #NEWLINE#
items = ( item for lst in ( L2 , L3 ) for item in lst ) #NEWLINE#
f . close ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
my_list . remove ( new_dict ) #NEWLINE#
plt . legend ( loc = 'best' ) #NEWLINE#
complete_path = os . path . join ( root_path , sanitised_path , sanitised_filename ) #NEWLINE#
df4 = df3 . drop_duplicates ( subset = 'rownum' , keep = 'last' ) #NEWLINE#
print ( { item : ( yield '' . join ( [ item , 's' ] ) ) for item in myset } ) #NEWLINE#
help ( function ) #NEWLINE#
b = copy . deepcopy ( a ) #NEWLINE#
return self . queue . pop ( ) #NEWLINE#
list ( df . T . to_dict ( ) . values ( ) ) #NEWLINE#
show ( ) #NEWLINE#
print ( ephem . constellation ( u ) ) #NEWLINE#
result = 'Hello#SPACE#my#SPACE#name#SPACE#is#SPACE#{name}' . format ( name = b ) #NEWLINE#
window . show_all ( ) #NEWLINE#
[ ( x + y ) for x in '1' for y in 'pot' ] #NEWLINE#
x = np . zeros ( 1 , dtype = np . dtype ( [ ( 'field' , '<f8' , 2 ) ] ) ) #NEWLINE#
print ( line ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
zip ( * ( x [ i : ] for i in range ( n ) ) ) #NEWLINE#
df [ 'B' ] = df [ 'A' ] . apply ( new_string ) #NEWLINE#
return flask . jsonify ( ** course_list ) #NEWLINE#
buttons = driver . find_elements_by_xpath ( '//button[contains(.,#SPACE#"some#SPACE#text")]' ) #NEWLINE#
[ 1 ] * 6 #NEWLINE#
ax . set_xticklabels ( final_labels ) #NEWLINE#
df [ 'Math#SPACE#Admin#SPACE#Date' ] + pd . Timedelta ( 1 , 'D' ) #NEWLINE#
eval ( exploit ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#the#SPACE#name#SPACE#of#SPACE#the#SPACE#python#SPACE#script:#SPACE#' + sys . argv [ 0 ] ) #NEWLINE#
for k , v in list ( finder . ngram_fd . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
mylist . append ( ( 'key' , 'value' ) ) #NEWLINE#
print ( list ( map ( int , chain . from_iterable ( line . split ( ) for line in f ) ) ) ) #NEWLINE#
json_data = json . dumps ( data ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
[ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 0 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 1 , 0 , 1 ] , [ 1 , 1 , 0 #NEWLINE# ] , [ 1 , 1 , 1 ] ] #NEWLINE#
subprocess . Popen ( [ 'sleep' , '60' ] ) #NEWLINE#
json . dumps ( [ 1 , 2 , 3 , None , 4 ] ) #NEWLINE#
x . reshape ( x . shape [ : - 2 ] + ( - 1 , ) ) . shape #NEWLINE#
response . render ( ) #NEWLINE#
df [ 'AMV_norm' ] = df [ 'AMV' ] - df . groupby ( 'count_id' ) [ 'AMV' ] . transform ( 'min' ) #NEWLINE#
not any ( el == 0 for sublist in maze for el in sublist ) #NEWLINE#
with open ( 'data.txt' , 'r' ) as myfile : #NEWLINE# #INDENT# data = myfile . read ( ) . replace ( '\n' , '' ) #NEWLINE#
button . pack ( ) #NEWLINE#
[ { 'connection' : d } for d in map ( dict , inner ) ] #NEWLINE#
str ( datetime . date ( 2002 , 12 , 4 ) ) . translate ( None , '-' ) #NEWLINE#
timestamp = datetime . strptime ( date_string , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
{ { message | safe } } #NEWLINE#
from bs4 import BeautifulSoup #NEWLINE#
toppings = fields . ToManyField ( 'project.app.api.ToppingResource' , 'topping_set' ) #NEWLINE#
ax . plot ( [ X - 1 , X - 1 ] , [ Y - 1 , Y - 1 ] , [ 0 , Z - 1 ] , 'k-' ) #NEWLINE#
df . index = compose_date ( df [ 'year' ] , days = df [ 'doy' ] ) #NEWLINE#
df = pd . read_csv ( sep = '\\s{2,}' , engine = 'python' ) #NEWLINE#
print ( find_words ( 'tableapplechairtablecupboard' ) ) #NEWLINE#
min ( s , key = lambda c : ( - s . count ( c ) , s . index ( c ) ) ) #NEWLINE#
return False #NEWLINE#
"""let#SPACE#us#SPACE#put#SPACE#it#SPACE#to#SPACE#a#SPACE#practical#SPACE#test.#SPACE#Here#SPACE#is#SPACE#the#SPACE#first#SPACE#heading#SPACE#upon#SPACE#which#SPACE#I#SPACE#come.#SPACE#'A#SPACE#husband's#SPACE#cruelty#SPACE#to#SPACE#his#SPACE#wife.'#SPACE#There#SPACE#is#SPACE#half#SPACE#a#SPACE#column#SPACE#of#SPACE#print,#SPACE#but#SPACE#I#SPACE#know#SPACE#without#SPACE#reading#SPACE#it#SPACE#that#SPACE#it#SPACE#is#SPACE#all#SPACE#perfectly#SPACE#familiar#SPACE#to#SPACE#me.#SPACE#There#SPACE#is,#SPACE#of#SPACE#course,#SPACE#the#SPACE#other#SPACE#woman,#SPACE#the#SPACE#drink,#SPACE#the#SPACE#push,#SPACE#the#SPACE#blow,#SPACE#the#SPACE#bruise,#SPACE#the#SPACE#sympathetic#SPACE#sister#SPACE#or#SPACE#landlady.#SPACE#The#SPACE#crudest#SPACE#of#SPACE#writers#SPACE#could#SPACE#invent#SPACE#nothing#SPACE#more#SPACE#crude.""" #NEWLINE#
ax . plot ( Oxygen , Depth , 'go--' ) #NEWLINE#
self . ysb . grid ( row = 0 , column = 1 , sticky = 'ns' ) #NEWLINE#
libfoo . dylib #NEWLINE#
SCRIPT_DIR = os . path . abspath ( os . path . dirname ( __file__ ) ) #NEWLINE#
traverse_tree ( { ( 1 ) : { 'id' : 2 } , ( 2 ) : { 'id' : 3 } } , id = 2 ) #NEWLINE#
out_file = open ( 'csv_write.csv' , 'wb' ) #NEWLINE# out_file = open ( 'csv_write.csv' , 'w' , newline = '' ) #NEWLINE#
df [ 'Date' ] . dt . strftime ( '%Y-%V' ) #NEWLINE#
t . grid ( sticky = ( N , E , S , W ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'this#SPACE#will#SPACE#do#SPACE#the#SPACE#calculation' ) #NEWLINE#
logging . getLogger ( 'tornado.access' ) . disabled = True #NEWLINE#
ax . set_xticklabels ( label_text ) #NEWLINE#
G . add_edges_from ( [ ( 'v1' , 'v2' ) , ( 'v2' , 'v4' ) , ( 'v1' , 'v3' ) ] ) #NEWLINE#
all2 = cPickle . load ( open ( 'all_my_arrays' ) ) #NEWLINE#
os . remove ( os . path . join ( dir , file ) ) #NEWLINE#
req . add_header ( 'Referer' , 'http://www.python.org/' ) #NEWLINE#
ax . plot ( x , 3 * x ** 2 , color = 'g' , label = 't#SPACE#=#SPACE#500' ) #NEWLINE#
return ax . imshow ( im , * args , ** kwargs ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . union , [ set ( [ 1 , 2 ] ) , set ( [ 3 , 4 ] ) , set ( [ 5 , 6 ] ) ] ) #NEWLINE#
df . eq ( df [ 1 ] , axis = 'index' ) #NEWLINE#
os . mkdir ( 'dir/all_files' ) #NEWLINE#
printf ( 'Run#SPACE#over\n' ) #NEWLINE#
sorted ( [ 0 , 0 , 0 , 1 , 2 , 3 , 4 ] , key = lambda x : ( x == 0 , x ) ) #NEWLINE#
fp . close ( ) #NEWLINE#
random . shuffle ( temp ) #NEWLINE#
super ( EligibilityForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
q = ses . query ( Table ) . filter ( Table . fullFilePath . like ( 'path%' ) ) . all ( ) #NEWLINE#
p . stdin . write ( cmd ) #NEWLINE#
child . sendline ( 'SuperSecretPassword' ) #NEWLINE#
list ( a ) #NEWLINE#
data = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
[ ] #NEWLINE#
category = models . ForeignKey ( Category ) #NEWLINE#
strvar = '\n' . join ( strvar ) #NEWLINE#
sorted ( [ 2 , - 1 , 3 ] , key = lambda x : x ** 2 , reverse = True ) #NEWLINE#
ofimg [ 0 ] . getHomography ( ) #NEWLINE#
b = unicode_b . encode ( 'utf_8' ) #NEWLINE#
print ( _string [ _string . index ( '.' ) + 1 : _string . rindex ( '.' ) + 1 ] . lstrip ( ) ) #NEWLINE#
exec ( open ( sys . argv [ 1 ] , 'r' ) . read ( ) , d ) #NEWLINE#
workr . terminate ( ) #NEWLINE#
main . show ( ) #NEWLINE#
transcript [ 'colname2' ] = row [ 'colname2' ] #NEWLINE#
t . start ( ) #NEWLINE#
self . write ( response . content ) #NEWLINE#
re . sub ( "r'.'" , '' , "This#SPACE#r'x'#SPACE#will#SPACE#match" ) #NEWLINE#
print ( 'Goodbye!' ) #NEWLINE#
txt_frm . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
sys . path . append ( package2_path ) #NEWLINE#
os . system ( 'cls' ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
answer = msvcrt . getch ( ) #NEWLINE#
formatter = logging . Formatter ( '[num-%d]#SPACE#%%(levelname)s#SPACE#%%(message)s' % ( num , ) ) #NEWLINE#
np . array_split ( x , 3 ) #NEWLINE#
df [ zscore ( df [ 'count' ] ) . abs ( ) . gt ( 2 ) ] #NEWLINE#
tree . xpath ( '//input[@id="createFolderCreateBtn"#SPACE#and#SPACE#not(@disabled)]' ) #NEWLINE#
df . write . jdbc ( url = url , table = 'baz' , mode = mode , properties = properties ) #NEWLINE#
df = df . drop ( [ 'Category' ] , inplace = True , axis = 1 ) #NEWLINE#
x , y = zip ( * xy ) #NEWLINE#
soup . contents [ 0 ] #NEWLINE#
plt . savefig ( '/tmp/test.png' ) #NEWLINE#
puzzle = __import__ ( '8puzzle' ) #NEWLINE#
get_url_contents ( r [ 0 ] ) . decode ( <STR0> ) . encode ( <STR0> , <STR0> ) #NEWLINE#
value = s [ 'first' ] [ i ] #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
data = resp [ 'data' ] #NEWLINE#
n . show ( ) #NEWLINE#
im = Image . open ( './old_driver/data/train/c0/img_292.jpg' ) #NEWLINE#
print ( instance . name ) #NEWLINE#
df [ 'day' ] = [ t . day for t in df . DateOccurence ] #NEWLINE#
x . plot ( kind = 'bar' ) . legend ( bbox_to_anchor = ( 1.2 , 0.5 ) ) #NEWLINE#
figure . canvas . draw ( ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
x = np . zeros ( 1 , dtype = np . dtype ( [ ( 'field' , '<f8' , ( 1 , 2 ) ) ] ) ) #NEWLINE#
df = df . drop ( 'Name' , axis = 1 ) #NEWLINE#
return 'hello#SPACE#world' #NEWLINE#
out_file . write ( line . rstrip ( '\n' ) + s + '\n' ) #NEWLINE#
s1 . translate ( dict . fromkeys ( map ( ord , string . punctuation ) , None ) ) #NEWLINE#
os . remove ( 'temp.kml' ) #NEWLINE#
"""<table#SPACE#border="1"#SPACE#class="dataframe#SPACE#my_class"#SPACE#id#SPACE#=#SPACE#"my_id">...""" #NEWLINE#
print ( 'doing#SPACE#blocking#SPACE#call' ) #NEWLINE#
print ( 'done' ) #NEWLINE#
print ( 'doing#SPACE#non-block#SPACE#call' ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
df = df . sort ( 'date' ) #NEWLINE#
forms [ 3 ] . controls [ 0 ] . get_items ( ) #NEWLINE#
p . stdin . flush ( ) #NEWLINE#
json_object = json . loads ( json_raw [ 0 ] ) #NEWLINE#
mylist = [ '' . join ( word . split ( 'l' ) [ : 2 ] ) for word in [ 'Hello' , 'world' ] ] #NEWLINE#
a = [ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) ] #NEWLINE#
my_list = [ tuple ( i ) for i in my_list ] #NEWLINE# sorted ( set ( my_list ) ) #NEWLINE#
table . setItem ( rowPosition , 0 , QtGui . QTableWidgetItem ( 'text1' ) ) #NEWLINE#
df . append ( s ) #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
call_attrs ( a , [ 'method1' , 'method2' , 'method3' ] , arg1 , arg2 ) #NEWLINE#
np . random . seed ( 314 ) #NEWLINE#
print ( vars ( ) [ 'Foo' ] . __subclasses__ ( ) ) #NEWLINE#
re . escape ( '\\#SPACE#a.*$' ) #NEWLINE#
sys . exit ( ) #NEWLINE#
[ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'f' , 'g' ] ] #NEWLINE#
writer . writerow ( [ date , value ] ) #NEWLINE#
"""{:.{prec}f}""" . format ( 26.034 , prec = 3 ) #NEWLINE#
gb . unstack ( 0 ) . resample ( 'D' ) . sum ( ) . stack ( ) #NEWLINE#
mylistarr = [ array ( [ 1 , 2 , 3 ] ) , array ( [ 1 , 0 ] ) , array ( [ 3.45 , 3.2 ] ) ] #NEWLINE#
p2 = Table ( 'tablename' , metadata , Column ( 'id' , Integer , primary_key = True ) , #NEWLINE# Column ( 'fk' , ForeignKey ( 'fk_table.field' ) ) , mysql_engine = 'InnoDB' ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
path . join ( 'foo' , 'bar' ) #NEWLINE#
threading . Thread ( target = run_all ) . start ( ) #NEWLINE#
line [ 8 ] = line [ 8 ] . replace ( letter , '' ) #NEWLINE#
return ( 2 - N ) % 7 #NEWLINE#
PYTHONUNBUFFERED = TRUE #NEWLINE#
hash ( [ 1 , 2 , 3 ] ) #NEWLINE#
import imp #NEWLINE# imp . reload ( module ) #NEWLINE#
df . A . apply ( pd . value_counts ) . fillna ( 0 ) . astype ( int ) #NEWLINE#
float . fromhex ( '0x1.b333333333333p+1' ) #NEWLINE#
return urllib . request . Request ( theurl , bytes ( body , 'utf-8' ) , headers ) #NEWLINE#
print ( sys . exc_info ( ) ) #NEWLINE#
def find_min_id ( l ) : #NEWLINE# #INDENT# return min ( d [ 'id' ] for d in l if 'id' in d ) #NEWLINE#
self . serial . write ( '%s\r\n' % line ) #NEWLINE#
logging . basicConfig ( filename = 'myapp.log' , level = logging . INFO ) #NEWLINE#
self . response . set_cookie ( 'nav_data' , nav_b64 ) #NEWLINE#
return super ( SlicableDict , self ) . __delitem__ ( key ) #NEWLINE#
headers = { 'content-type' : 'application/json' , 'Accept-Charset' : 'UTF-8' } #NEWLINE#
d = [ a , b , c ] #NEWLINE#
num1 , num2 = int ( num1 ) , int ( num2 ) #NEWLINE#
df . C . plot ( ax = ax3 , style = 'g-' ) #NEWLINE#
rmfield = lambda a , * f : a [ [ n for n in a . dtype . names if n not in f ] ] #NEWLINE#
self . __dict__ . update ( adict ) #NEWLINE#
df = pd . DataFrame ( { 'A' : list1 , 'B' : list2 } , columns = [ 'A' , 'B' ] ) #NEWLINE#
np . allclose ( D0 , D2 ) #NEWLINE#
df_b . combine_first ( df_a ) #NEWLINE#
logging . getLogger ( 'SomeTest.testSomething' ) . setLevel ( logging . DEBUG ) #NEWLINE#
tmp = proc . stdout . read ( ) #NEWLINE#
line = line . strip ( ) #NEWLINE#
print ( request . GET [ 'myvar' ] ) #NEWLINE#
print ( sum ( [ i [ list ( i . keys ( ) ) [ 0 ] ] [ 1 ] for i in myList ] ) ) #NEWLINE#
result = 'Hello#SPACE#my#SPACE#name#SPACE#is#SPACE#{0},#SPACE#says#SPACE#{1}' . format ( name , speaker ) #NEWLINE#
result = "{1}#SPACE#says:#SPACE#'Hello#SPACE#my#SPACE#name#SPACE#is#SPACE#{0}'" . format ( name , speaker ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
mock . patch ( 'function_name' ) #NEWLINE#
output ( 'pid:%d#SPACE#got#SPACE#input#SPACE#"%s"' % ( os . getpid ( ) , str ( input ) ) ) #NEWLINE#
s = '{' #NEWLINE#
s = "'" #NEWLINE#
[ item for item in full_list if not omit & set ( item ) ] #NEWLINE#
{ '1' : 'd' , '3' : 'f' , '2' : 'e' } #NEWLINE#
datetime . datetime ( now . date ( ) , datetime . time ( tzinfo = now . tzinfo ) ) #NEWLINE#
plt . figure ( figsize = ( 5 , 5 ) ) #NEWLINE#
self . canvas . configure ( yscrollcommand = self . vsb . set ) #NEWLINE#
result . write ( new_text ) #NEWLINE#
raise TypeError ( '%s#SPACE#is#SPACE#neither#SPACE#a#SPACE#date#SPACE#nor#SPACE#a#SPACE#datetime' % d ) #NEWLINE#
p = subprocess . Popen ( [ cmd_list ] , shell = False ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#from#SPACE#User' ) #NEWLINE#
print ( list_of_hets ) #NEWLINE#
print ( df . to_string ( ) ) #NEWLINE#
A . T [ B == 1 ] . T #NEWLINE#
foo = ( x ** 2 for x in count ( ) ) #NEWLINE#
execution . history ( ) #NEWLINE#
"""{:06x}""" . format ( 123 ) #NEWLINE#
x [ x ] . index #NEWLINE#
Row ( ** row_dict ) #NEWLINE#
df #NEWLINE#
[ ( 'foo' , [ 'value1' , 'value2' , 'value3' ] ) , ( 'xxx' , [ 'yyy' ] ) ] #NEWLINE#
a = numpy . empty_like ( b ) #NEWLINE# a [ : ] = b #NEWLINE#
root . mainloop ( ) #NEWLINE#
a = numpy . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
dict ( namevalue . partition ( '=' ) [ : : 2 ] for namevalue in shlex . split ( s ) ) #NEWLINE#
lst . append ( 3 ) #NEWLINE#
TotSize [ : ] = map ( sum , data ) #NEWLINE#
'SSQP' , 'SSQP' , 'SQPP' , 'SSSS' , 'SSSQ' , 'SSQP' , 'PSQS' , 'SSQP' , 'SSSS' #NEWLINE#
print ( parse_qsl ( urlparse ( url ) [ 4 ] ) ) #NEWLINE#
return obj . timefield . strftime ( '%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' ) #NEWLINE#
( A [ ... , None ] * B [ : , ( None ) ] ) . shape #NEWLINE#
print ( list ( d . values ( ) ) ) #NEWLINE#
263528 , [ ( 1 , 4 ) , ( 2 , 7 ) , ( 3 , 3 ) , ( 4 , 8 ) , ( 5 , 2 ) , ( 6 , 5 ) , ( 7 , 1 ) , ( 8 , 6 ) ] #NEWLINE#
files = { 'obvius_session_id' : ( '' , '72c2b6f406cdabd578c5fd7598557c52' ) } #NEWLINE#
max ( values [ i + 1 ] - values [ i ] for i in range ( 0 , len ( values ) - 1 ) ) #NEWLINE#
[ 'ROOT' , 'Node6' ] #NEWLINE#
df [ df [ 'col1' ] >= 1 ] #NEWLINE#
urllib . request . urlopen ( 'http://www.google.com' ) . close ( ) #NEWLINE#
"""sdf344asfasf天地方益3権sdfsdf""" #NEWLINE#
count , _ = get_count_and_price ( ) #NEWLINE#
random . shuffle ( l ) #NEWLINE#
result = [ split_result [ 0 ] , split_result [ 1 ] , [ i for i in split_result [ 2 : ] if i ] ] #NEWLINE#
124483 , 125248 , 125433 , 125460 , 125500 , 126027 , 126846 , 129640 , 129775 #NEWLINE#
print ( list_end_counter ( [ 1 , 2 , 1 , 1 ] ) ) #NEWLINE#
print ( df . replace ( '\\s+' , np . nan , regex = True ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
del x [ index ] #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'PROJECTNAME.settings' #NEWLINE#
print ( parse_python_source ( os . path . join ( d , f ) ) ) #NEWLINE#
raise ValueError ( 'OrderedDict()#SPACE#is#SPACE#empty' ) #NEWLINE#
{ 'name' : 'Bill' , 'number' : '234' } , #NEWLINE#
{ 'name' : 'Dave' , 'number' : '567' } , #NEWLINE#
datetime . strptime ( date_posted , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
hello ( sys . argv [ 1 ] , sys . argv [ 2 ] ) #NEWLINE#
parser . add_argument ( 'value' , nargs = '?' ) #NEWLINE#
object_list . sort ( key = lambda x : key_precedence [ x . key ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
i = max ( i - 1 , 0 ) #NEWLINE#
df [ 'korisnika' ] . plot ( ax = axs [ 0 ] ) #NEWLINE#
file . close ( ) #NEWLINE#
len ( inspect . getargspec ( foo_func ) [ 0 ] ) #NEWLINE#
map ( sum , zip ( * ( [ iter ( q ) ] * 2 ) ) ) #NEWLINE#
figure ( ) #NEWLINE#
return list ( set ( A ) . intersection ( B ) ) #NEWLINE#
f = open ( 'myfile.txt' , 'r' ) #NEWLINE#
pl . show ( ) #NEWLINE#
foo . __dict__ . update ( request . GET ) #NEWLINE#
img . save ( s , 'png' ) #NEWLINE#
np . where ( x == np . max ( x ) ) #NEWLINE#
all ( x [ - 1 ] == 'H' or x == 'QS' for x in mycards ) #NEWLINE#
x [ np . array ( [ 3 , 3 , 1 , 8 ] ) ] #NEWLINE#
ax . set_ylim ( y_min , y_max ) #NEWLINE#
[ datetime . date ( 2015 , 3 , 20 ) , datetime . date ( 2015 , 4 , 17 ) ] #NEWLINE#
print ( [ attr . get ( idx , default_value ) for attr in attrs ] ) #NEWLINE#
sys . stdout . write ( 'a' ) #NEWLINE#
self . y = math . sin ( a ) * original_x + math . cos ( a ) * original_y #NEWLINE#
input_ = eval ( <STR0> ( ) ) #NEWLINE#
subprocess . Popen ( [ file ] , shell = True ) #NEWLINE#
sys . setrecursionlimit ( 10000 ) #NEWLINE#
my_array [ : , ( 1 ) ] = temp #NEWLINE#
print ( '{:>8s}' . format ( 'ありがとう' ) ) #NEWLINE#
np . interp ( [ 0 , 0.33 , 0.67 , 1 ] , [ 0 , 0.5 , 1 ] , [ 10 , 20 , 30 ] ) #NEWLINE#
a = [ ( 'A' , 'V' , 'C' ) , ( 'A' , 'D' , 'D' ) ] #NEWLINE# [ '' . join ( x ) for x in a ] #NEWLINE#
loop . run_forever ( ) #NEWLINE#
db . session . add ( User ( 'Bob#SPACE#Jones' , 'bob@gmail.com' ) ) #NEWLINE#
sorted ( l , key = lambda * args : random . random ( ) ) #NEWLINE#
[ [ [ 0 ] * n ] * n ] * n #NEWLINE#
[ dict ( zip ( KEYS , values ) ) for values in retrieve ( 'age' , 35 ) ] #NEWLINE#
pdb = Pdb ( breakpoints ) #NEWLINE#
import itertools #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 4 ) ) #NEWLINE#
eval ( "shutil.rmtree('mongo')" ) #NEWLINE#
{ 'x2' : 2 , 'y1' : 1 , 'x1' : 1 , 'y2' : 2 } #NEWLINE#
self . ax . set_zlim3d ( FLOOR , CEILING ) #NEWLINE#
x [ argrelextrema ( x , np . greater ) [ 0 ] ] #NEWLINE#
response = DeviceView . as_view ( ) ( request , pk = 1 ) #NEWLINE#
path = os . path . abspath ( args . file . name ) #NEWLINE#
self . ax . xaxis . set_label_position ( 'top' ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
{ { ( object . article . rating_score | add ) : '-100' } } #NEWLINE#
root_id = hex ( ewmh . EWMH ( ) . root . id ) #NEWLINE#
return S . pop ( ) #NEWLINE#
found = re . search ( 'AAA(.+?)ZZZ' , text ) . group ( 1 ) #NEWLINE#
[ x for x in [ '123' , 'hello' , '456' ] if x . isalpha ( ) ] #NEWLINE#
p = re . compile ( 'lalala(I#SPACE#want#SPACE#this#SPACE#part)lalala' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
a = set ( [ 1 ] ) #NEWLINE#
return '' . join ( c for c in s . lower ( ) if c in string . ascii_lowercase ) #NEWLINE#
def move ( y , x ) : #NEWLINE# #INDENT# print ( '\x1b[%d;%dH' % ( y , x ) ) #NEWLINE#
Template ( 'Hello#SPACE#{{#SPACE#name#SPACE#}}!' ) . stream ( name = 'foo' ) . dump ( 'hello.html' ) #NEWLINE#
len ( list ( flatten ( mylist [ 0 : 1 ] ) ) ) #NEWLINE#
repeat ( 4 , foo , 'test' ) #NEWLINE#
driver . get ( 'http://stackoverflow.com' ) #NEWLINE#
def close_window ( ) : #NEWLINE# #INDENT# window . destroy ( ) #NEWLINE#
global last_id #NEWLINE#
my_dict = { 'foo' : 'bar' , 'num' : 42 } #NEWLINE#
ax . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
ax . add_patch ( angle_plot ) #NEWLINE#
"""{:>20}""" . format ( str ( dt ) ) #NEWLINE#
__init__ . py #NEWLINE#
plt . xlim ( ( - 1 , 4 ) ) #NEWLINE#
super ( MyMixin , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
plt . savefig ( 'plot' ) #NEWLINE#
invite_reason = models . CharField ( max_length = 64 ) #NEWLINE#
uf ( T [ : - 1 ] , Tm [ 1 : ] , tau [ 1 : ] , T [ 1 : ] ) #NEWLINE#
p = subprocess . Popen ( [ 'ntpq' , '-p' ] , stdout = subprocess . PIPE ) #NEWLINE#
{ 'id' : 10150133855458395 , 'name' : 'my-name' } #NEWLINE#
time . mktime ( time . localtime ( calendar . timegm ( utc_time ) ) ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
return model . objects . get ( id = self . id ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
s . listen ( 1 ) #NEWLINE#
pylab . show ( ) #NEWLINE#
B . sendall ( A . recv ( 4096 ) ) #NEWLINE#
br . set_cookiejar ( cookiejar ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE# zip ( * ( [ iter ( l ) ] * 2 ) ) #NEWLINE#
df [ 'LastName' ] [ df . ID == 103 ] = 'Jones' #NEWLINE#
y = np . array ( [ 2 , 1 , 5 , 2 ] ) #NEWLINE#
conn . autocommit = True #NEWLINE#
print ( 'Inventory:' , player . inventory_as_str ( ) ) #NEWLINE#
b = tf . constant ( np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) , dtype = tf . int32 ) #NEWLINE#
select . select_by_value ( '1' ) #NEWLINE#
html = '' . join ( line . strip ( ) for line in html . split ( '\n' ) ) #NEWLINE#
df [ df . b . notnull ( ) ] #NEWLINE#
priors = df [ datetime . datetime . now ( ) - df . placed_at >= timedelta ( 90 ) ] #NEWLINE#
plt . plot ( z , t ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
set ( dict1 . items ( ) ) . symmetric_difference ( list ( dict2 . items ( ) ) ) #NEWLINE#
cv2 . imshow ( 'Color#SPACE#image' , p ) #NEWLINE#
pygame . init ( ) #NEWLINE#
print ( ( m . group ( 'min' ) , m . group ( 'max' ) ) ) #NEWLINE#
li == [ ( x + y ) for x in 'catty' for y in 'pot' ] #NEWLINE#
os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) ) #NEWLINE#
proc = subprocess . Popen ( [ 'python' , 'slowprint.py' ] , stdout = subprocess . PIPE ) #NEWLINE#
print ( ( item , value ) ) #NEWLINE#
tree = etree . parse ( filename , parser ) #NEWLINE#
p . stdin . write ( s + '\n' ) #NEWLINE#
wb . save ( 'My_book_with_Yellow_Tab.xlsx' ) #NEWLINE#
datetime . now ( timezone . utc ) . isoformat ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
b = df . groupby ( 'node' ) [ 'lang' ] . value_counts ( ) . reset_index ( name = 'lfreq' ) #NEWLINE#
os . rename ( filename , filename . replace ( '#SPACE#' , '-' ) ) #NEWLINE#
__author__ = 'Joël' . encode ( 'utf-8' ) #NEWLINE#
t = timeit . Timer ( stmt = 'pe1()' , setup = 'from#SPACE#pe1m#SPACE#import#SPACE#pe1' ) #NEWLINE#
rdd . zipWithIndex ( ) . filter ( lambda tup : tup [ 1 ] > 0 ) . map ( lambda tup : tup [ 0 ] ) #NEWLINE#
tuple ( lines [ 0 ] ) #NEWLINE#
serializer . save ( ) #NEWLINE#
105750 , 108135 , 110758 , 115672 , 116725 , 117067 , 118440 , 120600 , 123354 #NEWLINE#
131242 , 132430 , 133245 , 134725 , 135828 , 135837 , 136525 , 136948 , 139500 #NEWLINE#
map ( lambda x : x . title ( ) , s ) #NEWLINE#
return int ( ceil ( adjusted_dom / 7.0 ) ) #NEWLINE#
{ { post . tags } } #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
df . drop ( df [ df . amount == 0 ] . sample ( frac = 0.5 ) . index ) #NEWLINE#
np . frombuffer ( 'abcdefgh' , 'uint8' ) . sum ( ) #NEWLINE#
writer = csv . writer ( result , dialect = 'excel' ) #NEWLINE#
df [ 'bar' ] #NEWLINE#
print ( dfu . groupby ( level = 0 ) [ 'open' ] . transform ( 'first' ) ) #NEWLINE#
fileContent = file . read ( ) #NEWLINE#
print ( 'Largest#SPACE#number:#SPACE#{}' . format ( max_num ) ) #NEWLINE#
print ( l [ x ] [ y ] ) #NEWLINE#
words = sorted ( set ( stream . read ( ) . split ( ) ) ) #NEWLINE#
return ( f ( v ) for v in vals ) #NEWLINE#
return YourModel . objects . filter ( query ) #NEWLINE#
arr [ [ 1 , 1 ] ] #NEWLINE#
my_dataframe . to_excel ( writer , startrow = 1 , sheet_name = 'Sheet1' , index = False ) #NEWLINE#
f . close ( ) #NEWLINE#
etree . XMLParser ( recover = True ) #NEWLINE#
f ( x = 100 ) #NEWLINE#
insert_ids . append ( cur . lastrowid ) #NEWLINE#
result = np . concatenate ( ( a , val ) ) #NEWLINE#
"""C:\\Users\\Judge""" . replace ( '\\' , '/' ) #NEWLINE#
datetime . datetime . strptime ( dt , fmt ) #NEWLINE#
print ( 'Hello,#SPACE#%s#SPACE#%s!' % ( salutation , name ) ) #NEWLINE#
super ( expression , self ) . __init__ ( ) #NEWLINE#
myRoundedList . sum ( ) #NEWLINE#
ax . add_patch ( rectangle ) #NEWLINE#
pygame . init ( ) #NEWLINE#
return tuple . __new__ ( * args , ** kwargs ) #NEWLINE#
A [ A == pinf ] = 0.0 #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
imagem = cv2 . bitwise_not ( imagem ) #NEWLINE#
print ( calendar . monthrange ( 2012 , 1 ) [ 1 ] ) #NEWLINE#
dict ( ( k , D [ k ] - v ) for v , k in enumerate ( albums_today ) ) #NEWLINE#
z = np . ones ( ( 5 , 1 , 1 ) ) #NEWLINE#
( b - b [ 0 ] == 0 ) . all ( ) #NEWLINE#
"""hello#SPACE#world""" . title ( ) #NEWLINE#
zip ( my_list , operator . itemgetter ( * my_list ) ( my_dictionary ) ) #NEWLINE#
help ( foo . __name__ ) #NEWLINE#
df [ 'bar' ] . fillna ( df [ 'foo' ] , inplace = True ) #NEWLINE#
print ( ',' . join ( s ) ) #NEWLINE#
print ( [ _ for _ in range ( 5 ) ] ) #NEWLINE#
return 1 , 4 , 2 , 5 #NEWLINE#
a [ slice ( 1 , 2 ) ] #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Error:#SPACE#{0}#SPACE#-->#SPACE#{1}#SPACE#!=#SPACE#{2}' . format ( num , result , answer ) ) #NEWLINE#
data = pd . DataFrame ( data , columns = [ 'Date' , 'Downloads' ] ) #NEWLINE#
data = twitchdata . split ( ':' ) [ 1 ] #NEWLINE#
contents = '' . join ( str ( item ) for item in notices . contents ) #NEWLINE#
my_string . format ( ** D ( name = 'minerz029' ) ) #NEWLINE#
np . loadtxt ( 'example#SPACE#board.txt' , dtype = int ) . tolist ( ) #NEWLINE#
print ( sp . communicate ( ) [ 0 ] . split ( ) ) #NEWLINE#
re . compile ( '(?<!\\S)word(?!\\S)' ) #NEWLINE#
os . startfile ( 'timeSound2.au' ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = firefoxProfile ) #NEWLINE#
foo ( 'Cleese' , 'Palin' , None ) #NEWLINE#
DataFrame ( dict ( [ ( k , Series ( v ) ) for k , v in d . items ( ) ] ) ) #NEWLINE#
header_df = pd . read_csv ( 'my_file.csv' , index_col = 0 , nrows = 1 ) #NEWLINE#
print ( line ) #NEWLINE#
Column ( 'last_updated' , DateTime , onupdate = datetime . datetime . now ) #NEWLINE#
self . response . headers . add_header ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
soup . find_all ( 'a' , text = 'price' ) #NEWLINE#
'^grappelli/' , include ( 'grappelli.urls' ) #NEWLINE#
plt . imshow ( img , cmap = plt . cm . gray ) #NEWLINE#
Class_name . objects . get ( pk = self . kwargs . get ( 'pk' ) ) #NEWLINE#
map ( ord , 'Hello,#SPACE#马克' . encode ( 'utf8' ) ) #NEWLINE#
file . write ( '\n' ) #NEWLINE#
np . split ( np . asarray ( quaternion0 ) , 4 , - 1 ) #NEWLINE#
os . remove ( path ) #NEWLINE#
con . commit ( ) #NEWLINE#
json . loads ( json . dumps ( my_dict ) ) #NEWLINE#
d [ k ] . setdefault ( kk , 0 ) #NEWLINE#
df = pd . concat ( pool . map ( process , links ) , ignore_index = True ) #NEWLINE#
assert date_object == datetime . strptime ( date_string , '%d/%m/%Y' ) . date ( ) #NEWLINE#
threading . Thread ( target = post_request , args = ( q , ) ) . start ( ) #NEWLINE#
param = np . apply_along_axis ( func1d , axis = 2 , arr = data ) #NEWLINE#
ax2 . xaxis . set_visible ( False ) #NEWLINE#
button . configure ( bg = colour ) #NEWLINE#
result = np . sum ( product , axis = 1 ) #NEWLINE#
self . response . headers . add_header ( 'Set-Cookie' , C1 . output ( header = '' ) ) #NEWLINE#
print ( df . iloc [ : , ( df . columns . get_level_values ( 1 ) == 'A' ) ] ) #NEWLINE#
a . extend ( memoryview ( b ) [ 14 : 20 ] ) #NEWLINE#
lis = [ 1 , 2 , 3 , 4 ] #NEWLINE#
ds = xr . open_dataset ( path_file ) #NEWLINE#
print ( list ( inorder ( tree ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
driver . set_page_load_timeout ( 30 ) #NEWLINE#
a = a . ravel ( ) . view ( ( np . str , a . itemsize * a . shape [ 1 ] ) ) #NEWLINE#
plt . savefig ( 'pal2.png' ) #NEWLINE#
np . hstack ( ( x , np . prod ( x , axis = 1 , keepdims = True ) ) ) #NEWLINE#
sum ( dct . get ( k , 0 ) for k in lst ) #NEWLINE#
print ( json . dumps ( dict ( r . headers ) ) ) #NEWLINE#
print ( row [ 'Id' ] , row [ 'Name' ] ) #NEWLINE#
db = sqlite3 . connect ( 'file:/path/to/database?mode=ro' , uri = True ) #NEWLINE#
warnings . filterwarnings ( 'error' ) #NEWLINE#
pd . DataFrame ( data = [ l ] ) #NEWLINE#
app . run ( ) #NEWLINE#
[ 0.13536096 , 0.60319054 , 0.82018125 , 0.10445047 ] , #NEWLINE#
[ 0.1877724 , 0.96060999 , 0.39697999 , 0.59078612 ] , #NEWLINE#
c = list ( map ( operator . or_ , a , b ) ) #NEWLINE#
B = np . random . rand ( 2 , 4 ) #NEWLINE#
server . starttls ( ) #NEWLINE#
df = pd . DataFrame ( { i : list ( range ( 1000 ) ) for i in range ( 100 ) } ) #NEWLINE# df . ix [ : 5 , : 10 ] #NEWLINE#
settings [ 'INSTALLED_APPS' ] += 'another_app' , #NEWLINE#
yield os . path . join ( path , fname ) #NEWLINE#
tk . mainloop ( ) #NEWLINE#
turtle . goto ( x , y ) #NEWLINE#
new_instance = MyModel ( month = 'JANUARY' ) #NEWLINE#
ob_list = data . objects . filter ( name__in = my_list ) #NEWLINE#
unittest . main ( ) #NEWLINE#
results . sort ( key = lambda x : x [ 0 ] , reverse = True ) #NEWLINE#
self . xsb . grid ( row = 1 , column = 0 , sticky = 'ew' ) #NEWLINE#
args = './logs/log.out' , "when='S'" , 'interval=10' , 'backupCount=5' #NEWLINE#
temp = line . split ( '|' , 1 ) #NEWLINE#
return [ bytes ( data , 'utf-8' ) ] #NEWLINE#
r . db_create ( 'test' ) . run ( ) #NEWLINE#
print ( ( 'full#SPACE#path#SPACE#=' , os . path . abspath ( pathname ) ) ) #NEWLINE#
return getattr ( obj , name ) #NEWLINE#
main ( ) #NEWLINE#
re . match ( '(?:(\\d+)Y)?(?:(\\d+)M)?' , '3M' ) . groups ( ) #NEWLINE#
oshape ( 'a' , 'b' , 'c' ) #NEWLINE#
os . sysconf ( 2 ) #NEWLINE#
[ ( 'C' , 'BDFBDF1' ) , ( 'D' , 'DDDFEB' ) , ( 'E' , 'EADEAC' ) , ( 'O' , 'CEDEAE2' ) ] #NEWLINE#
pygame . quit ( ) #NEWLINE#
print ( '%s#SPACE#:#SPACE#%s' % ( k , v ) ) #NEWLINE#
data = pd . DataFrame ( list ( data . items ( ) ) ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 'a' , 'b' , 'c' ] ] #NEWLINE#
return v . lower ( ) in ( 'yes' , 'true' , 't' , '1' ) #NEWLINE#
self . progbar . pack ( ) #NEWLINE#
self . Bind ( wx . EVT_CLOSE , self . _on_close ) #NEWLINE#
for i , statN in enumerate ( lstStat ) : #NEWLINE# #INDENT# ws . cell ( row = i + 2 , column = 1 ) . value = statN #NEWLINE#
self . Bind ( wx . EVT_TEXT , self . OnFiltr , self . filtr ) #NEWLINE#
res = mechanize . urlopen ( req ) #NEWLINE#
pylab . show ( ) #NEWLINE#
button . clicked . connect ( myFunction ) #NEWLINE#
writer . writerow ( row + [ 'Berry' ] ) #NEWLINE#
user = models . ForeignKey ( User , unique = True ) #NEWLINE#
print ( 'P#SPACE#' + str ( num ) + ':#SPACE#' + str ( self . d ) ) #NEWLINE#
session . sendmail ( sender , recipients , message ) #NEWLINE#
tmp = sp . call ( 'clear' , shell = True ) #NEWLINE#
set ( [ 'stackoverflow' , 'serverfault' ] ) . issubset ( sites ) #NEWLINE# set ( [ 'stackoverflow' , 'google' ] ) . issubset ( sites ) #NEWLINE#
if '=' in line : #NEWLINE# #INDENT# param , value = line . split ( '=' , 1 ) #NEWLINE#
b / ( b - 1 ) #NEWLINE#
opener . open ( 'http://google.com/' ) . read ( ) #NEWLINE#
return { k : list ( map ( add_element , v ) ) for k , v in list ( dicty . items ( ) ) } #NEWLINE#
df = pd . DataFrame . from_dict ( d ) #NEWLINE#
print ( 'this#SPACE#should#SPACE#fail!' ) #NEWLINE#
gettext . textdomain ( 'myapp' ) #NEWLINE#
print ( 'Good#SPACE#luck.#SPACE#Python#SPACE#is#SPACE#fun.' ) #NEWLINE#
print ( '\n' . join ( map ( '#SPACE#|#SPACE#' . join , itertools . combinations ( l , i + 1 ) ) ) ) #NEWLINE#
myMember = Member . get_by_key_name ( 'lipis' ) #NEWLINE#
cur . close ( ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
t . start ( ) #NEWLINE#
test ( objs , lambda x : x . bar ( ) ) #NEWLINE#
print ( type ( Foo . __dict__ ) ) #NEWLINE#
__init__ . py #NEWLINE#
latex_elements = { 'pointsize' : '10pt' } #NEWLINE#
plt . colorbar ( im , cax = cax ) #NEWLINE#
self . log = logging . getLogger ( self . __class__ . __name__ ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
df_Quota = pd . DataFrame ( ) #NEWLINE#
index_sets = [ np . argwhere ( i == a ) for i in np . unique ( a ) ] #NEWLINE#
df [ 'B' ] = idx . to_series ( ) . str [ 1 ] #NEWLINE#
super ( MyEntry , self ) . __init__ ( ) #NEWLINE#
floor ( 3.1415 ) #NEWLINE#
canvas . pack ( ) #NEWLINE#
output = process . stdout . read ( ) #NEWLINE#
fpOutput = np . memmap ( 'MemmapOutput' , dtype = 'bool' , mode = 'r+' , shape = ( 3 , 4 ) ) #NEWLINE#
result = np . minimum ( arr , 255 ) #NEWLINE#
x = x or y #NEWLINE#
plt . bar ( idx , c [ 0 ] , color = hexencode ( c [ 1 ] ) , edgecolor = hexencode ( c [ 1 ] ) ) #NEWLINE#
return f ( a , b ) #NEWLINE#
threading . Thread ( target = urllib . request . urlopen , args = ( 'COOL#SPACE#WEBSITE' , ) ) . start ( ) #NEWLINE#
MyTestCase . run ( ) #NEWLINE#
numpy . linalg . norm ( a - b , ord = 1 ) #NEWLINE#
print ( 'answer#SPACE#=#SPACE#{}' . format ( function ( ) ) ) #NEWLINE#
return render ( request , 'registration/step3.html' ) #NEWLINE#
plt . show #NEWLINE#
typing . _eval_type ( Node . _field_types [ 'edges' ] , globals ( ) , locals ( ) ) #NEWLINE#
out = a [ np . sort ( sidx [ np . searchsorted ( a , b , sorter = sidx ) ] ) ] #NEWLINE#
sys . stderr = sys . stdout = logFile = open ( tmpLogFileName , 'a' ) #NEWLINE#
[ 1 , 1 , 0 , 1 ] #NEWLINE#
datetime . datetime . fromtimestamp ( float ( str ( timestamp ) [ 0 : - 3 ] ) ) #NEWLINE#
df = pd . DataFrame ( rows_list , columns = [ 'date' , 'symbol' , 'action' , 'value' ] ) #NEWLINE# df . sort ( [ 'date' ] ) #NEWLINE#
file . write ( html ) #NEWLINE#
print ( int ( s ) ) #NEWLINE#
new_commit = repo . index . commit ( 'new#SPACE#message' ) #NEWLINE#
[ [ 2 , 1 , 2 ] , [ 4 , 6 , 5 , 3 , 7 , 8 ] ] #NEWLINE#
df = df . append ( data ) #NEWLINE#
new_set = { 'hello' } #NEWLINE#
ax1 . scatter ( X , Y , Z ) #NEWLINE#
p . start ( ) #NEWLINE#
main ( ) #NEWLINE#
config . add_view ( lambda ctx , req : ctx , 'pyramid.httpexceptions.HTTPException' ) #NEWLINE#
conn = httplib . HTTPConnection ( '223.56.124.58' , 8080 ) #NEWLINE#
[ 3 , 4 , 5 ] #NEWLINE#
os . kill ( 8861 , 0 ) #NEWLINE#
list ( zip ( * itertools . zip_longest ( * ll ) ) ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
tkMessageBox . showerror ( 'ERROR' , 'Det#SPACE#har#SPACE#skjedd#SPACE#en#SPACE#feil..#SPACE#Sjekk#SPACE#ordet#SPACE#ditt.' ) #NEWLINE#
return list ( set ( a ) & set ( b ) ) #NEWLINE#
s . diff ( ) . fillna ( 0 ) #NEWLINE#
pat = re . compile ( '([A-Z][a-z]*)' ) #NEWLINE#
c . execute ( "INSERT#SPACE#INTO#SPACE#dog#SPACE#VALUES(NULL,#SPACE#'spot')" ) #NEWLINE#
f = h5py . File ( '/tmp/temp.hdf' , 'r' ) #NEWLINE#
return [ ( row if all ( row ) else [ 0 ] * len ( row ) ) for row in matrix ] #NEWLINE#
widget . setWindowFlags ( QtCore . Qt . Window ) #NEWLINE#
update_list ( l , [ 4 , 5 , 6 ] ) #NEWLINE#
re . sub ( pattern , '\\1#SPACE#xby#SPACE#' , '2x4x12' ) #NEWLINE#
log = logging . getLogger ( '' ) #NEWLINE#
print ( 'Welcome,#SPACE#master!' ) #NEWLINE#
traceback . print_stack ( ) #NEWLINE#
args [ 0 ] . __disown__ ( ) #NEWLINE#
driver . get ( 'http://www.omegle.com/' ) #NEWLINE#
LOCALIZED = True #NEWLINE#
not any ( data ) #NEWLINE#
match ( a , b ) #NEWLINE#
ax1 . plot ( xx , y1 , c = 'blue' , zorder = 1 ) #NEWLINE#
exclude_patterns = [ '**/*admin*' ] #NEWLINE#
os . chmod ( path , 128 ) #NEWLINE#
print ( whisper ( ) ) #NEWLINE#
'c:' , 'c:/' , 'c:foo' , 'c:/foo' , 'c:/users/john/foo.txt' #NEWLINE#
return '\n' . join ( '\t' . join ( i ) for i in pairs ) #NEWLINE#
plt . show ( ) #NEWLINE#
nx . dijkstra_path_length ( g , 'b' , 'c' , 'distance' ) #NEWLINE#
manufacturer = models . ForeignKey ( 'production.Manufacturer' ) #NEWLINE#
f ( 'blah#SPACE#bloh#SPACE#blup' ) #NEWLINE#
f . write ( 'ਊline1\nÿline2\n' ) #NEWLINE#
time . sleep ( 120 ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
parser . add_option ( '-f' , '--file' , dest = 'filename' ) #NEWLINE#
q . enqueue ( 'my_package.my_module.my_func' , 3 , 4 ) #NEWLINE#
from lxml import etree #NEWLINE#
re . search ( '[^9]*(99)?' , 'aa9x99bb' ) . groups ( ) #NEWLINE#
cnx . commit ( ) #NEWLINE#
t + np . r_ [ t [ 1 : ] , t [ 0 ] ] #NEWLINE#
shutil . copy2 ( file , '×\x90' ) #NEWLINE#
request . add_data ( edata ) #NEWLINE#
print ( Template ( ) . format ( '{0:h}#SPACE#{1:d}' , '<hello>' , 123 ) ) #NEWLINE#
userProfile . save ( ) #NEWLINE#
'' . join ( difflib . restore ( diff , 1 ) ) == '' . join ( foo ) #NEWLINE#
open ( '3mil.txt' , 'w' ) . writelines ( lines ) #NEWLINE#
list ( data [ 'realms' ] [ 0 ] . keys ( ) ) #NEWLINE#
print ( 'done' ) #NEWLINE#
memcache_client = memcache . Client ( [ '127.0.0.1:11211' ] , debug = True ) #NEWLINE#
plot . savefig ( string . Template ( 'hanning${num}.pdf' ) . substitute ( locals ( ) ) ) #NEWLINE#
def __str__ ( self ) : #NEWLINE# #INDENT# return 'foo' #NEWLINE#
[ a for a in alphastartgen ( 8 ) ] #NEWLINE#
{ i [ 0 ] : map ( int , j ) for i , j in p } #NEWLINE#
cur . execute ( 'SELECT#SPACE#ouch#SPACE#FROM#SPACE#aargh;' ) #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
self . fig . canvas . draw ( ) #NEWLINE#
p5 = axScatter . plot ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] , 'r--' ) #NEWLINE#
[ 0 , 0.1 , 0.2000000001 , 0.3000000001 ] #NEWLINE#
return cursor . fetchall ( ) #NEWLINE#
dockerpty . PseudoTerminal ( client , container ) . start ( ) #NEWLINE#
canvas . grid ( ) #NEWLINE#
pyflakes - - version #NEWLINE#
parser . add_argument ( '--bar' , help = 'do#SPACE#something#SPACE#else.' ) #NEWLINE#
im2col_sliding_broadcasting ( a , ( 2 , 3 ) , stepsize = 2 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
parser . error ( 'incorrect#SPACE#number#SPACE#of#SPACE#arguments' ) #NEWLINE#
json . dumps ( arrays ) #NEWLINE#
client . execute ( "LOAD#SPACE#TABLE#SPACE#LOCAL#SPACE#INPATH#SPACE#'/path'#SPACE#INTO#SPACE#TABLE#SPACE#r" ) #NEWLINE#
client . execute ( 'CREATE#SPACE#TABLE#SPACE#r(a#SPACE#STRING,#SPACE#b#SPACE#INT,#SPACE#c#SPACE#DOUBLE)' ) #NEWLINE#
peoples = Person . objects . all ( ) #NEWLINE#
AUTHENTICATION_BACKENDS = 'social.backends.steam.SteamOpenId' , #NEWLINE#
print ( 'Nope,#SPACE#that#SPACE#is#SPACE#not#SPACE#a#SPACE#two.#SPACE#That#SPACE#is#SPACE#a' , x ) #NEWLINE#
df = pd . concat ( dfs , ignore_index = True ) #NEWLINE#
dns = dpkt . dns . DNS ( qd = [ dpkt . dns . DNS . Q ( name = 'esp01.local' ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
fun ( ) #NEWLINE#
return super ( GalleryItemModuleSerializer , self ) . to_representation ( obj ) #NEWLINE#
db . Execute ( "INSERT#SPACE#INTO#SPACE#test#SPACE#VALUES#SPACE#('ABC',#SPACE#3)" ) #NEWLINE#
ax . plot ( t , s1 , 'b-' , label = 'dots' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Success:' , os . environ [ 'LD_LIBRARY_PATH' ] ) #NEWLINE#
print ( '{0}:#SPACE#{1}' . format ( k , v ) ) #NEWLINE#
datetime . datetime . strptime ( date_string , format1 ) . strftime ( format2 ) #NEWLINE#
dict ( x . split ( ':' ) for x in a ) #NEWLINE#
json . dumps ( my_dict ) #NEWLINE#
dict ( zip ( freq [ 1 : : 2 ] , freq [ 0 : : 2 ] ) ) #NEWLINE#
config [ 'see?' ] #NEWLINE#
[ ( l [ i ] , l [ ( i + 1 ) % n ] ) for i in range ( n ) ] #NEWLINE#
plt . colorbar ( sm ) #NEWLINE#
self . autocomplete ( ) #NEWLINE#
string_input = '' . join ( current_string ) #NEWLINE#
my_list #NEWLINE#
numbers [ start : ] + numbers [ : start ] #NEWLINE#
f . close ( ) #NEWLINE#
print ( '{}#SPACE#=#SPACE#{}' . format ( r , x ) ) #NEWLINE#
status = call ( [ 'mvn' , 'compile' ] , cwd = '/users/foo/xxx' ) #NEWLINE#
new_list = [ x for x in myList if x . age == 30 ] #NEWLINE#
subprocess . check_call ( [ 'ping' , '-c1' , ip ] , stdout = DEVNULL ) #NEWLINE#
df [ 'Holiday' ] = df [ 'Date' ] . isin ( holidays ) #NEWLINE#
soup [ 0 ] . encode ( 'ascii' ) #NEWLINE#
{ 'Name' : 'Aardvark' , 'Priority' : '1' , 'Row' : '4' , 'Year' : '2000' } , #NEWLINE#
{ 'Name' : 'Wallaby' , 'Priority' : '1' , 'Row' : '5' , 'Year' : '2000' } , #NEWLINE#
{ 'Name' : 'Fish' , 'Priority' : '2' , 'Row' : '2' , 'Year' : '1998' } , #NEWLINE#
print ( 'Done#SPACE#setting#SPACE#up' ) #NEWLINE#
__init__ . py #NEWLINE#
plt . show ( ) #NEWLINE#
df . columns = df . columns . str . lower ( ) . str . replace ( '#SPACE#' , '_' ) #NEWLINE#
DOWNLOADER_MIDDLEWARES = { 'myproject.middlewares.TestDownloader' : 400 } #NEWLINE#
return super ( O5 , self ) . __getattribute__ ( name ) #NEWLINE#
application = webapp . WSGIApplication ( [ ( '/city' , ShowCityPage ) ] , debug = True ) #NEWLINE#
last_row . argsort ( ) #NEWLINE#
print ( 'Non-linear#SPACE#results#SPACE#(should#SPACE#be#SPACE#{},#SPACE#{},#SPACE#{}):' . format ( a , b , c ) ) #NEWLINE#
d = { a : 'a' , b : 'b' , c : 'c' , e : 'e' } #NEWLINE#
C = 1 - np . prod ( D , axis = 1 ) #NEWLINE#
r = [ x for x in powerset ( l ) ] #NEWLINE#
fp . close ( ) #NEWLINE#
simplejson . dumps ( d , ignore_nan = True ) #NEWLINE#
a_new = np . delete ( a , 3 , 0 ) #NEWLINE#
settings [ 'libraries' ] . append ( 'odbc' ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
b = np . roll ( np . roll ( a , 1 , axis = 0 ) , 1 , axis = 1 ) [ : 3 , : 3 ] #NEWLINE#
w . show ( ) #NEWLINE#
o . write ( line ) #NEWLINE#
print ( chr ( 25105 ) ) #NEWLINE#
fox . quit ( ) #NEWLINE#
Paragraph ( para1 , style = StyleSheet [ 'Normal' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
A = coo_matrix ( ( values , coords . T ) ) #NEWLINE#
[ 1 , 2 , 3 ] . index ( 4 ) #NEWLINE#
ax . plot_wireframe ( x , y , z , rstride = 4 , cstride = 4 , color = 'b' , alpha = 0.2 ) #NEWLINE#
person . put ( ) #NEWLINE#
self . setWindowTitle ( 'Window#SPACE#Title' ) #NEWLINE#
Base . metadata . create_all ( ) #NEWLINE#
conn . recv ( 1024 ) #NEWLINE#
module . main ( ) #NEWLINE#
return sys . stdin . readline ( ) #NEWLINE#
ax . set_xlim3d ( - 1 , 21 ) #NEWLINE#
name = db . StringProperty ( ) #NEWLINE#
display ( w ) #NEWLINE#
sys . path . append ( path ) #NEWLINE#
A = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
sys . stdout . close ( ) #NEWLINE#
re . findall ( '\\bfoo\\b' , strs ) #NEWLINE#
ax . set_xlabel ( 'Day' ) #NEWLINE#
fout . write ( line . replace ( '\n' , ',#SPACE#' + str ( data [ index ] ) + '\n' ) ) #NEWLINE#
foo . bar #NEWLINE#
driver . get ( 'http://jsfiddle.net/9pKMU/show/' ) #NEWLINE#
return view_func ( request , * args , ** kwargs ) #NEWLINE#
plt . legend ( ) #NEWLINE#
df . loc [ : , ( ~ df . columns . str . contains ( 'prefix$' ) ) ] #NEWLINE#
line = self . app . stdout . readline ( ) #NEWLINE#
ax . scatter ( x , y , s = 25 , c = c , cmap = plt . cm . coolwarm , zorder = 10 ) #NEWLINE#
app . logger . debug ( 'TESTING!' ) #NEWLINE#
m1_dicts = [ d for d in dictionaries_list if d [ 't' ] in tuple_dict [ 't' ] ] #NEWLINE#
print ( 'Hello,#SPACE#World' ) #NEWLINE#
setattr ( self , mangle_attr ( somecls , '__X' ) , value ) #NEWLINE#
my_worker . start . emit ( 'hello' ) #NEWLINE#
{ 'TIME' : 41387.756506481 , 'Watts' : 0.234772 } , #NEWLINE#
{ 'TIME' : 41387.756574386 , 'Watts' : 0.235587 } , #NEWLINE#
{ 'TIME' : 41387.756580046 , 'Watts' : 0.235089 } , #NEWLINE#
{ 'TIME' : 41387.756585706 , 'Watts' : 0.235041 } , #NEWLINE#
{ 'TIME' : 41387.756597013 , 'Watts' : 0.234617 } , #NEWLINE#
{ 'TIME' : 41387.756591365 , 'Watts' : 0.235412 } , #NEWLINE#
self . _build_data ( ) #NEWLINE#
my_stuff . append ( 'jacket' ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
dateutil . parser . parse ( '20th#SPACE#June' ) #NEWLINE#
from_file . readline ( ) #NEWLINE#
year_hour_means = df . resample ( 'H' , how = 'mean' ) #NEWLINE#
return authlogout ( request , * args , ** kwargs ) #NEWLINE#
parser . add_argument ( '-B' , action = 'store_true' ) #NEWLINE#
parser . add_argument ( '-A' , action = 'store_true' ) #NEWLINE#
{ 'a' : ( '1' , '1' ) , 'b' : ( '2' , '2' ) , 'c' : ( '3' , '3' ) } #NEWLINE#
return HttpResponse ( escape ( repr ( request ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . get_yaxis ( ) . set_label_coords ( - 0.1 , 0.5 ) #NEWLINE#
cur . execute ( 'insert#SPACE#into#SPACE#test(d)#SPACE#values#SPACE#(?)' , ( d , ) ) #NEWLINE#
list ( chain ( * a ) ) #NEWLINE#
any ( dict_obj . get ( prop ) is None for prop in properties_to_check_for ) #NEWLINE#
fig . savefig ( 'img/test.png' ) #NEWLINE#
sys . path . append ( 'C:\\Path\to\\your\x07ssemblies' ) #NEWLINE#
print ( cursor . lastrowid ) #NEWLINE#
all ( not X for X in dict . values ( ) ) #NEWLINE#
print ( line . rstrip ( '\n' ) ) #NEWLINE#
transmission_array . extend ( [ 1 ] * 400 * slot_duration ) #NEWLINE#
amqp . run ( 'queue.purge' , 'name_of_your_queue' ) #NEWLINE#
plt . setp ( cg . ax_heatmap . yaxis . get_majorticklabels ( ) , rotation = 0 ) #NEWLINE#
print ( subprocess . check_output ( [ 'ping' , '-n' , '2' , '-w' , '2' , '1.1.1.1' ] ) ) #NEWLINE#
struct . calcsize ( 'i' ) #NEWLINE#
print ( datetime . strptime ( '20110531' , '%Y%m%d' ) ) #NEWLINE#
[ '[hello#SPACE#[world]]' , '#SPACE#abc#SPACE#' , '[123]' , '#SPACE#' , '[xyz#SPACE#jkl]' ] #NEWLINE#
np . einsum ( 'ij,jk,ik->i' , a , b , a ) #NEWLINE#
df . loc [ ~ df [ 'A' ] . duplicated ( ) ] #NEWLINE#
datetime . datetime . now ( ) . strftime ( '%Y%m%d' ) #NEWLINE#
result = bytes . fromhex ( some_hex_string ) #NEWLINE#
logger = logging . getLogger ( 'my-logger' ) #NEWLINE# logger . propagate = False #NEWLINE#
print ( 'result#SPACE#true' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
print ( find_key ( example_dict , 'value4ac' ) ) #NEWLINE#
sys . __class__ . __dict__ [ '__repr__' ] ( sys ) #NEWLINE#
print ( sorted ( sub_strings , key = lambda x : levenshtein_distance ( x , s ) ) [ 0 ] ) #NEWLINE#
( b [ 1 : ] - b [ : - 1 ] ) . any ( - 1 ) #NEWLINE#
df . query ( 'city#SPACE#==#SPACE#city#SPACE#or#SPACE#(latitude#SPACE#==#SPACE#latitude#SPACE#and#SPACE#longitude#SPACE#==#SPACE#longitude)' ) #NEWLINE#
yield os . path . join ( path , filename ) #NEWLINE#
f . close ( ) #NEWLINE#
19.3 , 19.9 , 20.1 , 19.8 , 20.0 , 19.7 , 19.6 , 19.5 , 20.2 , 20.3 , 18.7 , 18.8 #NEWLINE#
input_file . close ( ) #NEWLINE#
PLT . show ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US.UTF-8' ) #NEWLINE#
self . sock . bind ( ( self . host , self . port ) ) #NEWLINE#
meds [ index ] = med . replace ( '#SPACE#Cap(s)' , '#SPACE#1#SPACE#Cap(s)' ) #NEWLINE#
path = os . path . realpath ( path ) #NEWLINE#
'%s/%s/%s' % ( dt . month , dt . day , dt . year ) #NEWLINE#
merged_df = pd . concat ( dfs , axis = 1 ) #NEWLINE#
return 'Daily,#SPACE#%s' % self . data [ 1 : ] #NEWLINE#
regex = '\\[P\\]#SPACE#(.+?)#SPACE#\\[/P\\]+?' #NEWLINE#
parser . add_argument ( '-l' , '--log-file' , default = '/var/log/eg_daemon.log' ) #NEWLINE#
deserialized_object . save ( ) #NEWLINE#
app . logger . setLevel ( logging . ERROR ) #NEWLINE#
[ ( '%s:%s' % ( x , y ) ) for x , y in itertools . product ( a , b ) ] #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
plt . plot ( xav , yav , 'k.' , zorder = 100 ) #NEWLINE#
ax . set_title ( 'Periods#SPACE#of#SPACE#Paw#SPACE#Contact' ) #NEWLINE#
with open ( 'ixto.msg' , 'rb' ) as f : #NEWLINE# #INDENT# unp = msgpack . unpackb ( f . read ( ) ) #NEWLINE#
os . getcwd ( ) #NEWLINE#
Counter ( list ( d . values ( ) ) ) #NEWLINE#
super ( YourSerializer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
environment . filters [ 'myplural' ] = my_plural #NEWLINE#
a [ 0 ] = 5 #NEWLINE#
my_tuple = tuple ( my_list ) #NEWLINE#
app . register_blueprint ( api_v2 , url_prefix = '/v2' ) #NEWLINE#
a = 'Ã¨' . decode ( 'UTF-8' ) #NEWLINE#
[ ( v1 * list1 [ j ] ) for i , v1 in enumerate ( list1 ) for j in range ( i ) ] #NEWLINE#
s . decode ( 'utf-8-sig' ) #NEWLINE#
fig . savefig ( 'temp.png' ) #NEWLINE#
fact = lambda x : 1 if x == 0 else x * fact ( x - 1 ) #NEWLINE#
return random . randint ( 10 ** ( x - 1 ) , 10 ** x - 1 ) #NEWLINE#
print ( "It's#SPACE#all#SPACE#letters" ) #NEWLINE#
writer . writerows ( out_data ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE##SPACE#Error:#SPACE#Sleep#SPACE#duration#SPACE#{}#SPACE#is#SPACE#not#SPACE#numeric' . format ( ) ) #NEWLINE#
obj . user . set_password ( obj . user . password ) #NEWLINE#
client . connect ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ df . a < df . a . quantile ( 0.95 ) ] #NEWLINE#
sorted ( [ 'Some' , 'words' , 'sort' , 'differently' ] , key = lambda word : word . lower ( ) ) #NEWLINE#
a = subprocess . Popen ( 'cdrecord#SPACE#--help' , shell = True , stdout = subprocess . PIPE ) #NEWLINE#
webapp . template . register_template_library ( 'django_hack' ) #NEWLINE#
print ( '+' + str ( score ) ) #NEWLINE#
list_of_lists #NEWLINE#
parser . add_argument ( 'arg2' ) #NEWLINE#
new_list = list ( set ( [ date for date in dates if dates . count ( date ) > 1 ] ) ) #NEWLINE#
dd [ d [ 'host' ] , d [ 'db_name' ] ] . append ( d ) #NEWLINE#
self . opt . stdin . write ( '%i\n' % x ) #NEWLINE#
time . mktime ( dt_obj . timetuple ( ) ) #NEWLINE#
response . close ( ) #NEWLINE#
print ( '%s#SPACE#as#SPACE#an#SPACE#int#SPACE#is#SPACE#%d' % ( str ( value ) , int ( value ) ) ) #NEWLINE#
'#%02X0000' % x #NEWLINE#
print ( 'exÃ¡mple' . encode ( 'utf-8' ) . upper ( ) . decode ( 'utf-8' ) ) #NEWLINE#
len ( buf . read ( ) ) #NEWLINE#
print ( np . abs ( s [ 0 ] - s [ 1 ] ) / std ) #NEWLINE#
df [ 0 : 2 ] #NEWLINE#
cursor = collection . find ( modifiers = { '$snapshot' : True } ) #NEWLINE#
pd . read_hdf ( 'test.h5' , 'df' , where = 'symbol="a"' ) #NEWLINE#
df . mean ( ) #NEWLINE#
URL . split ( '/' ) [ - 1 ] #NEWLINE#
func ( ) #NEWLINE#
socket . bind ( 'tcp://*:5555' ) #NEWLINE#
print ( ( lambda x : chr ( ord ( x ) + 1 ) ) ( i ) ) #NEWLINE#
parser . add_argument ( 'file2' , nargs = '+' , metavar = 'file' , help = argparse . SUPPRESS ) #NEWLINE#
stream = open ( 'path/to/output' , 'w' ) #NEWLINE#
bar1 = plt . plot ( [ ] , marker = 's' , markersize = 15 , linestyle = '' , label = '2015' ) #NEWLINE#
tkinter . deletefilehandler ( file ) #NEWLINE#
time . sleep ( random . randint ( 1 , 4 ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
print ( 'sum#SPACE#of#SPACE#' + str ( a ) + '#SPACE#and#SPACE#' + str ( b ) + '#SPACE#is#SPACE#' + str ( c ) ) #NEWLINE#
client . load_system_host_keys ( ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
return ( index for index , value in enumerate ( obj ) ) #NEWLINE#
imgc = cv2 . imread ( file , 0 ) #NEWLINE#
vbox . setContentsMargins ( 0 , 0 , 0 , 0 ) #NEWLINE#
{ 'host' : 'localhost' , 'db_name' : 'test' , 'table' : 'sales' } , #NEWLINE#
{ 'host' : 'localhost' , 'db_name' : 'new' , 'table' : 'partners' } , #NEWLINE#
{ 'host' : 'localhost' , 'db_name' : 'new' , 'table' : 'users' } , #NEWLINE#
{ 'host' : 'localhost' , 'db_name' : 'new' , 'table' : 'sales' } , #NEWLINE#
answer = map ( len , re . findall ( '1+' , test_string ) ) #NEWLINE#
locale . setlocale ( locale . LC_TIME , 'en_US' ) #NEWLINE#
df = np . dot ( df , p_value ) #NEWLINE#
s = '1.23,2.4,3.123' #NEWLINE# total = sum ( map ( float , s . split ( ',' ) ) ) #NEWLINE#
pool . apply_async ( test2 , ( t , ) , [ dict ( arg2 = 5 ) ] ) #NEWLINE#
type ( b ) ( a ) #NEWLINE#
return Session . objects . filter ( pk__in = user_sessions ) #NEWLINE#
object . save ( ) #NEWLINE#
print ( rawstr ( test6 ) ) #NEWLINE#
print ( '' . join ( '%-5s' % item for item in s . split ( '\t' ) ) ) #NEWLINE#
print ( 'Mean#SPACE#of#SPACE#frame#SPACE#%i#SPACE#is#SPACE#%1.1f' % ( i , im . mean ( ) ) ) #NEWLINE#
return [ sum ( g ) for b , g in itertools . groupby ( bits ) if b ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( subg . edges ( ) ) #NEWLINE#
print ( '#SPACE#' . join ( map ( str , xs ) ) ) #NEWLINE#
[ it for it in l for _ in range ( 2 ) ] #NEWLINE#
a = df . iloc [ : , 2 : ] . values #NEWLINE#
pickle . dump ( data1 , output ) #NEWLINE#
server . quit ( ) #NEWLINE#
tree = etree . parse ( 'input.xml' , parser = parser ) #NEWLINE#
fh . write ( 'We#SPACE#are#SPACE#the#SPACE#knights#SPACE#who#SPACE#say#SPACE#Ni!\n' ) #NEWLINE#
admin . site . register ( MyPost , MyPostAdmin ) #NEWLINE#
plt . show ( ) #NEWLINE#
len ( tested ) == len ( input ) #NEWLINE#
response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=Export.xml' #NEWLINE#
int ( bits [ : : - 1 ] , 2 ) . to_bytes ( 4 , 'little' ) #NEWLINE#
df [ 'Season2' ] = df [ 'Season' ] . apply ( split_it ( x ) ) #NEWLINE#
value5 = { 'and' : 'so' , 'are' : 'dictionaries' } #NEWLINE#
cipher . decrypt ( ciphertext ) #NEWLINE#
zip = zipfile . ZipFile ( buffer , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
[ 'abc123#SPACE#def' , 'abc123def' ] #NEWLINE#
print ( '%s=%s#SPACE#(%s)' % ( output . key , output . value , output . description ) ) #NEWLINE#
pool = mp . Pool ( processes = 4 ) #NEWLINE#
plt . gcf ( ) . set_size_inches ( 10 , 10 ) #NEWLINE#
pygame . draw . circle ( surf1 , ( 0 , 0 , 200 , 100 ) , ( 100 , 100 ) , 100 ) #NEWLINE#
print ( [ b ( 5 , 8 ) for b in bases ] ) #NEWLINE#
cv . Remap ( image , remapped , mapX , mapY , cv . CV_INTER_LINEAR ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
index = np . argmax ( mask , axis = - 1 ) #NEWLINE#
setup ( console = [ 'main.py' ] ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #INDENT# a = None #NEWLINE#
ax . xaxis . set_ticks ( [ 1.0 , 2.0 , 3.0 , 10.0 ] ) #NEWLINE#
np . fromfunction ( lambda i , j : i + j , ( 3 , 3 ) , dtype = int ) #NEWLINE#
print ( df . loc [ mask ] ) #NEWLINE#
im . show ( ) #NEWLINE#
a [ tuple ( idx ) ] = 5 #NEWLINE#
df_output_lines = [ s . split ( ) for s in fixed_df_output . splitlines ( ) ] #NEWLINE#
info = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] , [ 'g' , 'h' , 'i' ] ] #NEWLINE#
next ( ( x for x in range ( 10 ) if x == 7 ) , None ) #NEWLINE#
centroids = [ prefs [ random . choice ( users ) ] for i in range ( k ) ] #NEWLINE#
second_d = { k : v for k , v in list ( first_d . items ( ) ) if k in ( 2 , 3 ) } #NEWLINE#
app . run ( host = '0.0.0.0' , debug = True ) #NEWLINE#
a1 = [ ( sublist + [ 'a' ] ) for sublist in a ] #NEWLINE#
root . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
info = collection . find_one ( obj_id ) #NEWLINE#
reader . SetFileName ( 'my_input_data.vtk' ) #NEWLINE#
pstdev ( [ 1 , 2 , 3 ] ) #NEWLINE#
ax . set ( xticklabels = [ 'A' , 'B' , 'C' ] , xlabel = name ) #NEWLINE#
ast . literal_eval ( '"Hello,#SPACE#world!"' ) #NEWLINE#
ast . literal_eval ( '7' ) #NEWLINE#
a = np . array ( [ [ 1 , 1 ] , [ 2 , 2 ] , [ 4 , 4 ] ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
logger . removeHandler ( hdl ) #NEWLINE#
np . array ( [ np . array ( x ) for x in set ( tuple ( x ) for x in a ) ] ) #NEWLINE#
p = subprocess . Popen ( [ 'php' , script_path ] , stdout = subprocess . PIPE ) #NEWLINE#
return euclid ( nums [ 1 ] , gcd ( nums [ : 2 ] ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df [ ( df . foo == 222 ) | ( df . bar == 444 ) ] #NEWLINE#
ordering = [ 'user__username' ] #NEWLINE#
open ( 'csvtest.csv' , 'rb' ) . read ( ) #NEWLINE#
df . columns = [ 'a' , 'b' ] #NEWLINE# df #NEWLINE#
return '{0}' . format ( self . lname ) #NEWLINE#
return len ( s ) - len ( s . rstrip ( '0' ) ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
print ( hasattr ( Foo , 'BAR' ) ) #NEWLINE#
plt . clabel ( CS , inline = 1 , fontsize = 10 ) #NEWLINE#
new_data = np . loadtxt ( 'test.txt' ) #NEWLINE#
plt . ylim ( plt . ylim ( ) [ 0 ] , 1.0 ) #NEWLINE#
print ( repr ( '\n' . join ( [ 'I' , 'would' , 'expect' , 'multiple' , 'lines' ] ) ) ) #NEWLINE#
struct . pack ( '>H' , 824 ) #NEWLINE#
struct . pack ( '<H' , 824 ) #NEWLINE#
plt . show ( ) #NEWLINE#
br . submit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . write ( os . read ( fd , 1024 ) ) #NEWLINE#
[ 'Earl' , 'Frank' , 'Alice' , 'Dave' , 'Carl' , 'Carl_1' , 'Carl_2' , 'Bob' , 'Bob_1' ] #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
df = pd . concat ( [ df , market ] , axis = 1 ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
all ( v in value for v in input_list ) #NEWLINE#
gc . garbage #NEWLINE#
df . withColumn ( 'day' , day ( df . date_time ) ) #NEWLINE#
df . _jdf . insertIntoJDBC ( url , 'baz' , True ) #NEWLINE#
print ( 'log#SPACE#msg' , file = sys . stderr ) #NEWLINE#
numpy . kron ( a , [ [ 1 , 1 ] , [ 1 , 1 ] ] ) #NEWLINE#
print ( d [ k ] ) #NEWLINE#
self . top . destroy ( ) #NEWLINE#
matcher = re . compile ( '(.)\\1*' ) #NEWLINE#
plt . show ( ) #NEWLINE#
w . configure ( inactiveselectbackground = w . cget ( 'selectbackground' ) ) #NEWLINE#
df = pd . DataFrame . from_csv ( 'data.csv' , sep = '|' ) #NEWLINE#
len ( m . group ( 0 ) ) == len ( 'aa' ) #NEWLINE#
return HttpResponse ( 'Success' ) #NEWLINE#
subprocess . check_output ( [ 'scrapy' , 'crawl' , spider_name , '-o' , 'output.json' ] ) #NEWLINE#
logger . info ( 'end#SPACE#of#SPACE#test#SPACE#code' ) #NEWLINE#
return '"' + s + '"' #NEWLINE#
cv2 . imshow ( 'im' , crop_img ) #NEWLINE#
def copyf ( dictlist , key , valuelist ) : #NEWLINE# #INDENT# return [ dictio for dictio in dictlist if dictio [ key ] in valuelist ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . ylabel ( 'ylabel' , fontsize = 16 ) #NEWLINE#
print ( list ( range ( len ( words ) ) ) ) #NEWLINE#
cf . insert ( uuid . uuid4 ( ) , [ { k : str ( v ) for k , v in d . items ( ) } for d in x ] ) #NEWLINE#
np . isfinite ( b ) #NEWLINE#
Counter ( { '15.5' : 200 , '14.5' : 100 , '16.5' : 100 , '13.5' : 100 } ) #NEWLINE#
[ 'x' , 'y' ] #NEWLINE#
super ( Atom , self ) . __init__ ( id_ ) #NEWLINE#
print ( type ( a [ : 1 ] ) ) #NEWLINE#
json . dumps ( object ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
pickle . dumps ( defdict ) #NEWLINE#
parser . add_argument ( '-A' , action = 'store_true' ) #NEWLINE#
parser . add_argument ( '-C' , action = 'store_true' ) #NEWLINE#
a [ b [ : , ( 0 ) ] , b [ : , ( 1 ) ] ] #NEWLINE#
return isinstance ( v , type ( LAMBDA ) ) and v . __name__ == LAMBDA . __name__ #NEWLINE#
return cpoints . view ( 'i4' ) . reshape ( ( - 1 , 2 ) ) #NEWLINE#
password = request . form . get ( 'password' ) #NEWLINE#
return map ( set , powerset ( s ) ) #NEWLINE#
layout . addWidget ( self . browser ) #NEWLINE#
print ( data ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
df [ df . Col1 == 'what' ] #NEWLINE#
message = sys . stdin . readlines ( ) #NEWLINE#
persons = Person . objects . all ( ) . order_by ( now , anniversary ) #NEWLINE#
s . fill ( ( 255 , 255 , 255 ) ) #NEWLINE#
( dist ** 2 ) . sum ( axis = 2 ) ** 0.5 #NEWLINE#
p = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
myNames = [ line . strip ( ) for line in f ] #NEWLINE#
l1 . extend ( [ 7 , 8 , 9 ] ) #NEWLINE#
raise ValueError ( 'overrides#SPACE#decorator:#SPACE#unable#SPACE#to#SPACE#determine#SPACE#base#SPACE#class' ) #NEWLINE#
print ( ( 'Predicted#SPACE#' , top_indices [ 0 ] , '#SPACE#for#SPACE#your#SPACE#input#SPACE#image.' ) ) #NEWLINE#
g2 = [ elem [ : 12 ] for elem in g ] #NEWLINE#
any ( isinstance ( e , list ) for e in my_list ) #NEWLINE#
print ( 'i#SPACE#is#SPACE#5#SPACE#and#SPACE#ii#SPACE#is#SPACE#10' ) #NEWLINE#
[ 'a' , 'b' , 'c' ] #NEWLINE#
plt . fill_between ( x1 , y1 , y2 = y2 , color = 'yellow' ) #NEWLINE#
submit_response = self . br . <STR0> ( name = 'action' , label = 'Save' ) #NEWLINE#
doc = amara . parse ( 'h.xml' ) #NEWLINE#
a = struct . unpack ( '!I' , socket . inet_aton ( '192.0.43.10' ) ) [ 0 ] #NEWLINE#
configuration . update ( timeout = 60 , host = 'example.com' ) #NEWLINE#
solve ( eqn , Rsense ) #NEWLINE#
t . start ( ) #NEWLINE#
raise ValueError ( 'Illegal#SPACE#UTF-16#SPACE#sequence:#SPACE#%r' % s [ i : i + 2 ] ) #NEWLINE#
df . drop ( labels = [ 'Mid' ] , axis = 1 , inplace = True ) #NEWLINE#
text = re . sub ( '<[^>]*?>' , '#SPACE#' , str ( site [ 0 ] . extract ( ) ) ) #NEWLINE#
adict = { 'a' : 1 , 'b' : 'aname' , 'c' : [ 1 , 2 , 3 ] } #NEWLINE#
a . execute ( sql ) #NEWLINE#
gcs_file . close ( ) #NEWLINE#
self . label . pack ( ) #NEWLINE#
numpy . savetxt ( 'loss_history.txt' , numpy_loss_history , delimiter = ',' ) #NEWLINE#
trimmed_text = text . strip ( ) #NEWLINE#
literal_eval ( '[1,2,3,4]' ) #NEWLINE#
f . close ( ) #NEWLINE#
titles . append ( text . split ( 'Title:' ) [ 1 ] . split ( 'Post#SPACE#by:' ) [ 0 ] . strip ( ) ) #NEWLINE#
any ( thelist . count ( x ) > 1 for x in thelist ) #NEWLINE#
dbf . export ( table , 'junk.csv' ) #NEWLINE#
help ( list ) #NEWLINE#
self . add_tag ( tag ) #NEWLINE#
listening_socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
print ( function ( [ 2 , 3 ] ) ) #NEWLINE#
j2 = [ x for x in j if x >= 5 ] #NEWLINE#
np . reshape ( x , ( - 1 , 1 ) ) #NEWLINE#
return [ i for i , letter in enumerate ( s ) if letter == ch ] #NEWLINE#
df . xs ( 'a' , level = 'A' , axis = 1 ) #NEWLINE#
self . worker . start ( ) #NEWLINE#
df . stack ( ) #NEWLINE#
sum ( map ( mul , a , b ) ) #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 5 , 0 , 0 ) ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
session . pop ( 'logged_in' , None ) #NEWLINE#
fun ( ctypes . c_void_p ( indata . ctypes . data ) , ctypes . c_void_p ( outdata . ctypes . data ) ) #NEWLINE#
ent6 . grid ( row = 1 , column = 1 ) #NEWLINE#
"""str""" #NEWLINE#
time . sleep ( delay ) #NEWLINE#
admin . site . register ( Group , GroupAdmin ) #NEWLINE#
weightMatrix . append ( { 'A' : 0 , 'C' : 0 , 'G' : 0 , 'T' : 0 } ) #NEWLINE#
self . send_response ( 200 ) #NEWLINE#
df [ 'Date' ] = pd . to_datetime ( df [ 'Date' ] , format = '%Y%m' ) + MonthEnd ( 1 ) #NEWLINE#
'hello#SPACE#%s#SPACE#,#SPACE#how#SPACE#are#SPACE#you#SPACE#%s,#SPACE#welcome#SPACE#%s' % ( ( 'john' , ) * 3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
print ( 'opening#SPACE#browser' ) #NEWLINE#
scipy . optimize #NEWLINE#
result = re . finditer ( regex , line ) #NEWLINE#
self . assertIn ( 'Message' , self . logger ) #NEWLINE#
df . to_csv ( f , header = False , index = False ) #NEWLINE#
gtk . main ( ) #NEWLINE#
os . system ( 'rm#SPACE#-rf#SPACE#*.*' ) #NEWLINE#
[ [ 4 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
print ( hex ( - 1 & 4294967295 ) ) #NEWLINE#
MyList ( [ 1 , 2 , 3 ] ) #NEWLINE#
plt . xlabel ( 'Carrier' ) #NEWLINE#
del l [ 0 ] #NEWLINE#
aslist = [ float ( x ) for x in data . split ( ',' ) ] #NEWLINE#
win . show_all ( ) #NEWLINE#
print ( ( i , line ) ) #NEWLINE#
plt . legend ( proxy , [ 'range(2-3)' , 'range(3-4)' , 'range(4-6)' ] ) #NEWLINE#
this_array [ indices [ 0 ] : indices [ - 1 ] + 1 ] . fill ( new_v ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
dropped_copies = [ ( lambda i : ( x [ i ] for x in copies [ i ] ) ) ( i ) for i in range ( 2 ) ] #NEWLINE#
df_subset . apply ( lambda x : x . C * x . E , axis = 1 ) . sum ( ) #NEWLINE#
super ( ) . __init__ ( ** kwargs ) #NEWLINE#
re . search ( '\\d+|$' , 'aazzzbbb' ) . group ( ) #NEWLINE#
os . kill ( pid , 0 ) #NEWLINE#
pass #NEWLINE#
print ( my_dict [ 'Date' ] ) #NEWLINE#
os . isatty ( 0 ) #NEWLINE#
print ( re . findall ( p , test_str ) ) #NEWLINE#
res = cv2 . bitwise_and ( img , img , mask = mask ) #NEWLINE#
serve ( app , host = '0.0.0.0' ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
result = p . communicate ( ) [ 0 ] #NEWLINE#
self . driver . find_element ( By . ID , 'Passwd' ) . send_keys ( 'supersimplepassword' ) #NEWLINE#
raise Exception ( 'Already#SPACE#capturing#SPACE#keystrokes' ) #NEWLINE#
return cursor . fetchall ( ) #NEWLINE#
print ( nx . shortest_path ( graph , source = 'robots-0' , target = 'awesomeness-11' ) ) #NEWLINE#
sql . append ( ',#SPACE#' . join ( "%s#SPACE#=#SPACE#'%s'" % ( k , v ) for k , v in kwargs . items ( ) ) ) #NEWLINE#
print ( 'not#SPACE#a#SPACE#valid#SPACE#function#SPACE#name' ) #NEWLINE#
serializer = CommentSerializer ( comment , data = request . data , partial = True ) #NEWLINE#
nsolve ( [ x + y ** 2 - 4 , exp ( x ) + x * y - 3 ] , [ x , y ] , [ 1 , 1 ] ) #NEWLINE#
[ entry for tag in tags for entry in entries if tag in entry ] #NEWLINE#
print ( [ ( k , d3 [ k ] ) for k in d1 if d3 [ k ] < l ] ) #NEWLINE#
np . dot ( y . reshape ( 1 , 3 ) , r ) . shape #NEWLINE#
shelf . close ( ) #NEWLINE#
string . split ( '#SPACE#,#SPACE#' ) #NEWLINE#
ast . literal_eval ( "['a',#SPACE#'b',#SPACE#'c']" ) #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( len ( s ) + 1 ) ) #NEWLINE#
graph = facebook . GraphAPI ( access_token ) #NEWLINE#
print ( oxford_comma_join ( [ 'item1' , 'item2' , 'item3' , 'item4' , 'item5' , 'item6' ] ) #NEWLINE# ) #NEWLINE#
self . ax . set_ylim ( 0 , R + pR ) #NEWLINE#
plt . show ( ) #NEWLINE#
s . connect ( ( HOST , PORT ) ) #NEWLINE#
pd . rolling_sum ( ts [ : : - 1 ] , window = 3 , min_periods = 0 ) [ : : - 1 ] #NEWLINE#
a [ ( 0 ) , : , : ] #NEWLINE#
[ - 2 , 1 , 2 , 3 , 5 , 7 , 56 ] #NEWLINE#
cdf1 . update ( cdf2 , overwrite = False ) #NEWLINE#
plt . title ( 'Mean#SPACE#Rainfall' ) #NEWLINE#
c . execute ( 'CREATE#SPACE#TABLE#SPACE#status(location#SPACE#TEXT,#SPACE#arrival#SPACE#TEXT,#SPACE#departure#SPACE#TEXT)' ) #NEWLINE#
print ( os . path . abspath ( __file__ ) ) #NEWLINE#
0.58256 , 0.58391 , 0.62924 , 0.68509 , 0.7616 , 0.78481 , 0.79229 , 0.81161 #NEWLINE#
os . path . join ( 'app' , 'subdir' , 'dir' , 'filename.foo' ) #NEWLINE#
print ( 'Accept#SPACE#NULL#SPACE#hypothesis#SPACE#-#SPACE#No#SPACE#significant#SPACE#difference#SPACE#between#SPACE#groups.' ) #NEWLINE#
self . assertTrue ( response . headers [ 'Content-Type' ] == 'application/json' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return '' . join ( [ x for x in s if ord ( x ) < 128 ] ) #NEWLINE#
self . pack ( fill = BOTH , expand = 1 , padx = 5 , pady = 5 ) #NEWLINE#
pts = [ ( 1 , 1 ) , ( 10 , 1 ) , ( 10 , 10 ) , ( 1 , 10 ) ] #NEWLINE#
print ( br . response ( ) . read ( ) ) #NEWLINE#
newArray = [ ( i + 1 ) for i in array ] #NEWLINE#
characters += sum ( len ( word ) for word in wordslist ) #NEWLINE#
print ( df . loc [ : , ( ~ mask ) ] ) #NEWLINE#
cleanedList = [ x for x in countries if str ( x ) != 'nan' ] #NEWLINE#
proc . stdin . write ( 'message' ) #NEWLINE#
radioValue = butRadio . value_selected #NEWLINE#
driver . set_window_size ( 300 , 500 ) #NEWLINE#
datetime . now ( timezone . utc ) . astimezone ( ) . isoformat ( ) #NEWLINE#
splitted = [ i . strip ( ) for i in re . split ( pattern , s ) if i . strip ( ) ] #NEWLINE#
ax . set_xlabel ( 'ppm#SPACE#($\\delta$)' ) #NEWLINE#
return any ( np . allclose ( row , x ) for x in myarray ) #NEWLINE#
img = Image . open ( '/pathto/file' , 'r' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
config . add_route ( 'foo' , '/foo' ) #NEWLINE#
datetime . datetime . strptime ( '11/12/98' , '%d/%m/%y' ) #NEWLINE#
return Companies . objects . filter ( q ) #NEWLINE#
print ( s . getvalue ( ) ) #NEWLINE#
sent = [ '#SPACE#' . join ( '#SPACE#' . join ( v ) for v in sent ) ] #NEWLINE#
ind [ np . where ( np . diff ( ind ) == 0 ) ] #NEWLINE#
server . sendmail ( self . EMAIL_FROM , self . EMAIL_TO , msg . as_string ( ) ) #NEWLINE#
p . stdout . close ( ) #NEWLINE#
print ( 'a:#SPACE#$a#SPACE#b:#SPACE#@b#SPACE#c:#SPACE#$c\n' ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'image/jpeg' #NEWLINE#
l . extend ( map ( int , r . findall ( line ) ) ) #NEWLINE#
dict . __setitem__ ( self , keys [ - 1 ] , value ) #NEWLINE#
{ 'hi' : 4123.0 } #NEWLINE#
app . run ( debug = True ) #NEWLINE#
a [ 0 ] #NEWLINE#
sum ( [ i for i in l1 if isinstance ( i , numbers . Number ) ] ) #NEWLINE#
t . start ( ) #NEWLINE#
{ k : min ( i for i in ( h1 . get ( k ) , h2 . get ( k ) ) if i ) for k in list ( h1 . keys ( ) ) | h2 } #NEWLINE#
win32clipboard . CloseClipboard ( ) #NEWLINE#
sys . stdout . write ( '\x1b[?25l' ) #NEWLINE#
sys . stdout . write ( '\x1b[?25h' ) #NEWLINE#
lst . sort ( key = operater . itemgetter ( 2 ) , reverse = True ) #NEWLINE#
col = A . getcol ( colindex ) #NEWLINE#
a = 'QW5tZWxkdW5nIE5ldHphbnNjaGx1c3MgU_xkcmluZzNwLmpwZw==' #NEWLINE#
new_list . append ( '#SPACE#' . join ( words ) ) #NEWLINE#
print ( 'Elapsed:#SPACE#%s' % ( time . time ( ) - self . tstart ) ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'fr_FR.UTF-8' ) #NEWLINE#
list = states . split ( '#SPACE#' ) #NEWLINE#
foo ( ) #NEWLINE#
result = [ sum ( el ) for el in itertools . zip_longest ( * lists , fillvalue = 0 ) ] #NEWLINE#
unittest . main ( ) #NEWLINE#
sum ( row [ 'keyA' ] for row in rows ) #NEWLINE#
ax . set_xticklabels ( [ 'Aye' , 'Bee' , 'Cee' , 'Dee' ] ) #NEWLINE#
d = { r [ 0 ] : tuple ( r [ 1 : - 1 ] ) for r in reader } #NEWLINE#
return self . instance . status #NEWLINE#
admin . site . register ( Author ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
imwrite ( 'filename.jpg' , img ) #NEWLINE#
wx . Frame . __init__ ( self , None , wx . ID_ANY , 'Tutorial' ) #NEWLINE#
s = s . replace ( ch , "'" ) #NEWLINE#
plt . show ( ) #NEWLINE#
string = '\n' . join ( Permute ( 'abc' ) ) #NEWLINE#
virtualenv - - help #NEWLINE#
f = lambda r : r * ( sp . j0 ( r ) + sp . jn ( 2 , r ) ) #NEWLINE#
pygame . display . init ( ) #NEWLINE#
a = np . loadtxt ( stdin , dtype = np . int ) #NEWLINE#
random . shuffle ( lis ) #NEWLINE#
user_type = ContentType . objects . get ( model = 'user' ) #NEWLINE#
df [ 'name' ] . str . join ( '' ) . str . contains ( '"' ) #NEWLINE#
f ( 1 , x = 3 ) #NEWLINE#
super ( OrderForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
poolid = Column ( 'pool' , Integer , ForeignKey ( 'Pools.ID' ) ) #NEWLINE#
writer . writerow ( [ 'header' , 'header' , 'header' ] ) #NEWLINE#
ax . set_xlim3d ( - 2 , 2 ) #NEWLINE#
print ( '*WARN*#SPACE#This#SPACE#text#SPACE#will#SPACE#show#SPACE#up#SPACE#on#SPACE#the#SPACE#console.' ) #NEWLINE#
return x [ 0 ] + x [ - 1 ] #NEWLINE#
root . title ( 'Ttk#SPACE#Calendar' ) #NEWLINE#
ax . legend ( loc = 'center#SPACE#left' , bbox_to_anchor = ( 1 , 0.5 ) ) #NEWLINE#
plt . contourf ( xi , yi , zi , v , cmap = plt . cm . jet ) #NEWLINE#
"""""" . join ( s . partition ( '.zip' ) [ 0 : 2 ] ) #NEWLINE#
tree = ET . parse ( 'test.xml' ) #NEWLINE#
sys . getsizeof ( { 'number_of_legs' : 4 , 'favourite_food' : [ 'Lasagna' , 'Fish' ] } ) #NEWLINE#
a = k + a #NEWLINE#
sizer . Add ( text , 0 , wx . ALL , 5 ) #NEWLINE#
data = json . loads ( response . decode ( 'utf-8-sig' ) ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
df [ 'e' ] = df . a + df . b + df . d #NEWLINE#
count = ( ~ np . einsum ( 'ij->i' , listScore != [ 2 , 0 ] ) ) . sum ( ) #NEWLINE#
results = results . replace ( '\\u' , '&#x' ) #NEWLINE#
people_list . append ( person ) #NEWLINE#
pygst . require ( '0.10' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
return '' . join ( random . choice ( string . ascii_letters ) for i in range ( size ) ) #NEWLINE#
firstone = next ( ( x for x in d if x in paid [ j ] ) , None ) #NEWLINE#
[ { 'playing' : [ 'volley#SPACE#ball' , 'basket#SPACE#ball' , 'hockey' , 'cricket' ] , 'name' : #NEWLINE# 'kishore' } , { 'playing' : [ 'cricket' ] , 'name' : 'xyz' } ] #NEWLINE#
plot ( tmp . max ( axis = 0 ) ) #NEWLINE#
mime . from_file ( 'testdata/test.pdf' ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
re . sub ( '(orig.*?l)' , repl , 'This#SPACE#is#SPACE#the#SPACE#original#SPACE#string.' ) #NEWLINE#
mat = sparse . coo_matrix ( points , ( I , J ) ) #NEWLINE#
df . dtypes [ df . dtypes == 'datetime64[ns]' ] #NEWLINE#
x [ array ( [ 0 , 1 , 2 ] ) , array ( [ 0 , 0 , 0 ] ) ] #NEWLINE#
im . show ( ) #NEWLINE#
return re . sub ( '\\d+' , 'X' , re . sub ( '\\d+/\\d+' , 'X/Y' , w ) ) #NEWLINE#
super ( BeautifulSoup . BeautifulSoup , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
lst = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# [ x for x , _ in lst ] #NEWLINE#
urllib . parse . unquote_plus ( 'erythrocyte+membrane+protein+1%2C+PfEMP1+%28VAR%29' ) #NEWLINE#
admin . site . register ( LocationCode , LocationAdmin ) #NEWLINE#
[ 1 , 5 , 7 , 13 , 17 , 19 ] #NEWLINE#
np . broadcast_arrays ( I , J , b [ : , ( None ) , : ] ) #NEWLINE#
( '^home(/?)$' , 'user_home_page' ) , #NEWLINE#
config . write ( ) #NEWLINE#
self . initUI ( ) #NEWLINE#
siympify ( y ) #NEWLINE#
A [ i , j ] = C [ j , B == i ] . sum ( ) #NEWLINE#
pd . concat ( ( fundraisers , fundraisers . apply ( get_donors , axis = 1 ) ) , axis = 1 ) #NEWLINE#
ax . xaxis . set_major_locator ( mdates . AutoDateLocator ( ) ) #NEWLINE#
root . resizable ( True , False ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
locals ( ) [ 'y' ] = 1 #NEWLINE#
text . pack ( ) #NEWLINE#
print ( table . ascii_table ( data , has_header = True ) ) #NEWLINE#
reactor . listenTCP ( int ( os . environ [ 'PORT' ] ) , site , interface = os . environ [ 'IP' ] ) #NEWLINE#
return jsonify ( json_list = [ i . serialize for i in qryresult . all ( ) ] ) #NEWLINE#
ax . set_ylabel ( 'name' , fontsize = 14 , color = 'blue' ) #NEWLINE#
self . schedule . run ( ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
plt . draw ( ) #NEWLINE#
res [ 'nets' ] [ 0 ] [ 'abuse_emails' ] #NEWLINE#
process . stdin . write ( 'echo#SPACE#it#SPACE#works!\n' ) #NEWLINE#
process . stdin . write ( 'date\n' ) #NEWLINE#
"'%s'#SPACE#is#SPACE#longer#SPACE#than#SPACE#'%s'" % ( name1 , name2 ) #NEWLINE#
innerre = re . compile ( "\\('([^']+)',#SPACE#'([^']+)'\\)" ) #NEWLINE#
return max ( 0 , min ( a [ 1 ] , b [ 1 ] ) - max ( a [ 0 ] , b [ 0 ] ) ) #NEWLINE#
Impl . foo #NEWLINE#
natsorted ( [ 'asdf123' , 'asdf1234' , 'asdf111' , 'asdf124' ] ) #NEWLINE#
int ( ceil ( round ( x , 12 ) / 10.0 ) ) * 10 #NEWLINE#
print ( f4 ( ) ) #NEWLINE#
json . dumps ( o ) #NEWLINE#
print ( 'Compiler#SPACE#is#SPACE#CXX_NAME#SPACE#%s#SPACE##SPACE#CXX#SPACE#%s' % ( bld . env . CXX_NAME , bld . env . CXX ) ) #NEWLINE#
df . head ( ) #NEWLINE#
ax . set_yticks ( np . arange ( max_val ) ) #NEWLINE#
f = "['Cats','like','dogs','as','much','cats.'][1,2,3,4,5,4,3,2,6]" #NEWLINE#
"""-""" . join ( a + b for a , b in zip_longest ( t , t , fillvalue = '' ) ) #NEWLINE#
element_counts = collections . Counter ( itertools . chain . from_iterable ( allsets ) ) #NEWLINE#
{ ( x , x + 2 ) for x in r if x + 2 in r } #NEWLINE#
cherrypy . quickstart ( HelloWorld ( ) ) #NEWLINE#
calendar . timegm ( dt . utctimetuple ( ) ) #NEWLINE#
f = lambda count : [ ( random ( ) - 0.5 , random ( ) - 0.5 ) for _ in range ( count ) ] #NEWLINE#
super ( Audit , self ) . save ( * args , ** kwargs ) #NEWLINE#
return pd . Series ( { 'B' : b , 'C' : c } ) #NEWLINE#
turtle . circle ( circumfrence / 2 ) #NEWLINE#
sorted ( [ '15' , '8' ] ) #NEWLINE#
temp_list = ( x * x for x in range ( 0 , 10 ) ) #NEWLINE#
X_train_array = X_train . toarray ( ) #NEWLINE#
cv . WaitKey ( 0 ) #NEWLINE#
sc . addFile ( some_path ) #NEWLINE#
sum ( 1 for ch in 'A̲̅BC' if unicodedata . combining ( ch ) == 0 ) #NEWLINE#
print ( len ( a ) - a . index ( min ( a ) ) - 1 ) #NEWLINE#
plt . xticks ( x + 0.5 * width , [ 'A' , 'B' , 'C' ] ) #NEWLINE#
PyMem_DEL ( self ) #NEWLINE#
return render_to_response ( 'stuff.html' , { 'events' : listEventsSummary } ) #NEWLINE#
sys . path . insert ( 0 , lib_path ) #NEWLINE#
tk . Label ( frame , text = t ) . grid ( row = row , column = 1 ) #NEWLINE#
any ( v > 0 for v in pairs . values ( ) ) #NEWLINE#
help ( pyudt ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
self . pack ( ) #NEWLINE#
output = '\nPrint:#SPACE#Customer' #NEWLINE#
l1 = [ [ 1 , 'steve' ] , [ 4 , 'jane' ] , [ 3 , 'frank' ] , [ 2 , 'kim' ] ] #NEWLINE# sorted ( l1 ) #NEWLINE#
cur . execute ( 'CREATE#SPACE#TABLE#SPACE#foobar#SPACE#(id#SPACE#INTEGER#SPACE#PRIMARY#SPACE#KEY,#SPACE#array#SPACE#BLOB)' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#FOOBAR' ) #NEWLINE#
data = pd . DataFrame ( json . loads ( line ) for line in f ) #NEWLINE#
print ( line , file = file ) #NEWLINE#
[ 1 , 1 , 1 ] , #NEWLINE#
trainer . trainEpochs ( 1000 ) #NEWLINE#
g . filter ( lambda x : len ( x ) >= 10 ) #NEWLINE#
self . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
array ( [ 'text3' , '3' , 'longertext3' , '0.3333' ] , dtype = '|S11' ) , #NEWLINE#
array ( [ 'text4' , '4' , 'longertext4' , '0.4444' ] , dtype = '|S11' ) , #NEWLINE#
list ( range ( len ( sent ) ) ) #NEWLINE#
print ( 'utf-8#SPACE##SPACE#w/#SPACE#BOM#SPACE#decoded#SPACE#with#SPACE#utf-8#SPACE##SPACE##SPACE##SPACE##SPACE#%r' % e8s . decode ( 'utf-8' ) ) #NEWLINE#
print ( 'utf-16#SPACE#w/#SPACE#BOM#SPACE#decoded#SPACE#with#SPACE#utf-16#SPACE##SPACE##SPACE##SPACE#%r' % e16 . decode ( 'utf-16' ) ) #NEWLINE#
link . click ( ) #NEWLINE#
print ( device_props . Get ( 'org.freedesktop.UDisks.Device' , 'PartitionSize' ) ) #NEWLINE#
print ( v , type ( v ) ) #NEWLINE#
another_field = ReferenceField ( 'Bar' ) #NEWLINE#
x [ : , : , ( None ) ] * y [ : , ( None ) , : ] #NEWLINE#
webbrowser . open ( whatever ) #NEWLINE#
ax . tick_params ( axis = 'x' , labelsize = 30 ) #NEWLINE#
[ 0 , 0 , 0 , 1 , 0 , 1 ] #NEWLINE#
np . arange ( x [ 0 ] , x [ 0 ] + 60 , 10 ) #NEWLINE#
np . allclose ( a , b ) #NEWLINE#
plt . ion ( ) #NEWLINE#
df [ 'parent' ] = df . reset_index ( ) [ 'index' ] . map ( dct ) . values #NEWLINE#
ax . imshow ( im ) #NEWLINE#
unicode_font = ImageFont . truetype ( 'DejaVuSans.ttf' , font_size ) #NEWLINE#
template_values [ 'my_template' ] = 'base.html' #NEWLINE#
model1 . objects . all ( ) #NEWLINE#
print ( ( 'got' , the_list ) ) #NEWLINE#
print ( json . dumps ( df . T . as_matrix ( ) . tolist ( ) , indent = 4 ) ) #NEWLINE#
return getattr ( module , name ) #NEWLINE#
os . chdir ( currdir ) #NEWLINE#
self . _autosave ( ) #NEWLINE#
with open ( 'file.txt' , 'r' ) as f : #NEWLINE# #INDENT# contents = function ( f ) #NEWLINE#
'%(name)s#SPACE#%(name)s#SPACE#hello!' % dict ( name = 'foo' ) #NEWLINE#
df1 . merge ( df2 [ list ( 'xab' ) ] ) #NEWLINE#
button1 = Button ( self , text = 'Send' , command = self . response1 , height = 100 , #NEWLINE# width = 100 ) #NEWLINE#
local_d = d . replace ( tzinfo = None ) #NEWLINE#
LOGIN_URL = 'my_app.views.sign_in' #NEWLINE#
QAbstractTableModel . __init__ ( self , parent ) #NEWLINE#
soup . find_all ( 'table' , { 'class' : re . compile ( 'class[17]' ) } ) #NEWLINE#
my_args = [ 'foo' , 'bar' , 'baz' ] #NEWLINE# 'Hello#SPACE#%s' % ',#SPACE#' . join ( my_args ) #NEWLINE#
date_1 = datetime . datetime . strptime ( start_date , '%m/%d/%y' ) #NEWLINE# end_date = date_1 + datetime . timedelta ( days = 10 ) #NEWLINE#
print ( template . render ( ) ) #NEWLINE#
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~#SPACE#\t\n\r\x0b\x0c' #NEWLINE#
plt . figure ( ) #NEWLINE#
self . factories . append ( factory ) #NEWLINE#
mpl . pyplot . legend ( ** dict ( list ( defaults . items ( ) ) + list ( kwargs . items ( ) ) ) ) #NEWLINE#
driver . set_window_position ( 200 , 200 ) #NEWLINE#
arr = np . fromstring ( ',' . join ( raw_locs ) , sep = ',' ) . reshape ( - 1 , 2 ) #NEWLINE#
plt . savefig ( file_path , dpi = 80 ) #NEWLINE#
assert is_subseq ( 'oman' , 'romania' ) #NEWLINE#
assert is_subseq ( 'mali' , 'malawi' ) #NEWLINE#
plt . plot ( data_fit , label = 'after#SPACE#fitting' ) #NEWLINE#
array ( [ [ 0 , 0 , 0 ] , [ 4 , 0 , 0 ] , [ 7 , 8 , 0 ] ] ) #NEWLINE#
set ( [ ( 3 , 2 , 3 ) , ( 4 , 4 , 4 ) ] ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
soup = BeautifulSoup ( html , 'lxml' ) #NEWLINE#
c . execute ( 'create#SPACE#table#SPACE#foo#SPACE#(bar#SPACE#integer,#SPACE#baz#SPACE#timestamp)' ) #NEWLINE#
"""abc""" . encode ( 'ascii' ) #NEWLINE#
p = subprocess . Popen ( [ 'echo' , '640x360' ] , stdout = subprocess . PIPE ) #NEWLINE# p . communicate ( ) #NEWLINE#
d = min ( date . day , calendar . monthrange ( y , m ) [ 1 ] ) #NEWLINE#
s = 'I#SPACE#am#SPACE#having#SPACE#a#SPACE#very#SPACE#nice#SPACE#day.' #NEWLINE# len ( s . split ( ) ) #NEWLINE#
( numpy . diff ( numpy . sign ( a ) ) != 0 ) * 1 #NEWLINE#
thread . start ( ) #NEWLINE#
return max ( knapsack ( i - 1 , W ) , values [ i ] + knapsack ( i - 1 , W - weights [ i ] ) ) #NEWLINE#
timedelta ( hours = 6 ) #NEWLINE#
ax . set_ylim ( [ - 2 , 2 ] ) #NEWLINE#
pil_img = PIL . Image . open ( filename ) #NEWLINE#
numpy . transpose ( matrix7 , axes = ( 1 , 0 , 2 ) ) . tolist ( ) #NEWLINE#
my_list = my_string . split ( ',' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
b = a [ ( ... ) , : : - 1 ] #NEWLINE#
stdscr . touchwin ( ) #NEWLINE#
return super ( ProgressInline , self ) . get_formset ( request , obj , ** kwargs ) #NEWLINE#
c . executemany ( 'insert#SPACE#into#SPACE#T#SPACE#(F1,F2)#SPACE#values#SPACE#(%s,#SPACE#%s)' , [ ( 'a' , 'b' ) , ( 'c' , 'd' ) ] #NEWLINE# ) #NEWLINE#
df [ 'Mathscore' ] = df [ 'Mathscore' ] . str . replace ( 'Weak' , '0' ) #NEWLINE#
paramdata . columns #NEWLINE#
url ( '^browse/(?P<match>.+)/$' , 'app.views.view' , name = 'model_browse' ) , #NEWLINE#
df [ 'AB_split' ] = df [ 'AB' ] . str . split ( '-' ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
sum ( v [ 1 ] [ 1 ] for v in itertools . chain ( * [ list ( d . items ( ) ) for d in myList ] ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
np . array ( i ) . reshape ( - 1 , 3 ) #NEWLINE#
browser . close ( ) #NEWLINE#
logger = logging . getLogger ( 'simple_example' ) #NEWLINE#
min ( x for x in L if x is not None ) #NEWLINE#
f . close ( ) #NEWLINE#
all ( [ ] ) #NEWLINE#
imp . find_module ( 'eggs' , spam . __path__ ) #NEWLINE#
max ( b , key = inverse ) #NEWLINE#
findOccurrences ( yourString , '|' ) #NEWLINE#
setpath ( d . setdefault ( p [ 0 ] , { } ) , p [ 1 : ] , k ) #NEWLINE#
browser . get ( 'http://www.yahoo.com' ) #NEWLINE#
df . groupby ( date ) . mean ( ) #NEWLINE#
val , _ = funky_func ( ) #NEWLINE#
[ '43.2640611' , '2.9388228' ] #NEWLINE#
import xml . etree . ElementTree #NEWLINE#
wrpcap ( OUTFILE , paks ) #NEWLINE#
ax1 = fig . add_subplot ( 2 , 1 , 1 ) #NEWLINE#
all ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
words = [ line . strip ( ) for line in open ( '/etc/dictionaries-common/words' ) ] #NEWLINE#
[ 'zero' , 'six' , 'seven' ] #NEWLINE#
TEMPLATE_DIRS = os . path . join ( PWD , 'Templates' ) #NEWLINE#
headers [ 'Content-length' ] = str ( len ( body ) ) #NEWLINE#
ax . yaxis . set_major_locator ( mtick . LinearLocator ( 5 ) ) #NEWLINE#
urlparse . urljoin ( 'http://www.foo.com/Stuff/Mike/Doc.html' , '../Bob/Doc.html' ) #NEWLINE#
curses . nocbreak ( ) #NEWLINE#
f . write ( bin_data ) #NEWLINE#
set ( tuple ( sorted ( elt ) ) for elt in example ) #NEWLINE#
b = [ dict ( a ) ] #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
fact = lambda x : 1 if x == 0 else x * fact ( x - 1 ) #NEWLINE#
main ( ) #NEWLINE#
x , y , z = sympy . symbols ( 'x:z' ) #NEWLINE#
pd . Series ( df . fillna ( '' ) . values . tolist ( ) ) . str . join ( '#SPACE#' ) #NEWLINE#
string_key = entity . key ( ) . urlsafe ( ) #NEWLINE#
conn . request ( ) #NEWLINE#
cax . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
self . __parser . set ( 'UserOptions' , item , value ) #NEWLINE#
a [ : len ( bbins ) ] += bbins #NEWLINE#
f . write ( '\n' . join ( '#SPACE#' . join ( map ( str , x ) ) for x in ( a , b ) ) ) #NEWLINE#
get_x ( ) #NEWLINE#
json . loads ( value . decode ( 'string_escape' ) ) #NEWLINE#
f ( ) #NEWLINE#
Entry . objects . filter ( created__range = ( start_date , end_date ) ) #NEWLINE#
fieldsets = hide_fields ( ( None , { 'fields' : ( 'title' , 'content' ) } ) ) #NEWLINE#
""""\"""" #NEWLINE#
print ( list ( stars ( 'abc' ) ) ) #NEWLINE#
y = x . astype ( np . float ) #NEWLINE#
datetime . datetime . strptime ( '1936-077T13:14:15' , '%Y-%jT%H:%M:%S' ) #NEWLINE#
np . hstack ( x ) . shape #NEWLINE#
plt . show ( ) #NEWLINE#
browser . maximize_window ( ) #NEWLINE#
cursor . execute ( sql , [ id ] ) #NEWLINE#
data = [ ( item + 256 if item < 0 else item ) for item in data ] #NEWLINE#
pyplot . legend ( loc = 'upper#SPACE#right' ) #NEWLINE#
[ [ '1' , '2' , '3' ] , [ 'a' , 'b' , 'c' ] , [ '10' , '20' , '30' ] ] #NEWLINE#
return x [ 0 ] + x [ - 1 ] #NEWLINE#
MyDiccoSorted = sorted ( list ( MyDicco . items ( ) ) , key = lambda s : s [ 1 ] [ 2 ] ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
self . label . setAlignment ( QtCore . Qt . AlignCenter ) #NEWLINE#
CATEGORIES = [ 'Arts' , 'Business' , 'Computers' ] #NEWLINE#
asking = '' . join ( l for l in asking if l not in string . punctuation ) #NEWLINE#
sorted ( sentence , reverse = True ) [ 0 ] #NEWLINE#
df1 . join ( df2 , df1 [ 'a' ] == df2 [ 'a' ] ) . select ( df1 [ 'f' ] ) . show ( 2 ) #NEWLINE#
app . register_blueprint ( mod , subdomain = 'pt' ) #NEWLINE#
print ( 'Invalid' ) #NEWLINE#
print ( '' . join ( map ( str , pi ) ) ) #NEWLINE#
list ( list ( zip ( r , p ) ) for r , p in zip ( repeat ( a ) , permutations ( b ) ) ) #NEWLINE#
df2 = xls . parse ( 'Sheet2' ) #NEWLINE#
self . transport . write ( line ) #NEWLINE#
np . array_equal ( np . asarray ( foo_cv ) , foo_np_view ) #NEWLINE#
session . query ( Entry ) . with_parent ( mytag , 'entries' ) . count ( ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
os . popen ( 'python#SPACE#helloworld.py' ) #NEWLINE#
[ [ 0 ] , [ 1 ] , [ 2 ] , [ 23 ] , [ 4 ] ] #NEWLINE#
self . timer . join ( ) #NEWLINE#
get_num ( 'dfgd#SPACE#45.678fjfjf' ) #NEWLINE#
df [ 'col_1' ] . map ( foo ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( 'stderr:' , '' . join ( stderr ) ) #NEWLINE#
numpy . array ( [ a [ i : i + 4 ] for i in range ( len ( a ) - 3 ) ] ) #NEWLINE#
screen . blit ( surf , ( 100 , 100 ) ) #NEWLINE#
my_function ( ) == { 'this' : 'is' , 'a' : 'dictionary' } #NEWLINE#
fig . savefig ( '/home/jofer/temp.png' , dpi = 80 ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
print ( list ( iter ( root . children [ 1 ] ) ) ) #NEWLINE#
return super ( C , cls ) . __new__ ( cls , obj . x , obj . y ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 9 ] , [ 6 , 11 ] ] #NEWLINE#
np . hstack ( ( vector1 . reshape ( - 1 , 1 ) , matrix2 ) ) #NEWLINE#
[ 1 , 5 , 7 , 13 , 17 , 19 ] #NEWLINE#
out_file . write ( line ) #NEWLINE#
unittest . main ( ) #NEWLINE#
ax . plot ( x , 1 * x ** 2 , color = 'r' , label = 't#SPACE#=#SPACE#25' ) #NEWLINE#
sys . path . append ( 'your#SPACE#certain#SPACE#directory' ) #NEWLINE#
books_array = numpy . array ( list_of_lists ) #NEWLINE#
[ ( a . __setslice__ ( 1 , 2 , a [ 1 ] . split ( '-' ) ) or a ) for a in arr ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
return self . post ( * args , ** kwargs ) #NEWLINE#
model . add ( Activation ( 'softmax' ) ) #NEWLINE#
ax2 = fig . add_subplot ( 2 , 1 , 2 ) #NEWLINE#
y = dict ( x , ** { ( 2 ) : 3 } ) #NEWLINE#
mylist = re . split ( '\\s+(?=\\w+:)' , searchString ) #NEWLINE#
imshow ( np . asarray ( pil_im ) ) #NEWLINE#
circle . grid ( row = 1 , column = 1 ) #NEWLINE#
set ( 'abc' ) <= list ( d . keys ( ) ) #NEWLINE#
return getattr ( obj , 'classification' , None ) #NEWLINE#
def close_window ( root ) : #NEWLINE# #INDENT# root . destroy ( ) #NEWLINE#
sys . path . append ( '/tmp/TEST' ) #NEWLINE#
l = [ [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] , [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] ] #NEWLINE# set ( tuple ( i ) for i in l ) #NEWLINE#
sock . sendto ( 'hello' , 0 , ( '127.0.0.1' , 7131 ) ) #NEWLINE#
df . apply ( lambda x : x [ np . where ( x > 0 ) [ 0 ] [ 0 ] ] , axis = 1 ) #NEWLINE#
m = [ x for x in l if x [ 0 ] == 'a' ] #NEWLINE#
print ( ( '#SPACE##SPACE#CC0#SPACE#==#SPACE#CC1#SPACE#is:' , np . allclose ( CC0 , CC1 ) ) ) #NEWLINE#
Fraction . from_float ( 0.25 ) #NEWLINE#
max ( sum ( 1 for i in g ) for k , g in groupby ( L ) ) #NEWLINE#
pyl . show ( ) #NEWLINE#
datetime . strptime ( x1 , '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#%Z%z#SPACE#%Y' ) . strftime ( '%s' ) #NEWLINE#
self . stream . close ( ) #NEWLINE#
array ^= numpy . random . rand ( len ( array ) ) < prob #NEWLINE#
plt . show ( ) #NEWLINE#
raise TypeError ( 'window_size#SPACE#is#SPACE#too#SPACE#small#SPACE#for#SPACE#the#SPACE#polynomials#SPACE#order' ) #NEWLINE#
shutil . copyfileobj ( f_in , f_out ) #NEWLINE#
f ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . merge ( position , df [ ~ idx ] , on = [ 'BP' , 'chromosome' ] , how = 'left' ) #NEWLINE#
self . __dict__ . update ( state ) #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
return ctypes . c_uint32 ( i ) . value #NEWLINE#
[ 10 , 200 , 30 , 400 , 500 ] #NEWLINE#
os . system ( "batch#SPACE#<<<#SPACE#'/home/some_user/do_the_due.py'" ) #NEWLINE#
glColor3ub ( 255 , 255 , 0 ) #NEWLINE#
df . groupby [ di . month ] . Category . apply ( pd . value_counts ) #NEWLINE#
img = cv2 . imread ( 'img.tiff' , cv2 . IMREAD_UNCHANGED ) #NEWLINE#
[ next ( gen ) for _ in range ( 6 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( get_all_substrings ( 'abcde' ) ) #NEWLINE#
print ( sorted ( list ( globalHotItems . items ( ) ) , key = lambda x : x [ 1 ] ) [ - 4 : ] ) #NEWLINE#
abs ( x = 5 ) #NEWLINE#
plt . subplots_adjust ( right = 0.85 ) #NEWLINE#
biggest = [ x [ 0 ] for x in d . most_common ( 6 ) ] #NEWLINE#
a = len ( data [ data [ 'cond' ] == 1 ] ) #NEWLINE#
return float ( s ) #NEWLINE#
{ 'kkakaka' : 'oeoeoeo' , 'abc' : 'lalalla' , 'appa' : 'kdkdkdkd' } #NEWLINE#
hash_str = hash . hexdigest ( ) #NEWLINE#
main ( ) #NEWLINE#
list ( IT . izip_longest ( * readers ) ) #NEWLINE#
bin / buildout #NEWLINE#
browser . find_elements_by_xpath ( '(.//span[@class#SPACE#=#SPACE#"gbts"])[3]' ) [ 0 ] . text #NEWLINE#
myChoice = random . choice ( answer ) #NEWLINE#
soup = BeautifulSoup ( requests . get ( url ) . content , 'html.parser' ) #NEWLINE#
letters = [ choice ( ascii_lowercase ) for _ in range ( 5 ) ] #NEWLINE#
print ( '' . join ( line for line in f if not line . isspace ( ) ) ) #NEWLINE#
self . foo ( ) #NEWLINE#
'0' <= strg [ : 1 ] <= '9' #NEWLINE#
self . redirect ( '/main/new' ) #NEWLINE#
formdata . update ( { 'ctl00$MainContent$ddRecordsPerPage' : '25' } ) #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
return render ( request , 'foo.html' ) #NEWLINE#
ax . set_ylabel ( 'Depth' ) #NEWLINE#
dot ( A , x ) #NEWLINE#
webapp2 . RequestHandler . dispatch ( self ) #NEWLINE#
s . listen ( 1 ) #NEWLINE#
regex = re . compile ( '\\b(' + '|' . join ( states ) + ')\\b' , re . IGNORECASE ) #NEWLINE#
photo = images . resize ( self . request . get ( 'photo' ) , 32 , 32 ) #NEWLINE#
df = df . groupby ( [ 'FREQ' , 'EVALUATION_GRADE' ] ) [ 'EVALUATION_GRADE' ] #NEWLINE#
sys . stdout . write ( '%3d' % i ) #NEWLINE#
a = 'neg' if b < 0 else 'pos' if b > 0 else 'zero' #NEWLINE#
{ 'p' : 'text' } #NEWLINE#
def constrain ( val , min_val , max_val ) : #NEWLINE# #INDENT# return min ( max_val , max ( min_val , val ) ) #NEWLINE#
canvas . create_text ( ( 40 , 20 ) , text = 'Hello#SPACE#World!' , fill = 'black' ) #NEWLINE#
plt . xlabel ( 'Excitation-Energy' ) #NEWLINE#
CELERY_RESULT_SERIALIZER = 'json' #NEWLINE#
exec ( compile ( open ( 'myfile.py' ) . read ( ) ) ) #NEWLINE#
a . max ( axis = 1 ) #NEWLINE#
df = df . groupby ( [ 'FREQ' , 'EVALUATION_GRADE' ] ) [ 'EVALUATION_GRADE' ] . size ( ) #NEWLINE#
return seq [ : : 2 ] , seq [ 1 : : 2 ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( [ r . lower ( ) for r in row ] ) #NEWLINE#
df . apply ( print_row , axis = 1 ) #NEWLINE#
safe_cast ( 'tst' , int ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
cur . execute ( 'DROP#SPACE#TABLE#SPACE#FOOBAR' ) #NEWLINE#
r = np . sqrt ( x * x + y * y ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.3 ) #NEWLINE#
queryset = queryset . filter ( full_name__icontains = string ) #NEWLINE#
plt . subplots_adjust ( top = 0.9 ) #NEWLINE#
rdd = sc . parallelize ( [ 1 , 2 , 3 ] ) #NEWLINE#
list_to_send = [ 'blah' , 'blah' , 'blah' , 'blah' ] #NEWLINE#
document . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . filter ( regex = 'd.*' ) #NEWLINE#
df . filter ( regex = '^(?!chair.*)' ) #NEWLINE#
subprocess . _check_call ( [ 'espeak' , text ] , stdout = FNULL ) #NEWLINE#
proc2 = subprocess . Popen ( [ 'python' , 'mytest.py' ] ) #NEWLINE#
ax . set_ylabel ( 'Radiation#SPACE#($MJ\\,m^{-2}\\,d^{-1}$)' ) #NEWLINE#
data = open ( 'file.data' , 'r' ) . read ( ) #NEWLINE#
csv_writer . writerow ( [ i [ 'longitude' ] , i [ 'latitide' ] ] ) #NEWLINE#
element . clear ( ) #NEWLINE#
pd . Panel ( P , items = [ 'A' , 'B' ] ) . to_frame ( ) . reset_index ( drop = True ) #NEWLINE#
br . form . new_control ( 'text' , 'unexistent' , { 'value' : '' } ) #NEWLINE#
ax10 . set_ylabel ( 'bottom' ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
ax . xaxis . set_major_locator ( MultipleLocator ( 1.0 ) ) #NEWLINE#
now_plus_10m = now + datetime . timedelta ( minutes = 10 ) #NEWLINE#
ssh . util . log_to_file ( 'paramiko.log' , 10 ) #NEWLINE#
return s == s [ : : - 1 ] #NEWLINE#
ax . plot_surface ( x_surf , y_surf , z_surf , cmap = theCM ) #NEWLINE#
reactor . run ( ) #NEWLINE#
plt . gca ( ) . set_aspect ( 'equal' ) #NEWLINE#
data = data [ np . argsort ( data [ : , ( col ) ] ) ] #NEWLINE#
router . register ( 'updatetime' , views . UpdateTimeViewSet , base_name = 'updatetime' ) #NEWLINE#
filelist = [ f for f in os . listdir ( '.' ) if f . endswith ( '.bak' ) ] #NEWLINE#
print ( 'Cleaning#SPACE#up#SPACE#the#SPACE#child...' ) #NEWLINE#
print ( 'Endless#SPACE#child#SPACE#is#SPACE#playing...' ) #NEWLINE#
print ( 'Child#SPACE#done' ) #NEWLINE#
print ( 'Quitting...' ) #NEWLINE#
print ( 'Endless#SPACE#child#SPACE#started' ) #NEWLINE#
print ( 'Joining#SPACE#ChildChecker#SPACE#thread' ) #NEWLINE#
print ( 'GUI#SPACE#running...' ) #NEWLINE#
print ( 'Joining#SPACE#child#SPACE#process' ) #NEWLINE#
print ( 'Child#SPACE#did#SPACE#not#SPACE#join!#SPACE##SPACE#Killing..' ) #NEWLINE#
A = np . array ( mean_data ) . mean ( axis = 0 ) #NEWLINE#
df . event_date - pd . Timestamp ( '2006-01-01' ) #NEWLINE#
new_rows . append ( [ str ( elt ) . expandtabs ( ) for elt in row ] ) #NEWLINE#
even = [ n for n in numbers [ : numbers . index ( 412 ) ] if not n % 2 ] #NEWLINE#
value in dictionary or any ( value == dictionary [ key ] for key in dictionary ) #NEWLINE#
raise Exception ( "Keystrokes#SPACE#already#SPACE#aren't#SPACE#being#SPACE#captured" ) #NEWLINE#
raise Exception ( 'Capture#SPACE#is#SPACE#already#SPACE#going' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#x#SPACE#FROM#SPACE#myTable#SPACE#WHERE#SPACE#x#SPACE#LIKE#SPACE#?' , ( beginningOfString , ) ) #NEWLINE#
value = getattr ( self . product , name , None ) #NEWLINE#
s = requests . Session ( ) #NEWLINE#
bytearray . fromhex ( '{:0192x}' . format ( big_int ) ) #NEWLINE#
t . start ( ) #NEWLINE#
Image . fromarray ( imarray ) #NEWLINE#
[ 'palindrome.py' , 'Taco#SPACE#cat!?' ] #NEWLINE#
dict ( k . partition ( '=' ) [ : : 2 ] for k in split ) #NEWLINE#
the_dict = json . loads ( JSON_Datalist ) #NEWLINE#
[ ( i , sum ( j ) ) for i , j in list ( d . items ( ) ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
x . plot ( kind = 'bar' ) . legend ( * args , ** kwargs ) #NEWLINE#
b = a [ 4 ] if len ( a ) > 4 else 'sss' #NEWLINE#
map ( operator . itemgetter ( 'value' ) , l ) #NEWLINE#
item = singlet_list [ 0 ] if len ( singlet_list ) == 1 else False #NEWLINE#
figure ( figsize = ( 5 , 10 ) ) #NEWLINE#
self . Bind ( wx . EVT_PAINT , self . OnPaint ) #NEWLINE#
match = re . search ( '(\\d+/\\d+/\\d+)' , 'The#SPACE#date#SPACE#is#SPACE#11/12/98' ) #NEWLINE#
return cbgen ( int ( x ) , base , iexps ) , cbgen ( x - int ( x ) , base , fexps ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
shutil . rmtree ( temp_dir ) #NEWLINE#
print ( ( 'error#SPACE#at' , json . last_error_position ) ) #NEWLINE#
dataframe . iloc [ : , ( [ 0 , 1 , 4 ] ) ] #NEWLINE#
max ( float ( 'nan' ) , 1 ) #NEWLINE#
curses . curs_set ( 0 ) #NEWLINE#
[ True ] * 3 #NEWLINE#
return QtCore . QVariant ( ) #NEWLINE#
from file1 import * #NEWLINE#
b = a * ( a > 0 ) #NEWLINE#
call_command ( <STR0> , interactive = True ) #NEWLINE#
uuid . uuid1 ( ) #NEWLINE#
os . nice ( 1 ) #NEWLINE#
result . drop ( 0 , axis = 1 , inplace = True ) #NEWLINE#
paragraphs = re . search ( '(.+?\n\n|.+?$)' , TEXT , re . DOTALL ) #NEWLINE#
[ a1 [ i ] , a2 [ i ] , a3 [ i ] , a4 [ i ] , a5 [ i ] , a6 [ i ] , a7 [ i ] , a8 [ i ] ] = line . split ( '\t' ) #NEWLINE#
dot_product = sum ( dict_1 [ key ] * dict_2 . get ( key , 0 ) for key in dict_1 ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'default' ) #NEWLINE#
return sorted ( dictionary , key = dictionary . get , reverse = True ) [ : 10 ] #NEWLINE#
zfile = zipfile . ZipFile ( 'test.zip' ) #NEWLINE#
response = requests . get ( url ) #NEWLINE#
self . show_all ( ) #NEWLINE#
np . einsum ( 'i...,i...' , A , B ) #NEWLINE#
blobs = BlobInfo . all ( ) . run ( ) #NEWLINE#
[ x . time for x in list_of_objects ] #NEWLINE#
return pd . MultiIndex . from_tuples ( list ( product ( * categories ) ) , names = names ) #NEWLINE#
"""{0:g}""" . format ( float ( 21 ) ) #NEWLINE#
Acut [ np . isnan ( Acut ) ] = np . nanmean ( Acut ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#user' ) #NEWLINE#
line = re . sub ( 'TargetName=.+' , 'TargetName=D:\\\\new' , line ) #NEWLINE#
df = store [ 'df' ] #NEWLINE#
total += float ( current_number ) #NEWLINE#
Column ( 'created_on' , DateTime , default = datetime . datetime . now ) #NEWLINE#
p . lexer . begin ( 'SUBQUERY' ) #NEWLINE#
array ( [ 0 , 1 , 2 , 0 , 3 , 4 , 5 , 0 , 6 , 7 , 8 , 0 , 9 , 10 , 11 , 1 ] ) #NEWLINE#
df [ [ 'T' , 'G' , 'C' , '-' ] ] . sum ( ) #NEWLINE#
plt . gca ( ) . add_collection ( poly ) #NEWLINE#
s [ ~ s . isnull ( ) ] #NEWLINE#
app . config . from_object ( 'config' ) #NEWLINE#
[ 0 , 0 , 0 , 0 ] #NEWLINE#
changes . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
s , count = p . subn ( '' , s ) #NEWLINE#
"""$_____""" #NEWLINE#
os . stat ( 'newfile' ) . st_size #NEWLINE#
return pd . read_excel ( filename ) #NEWLINE#
raise ImportError ( 'mpi4py#SPACE#is#SPACE#required#SPACE#for#SPACE#parallelization' ) #NEWLINE#
'__module__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' #NEWLINE#
doc = PdfFileReader ( file ( 'upload.pdf' , 'rb' ) ) #NEWLINE#
btn = Button ( root , text = 'Click' ) #NEWLINE#
[ 0 ] * ( len ( a ) - len ( c ) ) + c #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
plt . figure ( 1 , figsize = ( size_x , size_y ) , dpi = 98 ) #NEWLINE#
aobj . __class__ #NEWLINE#
django . contrib . auth . middleware . AuthenticationMiddleware #NEWLINE#
from functools import reduce #NEWLINE# print ( reduce ( lambda x , y : int ( x ) * int ( y ) , [ '2' , '3' , '4' ] ) ) #NEWLINE#
plt . gca ( ) . patch . set_color ( '.25' ) #NEWLINE#
b . swapaxes ( 0 , 1 ) #NEWLINE#
res = [ ( ( s [ i ] + s [ i + 1 ] ) / 2 ) for i in range ( 0 , len ( s ) - 1 , 2 ) ] #NEWLINE#
logger . info ( 'test1' ) #NEWLINE#
[ 'some#SPACE#event' , 'reading:#SPACE#25.4' , 'reading:#SPACE#23.4' , 'reading:#SPACE#25.1' ] #NEWLINE#
doublepp = np . ctypeslib . ndpointer ( dtype = np . uintp ) #NEWLINE#
f = urllib . request . urlopen ( 'http://SOMEWHERE' ) #NEWLINE# soup = BeautifulSoup ( f ) #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#stocks#SPACE#values#SPACE#(?,?,?,?,?)' , t ) #NEWLINE#
serializer . save ( ) #NEWLINE#
b = [ { 'peer' : '127.0.0.1' , 'netmask' : '255.0.0.0' , 'addr' : '127.0.0.1' } ] #NEWLINE#
unpack ( 'd' , '' . join ( value ) ) #NEWLINE#
themod . __dict__ . update ( thedict ) #NEWLINE#
df = pd . DataFrame ( { 'uld' : np . random . randn ( 10 ) } ) #NEWLINE#
words . append ( '%s#SPACE#to#SPACE#%s' % ( span [ 0 ] , span [ - 1 ] ) ) #NEWLINE#
root . title ( 'My#SPACE#Database' ) #NEWLINE#
os . chdir ( '/mydir' ) #NEWLINE#
window . connect ( 'delete-event' , lambda widget , event : True ) #NEWLINE#
print ( re . match ( '^[a-zA-Z0-9_.-]+$' , '#SPACE##SPACE##SPACE##SPACE#' ) ) #NEWLINE#
db = sqlite3 . connect ( 'file:/path/to/database?mode=ro' , uri = True ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
np . searchsorted ( np . sort ( x ) , x ) #NEWLINE#
LOCALE_PATHS = os . path . join ( PROJECT_PATH , 'conf/locale' ) , #NEWLINE#
get_ipython ( ) . config [ 'IPKernelApp' ] [ 'pylab' ] == 'inline' #NEWLINE#
k = k . copy ( k . bucket . name , k . name , { 'myKey' : 'myValue' } , preserve_acl = True ) #NEWLINE#
new_lines . append ( '%s,%s,%s' % ( lines [ 0 ] [ i ] , lines [ 1 ] [ i ] , lines [ 2 ] [ i ] ) ) #NEWLINE#
a . decode ( 'unicode-escape' ) #NEWLINE#
putenv ( 'PYTHONHOME=C:/Python27' ) #NEWLINE#
plt . axvline ( x_position ) #NEWLINE#
mylist . insert ( 0 , mylist . pop ( mylist . index ( targetvalue ) ) ) #NEWLINE#
ax . plot_surface ( X , Y , F ) #NEWLINE#
re . search ( '\\S' , a ) . start ( ) #NEWLINE#
right_df [ 'RHelper' ] = right_df . groupby ( [ 'amount' , 'date' ] ) . cumcount ( ) #NEWLINE#
Done #NEWLINE#
return struct . unpack_from ( '>i' , bits ) [ 0 ] #NEWLINE#
d = { 'key1' : 'value1' , 'key2' : 'value2' } #NEWLINE# [ '{}_{}' . format ( k , v ) for k , v in d . items ( ) ] #NEWLINE#
min ( map ( lambda x : string . index ( x ) if x in string else len ( string ) , specials ) ) #NEWLINE#
bash_command = 'java#SPACE#-jar#SPACE#{{#SPACE#params.jar#SPACE#}}' #NEWLINE#
http_server . listen ( 8080 , address = '127.0.0.1' ) #NEWLINE#
c . execute ( 'INSERT#SPACE#INTO...' ) #NEWLINE#
random . shuffle ( all ) #NEWLINE#
[ 'script.py' , 'arg1' , 'arg2' ] #NEWLINE#
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , 'dir2/dir3' ) ) #NEWLINE#
now = datetime . datetime . utcnow ( ) . replace ( tzinfo = utc ) #NEWLINE#
[ m . groupdict ( ) for m in re . finditer ( '(?P<b>.b.)|(?P<i>.i.)' , 'abcdefghijk' ) ] #NEWLINE#
subprocess . Popen ( cmd ) . wait ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
db = MySQLdb . connect ( 'localhost' , 'testuser' , 'test123' , 'TESTDB' ) #NEWLINE#
plt . scatter ( x , y , c = t , cmap = cm . cmap_name ) #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
legend ( [ p1 , p2 , p3 ] , [ 'Red#SPACE#Rectangle' , 'Blue#SPACE#Circle' , 'Green-dash' ] ) #NEWLINE#
data = base64 . b16decode ( '01000001B8000102030405' ) #NEWLINE#
plt . plot ( total_lengths , sort_times_heap , 'b-' , label = 'Heap' ) #NEWLINE#
filter_func ( parent_dict , lambda x : 2 < x < 4 ) #NEWLINE#
return response #NEWLINE#
cmd = [ 'find' , '.' , '-type' , 'f' , '-iname' , '\\*foo\\*' , '!' , '-name' , '.\\*' ] #NEWLINE#
[ 1 ] [ 0 ] [ 2 ] #NEWLINE#
f . write ( ',' . join ( map ( str ( [ s1 , item , 1 , list1 [ item - 1 ] , er2 ] ) ) ) ) #NEWLINE#
last_wednesday = today - timedelta ( days = offset ) #NEWLINE#
"""-""" . join ( sentence ) #NEWLINE#
driver . get ( 'http://www.google.com.br' ) #NEWLINE#
dot ( array ( [ 0.5 , - 1 ] ) , array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) ) #NEWLINE#
return struct . unpack ( '!I' , socket . inet_aton ( addr ) ) [ 0 ] #NEWLINE#
sorted ( A , key = lambda e : e not in B ) #NEWLINE#
sys . path . append ( os . path . abspath ( scriptpath ) ) #NEWLINE#
ax . set_autoscale_on ( False ) #NEWLINE#
tuple ( numpy . subtract ( ( 10 , 10 ) , ( 4 , 4 ) ) ) #NEWLINE#
return pd . to_datetime ( df [ 'timestamp' ] . quantile ( q , interpolation = 'nearest' ) ) #NEWLINE#
pd . bdate_range ( '2011-01-05' , '2011-01-09' ) #NEWLINE#
image . image . save ( file_name , files . File ( lf ) ) #NEWLINE#
return seq2str ( img . getdata ( ) ) #NEWLINE#
value = re . sub ( '[^0-9]+' , '' , value ) #NEWLINE#
b . sort ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
list ( compress ( list_a , fil ) ) #NEWLINE#
{ ( 0 ) : [ 0 , 1 , 3 ] , ( 2 ) : [ 4 , 5 ] , ( 47 ) : [ 2 , 6 ] } #NEWLINE#
print ( 'Key:#SPACE#%s;#SPACE#Value:#SPACE#%s<br#SPACE#/>' % ( key , value ) ) #NEWLINE#
moduleA . py #NEWLINE#
moduleB . py #NEWLINE#
ar = [ [ str ( item ) for item in results ] for results in cur . fetchall ( ) ] #NEWLINE#
"""#SPACE#\\(\\w+\\)""" #NEWLINE#
plt . show ( ) #NEWLINE#
list ( chain ( * zip_longest ( d , e [ : : - 1 ] , fillvalue = '' ) ) ) #NEWLINE#
x = EqM_list ( someiter ) #NEWLINE#
data = [ x for x in data if type ( x ) == float ] #NEWLINE#
return getattr ( self , '_' + attr_name ) #NEWLINE#
return sorted ( set ( a_list ) ) #NEWLINE#
usage_text = subprocess . check_output ( 'reprec#SPACE#--help' , shell = True ) #NEWLINE#
service . files ( ) . delete ( fileId = dir_id ) . execute ( ) #NEWLINE#
cv2 . imshow ( 'img' , img ) #NEWLINE#
plt . ylabel ( 'some#SPACE#numbers' ) #NEWLINE#
[ 'DT' , 'NN' , 'VBZ' , 'DT' , 'NN' ] #NEWLINE#
[ 1 , 'A' , 'B' , 3 , 4 ] #NEWLINE#
gtk . main ( ) #NEWLINE#
f . close ( ) #NEWLINE#
mpl_toolkits . mplot3d . art3d . Poly3DCollection #NEWLINE#
plt . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
str1 . split ( ) #NEWLINE#
ax . set_xlim ( - 0.5 , 1.5 ) #NEWLINE#
urllib . request . urlopen ( 'http://latest/temp.csv' ) #NEWLINE#
print ( mystring [ 2 : 4 ] ) #NEWLINE#
user_id = Column ( ForeignKey ( User . id ) , primary_key = True ) #NEWLINE#
[ i for i in l for r in range ( 2 ) ] #NEWLINE#
x = f . readlines ( ) #NEWLINE#
tree = etree . parse ( StringIO ( your_xml_string ) , magical_parser ) #NEWLINE#
map ( f , tuple_list ) #NEWLINE#
main_list = [ [ ( 1 , 2 ) , ( 3 , 4 ) ] , [ ( 5 , 6 ) , ( 7 , 8 ) ] ] #NEWLINE#
writer . writerow ( re . split ( '[\t|]' , line ) ) #NEWLINE#
if var in ( 'stringone' , 'stringtwo' ) : #NEWLINE# #INDENT# dosomething ( ) #NEWLINE#
bare_argspec = inspect . getargspec ( func ) #NEWLINE#
pd . DataFrame ( list ( d . items ( ) ) ) #NEWLINE# pd . DataFrame ( list ( d . items ( ) ) , columns = [ 'Date' , 'DateValue' ] ) #NEWLINE#
pixels = list ( im . getdata ( ) ) #NEWLINE#
[ ( x - y ) for x , y in it . izip ( a [ 1 : ] , a ) ] #NEWLINE#
lst = [ None ] + [ x [ 1 : ] for x in sorted ( lists ) ] #NEWLINE#
a . dtype = numpy . float32 #NEWLINE#
plot ( xx , mvals , color = 'b' , linewidth = 3 ) #NEWLINE#
b = word in ( w for i , w in enumerate ( wordList ) if i != 1 ) #NEWLINE#
s = 'Name1=Value1;Name2=Value2;Name3=Value3' #NEWLINE# dict ( item . split ( '=' ) for item in s . split ( ';' ) ) #NEWLINE#
self . assertEqual ( actual , expected ) #NEWLINE#
ax2 . set_ylim ( 0 , 1.2 ) #NEWLINE#
print ( map ( itemgetter ( 0 ) , next ( bykey ) [ 1 ] ) ) #NEWLINE#
subA . tick_params ( labelsize = 6 ) #NEWLINE#
s = '' . join ( chr ( c ) for c in range ( 1114111 + 1 ) ) #NEWLINE#
ax . legend ( [ 'Popularity' , 'RateMedian' , 'FirstPpl' , 'FirstRM' ] ) #NEWLINE#
queryset = User . objects . all ( ) #NEWLINE#
fun ( ** { b . decode ( ) : v for b , v in list ( dic . items ( ) ) } ) #NEWLINE#
return redirect ( request . form [ 'wantsurl' ] ) #NEWLINE#
{ { ( float_var | stringformat ) : 'f' } } #NEWLINE#
frame . convert ( '1h' , how = 'mean' ) #NEWLINE#
from multiprocessing import Process , Queue #NEWLINE#
x = EqM_list ( iter ( d . keys ( ) ) ) #NEWLINE#
[ '' . join ( y ) for _ , y in groupby ( s ) ] #NEWLINE#
return app . run ( ) #NEWLINE#
f = open ( '%s.sql' % today , 'w' ) #NEWLINE#
from sklearn . feature_extraction . text import CountVectorizer #NEWLINE#
( A . ravel ( ) [ : , ( None ) ] == B . ravel ( ) ) . any ( ) #NEWLINE#
np . array ( [ [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , [ [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ] ) #NEWLINE#
sympy . solve ( [ sympy . Eq ( b - a ** 2.552 - c ) , sympy . Eq ( b , 2 ) ] , rational = False ) #NEWLINE#
globals ( ) . update ( { name : module_dict [ name ] for name in to_import } ) #NEWLINE#
cursor . execute ( 'INSERT#SPACE#INTO#SPACE#mytable(name,address)#SPACE#VALUES#SPACE#(?,?)' , ( 'thavasi' , #NEWLINE# 'mumbai' ) ) #NEWLINE#
open ( 'test_newlines.txt' , 'U' ) . readlines ( ) #NEWLINE#
np . random . seed ( seed = 0 ) #NEWLINE#
zip ( * ( s [ i : ] for i in range ( n ) ) ) #NEWLINE#
print ( os . environ [ 'SUDO_USER' ] ) #NEWLINE#
plt . xlabel ( 'Blur#SPACE#standard#SPACE#deviation' ) #NEWLINE#
print ( r . status_code ) #NEWLINE#
mytics = [ 'January\n2008' , 'February\n2008' , 'March\n2008' ] #NEWLINE#
new_list . append ( temp_list ) #NEWLINE#
return object . __new__ ( cls , * args , ** kwargs ) #NEWLINE#
print ( ( i * '*' ) . rjust ( n ) ) #NEWLINE#
yield Request ( link . url , callback = self . parse ) #NEWLINE#
A = ( A - mean ( A , axis = 0 ) ) / std ( A , axis = 0 ) #NEWLINE#
a [ np . ix_ ( [ 0 , 1 , 3 ] , [ 0 , 2 ] ) ] #NEWLINE#
list ( itertools . product ( a , b ) ) #NEWLINE#
[ 0.00148820116 , 0.000295700572 , 0.00441516179 ] , #NEWLINE#
[ 0.000268791866 , 0.00116836123 , 0.00032721782 ] , #NEWLINE#
[ 0.00138648301 , 0.00826692582 , 0.0120482313 ] , #NEWLINE#
[ 8.38762247e-05 , 0.00958768066 , 0.00318903965 ] , #NEWLINE#
[ 9.94132918e-05 , 0.00106267623 , 0.00649315435 ] , #NEWLINE#
[ 0.00995764539 , 0.0357657737 , 0.0126179014 ] , #NEWLINE#
[ 0.00125210929 , 0.000859735215 , 0.000420124326 ] , #NEWLINE#
print ( ',#SPACE#' . join ( map ( sep , tags ) ) ) #NEWLINE#
html5parser . document_fromstring ( '<html></html' . encode ( 'utf-8' ) ) #NEWLINE#
df . iloc [ : , ( 0 ) ] #NEWLINE#
return getattr ( self , name ) #NEWLINE#
root . wm_attributes ( '-disabled' , True ) #NEWLINE#
cv2 . imshow ( 'kalman' , frame ) #NEWLINE#
ttkcal . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
ax1 = fig . add_subplot ( 1 , 2 , 1 ) #NEWLINE#
arr = np . array ( [ 100.1 , 200.42 , 4.14 , 89.0 , 34.55 , 1.12 ] ) #NEWLINE# arr [ [ 1 , 4 , 5 ] ] #NEWLINE#
d = re . sub ( '(-|\\+|\\*\\*|\\*)#SPACE#' , '\\1' , c ) #NEWLINE#
rc ( 'backend' , qt4 = 'PySide' ) #NEWLINE#
[ 2 , 2 , 3 , 2 , 2 , 1 , 2 , 2 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 2 , 2 , 2 ] #NEWLINE#
print ( ruamel . yaml . dump ( d , Dumper = ruamel . yaml . RoundTripDumper ) ) #NEWLINE#
np . sum ( x , axis = - 1 ) [ : , ( np . newaxis ) ] - np . cumsum ( x , axis = - 1 ) #NEWLINE#
person = models . ForeignKey ( Person , through = 'GroupMembers' ) #NEWLINE#
ax . yaxis . set_major_locator ( MultipleLocator ( 1.0 ) ) #NEWLINE#
b , g , r = img [ : , : , ( 0 ) ] . copy ( ) , img [ : , : , ( 1 ) ] . copy ( ) , img [ : , : , ( 2 ) ] . copy ( ) #NEWLINE#
list ( chain . from_iterable ( [ [ '^' , x ] for x in mystring ] ) ) #NEWLINE#
result = struct . unpack ( '<{0}f' . format ( count ) , data ) #NEWLINE#
<STR0> = models . CharField ( max_length = 140 , blank = True , null = True ) #NEWLINE#
event . widget . configure ( background = 'white' ) #NEWLINE#
'%07.3f' % 5 #NEWLINE#
raise ValidationError ( "Start#SPACE#date#SPACE#can't#SPACE#be#SPACE#in#SPACE#the#SPACE#future" ) #NEWLINE#
smtp . sendmail ( from_addr , to_addr , message . as_string ( ) ) #NEWLINE#
lst . sort ( key = lambda x : x [ 2 ] , reversed = True ) #NEWLINE#
return self . context [ 'request' ] . user #NEWLINE#
[ ( 0 , 3 ) , ( 0 , 4 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) ] #NEWLINE#
process . kill ( ) #NEWLINE#
views . py #NEWLINE#
conn . send ( data ) #NEWLINE#
hist ( [ ( t . hour + t . minute / 60.0 ) for t in ts ] , bins = 24 * 60 / 15 ) #NEWLINE#
self . emit ( QtCore . SIGNAL ( 'XXX' ) ) #NEWLINE#
result = has_model_permissions ( myuser , mycar , [ 'read' ] , 'drivers' ) #NEWLINE#
plt . scatter ( x , y , marker = '+' , edgecolors = colors , s = 150 , linewidths = 4 ) #NEWLINE#
ET . register_namespace ( 'com' , 'http://www.company.com' ) #NEWLINE#
session . add ( p ) #NEWLINE#
{ 1 , 1 , 2 , 3 , 5 } #NEWLINE#
c . append ( quad ( f , - 1 , 1 , args = list ( range ( 1 , n + 1 ) ) ) [ 0 ] ) #NEWLINE#
"""this_is_a_dummy_url_that_works""" #NEWLINE#
print ( ( 'Currently#SPACE#working#SPACE#on' , first_argument ) ) #NEWLINE#
conn . execute ( 'interface#SPACE#Serial1/0' ) #NEWLINE#
conn . execute ( 'no#SPACE#shutdown' ) #NEWLINE#
conn . execute ( 'end' ) #NEWLINE#
conn . execute ( 'sh#SPACE#run#SPACE#int#SPACE#Serial1/0' ) #NEWLINE#
conn . execute ( 'show#SPACE#ip#SPACE#route' ) #NEWLINE#
content = some_file . read ( ) #NEWLINE#
print ( [ result . get ( timeout = 10 ) for result in results ] ) #NEWLINE#
pipe ( sc . parallelize ( [ 1 , 2 , 3 ] ) , squares , lambda rdd : rdd . collect ( ) ) #NEWLINE#
l = [ [ 'x1' , 'y1' ] , [ 'x2' , 'y2' ] ] #NEWLINE# zip ( * l ) #NEWLINE#
foo_table . create ( ) #NEWLINE#
np . savetxt ( f , np . hstack ( ( rows , data ) ) , delimiter = ',#SPACE#' , fmt = '%s' ) #NEWLINE#
child . expect ( '.*\\$#SPACE#' ) #NEWLINE#
print ( lxml . html . tostring ( doc ) ) #NEWLINE#
df = df . append ( df ) #NEWLINE#
[ 11 , 11 , 11 , 1 , 18 , 14 , 14 , 9 , 9 ] #NEWLINE#
logging . getLogger ( ) . addHandler ( setupcon . ColoredHandler ( ) ) #NEWLINE#
return self . f . read ( size ) #NEWLINE#
is_private = request . POST . get ( 'is_private' , False ) #NEWLINE#
[ 1 , 2 , 3 , 6 , 8 , 9 , 10 , 16 ] #NEWLINE#
return [ functions [ i ] ( values [ i ] ) for i in range ( len ( functions ) ) ] #NEWLINE#
final_df [ [ 'Order#SPACE#ID' , 'Items#SPACE#Ordered' ] ] #NEWLINE#
a = np . array ( [ 'True' , 'False' , 'True' , 'False' ] ) #NEWLINE#
'%d,' * 2 % ( 1 , 2 ) #NEWLINE#
table = soup . find ( 'table' , attrs = { 'class' : 'details' } ) #NEWLINE#
return arr [ indices [ : , ( 0 ) ] , indices [ : , ( 1 ) ] ] #NEWLINE#
users . create ( ) #NEWLINE#
map ( lambda x : str . replace ( x , '[br]' , '<br/>' ) , words ) #NEWLINE#
l3 = sorted ( list ( d . values ( ) ) , key = itemgetter ( 'index' ) ) #NEWLINE#
ws = wb . worksheets [ 0 ] #NEWLINE#
getpass . getuser ( ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
parrot ( ** d ) #NEWLINE#
ax = fig1 . gca ( ) #NEWLINE#
re . split ( '|' . join ( list1 ) , s ) #NEWLINE#
self . setWindowTitle ( 'Preview' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
c1 . execute ( "INSERT#SPACE#INTO#SPACE#foo#SPACE#VALUES#SPACE#('spam',#SPACE#'ham')" ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
self . pack ( ) #NEWLINE#
itertools . count ( 1000000000000 ) #NEWLINE#
sum ( a ) #NEWLINE#
print ( np . where ( df [ 'c' ] == 6 ) [ 0 ] ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
os . _exit ( 0 ) #NEWLINE#
print ( sess . run ( [ x , y ] ) ) #NEWLINE#
self . queries . append ( a [ 1 ] ) #NEWLINE#
tree . find ( './/begdate' ) . text = '1/1/2011' #NEWLINE# tree . find ( './/enddate' ) . text = '1/1/2011' #NEWLINE#
driver . find_element_by_name ( 'submit' ) . click ( ) #NEWLINE#
print ( 'Today:#SPACE#' , datetime . today ( ) . strftime ( '%d/%m/%Y' ) ) #NEWLINE#
plt . text ( i , i , '\\pdftooltip{o}{(%d,%d)}' % ( i , i ) ) #NEWLINE#
json . dumps ( [ str ( nparray . dtype ) , base64 . b64encode ( nparray ) , nparray . shape ] ) #NEWLINE#
ax . set_zticks ( np . arange ( 0 , 9 , 0.5 ) ) #NEWLINE#
image . save ( output , format = 'GIF' ) #NEWLINE#
s . bind ( ( 'localhost' , 5000 ) ) #NEWLINE#
return [ rowdict . get ( key , self . restval ) for key in self . fieldnames ] #NEWLINE#
print ( list ( itertools . chain ( * kana ) ) ) #NEWLINE#
print ( re . findall ( '(.(?:foo))' , 'Xfoo' ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
img = np . empty ( ( 100 , 100 , 1 ) , dtype = np . uint16 ) #NEWLINE#
k . append ( j ) #NEWLINE#
temp = line . partition ( '|' ) #NEWLINE#
raise serializers . ValidationError ( 'This#SPACE#field#SPACE#is#SPACE#required' ) #NEWLINE#
fig . savefig ( 'example.pdf' ) #NEWLINE#
[ ( 'B' , 'option3' ) , ( 'B' , 'option4' ) , ( 'B' , 'option1' ) ] #NEWLINE#
client . send ( message ) #NEWLINE#
newobjs . _register ( obj ) #NEWLINE#
p . kill ( ) #NEWLINE#
turtle . penup ( ) #NEWLINE#
return math . exp ( - np . logaddexp ( 0 , - x ) ) #NEWLINE#
rsp = requests . get ( 'http://google.com' , stream = True ) #NEWLINE#
ax . boxplot ( data ) #NEWLINE#
return coords . reshape ( - 1 , 3 ) #NEWLINE#
newwords = set ( words ) - set ( englishwords ) #NEWLINE#
win . show_all ( ) #NEWLINE#
args = parser . parse_args ( get_xyz_cmd_line ( sys . argv [ 1 : ] ) ) #NEWLINE#
ax . legend ( [ p1 , p2 ] , [ '$P_1(x)$' , '$P_2(x)$' ] ) #NEWLINE#
reactor . run ( ) #NEWLINE#
json . dumps ( ) #NEWLINE#
master . mainloop ( ) #NEWLINE#
np . random . seed ( 123 ) #NEWLINE#
[ '/home/pat/root/lib/python27.zip' , '/home/pat/root/lib/python2.7' ] #NEWLINE#
cropped = pygame . Surface ( ( 80 , 80 ) ) #NEWLINE#
list ( product ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
a = np . array ( [ [ 1 , 3 , 4 ] , [ 1 , 2 , 3 ] , [ 1 , 2 , 1 ] ] ) #NEWLINE#
pandas . merge ( df . stack ( 0 ) . reset_index ( 1 ) , id , left_index = True , right_index = True ) #NEWLINE#
s = 'hi' #NEWLINE# [ ord ( c ) for c in s ] #NEWLINE#
print ( c . get ( 'bob' , 'british' ) ) #NEWLINE#
Ainv = np . array ( map ( np . linalg . inv , A ) ) #NEWLINE#
milestones_list = milestones_df . index . tolist ( ) #NEWLINE#
new_s = '' . join ( ( s [ : 1 ] , new , s [ 6 : ] ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
plt . gcf ( ) . show ( ) #NEWLINE#
next ( ( x for x in seq if predicate ( x ) ) , None ) #NEWLINE#
os . symlink ( linkto , dst ) #NEWLINE#
print ( yaml . dump ( data , Dumper = yaml . RoundTripDumper , indent = 4 ) ) #NEWLINE#
mainloop ( ) #NEWLINE#
"""0#SPACE#0""" #NEWLINE#
numpy . array ( [ network . activate ( x ) for x , _ in train ] ) #NEWLINE#
result = np . zeros ( N , dtype = 'object' ) #NEWLINE#
print ( os . path . join ( path , file ) ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
np . dstack ( np . nonzero ( df . values ) ) [ 0 ] #NEWLINE#
len ( df [ ( df [ 'A' ] > 0 ) & ( df [ 'B' ] > 0 ) & ( df [ 'C' ] > 0 ) ] ) #NEWLINE#
k = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
hash ( str ( d ) ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
toks = re . compile ( '#SPACE#+|[A-Za-z]+|[()]' ) #NEWLINE#
QtGui . QTabWidget . addTab ( self , widget , title ) #NEWLINE#
logger . debug ( 'SOME#SPACE#OUTPUT#SPACE#HERE' ) #NEWLINE#
result_list = list ( result . values ( ) ) #NEWLINE#
psycopg2 . connect ( 'dbname=dev_db#SPACE#user=dev' ) . encoding #NEWLINE#
print ( cls . __name__ ) #NEWLINE#
self . assertEqual ( list ( device . get_ips ( ) ) , [ ip1 , ip2 , ip3 ] ) #NEWLINE#
quantile ( [ 8.60789925e-05 , 1.98989354e-05 , 0.000168308882 , 0.00016937937 ] , 0.8 ) #NEWLINE#
cv2 . randu ( im , 0 , 99 ) #NEWLINE#
X , Y = np . meshgrid ( XB , YB ) #NEWLINE#
[ 'great' , 'A' , 'a' , 'Det' , 3 ] #NEWLINE#
median ( [ [ 6 , 8 , 2 , 3 ] , [ 1 , 5 , 6 , 2 ] ] ) #NEWLINE#
print ( icon_info . get_filename ( ) ) #NEWLINE#
self . _var1 = 1 #NEWLINE#
import numpy as np #NEWLINE#
pylab . draw ( ) #NEWLINE#
print ( celery . AsyncResult . task_id ) #NEWLINE#
a . argsort ( ) [ - 10 : ] #NEWLINE#
window . activateWindow ( ) #NEWLINE#
json . loads ( json_str . decode ( 'utf-8' , 'ignore' ) ) #NEWLINE#
app . run ( host = '0.0.0.0' ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
"""00:23:3a:99:0c:21""" #NEWLINE#
content_sizer = wx . BoxSizer ( wx . HORIZONTAL ) #NEWLINE#
del L [ : : 2 ] #NEWLINE#
arr [ 1 , - 1 ] #NEWLINE#
print ( sum ( a ) ) #NEWLINE#
form . content . data = 'please#SPACE#type#SPACE#content' #NEWLINE#
np . argsort ( b ) [ c ] #NEWLINE#
return '<i>' + fn ( ) + '</i>' #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
[ ( x * 2 ) for x in [ 2 , 2 ] ] #NEWLINE#
return self . part_set . select_related ( 'manufacturer' ) #NEWLINE#
"""[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$""" #NEWLINE#
repr ( 0.1234567890123 ) #NEWLINE#
console . setFormatter ( color_formatter ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
df [ df [ 'A' ] . str . contains ( '^(?:(?!Hello|World).)*$' ) ] #NEWLINE#
signal . signal ( signal . SIGINT , old_action ) #NEWLINE#
log . info ( 'client' , 'client#SPACE#disconnected' ) #NEWLINE#
silhouette_score ( iris . data , iris . target , sample_size = 50 ) #NEWLINE#
print ( fout . read ( ) ) #NEWLINE#
des3dec . decrypt ( des3enc . encrypt ( '12345678abcdefgh12345678' ) ) #NEWLINE#
plt . ylim ( [ 0 , 1 ] ) #NEWLINE#
df = df [ df [ 'count' ] == df [ 'count_max' ] ] #NEWLINE#
sys . exit ( ) #NEWLINE#
a = MA . array ( [ 1 , 2 , <STR0> ] , mask = [ 0 , 0 , 1 ] ) #NEWLINE#
item = relationship ( ITEM , backref = 'attribute' , uselist = False ) #NEWLINE#
map ( lambda x : group ( x , a ) , sum_vals ) #NEWLINE#
[ ( stuff + stuff [ : n / 2 - 1 ] ) [ i : i + n / 2 ] for i in range ( n ) ] #NEWLINE#
print ( params [ 'charset' ] ) #NEWLINE#
ax . set_yscale ( 'symlog' , basey = 2 ) #NEWLINE#
r = re . compile ( 'abc\\s+def' ) #NEWLINE#
print ( unicode_obj . encode ( 'utf-8' ) ) #NEWLINE#
path = os . path . join ( os . path . dirname ( __file__ ) , 'static' , q ) #NEWLINE#
self . username = 'Guest' #NEWLINE#
min_price = min ( item [ 'price' ] for item in items ) #NEWLINE#
[ [ 'Ip' , 'Sites' ] , [ '127.0.0.1' , '10' ] , [ '127.0.0.2' , '30' ] , [ '127.0.0.3' , '50' ] #NEWLINE# ] #NEWLINE#
return math . acos ( dotproduct ( v1 , v2 ) / ( length ( v1 ) * length ( v2 ) ) ) #NEWLINE#
ftp = FTP ( 'ftp.cwi.nl' ) #NEWLINE#
print ( link [ 'href' ] ) #NEWLINE#
output = subprocess . check_output ( 'ls#SPACE#-a' , shell = True ) #NEWLINE#
[ [ 'pie' , 'eclairs' ] , [ 'bacon' , 'chocolate' ] , 'brownies' , 'cookies' ] #NEWLINE#
reactor . run ( ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#name' ) #NEWLINE#
rest = ( n - last_digit ) / 10 #NEWLINE#
c [ 'date' ] = '{}-{}-{}' . format ( c [ 'date' ] [ 0 : 4 ] , c [ 'date' ] [ 4 : 6 ] , c [ 'date' ] [ 6 : ] ) #NEWLINE#
open ( path , 'w' ) . write ( text . replace ( pattern , replace ) ) #NEWLINE#
x = math . ceil ( x * 100.0 ) / 100.0 #NEWLINE#
super ( MainForm , self ) . __init__ ( parent ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
long_string = 'fooothis#SPACE#is#SPACE#really#SPACE#longstring' #NEWLINE#
view . configure_traits ( ) #NEWLINE#
df [ 'a' ] = df [ 'a' ] . astype ( float ) #NEWLINE#
pc . set_facecolor ( 'red' ) #NEWLINE#
M . reshape ( - 1 , 2 , 2 ) . sum ( axis = 0 ) #NEWLINE#
return 'eval(' + s + ')' #NEWLINE#
df . loc [ 1 : 3 ] #NEWLINE#
request . route_url ( 'idea' , idea = 'great' , _query = { 'sort' : 'asc' } ) #NEWLINE#
a = np . random . randint ( 0 , 9 , 10 ) #NEWLINE#
userhome = str ( userhome , 'unicode-escape' ) . encode ( 'utf8' ) #NEWLINE#
tuple ( l ) #NEWLINE#
cropped . blit ( buttonStates , ( 0 , 0 ) , ( 30 , 30 , 80 , 80 ) ) #NEWLINE#
admin . site . register ( Session , SessionAdmin ) #NEWLINE#
row [ 0 , col . argsort ( ) ] #NEWLINE#
struct . unpack ( '>BB' , struct . pack ( '>h' , 200 ) ) #NEWLINE#
ax . add_artist ( circle ) #NEWLINE#
rawstr = '' . join ( list ( mydict . keys ( ) ) ) #NEWLINE#
wb . Close ( ) #NEWLINE#
parser . add_argument ( '-B' , action = 'store_true' ) #NEWLINE#
parser . add_argument ( '-D' , action = 'store_true' ) #NEWLINE#
np . where ( np . diff ( x ) > 0.5 ) [ 0 ] #NEWLINE#
super ( CustomBarModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
presentation . SaveAs ( 'C:\\...........\\Final_PowerPoint.pptx' ) #NEWLINE#
out = arr [ np . arange ( idx . shape [ 0 ] ) [ : , ( None ) ] , idx ] #NEWLINE#
line . set_linewidth ( 3 ) #NEWLINE#
self . text_ent . grid ( row = 1 , column = 0 ) #NEWLINE#
5 + np . random . sample ( 10 ) * 5 #NEWLINE#
ax . xaxis . set_major_formatter ( formatter ) #NEWLINE#
df . pivot ( index = 0 , columns = 1 , values = 3 ) #NEWLINE#
math . radians ( 45.0 ) #NEWLINE#
hrOut . write ( '{}\n' . format ( i . rstrip ( ) . zfill ( 5 ) ) ) #NEWLINE#
print_all ( 'Claus' , 'car' , 'boat' , 'house' ) #NEWLINE#
return max ( depth ( self . left ) , depth ( self . right ) ) + 1 #NEWLINE#
dataframe . loc [ : , ( [ 'A' , 'B' , 'C' ] ) ] #NEWLINE#
pd . melt ( df , id_vars = [ 'A' ] ) #NEWLINE#
nested_set ( d , [ 'person' , 'address' , 'city' ] , 'New#SPACE#York' ) #NEWLINE#
flask . request . user_agent . string #NEWLINE#
print ( list ( reader ) ) #NEWLINE#
next ( iter ( list ( c . items ( ) ) ) ) #NEWLINE#
ftp . cwd ( path + file + '/' ) #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
logging . getLogger ( 'suds.transport' ) . setLevel ( logging . DEBUG ) #NEWLINE#
logging . getLogger ( 'suds.xsd.schema' ) . setLevel ( logging . DEBUG ) #NEWLINE#
logging . getLogger ( 'suds.wsdl' ) . setLevel ( logging . DEBUG ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
m . group ( 1 ) . split ( '.' ) #NEWLINE#
print ( 'abc\n123' ) #NEWLINE#
sorted ( 2 * list ( range ( 5 ) ) ) #NEWLINE#
string . Template . pattern . findall ( '$one#SPACE#is#SPACE#a#SPACE#$lonely#SPACE#$number.' ) #NEWLINE#
a = 'Hello' if foo ( ) else 'Goodbye' #NEWLINE#
MyOrder . objects . filter ( order_date__year = <STR0> ) #NEWLINE#
print ( response . content ) #NEWLINE#
return session . query ( Action ) . filter_by ( name = name ) . one ( ) #NEWLINE#
return ShowAppsView . as_view ( ) ( self . request ) #NEWLINE#
df . to_excel ( writer ) #NEWLINE#
text . bind ( '<<Modified>>' , callback ) #NEWLINE#
print ( '%s,#SPACE#you#SPACE#won!' % name ) #NEWLINE#
name = models . CharField ( max_length = 64 ) #NEWLINE#
df [ 0 ] . plot ( ax = axes [ 0 , 0 ] , style = 'r' , label = 'Series' ) #NEWLINE#
print ( ( 'In#SPACE#first#SPACE#loop' , x ) ) #NEWLINE#
connection . close ( ) #NEWLINE#
df . loc [ cond1 | cond2 ] #NEWLINE#
soup = BeautifulSoup ( htmlstring ) #NEWLINE# soup . findAll ( 'div' , style = 'width=300px;' ) #NEWLINE#
app . run ( host = '0.0.0.0' , debug = True ) #NEWLINE#
ax . legend ( loc = 0 ) #NEWLINE#
print ( list_end_counter ( [ 1 , 1 , 2 , 2 , 2 , 2 ] ) ) #NEWLINE#
a . append ( 3 ) #NEWLINE#
print ( os . path . abspath ( os . path . expanduser ( '~/blob_files/myfile.blob' ) ) ) #NEWLINE#
os . chown ( path , uid , gid ) #NEWLINE#
from django . conf import settings #NEWLINE#
timeit . timeit ( "convert_to_celsius_lambda_once(100,#SPACE#'kelvin')" , setup = setup ) #NEWLINE#
os . system ( "bash#SPACE#-c#SPACE#'%s'" % script ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
outfile . write ( ',' . join ( [ ( '%f' % value ) for value in values ] ) ) #NEWLINE#
[ ( int ( lst [ x ] ) if x in indices else lst [ x ] ) for x in range ( len ( lst ) ) ] #NEWLINE#
my_dictionary_list #NEWLINE#
[ 'B' , 'D' , 'E' , 'C' ] #NEWLINE#
[ 'D' , 'D' , 'A' , 'E' ] #NEWLINE#
[ 'F' , 'D' , 'D' , 'D' ] #NEWLINE#
[ 'B' , 'F' , 'E' , 'E' ] #NEWLINE#
[ 'D' , 'E' , 'A' , 'A' ] #NEWLINE#
x . __enter__ ( ) #NEWLINE#
df . sort ( columns = [ 'name' ] , inplace = True ) #NEWLINE#
cursor3 . execute ( sql , args ) #NEWLINE#
a % b #NEWLINE#
i = [ int ( x ) for x in s . split ( ) ] #NEWLINE#
dict ( zip ( x , y ) ) #NEWLINE#
webbrowser . open ( url , new = 0 , autoraise = True ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE# zip ( * ( [ iter ( l ) ] * 2 ) ) #NEWLINE#
lst [ i ] = '' #NEWLINE#
parser . add_argument ( 'req1' , help = 'first#SPACE#required#SPACE#parameter' ) #NEWLINE#
print ( os . path . realpath ( 'test/link/file' ) ) #NEWLINE#
ax . set_xlim ( - 10 , 10 ) #NEWLINE#
show ( ) #NEWLINE#
df . apply ( fillnull ) #NEWLINE#
[ k for k in list ( mydict . keys ( ) ) if k >= 6 ] #NEWLINE#
"""\\d{{{0}}}""" . format ( var ) #NEWLINE#
np . concatenate ( [ [ 0 ] , a ] ) #NEWLINE#
show ( p ) #NEWLINE#
cleanedList = [ x for x in countries if x != 'nan' ] #NEWLINE#
cv . DestroyWindow ( 'Camera#SPACE#2' ) #NEWLINE#
print ( df . fillna ( '' ) . groupby ( 'id' ) . sum ( ) . replace ( '' , 'null' ) ) #NEWLINE#
rows = [ [ field [ k ] [ i ] for k in list ( field . keys ( ) ) ] for i in range ( 2 ) ] #NEWLINE#
window . show ( ) #NEWLINE#
clientsocket . send ( p ) #NEWLINE#
process = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) #NEWLINE#
cv2 . namedWindow ( 'dst_rt' , cv2 . WINDOW_NORMAL ) #NEWLINE#
return a + b #NEWLINE#
print ( os . path . join ( dir , file ) ) #NEWLINE#
datetime . datetime . utcfromtimestamp ( seconds ) #NEWLINE#
self . y = 0 #NEWLINE#
ax . set_yticks ( [ 2.5e-07 , 1.5e-07 , 3.5e-07 ] ) #NEWLINE#
self . destroy ( ) #NEWLINE#
e . toxml ( ) #NEWLINE#
[ ast . literal_eval ( el ) for el in lst ] #NEWLINE#
pipe . write ( action + '\n' ) #NEWLINE#
dt = datetime . strptime ( s , '%d/%m/%Y-%H:%M:%S' ) #NEWLINE#
f = open ( os . path . expanduser ( '~/Desktop/somefile.txt' ) ) #NEWLINE#
headers = { 'Content-Type' : 'application/json' } #NEWLINE#
next ( y ) #NEWLINE#
kanjinums . kanji2num ( 'äº\x94ç\x99¾å\x8d\x81ä¸\x80' ) #NEWLINE#
book = Workbook ( ) #NEWLINE#
[ { 'index' : date , 'value' : val } for date , val in zip ( d [ 'index' ] , d [ 'data' ] ) ] #NEWLINE#
fullpower = quad ( f , 1e-09 , np . inf ) [ 0 ] #NEWLINE#
plt . figure ( figsize = ( 8 , 8 ) ) #NEWLINE# plt . axis ( 'off' ) #NEWLINE# for line in bent_lines : #NEWLINE# #INDENT# plt . plot ( line [ 0 ] , line [ 1 ] , linewidth = 0.5 , color = 'k' ) #NEWLINE# plt . show ( ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
plt . draw ( ) #NEWLINE#
p = re . compile ( 'Num\\d{2}' ) #NEWLINE#
print ( np . partition ( x , - 10 ) [ - 10 : ] ) #NEWLINE#
a [ : , ( 1 ) ] #NEWLINE#
plt . plot ( x ) #NEWLINE#
plt . figure ( figsize = ( 7 , 7 ) , dpi = 300 ) #NEWLINE#
pyscreenshot . grab_to_file ( 'screenshot.png' ) #NEWLINE#
req . get_method ( ) #NEWLINE#
t . start ( ) #NEWLINE#
g = df . groupby ( df . eq ( 0 ) . dot ( 1 << np . arange ( 5 ) ) ) #NEWLINE#
input ( '<Hit#SPACE#Enter#SPACE#To#SPACE#Close>' ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 2 ) , columns = list ( 'ab' ) ) #NEWLINE#
super ( MyModel , self ) . delete ( * args , ** kwargs ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
cur . mogrify ( 'INSERT#SPACE#INTO#SPACE#test#SPACE#(num,#SPACE#data)#SPACE#VALUES#SPACE#(%s,#SPACE#%s)' , ( 42 , 'bar' ) ) #NEWLINE#
print ( [ abs ( v - l [ ( i + 1 ) % len ( l ) ] ) for i , v in enumerate ( l ) ] ) #NEWLINE#
random . sample ( list ( range ( 30 ) ) , 4 ) #NEWLINE#
print ( is_json ( '{"age":100#SPACE#}' ) ) #NEWLINE#
output = subprocess . check_output ( 'cat#SPACE#/etc/services' , shell = True ) #NEWLINE#
super ( OrdDictSub , self ) . __init__ ( ) #NEWLINE#
print ( df ) #NEWLINE#
zipf = zipfile . ZipFile ( 'Python.zip' , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
HTML_with_style ( df . head ( ) , '<style>table#SPACE#{color:#SPACE#red}</style>' ) #NEWLINE#
print ( 'ID#SPACE#%d:#SPACE#From:#SPACE#%s#SPACE#Date:#SPACE#%s' % ( msgid , msg [ 'From' ] , msg [ 'date' ] ) ) #NEWLINE#
[ ( k , adict [ k ] ) for k in sorted ( adict , key = adict . get , reverse = True ) ] #NEWLINE#
myDict = { 'key' : [ ] } #NEWLINE#
s . replace ( 0 , np . nan ) . dropna ( ) . astype ( s . dtype ) #NEWLINE#
sp . wait ( ) #NEWLINE#
test . ix [ i : : 4 ] #NEWLINE#
'foo#SPACE##SPACE#bar' . split ( '#SPACE#' ) is [ 'foo' , '' , 'bar' ] #NEWLINE#
function ( * args , ** kwargs ) #NEWLINE#
return [ myslice ( * map ( int , x . split ( '-' ) ) ) for x in s . split ( ',' ) ] #NEWLINE#
sock . settimeout ( 5 ) #NEWLINE#
cj = cookielib . CookieJar ( ) #NEWLINE#
myvar = tf . Variable ( tf . truncated_normal ( ( 10 , 10 ) , stddev = 0.1 , seed = 0 ) ) #NEWLINE#
pd . DataFrame ( data , df . index , u ) #NEWLINE#
LOGIN_URL = reverse_lazy ( 'login' ) #NEWLINE#
[ 'up' , 'down' , 'left' ] #NEWLINE#
{ 'model' : 'Event' , 'name' : 'vs#SPACE#Green#SPACE#Bay#SPACE#Packers' } #NEWLINE#
parser . add_argument ( '--right-operands' , '-r' , nargs = '+' , required = True ) #NEWLINE#
stats . sort ( key = lambda x : ( x [ 'A' ] , x [ 'Z' ] ) ) #NEWLINE# stats . sort ( key = lambda x : ( x [ 'K' ] , x [ 'B' ] ) , reverse = True ) #NEWLINE#
print ( oct ( stat . S_IMODE ( os . stat ( 'testlink' ) . st_mode ) ) ) #NEWLINE#
file . seek ( 0 , os . SEEK_END ) #NEWLINE#
assert self . var == 'whatever_the_value_is_in#SPACE#self.xmlfile' #NEWLINE#
parser . parse ( open ( filename ) ) #NEWLINE#
a [ 0 ] [ 0 ] #NEWLINE#
str ( f ) #NEWLINE#
pd . melt ( df . reset_index ( ) , id_vars = 'date' , value_vars = [ '1' , '2' ] , var_name = 'Id' ) #NEWLINE#
sizer . Add ( input , 1 , wx . EXPAND | wx . ALL , 5 ) #NEWLINE#
df [ df . eq ( df [ 1 ] , axis = 'index' ) . all ( 1 ) ] . dropna ( ) #NEWLINE#
colors . append ( 'b' ) #NEWLINE#
os . system ( 'Perform#SPACE#whatever#SPACE#adb#SPACE#commands#SPACE#you#SPACE#need' ) #NEWLINE#
ax . plot_surface ( Rnew * np . cos ( Tnew ) , Rnew * np . sin ( Tnew ) , Znew ) #NEWLINE#
name = models . CharField ( max_length = 10 , default = 'bar#SPACE#y' ) #NEWLINE#
result = np . average ( _array [ : ] [ 1 : ] , axis = 1 ) #NEWLINE#
imgc = cv2 . imread ( file ) #NEWLINE#
[ x for x in list ( Person ( ) . __dict__ . keys ( ) ) if not x . startswith ( '_' ) ] #NEWLINE#
pyplot . savefig ( 'file.png' ) #NEWLINE#
[ ( 'xx' , 'B' , 'foobar' ) , ( 'yy' , 'B' , 'foo' ) ] #NEWLINE#
self . assertEqual ( self . driver . get_text ( '#success' ) , 'SUCCESS' ) #NEWLINE#
x . astype ( 'int' ) #NEWLINE#
plt . legend ( ) #NEWLINE#
difflib . SequenceMatcher ( None , 'address' , 'oddness' ) . get_matching_blocks ( ) #NEWLINE#
{ 'a' : 12 , 'b' : 'abc' } #NEWLINE#
any ( map ( my_dict . __contains__ , my_list ) ) #NEWLINE#
mpl . rcParams . update ( manager . _rcparams ) #NEWLINE#
list ( _ ) #NEWLINE#
"""00:80:41:ae:fd:7e""" #NEWLINE#
np . dot ( W , B ) #NEWLINE#
fh = logging . FileHandler ( '/Users/defuz/test.txt' ) #NEWLINE#
[ [ z [ i ] for z in foo ] for i in ( 0 , 1 ) ] #NEWLINE#
[ 'ROOT' , 'Node5' ] #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , borderpad = 1.5 , labelspacing = 1.5 ) #NEWLINE#
browser . find_element_by_name ( 'password' ) . send_keys ( 'mypassword' ) #NEWLINE#
browser . find_element_by_name ( 'username' ) . send_keys ( 'myusername' ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
B = A [ : : 2 , : , 1 : 2 ] #NEWLINE#
os . chdir ( path ) #NEWLINE#
board4 = [ [ 1 , 0 , 0 , 1 ] , [ 0 , 1 , 1 , 0 ] , [ 0 , 0 , 1 , 0 ] , [ 0 , 1 , 0 , 0 ] ] #NEWLINE#
defaultdeletechars = set ( "~!@#$%^&*()-=+~\\|]}[{';:#SPACE#/?.>,<" ) #NEWLINE#
return render ( request , 'searchresult.html' , { 'var1' : var } ) #NEWLINE#
BeautifulSoup . BeautifulSOAP ( '<html><b>no</b>yes</html>' ) . find ( text = True ) #NEWLINE#
extensions = [ 'sphinx.ext.autodoc' , 'sphinxcontrib.napoleon' ] #NEWLINE#
plt . savefig ( 'world.png' , dpi = 75 ) #NEWLINE#
help ( wrapper_function ) #NEWLINE#
ab [ x ] . sort ( ) #NEWLINE#
arr [ 20 : ] = [ 0 ] * ( len ( arr ) - 20 ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] #NEWLINE#
S2 . startswith ( S1 ) #NEWLINE#
self . initialized = True #NEWLINE#
primes = { p for p in primes if '0' not in str ( p ) } #NEWLINE#
pip . main ( [ 'install' , 'requests' ] ) #NEWLINE#
np . clip ( arr , 0 , 255 , arr ) #NEWLINE#
sum ( i for i in range ( 1000 ) if i % 3 == 0 or i % 5 == 0 ) #NEWLINE#
to_words ( 'The#SPACE#morning-the#SPACE#evening' ) #NEWLINE#
{ { forloop . counter0 } } , { { j } } #NEWLINE#
numpy . load ( 'data.npy' ) #NEWLINE#
new_column . index #NEWLINE#
return { t : [ next ( it ) for _ in range ( next ( it ) ) ] for t in it } #NEWLINE#
app . mainloop ( ) #NEWLINE#
formatter = logging . Formatter ( '%(asctime)s#SPACE#%(levelname)s:%(name)s#SPACE#%(message)s' ) #NEWLINE#
br . set_handle_gzip ( True ) #NEWLINE#
wrapper2 ( func2 , [ 1 , 2 , 3 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( ( 'b.__doc_#SPACE#:' , b . __doc__ ) ) #NEWLINE#
super ( MySpider , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pickle . dump_session ( 'session.pkl' ) #NEWLINE#
df . apply ( lambda x : x . between ( 2 , 10 , inclusive = False ) ) #NEWLINE#
'I#SPACE#like#SPACE#%(food)s' % { 'food' : 'cheese' } #NEWLINE#
send_file_zipped ( 'result.txt' , [ 'me@me.org' ] ) #NEWLINE#
s . setsockopt ( socket . IPPROTO_IP , socket . IP_HDRINCL , 1 ) #NEWLINE#
inheritance_graph_attrs = dict ( size = '""' ) #NEWLINE#
user_profile_view . name = 'User#SPACE#Profile#SPACE#View' #NEWLINE#
hash_str = str ( hash . hexdigest ( ) ) #NEWLINE#
df . groupby ( [ 'SAMPLE' , 'mutation_type' ] ) . agg ( 'count' ) [ 'MUT' ] #NEWLINE#
n , bins , patches = plt . hist ( x , histedges_equalA ( x , nbin ) , normed = False ) #NEWLINE#
x = OrderedDict ( ( ( 'a' , '1' ) , ( 'c' , '3' ) , ( 'b' , '2' ) ) ) #NEWLINE#
a = pd . read_json ( x , typ = 'series' , orient = 'records' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
plt . subplot ( 111 ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
all ( item [ 2 ] == 0 for item in items ) #NEWLINE#
struct . pack ( 'f' , 3.141592654 ) #NEWLINE#
[ 'Joe' , 'Dave' , 'Professional' , 'Ph.D.' , 'Someone#SPACE#else' ] #NEWLINE#
self . ax . set_ylabel ( 'Price#SPACE#,#SPACE#$' ) #NEWLINE#
ax . set_xscale ( 'symlog' , basex = 2 ) #NEWLINE#
es = Elasticsearch ( ) #NEWLINE#
self . _background_task ( ) #NEWLINE#
circ = np . linspace ( 0 , 2 * pi ) #NEWLINE#
print ( '{0}/{1}/{2:02}' . format ( dt . month , dt . day , dt . year % 100 ) ) #NEWLINE#
output . write ( unhexlify ( '' . join ( format ( i [ 2 : ] , '>02s' ) for i in b ) ) ) #NEWLINE#
ax . set_xticks ( numpy . arange ( 0 , 1 , 0.1 ) ) #NEWLINE#
c . showPage ( ) #NEWLINE#
self . image . fill ( Color ( '#0033FF' ) ) #NEWLINE#
import imp #NEWLINE# imp . reload ( user ) #NEWLINE#
theproc . communicate ( ) #NEWLINE#
regex . sub ( '' , 'blabla#SPACE#\x035,12to#SPACE#be#SPACE#colored#SPACE#text#SPACE#and#SPACE#background\x03#SPACE#blabla' ) #NEWLINE#
hottest_cakes = Cake . objects . filter ( id__in = hottest_cake_ids ) #NEWLINE#
numpy . einsum ( 'az,bz->ab' , P . U [ 0 ] , P . U [ 1 ] ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/plain' #NEWLINE#
index = graph_db . get_or_create_index ( neo4j . Node , 'index_name' ) #NEWLINE#
plt . subplots_adjust ( left = 0.25 , bottom = 0.25 ) #NEWLINE#
myApp . setWindowFlags ( QtCore . Qt . Tool ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = profile ) #NEWLINE#
s . bind ( ( HOST , PORT ) ) #NEWLINE#
H = nx . DiGraph ( ) #NEWLINE#
s = BeautifulSoup ( '<p>Test#SPACE#1#SPACE#<span>More</span>#SPACE#Test#SPACE#2</p>' ) #NEWLINE# """""" . join ( [ s . string for s in s . findAll ( text = True ) ] ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
super ( OrderedDefaultdict , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return line . startswith ( 'From#SPACE#' ) #NEWLINE#
setattr ( logging . StreamHandler , '_set_color' , _set_color ) #NEWLINE#
main ( ) #NEWLINE#
"""Retrieve#SPACE#and#SPACE#return#SPACE#uptime#SPACE#for#SPACE#each#SPACE#host""" #NEWLINE#
tkinter . Label ( root , text = displaytext2 , font = 'Courier' ) . pack ( ) #NEWLINE#
df . rename ( columns = lambda x : x [ 1 : ] , inplace = True ) #NEWLINE#
extract_hash_tags ( '#test#SPACE#http://example.org/#comments#SPACE##test' ) #NEWLINE#
list ( range ( 101 , 6284 ) ) + [ 8001 , 8003 , 8010 ] + list ( range ( 10000 , 12322 ) ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
print ( html . tostring ( table , pretty_print = True ) ) #NEWLINE#
sys . excepthook = info #NEWLINE#
with open ( 'Output.txt' , 'w' ) as text_file : #NEWLINE# #INDENT# text_file . write ( 'Purchase#SPACE#Amount:#SPACE#%s' % TotalAmount ) #NEWLINE#
results = [ t . age for t in mylist if t . person_id == 10 ] #NEWLINE#
mat . data -= numpy . repeat ( vec . toarray ( ) [ 0 ] , numpy . diff ( mat . indptr ) ) #NEWLINE#
i = int ( round ( float ( s ) ) ) #NEWLINE#
Color ( ** { 'r' : r , 'g' : g , 'b' : b } ) #NEWLINE#
subprocess . Popen . communicate ( ) #NEWLINE#
contents = [ row . strip ( '\n' ) . split ( ',#SPACE#' ) for row in open ( 'table1.txt' , 'r+' ) ] #NEWLINE#
sys . modules . pop ( module_name ) #NEWLINE#
df [ 'Gmean' ] = np . power ( df . iloc [ : , : 3 ] . prod ( axis = 1 ) , 1.0 / 3 ) #NEWLINE#
[ x for i , x in enumerate ( y ) if i != 0 and x != 6 ] #NEWLINE#
d . execute ( ) #NEWLINE#
d = dict ( a = 1 , b = 2 , c = 'Hello#SPACE#there' ) #NEWLINE#
print ( todayDate . replace ( day = 1 ) ) #NEWLINE#
String2 = String + '{0},#SPACE#{0}' . format ( String1 ) #NEWLINE#
f . close ( ) #NEWLINE#
socket . setdefaulttimeout ( 60 ) #NEWLINE#
self . tree = ET . parse ( self . templateOut , parser = parser ) #NEWLINE#
[ t for t in my_set if my_list . count ( t ) > 1 ] #NEWLINE#
from collections import Counter #NEWLINE#
pygst . require ( '0.10' ) #NEWLINE#
res = p . apply_async ( testFunc , args = ( 2 , 4 ) , kwds = { 'calcY' : False } ) #NEWLINE#
bar ( ) #NEWLINE#
re . sub ( '[^a-zA-Z]+' , '' , 'ABC12abc345def' ) #NEWLINE#
array ( [ 3.75 ] ) #NEWLINE#
A = numpy . array ( [ [ 2 , - 1 , 0 ] , [ - 1 , 2 , - 1 ] , [ 0 , - 1 , 2 ] ] , numpy . float ) #NEWLINE#
logger . exception ( 'An#SPACE#error#SPACE#occurred' ) #NEWLINE#
df [ 'group' ] = ( df [ 'is_isolated' ] != df [ 'is_isolated' ] . shift ( ) ) . cumsum ( ) #NEWLINE#
[ '.' , '.' , '0' , '0' , '0' , '0' , '0' , '.' , '.' ] , #NEWLINE#
[ '.' , '.' , '.' , '0' , '0' , '0' , '.' , '.' , '.' ] , #NEWLINE#
{ { value . name } } #NEWLINE#
print ( 'invalid' ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
pd . read_csv ( file , sep = '\t' , header = None , names = headers , parse_dates = True ) #NEWLINE#
password = request . args . get ( 'password' ) #NEWLINE#
d = { 'a.*' : 'a#SPACE#match' , 'b.*' : 'b#SPACE#match' } #NEWLINE#
return hash ( ( 'id' , self . id , 'name' , self . name ) ) #NEWLINE#
child_process . kill ( ) #NEWLINE#
y = dict ( x , foo = 'spam' , bar = 'eggs' , ** { ( 2 ) : 3 , ( 42 ) : 81 } ) #NEWLINE#
hex ( int ( time . time ( ) + 12345 ) ) [ 2 : ] #NEWLINE#
L1 . sort ( key = lambda x : L . index ( x ) ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
reshaped_df = df . groupby ( 'a' ) . pivot ( 'major' ) . max ( 'cnt' ) . fillna ( 0 ) #NEWLINE#
list ( filter ( f , list ( range ( 2 , 25 ) ) ) ) #NEWLINE#
iv = bytes ( [ random . randint ( 0 , 255 ) for i in range ( 16 ) ] ) #NEWLINE#
from functools import reduce #NEWLINE# return int ( reduce ( lambda x , y : x + str ( y ) , nums , '' ) ) #NEWLINE#
r = re . compile ( '(?<!\\[)(\\d{4})(?!\\])' ) #NEWLINE#
print ( module . interesting_function . __defaults__ ) #NEWLINE#
s . decode ( 'string-escape' ) #NEWLINE#
map ( operator . add , a , b ) #NEWLINE#
[ 'yyy' ] #NEWLINE#
next ( elem for elem in lst if isinstance ( elem , dict ) and 'k' in elem ) #NEWLINE#
return '' . join ( sourcelines ) #NEWLINE#
np . savetxt ( 'z.csv' , zipped , fmt = '%i,%i' ) #NEWLINE#
self . create_socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
main ( ) #NEWLINE#
layout . addWidget ( self . de ) #NEWLINE#
print ( r . content ) #NEWLINE#
[ ( seen . add ( obj . id ) or obj ) for obj in mylist if obj . id not in seen ] #NEWLINE#
multiprocessing . cpu_count ( ) #NEWLINE#
Selector ( response ) . xpath ( '//div[@class="messagebox"]' ) . extract ( ) [ 0 ] #NEWLINE#
plt . boxplot ( boxes , vert = 0 ) #NEWLINE#
float ( '6.52353753563E-7' ) #NEWLINE#
print ( RE . sub ( '' , '美国' ) . encode ( 'utf-8' ) ) #NEWLINE#
ip = os . environ [ 'REMOTE_ADDR' ] #NEWLINE#
root . title ( 'Test' ) #NEWLINE#
self . setGridIntersection ( self . pos ( ) ) #NEWLINE#
super ( B , self ) . __init__ ( base ) #NEWLINE#
return dict ( zip ( reversed ( args ) , reversed ( defaults ) ) ) #NEWLINE#
"""The#SPACE#produced#SPACE#output,#SPACE#in#SPACE#binary,#SPACE#is:#SPACE#{:#010b}""" . format ( 14 ) #NEWLINE#
df = pd . DataFrame ( { 'col' : [ '2' , '1' , '2' ] } ) #NEWLINE#
[ [ 1 , 4 , 7 ] , [ 2 , 6 , 8 ] , [ 3 , 9 ] ] #NEWLINE#
if something : #NEWLINE# #INDENT# raise Exception ( 'My#SPACE#error!' ) #NEWLINE#
self . layout . addWidget ( self . view ) #NEWLINE#
delta = datetime . datetime . now ( ) - previousTime #NEWLINE#
Entry . objects . bulk_create ( aList ) #NEWLINE#
ax . set_xticklabels ( '' ) #NEWLINE#
sys . stdout = open ( 'readable.profile' , 'w' ) #NEWLINE#
print ( df . sort ( column = 'c' , ascending = False ) ) #NEWLINE#
app . run ( ) #NEWLINE#
[ a . join ( b ) for a , b in zip ( df . a , df . b ) ] #NEWLINE#
hsv_to_rgb ( 359 , 1 , 1 ) #NEWLINE#
show ( ) #NEWLINE#
driver . find_element_by_id ( 'password' ) . send_keys ( 'password' ) #NEWLINE#
driver . find_element_by_id ( 'username' ) . send_keys ( 'user' ) #NEWLINE#
s . close ( ) #NEWLINE#
open ( os . path . join ( os . path . expanduser ( '~' ) , 'rest/of/path/to.file' ) ) #NEWLINE#
C = map ( sub , A , B ) #NEWLINE#
func ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
s3 = boto3 . resource ( 's3' , region_name = region ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE#
np . maximum . reduceat ( v , idx ) #NEWLINE#
print ( 'Content-Type:#SPACE#text/html\n' ) #NEWLINE#
print ( 'myPyServer#SPACE#will#SPACE#now#SPACE#exit.' ) #NEWLINE#
df . sort ( [ 'Name' , 'Score' ] , ascending = False ) . groupby ( 'Name' ) . head ( 2 ) #NEWLINE#
kidshair [ 'allkids' ] [ 'child1' ] #NEWLINE#
subprocess . Popen ( [ 'virtualenv1/bin/python' , 'my_script.py' ] ) #NEWLINE#
df . loc [ : '2015-04-25' ] . head ( 3 ) #NEWLINE#
window . show ( ) #NEWLINE#
print ( 'No,#SPACE#Guess#SPACE#a#SPACE#little#SPACE#higher...' ) #NEWLINE#
print ( 'No,#SPACE#Guess#SPACE#a#SPACE#little#SPACE#lower....' ) #NEWLINE#
print ( 'Game#SPACE#Over' ) #NEWLINE#
ax . imshow ( data , interpolation = 'none' ) #NEWLINE#
my_list = [ dict ( out [ v ] ) for v in sorted ( out ) ] #NEWLINE#
canvas . config ( width = 300 , height = 300 ) #NEWLINE#
d . update ( ( '@' + k , v ) for k , v in t . attrib . items ( ) ) #NEWLINE#
linear_df [ 'duration' ] = linear_df [ 'end_dt' ] - linear_df [ 'start_dt' ] #NEWLINE#
re . findall ( '(\\d+)\\.(\\d+)\\.(\\d+)' , 'Version#SPACE#1.15.6\n' ) #NEWLINE#
[ k for k , g in groupby ( a ) if len ( list ( g ) ) >= 2 ] #NEWLINE#
output . close ( ) #NEWLINE#
print ( cur . fetchall ( ) [ 0 ] ) #NEWLINE#
outlook = win32com . client . Dispatch ( 'Outlook.Application' ) . GetNamespace ( 'MAPI' ) #NEWLINE#
tree = ET . ElementTree ( ET . fromstring ( xmlstring ) ) #NEWLINE#
return type . __new__ ( cls , name , bases , dct ) #NEWLINE#
os . chdir ( 'pychess-0.10.1/lib' ) #NEWLINE#
soup . text #NEWLINE#
fp . write ( '\n' ) #NEWLINE#
time . sleep ( 0.11 ) #NEWLINE#
self . canvas . pack ( fill = 'none' , expand = False ) #NEWLINE#
plt . scatter ( xyc [ : 13 ] , xyc [ : 13 ] , c = xyc [ : 13 ] , s = 35 , vmin = 0 , vmax = 20 ) #NEWLINE#
sorted ( list ( x . items ( ) ) , key = lambda kv : kv [ 1 ] ) #NEWLINE#
df = df . rename ( columns = { 'oldName1' : 'newName1' , 'oldName2' : 'newName2' } ) #NEWLINE#
ctypes . c_ulong ( - 1 ) #NEWLINE#
result = [ line . upper ( ) for line in lines ] #NEWLINE#
f . axes [ 0 ] . set_position ( [ 0.05 , 0.05 , 0.4 , 0.4 ] ) #NEWLINE#
ax . set_title ( 'Non-Uniform#SPACE#Bin#SPACE#Histogram' ) #NEWLINE#
plt . imshow ( arr , cmap = 'gray' ) #NEWLINE#
raise ValueError ( 'Expected#SPACE#either#SPACE#arg_a#SPACE#or#SPACE#arg_b#SPACE#args' ) #NEWLINE#
t = [ x for x in q if x in w ] #NEWLINE#
conda . cli . main ( 'conda' , 'install' , '-y' , 'numpy' ) #NEWLINE#
list2b = [ c for c in list2 if c in list1 ] #NEWLINE#
print ( match . group ( 1 ) ) #NEWLINE#
list ( '-' . join ( ls ) ) #NEWLINE#
self . set . remove ( d ) #NEWLINE#
execute ( getattr ( fabfile , 'start' ) ) #NEWLINE#
df [ 'temp' ] = separate_df ( df . type ) #NEWLINE#
re . sub ( '[#SPACE#]+' , '#SPACE#' , tmp ) #NEWLINE#
plt . bar ( bins [ : - 1 ] [ i ] , n_y [ i ] , width = 10 , color = 'g' , zorder = zorder ) #NEWLINE#
the_list . sort ( ) #NEWLINE#
names = [ row [ 0 ] for row in curs . fetchall ( ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
getenv ( 'HOME' ) #NEWLINE#
a . append ( ( 2 , 3 , 4 ) ) #NEWLINE#
""",""" . join ( str ( item ) for item in lst ) #NEWLINE#
value = 'Test' if 1 == 1 else 'NoTest' #NEWLINE#
img3 . Bind ( wx . EVT_LEFT_DCLICK , self . OnDClick ) #NEWLINE#
python - - version #NEWLINE#
Py_Finalize ( ) #NEWLINE#
1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 #NEWLINE#
w . writerow ( row ) #NEWLINE#
rfecv . fit ( X_train , y_train ) #NEWLINE#
data = soup . findAll ( 'div' , attrs = { 'class' : 'makers' } ) #NEWLINE#
out = [ '=Start=' , '=End' , 'From:' , 'To:' ] #NEWLINE#
b = [ { 'id' : k , 'desc' : v } for k , v in c . items ( ) ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
s = 'Bobby#SPACE#tables' #NEWLINE# s = s [ 0 ] . lower ( ) + s [ 1 : ] #NEWLINE#
"""#TAB#p3""" #NEWLINE#
df [ ~ ( ( df . A == 0 ) & ( df . B == 2 ) & ( df . C == 6 ) & ( df . D == 0 ) ) ] #NEWLINE#
print ( 'utf-8-sig#SPACE#%r' % e8s ) #NEWLINE#
print ( 'utf-16#SPACE##SPACE##SPACE##SPACE#%r' % e16 ) #NEWLINE#
print ( 'utf-16le#SPACE##SPACE#%r' % e16le ) #NEWLINE#
print ( 'utf-16be#SPACE##SPACE#%r' % e16be ) #NEWLINE#
[ df . loc [ list ( p ) ] for p in permutations ( age . get_group ( 21 ) . index ) ] #NEWLINE#
ax . xaxis . set_major_formatter ( FuncFormatter ( lambda d , _ : d . strftime ( '%a' ) ) ) #NEWLINE#
driver . set_window_size ( width , height ) #NEWLINE#
s = 'foobar' #NEWLINE# list ( s ) #NEWLINE#
pl . plot ( x , np . sin ( x ) , '-x' , label = 'sin' ) #NEWLINE#
my_function = decorator ( my_function ) #NEWLINE#
plt . setp ( plt . gca ( ) . get_legend ( ) . get_texts ( ) , fontsize = '12' ) #NEWLINE#
print ( sess . run ( Z ) ) #NEWLINE#
data = 'spam' #NEWLINE#
label . pack ( ) #NEWLINE#
solve ( [ x + 5 * y - 2 , - 3 * x + 6 * y - 15 ] , [ x , y ] ) #NEWLINE#
self . dissect ( 'python#SPACE##SPACE##SPACE#language#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#opensource' ) #NEWLINE#
strptime ( 'Feb' , '%b' ) . tm_mon #NEWLINE#
self . __dict__ . update ( kwargs ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 10 , ( 7 , 6 ) ) , columns = list ( 'ABCDEF' ) ) #NEWLINE# df #NEWLINE#
df [ 'c' ] = np . minimum ( df . a , df . b ) #NEWLINE#
db . close ( ) #NEWLINE#
ssh . close ( ) #NEWLINE#
super ( Customer , self ) . save ( * args , ** kwargs ) #NEWLINE#
df = pd . DataFrame ( a , columns = [ 'one' , 'two' , 'three' ] ) #NEWLINE#
fatal . setLevel ( logging . FATAL ) #NEWLINE#
taxlistcomplete = result . split ( '$' ) #NEWLINE#
json . loads ( lstrip_bom ( open ( 'sample.json' ) . read ( ) ) ) #NEWLINE#
after , outer_list = [ 'one' , 'two' , 'three' , 'four' ] #NEWLINE#
struct . pack ( 'B' , 1 ) #NEWLINE#
timeout += int ( time . time ( ) ) #NEWLINE#
times . astype ( 'timedelta64[ms]' ) . astype ( int ) / 1000 #NEWLINE#
process . stdin . write ( data ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 4 ) , ( 2 , 4 , 3 ) , ( 3 , 0 , 1 ) , ( 4 , 3 , 0 ) #NEWLINE#
gtk . main_iteration ( block = False ) #NEWLINE#
solve ( do_something ( something ) ) #NEWLINE#
clf = pickle . load ( f ) #NEWLINE#
weights = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 0 , 1 ] , [ 1 , 1 , 1 ] ] ) , #NEWLINE#
driver . find_element_by_id ( 'main_buttonMissionTextNext' ) . click ( ) #NEWLINE#
a = MyClass ( ) #NEWLINE#
paths [ - 1 ] . append ( { 'title' : item [ 'title' ] , 'url' : split [ - 1 ] } ) #NEWLINE#
self . load ( QtCore . QUrl ( 'http://jquery.com' ) ) #NEWLINE#
root . title ( 'Change#SPACE#font#SPACE#demo' ) #NEWLINE#
f . write ( '\x00' ) #NEWLINE#
carp . carp ( 'pmsg' ) #NEWLINE#
"""{d.month}/{d.day}/{d.year}#SPACE#{d.hour}:{d.minute:02}""" . format ( d = now ) #NEWLINE#
print ( 'JS#SPACE#Conversion#SPACE#Complete' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
wb = openpyxl . load_workbook ( file ) #NEWLINE#
"""{:f}""" . format ( a ) #NEWLINE#
df [ sheet ] = pd . read_csv ( csv ) #NEWLINE#
{ 'name' : 'user' , 'attributes' : [ 'id' , 'name' ] } , #NEWLINE#
df [ df . duplicated ( keep = False ) ] #NEWLINE#
return self . _file . read ( * args ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
data = json . loads ( elevations ) #NEWLINE#
del list1 [ : ] #NEWLINE#
print ( '%d:#SPACE#%s' % ( lineNum , line [ 2 : ] . strip ( ) ) ) #NEWLINE#
vars ( obj ) . setdefault ( name , value ) #NEWLINE#
data . append ( [ word . strip ( '\n' ) for word in line . split ( '#SPACE#' ) if word ] ) #NEWLINE#
data . sort ( key = keyfunc ) #NEWLINE#
r2 = requests . post ( 'http://www.yourapp.com/somepage' , cookies = r1 . cookies ) #NEWLINE#
self . opt . stdin . write ( '%.12f\n' % x ) #NEWLINE#
[ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 3 ) , ( 2 , 4 ) , ( 3 , 4 ) ] #NEWLINE#
array ( [ [ 1 , 0 ] , [ 1 , 2 ] ] ) #NEWLINE#
print ( list ( x for x in splitter ( str , split_points ) if x != '' ) ) #NEWLINE#
plt . xticks ( tickpositions , ticklabels ) #NEWLINE#
"""(?P<permissions>[d-][rwx-]{9})\\s{1,20}(?P<links>\\d{1,8})\\s{1,20}(?P<owner>[\\w-]{1,16})\\s{1,20}(?P<group>[\\w-]{1,16})\\s{1,20}(?P<size>[0-9]{1,16})\\s{1,20}(?P<month>[A-Za-z]{0,3})\\s{1,20}(?P<date>[0-9]{1,2})\\s{1,20}(?P<timeyear>[\\d:]{4,5})\\s{1,20}(?P<filename>[\\s\\w.-]+?)(?=[drwx-]{10}|$)""" #NEWLINE#
"""-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#75148624#SPACE#Jan#SPACE##SPACE#6#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#223259072#SPACE#Feb#SPACE#26#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#4041411#SPACE#Jun#SPACE##SPACE#5#SPACE##SPACE#2015#SPACE#somename-adjusted.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#2879228#SPACE#May#SPACE#13#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#11832668#SPACE#Feb#SPACE#13#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#1510522#SPACE#Feb#SPACE#19#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#2826664#SPACE#Feb#SPACE#25#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#582985#SPACE#Feb#SPACE#26#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#212427#SPACE#Feb#SPACE#26#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#3015592#SPACE#Feb#SPACE#27#SPACE##SPACE#2015#SPACE#somename.csv-rw-r--r--#SPACE##SPACE##SPACE#1#SPACE#owner#SPACE##SPACE##SPACE##SPACE#group#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#103576#SPACE#Feb#SPACE#27#SPACE##SPACE#2015#SPACE#somename-corrected.csv""" #NEWLINE#
x . shape #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_RAW , socket . IPPROTO_IP ) #NEWLINE#
r . append ( '_' . join ( t [ : - 2 ] ) + '_%s_%s' % ( m , y ) ) #NEWLINE#
print ( im . format , im . size , im . mode ) #NEWLINE#
df . loc [ tuple ( 'aa' ) , 'X' ] = np . nan #NEWLINE#
br . set_handle_robots ( False ) #NEWLINE#
[ [ 'B' , 'D' , 'E' , 'C' ] , [ 'D' , 'D' , 'A' , 'E' ] , [ 'F' , 'D' , 'D' , 'D' ] , [ 'B' , #NEWLINE# 'F' , 'E' , 'E' ] , [ 'D' , 'E' , 'A' , 'A' ] , [ 'F' , 'B' , 'C' , 'E' ] ] #NEWLINE#
wx . Panel . __init__ ( self , parent ) #NEWLINE#
p . parse ( '9/18#SPACE#11:59#SPACE#pm' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df [ 'C' ] = np . where ( df [ 'A' ] > df [ 'B' ] . shift ( - 2 ) , 1 , np . nan ) #NEWLINE#
model = get_object_or_404 ( Customer , id = id , user = 1 ) #NEWLINE#
print ( 'Setup.py#SPACE#version:' , setup . __version__ ) #NEWLINE#
pygame . image . save ( surface , os . path . expanduser ( '~/Desktop/pic.png' ) ) #NEWLINE#
print ( doc . xpath ( '//aws:weather/aws:ob/aws:temp' , namespaces = { 'aws' : #NEWLINE# 'http://www.aws.com/aws' } ) [ 0 ] . text ) #NEWLINE#
Py_Initialize ( ) #NEWLINE#
weighted . median ( df [ 'impwealth' ] , df [ 'indweight' ] ) #NEWLINE#
s = re . split ( '[~\\r\\n]+' , string_to_split ) #NEWLINE#
print ( 'out:#SPACE#' + line . strip ( ) ) #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
super ( FooForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( f ( a ) ) #NEWLINE#
A = np . zeros ( ( 6 , 6 ) ) #NEWLINE#
[ 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 , 7 , 7 , 8 , 9 , 9 , 10 , 1 ] #NEWLINE#
"""start#SPACE#t#SPACE#end""" #NEWLINE#
s . logout ( ) #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#Length' ) #NEWLINE#
import imp #NEWLINE# imp . reload ( mymod ) #NEWLINE#
eval ( "import#SPACE#os;os.system('sudo#SPACE#rm#SPACE#-rf#SPACE#/')" ) #NEWLINE#
race = models . CharField ( choices = RACES , max_length = 5 ) #NEWLINE#
request . add_header ( 'Content-Length' , str ( len ( edata ) ) ) #NEWLINE#
self . searchqueryset . filter ( group = Raw ( '[*#SPACE#TO#SPACE#*]' ) ) #NEWLINE#
print ( tree . xpath ( '//city' ) ) #NEWLINE#
print ( 'write#SPACE#at#SPACE#%s' % str ( datetime . datetime . now ( ) ) ) #NEWLINE#
print ( 'close#SPACE#at#SPACE#%s' % str ( datetime . datetime . now ( ) ) ) #NEWLINE#
set ( range ( 1 , 101 ) ) - s #NEWLINE#
"""NLTK#SPACE#is#SPACE#a#SPACE#python#SPACE#library#SPACE#for#SPACE#working#SPACE#human-written#SPACE#text.#SPACE#Summarize#SPACE#is#SPACE#a#SPACE#package#SPACE#that#SPACE#uses#SPACE#NLTK#SPACE#to#SPACE#create#SPACE#summaries.#SPACE#A#SPACE#Summariser#SPACE#is#SPACE#really#SPACE#cool.#SPACE#I#SPACE#don't#SPACE#think#SPACE#there#SPACE#are#SPACE#any#SPACE#other#SPACE#python#SPACE#summarisers.""" #NEWLINE#
"""NLTK#SPACE#is#SPACE#a#SPACE#python#SPACE#library#SPACE#for#SPACE#working#SPACE#human-written#SPACE#text!#SPACE#Summarize#SPACE#is#SPACE#a#SPACE#package#SPACE#that#SPACE#uses#SPACE#NLTK#SPACE#to#SPACE#create#SPACE#summaries.""" #NEWLINE#
Decimal ( '12.234' ) . quantize ( Decimal ( '0.00' ) ) #NEWLINE#
list_one . append ( list_two ) #NEWLINE#
classroom . py #NEWLINE#
return ( l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ) #NEWLINE#
o = [ ( l [ i ] , l [ i + 1 ] ) for i in range ( 0 , len ( l ) , 2 ) ] #NEWLINE#
yield { k : data [ k ] for k in islice ( it , SIZE ) } #NEWLINE#
list ( chain ( * ( x . split ( ',' ) for x in lis ) ) ) #NEWLINE#
__all__ = [ 'func1' , 'func2' , 'this' , 'that' ] #NEWLINE#
print ( '{}' . format ( item ) ) #NEWLINE#
return rreverse ( s [ 1 : ] ) + s [ 0 ] #NEWLINE#
os . waitpid ( p . pid , 0 ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 100 , size = ( 100 , 4 ) ) , columns = list ( #NEWLINE# 'ABCD' ) ) #NEWLINE#
FI . close ( ) #NEWLINE#
print ( 'grandparent#SPACE#{}' . format ( os . getpid ( ) ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
frame . groupby ( [ pd . DatetimeIndex ( [ x . date ( ) for x in frame . index ] ) ] ) . sum ( ) #NEWLINE#
df [ 'date' ] . iget ( 0 ) #NEWLINE#
ax [ 1 ] . set_aspect ( 'equal' ) #NEWLINE#
count_nan = len ( df ) - df . count ( ) #NEWLINE#
max_validation = lambda x , y , z : x < y < z #NEWLINE#
q . filter ( or_ ( * conditions ) ) #NEWLINE#
query = Session . query ( Table ) . filter ( clauses ) #NEWLINE#
f . write ( xmldoc . toxml ( 'utf-8' ) . decode ( 'utf-8' ) ) #NEWLINE#
zip ( range ( 1 , 7 , 2 ) , range ( 2 , 8 , 2 ) ) #NEWLINE#
return HttpResponse ( data , mimetype = 'application/json' ) #NEWLINE#
sys . stdout . write ( '1' ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
pylab . legend ( loc = 'lower#SPACE#left' ) #NEWLINE#
[ ( 'customer' , 0.061703717964 ) , ( 'team' , 0.01724444 ) ] , #NEWLINE#
any ( np . array_equal ( np . array ( [ a , a ] ) , x ) for x in my_list ) #NEWLINE#
return uuid . UUID ( value ) #NEWLINE#
print ( np . array ( [ 0.0 , - 1.2366e+22 , 1.2544444e-15 , 0.001222 ] ) ) #NEWLINE#
[ 1 , 2 , 2 ] #NEWLINE#
reader = csv . reader ( text , delimiter = ',' ) #NEWLINE#
web . header ( 'Content-Type' , 'application/json' ) #NEWLINE#
f = Foo ( ) #NEWLINE#
re . search ( '<%%(.+?)%%>' , t ) . groups ( ) #NEWLINE#
st = '%2g_%3k%3p' #NEWLINE#
cv2 . imwrite ( 'color_img.jpg' , b ) #NEWLINE#
res . append ( lst [ i ] ) #NEWLINE#
return json . dumps ( self . json ) #NEWLINE#
[ a [ max ( 0 , i ) : i + 3 ] for i in range ( ( len ( a ) - 1 ) % 3 - 2 , len ( a ) , 3 ) ] #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
settings = { 'xsrf_cookies' : False } #NEWLINE#
any ( len ( set ( x ) ) == 1 for x in zip ( * arr ) ) #NEWLINE#
[ ( 6 , 1 , 9 ) , ( 3 , 2 , 6 ) , ( 18 , 3 , 8 ) , ( 12 , 4 , 15 ) ] #NEWLINE#
return struct . pack ( new_format , * args ) #NEWLINE#
plt . plot ( x [ idx ] , y [ idx ] , marker = 'o' , linestyle = '-' , color = 'b' ) #NEWLINE#
im = Image . open ( 'C:\\Users\\Public\\Pictures\\Sample#SPACE#Pictures\\Jellyfish.jpg' ) #NEWLINE#
self . __dict__ . update ( d ) #NEWLINE#
plt . savefig ( 'redwhite.png' ) #NEWLINE#
print ( template . format ( * rec ) ) #NEWLINE#
Dates = pd . to_datetime ( tl2 ) #NEWLINE#
r2 = requests . get ( 'https://www.google.com' ) #NEWLINE#
df [ 'bar' ] = df [ 'bar' ] . str . cat ( df [ 'foo' ] . values . astype ( str ) , sep = '#SPACE#is#SPACE#' ) #NEWLINE#
super ( GroceryListForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
QWidget . __init__ ( self ) #NEWLINE#
ADMIN_ENABLED = False #NEWLINE#
return getattr ( self , 'f1' ) #NEWLINE#
driver . find_element_by_name ( 'username' ) . send_keys ( username ) #NEWLINE#
server . set_debuglevel ( 1 ) #NEWLINE#
buff . write ( open ( 'map.png' , 'rb' ) . read ( ) ) #NEWLINE#
data = data . iloc [ : , ( [ 7 ] + list ( range ( 7 ) ) ) ] #NEWLINE#
re . findall ( '(?:[^\\s,"]|"(?:\\\\.|[^"])*")+' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ [ 0 ] , [ 1 ] , [ 2 ] , [ 42 ] , [ 4 ] ] #NEWLINE#
( u + x ) * ( a + d + g ) + ( v + y ) * ( b + e + h ) + ( w + z ) * ( c + f + i ) #NEWLINE#
pd . Series ( np . vstack ( ( s1 , s2 ) ) . ravel ( 'F' ) ) #NEWLINE#
print ( cur . fetchall ( ) ) #NEWLINE#
np . vstack ( j ) . T #NEWLINE#
datetime . datetime . strptime ( a , '%Y-%m-%d' ) . date ( ) #NEWLINE#
zcat . wait ( ) #NEWLINE#
raise ValueError ( 'barfoo' ) #NEWLINE#
"""{:02}:{:02}:{:02}""" . format ( s // 3600 , s % 3600 // 60 , s % 60 ) #NEWLINE#
print ( 'result:#SPACE#' , proc . communicate ( ) ) #NEWLINE#
x = [ 'a' , 'one#SPACE#"two"#SPACE#three' , 'foo,#SPACE#bar' , 'both"\'' ] #NEWLINE# print ( ',#SPACE#' . join ( map ( quote , x ) ) ) #NEWLINE#
time . sleep ( 0.25 ) #NEWLINE#
df [ df . Phrase . str . len ( ) != 0 ] #NEWLINE#
lines = open ( 'textfile.txt' ) . readlines ( ) #NEWLINE#
conn = sqlite3 . connect ( ':memory:' ) #NEWLINE#
return '#SPACE#' . join ( l [ - 1 : ] + l [ : - 1 ] ) #NEWLINE#
return render ( request , 'index.html' , * args ) #NEWLINE#
sns . set_style ( 'ticks' ) #NEWLINE#
regex = '|' . join ( '\\b' + str ( state ) + '\\b' for state in states ) #NEWLINE#
f . close ( ) #NEWLINE#
label . pack ( side = 'top' , fill = 'x' , pady = 10 ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( my_list ) #NEWLINE#
sys . getsizeof ( a ) #NEWLINE#
with open ( 'somefile.txt' , 'a' ) as f : #NEWLINE# #INDENT# f . write ( mytext ) #NEWLINE#
a = [ 4 , 8 , 1 , 7 , 3 , 0 , 5 , 2 , 6 , 9 ] #NEWLINE#
pos = numpy . random . multivariate_normal ( mean , C , size = Nwalkers ) #NEWLINE#
f2 . close ( ) #NEWLINE#
DF [ 'new_column' ] = DF [ 'dic_column' ] . apply ( lambda dic : counting ( dic , 'word' ) ) #NEWLINE#
datetime . datetime ( 2012 , 4 , 1 , 0 , 0 ) . strftime ( '%s' ) #NEWLINE#
plt . draw ( ) #NEWLINE#
self . canvas . pack ( ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
sys . getsizeof ( n . __dict__ ) #NEWLINE#
out . extend ( map ( str , list ( range ( r [ 0 ] , r [ - 1 ] + 1 ) ) ) ) #NEWLINE#
QtCore . QAbstractItemModel . __init__ ( self ) #NEWLINE#
gtk . main_quit ( ) #NEWLINE#
yield line . strip ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE.utf-8' ) #NEWLINE#
GL = [ list ( v ) for k , v in it . groupby ( sorted ( L , key = sorter ) , key = sorter ) ] #NEWLINE#
numpy . atleast_2d ( x [ x [ : , ( 2 ) ] == 1 ] ) #NEWLINE#
sum ( int ( x ) for x in s if x . isdecimal ( ) ) #NEWLINE#
rc ( 'text' , usetex = True ) #NEWLINE#
"""123456""" [ 2 : : - 2 ] #NEWLINE#
re . search ( '(\\?|\\.|gy)$' , w ) #NEWLINE#
with open ( 'outputfile.csv' , 'w' ) as csv_file : #NEWLINE# #INDENT# csv_file . write ( '\n' . join ( map ( ',' . join , my_list ) + '\n' ) ) #NEWLINE#
[ 'tab' , 'leprechaun' ] #NEWLINE#
C . user = property ( lambda self : User . objects . get ( self . user_id ) ) #NEWLINE#
__init__ . py #NEWLINE#
plt . xticks ( rotation = 70 ) #NEWLINE#
cur . connection . close ( ) #NEWLINE#
[ 0 , 3 , 0 , 5 ] #NEWLINE#
test . myfun ( test . f ) #NEWLINE#
"""<!--\\[if#SPACE#IE\\]>.*?<!\\[endif\\]-->""" #NEWLINE#
print ( lm . prob ( 'b' , 'generates#SPACE#a' . split ( ) ) ) #NEWLINE#
select = Select ( driver . find_element_by_id ( 'FCenter' ) ) #NEWLINE#
self . assertEqual ( r , a ) #NEWLINE#
cur . execute ( sql , list ( values . values ( ) ) ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
def square ( list ) : #NEWLINE# #INDENT# return [ ( i ** 2 ) for i in list ] #NEWLINE#
"""{0:.{1}f}""" . format ( x , n ) #NEWLINE#
today = datetime . datetime . today ( ) #NEWLINE#
"""#SPACE#""" . join ( s for s in words . split ( ) if not any ( c . isdigit ( ) for c in s ) ) #NEWLINE#
xl . Run ( 'Macros.xls!Macro_1' ) #NEWLINE#
A , B , C = np . loadtxt ( 'MY_TEXT_FILE.TXT' , skiprows = cpt , unpack = True ) #NEWLINE#
gnuplot . stdin . write ( "plot#SPACE#'-'#SPACE#using#SPACE#1:2#SPACE#title#SPACE#'Line1'#SPACE#with#SPACE#linespoints#SPACE#\n" ) #NEWLINE#
gnuplot . stdin . write ( 'e\n' ) #NEWLINE#
[ prod ( x ) for i in range ( 2 , len ( lst ) + 1 ) for x in combinations ( lst , i ) ] #NEWLINE#
self . wfile . write ( 'authenticated!' ) #NEWLINE#
my_selfexplaining_function ( ) #NEWLINE#
thread . start ( ) #NEWLINE#
re . findall ( '[A-Z][^A-Z]*' , 'TheLongAndWindingRoad' ) #NEWLINE#
order = models . PositiveIntegerField ( default = 0 ) #NEWLINE#
instance . save ( ) #NEWLINE#
rdd . mapPartitions ( f ) . collect ( ) #NEWLINE#
q = Queue . Queue ( ) #NEWLINE#
{ b . pop ( 0 ) : { b . pop ( 0 ) for _ in range ( 1 ) } for _ in range ( 1 ) } #NEWLINE#
newcontents = contents . replace ( 's' , '3' ) #NEWLINE#
a [ : : - 2 ] #NEWLINE#
test_handler ( ) #NEWLINE#
print ( in_nested_list ( x , [ 1 , 2 ] ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
print ( 'a#SPACE#=#SPACE#%d,#SPACE#b#SPACE#=#SPACE#%d,#SPACE#c#SPACE#=#SPACE#%d\n' % ( a , b , c ) ) #NEWLINE#
self . setWindowTitle ( 'Client' ) #NEWLINE#
self . setWindowTitle ( 'Server' ) #NEWLINE#
return '' . join ( random . sample ( x + 'b' * len ( x ) , len ( x ) ) ) #NEWLINE#
root . quit ( ) #NEWLINE#
return data [ abs ( data - np . mean ( data ) ) < m * np . std ( data ) ] #NEWLINE#
rex_nomatch = re . findall ( 'conglomeration_of_sandwiches' , text ) #NEWLINE#
pip2 - - version #NEWLINE#
{ { value | striptags } } #NEWLINE#
ids = c . execute ( 'SELECT#SPACE#id#SPACE#FROM#SPACE#users' ) . fetchall ( ) #NEWLINE#
print ( A [ idx ] ) #NEWLINE#
with self . assertRaises ( SomeException ) : #NEWLINE# #INDENT# do_something ( ) #NEWLINE#
return zip ( a , b , c ) #NEWLINE#
a . append ( "#SPACE#name#SPACE#like#SPACE#'%{}'#SPACE#" . format ( b [ 'by_name' ] ) ) #NEWLINE#
result . append ( [ list [ index ] [ 0 ] , list [ index + 1 ] [ 1 ] ] ) #NEWLINE#
plt . scatter ( x , y , c = t ) #NEWLINE#
__init__ . py #NEWLINE#
_string = 'string' + Foo ( 'text' ) #NEWLINE#
rows = table . findAll ( lambda tag : tag . name == 'tr' ) #NEWLINE#
list ( Counter ( words ) . values ( ) ) #NEWLINE#
my_list = [ line . decode ( 'unicode-escape' ) . rstrip ( '\n' ) for line in f ] #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
from functools import reduce #NEWLINE# score = reduce ( lambda s , t : s + t [ 0 ] * t [ 1 ] , zip ( a , b ) , 0 ) #NEWLINE#
csvwriter . writerow ( [ i , 'a' , 'b' , 'c' ] ) #NEWLINE#
[ { 'id' : 1 , 'ts' : 1475894303 } , { 'id' : 2 , 'ts' : 1475833070 } ] #NEWLINE#
xDate = sys . argv [ 1 ] #NEWLINE#
caketaste ( ) #NEWLINE#
return timedelta ( seconds = _diff . total_seconds ( ) ) #NEWLINE#
ctx . set_font_size ( font_size ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
hist ( df [ df . TYPE == 'SU4' ] . GVW . values , bins = 50 , range = ( 0 , 200 ) ) #NEWLINE#
Foo . allocate_ids ( max = 26740080011040 ) #NEWLINE#
[ 1 , 2 , 1 , 3 , 1 , 4 , 1 , 5 , 1 , 6 ] #NEWLINE#
self . fields [ 'afield' ] . choices = my_computed_choices #NEWLINE#
pil_im = Image . open ( 'data/empire.jpg' , 'r' ) #NEWLINE# pil_im . show ( ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
return max ( ( len ( v ) , k ) for k , v in flows . items ( ) ) #NEWLINE#
plot ( x , y1 , 'b' ) #NEWLINE#
set ( a ) . intersection ( b ) #NEWLINE#
ax . spines [ direction ] . set_visible ( True ) #NEWLINE#
super ( Comment , self ) . save ( * args , ** kwargs ) #NEWLINE#
sys . exit ( exit_code ) #NEWLINE#
return len ( self . children ) == 0 #NEWLINE#
print ( '{}\n' . format ( metro ) ) #NEWLINE#
rows = [ ( 'customer1' , ( 'milk' , 2 ) ) , ( 'customer12' , ( 'bread' , 4 ) ) ] #NEWLINE#
sorted ( _ , key = lambda x : sum ( x ) ) #NEWLINE#
print ( ( x , y ) ) #NEWLINE#
df . eq ( df [ 1 ] , axis = 'index' ) . all ( 1 ) #NEWLINE#
[ ( [ x ] * i ) for i , x in zip ( A , B ) ] #NEWLINE#
plt . figure ( ) #NEWLINE#
dStr = d . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
print ( '#SPACE#a#SPACE#result:#SPACE#%s' % x ) #NEWLINE#
"""A""" #NEWLINE#
print ( [ x for x in lst if 'abc' in x ] ) #NEWLINE#
sys . path #NEWLINE#
plt . imshow ( Z ) #NEWLINE#
{ k : v for d in fruitColourMapping for k , v in list ( d . items ( ) ) } #NEWLINE#
p1 . add_argument ( '-a' , choices = [ 'x' , 'y' , 'z' ] ) #NEWLINE#
expand ( '+*1234' ) #NEWLINE#
print ( rtf_encode ( test_utf8 . decode ( 'utf-8' ) ) ) #NEWLINE#
break #NEWLINE#
sliced = [ list ( islice ( it , 0 , i ) ) for i in seclist ] #NEWLINE#
struct . unpack ( 'BBB' , str . decode ( 'hex' ) ) #NEWLINE#
os . popen ( 'pwd' ) . read ( ) . strip ( '\n' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
PyInit_gstreamer ( ) #NEWLINE#
bar ( ) #NEWLINE#
[ bar ( ) for i in range ( 10 ) ] #NEWLINE#
foo ( 1 , 2 ) #NEWLINE#
getattr ( self , 'clean_%s' % f ) ( ) #NEWLINE#
app . run ( extra_files = extra_files ) #NEWLINE#
A . objects . filter ( B__is_available = True ) . annotate ( num_b = Count ( 'b' ) ) . filter ( #NEWLINE# num_b__gt = 0 ) . order_by ( '-num_items' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
plt . xlabel ( 'Height#SPACE#(cm)' ) #NEWLINE#
t , z , y , x = np . indices ( temp . shape ) #NEWLINE#
ax . set_zlim3d ( 0 , 10 ) #NEWLINE#
parser . set_default_subparser ( 'PRINT' ) #NEWLINE#
file ( filename ) . read ( ) #NEWLINE#
np . where ( ( abcd <= data2a ) & ( abcd >= data2b ) , 1 , 0 ) . sum ( ) #NEWLINE#
super ( ChangeEmailForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
root . bind ( '<Control-q>' , lambda event = None : root . destroy ( ) ) #NEWLINE#
print ( len ( letters ) > len ( no_rep ) ) #NEWLINE#
'Aç\x89\x87' , 'Aç\x89\x87' , 'A#SPACE#pian4' , 'adult#SPACE#movie/pornography' #NEWLINE#
print ( [ [ x for x in a if len ( x ) == i + 1 ] for i in range ( m ) ] ) #NEWLINE#
ax . set_aspect ( 1 ) #NEWLINE#
task . AsyncResult ( 'invalid' ) . status #NEWLINE#
[ 'muffins' , 'brownies' , 'cookies' , 'cake' ] #NEWLINE#
print ( convert ( 23893 ) ) #NEWLINE#
urllib . parse . quote ( 'http://www.google.com?q=Zombie+Apocalypse' ) #NEWLINE#
i += 1 #NEWLINE#
ax . set_xlim ( 0 , 10 ) #NEWLINE#
print ( [ A [ p ] [ i ] for i , p in enumerate ( P ) ] ) #NEWLINE#
plt . suptitle ( 'Main#SPACE#Title' , size = 16 ) #NEWLINE#
ax . spines [ 'bottom' ] . set_position ( 'zero' ) #NEWLINE#
filtered_list = list ( filter_list ( full_list , excludes ) ) #NEWLINE#
args = [ 'test.exe' , 'first_argument' , 'second_argument' ] #NEWLINE#
plt . draw ( ) #NEWLINE#
"""({c.real:.2f}#SPACE#+#SPACE#{c.imag:.2f}i)""" . format ( c = n ) #NEWLINE#
json . JSONEncoder . __init__ ( self , * args , ** kwargs ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
new_img . save ( '/tmp/normalized.png' ) #NEWLINE#
list_of_lists = [ list ( elem ) for elem in list_of_tuples ] #NEWLINE#
s = random . randint ( 0 , 2 ** 10000 - 1 ) #NEWLINE#
parser . set ( 'test' , 'more#SPACE#options' , "Really?#SPACE#I#SPACE#can't#SPACE#believe#SPACE#it's#SPACE#not#SPACE#butter!" ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
a . to_csv ( 'xgboost.txt' , header = True , index = False , sep = '\t' , mode = 'a' ) #NEWLINE#
prediction = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
<STR0> . append ( ( 2 , 'x' ) ) #NEWLINE#
numpy . einsum ( 'az,bz,cz,dz#SPACE#->#SPACE#abcd' , A , B , C , D ) #NEWLINE#
return pd . concat ( pd . read_html ( url ) , ignore_index = False ) #NEWLINE#
urllib . parse . urlencode ( a ) #NEWLINE#
self . SetBackgroundColour ( 'RED' ) #NEWLINE#
np . array ( __ , dtype = float ) #NEWLINE#
curses . echo ( ) #NEWLINE#
urllib . parse . urlencode ( url_dict , True ) #NEWLINE#
sudo ( 'service#SPACE#lighttpd#SPACE#restart' ) #NEWLINE#
conn . close ( ) #NEWLINE#
app . run ( port = 5000 , debug = True ) #NEWLINE#
line = re . sub ( 'FriendlyName=.+' , 'FriendlyName=big' , line ) #NEWLINE#
s1 . reset_index ( drop = True ) #NEWLINE#
f . close ( ) #NEWLINE#
map ( stripper , 'QVOD,#SPACE#Baidu#SPACE#Player' . split ( ',' ) ) #NEWLINE#
inpaint_mask = cv . CreateImage ( cv . GetSize ( im ) , 8 , 1 ) #NEWLINE#
xattr . listxattr ( '/bin/ping' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
my_file = open ( 'data.csv' , 'ab' ) #NEWLINE#
a . encode ( 'UTF-8' ) == b #NEWLINE#
dW = masked . sum ( axis = 1 ) #NEWLINE#
_ ( 'running' ) #NEWLINE#
return any ( ud . category ( c ) [ 0 ] == 'L' for c in u ) #NEWLINE#
loop . close ( ) #NEWLINE#
map ( itemgetter ( 'name' ) , li ) . index ( 'Tom' ) #NEWLINE#
sys . modules [ 'sys' ] #NEWLINE#
np . where ( a [ : , ( 1 ) ] == 2 ) #NEWLINE#
tokenize . sent_tokenize ( p ) #NEWLINE#
ordering = { word : i for i , word in enumerate ( predefined_list ) } #NEWLINE#
'"' in dfTrain [ 'name' ] . to_string ( ) #NEWLINE#
colnames = df . columns . tolist ( ) #NEWLINE#
print ( f ( 1 ) ) #NEWLINE#
im . save ( '/tmp/output.png' ) #NEWLINE#
login ( ) #NEWLINE#
"""юу#SPACE#со#SPACE#беутифул""" #NEWLINE#
win32com . client . Dispatch ( 'ADODB.Connection' ) #NEWLINE#
keys = set ( chain . from_iterable ( dicts ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
min ( iList , key = lambda i : i . number ) #NEWLINE#
yield scrapy . Request ( next_page , callback = self . parse ) #NEWLINE#
[ float ( x . replace ( '+' , 'e+' ) . replace ( '-' , 'e-' ) ) for x in strs . split ( ) ] #NEWLINE#
tk . Label ( self . frame , text = t ) . grid ( row = row , column = 1 ) #NEWLINE#
QtWidgets . QGraphicsScene . mouseMoveEvent ( self , event ) #NEWLINE#
db . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#some_table' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#cdr' ) #NEWLINE#
print ( 'Hello' , line . strip ( ) ) #NEWLINE#
zip ( ( x . count ( item ) for item in set ( x ) ) , set ( x ) ) #NEWLINE#
lm . prob ( 'spain' , [ 'rain#SPACE#in' ] ) #NEWLINE#
dc . DeleteDC ( ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
ctypes . cdll . LoadLibrary ( '/abs/path/to/b.so' ) #NEWLINE#
start_date + relativedelta ( months = 2 ) #NEWLINE#
csv_reader = csv . reader ( f ) #NEWLINE#
res . columns = [ ( 'det%s' % i ) for i , _ in enumerate ( df . columns ) ] #NEWLINE#
self . text . bind ( '<<Change>>' , self . _on_change ) #NEWLINE#
with open ( 'x.py' ) as f : #NEWLINE# #INDENT# s = f . read ( ) #NEWLINE#
bytearray ( int ( b [ x : x + 8 ] , 2 ) for x in range ( 0 , len ( b ) , 8 ) ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
df [ 'B' ] . argmax ( ) #NEWLINE#
response . close ( ) #NEWLINE#
token = cookies [ 'token' ] . value #NEWLINE#
first , rest = seq [ 0 ] , seq [ 1 : ] #NEWLINE#
df = df . set_index ( [ 'B' ] ) #NEWLINE# print ( df . loc [ 'one' ] ) #NEWLINE#
( df2 - df2 . shift ( ) ) . fillna ( 0 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
print ( repr ( f . readline ( ) [ : 1 ] ) ) #NEWLINE#
return QtCore . QVariant ( ) #NEWLINE#
print ( '2#SPACE#+#SPACE#{0}#SPACE#=#SPACE#{1}' . format ( integer , rslt ) ) #NEWLINE#
doit ( 'two' ) #NEWLINE#
msg = msg . rstrip ( ) #NEWLINE#
my_instance . save ( using = 'this_db' ) #NEWLINE#
print ( ( n , '\n' ) ) #NEWLINE#
return list ( map ( itemgetter ( 0 ) , G ) ) #NEWLINE#
return str ( cls ) . startswith ( '<class#SPACE#' ) #NEWLINE#
results = sorted ( list ( results_dict . items ( ) ) , key = lambda x : abs ( x [ 0 ] ) ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
return HttpResponse ( 'success' ) #NEWLINE#
[ list ( islice ( b , x ) ) for x in l ] #NEWLINE#
pprint . pprint ( row ) #NEWLINE#
connect . commit ( ) #NEWLINE#
self . Bind ( wx . EVT_KEY_DOWN , self . OnKey ) #NEWLINE#
warnings . filterwarnings ( 'ignore' , category = DeprecationWarning ) #NEWLINE#
pickle . dump ( a , f ) #NEWLINE#
items = [ [ 1 , 2 , 0 ] , [ 1 , 2 , 1 ] , [ 1 , 2 , 0 ] ] #NEWLINE#
df [ 'B' ] = df [ 'A' ] . astype ( 'category' ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
pattern = re . compile ( '[\\uD800-\\uDFFF].' , re . UNICODE ) #NEWLINE# pattern = re . compile ( '[^\\u0000-\\uFFFF]' , re . UNICODE ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
pprint ( sys . path ) #NEWLINE#
df [ '20160101' : '20160301' ] #NEWLINE#
retdict = json . loads ( content ) #NEWLINE#
raise ValueError ( 'Please#SPACE#include#SPACE#an#SPACE#index#SPACE#to#SPACE#get' ) #NEWLINE#
list ( itertools . dropwhile ( math . isnan , reversed ( r ) ) ) [ : : - 1 ] #NEWLINE#
isinstance ( obj , int ) #NEWLINE#
df . A . plot ( ax = ax , style = 'b-' ) #NEWLINE#
img = np . array ( [ 7765869 , 16777215 ] , dtype = np . uint32 ) #NEWLINE#
print ( 'Workflow#SPACE#already#SPACE#exists:#SPACE#' , e . response . get ( 'Error' , { } ) . get ( 'Code' ) ) #NEWLINE#
print ( 'Activity#SPACE#already#SPACE#exists:#SPACE#' , e . response . get ( 'Error' , { } ) . get ( 'Code' ) ) #NEWLINE#
print ( select ( [ func . count ( ) ] ) . select_from ( table ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return a + b #NEWLINE#
ax . set_xlim ( 0 , 25 ) #NEWLINE#
plt . show ( ) #NEWLINE#
del x [ 2 ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
srcList = list ( set ( srcText . split ( ) ) ) #NEWLINE#
f = open ( 'test.txt' , 'w' ) #NEWLINE#
a = b #NEWLINE#
lambda : type ( self ) . spam . __set__ ( self , 'Ouch' ) #NEWLINE#
result . setdefault ( column , [ ] ) . append ( value ) #NEWLINE#
print ( '#SPACE#' . join ( str ( x ) for x in s ) ) #NEWLINE#
next ( x for x in range ( 10 ) if x == 7 ) #NEWLINE#
str ( tdo ) #NEWLINE#
ax . set_ylabel ( 'Y' ) #NEWLINE#
bisect . bisect_left ( l , 4 ) #NEWLINE#
id ( 0 ) #NEWLINE#
list ( df . T . to_dict ( ) . values ( ) ) #NEWLINE#
clen = ctypes . c_ulonglong ( 0 ) #NEWLINE#
signal . signal ( signal . SIGTERM , signal_handler ) #NEWLINE#
o5 . method ( ) #NEWLINE#
pairs = [ ( 10 , 9 ) , ( 8 , 7 ) , ( 6 , 5 ) , ( 4 , 3 ) ] #NEWLINE#
label . set_horizontalalignment ( 'right' ) #NEWLINE#
self . crawler . start ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : str ( x ) + str ( y ) , map ( ord , 'hello#SPACE#world' ) ) #NEWLINE#
super ( MyThread , self ) . __init__ ( ) #NEWLINE#
[ np . insert ( j , 0 , i ) for i , j in product ( a , np . array ( ( b , c ) ) . T ) ] #NEWLINE#
regex . search ( 'suck' ) #NEWLINE#
return http . Response ( stream = 'upload#SPACE#complete.' ) #NEWLINE#
call ( '"C:\\Path\\To\\chrome.exe"#SPACE#-incognito#SPACE#www.foo.com' , shell = True ) #NEWLINE#
df . groupby ( df . index ) #NEWLINE#
date -= timedelta ( days = 5 ) #NEWLINE#
result = [ el . text_content ( ) for el in result ] #NEWLINE#
selfref_list . append ( selfref_list ) #NEWLINE#
copyfiles ( '.' , 'test' , '*.ext' ) #NEWLINE#
[ [ 0 , 1 , 3 , 8 , 10 , 13 , 13 ] , [ 11 , 5 , 1 , 0 ] ] #NEWLINE#
from my_package . my_module import my_class #NEWLINE#
print ( '{:.3f}' . format ( x ) ) #NEWLINE#
check_call ( 'mount#SPACE#-t#SPACE#whatever#SPACE#data:/dir/#SPACE#~/mnt/data_dir' , shell = True ) #NEWLINE#
transport . close ( ) #NEWLINE#
db = create_engine ( 'mysql://root@localhost/test' , pool_recycle = True ) #NEWLINE#
parse_time ( '10s' ) #NEWLINE#
nltk . download ( 'all' ) #NEWLINE#
plt . figure ( figsize = ( 7.15 , 5.15 ) ) #NEWLINE#
re . match ( '\\s*' , s ) . group ( ) #NEWLINE#
"""""" . join ( chain . from_iterable ( lst ) ) #NEWLINE#
return hex ( ~ crcVar & 4294967295 ) [ 2 : - 1 ] . upper ( ) #NEWLINE#
var1 , var2 = [ int ( var1 ) , int ( var2 ) ] #NEWLINE#
os . path . split ( fullpath ) #NEWLINE#
celery . control . revoke ( uuid , terminate = True ) #NEWLINE#
print ( string . split ( ',' , 1 ) [ 0 ] [ 4 : ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( operator . mul , tuple , 1 ) #NEWLINE#
{ { 42.55 | round } } #NEWLINE#
self . window . add ( self . image ) #NEWLINE#
print ( 'Hello,#SPACE#Python' ) #NEWLINE#
print ( user . username , user . get_full_name ( ) , user . email ) #NEWLINE#
return cls ( * args , ** kwargs ) #NEWLINE#
[ ( x ** 2 ) for x in range ( 5 ) ] #NEWLINE#
[ m . group ( ) for m in re . finditer ( '((\\w)\\2)+' , 'arrange' ) ] #NEWLINE#
matplotlib . use ( 'WXAgg' ) #NEWLINE#
f = pygame . font . Font ( 'segoe-ui-symbol.ttf' , 64 ) #NEWLINE#
self . driver . get ( 'https://www.example.org/abc' ) #NEWLINE#
browser . get ( 'some#SPACE#url' ) #NEWLINE#
self . cl . setstatus ( 'CL2.Item1' , 'on' ) #NEWLINE#
self . cl . setstatus ( 'CL1' , 'off' ) #NEWLINE#
event = fields . ForeignKey ( 'TicketResource' , 'event' ) #NEWLINE#
print ( 'The#SPACE#left#SPACE#node#SPACE#is#SPACE#None/Null.' ) #NEWLINE#
parser . parse_args ( '-i#SPACE#one#SPACE#two#SPACE#-i#SPACE#three#SPACE#four' . split ( ) ) #NEWLINE#
set ( [ 3 , 4 , 5 , 6 ] ) #NEWLINE#
"""This#SPACE#class#SPACE#contains#SPACE#a#SPACE#bunch#SPACE#of#SPACE#|Foo|#SPACE#objects""" #NEWLINE#
res4 = inner1d ( U . transpose ( 0 , 2 , 1 ) , V . T ) #NEWLINE#
yourThread . daemon = True #NEWLINE#
nextstring == 'new-string' #NEWLINE#
re . split ( '\\W+' , my_str ) #NEWLINE#
array ( [ 35.33825423 , 32.75363451 , 32.41594355 , 32.41594355 ] ) #NEWLINE#
print ( pattern . search ( text ) . group ( 1 ) ) #NEWLINE#
label . pack ( ) #NEWLINE#
proc = subprocess . Popen ( [ 'python' , 'printbob.py' , 'arg1#SPACE#arg2#SPACE#arg3#SPACE#arg4' ] , #NEWLINE# stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE# print ( proc . communicate ( ) [ 0 ] ) #NEWLINE#
[ '14' , '23' ] #NEWLINE#
[ '23' , '14' ] #NEWLINE#
[ '24' , '13' ] #NEWLINE#
plot . show ( ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
df . ix [ row . name ] #NEWLINE#
numpy . array ( strings , dtype = float ) #NEWLINE#
plt . colorbar ( CS3 ) #NEWLINE#
my_dict [ key ] += 1 #NEWLINE#
words -= set ( ( 'ex' , 'rs' , 'ra' , 'frobnicate' ) ) #NEWLINE#
writer . writerow ( keys ) #NEWLINE#
del all [ max ( current - 2 , 0 ) : current ] #NEWLINE#
return redirect ( url_for ( 'main' ) ) #NEWLINE#
value = int ( value ) #NEWLINE#
print ( num ) #NEWLINE#
f . read ( ) #NEWLINE#
int ( '' ) #NEWLINE#
wb = load_workbook ( filename = BytesIO ( input_excel . read ( ) ) ) #NEWLINE#
return HttpResponse ( '<pre>%s</pre>' % dump ) #NEWLINE#
d = [ { 'x' : 1 , 'y' : 2 } ] #NEWLINE#
sess = tf . Session ( config = tf . ConfigProto ( log_device_placement = True ) ) #NEWLINE#
print ( h . unescape ( 'Â£682m' ) ) #NEWLINE#
return int ( '' . join ( map ( ord3 , s ) ) ) #NEWLINE#
a [ [ ind ] ] #NEWLINE#
list ( enumerate ( reversed ( test ) ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
return utc_dt . replace ( tzinfo = timezone . utc ) . astimezone ( tz = None ) #NEWLINE#
ist ( permutations ( [ 2 , 3 , 4 ] , [ 7 , 2 , 5 ] , [ 8 , 1 , 4 , 9 ] ) ) #NEWLINE#
s = 'UserID/ContactNumber' #NEWLINE#
tuple ( int ( x ) for x in inputlist . split ( ',' ) ) #NEWLINE#
any ( c . isalpha ( ) for c in string_1 ) #NEWLINE#
reader = csv . reader ( open ( 'copy-john.csv' ) ) #NEWLINE#
X , Y = np . meshgrid ( x , y ) #NEWLINE#
print ( a . decode ( 'utf-8' , 'mixed' ) ) #NEWLINE#
print ( my_dict [ 'key1' ] ) #NEWLINE#
fileID = fs . put ( open ( 'owl.jpg' , 'rb' ) ) #NEWLINE#
neurons . append ( neuron ) #NEWLINE#
all_ranges = list ( gen_range ( 100000000 , 600000000 , 100 ) ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( '#SPACE#else' , end = '#SPACE#' ) #NEWLINE#
i . click ( ) #NEWLINE#
print ( db . query ( T1 . c1 ) . filter ( T1 . c1 . op ( 'regexp' ) ( SEARCH_TERM ) ) . all ( ) ) #NEWLINE#
print ( [ tuple ( ( a , b + 1 ) for a , b in group ) for group in t ] ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
return '0x%s' % ( '00000000%x' % ( n & 4294967295 ) ) [ - 8 : ] #NEWLINE#
array ( 'B' , [ 1 , 2 , 1 , 0 , 3 , 6 , 0 , 6 ] ) #NEWLINE#
event_full_datetime = models . DateTimeField ( ) #NEWLINE#
df = pd . DataFrame ( { 'x' : x , 'y' : y } ) #NEWLINE#
ssh . connect ( 'yourServer' , username = 'you' , password = 'yay!' ) #NEWLINE#
return df [ cond ] . max ( ) #NEWLINE#
pl . figure ( 'Share#SPACE#values' ) #NEWLINE#
r . search ( '[2011]' ) #NEWLINE#
print ( numpy . argmax ( a_by_a , axis = 1 ) ) #NEWLINE#
string = my_string . rstrip ( '\r\n' ) #NEWLINE#
d2 = OrderedDict ( [ ( 'c' , 3 ) , ( 'e' , 5 ) ] ) #NEWLINE#
print ( '' . join ( inverse_regex . ipermute ( '[a-z]' ) ) ) #NEWLINE#
do_something ( my_object ) #NEWLINE#
G_ij = K ( X_i , Y_j ) #NEWLINE#
logging . error ( 'some#SPACE#error' ) #NEWLINE# logging . info ( 'some#SPACE#info' ) #NEWLINE#
my_cmap . set_under ( 'w' ) #NEWLINE#
ctypes . windll . user32 . MessageBoxW ( 0 , text , title , style ) #NEWLINE#
controller1 . py #NEWLINE#
self . text . pack ( fill = 'both' , expand = 1 ) #NEWLINE#
ord ( 'a' ) #NEWLINE#
np . dot ( a , weights ) #NEWLINE#
text . insert ( END , 'Bye#SPACE#bye...' ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
tar . close ( ) #NEWLINE#
plt . plot ( x , y , 'ro' ) #NEWLINE#
del a [ k ] #NEWLINE#
"""astring""" . __getitem__ ( slice ( 1 , 4 ) ) #NEWLINE#
os . chdir ( '/tmp' ) #NEWLINE#
os . chdir ( '/' ) #NEWLINE#
pixbuf . save ( 'path.png' ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'chi2__gamma' : 0.01 , 'svm__C' : 10.0 , 'svm__kernel' : 'precomputed' } #NEWLINE#
script = os . path . abspath ( sys . argv [ 0 ] ) #NEWLINE#
print ( np . where ( mask ) [ 0 ] ) #NEWLINE#
zdf2 = bcolz . ctable . fromdataframe ( df2 ) #NEWLINE#
arr * ( arr == maximum_filter ( arr , footprint = np . ones ( ( 3 , 3 ) ) ) ) #NEWLINE#
my_fn ( list ( range ( 3 ) ) ) #NEWLINE#
d2 = copy . deepcopy ( d ) #NEWLINE#
del sys . argv [ 1 ] #NEWLINE#
len ( [ x for x in str_ . split ( ) if x in list ( dict_1 . values ( ) ) ] ) #NEWLINE#
cur . close ( ) #NEWLINE#
r = urllib . request . urlopen ( req ) #NEWLINE#
logging . getLogger ( ) #NEWLINE#
media_frame . stack ( ) . map ( m ) . unstack ( ) #NEWLINE#
end_date = '#SPACE#' . join ( end_date ) #NEWLINE#
DataFrame . mode ( ) [ 0 ] #NEWLINE#
d = dict ( l ) #NEWLINE#
print ( '<img#SPACE#src="data:image/png;base64,{0}">' . format ( data ) ) #NEWLINE#
app . test_request_context ( ) . push ( ) #NEWLINE#
np . split ( index [ sort_idx ] , np . cumsum ( cnt [ : - 1 ] ) ) #NEWLINE#
plt . imshow ( gray , cmap = plt . get_cmap ( 'gray' ) ) #NEWLINE#
df #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
m = re . search ( '(?<=//)[^/]*' , str ) #NEWLINE#
re . split ( ',' , '1,2,3' ) #NEWLINE#
os . system ( 'firefox' ) #NEWLINE#
dist = scipy . spatial . distance . cdist ( a , b ) #NEWLINE#
store . select ( 'df' , columns = [ 'one' ] ) #NEWLINE#
mylist . pop ( ) #NEWLINE#
myList = [ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE# print ( ',' . join ( '(%s,%s)' % tup for tup in myList ) ) #NEWLINE#
ax . legend ( lines , [ l . get_label ( ) for l in lines ] , loc = 'upper#SPACE#center' ) #NEWLINE#
list ( od . values ( ) ) [ : 3 ] #NEWLINE#
return_equal ( a , b , c ) #NEWLINE#
c = b [ index ] #NEWLINE#
pass #NEWLINE#
[ do_stuff ( a , b ) for a , b in itertools . permutations ( A , 2 ) ] #NEWLINE#
elements = [ ( 1 , 1 , 1 ) , ( 2 , 3 , 7 ) , ( 3 , 5 , 10 ) ] #NEWLINE#
ax . imshow ( np . random . randn ( 10 , 10 ) , interpolation = 'none' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
parser . add_argument ( 'unittest_args' , nargs = '*' ) #NEWLINE#
df1 . columns = [ 'teams1' , 'teams2' ] #NEWLINE#
a = numpy . arange ( 25 ) . reshape ( 5 , 5 ) #NEWLINE#
TEMPLATE_DIRS = os . path . join ( BASE_DIR , 'yourdjproject' , 'templates' ) , #NEWLINE#
return re . compile ( '(%s)' % '|' . join ( fmt % i for i in range ( lo , hi + 1 ) ) ) #NEWLINE#
print ( tag . find ( 'ns1:fullname' ) . text ) #NEWLINE#
print ( tag . find ( 'ns1:givenname' ) . text ) #NEWLINE#
print ( tag . find ( 'ns1:orgtitle' ) . text ) #NEWLINE#
print ( tag . find ( 'ns1:orgdepartment' ) . text ) #NEWLINE#
mylist = sorted ( mylist , key = lambda k : ( k [ 'name' ] . lower ( ) , k [ 'age' ] ) ) #NEWLINE#
float_to_str ( 1.2312312312312313e-10 ) #NEWLINE#
'py:staticmethod' , 'c:type' , 'np-c:type' , 'c:macro' , 'c:function' #NEWLINE#
'np:module' , 'py:data' , 'np:attribute' , 'std:term' , 'py:function' #NEWLINE#
logger . info ( 'a#SPACE#message' ) #NEWLINE#
self . figurecanvas . draw ( ) #NEWLINE#
df = pd . read_csv ( StringIO ( text ) , parse_dates = [ 0 ] ) #NEWLINE#
ax . spines [ 'bottom' ] . set_bounds ( 20 , 80 ) #NEWLINE#
followers_df . reset_index ( ) #NEWLINE#
ax . set_zlim3d ( [ - 1 , 9 ] ) #NEWLINE#
df . add_prefix ( 's' ) #NEWLINE#
timestamps , elements = zip ( * sorted ( zip ( timestamps , elements ) ) ) #NEWLINE#
urls = sys . argv [ 2 : ] #NEWLINE#
( 1024 ) . to_bytes ( 2 , byteorder = 'big' ) #NEWLINE#
print ( sys . version ) #NEWLINE#
set ( yourString ) & set ( badChars ) #NEWLINE#
[ 3 , 2 , 5 , 3 , 3 ] #NEWLINE#
listWords = line . split ( '\t' ) #NEWLINE#
np . arange ( 10 ) [ : : - 1 ] #NEWLINE#
plt . yticks ( np . arange ( y . min ( ) , y . max ( ) , 0.005 ) ) #NEWLINE#
arr = np . empty ( dims , dtype = kerneldt ) #NEWLINE#
return [ e for e , g in groupby ( sorted ( my_list ) ) ] #NEWLINE#
heapq . heappush ( heap , ( - prod , n , n ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
ax . set_xlim3d ( numpy . min ( T ) , numpy . max ( T ) ) #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE# [ item for item in a if sum ( item ) > 10 ] #NEWLINE#
parser . add_argument ( '-g' , '--global' ) #NEWLINE#
foo ( * values ) #NEWLINE#
super ( FrontEndAdmin , self ) . __init__ ( model , admin_site ) #NEWLINE#
self . __dict__ . update ( cls . __dict__ ) #NEWLINE#
csv_content = resp . read ( ) . decode ( 'utf-8' ) #NEWLINE#
matched [ 1 ] += 1 #NEWLINE#
parser . add_argument ( '-f' , nargs = '+' , action = required_length ( 2 , 3 ) ) #NEWLINE#
logging . basicConfig ( filename = 'myapp.log' , level = logging . INFO ) #NEWLINE#
bucket . delete ( ) #NEWLINE#
sys . stderr . write ( str ( prompt ) ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
p = Process ( target = f , args = ( 'bob' , ) ) #NEWLINE#
writer . writerow ( item ) #NEWLINE#
pdb . Pdb . __init__ ( self ) #NEWLINE#
Link = Link1 . css ( 'span.title#SPACE#a::attr(href)' ) . extract_first ( ) #NEWLINE#
url ( '^hello/' , 'myapp.views.hello' ) , #NEWLINE# url ( '^home/' , 'myapp.views.home' ) , #NEWLINE#
df . CITY #NEWLINE#
traceit ( ) #NEWLINE#
List . objects . order_by ( '-pk' ) [ 0 ] #NEWLINE#
self . socket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
print ( '#SPACE#' . join ( getitems ( bleah ) ) ) #NEWLINE#
[ 'n0#SPACE#inf0rmation#SPACE#available' ] #NEWLINE#
foo ( ) #NEWLINE#
print ( json . dumps ( OrderedDict ( table_data ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
d = { key : value for key , value in zip ( keys , values ) } #NEWLINE#
b_set = set ( tuple ( x ) for x in a ) #NEWLINE# b = [ list ( x ) for x in b_set ] #NEWLINE#
fig . clf ( ) #NEWLINE#
retrieved_strings = map ( lambda x : '{' + x + '}' , txt . strip ( '{}' ) . split ( '}{' ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
str_list = [ 'a' , 'b' , 'c' ] #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
print ( 'A#SPACE#man#SPACE#with#SPACE#two#SPACE#{0:{1}}.' . format ( 'noses' , 10 ) ) #NEWLINE#
result = op_func ( a , b ) #NEWLINE#
sns . kdeplot ( np . array ( data ) , bw = 0.5 ) #NEWLINE#
return sum ( delta_list , timedelta ( ) ) / len ( delta_list ) #NEWLINE#
hasattr ( object , 'attribute#SPACE#name' ) #NEWLINE#
del dictionary [ old_key ] #NEWLINE#
is_date ( 'xyznotadate' ) #NEWLINE#
plt . show ( ) #NEWLINE#
post_input = web . input ( _method = 'post' ) #NEWLINE#
parser . parse_args ( f . read ( ) . split ( ) , namespace ) #NEWLINE#
parser . error ( 'Filename#SPACE#not#SPACE#given' ) #NEWLINE#
Thread ( target = run , args = ( args . arg1 , args . arg2 ) ) #NEWLINE#
newList #NEWLINE#
pkt [ TCP ] . payload = send_hdr #NEWLINE#
termios . tcsetattr ( fd , termios . TCSAFLUSH , new_settings ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
socket . connect ( ( HOST , PORT ) ) #NEWLINE#
myList . index ( [ x for x in myList if x != 0 ] [ 0 ] ) #NEWLINE#
y = lasagne . layers . get_output ( l_out ) #NEWLINE#
loop . run_forever ( ) #NEWLINE#
my_dict [ k ] = 'my#SPACE#default#SPACE#value' #NEWLINE#
soup . find_all ( 'a' , text = lambda text : text and 'price' in text ) #NEWLINE#
file_size = int ( d . getheader ( 'Content-Length' ) ) #NEWLINE#
w . set_edgecolor ( 'cyan' ) #NEWLINE#
cv2 . imshow ( 'rgb#SPACE#image' , img2 ) #NEWLINE#
plt . style . use ( 'classic' ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 2 , size = ( 10 , 4 ) ) , columns = list ( 'ABCD' ) ) #NEWLINE#
print ( msg . as_string ( ) ) #NEWLINE#
sp = subprocess . Popen ( [ '/bin/bash' , '-i' , '-c' , 'nuke#SPACE#-x#SPACE#scriptpath' ] ) #NEWLINE#
return lambda partition : target == sum ( map ( int , partition ) ) #NEWLINE#
g = [ [ 1 , 2 , 3 ] , [ 3 , 4 , 5 ] , [ 5 , 6 ] , [ 6 , 7 ] , [ 9 , 10 ] , [ 10 , 11 ] ] #NEWLINE#
return y [ idx . argmin ( axis = 1 ) ] #NEWLINE#
classifier . classify ( featurized_test_sentence ) #NEWLINE#
sys . path . insert ( 0 , os . path . join ( os . path . dirname ( __file__ ) , 'lib' ) ) #NEWLINE#
setattr ( self , Properties_Pointers [ i ] , group ) #NEWLINE#
cv2 . imshow ( 'bgr#SPACE#image' , img ) #NEWLINE#
Blog . objects . filter ( name__startswith = 'Beatles' ) #NEWLINE#
sorted ( lst , key = lambda x : - x [ 1 ] ) #NEWLINE#
tuples_list = list ( tuples2 ) #NEWLINE#
base = datetime . datetime . today ( ) #NEWLINE# date_list = [ ( base - datetime . timedelta ( days = x ) ) for x in range ( 0 , numdays ) ] #NEWLINE#
setattr ( self , '_' + attr_name , value ) #NEWLINE#
plt . scatter ( list ( range ( len ( y ) ) ) , y , s = 60 , c = z , cmap = cm . hot ) #NEWLINE#
plt . gca ( ) . add_artist ( circle ) #NEWLINE#
help ( uuid . UUID . __init__ ) #NEWLINE#
l = [ ( 'a' , 1 ) , ( 'a' , 2 ) , ( 'a' , 3 ) , ( 'b' , 1 ) , ( 'b' , 2 ) , ( 'c' , 1 ) ] #NEWLINE#
plt . xlabel ( 'xlabel' , fontsize = 18 ) #NEWLINE#
fly . set_data ( [ fdata [ 0 ] [ 0 ] , fdata [ 0 ] [ - 1 ] ] , [ fdata [ 1 ] [ 0 ] , fdata [ 1 ] [ - 1 ] ] ) #NEWLINE#
numbers_float = map ( float , line . split ( ) ) #NEWLINE#
print ( str ( count2 ) + '#SPACE#of#SPACE#' + str ( count1 ) + '#SPACE#strings#SPACE#are#SPACE#in#SPACE#long#SPACE#string.' ) #NEWLINE#
fig . show ( ) #NEWLINE#
im . save ( output , format = 'PNG' ) #NEWLINE#
pandas . DataFrame ( data ) . groupby ( 0 ) . mean ( ) #NEWLINE#
self . id = self . get_next_id ( ) #NEWLINE#
_to . update ( _from ) #NEWLINE#
print ( difflib . get_close_matches ( target_word , list_of_possibles ) ) #NEWLINE#
x1 = x [ 3 : 8 ] #NEWLINE#
lst = [ ( [ 1 ] * 4 ) for n in range ( 3 ) ] #NEWLINE#
pickle . load ( file , encoding = 'latin1' ) #NEWLINE#
[ ( x + y ) for x , y in zip ( * ( [ iter ( q ) ] * 2 ) ) ] #NEWLINE#
[ 'a' , 'b' ] #NEWLINE#
print ( 'Yay,#SPACE#my#SPACE#response#SPACE#was:#SPACE#%s' % response . content ) #NEWLINE#
self . text . bind ( '<space>' , self . Spellcheck ) #NEWLINE#
file = forms . FileField ( label = 'Choose#SPACE#excel#SPACE#to#SPACE#upload' ) #NEWLINE#
print ( config . get ( 'main' , 'key2' ) ) #NEWLINE#
print ( config . get ( 'main' , 'key3' ) ) #NEWLINE#
( '^grappelli/' , include ( grappelli_urls ) ) , #NEWLINE#
np . savetxt ( 'R2.txt' , np . hstack ( [ R , phase ] ) , fmt = [ '%0.8f' , '%g' , '%g' , '%g' ] ) #NEWLINE#
{ { ',' } } #NEWLINE#
do_something ( ) #NEWLINE#
s = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) #NEWLINE#
custom_API ( ) #NEWLINE#
print ( g ( 1 , 2 , 3 ) ) #NEWLINE#
b = [ { 'peer' : '127.0.0.1' , 'netmask' : '255.0.0.0' , 'addr' : '127.0.0.1' } ] #NEWLINE# b [ 0 ] [ 'addr' ] #NEWLINE#
cbar = plt . colorbar ( CF , ticks = lvls , format = '%.4f' ) #NEWLINE#
sys . setdefaultencoding ( 'utf-8' ) #NEWLINE#
np . delete ( x , indx ) #NEWLINE#
QtWidgets . QListView . __init__ ( self , parent ) #NEWLINE#
[ 'Cats' , 'like' , 'dogs' , 'as' , 'much' , 'cats.' ] #NEWLINE# [ 1 , 2 , 3 , 4 , 5 , 4 , 3 , 2 , 6 ] #NEWLINE#
doc = lxml . etree . parse ( 'xml.txt' ) #NEWLINE#
[ ( 1 if p < 0.5 else 2 ) for p in classifications ] #NEWLINE#
result = map ( lambda x : x * P , S ) #NEWLINE#
print ( 'LMS#SPACE#weights:' , lms . Wt ) #NEWLINE#
a = a [ : ] #NEWLINE#
full_arr . view ( 'f8,#SPACE#f8,#SPACE#f8' ) . sort ( order = [ 'f0' ] , axis = 0 ) #NEWLINE#
[ [ 0 , 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] #NEWLINE#
resp = requests . get ( 'https://example.com' , verify = True , cert = [ #NEWLINE# '/path/to/my/ca.crt' ] ) #NEWLINE#
print ( os . read ( f . fileno ( ) , 50 ) ) #NEWLINE#
len ( mylist ) #NEWLINE#
p . terminate ( ) #NEWLINE#
L = [ 'perfect' , 'data1' , 'queryda873' , 'server187' , 'tuplip91' , 'time' ] #NEWLINE#
from functools import reduce #NEWLINE# s = reduce ( lambda x , y : x + y , l ) #NEWLINE#
re . compile ( '[a-zA-ZÃ\x91Ã±]+' , re . DEBUG ) #NEWLINE#
[ 1 , 3 , 9 , 27 , 81 , 243 , 729 , 2187 , 6561 , 19683 , 59049 , 177147 , 531441 , 202839 ] #NEWLINE#
lst [ 3 ] [ 1 ] [ 1 ] #NEWLINE#
f . close ( ) #NEWLINE#
abs ( ( 10 ** 0.5 ) ** 2 - 10 ) < 1e-10 #NEWLINE#
jpy = web . get_data_fred ( 'DEXJPUS' ) #NEWLINE#
vals [ idx ] . tolist ( ) #NEWLINE#
build_tree ( source . split ( '\n' ) ) #NEWLINE#
def sum_digit ( n ) : #NEWLINE# #INDENT# return sum ( map ( int , str ( n ) ) ) #NEWLINE#
autoplay = lambda link : link + '&autoplay=1' #NEWLINE#
data . loc [ ( data [ 'x' ] <= 0 ) & ( preV > 0 ) & ( nexT > 0 ) , 'x' ] = ( preV + nexT ) / 2 #NEWLINE#
[ np . argmin ( a ) for a in A1 ] #NEWLINE#
logger . setLevel ( logging . WARNING ) #NEWLINE#
"""(?|(?:Rs\\.?|INR)\\s*(\\d+(?:[.,]\\d+)*)|(\\d+(?:[.,]\\d+)*)\\s*(?:Rs\\.?|INR))""" #NEWLINE#
oname . text #NEWLINE#
root . iconbitmap ( default = 'icon.ico' ) #NEWLINE#
stations = OrderedDict ( ( el , idx ) for idx , el in enumerate ( lines ) ) #NEWLINE#
ax . set_xticklabels ( ( 'G1' , 'G2' , 'G3' , 'G4' , 'G5' ) ) #NEWLINE#
ax . plot ( [ 0 , 0 ] , [ Y - 1 , Y - 1 ] , [ 0 , Z - 1 ] , 'k-' ) #NEWLINE#
f = gzip . open ( 'Onlyfinnaly.log.gz' , 'rb' ) #NEWLINE#
signal . signal ( signal . SIGUSR1 , handler ) #NEWLINE#
return np . sum ( np . dot ( xdiff , L_inv . T ) ** 2 , axis = 1 ) #NEWLINE#
close . setIcon ( QtGui . QIcon ( 'img/close.png' ) ) #NEWLINE#
cohesive ( { ( 1 , 2 ) , ( 1 , 4 ) , ( 2 , 2 ) , ( 0 , 3 ) , ( 0 , 4 ) } ) #NEWLINE#
re . sub ( '.' , lambda x : x . group ( ) * n , s ) #NEWLINE#
print ( '\n\n' ) #NEWLINE#
plt . subplot ( 212 ) #NEWLINE#
my_string . split ( ) [ : 5 ] #NEWLINE#
plt . axis ( 'image' ) #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
MyClass . __init__ ( a ) #NEWLINE#
cursor . execute ( sql , data ) #NEWLINE#
logentries = root . findall ( 'logentry' ) #NEWLINE#
process . delay ( 3 ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
img = Image . new ( '1' , ( 50 , 50 ) ) #NEWLINE#
thread . start ( ) #NEWLINE#
yuv_image = np . einsum ( 'kl,ijl->ijk' , transformation_matrix , rgb_image ) #NEWLINE#
~ str_name . str . contains ( 'c' ) #NEWLINE#
main ( ) #NEWLINE#
geoms . append ( p ) #NEWLINE#
img = np . zeros ( [ 100 , 100 , 3 ] , dtype = np . uint8 ) #NEWLINE#
'in' in [ 'in' , 'out' ] #NEWLINE#
raise SearchingError ( 'AlreadySearching' ) #NEWLINE#
np . argsort ( x , axis = 1 ) [ : , 0 : k ] #NEWLINE#
threads . setdefault ( row [ 2 ] , [ ] ) . append ( row ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
array ( [ [ 11 ] , [ 12 ] ] ) #NEWLINE#
df [ 'color' ] = df . Set . map ( lambda x : 'red' if x == 'Z' else 'green' ) #NEWLINE#
array ( [ [ 0 , 4 , 8 ] , [ 1 , 5 , 33 ] , [ 2 , 6 , 10 ] , [ 3 , 7 , 11 ] ] ) #NEWLINE#
plt . pause ( 1 ) #NEWLINE#
pd . rolling_mean ( data , window = 5 , center = True ) #NEWLINE#
main ( ) #NEWLINE#
[ x for x in tokenize ( txt ) ] #NEWLINE#
print ( d [ key ] ) #NEWLINE#
wordnet . synsets ( 'donations' ) #NEWLINE#
return redirect ( '/home/' ) #NEWLINE#
example4 ( np . arange ( 9 ) . reshape ( 3 , 3 ) ) #NEWLINE#
soup . prettify ( ) #NEWLINE#
array . insert ( 1 , 'brown' ) #NEWLINE#
df . drop ( idx ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSADRAIN , new ) #NEWLINE#
df . groupby ( [ df [ 'Date/Time' ] . dt . year , df [ 'Date/Time' ] . dt . hour ] ) . mean ( ) #NEWLINE#
print ( pkg_resources . require ( 'jwt' ) [ 0 ] . version ) #NEWLINE#
b = ( x ** 2 for x in a ) #NEWLINE#
import configparser #NEWLINE#
eb2 [ - 1 ] [ 0 ] . set_linestyle ( '-.' ) #NEWLINE#
x = x [ : 50 ] #NEWLINE#
lst . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
5 // 2 #NEWLINE#
class CakeAdmin ( admin . ModelAdmin ) : #NEWLINE# #INDENT# inlines = [ LinkedItemAdmin ] #NEWLINE#
results [ i ] . append ( benchmark ( i ) ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( 'OVERRIDE#SPACE#TWO' ) #NEWLINE#
yourlist . append ( yourdict . copy ( ) ) #NEWLINE#
np . array_split ( df , 3 ) #NEWLINE#
ent3 . grid ( row = 2 , column = 1 ) #NEWLINE#
mymod . foo ( ) #NEWLINE#
sys . stdout = open ( 'logfile.txt' , 'w' ) #NEWLINE#
print ( df [ [ 'Date' , 'A' , 'rolling_sum' ] ] ) #NEWLINE#
pylab . axis ( 'scaled' ) #NEWLINE#
self . socket . connect ( ( server_ip , server_port ) ) #NEWLINE#
sys . path . append ( '/your/dir/goes/here' ) #NEWLINE#
s . connect ( ( 'where#SPACE#ever#SPACE#you#SPACE#have#SPACE#your#SPACE#other#SPACE#computer' , 'port#SPACE#number' ) ) #NEWLINE#
threading . Thread ( target = listen_to_audio ) . start ( ) #NEWLINE#
parser . addoption ( '--foo' , action = 'store_true' , help = 'Do#SPACE#foo' ) #NEWLINE#
"""1""" #NEWLINE#
merge ( DataFrame ( tmp , index = [ 0 ] ) , data ) #NEWLINE#
plot ( X , CY , 'r--' ) #NEWLINE#
zip ( * lst ) [ 0 ] #NEWLINE#
tick_params ( labeltop = True , labelright = True ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
job = jobServer . <STR0> ( doRun , ( param , ) ) #NEWLINE#
plt . ylabel ( 'Phase#SPACE#(deg)' ) #NEWLINE#
client . load_system_host_keys ( ) #NEWLINE#
nx . relabel_nodes ( G , dict ( enumerate ( L ) ) , copy = False ) #NEWLINE#
return np . vstack ( [ get_col ( col ) for col in cols ] ) . T #NEWLINE#
gb . get_group ( 'foo' ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
a = np . array ( [ 0 , 0 , 0 , 0 , 0 , 0 ] ) #NEWLINE#
527 , 439 #NEWLINE#
XYZ . objects . extra ( select = { 'z' : 'x/y' } ) . order_by ( '-z' ) [ 0 ] #NEWLINE#
bbins = np . bincount ( b ) #NEWLINE#
ax3 . xaxis . set_visible ( False ) #NEWLINE#
sorted ( set ( val for row in content . values ( ) for val in row ) ) #NEWLINE#
datetime . strptime ( example , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
msg . attach ( part ) #NEWLINE#
xi , yi = np . meshgrid ( xi , yi ) #NEWLINE#
r = redis . Redis ( connection_pool = pool ) #NEWLINE#
pl . xlim ( 0 , df2 . shape [ 1 ] ) #NEWLINE#
from tkinter import * #NEWLINE#
QWidget . __init__ ( self ) #NEWLINE#
sel . click ( "xpath=//a[text()='Submit#SPACE#»')]" . encode ( 'utf8' ) ) #NEWLINE#
t . set_ha ( 'right' ) #NEWLINE#
raise ValueError ( 'matrix#SPACE#provided#SPACE#as#SPACE#y' ) #NEWLINE#
plt . show ( ) #NEWLINE#
split_xml ( 'wiki-files/tawiktionary-20110518-pages-articles.xml.bz2' ) #NEWLINE#
def swap32 ( i ) : #NEWLINE# #INDENT# return struct . unpack ( '<I' , struct . pack ( '>I' , i ) ) [ 0 ] #NEWLINE#
data = list ( datareader ) #NEWLINE#
plt . axhspan ( - 1 , 1 , color = 'b' , alpha = 0.2 ) #NEWLINE#
form = UserForm ( request . POST , user = request . user ) #NEWLINE#
pool . map ( process_url , list_of_urls ) #NEWLINE#
sum ( dict ( structure ) . values ( ) ) #NEWLINE#
driver . set_window_position ( 0 , 0 ) #NEWLINE#
[ ( 1 , 'A' , 'a' ) , ( 2 , 'B' , 'b' ) , ( 3 , 'C' , 'c' ) ] #NEWLINE#
sheet = book . sheet_by_index ( 0 ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
a = array . array ( 'i' , sorted ( a ) ) #NEWLINE#
x [ index3 ] #NEWLINE#
return np . unpackbits ( b ) [ : n ] . reshape ( shape ) . view ( np . bool ) #NEWLINE#
L . extend ( ( 3 , 4 , 5 ) ) #NEWLINE#
pixbf . save ( 'path.png' ) #NEWLINE#
all ( c in '01' for c in binary ) #NEWLINE#
copy . deepcopy ( ) #NEWLINE#
l . sort ( key = itemgetter ( 0 ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
( td / np . timedelta64 ( 1 , 'D' ) ) . astype ( int ) #NEWLINE#
'gist_ncar_r' , 'gist_yarg_r' , 'Dark2_r' , 'YlGnBu' , 'RdYlBu' , 'hot_r' #NEWLINE#
'gist_rainbow_r' , 'gist_stern' , 'gnuplot_r' , 'cool_r' , 'cool' , 'gray' #NEWLINE#
'copper_r' , 'Greens_r' , 'GnBu' , 'gist_ncar' , 'spring_r' , 'gist_rainbow' #NEWLINE#
'RdYlBu_r' , 'gist_heat_r' , 'OrRd_r' , 'bone' , 'gist_stern_r' , 'RdYlGn' #NEWLINE#
'prism_r' , 'Pastel2' , 'Pastel1_r' , 'Pastel1' , 'gray_r' , 'PuRd_r' #NEWLINE#
'gist_earth_r' , 'Set3_r' , 'OrRd' , 'PuBu_r' , 'ocean_r' , 'brg' #NEWLINE#
'gnuplot2' , 'jet' , 'bone_r' , 'gist_earth' , 'Oranges' , 'RdYlGn_r' #NEWLINE#
'PiYG' , 'YlGn' , 'binary_r' , 'gist_gray_r' , 'Accent' , 'BuPu_r' #NEWLINE#
'winter' , 'gnuplot' , 'pink_r' , 'prism' , 'YlOrBr' , 'rainbow_r' #NEWLINE#
'rainbow' , 'PiYG_r' , 'YlGn_r' , 'Blues_r' , 'YlOrBr_r' , 'seismic' #NEWLINE#
'PRGn' , 'gist_heat' , 'spectral_r' , 'Paired' , 'hsv' , 'Oranges_r' #NEWLINE#
os . startfile ( d ) #NEWLINE#
p . sub ( 'gray#SPACE#\\g<1>' , s ) #NEWLINE#
setup ( console = [ 'hello.py' ] ) #NEWLINE#
fake_module ( 'api' , 'class1' , 'class2' , 'func3' , 'exception4' ) . register ( ) #NEWLINE#
print ( '-%3s-' % 'abcd' ) #NEWLINE#
gcs_file . write ( buf . encode ( 'utf-8' ) ) #NEWLINE#
parser . add_argument ( '--foo' , type = int , default = 42 , help = 'FOO!' ) #NEWLINE#
pg . QtGui . QApplication . exec_ ( ) #NEWLINE#
f . write ( doc . toxml ( ) ) #NEWLINE#
ax1 . yaxis . set_major_locator ( matplotlib . ticker . LinearLocator ( nticks ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
s [ s . isin ( [ 'z' ] ) ] . empty #NEWLINE#
log . debug ( 'In#SPACE#myGlobalLog#SPACE#file' ) #NEWLINE#
python - config - - cflags #NEWLINE#
python - config - - ldflags #NEWLINE#
main ( ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
min_keys = [ k for k in d if all ( d [ m ] >= d [ k ] for m in d ) ] #NEWLINE#
result = [ obj for obj <STR0> listOfObjs if hasattr ( obj , 'attributeName' ) ] #NEWLINE#
print ( sysconfig . get_config_vars ( ) ) #NEWLINE#
print ( '{0:^50}' . format ( row ) ) #NEWLINE#
print ( zip ( * p ) ) #NEWLINE#
itertools . product ( universe , repeat = 2 ) #NEWLINE#
fig . suptitle ( 'concentration#SPACE#profile#SPACE#analysis' ) #NEWLINE#
{ ( 1 , 0 ) , ( 3 , 0 ) , ( 0 , 1 ) , ( 1 , 1 ) , ( 2 , 1 ) , ( 0 , 2 ) } #NEWLINE#
root . mainloop ( ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
sys . path . append ( os . path . basename ( os . path . dirname ( __file__ ) ) ) #NEWLINE#
list ( zip_longest ( * ( [ iter ( chain ( [ 0 ] , * liPos ) ) ] * 2 ) ) ) #NEWLINE#
match ( '{0},{0}' . format ( digit_letter_letter_digit ) , inputtext ) #NEWLINE#
im = Image . open ( '/home/cwgem/Pictures/portrait.png' ) #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
maxval = np . max ( a [ np . nonzero ( a ) ] ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
df = pd . read_csv ( yourdata , dtype = dtype_dic ) #NEWLINE#
plt . show ( ) #NEWLINE#
get_current_timezone ( ) . localize ( some_datetime , is_dst = False ) #NEWLINE#
df [ 'is_isolated' ] = df [ 'time_separation' ] > '00:00:00.08' #NEWLINE#
form_widget_args = { 'email' : { 'disabled' : True } } #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
db_table = '"schema"."tablename"' #NEWLINE#
for key , value in sorted ( list ( myDict . items ( ) ) , key = lambda e : e [ 1 ] [ 2 ] ) : #NEWLINE# #INDENT# pass #NEWLINE#
"""....#SPACE#{0:#SPACE#format_spec}#SPACE#....""" . format ( value ) #NEWLINE#
list ( insert_none ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) ) #NEWLINE#
gen . __code__ . co_name #NEWLINE#
IP ( '127.0.0.1' ) #NEWLINE#
df . columns = df . iloc [ 1 ] #NEWLINE#
from django . contrib . auth . models import User #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
session . add_all ( [ a , b ] ) #NEWLINE#
stores . groupby ( level = [ 0 , 1 , 2 , 3 ] ) . sum ( ) . unstack ( ) . reset_index ( ) . fillna ( 0 ) #NEWLINE#
Foo . __str__ is not object . __str__ #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
app . logger . setLevel ( logging . INFO ) #NEWLINE#
signal . signal ( signal . SIGUSR1 , debug ) #NEWLINE#
return HttpResponseRedirect ( url ) #NEWLINE#
workbook . save ( 'output.xls' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
stores [ 'region' ] = stores [ 'region' ] . apply ( lambda x : region_dictionary [ x ] ) #NEWLINE#
[ ( ( 157 , 5 ) , 4 ) , ( ( 217 , 23 ) , 5 ) , ( ( 706 , 6 ) , 6 ) , ( ( 729 , 1 ) , 7 ) ] #NEWLINE#
l = [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 ] #NEWLINE#
list ( product ( * iterables ) ) #NEWLINE#
parens . parseString ( '((a#SPACE#+#SPACE#b)#SPACE#+#SPACE#c)' ) #NEWLINE#
return render_template ( 'sample.html' , test = json . dumps ( test ) ) #NEWLINE#
"""Implements#SPACE#==.""" #NEWLINE#
parser . parse ( some_file ) #NEWLINE#
print ( max ( path . nodes , key = lambda item : item . y ) ) #NEWLINE#
requests . get ( url , cookies = load_cookies_from_lwp ( filename ) ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
driver = webdriver . PhantomJS ( 'phantomjs' ) #NEWLINE#
pickle . load ( file , encoding = 'bytes' ) #NEWLINE#
tf . matmul ( x , tf . transpose ( y ) ) #NEWLINE#
self . widget_name = None #NEWLINE#
plt . hist ( [ x1 , x2 , x3 ] , bins , stacked = True , normed = True ) #NEWLINE#
writer = csv . writer ( fout ) #NEWLINE#
self . someSignal . connect ( self . someSlot ) #NEWLINE#
Something . objects . filter ( x__in = [ 'a' , 'b' , 'c' ] ) . update ( a = 'something' ) #NEWLINE#
a2 . ravel ( ) [ : ] = m . reshape ( 2 , - 1 ) . T . tolist ( ) #NEWLINE#
print ( fringe8 ( ( 2 , 2 ) , ( 1 , 1 , 3 , 3 ) ) ) #NEWLINE#
app = webapp2 . WSGIApplication ( [ ( '/timit' , TestHandler ) ] , debug = True ) #NEWLINE#
np . where ( binplace == 1 ) #NEWLINE#
_OPENID_ENDPOINT = 'https://www.google.com/accounts/o8/ud' #NEWLINE#
pprint . pprint ( value ) #NEWLINE#
print ( [ list ( g [ 1 ] ) for g in groupby ( sorted ( l , key = len ) , len ) ] ) #NEWLINE#
instance = form . save ( commit = False ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
file = open ( 'example_filename.wtvr' , 'r' ) #NEWLINE#
Books . objects . filter ( q ) #NEWLINE#
max ( [ ( 1 , 2 ) , ( 1 , 2 , 3 ) , ( 1 , ) ] , key = len ) #NEWLINE#
random_number = random . random ( ) * 2 - 1 #NEWLINE#
return datetime . time ( 0 , 0 , 0 ) #NEWLINE#
print ( 'He#SPACE#loves' , m . group ( 1 ) ) #NEWLINE#
print ( 'Il#SPACE#aime' , m . group ( 1 ) ) #NEWLINE#
fig = plt . figure ( num = 1 , figsize = ( 13 , 13 ) , dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) #NEWLINE#
sys . path . append ( lib_path ) #NEWLINE#
super ( Room , self ) . save ( * args , ** kwargs ) #NEWLINE#
print ( my_list ) #NEWLINE#
menu . delete ( 0 , 'end' ) #NEWLINE#
ax . set_aspect ( 1 ) #NEWLINE#
input . close ( ) #NEWLINE#
np . einsum ( 'ij,jk->k' , a , b ) #NEWLINE#
p . terminate ( ) #NEWLINE#
np . eye ( 3 ) * M [ : , ( np . newaxis ) , : ] #NEWLINE#
re . match ( pattern , '1' * 11 ) #NEWLINE#
sympify ( 'diff(x**2#SPACE#+#SPACE#cos(x),#SPACE#x)' ) #NEWLINE#
10.63753055 , 11.82336724 , 7.93663794 , 8.74819285 , 8.07146236 #NEWLINE#
print ( '×©×\x9c×\x95×\x9d#SPACE#×¢×\x95×\x9c×\x9d' ) #NEWLINE#
format ( value , ',.2f' ) #NEWLINE#
print ( numpy . linalg . norm ( x ) ) #NEWLINE#
plt . close ( ) #NEWLINE#
myfunc ( * mylist ) #NEWLINE#
fig . show ( ) #NEWLINE#
fig . canvas . set_window_title ( 'My#SPACE#title' ) #NEWLINE#
<STR0> ( 'a' , globals ( ) , foo . __dict__ ) #NEWLINE#
output = process . communicate ( ) [ 0 ] #NEWLINE#
return dict ( ( d [ key ] , dict ( d , index = index ) ) for index , d in enumerate ( seq ) ) #NEWLINE#
int ( text_widget . index ( 'end' ) . split ( '.' ) [ 0 ] ) - 1 #NEWLINE#
nltk . stem . WordNetLemmatizer ( ) . lemmatize ( 'loving' , 'v' ) #NEWLINE#
plt . yscale ( 'log' , nonposy = 'clip' ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
df [ ~ df . col . str . get ( 0 ) . isin ( [ 't' , 'c' ] ) ] #NEWLINE#
f = sys . stdin #NEWLINE#
return input ( ) #NEWLINE#
import lxml . etree #NEWLINE#
struct . unpack ( 'f' , data ) #NEWLINE#
validate_email ( request . POST . get ( 'email' , '' ) ) #NEWLINE#
Znew = griddata ( Xmesh . flatten ( ) , Ymesh . flatten ( ) , Z . flatten ( ) , Xnew , Ynew ) #NEWLINE#
form . set ( 'color' , True , 2 ) #NEWLINE#
signed_angle = atan2 ( b . y , b . x ) - atan2 ( a . y , a . x ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
[ match [ 0 ] for match in re . findall ( '((\\w)\\2{2,})' , s ) ] #NEWLINE#
print ( find_all ( [ 1 , 5 , 3 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) ) #NEWLINE#
numpy . round ( [ 21.5295647 , 8.12531501 , 3.97113829 , 10.077725 ] , 2 ) #NEWLINE#
sys . stdout . write ( '%-6s#SPACE#%-50s#SPACE#%-25s\n' % ( code , name , industry ) ) #NEWLINE#
arr . insert ( 4 , 'D' ) #NEWLINE#
dis . dis ( lambda : i ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
{ k : int ( v ) for k , v in ( item . split ( '=' ) for item in s . split ( ',' ) ) } #NEWLINE#
blobs = BlobInfo . all ( ) . fetch ( 500 ) #NEWLINE#
first_elements , second_elements = zip ( * data ) #NEWLINE#
Features ( W - 2 ) , Features ( W - 1 ) , Features ( W0 ) , Features ( W1 ) , Features ( W2 ) #NEWLINE#
s = 'hola,#SPACE#que:#SPACE#tal.#SPACE#be' #NEWLINE#
return sorted ( [ i for i in lst if i > 0 ] ) + sorted ( [ i for i in lst if i < 0 ] ) #NEWLINE#
y = math . cos ( 1 * math . pi / 180 ) #NEWLINE#
{ ( 0 ) : [ 'id1' , 'id2' , 'id3' ] , ( 1 ) : [ 'id1' , 'id2' ] , ( 2 ) : [ 'id1' ] } #NEWLINE#
plt . show ( ) #NEWLINE#
result = '' . join ( [ i for i in s if not i . isdigit ( ) ] ) #NEWLINE#
number = int ( input ( ) ) #NEWLINE#
all_selected = bottle . request . forms . getall ( 'the_list' ) #NEWLINE#
'foo#SPACE#bab#SPACE#blub' , 'csdf#SPACE#hddf#SPACE#kjtz' , '123#SPACE#456#SPACE#890' , '321#SPACE#890#SPACE#456#SPACE#foo' #NEWLINE#
s = math . sqrt ( max ( radius * radius - i * i , 0.0 ) ) #NEWLINE#
print ( urllib . request . urlopen ( ipcheck_url ) . read ( ) ) #NEWLINE#
c . execute ( query ) #NEWLINE#
df [ 'Index' ] = df [ 'Index' ] . astype ( int ) #NEWLINE#
MY_CONSTANT = 'foo' #NEWLINE#
return list ( sorted ( a , key = lambda x : sortkeys [ x [ 'id' ] ] ) ) #NEWLINE#
xml_etree = ET . parse ( xml_filename , parser = parser ) #NEWLINE#
a = np . array ( [ 'True' , 'False' , 'True' , 'False' ] , dtype = object ) #NEWLINE#
c = [ 'Adi_{0}' . format ( s ) for s in a ] #NEWLINE#
f = open ( 'test.txt' , 'w' ) #NEWLINE#
cs . send ( c + 1 ) #NEWLINE#
'This#SPACE#is#SPACE#%(count)d#SPACE#%(txt)s#SPACE#example!' % d #NEWLINE#
timestamp . sort ( reverse = True ) #NEWLINE#
print ( 'Primary#SPACE#argument#SPACE#is#SPACE#:#SPACE#' , args [ 0 ] ) #NEWLINE#
self . configure ( background = 'white' ) #NEWLINE#
b = { 'one' : 1 , 'two' : 2 , 'three' : 3 } #NEWLINE#
print ( '%s:#SPACE#%s' % ( character , count ) ) #NEWLINE#
print ( match . group ( 'info_hash' ) ) #NEWLINE#
os . system ( 'ls#SPACE#-lh#SPACE#' + name ) #NEWLINE#
re . sub ( '[\\w]+' , '___' , str ( ',./hello-=+' , 'utf-8' ) , flags = re . UNICODE ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
p . <VAR0> . write ( 'my#SPACE#message\n' ) #NEWLINE#
bytearray ( content [ current_pos : final_pos ] , 'utf8' ) #NEWLINE#
ax . set_ylabel ( 'FROM' ) #NEWLINE#
ax . axvline ( 0 , color = 'k' , lw = 3 ) #NEWLINE#
Pad ( root ) . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
return base64 . b64encode ( stream . getvalue ( ) ) . decode ( ) #NEWLINE#
return super ( CommaSeparatedIntegerField , self ) . formfield ( ** defaults ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
out_file . write ( indata ) #NEWLINE#
print ( [ num for num in a if counts [ num ] > 1 ] ) #NEWLINE#
word [ i ] = '*' #NEWLINE#
"""WIU""" #NEWLINE#
"""GNU""" #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
[ np . where ( ( B == x ) . sum ( axis = 1 ) ) [ 0 ] for x in A ] #NEWLINE#
file . write ( line ) #NEWLINE#
main3 ( ) #NEWLINE#
d . update ( [ a , b , c ] ) #NEWLINE#
selected_array = my_array [ mask ] #NEWLINE#
i = __import__ ( 'matplotlib.text' , fromlist = [ '' ] ) #NEWLINE#
'@' + test_string . split ( '@' ) [ 1 ] #NEWLINE#
results = Orchard . objects . filter ( ** options ) #NEWLINE#
[ i for i in '[a-zA-ZÃ\x91Ã±]+' ] #NEWLINE#
msft = [ 432 , 23 , 234 , 54 , 23 ] #NEWLINE#
plt . show ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
( v1 == v2 ) . all ( ) #NEWLINE#
self . timer . start ( 10 ) #NEWLINE#
print ( self . cleaned_data [ 'select_to_change' ] ) #NEWLINE# print ( self . cleaned_data [ 'print_name' ] ) #NEWLINE#
df [ 'Age_Group' ] = '<40' #NEWLINE#
htmlspaced = html . replace ( '\r\n' , '#SPACE#' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
df [ 'Text' ] #NEWLINE#
self . response . out . write ( 'hi' ) #NEWLINE#
[ x for sublist in list_of_lists for x in sublist or [ '' ] ] #NEWLINE#
[ c for c in col_names if all ( [ ( f not in c ) for f in filter_array ] ) ] #NEWLINE#
env . Command ( 'document.tex' , '' , 'python#SPACE#table_generator.py' ) #NEWLINE# env . PDF ( 'document.pdf' , 'document.tex' ) #NEWLINE#
f . axes [ 5 ] . set_position ( [ 0.95 , 0.05 , 0.05 , 0.4 ] ) #NEWLINE#
tree = etree . parse ( 'some_file.xml' ) #NEWLINE#
df2 = df [ df . Group . isin ( groups ) ] #NEWLINE#
function ( ** options ) #NEWLINE#
print ( store_ctx . verify_certificate ( ) ) #NEWLINE#
session . query ( func . to_char ( Notification . create_time , '%Y-%m-%d#SPACE#%H:%M' ) ) #NEWLINE#
root . bind ( '<Map>' , decaption ) #NEWLINE#
data = np . genfromtxt ( filter_lines ( f , 8 ) , dtype = 'f' , usecols = ( 1 , 2 , 3 ) ) #NEWLINE#
out . shape #NEWLINE#
eventq . put ( 'Abort#SPACE#event' ) #NEWLINE#
[ [ 1 , 3 ] , [ 7 , 8 ] , [ 9 ] ] #NEWLINE#
clp . CloseClipboard ( ) #NEWLINE#
print ( '\n' . join ( '{:>10}' . format ( e ) for e in iter ( [ 1 , 2 , '1' , '2' , { ( 1 ) : '1' } ] ) ) #NEWLINE# ) #NEWLINE#
sub [ key ] = int ( sub [ key ] ) #NEWLINE#
jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( { 'f' : var3 , 'g' : var4 , 'h' : var5 } ) #NEWLINE# jsobj [ 'a' ] [ 'b' ] [ 'e' ] . append ( { 'f' : var6 , 'g' : var7 , 'h' : var8 } ) #NEWLINE#
self . crawler . install ( ) #NEWLINE#
np . count_nonzero ( A == B ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
pipe . communicate ( ) #NEWLINE#
return re . subn ( pattern , '' , thestring ) [ 1 ] #NEWLINE#
plt . imshow ( data . T ) #NEWLINE#
conn . close ( ) #NEWLINE#
'%s' % ( datetime . datetime . utcnow ( ) - datetime . timedelta ( hours = 11 ) ) . year #NEWLINE#
test = np . array ( [ 9 , 1 , 3 , 4 , 8 , 7 , 2 , 5 , 6 , 0 ] ) #NEWLINE#
cursor . execute ( 'SET#SPACE#NAMES#SPACE#utf8mb4;' ) #NEWLINE#
ax . plot_wireframe ( X , - Y , Z , rstride = 1 , cstride = 1 ) #NEWLINE#
df . shape [ 0 ] - df . dropna ( ) . shape [ 0 ] #NEWLINE#
raise ValueError ( 'Call#SPACE#the#SPACE#index()#SPACE#method#SPACE#before#SPACE#calling#SPACE#bulkwalk_index()' ) #NEWLINE#
proc1 = subprocess . Popen ( [ 'python' , 'mytest.py' ] ) #NEWLINE#
return str ( self . person ) #NEWLINE#
fstools . py #NEWLINE#
entry_list = [ entry . title . text for entry in feed . entry ] #NEWLINE#
"""{{#SPACE#var#SPACE#}}#SPACE#{{#SPACE#object.var#SPACE#}}#SPACE#{{#SPACE#func()}}#SPACE#{{#SPACE#object.function()#SPACE#}}#SPACE#{{#SPACE#a+b#SPACE#}}#SPACE#{{#SPACE#"string"#SPACE#}}#SPACE#{{#SPACE#"{{#SPACE#var#SPACE#}}"#SPACE#}}#SPACE#{{#SPACE#"function()"#SPACE#}}#SPACE#{{#SPACE#"a+b"#SPACE#}}""" #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
ax . set_ylim ( bot , top ) #NEWLINE#
subprocess . call ( shlex . split ( command ) ) #NEWLINE#
f = lambda x : 2 * x #NEWLINE#
os . waitpid ( cpid ) #NEWLINE#
SumLine . extend ( ast . literal_eval ( x ) ) #NEWLINE#
print ( list ( Counter ( L ) . items ( ) ) ) #NEWLINE#
b += struct . pack ( '@q' , l ) #NEWLINE#
x [ np . lexsort ( ( x [ : , ( 0 ) ] , x [ : , ( 1 ) ] ) ) ] #NEWLINE#
ctypes . windll . kernel32 . SetConsoleTitleW ( 'My#SPACE#New#SPACE#Title' ) #NEWLINE#
c . execute ( 'insert#SPACE#into#SPACE#foo#SPACE#values(?,#SPACE#?)' , ( 23 , datetime . datetime . now ( ) ) ) #NEWLINE#
ax . set_xlim ( x_min , x_max ) #NEWLINE#
self . bottom_frame . pack ( side = 'bottom' , fill = 'both' , expand = True ) #NEWLINE#
print ( u . encode ( 'utf-8' ) , file = open ( 'out' , 'w' ) ) #NEWLINE#
return 'Bottle(%r)' % self . msg #NEWLINE#
[ ( 3 , 10 ) , ( 4 , 10 ) , ( 4 , 7 ) , ( 5 , 7 ) , ( 5 , 5 ) ] #NEWLINE#
print ( cert . get_issuer ( ) . as_text ( ) ) #NEWLINE#
p . terminate ( ) #NEWLINE#
df [ 'T' ] . str . contains ( 'dog' ) [ : , ( None ) ] . dot ( pd . Index ( [ 'dog' ] ) ) #NEWLINE#
hrOut . write ( '0{}' . format ( i ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
st = 'abcdefghij' #NEWLINE# st = st [ : - 1 ] #NEWLINE#
ax . set_zlabel ( 'Z' ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
root . destroy ( ) #NEWLINE#
return self . f ( * args , ** kwargs ) #NEWLINE#
infile . close ( ) #NEWLINE#
return render_to_response ( 'template.htm' , { 'people' : people } ) #NEWLINE#
self . button . config ( state = 'active' ) #NEWLINE#
mymod . doSomething ( 'the#SPACE#var#SPACE#argument' ) #NEWLINE#
plt . plot ( x1 , y1 , linestyle = '-.' , linewidth = 0.5 , color = 'black' ) #NEWLINE#
self . graph , = self . ax . hexbin ( self . xData , self . yData ) #NEWLINE#
i += 1 #NEWLINE#
soup . find_all ( 'option' , selected = True ) #NEWLINE#
array ( [ [ 0 , 0 , 1 , 1 ] , [ 0 , 1 , 1 , 0 ] ] ) #NEWLINE#
result . append ( myDict ) #NEWLINE#
plt . draw ( ) #NEWLINE#
print ( f . vformat ( '{0}#SPACE#{2}' , [ 0 , 1 , 2 , 3 ] , { } ) ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
sys . stdout . write ( out ) #NEWLINE#
zip ( a [ 0 ] , a [ 1 ] ) #NEWLINE#
bool ( re . search ( '((\\w)\\2){2}' , 'zoo' ) ) #NEWLINE#
globals ( ) . update ( test . __dict__ ) #NEWLINE#
toggle_btn . config ( relief = 'sunken' ) #NEWLINE#
log . start ( ) #NEWLINE#
foo ( ) #NEWLINE#
np . ma . median ( y , axis = 0 ) . filled ( 0 ) #NEWLINE#
dict_of_lists = merge_with ( list , * csv . DictReader ( open ( f ) ) ) #NEWLINE#
pd . to_timedelta ( df . Duration . str . replace ( '\\.' , '' ) ) #NEWLINE#
"""#SPACE#""" . join ( w ) #NEWLINE#
html_list = self . driver . find_element_by_id ( 'myId' ) #NEWLINE#
with open ( 'eggs.bmp' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( data ) #NEWLINE#
msg = MIMEText ( 'body' ) #NEWLINE#
ax . set_xlabel ( 'TO' ) #NEWLINE#
[ 0 , 1 , 0 , 2 , 1 , 1 , 1 , 0 ] , #NEWLINE#
return object . __new__ ( cls , x ) #NEWLINE#
A . __getitem__ ( ( 1 , 2 ) ) #NEWLINE#
sandboxed ( ) #NEWLINE#
ax . plot_date ( x , y , markerfacecolor = 'CornflowerBlue' , markeredgecolor = 'white' ) #NEWLINE#
inspect . getargspec ( func ) #NEWLINE#
logging . info ( 'Access#SPACE#successful.' ) #NEWLINE#
df . groupby ( [ 'Name' , 'Type' , 'ID' ] ) . count ( ) . reset_index ( ) #NEWLINE#
return render_template ( 'index.html' , data = map ( json . dumps , data ) ) #NEWLINE#
return np . where ( np . in1d ( a , b ) ) [ 0 ] #NEWLINE#
df . groupby ( 'start_time_index' ) . agg ( 'sum' ) #NEWLINE#
x = np . arange ( 9.0 ) . reshape ( 3 , 3 ) #NEWLINE#
re . findall ( '\\d+|[a-zA-Z]+' , '10people5cars' ) #NEWLINE#
return max ( depth ( d [ k ] , level + 1 ) for k in d ) #NEWLINE#
Example ( root ) . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
result = [ _f for _f in map ( expensive , mylist ) if _f ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
results = cursor . fetchall ( ) #NEWLINE#
matplotlib . use ( 'TkAgg' ) #NEWLINE#
np . hstack ( ( 0 , a ) ) #NEWLINE#
response [ 'Location' ] = 'http://example.com/redirect/here/' #NEWLINE#
tpl = "<a#SPACE#href='mailto:%s'>%s</a>" #NEWLINE#
print ( r . cookies ) #NEWLINE#
x . append ( y ) #NEWLINE#
node_count = len ( db . nodes ) #NEWLINE#
list ( itertools . chain ( * a ) ) #NEWLINE#
sys . modules [ 'B' ] = __import__ ( 'mock_B' ) #NEWLINE#
socket . close ( ) #NEWLINE#
CELERY_ACCEPT_CONTENT = [ 'json' ] #NEWLINE#
plt . plot ( x , y , 'ro' ) #NEWLINE#
estimated_mu , estimated_sigma = stats . norm . fit ( logdata ) #NEWLINE#
print ( 'invalid#SPACE#utf-8' ) #NEWLINE#
mr_job = MRYourJob ( args = [ 'datalines.txt' ] ) #NEWLINE#
min ( [ val for obj in ids for key , val in list ( obj . items ( ) ) if key == 'id' ] ) #NEWLINE#
print ( request . session ) #NEWLINE#
re . findall ( '\\d+' , s ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
created_date = Column ( DateTime , default = datetime . datetime . utcnow ) #NEWLINE#
options , args = parser . parse_args ( ) #NEWLINE#
[ 'sed' , '-n' , '$=' , filename ] #NEWLINE#
f . close ( ) #NEWLINE#
print ( [ ( dotted [ n ] [ : - 1 ] + ( i , ) ) for s in signs for n , i in enumerate ( s ) ] ) #NEWLINE#
( '/' , 'index' , 'Index' ) , #NEWLINE#
result = df [ ( df . Sex == 'female' ) & ( df . Survived == False ) ] #NEWLINE#
pyglet . image . get_buffer_manager ( ) . get_color_buffer ( ) . save ( 'screenshot.png' ) #NEWLINE#
n , bins , patches = plt . hist ( x , histedges_equalN ( x , 10 ) , normed = True ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
<STR0> . append ( ( 3 , 'b' ) ) #NEWLINE#
<STR0> . append ( ( 3 , 'a' ) ) #NEWLINE#
[ 'square' , 'cube' ] #NEWLINE#
next ( g ) #NEWLINE#
[ ( s , l ) for l in lines3 for s in search_strings if s in l ] #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
translation [ 'data' ] [ 'translations' ] [ 0 ] [ 'translatedText' ] #NEWLINE#
print ( '%.15f' % val ) #NEWLINE#
list ( combinations ( '01' , 3 ) ) #NEWLINE#
data2 [ ( ) ] [ 'N' ] #NEWLINE#
return repr ( self . contained ) #NEWLINE#
return lines [ 0 ] + ( '...' if len ( lines ) > 1 else '' ) #NEWLINE#
web . show ( ) #NEWLINE#
df = pd . DataFrame ( { 'D0' : [ '0' , 'A' , 'B' , 'C' ] , 'D1' : [ 'B' , '0' , 'C' , 'D' ] , #NEWLINE# 'D2' : [ 'C' , 'D' , '0' , 'A' ] } ) #NEWLINE#
return hasattr ( obj , name ) and type ( getattr ( obj , name ) ) == types . MethodType #NEWLINE#
[ ( 7 , 8 , 9 , 10 ) , ( 0 , 1 , 2 , 3 , 4 , 5 ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
packages = [ 'distutils' , 'distutils.command' ] , #NEWLINE#
pool . terminate ( ) #NEWLINE#
time . sleep ( self . interval ) #NEWLINE#
fig . canvas . set_window_title ( 'Window#SPACE#3D' ) #NEWLINE#
numpy . rec . fromarrays ( [ x_dists , y_dists ] , names = 'x,y' ) #NEWLINE#
ftp . close ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
commandsandpaths = [ '{0}#SPACE#{1}' . format ( command , x ) for x in paths ] #NEWLINE#
ax . set_title ( 'colorMap' ) #NEWLINE#
browser . get ( 'http://www.ubuntu.com/' ) #NEWLINE#
ax [ 0 ] . set_aspect ( 'equal' ) #NEWLINE#
"""{0:#SPACE#<5}""" . format ( 'ssss' ) #NEWLINE#
allowed_domains = [ 'craigslist.org' ] #NEWLINE#
plt . tight_layout ( rect = [ 0.05 , 0.15 , 0.95 , 0.95 ] ) #NEWLINE#
hex ( x ) [ 2 : ] #NEWLINE#
matplotlib . get_backend ( ) #NEWLINE#
plt . draw ( ) #NEWLINE#
unittest . TextTestRunner ( ) . run ( suite ) #NEWLINE#
ttk . Label ( mf , text = 'feet' ) . grid ( column = 3 , row = 1 , sticky = W ) #NEWLINE#
p = Pool ( 5 ) #NEWLINE#
print ( '' . join ( [ etree . tostring ( child ) for child in element ] ) ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
pygame . mixer . init ( ) #NEWLINE#
struct . pack ( '>3b' , 0 , 0 , 1 ) #NEWLINE#
plt . fill_between ( x , y3 , y4 , color = 'grey' , alpha = '0.5' ) #NEWLINE#
results = search . Index ( name = 'item_autocomplete' ) . search ( 'name:elo' ) #NEWLINE#
bytearray ( os . urandom ( 1000000 ) ) #NEWLINE#
objs = [ MyClass ( ) for i in range ( 10 ) ] #NEWLINE#
server . serve_forever ( ) #NEWLINE#
db . define_table ( 'dogs' , Field ( 'dog_name' , 'string' ) ) #NEWLINE#
{ ( 8 ) : 'morning' , ( 16 ) : 'evening' , ( 12 ) : 'afternoon' , ( 20 ) : 'night' } #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( 1 , len ( s ) + 1 ) ) #NEWLINE#
np . diag ( np . dot ( np . dot ( a , b ) , a . T ) ) #NEWLINE#
print ( list ( itertools . permutations ( [ 1 , 2 , 3 , 4 ] , 2 ) ) ) #NEWLINE# [ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 2 , 1 ) , ( 2 , 3 ) , ( 2 , 4 ) , ( 3 , 1 ) , ( 3 , 2 ) , ( 3 , 4 ) , ( 4 , #NEWLINE# 1 ) , ( 4 , 2 ) , ( 4 , 3 ) ] #NEWLINE#
wrapper_object . blink ( ) #NEWLINE#
np . issubdtype ( df [ 'C' ] . dtype , np . number ) #NEWLINE#
np . issubdtype ( df [ 'D' ] . dtype , np . number ) #NEWLINE#
rsa = M2Crypto . RSA . load_pub_key ( pk ) #NEWLINE#
logger2 . info ( 'this#SPACE#will#SPACE#be#SPACE#logged#SPACE#to#SPACE#file_1#SPACE#AND#SPACE#file_2#SPACE#' ) #NEWLINE#
self . progress . pack ( ) #NEWLINE#
self . output . append ( data ) #NEWLINE#
lst [ 0 ] . append ( 1 ) #NEWLINE#
setup ( name = 'WowPackage' , packages = [ '.' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ ( k , len ( d [ k ] ) ) for k in sorted ( d . keys ( ) ) ] ) #NEWLINE#
print ( x . apply ( lambda y : list ( filter ( np . isfinite , y ) ) ) ) #NEWLINE#
beta2 = ( df . corr ( ) * df [ 'b' ] . std ( ) * df [ 'a' ] . std ( ) / df [ 'a' ] . var ( ) ) . ix [ 0 , 1 ] #NEWLINE#
conn = imaplib . IMAP4_SSL ( 'imap.gmail.com' , 993 ) #NEWLINE#
dict ( enumerate ( meta [ 0 ] [ 'ml_attr' ] [ 'vals' ] ) ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#Writers#SPACE#LIMIT#SPACE#4' ) #NEWLINE#
FH = np . loadtxt ( lines , delimiter = ',' , skiprows = 1 ) #NEWLINE#
repeated_items = [ list ( row [ 1 ] * row [ 2 ] ) for row in df . itertuples ( ) ] #NEWLINE#
run ( host = 'localhost' , port = 8090 ) #NEWLINE#
print ( match . group ( 3 ) ) #NEWLINE#
print ( '#SPACE#' . join ( [ line . strip ( ) for line in sql . splitlines ( ) ] ) . strip ( ) ) #NEWLINE#
if re . match ( '^[0-9#SPACE#]+$' , myString ) : #NEWLINE# #INDENT# pass #NEWLINE#
sorted ( list ( dct . items ( ) ) , key = lambda p : p [ 1 ] , reverse = True ) #NEWLINE#
return [ slice ( * map ( int , x . split ( ':' ) ) ) for x in s . split ( ',' ) ] #NEWLINE#
os . dup2 ( cat . stdin . fileno ( ) , sys . stderr . fileno ( ) ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
print ( 'partition#SPACE#=#SPACE#%s,#SPACE#offset#SPACE#=#SPACE#%s' % ( r . partition , r . offsets [ 0 ] ) ) #NEWLINE#
setattr ( self , 'newString' , self ) #NEWLINE#
min ( data , key = lambda t : t [ 1 ] ) #NEWLINE#
print ( tuple ( [ k ] + [ v for d in L for v in list ( d . values ( ) ) ] ) ) #NEWLINE#
stdin . write ( 'lol\n' ) #NEWLINE#
'B2C3' , 'B2D3' , 'B3A1' , 'B3B1' , 'B3C1' , 'B3D1' , 'C1A2' , 'C1B2' , 'C1C2' #NEWLINE#
'C1D2' , 'C2A3' , 'C2B3' , 'C2C3' , 'C2D3' , 'C3A1' , 'C3B1' , 'C3C1' , 'C3D1' #NEWLINE#
'D1A2' , 'D1B2' , 'D1C2' , 'D1D2' , 'D2A3' , 'D2B3' , 'D2C3' , 'D2D3' , 'D3A1' #NEWLINE#
super ( Child , self ) . __init__ ( ) #NEWLINE#
f . write ( bytes ( int ( x , 0 ) for x in L ) ) #NEWLINE#
my_tuple [ isinstance ( x , str ) ] . append ( x ) #NEWLINE#
list ( zip_longest ( * lis , fillvalue = '' ) ) #NEWLINE#
with open ( 'net_deploy.prototxt' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( str ( custom_net ( None , None ) ) ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
x = struct . unpack ( '6s' * 21 , filecontent [ : 126 ] ) #NEWLINE#
ax . bar3d ( xpos [ 8 : ] , ypos [ 8 : ] , zpos [ 8 : ] , dx , dy , dz , color = 'r' , zsort = 'average' ) #NEWLINE#
config . set_string ( '-allphone' , path . join ( MODELDIR , 'en-us/en-us-phone.lm.dmp' ) ) #NEWLINE#
self . window . set_default_size ( self . width , self . height ) #NEWLINE#
ser . write ( 'hello' ) #NEWLINE#
new_df = df . merge ( unique , left_index = True , right_on = 'index' ) #NEWLINE#
a [ len ( a ) ] #NEWLINE#
df [ ~ df . isnull ( ) . all ( axis = 1 ) ] #NEWLINE#
os . system ( 'openssl#SPACE#verify#SPACE#-CAfile#SPACE#../ca-cert.pem#SPACE#bob.cert' ) #NEWLINE#
"""#SPACE#""" . join ( names ) #NEWLINE#
event_box . set_events ( gtk . gdk . BUTTON_PRESS_MASK ) #NEWLINE#
config = Configurator ( settings = { 'mako.directories' : [ 'house:templates' ] } ) #NEWLINE#
d_keys = d . keys ( ) - { 'inside' } #NEWLINE#
plt . tight_layout ( ) #NEWLINE#

rolling_sum ( df . resample ( 'D' ) . sum ( ) . fillna ( 0 ) ) #NEWLINE#
list2 = [ dict2 [ k ] for k in commons ] #NEWLINE#
smtpObj . sendmail ( sender , receivers , message ) #NEWLINE#
hex_list = [ '{:02x}' . format ( ord ( c ) ) for c in s ] #NEWLINE#
print ( is_json ( '{}' ) ) #NEWLINE#
[ 36.0 , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 2.0 , 1.0 ] #NEWLINE#
return f . read ( ) #NEWLINE#
np . array ( [ np . NaN ] * ( n - 1 ) + [ np . sum ( a [ j : j + n ] ) for j in range ( N - n + 1 ) ] ) #NEWLINE#
top . mainloop ( ) #NEWLINE#
el . setAttribute ( 'xmlns' , 'http://example.net/ns' ) #NEWLINE#
foo ( 1 , 2 , 3 , 4 , 5 ) #NEWLINE#
( 'OFC' , '#SPACE##SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Received' , '#SPACE#11/6/2012#SPACE#1:34:06#SPACE#AM\n' ) , #NEWLINE#
( 'Disp' , '#SPACE#PCHK#SPACE##SPACE#' ) , #NEWLINE#
( 'Location' , '#SPACE#CLEAR#SPACE#LAKE#SPACE#RD&GREEN#SPACE#HILL#SPACE#RD\n' ) , #NEWLINE#
( 'Event#SPACE#Number' , '#SPACE#LLS121106060941#SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'ID' , '#SPACE#60941#SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Priority' , '#SPACE#6#SPACE#' ) , #NEWLINE#
( 'Incident#SPACE#Desc' , '#SPACE#Theft#SPACE##SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Received' , '#SPACE#11/6/2012#SPACE#1:43:35#SPACE#AM\n' ) , #NEWLINE#
( 'Disp' , '#SPACE#CSR#SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Location' , '#SPACE#SCH#SPACE#BLACHLY\n' ) , #NEWLINE#
( 'Event#SPACE#Number' , '#SPACE#LLS121106060943#SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'ID' , '#SPACE#60943#SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Priority' , '#SPACE#4#SPACE#' ) , #NEWLINE#
( 'Incident#SPACE#Desc' , '#SPACE#Suspicious#SPACE#Vehicle(s)#SPACE##SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'OFC' , '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Received' , '#SPACE#11/6/2012#SPACE#1:47:47#SPACE#AM\n' ) , #NEWLINE#
( 'Disp' , '#SPACE#FI#SPACE##SPACE##SPACE##SPACE#' ) , #NEWLINE#
( 'Location' , '#SPACE#KIRK#SPACE#RD&CLEAR#SPACE#LAKE#SPACE#RD\n' ) , #NEWLINE#
( 'Event#SPACE#Number' , '#SPACE#LLS121106060944#SPACE##SPACE##SPACE#' ) , #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
ax . set_yticklabels ( ( 'Tom' , 'Dick' , 'Harry' , 'Slim' , 'Jim' ) ) #NEWLINE#
url = urlparse . urlparse ( address ) #NEWLINE# subdomain = url . hostname . split ( '.' ) [ 0 ] #NEWLINE#
timeit . timeit ( 'function(x)' , setup = 'from#SPACE#__main__#SPACE#import#SPACE#function,#SPACE#x' ) #NEWLINE#
tt = t . reshape ( - 1 ) #NEWLINE#
stats = df . describe ( ) #NEWLINE#
main ( ) #NEWLINE#
mhl = { 'm' : np . mean , 'h' : np . max , 'l' : np . min } #NEWLINE#
a = np . array ( [ 'hello' , 'how' , 'are' , 'you' ] ) #NEWLINE#
img = Image . open ( BytesIO ( response . content ) ) #NEWLINE#
[ int ( elem ) for elem in testList ] #NEWLINE#
cv2 . imshow ( 'view' , view ) #NEWLINE#
ordered = [ lst [ 1 ] , lst [ 2 ] , lst [ 0 ] , lst [ 3 ] ] #NEWLINE#
""":""" . join ( a + b for a , b in zip ( * ( [ iter ( s ) ] * 2 ) ) ) #NEWLINE#
[ functools . reduce ( dict . __getitem__ , keys , d [ i ] ) for i in d ] #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . time #NEWLINE#
print ( json . dumps ( { '4' : 5 , '6' : 7 } , sort_keys = True , indent = 4 ) ) #NEWLINE#
plt . scatter ( x , y , s = lwidths , color = 'blue' ) #NEWLINE#
root = tree . parse ( 'assets.xml' ) #NEWLINE#
ax . yaxis . grid ( linestyle = '-' , color = 'gray' ) #NEWLINE#
diags . sum ( axis = 1 ) #NEWLINE#
db = pymssql . connect ( host = 'SomeDB' , user = 'www' , password = 'cylon' , database = #NEWLINE# 'TestDB' ) #NEWLINE#
s . bind ( ( 'localhost' , 9988 ) ) #NEWLINE#
MySQLdb . connect ( server , username , password , database , local_infile = 1 ) #NEWLINE#
m . groups ( ) [ 0 ] . strip ( ) #NEWLINE#
print ( '#SPACE#' . join ( item for item in result if not isinstance ( item , list ) ) ) #NEWLINE#
input_file . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
data = serializers . serialize ( 'json' , objectQuerySet , fields = ( 'fileName' , 'id' ) ) #NEWLINE#
conn . execute ( 'VACUUM' ) #NEWLINE#
browser . get ( input ( 'Enter#SPACE#URL:#SPACE#' ) ) #NEWLINE#
ax . set_xticklabels ( ( '2011-Jan-4' , '2011-Jan-5' , '2011-Jan-6' ) ) #NEWLINE#
r . match ( 'April#SPACE#31,#SPACE#1908' ) is not None #NEWLINE#
i . to_sql ( 'Stat_Table' , engine , if_exists = 'replace' ) #NEWLINE#
raise ValueError ( name + '#SPACE#must#SPACE#be#SPACE#positive' ) #NEWLINE#
bin = '{0:0{1}b}' . format ( r , self . n ) #NEWLINE#
CELERY_IMPORTS = 'testapp.tasks' , #NEWLINE#
a = np . arange ( 1000000 , dtype = 'int64' ) . reshape ( 1000 , 1000 ) #NEWLINE#
[ myFunc ( p , additionalArgument ) for p in pages ] #NEWLINE#
dateutil . parser . parse ( '20080903T205635.450686' ) #NEWLINE#
dateutil . parser . parse ( '2008-09-03T20:56:35.450686Z' ) #NEWLINE#
inspect . ismethod ( d . __setitem__ ) #NEWLINE#
r = re . compile ( '(?P<cmd>foo|bar|baz)(?P<data>.+)' ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = np . arange ( 100 ) . reshape ( 2 , 50 ) #NEWLINE#
a = np . array ( [ [ 12 , 12 , 111 ] , [ np . inf , np . inf , 1 , 2 , 3 ] , [ np . nan , 7 , 8 ] ] ) #NEWLINE#
d = json . loads ( s ) #NEWLINE#
l2 = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] , [ 5 , 6 ] , [ 1 , 2 ] ] #NEWLINE#
x_new = x [ np . sum ( x , axis = 1 ) > 0.5 ] #NEWLINE#
int ( '' . join ( itertools . takewhile ( str . isdigit , '10pizzas' ) ) ) #NEWLINE#
logger = logging . getLogger ( 'test' ) #NEWLINE#
results_df = pd . concat ( results ) #NEWLINE#
[ [ 'a' , 'c' , 'b' ] , [ 'a' , 'c' , 'b' ] , [ 'a' , 'c' , 'b' ] ] #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
a , b = divmod ( a , 1 ) #NEWLINE#
p . terminate ( ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
- 20.9227157774 - 20.9227157774 - 20.953279177 #NEWLINE#
- 51.2328030138 - 42.8335117509 - 62.2730163502 #NEWLINE#
a = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
lists [ 1 ] . append ( url ) #NEWLINE#
irn = '' . join ( [ repr ( num ) for num in range ( loop_count ) ] ) #NEWLINE#
np . random . shuffle ( a ) #NEWLINE#
np . random . uniform ( - 10 , 10 , size = ( 2 , 3 ) ) #NEWLINE#
print ( ( '2#SPACE#+#SPACE#' , integer , '#SPACE#=#SPACE#' , rslt ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
Job . fetch ( job_id , connection = conn ) #NEWLINE#
reader = csv . DictReader ( open ( 'test.csv' ) ) #NEWLINE#
return HttpResponse ( status = 500 ) #NEWLINE#
print ( list ( map ( int , '' . join ( map ( str , list1 ) ) ) ) ) #NEWLINE#
print ( s , len ( s ) ) #NEWLINE#
self . SetClientSize ( ( self . bmp . GetWidth ( ) , self . bmp . GetHeight ( ) ) ) #NEWLINE#
foo . wait ( ) #NEWLINE#
file = io . open ( 'spam.txt' , 'a' ) #NEWLINE#
f . write ( '{:03d}#SPACE#{}\n' . format ( index , line ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
id = models . CharField ( max_length = 255 , default = create_id ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
return [ sequence [ i : i + n ] for i in range ( 0 , len ( sequence ) , n ) ] #NEWLINE#
x = np . linspace ( 0 , 1 , 20 ) #NEWLINE#
main ( ) #NEWLINE#
axthresh . imshow ( binimg , interpolation = 'nearest' , cmap = 'Greys' ) #NEWLINE#
plt . savefig ( 'first.ps' ) #NEWLINE#
print ( 'She#SPACE#lives#SPACE#with#SPACE#' + foo + '#SPACE#small#SPACE#men' ) #NEWLINE#
matrix_b [ 0 , 0 ] = np . matrix ( [ [ 0 ] , [ 0 ] , [ 1 ] ] ) #NEWLINE#
subprocess . Popen ( [ 'open' , path ] ) #NEWLINE#
print ( 'Main' ) #NEWLINE#
s = '012345' #NEWLINE# [ s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ] #NEWLINE#
QtGui . QMainWindow . __init__ ( self ) #NEWLINE#
array_proxy ( ) #NEWLINE#
reference2 = models . ManyToManyField ( OtherModel , related_name = 'ref2' ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
os . kill ( int ( pid ) , signal . SIGTERM ) #NEWLINE#
"""P:\\70_parseFile\\80_FileDir\\60_FA_050""" #NEWLINE#
sess . run ( tf . initialize_variables ( set ( tf . all_variables ( ) ) - temp ) ) #NEWLINE#
bitlist_to_s ( s_to_bitlist ( 'Hi' ) ) #NEWLINE#
print ( ET . tostring ( dom ) ) #NEWLINE#
parser . add_argument ( 'other' , nargs = '+' , help = 'the#SPACE#other#SPACE#files' ) #NEWLINE#
set ( 'fooled' ) #NEWLINE#
main ( ) #NEWLINE#
data . groupby ( 'col1' ) . agg ( { 'col2' : [ max , min ] , 'col3' : [ min , 'count' ] } ) #NEWLINE#
f . replace ( '\ufeff' , '' ) #NEWLINE#
signal . signal ( signal . SIGUSR2 , lambda sig , frame : code . interact ( ) ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
ax . scatter ( X [ : , ( 0 ) ] , X [ : , ( 1 ) ] , s = s ) #NEWLINE#
ylabel ( 'Damped#SPACE#oscillation' ) #NEWLINE#
print ( 'Saving' ) #NEWLINE#
print ( 'Nothing#SPACE#new.' ) #NEWLINE#
print ( 'Server#SPACE#did#SPACE#not#SPACE#provide#SPACE#a#SPACE#last-modified#SPACE#property.#SPACE#Continuing...' ) #NEWLINE#
urllib . request . urlopen ( some_url , proxies = None ) #NEWLINE#
a = json . loads ( '{"X":"value1","Y":"value2","Z":[{"A":"value3","B":"value4"}]}' ) #NEWLINE#
os . path . realpath ( '/usr/bin/../../..' ) #NEWLINE#
"""Determines,#SPACE#if#SPACE#string#SPACE#is#SPACE#valid#SPACE#Python#SPACE#identifier.""" #NEWLINE#
plt . show ( ) #NEWLINE#
foo ( call_back1 , K_combinator ( <STR0> , 'name_for_logging' ) ) #NEWLINE#
xs = [ [ '1' , '2' , '4' , '6' ] , [ '7' , '0' , '1' , '4' ] , [ [ '0' , '1' , '1' ] , [ '1' ] ] ] #NEWLINE# print ( list ( get_positions ( xs , '1' ) ) ) #NEWLINE#
result = re . match ( 'A' , str ) #NEWLINE#
self . a = a #NEWLINE#
[ np . bincount ( xs , minlength = 10 ) for xs in itertools . combinations ( list ( range ( #NEWLINE# 10 ) ) , 2 ) ] #NEWLINE#
numpy . linalg . norm ( A - B ) #NEWLINE#
plt . subplots_adjust ( 0 , 0 , 1 , 1 , 0 , 0 ) #NEWLINE#
self . driver . close ( ) #NEWLINE#
max ( lengths ( l ) ) #NEWLINE#
with open ( 'data.txt' ) as f : #NEWLINE# #INDENT# pass #NEWLINE#
x = { i : set ( ) for i in range ( 10 ) } #NEWLINE#
open ( 'foo.xml' , buffering = ( 2 << 16 ) + 8 ) #NEWLINE#
print ( line ) #NEWLINE#
return args [ - 1 ] + mySum ( * args [ : - 1 ] ) #NEWLINE#
myDict [ name ] #NEWLINE#
len ( s ) #NEWLINE#
arr = numpy . array ( [ ( base + datetime . timedelta ( hours = i ) ) for i in range ( 24 ) ] ) #NEWLINE#
fig = plt . figure ( 1 ) #NEWLINE#
df . replace ( to_remove , np . nan , inplace = True ) #NEWLINE#
data . sort ( ) #NEWLINE#
parser . add_argument ( '--input' , default = 'My#SPACE#Input' ) #NEWLINE#
parser . add_argument ( 'filename' , default = 'some_file.txt' ) #NEWLINE#
l . insert ( 0 , '^' ) #NEWLINE#
my_list = [ 1 , 2 , 3 , 4 ] #NEWLINE#
np . allclose ( z , np . einsum ( 'kl,ijl->ijk' , transformation_matrix , rgb_image ) ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 1 , 6 , 1 ] ) #NEWLINE# print ( np . where ( a == a . min ( ) ) ) #NEWLINE#
255 , 255 , 255 #NEWLINE#
ax2 . set_xlim ( ax1 . get_xlim ( ) ) #NEWLINE#
BAZ = { [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] } #NEWLINE#
p . write ( '#SPACE#' . join ( [ ( '%.10f' % k ) for k in x ] ) + os . linesep ) #NEWLINE#
plt . title ( 'cos(x)' ) #NEWLINE#
plt . title ( 'sin(x)*cos(x)' ) #NEWLINE#
self . calendar . pack ( ) #NEWLINE#
return some_list [ : target_len ] + [ 0 ] * ( target_len - len ( some_list ) ) #NEWLINE#
ax2 . plot ( x2 , x2 , alpha = 0 ) #NEWLINE#
TEMPLATES = [ { 'OPTIONS' : { 'debug' : DEBUG } } ] #NEWLINE#
ser . write ( 'foo' ) #NEWLINE#
sheet = wb . sheet_by_name ( '1' ) #NEWLINE#
a [ a . index ( '(' ) + 1 : a . rindex ( ')' ) ] #NEWLINE#
a = str ( datetime . now ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return object . __repr__ ( self ) #NEWLINE#
sys . path . append ( 'E:\\Work\\spark\\installtion\\spark\\python' ) #NEWLINE#
return max ( len ( str1 ) , len ( str2 ) ) #NEWLINE#
arr = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) . reshape ( - 1 , 1 ) #NEWLINE#
sys . path . append ( '../' ) #NEWLINE#
dtest = np . array ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) , dtype = 'uint8' ) #NEWLINE#
plt . imshow ( zoomed , interpolation = 'nearest' ) #NEWLINE#
lesk ( 'My#SPACE#cat#SPACE#likes#SPACE#to#SPACE#eat#SPACE#mice.' , 'cat' , 'n' ) #NEWLINE#
print ( 'SSH#SPACE#session#SPACE#login#SPACE#successful' ) #NEWLINE#
t . start ( ) #NEWLINE#
print ( func_name ) #NEWLINE#
plt . contour ( xi , yi , zi , con_levels , linewidths = 1 ) #NEWLINE#
with open ( 'my_file.txt' ) as f : #NEWLINE# #INDENT# my_list = json . load ( f ) #NEWLINE#
cv2 . circle ( cimg , ( i [ 0 ] , i [ 1 ] ) , i [ 2 ] , ( 0 , 255 , 0 ) , 2 ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
[ var_1 ] #NEWLINE#
result = map ( f , [ x , y , z ] ) #NEWLINE#
utc_dt = local_dt . astimezone ( pytz . utc ) #NEWLINE#
plt . plot ( xs [ s2mask ] , series2 [ s2mask ] , linestyle = '-' , marker = 'o' ) #NEWLINE#
12.99365833 , 11.06817056 , 17.29261306 , 15.31288556 , 19.16236667 #NEWLINE#
10.38483333 , 14.51442222 , 17.01413611 , 6.96102278 , 15.98508611 #NEWLINE#
16.5287 , 15.26533889 , 20.83520278 , 17.21952056 , 7.3225775 #NEWLINE#
df = pd . concat ( [ df1 , df2 ] , ignore_index = True ) #NEWLINE#
axcut . set_visible ( True ) #NEWLINE#
mydriver = webdriver . Firefox ( ) #NEWLINE#
table = soup . find ( 'table' , { 'class' : 'details' } ) #NEWLINE#
[ [ [ 'a' , [ [ 'c' ] , 'b' ] ] , [ 'd' ] , 'e' ] ] #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
file_out . write ( line ) #NEWLINE#
self . assertNotIn ( 'bcd' , 'abcde' ) #NEWLINE#
json . loads ( page_detail_string ) #NEWLINE#
y [ 'f0' ] = np . arange ( 6.0 ) . reshape ( 3 , 2 ) #NEWLINE#
sys . __stdin__ = dummyStream ( ) #NEWLINE#
ax . clear ( ) #NEWLINE#
nan in np . array ( [ nan ] ) #NEWLINE#
sys . stdin = open ( 'input.in' , 'r' ) #NEWLINE#
dollars_dec = Decimal ( dollars . strip ( '$' ) ) #NEWLINE#
list1 . append ( i ) #NEWLINE#
img = cv2 . imread ( 'img.png' ) #NEWLINE#
self . data . append ( data ) #NEWLINE#
del df [ 'Seatblocks' ] #NEWLINE#
activate_this = '/path/to/env/bin/activate_this.py' #NEWLINE#
set ( b . items ( ) ) ^ set ( a . items ( ) ) #NEWLINE#
driver . set_script_timeout ( 30 ) #NEWLINE#
print ( response . status , response . reason ) #NEWLINE#
s . dt . to_pydatetime ( ) #NEWLINE#
print ( soup . find ( 'strong' , text = 'some#SPACE#value' ) == soup . find ( 'strong' ) ) #NEWLINE#
v = float ( s ) if '.' in s or 'e' in s . lower ( ) else int ( s ) #NEWLINE#
dictionary [ round ( a , 4 ) ] #NEWLINE#
ax . set_ylabel ( 'Scores' ) #NEWLINE#
meta . create_all ( ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
data [ data [ data [ : , ( 0 ) ] == 0 , 1 ] == 0 ] #NEWLINE#
fig . savefig ( 'findInliers.png' ) #NEWLINE#
f . close ( ) #NEWLINE#
br . open ( 'http://pypi.python.org/pypi/xlwt' ) #NEWLINE#
df2 . fillna ( 0 , inplace = True ) #NEWLINE#
'^(\\d{5}),#SPACE#[^,]+,#SPACE#(\\d{8}),#SPACE#(\\d{4}),#SPACE#[^,]+,#SPACE#[^,]+,' + 37 * '#SPACE#([^,]+),' + '#SPACE#([^,]+)$' #NEWLINE#
dill . pickles ( f ) #NEWLINE#
strings = 'foo,#SPACE#bar,#SPACE#apple' . split ( ',#SPACE#' ) #NEWLINE#
path = 'C:\\Users\\mememe\\Google#SPACE#Drive\\Programs\\Python\\file.csv' #NEWLINE#
ws = wb . add_sheet ( 'Pi' ) #NEWLINE#
list ( set ( a ) - set ( b ) ) #NEWLINE#
rdd = df . rdd . map ( tuple ) #NEWLINE#
return all ( [ ( len ( i ) == len ( set ( i ) ) ) for i in zipt ] ) #NEWLINE#
stock_vals [ stock_name ] [ day_index ] #NEWLINE#
myDict = dict ( list ( element . attributes . items ( ) ) ) #NEWLINE#
appname = get_application_id ( ) #NEWLINE#
'ABå\x88¶' , 'ABå\x88¶' , 'A#SPACE#B#SPACE#zhi4' , 'to#SPACE#split#SPACE#the#SPACE#bill#SPACE#(where#SPACE#the#SPACE#male#SPACE#counterpart#SPACE#foots#SPACE#the#SPACE#larger#SPACE#portion#SPACE#of#SPACE#the#SPACE#sum)/(theater)#SPACE#a#SPACE#system#SPACE#where#SPACE#two#SPACE#actors#SPACE#take#SPACE#turns#SPACE#in#SPACE#acting#SPACE#the#SPACE#main#SPACE#role,#SPACE#with#SPACE#one#SPACE#actor#SPACE#replacing#SPACE#the#SPACE#other#SPACE#if#SPACE#either#SPACE#is#SPACE#unavailable' #NEWLINE#
'Aå\x92\x96' , 'Aå\x92\x96' , 'A#SPACE#ka1' , 'class#SPACE#"A"/top#SPACE#grade' #NEWLINE#
'Aå\x9c\x88å\x85\x92' , 'Aå\x9c\x88å\x84¿' , 'A#SPACE#quan1#SPACE#r5' , 'at#SPACE#symbol,#SPACE#@' #NEWLINE#
{ 'lst_{}' . format ( i ) : [ ] for i in x } #NEWLINE#
super ( ModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
cs = m . contourf ( x , y , nc_new , numpy . arange ( 0.0 , 1.0 , 0.1 ) , cmap = plt . cm . RdBu ) #NEWLINE#
np . hstack ( [ R , phase ] ) #NEWLINE#
{ { test | tojson | safe } } #NEWLINE#
out = ohc . fit_transform ( X ) #NEWLINE#
d = { 'a' : 1 , 'b' : 1 , 'c' : 1 } #NEWLINE# len ( set ( d . values ( ) ) ) == 1 #NEWLINE#
OrderedDict ( [ ( 'first' , 1 ) , ( 'second' , 2 ) ] ) #NEWLINE#
print ( repr ( a ) ) #NEWLINE#
np . where ( np . diff ( x ) > 0.5 ) [ 0 ] + 1 #NEWLINE#
meta = { 'dont_redirect' : True , 'handle_httpstatus_list' : [ 302 ] } #NEWLINE#
data . groupby ( 'id' ) . agg ( { 'name' : f1 } ) #NEWLINE#
return zip ( a , b ) #NEWLINE#
0.0j #NEWLINE#
expand = [ ( a * int ( b ) if len ( b ) > 0 else a ) for a , b in test ] #NEWLINE#
print ( sorted ( s , key = lambda t : t . count ( '+' ) ) ) #NEWLINE#
blog_post = models . ForeignKey ( BlogPost ) #NEWLINE#
self . assertEqual ( my_function_with_global_var ( ) , 'First#SPACE#result' ) #NEWLINE#
exec ( compile ( open ( os . path . basename ( setup_file ) ) . read ( ) , os . path . basename ( #NEWLINE# setup_file ) , 'exec' ) ) #NEWLINE#
x [ nonzeros ] . dot ( mat [ nonzeros ] ) #NEWLINE#
mahalanobis ( s [ 0 ] , s [ 1 ] , invcovar ) #NEWLINE#
self . response . write ( 'Hi#SPACE#there!\n' ) #NEWLINE#
map ( lambda x : dict ( x , b = x [ 'b' ] + 1 ) , d ) #NEWLINE#
f = open ( 'some_file' , 'r' ) #NEWLINE#
a = np . array ( [ [ 1 , 3 , 4 , 2 , 2 , 7 ] , [ 5 , 2 , 2 , 1 , 4 , 1 ] , [ 3 , 3 , 2 , 2 , 1 , 1 ] ] ) #NEWLINE#
pygame . init ( ) #NEWLINE#
print ( df1 . merge ( df2 , on = cols , how = 'outer' ) [ cols ] ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#DATALENGTH(myimage)#SPACE#FROM#SPACE#testing#SPACE#WHERE#SPACE#id#SPACE#=#SPACE#1' ) #NEWLINE#
A = np . column_stack ( [ ( x ** i ) for i in range ( 3 ) ] ) #NEWLINE#
final = re . findall ( '[A-Z][a-z]*' , '' . join ( expand ) ) #NEWLINE#
found = any ( word == line . strip ( ) for line in file ) #NEWLINE#
chars = '' . join ( [ random . choice ( string . letters [ : 26 ] ) for i in range ( 15 ) ] ) #NEWLINE#
A [ : , ( 0 ) ] #NEWLINE#
et . write ( sys . stdout , 'utf-8' ) #NEWLINE#
print ( 'OK#SPACE#-#SPACE#MySQL#SPACE#is#SPACE#running.' ) #NEWLINE#
plt . suptitle ( 'Main#SPACE#title' ) #NEWLINE#
d = { 'key2' : [ 3 , 4 , 5 , 6 ] , 'key1' : [ 1 , 2 ] } #NEWLINE#
self . file . close ( ) #NEWLINE#
return ContentType . objects . get_for_model ( obj ) #NEWLINE#
np . bmat ( [ [ A , D ] , [ C , B ] ] ) . A #NEWLINE#
self . panel . SetSizer ( main_sizer ) #NEWLINE#
return render ( request , 'template.html' , { } ) #NEWLINE#
soup = BeautifulSoup ( '<b></b>' ) #NEWLINE#
os . chdir ( curdir ) #NEWLINE#
f = open ( 'sample.txt' , 'r' ) #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 , figsize = ( 12 , 5 ) ) #NEWLINE#
array ( [ 1 , 2 ] ) #NEWLINE#
df . groupby ( 'A' ) . transform ( zscore ) #NEWLINE#
tokenizer . tokenize ( 'Eighty-seven#SPACE#miles#SPACE#to#SPACE#go,#SPACE#yet.#SPACE##SPACE#Onward!' ) #NEWLINE#
s . sendmail ( msg [ 'From' ] , msg [ 'To' ] , msg . as_string ( ) ) #NEWLINE#
plt . plot ( x , y1 , x , y2 , x , y3 ) #NEWLINE#
p4in . close ( ) #NEWLINE#
files = glob . glob ( 'year*.jpg' ) #NEWLINE#
pp . sort ( key = lambda p : math . atan2 ( p [ 1 ] - cent [ 1 ] , p [ 0 ] - cent [ 0 ] ) ) #NEWLINE#
Py_DECREF ( v ) #NEWLINE#
print ( re . findall ( '[^/|(]+(?:\\([^)]*\\))*' , str ) ) #NEWLINE#
list ( parenthetic_contents ( '(a(b(c)(d)e)(f)g)' ) ) #NEWLINE#
print ( template . render ( sometext = sometext ) . encode ( 'utf-8' ) ) #NEWLINE#
l [ : ] = [ ( x * 5 ) for x in l ] #NEWLINE#
df . loc [ mask , 'FirstHigh' ] = h #NEWLINE#
l1 . append ( [ 7 , 8 , 9 ] ) #NEWLINE#
my_logger = logging . getLogger ( 'MyLogger' ) #NEWLINE#
email . utils . parsedate_tz ( 'Sun,#SPACE#09#SPACE#Mar#SPACE#1997#SPACE#13:45:00#SPACE#-0500' ) #NEWLINE#
min ( dictionary . values ( ) ) #NEWLINE#
np . allclose ( np . einsum ( 'ikj,jl->ikl' , a , b ) , np . dot ( a , b ) ) #NEWLINE#
plt . xticks ( list ( range ( 10 ) ) , labels , rotation = - 30 , ha = 'left' ) #NEWLINE#
[ elem for i , elem in enumerate ( inputlist ) if i not in excluded_indices ] #NEWLINE#
self . assertTrue ( r . zrangebyscore ( name , 1 , 2 ) == [ 'one' , 'two' ] ) #NEWLINE#
Bar . objects . foo_active ( ) #NEWLINE#
set ( [ 1 , 2 ] ) | set ( [ 2 , 3 ] ) #NEWLINE#
df [ df . Phrase . map ( lambda x : len ( x ) if isinstance ( x , list ) else None ) != 0 ] #NEWLINE#
df . set_value ( i , 'ifor' , ifor_val ) #NEWLINE#
pos_tag_sents ( df [ 'Text' ] . apply ( word_tokenize ) . tolist ( ) ) #NEWLINE#
strings = [ 'some' , 'example' , 'words' , 'that' , 'i' , 'am' , 'fond' , 'of' ] #NEWLINE# print ( min ( strings , key = len ) ) #NEWLINE#
properties = { 'user' : 'foo' , 'password' : 'bar' } #NEWLINE#
logging . warning ( 'test' ) #NEWLINE#
print ( translator ( 'de' , 'en' , 'Die#SPACE#größten#SPACE#Katzenrassen#SPACE#der#SPACE#Welt' ) ) #NEWLINE#
axes . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
driver . close ( ) #NEWLINE#
self . request . write ( formatter . rawHTML ( out_line + '<br>' ) ) #NEWLINE#
df . index + pd . offsets . MonthEnd ( 0 ) #NEWLINE#
print ( list ( locals ( ) . keys ( ) ) ) #NEWLINE#
major = models . CharField ( max_length = 30 ) #NEWLINE#
server . quit ( ) #NEWLINE#
df = df . drop ( [ 'values' , 'datetime' ] , axis = 1 ) #NEWLINE#
from functools import reduce #NEWLINE# b = reduce ( lambda total , d : 10 * total + d , x , 0 ) #NEWLINE#
plt . xticks ( x ) #NEWLINE#
my_logger . debug ( 'this#SPACE#is#SPACE#debug' ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#eliding#SPACE#option#SPACE#%r' % elidespec ) #NEWLINE#
new_string = old_string [ : k ] + '.#SPACE#-#SPACE#' + old_string [ k + 1 : ] #NEWLINE#
result = ast . literal_eval ( "{'a':#SPACE#1,#SPACE#'b':#SPACE#2}" ) #NEWLINE#
list ( replaceiniter ( range ( 11 ) , lambda x : x % 2 ) ) #NEWLINE#
cv2 . imshow ( 'Capture' , frame ) #NEWLINE#
data = { 'navn' : 'Ã\x85ge' , 'stilling' : 'LÃ¦rling' } #NEWLINE#
np . any ( a == 5 , axis = 0 ) #NEWLINE#
[ list ( g ) for k , g in groupby ( a , lambda x : x != 0 ) if k ] #NEWLINE#
allUnique ( [ list ( 'ABC' ) , list ( 'DEF' ) , list ( 'ABC' ) ] ) #NEWLINE#
super ( GalleryAdmin , self ) . __init__ ( model , admin_site ) #NEWLINE#
name = 'b{0}' . format ( num ) #NEWLINE#
cursor . execute ( * sql_and_params ) #NEWLINE#
ax . set_xticks ( list ( range ( 0 , len ( weekday_quotes ) , 5 ) ) ) #NEWLINE#
session . query ( User , User . entries_count ( Entry . date > start_date ) ) #NEWLINE#
today . strftime ( '%j' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
median ( [ 1 , 2 , 3 ] ) #NEWLINE#
df1 . groupby ( level = 0 ) [ cols ] . apply ( find_window ) #NEWLINE#
print ( re . split ( '\\s+|[,;.-]\\s*' , st ) ) #NEWLINE#
g . fig . get_axes ( ) [ 0 ] . set_yscale ( 'log' ) #NEWLINE#
shutils . copy2 ( sys . argv [ 1 ] , sys . argv [ 2 ] ) #NEWLINE#
k += 1 #NEWLINE#
l = [ 'ch' , '' , '' , 'e' , '' , 'e' , 'se' ] #NEWLINE# [ var for var in l if var ] #NEWLINE#
a . shape #NEWLINE#
plt . show ( ) #NEWLINE#
d = { m . get ( key , key ) : value for key , value in list ( d . items ( ) ) } #NEWLINE#
OrderedCounter ( 'google' ) . most_common ( ) [ 0 ] [ 0 ] #NEWLINE#
merged . to_csv ( 'merged.csv' ) #NEWLINE#
utc_now = datetime . datetime . utcnow #NEWLINE#
pool = Pool ( processes = 2 ) #NEWLINE#
map ( dictionary . __delitem__ , lst ) #NEWLINE#
df3 . plot ( kind = 'bar' , ax = ax [ 0 ] ) #NEWLINE#
[ '[Cat@123]' , 'Category123' , 'CAT' ] #NEWLINE#
re . findall ( '((\\w)\\2{2,})' , s ) #NEWLINE#
reduce ( dict . get , path , aDict ) . update ( aSecondDict ) #NEWLINE#
return n * n #NEWLINE#
ax1 = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
LOGGER . setLevel ( logging . WARNING ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
cookiejar . set_cookie ( cookie ) #NEWLINE#
print ( '\tTime=%s' % time . ctime ( t ) ) #NEWLINE#
string_val = 'x' * 10 #NEWLINE#
[ array ( [ 1 , 3 , 2 , 4 ] ) , array ( [ 5 , 7 , 6 , 8 ] ) ] #NEWLINE#
np . power ( df , 2 ) #NEWLINE#
logging . getLogger ( 'suds.client' ) . setLevel ( logging . DEBUG ) #NEWLINE#
GC . remove_edge ( * clique [ 0 : 2 ] ) #NEWLINE#
comma_separated_string = ',#SPACE#' . join ( map ( str , processed_numbers ) ) #NEWLINE#
print ( lines [ 1 ] [ 2 ] ) #NEWLINE#
super ( Extension , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
self . ax . set_title ( 'EOD#SPACE#test#SPACE#plot' ) #NEWLINE#
a [ : : - 1 ] #NEWLINE#
return super ( MyAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
random . shuffle ( b ) #NEWLINE#
print ( doc . toxml ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
A = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
newd = [ ( 'a' , 10 ) , ( 'b' , 20 ) , ( 'c' , 30 ) ] #NEWLINE#
line [ 5 ] = [ '5' , '10' , '10' ] #NEWLINE#
save_as = True #NEWLINE#
axs [ 1 ] . imshow ( mask , cmap = plt . cm . Greys_r , interpolation = 'none' ) #NEWLINE#
sum ( map ( lambda x , y : x * y , l1 , l2 ) ) #NEWLINE#
print ( thingy . attrib ) #NEWLINE#
min ( a , key = itemgetter ( 1 ) ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
urlparse ( 'http://www.ggogle.com/test?t' ) #NEWLINE#
from django . utils import simplejson #NEWLINE#
c . drawString ( 100 , 100 , 'Hello#SPACE#World' ) #NEWLINE#
vscrollbar . grid ( row = 0 , column = 1 , sticky = N + S ) #NEWLINE#
SCHEDULER = 'myproject.scheduler.MyScheduler' #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return { 'name' : 'John' } #NEWLINE#
datetime . <STR0> ( ) #NEWLINE#
[ 'df1' , 'df2' ] #NEWLINE#
print ( np . loadtxt ( io . BytesIO ( trace . text ) ) ) #NEWLINE#
result = nlargest ( k , list ( things . keys ( ) ) , key = lambda x : things [ x ] [ 'weight' ] ) #NEWLINE#
cbar = plt . colorbar ( CF , ticks = lvls , format = '%.2f' , spacing = 'proportional' ) #NEWLINE#
ftp = ftplib . FTP ( 'servername' , 'username' , 'password' ) #NEWLINE#
os . nice ( 20 ) #NEWLINE#
[ { 'some#SPACE#data' : value , 'next#SPACE#key' : 'another#SPACE#value' } ] #NEWLINE#
draw . text ( ( margin , offset ) , line , font = font , fill = '#aa0000' ) #NEWLINE#
df = pd . read_csv ( filename , skiprows = lines2skip ) #NEWLINE#
approach1 ( a ) #NEWLINE#
'func' , 'args' , 'keywords' , 'starargs' , 'kwargs' #NEWLINE#
array ( [ nan + 0.0j , nan + nanj , nan + nanj , nan + nanj , nan + nanj ] ) #NEWLINE#
List2 = [ 1 , 2 , 3 , 5 , 5 , 9 , 8 , 1 , 2 , 3 ] #NEWLINE#
dis . dis ( f ) #NEWLINE#
sys . excepthook = handle_exception #NEWLINE#
f . close ( ) #NEWLINE#
next ( ( elem for elem in lst if isinstance ( elem , dict ) and 'k' in elem ) , None ) #NEWLINE#
child . sendline ( 'ls' ) #NEWLINE#
param2 = request . args . get ( 'param2' ) #NEWLINE#
response . headers [ 'Content-type' ] = 'application/csv' #NEWLINE#
hasattr ( 'abc' , '__iter__' ) #NEWLINE#
print ( f ( 1 , [ 2 , 3 ] ) ) #NEWLINE#
sys . stderr = open ( 'c:\\temp\\gimpstderr.txt' , 'w' ) #NEWLINE#
print ( 'ERROR' , data [ 0 ] ) #NEWLINE#
re . findall ( '([^.]*apple[^.]*)' , txt ) #NEWLINE#
dis . dis ( lambda x : x ) #NEWLINE#
parser . add_argument ( 'xDate' ) #NEWLINE#
h . sub ( 'h' , 'f' ) #NEWLINE#
logging . Handler . close ( self ) #NEWLINE#
ax . set_yticks ( list ( range ( 0 , 90 , 10 ) ) ) #NEWLINE#
g1 . add_suffix ( '_Count' ) . reset_index ( ) #NEWLINE#
main ( ) #NEWLINE#
{ keyName1 : value1 , keyName2 : value2 , keyName3 : [ val1 , val2 , val3 ] } #NEWLINE#
br . form [ 'password' ] = 'mypass' #NEWLINE#
br . form [ 'login' ] = 'mylogin' #NEWLINE#
pylab . errorbar ( phase , y , yerr = err , fmt = None , marker = None , mew = 0 , ecolor = time ) #NEWLINE#
a = np . array ( [ [ 1 , 1 ] , [ 2 , 3 ] , [ 1 , 1 ] , [ 5 , 4 ] , [ 2 , 3 ] ] ) #NEWLINE# unique_rows ( a ) #NEWLINE#
found = re . findall ( regex , my_txt ) #NEWLINE#
olib . oshape ( 'a' , a ) #NEWLINE#
"""""" . isalpha ( ) #NEWLINE#
{ 'one' : 1 , 'two' : 2 } #NEWLINE#
print ( f . decorator ) #NEWLINE#
config = { 'redis' : { 'host' : 'localhost' , 'port' : '6739' , 'db' : 0 } } #NEWLINE#
df . matches . sum ( ) #NEWLINE#
print ( numpy . sum ( c * a ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . pcolormesh ( X [ i - 2 : i ] , Y [ i - 2 : i ] , C [ i - 2 : i ] ) #NEWLINE#
MainWindow . show ( ) #NEWLINE# sys . exit ( app . exec_ ( ) ) #NEWLINE#
data [ 'a' ] . ravel ( order = 'F' ) #NEWLINE#
r [ i ] = np . log ( foo [ i ] ) #NEWLINE#
array ( [ 1 , 2 , 3 ] , dtype = int32 ) #NEWLINE#
[ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'f' , 'g' ] , [ ] ] #NEWLINE#
sys . path . insert ( 0 , self . path ) #NEWLINE#
random . shuffle ( thelist ) #NEWLINE#
module1 . Relay ( 1 , 1 ) #NEWLINE#
return User . objects . filter ( id = self . request . user . id ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
Post . objects . filter ( tags__contains = [ 'django' , 'thoughts' ] ) #NEWLINE#
x3 = [ ( x - 1 if x != 10.5 else x ) for x in x2 ] #NEWLINE#
lst = json . loads ( re . sub ( '([0-9]+-[0-9]+-[0-9]+)' , '"\\1"' , '[%s]' % l ) ) #NEWLINE#
ads = win32com . client . Dispatch ( 'ADsNameSpaces' ) #NEWLINE#
[ [ 'ACGT' , ( 5 , 13 ) ] , [ 'GT' , ( 19 , 25 ) ] , [ 'TATACG' , ( 29 , 41 ) ] ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
Frame1 . grid ( row = 0 , column = 0 , rowspan = 3 , columnspan = 2 , sticky = W + E + N + S ) #NEWLINE#
template . render ( ** vars ) #NEWLINE#
df1 . plot ( 'type_of_plot' , ax = a ) #NEWLINE#
df . columns = [ 'ColA' ] #NEWLINE#
[ list ( i ) for i in set ( [ tuple ( sorted ( i ) ) for i in a ] ) ] #NEWLINE#
np . fromstring ( '100110' , np . int8 ) - 48 #NEWLINE#
ax . set_xlabel ( '$\\phi_\\mathrm{real}$' ) #NEWLINE#
lbl8 . grid ( row = 2 , column = 0 ) #NEWLINE#
ao [ : , : - 1 ] += ai [ : , 1 : ] #NEWLINE#
fpid . close ( ) #NEWLINE#
f ( 1 , 2 ) #NEWLINE#
ylabel ( 'Undamped' ) #NEWLINE#
hsv [ : , : , ( 0 ) ] *= 0.33 #NEWLINE#
illegalxml . sub ( '?' , mystring ) #NEWLINE#
list ( split ( list ( range ( 11 ) ) , 3 ) ) #NEWLINE#
print ( '#1#SPACE#Backend:' , plt . get_backend ( ) ) #NEWLINE#
response . set_cookie ( 'favorite_color' , request . GET [ 'favorite_color' ] ) #NEWLINE#
print ( '#2#SPACE#Backend:' , plt . get_backend ( ) ) #NEWLINE#
difflib . SequenceMatcher ( None , str1 , str2 ) #NEWLINE#
plt . savefig ( 'labelAtEnd2.png' ) #NEWLINE#
print ( sys . path ) #NEWLINE#
{ 'x' : [ 1 , 2 , 3 ] } #NEWLINE#
print ( np . allclose ( a2 , a ) ) #NEWLINE#
sorted ( templist , key = int ) #NEWLINE#
print ( '%s#SPACE#%6d' % ( c , d [ c ] ) ) #NEWLINE#
regex = re . compile ( '((\\S+)\\s+SUCCESS#SPACE#Number#SPACE#of#SPACE#wins#SPACE#:#SPACE#(\\d+))' ) #NEWLINE#
tt = np . linspace ( 0 , 19 , 20 ) #NEWLINE#
ord ( chars [ 0 ] ) #NEWLINE#
func ( arg ) #NEWLINE#
print ( a [ : , ( 1 ) ] ) #NEWLINE#
return ( d1 . year - d2 . year ) * 12 + d1 . month - d2 . month #NEWLINE#
t = [ int ( i ) for i in s . split ( ',' ) ] #NEWLINE#
self . children = { } #NEWLINE#
queryset = Model . objects . all ( ) #NEWLINE#
df . join ( pd . DataFrame ( 0 , df . index , list ( 'cd' ) ) ) #NEWLINE#
show ( ) #NEWLINE#
input . close ( ) #NEWLINE#
unitary = [ linalg . expm ( - 1.0j * t * h ) for t in t_list ] #NEWLINE#
plt . draw ( ) #NEWLINE#
cycls_3 = [ c for c in nx . cycle_basis ( G ) if len ( c ) == 3 ] #NEWLINE#
table [ 'Date' ] = table [ 'Date' ] - pd . tseries . offsets . MonthEnd ( ) #NEWLINE#
user . save ( ) #NEWLINE#
f . write ( 'This#SPACE#is#SPACE#a#SPACE#test#SPACE#of#SPACE#file#SPACE#nr.' + str ( i ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
my_func ( ) #NEWLINE#
print ( str ( 123456789.98765433 ) ) #NEWLINE#
show ( ) #NEWLINE#
[ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 11 , 12 , 13 , 14 , 16 , 17 , 18 , 19 ] #NEWLINE#
result = bool_indices . apply ( lambda x : df . loc [ x , col_values ] . sum ( ) ) #NEWLINE#
cv2 . cv . CreateMat ( 500 , 500 , template . dtype ) #NEWLINE#
time . mktime ( t . timetuple ( ) ) + t . microsecond / 1000000.0 #NEWLINE#
conn . close ( ) #NEWLINE#
dst = c . get_bucket ( 'my_destination_bucket' ) #NEWLINE#
df . loc [ lhs , column ] = rhs #NEWLINE#
yourFile = codecs . open ( 'yourFileName' , 'r' , 'utf-8' ) #NEWLINE#
pattern = re . compile ( '^([A-Z][0-9]+)+$' ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
df . loc [ : , ( 'implied_vol' ) ] . fillna ( 0 , inplace = True ) #NEWLINE#
from functools import reduce #NEWLINE# gcd = reduce ( lambda x , y : GCD ( [ x , y ] ) , [ a , b , c , d ] ) #NEWLINE#
pick ( 'Jack#SPACE#and#SPACE#Jill#SPACE#went#SPACE#up#SPACE#the#SPACE#hill' . split ( ) ) #NEWLINE#
return render_to_response ( 'author_form.html' , { 'form' : form } ) #NEWLINE#
callback ( self ) #NEWLINE#
colormap = np . array ( [ 'r' , 'g' , 'b' ] ) #NEWLINE#
return int ( h ) * 3600 + int ( m ) * 60 + int ( s ) #NEWLINE#
plt . clf ( ) #NEWLINE#
df [ 'time' ] = pd . to_datetime ( df [ 'time' ] ) #NEWLINE#
return response #NEWLINE#
np . vstack ( ( a , a , a ) ) #NEWLINE#
m = re . search ( '^([^#SPACE#]*)#SPACE#([^#SPACE#]*)#SPACE#\\[([^]]*)\\]#SPACE#\\/(.*)\\/$' , line ) #NEWLINE#
[ [ 0 , 1 , 2 ] , [ 1 , 2 , 3 ] , [ 2 , 3 , 4 ] ] #NEWLINE#
plt . xticks ( [ ] ) #NEWLINE#
self . assertEqual ( MyModel . _meta . get_all_field_names ( ) , [ 'a' , 'b' ] ) #NEWLINE#
return '' . join ( random . choice ( string . ascii_uppercase ) for _ in range ( N ) ) #NEWLINE#
height = img . shape [ 0 ] #NEWLINE#
print ( 'This#SPACE#is#SPACE#Python#SPACE#code' ) #NEWLINE#
curl . setopt ( pycurl . URL , 'http://example.org' ) #NEWLINE#
mysets = [ set ( [ 0 , 1 , 2 ] ) , set ( [ 3 , 2 ] ) , set ( [ 4 , 1 ] ) , set ( [ 5 , 6 ] ) , set ( [ 7 , 8 ] ) ] #NEWLINE#
cv2 . imwrite ( 'roi.png' , roi ) #NEWLINE#
print ( search ( df , 'Governor' , 'Virginia' , 'Google' ) ) #NEWLINE#
zip ( list ( range ( len ( a ) ) ) , a ) #NEWLINE#
'%.2f' % 1.2333333 #NEWLINE#
os . path . join ( root , file ) #NEWLINE#
'foobar' , 'f#SPACE#oobar' , 'fo#SPACE#obar' , 'f#SPACE#o#SPACE#obar' , 'foo#SPACE#bar' , 'f#SPACE#oo#SPACE#bar' #NEWLINE#
output . close ( ) #NEWLINE#
print ( self . __name__ ) #NEWLINE#
canvas . grid ( row = 1 , column = 1 , sticky = Tkconstants . NSEW ) #NEWLINE#
hosts = sorted ( celery . current_app . control . inspect ( ) . ping ( ) . keys ( ) ) #NEWLINE#
print ( ( 'in#SPACE#class#SPACE#"B":' , a_mod ( ) . A . __name__ ) ) #NEWLINE#
line = 'A=15,#SPACE#B=8,#SPACE#C=false,#SPACE#D=[somevar,#SPACE#a=0.1,#SPACE#b=77,#SPACE#c=true]' #NEWLINE#
obj . save ( ) #NEWLINE#
sys . path . append ( '<directory-where-hello_ext-module-resides>' ) #NEWLINE#
print ( data . loc [ data [ 'Gender' ] == 1 , 'Scores' ] . max ( ) ) #NEWLINE#
redirect ( url_for ( 'account_api.account' ) ) #NEWLINE#
return decorator #NEWLINE#
x_file = open ( direct + '/5_1.txt' , 'r' ) #NEWLINE#
x = [ ( bah * 2 ) for bah in buh ] #NEWLINE#
pd . to_datetime ( a , unit = 'us' ) #NEWLINE#
self . _socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
print ( 'data' , data ) #NEWLINE#
wx . Frame . __init__ ( self , parent = None , title = 'DnD#SPACE#Tutorial' ) #NEWLINE#
s . connect ( ( ip_addr , port ) ) #NEWLINE#
a . py #NEWLINE#
return list ( results . values ( ) ) #NEWLINE#
[ 'wysextplwqpvipxdv' , 'syqbzgtboxxzpwr' ] #NEWLINE#
X_imputed_df = pd . DataFrame ( X_imputed , columns = X_train . columns ) #NEWLINE#
a = [ ( 'A' , 'V' , 'C' ) , ( 'A' , 'D' , 'D' ) ] #NEWLINE#
driver = webdriver . Chrome ( chrome_options = chrome_options ) #NEWLINE#
Counter ( A . flat ) . most_common ( 1 ) #NEWLINE#
scores . append ( clf . score ( X [ outer_test ] , Z [ outer_test ] ) ) #NEWLINE#
index = pd . date_range ( df [ 'time_stamp' ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , picker ) #NEWLINE#
jsonFile . seek ( 0 ) #NEWLINE#
start_response ( '200#SPACE#OK' , [ ( 'Content-Type' , 'text/html' ) ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : a if a < b else b , l [ 1 : ] , l [ 0 ] ) #NEWLINE#
return sorted ( lst , key = lambda x : ( x < 0 , x ) ) #NEWLINE#
print ( 'const#SPACE#BYTE#SPACE#Some_Idx_Mod_mul_2[]#SPACE#=#SPACE#{\n' ) #NEWLINE#
index = df [ 'b' ] . index [ df [ 'b' ] . apply ( np . isnan ) ] #NEWLINE#
app . mount ( '/demo' , core . app ) #NEWLINE#
driver . find_element_by_link_text ( 'All' ) . click ( ) #NEWLINE#
print ( owner . get ( 'user-login' ) ) #NEWLINE#
lis . append ( lambda i = i : i ) #NEWLINE#
self . fields [ 'bar' ] . queryset = qs #NEWLINE#
( get_comments . s ( url ) | render_template . s ( ) ) . apply_async ( ) #NEWLINE#
list ( 'hello' ) == [ 'h' , 'e' , 'l' , 'l' , 'o' ] #NEWLINE#
int ( subprocess . Popen ( [ 'tput' , 'cols' ] , stdout = subprocess . PIPE ) . stdout . read ( ) ) #NEWLINE#
a = numpy . empty ( [ 210 , 8 ] ) #NEWLINE#
os . environ [ 'LDFLAGS' ] = '-framework#SPACE#Carbon' #NEWLINE#
print ( df . groupby ( [ 'doctor#SPACE#name' , 'gender' ] ) . size ( ) ) #NEWLINE#
communication_set . save ( ) #NEWLINE#
new_sheet . cell ( row = 1 , column = 0 ) . value = 'DUMMY' #NEWLINE#
enc . fit ( [ [ 0 , 0 , 3 ] , [ 1 , 1 , 0 ] , [ 0 , 2 , 1 ] , [ 1 , 0 , 2 ] ] ) #NEWLINE#
self . setWindowFlags ( QtCore . Qt . FramelessWindowHint | QtCore . Qt . Popup ) #NEWLINE#
words = sorted ( wordset ) #NEWLINE#
vstack ( [ mean ( a [ : , 4 * i : 4 * ( i + 1 ) ] , axis = 1 ) for i in range ( 3 ) ] ) . T #NEWLINE#
df . loc [ df . index [ 0 ] , 'foo' ] #NEWLINE#
re . findall ( '.{6}' , ss ) #NEWLINE#
return_value = subprocess . call ( [ 'pdflatex' , 'textfile' ] , shell = False ) #NEWLINE#
plt . gca ( ) . yaxis . set_major_locator ( MaxNLocator ( nbins = 6 ) ) #NEWLINE#
os . readlink ( '/jffs2/a.bin' ) #NEWLINE#
fig , axes = plt . subplots ( 2 , sharey = True , sharex = False ) #NEWLINE#
df [ 'DOB' ] = pd . to_datetime ( df . DOB ) #NEWLINE#
print ( re . sub ( '(1+)|(0+)' , fixer , my_string ) ) #NEWLINE#
xv , yv , zv = [ np . arange ( i ) for i in [ 2 , 3 , 4 ] ] #NEWLINE#
kwargs . update ( { 'host' : 's3.amazonaws.com' } ) #NEWLINE#
GL . glColor3f ( 1.0 , 1.0 , 0.0 ) #NEWLINE#
Column ( 'secondColumn' , Integer , primary_key = True ) #NEWLINE#
pivoted . cumsum ( ) + ( pivoted == - 1 ) #NEWLINE#
return [ alist [ i : j ] for i , j in zip ( [ 0 ] + indices , indices + [ None ] ) ] #NEWLINE#
userpath = os . path . normpath ( '(path-to-wiki)/foo/bar.txt' ) #NEWLINE#
pd . isnull ( np . array ( [ np . nan , 0 ] , dtype = object ) ) #NEWLINE#
friday = day - timedelta ( days = day . weekday ( ) ) + timedelta ( days = 4 , weeks = - 1 ) #NEWLINE#
C = A * B #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
s . str . match ( '(b[x-y]+)' ) . str . get ( 0 ) #NEWLINE#
ax = fig . add_subplot ( 111 , frameon = False , xticks = [ ] , yticks = [ ] ) #NEWLINE#
pylab . yscale ( 'close_to_one' ) #NEWLINE#
pygame . display . quit ( ) #NEWLINE#
file . flush ( ) #NEWLINE#
print ( Y . transpose ( ) ) #NEWLINE#
elem . SendMessage ( 'SomeMessageHere' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
match = re . search ( '\\.mp3' , name ) #NEWLINE#
root . geometry ( '640x480' ) #NEWLINE#
Frame2 . grid ( row = 3 , column = 0 , rowspan = 3 , columnspan = 2 , sticky = W + E + N + S ) #NEWLINE#
return self . create ( request , * args , ** kwargs ) #NEWLINE#
G . add_node ( 'Grandchild_%i' % i ) #NEWLINE#
G . add_node ( 'Greatgrandchild_%i' % i ) #NEWLINE#
a = [ 10.23 , 11.65 , 12.36 , 12.96 ] #NEWLINE# b = [ 5.23 , 6.1 , 8.3 , 4.98 ] #NEWLINE#
raise OSError ( 2 , 'No#SPACE#such#SPACE#file#SPACE#or#SPACE#directory' , 'foo' ) #NEWLINE#
print ( ( 'Client#SPACE#sent:' , self . sock . recv ( 1024 ) . decode ( ) ) ) #NEWLINE#
return type ( li ) ( map ( double , li ) ) #NEWLINE#
def __iter__ ( self ) : #NEWLINE# #INDENT# return iter ( self . books . values ( ) ) #NEWLINE#
plt . legend ( ) #NEWLINE#
p = subprocess . Popen ( cmd , shell = False , stdout = subprocess . PIPE ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 'a' , 'b' , 'c' , 'a' ] } ) #NEWLINE#
label . master . wm_attributes ( '-transparentcolor' , 'white' ) #NEWLINE#
category = forms . ChoiceField ( choices = CATEGORIES , required = True ) #NEWLINE#
pygame . display . set_mode ( ) #NEWLINE#
arr [ arr > 255 ] = x #NEWLINE#
return super ( MyListView , self ) . get_context_data ( ** context ) #NEWLINE#
url ( '^entries/$' , ListView . as_view ( model = Entry , paginate_by = 10 ) ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
test_moduleB . py #NEWLINE#
main . py #NEWLINE#
plt . gca ( ) . add_artist ( leg2 ) #NEWLINE#
plt . gca ( ) . add_artist ( leg3 ) #NEWLINE#
plt . gca ( ) . add_artist ( leg4 ) #NEWLINE#
plt . gca ( ) . add_artist ( leg6 ) #NEWLINE#
sys . path . insert ( 1 , '.' ) #NEWLINE#
child = pexpect . spawn ( 'TERM=vt100#SPACE#/bin/bash' , [ '-c' , shell_cmd ] ) #NEWLINE#
[ 1 ] [ 1 ] [ 1 ] #NEWLINE#
x . pattern #NEWLINE#
logging . getLogger ( '' ) . addHandler ( handler ) #NEWLINE#
self . assertEqual ( r , 'cest-deja-lete' ) #NEWLINE#
self . assertEqual ( r , 'nin-hao-wo-shi-zhong-guo-ren' ) #NEWLINE#
self . assertEqual ( r , 'kompiuter' ) #NEWLINE#
zip ( [ iter ( l ) ] * 2 ) #NEWLINE#
len ( set ( hashlib . sha256 ( str ( i ) ) . hexdigest ( ) [ : 5 ] for i in range ( 0 , 2000 ) ) ) #NEWLINE#
name = models . CharField ( max_length = 200 ) #NEWLINE#
print ( time . time ( ) ) #NEWLINE#
child . expect ( 'Your#SPACE#bash#SPACE#prompt#SPACE#here' ) #NEWLINE#
frame [ frame . duplicated ( [ 'key1' , 'key2' ] , keep = False ) ] . groupby ( ( 'key1' , 'key2' ) #NEWLINE# ) . min ( ) #NEWLINE#
Counter ( list ( c . values ( ) ) ) #NEWLINE#
results = pbex . run ( ) #NEWLINE#
data = json . load ( f ) #NEWLINE#
( datetime . date . today ( ) - datetime . date ( * date_cand_time [ : 3 ] ) ) . days #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
root = ET . parse ( 'opidea_2.xml' ) #NEWLINE#
df = df . set_index ( [ 'B' ] ) #NEWLINE#
ax . set_xlim ( 0 , m . shape [ 1 ] ) #NEWLINE#
sys . stdout . write ( '{:<7}{:<51}{:<25}\n' . format ( code , name , industry ) ) #NEWLINE#
numpy . random . rand ( count ) #NEWLINE#
result = next ( x for x in my_list if works ( x ) ) #NEWLINE#
ts = pd . Series ( [ 2 , 1 , 2 , 1 , 5 ] , index = date_index ) #NEWLINE#
np . savetxt ( s , x ) #NEWLINE#
print ( trivial ( 'I#SPACE#Me#SPACE#You' ) ) #NEWLINE#
print ( d . get ( 'string_to_search' ) ) #NEWLINE#
( 1.0 , 1.0 , 7085 , 427352.9277999997 , 4848790.9351 ) , #NEWLINE#
s . close ( ) #NEWLINE#
p = Popen ( [ 'watch' , 'ls' ] ) #NEWLINE#
t = datetime . datetime ( 2009 , 4 , 1 ) #NEWLINE#
ax2 . xaxis . set_visible ( False ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
OrderedDict ( [ ( 'method' , 'constant' ) , ( 'data' , '1.225' ) ] ) #NEWLINE#
img . write ( pdf_path ) #NEWLINE#
self . entry . focus_set ( ) #NEWLINE#
print ( 'Okay#SPACE#the#SPACE#numbers#SPACE#set#SPACE#is#SPACE#now:#SPACE#' , numbers ) #NEWLINE#
re . match ( '^org/?P<company_name>\\w+/$' , 'org/companyA' ) #NEWLINE#
times = np . zeros ( ( 2 , 3 ) ) #NEWLINE#
print ( result . groups ( ) ) #NEWLINE#
worker . send ( msg , zmq . NOBLOCK ) #NEWLINE#
my_dict = dict ( zip ( flatten ( list1 ) , flatten ( list2 ) ) ) #NEWLINE#
{ { ( request . user . username | multiply ) : 5 } } #NEWLINE#
( zip ( itertools . repeat ( first ) , items ) for items in zip ( * grouper ( 3 , data ) ) ) #NEWLINE#
AB = np . matmul ( A , B ) #NEWLINE#
list ( itertools . product ( list ( range ( 5 ) ) , list ( range ( 5 ) ) ) ) #NEWLINE#
rendered_output = template . render ( context ) #NEWLINE#
headers = { 'Content-Type' : 'application/json' } #NEWLINE#
return { 'byattr' : filter_list } #NEWLINE#
my_date = datetime . date . today ( ) #NEWLINE#
a . insert ( len ( a ) , 5 ) #NEWLINE#
data_dict = defaultdict ( list ) #NEWLINE#
pd . concat ( [ df ] , keys = [ 'Foo' ] , names = [ 'Firstlevel' ] ) #NEWLINE#
win32gui . SetForegroundWindow ( self . _handle ) #NEWLINE#
self . stateChanged . connect ( self . handleStateChanged ) #NEWLINE#
print ( [ c for c in cumsum ( ( 0 , 1 , 2 , 3 , 4 , 5 , 6 ) ) ] ) #NEWLINE#
temp = tuple ( map ( sorted , zip ( * alist ) ) ) #NEWLINE#
array ( [ 'one.com' , 'two.url' , 'three.four' ] , dtype = '<U10' ) #NEWLINE#
cPickle . dumps ( { 'foo' : 'bar' } ) #NEWLINE#
df [ ( df [ 'A' ] > 0 ) & ( df [ 'B' ] > 0 ) & ( df [ 'C' ] > 0 ) ] . count ( ) #NEWLINE#
print ( x [ 0 ] , len ( list ( x [ 1 ] ) ) ) #NEWLINE#
somelist . sort ( key = ordering . get ) #NEWLINE#
assert text in self . driver . page_source == True #NEWLINE#
return isinstance ( value , list ) #NEWLINE#
population = [ a for n , a in zip ( pops , alleles ) for _ in range ( n ) ] #NEWLINE#
__import__ ( module ) #NEWLINE#
ax . set_xlabel ( 'x' ) #NEWLINE#
etree . tostring ( tree ) #NEWLINE#
a [ : 2 , ( 2 ) ] = 0 #NEWLINE#
app . run ( debug = True , use_reloader = False ) #NEWLINE#
redirect ( 'some_error_page' ) #NEWLINE#
buttonframe . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
img . save ( 'a_test.png' ) #NEWLINE#
"""(".*?")|(\\s+)""" #NEWLINE#
lista = [ x for x in db ] #NEWLINE#
exec ( 'price%d#SPACE#=#SPACE#%s' % ( i + 1 , repr ( prices [ i ] ) ) ) #NEWLINE#
foo . split ( '\n' , 1 ) #NEWLINE#
x = [ 1 , 2 , 2 , 2 , 3 , 4 , 5 , 6 , 6 , 7 ] #NEWLINE#
indices_zero = numpy . arange ( len ( array ) ) [ bindices_zero ] #NEWLINE#
self . _calendar . bind ( '<Configure>' , self . on_configure ) #NEWLINE#
out = np . sort ( idx [ np . unique ( my_arr [ idx ] , return_index = 1 ) [ 1 ] ] ) #NEWLINE#
BeautifulSoup ( requests . get ( website_link , proxies = proxy ) . text , 'lxml' ) #NEWLINE#
[ ( 1.0 * conversions [ n ] / trials [ n ] ) for n in range ( len ( trials ) ) ] #NEWLINE#
print ( f . info ( ) [ 'Content-Length' ] ) #NEWLINE#
""":""" . join ( h [ i : i + 2 ] for i in range ( 0 , 12 , 2 ) ) #NEWLINE#
self . _dealer = dealer #NEWLINE#
plt . plot ( [ 0 , 1 ] , [ 0 , 1 ] , 'r--' ) #NEWLINE#
lost = out . split ( 'Lost#SPACE#=#SPACE#' ) [ 1 ] . split ( ',' ) [ 0 ] #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
shutil . copyfileobj ( key , rsObject . stream ( ) ) #NEWLINE#
sys . exit ( 'Call#SPACE#to#SPACE#EnumProcesses#SPACE#failed' ) #NEWLINE#
df [ ( ( df . B - df . B . mean ( ) ) / df . B . std ( ) ) . abs ( ) < 3 ] #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
s = str ( n ) . encode ( ) #NEWLINE#
- - Commentasfkjaskfj #NEWLINE#
group . add_argument ( '-t' , '--txt' , action = 'store_const' , dest = 'type' , const = 't' ) #NEWLINE#
df . ix [ : , ( ~ df . columns . str . contains ( '90|110' ) ) ] #NEWLINE#
return dict ( map ( convert , iter ( data . items ( ) ) ) ) #NEWLINE#
print ( ( 'inner:' , x ) ) #NEWLINE#
print ( ( 'outer:' , x ) ) #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 ) #NEWLINE#
my_list = [ 'a' , 'a' , 'b' , 'c' , 'd' , 'a' , 'e' , 'd' , 'f' , 'e' ] #NEWLINE# print ( sorted ( set ( my_list ) ) ) #NEWLINE#
s = '1.23,2.4,3.123' #NEWLINE# print ( s . split ( ',' ) ) #NEWLINE#
resultqueue . join ( ) #NEWLINE#
np . isnan ( a [ 2 ] ) . nonzero ( ) #NEWLINE#
df = pd . DataFrame ( np . arange ( 1 , 10 ) . reshape ( 3 , 3 ) ) #NEWLINE#
cells = [ n for n in B . nodes ( ) if n [ 0 ] not in nodes ] #NEWLINE#
plt . plot ( x [ : , ( i ) ] , y [ : , ( i ) ] , linestyle = '' , marker = 'o' ) #NEWLINE#
setattr ( obj . a , p , value ) #NEWLINE#
re . sub ( '[^\\x00-\\x7f]' , '' , normalize ( 'NFD' , 'die#SPACE#größten#SPACE#Probleme' ) ) #NEWLINE#
self . assertEqual ( self . done , [ 'Test#SPACE#' + p [ 1 ] , 'Test#SPACE#' + p [ 0 ] ] ) #NEWLINE#
add_something ( l ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( ( 'c():' , c ( ) ) ) #NEWLINE#
10470.0 , 13096.0 , 6827.0 , 5586.0 , 7697.0 , 8205.0 , 8298.0 , 8733.0 #NEWLINE#
res = ( list ( range ( s , s + step + 1 , step ) ) for s in range ( start , stop , step ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
type ( ( ) ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#PMC-ids.csv.gz' , open ( 'PMC-ids.csv.gz' , 'wb' ) . write ) #NEWLINE#
L . sort ( ) #NEWLINE#
print ( contruct . __version__ ) #NEWLINE#
df . loc [ df [ 'First#SPACE#Season' ] > 1990 , 'First#SPACE#Season' ] = 1 #NEWLINE#
print ( m . group ( ) ) #NEWLINE#
array ( [ [ 100 , 200 ] , [ 255 , 255 ] ] , dtype = uint16 ) #NEWLINE#
f = gzip . open ( 'Onlyfinnaly.log.gz' , 'wb' ) #NEWLINE#
allowed_domains = [ 'stats.nba.com' ] #NEWLINE#
print ( json . dumps ( parsed , indent = 4 , sort_keys = True ) ) #NEWLINE#
numpy . array ( data , dtype = [ ( 'label' , ( str , 2 ) ) , ( 'x' , float ) , ( 'y' , float ) ] ) #NEWLINE#
Av = np . hstack ( A ) #NEWLINE#
knapp = tk . Button ( text = 'Finn#SPACE#ord!' , command = siord ) #NEWLINE#
ent7 . grid ( row = 2 , column = 1 ) #NEWLINE#
list ( zip ( * ( d [ k ] [ n ] for k in keys for n in d [ k ] ) ) ) #NEWLINE#
MyObject . objects . bulk_create ( my_objects ) #NEWLINE#
value = models . CharField ( max_length = 240 , db_index = True ) #NEWLINE#
np . mean ( [ 0 , 1 , 2 ] ) #NEWLINE#
re . findall ( '\\d+' , s ) #NEWLINE#
f = open ( 'testing' , 'w' ) #NEWLINE#
return theclass . run ( ) #NEWLINE#
chr ( ord ( 'a' ) + 1 ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
response . set_cookie ( 'cookie_name1' , 'cookie_name1_value' ) #NEWLINE#
signal . signal ( signal . SIGINT , s ) #NEWLINE#
u = np . random . random ( 100 ) #NEWLINE#
regex . match ( 'ABCaABC' ) #NEWLINE#
regex . match ( 'ABCaAAB' ) #NEWLINE#
f = open ( filename , 'r' ) #NEWLINE#
[ ( key , list ( val ) ) for key , val in itertools . groupby ( lst , lambda x : x [ 0 : 5 ] ) ] #NEWLINE#
df = df . rename ( columns = { 'two' : 'new_name' } ) #NEWLINE# df #NEWLINE#
im = Image . open ( 'tree.jpg' ) #NEWLINE#
self . x . pack ( side = LEFT ) #NEWLINE#
conn . cursor ( ) . execute ( 'SET#SPACE#SESSION#SPACE#query_cache_type#SPACE#=#SPACE#OFF' ) #NEWLINE#
os . chown ( 'path/to/file' , uid , gid ) #NEWLINE#
pd . set_option ( 'precision' , 20 ) #NEWLINE#
new . append ( s [ start : end ] ) #NEWLINE#
find_majority ( [ - 1 , - 1 , 0 , 0 , 0 ] ) #NEWLINE#
def parse_bin ( s ) : #NEWLINE# #INDENT# return int ( s [ 1 : ] , 2 ) / 2.0 ** ( len ( s ) - 1 ) #NEWLINE#
print ( dom . toxml ( ) ) #NEWLINE#
sorted ( xs , key = len ) #NEWLINE#
pd . to_timedelta ( df . Duration . str . replace ( '\\.' , '' ) ) / np . timedelta64 ( 1 , 'm' ) #NEWLINE#
[ func ( elem ) for elem in lst ] #NEWLINE#
ax . add_patch ( polA ) #NEWLINE#
ax . add_patch ( polB ) #NEWLINE#
out . close ( ) #NEWLINE#
df . head ( 5 ) #NEWLINE#
df . iloc [ : , ( 0 ) ] #NEWLINE#
pylab . show ( ) #NEWLINE#
draw . text ( ( x , y ) , text , font = font_tiny , fill = 'black' ) #NEWLINE#
server_msg , body , octets = self . conn_pop3 . retr ( number ) #NEWLINE#
return s . split ( '#' ) [ 0 ] . split ( '#SPACE#' ) #NEWLINE#
my_category . category . all ( ) #NEWLINE#
self . Bind ( wx . wx . EVT_KEY_UP , self . handle_key_up ) #NEWLINE#
plt . figure ( ) #NEWLINE#
self . response . out . write ( '<html><body>' ) #NEWLINE#
window . unfullscreen ( ) #NEWLINE#
df [ 'log_ret' ] = df . apply ( select , axis = 1 ) #NEWLINE#
print ( 'row:#SPACE#%d#SPACE##SPACE##SPACE##SPACE#col:#SPACE#%d' % ( len ( df ) , len ( df . columns ) ) ) #NEWLINE#
np . einsum ( 'ijk,i->k' , bidule , betas ) #NEWLINE#
logger1 . info ( 'How#SPACE#quickly#SPACE#daft#SPACE#jumping#SPACE#zebras#SPACE#vex.' ) #NEWLINE#
ax . xaxis . set_ticks_position ( direction ) #NEWLINE#
with open ( json_file_path , 'a' ) as json_file : #NEWLINE# #INDENT# json_file . write ( '{}\n' . format ( json . dumps ( new_data ) ) ) #NEWLINE#
plt . figure ( ) #NEWLINE#
print ( c . co_consts [ 0 ] ) #NEWLINE#
lxml . html . tostring ( root ) #NEWLINE#
pprint . pprint ( sys . path ) #NEWLINE#
[ [ 1 , 4 ] , [ 2 , 7 ] , [ 3 , 8 ] , [ 4 , 43 ] , [ 5 , 6 ] ] #NEWLINE#
shlex . split ( 'this#SPACE#is#SPACE#"a#SPACE#test"' ) #NEWLINE#
df2 = DataFrame ( dict ( A = [ 'foo' , 'foo' , 'bar' , 'bar' , 'bah' ] ) ) #NEWLINE#
response_encoding = response . headers . getparam ( 'charset' ) #NEWLINE#
os . unlink ( f . name ) #NEWLINE#
excel . Quit ( ) #NEWLINE#
( A + B ) . min ( axis = 1 ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
l = [ x for x in re . split ( '(\\s\\w+\\=".*?")' , comp ) if x != '' ] #NEWLINE#
connection . close ( ) #NEWLINE#
task . AsyncResult ( task . request . id ) . state #NEWLINE#
[ x for x in a if x . get ( 'name' ) == 'pluto' ] #NEWLINE#
v = Table ( 'viewname' , metadata , autoload = True ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
numbers = list ( map ( int , s . split ( ) ) ) #NEWLINE#
result [ key ] [ 'Website' ] . append ( item [ 'Website' ] ) #NEWLINE#
df [ 'groups' ] = pd . cut ( df . height , [ - 1 , 0 , 5 , 10 , 15 , 1000 ] ) #NEWLINE#
df #NEWLINE#
model . fit_transform ( X , y ) #NEWLINE#
return list ( range ( 0 , n + 1 , 2 ) ) #NEWLINE#
main ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
results . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
super ( SeparatedValuesField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
def find ( lst , a , b ) : #NEWLINE# #INDENT# return [ i for i , x in enumerate ( lst ) if x < a or x > b ] #NEWLINE#
sys . stdout . write ( '' ) #NEWLINE#
input = tf . constant ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
logger = logging . getLogger ( 'root' ) #NEWLINE#
{ ( 1 ) : { 'a' : 'A' } , ( 2 ) : { 'c' : 'C' , 'b' : 'B' } , ( 3 ) : { 'd' : 'D' } } #NEWLINE#
listmatrixMap ( lambda val , r , c : ( ( r , c ) , val ) , a , indices = True ) #NEWLINE#
return yaml . dump ( self . __dict__ ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
"""Gets#SPACE#an#SPACE#attribute#SPACE#of#SPACE#an#SPACE#object#SPACE#dynamically#SPACE#from#SPACE#a#SPACE#string#SPACE#name""" #NEWLINE#
print ( t5 ) #NEWLINE#
app . run ( ) #NEWLINE#
plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
import hello_world #NEWLINE#
def helloworld ( ) : #NEWLINE# #INDENT# print ( 'hello' ) #NEWLINE#
return np . dot ( A_mA , B_mB . T ) / np . sqrt ( np . dot ( ssA [ : , ( None ) ] , ssB [ None ] ) ) #NEWLINE#
ax . set_yticklabels ( row_labels , minor = False ) #NEWLINE#
conn . sendall ( '' ) #NEWLINE#
diff_file . write ( difftext ) #NEWLINE#
connection . sendall ( '\x00' ) #NEWLINE#
diff ( unwrap ( phase ( hilbert ( filtered_data ) ) ) ) #NEWLINE#
data . depth * len ( data . getbands ( ) ) #NEWLINE#
t . start ( ) #NEWLINE#
min ( map ( double , [ 1 , 2 , 3 ] ) ) #NEWLINE#
[ ( '%d#SPACE#+#SPACE#%d#SPACE#=#SPACE#%d' % ( a , b , a + b ) ) for a , b in zip ( l , l [ 1 : ] ) [ : : 2 ] ] #NEWLINE#
ntxt . write ( rline ) #NEWLINE#
raise ImportError ( 'no#SPACE#source#SPACE#file#SPACE#found' ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
mng . window . state ( 'zoomed' ) #NEWLINE#
numpy . random . shuffle ( a ) #NEWLINE#
sys . setdefaultencoding ( 'utf-8' ) #NEWLINE#
server . quit ( ) #NEWLINE#
saver . save ( sess , 'my-model' ) #NEWLINE#
ax . plot ( x , y , 'b-' ) #NEWLINE#
df . set_index ( [ 'ticker' , 'date' ] , inplace = True ) #NEWLINE# df #NEWLINE#
QtGui . QApplication . sendEvent ( clipboard , event ) #NEWLINE#
print ( re . search ( '(?P<url>https?://[^\\s]+)' , item ) . group ( 'url' ) ) #NEWLINE#
pd . groupby ( b , by = [ b . index . month , b . index . year ] ) #NEWLINE#
some_file . seek ( 0 ) #NEWLINE#
MCAST_GRP = '224.1.1.1' #NEWLINE#
print ( 'Count#SPACE#is#SPACE#$+{count}' ) #NEWLINE#
ssh_client . connect ( host , username = user , password = password ) #NEWLINE#
df [ ~ df . index . isin ( dropThis ) ] #NEWLINE#
token . save ( force_insert = True ) #NEWLINE#
browser . close ( ) #NEWLINE#
print ( row [ 0 ] , '-->' , row [ 1 ] ) #NEWLINE#
df1 [ ~ df1 . Col1 . str . split ( '-' ) . apply ( nerpt ) ] #NEWLINE#
return Response ( { 'patients' : data } , template_name = 'records.html' ) #NEWLINE#
activate ( 'lt' ) #NEWLINE#
cProfile . run ( 'foo()' ) #NEWLINE#
strange_sandwich ( ) #NEWLINE#
provided_ips = request . headers . getlist ( 'X-Forwarded-For' ) #NEWLINE#
print ( config . getboolean ( 'other' , 'use_anonymous' ) ) #NEWLINE#
return [ lst [ indices [ i ] : indices [ i + 1 ] ] for i in range ( n ) ] #NEWLINE#
ws = '' . join ( re . findall ( '\\s' , s ) ) #NEWLINE#
results = re . findall ( search_pattern , 'adf+a+=4=+S+' ) #NEWLINE#
idx = np . argsort ( a [ 1 ] ) #NEWLINE#
print ( '%18.11f' % v ) #NEWLINE#
name = 'b%s' % ( num , ) #NEWLINE#
MyClass = funkyDecorator ( MyClass ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
self . f . make_a_doo ( ) #NEWLINE#
b = copy . deepcopy ( a ) #NEWLINE#
notices = soup . find ( 'div' , { 'class' : 'middlecontent' } ) #NEWLINE#
df . round ( ) #NEWLINE#
'__module__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' #NEWLINE#
'__setattr__' , '__setstate__' , '__sizeof__' , '__str__' , '__subclasshook__' #NEWLINE#
s = 'c:/path/to/folder/' #NEWLINE#
self . _rooms = dict ( ) #NEWLINE#
itertools . chain ( * zip ( * iters ) ) #NEWLINE#
sizer . Add ( notebook , 1 , wx . EXPAND ) #NEWLINE#
list ( ) #NEWLINE#
print ( '?\\\\\\?' ) #NEWLINE#
remotefile = urllib . request . urlopen ( 'http://example.com/somefile.zip' ) #NEWLINE#
axes . yaxis . grid ( True , which = 'minor' ) #NEWLINE#
raise Exception ( 'An#SPACE#exception#SPACE#message#SPACE#with#SPACE#valuable#SPACE#information.' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
min ( timeit . repeat ( 'a,#SPACE#b,#SPACE#c,#SPACE#d#SPACE#=#SPACE#1,#SPACE#1,#SPACE#1,#SPACE#1' , number = 10000000 ) ) #NEWLINE#
s = urllib . request . urlopen ( form_url ) #NEWLINE#
os . getpid ( ) #NEWLINE#
set ( [ 4 , 5 , 6 ] ) #NEWLINE#
output . append ( acids [ 0 ] ) #NEWLINE#
msg [ 'Subject' ] = 'Our#SPACE#family#SPACE#reunion' #NEWLINE#
num_files = sum ( os . path . isfile ( os . path . join ( path , f ) ) for f in os . listdir ( path ) #NEWLINE# ) #NEWLINE#
np . diff ( m . tocsc ( ) . indptr ) #NEWLINE#
yacc . errok ( ) #NEWLINE#
print ( locals ( ) ) #NEWLINE#
new_sheet . cell ( row = 1 , column = 1 ) . value = 'DUMMY' #NEWLINE#
ax . set_xticks ( [ 1 , 2 , 3 ] ) #NEWLINE#
super ( UserForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ax . set_ylim3d ( 0 , 10 ) #NEWLINE#
print ( repr ( tokzr_SENT ( inp1 ) ) ) #NEWLINE#
df [ df [ 'b' ] . map ( set ) & { 1 , 3 } ] #NEWLINE#
item . setData ( None , QtCore . Qt . ForegroundRole ) #NEWLINE#
plt . xlim ( np . log10 ( ilim ) ) #NEWLINE#
print ( ET . tostring ( f ) ) #NEWLINE#
f . write ( ip ) #NEWLINE#
main ( ) #NEWLINE#
Symbol ( '{myvar-42}' ) + 1 #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , np . nan ] , 'b' : [ np . nan , 1 , np . nan ] } ) #NEWLINE# df . isnull ( ) . sum ( ) #NEWLINE#
return func ( * parameters ) #NEWLINE#
print ( 'Task#SPACE#Done' ) #NEWLINE#
item [ 'body' ] = sel . xpath ( '//*[@id="postingbody"]' ) . extract_first ( ) #NEWLINE#
DEFAULT_AUTH_PIPELINE = ( 'social.pipeline.social_auth.social_details' , #NEWLINE# 'social.pipeline.social_auth.social_uid' , #NEWLINE# 'social.pipeline.social_auth.auth_allowed' , #NEWLINE# 'social.pipeline.social_auth.social_user' , #NEWLINE# 'social.pipeline.user.get_username' , #NEWLINE# 'social.pipeline.mail.mail_validation' , #NEWLINE# 'social.pipeline.social_auth.associate_by_email' , #NEWLINE# 'social.pipeline.user.create_user' , #NEWLINE# 'social.pipeline.social_auth.associate_user' , #NEWLINE# 'social.pipeline.social_auth.load_extra_data' , #NEWLINE# 'social.pipeline.user.user_details' ) #NEWLINE#
main ( ) #NEWLINE#
[ 2.136591911315918 , 2.138144016265869 , 2.1437559127807617 ] #NEWLINE#
app . run ( ) #NEWLINE#
order_insertion_by = [ 'name' ] #NEWLINE#
label . pack ( ) #NEWLINE#
[ a for i in items if C ] #NEWLINE#
print ( divtag . find_previous_sibling ( 'img' ) ) #NEWLINE#
fo . close ( ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#' + filename , open ( filename , 'wb' ) . write ) #NEWLINE#
plt . show ( ) #NEWLINE#
encodedWindow = base64 . b64encode ( s . getvalue ( ) ) #NEWLINE#
session . add ( stud ) #NEWLINE#
any ( '#SPACE#' in b for b in board ) #NEWLINE#
np . where ( dt [ 'Date' ] == '2014-02-21' ) #NEWLINE#
data = json . loads ( response . get_data ( as_text = True ) ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
plt . ylabel ( 'Depth' ) #NEWLINE#
c = ( a [ : , : , ( None ) ] * b ) . sum ( axis = 1 ) #NEWLINE#
print ( item ) #NEWLINE#
lst = lst [ : 10 ] #NEWLINE#
foo ( * params ) #NEWLINE#
cursor . executemany ( None , rows ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
print ( replaceNth ( s , 'cat' , 'Bull' , 3 ) ) #NEWLINE#
logger . setLevel ( level ) #NEWLINE#
p . start ( ) #NEWLINE#
del request . session [ 'message' ] #NEWLINE#
globals [ key ] = value #NEWLINE#
ax . fill_between ( x , y1 , y , color = 'g' ) #NEWLINE#
ax . set_ylabel ( 'Radiation#SPACE#($MJ\\,m^{-2}\\,d^{-1}$)' ) #NEWLINE#
df [ ~ df . field . isin ( ban_field ) ] #NEWLINE#
ast . literal_eval ( '[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]' ) #NEWLINE#
my_item [ 'value' ] = item . select ( './/text()' ) . extract ( ) #NEWLINE#
cv2 . imwrite ( 'dst.png' , im_dst ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_zlim3d ( 0 , 1 ) #NEWLINE#
print ( os . stat ( 'somefile.ext' ) . st_size ) #NEWLINE#
QApplication . restoreOverrideCursor ( ) #NEWLINE#
ax2 = fig . add_subplot ( 1 , 2 , 2 ) #NEWLINE#
datetime . date . today ( ) . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
[ 'Rami#SPACE#Eid' , 'Stony#SPACE#Brook#SPACE#University' , 'NY' ] #NEWLINE#
process . stdin . write ( 'exit\n' ) #NEWLINE#
btn . click ( ) #NEWLINE#
shell . write ( '#SPACE#:#SPACE#' , 'KEYWORD' ) #NEWLINE#
shell . write ( '#SPACE#or#SPACE#' , 'KEYWORD' ) #NEWLINE#
shell . write ( 'No' , 'COMMENT' ) #NEWLINE#
shell . write ( 'Yes' , 'DEFINITION' ) #NEWLINE#
items . remove ( item ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
installer . uninstall ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ 'SOUTH#SPACE#' , 'NORTH#SPACE#' ] [ b > 0 ] + [ 'WEST' , 'EAST' ] [ a > 0 ] #NEWLINE#
octave . run ( 'cos(pi#SPACE#/#SPACE#3)' ) #NEWLINE#
dict ( heapq . nlargest ( 5 , list ( names_dict . items ( ) ) , key = itemgetter ( 1 ) ) ) #NEWLINE#
post_request = rf . post ( '/submit/' , { 'foo' : 'bar' } ) #NEWLINE#
return arr [ idx [ : , ( 0 ) ] , idx [ : , ( 1 ) ] ] #NEWLINE#
df . apply ( lambda x : ( x - np . mean ( x ) ) / ( np . max ( x ) - np . min ( x ) ) ) #NEWLINE#
main ( ) #NEWLINE#
app . add_directive ( 'svninclude' , directive_dwim ( SvnInclude ) ) #NEWLINE#
self . data [ column ] . add ( row ) #NEWLINE#
my_columns = [ 'a' , 'b' , 'c' ] #NEWLINE#
df . isnull ( ) . sum ( ) #NEWLINE#
GL . glOrtho ( - 1.0 , 1.0 , - 1.0 , 1.0 , - 1.0 , 1.0 ) #NEWLINE#
[ line for line in f1 ] #NEWLINE#
translate_non_alphanumerics ( '<foo>!' ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
service = __create_service ( ) #NEWLINE#
widget . show ( ) #NEWLINE#
print ( 'app=%r,#SPACE#path=%r' % ( _app , path ) ) #NEWLINE#
s = 'the#SPACE#brown#SPACE#fox' #NEWLINE# s = '#SPACE#' . join ( word [ 0 ] . upper ( ) + word [ 1 : ] for word in s . split ( ) ) #NEWLINE#
print ( A . T ) #NEWLINE#
ax2 . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
app . logger . debug ( 'A#SPACE#value#SPACE#for#SPACE#debugging' ) #NEWLINE#
b . swapaxes ( 0 , - 1 ) #NEWLINE#
stream . Close ( ) #NEWLINE#
pd . set_option ( 'display.max_columns' , 500 ) #NEWLINE#
escaped = re . escape ( a_string ) #NEWLINE#
ax . set_ylabel ( 'Quote#SPACE#($)' , size = 20 ) #NEWLINE#
C . objects . create ( a = a1 , b = b ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'right' ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sample_df [ 'col1' ] . shift ( ) #NEWLINE#
print ( xml . findtext ( './/age' ) ) #NEWLINE#
inputElement . submit ( ) #NEWLINE#
list ( Project . metadata . tables [ 'table1' ] . columns . keys ( ) ) #NEWLINE#
event_types = { 'as' : 0 , 'ah' : 0 , 'es' : 0 , 'eh' : 0 } #NEWLINE#
button . click ( ) #NEWLINE#
plt . imshow ( X , aspect = 'auto' ) #NEWLINE#
os . unlink ( tmpfile_name ) #NEWLINE#
'^myapp1/' , include ( 'myproject.myapp1.urls' ) #NEWLINE#
sorted_files = sorted ( all_files , key = os . path . getsize ) #NEWLINE#
img . save ( 'test.gif' , 'GIF' , transparency = 0 ) #NEWLINE#
print ( G . nodes ( ) ) #NEWLINE#
S = [ 5 , 5 ] #NEWLINE#
data = re . findall ( pattern , line ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
parser = etree . XMLParser ( remove_blank_text = True , strip_cdata = False ) #NEWLINE#
target_index = [ ( 'a1' , 'a2' ) , ( 'b1' , 'b2' ) , ( 'c1' , 'c2' ) ] #NEWLINE#
b = np . zeros ( ( 3 , 4 , 4 ) , dtype = np . int64 ) #NEWLINE#
datetime . datetime . fromtimestamp ( 0 ) + datetime . timedelta ( seconds = 2047570047 ) #NEWLINE#
file = open ( 'word1.txt:word2.txt' , 'w' ) #NEWLINE#
func . __code__ . co_freevars #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( df ) #NEWLINE#
pass #NEWLINE#
self . filelist . append ( zinfo ) #NEWLINE#
mlab . axes ( ) #NEWLINE#
gtk . main ( ) #NEWLINE#
print ( re . sub ( '\\s+' , '#SPACE#' , articletext , flags = re . M ) ) #NEWLINE#
self . setCentralWidget ( self . button ) #NEWLINE#
type ( a ) #NEWLINE#
xs = dict ( ( i , [ ] ) for i in range ( 2 ) ) #NEWLINE#
server . bind ( ( '' , 4000 ) ) #NEWLINE#
command = '\x89EV' #NEWLINE#
return reniced #NEWLINE#
eastern = timezone ( 'US/Eastern' ) #NEWLINE#
return self . cleaned_data [ 'my_field' ] #NEWLINE#
newprefix = prefix [ : ] #NEWLINE#
lstbox . grid ( column = 0 , row = 0 , columnspan = 2 ) #NEWLINE#
map ( lambda * x : sum ( x ) , list ( range ( 10 ) ) , list ( range ( 10 , 0 , - 1 ) ) , list ( range ( #NEWLINE# 0 , 20 , 2 ) ) ) #NEWLINE#
wx . Button . __init__ ( self , * a , ** k ) #NEWLINE#
print ( '{:b}' . format ( 123 ) ) #NEWLINE#
img = cv2 . imread ( '1.jpg' ) #NEWLINE#
matrix = np . random . randint ( 2 , size = ( row , col ) ) #NEWLINE#
m . fillcontinents ( color = '#C0C0C0' , lake_color = '#7093DB' ) #NEWLINE#
for item in mylist : #NEWLINE# #INDENT# item . update ( { 'elem' : 'value' } ) #NEWLINE#
development . py #NEWLINE#
p . wait ( ) #NEWLINE#
low_bit_list = [ ( byte & 1 ) for byte in bytearray ( fh . read ( ) ) ] #NEWLINE#
print ( [ [ '' . join ( x ) for k , x in itertools . groupby ( i , str . isalnum ) ] for i in z ] ) #NEWLINE#
rev_sorted = sorted ( paired , reverse = True , key = lambda x : x [ 1 ] ) #NEWLINE#
logger = logging . getLogger ( 'my-logger' ) #NEWLINE#
f . write ( line ) #NEWLINE#
print ( '{:<30}{:<30}{:<}' . format ( a , b , c ) ) #NEWLINE#
admin . site . register ( Post , PostAdmin ) #NEWLINE#
"""ac#SPACE#milan""" . title ( ) #NEWLINE#
pool . close ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
s [ 0 ] . astype ( 'timedelta64[s]' ) #NEWLINE#
return sum ( map ( doSomething , originalList ) , [ ] ) #NEWLINE#
States . is_state ( '__module__' ) #NEWLINE#
cv2 . imshow ( 'preview' , frame ) #NEWLINE#
print ( 'dummy1#SPACE#=#SPACE#%s,#SPACE#dummy2#SPACE#=#SPACE#%s' % ( 'one' , 'two' ) ) #NEWLINE#
result . append ( func ( e ) ) #NEWLINE#
nums . search ( '-123' ) . group ( 0 ) #NEWLINE#
nums . search ( '0.123' ) . group ( 0 ) #NEWLINE#
self . Bind ( wx . EVT_BUTTON , self . OnClick , b ) #NEWLINE#
validated_data . pop ( 'write_only_list_char_field' , None ) #NEWLINE#
string = 'string' + str ( i ) #NEWLINE#
[ ( 'a' , '1' ) , ( 'a' , '2' ) , ( 'b' , '1' ) , ( 'b' , '2' ) , ( 'c' , '1' ) , ( 'c' , '2' ) ] #NEWLINE#
exit ( 0 ) #NEWLINE#
[ False , False , False , False , False ] , #NEWLINE#
print ( gzip . open ( f , 'rt' ) . read ( ) ) #NEWLINE#
binary_f ( lambda v : v >= '2' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
s = [ 'Tiger#SPACE#6' , 'Shark#SPACE#4' , 'Cyborg#SPACE#8' ] #NEWLINE# sorted ( s , key = lambda x : int ( x [ - 1 ] ) ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
raise ValueError ( 'Unsupported#SPACE#type#SPACE#{0}' . format ( type ( v ) ) ) #NEWLINE#
re . sub ( '[^a-z]' , '' , s ) #NEWLINE#
queue = deque ( [ ] ) #NEWLINE#
df = df [ df . line_race != None ] #NEWLINE#
data = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE# np . repeat ( data , data [ : , ( - 1 ) ] , axis = 0 ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 , 3 ] , [ 3 , 4 , 5 ] ] ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
__init__ . py #NEWLINE#
[ '*random#SPACE#words*' , '*random#SPACE#words*' ] #NEWLINE#
self . buttonStart . clicked . connect ( self . worker . run ) #NEWLINE#
wn . synset ( 'dog.n.1' ) . name #NEWLINE#
b . doitinB ( ) #NEWLINE#
Base . metadata . create_all ( bind = db . engine ) #NEWLINE#
5 * np . ones ( ( 2 , 5 ) ) #NEWLINE#
return foo ( n - 1 ) + [ 1 ] #NEWLINE#
struct . pack ( '>h' , 1043 ) #NEWLINE#
re . findall ( '.+?\\b' , 'hello,#SPACE#foo' ) #NEWLINE#
connection . start ( ) #NEWLINE#
webdriver . ActionChains ( driver ) . move_to_element ( el ) . click ( el ) . perform ( ) #NEWLINE#
s . str . match ( '(b[x-y]+)' ) #NEWLINE#
ax . set_ylabel ( 'Amount' ) #NEWLINE#
app . run ( ) #NEWLINE#
m1 = np . zeros ( ( 50 , 50 ) ) #NEWLINE#
df . iloc [ - 6 : - 1 ] [ '2' ] #NEWLINE#
driver . quit ( ) #NEWLINE#
year = datetime . datetime . today ( ) . year #NEWLINE#
f . writelines ( file_lines ) #NEWLINE#
return '<i>' + str ( fn ( ) ) + '</i>' #NEWLINE#
print ( '|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#|' ) #NEWLINE#
tree = etree . parse ( 'books.xml' ) #NEWLINE#
return np . where ( self == value ) #NEWLINE#
tuples = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# [ item for t in tuples for item in t ] #NEWLINE#
pdb . run ( 'yourmodule.test()' ) #NEWLINE#
lib . some_function ( some_callback ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
from functools import reduce #NEWLINE# bin ( reduce ( lambda x , y : 256 * x + y , ( ord ( c ) for c in 'Hello#SPACE#world' ) , 0 ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
y [ 0 ] = 0 #NEWLINE#
df . replace ( '%' , '' , regex = True ) . astype ( 'float' ) / 100 #NEWLINE#
STATIC_ROOT = '/home/USER/public_html/static.MYDOMAIN.com/' #NEWLINE#
{ 'usage' : [ 0 , 2 , 2 , 5 , 7 ] , 'power' : [ 2 , 5 , 6 , 6 , 2 ] , 'time' : [ 1 , 2 , 3 , 4 , 5 ] } #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
a ( ) #NEWLINE#
Series ( [ ( s [ x ] + '#SPACE#my#SPACE#index#SPACE#is:#SPACE##SPACE#' + x ) for x in list ( s . keys ( ) ) ] , index = list #NEWLINE# ( s . keys ( ) ) ) #NEWLINE#
t0 = math . pow ( math . tan ( phi1 ) , 2 ) #NEWLINE#
searchfile . close ( ) #NEWLINE#
p . stdin . write ( 'cat\n' ) #NEWLINE#
plt . gca ( ) . set_aspect ( 'equal' ) #NEWLINE#
return [ add_number ( xi ) for xi in my_list ] #NEWLINE#
ax . add_line ( line_2 ) #NEWLINE#
text . append ( Paragraph ( 'This#SPACE#is#SPACE#line#SPACE#%d.' % i , styleN ) ) #NEWLINE#
[ '' . join ( chars ) for chars in product ( * zip ( s , cycle ( '*' ) ) ) ] #NEWLINE#
sys . path #NEWLINE#
logging . config . fileConfig ( 'logging.conf' ) #NEWLINE#
print ( colored ( 'hello' , 'red' ) , colored ( 'world' , 'green' ) ) #NEWLINE#
pattern2 = re . compile ( '\\s+' ) #NEWLINE#
plt . gca ( ) . add_patch ( rect ) #NEWLINE#
d = { 'a' : [ ] , 'b' : [ ] } #NEWLINE#
grid_2 . AddMany ( wx . StaticText ( self . panel , label = str ( i ) ) for i in range ( 30 ) ) #NEWLINE#
f . close ( ) #NEWLINE#
[ 'Fig.#SPACE#2#SPACE#shows#SPACE#a#SPACE#U.S.A.#SPACE#map.' ] #NEWLINE#
return zip ( a , b ) #NEWLINE#
A , = np . array ( M . T ) #NEWLINE#
sys . path . pop ( 0 ) #NEWLINE#
xml = '\n' . join ( node . toxml ( 'utf-8' ) for node in document . childNodes ) #NEWLINE#
stream = sys . argv [ 1 : ] and open ( sys . argv [ 1 ] ) or sys . stdin #NEWLINE#
print ( "Now#SPACE#you#SPACE#don't" ) #NEWLINE#
ax . set_autoscale_on ( False ) #NEWLINE#
search ( document , 'your#SPACE#search#SPACE#string' ) #NEWLINE#
print ( 'it#SPACE#was:#SPACE#%d' % number ) #NEWLINE#
return int ( bin ( n ) [ : 1 : - 1 ] , 2 ) #NEWLINE#
s = unicodedata . normalize ( 'NFC' , s ) #NEWLINE#
doc = etree . parse ( url ) #NEWLINE#
optimize . fmin ( func , x0 = [ y_estimate , z_estimate ] , args = data ) #NEWLINE#
elm = driver . find_element_by_xpath ( expression ) #NEWLINE#
result = ( x . sum ( ) ** 2 - x . dot ( x ) ) / 2 #NEWLINE#
print ( w . cget ( 'text' ) ) #NEWLINE# root . mainloop ( ) #NEWLINE#
assert diff_month ( datetime ( 2010 , 10 , 1 ) , datetime ( 2009 , 8 , 1 ) ) == 14 #NEWLINE#
lm . prob ( 'spain' , 'rain#SPACE#in' ) #NEWLINE#
self . image . set_pixbuf ( pixbuf ) #NEWLINE#
endstrings = [ '01$' , '02$' , '05$' ] #NEWLINE#
return session . query ( Workflow ) . get ( id ) #NEWLINE#
print ( match . encode ( 'UTF-8' ) ) #NEWLINE#
[ 'Jill' , 'Salads' , 'American#SPACE#Idol' ] , #NEWLINE#
[ 'Joe' , 'Hamburgers' , 'Cars' ] , #NEWLINE#
re . sub ( '(?<=foo)bar(?=baz)' , 'quux' , 'foobarbaz' ) #NEWLINE#
filtered_output . write ( line ) #NEWLINE#
psutil . cpu_times ( ) #NEWLINE#
super ( USPhoneNumberField , self ) . clean ( value ) #NEWLINE#
urllib . request . urlretrieve ( url , 'cite0.bib' ) #NEWLINE#
msglist . append ( hextotal [ start : start + 4096 ] ) #NEWLINE#
data . write ( c + n ) #NEWLINE#
l = [ [ ( 'a' , '1' ) , ( 'a' , '12' ) , ( 'a' , '3' ) ] , [ ( 'b' , '21' ) , ( 'b' , '31' ) ] , [ ( #NEWLINE# 'c' , '11' ) ] ] #NEWLINE#
b1 . insert ( END , item ) #NEWLINE#
pd . read_hdf ( '/Users/Alexander/Downloads/hdf.h5' , 'data' , columns = 'index' ) #NEWLINE#
new_name = re . sub ( '_+' , '_' , new_name ) #NEWLINE#
from scipy . sparse import csr_matrix #NEWLINE#
x . append ( ( i , j ) ) #NEWLINE#
dict ( zip ( fields , row ) ) #NEWLINE#
"""(OR#SPACE#(TO#SPACE#"tech163@fusionswift.com")#SPACE#(FROM#SPACE#"tech163@fusionswift.com"))""" #NEWLINE#
hex_str = '' . join ( [ hex ( i ) [ 2 : ] . zfill ( 2 ) . upper ( ) for i in range ( 256 ) ] ) #NEWLINE#
return True #NEWLINE#
test [ : , ( [ 0 ] ) ] #NEWLINE#
def n_lower_chars ( string ) : #NEWLINE# #INDENT# return sum ( 1 for c in string if c . islower ( ) ) #NEWLINE#
y = np . array ( [ - 1 , 1 , 1 , 1 , - 1 , 1 ] ) #NEWLINE#
controller2 . py #NEWLINE#
controllerapi . py #NEWLINE#
utilities . py #NEWLINE#
extfoo . py #NEWLINE#
array = np . ones ( ( n , n ) ) #NEWLINE#
hasattr ( a , 'missing' ) #NEWLINE#
words = { line . strip ( ) for line in file_a } #NEWLINE#
Cmd . cmd . __func__ ( ) #NEWLINE#
request . META [ 'QUERY_STRING' ] #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
data = pd . concat ( [ data , stock_data ] , axis = 1 ) #NEWLINE#
print ( 'success' ) #NEWLINE#
self . window . fullscreen ( ) #NEWLINE#
os . system ( 'python' ) #NEWLINE#
return Image . open ( path ) . _getexif ( ) [ 36867 ] #NEWLINE#
data = cursor . fetchone ( ) [ 0 ] #NEWLINE#
math . degrees ( math . atan ( 1.18 ) ) #NEWLINE#
Category . objects . get ( pk = 2 ) . get_descendants ( include_self = True ) #NEWLINE#
client . close ( ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
np . array ( [ [ '1' ] , [ '3' ] , [ 'w' ] ] ) #NEWLINE#
cv . SetCaptureProperty ( video2 , cv . CV_CAP_PROP_FRAME_WIDTH , 800 ) #NEWLINE#
my_df . to_csv ( 'mypath/' + k + '.csv' ) #NEWLINE#
df . vals . plot ( kind = 'kde' , ax = ax , label = label ) #NEWLINE#
print ( open ( my_module . __file__ ) . read ( ) ) #NEWLINE#
parse_datetime ( '2013-07-23T15:10:59.342107+01:00' ) #NEWLINE#
os . execl ( '/bin/cat' , 'cat' , '-n' ) #NEWLINE#
ax . set_ylim3d ( [ - 1 , 9 ] ) #NEWLINE#
conn . request ( 'POST' , report_path , bulkData , headers ) #NEWLINE#
new_list = [ re . sub ( '\\.(?=[^.]*$)' , '.#SPACE#-#SPACE#' , s ) for s in old_list ] #NEWLINE#
name = name [ len ( list ( filter ( name . startswith , prefixes + [ '' ] ) ) [ 0 ] ) : ] #NEWLINE#
ax . set_ylabel ( '$y$' ) #NEWLINE#
conn . search ( query = Search ( s ) , indexes = [ 'test' ] , sort = '_score,price:desc' ) #NEWLINE#
L . pop ( i ) #NEWLINE#
if all ( x > 3 for x in lst ) : #NEWLINE# #INDENT# do_stuff ( ) #NEWLINE#
yield self . queue . read ( ) #NEWLINE#
img = Image . open ( 'image.jpg' ) #NEWLINE#
plt . title ( 'Simplest#SPACE#default#SPACE#with#SPACE#labels' ) #NEWLINE#
def get ( self ) : #NEWLINE# #INDENT# referer = self . request . headers . get ( 'Referer' ) #NEWLINE#
yield [ row [ i ] for row in matrix ] #NEWLINE#
self . image . show ( ) #NEWLINE#
text = Tkinter . Text ( ) #NEWLINE#
fin . close ( ) #NEWLINE#
df . loc [ g . groups [ 1 ] ] #NEWLINE#
axes . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ ( x [ 0 : index ] + x [ index + 1 : ] ) for x in L ] #NEWLINE#
s . groupby ( s . index ) . first ( ) #NEWLINE#
return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ] #NEWLINE#
'hello#SPACE#%s#SPACE#,#SPACE#how#SPACE#are#SPACE#you#SPACE#%s,#SPACE#welcome#SPACE#%s' % tuple ( [ 'john' ] * 3 ) #NEWLINE#
parser . parse ( 'November#SPACE#6,#SPACE#2012' ) #NEWLINE#
return dt . replace ( microsecond = int ( parts [ 1 ] ) ) #NEWLINE#
plt . gca ( ) . add_artist ( mynewline ) #NEWLINE#
sys . maxunicode #NEWLINE#
return Counter ( L ) . most_common ( 1 ) [ 0 ] #NEWLINE#
data = np . asarray ( img , dtype = 'int32' ) #NEWLINE#
merged = pd . merge ( df1 , df2 , on = [ 'A' , 'B' ] , how = 'outer' , suffixes = ( '' , '_y' ) ) #NEWLINE#
new_list = [ foo for foo in foos if foo . location == 2 ] #NEWLINE#
plt . gca ( ) . xaxis . set_major_locator ( MinuteLocator ( byminute = list ( range ( 0 , 60 , #NEWLINE# 10 ) ) ) ) #NEWLINE#
list ( map ( int , str ( 634 ) ) ) #NEWLINE#
a [ 'price' ] = 0 #NEWLINE#
print ( mystr + ',#SPACE#' . join ( fruits ) ) #NEWLINE#
pattern = re . compile ( '(?<!\\{)\\{(?!\\{).*?(?<!\\})\\}(?!\\})' ) #NEWLINE#
[ 'ab' , 'abc' , 'aÃ¡' ] #NEWLINE# [ 'aÃ¡' , 'ab' , 'abc' ] #NEWLINE#
[ 0 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 3 ] #NEWLINE#
zip ( * ( [ iter ( nums ) ] * 2 ) ) #NEWLINE#
{ 'Card#SPACE#balance' : '$18.30' , 'Card#SPACE#name' : 'NAMEn' , 'Account#SPACE#holder' : 'NAME' , #NEWLINE# 'Card#SPACE#number' : '1234' , 'Status' : 'Active' } #NEWLINE#
fig , ax = plt . subplots ( figsize = ( 8 , 8 ) ) #NEWLINE#
"""(use#SPACE#\\`make#SPACE#info'#SPACE#here#SPACE#to#SPACE#do#SPACE#that#SPACE#automatically).""" #NEWLINE#
return 'some_func(' + d + ');' #NEWLINE#
pd . get_dummies ( s ) . idxmax ( 1 ) #NEWLINE#
MyButton3 . grid ( row = 2 , column = 0 ) #NEWLINE#
return len ( list ( it ) ) #NEWLINE#
{ 'word' , 'word#SPACE#1' , 'word#SPACE#2' } . issubset ( [ 'desk' , 'chair' , 'lamp' ] ) #NEWLINE#
f . seek ( 0 , 0 ) #NEWLINE#
df [ 'date' ] = df [ 'time' ] . apply ( lambda x : x . date ( ) ) #NEWLINE# df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
print ( 'FIXED#SPACE#FLOAT#SPACE#{0!r}' . format ( x ) ) #NEWLINE#
print ( 'FIXED#SPACE#COMPLEX#SPACE#{0!r}' . format ( x ) ) #NEWLINE#
print ( tag [ 'href' ] ) #NEWLINE#
dict_of_lists [ key ] . append ( val ) #NEWLINE#
format ( 'blah' ) #NEWLINE#
print ( ( 'length' , 'none' , 'some' , 'lots' ) ) #NEWLINE#
[ next ( generator ) for _ in range ( n ) ] #NEWLINE#
ax . plot ( list ( range ( 50 ) ) , 'b' , linewidth = 1.5 ) #NEWLINE#
welcome_button = browser . find_element_by_class_name ( 'welcomeLoginButton' ) #NEWLINE#
entry . bind ( '<Key>' , key ) #NEWLINE#
ax . set_xticks ( np . linspace ( 0 , 2 * np . pi , 5 ) ) #NEWLINE#
ax1 . xaxis . set_major_locator ( xloc ) #NEWLINE#
conn = httplib . HTTPConnection ( 'http://223.56.124.58:8080/wireless' ) #NEWLINE#
x . append ( sublist [ 0 ] ) #NEWLINE#
return flask . Response ( event_stream ( ) , mimetype = 'text/event-stream' ) #NEWLINE#
L4 = list ( item for item in L1 if item not in unwanted ) #NEWLINE#
os . chdir ( '/tmp/foo' ) #NEWLINE#
dt = dateutil . parser . parse ( 'Mon#SPACE#Jul#SPACE#09#SPACE#09:20:28#SPACE#+0200#SPACE#2012' ) #NEWLINE#
time . sleep ( duration ) #NEWLINE#
pass #NEWLINE#
foo . module_method ( ) #NEWLINE#
os . path . normpath ( path1 ) in ( os . path . normpath ( p ) for p in list_of_paths ) #NEWLINE#
list ( chain . from_iterable ( zip ( a , reversed ( a ) ) ) ) [ : len ( a ) ] #NEWLINE#
"""""" . join ( x for x in string_to_modify if x not in remove_these ) #NEWLINE#
print ( users . __table__ . select ( ) ) #NEWLINE#
self . variable_evidence . arrays . append ( self . basic_in ) #NEWLINE#
np . finfo ( np . float ) . eps #NEWLINE#
self . finish ( ) #NEWLINE#
print ( 'ĉ' . upper ( ) ) #NEWLINE#
return arr [ ( arr [ : , ( 0 ) ] >= xmin ) & ( arr [ : , ( 0 ) ] <= xmax ) ] #NEWLINE#
cv . ShowImage ( '180_rotation' , orig ) #NEWLINE#
arr = np . array ( [ 100.1 , 200.42 , 4.14 , 89.0 , 34.55 , 1.12 ] ) #NEWLINE#
Thaidump ( text ) #NEWLINE#
ax . set_ylabel ( 'RPS/Watt' , fontsize = 35 ) #NEWLINE#
self . response . out . write ( 'Some#SPACE#output#SPACE#here' ) #NEWLINE#
response = urllib . request . urlopen ( URL , parameter ) #NEWLINE# print ( response . read ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
f = codecs . open ( 'unicode.rst' , encoding = 'utf-8' ) #NEWLINE#
a [ 0 ] = np . nan #NEWLINE#
outfp . write ( 'END#SPACE#PAGE#SPACE#%d\n' % i ) #NEWLINE#
def quit ( self ) : #NEWLINE# #INDENT# self . root . destroy ( ) #NEWLINE#
data = [ ( b [ 1 ] , p , b [ 0 ] , b [ 2 ] ) for p , b in list ( rays_starters . items ( ) ) ] #NEWLINE#
b = a . split ( [ 3 , 4 ] ) #NEWLINE#
is_main_user = models . BooleanField ( default = False ) #NEWLINE#
"""dec:#SPACE#{0}/oct:#SPACE#{0:#o}/hex:#SPACE#{0:#X}""" . format ( i ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . path . append ( '../' ) #NEWLINE#
image . show ( ) #NEWLINE#
'xyz/foo/bar' . format ( Pluralizer ( 2 ) ) == 'xyzbar' #NEWLINE#
category = models . ForeignKey ( Category , related_name = 'participants' ) #NEWLINE#
A = np . array ( [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ) #NEWLINE#
print ( term . move ( term . height - 1 , 0 ) ) #NEWLINE#
a [ i1 , i2 , i ] #NEWLINE#
msvcrt . get_osfhandle ( a . fileno ( ) ) #NEWLINE#
os . path . isfile ( 'bob.txt' ) #NEWLINE# os . path . isdir ( 'bob' ) #NEWLINE#
print ( tweet [ 'text' ] ) #NEWLINE#
return pd . Series ( np . nanmean ( val . reshape ( - 1 , k ) , axis = 1 ) ) #NEWLINE#
xmljson . parker . etree ( { 'ul' : { 'li' : [ 1 , 2 ] } } ) #NEWLINE#
msg . send ( ) #NEWLINE#
return choice ( SHOP1_CHOICES , SHOP3_CHOICES ) #NEWLINE#
project_phase = get_model ( 'core' , 'project_phase' ) #NEWLINE#
df [ 'value' ] . ffill ( ) #NEWLINE#
os . makedirs ( final_path ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
math . factorial ( n ) #NEWLINE#
[ ( i - set . union ( * [ j for j in allsets if j != i ] ) ) for i in allsets ] #NEWLINE#
text . pack ( ) #NEWLINE#
re . search ( '\\d+|$' , 'aa33bbb44' ) . group ( ) #NEWLINE#
dict ( ( k . lower ( ) , v ) for k , v in d . items ( ) ) #NEWLINE#
return HttpResponse ( <STR0> ( resp ) ) #NEWLINE#
print ( re . sub ( '(wolf.*chicken)|\\bate\\b' , repl , x ) ) #NEWLINE#
df . reset_index ( inplace = True ) #NEWLINE#
fields = [ 'name' , 'population' , 'coordinates' , 'capital' , 'state_bird' ] #NEWLINE#
q = db . GqlQuery ( 'SELECT#SPACE#__key__#SPACE#FROM#SPACE#MyModel' ) #NEWLINE#
engine = create_engine ( 'postgresql://u:p@host/database' ) #NEWLINE#
s . groupby ( idx ) . mean ( ) #NEWLINE#
module . myif . __init__ ( self ) #NEWLINE#
d = { 'key1' : 'value1' , 'key2' : 'value2' } #NEWLINE#
cur . execute ( query , parameters ) #NEWLINE#
set ( tuple1 ) . issubset ( tuple2 ) #NEWLINE#
mylist = [ [ 'a1' ] , [ 'a2' ] , [ 'c1' ] , [ 'b1' ] ] #NEWLINE#
sum ( itervalues ( d ) ) #NEWLINE#
instance = YourModel ( name = value , image = self . get_image_file ( ) ) #NEWLINE#
value = np . ctypeslib . as_array ( value ) . tolist ( ) #NEWLINE#
r . json ( ) #NEWLINE#
a = [ [ 1 , 100313 ] , [ 2 , 100313 ] , [ 1 , 100314 ] , [ 3 , 100315 ] ] #NEWLINE#
do_something_with ( foo ) #NEWLINE#
fifth_period_slope = np . diff ( y [ : : 5 ] ) / np . diff ( x [ : : 5 ] ) #NEWLINE#
tree = scipy . spatial . cKDTree ( array_of_coordinates ) #NEWLINE#
return abs ( a - b ) <= max ( rel_tol * max ( abs ( a ) , abs ( b ) ) , abs_tol ) #NEWLINE#
sorted ( [ 'Some' , 'words' , 'sort' , 'differently' ] , key = lowercased ) #NEWLINE#
dict ( d2 , ** d1 ) #NEWLINE#
plt . ylabel ( 'Delay#SPACE#Incident' ) #NEWLINE#
super ( T3 , self ) . __init__ ( ) #NEWLINE#
raise TypeError ( 'forrange#SPACE#stop#SPACE#argument#SPACE#must#SPACE#be#SPACE#an#SPACE#int' ) #NEWLINE#
raise TypeError ( 'forvalue.update#SPACE#value#SPACE#must#SPACE#be#SPACE#an#SPACE#int' ) #NEWLINE#
{ ( key , val ) for key , val in list ( mime_types . items ( ) ) if 'image/tiff' == val } #NEWLINE#
df2 = pd . DataFrame ( index = df1 . index . copy ( ) ) #NEWLINE#
line = line . rstrip ( '\n' ) #NEWLINE#
df . to_csv ( out_csv , index = False , header = False , mode = 'a' , chunksize = chunksize ) #NEWLINE#
image = Image . open ( file ) #NEWLINE#
CMD [ '/usr/bin/pip' , 'install' , '-r' , '/root/sourceCode/requirements.txt' ] #NEWLINE#
self . assertEqual ( self . get_context_variable ( 'var1' ) , 'value#SPACE#1' ) #NEWLINE#
input_str = re . sub ( '\\W' , '' , input_str ) . strip ( ) #NEWLINE#
print ( end . strftime ( '%d/%b/%Y' ) ) #NEWLINE#
df = df [ df . line_race != 0 ] #NEWLINE#
np . unravel_index ( np . ravel_multi_index ( ( 10 , 1 , 2 ) , arr1 . shape ) , arr2 . shape ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
all ( not element for element in data ) #NEWLINE#
print ( 'hello#SPACE#this#SPACE#is#SPACE#a#SPACE#test' . decode ( 'base64' ) ) #NEWLINE#
num = int ( s . encode ( 'hex' ) , 16 ) #NEWLINE#
input = open ( 'input.txt' , 'r' ) #NEWLINE#
min ( [ s for s in lst if isinstance ( s , str ) ] ) #NEWLINE#
list_of_pixels = list ( im . getdata ( ) ) #NEWLINE#
A . b #NEWLINE#
turtle . mainloop ( ) #NEWLINE#
np . sum ( np . array ( s1 ) . reshape ( - 1 , 3 ) , axis = 1 ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
[ 'a#SPACE#1#SPACE#a' , 'a#SPACE#2#SPACE#a' , 'a#SPACE#3#SPACE#a' , 'a#SPACE#4#SPACE#a' ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
eval ( 'u"' + s . replace ( '"' , '\\"' ) + '"' ) . encode ( 'ascii' ) #NEWLINE#
response = urllib . request . urlopen ( HeadRequest ( 'http://google.com/index.html' ) ) #NEWLINE#
"""foo#SPACE#is#SPACE#{foo},#SPACE#bar#SPACE#is#SPACE#{bar}#SPACE#and#SPACE#baz#SPACE#is#SPACE#{baz}""" . format_map ( d ) #NEWLINE#
arr = np . array ( arr_ip , dtype = dtyp ) #NEWLINE#
datetime . datetime . strptime ( '11/12/98' , '%m/%d/%y' ) #NEWLINE#
[ [ [ 1 ] ] [ [ 2 ] ] ] #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
bp = p_df . groupby ( 'class' ) . plot ( kind = 'kde' , ax = ax ) #NEWLINE#
df . sum ( ) #NEWLINE#
signal . signal ( signal . SIGINT , handler ) #NEWLINE#
Image . open ( 'kHrY6.png' ) . convert ( 'RGBA' ) . save ( 'kHrY6-out.png' ) #NEWLINE#
average_word_length ( [ 'James#SPACE#Fennimore#SPACE#Cooper\n' , 'Peter,#SPACE#Paul#SPACE#and#SPACE#Mary\n' ] ) #NEWLINE#
return string [ : index ] + '-' + string [ index : ] #NEWLINE#
a = np . empty ( ( 15 , ) ) #NEWLINE#
super ( Alpha2 , self ) . __init__ ( s ) #NEWLINE#
super ( Alpha3 , self ) . __init__ ( s ) #NEWLINE#
np_data = np . zeros ( ( 10 , 10 ) , dtype = np . float32 ) #NEWLINE#
return ',' . join ( result ) #NEWLINE#
mymodel . objects . filter ( pk = a [ i ] ) . update ( attr = i ) #NEWLINE#
return queryset . filter ( ** { 'attributes__type' : value } ) #NEWLINE#
return [ i for i , v in enumerate ( a ) if v in b_set ] #NEWLINE#
print ( name . title ( ) ) #NEWLINE#
[ 0 , 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 ] #NEWLINE#
df_both . swaplevel ( 0 , 1 ) . sort_index ( ) . swaplevel ( 0 , 1 ) #NEWLINE#
x = list ( y ) #NEWLINE#
self . pot . temperatureRaisedSignal . connect ( self . temperatureWarning ) #NEWLINE#
re . findall ( '[0-9]+' , 'GoTo:#SPACE#7018#SPACE#6453#SPACE#12654\n' ) #NEWLINE#
print ( config . getboolean ( 'example' , 'is_real' ) ) #NEWLINE#
re . split ( '(\\W+)' , 'Words,#SPACE#words,#SPACE#words.' ) #NEWLINE#
plt . show ( ) #NEWLINE#
{ { post . text | markdown } } #NEWLINE#
return self . user . username #NEWLINE#
return self . get_solr_results ( ) #NEWLINE#
return df #NEWLINE#
widget . setWindowFlags ( QtCore . Qt . Widget ) #NEWLINE#
im . save ( 'tiger.png' ) #NEWLINE#
dfA . drop ( labels = [ - 1 ] , level = 'index' , inplace = True ) #NEWLINE#
check_call ( ( 'taskkill' , '/PID' , str ( p . pid ) ) , stdout = DEVNULL , stderr = STDOUT ) #NEWLINE#
print ( et . tostring ( tree ) ) #NEWLINE#
item [ 'start_url' ] = response . meta [ 'start_url' ] #NEWLINE#
ax . spines [ 'left' ] . set_position ( 'zero' ) #NEWLINE#
params = { 'file' : open ( sys . argv [ 1 ] , 'rb' ) , 'name' : 'upload#SPACE#test' } #NEWLINE#
print ( 'Running#SPACE#in#SPACE#Command#SPACE#line' ) #NEWLINE#
plt . show ( ) #NEWLINE#
button . show ( ) #NEWLINE#
a2 . append ( float ( s ) ) #NEWLINE#
[ 0 ] [ 0 ] [ 2 ] #NEWLINE#
repo . push ( ) #NEWLINE#
self . assertEqual ( resp . json , { 'expected' : 'json#SPACE#response#SPACE#msg#SPACE#as#SPACE#dict' } ) #NEWLINE#
lexobj . writetab ( lextab , outputdir ) #NEWLINE#
client = paramiko . SSHClient ( ) #NEWLINE#
return ( lst [ i ] for i in indices ) #NEWLINE#
resolve ( request . path ) . app_name #NEWLINE#
""",#SPACE#""" . join ( '123' ) #NEWLINE#
weighted_choice ( [ ( 'WHITE' , 90 ) , ( 'RED' , 8 ) , ( 'GREEN' , 2 ) ] ) #NEWLINE#
RNA_list = [ 'C' , 'G' , 'A' , 'U' ] #NEWLINE#
b [ a ] = 10 #NEWLINE#
f . close ( ) #NEWLINE#
len ( [ x for x in a_list if x [ 0 ] == 1 ] ) > 0 #NEWLINE#
return super ( ) . __new__ ( metacls , name , bases , attrs ) #NEWLINE#
fig . subplots_adjust ( bottom = 0.2 ) #NEWLINE#
print ( lxml . html . tostring ( lxml . html . parse ( 'http://www.google.com' ) ) ) #NEWLINE#
my_list = [ [ 'a' ] , [ 'a' ] , [ 'b' ] , [ 'c' ] ] #NEWLINE# remove_extras_and_sort ( my_list ) #NEWLINE#
ax2 . set_xticklabels ( new_labels ) #NEWLINE#
[ 1 , 1 , 2 , 2 , 3 , 3 ] #NEWLINE#
plt . imshow ( Z ) #NEWLINE#
datetime . utcfromtimestamp ( timestamp1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
args = parser . parse_args ( sys . argv [ 1 : ] ) #NEWLINE#
s . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
cursor . execute ( 'PRAGMA#SPACE#foreign_keys#SPACE#=#SPACE#ON;' ) #NEWLINE#
out = np . convolve ( d , ker , mode = 'valid' ) [ : : 2 ] #NEWLINE#
( lambda : 1 ) == ( lambda : 1 ) #NEWLINE#
g = nx . Graph ( ) #NEWLINE#
foo . x #NEWLINE#
'social.pipeline.user.create_user' , #NEWLINE#
print ( sum ( i * i for i in l ) ) #NEWLINE#
a = [ [ 'John' , 'Sergeant#SPACE#' ] , [ 'Jack' , 'Commander#SPACE#' ] , [ 'Jill' , 'Captain#SPACE#' ] ] #NEWLINE#
sys . stdout . write ( 'regex#SPACE#found#SPACE#{}\n' . format ( line ) ) #NEWLINE#
SQLALCHEMY_DATABASE_URI = 'mysql://username:password@host:port/db_name' #NEWLINE#
np . argpartition ( a , idx ) #NEWLINE#
im . save ( 'screenshot.png' ) #NEWLINE#
img . save ( 'result.png' ) #NEWLINE#
stores . groupby ( level = [ 0 , 1 , 2 , 3 ] ) . sum ( ) . unstack ( ) . fillna ( 0 ) #NEWLINE#
a = models . Achievement ( name = "Played#SPACE#Mirror's#SPACE#Edge™" . encode ( 'UTF-8' ) ) #NEWLINE#
cbb . set_label ( 'negative' ) #NEWLINE#
{ 'name3' : [ 'name5' ] , 'name2' : [ 'name4' , 'name6' , 'name5' ] , 'name1' : [ 'name' , #NEWLINE# 'name4' ] , 'name' : [ 'name2' , 'name3' ] } #NEWLINE#
[ [ 1 , 3 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
print ( max ( b - a for a , b in pairwise ( values ) ) ) #NEWLINE#
img . save ( '../img/' , img . format ) #NEWLINE#
tested = np . random . rand ( 20 , 3 ) #NEWLINE#
plt . legend ( ) #NEWLINE#
markup = """<div><div><span>a</span><span>b</span>#NEWLINE#<a>link</a></div><a>link1</a><a>link2</a></div>""" #NEWLINE# stripped_markup = markup . replace ( '{' , '{{' ) . replace ( '}' , '}}' ) #NEWLINE# stripped_markup = BeautifulSoup ( stripped_markup ) #NEWLINE# unformatted_tag_list = [ ] #NEWLINE# for i , tag in enumerate ( stripped_markup . find_all ( [ 'span' , 'a' ] ) ) : #NEWLINE# #INDENT# unformatted_tag_list . append ( str ( tag ) ) #NEWLINE# tag . replace_with ( '{' + 'unformatted_tag_list[{0}]' . format ( i ) + '}' ) #NEWLINE# pretty_markup = stripped_markup . prettify ( ) . format ( unformatted_tag_list = #NEWLINE# unformatted_tag_list ) #NEWLINE# print ( pretty_markup ) #NEWLINE#
np . einsum ( 'ijk,k->ij' , dists , [ 1 , 1 , 1 , 1 ] ) #NEWLINE#
super ( Widget , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
[ [ 0 , 1 , 3 , 8 , 10 , 13 , 13 ] , [ 13 , 13 , 8 , 4 ] , [ 11 , 5 , 1 , 0 ] ] #NEWLINE#
self . tn . write ( '\n' ) #NEWLINE#
"""(?!\\{)""" #NEWLINE#
""".*?""" #NEWLINE#
"""(?<!\\})""" #NEWLINE#
"""\\}""" #NEWLINE#
newest = min ( glob . iglob ( 'upload/*.log' ) , key = os . path . getctime ) #NEWLINE#
scipy . linalg . lstsq ( np . dot ( W , X ) , np . dot ( W * signal ) ) #NEWLINE#
w . show_all ( ) #NEWLINE#
pcap_lookupnet ( dev , ctypes . byref ( mask ) , ctypes . byref ( net ) , errbuf ) #NEWLINE#
button . config ( state = 'disabled' ) #NEWLINE#
f = theano . function ( [ x ] , y ) #NEWLINE#
data = { 'name' : 'hello' , 'data[]' : [ 'hello' , 'world' ] } #NEWLINE# response = requests . get ( 'http://example.com/api/add.json' , params = data ) #NEWLINE#
fh . write ( imgData . decode ( 'base64' ) ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
setattr ( cls , attr_name , prop ) #NEWLINE#
list ( nx . weakly_connected_component_subgraphs ( G ) ) #NEWLINE#
STATICFILES_DIRS = '/path/to/my_project/my_app/static/' , #NEWLINE#
df [ [ 'SAMPLE' , 'T' , 'G' , 'C' , '-' ] ] . groupby ( 'SAMPLE' ) . agg ( sum ) . astype ( int ) #NEWLINE#
ax0b . plot ( x , y ) #NEWLINE#
ax0c . plot ( x , y ) #NEWLINE#
onfalse ( ) #NEWLINE#
print ( df . loc [ df [ 'buyer_id' ] == 261 , 'buyer_id' ] ) #NEWLINE#
CELERY_RESULT_SERIALIZER = 'myjson' #NEWLINE#
mysignal . connect_via ( app ) ( print_howdy ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
app . run ( ) #NEWLINE#
root = Tk ( ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
serializer = NewModelSerializer ( data = request . data , context = context ) #NEWLINE#
win . show_all ( ) #NEWLINE#
zip ( * elements ) #NEWLINE#
return redirect ( url_for ( 'static' , filename = 'hi.html' ) ) #NEWLINE#
print ( 'Answer:#SPACE#' + '#SPACE#' . join ( word_list ) ) #NEWLINE#
str ( data_from_file , 'unicode_escape' ) . encode ( 'utf8' ) #NEWLINE#
list ( incremental_window ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] ) ) #NEWLINE#
any ( 1 in d for d in lod ) #NEWLINE#
urlparse ( request . url ) . query #NEWLINE#
{ ( 1 , 1 ) : something } #NEWLINE#
CELERY_ROUTES = { 'app.get_status' : { 'queue' : 'a.example.com' } } #NEWLINE#
post_save . connect ( create_user_profile , sender = User ) #NEWLINE#
process . kill ( ) #NEWLINE#
{ 'fizz' : [ 123.0 ] , 'foo' : array ( [ 'barbat' ] , dtype = object ) } #NEWLINE#
mp = { 'ó' : 'o' , 'í' : 'i' } #NEWLINE#
[ ( x + y ) for x in 'cat' for y in 'potty' ] #NEWLINE#
print ( y . shape ) #NEWLINE#
data [ 'After' ] = data [ 'Before' ] + [ ( '_' * i ) for i in diffs_ ] #NEWLINE#
self . assertRaises ( TypeError , ukol1 . SummaryFormula , 'testtest' ) #NEWLINE#
decimal . Decimal ( '3.14' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df = sc . parallelize ( [ row ( 0 , 1 , 2 ) , row ( None , 3 , 4 ) , row ( None , None , 5 ) ] ) . toDF ( ) #NEWLINE#
list_of_coords = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 7 , 8 ) , ( 9 , 10 ) , ( 11 , 12 ) ] #NEWLINE#
[ 'A' , 'B' , 'C' , 'D' , 'E' ] #NEWLINE#
raise TypeError ( node ) #NEWLINE#
DATABASE_ROUTERS = [ 'app1.dbRouter.App1DBRouter' , 'app2.dbRouter.App2DBRouter' ] #NEWLINE#
return func ( * args , ** kw ) #NEWLINE#
s [ : s . find ( '23' ) ] #NEWLINE#
print ( aiff_file . nframes / float ( aiff_file . samplerate ) ) #NEWLINE#
ax . set_xlim ( datetime . datetime ( 2013 , 1 , 1 ) , datetime . datetime ( 2013 , 1 , 31 ) ) #NEWLINE#
multirange ( [ 1 , 2 , 3 ] ) #NEWLINE#
plot ( xx , mvals , linewidth = 3 , color = 'red' ) #NEWLINE#
m . toarray ( ) #NEWLINE#
import imp #NEWLINE# imp . reload ( sys . modules [ key ] ) #NEWLINE#
d . setdefault ( y , [ ] ) . append ( x ) #NEWLINE#
print ( '#SPACE#' . join ( words [ index : index + n + 1 ] ) ) #NEWLINE#
pd . DataFrame ( { n : c . apply ( lambda x : x . get ( n , 0 ) ) for n in wordlist } ) #NEWLINE#
session = requests . Session ( ) #NEWLINE#
fid . close ( ) #NEWLINE#
[ 0 ] * A + [ 1 ] * B #NEWLINE#
img = Image . new ( 'RGB' , ( 200 , 100 ) ) #NEWLINE#
binascii . hexlify ( bytearray ( array_alpha ) ) #NEWLINE#
wavf . write ( out_wav , fs , out_data ) #NEWLINE#
States . is_state ( 'FL' ) #NEWLINE#
States . is_state ( 'is_state' ) #NEWLINE#
print ( 'hash#SPACE#value:#SPACE#%032x' % hash ) #NEWLINE#
subprocess . call ( [ 'scp' , filepath , ':' . join ( [ hostname , remote_path ] ) ] ) #NEWLINE#
print ( p . stdout . read ( ) ) #NEWLINE#
pandas . rolling_apply ( x2 , 3 , foo , min_periods = 2 ) #NEWLINE#
STATICFILES_DIRS = [ join ( BASE_DIR , 'static' ) ] #NEWLINE#
[ ( car . pop ( 0 ) if item else a . pop ( 0 ) ) for item in lyst ] #NEWLINE#
dic [ g ] [ y ] = df [ ( df [ Gender ] == g ) & ( df [ Year ] == y ) ] #NEWLINE#
validate ( yaml . load ( bad_instance ) , yaml . load ( schema ) ) #NEWLINE#
shutil . rmtree ( 'dist' , ignore_errors = True ) #NEWLINE#
rdd1 = sc . parallelize ( [ ( 'foo' , 1 ) , ( 'bar' , 2 ) , ( 'baz' , 3 ) ] ) #NEWLINE#
new_list = [ v for v in a if v not in b ] #NEWLINE#
decoded = raw . decode ( 'utf-8' ) #NEWLINE#
dict_out = { unq [ i ] : iterID for i , iterID in enumerate ( indices ) } #NEWLINE#
s = "I#SPACE#love#SPACE#cookies.#SPACE#yes#SPACE#I#SPACE#do.#SPACE#Let's#SPACE#see#SPACE#a#SPACE#dog." #NEWLINE# s . split ( ) #NEWLINE#
app . start ( ) #NEWLINE#
cv2 . imwrite ( 'out.png' , out ) #NEWLINE#
form = PostForm ( obj = post ) #NEWLINE#
""""xxx\"""" [ : - 1 ] #NEWLINE#
sizer . Add ( self . canvas , 1 , wx . EXPAND ) #NEWLINE#
np . put ( out , np . ravel_multi_index ( idx . T , dims ) , vals ) #NEWLINE#
cv2 . imshow ( 'im' , im ) #NEWLINE#
cb = plt . colorbar ( sc , ax = ax1 , aspect = 10 , format = Myfmt ( ) ) #NEWLINE#
gs1 . update ( wspace = 0.025 , hspace = 0.05 ) #NEWLINE#
yylex ( ) #NEWLINE#
sys . stderr = MyStream ( ) #NEWLINE#
admin . site . register ( User , UserProfileAdmin ) #NEWLINE#
row = cursor . fetchmany ( 10 ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sorted ( a ) == sorted ( b ) #NEWLINE#
return math . floor ( math . log ( n , 2 ) ) + 1 #NEWLINE#
f . write ( sio . getvalue ( ) ) #NEWLINE#
num_fatals += 1 #NEWLINE#
board3 = [ [ 1 , 0 , 1 ] , [ 1 , 1 , 1 ] , [ 0 , 1 , 0 ] ] #NEWLINE#
server . run ( ) #NEWLINE#
print ( 'affected#SPACE#rows#SPACE#=#SPACE#{}' . format ( cursor . rowcount ) ) #NEWLINE#
print ( textarea . get_attribute ( 'rows' ) ) #NEWLINE#
func = yad ( list_of_decorators ) ( func ) #NEWLINE#
blogpost . tags [ : ] = new_tags #NEWLINE#
writer . writerow ( row ) #NEWLINE#
isinstance ( amodule , __builtins__ . __class__ ) #NEWLINE#
super ( ThumbListWidget , self ) . dropEvent ( event ) #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 3 ) ) #NEWLINE#
engine = create_engine ( 'sqlite://' ) #NEWLINE#
result = [ y for x in os . walk ( PATH ) for y in glob ( os . path . join ( x [ 0 ] , '*.txt' ) ) ] #NEWLINE#
HTMLParser . HTMLParser . __init__ ( self ) #NEWLINE#
ax = fig . add_subplot ( 111 , polar = True ) #NEWLINE#
s = '1989,#SPACE#1990' #NEWLINE# [ x . strip ( ) for x in s . split ( ',' ) ] #NEWLINE#
scatter = ax . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) ) #NEWLINE#
QtGui . QFrame . __init__ ( self , parent ) #NEWLINE#
f = open ( 'file.txt' , 'rU' ) #NEWLINE#
conn . request ( 'GET' , '/oauth/access_token?' + params ) #NEWLINE#
sc . addPyFile ( 'model.py' ) #NEWLINE#
print ( m . group ( 1 ) . rstrip ( ) ) #NEWLINE#
one , four , ten = [ lst [ i ] for i in [ 1 , 4 , 10 ] ] #NEWLINE#
self . send_header ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
df [ 'Age_Group' ] [ df [ 'Age' ] < 18 ] = '<18' #NEWLINE#
s . find ( '$' ) != - 1 #NEWLINE#
print ( 'But#SPACE#python#SPACE#can#SPACE#still#SPACE#print#SPACE#to#SPACE#stdout...' ) #NEWLINE#
gtk . main ( ) #NEWLINE#
print ( hashlib . sha512 ( password ) . hexdigest ( ) ) #NEWLINE#
cv2 . __version__ #NEWLINE#
qs . filter ( map ( operators . or_ , [ Q ( k = v ) for k , v in list ( request . GET . items ( ) ) ] ) ) #NEWLINE#
re . findall ( 'bus|car|cars|\\S' , s ) #NEWLINE#
0 , PyQt4 . QtCore . QString ( 'mypassword' ) #NEWLINE#
L [ idx ] . append ( item ) #NEWLINE#
cashflow [ - 1 ] += 100 #NEWLINE#
raise Exception ( 'MyContextManager#SPACE#should#SPACE#be#SPACE#used#SPACE#only#SPACE#with#SPACE#`with`' ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
ax . get_yaxis ( ) . set_minor_locator ( mpl . ticker . AutoMinorLocator ( ) ) #NEWLINE#
runner . run ( ) #NEWLINE#
np . mean ( [ 0 , 0 , 1 ] ) #NEWLINE#
completions = subprocess . check_output ( 'compgen#SPACE#-c#SPACE#l' , shell = True ) . splitlines ( ) #NEWLINE#
file . seek ( 0 ) #NEWLINE#
return zip ( * ( lst [ i : ] for i in range ( n ) ) ) #NEWLINE#
self . bind ( '<ButtonPress-1>' , self . _on_press ) #NEWLINE#
print ( mydate . strftime ( '%m' ) ) #NEWLINE#
return strx ( l ) . replace ( strx ( a ) , strx ( b ) ) . split ( ',#SPACE#' ) #NEWLINE#
print ( '};\n' ) #NEWLINE#
urllib . request . urlretrieve ( url , filename ) #NEWLINE#
print ( ( word , count ) ) #NEWLINE#
s1 . reset_index ( ) #NEWLINE#
b = a [ : ] #NEWLINE#
list ( unique_everseen ( lst , key = len ) ) #NEWLINE#
from socket import gethostbyname , gaierror #NEWLINE#
return isinstance ( obj , collections . Callable ) #NEWLINE#
print ( htmlentitydefs . entitydefs [ 'aacute' ] ) #NEWLINE#
df . columns = new_cols #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
time . sleep ( 1000 ) #NEWLINE#
rules = dict ( rule . split ( '=' , 1 ) for rule in recurrence . split ( ';' ) ) #NEWLINE#
self . send_response ( 200 ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
groupd . sortlevel ( [ 'Manufacturer' , 'Product#SPACE#Launch#SPACE#Date' ] , sort_remaining = False ) #NEWLINE#
oath_access_token = utils . get_application_access_token ( app_id , app_secret ) #NEWLINE#
img . save ( 'curve.png' , 'PNG' ) #NEWLINE#
root . columnconfigure ( ( 0 , 2 ) , weight = 1 ) #NEWLINE#
element = max ( myset ) #NEWLINE#
[ x for x in myTuple if foo ( 1 , x , 4 ) ] #NEWLINE#
[ ( elem + func ( ) ) for elem in myList ] #NEWLINE#
d [ k ] . append ( v ) #NEWLINE#
reason = [ ',#SPACE#' . join ( compress ( tups , x ) ) for x in zip ( * list ( tups . values ( ) ) ) ] #NEWLINE#
[ 'Therefore' , 'we' ] #NEWLINE#
results = sorted ( list ( results_dict . items ( ) ) , key = lambda x : x [ 1 ] ) #NEWLINE#
db . session . add ( post ) #NEWLINE#
root . title ( 'Say#SPACE#Hello' ) #NEWLINE#
self . y = [ self . x for i in range ( 1 ) ] #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
nodes = [ node ( ) for _ in range ( 100 ) ] #NEWLINE#
self . assertJSONEqual ( response_content , { 'status' : 'success' } ) #NEWLINE#
popt , pcov = curve_fit ( lambda x , a : func ( x , a , b ) , x1 , x2 ) #NEWLINE#
return User . objects . get ( id = uid ) #NEWLINE#
plt . gcf ( ) . subplots_adjust ( hspace = 0.5 , wspace = 0.5 ) #NEWLINE#
hd2 . __objclass__ #NEWLINE#
plt . show ( ) #NEWLINE#
[ [ 1 ] , [ 3 ] , [ 7 ] , [ 8 , 9 ] ] #NEWLINE#
dict . get ( 1 ) . add ( 2 ) #NEWLINE#
msvcrt . setmode ( sys . stdin . fileno ( ) , os . O_BINARY ) #NEWLINE#
startsandendswith ( 'earthis#SPACE#earth' , 'earth' ) #NEWLINE#
COMPRESS_ENABLED = True #NEWLINE#
return cmp ( A [ adiff ] , b [ bdiff ] ) #NEWLINE#
print ( '\n#SPACE#Goodbye' ) #NEWLINE#
network . draw ( ) #NEWLINE#
os . rename ( filename , base_file + '.text' ) #NEWLINE#
"""#SPACE#""" . join ( """Please#SPACE##NEWLINE##SPACE#don't#SPACE##TAB##SPACE#hurt#SPACE# #SPACE#me.""" . split ( ) ) #NEWLINE#
return 7 * super ( B , self ) . f ( num ) #NEWLINE#
return np . sqrt ( ( w * q * q ) . sum ( ) ) #NEWLINE#
np . allclose ( np . dot ( A , B ) , A * sparse_B ) #NEWLINE#
len ( 'ä' ) #NEWLINE#
driver . find_elements_by_name ( 'allow' ) [ 1 ] . click ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
[ [ df . columns [ j ] for i , j in grp ] for k , grp in groups ] #NEWLINE#
foo ( * x , ** y ) #NEWLINE#
df [ 'Col3' ] = 0 #NEWLINE#
numbers = [ n for n in numbers if n is not None ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
session . commit ( ) #NEWLINE#
gs1 = gridspec . GridSpec ( 4 , 4 ) #NEWLINE#
FOUT . close ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
np . savetxt ( 'big.txt' , np . c_ [ a , np . random . rand ( n ) ] , fmt = '%i#SPACE#%i#SPACE#%s' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
a = np . array ( [ [ 1 , 11 ] , [ 1 , 12 ] , [ 2 , 21 ] , [ 3 , 31 ] ] ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
plt . legend ( loc = 'center#SPACE#left' , bbox_to_anchor = ( 1.0 , 0.5 ) ) #NEWLINE#
datetime . datetime ( 2008 , 8 , 12 , 12 , 20 , 30 , 656234 ) #NEWLINE#
ax . minorticks_off ( ) #NEWLINE#
self . fields [ 'equipment' ] . queryset = Equipment . avail . all ( ) #NEWLINE#
""".*([a-zA-Z]+)\\.csv""" #NEWLINE#
'xyz/bar' . format ( Pluralizer ( 1 ) ) == 'xyz' #NEWLINE#
print ( 'All:#SPACE#' + str ( self . d ) ) #NEWLINE#
df1 . index & df2 . index #NEWLINE#
plt . annotate ( 'Testing\\nThis\\nOut' , xy = ( 0.5 , 0.5 ) ) #NEWLINE#
print ( process . returncode ) #NEWLINE#
print ( x . apply ( lambda y : [ a for a in y if pd . notnull ( a ) ] ) ) #NEWLINE#
print ( 'Imported' , module ) #NEWLINE#
[ ( sum ( [ ( i * i ) for i in vec ] ) ** 0.5 ) for vec in x ] #NEWLINE#
[ x for x in map ( f , range ( 3 ) ) if x > 1 ] #NEWLINE#
df = pandas . DataFrame ( np . random . randn ( 5 , 3 ) , columns = [ 'A' , 'B' , 'C' ] ) #NEWLINE#
a = 'the#SPACE#dogs#SPACE#barked' . split ( ) #NEWLINE#
frame = wx . Frame ( None , - 1 , 'Scaled#SPACE#Image' ) #NEWLINE#
[ ( 'smoking' , 'yes' ) , ( 'sex' , 'female' ) , ( 'risk' , 'no' ) ] #NEWLINE#
return y [ np . searchsorted ( x , xi ) ] #NEWLINE#
proc = subprocess . Popen ( cmd , stdout = subprocess . PIPE , env = initial ) #NEWLINE#
point . set_facecolor ( 'red' ) #NEWLINE#
return ( value for key , value in sorted ( dictobj . items ( ) ) ) #NEWLINE#
isodd = lambda x : x % 2 != 0 #NEWLINE#
list . __setitem__ ( self , index , value ) #NEWLINE#
from django . contrib . auth . models import User #NEWLINE#
d . sort ( key = itemgetter ( 0 ) ) #NEWLINE#
pd . DataFrame ( { n : c . apply ( lambda x : x [ n ] ) for n in wordlist } ) #NEWLINE#
candidates = [ i for i in permutations ( range ( n ) , 3 ) ] #NEWLINE#
n = n + 1 / 10 ** ( len ( repr ( n ) ) - 2 ) #NEWLINE#
hist = History . objects . get ( pk = 1 ) #NEWLINE#
return super ( ResourceInviteAcceptanceView , self ) . forms_valid ( forms , form_name ) #NEWLINE#
sys . stdin = open ( '/dev/tty' ) #NEWLINE#
print ( match . group ( 'info_hash' ) ) #NEWLINE#
[ x for x , y in groupby ( L ) if sum ( 1 for i in y ) < 2 ] #NEWLINE#
lst = [ 'yellow' , 'orange' , 'red' ] #NEWLINE#
l = [ ( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) ] #NEWLINE#
b [ 1 : ] = b [ 1 : ] - b [ : - 1 ] #NEWLINE#
driver = webdriver . Chrome ( chrome_options = opts ) #NEWLINE#
return 'Booga!' #NEWLINE#
grouped_by_soundex [ soundex ( film [ 'film' ] [ 0 ] ) ] . append ( film ) #NEWLINE#
map ( 'hello{0}' . format , a ) #NEWLINE#
regex = re . compile ( '(%s)' % '|' . join ( map ( re . escape , list ( dict . keys ( ) ) ) ) ) #NEWLINE#
print ( chr ( ord ( 'அ' ) ) ) #NEWLINE#
myFile . write ( '<body>' ) #NEWLINE#
myFile . write ( '<table>' ) #NEWLINE#
myFile . write ( '</tr>' ) #NEWLINE#
myFile . write ( '</table>' ) #NEWLINE#
myFile . write ( '</body>' ) #NEWLINE#
df #NEWLINE#
s = 'C9:#SPACE#Title#SPACE#of#SPACE#object#SPACE#(fo[#SPACE#123o,#SPACE#bar)#SPACE#[ch1,#SPACE#CH12,c03,4]' #NEWLINE# re . findall ( '\\d+(?=[^[]+$)' , s ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
np . delete ( x , 1 , 1 ) #NEWLINE#
conn . close ( ) #NEWLINE#
pylab . show ( ) #NEWLINE#
driver . get ( url ) #NEWLINE#
self . connection . close ( ) #NEWLINE#
conn = boto . connect_s3 ( ) #NEWLINE#
a = np . hstack ( ( a , b ) ) #NEWLINE#
print ( eval ( 'subtract(a,#SPACE#b)' ) ) #NEWLINE#
d = { k : list ( v ) for k , v in groupby ( tags , key = lambda x : x [ 0 ] ) } #NEWLINE#
- tox #NEWLINE#
fsizer . Add ( self . filtr , 1 , wx . EXPAND ) #NEWLINE#
match2 . start ( ) #NEWLINE#
with open ( 'myfile.txt' ) as f : #NEWLINE# #INDENT# my_dictionary = dict ( line . split ( ) for line in f ) #NEWLINE#
tfile . seek ( 0 ) #NEWLINE#
test [ 3 : ] = [ 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE# test [ : 3 ] = [ 0 , 1 , 2 ] #NEWLINE#
print ( chr ( i ) ) #NEWLINE#
li2 = list ( itertools . chain ( * li ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
plt . plot ( binx , biny , 'k.' , zorder = 100 ) #NEWLINE#
exec ( compile ( open ( activate_this ) . read ( ) , activate_this , 'exec' ) , dict ( #NEWLINE# __file__ = activate_this ) ) #NEWLINE#
avg_rating = db . FloatProperty ( ) #NEWLINE#
os . dup2 ( w , sys . stderr . fileno ( ) ) #NEWLINE#
[ numpy . all ( - 2 ) , numpy . all ( - 1 ) , numpy . all ( 0 ) , numpy . all ( 1 ) , numpy . all ( 2 ) ] #NEWLINE#
date_parser = pd . datetools . to_datetime ( ) #NEWLINE#
return { 'fqdn_ip' : socket . gethostbyname ( socket . getfqdn ( ) ) } #NEWLINE#
sorted ( population , key = keyfun ) #NEWLINE#
td_series . astype ( pd . Timedelta ) . apply ( lambda l : l . days ) #NEWLINE#
_ , a , b , c , d = node . split ( '/' ) #NEWLINE#
json_file . write ( str ( data ) ) #NEWLINE#
o3 . var #NEWLINE#
print ( 'Position#SPACE#%3i,#SPACE#char:#SPACE#%s' % ( FIN . tell ( ) , [ FIN . read ( 1 ) ] ) ) #NEWLINE#
GPIO . output ( 4 , True ) #NEWLINE#
formset . save_m2m ( ) #NEWLINE#
soup = BeautifulSoup ( page ) #NEWLINE#
p = os . system ( 'echo#SPACE#{}|sudo#SPACE#-S#SPACE#{}' . format ( 'my#SPACE#password' , 'command#SPACE#to#SPACE#run' ) ) #NEWLINE#
pattern = re . compile ( re . escape ( motif ) ) #NEWLINE#
id ( df . _data . blocks [ 0 ] . values ) #NEWLINE#
text = '' . join ( BeautifulSoup ( html ) . findAll ( text = True ) ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
df . loc [ df . isin ( [ 1 , 2 ] ) . any ( 1 ) ] #NEWLINE#
driver . save_screenshot ( 'testing1.png' ) #NEWLINE#
return os . path . join ( base_path , relative_path ) #NEWLINE#
print ( 's#SPACE#is#SPACE#a#SPACE#unicode#SPACE#object' ) #NEWLINE#
permissions = ( 'read_car' , 'Can#SPACE#read#SPACE#Car' ) , #NEWLINE#
array [ mask ] = 255 #NEWLINE#
c . execute ( 'SELECT#SPACE#foo#SPACE#FROM#SPACE#bar#SPACE#WHERE#SPACE#name#SPACE#LIKE#SPACE#?' , ( var , ) ) #NEWLINE#
ax1 . axis [ 'top' ] . set_axis_direction ( 'bottom' ) #NEWLINE#
sftp . close ( ) #NEWLINE#
print ( temp_df . apply ( lambda x : x - temp_arr [ x . index ] , axis = 1 ) ) #NEWLINE#
{ key : grp [ 'value' ] . tolist ( ) for key , grp in df . groupby ( 'key' ) } #NEWLINE#
super ( B , self ) . __init__ ( j ) #NEWLINE#
return [ k for k , v in list ( d1 . items ( ) ) if v == m ] [ 0 ] #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 2 , 3 , 4 ] } ) #NEWLINE#
[ [ 1 ] , [ 3 , 7 ] , [ 8 , 9 ] ] #NEWLINE#
cmds . ls ( sl = 1 , fl = 1 ) #NEWLINE#
ADMIN_ENABLED = True #NEWLINE#
pygame . draw . circle ( surf2 , ( 200 , 0 , 0 , 100 ) , ( 100 , 100 ) , 100 ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
grouped . get_group ( 'foo' ) #NEWLINE#
curated_text . append ( '#SPACE#' . join ( d ) ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = [ 'a' , 'b' ] ) #NEWLINE#
print ( element_count ( [ 1 , [ 1 , 2 , [ 3 , 4 ] ] ] ) ) #NEWLINE#
df [ 'col1' ] = df [ 'col1' ] . astype ( np . float16 ) #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#(h)' ) #NEWLINE#
im . save ( 'image.png' ) #NEWLINE#
struct . pack ( 'i' , x ) #NEWLINE#
exit ( ) #NEWLINE#
max ( p . attrOne for p in self . allPartners ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
return '%s.a' % cls . __name__ #NEWLINE#
os . environ [ 'COLUMNS' ] = '80' #NEWLINE#
worksheet . write_column ( 'A2' , data [ 0 ] ) #NEWLINE#
s = s [ 117 : ] #NEWLINE#
b . extend ( map ( ord , s ) ) #NEWLINE#
im . save ( 'logo_py.png' , transparency = 255 ) #NEWLINE#
text = nltk . Text ( tokens ) #NEWLINE#
fp = open ( filepath , 'rb' ) #NEWLINE#
btn3 . grid ( row = 3 , column = 1 ) #NEWLINE#
resultset = [ [ 'a' , 'b' , 'c' , 'd' , 'e' , 'g' , 'f' , 'o' , 'p' ] , [ 'k' ] ] #NEWLINE#
run ( ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
li [ t [ 0 ] ] [ t [ 1 ] ] = 'X' #NEWLINE#
r . search ( 'a#SPACE#north\\south#SPACE#division' ) . span ( ) #NEWLINE#
return function ( request , * args , ** kwargs ) #NEWLINE#
"""(https?://)?(www\\.)?youtube\\.(com|nl)/watch\\?v=([-\\w]+)""" #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
[ array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] ] ) , array ( [ [ 1 , 1 , 1 ] , [ 2 , 2 , 2 ] ] ) ] #NEWLINE#
request . SESSION [ 'login_tries' ] = 1 #NEWLINE#
my_list = [ 'one' , 'TWO' , 'THree' ] #NEWLINE#
subprocess . call ( [ PLAYERPATH , FILEPATH ] ) #NEWLINE#
__all__ = [ 'test_001_func' , 'test_002_func' ] #NEWLINE#
yaml . add_representer ( OrderedDict , represent_ordereddict ) #NEWLINE#
ax . imshow ( im ) #NEWLINE#
leg = plt . legend ( [ p1 , p2 ] , [ 'sin(x)' , 'cos(x)' ] , loc = 1 ) #NEWLINE#
[ 'thank' , 'you' , 'very' , 'much' ] #NEWLINE#
print ( 'Ok#SPACE#adding#SPACE#%d#SPACE#to#SPACE#numbers#SPACE#set:#SPACE#' % i ) #NEWLINE#
[ ( float ( p [ 1 ] + p [ 2 ] ) / 2 ) for p in PlayerList ] #NEWLINE#
main ( ) #NEWLINE#
re . split ( '\\.#SPACE#' , 'Hello#SPACE#there.#SPACE#My#SPACE#name#SPACE#is#SPACE#Fred.#SPACE#I#SPACE#am#SPACE#25.5#SPACE#years#SPACE#old.' ) #NEWLINE#
print ( br . response ( ) . read ( ) ) #NEWLINE#
"""x""" . decode ( 'koi8_u' ) #NEWLINE#
return ( ( self . x - x ) ** 2 + ( self . y - y ) ** 2 ) ** 0.5 #NEWLINE#
return self . create ( request , * args , ** kwargs ) #NEWLINE#
d = { 'one' : 1 , 'two' : 2 , 'twenty' : 20 , 'negative#SPACE#4' : - 4 } #NEWLINE# sum ( v for v in list ( d . values ( ) ) if v > 0 ) #NEWLINE#
all ( starmap ( lt , zip ( a , b ) ) ) #NEWLINE#
[ [ 'a' , 'b' , 'c' , 'd' , 'f' , 'g' ] ] #NEWLINE#
"""\\s""" #NEWLINE#
c . setFont ( 'Helvetica' , 30 ) #NEWLINE#
signal . pause ( ) #NEWLINE#
print ( "There's#SPACE#an#SPACE#issue#SPACE#retrieving#SPACE#the#SPACE#JIRA#SPACE#ticket!" ) #NEWLINE#
y = list ( x ) #NEWLINE#
print ( [ ( y - x ) for x , y in l ] ) #NEWLINE#
os . chdir ( '/' ) #NEWLINE#
df = df [ colnames ] #NEWLINE#
results = [ do_smth ( slurp_file ( f ) ) for f in filenames ] #NEWLINE#
image_file . save ( 'result.png' ) #NEWLINE#
d = { 'John' : 5 , 'Alex' : 10 , 'Richard' : 7 } #NEWLINE#
print ( ( k , v ) ) #NEWLINE#
len ( s . encode ( 'UTF-16' ) ) #NEWLINE#
len ( s . encode ( 'UTF-8' ) ) #NEWLINE#
dosomething ( [ '1' , '2' , '3' ] ) #NEWLINE#
plt . colorbar ( pc , cax = axes ) #NEWLINE#
math . isnan ( a ) #NEWLINE#
df . iloc [ sort_slice ] #NEWLINE#
struct . unpack ( '>I' , '\x00' + bytes ) [ 0 ] #NEWLINE#
print ( payload . get_payload ( ) ) #NEWLINE#
[ '\\' , 'n' , 'u' , '#SPACE#' , '+' , '#SPACE#' , '\\' , 'l' , 'a' , 'm' , 'b' , 'd' , 'a' , '#SPACE#' , #NEWLINE# '+' , '#SPACE#' , '\\' , 't' , 'h' , 'e' , 't' , 'a' ] #NEWLINE#
Base . metadata . create_all ( engine , checkfirst = True ) #NEWLINE#
plt . plot ( [ 0 , 1 ] ) #NEWLINE#
A - mean [ : , ( None ) ] #NEWLINE#
from my_module import function1 , function2 , function3 , function4 , function5 , function6 , function7 #NEWLINE#
sys . stdout . close ( ) #NEWLINE#
print ( zip ( * ( zip ( itertools . repeat ( ls [ 0 ] ) , ls [ 1 : ] ) for ls in data ) ) ) #NEWLINE#
lsof - a - p23819 - i4 #NEWLINE#
ax . scatter ( xs , ys , zs ) #NEWLINE#
self . send_header ( 'Access-Control-Allow-Origin' , 'http://example.com' ) #NEWLINE#
self . response . out . write ( xml ) #NEWLINE#
chr ( ord ( 'a' ) + 5 ) #NEWLINE#
print ( list ( d . keys ( ) ) ) #NEWLINE#
formset . save ( ) #NEWLINE#
print ( [ a . pop ( key ) for key in [ 'key1' , 'key3' ] ] ) #NEWLINE#
dict . fromkeys ( '12345' ) #NEWLINE#
neuron . draw ( ) #NEWLINE#
new_im_vec = im . swapaxes ( 0 , 2 ) . swapaxes ( 1 , 2 ) . flatten ( ) #NEWLINE#
d . update ( { 'output' : request . POST [ 'output' ] } ) #NEWLINE#
r . set ( 'imagedata' , output . getvalue ( ) ) #NEWLINE#
self . textEdit . setPlainText ( mytext ) #NEWLINE#
os . environ [ 'LD_LIBRARY_PATH' ] = 'my_path' #NEWLINE#
image = Image . open ( io . BytesIO ( bytes ) ) #NEWLINE#
gb = df . groupby ( 'ZZ' ) #NEWLINE#
df . rdd . map ( lambda r : r . zip_code ) . collect ( ) #NEWLINE#
server . quit ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
return tf . div ( x , y ) #NEWLINE#
print ( 'Total#SPACE#number#SPACE#of#SPACE#udp#SPACE#packets:#SPACE#' , udpcounter ) #NEWLINE#
[ [ 1 , 3 ] , [ 7 ] , [ 8 ] , [ 9 ] ] #NEWLINE#
print ( [ data [ id == i ] . max ( ) for i , _ in groupby ( id ) ] ) #NEWLINE#
hobj . stem ( 'linked' ) #NEWLINE#
fh . close ( ) #NEWLINE#
x = np . fromfile ( f , dtype = np . int ) #NEWLINE# print ( x ) #NEWLINE#
sys . path . append ( path ) #NEWLINE#
df . iloc [ : , 1 : ] #NEWLINE#
f . write ( line ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#python#SPACE#3.4#SPACE#code.#SPACE#Looks#SPACE#like#SPACE#included#SPACE#in#SPACE#PHP#SPACE#:)' ) #NEWLINE#
a . sort ( key = len ) #NEWLINE#
__import__ ( 'imp' ) . find_module ( 'eggs' ) #NEWLINE#
[ book . get ( 'author' , <STR0> ) for book in tree . xpath ( '//book' ) ] #NEWLINE#
reversed_ = sum ( 1 << numbits - 1 - i for i in range ( numbits ) if original >> #NEWLINE# i & 1 ) #NEWLINE#
soup = BeautifulSoup ( data ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 ] , 'B' : [ 4 , 5 ] , 'C' : [ 7 , 8 ] } ) #NEWLINE#
time = datetime . strptime ( time , DATETIME_FORMAT ) #NEWLINE#
return re . sub ( '%u([0-9a-fA-F]{4})' , unicode_unquoter , text ) #NEWLINE#
class Location ( models . Model ) : #NEWLINE# #INDENT# name = models . CharField ( max_length = 100 ) #NEWLINE#
self . ax . figure . canvas . draw ( ) #NEWLINE#
f . close ( ) #NEWLINE#
df [ df . columns [ pd . Series ( df . columns ) . str . startswith ( 'foo' ) ] ] #NEWLINE#
window . add ( vbox ) #NEWLINE#
s = pd . Series ( [ df1 , df2 , df3 ] , index = idx ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_RAW , socket . IPPROTO_IP ) #NEWLINE#
plt . pause ( 0.001 ) #NEWLINE#
dict2 = { key : value for key , value in list ( dict1 . items ( ) ) if key in #NEWLINE# required_fields } #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
XO = [ line . split ( None , 4 ) [ 3 ] for line in islice ( f , 500 ) ] #NEWLINE#
[ 'a' , 'c' ] #NEWLINE#
df . comments . dropna ( ) #NEWLINE#
img = f . read ( ) #NEWLINE#
d = { '1' : [ '1' , '2' , '3' , '4' ] , '2' : [ '1' , '4' ] , '3' : [ '43' , '176' ] } #NEWLINE#
groups . sortlevel ( [ 0 , 2 ] , sort_remaining = False ) #NEWLINE#
match = re . search ( '(\\d+/\\d+/\\d+)' , 'The#SPACE#date#SPACE#is#SPACE#99/99/99' ) #NEWLINE#
urllib . parse . quote ( '/test' ) #NEWLINE#
l_without_empty = [ x for x in l if x != '' ] #NEWLINE#
pool = Pool ( processes = 2 ) #NEWLINE#
warnings . resetwarnings ( ) #NEWLINE#
line . split ( ',' ) #NEWLINE#
imshow ( skeleton , cmap = cm . Greys_r ) #NEWLINE#
q = Post . query . options ( db . joinedload ( Post . tags ) ) . all ( ) #NEWLINE#
return '' . join ( list ( reversed ( str ) ) ) #NEWLINE#
all_firstnames = request . form . getlist ( 'firstname' ) #NEWLINE#
yacc . errok ( ) #NEWLINE#
myfun ( 'bbb' ) #NEWLINE#
return float ( sum ( lst [ len ( lst ) / 2 - 1 : len ( lst ) / 2 + 1 ] ) ) / 2.0 #NEWLINE#
s [ s . index . dayofweek < 5 ] #NEWLINE#
df . applymap ( lambda x : ( 0 , 0 ) if x is np . nan else x ) #NEWLINE#
self . mthread . start ( ) #NEWLINE#
df . stat . approxQuantile ( 'x' , Array ( 0.5 ) , 0.25 ) #NEWLINE#
webbrowser . open_new ( 'file://C:\\path\\to\\file.pdf' ) #NEWLINE#
print ( zip ( * lists ) ) #NEWLINE#
browser . get ( url ) #NEWLINE#
print ( soup . html . string ) #NEWLINE#
cursor = conn . cursor ( ) #NEWLINE#
super ( Window , self ) . __init__ ( vsync = False ) #NEWLINE#
ax . set_ylabel ( 'BlaBla' ) #NEWLINE#
timestamp = ( aware - datetime ( 1970 , 1 , 1 , tzinfo = pytz . utc ) ) . total_seconds ( ) #NEWLINE#
data = data . reshape ( fig . canvas . get_width_height ( ) [ : : - 1 ] + ( 3 , ) ) #NEWLINE#
line = line . replace ( 'AUTOINCREMENT' , 'AUTO_INCREMENT' ) #NEWLINE#
fig . savefig ( '/path/to/figure.pdf' ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
'comment' in mylist #NEWLINE#
old_value = sqlalchemy . orm . attributes . get_history ( user , 'attribute' ) [ 2 ] #NEWLINE#
raise MyException ( 'My#SPACE#hovercraft#SPACE#is#SPACE#full#SPACE#of#SPACE#eels' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
sys . path . append ( os . path . abspath ( 'applications' ) ) #NEWLINE#
plt . scatter ( df . col1 , df . col2 , s = 120 , c = colors ) #NEWLINE#
{ ( 1 ) : [ 0 ] , ( 2 ) : [ 1 , 4 , 6 ] , ( 3 ) : [ 5 ] , ( 4 ) : [ 3 ] , ( 6 ) : [ 2 ] } #NEWLINE#
eyear1 . grid ( row = 1 , column = 1 ) #NEWLINE#
layout . removeWidget ( self . widget_name ) #NEWLINE#
mc . __dict__ #NEWLINE#
draw = ImageDraw . Draw ( im ) #NEWLINE#
ax . patch . set_alpha ( 0.5 ) #NEWLINE#
"""{0:0>3}""" . format ( 100 ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( key = 'Timestamp' , freq = 'D' ) ) . mean ( ) . plot ( ) #NEWLINE#
return self . __getattribute__ ( name ) #NEWLINE#
output = unicodedata . normalize ( 'NFD' , my_unicode ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
return df #NEWLINE#
ax . set_zlabel ( LabelZ ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df2 #NEWLINE#
workbook = xlsxwriter . Workbook ( 'chart_column.xlsx' ) #NEWLINE#
inv = np . reciprocal ( array . astype ( np . float32 ) ) #NEWLINE#
parser . add_argument ( 'foo' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
out = Popen ( [ 'adb' , 'devices' ] , stderr = STDOUT , stdout = PIPE ) #NEWLINE#
s = s . replace ( c , '' ) #NEWLINE#
return [ { 'key' : k , 'value' : v } for k , v in mapping . items ( ) ] #NEWLINE#
print ( '#SPACE#%s#SPACE#\t\t\t\tPASSED\t\t#SPACE#64-bit#SPACE#\t\t#SPACE##SPACE#' % files ) #NEWLINE#
print ( list ( words ) ) #NEWLINE#
[ 1 ] [ 2 ] [ 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
if thing in some_list : #NEWLINE# #INDENT# some_list . remove ( thing ) #NEWLINE#
data = pickle . load ( f , encoding = 'bytes' ) #NEWLINE#
callable ( getattr ( f , 'hello' ) ) #NEWLINE#
"""""" . join ( choice ( chars ) for _ in range ( length ) ) #NEWLINE#
a = numpy . array ( a ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
cv . NamedWindow ( 'display' ) #NEWLINE#
time_t = time . mktime ( my_date . timetuple ( ) ) #NEWLINE#
pylab . show ( ) #NEWLINE#
s . sendto ( 'hello#SPACE#world' , ( '<broadcast>' , BC_PORT ) ) #NEWLINE#
bin ( int ( my_hexdata , scale ) ) [ 2 : ] . zfill ( num_of_bits ) #NEWLINE#
print ( repr ( data ) ) #NEWLINE#
print ( utc_dt . strftime ( '%Y-%m-%dT%H:%M:%S.%fZ' ) ) #NEWLINE#
print ( 'z' ) #NEWLINE#
port = int ( os . environ . get ( 'PORT' , 5000 ) ) #NEWLINE#
s = chr ( i ) #NEWLINE#
lst = [ ( 1 , 5 ) , ( 1 , 7 ) , ( 2 , 3 ) ] #NEWLINE#
plt . ylim ( ( - 5 , 5 ) ) #NEWLINE#
"""devices,#SPACE#such#SPACE#as#SPACE#the#SPACE#Omnikey#SPACE#CardMan#SPACE#are#SPACE#also#SPACE#supported.#SPACE#I#SPACE#am#SPACE#curently#SPACE#testing#SPACE#with#SPACE#a#SPACE#CardMan#SPACE#5321""" #NEWLINE#
list ( filter ( is_abcedarian , [ 'apple' , 'bee' , 'amp' , 'sun' ] ) ) #NEWLINE#
[ cryptogen . randrange ( 3 ) for i in range ( 20 ) ] #NEWLINE#
random_day = date . fromordinal ( random . randint ( start_date , end_date ) ) #NEWLINE#
[ 'a' , 'c' ] #NEWLINE#
xml . dom . minidom . parseString ( '<My><XML><String/><XML/><My/>' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
print ( ( 'Extra#SPACE#info#SPACE##SPACE#:' , info . name . encode ( 'utf-8' ) , info . symbol . encode ( 'utf-8' ) ) #NEWLINE# ) #NEWLINE#
df . tail ( 1 ) . T . assign ( passes = lambda x : x . iloc [ : , ( 0 ) ] > 1 ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
np . einsum ( 'ij,i->ij' , A , b ) #NEWLINE#
from functools import reduce #NEWLINE# concatenate = lambda * lists : reduce ( lambda a , b : a . extend ( b ) or a , lists , [ ] ) #NEWLINE#
np . arange ( 3 ) [ : , ( np . newaxis ) ] #NEWLINE#
f ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , lang ) #NEWLINE#
matrix [ 0 ] . append ( 'value' ) #NEWLINE#
db . rename_table ( 'yourapp_bar' , 'yourapp_foo' ) #NEWLINE#
( counts == 1 ) . all ( axis = 1 ) #NEWLINE#
df . to_excel ( 'myfile.xlsx' ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
df = pd . DataFrame . from_dict ( data ) #NEWLINE#
driver . execute_script ( 'arguments[0].muted#SPACE#=#SPACE#true;' , video ) #NEWLINE#
raise ValidationError ( '"root"#SPACE#is#SPACE#not#SPACE#allowed' ) #NEWLINE#
df [ df . filter ( regex = 'Value' ) . abs ( ) . lt ( 1 ) . all ( 1 ) ] #NEWLINE#
photo = images . resize ( self . request . get ( 'photo' ) , 32 , 32 , images . JPEG ) #NEWLINE#
f ( ) #NEWLINE#
print ( '' ) #NEWLINE#
s = '' . join ( ch for ch in s if ch not in exclude ) #NEWLINE#
ttk . Label ( self . mainframe , text = 'Button#SPACE#1' ) . grid ( column = 1 , row = 3 , padx = 4 ) #NEWLINE#
plt . show ( ) #NEWLINE#
log = logging . getLogger ( 'stumbler' ) #NEWLINE#
stripped_code = stripped_soup . findAll ( 'code' , 'removed' ) #NEWLINE#
driver . get ( 'http://www.stackoverflow.com/' ) #NEWLINE#
[ [ 1 ] , [ 3 ] , [ 7 , 8 ] , [ 9 ] ] #NEWLINE#
ax . set_ylim ( 0 , m . shape [ 0 ] ) #NEWLINE#
a . shape #NEWLINE#
session . add ( inst ) #NEWLINE#
round ( 33.505 , 2 ) #NEWLINE#
plt . contour ( xi , yi , zi , v , linewidths = 0.5 , colors = 'k' ) #NEWLINE#
Representative . objects . create ( ** dict ( zip ( fields , row ) ) ) #NEWLINE#
turtle . forward ( 100 ) #NEWLINE#
logging . info ( 'Creating#SPACE#clients' ) #NEWLINE#
logging . info ( 'Looping' ) #NEWLINE#
obj = json . load ( open ( 'file.json' ) ) #NEWLINE#
a . tolist ( ) #NEWLINE#
self . sprockets . add ( spr ) #NEWLINE#
print ( ord ( s [ 0 ] ) ) #NEWLINE#
exec ( '\n' . join ( "%s=d['%s']" % ( k , k ) for k in d ) ) #NEWLINE#
data . get ( num ) or data [ min ( list ( data . keys ( ) ) , key = lambda k : abs ( k - num ) ) ] #NEWLINE#
model . fit ( X , y ) #NEWLINE#
table . cols . key . createIndex ( ) #NEWLINE#
p . terminate ( ) #NEWLINE#
print ( char , char . isalpha ( ) ) #NEWLINE#
plot ( x , y2 , 'g' ) #NEWLINE#
printRecurrence ( ) #NEWLINE#
ax . axis ( ( x1 , x2 , y1 - 1 , y2 + 1 ) ) #NEWLINE#
fout . write ( ',' . join ( fields ) + '\n' ) #NEWLINE#
f = open ( 'test.txt' , 'r' ) #NEWLINE#
square ( double ( Maybe ( 5 ) ) ) #NEWLINE#
driver = webdriver . Firefox ( firefox_binary = binary ) #NEWLINE#
tree . find ( 'idinfo/timeperd/timeinfo/rngdates/begdate' ) . text = '1/1/2011' #NEWLINE#
f . writerow ( [ row [ 'longitude' ] , row [ 'latitude' ] ] ) #NEWLINE#
ax . yaxis . set_major_formatter ( formatter ) #NEWLINE#
dict ( enumerate ( grouper ( numbers ) , 1 ) ) #NEWLINE#
x = [ [ ] for i in range ( 4 ) ] #NEWLINE#
f = open ( fd , closefd = True ) #NEWLINE#
timeit . timeit ( 'a.insert(0,a.pop(-1));a.insert(0,a.pop(-1))' , 'a=[1,2,3,4]' ) #NEWLINE#
print ( 'Route:' ) #NEWLINE#
df = pandas . DataFrame ( np . random . normal ( size = ( 37 , 2 ) ) , columns = [ 'A' , 'B' ] ) #NEWLINE#
bar . name #NEWLINE#
[ id ( v ) for v in list ( d . values ( ) ) ] #NEWLINE#
return problems #NEWLINE#
timeparse ( '1.2#SPACE#minutes' ) #NEWLINE#
[ 1 ] [ 1 ] [ 2 ] #NEWLINE#
repo = git . Repo ( 'repo_name' ) #NEWLINE#
tuple ( map ( int , '#SPACE#1#SPACE#,#SPACE#2#SPACE#' . split ( ',' ) ) ) #NEWLINE#
obj = self . pool . <STR0> ( 'purchase.order' ) #NEWLINE#
return super ( RejectingDict , self ) . __setitem__ ( k , v ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( ) #NEWLINE#
[ 0 ] [ 1 ] [ 1 ] #NEWLINE#
mydict [ index ] += 1 #NEWLINE#
response . delete_cookie ( 'cookie_name2' ) #NEWLINE#
moobar ( ) #NEWLINE#
print ( 'My#SPACE#name#SPACE#is:#SPACE#%s' % inspect . stack ( ) [ 0 ] [ 3 ] ) #NEWLINE#
print ( '{0},#SPACE#{1},#SPACE#{2}' . format ( foo , bar , baz ) ) #NEWLINE#
self . defstdout . flush ( ) #NEWLINE#
print ( json . dumps ( data , indent = 4 ) ) #NEWLINE#
ax . patch . set_facecolor ( 'red' ) #NEWLINE#
df [ g . cumcount ( ) == n - 1 ] #NEWLINE#
__import__ ( 'os' ) . system ( 'Some#SPACE#nasty#SPACE#command#SPACE#like#SPACE#rm#SPACE#-rf#SPACE#/*' ) #NEWLINE#
return dict ( ( k , dict ( v ) ) for k , v in list ( r . items ( ) ) ) #NEWLINE#
os . system ( 'chmod#SPACE#777#SPACE#-R#SPACE#*' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ word for words in lst for word in words . split ( ) ] #NEWLINE#
ax . set_rlim ( [ 0 , 5 ] ) #NEWLINE#
session . add ( feed ) #NEWLINE#
User . name . property . columns [ 0 ] . type . length #NEWLINE#
r = requests . get ( url , params = payload_str ) #NEWLINE#
"""﻿تازہ#SPACE#ترین#SPACE#خبروں،#SPACE#بریکنگ#SPACE#نیوز،#SPACE#ویڈیو،#SPACE#آڈیو،#SPACE#فیچر#SPACE#اور#SPACE#تجزیوں#SPACE#کے#SPACE#لیے#SPACE#بی#SPACE#بی#SPACE#سی#SPACE#اردو#SPACE#کی#SPACE#ویب""" #NEWLINE#
print ( l . strip ( ) . split ( '\t' ) ) #NEWLINE#
b = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
self . q . put ( ( function , args , kwargs ) ) #NEWLINE#
dtest = np . array ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) ) #NEWLINE#
ax . set_ylabel ( 'y' ) #NEWLINE#
[ { 'a' : 4 , 'b' : 4 } , { 'h' : 8 , 'c' : 3 , 'd' : 10 } , { 'c' : 7 , 'e' : 8 , 'd' : 10 } ] #NEWLINE#
print ( re . findall ( '\\$(\\w+)' , m . group ( 1 ) ) ) #NEWLINE#
print ( re . findall ( '-(\\w+)' , m . group ( 1 ) ) ) #NEWLINE#
sql . append ( ')#SPACE#VALUES#SPACE#(' ) #NEWLINE#
sql . append ( ')#SPACE#ON#SPACE#DUPLICATE#SPACE#KEY#SPACE#UPDATE#SPACE#' ) #NEWLINE#
i += 1 #NEWLINE#
logging . getLogger ( 'suds.client' ) . setLevel ( logging . DEBUG ) #NEWLINE#
list ( filter ( my_filter , my_iterable ) ) #NEWLINE#
image . save ( savepath ) #NEWLINE#
"""(java\\S?[^A-Z]*?)\\.[A-Z]""" #NEWLINE#
proc . stdin . write ( '%d\n' % i ) #NEWLINE#
print ( pd . concat ( [ df , pd . DataFrame ( D , index = df . index ) ] , axis = 1 ) ) #NEWLINE#
address = ForeignKey ( AddressResource , 'address' , full = True ) #NEWLINE#
np . random . rand ( 5 ) < 0.8 #NEWLINE#
self . top_frame . grid ( row = 0 , column = 0 , sticky = 'ew' ) #NEWLINE#
BaseClass . __init__ ( self , name [ : - len ( 'Class' ) ] ) #NEWLINE#
args = os . getcwd ( ) + '/myapp-debugging-errors.log' , 'a' #NEWLINE#
a . tolist ( ) #NEWLINE#
hash = hashlittle ( hashstr , 0 ) #NEWLINE#
chain . apply_async ( ) #NEWLINE#
fd . close ( ) #NEWLINE#
( date ( 2012 , 3 , 1 ) - date ( 2012 , 2 , 1 ) ) . days #NEWLINE#
plt . scatter ( colorjh [ idx ] , hmag [ idx ] , c = 'g' , s = 1 , alpha = 0.05 ) #NEWLINE#
"""hint""" #NEWLINE#
print ( ( 'H-statistic:' , H ) ) #NEWLINE#
df [ 'month' ] = pd . DatetimeIndex ( df [ 'ArrivalDate' ] ) . month #NEWLINE#
c . append ( 'Adi_' + str ( i ) ) #NEWLINE#
print ( 'IDN:' , domain . encode ( 'idna' ) ) #NEWLINE#
window . border ( 'Ï\x80' ) #NEWLINE#
myarray [ 0 ] [ 1 : 3 ] #NEWLINE#
print ( f . getvalue ( ) ) #NEWLINE#
t . start ( ) #NEWLINE#
base64 . b64encode ( 'a' ) . decode ( ) #NEWLINE#
ent5 . grid ( row = 4 , column = 1 ) #NEWLINE#
self . text . tag_remove ( 'BOLD' , '1.0' , 'end' ) #NEWLINE#
root . tk . call ( 'tk' , 'scaling' , 4.0 ) #NEWLINE#
print ( "some_dict['7812']#SPACE#==" , some_dict [ '7812' ] ) #NEWLINE#
data = { } #NEWLINE#
return 1.0 - scipy . stats . hypergeom . pmf ( 0 , N , M , Q ) #NEWLINE#
print ( r . json ( ) ) #NEWLINE#
print ( set ( results ) == set ( results3 ) ) #NEWLINE#
def column ( matrix , i ) : #NEWLINE# #INDENT# return [ row [ i ] for row in matrix ] #NEWLINE#
df . stack ( ) . str . replace ( r1 , '-\\1' , 1 ) . str . extract ( r2 , expand = False ) . unstack ( ) #NEWLINE#
[ ( i , mylist . count ( i ) ) for i in set ( mylist ) ] #NEWLINE#
file_split ( 'data.txt' , '//' , 3 ) #NEWLINE#
__init__ . py #NEWLINE#
print ( func ( ) ) #NEWLINE#
lst [ : ] = ( v for v in lst if pred ( v ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
x = list ( itertools . islice ( list ( d . items ( ) ) , 0 , 4 ) ) #NEWLINE#
parser . add_argument ( 'arg1' , type = str ) #NEWLINE#
proc . stdout . close ( ) #NEWLINE#
print ( re . findall ( pattern , s ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
mail ( 'you' , 'hi' , 'hi' , 'webcam.jpg' ) #NEWLINE#
image [ mask [ : ] == 0 , ... ] = chex [ mask [ : ] == 0 , ... ] #NEWLINE#
wr . writerow ( list1 ) #NEWLINE#
[ subword for word in list for subword in word . split ( ) ] #NEWLINE#
def count ( l ) : #NEWLINE# #INDENT# return sum ( 1 + count ( i ) for i in l if isinstance ( i , list ) ) #NEWLINE#
return self . thisptr . myBMethod ( dereference ( a . thisptr ) , getAMethod ( ) ) #NEWLINE#
data_line = ( data_line [ i ] for i in good_cols ) #NEWLINE#
m . group ( 1 ) #NEWLINE#
self . _calendar = ttk . Treeview ( show = '' , selectmode = 'none' , height = 7 ) #NEWLINE#
n = np . clip ( n , minN , maxN ) #NEWLINE#
ax . set_xticklabels ( column_labels , minor = False ) #NEWLINE#
gp1 = [ 2 , 6 , 9 ] #NEWLINE#
any ( 'value2' in sublist for sublist in mylist ) #NEWLINE#
{ 'middle' : { 'inner' : [ 1 , 2 , 3 ] } } #NEWLINE#
set ( list2 ) #NEWLINE#
scrunched = s . translate ( None , delchars ) #NEWLINE#
Index ( [ 'user_id' , 'item_id' , 'channel' , 'time#SPACE#' , 'test' ] , dtype = 'object' ) #NEWLINE#
arr = np . array ( [ list1 , list2 , list3 ] ) #NEWLINE#
spherical_dist ( locations_1 [ 0 ] , locations_2 [ 0 ] ) #NEWLINE#
Y = X [ : , 4 : ] #NEWLINE#
{ 0 , 1 , 2 } . issubset ( [ 1 , 2 , 3 ] ) #NEWLINE#
raise NotImplementedError #NEWLINE#
f2 . write ( lines [ i + 1 ] ) #NEWLINE#
return np . sum ( vec ** 2 ) #NEWLINE#
plt . scatter ( _x , _y , marker = _s , c = c ) #NEWLINE#
L [ 1 ] [ : ] #NEWLINE#
px2 = px . reshape ( ( - 1 , 3 ) ) #NEWLINE# df = pd . DataFrame ( { 'R' : px2 [ : , ( 0 ) ] , 'G' : px2 [ : , ( 1 ) ] , 'B' : px2 [ : , ( 2 ) ] } ) #NEWLINE#
print ( a [ 'y' ] [ 0 ] [ 0 ] ) #NEWLINE#
inset . xaxis . set_tick_params ( labelsize = INSET_TICK_FONTSIZE ) #NEWLINE#
names [ 1 ] = 'bar' #NEWLINE#
btn4 . grid ( row = 3 , column = 0 ) #NEWLINE#
return tuple ( x + y for x , y in zip ( xs , ys ) ) #NEWLINE#
( value [ i : i + n ] for i in range ( 0 , len ( value ) , n ) ) #NEWLINE#
df . words . str . contains ( '[hw]' ) #NEWLINE#
merged . to_csv ( 'output.csv' , index = False ) #NEWLINE#
kwargs . updae ( { 'a' : 1 , 'b' : 2 } ) #NEWLINE#
np . array ( [ [ '1' ] , [ '3' ] , [ 'w' , 'w' ] ] ) #NEWLINE#
loggerA = logging . getLogger ( __name__ + '.A' ) #NEWLINE# loggerB = logging . getLogger ( __name__ + '.B' ) #NEWLINE#
list ( '1984' ) #NEWLINE#
db . Account . find ( ) . sort ( 'UserName' , pymongo . DESCENDING ) #NEWLINE#
[ 'Client' , 'Date' , 'Value_1' , 'Value_2' , 'Value_3' ] #NEWLINE#
ax2 . set_yticklabels ( [ '4' , '16' , '36' , '64' , '100' , '144' , '196' ] ) #NEWLINE#
[ i for v , i in sorted ( ( v , i ) for i , v in enumerate ( x ) ) ] #NEWLINE#
d = datetime . datetime . strptime ( s , '%m/%d/%Y' ) + datetime . timedelta ( days = 1 ) #NEWLINE#
model . compile ( loss = 'binary_crossentropy' , optimizer = 'adam' ) #NEWLINE#
ws = base . add_sheet ( k . upper ( ) ) #NEWLINE#
mycanvas . pack ( fill = BOTH , expand = YES ) #NEWLINE#
sys . path . insert ( 0 , '/usr/local/lib' ) #NEWLINE#
obj . __class__ . __dict__ [ 3 ] #NEWLINE#
return bar ( ) #NEWLINE#
super ( SubThing , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
twiddle_csv ( 'file1' , 'file2' ) #NEWLINE#
mylist . remove ( min ( mylist ) ) #NEWLINE#
img . size #NEWLINE#
np . broadcast ( x , y , z ) . shape #NEWLINE#
cols_to_use = df2 . columns - df . columns #NEWLINE#
type ( self ) . static_var += 1 #NEWLINE#
find_majority ( [ 1 , 1 , - 1 , - 1 , 0 ] ) #NEWLINE#
[ ord ( uc ) for uc in udata ] #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#percentile_approx(x,#SPACE#0.5)#SPACE#FROM#SPACE#df' ) #NEWLINE#
plt . legend ( handles , labels ) #NEWLINE#
return HttpResponse ( dump , mimetype = 'application/json' ) #NEWLINE#
print ( '#SPACE#error#SPACE#was#SPACE#' + str ( type ( e ) ) + str ( e ) ) #NEWLINE#
twitterDataFile . close ( ) #NEWLINE#
"""{"alert",#SPACE#"Sorry,#SPACE#you#SPACE#are#SPACE#not#SPACE#allowed#SPACE#to#SPACE#do#SPACE#that#SPACE#now,#SPACE#try#SPACE#later",#SPACE#"success",#SPACE#"Welcome,#SPACE#user"}""" #NEWLINE#
print ( link . attrib [ 'href' ] ) #NEWLINE#
connection = sqlite3 . connect ( ':memory:' ) #NEWLINE#
self . panel . SetSizer ( sizer ) #NEWLINE#
np . concatenate ( [ a [ : k ] for k in x ] ) #NEWLINE#
print ( line . decode ( 'utf-8' ) ) #NEWLINE#
time_list [ np . arange ( 5 , 7 ) ] #NEWLINE#
lst . append ( 4 ) #NEWLINE#
image_data_blue = image_data [ : , : , ( 2 ) ] #NEWLINE#
b = a . copy ( ) #NEWLINE#
print ( line ) #NEWLINE#
pprint ( a ) #NEWLINE#
get_latest_file ( 'example' , 'files' , 'randomtext011.*.txt' ) #NEWLINE#
get_proc_name ( ) #NEWLINE#
l = list ( map ( lambda x : f ( indices = x ) , itertools . product ( x , y , z ) ) ) #NEWLINE#
'foo' , 'bar' , 'baaz' #NEWLINE#
print ( checktype ( i ) ) #NEWLINE#
return ( x for x in full_list if x not in s ) #NEWLINE#
sorted ( l , key = lambda x_y : ( - x_y [ 1 ] , x_y [ 0 ] ) ) #NEWLINE#
g = df . groupby ( 'key1' ) #NEWLINE#
ax . set_ylim ( 0 , 5 ) #NEWLINE#
a . append ( "#SPACE#name#SPACE#like#SPACE#%%%s'#SPACE#" % b [ 'by_name' ] ) #NEWLINE#
answer [ pk ] . append ( { sk : L [ i ] [ 1 ] } ) #NEWLINE#
row = dict ( zip ( list ( row . keys ( ) ) , row ) ) #NEWLINE#
int ( ipaddress . ip_address ( 'fe80::fbd6:7860' ) ) #NEWLINE#
df [ 'Country' ] = df [ 'Country' ] . str . replace ( 'Å' , 'A' ) #NEWLINE# df [ 'City' ] = df [ 'City' ] . str . replace ( 'ë' , 'e' ) #NEWLINE#
[ 2 , 0 , 1 , 0 , 1 , 0 ] #NEWLINE#
index_list . append ( last_index ) #NEWLINE#
csv_file . writerows ( mylist ) #NEWLINE#
dec_num = int ( oct_string , 8 ) #NEWLINE#
self . _reverse_mocks ( ) #NEWLINE#
x = np . arange ( 20 ) . reshape ( ( 4 , 5 ) ) #NEWLINE# np . savetxt ( 'test.txt' , x ) #NEWLINE#
"""{number:.{digits}f}""" . format ( number = p , digits = n ) #NEWLINE#
[ 'B0' , 'B3' ] #NEWLINE#
self . Bind ( wx . EVT_RIGHT_UP , self . OnExit ) #NEWLINE#
module_name . __file__ #NEWLINE#
np . array ( avgDists ) . argsort ( ) [ : : - 1 ] [ : n ] #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
self . labelvar . set ( 'Click#SPACE#on#SPACE#a#SPACE#widget#SPACE#to#SPACE#see#SPACE#this#SPACE#message#SPACE#change' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
form = UserForm ( obj = user ) #NEWLINE#
print ( re . sub ( "([\\'])" , '\\\\\\1' , 'it\'s#SPACE#"this"' ) ) #NEWLINE#
name_in_module ( ) #NEWLINE#
with open ( 'data.txt' , 'w' ) as outfile : #NEWLINE# #INDENT# json . dump ( data , outfile ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
start = cols [ 1 ] . find ( 'a' ) . string #NEWLINE#
jmag = np . array ( jmah ) #NEWLINE#
plt . xticks ( rotation = 'vertical' ) #NEWLINE#
return subprocess . call ( '#SPACE#' . join ( cmd ) , shell = True ) #NEWLINE#
print ( soup . find ( 'div' , id = 'bodyContent' ) . p ) #NEWLINE#
merged_dict = { k : [ d . get ( k , np . nan ) for d in dicts ] for k in keys } #NEWLINE#
dist = { ( 'A' , 'B' ) : 2.0 , ( 'B' , 'C' ) : 2.0 , ( 'D' , 'E' ) : 3.0 } #NEWLINE#
lst = [ 'foo' , 'bar' , 'spam' , 'egg' ] #NEWLINE# print ( '\n' . join ( lst ) ) #NEWLINE#
result = df . groupby ( 'A' ) . agg ( { 'B2' : 'sum' , 'C2' : 'sum' } ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
filter1 = kwargs [ 'filter1' ] #NEWLINE#
self . ax . clear ( ) #NEWLINE#
rreplace ( '<div><div>Hello</div></div>' , '</div>' , '</bad>' , 1 ) #NEWLINE#
ni . ifaddresses ( 'eth0' ) [ 2 ] [ 0 ] [ 'addr' ] #NEWLINE#
hxs = HtmlXPathSelector ( response ) #NEWLINE#
{ k : ( D [ k ] - v ) for v , k in enumerate ( albums_today ) } #NEWLINE#
itertools . combinations ( ) #NEWLINE#
return max ( ( len ( v ) , v , k ) for k , v in flows . items ( ) ) [ 1 : ] #NEWLINE#
tz . fromutc ( utc_time ) #NEWLINE#
return name [ : name . rfind ( '.' ) ] #NEWLINE#
x = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
open ( filename , 'a' ) . close ( ) #NEWLINE#
transaction . commit ( ) #NEWLINE#
my_set = { 'foo' , 'bar' , 'baz' } #NEWLINE#
plt . ylabel ( 'Number#SPACE#of#SPACE#Dispatches' ) #NEWLINE#
kdll = ctypes . windll . LoadLibrary ( 'kernel32.dll' ) #NEWLINE#
result . append ( message ) #NEWLINE#
return HttpResponseRedirect ( '/' ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( hex_to_datetime ( s ) , dt ) #NEWLINE#
subprocess . check_output ( [ 'python' , '-c' , subprocess_code ] ) == DATA #NEWLINE#
array [ i : i + size ] + array [ : max ( 0 , i + size - len ( array ) ) ] #NEWLINE#
for key , value in list ( my_dict . items ( ) ) : #NEWLINE# #INDENT# do_the_stuff ( key , value ) #NEWLINE#
fcntl . flock ( g , fcntl . LOCK_EX ) #NEWLINE#
assert list ( itersplit ( sample4 , '][' ) ) == sample4 . split ( '][' ) #NEWLINE#
h . encode ( ) #NEWLINE#
t = threading . Thread ( target = get_url , args = ( q , u ) ) #NEWLINE#
sys . stdout . write ( string ) #NEWLINE#
return render_to_response ( 'index.html' , { 'saved_setting' : val } ) #NEWLINE#
return render_template ( 'do_that.html' , user = user ) #NEWLINE#
self . send_response ( 200 ) #NEWLINE#
reader = csv . DictReader ( csvfile , delimiter = '#SPACE#' ) #NEWLINE#
data = line . split ( ) #NEWLINE#
( fn for fn in os . listdir ( '.' ) if fn . endswith ( '.gif' ) ) #NEWLINE#
self . response . out . write ( 'Logged#SPACE#your#SPACE#visit#SPACE#from#SPACE#ip#SPACE#address#SPACE#%s' % ip ) #NEWLINE#
print ( 2 * math . asin ( 1 ) ) #NEWLINE#
letter_count = dict . fromkeys ( string . ascii_lowercase , 0 ) #NEWLINE#
element2 . find_element_by_xpath ( ".//p[@class='test']" ) . text #NEWLINE#
[ [ 1 , 3 ] , [ 7 ] , [ 8 , 9 ] ] #NEWLINE#
pak . show2 ( ) #NEWLINE#
self . browser . find_element_by_xpath ( xpath ) #NEWLINE#
[ x for x in data if x < 3 ] #NEWLINE#
print ( 'pototo\rpota' ) #NEWLINE#
value = a_lower [ key . lower ( ) ] #NEWLINE#
"""^(1+){1,4}$""" #NEWLINE#
digits = int ( math . log10 ( n ) ) + 1 #NEWLINE#
print ( datetime . datetime . now ( ) . strftime ( '%s' ) ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
ax . legend ( handles [ : : - 1 ] , labels [ : : - 1 ] , loc = 'upper#SPACE#left' ) #NEWLINE#
a = numpy . array ( [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
os . chdir ( directory ) #NEWLINE#
ax2 . set_xticks ( [ 10 , 30 , 40 ] ) #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
d . get ( 'get' ) #NEWLINE#
logging . info ( 'Done!' ) #NEWLINE#
np . repeat ( arr , rep . flat ) . reshape ( 2 , - 1 ) #NEWLINE#
print ( 'b.py#SPACE#got#SPACE#ctrl-c' ) #NEWLINE#
data = { foo : foo_value , bar : bar_value } #NEWLINE#
return [ alist [ i : i + sublen ] for i in range ( 0 , len ( alist ) , sublen ) ] #NEWLINE#
plt . scatter ( x , y , c = t , cmap = 'viridis' ) #NEWLINE#
self . name = name #NEWLINE#
print ( frame . f_lineno ) #NEWLINE#
print ( globals ( ) [ 'hi' ] ) #NEWLINE#
dtt = d . timetuple ( ) #NEWLINE#
admin . site . register ( Library , LibraryAdmin ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#

ax . set_zlabel ( 'Z' ) #NEWLINE#
opener . addheaders . append ( ( 'Cookie' , 'cookiename=cookievalue' ) ) #NEWLINE#
point . x , point . y #NEWLINE#
parser . error ( 'Filename#SPACE#not#SPACE#given' ) #NEWLINE#
[ 'myscript.py' , 'arg1' , 'g2' ] #NEWLINE#
oct ( os . stat ( 'test.txt' ) [ ST_MODE ] ) #NEWLINE#
print ( '"{:20}"#SPACE#=>#SPACE#"{:20}"#SPACE#=>#SPACE#{}' . format ( * t ) ) #NEWLINE#
lines_list = open ( 'file.txt' ) . read ( ) . splitlines ( ) #NEWLINE#
a . reshape ( 3 , 1 ) #NEWLINE#
( '^change-password/$' , 'django.contrib.auth.views.password_change' ) , #NEWLINE#
obj = MyModel . objects . create ( val = 1 ) #NEWLINE#
print ( url ) #NEWLINE#
rtr = [ e . strip ( ) . strip ( '\'"' ) for e in rtr ] #NEWLINE#
print ( m [ 0 ] ) #NEWLINE#
y = list ( set ( itertools . permutations ( x , 3 ) ) ) #NEWLINE#
b = a . decode ( 'utf8' ) [ : : - 1 ] #NEWLINE# print ( b ) #NEWLINE#
self . ShowModal ( ) #NEWLINE#
list ( data . keys ( ) ) #NEWLINE#
a . encode ( 'utf-8' ) #NEWLINE#
any ( iam ( x ) for x in [ False , True , False ] ) #NEWLINE#
print ( sys . modules [ 'vtk' ] ) #NEWLINE#
process_url ( a ) #NEWLINE#
jsonFile . write ( json . dumps ( data ) ) #NEWLINE#
curve_fit ( f , xdata , ydata , p0 = None , sigma = None , ** kw ) #NEWLINE#
ax1 . set_ylabel ( 'Pressure#SPACE#[hPa]' ) #NEWLINE#
board2 = [ [ 1 , 0 , 1 ] , [ 1 , 0 , 1 ] , [ 0 , 1 , 0 ] ] #NEWLINE#
self . assertEqual ( yargs [ 0 ] , yexpected ) #NEWLINE#
my_list = list ( my_set ) #NEWLINE#
[ 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ] #NEWLINE#
[ ( 'hi' , 4123.0 ) ] #NEWLINE#
t = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] #NEWLINE#
conn = sqlite3 . connect ( ':memory:' ) #NEWLINE#
raise ValueError ( 'hash#SPACE#table#SPACE#full' ) #NEWLINE#
return self . main_app ( environ , start_response ) #NEWLINE#
l = [ [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] , [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] ] #NEWLINE#
pl . plot ( X , Sine ) #NEWLINE#
ax . spines [ 'bottom' ] . set_linewidth ( 3 ) #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( '' ) #NEWLINE#
row . append ( '_' ) #NEWLINE#
{ { form . content ( rows = '50' , cols = '100' ) } } #NEWLINE#
ax1 . plot ( s1 . index , s1 ) #NEWLINE#
top . insstr ( 0 , 8 , '#SPACE#' ) #NEWLINE#
mydriver . find_element_by_xpath ( xpaths [ 'passwordTxtBox' ] ) . send_keys ( password ) #NEWLINE#
lis = [ '1' , '100' , '111' , '2' , 2 , 2.57 ] #NEWLINE#
p . communicate ( ) #NEWLINE#
print ( sys . builtin_module_names ) #NEWLINE#
plt . title ( 'Dispatches#SPACE#by#SPACE#Day#SPACE#of#SPACE#Week' ) #NEWLINE#
cur . execute ( query , ( limit1 , limit2 ) ) #NEWLINE#
collatz ( 10 ) #NEWLINE#
return render_to_response ( 'my_template.html' , { 'date' : the_date } ) #NEWLINE#
data = sys . stdin . read ( ) #NEWLINE#
sound . Play ( wx . SOUND_SYNC ) #NEWLINE#
self . assertEqual ( xargs [ 0 ] , xexpected ) #NEWLINE#
{ 'a' : { 'innerkey' : 'innervalue' } } #NEWLINE#
help ( f ) #NEWLINE#
plot . colorbar ( im , cax = ax2 ) #NEWLINE#
assert logging . warn ( 'disable#SPACE#me#SPACE#with#SPACE#the#SPACE#-O#SPACE#option' ) is None #NEWLINE#
int . from_bytes ( b , byteorder = 'big' , signed = False ) #NEWLINE#
lambdas_list . append ( lambda obj = obj : obj . some_var ) #NEWLINE#
re . search ( '(\\d+\\.\\d+)' , s ) . group ( ) #NEWLINE#
ax . set_ylim ( - 0.5 , 1.5 ) #NEWLINE#
driver . set_window_size ( 1120 , 550 ) #NEWLINE#
matrix_b . dtype #NEWLINE#
app . logger . addHandler ( file_handler ) #NEWLINE#
[ 5 , 6 , 7 , 1 , 8 , 2 , 3 , 9 , 4 ] #NEWLINE#
super ( MyCollection , self ) . __init__ ( args [ 0 ] ) #NEWLINE#
return jsonify ( d ) #NEWLINE#
self . redis = Redis ( ) #NEWLINE#
L . sort ( ) #NEWLINE#
opt . add_argument ( '--help-long' , help = 'Show#SPACE#all#SPACE#options.' , action = 'help' ) #NEWLINE#
MOVE = 'no' #NEWLINE#
isinstance ( { } , dict ) #NEWLINE#
return sin ( x ) * cos ( x ) #NEWLINE#
s . rstrip ( punctuation ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
{ { request . user . pretty_username } } #NEWLINE#
_f . write ( '%s#SPACE#=#SPACE#%s\n' % ( name , repr ( val ) ) ) #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
super ( Window , self ) . __init__ ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
sp . sourceslist . save ( ) #NEWLINE#
s = 'This#SPACE#is#SPACE#string#SPACE#:#SPACE#%d' % ( page + 1 , ) #NEWLINE#
pd . DataFrame ( X , columns = v . get_feature_names ( ) , index = grouped . index ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
os . system ( mycommand ) #NEWLINE#
worker . start ( ) #NEWLINE#
A3 [ [ 0 , 1 , 2 ] , [ 0 , 1 , 0 ] ] #NEWLINE#
return cmp ( x , y ) #NEWLINE#
os . chmod ( path , 511 ) #NEWLINE#
sns . lmplot ( 'x' , 'y' , data = df , hue = 'dataset' , fit_reg = False ) #NEWLINE#
a [ : ] = [ ( x , mapping [ x ] ) for x in b ] #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
map ( list , a ) #NEWLINE#
totalList = [ [ [ 0 , 1 ] , [ 2 , 7 ] , [ 6 , 3 ] ] , [ [ 2 , 3 ] , [ 6 , 1 ] , [ 4 , 1 ] ] ] #NEWLINE#
request . environ [ 'body_copy' ] #NEWLINE#
x . astype ( 'M8[D]' ) . astype ( 'O' ) #NEWLINE# x . astype ( 'M8[ms]' ) . astype ( 'O' ) #NEWLINE#
[ [ [ 'a' , 'b' ] , [ 'c' , 'd' ] ] , [ [ 'e' , 'f' ] , [ 'g' , 'h' ] ] ] #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
c . execute ( 'select#SPACE#your_col_1,#SPACE#your_col_2#SPACE#from#SPACE#your_table' ) #NEWLINE#
sys . exit ( 12 ) #NEWLINE#
print ( ( numC , 'More' ) ) #NEWLINE#
min ( filtered , key = lambda x : x . last - x . first ) #NEWLINE#
return [ i for i , x in enumerate ( a ) if x in list_duplicates ( a ) ] #NEWLINE#
r = re . compile ( '[^a-zA-Z0-9-]' ) #NEWLINE#
foo ( ) ( ) #NEWLINE#
mylist = [ 'b' , 'C' , 'A' ] #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
wx . Frame . __init__ ( self , None , wx . ID_ANY , size = ( 800 , 600 ) ) #NEWLINE#
df [ 'D' ] = df [ 'U' ] . map ( d ) #NEWLINE#
zip ( MONTHS , MONTHS ) #NEWLINE#
im = Image . open ( 'test.png' ) #NEWLINE#
df [ 'hour' ] = df [ 'hour' ] . apply ( lambda x : int ( x . lstrip ( 'h' ) ) - 1 ) #NEWLINE#
print ( "Don't#SPACE#see#SPACE#this" ) #NEWLINE#
print ( 'Write#SPACE#access#SPACE#not#SPACE#permitted#SPACE#on#SPACE#%s' % filename ) #NEWLINE#
pd . DataFrame ( { 'col1' : { ( 'rowidx0_level0' , 'rowidx0_level1' ) : 5 } } ) #NEWLINE#
df . groupby ( 'a' , as_index = False ) . apply ( lambda x : x . loc [ x . b . argmax ( ) , ] ) #NEWLINE#
x = X . objects . get ( id = x . id ) #NEWLINE#
bisect . bisect_left ( list_ , item ) #NEWLINE#
json_string = json . dumps ( json_dict , ensure_ascii = False ) #NEWLINE#
np . log ( sample_df ) . diff ( ) #NEWLINE#
return render_to_response ( 'foo.html' , d ) #NEWLINE#
some_list == sorted ( some_list ) #NEWLINE#
df2 = df2 . drop ( 'teams' , axis = 1 ) #NEWLINE#
QApp ( ) . run ( ) #NEWLINE#
e1 . pack ( ) #NEWLINE#
foo ( 1 , 2 , 3 , 'splat1' , 'splat2' , named = 'potato' ) #NEWLINE#
conn . select ( 'Inbox' ) #NEWLINE#
df . ix [ np . where ( ( df [ 'class' ] == 'a' ) & ( df [ 'year' ] == 2013 ) ) [ 0 ] ] #NEWLINE#
res = func ( * args , ** kwargs ) #NEWLINE#
print ( row [ 'Date' ] ) #NEWLINE#
array = [ [ 'a' , 'b' ] , [ 'a' , 'b' , 'c' ] , [ 'a' ] ] #NEWLINE# result = set ( x for l in array for x in l ) #NEWLINE#
[ [ 'A' ] , [ ] , [ 'C' , 'C' ] ] #NEWLINE#
elem . send_keys ( '2013' ) #NEWLINE#
[ 'Alaska' , 'Alabama' , 'Arkansas' , 'American' , 'Samoa' , 'Arizona' , #NEWLINE# 'California' , 'Colorado' ] #NEWLINE#
list ( Blog . objects . values ( ) ) #NEWLINE# Blog . objects . values ( 'id' , 'name' ) #NEWLINE#
n = clamp ( n , 7 , 42 ) #NEWLINE#
ostream = StringIO ( istream . read ( ) ) #NEWLINE#
print ( random . choice ( data ) ) #NEWLINE#
return render_to_response ( 'results.html' , { 'data' : zip ( table , list ) } ) #NEWLINE#
os . chdir ( random . choice ( [ d for d in os . listdir ( os . curdir ) if os . path . isdir ( d ) ] ) ) #NEWLINE#
attributes = [ 'Section' , 'Class' , 'Subclass' , 'Group' , 'Subgroup' ] #NEWLINE#
return '' . join ( buffer ) #NEWLINE#
return json . dumps ( doc , sort_keys = True , indent = 4 , default = json_util . default ) #NEWLINE#
subprocess . Popen ( smart_cmd ) #NEWLINE#
plt . xlim ( ( - 5 , 5 ) ) #NEWLINE#
os . kill ( 2405 , 0 ) #NEWLINE#
some_object = klass ( ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
sbtn = driver . find_element_by_css_selector ( 'button.gbqfba' ) #NEWLINE#
r = Replacer ( abc = 'xyz' , ghi = 'zzq' , ** { 'def' : 'yyt' } ) #NEWLINE#
b [ indices ] = a [ indices ] #NEWLINE#
nSentences = len ( re . findall ( pat , shortText ) ) #NEWLINE#
end = datetime . time ( 1 , 0 , 0 ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
print ( map ( lambda x , y : abs ( x - y ) , l [ 1 : ] + l [ : 1 ] , l ) ) #NEWLINE#
map ( '' . join , itertools . product ( string . ascii_letters , repeat = 3 ) ) #NEWLINE#
plt . figure ( figsize = ( 12 , 8 ) ) #NEWLINE#
self . after ( 1000 , self . countdown ) #NEWLINE#
reshaped2 . show ( ) #NEWLINE#
ax . set_aspect ( abs ( ( extent [ 1 ] - extent [ 0 ] ) / ( extent [ 3 ] - extent [ 2 ] ) ) / aspect ) #NEWLINE#
my_list . sort ( ) #NEWLINE#
'1' in '10' #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
p1 + '/' + '/' . join ( [ i for i in p2 . split ( '/' ) if i not in p1 . split ( '/' ) ] ) #NEWLINE#
np . save ( 'temp.npy' , data ) #NEWLINE#
fh3 . close ( ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
self . test_status . mark ( 'test_accountSignup' , result , 'Signup#SPACE#was#SPACE#successful' ) #NEWLINE#
myfile = open ( 'xyz.txt' , 'w' ) #NEWLINE#
data = json . load ( json_data ) #NEWLINE#
screen . blit ( temp_surf , ( 0 , 0 ) ) #NEWLINE#
df . groupby ( np . arange ( len ( df ) ) // 10 ) #NEWLINE#
return self . app ( environ , custom_start_response ) #NEWLINE#
print ( list ( get_week ( datetime . datetime . now ( ) . date ( ) ) ) ) #NEWLINE#
print ( opener . open ( 'http://check.torproject.org/' ) . read ( ) ) #NEWLINE#
plt . setp ( ax . get_xticklabels ( ) , visible = False ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# self . modules = [ ] #NEWLINE#
verbose_name = 'Catalogue' #NEWLINE#
super ( Point , self ) . __init__ ( * args ) #NEWLINE#
return redirect ( reverse ( 'name-of-url' ) ) #NEWLINE#
c = np . concatenate ( ( a [ ... , np . newaxis ] , b [ ... , np . newaxis ] ) , axis = 3 ) #NEWLINE#
__init__ . py #NEWLINE#
zf = zipfile . ZipFile ( 'zipped_pickle.zip' , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
print ( s . encode ( 'latin1' ) . decode ( 'utf8' ) ) #NEWLINE#
next_li_element = page . find_next_sibling ( 'li' ) #NEWLINE#
print ( 'base64#SPACE#encoded#SPACE#data#SPACE#found!' ) #NEWLINE#
conn = hive . Connection ( host = 'YOUR_HIVE_HOST' , port = PORT , username = 'YOU' ) #NEWLINE#
last_inner_append ( x [ - 1 ] , y ) #NEWLINE#
self . driver . quit ( ) #NEWLINE#
plt . legend ( loc = 'best' ) #NEWLINE#
driver . get ( url ) #NEWLINE#
return HttpResponse ( json . dumps ( posts ) , content_type = 'application/json' ) #NEWLINE#
ax . xaxis . grid ( True ) #NEWLINE#
signal . signal ( signal . SIGALRM , signal_handler ) #NEWLINE#
eval ( input ( 'Press#SPACE#ENTER#SPACE#to#SPACE#exit' ) ) #NEWLINE#
L = [ ( x + [ 0 ] ) for x in L ] #NEWLINE#
d = { ( 1 ) : 'a' , ( 2 ) : 'b' , ( 3 ) : 'c' } #NEWLINE#
colorbar ( ) #NEWLINE#
stem ( 'simpsons' ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
[ 2.0 , 2.0017 ] #NEWLINE#
app . debug = True #NEWLINE#
foo ( 'bobbill' ) #NEWLINE#
client . put_file ( dropbox_path , f ) #NEWLINE#
sorted ( [ ( i , j ) for j in range ( 10 ) for i in range ( 10 ) if j > i ] ) #NEWLINE#
df . xs ( 1 ) #NEWLINE#
df . loc [ df [ 'column' ] . isin ( my_list ) ] #NEWLINE#
print ( f . bar ) #NEWLINE#
buttonframe . pack ( side = 'top' , fill = 'x' , expand = False ) #NEWLINE#
cursor = conn . cursor ( ) #NEWLINE#
print ( ops [ '+' ] ( 1 , 1 ) ) #NEWLINE#
intersection ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
board1 = [ [ 1 , 0 , 1 ] , [ 1 , 0 , 1 ] , [ 0 , 0 , 1 ] ] #NEWLINE#
print ( ascii ( json . loads ( '"\\ud83d\\ude4f"' ) ) ) #NEWLINE#
ttk . Label ( mf , text = 'meters' ) . grid ( column = 3 , row = 2 , sticky = W ) #NEWLINE#
open ( 'test.txt' , 'wb' ) . write ( 'One\nTwo\rThree\r\n' ) #NEWLINE#
temp . append ( data . tolist ( ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
p . add_argument ( 'server' , default = None ) #NEWLINE#
func_to_call ( ) #NEWLINE#
pylab . show ( ) #NEWLINE#
list1 = [ 'a' , 'b' , 'c' ] #NEWLINE#
struct . unpack ( '!d' , ( num2 [ 2 : ] + num1 [ 2 : ] ) . decode ( 'hex' ) ) [ 0 ] #NEWLINE#
list ( filter ( bool , l ) ) #NEWLINE#
print ( list ( logging . Logger . manager . loggerDict . keys ( ) ) ) #NEWLINE#
dt . microsecond #NEWLINE#
cur . execute ( 'ALTER#SPACE#TABLE#SPACE#HHV2PUB#SPACE#ADD#SPACE#COLUMN#SPACE#%s#SPACE#text' % c ) #NEWLINE#
df . columns = pd . MultiIndex . from_product ( [ df . columns , [ 'C' ] ] ) #NEWLINE#
print ( 'restart' ) #NEWLINE#
print ( json . dumps ( t , cls = MyEncoder ) ) #NEWLINE#
for item in a : #NEWLINE# #INDENT# print ( item ) #NEWLINE# a [ : ] = [ ] #NEWLINE#
list ( compress ( star_list , '**' ) ) #NEWLINE#
self . _numberButtons [ i ] . clicked . connect ( partial ( self . _number , i ) ) #NEWLINE#
"""Black#SPACE#Ground""" #NEWLINE#
"""Black#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#Ground""" #NEWLINE#
df2 . apply ( lambda x : df2 . loc [ ~ x . isin ( df1 [ x . name ] ) , x . name ] ) #NEWLINE#
df = df . sort_index ( axis = 1 ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#OK' ) #NEWLINE#
next ( ( x for x in sorted_list if x in allowed_set ) , None ) #NEWLINE#
return False #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
plt . ylim ( 0 , 8 ) #NEWLINE#
BabyDataSet = zip ( names , births ) #NEWLINE#
bigclass = type ( 'bigclass' , ( hello , bye ) , { } ) #NEWLINE#
logging . Logger . debugv = debugv #NEWLINE#
x = matrix ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) #NEWLINE#
btn5 . grid ( row = 4 , column = 0 ) #NEWLINE#
my_dict [ item ] [ 'key2' ] = 'value3' #NEWLINE#
[ r for r in x if not any ( s in r for s in y ) ] #NEWLINE#
print ( arith . parseString ( '12AX+34BY+C*5DZ+E' ) [ 0 ] ) #NEWLINE#
file_content = self . request . POST . multi [ 'myfieldname' ] . file . read ( ) #NEWLINE#
self . setWindowTitle ( 'Upper' ) #NEWLINE#
client . set_options ( wsse = security ) #NEWLINE#
user . get_all_permissions ( ) #NEWLINE#
merge_EvKounis [ 2.077687978744507 , 2.107503890991211 , 2.127305030822754 ] #NEWLINE#
print ( r . get ( 'key_name' , 'Missing:#SPACE#key_name' ) ) #NEWLINE#
counterpart . sendall ( data ) #NEWLINE#
print ( Photo . objects . filter ( tags = t1 ) . filter ( tags = t2 ) . query ) #NEWLINE#
reactor . run ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
return ( x - 1 ) // 10 if x > 0 else 0 #NEWLINE#
self . log . info ( '####SPACE#Exception#SPACE#Occurred#SPACE#!!!' ) #NEWLINE#
[ '#SPACE##SPACE#200,21' , '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' , '0,3' , '2#SPACE##SPACE#' ] #NEWLINE#
from itertools import combinations #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
[ 2 , 3 , 4 , 6 , 8 , 12 ] #NEWLINE#
label = subprocess . check_output ( [ 'git' , 'describe' ] ) #NEWLINE#
event . wait ( ) #NEWLINE#
foo = locals ( ) . get ( 'foo' , 'hey' ) #NEWLINE#
return A - A . multiply ( BisBigger ) + B . multiply ( BisBigger ) #NEWLINE#
config . read ( [ 'site.cfg' , os . path . expanduser ( '~/.myapp.cfg' ) ] ) #NEWLINE#
mean1 = np . array ( [ 5.028 , 3.48 , 1.46 , 0.248 ] ) #NEWLINE#
s . replace ( ',' , '#SPACE#' ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
browser . quit ( ) #NEWLINE#
{ k1 : d2 [ d1 [ k1 ] ] for k1 in d1 if d1 [ k1 ] in d2 } #NEWLINE#
print ( 'hei' ) #NEWLINE#
print ( 'gaierror#SPACE#occurred' ) #NEWLINE#
print ( 'err#SPACE#invoked' ) #NEWLINE#
return os . environ [ name ] . startswith ( '()#SPACE#{' ) #NEWLINE#
- - logto / var / log / uwsgi / app . log #NEWLINE#
df1 = pd . DataFrame ( np . random . randint ( 1 , 5 , ( 10 , 2 ) ) , columns = [ 'a' , 'b' ] ) #NEWLINE# df1 . sort ( [ 'a' , 'b' ] , ascending = [ True , False ] ) #NEWLINE#
ax . plot ( list ( range ( 11 ) ) , 'o' , color = 'black' ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
reader = csv . reader ( f , delimiter = ',' ) #NEWLINE#
[ arr [ max ( 0 , idx - 1 ) : idx + 2 ] for idx in range ( 0 , len ( arr ) , 2 ) ] #NEWLINE#
np . where ( x & x - 1 == 0 ) #NEWLINE#
return local_dt . replace ( microsecond = utc_dt . microsecond ) #NEWLINE#
plt . show ( ) #NEWLINE#
newgrid . append ( [ x [ i ] for x in grid ] ) #NEWLINE#
WidgetTestCase . CustomParameter = 'some_address' #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
{ 'S2' : 'string0N0string1' , 'S1' : 'string0N0string1N1string2' } #NEWLINE#
enemy1 -= punch #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
date = datetuil . parser . parse ( string , tzinfos = tzd ) . astimezone ( pytz . utc ) #NEWLINE#
sess . run ( [ init_op ] ) #NEWLINE#
0.000610568083 , 0.182380809 , 2.66344008 , 11.8164677 , 30.1811501 #NEWLINE#
value = next ( v for k , v in some_dict . items ( ) if 'substring' in k ) #NEWLINE#
engine . execute ( createview ) #NEWLINE#
ET . ElementTree ( root ) . write ( noteFile , encoding = 'utf-8' , xml_declaration = True ) #NEWLINE#
df . index . get_loc ( '2015-04-25' ) #NEWLINE#
ax0b . set_xticklabels ( [ ] ) #NEWLINE#
seen . add ( item . lower ( ) ) #NEWLINE#
float_array . fromstring ( input_file . read ( ) ) #NEWLINE#
ax . scatter ( m [ i , 0 ] , m [ i , 1 ] , m [ i , 2 ] , color = 'b' ) #NEWLINE#
( 16975734532069054349 ) . to_bytes ( 8 , 'big' ) #NEWLINE#
plt . ylim ( 3 , 0 ) #NEWLINE#
hog = cv2 . HOGDescriptor ( 'hog.xml' ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
self . grid_rowconfigure ( 1 , weight = 1 ) #NEWLINE#
pubkey = rsa . PublicKey ( n , e ) #NEWLINE#
Immutable = collections . namedtuple ( 'Immutable' , 'a#SPACE#b' ) #NEWLINE#
del a [ 'name' ] #NEWLINE#
[ 'abfdsdg' , 'abed' , 'abb' , 'd' , 'sdfdg' , 'xc' ] #NEWLINE#
timer . timeout . connect ( self . move_towards ) #NEWLINE#
"""//div[contains(text(),#SPACE#"{0}")#SPACE#and#SPACE#@class="inner"]""" . format ( text ) #NEWLINE#
id ( float ( 'NaN' ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
parser . add_argument ( 'args' , nargs = argparse . REMAINDER ) #NEWLINE#
df [ 'hour' ] = df [ 'hour' ] . apply ( lambda x : int ( x . lstrip ( 'h' ) ) - 1 ) #NEWLINE# df #NEWLINE#
print ( response . content ) #NEWLINE#
import MySQLdb #NEWLINE#
re . sub ( 'g+' , 'g' , 'omgggg' ) #NEWLINE# re . sub ( 'l+' , 'l' , 'lollll' ) #NEWLINE#
print ( response . read ( ) . decode ( 'utf8' ) ) #NEWLINE#
run ( 'my_command' ) #NEWLINE#
myComp = [ elem for elem in json_data if elem == 'MyString' ] #NEWLINE#
df . columns = list ( resoverall . keys ( ) ) #NEWLINE#
worksheet . insert_chart ( 'E2' , chart ) #NEWLINE#
x = [ [ '565.0' , '575.0' ] , [ '1215.0' , '245.0' ] , [ '1740.0' , '245.0' ] ] #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( df2 [ [ 15 , 16 , 17 , 18 , 19 , 8 ] ] ) #NEWLINE#
qs3 = qs . annotate ( max_priority = Max ( 'a_priority' ) ) . values ( 'b' , 'c' ) . distinct ( ) #NEWLINE#
b [ np . triu_indices ( 4 , 1 ) ] #NEWLINE#
[ 'cake' , 'brownies' , 'cookies' ] #NEWLINE#
texts [ 0 ] . set_fontsize ( 4 ) #NEWLINE#
fig = plt . figure ( figsize = ( xinch , yinch ) ) #NEWLINE#
ws . cell ( row = i , column = j ) #NEWLINE#
t = [ ( ( 'd' , 0 ) , ( 'g' , 0 ) ) , ( ( 'd' , 0 ) , ( 'd' , 1 ) ) , ( ( 'i' , 0 ) , ( 'g' , 0 ) ) ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
ax . set_zlim ( 0 , 5 ) #NEWLINE#
main ( ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 1 , 1 , 1 ] #NEWLINE#
p . wait ( ) #NEWLINE#
client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
self . send_header ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
print ( datetime . datetime . strptime ( '2010-08-27' , '%Y-%m-%d' ) ) #NEWLINE#
df [ col ] = df [ col ] . sum ( ) #NEWLINE#
ng . run ( ) #NEWLINE#
[ 1 ] [ 0 ] [ 3 ] #NEWLINE#
return lambda : [ func ( ) for _ in range ( n ) ] #NEWLINE#
pattern = re . compile ( pattern_string ) #NEWLINE#
fout . close ( ) #NEWLINE#
best_authors = Author . objects . filter ( books__bestseller = True ) . distinct ( ) #NEWLINE#
df [ ~ df . From . str . contains ( ignorere ) ] #NEWLINE#
return render_to_response ( 'piechart.html' , data ) #NEWLINE#
mat = np . matrix ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
sstd . on_changed ( update ) #NEWLINE#
sys . stdout . write ( processed_data + '\n' ) #NEWLINE#
return [ ids [ item [ 'id' ] ] for item in old_list if item [ 'id' ] in ids ] #NEWLINE#
page = request . args . get ( 'page' , 0 , type = int ) #NEWLINE#
format ( 1123000 , ',d' ) #NEWLINE#
frames . append ( pd . DataFrame . from_dict ( d , orient = 'index' ) ) #NEWLINE#
__builtins__ . set #NEWLINE#
x = ( 'a' , 1 ) , ( 2 , 3 ) , ( 4 , ) #NEWLINE# [ str ( item [ 0 ] ) for item in x if item and item [ 0 ] ] #NEWLINE#
plt . legend ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , title = 'Test#SPACE#scatter' ) #NEWLINE#
e . shape #NEWLINE#
random . choice ( my_list ) ( ) #NEWLINE#
df = pd . DataFrame ( a , columns = [ 'Company' , 'Brand' , 'Date' , 'Amount' ] ) #NEWLINE#
alist . append ( string [ i : j + 1 ] ) #NEWLINE#
random_function ( 'argument_data' ) #NEWLINE#
frozenset ( [ ( 3 , 2 ) , ( 1 , 3 ) , ( 4 , 1 ) , ( 2 , 1 ) ] ) #NEWLINE#
return all ( ( x > 0 ) == ( y > 0 ) for x , y in zip ( l1 , l2 ) ) #NEWLINE#
print ( response . text ) #NEWLINE#
log2int_faster = int ( x ) . bit_length ( ) - 1 #NEWLINE#
[ ( 'b' , '1' ) , ( 'b' , '2' ) , ( 'c' , '1' ) , ( 'c' , '2' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( 'mystr#SPACE#is#SPACE#not#SPACE#empty' ) #NEWLINE#
[ { 'a' : 4 , 'b' : 4 } , { 'c' : 3 , 'd' : 10 , 'h' : 8 } , { 'c' : 7 , 'd' : 10 , 'e' : 8 } ] #NEWLINE#
timeobj = datetime . datetime . strptime ( timestring , '%H:%M:%S.%f' ) . time ( ) #NEWLINE#
return render_to_response ( 'oneproduct.mako' , opts , request ) #NEWLINE#
np . array ( list ( chain ( * [ np . arange ( 20 ) . reshape ( 4 , 5 ) [ i : : 2 ] for i in range ( 2 ) ] ) ) ) #NEWLINE#
[ '234' , '+1' , '-10' ] #NEWLINE#
g . set_titles ( '{col_name}' ) #NEWLINE#
ax . xaxis . set_minor_locator ( MultipleLocator ( 5 ) ) #NEWLINE#
result = list ( { x [ 'id' ] : x for x in lst1 + lst2 } . values ( ) ) #NEWLINE#
dict . __setitem__ ( self , x , value ) #NEWLINE#
ax . figure . show ( ) #NEWLINE#
print ( enclosed . parseString ( data ) . asList ( ) ) #NEWLINE#
v4l2 - ctl - l #NEWLINE#
Tkinter . mainloop ( ) #NEWLINE#
dir = os . path . dirname ( __file__ ) #NEWLINE#
i = int ( input ( '>>#SPACE#' ) ) #NEWLINE#
s . between ( 0 , 1 ) . any ( ) #NEWLINE#
ax . set_xlabel ( '$x$' ) #NEWLINE#
x [ : ] = [ 'something' ] #NEWLINE#
return self . data [ attr ] #NEWLINE#
subset = data_set [ [ 'data_date' , 'data_1' , 'data_2' ] ] #NEWLINE# tuples = [ tuple ( x ) for x in subset . values ] #NEWLINE#
unicode_b = b . decode ( 'some_encoding' ) #NEWLINE#
sys . path . append ( '/path/ra_event/' ) #NEWLINE#
return <STR0> ( ) . <STR0> ( attr ) #NEWLINE#
raise TypeError ( 'first#SPACE#argument#SPACE#must#SPACE#be#SPACE#callable#SPACE#or#SPACE#None' ) #NEWLINE#
inList = any ( a in sublist for sublist in mylist ) #NEWLINE#
np . random . shuffle ( arr [ : , ( i ) ] ) #NEWLINE#
X , Y = np . meshgrid ( X , Y ) #NEWLINE#
connection = urllib . request . urlopen ( url ) #NEWLINE# connection . close ( ) #NEWLINE#
print ( len ( s ) , len ( data ) , repr ( data ) ) #NEWLINE#
print ( img . shape ) #NEWLINE#
r . read ( ) #NEWLINE#
pylab . ylim ( [ 0 , 1000 ] ) #NEWLINE#
{ 'a' : [ 'abc' , 'gh' ] , 'b' : [ 'cdf' ] , 'g' : [ 'fh' , 'hfz' ] } #NEWLINE#
plt . plot ( c [ 0 ] , c [ 1 ] , c [ 2 ] ) #NEWLINE#
list ( intermix ( [ 1 , 0 , 1 , 1 , 2 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 ] ) ) #NEWLINE#
print ( 'running#SPACE#theFunc' ) #NEWLINE#
proc . wait ( ) #NEWLINE#
sns . heatmap ( table2 , annot = True , cmap = 'Blues' , fmt = 'g' ) #NEWLINE#
np . fill_diagonal ( out , 1 ) #NEWLINE#
return redirect ( login_url ) #NEWLINE#
frame = cv . QueryFrame ( self . capture ) #NEWLINE#
print ( s . read ( ) ) #NEWLINE#
print ( entry . get ( 'status' , 'Failure' ) ) #NEWLINE#
f . writelines ( ',' . join ( str ( j ) for j in i ) + '\n' for i in matrix ) #NEWLINE#
msg = MIMEMultipart ( ) #NEWLINE#
D = np . r_ [ np . c_ [ A , B ] , np . c_ [ B . T , C ] ] #NEWLINE#
"""({0.real:.2f}#SPACE#+#SPACE#{0.imag:.2f}i)""" . format ( n ) #NEWLINE#
wn . synsets ( 'bank' ) [ 0 ] . lemma_names ( 'fre' ) #NEWLINE#
km = joblib . load ( 'model.pkl' ) #NEWLINE#
print ( '{:#SPACE#g}Â°{}\'{}"' . format ( - 0.0 , 23 , 29 ) ) #NEWLINE#
print ( list ( itertools . islice ( arith ( 10 , 2 ) , 100 ) ) ) #NEWLINE#
return bool ( _digits . search ( d ) ) #NEWLINE#
y = lambda x : 2 * x if x < 10 else raise_ ( Exception ( 'foobar' ) ) #NEWLINE#
df / pd . concat ( [ df . three ] * 3 , axis = 1 ) . values #NEWLINE#
return L [ item ] [ 0 ] #NEWLINE#
manual_wcwidth ( data ) #NEWLINE#
pass #NEWLINE#
[ 0 , 1 , 1 , 3 , 3 , 3 , 1 , 0 ] , #NEWLINE#
a = np . append ( a , i ) #NEWLINE#
response = json . loads ( jsonResponse ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.3 ) #NEWLINE#
print ( 'Setting#SPACE#up#SPACE#GPIO' ) #NEWLINE#
final_l . append ( ( p [ 0 ] , visit ( p ) ) ) #NEWLINE#
tmp . append ( [ X [ i , j ] for i in X ] ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
BabyDataSet = list ( zip ( names , births ) ) #NEWLINE#
logging . getLogger ( 'raven' ) . setLevel ( logging . WARNING ) #NEWLINE#
import imp #NEWLINE# imp . reload ( othermodule ) #NEWLINE#
d = int ( s [ 0 : 7 ] , 2 ) + int ( s [ 8 ] ) / 2.0 #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
foo ( ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
[ [ int ( i ) for i in j . split ( ) ] for j in open ( 'myfile' ) . readlines ( ) ] #NEWLINE#
print ( df . iloc [ : , ( 0 ) ] . tolist ( ) ) #NEWLINE#
ax . set_zlim ( - 100 , 100 ) #NEWLINE#
fruits = eval ( "['apple',#SPACE#'orange',#SPACE#'banana']" , { '__builtins__' : None } , { } ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
a [ i , j ] #NEWLINE#
super ( Egg , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
self . clip . disconnect ( self . signal_id ) #NEWLINE#
print ( [ n for n , e in enumerate ( l ) if e == 'll' ] ) #NEWLINE#
fd = sys . stdin . fileno ( ) #NEWLINE#
class form ( forms . Form ) : #NEWLINE# #INDENT# file = forms . FileField ( required = False ) #NEWLINE#
output = p3 . communicate ( ) [ 0 ] #NEWLINE#
break #NEWLINE#
my_class = locate ( 'my_package.my_module.MyClass' ) #NEWLINE#
self . image . save ( 'test.jpg' , File ( s ) , save = False ) #NEWLINE#
server . ehlo ( ) #NEWLINE#
outfile . write ( '\t' . join ( col ) . replace ( '\n' , '' ) + '\n' ) #NEWLINE#
del row [ 1 ] #NEWLINE#
np . cov ( data , rowvar = False ) #NEWLINE#
axes . set_ylim ( [ ymin , ymax ] ) #NEWLINE#
Y [ ( 1 ) , : ] #NEWLINE#
'in' in { 'out' : 'in' } #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
do_stuff ( ) #NEWLINE#
x = x [ 1 : ] #NEWLINE#
quit ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
d1 = OrderedDict ( [ ( 'a' , '1' ) , ( 'b' , '2' ) ] ) #NEWLINE#
plt . plot ( data , '.' ) #NEWLINE#
cur . execute ( sql , params ) #NEWLINE#
race_object . save ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . sock . connect ( ( 'someserver.com' , 443 ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
sw . pack ( fill = tk . BOTH , expand = 1 ) #NEWLINE#
[ '' . join ( v ) for k , v in groupby ( list_1 , key = lambda s : s . startswith ( '>' ) ) ] #NEWLINE#
l . extend ( t + t2 ) #NEWLINE#
bigd = { 'a' : 1 , 'b' : 2 } #NEWLINE#
emoji_block2 = re . compile ( '[🚀-\U0001f6ff]' ) #NEWLINE#
emoji_block2 = re . compile ( '[\ud83d][\ude80-\udeff]' ) #NEWLINE#
print ( token . access_token ) #NEWLINE#
dict ( ( k , bigdict [ k ] ) for k in wanted_keys if k in bigdict ) #NEWLINE#
NameRank . sort ( key = lambda x : int ( x . split ( ) [ 1 ] ) ) #NEWLINE#
np . dstack ( ( np . identity ( 10 ) , ) * 30 ) #NEWLINE#
result . save ( 'out.bmp' ) #NEWLINE#
set ( x ) == set ( y ) #NEWLINE#
barley ( 'new#SPACE#arg' ) #NEWLINE#
print ( save_data . get ( ) ) #NEWLINE#
{ { i } } , { { j } } #NEWLINE#
ent4 . grid ( row = 3 , column = 1 ) #NEWLINE#
base64 . b64encode ( auth ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
opts [ 'queryset' ] = list ( queryset ) #NEWLINE#
return cls . __new__ ( ) #NEWLINE#
list ( OrderedDict . fromkeys ( t ) . keys ( ) ) #NEWLINE#
a , b = b , a + b #NEWLINE#
{ 'A' : [ 0 , 1 ] , 'B' : [ 2 ] , 'C' : [ 3 ] } #NEWLINE#
plt . show ( ) #NEWLINE#
self . setCentralWidget ( self . window ) #NEWLINE#
return random . choice ( list ( dictionary . values ( ) ) ) #NEWLINE#
lbl5 . grid ( row = 4 , column = 0 ) #NEWLINE#
return n * factorial ( n - 1 ) #NEWLINE#
[ _ for _ in itertools . compress ( d , map ( lambda x : x >= 4 , a ) ) ] #NEWLINE#
h = [ g for _ , g in df . groupby ( 'v1' ) ] #NEWLINE#
df . stack ( ) . map ( m ) . unstack ( ) #NEWLINE#
d += timedelta ( days = 7 ) #NEWLINE#
print ( json . dumps ( { 'AAA' : 1 , 'BBB' : 2 , 'CCC' : 3 } ) ) #NEWLINE#
print ( valid_ip ( 'gibberish' ) ) #NEWLINE#
conn . send ( data ) #NEWLINE#
a , b = 1 , 1 #NEWLINE#
yaml . add_multi_constructor ( '!ruby/object:' , construct_ruby_object ) #NEWLINE#
c . mymethod2 ( ) #NEWLINE#
writer = csv . writer ( output , delimiter = ':' ) #NEWLINE#
str ( User . query . filter_by ( role_id = user_role ) ) #NEWLINE#
view . show ( ) #NEWLINE#
[ x for x in lst if len ( x ) not in seen and seen . add ( len ( x ) ) is None ] #NEWLINE#
args = parser . parse_args ( '-f#SPACE#1#SPACE#2#SPACE#3#SPACE#4' . split ( ) ) #NEWLINE#
ax . set_ylim ( 0 , 10 ) #NEWLINE#
logger . exception ( 'Problem#SPACE#with#SPACE#%s' , 'math.exp' ) #NEWLINE#
df . iloc [ np . sort ( np . concatenate ( [ idx [ ~ iszero ] , keep_these ] ) ) ] #NEWLINE#
[ 'x' , '#SPACE#' , 'y' , None , '#SPACE#' , 'z' ] #NEWLINE# [ 'x' , '#SPACE#' , 'y' , 'y' , '#SPACE#' , 'z' ] #NEWLINE#
ax . plot ( numpy . arange ( len ( y ) ) [ mask ] , k [ mask , 0 ] + k [ mask , 1 ] , 'k--' ) #NEWLINE#
print ( attr , getattr ( status , attr ) ) #NEWLINE#
new_pressures . append ( 0 ) #NEWLINE#
x = ast . literal_eval ( x ) #NEWLINE#
ser . write ( str ( d ) ) #NEWLINE#
application_path = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
'turkey' in testData [ 'value' ] #NEWLINE#
table [ 1 ] [ 2 ] #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#status' ) #NEWLINE#
super ( ClientAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pip . main ( [ 'install' , package ] ) #NEWLINE#
"""#divid""" . append ( data2html ( data ) ) #NEWLINE#
ax . xaxis . label . set_color ( 'red' ) #NEWLINE#
plt . xticks ( list ( range ( len ( x ) ) ) , x ) #NEWLINE#
return func ( ) #NEWLINE#
blank_image = np . zeros ( ( height , width , 3 ) , np . uint8 ) #NEWLINE#
pairs = dict ( zip ( second_split [ : : 2 ] , second_split [ 1 : : 2 ] ) ) #NEWLINE#
print ( re . sub ( '(\\d+)' , lambda i : hex ( int ( i . group ( 0 ) ) ) , s ) ) #NEWLINE#
( myarray [ i ] for i in myindex ) #NEWLINE#
phone_format ( '18005555555' ) #NEWLINE#
print ( 'foo' ) #NEWLINE#
collections . deque ( itertools . islice ( iterator , n ) , maxlen = 0 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
import xml . etree . ElementTree #NEWLINE#
driver . set_window_size ( 1024 , 768 ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
raise TypeError ( 'useful#SPACE#message#SPACE#here...' ) #NEWLINE#
df3 = pd . DataFrame ( a , index = idx , columns = dflabels ) . stack ( ) . unstack ( 1 ) #NEWLINE#
[ 5.0062 , 10.003333333333332 ] #NEWLINE#
print ( s [ 0 : s . find ( '.' ) ] ) #NEWLINE#
print ( d . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) ) #NEWLINE#
A . shape #NEWLINE#
[ o . specific_attr for o in objects ] #NEWLINE#
x = list ( someiter ) #NEWLINE#
[ ( a if a else b ) for a in sequence ] #NEWLINE#
parser . add_argument ( 'file' , type = argparse . FileType ( 'r' ) ) #NEWLINE#
set ( ( 'foo' , ) ) #NEWLINE#
df . reindex ( ind & ind2 ) #NEWLINE#
my_file = models . FileField ( upload_to = 'files' , storage = queued_s3storage ) #NEWLINE#
del dictionary_with_temporal_distribution [ 'C-STD-B&M-SUM' ] [ k ] #NEWLINE#
arr = numpy . random . randint ( 65536 , size = ( n , ) ) #NEWLINE#
test [ 2 ] = new_value #NEWLINE#
o4 . method ( ) #NEWLINE#
o3 . method ( ) #NEWLINE#
cardValue = int ( card [ 0 ] ) #NEWLINE#
m_2 = np . dot ( np . dot ( h , Y ) , h ) / 2 ** 2 #NEWLINE#
from functools import reduce #NEWLINE# reduce ( dict . get , [ ] , { } ) #NEWLINE#
super ( Test , self ) . __setattr__ ( name , value ) #NEWLINE#
X . __setitem__ ( 0 , 2 ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
plt . show ( ) #NEWLINE#
app . run ( 'localhost' , 5000 ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
dict ( ( k , int ( v ) ) for k , v in d . items ( ) ) #NEWLINE#
self . license_file . save ( new_name , File ( f ) ) #NEWLINE#
"""strip#SPACE#my#SPACE#spaces""" . translate ( None , string . whitespace ) #NEWLINE#
cur . execute ( 'COMMIT' ) #NEWLINE#
( '^contact/' , include ( 'contact_form.urls' ) ) , #NEWLINE#
names = self . __class__ . __dict__ #NEWLINE#
Ainv = np . zeros_like ( A ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
text_widget . bind ( '<Tab>' , focus_next_window ) #NEWLINE#
pdfkit . from_file ( 'test.html' , 'out.pdf' ) #NEWLINE#
df2 . apply ( lambda x : df2 . loc [ ~ x . isin ( df1 . values . ravel ( ) ) , x . name ] ) #NEWLINE#
df #NEWLINE#
fig . set_size_inches ( 11.7 , 8.27 ) #NEWLINE#
return math . hypot ( y [ 0 ] - x [ 0 ] , y [ 1 ] - x [ 1 ] ) #NEWLINE#
next ( decfa ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#df1#SPACE#JOIN#SPACE#df2#SPACE#ON#SPACE#df1.k#SPACE#=#SPACE#df2.k' ) #NEWLINE#
os . environ [ 'PYTHONINSPECT' ] = '1' #NEWLINE#
open ( file_name , 'wb' ) #NEWLINE#
decimal . Decimal ( 1 ) / decimal . Decimal ( 7 ) #NEWLINE#
print ( np . arange ( 1 , 3 , 0.5 ) ) #NEWLINE#
arr = ( ctypes . c_int * len ( pyarr ) ) ( * pyarr ) #NEWLINE#
os . kill ( self . pid , signal . SIGKILL ) #NEWLINE#
superstrings = [ stset_string [ s ] for s in superstsets ] #NEWLINE#
data = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
r = re . compile ( 'Master(.*?)thon' ) #NEWLINE#
print ( np . einsum ( 'ij,jk,kl' , S0 , Sx , Sz ) ) #NEWLINE#
dfs = [ df0 , df1 , df2 , dfN ] #NEWLINE#
return Response ( token , status = 200 ) #NEWLINE#
with open ( 'baby1990.html' , 'rU' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'mysite.settings' ) #NEWLINE#
workbook . save ( 'test2.xlsx' ) #NEWLINE#
plot_df . plot ( ) #NEWLINE#
fig . savefig ( 'out.png' ) #NEWLINE#
print ( 'hi' , 'there' ) #NEWLINE#
ftp . quit ( ) #NEWLINE#
print ( [ ( k , v ) for k , v in list ( dupl . items ( ) ) if len ( v ) > 1 ] ) #NEWLINE#
json . dump ( row , outfile ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
self . assertEqual ( response . get ( 'location' ) , 'http://testserver/redirect-url/' ) #NEWLINE#
def bitfield ( n ) : #NEWLINE# #INDENT# return [ int ( digit ) for digit in bin ( n ) [ 2 : ] ] #NEWLINE#
{ 'cmd' : [ '$project_path/venv/bin/python' , '-u' , '$file' ] } #NEWLINE#
j2 = sorted ( i for i in j if i >= 5 ) #NEWLINE#
print ( rem == [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 0 ] ) #NEWLINE#
line = line . split ( '#SPACE#' ) #NEWLINE#
raise forms . ValidationError ( 'Select#SPACE#no#SPACE#more#SPACE#than#SPACE#3.' ) #NEWLINE#
driver . get ( 'http://foo.com' ) #NEWLINE#
print ( '' ) #NEWLINE#
print ( 'The#SPACE#following#SPACE#should#SPACE#all#SPACE#not#SPACE#match:' ) #NEWLINE#
suffix_array . sort ( key = lambda a : buffer ( content , a ) ) #NEWLINE#
sess = tf . InteractiveSession ( ) #NEWLINE#
[ tuple ( map ( convert , row . split ( '\t' ) ) ) for row in s . splitlines ( ) ] #NEWLINE#
Py_Finalize ( ) #NEWLINE#
font = ImageFont . truetype ( 'FreeMono.ttf' , 40 ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
ao [ : , 1 : ] += ai [ : , : - 1 ] #NEWLINE#
self . predictions_ . append ( classifier . predict_proba ( X ) ) #NEWLINE#
driver . switch_to . window ( driver . window_handles [ 1 ] ) #NEWLINE#
pprint . pprint ( parser . st2list ( parser . expr ( '(((1+0)+1)+1)' ) ) ) #NEWLINE#
return re . sub ( '(?u)[' + re . escape ( '' . join ( chars ) ) + ']' , '' , subj ) #NEWLINE#
return '' . join ( p if p in ignores else p [ : : - 1 ] for p in parts ) #NEWLINE#
print ( list_of_dict ) #NEWLINE#
result = [ tuple ( [ ai , bi ] + ci ) for ai , bi , ci in zip ( a , b , c ) ] #NEWLINE#
f = open ( '/path/to/large.file' , 'r' ) #NEWLINE#
main ( ) #NEWLINE#
subprocess . call ( command , shell = True ) #NEWLINE#
"""abcbaccba""" #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
ancestors_descendents . add ( descendent ) #NEWLINE#
legend ( ( p1 , p2 ) , ( pl1 . get_label ( ) , pl2 . get_label ( ) ) , loc = 'best' ) #NEWLINE#
yi = np . interp ( xi , x , y ) #NEWLINE#
matchre = re . compile ( '\\s*([^(]*)(?<!#SPACE#)\\s*(?:\\(([^)]*)\\))?' ) #NEWLINE#
par2 . xaxis . set_ticklabels ( [ i [ 0 ] for i in data ] ) #NEWLINE#
text = re . sub ( '[^<b>a-z0-9</b>]+' , '' , text , flags = re . IGNORECASE ) #NEWLINE#
main . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
proc . wait ( ) #NEWLINE#
assert isinstance ( 'hello' , Atomic ) == True #NEWLINE#
index_list = [ int ( i ) for i in index_list ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( '' . join ( '\\x%02x' % i for i in r ) ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 7 , 8 ) , ( 9 , 0 ) ] #NEWLINE#
ax . clear ( ) #NEWLINE#
print ( [ list ( g ) for g in group ( [ ] , lambda x : x % 5 == 0 ) ] ) #NEWLINE#
return mark_safe ( simplejson . dumps ( data ) ) #NEWLINE#
vars ( ns ) #NEWLINE#
c . tcp_socket . connect . assert_called_with ( '0.0.0.0' , '6767' ) #NEWLINE#
loader . load_module ( ) #NEWLINE#
print ( type ( eval ( 'BuildType.debug' ) ) ) #NEWLINE#
a = np . array ( [ [ 0 , 1 , 2 , 3 ] , [ 4 , 5 , 6 , 7 ] , [ 8 , 9 , 10 , 11 ] ] ) #NEWLINE#
list ( list ( g ) for k , g in groupby ( inputList , lambda x : x != None ) if k ) #NEWLINE#
figure . savefig ( 'figure%d.png' % i ) #NEWLINE#
map ( lambda x , y : x + y , itertools . repeat ( x ) , y ) #NEWLINE#
print ( 'start#SPACE#blocking' ) #NEWLINE#
print ( [ w for w in txt . split ( ) if not w in s ] ) #NEWLINE#
test . py #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
parser . add_argument ( '-a' , '--arg' , nargs = '+' , type = int ) #NEWLINE#
literal_eval ( s ) #NEWLINE#
random . shuffle ( items ) #NEWLINE#
trace . main ( ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 ] #NEWLINE# sum ( [ ( i * j ) for i , j in list ( itertools . combinations ( l , 2 ) ) ] ) #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
pylab . show ( ) #NEWLINE#
SgmlLinkExtractor ( allow = ( '/index/new\\?new_start=\\d+' , ) ) , #NEWLINE#
xl . Workbooks . Close #NEWLINE#
print ( match . group ( 'reserved' ) ) #NEWLINE#
assert_equal ( client . do_stuff ( ) , 'bar' ) #NEWLINE#
plt . savefig ( 'world2.png' , dpi = 100 ) #NEWLINE#
df = df . T . stack ( ) . reset_index ( ) #NEWLINE#
return pd . concat ( [ d1 , df ] , axis = 1 ) #NEWLINE#
attr = ( o . attr for o in objsm ) #NEWLINE#
Py_INCREF ( interned ) #NEWLINE#
df . dtypes #NEWLINE#
main_mod = sys . modules [ '__main__' ] #NEWLINE#
IOLoop . instance ( ) . start ( ) #NEWLINE#
cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_COLOR ) . dtype #NEWLINE#
plt . xlim ( - 1 , 1 ) #NEWLINE# plt . ylim ( - 1 , 1 ) #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 10 ) ) #NEWLINE#
add3 ( 1 , 2 , 3 ) #NEWLINE#
super ( Animal , self ) . save ( * args , ** kwargs ) #NEWLINE#
print ( sys . argv ) #NEWLINE#
data = pd . DataFrame ( col , columns = [ 'Before' ] ) #NEWLINE#
k . append ( ( '%f' % item [ 0 ] , { 'num' : '%d' % item [ 1 ] } ) ) #NEWLINE#
grid . cbar_axes [ 3 ] . colorbar ( im3 ) #NEWLINE#
time = time - datetime . timedelta ( microseconds = time . microseconds ) #NEWLINE#
return [ indicies [ elements == i ] for i in range ( 1 , N ) ] #NEWLINE#
z = zipfile . ZipFile ( 'myfile.zip' ) #NEWLINE#
self . text . pack ( side = 'bottom' , fill = 'both' , expand = True ) #NEWLINE#
print ( re . findall ( p , test_str ) ) #NEWLINE#
Sample . objects . filter ( date__range = [ startdate , enddate ] ) #NEWLINE#
print ( 'something#SPACE#has#SPACE#changed' ) #NEWLINE#
L [ i ] = sorted ( L [ i ] , key = operator . itemgetter ( 1 , 2 ) ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
( sum ( a ) ** 2 - sum ( [ ( x ** 2 ) for x in a ] ) ) / 2 #NEWLINE#
examplemod . do_stuff ( ) #NEWLINE#
MARKDOWN_LINK_REGEX = re . compile ( '\\[(.*?)\\]\\((.*?)\\)' ) #NEWLINE#
draw . text ( ( 0 , 0 ) , 'Sample#SPACE#Text' , ( 255 , 255 , 255 ) , font = font ) #NEWLINE#
os . unlink ( filename ) #NEWLINE#
d = collections . defaultdict ( dict ) #NEWLINE#
session_list . delete ( ) #NEWLINE#
[ right for left , right in pairwise ( a ) if right [ 1 ] > left [ 1 ] ] #NEWLINE#
resultwords = [ word for word in querywords if word . lower ( ) not in stopwords ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return '${:,.2f}' . format ( value ) #NEWLINE#
plt . show ( ) #NEWLINE#
etree . SubElement ( parent , 'child_tag_name' ) . text = '' #NEWLINE#
data = [ 1 , 1 , 2 , 3 , 4 , 4 ] #NEWLINE#
[ x for x in generator ] #NEWLINE#
parts2 = urlparse . urlparse ( fake_url ) #NEWLINE#
parser . add_argument ( 'my_list' , action = 'append' ) #NEWLINE#
db . session . add ( c ) #NEWLINE#
do_stuff ( ) #NEWLINE#
line . set_ydata ( r [ : , ( 1 ) ] ) #NEWLINE#
def adder ( x , y , z ) : #NEWLINE# #INDENT# return x + y + z #NEWLINE#
"""{:#SPACE#<{}}""" . format ( 'sss' , width ) #NEWLINE#
form = ExcludedDateForm ( user = request . user ) #NEWLINE#
special_divs = soup . find_all ( 'div' , { 'class' : 'Special_Div_Name' } ) #NEWLINE#
globals ( ) [ funcname ] ( ** argsdict ) #NEWLINE#
driver = webdriver . Firefox ( p ) #NEWLINE#
f . close ( ) #NEWLINE#
boto3 . setup_default_session ( profile_name = 'dev' ) #NEWLINE#
my_list #NEWLINE#
return ( i for i , j in zip ( seq , shift ) if ( i , j ) != ( x , x ) ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
driver = webdriver . Chrome ( 'chromedriver.exe' , chrome_options = opts ) #NEWLINE#
from multiprocessing import Pool #NEWLINE#
window . lower ( belowThis = None ) #NEWLINE#
User = settings . AUTH_USER_MODEL #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
def my_product ( dicts ) : #NEWLINE# #INDENT# return ( dict ( zip ( dicts , x ) ) for x in product ( * iter ( dicts . values ( ) ) ) ) #NEWLINE#
soupHandler . findAll ( 'div' , id = re . compile ( '^post-\\d+' ) ) #NEWLINE#
body = '#SPACE#<paste#SPACE#post#SPACE#data>#SPACE#' #NEWLINE#
url = self . request . headers . get ( 'Referer' , '/' ) #NEWLINE#
print ( re . findall ( '.*\\n+.*\\States' , x ) ) #NEWLINE#
{ { ( mylist | slice ) : ':2' } } #NEWLINE#
a , b = b , a + b #NEWLINE#
import imp #NEWLINE# imp . reload ( amodule ) #NEWLINE#
return socket . inet_ntoa ( hex ( ip ) [ 2 : ] . zfill ( 8 ) . decode ( 'hex' ) ) #NEWLINE#
sum ( value for _ , value in list ( a . items ( ) ) if value > 0 ) #NEWLINE#
foo ( ) #NEWLINE#
urlretrieve ( urllib . request . urlopen ( request ) , '/tmp/del.html' ) #NEWLINE#
df . index = pd . date_range ( '2000-01-02' , periods = 50 ) #NEWLINE#
{ 'geneid' : 'hello' , 'tx_id' : 'NR432' , 'col_name1' : '4.5' , 'col_name2' : 6.7 } #NEWLINE# { 'geneid' : 'bye' , 'tx_id' : 'NR439' , 'col_name1' : '4.5' , 'col_name2' : 6.7 } #NEWLINE#
df . columns [ ( df == 38.15 ) . iloc [ 0 ] ] #NEWLINE#
data = json . dumps ( myobject . __dict__ ) #NEWLINE#
aString . startswith ( 'hello' ) #NEWLINE#
print ( powercheck ( [ 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 ] ) ) #NEWLINE#
cur . execute ( 'select#SPACE#1,2,3' ) #NEWLINE#
cursor . execute ( sql , ( '192.xxx.xx.xx' , json . dumps ( dic ) ) ) #NEWLINE#
ax . set_position ( pos2 ) #NEWLINE#
ax . set_ylim3d ( - 1 , 1 ) #NEWLINE#
zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) #NEWLINE#
clp . OpenClipboard ( None ) #NEWLINE#
[ j for i in alist for j in i . split ( ',' ) ] #NEWLINE#
self . frames [ 'StartPage' ] . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
id ( lines [ 0 ] ) , id ( ax . lines [ 0 ] ) #NEWLINE#
draw . ellipse ( ( x1 , y1 , x2 , y2 ) , fill = background_color ) #NEWLINE#
13.9 , 13.7 , 13.6 , 13.5 , 13.4 , 15.7 , 15.8 , 15.0 , 15.3 , 15.4 , 15.5 , 15.6 #NEWLINE#
plt . plot ( x , y , label = 'theory' ) #NEWLINE#
d = OrderedDict ( a = 1 , b = 2 , c = 3 ) #NEWLINE#
logger . error ( e , exc_info = 1 , extra = { 'extra-data' : 'blah' } ) #NEWLINE#
session . query ( Table ) . filter ( Table . name . op ( '~' ) ( 'foo' ) ) #NEWLINE#
return hasattr ( obj , method_name ) and callable ( getattr ( obj , method_name ) ) #NEWLINE#
r = opener . open ( 'http://example.com/' ) #NEWLINE#
foo ( 2 ) #NEWLINE#
cursor = collection . find ( spec = { } , snapshot = True ) #NEWLINE#
sorted ( d , key = sorting ) #NEWLINE#
df [ new_columns ] #NEWLINE#
win . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
data = myfile . read ( ) #NEWLINE#
printf ( '2nd#SPACE#Call\n' ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( cj ) ) #NEWLINE#
print ( 'Content-type:#SPACE#text/html' ) #NEWLINE#
d . setdefault ( t [ 0 ] , { } ) [ t [ 1 ] ] = t [ 2 ] #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 'a' , 'b' , 'a' , 'a' , 'b' , 'c' , 'd' ] } ) #NEWLINE#
print ( 'One#SPACE#command#SPACE#failed' ) #NEWLINE#
super ( SaneTextIOWrapper , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
handle . close ( ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
conn . request ( 'POST' , '/cgi-bin/query' , params , headers ) #NEWLINE#
__init__ ( self , name = None , mode = 'r' , fileobj = None ) #NEWLINE#
self . cursor . close ( ) #NEWLINE#
out = np . asarray ( np . bmat ( [ [ A , Z ] , [ Z , B ] ] ) ) #NEWLINE#
x [ 0 ] = x [ 0 ] + 1 #NEWLINE#
Mailbox . pass_ ( 'my_password' ) #NEWLINE#
ax . set_adjustable ( 'box-forced' ) #NEWLINE#
run ( ) #NEWLINE#
adder ( 10 ) #NEWLINE#
plt . show ( ) #NEWLINE#
re . sub ( '[0-9]{5,}.*' , '' , 'Hello1234' ) #NEWLINE#
b [ 'd2' ] [ 'b' ] ( b [ 'd2' ] [ 'd' ] . bar ( 1 ) ) #NEWLINE#
curses . noecho ( ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
[ 3 , 7 ] #NEWLINE#
m . match ( '9' ) #NEWLINE#
m . match ( 'ab' ) #NEWLINE#
m . match ( 'a9' ) #NEWLINE#
m . match ( 'unicÃ¶de' ) #NEWLINE#
return np . array ( result ) [ : : - 1 ] #NEWLINE#
client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
ax . set_title ( 'Scores#SPACE#by#SPACE#group#SPACE#and#SPACE#gender' ) #NEWLINE#
sys . maxunicode #NEWLINE#
master . grid_rowconfigure ( 0 , weight = 0 ) #NEWLINE#
request . form [ 'address[US]' ] #NEWLINE#
b . foo ( ) #NEWLINE#
include ( GenerateExportHeader ) #NEWLINE#
self . maximize . setIcon ( QtGui . QIcon ( 'img/max2.png' ) ) #NEWLINE#
- 5.55682806 - 5.55682806 - 4.86368088 - 4.45821577 - 4.86368088 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 - 5.55682806 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 - 5.55682806 #NEWLINE#
- 5.55682806 - 5.55682806 - 5.55682806 - 4.45821577 - 4.86368088 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 - 5.55682806 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 - 4.86368088 #NEWLINE#
- 4.86368088 - 5.55682806 - 5.55682806 - 5.55682806 - 5.55682806 - 5.55682806 #NEWLINE#
- 5.55682806 - 5.55682806 - 5.55682806 - 4.86368088 - 4.86368088 - 4.86368088 #NEWLINE#
- 4.86368088 - 5.55682806 - 5.55682806 - 4.86368088 - 5.55682806 - 4.86368088 #NEWLINE#
- 5.55682806 - 5.55682806 - 4.86368088 - 4.86368088 - 4.45821577 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.45821577 - 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 #NEWLINE#
- 4.86368088 - 5.55682806 - 5.55682806 - 4.86368088 - 5.55682806 - 5.55682806 #NEWLINE#
- 4.86368088 - 5.55682806 - 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 #NEWLINE#
- 5.55682806 - 5.55682806 - 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 #NEWLINE#
- 5.55682806 - 4.86368088 - 5.55682806 - 4.86368088 - 5.55682806 - 5.55682806 #NEWLINE#
- 5.55682806 - 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.1705337 - 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 #NEWLINE#
- 4.86368088 - 4.86368088 - 5.55682806 - 4.86368088 - 4.86368088 - 4.86368088 #NEWLINE#
db . session . commit ( ) #NEWLINE#
return [ ( arg + 1 ) for arg in args ] #NEWLINE#
d = [ list ( map ( int , x ) ) for x in DATA ] #NEWLINE#
hi ( ) #NEWLINE#
a = np . array ( [ [ 1 , 1 ] , [ 2 , 3 ] , [ 1 , 1 ] , [ 5 , 4 ] , [ 2 , 3 ] ] ) #NEWLINE#
[ 'i' , 'x' ] #NEWLINE#
mylist . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
plot ( np . ones ( len ( bottom_points ) ) , bottom_points , '+' ) #NEWLINE#
x = np . arange ( 6 ) . reshape ( ( 2 , 3 ) ) #NEWLINE#
return TaskBase . __call__ ( self , * args , ** kwargs ) #NEWLINE#
self . assertTrue ( mock . called ) #NEWLINE#
t . start ( ) #NEWLINE#
b = 'Ã¨' . decode ( 'latin-1' ) #NEWLINE#
foo . name #NEWLINE#
dbapi_con . execute ( 'pragma#SPACE#foreign_keys=ON' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
admin . site . register ( User , CustomUserAdmin ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
print ( is_english_word ( 'ham' ) ) #NEWLINE#
print ( len ( '정정' . encode ( 'UTF-8' ) ) ) #NEWLINE#
img . save ( 'rgbmode.png' ) #NEWLINE#
img . save ( 'rgbxmode.jfif' ) #NEWLINE#
img . save ( 'rgbamode.png' ) #NEWLINE#
return [ lst [ i : : n ] for i in range ( n ) ] #NEWLINE#
print ( 'no#SPACE#hat' ) #NEWLINE#
print ( 'found#SPACE#a#SPACE#cat' ) #NEWLINE#
print ( 'no#SPACE#cat' ) #NEWLINE#
print ( 'found#SPACE#a#SPACE#dog' ) #NEWLINE#
print ( 'no#SPACE#dog' ) #NEWLINE#
print ( 'case#SPACE#A' ) #NEWLINE#
print ( 'case#SPACE#B' ) #NEWLINE#
print ( 'default' ) #NEWLINE#
df . applymap ( f ) #NEWLINE#
admin . site . register ( CherryTomato , TomatoAdmin ) #NEWLINE#
return self . session . execute ( count_query ) . scalar ( ) #NEWLINE#
duplicates = [ x for x in mylist if mylist . count ( x ) > 1 ] #NEWLINE#
print ( 'failed#SPACE#to#SPACE#send#SPACE#mail' ) #NEWLINE#
user2 = forms . ChoiceField ( choices = choices ) #NEWLINE#
ActionChains ( driver ) . move_to_element ( element ) . perform ( ) #NEWLINE#
json . dumps ( convert ( d ) ) #NEWLINE#
super ( MyModelAdmin , self ) . save_model ( request , obj , form , change ) #NEWLINE#
sys . exit ( ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
message . save ( ) #NEWLINE#
self . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
i , j = np . indices ( a . shape ) #NEWLINE#
flags , hcursor , ( x , y ) = win32gui . GetCursorInfo ( ) #NEWLINE#
df . columns = [ 'Survived' , 'Pclass' , 'Name' , 'Sex' , 'X' ] #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
ax11 . set_xlabel ( 'right' ) #NEWLINE#
cur . execute ( 'select#SPACE#charecteristics#SPACE#from#SPACE#product#SPACE#where#SPACE#store_id#SPACE#=#SPACE#1' ) #NEWLINE#
{ { salt [ 'dnsutil.A' ] ( 'host.name.tld' ) [ 0 ] } } #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
query . parse ( 'a#SPACE#AND#SPACE#b#SPACE#AND#SPACE#c#SPACE#AND#SPACE#d' ) #NEWLINE#
query . parse ( 'a#SPACE#AND#SPACE#b#SPACE#AND#SPACE#c#SPACE#AND#SPACE#d#SPACE#OR#SPACE#e#SPACE#AND#SPACE#f' ) #NEWLINE#
query . parse ( 'a#SPACE#AND#SPACE#b#SPACE#AND#SPACE#c#SPACE#AND#SPACE#d#SPACE#OR#SPACE#e#SPACE#OR#SPACE#f' ) #NEWLINE#
query . parse ( 'foo#SPACE#AND#SPACE#bar' ) #NEWLINE#
query . parse ( '"bar#SPACE#none"#SPACE#OR#SPACE#foo' ) #NEWLINE#
return { k : add_element ( v ) for k , v in list ( dicty . items ( ) ) } #NEWLINE#
[ 'Arab#SPACE#World' , 'ARB' , '1968' , '32456179321.45' ] #NEWLINE#
'Michael#SPACE#Schenker#SPACE#Group' , 'House#SPACE#of#SPACE#Blues#SPACE#Dallas' , '3/26' #NEWLINE#
json . loads ( x ) #NEWLINE#
"""*firefox#SPACE#C:\\Program#SPACE#Files\\Mozilla#SPACE#Firefox\\firefox.exe""" #NEWLINE#
[ ( x + y ) for x , y in zip ( '12345' , 'ab' ) ] #NEWLINE# [ ( x + y ) for x , y in zip ( 'ab' , '12345' ) ] #NEWLINE#
self . sock = ssl . wrap_socket ( sock , self . key_file , self . cert_file ) #NEWLINE#
ax . set_xlim ( [ - 1 , 1 ] ) #NEWLINE#
return json . loads ( dict_string ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
globals ( ) #NEWLINE#
new_string = str ( string , 'ascii' ) #NEWLINE#
func . __code__ . co_consts #NEWLINE#
someObj = { 'element1' : { 'sub1' : { 'subsub1' : 'value1' } } } #NEWLINE#
formatter = logging . Formatter ( '%(asctime)s;%(levelname)s;%(message)s' , #NEWLINE# '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
rgbs = [ ( ( x & 16711680 ) >> 16 , ( x & 65280 ) >> 8 , x & 255 ) for x in values ] #NEWLINE#
float ( element ) #NEWLINE#
np . frompyfunc ( lambda x : x [ 1 : 3 ] , 1 , 1 ) ( a ) . astype ( 'U2' ) #NEWLINE#
x . isoformat ( ) #NEWLINE#
dic [ 'Test' ] [ 'class' ] [ 'section' ] = 5 #NEWLINE#
y . compute ( ) #NEWLINE#
imp . find_module ( 'test' ) #NEWLINE#
tt = np . linspace ( 0 , 20 , 201 ) #NEWLINE#
df = pd . DataFrame ( { 'pear' : [ 1 , 2 , 3 ] , 'apple' : [ 2 , 3 , 4 ] , 'orange' : [ 3 , 4 , 5 ] } ) #NEWLINE#
os . chdir ( 'C:\\Users\\PREM\\Desktop\\pyftp#SPACE#download\\ftp' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
super ( Polynomial , self ) . __init__ ( ) #NEWLINE#
fout . close ( ) #NEWLINE#
foo = set ( range ( 0 , 4 ) ) #NEWLINE#
b . sort ( order = [ 'col1' , 'col2' ] ) #NEWLINE#
__init__ . py #NEWLINE#
ax . imshow ( np . random . random ( ( xpixels , ypixels ) ) , interpolation = 'none' ) #NEWLINE#
product = functools . reduce ( operator . mul , iterable , 1 ) #NEWLINE#
plt . triplot ( trimesh , 'k--' ) #NEWLINE#
win32gui . DeleteObject ( dataBitMap . GetHandle ( ) ) #NEWLINE#
p4 . run ( 'changelist' , '-i' ) #NEWLINE#
belly_name = models . CharField ( max_length = 50 ) #NEWLINE#
np . in1d ( A [ : , 3 : ] , B ) . reshape ( A . shape [ 0 ] , - 1 ) #NEWLINE#
np . issubdtype ( df [ 'B' ] . dtype , np . number ) #NEWLINE#
self . set_from_pixbuf ( base_pixbuf ) #NEWLINE#
dat . set_index ( 'label' , append = True ) . swaplevel ( 0 , 1 ) #NEWLINE#
Decimal ( '2.718281828459045235360287471352662497757' ) #NEWLINE#
return [ x [ 0 ] for x in G ] #NEWLINE#
return list ( s ) == sorted ( s ) #NEWLINE#
xlim ( - 1 , 6 ) #NEWLINE#
sum ( ord ( c ) << i * 8 for i , c in enumerate ( mystr ) ) #NEWLINE#
avg = float ( sum ( mylist ) ) / len ( mylist ) #NEWLINE#
list ( roundrobin ( l1 , l2 ) ) #NEWLINE#
print ( urllib . request . urlopen ( 'http://www.ifconfig.me/ip' ) . read ( ) ) #NEWLINE#
data = { 'n' : 3 , 'k' : 3.141594 , 'p' : { 'a' : '7' , 'b' : 8 } } #NEWLINE#
np . log ( Series ( [ 1 , 2 , 3 , 4 ] , dtype = 'float64' ) ) #NEWLINE#
a , b = b , a + b #NEWLINE#
res = urllib . request . urlopen ( req ) #NEWLINE#
myfunc ( 'foo' , None ) #NEWLINE#
matplotlib . use ( 'WXAgg' ) #NEWLINE#
pd . Series ( [ 'a' , '2' , 'z' , '123' , 'a' , 'oops' ] ) . apply ( isint ) . sum ( ) #NEWLINE#
ax . add_line ( line_1 ) #NEWLINE#
spstereo . scatter ( x , y ) #NEWLINE#
mypadn . getch ( ) #NEWLINE#
print ( 'All#SPACE#following#SPACE#prints#SPACE#rendered#SPACE#in#SPACE#red,#SPACE#until#SPACE#changed' ) #NEWLINE#
n11 . add ( n111 ) #NEWLINE#
x = 'Some#SPACE#string' #NEWLINE#
TimeSeries ( list ( range ( 1 , 13 ) ) , period_range ( '2013-01' , periods = 12 , freq = 'M' ) ) #NEWLINE#
return datetime . timedelta ( seconds = seconds ) #NEWLINE#
config . write ( f ) #NEWLINE#
from math import * #NEWLINE#
str ( a ) #NEWLINE#
x = x + a + b + c #NEWLINE#
im . show ( ) #NEWLINE#
cov = np . array ( [ [ u20 , u11 ] , [ u11 , u02 ] ] ) #NEWLINE#
s1 . reset_index ( inplace = True , drop = True ) #NEWLINE#
self . canvas . update_idletasks ( ) #NEWLINE#
os . remove ( filename ) #NEWLINE#
print ( me . toJSON ( ) ) #NEWLINE#
loggerCent . setLevel ( logging . DEBUG ) #NEWLINE#
key_to_delete = max ( d , key = lambda k : d [ k ] ) #NEWLINE#
new_list = [ ( a + b ) for a , b in zip ( a_list , b_list ) ] #NEWLINE#
LSTM ( 32 , stateful = True , batch_input_shape = ( 1 , 64 , 10 ) ) #NEWLINE#
print ( ( 'syncarr#SPACE#(master):' , syncarr , 'syncarr_tmp:' , syncarr_tmp ) ) #NEWLINE#
[ i [ 4 ] [ 0 ] for i in socket . getaddrinfo ( socket . gethostname ( ) , None ) ] #NEWLINE#
INSTALLED_APPS = 'myproject.app1' , 'myproject.app2' #NEWLINE#
print ( '#SPACE#+#SPACE#' . join ( str ( i ) for i in l ) + '#SPACE#=#SPACE#{}' . format ( sum ( l ) ) ) #NEWLINE#
type ( [ ] ) #NEWLINE#
plt . plot ( y ) #NEWLINE#
filtered = [ x for x in original if not re . match ( '^\\s*$' , x ) ] #NEWLINE#
return all ( c in gram . lower ( ) for c in string . ascii_lowercase ) #NEWLINE#
module . workflow_set . filter ( trigger_roles__in = [ self . role . id ] , allowed = True ) #NEWLINE#
np . concatenate ( ( np . min ( a [ : , : 3 ] , axis = 0 ) , np . max ( a [ : , 3 : ] , axis = 0 ) ) ) #NEWLINE#
nx . has_path ( G , 1 , 3 ) #NEWLINE#
next ( endless_counter ) #NEWLINE#
form . rate . queryset = Rate . objects . filter ( company_id = the_company . id ) #NEWLINE#
{ 'a' : 0.0 , 'c' : 1.0 , 'b' : 0.5 } #NEWLINE#
sock . sendall ( 'GOT#SPACE#IMAGE' ) #NEWLINE#
raise TypeError ( '%r#SPACE#is#SPACE#not#SPACE#a#SPACE#string' % ( tablename , ) ) #NEWLINE#
"""#SPACE#""" . join ( '%*s' % ( colsize , i ) for i in line . split ( ) ) #NEWLINE#
id = Column ( 'ID' , Integer , primary_key = True , nullable = False ) #NEWLINE#
f = open ( 'out.txt' , 'w' ) #NEWLINE#
f = open ( 'out.txt' , 'rb' ) #NEWLINE#
f = open ( 'out.txt' , 'wb' ) #NEWLINE#
pool = multiprocessing . Pool ( 4 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
def f ( x ) : #NEWLINE# #INDENT# return x ** 2 + 1 #NEWLINE#
cls . recalc_mro ( ) #NEWLINE#
df . to_hdf ( 'test.h5' , 'df' , mode = 'w' , format = 'table' ) #NEWLINE#
print ( 'Your#SPACE#Python#SPACE#interpreter#SPACE#is#SPACE#too#SPACE#old.#SPACE#Please#SPACE#consider#SPACE#upgrading.' ) #NEWLINE#
print ( s . encode ( 'utf-8' ) ) #NEWLINE#
os . kill ( os . getppid ( ) , 0 ) #NEWLINE#
iAl = [ 0 , 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
legend ( ) . label_text_font = 'times' #NEWLINE#
LOGIN_URL = '/login/' #NEWLINE#
df_html = re . sub ( '<table' , '<table#SPACE#id=%s#SPACE#' % random_id , df_html ) #NEWLINE#
desired_cols = ( tuple ( row [ col ] for col in columns ) for row in reader ) #NEWLINE#
( data . T / vector ) . T #NEWLINE#
{ w : counts [ w ] for w in word_list } #NEWLINE#
new = map ( int , old ) #NEWLINE#
d2 = { k : ( v * 0.5 ) for k , v in list ( d . items ( ) ) } #NEWLINE#
app = Flask ( __name__ ) #NEWLINE# app . config [ 'SECURITY_REGISTERABLE' ] = True #NEWLINE#
for i in range ( 10 ) : #NEWLINE# #INDENT# print ( 'foo' ) #NEWLINE# print ( 'bar' ) #NEWLINE#
print ( lines [ 1 ] [ 3 ] ) #NEWLINE#
ax . plot ( x_model , model2 , '--k' , label = 'Model#SPACE#(k=2)' ) #NEWLINE#
return ( A . stack ( 0 ) << np . arange ( 10 ) ) . sum ( 1 ) . unstack ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( { k : ( x . get ( k , 0 ) + y . get ( k , 0 ) ) for k in set ( x ) | set ( y ) } ) #NEWLINE#
numpy . where ( tostring ( phis ) . astype ( 'float64' ) != phis ) #NEWLINE#
db . put ( '' , 'testval' , 1 ) #NEWLINE#
mpl . rc ( 'text' , usetex = True ) #NEWLINE#
module = inspect . getmodule ( frame [ 0 ] ) #NEWLINE#
elem . attrib . pop ( 'lang' ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 , 14 ] , 'ro-' ) #NEWLINE#
f_euclidean = theano . function ( [ X , Y ] , T . sqrt ( squared_euclidean_distances ) ) #NEWLINE#
print ( 'right#SPACE#now,#SPACE#we#SPACE#are#SPACE#different' ) #NEWLINE#
ax . figure . canvas . draw ( ) #NEWLINE#
key [ : 2 ] . upper ( ) + key [ 2 : ] #NEWLINE#
del list [ index ] #NEWLINE#
cur . execute ( query , ( b , ) ) #NEWLINE#
self . button . pack ( padx = 10 , pady = 10 ) #NEWLINE#
m = re . search ( pat , t ) #NEWLINE#
im . save ( 'screenshot.png' ) #NEWLINE#
A [ 'f0' ] . shape #NEWLINE#
persons = Person . objects . all ( ) . order_by ( birthday , anniversary ) #NEWLINE#
print ( Newton ( f , 1 , 10 ) ) #NEWLINE#
plot ( x , y , 'bo-' ) #NEWLINE#
r . status_code #NEWLINE#
self . response . write ( 'no#SPACE#id#SPACE#given' ) #NEWLINE#
a . index ( 4 ) #NEWLINE#
pylab . legend ( numpoints = 1 , loc = 'lower#SPACE#left' ) #NEWLINE#
dff [ [ c for c in dff if dff [ c ] . isnull ( ) . sum ( ) < 2 ] ] #NEWLINE#
"""{:02d}""" . format ( 4 ) #NEWLINE#
dropped_copies = [ ( lambda j : ( x [ j ] for x in copies [ j ] ) ) ( i ) for i in range ( 2 ) ] #NEWLINE#
print ( [ value for value in x if not math . isnan ( value ) ] ) #NEWLINE#
df1 . loc [ 1 , 'price' ] = 0 #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'project.settings' #NEWLINE#
raise ValueError ( 'Non#SPACE#increasing#SPACE#matches#SPACE#for#SPACE#b' ) #NEWLINE#
motifAppearances = { 'AC' : 2 , 'CG' : 1 , 'GT' : 1 , 'TA' : 1 } #NEWLINE#
b += ( a [ - 1 ] - b [ - 1 ] ) / len ( b ) * numpy . arange ( 1 , len ( b ) + 1 ) #NEWLINE#
otest . sort ( key = lambda x : int ( x ) ) #NEWLINE#
time . strftime ( '%Y-%m-%d' , _ ) #NEWLINE#
d [ 2 ] = 3 #NEWLINE#
del globals ( ) [ 'z' ] #NEWLINE#
df . tail ( 5 ) #NEWLINE#
print ( text [ i ] ) #NEWLINE#
s == len ( s ) * s [ 0 ] #NEWLINE#
sock . bind ( ( 'localhost' , 0 ) ) #NEWLINE#
print ( '{0:02d}' . format ( a . month ) ) #NEWLINE#
sys . getsizeof ( Bar . __dict__ ) #NEWLINE#

raise ValueError ( 'invalid#SPACE#CRL#SPACE#date/time#SPACE#fields' ) #NEWLINE#
df . groupby ( 'user' ) [ 'time_stamp' ] . describe ( ) #NEWLINE#
sys . stdout = codecs . getwriter ( 'utf8' ) ( sys . stdout ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . plot ( data . index , data . amount ) #NEWLINE#
[ 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 ] #NEWLINE#
fig . subplots_adjust ( left = 0.25 , bottom = 0.25 ) #NEWLINE#
json . loads ( obj ) #NEWLINE#
query = users . select ( ) . order_by ( - users . c . id . desc ( ) ) . limit ( 5 ) #NEWLINE#
items = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
bucket . configure_lifecycle ( lifecycle_config ) #NEWLINE#
s . format ( 'apples' , 'oranges' ) #NEWLINE#
s = re . sub ( '\\s+' , '#SPACE#' , s ) . strip ( ) #NEWLINE#
arrback = numpy . array ( json . loads ( s ) ) #NEWLINE#
x . digits ( 10 , 0 , - 1 , 1 ) #NEWLINE#
baz = 2 * df [ 'qux' ] . sum ( ) + 3 * df [ 'bar' ] . sum ( ) #NEWLINE#
super ( C , self ) . __init__ ( base ) #NEWLINE#
np . array_equal ( a , b ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
self . temperatureRaisedSignal . emit ( ) #NEWLINE#
raise web . notfound ( ) #NEWLINE#
df . head ( ) #NEWLINE#
self . _task . cancel ( ) #NEWLINE#
a [ : , ( idx ) ] #NEWLINE#
pool . terminate ( ) #NEWLINE#
logger . addHandler ( file_handler ) #NEWLINE#
out = [ x for x in a if x in b and x in c ] #NEWLINE#
[ '{"msg":"connect"}' ] #NEWLINE#
newdf = df . join ( newcols ) #NEWLINE#
plt . xlim ( [ 0 , len ( data ) ] ) #NEWLINE#
[ k for k in mydict if k . startswith ( 'for' ) ] #NEWLINE#
dropped_copies = [ make_gen ( i ) for i in range ( 2 ) ] #NEWLINE#
main ( ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE# results = soup . findAll ( 'td' , { 'valign' : 'top' } ) #NEWLINE#
plt . setp ( ax2 . get_yticklabels ( ) , color = 'darkgreen' ) #NEWLINE#
data = some_module . __loader__ . get_data ( 'path/in/archive/file.txt' ) #NEWLINE#
ip = urllib . request . urlopen ( 'http://whatismyip.org' ) . read ( ) #NEWLINE#
f ( ** { str ( k ) : v for k , v in list ( kwargs . items ( ) ) } ) #NEWLINE#
np . pad ( arr , pads , mode = 'wrap' ) #NEWLINE#
binascii . unhexlify ( '9f' ) #NEWLINE#
print ( 'Celery#SPACE#not#SPACE#responding...' ) #NEWLINE#
ax . set_xlim3d ( 0 , 10 ) #NEWLINE#
p = subprocess . Popen ( [ 'echo' , '640x360' ] , stdout = subprocess . PIPE ) #NEWLINE#
ax . plot_surface ( grid_x , grid_y , grid_z , cmap = plt . cm . Spectral ) #NEWLINE#
reactor . run ( ) #NEWLINE#
sublist [ i ] [ 0 ] = '' #NEWLINE#
print ( files [ 0 ] ) #NEWLINE#
print ( template . render ( the = 'variables' , go = 'here' ) ) #NEWLINE#
return int ( json [ 'page' ] [ 'update_time' ] ) #NEWLINE#
ch = logging . StreamHandler ( ) #NEWLINE#
print ( json . dumps ( output , indent = 4 ) ) #NEWLINE#
main ( ) #NEWLINE#
return np . datetime64 ( datetime . datetime . strptime ( v , '%d/%m/%Y#SPACE#%H:%M:%S.%f' ) ) #NEWLINE#
return req . read ( ) #NEWLINE#
df [ : 1 ] . to_sql ( 'table_name' , con ) #NEWLINE#
dt = datetime . datetime . strptime ( '2013-1-25' , '%Y-%m-%d' ) #NEWLINE# print ( '{0}/{1}/{2:02}' . format ( dt . month , dt . day , dt . year % 100 ) ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
df . loc [ : , ( msk ) ] #NEWLINE#
results = [ item for item in data if item . field2 >= 2 ] #NEWLINE#
{ 'foobar' : [ [ 4 , 5 , 6 , 7 , 8 ] ] , 'bar' : [ [ 1 , 2 , 3 ] ] } #NEWLINE#
[ y for x in data for y in x ] #NEWLINE#
s = 'the#SPACE#dude#SPACE#is#SPACE#a#SPACE#cool#SPACE#dude' #NEWLINE# s . find ( 'dude' ) #NEWLINE#
( '%s\n' % line ) . encode ( 'utf-8' ) #NEWLINE#
session . add_all ( [ Foo ( 1 , 2 , 3 ) , Foo ( 3 , 2 , 1 ) , Foo ( 3 , 3 , 3 ) , Foo ( 1 , 3 , 4 ) ] ) #NEWLINE#
logger . setFormatter ( logFormatter ) #NEWLINE#
email = form . cleaned_data [ 'email' ] #NEWLINE#
parser . parse ( '' ) #NEWLINE#
plt . subplot ( 1 , 2 , 2 ) #NEWLINE#
wavfile . write ( 'newname.wav' , rate , newdata ) #NEWLINE#
np . ma . array ( [ [ 1 , 0 , 0 , 1 ] , [ 1 , 0 , 1 , 0 ] ] , mask = [ [ 0 , 0 , 0 , 1 ] , [ 1 , 1 , 0 , 1 ] ] ) #NEWLINE#
data = line . split ( '\t' ) #NEWLINE#
plt . axvline ( x = 100 , c = 'black' ) #NEWLINE#
hash ( 'asdf' ) % ( ( sys . maxsize + 1 ) * 2 ) #NEWLINE#
return 'Unknown' #NEWLINE#
RGB_tuples = map ( lambda x : colorsys . hsv_to_rgb ( * x ) , HSV_tuples ) #NEWLINE#
match = re . search ( "api\\('([^']*)'" , s ) . group ( 1 ) #NEWLINE#
enumerate ( list ( range ( 2000 , 2005 ) ) , 1 ) #NEWLINE#
all_functions = inspect . getmembers ( module , inspect . isfunction ) #NEWLINE#
ax . set_ylabel ( 'Label#SPACE#Two' , size = 16 ) #NEWLINE#
json_dict = json . dumps ( values ) #NEWLINE#
self . transport . write ( data ) #NEWLINE#
[ m . group ( ) for m in re . finditer ( '((\\w)\\2)+' , 'zoo' ) ] #NEWLINE#
s . update ( list ( fus_s . keys ( ) ) ) #NEWLINE#
get_value ( 'a1.8000_b1.0000_cc1.3000_al0.209_be0.209_c1.344_e0.999' , 'be' ) #NEWLINE#
Entry ( root , textvariable = mystring ) . grid ( row = 0 , column = 1 , sticky = E ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
print ( cmp ( memoryview ( test1 ) , memoryview ( test2 ) ) ) #NEWLINE#
signal . signal ( signal . SIGQUIT , dumpstacks ) #NEWLINE#
'np:method' , 'np-c:var' , 'py:exception' , 'np:staticmethod' #NEWLINE#
STATIC_ROOT = os . path . join ( BASE_DIR , 'static' ) #NEWLINE#
text_frame . pack ( side = 'bottom' , fill = 'both' , expand = True ) #NEWLINE#
log . info ( 'Hello#SPACE#logging!' ) #NEWLINE#
print ( [ ( 100 * ( b - a ) / a ) for a , b in zip ( prices [ : : 1 ] , prices [ 1 : : 1 ] ) ] ) #NEWLINE#
df . str_name . str . slice ( 0 , 3 ) . str . contains ( 'c' ) #NEWLINE#
output = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
df . columns = pd . to_datetime ( df . columns ) #NEWLINE# df . resample ( 'Q' , axis = 1 ) . mean ( ) #NEWLINE#
var . set ( 'test' ) #NEWLINE#
[ ( 9 , 3 , 2 ) , ( 9 , 4 , 7 ) ] #NEWLINE#
manager . start ( signal . signal , ( signal . SIGINT , signal . SIG_IGN ) ) #NEWLINE#
model . fit ( X_train , Y_train , nb_epoch = 200 , batch_size = 5 , verbose = 0 ) #NEWLINE#
__metaclass__ = Proxier #NEWLINE#
slots = [ None ] * len ( slots ) #NEWLINE#
ax . scatter ( x , y , z , c = 'r' , marker = '.' ) #NEWLINE#
a [ 4 , 0 ] + a [ 4 , 1 ] + a [ 4 , 2 ] + a [ 4 , 3 ] #NEWLINE#
re3 = re . compile ( 'three' ) #NEWLINE#
'BAB' , 'BAC' , 'BBA' , 'BBB' , 'BBC' , 'BCA' , 'BCB' , 'BCC' , 'CAA' , 'CAB' #NEWLINE#
[ mm_fib ( i ) for i in range ( 20 ) ] #NEWLINE#
fig . canvas . draw_idle ( ) #NEWLINE#
anumlist = [ int ( x ) for x in alist if x . isdigit ( ) ] #NEWLINE#
data . append ( [ w . getparams ( ) , w . readframes ( w . getnframes ( ) ) ] ) #NEWLINE#
ax . legend ( ) #NEWLINE#
root = etree . XML ( '<root><a><b/></a></root>' ) #NEWLINE#
app = flask . Flask ( __name__ ) #NEWLINE#
( '^update/(\\d+)/$' , 'myproject.myapp.views.update' ) , #NEWLINE#
print ( 'Weeks:' , ( monday2 - monday1 ) . days / 7 ) #NEWLINE#
request . user . get_myuser ( ) . pretty_username ( ) #NEWLINE#
[ i for n , i in enumerate ( d ) if i not in d [ n + 1 : ] ] #NEWLINE#
new_dict = { k : v for k , v in my_dict . items ( ) if v >= threshold_value } #NEWLINE#
ax . scatter ( a . real , a . imag ) #NEWLINE#
self . previewImage . show ( ) #NEWLINE#
return diagmat + np . fromfunction ( lambda i , j : ( i != j ) * 4 , diagmat . shape ) #NEWLINE#
print ( arr_list ) #NEWLINE#
df = pd . DataFrame ( ) #NEWLINE#
smtpObj = smtplib . SMTP ( 'localhost' ) #NEWLINE#
array ( [ 1 , 2 , 4 , 5 , 6 , 7 , 8 ] ) #NEWLINE#
app . run ( ) #NEWLINE#
regr . fit ( chntrain , austrain ) #NEWLINE#
x . resample ( 'D' ) . fillna ( 0 ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
tk . Tk . __init__ ( self ) #NEWLINE#
p . start ( ) #NEWLINE#
"""A#SPACE#single#SPACE#'#SPACE#char""" . translate ( None , "'" ) #NEWLINE#
container . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
ax . set_xticks ( np . arange ( len ( df . columns ) ) + 0.5 ) #NEWLINE#
print ( df ) #NEWLINE#
fig , axes = plt . subplots ( nrows = 2 , sharex = True ) #NEWLINE#
df . fillna ( 1 , inplace = 1 ) #NEWLINE#
list ( product ( ) ) #NEWLINE#
imshow ( gray2 , cmap = cm . gray , alpha = 0.5 ) #NEWLINE#
imshow ( gray2b , cmap = cm . gray , alpha = 0.5 ) #NEWLINE#
db . init_app ( app ) #NEWLINE#
conn . execute ( 'CREATE#SPACE#TABLE#SPACE#foo#SPACE#(id#SPACE#INTEGER#SPACE#NOT#SPACE#NULL,#SPACE#primary#SPACE#key#SPACE#(id))' ) #NEWLINE#
return defn is not None and defn == funcdecl #NEWLINE#
{ { form . as_p } } #NEWLINE#
[ [ '#SPACE#New#SPACE#York' , 'non-capital' ] , [ '#SPACE#London' , 'capital' ] ] #NEWLINE#
app = Bottle ( ) #NEWLINE#
with open ( filename , 'a' ) as out : #NEWLINE# #INDENT# out . write ( var + '\n' ) #NEWLINE#
df [ 'hour' ] = pd . to_datetime ( df [ 'time' ] , format = '%H:%M' ) . dt . hour #NEWLINE#
string1 . join ( string2 ) #NEWLINE#
( a [ : , ( None ) ] + np . arange ( - 0.2 , 0.3 , 0.1 ) ) . ravel ( ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
fileObj . close ( ) #NEWLINE#
lists = [ [ ] for i in range ( num_lists ) ] #NEWLINE#
""".*(\\d+\\.\\d+)%#SPACE#packet#SPACE#loss""" #NEWLINE#
plt . xlabel ( 'Time' ) #NEWLINE#
train_perplexity = math . pow ( 2 , train_loss ) #NEWLINE#
return len ( L ) == len ( set ( L ) ) #NEWLINE#
myfile . write ( 'eeek' ) #NEWLINE#
return super ( EuDateField , self ) . formfield ( ** kwargs ) #NEWLINE#
return loader . construct_yaml_str ( node ) #NEWLINE#
pivoted . ix [ 'one' , 'A' ] #NEWLINE#
return decorator #NEWLINE#
foo ( params [ 0 ] , params [ 1 ] ) #NEWLINE#
p . plot ( bincenters , y , '-' ) #NEWLINE#
ax . set_xlabel ( 'Test#SPACE#histogram' ) #NEWLINE#
fileinput . close ( ) #NEWLINE#
sys . <VAR0> . close ( ) #NEWLINE#
os . system ( 'command#SPACE#to#SPACE#upload#SPACE#the#SPACE#written#SPACE#file' ) #NEWLINE#
my_book = Book . objects . get ( pk = 1 ) #NEWLINE# all_ingredients = Ingredient . objects . filter ( recipe__book = my_book ) #NEWLINE#
background_label . place ( x = 0 , y = 0 , relwidth = 1 , relheight = 1 ) #NEWLINE#
plt . fill_between ( x1 , y1 , y2 = y2 , color = 'red' ) #NEWLINE#
plt . fill_between ( x1 , y1 , y2 = y2 , color = 'orange' ) #NEWLINE#
layout . addWidget ( self . label ) #NEWLINE#
a . encode ( 'base-64' ) #NEWLINE#
boundaries = [ 1 , 6 , 10 , 21 , 40 , 51 ] #NEWLINE#
[ 0 , 1 , 0 , 2 , 1 , 0 ] #NEWLINE#
print ( ( i , os . path . join ( dir , file ) ) ) #NEWLINE#
python - - version #NEWLINE#
{ { post [ 'title' ] } } #NEWLINE#
print ( df . groupby ( df . index ) . sum ( ) ) #NEWLINE#
check = set ( [ ( d [ 'classname' ] , d [ 'testname' ] ) for d in list2 ] ) #NEWLINE#
parser . parse ( '1#SPACE#Jan' ) #NEWLINE#
parser . parse ( '1-Jan' ) #NEWLINE#
parser . parse ( 'Jan-1' ) #NEWLINE#
parser . parse ( 'Jan#SPACE#2,1999' ) #NEWLINE#
parser . parse ( '2#SPACE#Jan#SPACE##SPACE#1999' ) #NEWLINE#
parser . parse ( '1999-1-2' ) #NEWLINE#
parser . parse ( '1999/1/2' ) #NEWLINE#
parser . parse ( '2/1/1999' ) #NEWLINE#
cur . execute ( 'EXEC#SPACE#GetNextNumberWrap' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
parser . add_argument ( '-p' , '--password' , dest = 'password' , help = 'Password' ) #NEWLINE#
sys . exit ( 2 ) #NEWLINE#
box3 = [ 1 , 1 ] #NEWLINE#
print ( 'foo#SPACE#is#SPACE#%(bar)s' % { 'bar' : bar } ) #NEWLINE#
df = df [ df [ 'A' ] > 2 ] #NEWLINE# df [ 'B' ] = new_val #NEWLINE#
del sys . modules [ name ] #NEWLINE#
json . loads ( config . get ( 'Foo' , 'fibs' ) ) #NEWLINE#
item_list = [ item for item in items if item > 3 ] #NEWLINE#
a = [ a ] #NEWLINE#
worksheetObject . portrait = False #NEWLINE#
response = urllib . request . urlopen ( URL + '?%s' % parameter ) #NEWLINE# print ( response . read ( ) ) #NEWLINE#
lamdify = importlib . import_module ( 'sympy.utilities.lambdify' ) #NEWLINE#
d = dict ( t for t in zip ( m [ : : 2 ] , m [ 1 : : 2 ] ) ) #NEWLINE#
self . set_cookie ( 'c' , self . csrf_token ) #NEWLINE#
{ c . name } #NEWLINE#
print ( 'code#SPACE#missing' ) #NEWLINE#
'__lt__' , '__mul__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' #NEWLINE#
warnings . simplefilter ( 'ignore' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
testFunc . __objclass__ #NEWLINE#
meets = Counter ( chain . from_iterable ( combinations ( line , 2 ) for line in lines ) ) #NEWLINE#
plt . plot ( signal ) #NEWLINE#
pd . pivot_table ( df , index = 'A' , columns = 'B' , values = 'C' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
[ '12' , '378' , '456' ] #NEWLINE#
plt . scatter ( R , P , s = 150 , color = c , zorder = 2 ) #NEWLINE#
print ( 'subprocess#SPACE#->#SPACE#' + subprocess . check_output ( command , shell = True ) ) #NEWLINE#
l2 . append ( [ x [ 1 ] for x in zip ( pattern , facs ) if not x [ 0 ] ] ) #NEWLINE#
print ( key [ index ] . reshape ( a . shape ) ) #NEWLINE#
p . add_argument ( '-o' , action = 'append' ) #NEWLINE#
getattr ( f , 'bar' ) #NEWLINE#
ax00 . set_ylabel ( 'top' ) #NEWLINE#
return super ( PictureInline , self ) . formfield_for_dbfield ( db_field , ** kwargs ) #NEWLINE#
frame = bytes ( [ 162 , 1 , 2 , 3 , 4 ] ) #NEWLINE#
regex . match ( 'heinz-11' ) #NEWLINE#
regex . match ( 'heinz-12345' ) #NEWLINE#
{ 'fixed_key_1' : 'foo4' , 'fixed_key_3' : [ { 'key1' : 'foo2' } ] } #NEWLINE#
irc . send ( 'PONG#SPACE#' + text . split ( ) [ 1 ] + '\r\n' ) #NEWLINE#
s = '' #NEWLINE#
map ( func , [ 1 , 2 , 3 ] ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
[ col for col in df . columns if col != 'T1_V6' ] #NEWLINE#
df [ 'POS' ] = pos_tag_sents ( df [ 'Text' ] . apply ( word_tokenize ) . tolist ( ) ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
print ( np . sum ( primes , dtype = np . int32 ) ) #NEWLINE#
c . TerminalInteractiveShell . editing_mode = 'vi' #NEWLINE#
myData . dtype . names #NEWLINE#
a . view ( [ ( '' , a . dtype ) ] * a . shape [ 1 ] ) #NEWLINE#
int ( '02' ) > int ( '1' ) #NEWLINE#
socket . close ( ) #NEWLINE#
[ '.' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , '.' ] , #NEWLINE#
u . encode ( 'utf-8' ) #NEWLINE#
os . environ [ 'PYTHONINSPECT' ] = '1' #NEWLINE#
ax . spines [ 'left' ] . set_bounds ( 20 , 80 ) #NEWLINE#
plt . savefig ( 'three.png' ) #NEWLINE#
list_regexs = [ re . compile ( x ) for x in list_patterns ] #NEWLINE#
axcltwo . imshow ( binimg , interpolation = 'nearest' , cmap = 'Greys' ) #NEWLINE#
dicts = sc . parallelize ( [ { 'foo' : 1 , 'bar' : 2 } , { 'foo' : 3 , 'baz' : - 1 , 'bar' : 5 } ] ) #NEWLINE# dicts . flatMap ( lambda x : list ( x . items ( ) ) ) #NEWLINE#
[ ( 1 , 2 , 3 ) , ( 1 , 2 , 4 ) , ( 1 , 3 , 4 ) , ( 2 , 3 , 4 ) ] #NEWLINE#
MyModel . objects . all ( ) . delete ( ) #NEWLINE#
regressions = regressions . reshape ( A . shape ) #NEWLINE#
data = [ [ ( [ 0 ] * h ) for _ in range ( w ) ] for _ in range ( d ) ] #NEWLINE#
request . setRawHeader ( 'Accept-Charset' , 'ISO-8859-1,utf-8;q=0.7,*;q=0.7' ) #NEWLINE#
request . setRawHeader ( 'Connection' , 'keep-alive' ) #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
min ( timeit . repeat ( lambda : { k : v for d in ( x , y ) for k , v in list ( d . items ( ) ) } ) ) #NEWLINE#
def __get__ ( self , instance , owner ) : #NEWLINE# #INDENT# return functools . partial ( self . function , instance ) #NEWLINE#
mainloop ( ) #NEWLINE#
st . ix [ i ] [ 'a' ] = a #NEWLINE#
del self . __dict__ [ key ] #NEWLINE#
max ( max ( l_one ) , max ( l_two ) ) #NEWLINE#
output = open ( os . path . join ( dir , file_name ) , 'wb' ) #NEWLINE#
result = stringwithbackslashes . decode ( 'string_escape' ) #NEWLINE#
return any ( child . contains ( other_node ) for child in self . children ) #NEWLINE#
regressor . fit ( X , y ) #NEWLINE#
recarr . dtype . names = 'ID' , 'price' , 'text' #NEWLINE#
test ( '(9#SPACE#+#SPACE#3)#SPACE#*#SPACE#(4#SPACE#/#SPACE#5)' ) #NEWLINE#
print ( x ) #NEWLINE#
querset = MyModel . objects . filter ( id__in = custom_list ) #NEWLINE#
shift ( xs , - 3 , cval = np . NaN ) #NEWLINE#
plt . show ( ) #NEWLINE#
__init__ . py #NEWLINE#
do_your_thing_with ( item ) #NEWLINE#
pd . pivot_table ( df , values = 'Value' , index = [ 'Country' , 'Year' ] , columns = #NEWLINE# 'Indicator' ) . reset_index ( ) #NEWLINE#
lst = [ 'abb' , 'ABB' , 'aBa' , 'AbA' ] #NEWLINE#
plt . imshow ( im , interpolation = 'nearest' ) #NEWLINE#
re . sub ( '[]/\\;,><&*:%=+@!#^()|?^' , '' , filename ) #NEWLINE#
df . groupby ( 'bar' ) . filter ( filter_function ) #NEWLINE#
self . close ( ) #NEWLINE#
pd . DataFrame ( list ( product ( l1 , l2 ) ) , columns = [ 'l1' , 'l2' ] ) #NEWLINE#
log . debug ( 'debug#SPACE#message' ) #NEWLINE#
thread . start ( ) #NEWLINE#
df = pd . read_csv ( 'data.csv' , dtype = { 'CallGuid' : np . int64 } ) #NEWLINE#
im . show ( ) #NEWLINE#
"""1,2""" . split ( ',' ) #NEWLINE#
map ( join , zip ( s , drop ( s , 1 ) ) ) #NEWLINE#
newlist += mylist [ i : i + 22 ] #NEWLINE#
pl . colorbar ( myplot , format = '%.0e' ) #NEWLINE#
keys . update ( list ( d . keys ( ) ) ) #NEWLINE#
[ i for i in userInput if i in wordsTask ] #NEWLINE#
top . mainloop ( ) #NEWLINE#
df = pd . read_table ( 'csvfile.csv' , sep = '#SPACE#' ) #NEWLINE#
f . close ( ) #NEWLINE#
color = '#%02x%02x%02x' % ( r , g , b ) #NEWLINE#
naivedt = awaredt . replace ( tzinfo = None ) #NEWLINE#
ast . literal_eval ( '0xff' . decode ( 'utf8' ) ) #NEWLINE#
print ( d [ 1 ] + f . split ( d ) [ 1 ] ) #NEWLINE#
instance . __init__ ( cls , * args , ** kw ) #NEWLINE#
return pd . concat ( [ df , df . shift ( - 1 ) ] , axis = 1 , keys = [ 0 , 1 ] ) . dropna ( ) #NEWLINE#
subs = [ l [ i : i + n ] for i in range ( len ( l ) ) if len ( l [ i : i + n ] ) == n ] #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE# cv2 . destroyAllWindows ( ) #NEWLINE#
df . loc [ : , ( 'vega' ) ] . fillna ( 0 , inplace = True ) #NEWLINE#
admin . site . register ( Example , MyAdmin ) #NEWLINE#
'f#SPACE#ooba#SPACE#r' , 'fo#SPACE#oba#SPACE#r' , 'f#SPACE#o#SPACE#oba#SPACE#r' , 'foo#SPACE#ba#SPACE#r' , 'f#SPACE#oo#SPACE#ba#SPACE#r' #NEWLINE#
'fo#SPACE#o#SPACE#ba#SPACE#r' , 'f#SPACE#o#SPACE#o#SPACE#ba#SPACE#r' , 'foob#SPACE#a#SPACE#r' , 'f#SPACE#oob#SPACE#a#SPACE#r' , 'fo#SPACE#ob#SPACE#a#SPACE#r' #NEWLINE#
'f#SPACE#o#SPACE#ob#SPACE#a#SPACE#r' , 'foo#SPACE#b#SPACE#a#SPACE#r' , 'f#SPACE#oo#SPACE#b#SPACE#a#SPACE#r' , 'fo#SPACE#o#SPACE#b#SPACE#a#SPACE#r' , 'f#SPACE#o#SPACE#o#SPACE#b#SPACE#a#SPACE#r' #NEWLINE#
print ( re . findall ( 'bus|car|\\S' , s ) ) #NEWLINE#
list ( itertools . product ( l1 , l2 ) ) #NEWLINE#
x [ np . argmin ( abs ( f2 - f1 ) ) ] #NEWLINE#
json_data = json . load ( StringIO ( json_str ) ) #NEWLINE#
cv2 . circle ( cimg , ( i [ 0 ] , i [ 1 ] ) , 2 , ( 0 , 0 , 255 ) , 3 ) #NEWLINE#
a = map ( float_or_string , mylist ) #NEWLINE#
img . view ( np . uint8 ) . reshape ( img . shape + ( 4 , ) ) [ ( ... ) , : 3 ] #NEWLINE#
data = dict ( ( key , request . form . getlist ( key ) ) for key in list ( request . form . #NEWLINE# keys ( ) ) ) #NEWLINE#
{ key : None for key in keys } #NEWLINE#
print ( 'TreeWidgetItemChild#SPACE#del' ) #NEWLINE#
print ( 'CPU#SPACE#time:#SPACE#{:.4f}' . format ( task . cputime ) ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#Foo,#SPACE#Bar#SPACE#FROM#SPACE#Table' ) #NEWLINE#
f . close ( ) #NEWLINE#
df . groupby ( [ 'Make' , 'Model' ] ) . transform ( 'first' ) #NEWLINE#
fig . show ( ) #NEWLINE#
return ( ( 1 + sqrt ( 5 ) ) ** n - ( 1 - sqrt ( 5 ) ) ** n ) / ( 2 ** n * sqrt ( 5 ) ) #NEWLINE#
[ ( next ( it ) , next ( it1 ) ) for _ in range ( 10 ) ] #NEWLINE#
the_list . append ( 'four' ) #NEWLINE#
os . makedirs ( expanded ) #NEWLINE#
print ( key , value ) #NEWLINE#
item = eval ( input ( 'Enter#SPACE#a#SPACE#sentence:#SPACE#' ) ) #NEWLINE#
str ( d ) #NEWLINE#
pts_src = np . array ( [ [ 25.0 , 2.0 ] , [ 403.0 , 22.0 ] , [ 375.0 , 436.0 ] , [ 6.0 , 433.0 ] ] ) #NEWLINE#
browser . get ( googleURL ) #NEWLINE#
self . app . run ( ) #NEWLINE#
out . close ( ) #NEWLINE#
help ( parrot ) #NEWLINE#
sys . stderr . close ( ) #NEWLINE#
ax . axis ( [ - 1 , 10 , - 1 , 10 ] ) #NEWLINE#
silly_var = x #NEWLINE#
n . set_hint ( 'x' , gtk . gdk . screen_width ( ) / 2.0 ) #NEWLINE#
ax . transData . transform ( [ ( 0 , 1 ) , ( 1 , 0 ) ] ) - ax . transData . transform ( ( 0 , 0 ) ) #NEWLINE#
[ 0.3 , 0.5 , 0.2 ] #NEWLINE#
ax . set_xlim3d ( [ - 1 , 9 ] ) #NEWLINE#
worksheet = workbook . add_sheet ( 'Sheet#SPACE#1' , cell_overwrite_ok = True ) #NEWLINE#
soup = bs4 . BeautifulSoup ( r . text , 'lxml' ) #NEWLINE#
os . environ [ 'PARAM_OPT' ] #NEWLINE#
zf . close ( ) #NEWLINE#
setup . py #NEWLINE#
num2words ( 10000000000000000000000000 ) #NEWLINE#
matrix [ 0 ] [ 1 ] += 'someText' #NEWLINE#
del sys . modules [ 'ModNeedToBeDel' ] #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
is_absolute ( '//www.example.com/some/path' ) #NEWLINE#
super ( ImgWidget2 , self ) . __init__ ( parent ) #NEWLINE#
print ( struct . unpack ( '>h' , reply [ 'parameter' ] ) [ 0 ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . scatter ( x , y , c = y , s = 500 ) #NEWLINE#
self . __dict__ . update ( dictionary ) #NEWLINE#
print ( Board ( [ 1 , 2 ] ) ) #NEWLINE#
tf . initialize_variables ( lstm_variables ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
pyglet . app . run ( ) #NEWLINE#
cache . update ( ) #NEWLINE#
return df . groupby ( 'ID' , group_keys = False ) . apply ( lambda x : x [ 1 : ] ) #NEWLINE#
print ( instance . Variable ) #NEWLINE#
rx = re . compile ( '[^\\W\\d_]+' , re . UNICODE ) #NEWLINE#
print ( { names [ i ] : df for i , df in enumerate ( [ df_1 , df_2 , df_3 ] ) } ) #NEWLINE#
myFile . write ( '<html>' ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
Process ( target = foo , args = ( x , 'x' ) ) . start ( ) #NEWLINE#
fr = fr . groupby ( 'fruitname' ) . apply ( remove_last_odd_row ) . reset_index ( drop = True ) #NEWLINE#
np . where ( np . all ( arr == np . array ( [ 10 , 15 , 30 ] ) , axis = - 1 ) ) #NEWLINE#
root = tree . getroot ( ) #NEWLINE#
img = PIL . Image . open ( 'img.jpg' ) #NEWLINE#
self . driver . ActionChains ( driver ) . move_to_element ( elem ) . click ( elem ) . perform ( ) #NEWLINE#
print ( root . winfo_height ( ) ) #NEWLINE#
myList . append ( item ) #NEWLINE#
tree = ET . fromstring ( xmlstr ) #NEWLINE#
logging . basicConfig ( filename = 'subptest.log' , filemode = 'w' , level = logging . INFO ) #NEWLINE#
m / m . norm ( 1 , axis = 1 ) . reshape ( ( m . shape [ 0 ] , 1 ) ) #NEWLINE#
l . extend ( list ( range ( 1 , n + 1 ) ) ) #NEWLINE#
"""""" . join ( my_data ) #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( list ( roundrobin ( * l ) ) ) #NEWLINE#
np . partition ( x , - 10 ) [ - 10 : ] #NEWLINE#
print ( request . POST [ 'username' ] ) #NEWLINE#
smtp . close ( ) #NEWLINE#
timestamp . sort ( reverse = True ) #NEWLINE#
print ( find_eulerian_tour ( graph ) ) #NEWLINE#
df . xs ( 'c' , level = 'group2' ) #NEWLINE#
print ( 'BAAD' ) #NEWLINE#
df1 = df1 . fillna ( 0 ) #NEWLINE#
val = format ( val , 'x' ) #NEWLINE#
exec ( compile ( open ( filename ) . read ( ) , filename , 'exec' ) , globals , locals ) #NEWLINE#
"""""" . join ( chr ( x ) for x in struct . unpack ( '>2H' , emoji . encode ( 'utf-16be' ) ) ) #NEWLINE#
parser . add_argument ( '--name' , dest = 'names' , action = 'append' ) #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 8 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
parser . add_option ( '-t' , '--tag' , dest = 'tag' , help = 'tag#SPACE#id' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ list ( g ) for k , g in groupby ( inp , key = lambda i , j = count ( ) : i - next ( j ) ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
strftime ( '%z' ) #NEWLINE#
output = [ s . strip ( ) for s in words . split ( '#SPACE##SPACE#' ) if s ] #NEWLINE#
myTreeView . setEditTriggers ( QAbstractItemView . NoEditTriggers ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sudo ( 'git#SPACE#checkout#SPACE#master' , user = 'web' ) #NEWLINE#
sudo ( 'git#SPACE#pull#SPACE#origin#SPACE#master' , user = 'web' ) #NEWLINE#
sudo ( 'build_assets#SPACE#-m#SPACE#build' , user = 'web' ) #NEWLINE#
sudo ( './run' , user = 'web' ) #NEWLINE#
l = [ input ( 'e' + str ( i ) + '=' ) for i in range ( N ) ] #NEWLINE#
re . findall ( '\\b.{1,15}\\b' , s ) #NEWLINE#
plt . show ( ) #NEWLINE#
base . rhyme ( ) #NEWLINE#
do_something_special ( ) #NEWLINE#
print ( '#SPACE#' . join ( members ) ) #NEWLINE#
array ( [ 1 , 1 ] ) #NEWLINE#
print ( '#SPACE#' . join ( str ( ord ( c ) ) for c in s ) ) #NEWLINE#
img . save ( 'img2.png' , 'PNG' ) #NEWLINE#
myList = [ 'test;cow' , 'one' , 'two' , 'three' , 'cow.' , 'cow' , 'acow' ] #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
group = df . groupby ( 'User_id' ) [ 'Name' ] . unique ( ) #NEWLINE#
d = { 'a' : 1 , 'b' : 1 , 'c' : 1 } #NEWLINE#
workbook . close ( ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) #NEWLINE#
jsonindata [ 'user' ] [ 'created_at' ] , jsonindata [ 'user' ] [ 'description' ] #NEWLINE#
jsonindata [ 'user' ] [ 'following' ] , jsonindata [ 'user' ] [ 'friends_count' ] #NEWLINE#
re . split ( '(<[^>]*>)' , '<body><table><tr><td>' ) [ 1 : : 2 ] #NEWLINE#
plt . ylabel ( 'Probability' ) #NEWLINE#
[ { 'play' : 6.0 , 'id' : 3 , 'uid' : 'ghi' } , { 'play' : 7.0 , 'id' : 4 , 'uid' : 'jkl' } ] , #NEWLINE#
a = dict ( ( ( 1 , 3 ) , ( 0 , - 1 ) , ( 3 , 21 ) ) ) #NEWLINE#
super ( Alpha , self ) . __init__ ( s ) #NEWLINE#
webdriver . ActionChains ( driver ) . move_to_element ( el ) . click ( el ) . perform ( ) #NEWLINE#
outputfile . close ( ) #NEWLINE#
text . tag_config ( 'start' , background = 'black' , foreground = 'yellow' ) #NEWLINE#
struct . pack ( '=III' , 1 , 2 , 3 ) #NEWLINE#
[ k for k , v in list ( mydict . items ( ) ) if c [ v ] > 1 ] #NEWLINE#
window . connect ( 'destroy' , lambda w : gtk . main_quit ( ) ) #NEWLINE#
layout . addWidget ( self . connectButton ) #NEWLINE#
str1_list . sort ( ) #NEWLINE#
<STR0> ( [ 255 ] ) #NEWLINE#
selenium_logger . setLevel ( logging . WARNING ) #NEWLINE#
plt . hold ( True ) #NEWLINE#
P = np . array ( [ [ 2 , 0 , 0 ] , [ 0 , 1 , 0 ] , [ 0 , 0 , 3 ] ] ) #NEWLINE#
array ( [ 2 , 0 , 1 ] ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com:587' ) #NEWLINE#
from selenium . webdriver . support . ui import Select #NEWLINE#
print ( '%d#SPACE#emoticons#SPACE#found' % count ) #NEWLINE#
re . sub ( '<(\\w+)>' , lambda m : d . get ( m . group ( 1 ) , m . group ( 1 ) ) , s ) #NEWLINE#
a [ ainb ] #NEWLINE#
df . isnull ( ) . sum ( ) . sum ( ) #NEWLINE#
sample . replace ( "'" , "\\'" ) #NEWLINE#
print ( time . time ( ) - start ) #NEWLINE#
offset += datetime . timedelta ( days = 1 ) #NEWLINE#
pygame . draw . circle ( screen , ( 0 , 0 , 0 ) , ( 250 , 250 ) , 125 ) #NEWLINE#
return i / int ( pow ( 10 , l - m ) ) % int ( pow ( 10 , m - n + 1 ) ) #NEWLINE#
rs = urllib . request . urlopen ( req . to_url ( ) ) #NEWLINE#
{ r [ 0 ] : tuple ( r [ 1 : - 1 ] ) for r in islice ( reader ( open ( 'sailor.csv' ) ) , 1 , None ) } #NEWLINE#
return [ x [ start : end ] for start , end in slices if end - start > 1 ] #NEWLINE#
string1 = 'calvin#SPACE#klein#SPACE#design#SPACE#dress#SPACE#calvin#SPACE#klein' #NEWLINE# words = string1 . split ( ) #NEWLINE# print ( '#SPACE#' . join ( sorted ( set ( words ) , key = words . index ) ) ) #NEWLINE#
regex . findall ( '\\X' , text ) #NEWLINE#
send ( 'You#SPACE#can#SPACE#no#SPACE#longer#SPACE#vote.' ) #NEWLINE#
td . findAll ( text = True ) #NEWLINE#
self . response . write ( '</body>#SPACE#</html>' ) #NEWLINE#
response . headers = { str ( 'WWW-Authenticate' ) : 'Basic#SPACE#realm="test"' } #NEWLINE#
r = requests . delete ( URL_delete , data = json . dumps ( mydata ) ) #NEWLINE#
cur . execute ( 'update#SPACE#X#SPACE#set#SPACE#total#SPACE#=#SPACE#70#SPACE#where#SPACE#id#SPACE#=#SPACE#1' ) #NEWLINE#
self . text . tag_add ( 'bold' , 'sel.first' , 'sel.last' ) #NEWLINE#
""":""" . join ( [ s . lower ( ) [ i : i + 2 ] for i in range ( 0 , len ( s ) - 1 , 2 ) ] ) #NEWLINE#
os . system ( 'cls' if os . name == 'nt' else 'clear' ) #NEWLINE#
print ( bool ( [ ] ) ) #NEWLINE#
self . fields [ 'code' ] . required = False #NEWLINE#
list ( intermix ( [ 1 , 0 , 1 , 1 , 2 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 2 ] ) ) #NEWLINE#
sys . <VAR0> . close ( ) #NEWLINE#
t [ 0 ] [ 0 ] #NEWLINE#
seventh_value = next ( f ( i ) for i in range ( 1 , 10 ) if i == 7 ) #NEWLINE#
ax1 . scatter ( x [ : 4 ] , y [ : 4 ] , s = 10 , c = 'b' , marker = 's' , label = 'first' ) #NEWLINE#
[ '+' , 1 , '*' , 2 , 3 ] #NEWLINE#
any ( i in array2 for i in array1 ) #NEWLINE#
result [ d [ 'event' ] ] . append ( d ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
del x [ 'a' ] , x [ 'b' ] #NEWLINE#
print ( 'Fizz' * ( i % 3 == 0 ) + 'Buzz' * ( i % 5 == 0 ) or i ) #NEWLINE#
some_list = [ 1 , 2 , 3 ] #NEWLINE#
traceback . print_exc ( file = sys . stdout ) #NEWLINE#
fout . write ( struct . pack ( '>i' , 42 ) ) #NEWLINE#
self . openBtn . clicked . connect ( self . openClicked ) #NEWLINE#
[ { 'id' : 2 , 'votes' : 0 , 'poll' : 5 , 'choice' : 'A#SPACE#lot!' } ] #NEWLINE#
client . drop_database ( '<DBNAME>' ) #NEWLINE#
print ( 'size:#SPACE#{0}' . format ( size ) ) #NEWLINE#
[ x [ 1 ] for x in Counter ( n ) . most_common ( ) if x [ 0 ] > 1 ] #NEWLINE#
sorted ( myarr , cmp = lambda x , y : compare ( x , y ) , key = lambda x : x [ 'rank' ] ) #NEWLINE#
to_dict ( 'abcdef' , list ( range ( 3 ) ) , 10 ) #NEWLINE#
y = arr [ 29 ] . sum ( ) #NEWLINE#
df [ 1 ] . plot ( ax = axes [ 0 , 1 ] ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
listbox . config ( width = 0 ) #NEWLINE#
TestApp ( ) . run ( ) #NEWLINE#
subprocess . Popen ( [ 'open' , d ] ) #NEWLINE#
print ( ordered_dict [ next ( islice ( ordered_dict , 2 , None ) ) ] ) #NEWLINE#
y [ ( 1 ) , : , ( 2 ) , : ] #NEWLINE#
traindf = sqlContext . createDataFrame ( [ ( 1 , [ 1 , 2 , 3 ] ) , ( 2 , [ 4 , 5 , 6 ] ) , ( 3 , ( #NEWLINE# 7 , 8 , 9 ) ) ] , ( 'id' , 'image' ) ) #NEWLINE#
simplejson . load ( f ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
print ( "that's#SPACE#right" ) #NEWLINE#
list_of_pairs = [ ( p1 , p2 ) for p1 in people for p2 in people ] #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( jar ) ) #NEWLINE#
ansi_escape . sub ( '' , sometext ) #NEWLINE#
pylab . show ( ) #NEWLINE#
ax . imshow ( Z2 , extent = extent , interpolation = 'nearest' , origin = 'lower' ) #NEWLINE#
axborder . set_xlim ( 0 , binimg . shape [ 1 ] - 1 ) #NEWLINE#
pandas . DataFrame . from_dict ( data , orient = 'index' ) . astype ( { ( 0 ) : float , ( 1 ) : str } ) #NEWLINE#
any ( np . array_equal ( b , x ) for x in my_list ) #NEWLINE#
+ cscope + lispindent - python3 + wildignore #NEWLINE#
app . run ( host = '0.0.0.0' , debug = True ) #NEWLINE#
ax . set_ylim ( - 20 , 100 ) #NEWLINE#
df = DataFrame ( randn ( 5 , 2 ) , columns = [ 'a' , 'b' ] ) #NEWLINE#
admin . site . register ( CMSMediaDocument ) #NEWLINE#
password1 = form . cleaned_data [ 'password1' ] #NEWLINE#
cj = cookielib . LWPCookieJar ( ) #NEWLINE#
orig = [ 'He' , 'is' , 'so' , '' , 'cool' ] #NEWLINE# result = [ x for x in orig if x ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
ordered = { ( 4 ) : [ 6 , 5 , 3 , 7 , 8 ] , ( 2 ) : [ 1 , 2 ] } #NEWLINE#
ttk . Label ( self . mainframe , text = 'Button#SPACE#2' ) . grid ( column = 2 , row = 3 , padx = 4 ) #NEWLINE#
pygame . image . save ( Surface , filename ) #NEWLINE#
print ( '{}#SPACE#{:>13}#SPACE#{:>13}#SPACE#{:>13}' . format ( a , x1 , y1 , z1 ) ) #NEWLINE#
results = sess . execute ( 'myproc#SPACE#?,#SPACE#?' , [ param1 , param2 ] ) #NEWLINE#
djng . serve ( index , '0.0.0.0' , 8888 ) #NEWLINE#
__rmul__ = __mul__ #NEWLINE#
[ ( 'a' , 2 ) , ( 'b' , 2 ) , ( 'c' , 2 ) , ( 'a' , 3 ) , ( 'b' , 3 ) , ( 'c' , 3 ) ] #NEWLINE#
print ( 'it#SPACE#now#SPACE#prints#SPACE#to#SPACE#`help.text`' ) #NEWLINE#
plt . pause ( 0.0001 ) #NEWLINE#
lst = [ x for x , in mysql_rows ] #NEWLINE#
do_something ( ) #NEWLINE#
df . A . gt ( df . groupby ( 'labels' ) . A . transform ( pd . Series . quantile , q = 0.95 ) ) . mul ( 1 ) #NEWLINE#
self . text . configure ( yscrollcommand = self . vsb . set ) #NEWLINE#
return sm . OLS ( df [ ycol ] , df [ xcols ] ) . fit ( ) . predict ( ) #NEWLINE#
response = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
logging . exception ( 'Error#SPACE#in#SPACE#test#SPACE#code' ) #NEWLINE#
OrderedDict . __setitem__ ( self , key , value ) #NEWLINE#
print ( 'starting#SPACE#loop' ) #NEWLINE#
well = models . ForeignKey ( 'Well' ) #NEWLINE#
options = models . ManyToManyField ( 'Option' , editable = False ) #NEWLINE#
u . save ( ) #NEWLINE#
any ( e [ 1 ] == search for e in data ) #NEWLINE#
return F ( n - 1 ) + F ( n - 2 ) #NEWLINE#
genes [ row [ 'geneid' ] ] [ row [ 'tx_id' ] ] [ 'colname2' ] = row [ 'colname2' ] #NEWLINE#
print ( subprocess . check_output ( [ 'ifconfig' ] ) ) #NEWLINE#
return [ day for day in range ( len ( day_list ) ) if day_list [ day ] == inp ] [ 0 ] #NEWLINE#
font . createChar ( - 1 , 'some_name' ) #NEWLINE#
getFromDict ( dataDict , [ 'b' , 'v' , 'y' ] ) #NEWLINE#
Py_DECREF ( arr ) #NEWLINE#
logging . StreamHandler . __init__ ( self ) #NEWLINE#
unique [ maxsort ] , counts [ maxsort ] #NEWLINE#
dict . get ( 1 ) . add ( 3 ) #NEWLINE#
df_out = pd . DataFrame ( out , index = df_index ) #NEWLINE#
list ( itertools . dropwhile ( lambda x : x == r [ - 1 ] , reversed ( r ) ) ) [ : : - 1 ] + r [ - 1 : ] #NEWLINE#
somelist = [ i for j , i in enumerate ( somelist ) if j not in remove_indices ] #NEWLINE#
writer . close ( ) #NEWLINE#
return '' . join ( map ( str , list2 ) ) in '' . join ( map ( str , list1 ) ) #NEWLINE#
self . server . serve_forever ( ) #NEWLINE#
fig . subplots_adjust ( hspace = 0.5 , wspace = 0.001 ) #NEWLINE#
np . array ( m [ : , ( 0 ) ] ) . shape #NEWLINE#
plt . show ( ) #NEWLINE#
cPickle . loads ( _ ) #NEWLINE#
l . append ( ( floar ( row [ 0 ] ) , float ( row [ 1 ] ) ) ) #NEWLINE#
data = np . zeros ( 250 , dtype = 'float32,#SPACE#(250000,2)float32' ) #NEWLINE#
main ( ) #NEWLINE#
'Craig' , 'Harriet' , 'Andrew' , 'Felicity' , 'Deidre' , 'Edward' , 'Greg' , 'Brenda' #NEWLINE#
return sorted_list == list ( range ( sorted_list [ 0 ] , sorted_list [ - 1 ] + 1 ) ) #NEWLINE#
do_something ( None ) #NEWLINE#
raise NotImplementedError ( 'self#SPACE#is#SPACE#not#SPACE#a#SPACE#global' ) #NEWLINE#
y = [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 ] #NEWLINE#
ss . rankdata ( [ 1 , 2 , 3 , 3 , 3 , 4 , 5 ] ) #NEWLINE#
user1 , user2 = itemgetter ( 0 , 2 ) ( 'Jack#SPACE#and#SPACE#Jill#SPACE#went#SPACE#up#SPACE#the#SPACE#hill' . split ( ) ) #NEWLINE#
dict ( a ) #NEWLINE#
def count_chars ( s , chars ) : #NEWLINE# #INDENT# return { c : s . count ( c ) for c in chars } #NEWLINE#
pickle . dump ( w , open ( 'file' , 'wb' ) ) #NEWLINE#
Column ( 'id' , Integer , primary_key = True ) , #NEWLINE#
print ( '{},#SPACE#{}' . format ( rgb ( 'aa0200' ) , rgb ( 'AA0200' ) ) ) #NEWLINE#
log = logging . getLogger ( 'foobar' ) #NEWLINE#
plt . savefig ( 'pict.png' , bbox_inches = 'tight' , pad_inches = 0 ) #NEWLINE#
def remove_indices ( numbers , indices ) : #NEWLINE# #INDENT# return [ numbers [ i ] for i in range ( len ( numbers ) ) if i not in indices ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
node = doc . getElementsByTagName ( 'nodeC' ) [ 0 ] #NEWLINE#
d = collections . defaultdict ( int ) #NEWLINE#
net . build ( ) #NEWLINE#
[ True , False , '&&' ] #NEWLINE#
theFunc ( ) #NEWLINE#
G1 . add_edges_from ( [ ( 'a' , 'b' ) , ( 'b' , 'c' ) , ( 'c' , 'd' ) , ( 'd' , 'e' ) , ( 'f' , 'g' ) ] ) #NEWLINE#
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440 #NEWLINE#
first_line = f . readline ( ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
nmf_model . fit ( A ) #NEWLINE#
cmap = colors . ListedColormap ( [ 'white' , 'yellow' , 'orange' ] ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
browser . set_handle_robots ( False ) #NEWLINE#
with open ( filename , 'r' ) as infile : #NEWLINE# #INDENT# lines = [ line for line in infile ] [ : N ] #NEWLINE#
self . send_msg ( 'Welcome#SPACE#Back!' ) #NEWLINE#
libc . cprogram ( wts , res , kks , pointer ( n ) , ex ) #NEWLINE#
print ( [ ( a , b , z [ a ] ) for a , b in l ] ) #NEWLINE#
server . listen ( 5 ) #NEWLINE#
res . append ( copy . deepcopy ( l ) ) #NEWLINE#
gb . apply ( lambda x : dict ( zip ( * x ) ) ) . unstack ( ) #NEWLINE#
[ 97 , 98 , 114 , 97 , 107 , 97 ] #NEWLINE#
pylab . show ( ) #NEWLINE#
tf = tempfile . NamedTemporaryFile ( delete = False ) #NEWLINE#
for line in lines : #NEWLINE# #INDENT# line = line [ 2 : ] #NEWLINE#
"""(?<=<)(\\w+)(?=>)""" #NEWLINE#
super ( ContestAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
f . close ( ) #NEWLINE#
lst . append ( lambda x , z = i : f ( x , z ) ) #NEWLINE#
print ( '{:.2f}' . format ( i / 100.0 ) ) #NEWLINE#
dicts = sc . parallelize ( [ { 'foo' : 1 , 'bar' : 2 } , { 'foo' : 3 , 'baz' : - 1 , 'bar' : 5 } ] ) #NEWLINE#
int ( datetime . datetime . now ( ) . strftime ( '%s' ) ) * 1000 #NEWLINE#
random . sample ( set ( L ) , x ) #NEWLINE#
plt . show ( ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
print ( list ( chain ( * listOfTuples ) ) ) #NEWLINE#
image . save ( img_file , 'png' ) #NEWLINE#
points . reshape ( 3 , - 1 ) . T #NEWLINE#
[ 'Something' , 'about' , 'the' , 'west' , 'wing' ] #NEWLINE#
[ ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 2 , 4 ) , ( 2 , 5 ) , ( 3 , 5 ) ] #NEWLINE#
"""#SPACE#""" . join ( format ( ord ( x ) , '08b' ) for x in st ) #NEWLINE#
print ( ( x , y ) ) #NEWLINE#
[ ord ( b ) for b in bytestr ] #NEWLINE#
f . write ( '\n' ) #NEWLINE#
s . set_xticklabels ( group_labels ) #NEWLINE#
take = lambda value , index : value . split ( '|' ) [ index ] #NEWLINE#
print ( '%8.3f' * 6 % ( x , y , z , p , q , my_python_module . some_function ( x , y , p , q ) ) #NEWLINE# ) #NEWLINE#
kivy . require ( '1.8.0' ) #NEWLINE#
{ i : str ( i ) for i in range ( 5 ) } #NEWLINE#
x , y , z = np . random . random ( ( 3 , nobservations ) ) #NEWLINE#
req . add_header ( ( key , value ) ) #NEWLINE#
print ( '<p>Hello#SPACE#world.</p>' ) #NEWLINE#
return '' . join ( [ c for c in subj if c not in sc ] ) #NEWLINE#
unittest . main ( ) #NEWLINE#
self . emitter . start ( ) #NEWLINE#
followers_df . index = list ( range ( 20 ) ) #NEWLINE#
df = pd . read_csv ( 'input.csv' , index_col = 0 ) #NEWLINE#
blocklist . append ( line ) #NEWLINE#
df = sc . parallelize ( [ ( [ 1 , 2 , 3 ] , [ 1 , 2 ] ) , ( [ 3 , 4 ] , [ 5 , 6 ] ) ] ) . toDF ( [ 'xs' , 'ys' ] ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( lambda x , y : x * y , [ 1 ] + list ( range ( 1 , n + 1 ) ) ) #NEWLINE#
{ 'a' : 3 , 'b' : 8 } #NEWLINE#
plt . scatter ( t , x , c = y ) #NEWLINE#
assets . register ( 'scss_all' , scss ) #NEWLINE#
upper = tuple ( x + 1 for x in upper ) #NEWLINE#
print ( s . attributes [ 'name' ] . value ) #NEWLINE#
Record . objects . select_related ( ) . filter ( id = variable_that_stores_id ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
raise ValueError ( 'Mean#SPACE#shape#SPACE#incompatible#SPACE#with#SPACE#input#SPACE#shape.' ) #NEWLINE#
df3 . groupby ( df3 . index ) . mean ( ) #NEWLINE#
var1 , var2 = [ int ( x ) for x in [ var1 , var2 ] ] #NEWLINE#
writer = csv . writer ( out_file ) #NEWLINE#
r = requests . get ( 'http://www.imdb.com/title/tt0108778/' ) #NEWLINE#
df1 = DataFrame ( { 'test_set' : test_set } ) #NEWLINE#
layout . addWidget ( self . label ) #NEWLINE#
cursor . execute ( 'PRAGMA#SPACE#foreign_keys=ON' ) #NEWLINE#
reversed_arr = arr [ : : - 1 ] #NEWLINE#
array ( [ 0 , 1 , 3 , 6 , 7 , 8 , 9 ] , dtype = int64 ) , #NEWLINE#
[ [ ( j if j is not None else maxVal ) for k , j in enumerate ( i ) ] for i in l ] #NEWLINE#
parser . add_argument ( 'fileName' , nargs = '+' ) #NEWLINE#
pizza = models . ForeignKey ( Customer ) #NEWLINE#
config = { 'mysql' : { 'user' : 'root' , 'pass' : 'secret' , 'tables' : { 'users' : #NEWLINE# 'tb_users' } } } #NEWLINE#
[ f . closed for f in gen_abc ( ) ] #NEWLINE#
simplejson . dumps ( object ( ) ) #NEWLINE#
def words_in_string ( word_list , a_string ) : #NEWLINE# #INDENT# return set ( word_list ) . intersection ( a_string . split ( ) ) #NEWLINE#
[ ( 0 , 'a' ) , ( 1 , 'b' ) , ( 2 , 'c' ) ] #NEWLINE#
w = re . sub ( '\\$' , '</sub>' , w , count = 1 ) #NEWLINE#
QObject . __init__ ( self ) #NEWLINE#
hist = np . histogram ( img . flatten ( ) , 256 , [ 0 , 256 ] ) [ 0 ] #NEWLINE#
self . left . extend ( self . right [ 0 : x ] ) #NEWLINE#
print ( 'Control+Click' ) #NEWLINE#
print ( 'Control+Shift+Click' ) #NEWLINE#
print ( 'Click' ) #NEWLINE#
key_to_download . get_contents_to_filename ( 'myfile' ) #NEWLINE#
[ ( 0 , 0 ) , ( 2 , 4 ) , ( 3 , 6 ) , ( 4 , 8 ) ] #NEWLINE#
print ( list ( d ) ) #NEWLINE#
print ( 'Hi,#SPACE#%s.#SPACE#You#SPACE#called#SPACE#this#SPACE#from#SPACE#%s#SPACE#at#SPACE#line#SPACE###SPACE#%d.' % ( name , mod , lineno ) ) #NEWLINE#
df . iloc [ df . index . get_loc ( '2015-04-25' ) - 1 ] #NEWLINE#
count . most_common ( 2 ) #NEWLINE#
p1 . join ( ) #NEWLINE#
process = subprocess . Popen ( command , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
sorted ( iter ( x ) , key = lambda k : random . random ( ) ) #NEWLINE#
glTranslatef ( 100 , 100 ) #NEWLINE#
sanitised_path = '' #NEWLINE#
sc . union ( [ sc . textFile ( basepath + '\n' + f ) for f in files ] ) #NEWLINE#
legobj . set_linewidth ( 2.0 ) #NEWLINE#
self . response . set_status ( 401 ) #NEWLINE#
items . append ( self . listWidget . item ( index ) ) #NEWLINE#
view_3_noblock . map ( lambda x : x ** 10 , list ( range ( 32 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
response = requests . get ( url , auth = ( username , password ) , verify = False ) #NEWLINE#
re . search ( '([a-z])\\1' , 'ugknbfddgicrmopn' ) . group ( ) #NEWLINE#
d [ 'text' ] #NEWLINE#
out4 = a [ i [ 0 ] + 1 : i [ 2 ] ] #NEWLINE#
some_func ( 1 , 2 , kw1 = kw1 , kw2 = kw2 , kw3 = kw3 ) #NEWLINE#
json . dumps ( { 'price' : 'â\x82¬10' } ) #NEWLINE#
struct . calcsize ( '@BBHHHBBHLL' ) #NEWLINE#
signal . signal ( signum , sighandler ) #NEWLINE#
image = Image . new ( 'RGBA' , ( 600 , 150 ) , ( 255 , 255 , 255 ) ) #NEWLINE#
df [ 0 ] [ 0 ] #NEWLINE#
formatter = logging . Formatter ( '%(asctime)s#SPACE#:#SPACE#%(message)s' ) #NEWLINE#
PyMODINIT_FUNC #NEWLINE#
computeMD5hash ( 'The#SPACE#quick#SPACE#brown#SPACE#fox#SPACE#jumps#SPACE#over#SPACE#the#SPACE#lazy#SPACE#dog' ) #NEWLINE#
wx . Frame . __init__ ( self , parent , title = 'Hello#SPACE#World' ) #NEWLINE#
[ 3 , 8.567499999999999 , 13.0665 ] #NEWLINE#
numpy . where ( a != 0 , 1 , 0 ) . sum ( ) #NEWLINE#
parser . add_argument ( '--foo' ) #NEWLINE#
t . replace ( '||' , '|-|' ) . replace ( '|' , '' ) . replace ( '-' , '|' ) #NEWLINE#
x . sort ( ) #NEWLINE#
help ( 'modules' ) #NEWLINE#
arr = numpy . array ( ( ( 2 , 2 ) , ( 2 , - 2 ) ) ) #NEWLINE#
expr1 , expr2 , expr3 , expr4 #NEWLINE#
answer = re . sub ( '(\\d)\\1+' , '\\1' , '12233322155552' ) #NEWLINE#
server_ssl = smtplib . SMTP_SSL ( 'smtp.gmail.com' , 465 ) #NEWLINE#
f ( ) #NEWLINE#
lbl4 . grid ( row = 3 , column = 0 ) #NEWLINE#
cv2 . imshow ( 'frame' , cv2 . resize ( framenp , ( 640 , 480 ) ) ) #NEWLINE#
df [ 'Combined_ID' ] = df [ [ 'ID_1' , 'ID_2' , 'ID_3' ] ] . fillna ( '' ) . sum ( axis = 1 ) #NEWLINE#
w . writerow ( [ 'Name' , 'Date' , 'Reading' ] ) #NEWLINE#
return Response ( xml , mimetype = 'text/xml' ) #NEWLINE#
print ( title . encode ( 'utf8' ) ) #NEWLINE#
print ( ( 'The#SPACE#sum#SPACE#of#SPACE#all#SPACE#numbers#SPACE#is:' , num + float ( tmp ) ) ) #NEWLINE#
copied_file = open ( 'some_file' ) . read ( ) #NEWLINE#
file . write ( '...' ) #NEWLINE#
df [ 'concatenated' ] = df [ 'year' ] + df [ 'month' ] #NEWLINE#
next ( x for x in range ( 10 ) if x == 11 ) #NEWLINE#
numpy . array ( object , dtype = None , copy = True , order = None , subok = False , ndmin = 0 ) #NEWLINE#
print ( repr ( object ) ) #NEWLINE#
sorted ( list ( mydict . items ( ) ) , key = itemgetter ( 1 , 0 ) ) #NEWLINE#
res . fillna ( 0 ) #NEWLINE#
np . diff ( a ) #NEWLINE#
output = defaultdict ( lambda : defaultdict ( int ) ) #NEWLINE#
print ( list ( itertools . product ( [ 1 , 2 ] , repeat = 3 ) ) ) #NEWLINE# [ ( 1 , 1 , 1 ) , ( 1 , 1 , 2 ) , ( 1 , 2 , 1 ) , ( 1 , 2 , 2 ) , ( 2 , 1 , 1 ) , ( 2 , 1 , 2 ) , ( 2 , 2 , 1 #NEWLINE# ) , ( 2 , 2 , 2 ) ] #NEWLINE#
print ( bar . __name__ ) #NEWLINE#
image . set_from_pixbuf ( pixbuf ) #NEWLINE#
a = datetime . strptime ( f , '%Y-%m-%d' ) #NEWLINE#
super ( Fruit , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
list ( d_values ( { ( 1 ) : { ( 2 ) : 3 , ( 4 ) : 5 } } , 2 ) ) #NEWLINE#
img_folder = os . path . join ( os . getcwd ( ) , 'test_images' ) #NEWLINE#
print ( get_pdf_content ( '/path/to/file.pdf' ) ) #NEWLINE#
self . img . set_from_file ( fname ) #NEWLINE#
app . setStyleSheet ( stylesheet ) #NEWLINE#
def add ( a , b ) : #NEWLINE# #INDENT# return a + b #NEWLINE#
return server . NOT_DONE_YET #NEWLINE#
b = [ ( sl + [ 0 ] * ( len ( max ( a , key = len ) ) - len ( sl ) ) ) for sl in a ] #NEWLINE#
fig . suptitle ( 'test#SPACE#title' , fontsize = 20 ) #NEWLINE#
Ind = np . ix_ ( [ 0 , 1 , 2 ] , [ 0 , 1 , 1 , 2 , 0 , 1 ] , [ 0 , 1 , 2 , 3 , 2 , 3 ] ) #NEWLINE#
w . pack ( ) #NEWLINE#
print ( equal ( { 'a' : 1 , 'b' : 2 } , { 'b' : 2 , 'a' : 2 } ) ) #NEWLINE#
return [ t [ i : i + n ] for i in range ( 0 , len ( t ) , n ) ] #NEWLINE#
json . dump ( data , f ) #NEWLINE#
unittest . main ( verbosity = 2 ) #NEWLINE#
most_pop ( [ ( 1920 , 1939 ) , ( 1911 , 1944 ) , ( 1920 , 1955 ) , ( 1938 , 1939 ) ] ) [ 0 ] #NEWLINE#
df . C . plot ( ax = plt . gca ( ) ) #NEWLINE#
lst = [ eval ( input ( 'Enter#SPACE#word#SPACE#{}:' . format ( i ) ) ) for i in range ( 3 ) ] #NEWLINE#
db = SQLAlchemy ( app ) #NEWLINE#
plt . xscale ( 'log' ) #NEWLINE#
print ( line ) #NEWLINE#
date7 = getattr ( obj , 'date%d' % i ) #NEWLINE#
submodule2 . py #NEWLINE#
np . linspace ( 0 , 1 , 10 , endpoint = False ) #NEWLINE#
document2 . body . append ( copy . copy ( document1 . find ( 'div' , id_ = 'someid' ) ) ) #NEWLINE#
print ( df [ df [ 'fruitname' ] == fruit ] . iloc [ - 1 ] . name ) #NEWLINE#
from django . conf import settings #NEWLINE#
list ( product ( [ 1 , 2 , 3 ] , [ 'a' , 'b' ] , [ 4 , 5 ] ) ) #NEWLINE#
size = fields . IntegerRangeField ( list ( range ( 1 , 50 ) ) ) #NEWLINE#
plt . bar ( list ( range ( len ( D ) ) ) , list ( D . values ( ) ) , align = 'center' ) #NEWLINE#
map ( ord , os . urandom ( 10 ) ) #NEWLINE#
logger = logging . getLogger ( ) #NEWLINE#
do_something_with ( name ) #NEWLINE#
ax . set_xlim ( 0 , 2 ) #NEWLINE#
x . sort ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
pd . read_csv ( io . StringIO ( t ) , header = False ) #NEWLINE#
print ( list ( iterable ) ) #NEWLINE#
widget . lift ( ) #NEWLINE#
user . save ( ) #NEWLINE#
s = '' . join ( map ( str , numList ) ) #NEWLINE#
run ( host = 'localhost' , port = 8080 , debug = True ) #NEWLINE#
x2 [ : , ( 0 ) ] = np . roll ( x2 [ : , ( 0 ) ] , 3 ) #NEWLINE#
return ( ( x - a ) / ( b - a ) ) . clip ( 0 , 1 ) #NEWLINE#
plt . grid ( ) #NEWLINE# plt . show ( ) #NEWLINE#
self . fitness = 2 * self . i #NEWLINE#
plt . gcf ( ) . add_subplot ( 422 ) #NEWLINE#
plt . gcf ( ) . add_subplot ( 423 ) #NEWLINE#
print ( r ( 'cor(a,b,method="pearson")' ) ) #NEWLINE#
ytest = regr . predict ( Xtest ) #NEWLINE#
return self . render_to_response ( self . get_context_data ( form = form ) ) #NEWLINE#
stdin . flush ( ) #NEWLINE#
ax2 . plot ( list ( range ( 20 ) ) , 'r^' ) #NEWLINE#
( name , view , id ) , tokens = k [ : 3 ] , k [ 3 : ] #NEWLINE#
l2 = map ( lambda n : '%.2f' % n , l ) #NEWLINE#
ax . bar ( x , y , width = 10 ) #NEWLINE#
form = ContactForm ( request . POST ) #NEWLINE#
print ( df . asfreq ( 'B' ) ) #NEWLINE#
myscript . py #NEWLINE#
popen = subprocess . Popen ( args , stdout = subprocess . PIPE ) #NEWLINE#
"""^(\\w+)\\s\\|{3}\\s(\\w+)\\s\\|{3}\\s(.*)""" #NEWLINE#
status . run ( ) #NEWLINE#
rgx . search ( 'a+' ) is None #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
p = User ( name = 'Fred' , email = 'fred@example.com' ) #NEWLINE#
ax . plot ( 5 , 5 , 'o' , color = 'y' ) #NEWLINE#
super ( Child , self ) . __init__ ( ) #NEWLINE#
mat2 = numpy . load ( 'my_matrix.dat' ) #NEWLINE#
return image . convert ( 'RGB' ) . quantize ( palette = pal_image ) #NEWLINE#
template . render ( items = links ) . encode ( 'utf-8' ) #NEWLINE#
time . tzset ( ) #NEWLINE#
showsome ( 'ermanno#SPACE#olmi' ) #NEWLINE#
urlpatterns = patterns ( 'mysite.app.views' , ( '^Project/$' , 'project' ) , ( #NEWLINE# '^Links/$' , 'links' ) , ( '^Profile/$' , 'profile' ) , ( '^Contact/$' , 'contact' ) ) #NEWLINE#
points = [ ( 3 , 5 ) , ( 7 , 3 ) , ( 7 , 6 ) , ( 3 , 2 ) ] #NEWLINE#
text2_re1 = re . sub ( '(\\d+)/(\\d+)/(\\d+)' , '\\3-\\1-\\2' , text2 ) #NEWLINE#
all ( i . isalpha ( ) or i == '#SPACE#' for i in 'test#string' ) #NEWLINE#
float ( output_string ) #NEWLINE#
list_2 = [ item for item in list_2 if f ( item ) ] #NEWLINE#
g . parse ( 'zot.rdf' ) #NEWLINE#
x = pickle . load ( f ) #NEWLINE#
x = foo [ index ] #NEWLINE#
a = np . arange ( 729 ) . reshape ( ( 9 , 9 , 9 ) ) #NEWLINE#
province = models . ForeignKey ( Province ) #NEWLINE#
browserify ( ) #NEWLINE#
A [ i , j ] += C [ j , k ] #NEWLINE#
plt . savefig ( 'margins.png' ) #NEWLINE#
print ( 'financial#SPACE#return#SPACE#of#SPACE#outcome#SPACE#1#SPACE#=#SPACE#{:.2f}' . format ( Decimal ( '33.505' ) ) ) #NEWLINE#
hash . update ( line ) #NEWLINE#
return '' . join ( chr ( ord ( x ) ^ ord ( y ) ) for x , y in zip ( xs , ys ) ) #NEWLINE#
dists = np . vstack ( ( [ x_dists . T ] , [ y_dists . T ] ) ) . T #NEWLINE#
print ( '{}#SPACE#took#SPACE#{}#SPACE#minutes...' . format ( name , ( e - s ) / 60 ) ) #NEWLINE#
min ( hours , key = lambda t : abs ( now - datetime . datetime . strptime ( t , '%H:%M' ) ) ) #NEWLINE#
par1 . set_ylim ( 0 , 4 ) #NEWLINE#
sorted ( l1 ) #NEWLINE#
df [ grouped [ 0 ] . transform ( lambda x : x . name != group_name ) . astype ( 'bool' ) ] #NEWLINE#
sorted ( list ( a_dict . items ( ) ) , key = lambda k_v1_v2 : k_v1_v2 [ 1 ] [ 1 ] ) #NEWLINE# sorted ( list ( a_dict . items ( ) ) , key = lambda item : item [ 1 ] [ 1 ] ) #NEWLINE#
return [ day for day in range ( len ( day_list ) ) if day_list [ day ] == inp ] [ 0 ] #NEWLINE#
print ( 'you#SPACE#pressed' , msvcrt . getch ( ) , 'so#SPACE#now#SPACE#i#SPACE#will#SPACE#quit' ) #NEWLINE#
stats . weibull_min . fit ( data , floc = 0 ) #NEWLINE#
return sorted ( ( k , ordered ( v ) ) for k , v in list ( obj . items ( ) ) ) #NEWLINE#
from django . contrib . auth import User #NEWLINE#
return redirect ( '/admin' ) #NEWLINE#
json . dumps ( { 'x' : decimal . Decimal ( '5.5' ) } , default = decimal_default ) #NEWLINE#
inp = ast . literal_eval ( inp . replace ( '{' , '(' ) . replace ( '}' , ')' ) ) #NEWLINE#
self . br . select_form ( name = 'my_form' ) #NEWLINE#
[ 'installexistingexisting' ] #NEWLINE#
float ( value ) #NEWLINE#
df = pd . DataFrame ( data , columns = [ 'university' ] ) #NEWLINE#
self . matplotlibWidget . canvas . draw ( ) #NEWLINE#
os . _exit ( 1 ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
jsonString = json . dumps ( data ) #NEWLINE#
LOGIN_URL = 'login' #NEWLINE#
plt . savefig ( 'rainfall.png' , format = 'png' , dpi = 300 , transparent = True ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
print ( config [ 'DEFAULT' ] [ 'path' ] ) #NEWLINE#
res . update ( df . merge ( <STR0> , how = 'left' ) , overwrite = False ) #NEWLINE#
axborder . imshow ( rgbimg , interpolation = 'nearest' ) #NEWLINE#
msg . attach ( part1 ) #NEWLINE#
print ( BeautifulSoup ( x , 'xml' ) . prettify ( ) ) #NEWLINE#
f . tell ( ) == os . fstat ( f . fileno ( ) ) . st_size #NEWLINE#
print ( traceback . format_exc ( ) ) #NEWLINE#
[ item [ 0 ] for item in tl ] #NEWLINE#
p . start ( ) #NEWLINE#
app . run ( ) #NEWLINE#
data = np . random . uniform ( - 1 , 1 , 44100 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( value [ : min ( len ( value ) , size ) ] . ljust ( size ) ) #NEWLINE#
[ [ 1 ] , [ 3 , 7 ] , [ 8 ] , [ 9 ] ] #NEWLINE#
bucket = conn . get_bucket ( 'mybucket' ) #NEWLINE#
list ( remove_reversed_duplicates ( a ) ) #NEWLINE#
raise forms . ValidationError ( 'You#SPACE#must#SPACE#confirm#SPACE#your#SPACE#password' ) #NEWLINE#
raise forms . ValidationError ( 'Your#SPACE#passwords#SPACE#do#SPACE#not#SPACE#match' ) #NEWLINE#
self . ui_web_view . installEventFilter ( self ) #NEWLINE#
p . join ( ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
a . setLevel ( logging . DEBUG ) #NEWLINE#
server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
return super ( MyModel , self ) . save ( * args , ** kwargs ) #NEWLINE#
del array [ 0 ] #NEWLINE#
time = models . DateTimeField ( ) #NEWLINE#
pd . get_dummies ( df . apply ( tuple , 1 ) ) . groupby ( level = 0 ) . sum ( ) #NEWLINE#
cbar . set_ticks ( [ mn , md , mx ] ) #NEWLINE# cbar . set_ticklabels ( [ mn , md , mx ] ) #NEWLINE#
s . get ( "http://somesite.com/an,url,with,commas,that,won't,be,encoded." ) #NEWLINE#
pl . savefig ( 'tmp.png' ) #NEWLINE#
print ( '#SPACE#' . join ( l [ n : ] + l [ : n ] ) ) #NEWLINE#
max ( 'foobar' , 'angstalot' ) #NEWLINE#
learner = milk . defaultclassifier ( ) #NEWLINE#
{ i : words . count ( i ) for i in words } #NEWLINE#
{ 'S4' : [ ] , 'S5' : [ { 'pct' : 1.0 , 'match' : 'S2' } ] } #NEWLINE#
df [ 'foo' ] #NEWLINE#
app . run ( ) #NEWLINE#
gtk . main_quit ( ) #NEWLINE#
self . assertEqual ( self . __class__ . foo , 'bar' ) #NEWLINE#
self . assertEqual ( self . __class__ . foo , 'can' ) #NEWLINE#
root . wm_attributes ( '-transparentcolor' , 'white' ) #NEWLINE#
self . finish ( ) #NEWLINE#
zipfile . writestr ( zipinfo , data ) #NEWLINE#
widgets = { field : forms . RadioSelect ( ) for field in [ 'field_one' , 'field_two' ] } #NEWLINE#
main ( ) #NEWLINE#
{ { mydocimage . property . date_added } } #NEWLINE#
plt . plot ( x2 , my_curve2 ) #NEWLINE#
my_function ( * a ) #NEWLINE#
foo . bar ( ) #NEWLINE#
a ( ) #NEWLINE#
list3 . append ( list1 [ index ] + list2 [ index ] ) #NEWLINE#
fields = [ ( 'name' , 'John#SPACE#Smith' ) , ( 'telephone' , '555-1234' ) ] #NEWLINE#
return all ( x > y for x , y in zip ( L , L [ 1 : ] ) ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
percentages . append ( temp ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
textnumbers = [ r . find ( 'field/value/text' ) . text for r in results ] #NEWLINE#
l . append ( i ) #NEWLINE#
self . mainframe . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
pd . DatetimeIndex ( df [ 0 ] ) . to_period ( 'M' ) #NEWLINE#
QtGui . QDialog . __init__ ( self ) #NEWLINE#
np . savetxt ( 'foo.csv' , arrayDense , fmt = '%5.4g' , delimiter = ',' ) #NEWLINE#
difflib . get_close_matches ( 'Hello' , words ) #NEWLINE#
z . write ( 'file2.ext' ) #NEWLINE#
z . write ( 'file3.ext' ) #NEWLINE#
opener . open ( 'http://www.example.com/' ) #NEWLINE#
[ 1 , 1 , 2 , 3 , 3 , 4 , 4 , 4 ] #NEWLINE#
urls . append ( i . split ( '"' ) [ 3 ] ) #NEWLINE#
fig . subplots_adjust ( wspace = 0 ) #NEWLINE#
self . label . setText ( 'Button#SPACE#Clicked!' ) #NEWLINE#
print ( 'You#SPACE#tried#SPACE#accessing#SPACE#index#SPACE#%d' % ( i + 1 ) ) #NEWLINE#
self . socket . bind ( ( server_ip , server_port ) ) #NEWLINE#
fun ( 1 , 2 , 3 ) #NEWLINE#
self . common1 ( ) #NEWLINE#
group_address = models . GenericIPAddressField ( protocol = 'IPv4' ) #NEWLINE#
print ( 'spam' , self . name ) #NEWLINE#
results [ i ] . append ( benchmark ( i ) ) #NEWLINE#
print ( iss + '\t=>#SPACE#' + '%04.03e' % isf + '#SPACE#(' + str ( isf ) + ')' + '#SPACE#->#SPACE#' + isf2s ) #NEWLINE#
G . add_edge ( 'a' , 'b' ) #NEWLINE#
Column ( 'race' , Enum ( 'asian' , 'mideastern' , 'black' , 'nativeamerican' , #NEWLINE# 'indian' , 'pacific' , 'hispanic' , 'white' , 'other' ) ) #NEWLINE#
start . add_argument ( '-s' , '--start' , action = StartAction , nargs = 0 ) #NEWLINE#
h . append ( { k : d . get ( k ) for k in get_keys } ) #NEWLINE#
sorter [ np . searchsorted ( b , a , sorter = sorter ) ] #NEWLINE#
grid_1 . AddMany ( wx . StaticText ( self . panel , label = str ( i ) ) for i in range ( 24 ) ) #NEWLINE#
print ( 'not#SPACE#find#SPACE#the#SPACE#book!' ) #NEWLINE#
print ( matcher . match ( '100{"1":2,#SPACE#"3":4}312' ) . group ( 1 ) ) #NEWLINE#
fig . savefig ( 'foo.png' , dpi = fig . dpi ) #NEWLINE#
l , c , v = np . loadtxt ( 'test.txt' , skiprows = 1 ) . T #NEWLINE#
self . ax . set_xlabel ( 'Date' ) #NEWLINE#
21 , 'Mandela' , 'Obama' #NEWLINE#
x [ row_idx . reshape ( - 1 , 1 ) , col_idx ] #NEWLINE#
tokens = cskv . parseString ( 'a,b,c,d,e' ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
list ( [ t for t in map ( map_to_obj , v_list ) if t is not None ] ) #NEWLINE#
f ( Foo ( 1 ) ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
d = json . loads ( j ) #NEWLINE# print ( d [ 'glossary' ] [ 'title' ] ) #NEWLINE#
"""Calculates#SPACE#the#SPACE#Levenshtein#SPACE#distance#SPACE#between#SPACE#a#SPACE#and#SPACE#b.""" #NEWLINE#
creatures = defaultdict ( lambda : defaultdict ( lambda : defaultdict ( int ) ) ) #NEWLINE#
print ( next ( zip ( * s ) ) ) #NEWLINE#
print ( row . column_name ) #NEWLINE#
l . append ( [ x , y ] ) #NEWLINE#
print ( '\x07' ) #NEWLINE#
ax2 . plot ( ax . get_xticks ( ) , DF [ 'C' , 'D' ] , marker = 'o' ) #NEWLINE#
return 'HypotheticalBranch(%d,%d,%d)' % ( self . r , self . p , self . c ) #NEWLINE#
"""#SPACE#""" . join ( iterable ) #NEWLINE#
a = A ( ) #NEWLINE#
df . loc [ all_days ] #NEWLINE#
dates . sort ( ) #NEWLINE#
'{%s:%s}' % ( 'hello' , 'bonjour' ) #NEWLINE#
self . filelist . append ( zinfo ) #NEWLINE#
fp . write ( '[%s]\n' % DEFAULTSECT ) #NEWLINE#
print ( soup . find ( 'text' ) . string ) #NEWLINE#
aa = np . array ( [ calc_a_i ( rr , i ) for i in range ( n ) ] ) * GM #NEWLINE#
cur . executemany ( 'INSERT#SPACE#INTO#SPACE#t#SPACE#(col1,#SPACE#col2)#SPACE#VALUES#SPACE#(?,#SPACE#?);' , to_db ) #NEWLINE#
test_df . loc [ group . index , 'return_amount' ] = 0 #NEWLINE#
np . equal ( a , tgt ) . all ( 1 ) . any ( ) #NEWLINE#
length = sum ( 1 for x in clusterList ) #NEWLINE#
{ ( 1 ) : [ 'first' ] , ( 2 ) : [ 'second' , 'fourth' ] , ( 3 ) : [ 'third' ] } #NEWLINE#
ax . set_xticklabels ( df . columns , rotation = 90 , size = 15 ) #NEWLINE#
d = tf . constant ( [ [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] ] ) #NEWLINE#
df . iloc [ df . index . get_loc ( '2015-04-25' ) + 1 ] #NEWLINE#
return 'hello' #NEWLINE#
self . rect . set_width ( self . x1 - self . x0 ) #NEWLINE#
self . root . bind ( '<Return>' , self . parse ) #NEWLINE#
aList . sort ( key = myKeyFunc ) #NEWLINE#
lines = [ line for line in infile ] [ : N ] #NEWLINE#
bananaxxxxxxxxxgestrawberryxxxxxxxar #NEWLINE#
hostname = urlparse . urlparse ( 'http://www.techcrunch.com/' ) . hostname #NEWLINE#
df . hist ( layout = ( 1 , 2 ) ) #NEWLINE#
print ( 'The#SPACE#Number#SPACE#was' , number ) #NEWLINE#
df = pd . concat ( [ df . ix [ : , : 5 ] , x ] , axis = 1 ) #NEWLINE#
print ( 'usage:#SPACE#%s#SPACE#start|stop|restart' % sys . argv [ 0 ] ) #NEWLINE#
[ ( 'vr1' , '32' , '1' ) ] #NEWLINE#
rconsole . spawn_server ( ) #NEWLINE#
raise RuntimeError ( 'Using#SPACE#this#SPACE#on#SPACE#non-sysfs#SPACE#files#SPACE#is#SPACE#dangerous!' ) #NEWLINE#
pycurl_connect . setopt ( pycurl . URL , your_url ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
return [ i for i in s . split ( delimiter ) if i != '' ] [ 0 ] #NEWLINE#
item . setCheckState ( QtCore . Qt . Unchecked ) #NEWLINE#
sys . stdout = open ( 'output.out' , 'w' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
df . to_html ( classes = 'my_class"#SPACE#id#SPACE#=#SPACE#"my_id' ) #NEWLINE#
eval ( input ( 'Press#SPACE#<Enter>#SPACE#for#SPACE#more' ) ) #NEWLINE#
print ( df . loc [ : , ( mask ) ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
scored . sort ( ) #NEWLINE#
d = dict ( urlparse . parse_qsl ( qs ) ) #NEWLINE#
print ( word ) #NEWLINE#
gtk . main ( ) #NEWLINE#
y [ 1 : - 1 , 1 : - 1 ] *= x [ 2 : , 1 : - 1 ] #NEWLINE#
phases = np . tile ( phases , ( 1 , 3 ) ) #NEWLINE#
sorted ( set ( chain . from_iterable ( iter ( content . values ( ) ) ) ) ) #NEWLINE#
__str__ = lambda self : str ( self . _name ) #NEWLINE#
x = np . array ( [ [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , [ [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ] ) #NEWLINE#
return super ( SlicableDict , self ) . __getitem__ ( key ) #NEWLINE#
s = ax . scatter ( X , Y , c = C ) #NEWLINE#
self . button . clicked . connect ( self . createTab ) #NEWLINE#
testData [ 'value' ] [ 0 ] in testData [ 'value' ] #NEWLINE#
process . wait ( ) #NEWLINE#
print ( ( k , v ) ) #NEWLINE#
[ { 'event' : 'c' , '_id' : ObjectId ( '4d5b...0002' ) , 'uid' : 2 , 'time' : 2 } ] #NEWLINE#
return render_template ( 'routes/index.html' ) #NEWLINE#
print ( "'%s'#SPACE#matches#SPACE#'%s'#SPACE#with#SPACE#sub#SPACE#group#SPACE#'%s'" % ( reg , s , m . group ( 0 ) ) ) #NEWLINE#
np . where ( x < 0 , - x / x . min ( axis = 0 ) , x / x . max ( axis = 0 ) ) #NEWLINE#
people . groupby ( lambda x : GroupColFunc ( people , x , 'a' ) ) . sum ( ) #NEWLINE#
v1 , v2 , v3 , v4 = [ ( x if x > 0 else 0 ) for x in ( A , B , C , D ) ] #NEWLINE#
win32api . mouse_event ( win32con . MOUSEEVENTF_LEFTDOWN , x , y , 0 , 0 ) #NEWLINE#
win32api . mouse_event ( win32con . MOUSEEVENTF_LEFTUP , x , y , 0 , 0 ) #NEWLINE#
[ '1' , '2' ] #NEWLINE#
container . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
return tuple ( [ x for sublist in base_lists for x in sublist ] ) #NEWLINE#
print ( widget . GetName ( ) ) #NEWLINE#
print ( 'Class:#SPACE#{}Subject:#SPACE#{}Term:#SPACE#{}Grade:#SPACE#{}' . format ( * tup ) ) #NEWLINE#
template = env . get_template ( 'test.html' ) #NEWLINE#
lines = open ( filename ) . read ( ) . splitlines ( ) #NEWLINE#
A = matrix ( [ [ 1 , 2 , 3 ] , [ 11 , 12 , 13 ] , [ 21 , 22 , 23 ] ] ) #NEWLINE#
self . cobj . some_var = var #NEWLINE#
label . pack ( ) #NEWLINE#
print ( '%.5f' % n ) #NEWLINE#
[ [ 'aaa' ] , [ 'ffff' ] , [ 'eeee' ] , [ 'rrr' ] ] #NEWLINE#
sum ( range ( a [ 0 ] , a [ - 1 ] + 1 ) ) - sum ( a ) #NEWLINE#
b = [ ord ( x ) for x in s ] #NEWLINE#
driver = webdriver . Chrome ( ) #NEWLINE#
[ group for group in groups if a . isdisjoint ( group ) ] #NEWLINE#
print ( json . dumps ( [ 1 , a , b ] ) ) #NEWLINE#
a = csc_matrix ( [ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 10 , 11 ] , [ 0 , 0 , 0 , 99 ] ] ) #NEWLINE#
t = tuple ( s ) #NEWLINE#
os . system ( cmd ) #NEWLINE#
self . wfile . write ( '<sample>Some#SPACE#XML</sample>' ) #NEWLINE#
return 'FixedOffset(%d)' % ( self . utcoffset ( ) . total_seconds ( ) / 60 ) #NEWLINE#
text = 'â\x99\xa0' #NEWLINE# print ( text . encode ( 'utf-8' ) ) #NEWLINE#
numpy . linalg . norm ( a - b , ord = 1 ) #NEWLINE#
process . kill ( ) #NEWLINE#
logging . debug ( 'Non-empty#SPACE#FILTER_LIST,#SPACE#but#SPACE#no#SPACE#filter#SPACE#matches' ) #NEWLINE#
super ( FooSpider , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
most_common , num_most_common = Counter ( L ) . most_common ( 1 ) [ 0 ] #NEWLINE#
os . makedirs ( directory_name ) #NEWLINE#
[ idx for idx , el in enumerate ( foo ) if np . array_equal ( el , arr ) ] #NEWLINE#
print ( ( 'Your#SPACE#amount#SPACE#of#SPACE#British#SPACE#pounds#SPACE#in#SPACE#US#SPACE#dollars#SPACE#is:#SPACE#$' , convert ) ) #NEWLINE#
df_concat . sort_values ( 'value' ) . reset_index ( drop = True ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
dict ( c ) #NEWLINE#
p . <VAR0> . flush ( ) #NEWLINE#
tldextract . extract ( 'http://forums.news.cnn.com/' ) #NEWLINE#
parser . add_argument ( '--append-action' , action = 'append' ) #NEWLINE#
print ( row [ 'Id' ] , row [ 'Name' ] ) #NEWLINE#
[ ( 12 , 'b' ) , ( 4 , 'a' ) , ( 3 , 'c' ) ] #NEWLINE#
main ( ) #NEWLINE#
[ False ] * 20 #NEWLINE#
driver . find_elements_by_tag_name ( 'a' ) [ 1 ] . click ( ) #NEWLINE#
print ( len ( re . match ( '\\s*' , test , re . UNICODE ) . group ( 0 ) ) ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
subprocess . Popen ( my_command , env = my_env ) #NEWLINE#
plot ( list ( range ( 10 ) ) , [ ( 5 ) for x in range ( 10 ) ] , label = 'another#SPACE#test' ) #NEWLINE#
return HttpResponse ( 'Your#SPACE#response' ) #NEWLINE#
time . gmtime ( 0 ) #NEWLINE#
return render ( request , 'user/login.html' , { 'form' : login_form } ) #NEWLINE#
keys = [ 'num' , 'char' ] #NEWLINE#
data . columns . get_level_values ( 'observer' ) . isin ( [ 'John' , 'Ralph' ] ) #NEWLINE#
self . Bind ( wx . EVT_PAINT , self . on_paint ) #NEWLINE#
"""Override#SPACE#join_path()#SPACE#to#SPACE#enable#SPACE#relative#SPACE#template#SPACE#paths.""" #NEWLINE#
HttpResponse ( 'Got#SPACE#json#SPACE#data' ) #NEWLINE#
thread . start ( ) #NEWLINE#
my_app ( ) #NEWLINE#
data = pd . read_csv ( 'output_list.txt' , sep = '#SPACE#' , header = None ) #NEWLINE# data . columns = [ 'a' , 'b' , 'c' , 'etc.' ] #NEWLINE#
Popen ( [ 'sleep' , '100' ] ) #NEWLINE#
writer = csv . writer ( f , quoting = csv . QUOTE_NONE , delimiter = '|' , quotechar = '' , #NEWLINE# escapechar = '\\' ) #NEWLINE#
arr = np . array ( [ [ 1 , 2 , 3 ] ] ) #NEWLINE#
df . withColumn ( 'some_array' , array ( lit ( 1 ) , lit ( 2 ) , lit ( 3 ) ) ) #NEWLINE#
x . g ( 2 ) #NEWLINE#
wx . Frame . __init__ ( self , parent , title = title , size = ( 200 , 100 ) ) #NEWLINE#
m . drawcoastlines ( ) #NEWLINE#
cv2 . namedWindow ( 'kalman' ) #NEWLINE#
i += 1 #NEWLINE#
print ( objectify . dump ( root ) ) #NEWLINE#
pylab . rcParams [ 'xtick.major.pad' ] = '???' #NEWLINE#
browser . back ( ) #NEWLINE#
exec ( "print('hello')" ) #NEWLINE#
MEDIA_URL = '/media/' #NEWLINE#
p . stdin . write ( '{}\n' . format ( n ) ) #NEWLINE#
client = boto3 . client ( 's3' ) #NEWLINE#
points = [ ( i // sy , i % sy ) for i in random . sample ( range ( sx * sy ) , n ) ] #NEWLINE#
print ( 'Read:#SPACE#({})#SPACE#{!r}' . format ( time . time ( ) , row ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
map ( lambda x : 0.4 if 7 <= x <= 22 else 0.2 , hourOfDay ) #NEWLINE#
items [ index ] = None #NEWLINE#
json . dumps ( object ( ) ) #NEWLINE#
zip ( A , B + B ) #NEWLINE#
print ( f . read ( 100 ) . decode ( 'utf-8' ) ) #NEWLINE#
LoT [ 2 ] [ 3 ] #NEWLINE#
ax . set_xticks ( np . arange ( 25 ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
scene = QtGui . QGraphicsScene ( ) #NEWLINE#
max_key = env . stat ( ) [ 'entries' ] #NEWLINE#
sock . setsockopt ( socket . IPPROTO_TCP , socket . TCP_KEEPCNT , max_fails ) #NEWLINE#
[ id ( x ) for x in list ( dic . values ( ) ) ] #NEWLINE#
w . readline ( ) #NEWLINE#
grouped = RPT_tmp . <STR0> ( [ 'STK_ID' , 'year' ] ) #NEWLINE#
map ( '-' . join , zip_longest ( i , i , fillvalue = '' ) ) #NEWLINE#
str2_list . sort ( ) #NEWLINE#
cv2 . imshow ( 'video' , frame ) #NEWLINE#
n += 1 #NEWLINE#
ax . set_ylim3d ( 0 , 1 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
print ( 'call_later#SPACE#cancel.' ) #NEWLINE#
def slicedict ( d , s ) : #NEWLINE# #INDENT# return { k : v for k , v in list ( d . items ( ) ) if k . startswith ( s ) } #NEWLINE#
print ( 'cancel' ) #NEWLINE#
lst = [ 1 , 1 , 1 , 1 , 2 , 3 , 4 , 4 , 4 , 4 , 4 ] #NEWLINE#
print ( a . get ( ) ) #NEWLINE#
{ 'a' : 3 , 'b' : 4 } #NEWLINE#
print ( np . percentile ( map ( int , i ) , 95 ) ) #NEWLINE#
return foo ( a , b ) #NEWLINE#
return ( ( i , o ) for i in l ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 , 10 ] #NEWLINE#
p . plot ( ) #NEWLINE#
result . append ( item ) #NEWLINE#
np . array ( a ) #NEWLINE# np . fromiter ( a , dtype = np . float ) #NEWLINE#
slug = models . SlugField ( prepopulate_from = ( 'title' , ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
f ( 2 ) #NEWLINE#
use_library ( 'django' , '1.2' ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
print ( bool ( mydict . get ( 'key' ) ) ) #NEWLINE#
lists . append ( pickle . load ( infile ) ) #NEWLINE#
return a * b #NEWLINE#
plt . show ( ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
'foo#SPACE#b#SPACE#ar' , 'foo#SPACE#b#SPACE#a#SPACE#r' , 'fo#SPACE#obar' , 'fo#SPACE#oba#SPACE#r' , 'fo#SPACE#ob#SPACE#ar' , 'fo#SPACE#ob#SPACE#a#SPACE#r' #NEWLINE#
dict_values ( [ Fraction ( 1 , 3 ) , Fraction ( 1 , 3 ) ] ) #NEWLINE#
print ( "Values#SPACE#haven't#SPACE#changed!" ) #NEWLINE#
etree . LXML_VERSION #NEWLINE#
quux = a [ 0 ] #NEWLINE#
item . lower ( ) #NEWLINE#
[ 0.32564058749026437 , 0.3303359144351621 , 0.31772896318809885 ] #NEWLINE#
mandel_x = mandel_start_x + screen_x / screen_width * mandel_width #NEWLINE#
stringvar . append ( tuplevar [ 0 ] ) #NEWLINE#
print ( doc . text_content ( ) ) #NEWLINE#
print ( '\n' . join ( s ) ) #NEWLINE#
df1 [ ~ df1 . Y . isin ( df2 . Y ) ] #NEWLINE#
return pd . concat ( dfs , ignore_index = True ) #NEWLINE#
print ( 'nothing#SPACE#available!' ) #NEWLINE#
[ 'e#SPACE#x#SPACE#a#SPACE#m#SPACE#p#SPACE#l#SPACE#e#SPACE#' , 'T#SPACE#H#SPACE#I#SPACE#S#SPACE#' ] #NEWLINE#
json . loads ( s ) [ '2' ] #NEWLINE#
print ( msg . as_string ( ) . encode ( 'ascii' ) ) #NEWLINE#
p . save ( ) #NEWLINE#
proc . terminate ( ) #NEWLINE#
exec ( compile ( open ( filename , 'rb' ) . read ( ) , filename , 'exec' ) , globals , locals ) #NEWLINE#
self . wfile . write ( cv2 . imencode ( 'png' , img ) ) #NEWLINE#
fig . savefig ( 'fig1.png' , dpi = 300 ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( lambda x , y : GCD ( [ x , y ] ) , numbers ) #NEWLINE#
b [ static_indices [ 0 ] , static_indices [ 1 ] , static_indices [ 2 ] ] #NEWLINE#
codeErr . close ( ) #NEWLINE#
r = sum ( compress ( list_2 , list_1 ) ) #NEWLINE#
im . thumbnail ( ( 100 , 100 ) ) #NEWLINE#
y [ 1 : - 1 , 1 : - 1 ] *= x [ : - 2 , 1 : - 1 ] #NEWLINE#
print ( ( 'i#SPACE#=#SPACE#' , i ) ) #NEWLINE#
self [ key ] . add ( value ) #NEWLINE#
np . allclose ( [ np . nan ] , [ np . nan ] ) #NEWLINE#
print ( 'result#SPACE#fail' ) #NEWLINE#
hello_world = 'hello#SPACE#world!' #NEWLINE#
yy = np . concatenate ( ( y , [ 0 ] * 10 * len ( y ) ) ) #NEWLINE#
arr [ : , ( col ) ] /= abs ( arr [ : , ( col ) ] ) . max ( ) #NEWLINE#
val = next ( [ x for x in list if x [ 'id' ] == 20 ] ) #NEWLINE#
utf8str = s . encode ( 'utf-8' ) #NEWLINE#
lines . append ( line ) #NEWLINE#
g . set_axis_labels ( 'total#SPACE#bill' , 'tip' , fontsize = 16 ) #NEWLINE#
writer . writeheader ( ) #NEWLINE#
positionsList . sort ( key = lambda p : howCentric ( p , boardLength ) ) #NEWLINE#

r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
p . terminate ( ) #NEWLINE#
urlpatterns = patterns ( '' , ( '^myadmin/' , include ( admin_site . urls ) ) ) #NEWLINE#
main ( ) #NEWLINE#
return sorted ( zip ( unique_rows , counts ) , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
fixed . write ( line ) #NEWLINE#
start_response ( '200#SPACE#OK' , [ ( 'Content-Type' , 'text/html;#SPACE#charset=utf-8' ) ] ) #NEWLINE#
pre_allocated_list = [ None ] * size #NEWLINE#
log . setLevel ( logging . INFO ) #NEWLINE#
cv . SetCaptureProperty ( video2 , cv . CV_CAP_PROP_FRAME_HEIGHT , 600 ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
sys . stdout . buffer . write ( TestText2 ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
re . match ( '^(?=b*(?:ab*ab*)*ab*$)(?=a*(?:ba*ba*)*ba*$)' , 'aab' ) #NEWLINE#
fig . canvas . mpl_connect ( 'draw_event' , on_draw ) #NEWLINE#
df1 . drop_duplicates ( cols = [ 3 ] , inplace = True ) #NEWLINE#
sample_df . apply ( np . log ) . diff ( ) #NEWLINE#
print ( f ( ) ) #NEWLINE#
[ a , b , c , d ] #NEWLINE#
xx , yy , zz = np . mgrid [ : 5 , : 5 , : 5 ] #NEWLINE#
print ( re . findall ( pattern , string ) ) #NEWLINE#
my_method ( ) #NEWLINE#
print ( browser . title ) #NEWLINE#
img = cv2 . imread ( sys . argv [ 1 ] ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
pat = re . compile ( '[A-Z][a-z]*' ) #NEWLINE#
r . reset_index ( ) #NEWLINE#
plt . clf ( ) #NEWLINE#
proc . start ( ) #NEWLINE#
logger . debug ( 'The#SPACE#Great#SPACE#Ragu#SPACE#has#SPACE#taken#SPACE#ill!' ) #NEWLINE#
br . set_handle_equiv ( False ) #NEWLINE#
a . foo = new_foo . __get__ ( a , type ( a ) ) #NEWLINE#
test_file . close ( ) #NEWLINE#
add_column ( engine , table_name , column ) #NEWLINE#
return False #NEWLINE#
d2 = [ k for k , v in sorted ( d . items ( ) ) for _ in range ( v ) ] #NEWLINE#
foo ( ) #NEWLINE#
f = open ( image_name , 'rb' ) #NEWLINE#
nums = map ( lambda x : x * 2 , nums ) #NEWLINE#
re . split ( '(watch/\\d+/)' , #NEWLINE# 'http://www.hulu.jp/watch/589851/supernatural-dub-hollywood-babylon/en' ) #NEWLINE#
divtd ( datetime . timedelta ( hours = 12 ) , 2 ) #NEWLINE#
element . click ( ) #NEWLINE#
idx . append ( df [ df [ 'fruitname' ] == fruit ] . iloc [ - 1 ] . name ) #NEWLINE#
os . system ( 'mpg123#SPACE#-w#SPACE#audio.wav#SPACE#audio.mp3' ) #NEWLINE#
my_str = '1,255,000' #NEWLINE# my_num = int ( my_str . replace ( ',' , '' ) ) #NEWLINE#
words = [ line . strip ( ) for line in open ( '/etc/dictionaries-common/words' ) ] #NEWLINE# print ( random . choice ( words ) ) #NEWLINE#
order1 , order2 = Order . objects . all ( ) . select_related ( 'customer' ) #NEWLINE#
root . withdraw ( ) #NEWLINE#
return from_date . replace ( month = 3 , day = 1 , year = from_date . year - years ) #NEWLINE#
print ( sorted_word_dict [ : : - 1 ] [ : 20 ] ) #NEWLINE#
d [ row [ 0 ] ] . append ( row [ 1 : ] ) #NEWLINE#
email = models . EmailField ( max_length = 255 ) #NEWLINE#
print ( sorted ( list ( mydict . items ( ) ) , key = lambda k_v : ordering [ k_v [ 0 ] ] ) ) #NEWLINE#
settings . name #NEWLINE#
d . pop ( k , None ) #NEWLINE#
return sum ( x [ 1 ] for x in divs ) #NEWLINE#
np . dot ( X , A ) + np . dot ( W , B ) [ : , ( None ) ] #NEWLINE#
csv2 . close ( ) #NEWLINE#
print ( res [ 1 ] ) #NEWLINE#
print_arg ( ** { 'key' : 2 , 'foo' : 3 , 'bar' : 4 } ) #NEWLINE#
my_foo . echo_bar ( ) #NEWLINE#
f . seek ( 0 , 2 ) #NEWLINE#
input = list ( input ) #NEWLINE#
wx . ListCtrl . __init__ ( self , * args , ** kwargs ) #NEWLINE#
Publication . objects . create ( title = 'title{0}' . format ( i ) ) #NEWLINE#
QWidget ( ) . setLayout ( self . layout ( ) ) #NEWLINE#
[ ( S + str ( i ) ) for i in range ( 1 , 11 ) for S in 'ABCD' ] #NEWLINE#
imobj . set_data ( np . zeros ( ( 100 , 100 ) ) ) #NEWLINE#
res = re . findall ( '\\w+' , '#SPACE#' . join ( l ) ) #NEWLINE#
return '{:A>4}' . format ( s [ - 4 : ] ) #NEWLINE#
np . piecewise ( a , [ a > 80 , ( 40 < a ) & ( a <= 80 ) , a <= 40 ] , [ funcA , funcB , funcC ] ) #NEWLINE#
time . localtime ( ) #NEWLINE#
return Funny . dynprop #NEWLINE#
self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
fig . savefig ( 'your_file.png' ) #NEWLINE#
print ( config . items ( 'some_section' ) ) #NEWLINE#
yaml . dump ( data , ff , allow_unicode = True ) #NEWLINE#
sel . click ( "//*[contains(@id,'linkout')]" ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
X , Y = np . meshgrid ( np . linspace ( xmin , xmax , 100 ) , np . linspace ( ymin , ymax , 200 ) ) #NEWLINE#
{ e : str1 . count ( e ) for e in set ( str1 ) } #NEWLINE#
[ ( 1 , 4 ) , ( 3 , 2 ) ] #NEWLINE#
time . mktime ( ts ) #NEWLINE#
ax . plot ( [ 0 , 1 , 2 ] , [ 10 , 10 , 100 ] , marker = 'o' , linestyle = '-' ) #NEWLINE#
clips . Run ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( dom . toprettyxml ( ) ) #NEWLINE#
naive_local_dt = aware_dt . astimezone ( local_timezone ) . replace ( tzinfo = None ) #NEWLINE#
m = m . multiply ( m >= 10 ) #NEWLINE#
self . geometry ( '300x100' ) #NEWLINE#
[ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] , #NEWLINE#
self . assertTrue ( r . zrangebyscore ( name , 2 , 3 ) == [ 'two' , 'three' ] ) #NEWLINE#
w . show ( ) #NEWLINE#
data = open ( 'x' ) . read ( ) #NEWLINE#
str_list = [ 'a' , 'b' , 'c' ] #NEWLINE# """""" . join ( str_list ) #NEWLINE#
ax . plot_wireframe ( xs , ys , zs , color = 'r' ) #NEWLINE#
for filename in glob . glob ( os . path . join ( source_dir , '*.*' ) ) : #NEWLINE# #INDENT# shutil . copy ( filename , dest_dir ) #NEWLINE#
ax . quiver ( X , Y , U , V , angles = 'xy' , scale_units = 'xy' , scale = 1 ) #NEWLINE#
return pd . DataFrame . from_records ( records_from_json ( fh ) ) #NEWLINE#
y = np . hsplit ( x , [ ( ( i + 1 ) * 10 ) for i in range ( ( 129 - 1 ) // 10 ) ] ) #NEWLINE#
mydict = dict ( ( k , v ) for k , v in mydict . items ( ) if k != val ) #NEWLINE#
print ( '\n' ) #NEWLINE#
sys . getsizeof ( sys . getsizeof ) #NEWLINE#
temp = temp . reshape ( - 1 , 1 ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
user . set_password ( 'asdfqwer' ) #NEWLINE#
np . array ( [ 3 ] ) . __radd__ ( [ 1 , 2 , 3 ] ) #NEWLINE#
s = requests . Session ( ) #NEWLINE# r = s . post ( url , data = data ) #NEWLINE# r . raise_for_status ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
"""\\w+,#SPACE#\\w+,#SPACE#\\w+""" #NEWLINE#
ax . set_ylabel ( 'y-points' ) #NEWLINE#
url ( '^api/bloops/$' , 'myapp.views.bloop_list' , name = 'bloop-list' ) , #NEWLINE#
ax . xaxis . set_label_position ( direction ) #NEWLINE#
main ( ) #NEWLINE#
tuple ( zip ( * ii ) ) #NEWLINE#
df = pd . DataFrame ( data = data , columns = [ 'col' ] ) #NEWLINE#
ptdiff = lambda p1_p2 : ( p1_p2 [ 0 ] [ 0 ] - p1_p2 [ 1 ] [ 0 ] , p1_p2 [ 0 ] [ 1 ] - p1_p2 [ 1 ] [ 1 ] ) #NEWLINE#
unittest . main ( ) #NEWLINE#
print ( regex . group ( 1 ) ) #NEWLINE#
sounds . append ( pygame . mixer . Sound ( 'D:/Users/John/Music/Music/Still#SPACE#Alive.OGG' ) ) #NEWLINE#
sounds . append ( pygame . mixer . Sound ( 'D:/Users/John/Music/Music/turret.OGG' ) ) #NEWLINE#
sounds . append ( pygame . mixer . Sound ( 'D:/Users/John/Music/Music/portalend.OGG' ) ) #NEWLINE#
self . setWindowTitle ( 'Simple#SPACE#Calculator' ) #NEWLINE#
ax2 . yaxis . set_major_locator ( mtick . LinearLocator ( 5 ) ) #NEWLINE#
prettyp ( [ 1 ] * 100 ) #NEWLINE#
print ( ( x . eval ( ) , y . eval ( ) , tf . gradients ( y , [ x ] ) [ 0 ] . eval ( ) ) ) #NEWLINE#
[ ( 'AAPL' , 0 ) , ( 'RY' , 57 ) ] #NEWLINE#
new_dict = nested_dict ( 2 , float ) #NEWLINE#
br . open ( 'http://www.google.com/' ) #NEWLINE#
new_dict [ datetime . strptime ( k , '%Y-%m-%d#SPACE#%H:%M:%S' ) ] = '' #NEWLINE#
print ( 'marked#SPACE#nodes:#SPACE#' + '#SPACE#' . join ( str ( x ) for x , y in list ( d . items ( ) ) if y ) ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
l = [ ( x * ( 2 if i % 2 == 1 else 1 ) ) for i , x in enumerate ( l ) ] #NEWLINE#
netifaces . ifaddresses ( 'eth0' ) [ netifaces . AF_INET ] [ 0 ] [ 'addr' ] #NEWLINE#
plt . xlim ( xmin , xmax ) #NEWLINE#
temp_list . append ( 'two' ) #NEWLINE#
temp_list . append ( 'three' ) #NEWLINE#
fruits . sort ( key = lambda x : x . color ) #NEWLINE#
any ( v > 3000 for v in pairs . values ( ) ) #NEWLINE#
print ( key , ':' , counts [ key ] ) #NEWLINE#
QWebView . __init__ ( self ) #NEWLINE#
frame . Show ( True ) #NEWLINE#
button . grid ( row = i , column = j , sticky = 'news' ) #NEWLINE#
df . shape #NEWLINE#
new_points = [ do_something_with ( x , y , z ) for x , y , z in surface . points ] #NEWLINE#
len ( hashlib . md5 ( 'thecakeisalie' ) . hexdigest ( ) ) #NEWLINE#
legend . draggable ( state = True ) #NEWLINE#
urllib . request . Request . __init__ ( self , * args , ** kwargs ) #NEWLINE#
burger . save ( ) #NEWLINE#
wilma . save ( ) #NEWLINE#
myList [ : ] = [ ( a , b ) for a , b in myList if myDict . get ( a , sentinel ) != b ] #NEWLINE#
response = HttpResponse ( mimetype = 'text/plain' ) #NEWLINE#
regex . findall ( string ) #NEWLINE#
return content [ : length ] . rsplit ( '#SPACE#' , 1 ) [ 0 ] + suffix #NEWLINE#
return flask . Response ( event_stream ( ) , mimetype = 'text/event-stream' ) #NEWLINE#
df = pd . read_sql_query ( query . statement , engine ) #NEWLINE#
random . shuffle ( tmp ) #NEWLINE#
f = interpolate . UnivariateSpline ( x , y ) #NEWLINE#
now = timezone . now ( ) #NEWLINE#
A [ : , ( [ 0 ] + list ( range ( 3 , 10 ) ) ) ] #NEWLINE#
app . run ( ) #NEWLINE#
text = tk . Text ( ) #NEWLINE#
print ( my_list_of_objs ) #NEWLINE#
ax . plot_wireframe ( xp , yp , zp ) #NEWLINE#
l2 = [ { 'a' : 5 , 'b' : 6 , 'e' : 100 } , { 'a' : 1 , 'b' : 2 , 'e' : 101 } ] #NEWLINE#
return map ( sum , a ) #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
image = misc . imread ( os . path . join ( path , 'image.bmp' ) , flatten = 0 ) #NEWLINE#
json . dumps ( data ) #NEWLINE#
df2 . fillna ( 0 , inplace = True ) #NEWLINE#
help ( func ) #NEWLINE#
clamp = lambda n , minn , maxn : max ( min ( maxn , n ) , minn ) #NEWLINE#
t . start ( ) #NEWLINE#
groups = [ self . getGroup ( i , header + i ) for i in range ( 3 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( CreateTable ( Model . __table__ ) . compile ( engine ) ) #NEWLINE#
graph . add_node ( pydot . Node ( 'literal_0_1' , label = '0' ) ) #NEWLINE#
graph . add_node ( pydot . Node ( 'literal_1_0' , label = '1' ) ) #NEWLINE#
[ x for x in names if re . search ( 'aet' , x ) ] #NEWLINE#
queue = Queue ( ) #NEWLINE#
sys . getsizeof ( bitArray . tobytes ( ) ) / float ( len ( sequence ) ) #NEWLINE#
print ( [ m . start ( ) for m in re . finditer ( '\\btest\\b' , a ) ] ) #NEWLINE#
eigvals , eigvecs = np . linalg . eigh ( cov ) #NEWLINE#
return Af . reshape ( A . shape ) #NEWLINE#
print ( 'words[{}]#SPACE#=#SPACE#' . format ( i ) , words [ i ] ) #NEWLINE#
a = np . array ( [ 1 , 3 , 5 , 7 , 2 , 4 , 6 , 8 ] ) #NEWLINE#
file_handler . setLevel ( logging . INFO ) #NEWLINE#
self . setLevel ( logging . INFO ) #NEWLINE#
sys . __stdout__ . write ( s ) #NEWLINE#
split_curve ( np . array ( [ 0 , 1 ] ) , np . array ( [ 0 , 1 ] ) , 2 ) #NEWLINE# split_curve ( np . array ( [ 0 , 1 ] ) , np . array ( [ 0 , 1 ] ) , 3 ) #NEWLINE#
df . iloc [ : , ( np . lexsort ( v . T [ : : - 1 ] ) ) ] #NEWLINE#
[ a for v , a in sorted ( ( x [ a ] , a ) for a in y ) ] #NEWLINE#
df1 . reindex ( index ) #NEWLINE#
return [ m . group ( 1 ) for m in matches if m ] #NEWLINE#
SESSION_ATTRIBUTES = [ 'user_id' , 'remember' , 'token' , 'token_ts' , 'cache_ts' ] #NEWLINE#
self . my_list . extend ( repeat ( 0 , 4 - len ( self . my_list ) ) ) #NEWLINE#
matplotlib . style . use ( 'fivethirtyeight' ) #NEWLINE#
pprint . pprint ( l ) #NEWLINE#
plt . figure ( ) #NEWLINE#
print ( ( 'x=' , x , 'func2' ) ) #NEWLINE#
print ( ( 'x=' , x , 'func3' ) ) #NEWLINE#
driver . find_element_by_id ( 'password' ) . send_keys ( 'mypassword' ) #NEWLINE#
plt . plot ( x , y , '-og' ) #NEWLINE#
os . setsid ( ) #NEWLINE#
name = models . CharField ( max_length = 50 ) #NEWLINE#
re . findall ( '(?:^|_)' + par + '(\\d+\\.\\d*)' , dir ) #NEWLINE#
df . where ( size_ ( col ( 'tokens' ) ) <= 3 ) . show ( ) #NEWLINE#
window . set_title ( 'Calendar#SPACE#Example' ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
iter_10 = ( i for i in range ( 10 ) ) #NEWLINE#
df . groupby ( 'A' ) . C . apply ( lambda x : pd . Series ( [ ( x < 0 ) . sum ( ) , ( x >= 0 ) . sum ( ) ] ) #NEWLINE# ) . unstack ( ) #NEWLINE#
[ ( i , z ) for i in [ 1 , 2 ] for z in zs_i ] #NEWLINE#
s . quit ( ) #NEWLINE#
compressed_table . append ( ( istart , i , table [ i ] ) ) #NEWLINE#
fig2 = plt . figure ( ) #NEWLINE#
print ( subprocess . list2cmdline ( sys . argv [ 1 : ] ) ) #NEWLINE#
"""endif""" #NEWLINE#
super ( C , self ) . __init__ ( argp ) #NEWLINE#
ax . clear ( ) #NEWLINE#
open ( 'bar.txt' , 'rb' ) . read ( ) #NEWLINE#
df . groupby ( 1 ) #NEWLINE#
{ 'pos' : - 1 , 'string' : None } #NEWLINE#
plt . xlabel ( 'Day#SPACE#of#SPACE#Week' ) #NEWLINE#
k = np . array ( [ [ 0 , 1 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 1 , 0 ] ] ) #NEWLINE# img2 = ndimage . convolve ( img , k , mode = 'constant' ) #NEWLINE#
print ( scipy . ndimage . zoom ( x , 2 , order = 3 ) ) #NEWLINE#
root = Tk ( ) #NEWLINE#
b = [ a , a ] #NEWLINE#
plt . show ( ) #NEWLINE#
return sys . stdout #NEWLINE#
print ( data . splitlines ( ) ) #NEWLINE#
sum_yearly_data ( * list ( data . values ( ) ) ) #NEWLINE#
print ( '' . join ( l [ i * 5 : ( i + 1 ) * 5 ] ) + '\n' ) #NEWLINE#
axes . set_xlim ( [ xmin , xmax ] ) #NEWLINE#
return dict . get ( self , key ) #NEWLINE#
instancelist [ 5 ] . attr1 = 'whamma' #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
output . close ( ) #NEWLINE#
y = matrix ( [ [ 1 , 2 , 3 ] ] ) #NEWLINE#
numcount [ num ] += 1 #NEWLINE#
next ( g , default_value ) #NEWLINE#
openedFile = open ( inputFile , 'rb' ) #NEWLINE#
axm . xaxis . set_visible ( False ) #NEWLINE#
print ( etree . tostring ( root , xml_declaration = True ) ) #NEWLINE#
tuples = [ ( 1 , 1 ) , ( 0 , 1 ) , ( 1 , 0 ) , ( 0 , 0 ) , ( 2 , 1 ) ] #NEWLINE#
ch = sys . stdin . read ( 1 ) #NEWLINE#
return datetime . datetime ( * eut . parsedate ( text ) [ : 6 ] ) #NEWLINE#
print ( ( 1 , 2 , get_nesting_level ( ) ) ) #NEWLINE#
layout . addWidget ( self . buttons ) #NEWLINE#
self . response . out . write ( self . request . get ( 'csv' ) ) #NEWLINE#
sys . path . append ( '/path/to/your/tweepy/directory' ) #NEWLINE#
print ( '%s#SPACE#->#SPACE#%s' % ( path , path_to_dict ( path ) ) ) #NEWLINE#
gp5 = [ 1 , 4 , 7 , 9 ] #NEWLINE#
[ 5 , 6 , 7 , 32 ] #NEWLINE#
df [ 'Value' ] = df . apply ( lambda row : my_test ( row [ 'a' ] , row [ 'c' ] ) , axis = 1 ) #NEWLINE#
s . post ( 'https://account.guildwars2.com/login' , data = login_data ) #NEWLINE#
zipFile . writestr ( 'OEBPS/content.xhtml' , 'hello#SPACE#world' ) #NEWLINE#
socket . setdefaulttimeout ( None ) #NEWLINE#
year = datetime . date . today ( ) . year #NEWLINE#
os . system ( '#SPACE#' . join ( cmd_parts ) ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
signal . signal ( signal . SIGINT , on_interrupt ) #NEWLINE#
r = re . compile ( '^/(?!(?:people|dungen)/[^?]+$).+/[^?]+$' ) #NEWLINE#
"""{0:b}""" . format ( int ( hex_string , 16 ) ) #NEWLINE#
ax . invert_yaxis ( ) #NEWLINE#
df . loc [ df [ 'Conflict' ] == 'Match#SPACE#Conflict' , 'Words' ] = df . loc [ df [ 'Conflict' ] == #NEWLINE# 'Match#SPACE#Conflict' , 'Words' ] . apply ( lambda x : func ( x ) ) #NEWLINE#
shm_test ( ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = profile ) #NEWLINE#
os . close ( fd ) #NEWLINE#
print ( df . replace ( 'null' , '' ) . groupby ( 'id' ) . sum ( ) . replace ( '' , 'null' ) ) #NEWLINE#
parser . add_argument ( '--input' , type = argparse . FileType ( 'r' ) , default = '-' ) #NEWLINE#
time_d_float = time_d . total_seconds ( ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , [ ] , 1 ) #NEWLINE#
print ( '{0},#SPACE#{1},#SPACE#{2}' . format ( one , two , three ) ) #NEWLINE#
self . builder . get_name ( widget ) #NEWLINE#
dis . dis ( function ) #NEWLINE#
return math . sin ( 2 * math . pi / LIMIT * x ) + 0.001 * random . random ( ) #NEWLINE#
with open ( 'replayScript.json' , 'w' ) as jsonFile : #NEWLINE# #INDENT# json . dump ( data , jsonFile ) #NEWLINE#
[ 'AUG' , 'GCC' , 'AUA' ] #NEWLINE#
raise ValueError ( 'Negative#SPACE#values#SPACE#not#SPACE#supported:#SPACE#{!r}' . format ( x ) ) #NEWLINE#
l . sort ( key = int ) #NEWLINE#
pylab . show ( ) #NEWLINE#
f = open ( 'file.txt' , 'r+' ) #NEWLINE#
SESSION_COOKIE_AGE = 600 #NEWLINE#
subprocess . check_call ( [ 'xdg-open' , '--' , path ] ) #NEWLINE#
myModule . printX ( ) #NEWLINE#
return db . put ( models ) #NEWLINE#
a = { 'key1' : 'value1' , 'key2' : 42 , 'key3' : partial ( foo , 20 ) } #NEWLINE#
df1 = df [ df [ 'company2' ] . str . contains ( '|' . join ( '^' + df [ 'company1' ] + '#SPACE#' ) ) ] #NEWLINE#
[ 0 , 1 , 1 , 2 , 2 , 2 , 1 , 0 ] , #NEWLINE#
list_of_tuples = [ ( 1 , 2 ) , ( 4 , 5 ) ] #NEWLINE# list_of_lists = [ list ( elem ) for elem in list_of_tuples ] #NEWLINE# list_of_lists #NEWLINE#
argparse . ArgumentParser . __init__ ( self , * args , ** kwargs ) #NEWLINE#
np . array ( my_list ( [ 0 , 1 , 2 , 3 ] ) ) #NEWLINE#
sorted ( list ( range ( len ( K ) ) ) , key = lambda x : K [ x ] ) #NEWLINE#
X , Y = np . meshgrid ( x , y ) #NEWLINE#
return render ( request , 'request_quote_form.html' , { 'formset' : formset } ) #NEWLINE#
tar . close ( ) #NEWLINE#
df = pd . DataFrame ( d ) #NEWLINE#
x = [ [ '565.0' , '575.0' ] , [ '1215.0' , '245.0' ] , [ '1740.0' , '245.0' ] ] #NEWLINE# x = [ [ int ( float ( j ) ) for j in i ] for i in x ] #NEWLINE#
class Pet ( db . Model ) : #NEWLINE# #INDENT# name = db . StringProperty ( required = True , default = '(unnamed)' ) #NEWLINE#
return [ subl for subl in _itersplit ( l , splitters ) if subl ] #NEWLINE#
p . wait ( ) #NEWLINE#
d [ 'a' ] . append ( list1 ) #NEWLINE#
show_windows ( ) #NEWLINE#
x [ 0 ] + np . arange ( 0 , 60 , 10 ) #NEWLINE#
dataset [ 'idx2' ] [ - 5 : ] = [ 0 ] * 2 + [ 1 ] * 3 #NEWLINE#
all_genic_snps = pd . concat ( all_dfs ) #NEWLINE#
manufacturer = models . ForeignKey ( 'production.Manufacturer' ) #NEWLINE#
csv_out . writerow ( [ 'name' , 'num' ] ) #NEWLINE#
[ 'foo' , [ 'bar' , [ 'bar' , [ 'foo' ] ] ] , [ 'foo1' ] , 'bar1' ] #NEWLINE#
curs . execute ( "SELECT#SPACE#nextval('num_data_id_seq')" ) #NEWLINE#
LOG_LEVEL = 'INFO' #NEWLINE#
s = re . sub ( '_+$' , '' , s ) #NEWLINE#
do_sth ( ) #NEWLINE#
myfunction ( ) #NEWLINE#
cursor . execute ( 'select#SPACE#user_id,#SPACE#user_name#SPACE#from#SPACE#users#SPACE#where#SPACE#user_id#SPACE#<#SPACE#100' ) #NEWLINE#
df = pd . DataFrame ( { 'A' : L } ) #NEWLINE#
print ( resp [ 'test1' ] ) #NEWLINE#
x = Bunch ( d ) #NEWLINE#
sio . seek ( 0 ) #NEWLINE#
paramdata . index #NEWLINE#
df [ 'id' ] . astype ( str ) #NEWLINE#
raise ValueError ( 'array#SPACE#with#SPACE#length#SPACE#2#SPACE#was#SPACE#expected' ) #NEWLINE#
lst . sort ( key = POS . get ) #NEWLINE#
plt . savefig ( 'nx_test.png' ) #NEWLINE#
print ( '\x10%' ) #NEWLINE#
print ( HorQS ( [ '0H' , '8H' , '7H' , '6H' , 'AH' , 'QS' ] ) ) #NEWLINE#
return int ( p . stdout . read ( ) ) #NEWLINE#
a [ 'pos' ] [ [ 'y' , 'x' ] ] = 0 #NEWLINE#
mcastsock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
[ [ 'a' , 'b' ] , [ ] , [ 'c' , 'd' ] , [ ] , [ 'f' ] , [ 'g' ] ] #NEWLINE#
sk = Sink ( ) #NEWLINE#
[ ( x * y ) for x , y in zip ( list ( range ( 1 , 21 ) ) , cycle ( list ( range ( 2 , 10 ) ) ) ) ] #NEWLINE#
mystring = 'its#SPACE##SPACE#so#SPACE##SPACE##SPACE#fluffy#SPACE##SPACE##SPACE#im#SPACE#gonna#SPACE##SPACE##SPACE##SPACE#DIE!!!' #NEWLINE# print ( mystring . split ( '#SPACE#' ) ) #NEWLINE#
MyModel . objects . filter ( id__in = [ 3 , 1 , 2 , 5 , 77 ] ) #NEWLINE#
headers = '#SPACE#<paste#SPACE#headers>#SPACE#' #NEWLINE#
browser . get ( 'http://google.com' ) #NEWLINE#
conn . request ( 'POST' , 'http://www.google.com' , params ) #NEWLINE#
print ( repr ( tokzr_QA ( inp1 ) ) ) #NEWLINE#
bus = dbus . SessionBus ( ) #NEWLINE#
print ( repr ( '' . join ( inverse_regex . ipermute ( '.' ) ) ) ) #NEWLINE#
numpy . full ( ( 2 , 2 ) , True , dtype = bool ) #NEWLINE#
return { 'foo' : 'bar' } #NEWLINE#
OrderedDict . fromkeys ( words , True ) #NEWLINE#
s . map ( Timestamp . date ) #NEWLINE#
data . groupby ( [ a , b ] ) . count ( ) #NEWLINE#
np . split ( b . indices , b . indptr [ 1 : - 1 ] ) #NEWLINE#
print ( timeit . timeit ( '[d[i]#SPACE#for#SPACE#i#SPACE#in#SPACE#range(9000,#SPACE#9010)]' , setup , number = 10000 ) ) #NEWLINE#
df [ ids . isin ( ids [ ids . duplicated ( ) ] ) ] . sort ( 'ID' ) #NEWLINE#
result . rename ( columns = lambda x : '%s[%d]' % ( x [ 0 ] , x [ 1 ] + 1 ) ) . reset_index ( ) #NEWLINE#
print ( str ( item [ 0 : ] ) [ 1 : - 1 ] ) #NEWLINE#
A . b = B . b #NEWLINE#
show ( ) #NEWLINE#
return '%.2f%s' % ( num , [ '' , 'K' , 'M' , 'G' , 'T' , 'P' ] [ magnitude ] ) #NEWLINE#
np . fromiter ( a , dtype = np . float ) #NEWLINE#
df [ 'day_of_week' ] = df [ 'my_dates' ] . dt . weekday_name #NEWLINE#
f = gzip . open ( '/home/joe/file.txt.gz' , 'wb' ) #NEWLINE#
return numpy . median ( numpy . array ( lst ) ) #NEWLINE#
n . set_hint ( 'y' , gtk . gdk . screen_height ( ) / 2.0 ) #NEWLINE#
return s . rsplit ( '\n' , 1 ) [ 0 ] #NEWLINE#
func ( ) #NEWLINE#
is_gunicorn = 'gunicorn' in os . environ . get ( 'SERVER_SOFTWARE' , '' ) #NEWLINE#
file_names = os . popen ( 'dir#SPACE#/b#SPACE#*.txt' ) . read ( ) . split ( '\n' ) #NEWLINE#
list ( d . keys ( ) ) #NEWLINE#
any ( b == a [ i : i + len ( b ) ] for i in range ( len ( a ) - len ( b ) + 1 ) ) #NEWLINE#
print ( 'fork#SPACE#2#SPACE#failed' ) #NEWLINE#
a . encode ( 'ascii' , 'ignore' ) #NEWLINE#
button . clicked . connect ( self . make_calluser ( name ) ) #NEWLINE#
lst . sort ( key = lambda x : x [ 0 ] ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
5 , 3 #NEWLINE#
result = json . loads ( line ) #NEWLINE#
transaction . commit ( ) #NEWLINE#
return super ( self . __class__ , self ) . delete ( * args , ** kwargs ) #NEWLINE#
TODAY = datetime . date . today ( ) #NEWLINE#
con . close ( ) #NEWLINE#
b . append ( i + 1 ) #NEWLINE#
1 in set ( [ l [ 0 ] for l in a_list ] ) #NEWLINE#
logger . error ( 'error#SPACE#while#SPACE#trying#SPACE#to#SPACE#describe#SPACE#kinesis#SPACE#stream#SPACE#:#SPACE#%s' ) #NEWLINE#
print ( a . index ( 'c' ) ) #NEWLINE#
data = cur . fetchone ( ) [ 0 ] #NEWLINE#
print ( ( key , '=' , value ) ) #NEWLINE#
[ _f for _f in sequence if _f ] #NEWLINE#
pygame . draw . rect ( x , y , width , length ) #NEWLINE#
return np . tril ( np . einsum ( 'ijk,jil->kl' , a , b ) , - 1 ) . sum ( 1 ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
eval ( 'str(s)+"test"' ) #NEWLINE#
clf . fit ( Xs , ys ) #NEWLINE#
a . set_title ( 'First#SPACE#level#SPACE#regions' ) #NEWLINE#
a . set_title ( 'Crit.#SPACE#first#SPACE#level#SPACE#region' ) #NEWLINE#
a . set_title ( 'Critical#SPACE#first#SPACE#level#SPACE#region#SPACE#with#SPACE#subregions' ) #NEWLINE#
a . set_title ( 'Final#SPACE#result' ) #NEWLINE#
countvec . fit_transform ( df . title ) #NEWLINE#
set1 = set ( s1 . split ( '#SPACE#' ) ) #NEWLINE#
[ x . lower ( ) for x in [ 'A' , 'B' , 'C' ] ] #NEWLINE#
p = subprocess . Popen ( [ 'ls' ] , stdout = subprocess . PIPE ) #NEWLINE#
do_stuff ( ) #NEWLINE#
'var' in globals ( ) #NEWLINE#
other_list . append ( obj ) #NEWLINE#
min ( list ( range ( len ( L ) ) ) , key = L . __getitem__ ) #NEWLINE#
L = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
pickle . dump ( my_list , f ) #NEWLINE#
writer . writerow ( [ i [ 0 ] for i in cursor . description ] ) #NEWLINE#
print ( repr ( arr ) ) #NEWLINE#
Utf8Decoder = codecs . getincrementaldecoder ( 'utf-8' ) #NEWLINE#
ffit = np . polyval ( coefs [ : : - 1 ] , x_new ) #NEWLINE#
con . execute ( 'insert#SPACE#into#SPACE#person(firstname)#SPACE#values#SPACE#(?)' , ( 'Joe' , ) ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self ) #NEWLINE#
result = [ convert ( i , j ) for i , j in enumerate ( tlist ) ] #NEWLINE#
print ( list ( map ( replace , a ) ) ) #NEWLINE#
return x , y #NEWLINE#
foo ( ) #NEWLINE#
seq = difflib . SequenceMatcher ( a , b ) #NEWLINE#
[ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 0 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 1 , 0 , 1 ] , [ 1 , 1 , 0 #NEWLINE# ] , [ 1 , 1 , 1 ] ] #NEWLINE#
print ( format ( 1.357e-05 , '.8f' ) ) #NEWLINE#
[ dishes [ x ] for x in crucial if x in dishes ] #NEWLINE#
super ( DownloadSpider , self ) . __init__ ( * a , ** kw ) #NEWLINE#
content = resp . read ( ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
df . to_html ( classes = 'my_class' ) #NEWLINE#
os . dup2 ( copied . fileno ( ) , stdout_fd ) #NEWLINE#
driver . get ( 'http://ent.unr-runn.fr/uPortal/' ) #NEWLINE#
response = br . submit ( ) #NEWLINE#
writer . close ( ) #NEWLINE#
setattr ( self , name , val ) #NEWLINE#
return [ line . split ( '#SPACE#' ) [ 5 ] for line in f ] #NEWLINE#
"""{0:,}""" . format ( 1000000 ) #NEWLINE#
df2 = df [ ( df . a != - 1 ) | ( df . b != - 1 ) ] #NEWLINE#
items = [ [ 1 , 2 , 0 ] , [ 1 , 2 , 0 ] , [ 1 , 2 , 0 ] ] #NEWLINE#
for k , v in list ( d . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( '123' ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'settings' ) #NEWLINE#
sys . _current_frames ( ) #NEWLINE#
print ( '%s#SPACE#is#SPACE#encrypted!' % zinfo . filename ) #NEWLINE#
output_file . write ( line + '\n' ) #NEWLINE#
L = [ 'hello' , '3' , '3.64' , '-1' ] #NEWLINE#
[ x for x in first_list if x not in secnd_list ] + [ x for x in secnd_list if #NEWLINE# x not in first_list ] #NEWLINE#
result . get ( ) #NEWLINE#
driver . find_elements_by_tag_name ( 'iframe' ) [ 0 ] #NEWLINE#
app . run ( ) #NEWLINE#
[ '{}{:02}' . format ( b_ , a_ ) for a_ , b_ in zip ( a , b ) ] #NEWLINE#
print ( first . lower ( ) <= second . lower ( ) <= third . lower ( ) ) #NEWLINE#
np . unique ( struct ) #NEWLINE#
print ( l ) #NEWLINE#
print ( cur . fetchone ( ) ) #NEWLINE#
conn2 = psycopg2 . connect ( 'host=server2...#SPACE#sslcert=path/to/cert2' ) #NEWLINE#
unittest . TextTestRunner ( ) . run ( suite ) #NEWLINE#
admin . site . register ( Group , GroupAdmin ) #NEWLINE#
self . dg . Items . Add ( self . value ) #NEWLINE#
colorline ( x , y , z , cmap = plt . get_cmap ( 'jet' ) , linewidth = 2 ) #NEWLINE#
xl . ActiveWorkbook . ActiveSheet . Columns ( 1 ) . AutoFilter ( 1 ) #NEWLINE#
p . start ( ) #NEWLINE#
print ( list ( value . keys ( ) ) [ 0 ] ) #NEWLINE#
leapseconds . gps_to_utc ( datetime ( 1980 , 1 , 6 ) + timedelta ( seconds = 1092121243.0 ) ) #NEWLINE#
return Mark ( self . name , self . index , self . line , self . column , None , None ) #NEWLINE#
model . add ( Dense ( 4 , input_dim = 2 , init = 'uniform' ) ) #NEWLINE#
axclust . imshow ( clustimg ) #NEWLINE#
print ( df [ c ] . value_counts ( ) ) #NEWLINE#
tags = Tag . objects . all ( ) #NEWLINE#
connection = sqlite3 . connect ( ':memory:' ) #NEWLINE#
anims . append ( f ) #NEWLINE#
return sum ( abs ( item [ i ] - myCmpItem [ i ] ) for i in range ( len ( item ) ) ) #NEWLINE#
root . setLevel ( logging . DEBUG ) #NEWLINE#
db . close ( ) #NEWLINE#
fout . close ( ) #NEWLINE#
print ( 'process_files_parallel()' , time . time ( ) - start ) #NEWLINE#
ax . imshow ( data , aspect = 'normal' ) #NEWLINE#
http_response . getdate ( 'Date' ) #NEWLINE#
axr . yaxis . set_major_locator ( yrloc ) #NEWLINE#
res . append ( dict ( ( k , None ) for k in line ) ) #NEWLINE#
pattern = re . compile ( 'profile:#SPACE#({.*}),' , re . MULTILINE | re . DOTALL ) #NEWLINE#
dict_x . setdefault ( key , [ ] ) . append ( value ) #NEWLINE#
exit ( 0 ) #NEWLINE#
url ( '^so/(?P<required>\\d+)/$' , 'myapp.so' , name = 'sample_view' ) , #NEWLINE#
logging . info ( 'request#SPACE#occurred' ) #NEWLINE#
{ 'model' : 'Activity' , 'name' : 'Practice' } , #NEWLINE#
data3 [ 'bins_spd' ] = pd . qcut ( data3 [ 'spd_pct' ] , 5 , labels = False ) #NEWLINE#
for file in files : #NEWLINE# #INDENT# file . close ( ) #NEWLINE#
plt . title ( 'Year#SPACE#2013' ) #NEWLINE#
prs . add_argument ( 'One' ) #NEWLINE#
prs . add_argument ( 'Three' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ remove_cruft ( s ) for s in sites ] #NEWLINE#
return context #NEWLINE#
app = QtWidgets . QApplication ( sys . argv ) #NEWLINE#
{ { form . abc ( placeholder = 'test' ) } } #NEWLINE#
george_author = Author . objects . get ( name = 'George' ) #NEWLINE#
binascii . hexlify ( socket . inet_aton ( '115.255.8.97' ) ) . upper ( ) #NEWLINE#
salt = b62encode ( os . urandom ( 16 ) ) #NEWLINE#
globals ( ) [ 'foo' ] = 'baz' #NEWLINE#
f . write ( value ) #NEWLINE#
urlpatterns = patterns ( 'django.views.generic.simple' , ( '(.+\\.html)$' , #NEWLINE# 'direct_to_template' ) ) #NEWLINE#
b . save ( ) #NEWLINE#
struct . unpack ( '>{}L' . format ( len ( s ) // 4 ) , s ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , onpick ) #NEWLINE#
parser . add_argument ( 'xDate' , type = mkdate ) #NEWLINE#
s = 'ab@cde@@fghi@jk@lmno@@@p@qrs@tuvwxy@z' #NEWLINE#
self . ax . figure . canvas . mpl_connect ( 'button_press_event' , self . on_press ) #NEWLINE#
data = pd . DataFrame ( list ( collection . find ( ) ) ) #NEWLINE#
ret [ line . strip ( ) ] = parse_message_to_tree_helper ( buf , index ) #NEWLINE#
lines = f . read ( ) . split ( '\r\n' ) #NEWLINE#
array ( [ 0 , 18 , 36 ] ) , #NEWLINE#
print ( soup . find ( 'strong' ) ) #NEWLINE#
[ p . split ( ) for p in re . findall ( '\\w+\\s+\\d+' , txt ) ] #NEWLINE#
print ( 'xpath#SPACE#query:#SPACE#wrong#SPACE#node#SPACE#set#SPACE#size' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
graph . post ( path = 'me/photos' , source = open ( 'parrot.jpg' ) ) #NEWLINE#
matplotlib . pyplot . show ( ) #NEWLINE#
r1 . hmset ( 'n3' , { 'n1' : 1 , 'n2' : 0 , 'n3' : 0 , 'n4' : 1 } ) #NEWLINE#
verbose_name = 'Feedback#SPACE#from#SPACE#users' #NEWLINE#
screen . blit ( pygame . transform . scale ( pic , ( 500 , 500 ) ) , ( 0 , 0 ) ) #NEWLINE#
ttk . Label ( self . mainframe , text = 'Button#SPACE#4' ) . grid ( column = 4 , row = 3 , padx = 4 ) #NEWLINE#
xsheet . write ( 0 , 0 , '' . join ( a ) ) #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
print ( 'foo' ) #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
del d [ key_to_delete ] #NEWLINE#
floor_float ( 10.8976540981 , 8 ) #NEWLINE#
numpy . median ( d , axis = 0 ) #NEWLINE#
pyplot . bar ( numpy . arange ( 10 ) * 2 + 1 , data2 , color = 'red' ) #NEWLINE#
df [ [ 'col1' , 'col2' ] ] = df [ [ 'col1' , 'col2' ] ] . astype ( np . float16 ) #NEWLINE#
self . SetSizer ( sizer ) #NEWLINE#
s = re . sub ( 'blah' , x , s , count = 1 ) #NEWLINE#
sparkdf . withColumn ( 'new_col' , f . lit ( 20 ) ) #NEWLINE#
new_df = old_df . withColumn ( 'col_n' , old_df . col_1 - old_df . col_2 ) #NEWLINE#
self . button . setText ( 'Vertical' ) #NEWLINE#
for k , v in sorted ( guests . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
self . logentry . append ( line ) #NEWLINE#
'c' + 'a' + 't' #NEWLINE#
return os . path . dirname ( str ( sys . executable , encoding ) ) #NEWLINE#
map ( list , iter ( c . items ( ) ) ) #NEWLINE#
df . sub ( df2 , fill_value = 0 ) #NEWLINE#
gtk . main ( ) #NEWLINE#
x = s . encode ( 'raw-unicode-escape' ) . decode ( 'utf-8' ) #NEWLINE#
dosomething ( ) #NEWLINE#
self . layout = QtGui . QHBoxLayout ( ) #NEWLINE#
plt . savefig ( 'result.png' ) #NEWLINE#
plt . plot ( x , y_fit2 , color = 'y' , label = 'constrained' ) #NEWLINE#
super ( Child , self ) . __init__ ( ) #NEWLINE#
print ( df [ df . Name . isin ( val ) ] . reset_index ( drop = True ) ) #NEWLINE#
func2 ( ** locals ( ) ) #NEWLINE#
df = pd . DataFrame ( a , columns = [ 'a' ] ) #NEWLINE#
ax = fig . add_subplot ( 2 , 1 , 1 ) #NEWLINE#
im = cv2 . imread ( 'abc.tiff' ) #NEWLINE#
np . isclose ( arr_f , a , atol = 0.01 ) . any ( ) #NEWLINE#
numpy . prod ( a ) #NEWLINE#
return ( [ next ( it ) for _ in _range ( s ) ] for s in count ( 1 ) ) #NEWLINE#
print ( 'Sum#SPACE#of#SPACE#%s#SPACE#and#SPACE#%s#SPACE#is#SPACE#%s:#SPACE#' % ( a , b , c ) ) #NEWLINE#
print ( 'Installing#SPACE#XXX...#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' , end = '#SPACE#' ) #NEWLINE#
splitted_lines = [ line . split ( ',' ) for line in lines ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
1 in [ len ( set ( i ) ) for i in zip ( * arr ) ] #NEWLINE#
my_strings . sort ( key = last_part ) #NEWLINE#
print ( [ sum ( daily [ x : x + 7 ] ) for x in range ( 0 , len ( daily ) , 7 ) ] ) #NEWLINE#
[ x for x in lst if x % 2 == 0 ] [ 0 ] #NEWLINE#
r . set ( 'bild1' , img ) #NEWLINE#
main ( ) #NEWLINE#
print ( args ) #NEWLINE#
MyApp ( ) . main ( sys . argv [ 1 : ] ) #NEWLINE#
print ( a . sum ( ) ) #NEWLINE#
plt . xticks ( list ( range ( len ( D ) ) ) , list ( D . keys ( ) ) ) #NEWLINE#
df1 / df2 . loc [ 'q' ] #NEWLINE#
data = np . loadtxt ( 'test.txt' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
loop . run ( ) #NEWLINE#
tableWidget . insertRow ( currentRowCount , 0 , QTableWidgetItem ( 'Some#SPACE#text' ) ) #NEWLINE#
ttk . Label ( self . mainframe , text = 'Button#SPACE#3' ) . grid ( column = 3 , row = 3 , padx = 4 ) #NEWLINE#
print ( ( key , value ) ) #NEWLINE#
plt . scatter ( xyc [ 8 : 20 ] , xyc [ 8 : 20 ] , c = xyc [ 8 : 20 ] , s = 35 , vmin = 0 , vmax = 20 ) #NEWLINE#
df [ ( df . a < df . b ) & ( df . b < df . c ) ] #NEWLINE#
a = [ '1' , '1' , '1' , '1' , '1' , '1' , '2' , '2' , '2' , '2' , '7' , '7' , '7' , '10' , #NEWLINE# '10' ] #NEWLINE# print ( a . count ( '1' ) ) #NEWLINE#
second_d = dict ( ( k , first_d [ k ] ) for k in ( 2 , 3 ) ) #NEWLINE#
print ( random . random ( ) ) #NEWLINE#
list1 = [ [ 10 , 13 , 17 ] , [ 3 , 5 , 1 ] , [ 13 , 11 , 12 ] ] #NEWLINE# list1 [ 0 ] [ 2 ] #NEWLINE#
raise TypeError ( 'arg#SPACE#must#SPACE#be#SPACE#a#SPACE#datetime.date,#SPACE#not#SPACE#a#SPACE#%s' % type ( arg ) ) #NEWLINE#
form = ContactForm ( request . POST ) #NEWLINE#
{ { django_version } } #NEWLINE#
res . append ( x ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
ax1 . axis [ 'top' ] . label . set_text ( '$\\alpha$#SPACE#[°]' ) #NEWLINE#
return arr . sum ( axis = 0 ) #NEWLINE#
[ s for n in range ( 12 ) for s in [ square ( n ) ] if s > 50 ] #NEWLINE#
array ( [ [ 42 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] ) #NEWLINE#
f . seek ( 0 , 2 ) #NEWLINE#
pygame . init ( ) #NEWLINE#
print ( df . iloc [ : , ( 0 ) ] . values . tolist ( ) ) #NEWLINE#
output . writelines ( data ) #NEWLINE#
self . cl . hlist . add ( 'CL1.Item1' , text = 'subitem1' ) #NEWLINE#
self . cl . hlist . add ( 'CL2' , text = 'checklist2' ) #NEWLINE#
self . cl . hlist . add ( 'CL2.Item1' , text = 'subitem1' ) #NEWLINE#
print ( et . tostring ( tree , xml_declaration = True , encoding = 'utf-8' ) ) #NEWLINE#
m * c [ : , ( np . newaxis ) ] #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
proc . kill ( ) #NEWLINE#
return tuple ( totuple ( i ) for i in a ) #NEWLINE#
sorted ( [ 15 , 8 ] ) #NEWLINE#
self . grid_columnconfigure ( 2 , weight = 1 ) #NEWLINE#
frame . Show ( ) #NEWLINE#
s . fillna ( '' ) . iloc [ 0 ] #NEWLINE#
return [ tuple ( L [ i : i + n ] ) for i in range ( len ( L ) - n + 1 ) ] #NEWLINE#
print ( p . map ( f , [ 1 , 2 , 3 ] ) ) #NEWLINE#
self . assertEqual ( cm . exception . code , 1 ) #NEWLINE#
sys . stderr . write ( serr ) #NEWLINE#
fout . write ( 'something\n' ) #NEWLINE#
img = Image . open ( image_path ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
np . vstack ( a ) - b #NEWLINE#
return obj . __dict__ [ 'name' ] #NEWLINE#
Index ( [ 'pear' , 'apple' , 'orange' ] , dtype = 'object' ) #NEWLINE#
print ( 'Hello,#SPACE#World!' ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
do_sql ( 'insert#SPACE#into#SPACE#table#SPACE#(column)#SPACE#values#SPACE#(%s)' , ( dinosaur , ) ) #NEWLINE#
[ 0 ] [ 2 ] [ 0 ] #NEWLINE#
print ( get_authoritative_nameserver ( sys . argv [ 1 ] , log ) ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
a = np . arange ( 5 ) #NEWLINE#
d . update ( { 'greetings' : 'hello' } ) #NEWLINE#
result = '{0}#SPACE#hello#SPACE#world#SPACE#{0}#SPACE#hello#SPACE#world#SPACE#{0}' . format ( incoming ) #NEWLINE#
isinstance ( s , string_types ) #NEWLINE#
return list ( islice ( rows , 0 , len ( rows ) , int ( 1 / proportion ) ) ) #NEWLINE#
q = multiprocessing . Queue ( ) #NEWLINE#
return func_to_cache ( ) #NEWLINE#
plt . plot ( x , y , '-k' ) #NEWLINE#
c . execute ( "insert#SPACE#into#SPACE#test#SPACE#values#SPACE#(1,'foo')" ) #NEWLINE#
c . execute ( "insert#SPACE#into#SPACE#test#SPACE#values#SPACE#(2,'bar')" ) #NEWLINE#
f . close ( ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
os . system ( 'cls' if os . name == 'nt' else 'clear' ) #NEWLINE#

spf = wave . open ( 'Animal_cut.wav' , 'r' ) #NEWLINE#
file = models . FileField ( upload_to = content_file_name ) #NEWLINE#
np . maximum ( X . A , Y . A ) #NEWLINE#
[ x for x in l if x is not 0 ] + [ x for x in l if x is 0 ] #NEWLINE#
print ( 'X#SPACE#is#SPACE#' + str ( fileX ) + ',#SPACE#Y#SPACE#is#SPACE#' + str ( fileY ) ) #NEWLINE#
lm . prob ( 'rain' , [ 'the' ] ) #NEWLINE#
avg = sum ( mylist ) / len ( mylist ) #NEWLINE#
shutil . copy2 ( os . path . join ( dirpath , file ) , dstdir ) #NEWLINE#
re . sub ( '[^\\d\\.]' , '' , '$1,000,000.01' ) #NEWLINE#
log . warn ( '1234567:#SPACE#no#SPACE#http#SPACE#response' ) #NEWLINE#
a = 'Hello#SPACE#World' #NEWLINE#
t . date . dt . to_pydatetime ( ) #NEWLINE#
print ( config . get ( 'job1' , 'mailto' ) ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
[ [ 1 , 2 ] , [ 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 ] ] #NEWLINE#
L . append ( L [ - 1 ] [ : ] + [ L [ - 1 ] [ - 1 ] + 1 ] ) #NEWLINE#
hasattr ( mock_class . a , 'c' ) #NEWLINE#
list ( itertools . zip_longest ( * ll ) ) #NEWLINE#
plt . hist ( val , weights = weight ) #NEWLINE#
a , b = result [ 'a' ] , result [ 'b' ] #NEWLINE#
con . commit ( ) #NEWLINE#
print ( '\n' . join ( map ( '#SPACE#' . join , zip ( * ( [ iter ( listA ) ] * 3 ) ) ) ) ) #NEWLINE#
nx . draw ( G , node_size = 1000 ) #NEWLINE#
id ( a [ 0 : 2 ] ) #NEWLINE#
return L [ : start ] + L [ start + n : i ] + L [ start : start + n ] + L [ i : ] #NEWLINE#
ax . set_title ( '100#SPACE#%#SPACE#stacked#SPACE#area#SPACE#chart' ) #NEWLINE#
c = MyClass ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
{ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 } #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
do_something ( ) #NEWLINE#
return Response ( serializer . data , status = status . HTTP_201_CREATED ) #NEWLINE#
window . show_all ( ) #NEWLINE#
ax1 . xaxis . set_major_formatter ( mdates . DateFormatter ( '%Y-%m-%d' ) ) #NEWLINE#
return lines [ - n : ] #NEWLINE#
s . fill ( ( 255 , 255 , 255 , 128 ) ) #NEWLINE#
pl . show ( ) #NEWLINE#
return re . sub ( regex , '' , astring ) #NEWLINE#
return re . sub ( regex , '\\1' , astring ) #NEWLINE#
ax . set_title ( 'Plot#SPACE#title#SPACE#' + str ( i ) ) #NEWLINE#
df . set_index ( 'time' , inplace = True ) #NEWLINE# df . sort_index ( inplace = True ) #NEWLINE#
sum ( j << i for i , j in enumerate ( reversed ( l ) ) ) #NEWLINE#
b . T #NEWLINE#
print ( [ a [ m : n ] for m , n in zip ( [ 0 ] + p , p + [ None ] ) ] ) #NEWLINE#
driver . get ( 'http://m.imdb.com/feature/bornondate' ) #NEWLINE#
dfile . close ( ) #NEWLINE#
os . symlink ( '/home/wieslander/tmp/foobar' , 'brokensymlink' ) #NEWLINE#
s = json . dumps ( foo . __dict__ ) #NEWLINE#
[ ( 'a' , 5 ) , ( 'r' , 2 ) , ( 'b' , 2 ) ] #NEWLINE#
df . loc [ idx ] #NEWLINE#
count = sum ( 1 for _ in re . finditer ( '\\b%s\\b' % re . escape ( word ) , input_string ) ) #NEWLINE#
print ( np . cross ( a , b ) ) #NEWLINE#
root . winfo_children ( ) #NEWLINE#
s = s [ : : - 1 ] #NEWLINE#
__tablename__ = 'sanity_check_test_2' #NEWLINE#
__tablename__ = 'sanity_check_test' #NEWLINE#
x [ : 5 ] #NEWLINE#
scipy . misc . imshow ( im_out ) #NEWLINE#
list ( { len ( x ) : x for x in reversed ( lst ) } . values ( ) ) #NEWLINE#
last = df . val . rolling ( 3 ) . sum ( ) . dropna ( ) . sort_values ( ) . index [ - 1 ] #NEWLINE#
v1 = inspect . trace ( ) [ - 1 ] [ 0 ] . f_locals [ 'v1' ] #NEWLINE#
df1 = df . sort_values ( [ 'a' , 'b' ] ) #NEWLINE#
syscall ( 39 ) #NEWLINE#
print ( 'output:' , output ) #NEWLINE#
hash ( 'xxx' ) #NEWLINE#
print ( a [ i , j ] ) #NEWLINE#
fig = plt . figure ( figsize = ( 15 , 10 ) ) #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , onpick ) #NEWLINE#
print ( '%s%s' % ( 'temp1' , 'temp2' ) ) #NEWLINE#
{ { ( description | slice ) : '65' } } #NEWLINE#
python - - version #NEWLINE#
exec ( 'foo%i.getcwd()' % i ) #NEWLINE#
0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 #NEWLINE#
self . frame . destroy ( ) #NEWLINE#
printx ( ) #NEWLINE#
show ( ) #NEWLINE#
[ x for x in locals ( ) if not x . startswith ( '__' ) ] #NEWLINE#
return item in self . queue #NEWLINE#
df [ 'A' ] = df [ 'A' ] . astype ( 'str' ) #NEWLINE#
df [ 'B' ] = df [ 'B' ] . astype ( 'str' ) #NEWLINE#
a = np . zeros ( ( 2 , 3 , 4 ) ) #NEWLINE#
authenticate ( username = 'ea87' , password = '666monkeysAndDogs777' ) #NEWLINE#
assert quotify ( '' ) == '""' #NEWLINE#
assert quotify ( 'type' ) == '"type"' #NEWLINE#
return [ s [ i : j ] for i , j in zip ( [ 0 ] + idx , idx + [ None ] ) ] #NEWLINE#
Config = configparser . ConfigParser ( None , multidict ) #NEWLINE#
return l + [ pad ] * ( n - len ( l ) ) #NEWLINE#
reverseCom ( [ 4 , 5 , 6 ] , 3 ) #NEWLINE#
s . close ( ) #NEWLINE#
soup . select ( '.thisClass' ) [ 0 ] . contents [ 0 ] #NEWLINE#
assert all ( regex . match ( '\\w$' , c ) for c in [ 'a' , 'ि' , 'क' ] ) #NEWLINE#
dtest = np . array ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) , dtype = 'float' ) #NEWLINE#
next ( f ) #NEWLINE#
'adapter/ALabSimulatorTime.cpp' , 'adapter/ALabNetBinding.cpp' , 'adapter/AValueArg.cpp' , 'adapter/ALabSiteSetsManager.cpp' , 'adapter/ALabSite.cpp' #NEWLINE#
x = [ 0 ] * 10 #NEWLINE# x = [ ( 0 ) for i in range ( 10 ) ] #NEWLINE#
a = np . arange ( 27 ) #NEWLINE#
np . r_ [ 0 : 3 , 7 : 11 ] #NEWLINE#
os . unlink ( file_path ) #NEWLINE#
[ 2 , 0 , 1 , 0 , 1 , 0 ] #NEWLINE#
signal . signal ( signal . SIGINT , handler ) #NEWLINE#
list ( chain ( * zip ( list ( range ( 1 , 7 ) ) , list ( range ( - 7 , 0 ) ) [ : : - 1 ] ) ) ) #NEWLINE#
widget . show ( ) #NEWLINE#
cv . CvtColor ( vis0 , vis2 , cv . CV_GRAY2BGR ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'myproject.settings' #NEWLINE#
Mercedes = Car ( 'Mercedes' , 'S#SPACE#Class' , 'Red' ) #NEWLINE#
curses . initscr ( ) #NEWLINE#
print ( ',' . join ( str ( i ) for i in numbers ( 1 , deltas ( ) , 100 ) ) ) #NEWLINE#
opener . addheaders . append ( ( 'User-agent' , 'Mozilla/5.0#SPACE#(compatible)' ) ) #NEWLINE#
Globals = GLOBALS ( ) #NEWLINE#
return super ( MySuperModelAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
return dict . __setitem__ ( self , keys , value ) #NEWLINE#
obj . save ( ) #NEWLINE#
columns . setdefault ( column , [ ] ) . append ( row ) #NEWLINE#
l += [ sum ( v ) / len ( v ) ] #NEWLINE#
soup = BeautifulSoup ( html_text ) #NEWLINE#
assert params == [ 'the' , 'params' , 'i' , 'expect' ] #NEWLINE#
""":#SPACE#""" #NEWLINE#
grouped . JobNos . sum ( ) . order ( ascending = False ) #NEWLINE#
proxies = { } #NEWLINE#
btn . grid ( row = 0 , column = tabslen , sticky = W + E ) #NEWLINE#
ax . xaxis . set_ticks ( df [ 'id' ] ) #NEWLINE#
print ( '%2d#SPACE#%3d#SPACE#%4d' % ( x , x * x , x * x * x ) ) #NEWLINE#
items = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
im = Image . open ( '1_tree.jpg' ) #NEWLINE#
b . shape #NEWLINE#
return self . _func ( * args , ** kw ) #NEWLINE#
numpy . savetxt ( 'arr.txt' , G . adj , fmt = '%s' ) #NEWLINE#
ax . set_ylim ( [ - 1 , 1 ] ) #NEWLINE#
app . geometry ( '500x300+200+200' ) #NEWLINE#
return http . HttpResponse ( 'foo' ) #NEWLINE#
f . close ( ) #NEWLINE#
myarr0 = array ( [ 1 , 0 ] ) #NEWLINE#
ax . set_yticklabels ( df . index ) #NEWLINE#
matches = ( x for x in lst if x > 6 ) #NEWLINE#
ax . bar ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
os . chmod ( 'myfile' , 438 ) #NEWLINE#
session1 . add ( item ) #NEWLINE#
color = models . CharField ( max_length = 2 ) #NEWLINE#
setattr ( self . obj , self . attr , val ) #NEWLINE#
con . commit ( ) #NEWLINE#
inactive_user_count = IntegerField ( default = 0 ) #NEWLINE#
super ( SurveyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
re . findall ( '[^\\W\\d_]+|\\d+' , '23Westminister15London' ) #NEWLINE#
parsedData = feedparser . parse ( data . content ) #NEWLINE#
compile ( source = 'foo' , filename = 'bar' , mode = 'exec' ) #NEWLINE#
plt . clf ( ) #NEWLINE#
v . decode ( 'iso8859-1' ) == u8 #NEWLINE#
raise ValueError ( 'unknown#SPACE#crl#SPACE#format' ) #NEWLINE#
re . findall ( '.{8}' , s ) #NEWLINE#
labs ( title = 'Views#SPACE#and#SPACE#other#SPACE#stuff' , y = '%#SPACE#of#SPACE#views' , x = '' ) #NEWLINE#
return super ( MyModelAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
return not set ( a ) . isdisjoint ( b ) #NEWLINE#
return inner ( myList , [ ] ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
pic = pygame . image . load ( 'image.png' ) #NEWLINE#
isinstance ( x , tuple ) and isinstance ( x . __dict__ , collections . abc . Mapping ) #NEWLINE#
ax . plot ( x , yy , linewidth = 1.2 , color = 'black' ) #NEWLINE#
sql . append ( 'INSERT#SPACE#INTO#SPACE#%s#SPACE#(' % table ) #NEWLINE#
sql . append ( 'DELETE#SPACE#FROM#SPACE#%s#SPACE#' % table ) #NEWLINE#
b = np . lib . stride_tricks . as_strided ( a , ( 1000 , a . size ) , ( 0 , a . itemsize ) ) #NEWLINE#
df = pd . DataFrame ( rows_list ) #NEWLINE#
s . value_counts ( ) . index [ 2 : ] #NEWLINE#
[ 'a' , 'c' ] #NEWLINE#
[ 'a' , 'd' ] #NEWLINE#
[ 'a' , 'e' ] #NEWLINE#
[ 'a' , 'f' ] #NEWLINE#
[ 'a' , 'g' ] #NEWLINE#
[ 'a' , 'h' ] #NEWLINE#
[ 'a' , 'i' ] #NEWLINE#
[ 'a' , 'j' ] #NEWLINE#
[ 'a' , 'k' ] #NEWLINE#
Counter ( { ( 1 ) : 6 , ( 2 ) : 5 , ( 5 ) : 4 , ( 3 ) : 3 , ( 4 ) : 1 } ) #NEWLINE#
raise NotImplementedError ( 'Abnormal#SPACE#use#SPACE#of#SPACE#self' ) #NEWLINE#
packages = [ 'fbuildbot' ] , #NEWLINE#
reactor . run ( ) #NEWLINE#
ax . legend ( patches , labels , loc = 'best' ) #NEWLINE#
session . commit ( ) #NEWLINE#
plt . gcf ( ) . subplots_adjust ( bottom = 0.15 , left = 0.13 , right = 0.95 , top = 0.96 ) #NEWLINE#
return obj if isinstance ( obj , dict ) else range ( len ( obj ) ) #NEWLINE#
print ( 'If#SPACE#this#SPACE#prints,#SPACE#you#SPACE#are#SPACE#running#SPACE#python#SPACE#-O!' ) #NEWLINE#
print ( intlist ( 137 ) ) #NEWLINE#
print ( <STR0> + 'a' * 7 ) #NEWLINE#
os . startfile ( 'textfile.txt' ) #NEWLINE#
df . where ( length ( col ( 'k' ) ) <= 3 ) . show ( ) #NEWLINE#
data . groupby ( 'col1' ) . agg ( lambda x : ( x . col2 * x . col3 ) . max ( ) ) #NEWLINE#
[ x for x in range ( 2 , 13 ) if all ( x % y != 0 for y in range ( 2 , x ) ) ] #NEWLINE#
outf . flush ( ) #NEWLINE#
apsched . start ( ) #NEWLINE#
sf [ [ 'x' , 'y' ] ] . pack_columns ( new_column_name = 'N' ) . stack ( 'N' ) . unique ( ) #NEWLINE#
onedollar . match ( '$1#SPACE#off#SPACE#delicious#SPACE#ham.' ) #NEWLINE#
return bit [ : : - 1 ] #NEWLINE#
df [ 'Col1_0' ] = df [ 'Col1' ] . apply ( lambda x : x [ 0 ] ) #NEWLINE#
lxml . html . fromstring ( non_html ) . find ( './/*' ) is not None #NEWLINE#
ax . set_yticks ( y_tick * np . pi ) #NEWLINE#
self . mc . Play ( ) #NEWLINE#
list ( filter ( pattern . search , strings ) ) #NEWLINE#
conn . sendmail ( sender , destination , msg . as_string ( ) ) #NEWLINE#
print ( ( some_date + three_months ) . isoformat ( ) ) #NEWLINE#
f = interpolate . UnivariateSpline ( x , y , k = 3 , s = 1 ) #NEWLINE#
import imp #NEWLINE# imp . reload ( greetings ) #NEWLINE#
_ . view ( data . dtype ) #NEWLINE#
a = 6378137 #NEWLINE#
conn . request ( 'GET' , '/foo' ) #NEWLINE#
conn . request ( 'GET' , '/bar' ) #NEWLINE#
s = 'abcaratab' #NEWLINE# re . findall ( 'car|rat|[a-z]' , s ) #NEWLINE#
self . handle_request ( ) #NEWLINE#
print ( ddiff [ 'values_changed' ] [ "root[4]['b']" ] [ 'diff' ] ) #NEWLINE#
file . write ( 'whatever' ) #NEWLINE# file . close ( ) #NEWLINE#
[ ( a + b ) for a , b in x ] #NEWLINE#
expander . py #NEWLINE#
'^.*lamb' , '.*.*.*b' , '.*?.*' , '.*\\b[lL]ittle\\b#SPACE#\\b[Ll]amb' #NEWLINE#
[ 'Beetles' , 'Beatlez' , 'Beatles' ] #NEWLINE#
plt . ylim ( 0 , 12 ) #NEWLINE#
shell . interact ( ) #NEWLINE#
s = '#SPACE#' . join ( str ( d ) for x in b for d in x . flat ) #NEWLINE#
ax . set_zlabel ( '$V(\\phi)$' ) #NEWLINE# plt . show ( ) #NEWLINE#
return not bool #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
intercepts = y_log [ : - 1 ] - slopes * x_log [ : - 1 ] #NEWLINE#
MyClass . call_me ( ) #NEWLINE#
image . save ( filename , 'PNG' ) #NEWLINE#
entry . configure ( state = 'disabled' ) #NEWLINE#
new_d = dict ( ( val , d [ val ] ) for val in reverse_d . values ( ) ) #NEWLINE#
first_column = [ x [ 0 ] for x in mysql_rows ] #NEWLINE#
xmldoc = minidom . parse ( 'items.xml' ) #NEWLINE#
func ( ) #NEWLINE#
self . dbobject = getattr ( ret , 'all' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
super ( waypointForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
p = subprocess . Popen ( 'aptitude' , stdin = subprocess . PIPE ) #NEWLINE#
"""ckObama""" #NEWLINE#
studying / VBG #NEWLINE#
_date ( datetime . now ( ) , 'd#SPACE#b,#SPACE#D' ) #NEWLINE#
regex = re . compile ( '\\d+(.*?)(?:\\u263a|\\U0001f645)' ) #NEWLINE#
a [ : , ( [ 1 , 3 ] ) ] #NEWLINE#
m . drawlsmask ( land_color = ( 0 , 0 , 0 , 0 ) , ocean_color = 'deeppink' , lakes = True ) #NEWLINE#
select . order_by ( 'dbms_random.value' ) #NEWLINE#
""":""" . join ( str ( td ) . split ( ':' ) [ : 2 ] ) #NEWLINE#
ax . scatter ( x , y , z , color = 'black' ) #NEWLINE#
x = np . array ( [ 'hello' , 'snake' , 'plate' ] , dtype = str ) #NEWLINE#
numpy . sum ( boolarr ) #NEWLINE#
input = [ 'a/b' , 'g' , 'c/d' , 'h' , 'e/f' , '/' , 'a/' ] #NEWLINE#
[ 'ROOT' , 'Node1' , 'Node2' , 'Node3' , 'Node4' ] #NEWLINE#
( np . cumsum ( np . bincount ( v ) ) - 1 ) [ v ] #NEWLINE#
cls . _instances [ cls ] . __init__ ( * args , ** kwargs ) #NEWLINE#
c . update ( { 'value1' : 7 , 'value2' : 3 } ) #NEWLINE#
fox = webdriver . Firefox ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
foo ( 'Python' ) #NEWLINE#
requests . status_codes . _codes [ 200 ] #NEWLINE#
df = pd . DataFrame ( result , index = index , columns = [ 'mean' , 'sum' , 'count' ] ) #NEWLINE#
model = get_object_or_404 ( MyModel , ~ Q ( status = 'deleted' ) , pk = id ) #NEWLINE#
print ( tohex ( 199703103 , 64 ) ) #NEWLINE#
self . logger . error ( 'some#SPACE#error#SPACE#message' ) #NEWLINE#
myList [ : ] = [ x for x in myList if myDict . get ( x [ 0 ] , sentinel ) != x [ 1 ] ] #NEWLINE#
root . iconbitmap ( 'py.ico' ) #NEWLINE#
driver . execute ( 'executePhantomScript' , { 'script' : script , 'args' : args } ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , #NEWLINE#
( 'imgcvt' , '' ) , #NEWLINE#
( 'IMConvert' , '' ) , #NEWLINE#
( 'Mayapy#SPACE#Interpreter' , '' ) , #NEWLINE#
im . set_clim ( vmin , vmax ) #NEWLINE#
final . append ( compound [ x ] ) #NEWLINE#
return np . linalg . lstsq ( A . T . dot ( A ) + lamb * np . identity ( n_col ) , A . T . dot ( y ) ) #NEWLINE#
Employee . __init__ ( self , name , salary ) #NEWLINE#
plt . show ( block = True ) #NEWLINE#
im = Image . open ( imgfile ) #NEWLINE#
s . bind ( ( host , 8080 ) ) #NEWLINE#
if all ( k in foo for k in ( 'foo' , 'bar' ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
list ( range ( min ( ( a , b ) ) , max ( ( a , b ) ) + 1 ) ) #NEWLINE#
conn . send ( filepath ) #NEWLINE#
print ( 'Width#SPACE#=' , GetSystemMetrics ( 0 ) ) #NEWLINE#
{ '-a' : True , '<arg>' : [ 'AA' , 'BB' , 'CC' ] } #NEWLINE#
arr . dtype . names #NEWLINE#
parser . error ( 'incorrect#SPACE#number#SPACE#of#SPACE#arguments' ) #NEWLINE#
print ( doCombine ( target , x , len ( target ) , 0 , 0 ) ) #NEWLINE#
tk . Canvas . __init__ ( self , * args , ** kwargs ) #NEWLINE#
x [ np . logical_and ( x > - 2 , x < 2 ) ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
request . tmpl_context . name = 'Bob' #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( np . median ( [ 1 , 1 , 0 , 0 , 0 , 3 , 3 , 3 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ] ) ) #NEWLINE#
[ x for x in lst if x % 2 == 0 ] [ : 1 ] #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
a + b == c or a + c == b or b + c == a #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
a [ slice ( * b ) ] #NEWLINE#
time . ctime ( ) #NEWLINE#
set ( [ zip ( perm [ : : 2 ] , perm [ 1 : : 2 ] ) for perm in permutations ( list ( range ( 9 ) ) ) ] ) #NEWLINE#
any ( np . array_equal ( a , x ) for x in my_list ) #NEWLINE#
{ ( 1 ) : { 1 } , ( 2 ) : { 2 , 3 } , ( 3 ) : { 2 , 3 } } #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
image . save ( sys . argv [ 3 ] ) #NEWLINE#
return np . random . choice ( keys , size = n , replace = True , p = prob ) #NEWLINE#
a = Dimarray ( values , [ ( 'lat' , lat ) , ( 'lon' , lon ) ] ) #NEWLINE#
f_out . write ( i ) #NEWLINE#
self . panel . SetSizerAndFit ( self . sizer ) #NEWLINE#
label . setText ( 'Window#SPACE#Title' ) #NEWLINE#
plt . plot ( data ) #NEWLINE#
df = pd . DataFrame ( { 'A' : np . linspace ( 1 , 10 , 10 ) } ) #NEWLINE#
im . save ( 'test.tiff' ) #NEWLINE#
writer = pandas . ExcelWriter ( 'Masterfile.xlsx' , engine = 'openpyxl' ) #NEWLINE#
print ( [ d . __name__ for d in foo . bar . _decorators ] ) #NEWLINE#
fields = [ 'user_id' , 'language_id' , 'name' ] #NEWLINE#
subject = db . StringField ( max_length = 255 , required = True ) #NEWLINE#
return redirect ( request . POST . get ( 'next' , '/accounts/profile/' ) ) #NEWLINE#
[ v for v in x if v == v ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
p . <VAR0> . write ( 'other#SPACE#message#SPACE#nÂ°{}\n' . format ( i ) ) #NEWLINE#
thread . start ( ) #NEWLINE#
print ( 'enabled#SPACE#ctrl-y' ) #NEWLINE#
show_firm_url . allow_tags = True #NEWLINE#
print ( list_end_counter ( [ 1 , 1 , 2 ] ) ) #NEWLINE#
ax . bar ( arange ( len ( grosses ) ) , grosses ) #NEWLINE#
df . where ( size ( col ( 'tokens' ) ) <= 3 ) . show ( ) #NEWLINE#
sys . stdout . write ( '{' ) #NEWLINE#
sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , 'requests-dist' ) ) #NEWLINE#
"""([aeiou][bcdfghjklmnpqrstvwxz])+""" #NEWLINE#
data = json . loads ( json_string ) #NEWLINE#
get_max ( dicts ) #NEWLINE#
l = [ 0 , 0 , 0 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 5 , 7 , 7 , 8 , 9 , 9 , 10 , 10 ] #NEWLINE#
b = np . array ( [ [ 5 , 6 ] , [ 7 , 8 ] ] ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( ) #NEWLINE#
config . add_route ( 'hello_world' , '/' ) #NEWLINE#
list ( map ( int , file . split ( '-' ) ) ) #NEWLINE#
self . SetBackgroundColour ( 'pink' ) #NEWLINE#
raise ValueError #NEWLINE#
print ( solve ( [ 2 , 0 , 1 ] ) ) #NEWLINE#
[ 'a' , 'bcde' , 'ef' ] #NEWLINE#
version . search ( s ) . group ( ) #NEWLINE#
dir ( module ) #NEWLINE#
json . loads ( '"\\u003Cp\\u003E"' ) #NEWLINE#
print ( df . groupby ( 'P' ) . apply ( wavg ( 'Q' , 'R' ) ) ) #NEWLINE#
os . waitpid ( - pid ) #NEWLINE#
self . assertTrue ( settings . DEBUG ) #NEWLINE#
myObject2 = MyObject ( foo , bar ) #NEWLINE#
ax1 . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
d [ 'junk' ] #NEWLINE#
child . widget ( ) . deleteLater ( ) #NEWLINE#
self . myFunction ( self , a , b , c = '123' ) #NEWLINE#
ax . set_xticklabels ( [ '' ] + labels ) #NEWLINE#
plt . subplots_adjust ( left = 0 , bottom = 0 , right = 1 , top = 1 , wspace = 0 , hspace = 0 ) #NEWLINE#
x = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] #NEWLINE#
fp . close ( ) #NEWLINE#
app . run ( debug = True , use_reloader = False ) #NEWLINE#
return render_template ( 'projectView.html' , form = form ) #NEWLINE#
ax . set_xlim ( 0 , len ( changes ) + 1 ) #NEWLINE#
items = list ( yourdict . items ( ) ) #NEWLINE#
print ( df . groupby ( 'OrderID' ) . apply ( lambda x : set ( x [ 'ItemID' ] . unique ( ) ) ) . tolist ( ) #NEWLINE# ) #NEWLINE#
yield os . path . join ( path , name ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_locator ( MaxNLocator ( nbins = 7 , prune = 'lower' ) ) #NEWLINE#
PLT . show ( ) #NEWLINE#
workbook = xlrd . open_workbook ( path , encoding_override = 'cp1251' ) #NEWLINE#
super ( ParameterisedHyperlinkedIdentityField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
df [ 'DateTime' ] = pd . to_datetime ( df [ 'DateTime' ] ) #NEWLINE#
xlabel ( 'time#SPACE#(s)' ) #NEWLINE#
br . open ( 'http://www.w3schools.com/html/html_forms.asp' ) #NEWLINE#
my_dict [ len ( data ) ] . append ( id ) #NEWLINE#
ax . set_xlabel ( 'Time#SPACE#(h)' ) #NEWLINE#
df [ ~ df . A . str . contains ( 'Hello|World' ) ] #NEWLINE#
r = requests . get ( url , cookies = cd ) #NEWLINE#
date = date . replace ( tzinfo = users_timezone ) #NEWLINE#
obj = MyClass ( ) #NEWLINE#
sys . getrecursionlimit ( ) #NEWLINE#
port = int ( os . environ . get ( 'PORT' , 33507 ) ) #NEWLINE#
monkeypatch . setattr ( datetime , 'datetime' , mydatetime ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
soup = BeautifulSoup ( response . content , 'html.parser' ) #NEWLINE#
b = map ( bool , a ) #NEWLINE#
soup . find_all ( text = is_comment ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
reg_data = np . ones ( ( int ( 1000.0 ) , int ( 100000.0 ) ) ) #NEWLINE#
result . append ( x ) #NEWLINE#
plt . show ( ) #NEWLINE#
datetime . datetime . strptime ( date_txt , DATE_FORMAT ) #NEWLINE#
scientific_names = [ it . text for it in soup . table . find_all ( 'i' ) ] #NEWLINE#
print ( [ key for key , value in query . items ( ) if value == 'on' ] ) #NEWLINE#
fig . show ( ) #NEWLINE#
verb_list = [ 'run' , 'walk' , 'skip' ] #NEWLINE#
list ( [ _f for _f in re . split ( '(plus|[()])' , s ) if _f ] ) #NEWLINE#
return importlib . import_module ( '.' . join ( lambda_ . __code__ . co_names ) ) #NEWLINE#
format_timedelta ( timedelta ( minutes = - 5 ) ) #NEWLINE#
url = 'jdbc:postgresql://localhost/foobar' #NEWLINE#
np . inf == float ( 'inf' ) #NEWLINE#
self . graphicsView . setScene ( scene ) #NEWLINE#
nums2 = re . compile ( '[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?' ) #NEWLINE#
print ( j [ 'two' ] ) #NEWLINE#
datetime . fromtimestamp ( 0 ) #NEWLINE#
df . reset_index ( level = 1 , drop = True , inplace = True ) #NEWLINE# print ( df ) #NEWLINE#
print ( 'All#SPACE#downloads#SPACE#finished' ) #NEWLINE#
{ 'text' : { 'record.articleTitle' : 'farmers' } } #NEWLINE#
fig . savefig ( 'ax2_figure_expanded.png' , bbox_inches = extent . expanded ( 1.1 , 1.2 ) ) #NEWLINE#
o3 = O3 ( ) #NEWLINE#
print ( list ( main ( ) ) ) #NEWLINE#
current_size = f . tell ( ) #NEWLINE#
test [ start : end ] #NEWLINE#
"""BA""" #NEWLINE#
self . socket . listen ( 1 ) #NEWLINE#
mlmn . submodule . function ( ) #NEWLINE#
plt . plot ( x , 2 * x ) #NEWLINE#
load_sparse_matrix ( '/tmp/my_array.npz' ) . tolil ( ) #NEWLINE#
self . assertEqual ( 'expected_value' , get_drive_size ( 'some#SPACE#device' ) ) #NEWLINE#
browser . get ( url ) #NEWLINE#
all ( val == testval for val in list ( d . values ( ) ) ) #NEWLINE#
[ x for x in players [ 'SEA' ] if x . year == '2001' ] #NEWLINE#
ax . spines [ 'left' ] . set_position ( 'zero' ) #NEWLINE#
contact_form . save ( ) #NEWLINE#
acc . setdefault ( key , [ ] ) . append ( value ) #NEWLINE#
zip ( [ 'a' , 'c' , 'e' ] , [ 'b' , 'd' ] ) #NEWLINE# dict ( zip ( l [ : : 2 ] , l [ 1 : : 2 ] ) ) #NEWLINE#
sbtn . click ( ) #NEWLINE#
myList . sort ( key = extractNum ) #NEWLINE#
[ '&&' , True , False ] #NEWLINE#
df . columns = [ c_name . strip ( ) for c_name in df . columns . values . tolist ( ) ] #NEWLINE#
input [ 0 ] [ 1 ] == 't' #NEWLINE#
return re . sub ( '\\s+' , '#SPACE#' , txt ) #NEWLINE#
smtpserver . login ( 'me@gmail.com' , 'me_pass' ) #NEWLINE#
with open ( '~/fileName' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( reversed . encode ( 'utf-8' ) ) #NEWLINE#
np . genfromtxt ( [ l . strip ( '[]' ) for l in data [ 'f1' ] ] , delimiter = ',' , dtype = int ) #NEWLINE#
df . set_index ( df . index . to_series ( ) . ffill ( ) , inplace = True ) #NEWLINE#
image = Image . open ( buffer ) #NEWLINE#
for item in list : #NEWLINE# #INDENT# writer . writerow ( [ item [ 0 ] , item [ 1 ] , item [ 2 ] ] ) #NEWLINE#
self . canvas1 . itemconfigure ( 'odd' , fill = 'white' , outline = 'red' ) #NEWLINE#
__init__ . py #NEWLINE#
mydriver . find_element_by_xpath ( xpaths [ 'usernameTxtBox' ] ) . send_keys ( username ) #NEWLINE#
listener = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
Foo . class_method ( ) #NEWLINE#
return mat [ ixs ] . sum ( axis = 0 ) #NEWLINE#
print ( 'some#SPACE#suggestions:#SPACE#%s' % ( ',#SPACE#' . join ( error . suggestions ) , ) ) #NEWLINE#
tag . update ( eyeD3 . ID3_V1_1 ) #NEWLINE#
input ( 'enter#SPACE#to#SPACE#finish' ) #NEWLINE#
tuple ( map ( sum , zip ( a , b ) ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
pool . join ( ) #NEWLINE#
idx = numpy . argmin ( numpy . abs ( A - target ) ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
self . assertTrue ( users . is_current_user_admin ( ) ) #NEWLINE#
print ( myString [ len ( myString ) - 1 ] ) #NEWLINE#
self . save ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' , handlelength = 5 , borderpad = 1.2 , labelspacing = 1.2 ) #NEWLINE#
s [ len ( start ) : - len ( end ) ] #NEWLINE#
print ( 'Listening...' ) #NEWLINE#
print ( 'accepted#SPACE#connection' ) #NEWLINE#
print ( 'Shutting#SPACE#down...' ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = [ 'A' , 'B' ] ) #NEWLINE#
"""shazam""" . partition ( '_' ) #NEWLINE#
groups = re . findall ( '((\\d+)(\\D+))' , string ) #NEWLINE#
os . rename ( filaname , '%d.mp3' % number ) #NEWLINE#
df [ 'C' ] . argmax ( ) #NEWLINE#
match . groups ( ) #NEWLINE#
app . run ( ) #NEWLINE#
next ( ( i for i , x in enumerate ( myList ) if x ) , None ) #NEWLINE#
print ( midnight . astimezone ( pytz . utc ) . strftime ( fmt ) ) #NEWLINE#
print ( repr ( b ) ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
'%s' * len ( L ) % tuple ( L ) #NEWLINE#
os . execl ( 'runme.sh' , '' ) #NEWLINE#
my_stuff . append ( 'laptop' ) #NEWLINE#
runserver . py #NEWLINE#
print ( soup ) #NEWLINE#
eval ( 'bar' + '()' ) #NEWLINE#
df [ 'First#SPACE#Season' ] = ( df [ 'First#SPACE#Season' ] > 1990 ) . astype ( int ) #NEWLINE#
from google . appengine . ext import db #NEWLINE#
writer = csv . writer ( outfile ) #NEWLINE#
opener . addheaders = [ ( 'User-agent' , 'Mozilla/5.0' ) ] #NEWLINE#
"""\\?""" #NEWLINE#
other_function ( ) #NEWLINE#
print ( line ) #NEWLINE#
plt . setp ( list ( ax . spines . values ( ) ) , color = color ) #NEWLINE#
App ( root ) . pack ( expand = True , fill = 'both' ) #NEWLINE#
return render_template ( tmpl_name , var1 = var1 , var2 = var2 , var3 = var3 , ** kwargs ) #NEWLINE#
bins = np . array ( [ 0 , 1 , 10 , 60 , 60 * 10 , 60 * 60 , 24 * 60 * 60 ] ) #NEWLINE#
df . set_index ( 'recd' ) . resample ( '1M' , how = 'sum' ) #NEWLINE#
turtle . forward ( size ) #NEWLINE#
host . close ( ) #NEWLINE#
mypass = getpass . getpass ( ) #NEWLINE#
return self . board [ y ] [ x ] #NEWLINE#
return 'the#SPACE#e' #NEWLINE#
return 'a_var' #NEWLINE#
sys . path . append ( PYSOLR_PATH ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'right' ) #NEWLINE#
d = { 'a' : '1' , 'c' : '10' , 'b' : '8' , 'e' : '11' , 'g' : '3' , 'f' : '2' } #NEWLINE# sorted ( d , key = lambda i : int ( d [ i ] ) ) #NEWLINE#
d = dateutil . parser . parse ( s ) #NEWLINE#
[ False , False , True , False , False ] , #NEWLINE#
print ( os . path . join ( root , name ) ) #NEWLINE#
setup ( app = [ app_data ] , options = { 'py2app' : { 'resources' : [ ] , 'excludes' : [ ] } } ) #NEWLINE#
s [ 4 ] #NEWLINE#
from selenium . common . exceptions import NoSuchElementException #NEWLINE#
df [ ~ df . countries . isin ( countries ) ] #NEWLINE#
import xgboost as xgb #NEWLINE#
( 'row#SPACE#a' , 'a1' , 'a2' , 'a3' ) , #NEWLINE#
pd . concat ( [ c . series for c in [ France , Germany ] ] , axis = 1 ) #NEWLINE#
os . remove ( os . path . join ( root , file ) ) #NEWLINE#
main ( ) #NEWLINE#
print ( datetime . utcnow ( ) . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) [ : - 3 ] ) #NEWLINE#
print ( time . strftime ( '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' ) ) #NEWLINE#
tree . find ( 'idinfo/timeperd/timeinfo/rngdates/enddate' ) . text = '1/1/2011' #NEWLINE#
print ( redirect . headers . get ( 'location' ) ) #NEWLINE#
return super ( MyEncoder , self ) . default ( obj ) #NEWLINE#
ax . set ( xticks = np . arange ( dates . size ) , xticklabels = datelabels ) #NEWLINE#
super ( MyModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
reader = csv . reader ( open ( 'in.csv' , 'rb' ) , skipinitialspace = True ) #NEWLINE#
dialog . setLayout ( some_layout ) #NEWLINE#
subprocess . call ( [ '7z' , 'a' , filename + '.7z' , filename ] ) #NEWLINE#
ax . set_xlim ( 0 , 5 ) #NEWLINE#
xs = data [ : , ( col [ 'l1' ] ) ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
p = psutil . Process ( pid ) #NEWLINE# p . terminate ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
from functools import reduce #NEWLINE# destination = reduce ( lambda x , y : y ( x ) , function_list , origin ) #NEWLINE#
img . putdata ( data ) #NEWLINE#
cursor . execute ( 'select#SPACE#*#SPACE#from#SPACE#moz_places;' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
a = numpy . empty_like ( b ) #NEWLINE#
ws . cell ( row = r , column = 1 ) . value = statN #NEWLINE#
print ( soup . li . findAll ( text = True , recursive = False ) ) #NEWLINE#
print ( 'exÃ¡mple' . encode ( 'utf-8' ) . upper ( ) ) #NEWLINE#
print ( list ( product_from ( 4 , [ 'a' , 'b' , 'c' ] , [ 1 , 2 , 3 ] ) ) ) #NEWLINE#
xl . Application . Quit ( ) #NEWLINE#
map ( int , L1 ) #NEWLINE#
ax1 . set_ylabel ( 'y' ) #NEWLINE#
ser . setDTR ( False ) #NEWLINE#
abc = '#SPACE#' . join ( ( abc , 'and#SPACE#cheese' ) ) #NEWLINE#
joe = df . loc [ df . name == 'joe' ] #NEWLINE#
sum ( b [ i ] << i * 8 for i in range ( 4 ) ) #NEWLINE#
np . meshgrid ( x , x ) #NEWLINE#
print ( cursor . mogrify ( insert_query , data ) . decode ( 'utf8' ) ) #NEWLINE#
os . unlink ( path ) #NEWLINE#
np . subtract . at ( dW , np . s_ [ : , ( y ) ] , masked . sum ( axis = 2 ) ) #NEWLINE#
axes . xaxis . set_minor_formatter ( FormatStrFormatter ( '%.2f' ) ) #NEWLINE#
len ( bounds ) * '{}#SPACE#' . format ( * bounds ) #NEWLINE#
len ( tup ) #NEWLINE#
self . response . set_cookie ( 'emailAddress' , self . request . get ( 'emailAddress' ) ) #NEWLINE#
from email . mime . multipart import MIMEMultipart #NEWLINE#
ax1 . set_xlim ( [ 0.1 , 10 ] ) #NEWLINE#
commands [ command ] ( * sys . argv [ 1 : ] ) #NEWLINE#
df . ix [ df . var4 . isnull ( ) , 'var1' ] . map ( fillna [ 'mean' ] ) #NEWLINE#
{ 'link' : [ 'http://www.dropbox.com/s/9x8924gtb52ksn6/Phonesky.apk' ] } #NEWLINE#
my_list . append ( 'F' ) #NEWLINE# print ( my_list ) #NEWLINE#
s . commit ( ) #NEWLINE#
pd . to_datetime ( df . index , unit = 's' ) #NEWLINE#
plt . hlines ( [ 0 ] , - 10 , 20 ) #NEWLINE#
QtDBus . QDBusConnection . sessionBus ( ) . send ( msg2 ) #NEWLINE#
map ( lambda a_b : a_b [ 1 ] - a_b [ 0 ] , pairwise ( L ) ) #NEWLINE#
result = dict ( result ) #NEWLINE#
df [ 'Value' ] = df . apply ( lambda row : my_test ( row [ 'a' ] , row [ 'c' ] ) , axis = 1 ) #NEWLINE# df #NEWLINE#
sets = [ set ( i + j ) for i in g for j in g if i != j and set ( i ) & set ( j ) ] #NEWLINE#
tv . modify_base ( gtk . STATE_NORMAL , gtk . gdk . color_parse ( 'black' ) ) #NEWLINE#
sub_strings = [ 'mo' , 'm,' , 'o' , 'se' , 'e' ] #NEWLINE#
print ( ( type ( e ) . __name__ , ':' , str ( e ) ) ) #NEWLINE#
return collections . deque . __getitem__ ( self , index ) #NEWLINE#
draw = ImageDraw . Draw ( img ) #NEWLINE#
set ( bell ) . issubset ( printset ) #NEWLINE#
any ( re . search ( '\\d' , s ) for s in lst ) #NEWLINE#
frame . columnconfigure ( 1 , weight = 1 ) #NEWLINE#
return self . a [ - 1 ] #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE# a [ slice ( 1 , None ) ] = [ 4 , 5 ] #NEWLINE# a #NEWLINE#
plt . xticks ( rotation = 25 ) #NEWLINE#
plt . contourf ( X , Y , Z ) #NEWLINE#
argmax ( [ ( 5 , 2 ) , ( 3 , 3 ) , ( 2 , 5 ) ] , pow ) #NEWLINE#
[ len ( s ) for s in re . split ( '0+' , mystr ) if s ] #NEWLINE#
max ( generate_until_threshold ( ( f ( x ) for x in range ( n ) ) , B ) , - float ( 'inf' ) ) #NEWLINE#
pi = square ( a + b ) / ( 4 * t ) #NEWLINE#
setattr ( object , name , value ) #NEWLINE#
for i , outter in enumerate ( l ) : #NEWLINE# #INDENT# l [ i ] [ 0 ] = 'new#SPACE#value' #NEWLINE#
tree = ET . ElementTree ( file = 'work.xml' ) #NEWLINE#
my_dict [ item ] = a [ index + 1 ] #NEWLINE#
element = driver . find_element_by_xpath ( '//span[span/input[@name="lift"]]' ) #NEWLINE#
print ( max ( len ( s ) for s in row ) ) #NEWLINE#
wx . Frame . __init__ ( self , None , wx . ID_ANY , 'Tutorial' ) #NEWLINE#
datetime . datetime ( 2012 , 11 , 16 , 0 , 0 ) #NEWLINE#
print ( output ) #NEWLINE#
random . shuffle ( x ) #NEWLINE#
return all ( map ( lambda x : x == items [ 0 ] , items ) ) #NEWLINE#
k = np . arange ( n ) #NEWLINE#
sys . path . append ( SYS_PATH ) #NEWLINE#
main ( ) #NEWLINE#
sys . maxsize #NEWLINE#
"""www.yahoo.co.jp""" . partition ( '.' ) [ 2 ] #NEWLINE#
[ pattern . sub ( '' , phrase ) for phrase in phrases ] #NEWLINE#
random . shuffle ( thelist ) #NEWLINE#
logging . exception ( 'Got#SPACE#exception#SPACE#on#SPACE#main#SPACE#handler' ) #NEWLINE#
print ( '#SPACE##SPACE#%i#SPACE#edits#SPACE#regex->match(0),#SPACE#%i#SPACE#edits#SPACE#match(0)->s' % ( ld1 , ld2 ) ) #NEWLINE#
return s . get_text ( ) #NEWLINE#
backend . setsockopt ( zmq . XPUB_VERBOSE , True ) #NEWLINE#
plt . show ( ) #NEWLINE#
web . setcookie ( 'test1' , 'test2' , domain = 'example.com' ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
row_ind = [ k for k , v in list ( d . items ( ) ) for _ in range ( len ( v ) ) ] #NEWLINE#
logger . setLevel ( logging . ERROR ) #NEWLINE#
logging . shutdown ( ) #NEWLINE#
np . array ( zip ( * ( A [ i : ] for i in range ( n ) ) ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
pd . concat ( [ i for _ , i in df . items ( ) ] ) . dropna ( ) . reset_index ( drop = True ) #NEWLINE#
[ _f for _f in map ( func , x ) if _f ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
return tuple ( int ( x ) for x in s . split ( '.' ) ) #NEWLINE#
li2 = [ y for x in li for y in x ] #NEWLINE#
G . get_edge_data ( 1 , 2 , key = 'xyz' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
return { 'hello' : 'world' } #NEWLINE#
raise ValidationError ( 'You#SPACE#must#SPACE#provide#SPACE#more#SPACE#than#SPACE#just#SPACE#whitespace.' ) #NEWLINE#
tty . setraw ( sys . stdin . fileno ( ) ) #NEWLINE#
plt . xlim ( 0 , 4 ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
cursor = db . cursor ( ) #NEWLINE#
len ( z [ 'result' ] ) #NEWLINE#
len ( x ) #NEWLINE#
self . verticalLayout . addWidget ( self . label ) #NEWLINE#
df = pd . concat ( [ df1 , df2 ] ) #NEWLINE#
MY_SORTED_TUPLE = tuple ( sorted ( MY_TUPLE , key = itemgetter ( 1 ) ) ) #NEWLINE#
root = Tk ( ) #NEWLINE#
arr = numpy . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
msg = MIMEMultipart ( 'alternative' ) #NEWLINE#
print ( '\\N{BLACK#SPACE#DIAMOND#SPACE#SUIT}' ) #NEWLINE#
Popen ( [ 'nice' ] , preexec_fn = lambda : os . nice ( 10 ) ) . communicate ( ) #NEWLINE#
"""For#SPACE#me,#SPACE#Reddit#SPACE#brings#SPACE#to#SPACE#mind#SPACE#Obi#SPACE#Wan’s#SPACE#enduring#SPACE#description#SPACE#of#SPACE#the#NEWLINE#Mos#SPACE#Eisley#SPACE#cantina:#SPACE#a#SPACE#wretched#SPACE#hive#SPACE#of#SPACE#scum#SPACE#and#SPACE#villainy.#SPACE#But,#SPACE#you#SPACE#know,#SPACE#one#NEWLINE#you#SPACE#still#SPACE#kinda#SPACE#want#SPACE#to#SPACE#hang#SPACE#out#SPACE#in#SPACE#occasionally.#SPACE#The#SPACE#thing#SPACE#is,#SPACE#though,#NEWLINE#Reddit#SPACE#isn’t#SPACE#some#SPACE#obscure#SPACE#dive#SPACE#bar#SPACE#in#SPACE#a#SPACE#remote#SPACE#corner#SPACE#of#SPACE#the#SPACE#universe—it’s#SPACE#a#NEWLINE#huge#SPACE#watering#SPACE#hole#SPACE#at#SPACE#the#SPACE#very#SPACE#center#SPACE#of#SPACE#it.#SPACE#The#SPACE#site#SPACE#had#SPACE#some#SPACE#400#SPACE#million#NEWLINE#unique#SPACE#visitors#SPACE#in#SPACE#2012.#SPACE#They#SPACE#can’t#SPACE#all#SPACE#be#SPACE#Greedos.#SPACE#So#SPACE#maybe#SPACE#my#SPACE#problem#SPACE#is#NEWLINE#just#SPACE#that#SPACE#I’ve#SPACE#never#SPACE#been#SPACE#able#SPACE#to#SPACE#find#SPACE#the#SPACE#places#SPACE#where#SPACE#the#SPACE#decent#SPACE#people#NEWLINE#hang#SPACE#out.""" #NEWLINE#
img . img . save ( 'rotate.jpg' , image_file ) #NEWLINE#
print ( g . reset_index ( drop = True ) ) #NEWLINE#
data_dict [ regNumber ] . append ( details ) #NEWLINE#
raise IndexError ( 'row#SPACE#index#SPACE#out#SPACE#of#SPACE#bounds' ) #NEWLINE#
dict ( [ ( 'name' , [ x [ 0 ] for x in s ] ) , ( 'age' , [ x [ 1 ] for x in s ] ) ] ) #NEWLINE#
print ( [ ( '%.2f' % x ) for x in a ] ) #NEWLINE#
s = 'abcd' #NEWLINE# len ( s ) #NEWLINE#
plt . figure ( ) #NEWLINE#
( 8 , '%i' ) , ( 10 , '%%' ) #NEWLINE#
raise KeyError ( request . POST ) #NEWLINE#
print ( ( tuple1 [ i ] , tuple1 [ j ] ) ) #NEWLINE#
return HttpResponseRedirect ( '/admin/password_change/' ) #NEWLINE#
ax2 . plot ( pd . Series ( np . random . uniform ( 10 , 20 , size = 10 ) ) , color = 'r' ) #NEWLINE#
__init__ . py #NEWLINE#
data . write ( '\n' . join ( '%s%s' % ( c , n ) for c in s_chars for n in nums ) ) #NEWLINE#
self . window . show_all ( ) #NEWLINE#
print ( find_nearest ( x ) ) #NEWLINE#
output . sort ( ) #NEWLINE#
df . loc [ mask . any ( axis = 1 ) ] #NEWLINE#
pd . __version__ #NEWLINE#
[ ( 1 , 'A' , 'foo' ) , ( 2 , 'A' , 'bar' ) , ( 100 , 'A' , 'foo-bar' ) ] #NEWLINE#
hllDll = ctypes . WinDLL ( 'c:\\PComm\\ehlapi32.dll' ) #NEWLINE#
s . sendmail ( msg [ 'From' ] , [ to ] , msg . as_string ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
ax . set_xlim3d ( - 1 , 1 ) #NEWLINE#
plt . draw ( ) #NEWLINE#
os . makedirs ( dir ) #NEWLINE#
[ int ( any ( full . endswith ( last ) for last in B ) ) for full in A ] #NEWLINE#
"'" in nested_list_example [ 2 ] #NEWLINE#
return self . est . predict_proba ( X ) [ : , ( 1 ) ] [ : , ( numpy . newaxis ) ] #NEWLINE#
date = models . DateTimeField ( auto_now_add = True , blank = True ) #NEWLINE#
locals ( ) . update ( { col : df [ col ] } ) #NEWLINE#
print ( ( f [ 'name' ] , f [ 'mimeType' ] ) ) #NEWLINE#
re . sub ( '\\\\' , '/' , 'C:\\Users' ) #NEWLINE#
django . setup ( ) #NEWLINE#
[ item for item in my_iterable if my_filter ( item ) ] #NEWLINE#
map ( itemgetter ( 0 ) , sorted ( list ( dct . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) ) [ #NEWLINE# : 3 ] #NEWLINE#
re . findall ( p , test_str ) #NEWLINE#
client . send ( msg ) #NEWLINE#
str ( b ) #NEWLINE#
plt . annotate ( labls [ i ] , xy = ( x [ i , 2 ] , y [ i , 2 ] ) , rotation = rotn [ i , 2 ] ) #NEWLINE#
jsonFile . close ( ) #NEWLINE#
( A < B ) . all ( ) #NEWLINE#
do_many_amazing_things ( a , b ) #NEWLINE#
math . isnan ( x ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
X , Y = np . mgrid [ : bignum , : bignum ] #NEWLINE#
df [ col ] . replace ( to_remove , np . nan , inplace = True ) #NEWLINE#
re . sub ( '(fo+)bar(?=baz)' , '\\1quux' , 'foobarbaz' ) #NEWLINE#
channel . basic_consume ( callback_func , queue , no_ack = True ) #NEWLINE#
return 'Client#SPACE#App#SPACE#HomePage' #NEWLINE#
df . ix [ df . index . indexer_between_time ( datetime . time ( 10 ) , datetime . time ( 14 ) ) ] #NEWLINE#
mratings . mean ( axis = 0 ) #NEWLINE#
myvar = 'the#SPACE#answer#SPACE#is#SPACE#' + str ( answer ) #NEWLINE#
import numpy as np #NEWLINE#
store . put ( key , value , table = True , append = False ) #NEWLINE#
a . setdefault ( 'temp_list' , [ ] ) . append ( y ) #NEWLINE#
plt . ylabel ( 'Speed#SPACE#[m/s]' ) #NEWLINE#
s . sendline ( 'uptime' ) #NEWLINE#
tk . Tk . __init__ ( self ) #NEWLINE#
plt . yticks ( np . arange ( y . max ( ) + 1 ) , labels ) #NEWLINE#
perms = [ '' . join ( p ) for p in permutations ( 'stack' ) ] #NEWLINE#
self . toolbar . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
result = int ( h ) * 3600 + int ( m ) * 60 + int ( s ) #NEWLINE#
print ( info [ 'streams' ] [ 1 ] [ 'codec_long_name' ] , info [ 'streams' ] [ 1 ] [ 'duration' ] ) #NEWLINE#
df . iloc [ 3 : ] #NEWLINE#
run ( 'kill#SPACE#-9#SPACE#`cat#SPACE#/srv/web/run/rhino/rhino.pid`' ) #NEWLINE#
outfile . write ( file2 . read ( ) ) #NEWLINE#
do_something ( ) #NEWLINE#
raise ValueError ( 'Invaild#SPACE#card#SPACE#ID' ) #NEWLINE#
self . connection . rollback ( ) #NEWLINE#
area1 + area2 #NEWLINE#
d = { 'VENEZUELA' : 'CARACAS' , 'CANADA' : 'OTTAWA' } #NEWLINE# random . choice ( list ( d . keys ( ) ) ) #NEWLINE#
type ( a [ 0 ] ) #NEWLINE#
sum ( map ( len , primes ) ) #NEWLINE#
map ( lambda i : i . setSize ( 'big' ) , my_things ) #NEWLINE#
main ( ) #NEWLINE#
return [ ( x % 2 == 0 ) for x in t_f_list ] #NEWLINE#
a . childNodes [ 0 ] . nodeValue #NEWLINE#
[ val for val in a for _ in ( 0 , 1 ) ] #NEWLINE#
cv . NamedWindow ( 'Camera#SPACE#2' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
my_values = list ( my_dict . values ( ) ) #NEWLINE#
test [ : , ( 0 ) ] #NEWLINE#
sys . stdout . write ( RED ) #NEWLINE#
run_stackless ( g ( 30 , 4 ) ) #NEWLINE#
template . render ( ) #NEWLINE#
[ '1234' , 'Q-24' , '2010-11-29' , '563' , 'abc' , 'a6G47er15' ] #NEWLINE#
__import__ ( '%s.handlers' % x . __name__ ) #NEWLINE#
sampleDF [ 'housing' ] = sampleDF [ 'housing' ] . map ( housing_map ) #NEWLINE#
gevent . killall ( [ obj for obj in gc . get_objects ( ) if isinstance ( obj , greenlet ) ] ) #NEWLINE#
super ( ActionModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
getdict ( x ) #NEWLINE#
raise AttributeError ( 'unreadable#SPACE#attribute' ) #NEWLINE#
list ( range ( 1 , 11 ) ) #NEWLINE#
new_img . save ( 'new.png' , 'PNG' ) #NEWLINE#
printArray ( [ str ( x ) for x in row ] ) #NEWLINE#
self . send_blob ( blob_info , save_as = True ) #NEWLINE#
x . sort ( key = str . lower ) #NEWLINE#
data [ 'points' ] = data . apply ( f , axis = 1 ) #NEWLINE#
output . close ( ) #NEWLINE#
text_file = open ( 'Output.txt' , 'w' ) #NEWLINE#
print ( 'List#SPACE#is:' , syncarr ) #NEWLINE#
print ( 'List#SPACE#now:' , syncarr ) #NEWLINE#
print ( 'List#SPACE#at#SPACE#start:' , syncarr ) #NEWLINE#
title = re . sub ( '[\\W\\d]+' , '_' , title . strip ( ) ) #NEWLINE#
a [ : 0 ] = b #NEWLINE#
filebytes . fromfile ( open ( '/tmp/test.txt' , 'rb' ) ) #NEWLINE#
table . set_zorder ( 100 ) #NEWLINE#
wavio . write ( 'sine24.wav' , sig , rate , sampwidth = 3 ) #NEWLINE#
os . symlink ( linkto , dstname ) #NEWLINE#
im . file . save ( img_filename , File ( img_temp ) ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
print ( '->#SPACE#%d' % x ) #NEWLINE#
content = mywrapperfunc ( ) #NEWLINE#
root . bind ( '<Control-slash>' , quit ) #NEWLINE#
print ( repr ( t [ 1 ] ) ) #NEWLINE#
ax . plot ( theta , r , 'ro' ) #NEWLINE#
p [ np . argsort ( p ) ] #NEWLINE#
df = ( '2014-03-19#SPACE#' + df ) . astype ( 'datetime64[ns]' ) #NEWLINE#
sorted ( [ 'Egypt' , 'EÌ\x81gypt' , 'US' ] ) #NEWLINE#
int ( b [ : : - 1 ] , 2 ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
app . run ( ) #NEWLINE#
screen . addstr ( 'Testing#SPACE#my#SPACE#curses#SPACE#app' ) #NEWLINE#
setHatchThickness ( 1.0 ) #NEWLINE#
os . environ [ 'CFLAGS' ] += '#SPACE#-Wno-int-conversion' #NEWLINE#
self . queue . add ( item ) #NEWLINE#
savefig ( 'ewma_correction.png' , fmt = 'png' , dpi = 100 ) #NEWLINE#
[ ( item + ( z [ item [ 0 ] ] , ) ) for item in l ] #NEWLINE#
p . stdin . write ( 'create#SPACE#partition#SPACE#primary#SPACE#size=10\n' ) #NEWLINE#
p . stdin . write ( 'format#SPACE#fs=ntfs#SPACE#quick\n' ) #NEWLINE#
p . stdin . write ( 'assign#SPACE#letter=r\n' ) #NEWLINE#
p . stdin . write ( 'exit\n' ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
print ( 'done' ) #NEWLINE#
y . mean ( ) #NEWLINE#
output = [ re . sub ( '\\$_(.*?)\\$|\\$\\^(.*?)\\$' , replace , t ) for t in w ] #NEWLINE#
setattr ( self . __class__ , 'func' , staticmethod ( self . _func ) ) #NEWLINE#
datetime . fromtimestamp ( time . mktime ( time_tuple ) ) #NEWLINE#
driver . find_element_by_id ( 'tinymce' ) . clear ( ) #NEWLINE#
for c1 in itertools . combinations ( c , i ) : #NEWLINE# #INDENT# pass #NEWLINE#
return np . sin ( 2 * np . pi * freq * t ) #NEWLINE#
s . replace ( d , regex = True ) #NEWLINE#
return JsonResponse ( my_data , mimetype = 'application/json' ) #NEWLINE#
df [ 'GameName' ] = df [ 'GameName' ] . map ( mapping ) #NEWLINE#
cherrypy . response . headers [ 'Content-Type' ] = 'application/json' #NEWLINE#
print ( pd . isnull ( df [ 'Originaldataindicator' ] ) ) #NEWLINE#
np . array ( myList ) . dump ( open ( 'array.npy' , 'wb' ) ) #NEWLINE#
sys . path . append ( 'library1.egg' ) #NEWLINE#
sound . play ( ) #NEWLINE#
return df #NEWLINE#
print ( 'Poo' ) #NEWLINE#
pprint ( dict_to_etree ( d ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
YourModel . objects . filter ( some_datetime__date = some_date ) #NEWLINE#
binascii . hexlify ( 'abc\n' ) #NEWLINE#
[ item for item , count in Counter ( a ) . items ( ) if count > 1 ] #NEWLINE#
"""-""" . join ( l ) #NEWLINE#
"""""" . join ( l ) #NEWLINE#
ax . scatter ( a , b , c , c = [ use_colours [ x [ 0 ] ] for x in d ] , s = 50 ) #NEWLINE#
locals ( ) [ 4 ] = 'An#SPACE#integer' #NEWLINE#
sys . path . append ( '/path/to/dir' ) #NEWLINE#
plt . legend ( [ ( dotted_line1 , dotted_line2 ) ] , [ 'My#SPACE#Line' ] ) #NEWLINE#
suite . addTest ( unittest . TestLoader ( ) . loadTestsFromModule ( module ) ) #NEWLINE#
request . GET [ 'MAINS' ] #NEWLINE#
ax . set_xlim ( xlim ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
a . itemset ( ( i , j ) , x ) #NEWLINE#
df . loc [ [ ( df . iloc [ ( i ) , 1 : ] . duplicated ( ) . sum ( ) == 0 ) for i in df . index ] ] #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
path = sys . modules [ self . __module__ ] . __file__ #NEWLINE#
app . register_blueprint ( post_blueprint ) #NEWLINE#
user_details = User . objects . filter ( id__in = users . values_list ( 'id' , flat = True ) ) #NEWLINE#
df [ k ] = df [ k ] . astype ( v ) #NEWLINE#
type ( json . loads ( data ) ) #NEWLINE#
parent . geometry ( '250x250+100+150' ) #NEWLINE#
[ k [ 1 ] for k in d ] #NEWLINE#
button . grid ( row = 1 , column = 4 ) #NEWLINE#
return 'exception#SPACE#%s' % type ( e ) #NEWLINE#
session = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
open ( 'test.html' , 'w' ) . write ( soup . read ( ) ) #NEWLINE#
print ( df . loc [ '2000-6-1' : '2000-6-10' ] ) #NEWLINE#
str ( 165 ) . zfill ( 4 ) #NEWLINE#
img = Image . open ( stream ) #NEWLINE#
print ( 'It#SPACE#does#SPACE#not#SPACE#match' ) #NEWLINE#
plt . hist ( d , 50 , histtype = 'stepfilled' , alpha = 0.7 , cumulative = - 1 ) #NEWLINE#
implements = [ 'yourpackage.IEvent' ] #NEWLINE#
field3 = models . CharField ( max_length = 10 ) #NEWLINE#
np . linalg . norm ( A [ 1 : ] - A [ : - 1 ] , axis = 1 ) #NEWLINE#
locals ( ) . update ( d ) #NEWLINE#
fobj . close ( ) #NEWLINE#
print ( 'OOPS..!!Something#SPACE#went#SPACE#wrong,#SPACE#try#SPACE#again' ) #NEWLINE#
{ { page . get_title } } #NEWLINE#
sum ( np . array ( a ) > 7 ) #NEWLINE#
time . sleep ( 4 ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
return Table . query . filter ( Table . name == con . name ) . first ( ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
print ( 'code' ) #NEWLINE#
[ '0' , '0' , '0' , '0' , '.' , '.' ] , #NEWLINE#
[ '0' , '0' , '0' , '0' , '0' , '.' ] , #NEWLINE#
[ '.' , '0' , '0' , '0' , '0' , '0' ] , #NEWLINE#
[ 1.0055455609592512 , 1.007462347465074 , 1.012826469701654 ] #NEWLINE#
array2 [ : ] = [ e for e in array2 if e not in set1 ] #NEWLINE#
lucky . append ( L [ 0 ] ) #NEWLINE#
r = np . exp ( np . sqrt ( x * x + y * y ) ) #NEWLINE#
[ 1 , 2 ] in a . tolist ( ) #NEWLINE#
Arc = namedtuple ( 'Arc' , [ 'head' , 'tail' ] , verbose = True ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'mysite.settings' ) #NEWLINE#
super ( MyObject , self ) . save ( args , kwargs ) #NEWLINE#
print ( df . groupby ( level = 'class' ) . sum ( ) ) #NEWLINE#
ax . spines [ 'left' ] . set_smart_bounds ( True ) #NEWLINE#
self . mainloop ( ) #NEWLINE#
reduced_basi = [ [ [ 0 , 0 ] ] , [ [ 1 , 0 ] , [ 0 , 1 ] ] , [ [ 2 , 0 ] , [ 1 , 1 ] , [ 0 , 2 ] ] ] #NEWLINE#
print ( '#SPACE##SPACE#{0}:#SPACE#{1}' . format ( name , task . __doc__ ) ) #NEWLINE#
from module1 import A #NEWLINE#
mlab . text3d ( 0 , - 50 , 1550 , 'Z' , color = black , scale = 100.0 ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
ax . plot ( [ 1 , 1 , 1 ] ) #NEWLINE#
return str ( self . as_date ( ) ) #NEWLINE#
min_positions = [ i for i , x in enumerate ( a ) if x == mymin ] #NEWLINE#
s3 = boto3 . resource ( 's3' ) #NEWLINE#
print ( len ( list ( group ) ) , key ) #NEWLINE#
int ( True ) #NEWLINE#
return '' . join ( random . choice ( chars ) for _ in range ( size ) ) #NEWLINE#
table . sort ( functools . cmp_to_key ( team_cmp ) ) #NEWLINE#
warnings . warn ( 'deprecated' , DeprecationWarning ) #NEWLINE#
return { 'address' : address } #NEWLINE#
inserter . execute ( [ { 'column1' : 'value1' } , { 'column1' : 'value2' } ] ) #NEWLINE#
G . add_edge ( prereq , target ) #NEWLINE#
driver = webdriver . PhantomJS ( desired_capabilities = dcap ) #NEWLINE#
print ( foo ( 'x' , 'ignore3' , 'ignore4' ) ) #NEWLINE#
process . stdin . write ( 'date\n' ) #NEWLINE#
logging . info ( 'Response:#SPACE#%s' , str ( response . status_code ) ) #NEWLINE#
print ( form [ 'username' ] ) #NEWLINE#
{ { url_for ( 'static' , filename = 'path/inside/the/static/directory' ) } } #NEWLINE#
headers . append ( ( 'Set-Cookie' , 'name=value' ) ) #NEWLINE#
obj . save ( ) #NEWLINE#
[ 'Illinois' ] #NEWLINE#
con . close ( ) #NEWLINE#
decr ( [ 1 , [ 2 , 3 ] , [ [ 4 ] , 5 ] ] ) #NEWLINE#
json . dumps ( [ p . to_dict ( ) for p in Pasta . query ( Pasta . name == 'Ravioli' ) . fetch ( ) ] ) #NEWLINE#
merged = pd . merge ( df . reset_index ( ) , df , on = 'sseqid' ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
l . append ( '#SPACE#' ) #NEWLINE#
df . loc [ : , ( ( df != df . ix [ 0 ] ) . any ( ) ) ] #NEWLINE#
funcmap [ a ] ( ) #NEWLINE#
return iter ( self . _data ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
df [ 'DateTime' ] = pd . to_datetime ( df [ 'Date' ] . astype ( str ) + 'T' + df [ 'Time' ] ) #NEWLINE#
padding = numpy . zeros ( ( 5 , 3 ) ) #NEWLINE#
json . loads ( a . replace ( '#SPACE#' , ',' ) ) #NEWLINE#
my_list = [ False for i in range ( n ) ] #NEWLINE#
return [ s for s in perms if valid ( s ) ] #NEWLINE#
main ( ) #NEWLINE#
canvas . pack ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
id ( my_dict [ 'a' ] ) #NEWLINE#
plt . subplot ( 153 ) #NEWLINE#
plt . subplot ( 154 ) #NEWLINE#
variable = None #NEWLINE#
numpy . random . seed ( x ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
ax . imshow ( np . random . random ( ( 10 , 10 ) ) , interpolation = 'none' ) #NEWLINE#
painter . rotate ( 90 ) #NEWLINE#
return re . match ( '(?:%s)+$' % '|' . join ( map ( re . escape , letters ) ) , word ) #NEWLINE#
plt . ion ( ) #NEWLINE#
ax . yaxis . set_major_formatter ( matplotlib . ticker . FormatStrFormatter ( '%d' ) ) #NEWLINE#
msg = MIMEText ( 'Here#SPACE#is#SPACE#the#SPACE#body#SPACE#of#SPACE#my#SPACE#message' ) #NEWLINE#
plt . title ( 'Page#SPACE#Two' ) #NEWLINE#
plt . title ( 'Page#SPACE#Three' ) #NEWLINE#
fh . close ( ) #NEWLINE#
values [ i ] = struct . unpack ( endian , f . read ( bytes ) ) [ 0 ] #NEWLINE#
os . chdir ( whatever ) #NEWLINE#
count = sum ( 1 for u in seq if u != 'Z' ) #NEWLINE#
totalist , forselection = itertools . tee ( totalist , 2 ) #NEWLINE#
f . close ( ) #NEWLINE#
_dict [ 'bar' ] = _dict [ 'foo' ] + 1 #NEWLINE#
df [ 'col5' ] [ ( df . index < 5 ) | ( df . index > len ( df ) - 5 ) ] #NEWLINE#
pass #NEWLINE#
df = df . sample ( frac = 1 ) . reset_index ( drop = True ) #NEWLINE#
myVariable = request . POST . get ( 'query' , myVariable ) #NEWLINE#
driver = webdriver . Firefox ( firefox_binary = binary ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
ax . yaxis . set_major_formatter ( matplotlib . ticker . FormatStrFormatter ( '%.8f' ) ) #NEWLINE#
return 'normal' #NEWLINE#
raise forms . ValidationError ( 'That#SPACE#email#SPACE#address#SPACE#already#SPACE#exists.' ) #NEWLINE#
re . split ( '\\W+' , 'Words,#SPACE#words,#SPACE#words.' ) #NEWLINE#
sorted_B = sorted ( B ) #NEWLINE#
[ s . index ( x ) for x in lst ] #NEWLINE#
np . issubdtype ( np . float32 , np . integer ) #NEWLINE#
sys . getrefcount ( object ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . groupby ( 'X' ) [ [ 'Y' , 'Z' ] ] . agg ( mode ) . T . reindex ( columns = cols ) #NEWLINE#
bar = foo . copy ( ) #NEWLINE#
p . store ( open ( 'output.properties' , 'w' ) ) #NEWLINE#
m = re . search ( '(hardware#SPACE#ethernet\\s+(\\S+));\\s+\\S+\\s+(\\S+);' , data ) #NEWLINE#
target = 'target2' #NEWLINE#
some_function ( a = 1 , b = 2 ) == { 'id' : '123' , 'name' : 'abc' } #NEWLINE#
host = connectionDetails . get ( 'host' , 'someDefault' ) #NEWLINE#
print ( line ) #NEWLINE#
module . run_pool ( ) #NEWLINE#
user = request . args . get ( 'user' ) #NEWLINE#
sum ( A , [ ] ) #NEWLINE#
d = { 'abc' : 'abc' , 'def' : { 'ghi' : 'ghi' , 'jkl' : 'jkl' } } #NEWLINE#
ast [ ( [ 0 , 1 , 2 ] ) , ( [ 0 , 1 , 0 ] ) , ( [ 0 , 2 , 2 ] ) , ( 0 ) , : 2 , : 2 ] #NEWLINE#
return same_structure ( a [ 0 ] , b [ 0 ] ) and same_structure ( a [ 1 : ] , b [ 1 : ] ) #NEWLINE#
return a * x ** 2 + b + c * np . sin ( x ) #NEWLINE#
socket . setsockopt ( zmq . IDENTITY , 'R1' ) #NEWLINE#
indices = np . split ( sidx , np . flatnonzero ( np . diff ( arr [ sidx ] ) > 0 ) + 1 ) #NEWLINE#
list ( s ) #NEWLINE#
return dict ( ( k , dol1 . get ( k , no ) + dol2 . get ( k , no ) ) for k in keys ) #NEWLINE#
( idx == 0 ) . shape #NEWLINE#
print ( '{0}x^2#SPACE#+#SPACE#{1}x#SPACE#+#SPACE#{2}' . format ( * z ) ) #NEWLINE#
return current_app . config . get ( 'some_config_value' ) #NEWLINE#
M . A . diagonal ( 2 ) #NEWLINE#
return flask . render_template ( 'bar.html' , text = footext . split ( '\n' ) ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
image_urls . append ( image [ 'src' ] ) #NEWLINE#
self . output_file . write ( what . replace ( '#SPACE#=#SPACE#' , '=' , 1 ) ) #NEWLINE#
data = pandas . read_csv ( 'test.csv' , names = colnames ) #NEWLINE#
lm . prob ( 'rain' , 'the' ) #NEWLINE#
wx . MessageBox ( "Can't#SPACE#open#SPACE#the#SPACE#clipboard" , 'Error' ) #NEWLINE#
list1 = [ ( 'a' , 1 ) , ( 'c' , 3 ) ] #NEWLINE#
sb . xaxis . set_major_locator ( ticker . FixedLocator ( [ 0 , 1 , 2 , 3 ] ) ) #NEWLINE#
A [ : , ( 1 ) ] . sum ( ) #NEWLINE#
df . plot ( kind = 'bar' , alpha = 0.75 , rot = 0 ) #NEWLINE#
wx . StaticBitmap ( panel , - 1 , jpg , ( 10 , pos ) , ( jpg . GetWidth ( ) , jpg . GetHeight ( ) ) ) #NEWLINE#
map ( complex , row ) #NEWLINE#
c = [ ( 'Adi_%s' % s ) for s in a ] #NEWLINE#
ax . spines [ 'bottom' ] . set_linewidth ( 3 ) #NEWLINE#
def func ( arr ) : #NEWLINE# #INDENT# return arr [ 0 ] #NEWLINE#
is_valid_python ( '1#SPACE#///#SPACE#2' ) #NEWLINE#
mypoly = Point ( 0 , 0 ) #NEWLINE#
logging . getLogger ( 'boto' ) . setLevel ( logging . CRITICAL ) #NEWLINE#
thisFile = __file__ #NEWLINE#
dllname = os . path . dirname ( __file__ ) #NEWLINE#
nid = Column ( Integer , primary_key = True ) #NEWLINE#
return [ ( item , the_list . count ( item ) ) for item in sorted ( set ( the_list ) ) ] #NEWLINE#
fulldate = fulldate + datetime . timedelta ( milliseconds = 500 ) #NEWLINE#
s . splitlines ( ) #NEWLINE#
R3 - - R4 - - R5 #NEWLINE#
master . grid_rowconfigure ( 1 , weight = 1 ) #NEWLINE#
return [ ( x + 1 ) for x in l ] #NEWLINE#
zip ( a [ : : 2 ] , a [ 1 : : 2 ] ) #NEWLINE#
r = { ( 0 , 100 ) : 'foo' , ( 100 , 200 ) : 'bar' } #NEWLINE#
sys . setdefaultencoding ( 'UTF-8' ) #NEWLINE#
return [ val for sublist in mylist for val in sublist ] #NEWLINE#
[ [ 1 , 6 ] , [ 2 , 7 ] , [ 3 , 8 ] , [ 4 , 9 ] , [ 5 , 0 ] ] #NEWLINE#
df . set_index ( df . merged_ix , inplace = True ) #NEWLINE#
5195181354985216 / 1000000000000000 #NEWLINE#
a [ np . ix_ ( * [ list ( range ( 0 , i , 2 ) ) for i in a . shape ] ) ] #NEWLINE#
var = defaultdict ( set ) #NEWLINE#
PyPDF2 . PdfFileReader ( open ( 'testfile.txt' , 'rb' ) ) #NEWLINE#
s . connect ( ( '83.94.121.246' , 443 ) ) #NEWLINE#
np . linspace ( 3 , 4 , 10 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
common . effectList . append ( { 'name' : 'echo' } ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
matches = match ( [ 1 , 2 , 3 ] , [ 0 , 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
G . add_edge ( 'C' , 'F' ) #NEWLINE#
y . shape #NEWLINE#
sorted ( listofLines , key = extract_time ) #NEWLINE#
np . random . uniform ( - 10 , 10 ) #NEWLINE#
ax . plot ( x , y , '-wo' ) #NEWLINE#
list ( [ _ for _ in [ 'hello' , 'good1' , '1234' ] if not _ . isdigit ( ) ] ) #NEWLINE#
print ( '%s(%d):#SPACE#%s' % ( bname , lineno , linecache . getline ( filename , lineno ) ) , #NEWLINE# end = '#SPACE#' ) #NEWLINE#
listA = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
img . save ( '/tmp/out.jpg' ) #NEWLINE#
mean_data = np . loadtxt ( '/Users/daydreamer/data/mean' , delimiter = ',' ) #NEWLINE#
del mydict [ k ] #NEWLINE#
store . close ( ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
del recursive_dict [ key ] #NEWLINE#
re . search ( '((?:ABC){5})(DEF)' , 'ABCABCABCABCABCDEF' ) . group ( 2 ) #NEWLINE#
re . search ( '[0-9]*#SPACE#(ABC(...))' , '123#SPACE#ABCDEF#SPACE#456' ) . group ( 2 ) #NEWLINE#
[ ( 'a' , '1' ) , ( 'a' , '12' ) , ( 'a' , '3' ) ] , #NEWLINE#
X . T #NEWLINE#
date = models . DateField ( _ ( 'Date' ) , auto_now_add = True ) #NEWLINE#
return text . translate ( None , 'aeiouAEIOU' ) #NEWLINE#
patjunk = re . compile ( '<.*?>|Â\xa0|&' , re . DOTALL | re . M ) #NEWLINE#
print ( 'STARTUP#SPACE#FAILED' ) #NEWLINE#
print ( 'DONE' ) #NEWLINE#
fp . seek ( 0 ) #NEWLINE#
print ( 'ok' ) #NEWLINE#
lines . sort ( key = second_column ) #NEWLINE#
print ( ame_to_bre ( text ) ) #NEWLINE#
Config . set ( 'graphics' , 'height' , '200' ) #NEWLINE#
ax . set_xlabel ( '$t^2$' ) #NEWLINE#
Frame3 = Frame ( master , bg = 'green' ) #NEWLINE#
w = wave . open ( 'foo.wav' , 'w' ) #NEWLINE#
def sxor ( s1 , s2 ) : #NEWLINE# #INDENT# return '' . join ( chr ( ord ( a ) ^ ord ( b ) ) for a , b in zip ( s1 , s2 ) ) #NEWLINE#
setup_logger ( 'log2' , 'C:\\temp\\log2.log' ) #NEWLINE#
[ '2' , '2' ] #NEWLINE#
b = [ i for i in a ] #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
imresize ( np . ones ( ( 1000 , 1000 ) ) , 50 ) . shape #NEWLINE#
bool ( 'False' ) #NEWLINE#
'abc%d' % 9 #NEWLINE#
my_insort_left ( data , ( 'brown' , 7 ) ) #NEWLINE#
wx . Frame . __init__ ( self , parent , id , title , size = ( 600 , 600 ) ) #NEWLINE#
return '' . join ( [ chr ( int ( s [ i : i + 3 ] ) ) for i in range ( 0 , len ( s ) , 3 ) ] ) #NEWLINE#
[ 'Ferrari' , '150,000' , '10,000km' ] , [ 'Ferrari' , '200,000' , '10,000km' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
fig . canvas . mpl_connect ( 'button_release_event' , update_position ) #NEWLINE#
letters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE#
return any ( [ ( sorted ( sub ) in range ( min ( l ) , max ( l ) + 1 ) ) for sub in subs ] ) #NEWLINE#
ldap . set_option ( ldap . OPT_DEBUG_LEVEL , 0 ) #NEWLINE#
k , _ , _ , _ = np . linalg . lstsq ( M , y ) #NEWLINE#
dictionary_of_bindings = { x : variables [ x ] for x in ( 'foo' , 'flip' ) } #NEWLINE#
print ( '<a#SPACE#href="{url}">{url}</a>' . format ( url = my_url ) ) #NEWLINE#
dta . co2 . interpolate ( inplace = True ) #NEWLINE#
a [ i : j ] #NEWLINE#
connlisten_thread . start ( ) #NEWLINE#
a = np . array ( [ 1 , 3 , 5 ] ) #NEWLINE#
print ( foo . bar ( ) ) #NEWLINE#
msg [ 'Subject' ] = 'Auto#SPACE#Hella#SPACE#Restart#SPACE#Report#SPACE#' + sys . argv [ 1 ] #NEWLINE#
self . yet = True #NEWLINE#
plt . ylabel ( 'Cumulative#SPACE#Frequency' ) #NEWLINE#
return A [ np . arange ( m ) , idx ] #NEWLINE#
print ( line . strip ( ) ) #NEWLINE#
plt . title ( 'Total#SPACE#Delay#SPACE#Incident#SPACE#Caused#SPACE#by#SPACE#Carrier' ) #NEWLINE#
[ var for var in l if var ] #NEWLINE#
'y' , 'yes' , 't' , 'true' , 'on' , '1' #NEWLINE#
np . dot ( X , np . dot ( M , X . T ) ) . trace ( ) #NEWLINE#
x ( 'pwd\ncd#SPACE#/\npwd' , shell = True ) #NEWLINE#
from functools import reduce #NEWLINE# df_final = reduce ( lambda left , right : pd . merge ( left , right , on = 'name' ) , dfs ) #NEWLINE#
ax . set_xlim ( [ x [ 0 ] , x [ 1 ] ] ) #NEWLINE#
( 220922000 , 2428 ) , #NEWLINE#
( 220922001 , 2429 ) , #NEWLINE#
( 220922563 , 2991 ) , #NEWLINE#
( 220922564 , 2992 ) , #NEWLINE#
( 220922565 , 2993 ) , #NEWLINE#
( 220922566 , 2994 ) , #NEWLINE#
( 220922575 , 3003 ) , #NEWLINE#
( 220923958 , 4386 ) , #NEWLINE#
( 220924161 , 4589 ) , #NEWLINE#
p = Popen ( [ 'espeak' , '-b' , '1' ] , stdin = PIPE , stdout = DEVNULL , stderr = STDOUT ) #NEWLINE#
plt . tick_params ( axis = 'y' , labelsize = 8 ) #NEWLINE#
lines = ax . plot ( list ( range ( 10 ) ) , np . random . randn ( 10 ) , list ( range ( 10 ) ) , np . #NEWLINE# random . randn ( 10 ) ) #NEWLINE#
xml_tree = etree . parse ( xml_file ) #NEWLINE#
print ( is_shifted_copy ( [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ) ) #NEWLINE#
return HttpResponse ( status = 400 ) #NEWLINE#
plt . plot_date ( dates , values , linestyle = 'solid' , marker = 'None' ) #NEWLINE#
text . pack ( ) #NEWLINE#
return [ audio [ i // 2 ] for i in range ( 0 , len ( audio ) * 2 ) ] #NEWLINE#
msg [ 'Subject' ] = Header ( subject ) #NEWLINE#
df = pd . concat ( series , axis = 1 ) #NEWLINE#
pipeline . fit ( X [ : , ( np . newaxis ) ] , y ) #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
y = np . array ( [ 0 , 0 , 1 , 1 ] ) #NEWLINE#
logging . info ( 'Tick' ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
process_names = [ proc . name ( ) for proc in psutil . process_iter ( ) ] #NEWLINE#
misc [ 'product_desc' ] = misc [ 'product_desc' ] . str . replace ( '\n' , '' ) #NEWLINE#
s . replace ( [ 'ape' , 'monkey' ] , [ 'lion' , 'panda' ] ) #NEWLINE#
return a . repeat ( 2 , axis = 1 ) #NEWLINE#
return True #NEWLINE#
self . SetSize ( ( 300 , 200 ) ) #NEWLINE#
b = tuple ( a ) #NEWLINE#
od = OrderedDict ( ( ( 'a' , 'first' ) , ( 'b' , 'second' ) ) ) #NEWLINE#
model . fit ( [ X1 , X2 , X3 ] ) #NEWLINE#
plt . imshow ( g , cmap = 'Greys' , interpolation = 'nearest' ) #NEWLINE#
[ '1' , '2' ] #NEWLINE#
return ',' . join ( reduce ( Rangify , zip ( zones , deltas ) , ( [ ] , None ) ) [ 0 ] ) #NEWLINE#
description = description . replace ( '|' , '' ) #NEWLINE#
words = word_file . read ( ) . split ( ) #NEWLINE#
obj . save ( ) #NEWLINE#
sess . query ( Tag . name ) . distinct ( ) #NEWLINE#
[ set ( [ 'a' ] ) , set ( [ 'b' ] ) ] #NEWLINE#
im . save ( sys . argv [ 2 ] ) #NEWLINE#
bool ( [ 1 , 2 ] ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
self . Bind ( wx . EVT_MOTION , self . on_motion ) #NEWLINE#
cb . set_label ( 'Cbar#SPACE#Label#SPACE#Here' ) #NEWLINE#
y_pred = model . predict ( X_test ) #NEWLINE#
pub_dict [ p . key ] . append ( p ) #NEWLINE#
print ( data ) #NEWLINE#
return [ j for j in range ( 2 , n ) if isprime ( n ) ] #NEWLINE#
lis = [ 'aa' , 'bb' , 'cc' ] #NEWLINE#
logger . info ( 'user#SPACE#stop' ) #NEWLINE#
super ( Composer , self ) . save ( ) #NEWLINE#
c = itertools . chain ( a , b ) #NEWLINE#
raise ValueError ( 'sorry,#SPACE#you#SPACE#lose' ) #NEWLINE#
df1 . plot ( ax = axes [ 0 , 0 ] ) #NEWLINE#
'%0*d' % ( fill , your_int ) #NEWLINE#
[ '/foo/bar/x1[1]' , '/foo/bar/x1[2]' ] #NEWLINE#
ax . set_ylabel ( 'Variance#SPACE#of#SPACE#log#SPACE#wages' ) #NEWLINE#
r = r . astype ( [ ( 'name' , '|S30' ) , ( 'age' , '<f4' ) , ( 'weight' , '<f4' ) ] ) #NEWLINE# print ( r ) #NEWLINE#
print ( df1 . groupby ( [ 'Name' , 'City' ] ) [ [ 'Name' , 'City' ] ] . count ( ) ) #NEWLINE#
self . wfile . write ( 'Hello#SPACE#World!' ) #NEWLINE#
arr [ 0 ] . append ( 'test' ) #NEWLINE#
final_dict = { key : t [ key ] for key in t if key not in [ key1 , key2 ] } #NEWLINE#
changeX ( ) #NEWLINE#
tar . close ( ) #NEWLINE#
item . find ( namespace + 'title' ) . text #NEWLINE#
dict ( re . findall ( pattern , json_string ) ) #NEWLINE#
br . form [ 'quantityTextbox' ] = '10' #NEWLINE#
br . form [ 'symbolTextbox' ] = 'KO' #NEWLINE#
df . ix [ df . Col1 . isin ( search_list ) ] #NEWLINE#
self . app = app . app . test_client ( ) #NEWLINE#
lock = threading . Lock ( ) #NEWLINE#
ax2 . get_yaxis ( ) . set_animated ( True ) #NEWLINE#
[ cube ( i ) for i in range ( 1 , 11 ) ] #NEWLINE#
int ( 1.0 / - 2 ) #NEWLINE#
ax1 . yaxis . set_major_locator ( y1loc ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
ipython = get_ipython ( ) #NEWLINE#
nones ( 'Something' , None , 'N' , False ) #NEWLINE#
s = s . split ( '\n' , 1 ) [ - 1 ] #NEWLINE#
df = pd . read_csv ( 'student.csv' ) #NEWLINE#
import lib1 , lib2 , lib3 , lib4 , lib5 #NEWLINE#
plt . subplots_adjust ( left = 0.25 ) #NEWLINE#
return func ( a ) #NEWLINE#
img . save ( filename = output_destination ) #NEWLINE#
prettyp ( CrazyClass ( ) ) #NEWLINE#
myfunc ( a , b , c , d , e , f ) #NEWLINE#
next ( x for x in seq if predicate ( x ) ) #NEWLINE#
ftp . cwd ( path ) #NEWLINE#
self . multlineCommands = Forward ( ) #NEWLINE#
f = open ( 'path_to_file' , 'w' ) #NEWLINE#
root = Element ( 'graph' , nsmap = NSMAP ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
execlist [ i ] [ 4 ] = mydelay #NEWLINE#
j . environment . filters . update ( { 'is_list' : is_list } ) #NEWLINE#
subprocess . call ( ( 'someprog.exe' , str ( i ) ) ) #NEWLINE#

"""#SPACE#""" . join ( args ) #NEWLINE#
x , y = zip ( * points ) #NEWLINE#
x . append ( [ ] ) #NEWLINE#
Z [ xidx , yidx ] = raw [ : , ( 2 ) ] #NEWLINE#
return HttpResponseRedirect ( '/thanks/' ) #NEWLINE#
temp = temp [ 1 : ] #NEWLINE#
result += struct . pack ( 'b' , c ) #NEWLINE#
return self . model . objects . filter ( active = True ) #NEWLINE#
r = requests . get ( 'http://www.google.co.jp/' , proxies = proxies , auth = auth ) #NEWLINE#
html = urllib . request . urlopen ( 'http://random.yahoo.com/bin/ryl' ) . read ( ) #NEWLINE#
df . iloc [ 2 : 6 ] #NEWLINE#
[ 'asdguIux' , 'Director,#SPACE#Camera#SPACE#Operator,#SPACE#Editor,#SPACE#VFX' , 'John#SPACE#Smith' , '' , None ] #NEWLINE#
Spain = 'ES' #NEWLINE#
einsum ( 'i,i' , x , y ) #NEWLINE#
[ 'hey' , 'ho!' ] #NEWLINE#
source_suffix = [ '.rst' , '.md' ] #NEWLINE#
print ( map ( itemgetter ( 1 ) , g ) ) #NEWLINE#
print ( ( r . status_code , r . reason ) ) #NEWLINE#
mango . settings . foo = 'bar' #NEWLINE#
super ( ) . __init__ ( a = 1 , b = 2 , q = 3 ) #NEWLINE#
xi , ti = np . meshgrid ( xi , ti ) #NEWLINE#
f . write ( 'killed' ) #NEWLINE#
pyplot . savefig ( 'plt.png' ) #NEWLINE#
return chain . from_iterable ( combinations ( xs , n ) for n in range ( len ( xs ) + 1 ) ) #NEWLINE#
fout . write ( '#SPACE#' . join ( row ) ) #NEWLINE#
np . diagonal ( np . rollaxis ( np . tensordot ( a , a , ( 1 , 1 ) ) , 1 ) , 0 , 2 ) . T #NEWLINE#
Gtk . main ( ) #NEWLINE#
f . close ( ) #NEWLINE#
df . sort ( [ 'ticker' , 'date' ] , inplace = True ) #NEWLINE#
key = self . request . get ( 'k' ) #NEWLINE#
struct . unpack ( '>BBBBBBBB' , N ) #NEWLINE#
dict ( d1 , ** d2 ) #NEWLINE#
window = collections . deque ( sorted ( window ) , maxlen = WINDOW_SIZE ) #NEWLINE#
self . assertEqual ( os . environ . get ( 'HELLO' ) , 'WORLD' ) #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 8 , 10 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
signal . pause ( ) #NEWLINE#
[ ( k , len ( list ( g ) ) ) for k , g in groupby ( s ) ] #NEWLINE#
serverSocket . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
Counter ( item for lst in listOfLists for item in set ( lst ) ) #NEWLINE#
subprocess . Popen ( 'taskkill#SPACE#/PID#SPACE#' + str ( p . pid ) , stdout = fh , stderr = fh ) #NEWLINE#
'xyz/foo/bar' . format ( Pluralizer ( 1 ) ) == 'xyzfoo' #NEWLINE#
DF = pd . DataFrame ( { 'val' : [ 1 , 1 , 1 , 2 , 2 , 3 , 3 ] } ) #NEWLINE#
self . canvas . after ( 50 , self . check_queue ) #NEWLINE#
str ( numpy . array ( [ 0.24 ] ) [ 0 ] ) #NEWLINE#
label . pack ( side = 'top' , fill = 'both' , padx = 10 , pady = 10 ) #NEWLINE#
self . assertEqual ( resp . status_code , 200 ) #NEWLINE#
datetime . datetime . strptime ( time_str , '%Y-%m-%dT%H:%M:%S%z' ) #NEWLINE#
f . strip ( '\ufeff' ) #NEWLINE#
lines = [ map ( float , l [ : 3 ] ) for l in lines if len ( l ) >= 3 ] #NEWLINE#
[ 0 ] [ 1 ] [ 2 ] #NEWLINE#
print ( recursive_lambda ( lambda a , b : b * a ( a , b - 1 ) if b > 0 else 1 ) ( 6 ) ) #NEWLINE#
return list ( set ( a ) & set ( b ) ) #NEWLINE#
cursor . execute ( query ) #NEWLINE#
[ 'Sun,#SPACE#16#SPACE#Jun#SPACE#2013#SPACE#01:00:00#SPACE#+0000' , 19.5499992371 , '1#SPACE#sold' ] , #NEWLINE#
[ 'Sun,#SPACE#23#SPACE#Jun#SPACE#2013#SPACE#01:00:00#SPACE#+0000' , 15.5420341492 , '2#SPACE#sold' ] , #NEWLINE#
[ 'Thu,#SPACE#27#SPACE#Jun#SPACE#2013#SPACE#01:00:00#SPACE#+0000' , 8.79045295715 , '3#SPACE#sold' ] , #NEWLINE#
"""Lorem#SPACE#ipsum#SPACE#dolor#SPACE#sit#SPACE#amet,#SPACE#consectetur#SPACE#adipisicing#SPACE#elit,#SPACE#sed#SPACE#do#SPACE#eiusmod#SPACE#tempor#SPACE#incididunt#SPACE#ut#SPACE#labore#SPACE#et#SPACE#dolore#SPACE#magna#SPACE#aliqua.#SPACE#Ut#SPACE#enim#SPACE#ad#SPACE#minim#SPACE#veniam,#SPACE#quis#SPACE#nostrud#SPACE#exercitation#SPACE#ullamco#SPACE#laboris#SPACE#nisi#SPACE#ut#SPACE#aliquip#SPACE#ex#SPACE#ea#SPACE#commodo#SPACE#consequat.#SPACE#Duis#SPACE#aute#SPACE#irure#SPACE#dolor#SPACE#in#SPACE#reprehenderit#SPACE#in#SPACE#voluptate#SPACE#velit#SPACE#esse#SPACE#cillum#SPACE#dolore#SPACE#eu#SPACE#fugiat#SPACE#nulla#SPACE#pariatur.#SPACE#Excepteur#SPACE#sint#SPACE#occaecat#SPACE#cupidatat#SPACE#non#SPACE#proident,#SPACE#sunt#SPACE#in#SPACE#culpa#SPACE#qui#SPACE#officia#SPACE#deserunt#SPACE#mollit#SPACE#anim#SPACE#id#SPACE#est#SPACE#laborum.""" #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#results#SPACE#(value)#SPACE##SPACE#VALUES#SPACE#(?)' , ( myvalue , ) ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sys . getsizeof ( b ) #NEWLINE#
data . append ( item ) #NEWLINE#
struct . pack ( '>d' , scipy . nan ) . encode ( 'hex_codec' ) #NEWLINE#
return int ( value ) #NEWLINE#
np . moveaxis ( np . indices ( dims ) , 0 , - 1 ) #NEWLINE#
model . add ( Dense ( X . shape [ 1 ] , activation = 'relu' ) ) #NEWLINE#
a = dict . fromkeys ( list ( range ( 4000000 ) ) ) #NEWLINE#
printf ( '\n' ) #NEWLINE#
df [ 'newcolumn' ] = df . apply ( fab , axis = 1 ) #NEWLINE#
print ( 'Matched:' , match . group ( 0 ) ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
for letter in name : #NEWLINE# #INDENT# if letter in vowel : #NEWLINE# #INDENT# #INDENT# score += 1 #NEWLINE#
r . sub ( '' , 'a\n\n\n\n#SPACE#b\n#SPACE#c' ) #NEWLINE#
b = [ 6 , 7 , 8 , 9 , 0 ] #NEWLINE#
soup = BeautifulSoup ( browser . page_source ) #NEWLINE#
m . close ( ) #NEWLINE#
data [ 'om_points' ] #NEWLINE#
lst = [ [ 'hate' , '10' ] , [ 'would' , '5' ] , [ 'hello' , '10' ] , [ 'pigeon' , '1' ] , [ #NEWLINE# 'adore' , '10' ] ] #NEWLINE# dict ( lst ) #NEWLINE#
[ ( '%x' % ord ( c ) ) for c in chars ] #NEWLINE#
PATH = '/Applications/Postgres.app/Contents/Versions/latest/bin:$PATH' #NEWLINE#
print ( 'Definitely#SPACE#no' ) #NEWLINE#
df [ 'Name' ] . isin ( [ 'Alice' , 'Bob' ] ) #NEWLINE# df [ df . Name . isin ( [ 'Alice' , 'Bob' ] ) ] #NEWLINE#
HOST_MIDDLEWARE_URLCONF_MAP = { 'mysite1.com' : 'effbot.urls1' } #NEWLINE#
return np . sqrt ( np . sum ( w ** 2 , axis = 1 ) ) #NEWLINE#
self . httpd . stop ( ) #NEWLINE#
app = webapp2 . WSGIApplication ( [ ( '/' , MainPage ) ] , debug = True ) #NEWLINE#
app = pywinauto . Application ( ) . Start ( 'npp.6.8.3.Installer.exe' ) #NEWLINE#
{ x for x in a if x == x } #NEWLINE#
return render ( request , 'posts/post_detail.html' , context ) #NEWLINE#
plt . bar ( list ( N . keys ( ) ) , list ( N . values ( ) ) , align = 'center' ) #NEWLINE#
dictionary = dict ( zip ( keys , values ) ) #NEWLINE#
Thread ( target = f , args = ( p . stdout , gzip . open ( 'out.gz' , 'wb' ) ) ) . start ( ) #NEWLINE#
process . stdout . close ( ) #NEWLINE#
from sklearn . cluster import KMeans #NEWLINE#
return list ( itertools . chain . from_iterable ( [ l [ x ] for x in lslice ] ) ) #NEWLINE#
sys . stdout . write ( s ) #NEWLINE#
print ( json . dumps ( { '4' : 5 , '6' : 7 } , sort_keys = True , indent = 4 ) ) #NEWLINE#
print ( json . dumps ( foo ) ) #NEWLINE#
os . startfile ( filename ) #NEWLINE#
print ( 'done' ) #NEWLINE#
"""my#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#string""" . trim ( ) . split ( '\\s+' ) #NEWLINE#
print ( "I#SPACE#don't#SPACE#know#SPACE#what#SPACE#I#SPACE#am#SPACE#doing" ) #NEWLINE#
parser . parse_args ( [ '-h' ] ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled | QtCore . Qt . ItemIsSelectable | QtCore . Qt . ItemIsEditable #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
ws [ 'B2' ] . alignment = Alignment ( horizontal = 'justify' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
return ( x + 1 for x in l ) #NEWLINE#
print ( '#SPACE#' . join ( '%5d' % nCk ( n , k ) for k in range ( n + 1 ) ) . center ( 100 ) ) #NEWLINE#
df = pd . DataFrame ( df . split ( '\n' ) ) #NEWLINE#
numpy . ndarray ( ( 5 , 5 ) ) #NEWLINE#
user = models . OneToOneField ( User ) #NEWLINE#
for k , v in d . items ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
pyglet . app . run ( ) #NEWLINE#
return self . _stack . pop ( ) #NEWLINE#
x [ 'cat' ] = x . cat . map ( lambda x : my_map [ x ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
ggplot ( aes ( x = 'x' , weight = 'y' ) , df ) + geom_bar ( ) #NEWLINE#
np . savetxt ( 'myfile.txt' , np . c_ [ x , y , z ] ) #NEWLINE#
( 54.458333 , 17.041667 , 31.945 ) , #NEWLINE#
b . py #NEWLINE#
"""°""" #NEWLINE#
print ( newdate . strftime ( '%Y%m%d' ) ) #NEWLINE#
config . set ( 'section_b' , 'meal_val' , 'spam' ) #NEWLINE#
print ( '%*s,#SPACE#blah' % ( max_title_width , column ) ) #NEWLINE#
webtail #NEWLINE#
'%.2f' % 2606.89579999999 #NEWLINE#
[ item for item in 'abc' ] #NEWLINE#
stopwords = '|' . join ( f . read ( ) . lower ( ) . split ( ) ) #NEWLINE#
""""E:/ABC/SEM#SPACE#2/testfiles/all.txt\"""" #NEWLINE#
init = tf . placeholder ( tf . float32 , shape = ( ) , name = 'init' ) #NEWLINE#
list ( range ( m , ( count + 1 ) * m , m ) ) #NEWLINE#
main ( ) #NEWLINE#
return func ( x ) #NEWLINE#
print ( sys . exc_info ( ) [ 2 ] . tb_next . tb_frame . f_locals ) #NEWLINE#
l = [ 1 , 2 , 3 ] #NEWLINE#
datetime ( 2015 , 12 , 2 , 0 , 0 ) , datetime . datetime ( 2015 , 12 , 8 , 0 , 0 ) #NEWLINE#
df . drop_duplicates ( 'R' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
f . write ( text ) #NEWLINE#
my_list = [ [ 'a' ] , [ 'a' ] , [ 'b' ] , [ 'c' ] ] #NEWLINE#
parser . add_argument ( '-k' , '--arg-for-wrapper' ) #NEWLINE#
d . update ( locals ( ) ) #NEWLINE#
Notify . uninit ( ) #NEWLINE#
{ 'price' : '$3' , 'name' : 'Nice#SPACE#name' } #NEWLINE#
celery . config_from_object ( app . config ) #NEWLINE#
super ( ) . init ( ) #NEWLINE#
print ( '{},#SPACE#{}' . format ( rgb ( 'aabbcc' ) , rgb ( 'AABBCC' ) ) ) #NEWLINE#
def getwidth ( ) : #NEWLINE# #INDENT# print ( ( lbl . winfo_width ( ) , lbl . winfo_height ( ) ) ) #NEWLINE#
connection = cx_Oracle . connect ( 'username' , 'password' , dsn ) #NEWLINE#
len ( a ) #NEWLINE#
a . append ( row ) #NEWLINE#
self . lfdata . grid ( column = 0 , columnspan = 3 , row = 1 , sticky = 'nsew' ) #NEWLINE#
print ( df . attr . iloc [ i ] ) #NEWLINE#
data = np . random . random ( ( int ( 1000.0 ) , int ( 100000.0 ) ) ) #NEWLINE#
any ( ( a [ : ] == [ 1 , 2 ] ) . all ( 1 ) ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
int ( line [ clolumn1 ] , 16 ) == 71381075 #NEWLINE#
values ( 'tag3' , 'red' , '2016-01-01T12:00:00' , '2016-01-01T12:00:11' , 13001 ) #NEWLINE#
return '{0}' . format ( list ( request . args . keys ( ) ) ) #NEWLINE#
logger = logging . getLogger ( 'my_logger' ) #NEWLINE#
a . count ( 'dogs' ) #NEWLINE#
read_html ( 'http://money.cnn.com/data/hotstocks/' , header = 0 , flavor = 'bs4' ) #NEWLINE#
np . vstack ( ( a , a , a ) ) #NEWLINE#
a = 'Русский#SPACE#ÐµÐº' #NEWLINE#
doctest . testmod ( ) #NEWLINE#
f . write ( s + '\n' ) #NEWLINE#
id = Column ( 'TS_TEST_ID' , Integer , primary_key = True ) #NEWLINE#
plt . setp ( plt . xticks ( ) [ 1 ] , rotation = 90 ) #NEWLINE#
cursor . execute ( qSQL ) #NEWLINE#
print ( json . dumps ( data , default = date_handler ) ) #NEWLINE#
frame1 . axes . get_yaxis ( ) . set_ticks ( [ ] ) #NEWLINE#
arr . append ( list ( df . iloc [ i ] ) ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
[ map ( counter . __getitem__ , all_features ) for counter in counters ] #NEWLINE#
file . close ( ) #NEWLINE#
client_sock . send ( '\n' ) #NEWLINE#
client . connect ( 'localhost' , 4444 ) #NEWLINE#
my_list = [ 'a' , 'a' , 'b' , 'c' , 'd' , 'a' , 'e' , 'd' , 'f' , 'e' ] #NEWLINE#
~ pd . isnull ( df [ list_of_cols ] ) #NEWLINE#
print ( '"{0}"#SPACE#=#SPACE#{1}' . format ( k , d [ k ] ) ) #NEWLINE#
print ( '' . join ( my_encoder ( my_string ) ) ) #NEWLINE#
return 2 * frexp ( n ) [ 0 ] #NEWLINE#
gdata . gauth . AeLoad ( users . get_current_user ( ) . user_id ( ) ) #NEWLINE#
G = nx . MultiGraph ( ) #NEWLINE#
count_array = [ int ( i . count ) for i in mvv_list . collect ( ) ] #NEWLINE#
p = re . compile ( '\\(\\?P<(.*?)>\\\\w\\+\\)' ) #NEWLINE#
df . stack ( ) #NEWLINE#
sock . close ( ) #NEWLINE#
np . vstack ( [ np . diag ( c [ : , ( i ) , ( i ) ] ) for i in range ( A . shape [ 0 ] ) ] ) . T #NEWLINE#
f = open ( filename ) #NEWLINE#
AuthorFormSet = modelformset_factory ( Author , extra = 2 , form = AuthorForm ) #NEWLINE#
"""[{"id":#SPACE#2,#SPACE#"name":#SPACE#"squats",#SPACE#"wrs":#SPACE#[["55",#SPACE#9]]}]""" . replace ( '\\"' , '"' ) #NEWLINE#
return qs . filter ( user = request . user ) #NEWLINE#
screen . mainloop ( ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
result [ numpy . argsort ( A ) ] = numpy . sort ( B ) #NEWLINE#
coords . fk5 . to_string ( 'hmsdms' ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
return ',#SPACE#' . join ( l [ : - 1 ] ) + ',#SPACE#and#SPACE#' + l [ - 1 ] #NEWLINE#
class ItemPersistencePipeline ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
[ [ 'Hello2.53' ] [ 'World3.62' ] ] #NEWLINE#
raise ValueError ( 'Invalid#SPACE#Unicode#SPACE#character:#SPACE#' + hex ( codepoint ) ) #NEWLINE#
print ( getpass . getuser ( ) ) #NEWLINE#
print ( queue . method . message_count ) #NEWLINE#
item . set_fontsize ( 20 ) #NEWLINE#
cal_window . show_all ( ) #NEWLINE#
test_moduleA . py #NEWLINE#
mpl . ticker . MaxNLocator . __init__ ( self , nbins = 9 , steps = [ 1 , 2 , 5 , 10 ] ) #NEWLINE#
df [ df [ 'that' ] < 20 ] [ 'date' ] #NEWLINE#
main ( ) #NEWLINE#
dict ( ( k , json . dumps ( v ) ) for k , v in list ( json . loads ( val ) . items ( ) ) ) #NEWLINE#
signal . signal ( signal . SIGALRM , old_handler ) #NEWLINE#
process . stdout . write ( 'Successfully#SPACE#set#SPACE#NODE_ENV#SPACE#to#SPACE#production' + '\n' ) #NEWLINE#
cv2 . namedWindow ( 'opencv' ) #NEWLINE#
request . FILES #NEWLINE#
( m . T * c ) . T #NEWLINE#
self . lineedit . setText ( '' ) #NEWLINE#
df . iloc [ idx ] #NEWLINE#
admin . site . register ( Publisher ) #NEWLINE#
rows = soup . find_all ( 'tr' , { 'class' : re . compile ( 'class1.*' ) } ) #NEWLINE#
new_list = list ( range ( 1 , 6 ) ) + list ( range ( 15 , 20 ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
tk . Button ( root , text = 'Close' , command = root . quit ) . pack ( side = 'top' , pady = 5 ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
download ( url , 'downloaded_file.py' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
os . chdir ( storetodir ) #NEWLINE#
axborder . set_ylim ( binimg . shape [ 0 ] , - 1 ) #NEWLINE#
data = np . array ( [ [ 'a' , 'b' ] , [ 'c' , 'd' ] ] ) #NEWLINE#
print ( codeproc . stdout . read ( ) ) #NEWLINE#
image = Image . open ( f ) #NEWLINE#
dset1 . apply ( func , axis = 1 ) #NEWLINE#
layout . addWidget ( self . label ) #NEWLINE#
repeat ( lambda : bar ( 42 ) ) #NEWLINE#
reader = csv . reader ( open ( '4956984.csv' , 'rb' ) ) #NEWLINE#
first_num , first_arr , second_num , second_arr = generate_arrangements ( data ) #NEWLINE#
nhb = random . choice ( range ( 0 , len ( A ) ) ) #NEWLINE#
print ( re . findall ( 'bus|car|\\w' , s ) ) #NEWLINE#
parser . add_argument ( '--test2' , action = CustomAction ) #NEWLINE#
list_of_lists = [ [ 'aa' , '2' ] , [ 'bb' , '3' ] ] #NEWLINE#
connection . commit ( ) #NEWLINE#
print ( ( 'la#SPACE#la#SPACE#la.' , next ( myCounter ) , 'foo#SPACE#foo#SPACE#foo' , next ( myCounter ) ) ) #NEWLINE#
plt . ylabel ( 'ylabel' ) #NEWLINE#
elapsed2s . append ( elapsed2 ) #NEWLINE#
elapsed1s . append ( elapsed1 ) #NEWLINE#
sys . stdout . write ( '#SPACE##SPACE##SPACE##SPACE#"datapoints":[\n' ) #NEWLINE#
sys . stdout . write ( ',\n' ) #NEWLINE#
d [ key ] . append ( row [ 1 : ] ) #NEWLINE#
subsampled = df . ix [ ( choice ( x ) for x in grouped . groups . values ( ) ) ] #NEWLINE#
raise Exception ( 'Aborting#SPACE#installation:#SPACE#Requires#SPACE#Linux' ) #NEWLINE#
p . map ( process_file , listdir ( inputDir ) ) #NEWLINE#
return reverse ( 'component-detail' , kwargs = kwargs , request = request ) #NEWLINE#
return '' . join ( _iter ( ) ) #NEWLINE#
locale . resetlocale ( ) #NEWLINE#
time . strptime ( '0,0,62' , '%H,%M,%S' ) #NEWLINE#
b . foo ( ) #NEWLINE#
[ y for x in it for y in x + ( None , ) ] #NEWLINE#
python - mfoo . bar #NEWLINE#
vars ( args ) #NEWLINE#
thread . start ( ) #NEWLINE#
img . size #NEWLINE#
urljoin ( 'http://example1.com/' , '/picture.png' ) #NEWLINE#
conn . send ( 'some#SPACE#stuff' ) #NEWLINE#
User . insert_many ( row_dicts ) . execute ( ) #NEWLINE#
df . Group . map ( df . Group . value_counts ( ) ) #NEWLINE#
[ 'C' , 'D' ] , #NEWLINE#
[ 'E' , 'F' ] , #NEWLINE#
result = ast . literal_eval ( '({0})' . format ( s ) ) #NEWLINE#
df . columns = pd . to_datetime ( df . columns ) #NEWLINE# df #NEWLINE#
plt . draw ( ) #NEWLINE#
pdf_text_object . textOut ( text ) #NEWLINE#
f = os . fdopen ( fd , 'w' ) #NEWLINE#
imp . load_dynamic ( __name__ , __file__ ) #NEWLINE#
form . save ( ) #NEWLINE#
main ( ) #NEWLINE#
c = re . compile ( '(\\w+).s(\\d+)(?:e(\\d+)(?:e(\\d+))?)?' , re . X ) #NEWLINE#
df = df . sort ( ) #NEWLINE#
arr = np . append ( arr , np . array ( [ [ 1 , 2 , 3 ] ] ) , axis = 0 ) #NEWLINE# arr = np . append ( arr , np . array ( [ [ 4 , 5 , 6 ] ] ) , axis = 0 ) #NEWLINE#
s = re . search ( '[a-zA-Z+](\\d{3})$' , 'string123' ) #NEWLINE#
mock . assert_called_with ( 42 ) #NEWLINE#
listOfStuff = [ doSomethingWith ( v ) for v in range ( n // 2 , - 1 , - 1 ) ] #NEWLINE#
unicodedata . decomposition ( '´' ) #NEWLINE#
df1 = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 'a' , 'b' , 'c' ] } ) #NEWLINE#
setattr ( object , 'threshold' , 'mean' ) #NEWLINE#
fig . subplots_adjust ( wspace = 0.4 ) #NEWLINE#
window . show ( ) #NEWLINE#
print ( df [ ( df . Symbol1 == df . Symbol2 ) & ( df . BB == df . CC ) ] ) #NEWLINE#
for i in range ( 1 , 6 ) : #NEWLINE# #INDENT# for c1 in itertools . combinations ( c , i ) : #NEWLINE# #INDENT# #INDENT# c1 = set ( c1 ) #NEWLINE# c2 = set ( c ) - c1 #NEWLINE# print ( c1 , c2 ) #NEWLINE#
<STR0> . close ( ) #NEWLINE#
wx . StaticBitmap ( panel , - 1 , bmp , ( 10 , pos ) , ( bmp . GetWidth ( ) , bmp . GetHeight ( ) ) ) #NEWLINE#
i3r = np . argmax ( z , axis = - 1 ) #NEWLINE#
req . add_header ( 'Content-type' , 'application/x-www-form-urlencoded' ) #NEWLINE#
print ( '' . join ( my_encoder ( 'this#SPACE#is#SPACE#a\x97n#SPACE#exam\x97ple' ) ) ) #NEWLINE#
other_app . other_view ( request , ** kwargs ) #NEWLINE#
plt . plot ( x1 , y1 , 'r' ) #NEWLINE#
ax . scatter ( x , y , z , marker = '.' , c = 'r' ) #NEWLINE#
print ( dt . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
print ( map ( float_or_str , line . split ( ) ) ) #NEWLINE#
[ x for x in s . split ( '\t' ) ] #NEWLINE#
myArray = np . vstack ( myArray ) #NEWLINE#
process_data ( line ) #NEWLINE#
[ - 5 , 1 , 2 , 6 , 7 , 8 , 10 , 12 , 14 , 20 , 21 , 22 , 23 , 24 , 25 , 18 , 19 ] #NEWLINE#
moduleZ . py #NEWLINE#
plt . plot ( X , Y , lw = 0 ) #NEWLINE#
do_some_other_stuff ( ) #NEWLINE#
l = [ 'a' , 'b' , 'c' ] #NEWLINE#
pool = redis . ConnectionPool ( host = 'localhost' , port = 6379 , db = 0 ) #NEWLINE# r = redis . Redis ( connection_pool = pool ) #NEWLINE#
canvas . create_text ( ( 60 , 80 ) , text = 'FooBar' , fill = 'black' ) #NEWLINE#
print ( config . get ( 'test' , 'xxx' ) ) #NEWLINE#
import networkx as nx #NEWLINE#
ax . bar ( x , z , width = 0.2 , color = 'g' , align = 'center' ) #NEWLINE#
win32gui . SetForegroundWindow ( firefox [ 0 ] ) #NEWLINE#
my_checker . set_text ( 'This#SPACE#is#SPACE#sme#SPACE#sample#SPACE#txt#SPACE#with#SPACE#erors.' ) #NEWLINE#
dict_lol = dict ( ( item [ 1 ] , item ) for item in lol ) #NEWLINE#
legline . set_color ( color ) #NEWLINE#
str ( x ) #NEWLINE#
model . compile ( optimizer = 'adamax' , loss = 'binary_crossentropy' ) #NEWLINE#
df_out #NEWLINE#
resp = urllib . request . urlopen ( req ) #NEWLINE#
raise Exception ( 'This#SPACE#is#SPACE#a#SPACE#private#SPACE#method' ) #NEWLINE#
pylab . savefig ( 'filename.XXX' ) #NEWLINE#
json . dumps ( result , default = json_util . default ) #NEWLINE#
django . setup ( ) #NEWLINE#
print ( '#SPACE#' . join ( similar_words ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return self . __class__ ( data ) #NEWLINE#
print ( re . sub ( '\\$_(.*?)\\$|\\$\\^(.*?)\\$' , replace , text ) ) #NEWLINE#
parse ( 'Ter,#SPACE#01#SPACE#Out#SPACE#2013#SPACE#14:26:00#SPACE#-0300' ) #NEWLINE#
kwargs_new = { str ( k ) : v for k , v in list ( d . items ( ) ) } #NEWLINE#
sys . path . append ( '/Users/myUser/Downloads/spark-1.6.1-bin-hadoop2.6/python' ) #NEWLINE#
t . start ( ) #NEWLINE#
random . shuffle ( aslice ) #NEWLINE#
a . extend ( [ None ] * 20 ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
return reverse ( 'a_detail_slug' , args = ( pk , filler ) ) #NEWLINE#
df = pd . read_table ( sys . argv [ 1 ] , header = None , index_col = 0 ) #NEWLINE#
print ( tag . nextSibling . nextSibling . __class__ ) #NEWLINE#
'some#SPACE#string' % [ ] #NEWLINE#
log1 = logging . getLogger ( 'log1' ) #NEWLINE#
l = [ 'A1' , 'A2' , 'A3' , 'B1' , 'B2' , 'B3' , 'C1' , 'C2' , 'C3' , 'D1' , 'D2' , 'D3' ] #NEWLINE#
[ ( a if C else b ) for i in items ] #NEWLINE#
uniq_animal_groups = map ( list , set ( map ( tuple , animal_groups ) ) ) #NEWLINE#
"""(?i)(?=.*?\\bsweet#SPACE#pie\\b)(?=.*?\\bsavoury#SPACE#pie\\b)(?=.*?\\bmeringue\\b)|(?=.*?\\bchicken#SPACE#pie\\b)(?=.*?\\bbeef#SPACE#pie\\b)""" #NEWLINE#
ax . axis ( 'off' ) #NEWLINE#
with open ( 'input.txt' ) as matrixfile : #NEWLINE# #INDENT# matrix = [ list ( line . strip ( ) ) for line in matrixfile ] #NEWLINE#
im1 = ndimage . grey_erosion ( im , size = ( 15 , 15 ) ) #NEWLINE#
re . sub ( '\\#SPACE#{2,}' , '' , yourstring ) #NEWLINE#
label . master . wm_attributes ( '-topmost' , True ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
myDict [ key ] . remove ( 'x' ) #NEWLINE#
return x + 1 #NEWLINE#
root . withdraw ( ) #NEWLINE#
pool = multiprocessing . Pool ( multiprocessing . cpu_count ( ) ) #NEWLINE#
r = requests . get ( URL , cookies = jar ) #NEWLINE#
foo ( ) #NEWLINE#
conn . close ( ) #NEWLINE#
greetings . hello ( ) #NEWLINE#
numpy . zeros ( ( 2 , 2 ) , dtype = bool ) #NEWLINE#
[ get ( get ( d , 'x.' + k ) , 'a.b' ) for k in list ( get ( d , 'x' ) . keys ( ) ) ] #NEWLINE#
"""\\bMr(?:\\.|\\b)""" #NEWLINE#
r . findall ( s ) #NEWLINE#
output , err = p . communicate ( ) #NEWLINE#
a = a . reshape ( - 1 ) #NEWLINE#
writer = csv . writer ( open ( 'output.csv' , 'w' ) ) #NEWLINE#
d2 = array ( [ 0.31018485 , 0.19337869 , 0.46050302 , 0.3233269 , 0.18321265 ] ) #NEWLINE#
d += timedelta ( days = 6 - d . weekday ( ) ) #NEWLINE#
largest_names = [ x [ 0 ] for x in heapq . nlargest ( 6 , your_list , key = itemgetter ( 1 ) ) ] #NEWLINE#
print ( yaml . load ( f ) ) #NEWLINE#
df = df . append ( { 'name' : 'Zed' , 'age' : 9 , 'height' : 2 } , ignore_index = True ) #NEWLINE#
return jsonify ( result = wordlist ) #NEWLINE#
a [ [ [ 1 , 2 , 3 ] ] , [ [ 1 ] , [ 2 ] , [ 3 ] ] ] #NEWLINE# a [ [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ] #NEWLINE#
db [ 'dates' ] . insert ( { 'date' : d } ) #NEWLINE#
print ( [ filters . get ( word ) for word in sentence . split ( ) if word in filters ] ) #NEWLINE#
print ( 'show_where:#SPACE#sys.argv[0]#SPACE#is' , repr ( sys . argv [ 0 ] ) ) #NEWLINE#
proc . terminate ( ) #NEWLINE#
[ [ 2 ] , [ 0 ] , [ 1 ] , [ 0 ] , [ 1 ] , [ 0 ] ] #NEWLINE#
np . dot ( Zij , G ) #NEWLINE#
print ( '%s#SPACE#removed' % os . path . join ( r , files ) ) #NEWLINE#
s = 'Hello#SPACE#how#SPACE#are#SPACE#you#SPACE#today#SPACE#Joe' #NEWLINE# s = '#SPACE#' . join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ) #NEWLINE#
return tuple ( x [ 0 ] for x in G ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'right' ) #NEWLINE#
print ( t . timeit ( 5 ) ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
exec_cmd ( 'stty' , 'dsusp' , 'undef' ) #NEWLINE#
plt . plot ( x , pdf , 'k' ) #NEWLINE#
result = signal . convolve ( X , Y [ ... , None ] , 'valid' ) #NEWLINE#
print ( str ( e ) ) #NEWLINE#
ax2 . set_xticks ( [ 100 , 80 , 50 ] ) #NEWLINE#
im . save ( 'result.gif' ) #NEWLINE#
df #NEWLINE#
subversion = re . compile ( '(?<=SDK#SPACE#)\\d*.\\d*.\\d*.\\d*' ) #NEWLINE# subversion . search ( s ) . group ( ) #NEWLINE#
a . remove ( i ) #NEWLINE#
dic = { 'fruit' : 'apple' , 'place' : 'table' } #NEWLINE# print ( 'I#SPACE#have#SPACE#one#SPACE#%(fruit)s#SPACE#on#SPACE#the#SPACE#%(place)s.' % dic ) #NEWLINE#
return hex ( ( val + ( 1 << nbits ) ) % ( 1 << nbits ) ) #NEWLINE#
pyglet . app . run ( ) #NEWLINE#
[ 'Header' , 'Want#SPACE#This' ] #NEWLINE#
[ [ 1 , 4 , 7 ] , [ 2 , 6 , 8 ] , [ 3 , None , 9 ] ] #NEWLINE#
pass #NEWLINE#
unqiue_values = collection . distinct ( 'key' ) #NEWLINE#
cur . executemany ( 'insert#SPACE#into#SPACE#test(x)#SPACE#values#SPACE#(?)' , [ ( 'a' , ) , ( 'b' , ) ] ) #NEWLINE#
re . split ( '(?<!\\d)\\.|\\.(?!\\d)' , text ) #NEWLINE#
distinct ( ) #NEWLINE#
f . write ( 'dict#SPACE#=#SPACE#' + repr ( dict ) + '\n' ) #NEWLINE#
result = response . read ( ) #NEWLINE#
print ( '<pre>' , pprint . pformat ( z ) , '</pre>' ) #NEWLINE#
hashlib . md5 ( img . tostring ( ) ) . hexdigest ( ) #NEWLINE#
class MyModelSerializer ( serializers . ModelSerializer ) : #NEWLINE# #INDENT# model_method_field = serializers . CharField ( source = 'model_method' ) #NEWLINE#
[ 1 ] [ 1 ] [ 3 ] #NEWLINE#
button . pack ( ) #NEWLINE#
MyClass in MyClass . __mro__ #NEWLINE#
ax . plot_wireframe ( X , Y , Z , rstride = 1 , cstride = 1 , color = 'g' ) #NEWLINE#
return HttpRepsonse ( 'FAIL!!!!!' ) #NEWLINE#
row_list = df . to_csv ( None , header = False , index = False ) . split ( '\n' ) #NEWLINE#
'Matches!' if re . match ( smiley_pattern , s ) else "Doesn't#SPACE#match." #NEWLINE#
self . listTools . add ( self . addButton ) #NEWLINE#
cron3 . clear ( ) #NEWLINE#
a . append ( ( 1 , 2 , 4 ) ) #NEWLINE#
xml . close ( ) #NEWLINE#
dictionary [ 'C1' ] = new_list #NEWLINE#
os . listdir ( '/proc' ) #NEWLINE#
plt . vlines ( 3 , ylim [ 0 ] , ylim [ 1 ] ) #NEWLINE#
from nltk . corpus import wordnet as wn #NEWLINE#
sorted ( [ B , C , A , D , X ] , key = lambda cls : len ( cls . mro ( ) ) ) #NEWLINE#
return hash ( self . PersonID ) #NEWLINE#
"""{:.2f}""" . format ( 1.2345 ) #NEWLINE#
str_list = [ item for item in str_list if item ] #NEWLINE#
pswd = getpass . getpass ( 'Password:' ) #NEWLINE#
[ [ 'a' , 'b' ] , [ ] , [ 'c' , 'd' ] , [ ] , [ 'f' ] , [ 'g' ] , [ ] , [ ] ] #NEWLINE#
ptcr = nltk . corpus . PlaintextCorpusReader ( Corpus , '.*' , encoding = 'utf-8' ) #NEWLINE#
next ( hex_list ) #NEWLINE#
str . translate ( None , string . letters ) #NEWLINE#
OrderedDict ( sorted ( list ( d . items ( ) ) , key = lambda t : t [ 1 ] ) ) #NEWLINE#
os . chmod ( 'mydir' , 511 ) #NEWLINE#
X [ : , ( i ) ] = x #NEWLINE#
s = '110101001' #NEWLINE# numbers = [ int ( s [ i : i + 3 ] , 2 ) for i in range ( 0 , len ( s ) , 3 ) ] #NEWLINE# print ( numbers ) #NEWLINE#
array ( [ 1.0 , 0.0 , 0.0 , 1.0 , 2.0 , 3.0 , 0.0 , 1.0 , 0.0 ] ) #NEWLINE#
platform . system ( ) #NEWLINE#
print ( newcorpus . sents ( ) ) #NEWLINE#
return len ( set ( it_copy ) ) == 1 #NEWLINE#
'They' , 'like' , 'to' , 'practise' , 'their' , 'airs' , 'and' , 'graces' #NEWLINE#
df = pd . read_csv ( 'somefile.csv' , sep = ';' ) #NEWLINE#
DISABLE_SIMULATION = _DISABLE_SIMULATION #NEWLINE#
a . flatten ( ) #NEWLINE#
random . shuffle ( array ) #NEWLINE#
print ( soup . find ( 'h2' ) ) #NEWLINE#
pprint ( data ) #NEWLINE#
assert len ( A ) == len ( B ) #NEWLINE#
uniq_animal_groups = map ( list , set ( map ( tuple , map ( set , animal_groups ) ) ) ) #NEWLINE#
all ( x == 0 for x in list ( d . values ( ) ) ) #NEWLINE#
b . setdefault ( j , [ ] ) . append ( i ) #NEWLINE#
os . remove ( os . path . join ( my_dir , fname ) ) #NEWLINE#
sys . modules [ 'x.y' ] = y #NEWLINE#
super ( B , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
Decimal ( '0.14285714285714285714285714285714285714285714285714' ) #NEWLINE#
self . name = name #NEWLINE#
tree . find ( './/begdate' ) . text = '1/1/2011' #NEWLINE#
plt . ylabel ( 'y' ) #NEWLINE#
ax . scatter ( x , y , marker = 'o' , c = 'b' , s = 15 , zorder = 3 ) #NEWLINE#
subprocess . Popen ( 'xdg-screensaver#SPACE#resume#SPACE#' + window_id , shell = True ) #NEWLINE#
form . save ( ) #NEWLINE#
m . drawcoastlines ( color = 'white' , zorder = 0 ) #NEWLINE#
newImage = myImage . copy ( ) #NEWLINE#
print ( [ '' . join ( i ) for i in window ( '2316515618' , 3 ) ] ) #NEWLINE#
B [ A [ 1 ] , cat_index ] = A [ 2 ] #NEWLINE#
print ( megasplit ( 'o' , 'foobarbarbazbar' ) ) #NEWLINE#
shutil . rmtree ( tmpdir ) #NEWLINE#
f . flush ( ) #NEWLINE#
1 , 2 , 3 #NEWLINE#
datafile1 = os . path . join ( get_main_dir ( ) , 'data' , 'file1' ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
'dec:#SPACE#%d/oct:#SPACE#%#o/hex:#SPACE#%#X' % ( i , i , i ) #NEWLINE#
type ( 'NewA' , ( object , ) , { } ) #NEWLINE#
plt . show ( ) #NEWLINE#
mystr = '#SPACE#' . join ( [ 'Why,#SPACE#hello#SPACE#there' , 'wonderful#SPACE#stackoverflow#SPACE#people!' ] ) #NEWLINE#
for student in sorted ( list ( student_Dict . values ( ) ) , key = operator . attrgetter ( #NEWLINE# 'age' ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
return seq [ n : ] + seq [ : n ] #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
df #NEWLINE#
allowed_domains = [ 'craigslist.org' ] #NEWLINE#
app . show_all ( ) #NEWLINE#
a . extend ( [ 1 , 2 , 3 ] ) #NEWLINE#
lambda * args : None #NEWLINE#
root = etree . XML ( '<foo>bar</foo>' ) #NEWLINE#
root = etree . XML ( '<foo/>' ) #NEWLINE#
select_indices = np . where ( np . logical_and ( x > 1 , x < 5 ) ) #NEWLINE#
logger . addHandler ( fileHandler ) #NEWLINE#
b = np . array ( [ 0 ] * 4 ) #NEWLINE#
return '&' . join ( l ) #NEWLINE#
result = [ sum ( data ) for data in zip ( * args ) ] #NEWLINE#
dot_data = StringIO ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
new_list . append ( x ) #NEWLINE#
return unique_a . view ( a . dtype ) . reshape ( ( unique_a . shape [ 0 ] , a . shape [ 1 ] ) ) #NEWLINE#
logger2 = logging . getLogger ( 'some_other_logger' ) #NEWLINE#
print ( '{}#SPACE#->#SPACE#{{{}}}' . format ( key , ',#SPACE#' . join ( value ) ) ) #NEWLINE#
print ( tweet [ 'id_str' ] , '\n' , tweet [ 'text' ] , '\n\n\n' ) #NEWLINE#
raise TemplateSyntaxError ( '...' ) #NEWLINE#
plt . gcf ( ) . tight_layout ( ) #NEWLINE#
ax . w_yaxis . _axinfo . update ( { 'grid' : { 'color' : ( 0 , 0 , 0 , 1 ) } } ) #NEWLINE#
assert np . allclose ( result , expected ) #NEWLINE#
r . findall ( '1.(1.2)' ) #NEWLINE#
with open ( 'test.txt' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( myString . encode ( 'latin-1' ) ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
arity . __class__ . arity = arity #NEWLINE#
numpy . histogram ( my_values , bins = numpy . r_ [ - numpy . inf , my_bins , numpy . inf ] ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
p . start ( ) #NEWLINE#
df . clip ( upper = 4400 ) . plot . hist ( stacked = True , bins = bins , normed = True ) #NEWLINE#
ps = soup . findAll ( 'p' , { 'class' : 'i' } ) #NEWLINE# ps #NEWLINE#
naive_dt = datetime . now ( ) #NEWLINE#
nodes [ j ] . setRect ( newx , newy , newwidth , newheight ) #NEWLINE#
ssh . connect ( host , port = 22 , username = username , password = password , timeout = 3 ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 1 , 0 ] ] ) #NEWLINE#
self . _server . shutdown ( ) #NEWLINE#
ax . set_autoscale_on ( False ) #NEWLINE#
{ ( 0 ) : 51 , ( 1 ) : 27 , ( 2 ) : 13 , ( 3 ) : 56 } #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
PythonPrompt > subprocess . Popen ( 'start#SPACE#python#SPACE#wrapper.py' , shell = True ) #NEWLINE#
ax1 . plot ( list ( range ( 10 ) ) , color = 'red' ) #NEWLINE#
print ( requests . get ( 'https://httpbin.org/cookies' ) . json ( ) ) #NEWLINE#
help ( hehe ) #NEWLINE#
parser . add_argument ( 'first' , help = 'the#SPACE#first#SPACE#file' ) #NEWLINE#
df [ 'Value' ] = '' #NEWLINE#
df [ 'timestamp' ] = df [ 'date_time' ] . astype ( 'int' ) #NEWLINE#
arr [ ( [ 1 , 1 ] ) , : ] #NEWLINE#
method ( keyword1 = 'foo' , keyword2 = 'bar' ) #NEWLINE#
print ( '$%s#SPACE#\\times#SPACE#10^{%s}$' % tuple ( '3.5e+20' . split ( 'e+' ) ) ) #NEWLINE#
data . set_index ( [ 'time' ] , inplace = True ) #NEWLINE#
with open ( 'new_file.txt' , 'w' ) as out_file : #NEWLINE# #INDENT# out_file . write ( '\n' . join ( data ) ) #NEWLINE#
return [ row for row in listOfLists if re . match ( '-?\\d+$' , row [ x ] ) ] #NEWLINE#
parser . add_argument ( '-i' , '--input' , action = 'append' ) #NEWLINE#
return [ x for x in mylist if not any ( c . isdigit ( ) for c in x ) ] #NEWLINE#
fig . canvas . mpl_connect ( 'pick_event' , onpick3 ) #NEWLINE#
[ 2 , 2 , 3 ] #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
return self . _list [ x ] #NEWLINE#
b [ i ] = 1 #NEWLINE#
( square * sub3 ) ( n ) #NEWLINE#
array ( [ '10.125.255.133' , '104.244.42.130' ] , dtype = '<U14' ) #NEWLINE#
itertools . islice ( mygenerator ( ) , 10 ) #NEWLINE#
l = json . loads ( s ) #NEWLINE#
pylab . plot_date ( xs , ys , ydate = False , linestyle = '-' , marker = '' ) #NEWLINE#
def test_function ( ) : #NEWLINE# #INDENT# print ( 'Test#SPACE#Function#SPACE#--#SPACE#Mod#SPACE#2' ) #NEWLINE#
afield = forms . ChoiceField ( choices = my_choices ) #NEWLINE#
self . send_header ( 'Content-Encoding' , 'gzip' ) #NEWLINE#
Decimal ( '3.1415926535' ) #NEWLINE#
a , b = 1 , 2 #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . union , lis ) #NEWLINE#
def square ( vals ) : #NEWLINE# #INDENT# return [ ( v * v ) for v in vals ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df . groupby ( [ 'id' , 'colors' ] ) . size ( ) . unstack ( ) . fillna ( 0 ) #NEWLINE#
return func ( ) #NEWLINE#
print ( find_str ( 'Happy#SPACE#birthday' , 'rh' ) ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
browser . get ( 'http://winterolympicsmedals.com/medals.csv' ) #NEWLINE#
dialog . setAttribute ( QtCore . Qt . WA_DeleteOnClose ) #NEWLINE#
stack [ - 1 ] . append ( [ ] ) #NEWLINE#
mask1 = ( arange ( 10 ) > 5 ) & ( arange ( 10 ) <= 8 ) #NEWLINE#
return match . group ( 1 ) if match else None #NEWLINE#
self . sock . connect ( ( host , port ) ) #NEWLINE#
list ( map ( chr , list ( range ( ord ( s [ 0 ] ) , ord ( s [ - 1 ] ) + 1 ) ) ) ) #NEWLINE#
a . reshape ( ( 2 , 2 , 2 ) ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
super ( Child , self ) . on_start ( ) #NEWLINE#
app . config [ 'SECRET_KEY' ] = 'sekrit!' #NEWLINE#
plt . xlabel ( 'x#SPACE#vals' ) #NEWLINE#
def __init__ ( self , somevalue ) : #NEWLINE# #INDENT# self . somevalue = somevalue #NEWLINE#
a , result = a [ : - 1 ] , a [ - 1 ] #NEWLINE#
'Database' , 'GratefulDeadConcerts' , 'exists' #NEWLINE#
ssh . connect ( host , username = 'xy' , password = 'xy' ) #NEWLINE#
print ( ( 'sum#SPACE#of' , a , 'and' , b , 'is' , c ) ) #NEWLINE#
s . unpack ( 'bytes:4,#SPACE#2*uint:12,#SPACE#uint:4' ) #NEWLINE#
top . sort ( key = lambda a : a [ 1 ] ) #NEWLINE#
b = tuple ( b ) #NEWLINE#
mydate . strftime ( '%B' ) #NEWLINE#
df = pd . DataFrame ( { 'alpha' : [ 'a' , 'a' , 'b' , 'b' , 'c' , 'e' , 'f' , 'g' ] } ) #NEWLINE#
reactor . run ( ) #NEWLINE#
print ( delta . days * 24 * 60 * 60 + delta . seconds + delta . microseconds / #NEWLINE# 1000000.0 ) #NEWLINE#
len ( str ( b / decimal . Decimal ( '3.0' ) ) ) #NEWLINE#
binascii . hexlify ( struct . pack ( '2I' , 12 , 30 ) ) #NEWLINE#
vars ( args ) #NEWLINE#
Foo . objects . filter ( bar_x__name = 'bar#SPACE#x' ) #NEWLINE#
ax . bar3d ( x_data , y_data , np . zeros ( len ( z_data ) ) , 1 , 1 , z_data ) #NEWLINE#
tf . contrib . layers . embedding_column ( workclass , dimension = 8 ) #NEWLINE#
self . assertEqual ( self . _output ( ) , 'BLUB' ) #NEWLINE#
return GEN_SUSPENDED #NEWLINE#
map ( f . addGoodFood , [ 'SPAM' , 'Eggs' , 'Bacon' , 'Rat' , 'Spring#SPACE#Surprise' ] ) #NEWLINE#
x . view ( ( float , len ( x . dtype . names ) ) ) #NEWLINE#
session . exec_command ( 'xterm' ) #NEWLINE#
setattr ( self , k , d [ k ] ) #NEWLINE#
arraymean = sum ( [ int ( i [ 0 ] ) for i in array ] ) / len ( array ) #NEWLINE#
result . append ( list [ - 1 ] ) #NEWLINE#
output . append ( float ( row [ 4 ] ) ) #NEWLINE#
self . response . out . write ( '<html><body>' ) #NEWLINE#
print ( '\n' * 100 ) #NEWLINE#
max ( [ 'abc' , [ 1 , 2 , 3 ] ] , key = len ) #NEWLINE#
words = [ x for x in words if x not in bad_words ] #NEWLINE#
attrList = map ( lambda x : x . attr , objectList ) #NEWLINE#
print ( A . func ( ) ) #NEWLINE#
print ( 'Location:http://newurl.com/foobar' ) #NEWLINE#
return list ( set ( [ x for x in l if l . count ( x ) > 1 ] ) ) #NEWLINE#
result = [ s [ i : j ] for i , j in zip ( [ None ] + b , b + [ None ] ) ] #NEWLINE#
[ [ 6 , 2 ] , [ 7 , 5 ] , [ 8 , 7 ] , [ 9 , 9 ] , [ 0 , 4 ] ] #NEWLINE#
raise ValueError ( 'argument' ) #NEWLINE#
print ( x ) #NEWLINE#
b = a . reshape ( ( 3 , 3 , 3 ) ) #NEWLINE#
return all ( n % i for i in range ( 3 , int ( math . sqrt ( n ) ) + 1 , 2 ) ) #NEWLINE#
print ( 'Child#SPACE#pid#SPACE#is#SPACE#{}' . format ( child . pid ) ) #NEWLINE#
[ element for element in arr if 'xx' in element ] #NEWLINE#
ax1 . axis [ 'right' ] . set_axis_direction ( 'top' ) #NEWLINE#
ax1 . axis [ 'left' ] . set_axis_direction ( 'bottom' ) #NEWLINE#
df [ 'uld' ] = 1 #NEWLINE#
toolbar . pack ( side = TOP , fill = 'x' ) #NEWLINE#
numpy . savetxt ( f , i , fmt = '%i' ) #NEWLINE#
re . findall ( '[A-Z][a-z]*' , 'SplitAString' ) #NEWLINE#
mycollapsedstring = '#SPACE#' . join ( mystring . split ( ) ) #NEWLINE#
do_something_dangerous ( ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
return function ( self , * args , ** kwargs ) #NEWLINE#
round_to_value ( 36.04 , 0.05 ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return cls ( obj . x , obj . y ) #NEWLINE#
import pygame . gfxdraw #NEWLINE#
c = '' . join ( b ) #NEWLINE#
df2 . index = df2 . index . tz_localize ( 'UTC' ) #NEWLINE#
AB = [ ( a + b ) for a , b in itertools . zip_longest ( A , B , fillvalue = 0 ) ] #NEWLINE#
unittest . main ( ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
return int . from_bytes ( xbytes , 'big' ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
ax2 = ax . twinx ( ) #NEWLINE#
foo ( ) #NEWLINE#
any ( some_func ( x ) for x in some_list if x > 5 ) #NEWLINE#
result = decoded . encode ( 'UTF-8' ) #NEWLINE#
lines = [ [ ( 0 , 1 ) , ( 4 , 3 ) ] , [ ( - 3 , 4 ) , ( 3 , - 5 ) ] ] #NEWLINE#
print ( str ( netaddr . IPAddress ( 3232236598 ) ) ) #NEWLINE#
c = compile ( 'u"\\N{DEGREE#SPACE#SIGN}"' , '' , 'eval' ) #NEWLINE#
r . json ( ) #NEWLINE#
EMAIL_USE_TLS = True #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
my_dict = { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 ] , 'c' : [ 7 , 1 , 2 ] } #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
lxml . html . fromstring ( html ) . find ( './/*' ) is not None #NEWLINE#
from_date = from_date - datetime . timedelta ( days = 1 ) #NEWLINE#
hashlib . md5 ( 'thecakeisalie' ) . digest ( ) #NEWLINE#
df . dtypes #NEWLINE#
del self . __dict__ [ key ] #NEWLINE#
print ( df [ 'phone_no' ] != df [ 'phone_no' ] . shift ( ) ) #NEWLINE#
plt . plot ( [ 2 , 3 , 4 , 5 ] ) #NEWLINE#
out . close ( ) #NEWLINE#
return some_value #NEWLINE#
xml = xml . dom . minidom . parse ( xml_fname ) #NEWLINE#
uuid . uuid1 ( random . randint ( 0 , 281474976710655 ) ) #NEWLINE#
super ( C , self ) . __init__ ( 4 ) #NEWLINE#
label = tk . Label ( image = image ) #NEWLINE# label . pack ( ) #NEWLINE#
unittest . main ( failfast = True ) #NEWLINE#
""",""" . join ( k for k , g in groupby ( sorted ( nums ) ) ) #NEWLINE#
nonzero ( r_ [ 1 , diff ( t ) [ : - 1 ] ] ) #NEWLINE#
request . get ( url , data = data , auth = ( 'user' , '{personal#SPACE#access#SPACE#token}' ) ) #NEWLINE#
bar . foobar ( ) #NEWLINE#
dev / tests / test_file . py #NEWLINE#
print ( textelem . text ) #NEWLINE#
my_app . run ( host = '0.0.0.0' ) #NEWLINE#
x = json . loads ( x ) #NEWLINE#
cmd = '\n' . join ( [ 'line#SPACE#%d' % 1 , 'line#SPACE#%d' % 2 , 'line#SPACE#%d' % 3 ] ) #NEWLINE#
return np . vstack ( [ topbottom , xvalues ] ) [ : , ( mask ) ] . T #NEWLINE#
fig . savefig ( 'pic.png' ) #NEWLINE#
ax . xaxis . set_major_formatter ( major_formatter ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return [ ( 'self.' + name ) for name in self . __dict__ ] #NEWLINE#
value = open ( 'thefile' , 'rb' ) . read ( ) #NEWLINE#
b = dict ( [ i . split ( ':#SPACE#' ) for i in a ] ) #NEWLINE#
s . add ( get_my_new_random_number ( ) ) #NEWLINE#
hmag = np . array ( hmag ) #NEWLINE#
'06/03/2015' , 'James#SPACE#W#SPACE##SPACE#' , 'James#SPACE#A#SPACE#' #NEWLINE#
self . label . pack ( ) #NEWLINE#
ispower ( 1 , 1 ) #NEWLINE#
print ( json . JSONEncoder ( ) . encode ( response ) ) #NEWLINE#
df . loc [ : , ( df . dtypes == object ) ] #NEWLINE#
random . shuffle ( ans ) #NEWLINE#
arg_test ( a = 1 , b = 2 , c = 3 ) #NEWLINE#
btlabel3 . grid ( row = 2 , column = 1 , padx = 10 ) #NEWLINE#
[ 'ab' , 'cd' ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
{ 'key' : 'method' , 'value' : 'photos.getAlbums' } , #NEWLINE#
{ 'key' : 'uid' , 'value' : '6015870' } , #NEWLINE#
norm . cdf ( 1.96 ) #NEWLINE#
self . fileobj . seek ( - 8 , 1 ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
fts . Rules [ i ] . create_filter ( field , '>=' , str ( e ) ) #NEWLINE#
data . groupby ( 'col1' ) . apply ( lambda x : ( x . col2 * x . col3 ) . max ( ) ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# manager = Manager ( ) #NEWLINE# d = manager . dict ( ) #NEWLINE# d [ 1 ] = '1' #NEWLINE# d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
views . py #NEWLINE#
foo . f ( ) #NEWLINE#
element . clear ( ) #NEWLINE#
[ 1426802400 , 1429218000 ] #NEWLINE#
firstvalue = mvv_list [ 0 ] . mvv #NEWLINE#
d = { 'key1' : 'value1' , 'key2' : 'value2' } #NEWLINE#
cursor . commit ( ) #NEWLINE#
s [ s . str . match ( '.*dd$' ) ] #NEWLINE#
p . breakable ( ) #NEWLINE#
self . scrollbar . grid ( column = 2 , sticky = N + S ) #NEWLINE#
df2 [ [ 'a' , 'b' ] ] = values #NEWLINE#
print ( 'Max#SPACE#length#SPACE#of#SPACE#column#SPACE#%s:#SPACE#%s\n' % ( c , df [ c ] . map ( len ) . max ( ) ) ) #NEWLINE#
from django . conf import settings #NEWLINE#
speed = Command ( 'speed_analysis.tex' , [ ] , 'python#SPACE#code/speed.py#SPACE#-o#SPACE#$TARGET' ) #NEWLINE#
ax2 . set_ylim ( [ np . amin ( image [ : , ( 5 ) , ( 5 ) ] ) , np . amax ( image [ : , ( 5 ) , ( 5 ) ] ) ] ) #NEWLINE#
print ( p . stderr . read ( ) ) #NEWLINE#
"""eAIUXziwB8QbBexkiIDR3A==""" . decode ( 'base64' ) #NEWLINE#
plt . show ( ) #NEWLINE#
QtCore . QAbstractListModel . __init__ ( self ) #NEWLINE#
df1 . loc [ 'Others' , 'Title' ] = df . loc [ mask , 'Title' ] . sum ( ) #NEWLINE#
mylist . remove ( '' ) #NEWLINE#
my_str . encode ( ) . decode ( 'cp437' ) #NEWLINE#
ws . QueryTables . Add ( constring , ws . Range [ 'A1' ] , SQL ) . Refresh ( ) #NEWLINE#
canvas . configure ( yscrollcommand = vsb . set ) #NEWLINE#
[ 'stake' , 'steak' , 'teak' , 'sleek' ] #NEWLINE#
df . loc [ : , ( [ 'A' ] ) ] #NEWLINE#
lines . append ( '#SPACE#' . join ( words ) ) #NEWLINE#
soup . prettify ( ) #NEWLINE#
chdir ( 'C:/myOtherWork' ) #NEWLINE#
df [ 'newcolumn' ] = df . apply ( lambda x : fxy ( x [ 'A' ] , x [ 'B' ] ) , axis = 1 ) #NEWLINE#
return json . dumps ( { 'success' : True } ) , 200 , { 'ContentType' : 'application/json' } #NEWLINE#
parser = argparse . ArgumentParser ( description = 'Stack#SPACE#Overflow#SPACE#example' ) #NEWLINE#
[ 'sdfdg' , 'xc' , 'ab' ] #NEWLINE#
index = np . argmax ( mask , axis = - 1 ) - 1 #NEWLINE#
l = [ ( 'a' , 1 ) , ( 'a' , 2 ) , ( 'a' , 3 ) , ( 'b' , 1 ) , ( 'b' , 2 ) , ( 'c' , 1 ) ] #NEWLINE# d = { } #NEWLINE# for x , y in l : #NEWLINE# #INDENT# d . setdefault ( x , [ ] ) . append ( y ) #NEWLINE# print ( d ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE# a #NEWLINE#
df [ 'Region' ] = df [ 'Country' ] . replace ( region_from_country ) #NEWLINE#
week = '' . join ( week ) #NEWLINE#
ax1 . plot ( 0.5 , 0.5 , '*' , ms = 200 ) #NEWLINE#
print ( Foo . instance_count ) #NEWLINE#
raise ValueError ( "No#SPACE#dict#SPACE#has#SPACE#an#SPACE#'id'#SPACE#key" ) #NEWLINE#
words = re . findall ( '\\w+' , open ( '1976.03.txt' ) . read ( ) . lower ( ) ) #NEWLINE#
redeclare ( ) #NEWLINE#
conn , addr = s . accept ( ) #NEWLINE#
zip ( * lol ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
tableWidget . show ( ) #NEWLINE#
json_data . close ( ) #NEWLINE#
return bool ( urlparse . urlparse ( url ) . netloc ) #NEWLINE#
win32api . SetCursorPos ( ( x , y ) ) #NEWLINE#
return hash ( obj ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( request . headers ) #NEWLINE#
ax . set_ylabel ( '$\\sqrt{2}#SPACE#s#SPACE#t$' ) #NEWLINE#
subList = [ tempList [ n : n + N ] for n in range ( 0 , len ( theList ) , N ) ] #NEWLINE#
DATABASE_ROUTERS = [ 'path.to.class.CustomRouter' ] #NEWLINE#
now . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) . rstrip ( '0' ) #NEWLINE#
feeder_lock_object . lock ( ) #NEWLINE#
keys = [ 'name' , 'last_name' , 'phone_number' , 'email' ] #NEWLINE# dict1 = { x : dict1 [ x ] for x in keys } #NEWLINE#
f . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
parser . parse ( string ) #NEWLINE#
self . window . connect ( 'destroy' , self . destroy ) #NEWLINE#
df [ 'Percnt#SPACE#rank' ] = df . reset_index ( ) . groupby ( [ 'index' , 'Category' ] ) [ 'SCORE' ] #NEWLINE#
input = [ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'e' , 'f' ] ] #NEWLINE#
ax . clear ( ) #NEWLINE#
p1 . boxplot ( column = 'N0_YLDF' , by = 'MAT_quartiles' ) #NEWLINE#
version = re . compile ( '(?<=Version:#SPACE#)\\d*-[a-z]*-\\d' ) #NEWLINE#
anims = [ f for f in files if f [ 2 ] . lower ( ) not in IMAGE_TYPES ] #NEWLINE#
plt . ylabel ( 'Y' ) #NEWLINE#
y = tf . constant ( [ [ 1 , 2 , 3 ] , [ 6 , 5 , 4 ] ] ) #NEWLINE#
seen_add ( element ) #NEWLINE#
canvas . create_image ( ( WIDTH / 2 , HEIGHT / 2 ) , image = img , state = 'normal' ) #NEWLINE#
a [ b ] #NEWLINE#
f = open ( 'mydata.pkl' , 'wb' ) #NEWLINE#
env . Program ( 'test' , 'main.c' , LIBPATH = '$LIBFOO' ) #NEWLINE#
run ( "TZ=':Pacific/Auckland'#SPACE#date" ) #NEWLINE#
self . window . show ( ) #NEWLINE#
batch . execute ( http = http ) #NEWLINE#
a = [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 ] #NEWLINE#
layout = QVBoxLayout ( ) #NEWLINE#
print ( 'True' if mydict . get ( 'key' ) else 'False' ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
self . tracked_interface . add_attribute ( cell , 'text' , 0 ) #NEWLINE#
do_the_stuff ( my_list ) #NEWLINE#
a = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
logging . debug ( 'temporaryFilename:#SPACE#rm#SPACE#-f#SPACE#%s' % path ) #NEWLINE#
self . response . headers [ 'Access-Control-Allow-Origin' ] = '*' #NEWLINE#
zip ( * r ) #NEWLINE#
plt . subplots_adjust ( top = 0.55 ) #NEWLINE#
df . stack ( ) . loc [ first : last ] . min ( ) #NEWLINE#
run ( reloader = True ) #NEWLINE#
driver . find_element_by_id ( 'loginbutton' ) . click ( ) #NEWLINE#
ax [ 0 ] . scatter ( X , Y , Z , c = 'g' , marker = '.' , alpha = 0.2 ) #NEWLINE#
10 , 11 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 #NEWLINE#
return str ( self . __dict__ ) #NEWLINE#
cursor . execute ( CQLString ) #NEWLINE#
x . pop ( ) #NEWLINE#
df [ [ 'A' ] ] . convert_objects ( convert_numeric = True ) #NEWLINE#
TWITTER_SECRET = 'xxxxxxxx' #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
np . testing . assert_almost_equal ( ( x , x , x ) , ( y , y , y ) , 5 ) #NEWLINE#
doc = etree . parse ( 'weather.xml' ) #NEWLINE#
df = pd . DataFrame ( index = [ 'a' , 'b' ] ) #NEWLINE# df . index . values #NEWLINE#
bar ( ) #NEWLINE#
c . save ( ) #NEWLINE#
fnan == fnan #NEWLINE#
writer = csv . writer ( ofile , delimiter = '\t' ) #NEWLINE#
zip ( words [ 1 : ] , words [ : - 1 ] ) #NEWLINE#
a . pop ( key , None ) #NEWLINE#
outsock . close ( ) #NEWLINE#
dummy_bus = dbus . SessionBus ( ) #NEWLINE#
sorted ( list ( range ( len ( a ) ) ) , key = a . __getitem__ ) #NEWLINE#
print ( os . getenv ( 'MyVar' ) ) #NEWLINE#
"""#SPACE#....#SPACE#(?P<text>.*?)(\\n\\n|$)""" #NEWLINE#
assertEquals ( 'pears' , idx ( set , 'p' ) ) #NEWLINE#
assertEquals ( 'pineapple' , idx ( set , 'pi' ) ) #NEWLINE#
PLT . show ( ) #NEWLINE#
freq = pd . crosstab ( pair [ 'code' ] , pair [ 'code_2' ] ) #NEWLINE#
sns . regplot ( x , y , lowess = True ) #NEWLINE#
a [ a < 0 ] = 0 #NEWLINE#
self . response . out . write ( 'Ip#SPACE#addresses:#SPACE#' ) #NEWLINE#
cmp ( x [ 1 ] , y [ 1 ] ) #NEWLINE#
main ( ) #NEWLINE#
event . SetEventObject ( self ) #NEWLINE#
option . click ( ) #NEWLINE#
datetime . datetime ( year = year , month = month , day = day , hour = hour ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 5 ) , columns = [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
[ ( i + j ) for i , j in zip ( list_of_urls , string . lowercase [ : 14 ] ) ] #NEWLINE#
contents = fh . read ( ) #NEWLINE#
"""this#SPACE#is#SPACE#{self.a}""" . format ( self = self ) #NEWLINE#
print ( db_data . count ( with_limit_and_skip = True ) ) #NEWLINE#
f = open ( 'some.csv' , 'rb' ) #NEWLINE#
outputStream . close ( ) #NEWLINE#
use_library ( 'django' , '1.1' ) #NEWLINE#
conn . setopt ( pycurl . URL , 'https://stream.twitter.com/1.1/statuses/sample.json' ) #NEWLINE#
plt . show ( ) #NEWLINE#
np . arange ( lllon , urlon , 2.0 ) , #NEWLINE#
f . close ( ) #NEWLINE#
lst = [ [ 1 ] * 4 ] * 3 #NEWLINE#
re . escape ( 'a' ) == 'a' #NEWLINE#
print ( 't#SPACE#created' ) #NEWLINE#
print ( 't#SPACE#started' ) #NEWLINE#
print ( 'mydata#SPACE#deleted' ) #NEWLINE#
print ( 't#SPACE#joined' ) #NEWLINE#
print ( 'x#SPACE#got#SPACE#created!' ) #NEWLINE#
d [ hash ( x ) ] = y #NEWLINE#
pandas . set_option ( 'display.max_columns' , 0 ) #NEWLINE#
print ( a , b , c ) #NEWLINE#
myarray = array ( [ float ( x ) for x in vals ] ) #NEWLINE#
self . widget . click . connect ( self . onWidgetClick ) #NEWLINE#
self . assertTrue ( self . is_element_present ( <STR0> . LINK_TEXT , 'My#SPACE#link' ) ) #NEWLINE#
ttk . Label ( mf , text = 'is#SPACE#equivalent#SPACE#to' ) . grid ( column = 1 , row = 2 , sticky = E ) #NEWLINE#
xlim ( 0 , 0.8 ) #NEWLINE#
print ( A [ 0 ] , B [ 0 ] ) #NEWLINE#
zf = zipfile . ZipFile ( 'data/test_zip.zip' ) #NEWLINE#
big_function ( ) #NEWLINE#
print ( 2 * math . acos ( 0 ) ) #NEWLINE#
max ( a , key = itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
d = { 'word' : { 'a' : { 'b' : 2 } } } #NEWLINE#
out . close ( ) #NEWLINE#
return np . sum ( np . linalg . solve ( L , xdiff . T ) ** 2 , axis = 0 ) #NEWLINE#
plt . grid ( axis = 'y' , linestyle = '-' ) #NEWLINE#
globals ( ) [ name ] = value #NEWLINE#
j = json . loads ( '{"one"#SPACE#:#SPACE#"1",#SPACE#"two"#SPACE#:#SPACE#"2",#SPACE#"three"#SPACE#:#SPACE#"3"}' ) #NEWLINE#
num = 1234 #NEWLINE# lst = [ int ( i ) for i in str ( num ) ] #NEWLINE#
pl . show ( ) #NEWLINE#
plt . imshow ( a_colors , interpolation = 'nearest' ) #NEWLINE#
syncdict . update ( [ ( key , syncdict . get ( key ) + inc ) ] ) #NEWLINE#
break #NEWLINE#
os . system ( 'chcp#SPACE#65001' ) #NEWLINE#
df . groupby ( 'A' ) . C_sign . value_counts ( ) #NEWLINE#
ax . axis ( 'off' ) #NEWLINE#
ax2 . imshow ( template , cmap = plt . cm . gray ) #NEWLINE#
data = csv . reader ( f , delimiter = ',' , quotechar = '"' , escapechar = '\\' ) #NEWLINE#
print ( list1 [ - 5 : ] ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
gc . get_objects ( ) #NEWLINE#
print ( '\ndog\ncat\n' . strip ( ) ) #NEWLINE#
ASTVisitor . __init__ ( self ) #NEWLINE#
print ( all ( int ( a ) in b for a , b in zip ( test_ip . split ( '.' ) , toks ) ) ) #NEWLINE#
foo ( ) #NEWLINE#
logger = logging . getLogger ( COMPANY_LOGGER ) #NEWLINE#
self . cbutton . grid ( row = 10 , column = 3 , sticky = W + E ) #NEWLINE#
"""Sitemap""" #NEWLINE#
return m [ : , : , : : - 1 ] #NEWLINE#
server . terminate ( ) #NEWLINE#
APP_ROOT = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
rans . execute ( 'https://-----.pythonanywhere.com/api/story' , json . toString ( ) ) #NEWLINE#
C . __init__ ( self ) #NEWLINE#
i1 = [ [ [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] ] , [ [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , #NEWLINE# 1 ] , [ 1 , 1 , 1 , 1 ] ] ] #NEWLINE#
[ ( y1 - x1 , y2 - x2 ) for ( x1 , x2 ) , ( y1 , y2 ) in combinations ( myList , 2 ) ] #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 ] #NEWLINE#
col_1 = M [ : , ( 1 ) ] #NEWLINE#
slicedX = X [ : , 3 : 5 ] #NEWLINE#
df . text . apply ( lambda x : pd . value_counts ( x . split ( '#SPACE#' ) ) ) . sum ( axis = 0 ) #NEWLINE#
- 1 * np . ones ( ( 2 , 5 ) ) #NEWLINE#
sachine = streetno [ '1' ] #NEWLINE#
cv . WaitKey ( - 1 ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
( b - a ) . total_seconds ( ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
new_im . show ( ) #NEWLINE#
new_im . paste ( im , ( i , j ) ) #NEWLINE#
int ( round ( 170 , - 2 ) ) #NEWLINE#
cursor . executemany ( 'INSERT#SPACE#INTO#SPACE#bs#SPACE#(id)#SPACE#VALUES#SPACE#(%s)' , zip ( list ( range ( 1 , #NEWLINE# 10000 ) ) ) ) #NEWLINE#
self . view . header ( ) . resizeSection ( column , width ) #NEWLINE#
[ var for var in combinations ( [ 1 , 2 , 3 , 4 , 5 ] , 2 ) ] #NEWLINE#
test ( ) #NEWLINE#
tdelta . total_seconds ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df . apply ( lambda r : pd . Series ( { 'mean' : r . mean ( ) , 'std' : r . std ( ) } ) ) . transpose ( ) #NEWLINE#
set ( [ 'somekey' , 'someotherkey' , 'somekeyggg' ] ) . issubset ( d ) #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 8 , 10 , 12 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
self . assertAlmostEqual ( em ( 1 , 2 ) , 0.1481 , 4 ) #NEWLINE#
print ( 'Parsed:' , p . parse ( item ) ) #NEWLINE#
index1 = [ ( 0 , 3 ) , ( 4 , 8 ) ] #NEWLINE#
plt . suptitle ( 'figimage' ) #NEWLINE#
sample . housing . map ( dict ( yes = 1 , no = 0 ) ) #NEWLINE#
"""blah#SPACE#4#SPACE#xzuyguhbc#SPACE##SPACE#ibcbb#SPACE#bqw#SPACE#2#SPACE#extract1#SPACE##SPACE#☺️#SPACE#jbjhcb#SPACE#6#SPACE#extract2#SPACE##SPACE#bjvcvvv""" #NEWLINE#
conn . request ( 'POST' , '/wireless' , params , headers ) #NEWLINE#
list1 = [ 'T' , 'P' , 'M' , 'M' , 'A' , 'R' , 'k' , 'M' , 'G' , 'C' ] #NEWLINE#
[ '>Safr03' , 'G' , '104' ] [ '>Safr02' , 'Y' , '15' ] #NEWLINE#
'kstwobign' , 'laplace' , 'logistic' , 'loggamma' , 'loglaplace' , 'lognorm' #NEWLINE#
'pareto' , 'pearson3' , 'powerlaw' , 'powerlognorm' , 'powernorm' , 'rdist' #NEWLINE#
'reciprocal' , 'rayleigh' , 'rice' , 'recipinvgauss' , 'semicircular' , 't' #NEWLINE#
print ( len ( request . headers ) ) #NEWLINE#
ax . spines [ 'left' ] . set_linewidth ( 3 ) #NEWLINE#
[ ( x * next ( cyc ) ) for x in lis [ 0 ] ] #NEWLINE#
print ( sympify ( 'barn/meter**2' ) . subs ( subs ) ) #NEWLINE#
i = int ( float ( s ) ) #NEWLINE#
fp . write ( '%s,%d\n' % word_and_count ) #NEWLINE#
ax . xaxis . set_major_formatter ( mpl . ticker . FuncFormatter ( myFormatter ) ) #NEWLINE#
print ( df . to_string ( float_format = '${:,.2f}' . format ) ) #NEWLINE#
tested = [ i for i in input if i > 2 ] #NEWLINE#
pprint ( od , width = 40 ) #NEWLINE#
return { 'get_url' : get_url } #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
print ( xor_em ( [ 1 , 2 , 3 ] ) ) #NEWLINE#
flat = itertools . chain . from_iterable ( pairs ) #NEWLINE#
return re . sub ( '[' + re . escape ( '' . join ( chars ) ) + ']' , '' , subj ) #NEWLINE#
log ( self . __class__ . __name__ ) . error ( 'error#SPACE#from#SPACE#test#SPACE#class#SPACE#A' ) #NEWLINE#
FOUT . write ( line ( 'd' , 5 ) ) #NEWLINE#
FOUT . write ( line ( 'e' , 5 ) ) #NEWLINE#
return HttpResponse ( status = 204 ) #NEWLINE#
mylib . mySub . argtypes = [ POINTER ( c_double ) , c_int , POINTER ( c_double ) ] #NEWLINE#
bpy . context . scene . objects [ 'objName' ] . select #NEWLINE#
ax . yaxis . set_major_formatter ( y_formatter ) #NEWLINE#
extra_kwargs = { 'username' : { 'validators' : [ ] } } #NEWLINE#
axins1 . imshow ( Z2 , extent = extent , interpolation = 'nearest' , origin = 'lower' ) #NEWLINE#
genres = [ 'humor' , 'action' , 'comedy' ] #NEWLINE#
user = User . objects . get ( pk = uid ) #NEWLINE#
a_to_as = np . argsort ( a ) #NEWLINE#
self . parser . add_argument ( 'whatever' , type = str , required = True ) #NEWLINE#
even = list ( next ( iter ( ( ) ) ) if n == 412 else n for n in numbers if 0 == n % 2 ) #NEWLINE#
savefig ( 'foo.pdf' ) #NEWLINE#
file = open ( 'file.txt' , 'rb' ) #NEWLINE# table = [ row . strip ( ) . split ( '\t' ) for row in file ] #NEWLINE#
( 0 , '%s' ) , ( 3 , '%li' ) #NEWLINE#
textpath ( string , x = 0 , y = 0 , fontname = None , fontsize = None , fontweight = None ) #NEWLINE#
ttk . Radiobutton ( self . mainframe , value = 0 ) . grid ( column = 1 , row = 2 ) #NEWLINE#
pass #NEWLINE#
path = win32api . GetShortPathName ( path ) #NEWLINE#
jfile = json . loads ( '' . join ( lines ) ) #NEWLINE#
dis . dis ( lambda : { f ( '1' ) : f ( '2' ) , f ( '3' ) : f ( '4' ) } ) #NEWLINE#
np . frombuffer ( random . bytes ( 10 * bytes_per_float ) , dtype = np . float32 ) #NEWLINE#
print ( ArrayAddition ( [ 2 , 95 , 96 , 97 , 98 , 99 , 100 ] ) ) #NEWLINE#
map ( func , * sequences ) #NEWLINE#
print ( float ( x ) ) #NEWLINE#
[ ips_data [ ip ] for ip in sorted_ips ] #NEWLINE#
nDigits = int ( ceil ( log ( nmb , base ) ) ) #NEWLINE#
array ( [ [ 3 , 0 , 0 ] , [ 4 , 0 , 0 ] , [ 5 , 0 , 0 ] ] ) #NEWLINE#
array ( [ 3.0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Current#SPACE#time:#SPACE#' + str ( t . hour ) + ':' + str ( t . minute ) ) #NEWLINE#
reactor . run ( ) #NEWLINE#
return { 'ABC' : 123 } #NEWLINE#
parse_tree ( d , [ 'k' , 'stuff' ] ) #NEWLINE#
self . assertEqual ( expected , self . nums . marshal ( ) ) #NEWLINE#
print ( find_dupe_rows ( array1 , array2 , array3 ) ) #NEWLINE#
return self . fcall ( * args ) #NEWLINE#
signal . signal ( signal . SIGTERM , sigterm_handler ) #NEWLINE#
import imp #NEWLINE# foo = imp . reload ( foo ) #NEWLINE#
return int ( '' . join ( '01' [ i ] for i in bitlist ) , 2 ) #NEWLINE#
df [ list ( df . columns [ : 2 ] ) + [ 7 ] ] #NEWLINE#
return { 'data' : 'your#SPACE#data#SPACE#here' , 'other_information' : 'more_stuff' } #NEWLINE#
a = np . array ( [ [ 1 , 5 , 6 ] , [ 2 , 4 , 1 ] , [ 3 , 1 , 5 ] ] ) #NEWLINE#
print ( 'List#SPACE#of#SPACE#includes:' ) #NEWLINE#
config . include ( 'pyramid_beaker' ) #NEWLINE#
num = int ( input ( 'input#SPACE#number:#SPACE#' ) ) #NEWLINE# print ( '\x1b[A#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#\x1b[A' ) #NEWLINE#
admin . site . register ( LocationGroup ) #NEWLINE#
container . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
os . unlink ( 'cover.log' ) #NEWLINE#
numpy . fromiter ( ( your_func ( row ) for row in X ) , dtype = bool , count = len ( X ) ) #NEWLINE#
from os . path import abspath #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
zip ( * data ) #NEWLINE#
self . frame . pack ( ) #NEWLINE#
re . sub ( ':([a-z]+)' , '<span>\\1</span>' , method ) #NEWLINE#
H . add_edge ( '' . join ( p_node ) , '' . join ( node ) ) #NEWLINE#
{ { users | join ( ',#SPACE#' ) } } #NEWLINE#
f . close ( ) #NEWLINE#
"""{:f}""" . format ( 10 ** - 3 ) . rstrip ( '0' ) #NEWLINE#
ainb = np . array ( [ ( x in b ) for x in a [ : , ( 2 ) ] ] ) #NEWLINE#
print ( '(imported#SPACE#datetime,#SPACE#os,#SPACE#pprint,#SPACE#re,#SPACE#sys,#SPACE#time)' ) #NEWLINE#
name = CharField ( ) #NEWLINE#
G . add_edge ( 'a' , 'c' , weight = 1 ) #NEWLINE#
G . add_edge ( 'c' , 'd' , weight = 1 ) #NEWLINE#
infile = open ( 'yourfilename.pickle' , 'r' ) #NEWLINE#
f . read ( ) #NEWLINE#
print ( 'Option#SPACE#-o#SPACE#or#SPACE#--opt#SPACE#has#SPACE#been#SPACE#provided' ) #NEWLINE#
plt . ylim ( - 1 , 2 ) #NEWLINE#
return [ str [ i : i + chunk_size ] for i in range ( 0 , len ( str ) , chunk_size ) ] #NEWLINE#
l [ t [ 0 ] ] [ t [ 1 ] ] = something #NEWLINE#
unq_out = np . any ( np . diff ( sorted_Ar , axis = 0 ) , 1 ) . sum ( ) + 1 #NEWLINE#
'Ã\x84' == 'Ä' #NEWLINE#
sorted ( li , key = lambda x : x . anniversary_score ) #NEWLINE#
pd . rolling_mean ( df , window = 30 ) [ 9 : : 5 ] #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 2 , ( 100 , 3 ) ) , columns = list ( 'ABC' ) ) #NEWLINE#
db = sqlite3 . connect ( '/tmp/thedb' ) #NEWLINE#
sys . exit ( - 1 ) #NEWLINE#
ole32 = ctypes . windll . ole32 #NEWLINE#
lst = [ 'abc' , 'ab' , 'aÃ¡' ] #NEWLINE#
sess . run ( init_new_vars_op ) #NEWLINE#
with open ( '/path/to/some/file' , 'r' ) as fp : #NEWLINE# #INDENT# hex_list = [ '{:02x}' . format ( ord ( c ) ) for c in fp . read ( ) ] #NEWLINE#
self . assertTrue ( r . zrangebyscore ( name , 1 , 1 ) == [ 'one' ] ) #NEWLINE#
return np . roots ( [ a , b , c ] ) #NEWLINE#
main ( ) #NEWLINE#
title = models . CharField ( ) #NEWLINE#
f = { 'eventName' : 'myEvent' , 'eventDescription' : 'cool#SPACE#event' } #NEWLINE#
print ( 'Content-Type:#SPACE#text/plain\r\n\r\n' ) #NEWLINE#
list ( get_collapsed_ranges ( [ [ 0 , 3 ] , [ 2 , 5 ] , [ 4 , 5 ] , [ 1 , 6 ] , [ 8 , 10 ] ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
MyInterpreter ( ) . cmdloop ( ) #NEWLINE#
return render_template ( 'contact.html' , form = form ) #NEWLINE#
parser . add_argument ( '--foo' , nargs = 2 , metavar = ( 'bar' , 'baz' ) ) #NEWLINE#
label3 = np . dstack ( ( label255 , label255 , label255 ) ) #NEWLINE#
plt . legend ( prop = { 'size' : 50 } ) #NEWLINE#
x = np . linspace ( 0 , 2 * np . pi ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
s1 . add_layout ( LinearAxis ( y_range_name = 'foo' , axis_label = 'foo#SPACE#label' ) , 'right' ) #NEWLINE#
conn . send ( xmpp . Presence ( to = '%s/%s' % ( room , nickname ) ) ) #NEWLINE#
np . issubdtype ( np . complex64 , np . integer ) #NEWLINE#
sizer . Add ( widget , proportion = 0 , style = wx . ALL , border = 5 ) #NEWLINE#
csv_out . close ( ) #NEWLINE#
ax . bar ( x , y , align = 'center' ) #NEWLINE#
self . fp . flush ( ) #NEWLINE#
file_old = open ( '1.php' , mode = 'rU' , encoding = 'gb2312' , errors = 'replace' ) #NEWLINE#
run ( 'df#SPACE#-h' ) #NEWLINE#
sqs . filter ( has_been_sent = 'true' ) #NEWLINE#
df . loc [ : '2015-04-25' ] . tail ( 3 ) #NEWLINE#
print ( [ v for v in values if len ( v [ 1 ] ) > 1 ] ) #NEWLINE#
wallet . setFolder ( 'kwallet_example' ) #NEWLINE#
return str1_list == str2_list #NEWLINE#
df = pd . DataFrame ( data = None , columns = [ 'Test1' , 'Test2' ] , index = cbd ) #NEWLINE#
url ( '^entries/$' , AjaxListView . as_view ( model = Entry ) ) #NEWLINE#
return int ( s ) #NEWLINE#
driver = WebDriver ( 'http://172.16.205.129:4444' , 'firefox' , 'ANY' ) #NEWLINE#
driver = WebDriver ( 'http://172.16.205.129:4444/wd/hub' , 'firefox' , 'ANY' ) #NEWLINE#
pprint ( list ( iter_rows ( ws ) ) ) #NEWLINE#
ax . plot ( data1 ) #NEWLINE#
[ 'Reid,' , 'Mark' , 'and' , 'Connie' , '2/28/2015' ] #NEWLINE#
cid = fig . canvas . mpl_connect ( 'button_press_event' , onclick ) #NEWLINE#
tunnel . start ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
[ 'Cortese,' , 'Robert' , 'and' , 'Laura' , '10/15/2014' ] #NEWLINE#
xbook . close ( ) #NEWLINE#
cv . ShowImage ( 'Camera#SPACE#2' , frame2 ) #NEWLINE#
Button ( root , text = 'Exit' , command = lambda r = root : r . destroy ( ) ) . pack ( ) #NEWLINE#
[ 'http://example.com' , 'http://example2.com' ] #NEWLINE#
pd . Series ( test ) . where ( lambda x : x != 1 ) . dropna ( ) #NEWLINE#
return f ( * args ) #NEWLINE#
process . poll ( ) #NEWLINE#
REST_FRAMEWORK = { 'DEFAULT_METADATA_CLASS' : 'my.customize.RsMetaData' } #NEWLINE#
print ( 'FAIL#SPACE#{}' . format ( url ) ) #NEWLINE#
lines = [ line for line in f if line . strip ( ) ] #NEWLINE#
'%(foo)s#SPACE#%(bar)d' % vars ( ) #NEWLINE#
yield { 'k' : dct [ 'k' ] , 'stuff' : dct [ 'stuff' ] } #NEWLINE#
print ( any ( sd [ 'serial' ] == '00000000762c1d3c' for sd in d [ 'device' ] ) ) #NEWLINE#
reversed_phrase = '#SPACE#' . join ( [ word [ : : - 1 ] for word in phrase . split ( ) ] ) #NEWLINE#
print ( occs [ 'l' ] ) #NEWLINE#
next = driver . find_element_by_xpath ( "//a[text()='Next']" ) #NEWLINE# prev = driver . find_element_by_xpath ( "//a[text()='Previous']" ) #NEWLINE#
exec_module ( http . server , dict ( __name__ = '__main__' ) ) #NEWLINE#
info [ 2 ] [ 1 ] == 6 #NEWLINE#
Text . __init__ ( self , * args , ** kwargs ) #NEWLINE#
menu . addAction ( QtGui . QAction ( '100%' , menu , checkable = True ) ) #NEWLINE#
menu . addAction ( QtGui . QAction ( '200%' , menu , checkable = True ) ) #NEWLINE#
menu . addAction ( QtGui . QAction ( '300%' , menu , checkable = True ) ) #NEWLINE#
super ( LockedSet , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
a1 = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
a , b = given_str [ : len ( given_str ) / 2 ] , given_str [ len ( given_str ) / 2 : ] #NEWLINE#
s . reset_index ( ) #NEWLINE#
def f ( x ) : #NEWLINE# #INDENT# return x * 2 #NEWLINE#
df . reindex ( all_days ) #NEWLINE#
a = os . path . getsize ( 'C:/TestFolder/Input/1.avi' ) #NEWLINE#
fname = open ( 'feed.txt' , 'r' ) #NEWLINE#
print ( dict ( re . findall ( '(.+?)\\((.*?)\\)' , s ) ) ) #NEWLINE#
g . write ( newjpgtxt . decode ( 'base64' ) ) #NEWLINE#
get_value ( dic , 0 ) #NEWLINE#
return mdd , start , end #NEWLINE#
td = timedelta ( seconds = TimeModel . objects . get ( id = 1 ) . time ) #NEWLINE#
root . append ( etree . Element ( 'child' ) ) #NEWLINE#
def slicedict ( d , s ) : #NEWLINE# #INDENT# return { k : v for k , v in d . items ( ) if k . startswith ( s ) } #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
accesscode = request . GET . get ( 'code' ) #NEWLINE#
next ( list ( filter ( bool , [ False ] ) ) , 'default#SPACE#value#SPACE#here' ) #NEWLINE#
__location__ = os . path . realpath ( os . path . join ( os . getcwd ( ) , os . path . dirname ( #NEWLINE# __file__ ) ) ) #NEWLINE#
[ a , b , c ] #NEWLINE#
subprocess . call ( [ path_to_notepad , path_to_file ] ) #NEWLINE#
data = [ ( x if x . isalpha ( ) else float ( x ) ) for x in line . split ( ) ] #NEWLINE#
Bakery . objects . annotate ( Max ( 'cake__baked_at' ) ) #NEWLINE#
NOSE_ARGS = [ '--with-cov' , '--cov-report' , 'html' ] #NEWLINE#
[ 'A' , '+' , 'B' , '+' , 'C' , '+' , 'D' , '+' , 'E' ] #NEWLINE#
print ( 'running#SPACE#interactively' ) #NEWLINE#
np . array ( [ 0 , 1 ] ) . any ( ) #NEWLINE#
raise ValueError ( 'Equal#SPACE#arguments.' ) #NEWLINE#
self . assertEqual ( result , 'expected_result' ) #NEWLINE#
boxplot_sorted ( df , by = [ 'X' , 'Y' ] , column = 'Z' ) #NEWLINE#
data = self . request . recv ( 1024 ) #NEWLINE#
config = configparser . ConfigParser ( ) #NEWLINE#
file = os . path . join ( os . getcwd ( ) , os . listdir ( os . getcwd ( ) ) [ 0 ] ) #NEWLINE#
a = struct . unpack ( '!I' , socket . inet_pton ( socket . AF_INET , '192.0.43.10' ) ) [ 0 ] #NEWLINE#
from src import module_name #NEWLINE#
parser1 . add_argument ( '-b' , action = 'store_true' ) #NEWLINE#
ws . send ( "5:1::{'name':'newimg',#SPACE#'args':'bla'}" ) #NEWLINE#
result_utc_datetime . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
plot ( x , y ) #NEWLINE#
dict ( [ ( elem , 0 ) for elem in s ] ) #NEWLINE#
sys . stdout . write ( '.' ) #NEWLINE#
store . append ( 'df_result' , m ) #NEWLINE#
out [ 1 : , : ] += tmp [ : - 1 , : ] #NEWLINE#
hex ( bignum ) . rstrip ( 'L' ) . lstrip ( '0x' ) or '0' #NEWLINE#
ax . xaxis . set_major_locator ( ticker . MultipleLocator ( 20 ) ) #NEWLINE#
y = '' . join ( '0' if i == j else '1' for i , j in zip ( a , b ) ) #NEWLINE#
ssh . load_system_host_keys ( ) #NEWLINE#
keys = [ k for k , v in Arr ] #NEWLINE#
np . genfromtxt ( '#SPACE#' . join ( ln . split ( ) [ N : ] ) for ln in f ) #NEWLINE#
plt . show ( ) #NEWLINE#
request . SESSioN [ 'login_tries' ] = 2 #NEWLINE#
fobj = open ( os . path . join ( os . pardir , 'filename' ) , 'w' ) #NEWLINE#
return requests . get ( url , stream = True ) #NEWLINE#
with codecs . open ( 'yop' , 'w' , encoding = 'utf-8' ) as f : #NEWLINE# #INDENT# f . write ( s ) #NEWLINE#
sql . write_frame ( df , 'table_name' , con , flavor = 'postgresql' ) #NEWLINE#
aw2 . show ( ) #NEWLINE#
do_something ( i ) #NEWLINE#
df [ 'diffs' ] [ mask ] = np . nan #NEWLINE#
d [ n1 ] = 'Node#SPACE#1' , n1 #NEWLINE#
tkMessageBox . showinfo ( 'Popup' , 'Hello!' ) #NEWLINE#
out = [ ] #NEWLINE#
q . put ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
print ( type ( parsed ) ) #NEWLINE#
pd . to_numeric ( df [ 'tester' ] , errors = 'coerce' ) #NEWLINE#
raise KeyError ( 'Key#SPACE#already#SPACE#exists' ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
parser . add_argument ( 'command' , nargs = 1 ) #NEWLINE#
retcode = subprocess . call ( [ 'ls' , '-l' ] ) #NEWLINE#
pylab . title ( 'FFT' ) #NEWLINE#
A = alpha * x * y + beta * x ** 2 + gamma * y ** 2 #NEWLINE#
letters = collections . Counter ( 'google' ) #NEWLINE#
foo ( ** { key : 1 , foo : 2 } ) #NEWLINE#
json . dumps ( datetime . datetime . now ( ) , default = date_handler ) #NEWLINE#
found = m . group ( 1 ) #NEWLINE#
open ( uncompressed_path , 'w' ) . write ( s ) #NEWLINE#
FunctionType ( make_adder . __code__ . co_consts [ 1 ] , globals ( ) , None , None , ( 5 , ) ) #NEWLINE#
( 'cp' , 'cp' ) , #NEWLINE#
( 'ldir' , 'ls#SPACE#-F#SPACE#-G#SPACE#-l#SPACE#%l#SPACE#|#SPACE#grep#SPACE#/$' ) , #NEWLINE#
( 'less' , 'less' ) , #NEWLINE#
( 'lf' , 'ls#SPACE#-F#SPACE#-l#SPACE#-G#SPACE#%l#SPACE#|#SPACE#grep#SPACE#^-' ) , #NEWLINE#
( 'lk' , 'ls#SPACE#-F#SPACE#-l#SPACE#-G#SPACE#%l#SPACE#|#SPACE#grep#SPACE#^l' ) , #NEWLINE#
( 'll' , 'ls#SPACE#-F#SPACE#-l#SPACE#-G' ) , #NEWLINE#
( 'ls' , 'ls#SPACE#-F#SPACE#-G' ) , #NEWLINE#
( 'lx' , 'ls#SPACE#-F#SPACE#-l#SPACE#-G#SPACE#%l#SPACE#|#SPACE#grep#SPACE#^-..x' ) , #NEWLINE#
( 'man' , 'man' ) , #NEWLINE#
( 'mkdir' , 'mkdir' ) , #NEWLINE#
( 'more' , 'more' ) , #NEWLINE#
( 'mv' , 'mv' ) , #NEWLINE#
( 'rm' , 'rm' ) , #NEWLINE#
( 'rmdir' , 'rmdir' ) , #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
os . close ( fh1 ) #NEWLINE#
( 15 ) [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
scipy . stats . poisson . ppf ( [ 0.025 , 0.975 ] , data [ : , ( None ) ] ) #NEWLINE#
a . reshape ( ( - 1 , 5 ) ) [ : , 1 : 4 ] = 100 #NEWLINE#
vfunc ( * np . ix_ ( xv , yv , zv ) ) #NEWLINE#
email = forms . EmailField ( required = True ) #NEWLINE#
return fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
df . where ( col ( 'v' ) . isin ( { 'foo' , 'bar' } ) ) . count ( ) #NEWLINE#
tn . write ( 'command1\r\n' ) #NEWLINE#
p . wait ( ) #NEWLINE#
raise Exception ( 'value#SPACE#must#SPACE#be#SPACE#greater#SPACE#than#SPACE#zero' ) #NEWLINE#
return [ push ( D , k , K ) for K , D in list ( c . items ( ) ) ] #NEWLINE#
np . random . uniform ( 5 , 10 ) #NEWLINE# np . random . uniform ( 5 , 10 , [ 2 , 3 ] ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
mask = numpy . random . choice ( [ False , True ] , len ( data_arr ) , p = [ 0.75 , 0.25 ] ) #NEWLINE#
list ( ordered_dict . values ( ) ) [ 2 ] #NEWLINE#
return words [ 0 ] == words [ - 1 ] == check_str #NEWLINE#
plt . ylim ( [ 0 , 5 ] ) #NEWLINE#
winfile . close ( ) #NEWLINE#
print ( #NEWLINE# 'Invoke#SPACE#the#SPACE#bpython#SPACE#interpreter#SPACE#for#SPACE#this#SPACE#stack#SPACE#frame.#SPACE#To#SPACE#exit#SPACE#bpython#SPACE#and#SPACE#return#SPACE#to#SPACE#a#SPACE#standard#SPACE#pdb#SPACE#press#SPACE#Ctrl-d' #NEWLINE# ) #NEWLINE#
df . A . append ( df . B ) . dropna ( ) . reset_index ( drop = True ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
XMLFILES_FOLDER = os . path . join ( PROJECT_ROOT , 'xml_files/' ) #NEWLINE#
print ( [ arr [ i ] [ i ] [ i ] for i in range ( len ( arr ) ) ] ) #NEWLINE#
uwsgi - H / path / to / your / virtualenv #NEWLINE#
urllib . request . urlopen ( r ) #NEWLINE#
print ( my_queryset . query ) #NEWLINE#
soup . findAll ( 'td' ) #NEWLINE#
data . to_sql ( name = 'sample_table2' , con = engine , if_exists = 'append' , index = False ) #NEWLINE#
db . engine . execute ( 'DROP#SPACE#TABLE#SPACE#' + df + ';' ) #NEWLINE#
self . mfcChanged . emit ( ) #NEWLINE#
del mydict [ key ] #NEWLINE#
VIstring = ',' . join ( [ ( '%.5f' % num ) for num in VI ] ) #NEWLINE#
print ( df . groupby ( [ 'doctor#SPACE#name' ] ) . gender . value_counts ( ) ) #NEWLINE#
print ( re . sub ( '(?s)(.)(?=\\1)' , '' , 'aabbcc' ) ) #NEWLINE#
logger = get_task_logger ( __name__ ) #NEWLINE#
a [ ( 0 , 2 ) , : , : ] #NEWLINE#
self . rect . left += self . xvel #NEWLINE#
pipe . wait ( ) #NEWLINE#
getattr ( __builtin__ , 'range' ) #NEWLINE#
[ k for k , v in groupby ( sorted ( a ) ) ] #NEWLINE#
raise ValueError ( 'depth#SPACE#should#SPACE#be#SPACE#a#SPACE#nonnegative#SPACE#integer#SPACE#or#SPACE#None' ) #NEWLINE#
print ( 'After#SPACE#mod_with_late_dec,#SPACE#global#SPACE#g_c=' + str ( globals ( ) [ 'g_c' ] ) ) #NEWLINE#
a + _ ( b * c ) #NEWLINE#
c = [ ( x + [ y ] ) for x , y in zip ( a , b ) ] #NEWLINE#
plt . hist ( df [ 'column_name' ] , log = True ) #NEWLINE#
list ( x for x in string . letters if x in ( y for y in 'BigMan#SPACE#on#SPACE#campus' ) ) #NEWLINE#
cdf1 = pandas . read_csv ( 'csv1' , dtype = object ) #NEWLINE#
data = numpy . fromfile ( my_file , dtype = numpy . uint8 ) . reshape ( - 1 , N ) #NEWLINE#
[ [ 1 , 4 , 5 , 9 , 12 ] , [ 1 , 4 , 5 , 8 , 12 ] , [ 1 , 2 , 3 , 6 , 12 ] , [ 0 , 2 , 3 , 6 , 12 ] ] #NEWLINE#
deep_search ( [ 'P1' , 'P3' ] , json . loads ( json_string ) ) #NEWLINE#
fa . append ( lambda x = x : sys . stdout . write ( str ( x ) + '\n' ) ) #NEWLINE#
print ( [ name for name in dir ( B ) if isbuiltin ( getattr ( B , name ) ) ] ) #NEWLINE#
sample_object . save ( ) #NEWLINE#
sns . regplot ( 'x' , 'y' , data , ax = ax , scatter_kws = { 's' : 100 } ) #NEWLINE#
f = partial ( f_from_data , [ 3 , 4 , 6 ] , [ 0 , 1 , 2 ] ) #NEWLINE#
print ( tree . getpath ( e ) ) #NEWLINE#
os . makedirs ( dest_dir ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
binascii . hexlify ( struct . pack ( '2I' , 12 , 32 ) ) #NEWLINE#
list ( range ( * args ) ) #NEWLINE#
day_of_year = time . strptime ( '2012.11.07' , '%Y.%m.%d' ) . tm_yday #NEWLINE#
"""2011-05-25T20:34:05.787Z""" #NEWLINE#
truth = word . startswith ( '^' ) or word . startswith ( '@' ) #NEWLINE#
r , g , b = wfloat . transpose ( ( 2 , 0 , 1 ) ) #NEWLINE#
self . myFunction ( a , b , c = '123' ) #NEWLINE#
d = { k : v for dct in l for k , v in list ( dct . items ( ) ) } #NEWLINE#
return '{}.a' . format ( __class__ . __name__ ) #NEWLINE#
f . write ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
logger . info ( 'Ended' ) #NEWLINE#
numpy . random . randint ( 0 , 1000 , count ) * 0.001 #NEWLINE#
pip . main ( [ 'install' , 'package' ] ) #NEWLINE#
s . sort ( ) #NEWLINE#
d = { 'keyword1' : 3 , 'keyword2' : 1 , 'keyword3' : 5 , 'keyword4' : 2 } #NEWLINE# sorted ( d , key = d . get , reverse = True ) #NEWLINE#
V . dimshuffle ( 0 , 1 , 'x' ) * W . dimshuffle ( 0 , 'x' , 1 ) #NEWLINE#
o = urlparse ( 'http://www.cwi.nl:80/%7Eguido/Python.html' ) #NEWLINE#
plt . imshow ( Z , cmap = 'gray' , interpolation = 'nearest' ) #NEWLINE#
parser . add_argument ( '-c' , '--chunksize' , metavar = '\x08' , type = int , help = #NEWLINE# 'chunk#SPACE#size#SPACE#in#SPACE#bits' ) #NEWLINE#
plot ( xdata , ydata2 , 'g' ) #NEWLINE#
print ( ',#SPACE#' . join ( urls ) ) #NEWLINE#
ax . plot ( x , y * 2 ) #NEWLINE#
s = s [ : 3 ] + 'd' + s [ 4 : ] #NEWLINE#
return '' . join ( padding + line for line in text . splitlines ( True ) ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
print ( match . group ( 'brackets' ) ) #NEWLINE#
[ 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 ] , #NEWLINE#
df_list . append ( pd . read_csv ( 'data/' + f ) ) #NEWLINE#
print ( ( 'Result#SPACE#of#SPACE#running#SPACE#mytest#SPACE#was#SPACE#code' , result_code ) ) #NEWLINE#
l = [ cond ( i ) for i in range ( 1 , n ) ] #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( operator . add , lists ) #NEWLINE#
return base64 . urlsafe_b64encode ( encoded_string ) #NEWLINE#
plt . xlim ( - 5 , 5 ) #NEWLINE#
df [ 'group' ] = df [ 'nonzero' ] . cumsum ( ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
c . execute ( query ) #NEWLINE#
class Car ( models . Model ) : #NEWLINE# #INDENT# manufacturer = models . ForeignKey ( 'production.Manufacturer' ) #NEWLINE#
return flask . send_file ( img_buf , mimetype = 'image/png' ) #NEWLINE#
return re . sub ( '</p>$' , '' , re . sub ( '^<p>' , '' , cleaned_html ) ) #NEWLINE#
"echo#SPACE#password#SPACE#|#SPACE#python#SPACE#script.py#SPACE#'" + packet . toString ( ) + "'" #NEWLINE#
input = 'Item#SPACE#1#SPACE#|#SPACE#Item#SPACE#2#SPACE#|#SPACE#Item#SPACE#3#SPACE#<>#SPACE#Item#SPACE#4#SPACE#<>#SPACE#Item#SPACE#5' #NEWLINE# re . split ( '\\||<>' , input ) #NEWLINE# [ 'Item#SPACE#1#SPACE#' , '#SPACE#Item#SPACE#2#SPACE#' , '#SPACE#Item#SPACE#3#SPACE#' , '#SPACE#Item#SPACE#4#SPACE#' , '#SPACE#Item#SPACE#5' ] #NEWLINE#
print ( lxml . etree . tostring ( the_doc , pretty_print = True ) ) #NEWLINE#
import imp #NEWLINE# imp . reload ( logging ) #NEWLINE#
screen . blit ( surf2 , ( 200 , 200 , 100 , 100 ) ) #NEWLINE#
plt . figure ( figsize = ( 7 , 7 ) ) #NEWLINE#
assert False , 'Oopsie' #NEWLINE#
sizer . Add ( fsizer , 0 , wx . EXPAND ) #NEWLINE#
matplotlib . use ( 'cairo' ) #NEWLINE#
return super ( Circle , self ) . ToString ( ) + ',{RADIUS=' + str ( self . radius ) + '}' #NEWLINE#
[ ( 'c' , 0 ) , ( 'b' , 89 ) ] #NEWLINE#
print ( '3232235521#SPACE#->#SPACE#%s' % Int2IP ( 3232235521 ) ) #NEWLINE#
tf . matmul ( tf . transpose ( x ) , y ) #NEWLINE#
logging . info ( line ) #NEWLINE#
objs = YourModel . objects . using ( 'dummy' ) . all ( ) #NEWLINE#
pickle . dump ( htmlString , open ( 'D:\\Download\\htmlString.p' , 'w' ) ) #NEWLINE#
main ( ) #NEWLINE#
tree . add ( 2 ) #NEWLINE#
"""Μεταλλικα""" #NEWLINE#
plt . show ( ) #NEWLINE#
avg_sum . append ( A . sum ( axis = 1 ) . mean ( ) ) #NEWLINE#
return ( self . players1 . all ( ) | self . players2 . all ( ) ) . distinct ( ) #NEWLINE#
result = process . communicate ( ) [ 0 ] #NEWLINE#
pass #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
print ( 'Usage:#SPACE#sendsms.py#SPACE#[configfile]#SPACE#RECIPIENT_NUMBER' ) #NEWLINE#
Gtk . main ( ) #NEWLINE#
QWebView . __init__ ( self ) #NEWLINE#
options = webdriver . ChromeOptions ( ) #NEWLINE#
plt . imshow ( mask2 , cmap = 'rainbow' ) #NEWLINE#
B . multiply ( A . reindex ( B . index , method = 'ffill' ) ) #NEWLINE#
return int ( math . ceil ( x / 100.0 ) ) * 100 #NEWLINE#
[ i for i in a if i != [ 0 ] ] #NEWLINE#
x = np . linspace ( 0 , 10 , 50 ) #NEWLINE# y = 3 * x ** 2 + 5 + 2 * np . sin ( x ) #NEWLINE#
[ solution for solution in solve ( 4 ) ] #NEWLINE#
ast . literal_eval ( '"hello".upper()' ) #NEWLINE#
force . add_argument ( 'newstate' , choices = [ 'ON' , 'OFF' ] ) #NEWLINE#
a = axes ( [ 0.35 , 0.6 , 0.2 , 0.2 ] , axisbg = 'y' ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
return image . astype ( np . uint8 ) #NEWLINE#
df [ 'visit_period' ] = pd . cut ( df . sec , np . arange ( 8 , 25 , 4 ) * 3600 , labels = d ) #NEWLINE#
map ( lambda d : abs ( d - date ) , dates ) #NEWLINE#
self . canvas . mpl_connect ( 'button_release_event' , self . on_release ) #NEWLINE#
application = webapp2 . WSGIApplication ( [ ( '/(.*)' , Fragment ) ] , debug = True ) #NEWLINE#
sys . setrecursionlimit ( 100000 ) #NEWLINE#
utils . fastprint ( 'Turned#SPACE#on#SPACE#maintenance#SPACE#mode.' ) #NEWLINE#
cols . append ( str ( col ) ) #NEWLINE#
'bar' in Foo . __dict__ #NEWLINE#
s . cookies . clear ( ) #NEWLINE#
rc1 = np . array ( [ [ 0 , 0 , 0 ] , [ 0 , 3 , 0 ] ] ) #NEWLINE#
dates_dict [ key ] . append ( date ) #NEWLINE#
np . maximum . accumulate ( Q , axis = 1 ) #NEWLINE#
self . own_id = current_socket . getsockname ( ) [ 1 ] #NEWLINE#
thejson = json . dumps ( { 'results' : posts } , cls = MongoAwareEncoder ) #NEWLINE#
plt . title ( 'Meshgrid#SPACE#Created#SPACE#from#SPACE#3#SPACE#1D#SPACE#Arrays' ) #NEWLINE#
image . save ( 'hsvwheel_txt.png' ) #NEWLINE#
np . where ( np . sum ( x == abc [ : , ( None ) ] , axis = 0 ) ) #NEWLINE#
canvas . drawString ( 10 , 150 , 'Some#SPACE#text#SPACE#encoded#SPACE#in#SPACE#UTF-8' ) #NEWLINE#
term = urllib . parse . quote ( "'{}'" . format ( term ) ) #NEWLINE#
url ( '^manage/list/(?P<model_name>.*)/$' , MyCbv . as_view ( ) ) , #NEWLINE#
ax . yaxis . set_major_locator ( ticker . MultipleLocator ( 20 ) ) #NEWLINE#
plt . savefig ( 'blkwht.png' ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
sns . set_style ( 'whitegrid' ) #NEWLINE#
ax . spines [ 'top' ] . set_visible ( False ) #NEWLINE# ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
{ 'text' : { 'record.document' : 'SOME_JOURNAL' } } , #NEWLINE#
test ( [ 'important' , 'comment' ] ) #NEWLINE# test ( [ 'important' , 'comment' , 'bar' ] ) #NEWLINE#
df . loc [ df . a . isin ( ids ) , 'c' ] += 100 #NEWLINE#
random . shuffle ( l ) #NEWLINE#
Gh . add_edge ( 'You' , 'Bike' , weight = 1.0 ) #NEWLINE#
stream = sys . argv [ 1 ] if len ( sys . argv ) > 1 else sys . stdin #NEWLINE#
"""/usr/local/share/python/virtualenv""" #NEWLINE#
addrs [ netifaces . AF_INET6 ] [ 0 ] [ 'addr' ] #NEWLINE#
tag [ 'href' ] = urlparse . urljoin ( url , tag [ 'href' ] ) #NEWLINE#
obj . save ( ) #NEWLINE#
PageModel . all ( ) . filter ( '__key__#SPACE#=#SPACE#' , key ) #NEWLINE#
my_df . to_csv ( 'my_csv.csv' , index = False , header = False ) #NEWLINE#
outer_list = sorted ( sorted ( outer_list , key = lambda x : ( x [ 0 ] , x [ 2 ] , x [ 4 ] ) ) , #NEWLINE# key = lambda x : ( x [ 1 ] , x [ 3 ] ) , reverse = True ) #NEWLINE#
wx . Panel . __init__ ( self , parent ) #NEWLINE#
x = int ( x ) #NEWLINE#
i += 1 #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_xlim ( lims ) #NEWLINE#
import theano . tensor as T #NEWLINE#
a = [ Decimal ( x ) for x in '2.3,1.5,5.7,4.6,5.5,1.5' . split ( ',' ) ] #NEWLINE#
plt . setp ( ax2 . get_yticklabels ( ) , visible = False ) #NEWLINE#
set ( [ ( 1 , 2 ) , ( 3 , 4 ) , ( 2 , 3 ) ] ) #NEWLINE#
print ( '***' , nfailed ) #NEWLINE#
json . dump ( my_dict , f ) #NEWLINE#
fields = [ 'username' , 'country' , 'website' , 'biography' ] #NEWLINE#
a . split ( ) #NEWLINE#
match = re . search ( '[^f]' , line ) #NEWLINE#
sum ( map ( my_condition , l ) ) #NEWLINE#
ax . add_patch ( patch ) #NEWLINE#
y = np . random . randn ( 100 , 3 ) #NEWLINE#
exp . match ( var ) . group ( 1 ) #NEWLINE#
start = str ( cols [ 1 ] . find ( text = True ) ) #NEWLINE#
l = [ 4 , 5 , 6 ] #NEWLINE# tuple ( l ) #NEWLINE#
filename = os . path . join ( 'path' , 'to' , 'image' , 'file' ) #NEWLINE#
df . loc [ ( df [ 0 ] == k [ 0 ] ) & ( df [ 1 ] == k [ 1 ] ) ] = [ [ v [ 0 ] , v [ 1 ] ] ] #NEWLINE#
[ ( 'NNP' , 'WRB' ) , ( 'WRB' , 'VBP' ) , ( 'VBP' , 'PRP' ) , ( 'PRP' , 'NN' ) ] #NEWLINE#
food = [ random . choice ( i ) for i in list ( my_dict . values ( ) ) ] #NEWLINE#
w = pickle . load ( open ( 'file' , 'rb' ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
df1 = df [ [ 'a' , 'd' ] ] #NEWLINE#
del x [ k ] #NEWLINE#
print ( 'got#SPACE#metadata,#SPACE#starting#SPACE#torrent#SPACE#download...' ) #NEWLINE#
df2 = pd . DataFrame ( { 'b' : [ 100 , 200 , 300 ] } ) #NEWLINE#
type ( ) #NEWLINE#
re . sub ( '[a-z]([A-Z])' , '-\\1' , inputstring ) . lower ( ) #NEWLINE#
foo ( '3' , '4' ) #NEWLINE#
indices = zip ( * sp_matrix . nonzero ( ) ) #NEWLINE#
admin . site . register ( newmodel , modeladmin ) #NEWLINE#
print ( '{:<20}#SPACE#{:<20}' . format ( word1 , word2 ) ) #NEWLINE#
X [ np . ix_ ( idx , idx ) ] #NEWLINE#
plt . imshow ( np . random . random ( ( 5 , 5 ) ) , interpolation = 'nearest' ) #NEWLINE#
mail . starttls ( ) #NEWLINE#
bin ( ord ( 'a' ) ) #NEWLINE#
data = pd . read_csv ( 'names.csv' , nrows = 1 ) #NEWLINE#
[ z0 ] * len ( seconds ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , #NEWLINE#
p . start ( ) #NEWLINE#
x = numpy . arange ( data . shape [ 1 ] ) #NEWLINE#
out . value_counts ( sort = False ) . plot . bar ( ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#Label' ) #NEWLINE#
a = np . array ( [ [ 2 , 0 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , 2 ] ] ) #NEWLINE#
test . pop ( 5 ) #NEWLINE#
add ( * l ) #NEWLINE#
markers = [ 'Makefile' ] #NEWLINE#
return send_from_directory ( '/path/to/static/files' , filename ) #NEWLINE#
[ [ 1 , 3 , 7 ] , [ 8 , 9 ] ] #NEWLINE#
pattern = re . compile ( '\\B(\\d+)\\B' ) #NEWLINE#
pattern = re . compile ( '\\s+' ) #NEWLINE#
plt . show ( ) #NEWLINE#
writer . writerows ( clean_list ) #NEWLINE#
super ( SplitAddressField , self ) . __init__ ( fields , * args , ** kwargs ) #NEWLINE#
qux = staticmethod ( lambda x : x + '_quux' ) #NEWLINE#
a = fig . add_subplot ( 1 , 2 , 1 ) #NEWLINE#
users_in_group = Group . objects . get ( name = 'group#SPACE#name' ) . user_set . all ( ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ] , #NEWLINE#
signal . signal ( signal . SIGALRM , _handle_timeout ) #NEWLINE#
print ( '#SPACE#' . join ( row ) ) #NEWLINE#
array . sort ( key = lambda k : ( k [ 0 ] - point [ 0 ] ) ** 2 + ( k [ 1 ] - point [ 1 ] ) ** 2 ) #NEWLINE#
os . open ( os . devnull , os . O_RDWR ) #NEWLINE#
x = None #NEWLINE#
self . setCentralWidget ( self . view ) #NEWLINE#
conn . rollback ( ) #NEWLINE#
eval ( compile ( 'do_print();#SPACE#print("it#SPACE#really#SPACE#works")' , '<string>' , 'exec' ) ) #NEWLINE#
pd . merge_asof ( d , df . reset_index ( ) , on = 'Time' , tolerance = pd . Timedelta ( '30Min' ) ) #NEWLINE#
y = numpy . arange ( data . shape [ 0 ] ) #NEWLINE#
print ( dict ( d ) ) #NEWLINE#
self . unit_name_lbl = Label ( self , textvariable = self . var ) #NEWLINE#
[ i for i , ( a1 , a2 ) in enumerate ( zip ( s1 , s2 ) ) if a1 != a2 ] #NEWLINE#
leg = plt . legend ( ) #NEWLINE#
f_new . close ( ) #NEWLINE#
print ( item [ 1 ] , end = '#SPACE#' ) #NEWLINE#
df . as_matrix ( columns = [ df [ 1 : ] ] ) #NEWLINE#
self . axes . set_title ( title ) #NEWLINE#
sys . argv += [ '--install-script' , 'install.py' ] #NEWLINE#
df = pd . read_csv ( 'foo.csv' , header = [ 0 , 1 , 2 ] , index_col = [ 0 , 1 ] , #NEWLINE# tupleize_cols = False , sep = '\\s*,\\s+' ) #NEWLINE#
num_words += len ( line . split ( ) ) #NEWLINE#
get_version ( 'foobar' ) #NEWLINE#
new_x = np . ma . masked_where ( np . ma . getmask ( m ) , x ) #NEWLINE#
root . bind ( '<Return>' , callback ) #NEWLINE#
"""{0:o}""" . format ( 100 ) #NEWLINE#
image = np . zeros ( ( max_x , max_y ) ) #NEWLINE#
B = numpy . array ( [ [ 5 , 3 , 5 ] , [ 3 , 5 , 3 ] , [ 5 , 3 , 5 ] ] ) #NEWLINE#
input = [ 'a/b' , 'g' , 'c/d' , 'h' , 'e/f' ] #NEWLINE# print ( [ i . split ( '/' ) [ 1 ] for i in input if i . find ( '/' ) == 1 ] ) #NEWLINE#
cyclic_equiv ( [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ) #NEWLINE#
text . tag_configure ( 'red' , foreground = 'red' ) #NEWLINE#
index = np . array ( [ 0 , 1 , 2 ] ) #NEWLINE#
headers . update ( { 'Content-Type' : 'application/json' } ) #NEWLINE#
parts = [ x . replace ( '"' , '' ) for x in line . strip ( ) . split ( ',' ) ] #NEWLINE#
np . loadtxt ( in_f , delimiter = ',' ) #NEWLINE#
{ { url_for ( 'viewproj' , proj = xxx ) } } #NEWLINE#
new . append ( l [ i : i + 5 ] ) #NEWLINE#
df [ 'Combined_ID' ] = df . fillna ( '' ) . sum ( axis = 1 ) #NEWLINE#
main ( sys . argv [ 1 ] ) #NEWLINE#
df [ 'D' ] = 'c3' #NEWLINE#
ax1 . plot ( list ( range ( 0 , 10 ) ) ) #NEWLINE#
versiontuple ( '2.3.1' ) > versiontuple ( '10.1.1' ) #NEWLINE#
[ bool ( re . search ( 'String' , i ) ) for i in strings ] #NEWLINE#
s . connect ( ( 'localhost' , 11211 ) ) #NEWLINE#
__import__ ( 'foo' , fromlist = [ 'bar' ] ) #NEWLINE#
print ( r . content ) #NEWLINE#
df . to_excel ( writer , index = False ) #NEWLINE#
os . environ [ 'PROJECT_HOME' ] #NEWLINE#
line = line . strip ( ) #NEWLINE#
driver . find_element_by_id ( 'start-upload-button-single' ) . click ( ) #NEWLINE#
heapq . heappush ( heap , ( - prod2 , x , y - 1 ) ) #NEWLINE#
plt . setp ( g . ax_heatmap . get_xticklabels ( ) , rotation = 90 ) #NEWLINE#
ttypager ( text ) #NEWLINE#
self . add_widget ( Label ( text = str ( data ) ) ) #NEWLINE#
type ( c ) ( a ) #NEWLINE#
A . f . __func__ ( b ) #NEWLINE#
sys . path . append ( somepath ) #NEWLINE#
model . add ( Dense ( 1 , init = 'uniform' ) ) #NEWLINE#
A = ( A - mean ( A ) ) / std ( A ) #NEWLINE#
buffer += ser . read ( ser . inWaiting ( ) ) #NEWLINE#
p = np . poly1d ( np . polyfit ( t , data , 2 ) ) #NEWLINE#
df . xs ( 'C' , copy = False ) [ 'x' ] = 10 #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 ) #NEWLINE# ax . xaxis . set_tick_params ( labeltop = 'on' ) #NEWLINE#
l . extend ( t ) #NEWLINE#
{ { include_file ( 'file.txt' ) } } #NEWLINE#
ax . fill_between ( x , y2 , y , color = 'r' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return json . loads ( obj , object_hook = my_decoder ) #NEWLINE#
print ( ( max_i , max_j , max_d ) ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( data ) #NEWLINE#
ax1 . set_color_cycle ( [ cm ( 1.0 * i / ( NPOINTS - 1 ) ) for i in range ( NPOINTS - 1 ) ] ) #NEWLINE#
[ 1 , 4 , 7 , 11 , 13 ] #NEWLINE#
plt . xlim ( - 1 , 4 ) #NEWLINE#
new_list . append ( [ some_tuple ] ) #NEWLINE#
struct . pack ( 'BBB' , * rgb ) . encode ( 'hex' ) #NEWLINE#
pir ( df ) #NEWLINE#
cdll . LoadLibrary ( 'libdl.so' ) . dlclose ( handle ) #NEWLINE#
self . figure . canvas . draw ( ) #NEWLINE#
soup . encode ( 'utf-8' ) #NEWLINE#
listbox . insert ( 'end' , item ) #NEWLINE#
ax . imshow ( X , cmap = cm . jet ) #NEWLINE#
p1 = subprocess . Popen ( [ 'cat' , 'file.log' ] , stdout = subprocess . PIPE ) #NEWLINE#
print ( list ( get_col ( 'tar.data' ) ) ) #NEWLINE#
for i , num in enumerate ( mylist ) : #NEWLINE# #INDENT# mylist [ i ] = num . replace ( ':' , '' ) #NEWLINE#
f . write ( image_response . read ( ) ) #NEWLINE#
"""1A""" #NEWLINE#
"""1B""" #NEWLINE#
"""1C""" #NEWLINE#
"""2""" #NEWLINE#
"""3""" #NEWLINE#
"""3A""" #NEWLINE#
re . search ( '\\(.*?\\)' , x ) . group ( ) #NEWLINE#
df [ 'Days_until_next_fail' ] = df [ 'Days_until_next_fail' ] . fillna ( 0 ) . astype ( int ) #NEWLINE#
ax . set_xlim ( - 1 , 7 ) #NEWLINE#
setattr ( cls , '_' + attr_name , None ) #NEWLINE#
df . rdd . map ( row2csv ) . coalesce ( 1 ) . saveAsTextFile ( 'file.csv' ) #NEWLINE#
print ( all ( hasattr ( obj , attr ) for attr in ( 'keys' , '__getitem__' ) ) ) #NEWLINE#
df . merge ( melted_items , left_index = True , right_index = True ) #NEWLINE#
line = line . replace ( '"' , '' ) . strip ( ) #NEWLINE#
y [ 1 : - 1 , 1 : - 1 ] *= x [ 1 : - 1 , : - 2 ] #NEWLINE#
[ x for x in data if func ( x ) ] #NEWLINE#
return recur ( n - 1 , count + 1 ) #NEWLINE#
self . response . write ( name ) #NEWLINE#
document . append ( line ) #NEWLINE#
[ 0 ] [ 0 ] [ 3 ] #NEWLINE#
ax2 . plot ( xx , y2 , c = 'green' , zorder = 1 ) #NEWLINE#
[ x for x in range ( len ( self . states ) ) if self . states [ x ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
Popen ( 'whatever' , preexec_fn = preexec ) #NEWLINE#
series . hist ( bins = division ) #NEWLINE#
driver = webdriver . Chrome ( ) #NEWLINE#
reap ( someSum ( ) ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
list1 = [ 'this' , 'and' , 'that' ] #NEWLINE#
process = Popen ( [ 'ps' , '-eo' , 'pid,args' ] , stdout = PIPE , stderr = PIPE ) #NEWLINE#
not any ( d . values ( ) ) #NEWLINE#
data_frame . to_csv ( 'C:/users/raju/sample.csv' ) #NEWLINE#
"""#SPACE#{:0.4f}""" . format ( 1.0 / 2.0 ) . rstrip ( '0' ) #NEWLINE#
root . title ( 'Samples#SPACE#w/#SPACE#time#SPACE#step#SPACE#<#SPACE#0' ) #NEWLINE#
app . route ( '/<major>/' ) #NEWLINE#
axes [ 1 ] . set_title ( '"Chunk"#SPACE#plot#SPACE#of#SPACE#data' ) #NEWLINE#
plt . show ( ) #NEWLINE#
dict ( ( x , duplicates ( List , x ) ) for x in set ( List ) if List . count ( x ) > 1 ) #NEWLINE#
print ( 'Entry#SPACE#point#SPACE#for#SPACE#qrproject.#SPACE#Happily#SPACE#imports#SPACE#qrencode#SPACE#module' ) #NEWLINE#
print ( 'Available#SPACE#tasks:' ) #NEWLINE#
print ( r [ i : i + n ] ) #NEWLINE#
print ( ( 'inner:#SPACE#' , x ) ) #NEWLINE#
ole32 . CoUninitialize ( ) #NEWLINE#
print ( new_dic ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
self . assertAlmostEqual ( em ( 1 , 1 ) , 0.6407 , 4 ) #NEWLINE#
"""@shawn#SPACE#Titanic#SPACE#tragedy#SPACE#could#SPACE#have#SPACE#been#SPACE#prevented#SPACE#Economic#SPACE#Times:#SPACE#Telegraph.co.ukTitanic#SPACE#tragedy#SPACE#could#SPACE#have#SPACE#been#SPACE#preve...#SPACE#http://bit.ly/tuN2wx""" #NEWLINE#
a . sort ( key = key , reverse = True ) #NEWLINE#
self . assertEqual ( foo , 'bar' ) #NEWLINE#
event . listen ( db_engine , 'checkout' , checkout_listener ) #NEWLINE#
y_train = [ 'New#SPACE#York' ] , [ 'London' ] #NEWLINE#
r_test_fast = r_test . reshape ( ( 3 , 1 ) ) #NEWLINE#
plt . xlim ( 0 , 24 ) #NEWLINE#
pass #NEWLINE#
obj [ slice ( 1 , 3 ) , slice ( None , None ) ] #NEWLINE#
print ( year_fraction ( datetime . datetime . today ( ) ) ) #NEWLINE#
parser . add_argument ( '-v' , action = 'store_true' ) #NEWLINE#
parser . add_argument ( '--quickly' , action = 'store_true' ) #NEWLINE#
print ( counter . most_common ( ) ) #NEWLINE#
truth = word . startswith ( '^' ) or word . startswith ( '@' ) #NEWLINE#
numpy . nextafter ( 1 , 0 ) #NEWLINE#
element . clear ( ) #NEWLINE#
df . ix [ yesterday . strftime ( fmt ) : now . strftime ( fmt ) ] #NEWLINE#
for i , value in enumerate ( line . split ( ) ) : #NEWLINE# #INDENT# a [ i ] . append ( int ( value ) ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
email = self . request . get ( 'email' ) #NEWLINE#
img . save ( imgstr , 'PNG' ) #NEWLINE#
print ( ( f . __name__ , f . __hash__ ) ) #NEWLINE#
raise ValueError ( 'Shape#SPACE#different#SPACE#before#SPACE#calculation' ) #NEWLINE#
dom . xpath ( "//*[local-name()#SPACE#=#SPACE#'Body']" ) #NEWLINE#
im = Image . open ( '%s' % os . path . join ( os . getcwd ( ) , s + '.png' ) ) . convert ( 'RGB' ) #NEWLINE#
print ( df [ 'feedback_id' ] . combine_first ( df [ '_id' ] ) ) #NEWLINE#
fp . write ( '%s#SPACE#=#SPACE#%s\n' % ( key , str ( value ) . replace ( '\n' , '\n\t' ) ) ) #NEWLINE#
np . einsum ( 'ik,jk->kij' , puy , puy2 ) #NEWLINE#
shutil . copy ( file_name , 'bar.txt' ) #NEWLINE#
unicodedata . normalize ( 'NFC' , '✮' ) #NEWLINE#
plt . setp ( ax2 , xticks = [ ] , yticks = [ ] ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.sunnydale.k12.ca.us' ) #NEWLINE#
foo = 'bar' #NEWLINE#
win . set_keep_above ( False ) #NEWLINE#
child . interact ( ) #NEWLINE#
plt . xlim ( [ 0 , 1 ] ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#OK' ) #NEWLINE#
User . add_to_class ( 'get_user_name' , get_user_name ) #NEWLINE#
self . statusitem . setToolTip_ ( 'pyGrr!' ) #NEWLINE#
arr = numpy . array ( ( ( 2 , 2 ) , ( 2 , - 2 ) ) ) #NEWLINE# tuple ( map ( tuple , arr ) ) #NEWLINE#
ax1 . set_color_cycle ( [ colormap ( i ) for i in np . linspace ( 0 , 1 , number_of_plots ) ] ) #NEWLINE#
distance ( [ 1 , 1 , 3 ] , [ 2 , 2 , 3 ] ) #NEWLINE#
a . remove ( 10 ) #NEWLINE#
gsub ( '\\b#SPACE#' , text , replacement = '' , perl = T ) #NEWLINE#
print ( 'Instantiated#SPACE#in#SPACE#{0}:{1}' . format ( * obj . traceback ) ) #NEWLINE#
p . add_argument ( 'process' , nargs = '?' ) #NEWLINE#
response = self . c . get ( '/emails/html/upload' , SERVER_NAME = 'mydomain.com' ) #NEWLINE#
list ( chunk ( ( i for i in range ( 8 ) ) , 3 ) ) #NEWLINE#
pass #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
df . join ( pd . concat ( [ pd . DataFrame ( s ) . T ] * len ( df ) , ignore_index = True ) ) #NEWLINE#
0 , 1 , 0 , 1 #NEWLINE#
signal . alarm ( 0 ) #NEWLINE#
ax2 . plot ( x , y2 , color = 'g' , label = 'bVal' ) #NEWLINE#
plt . plot ( [ 0 , 1 ] , [ 0 , 1 ] , ls = '--' , c = 'b' ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
plt . title ( 'Eigenvectors' ) #NEWLINE#
( a1 [ : , ( numpy . newaxis ) ] == a2 ) . all ( axis = 2 ) #NEWLINE#
fig . savefig ( doc , format = 'pdf' ) #NEWLINE#
OrderedDict ( sorted ( list ( d . items ( ) ) , key = lambda t : t [ 0 ] ) ) #NEWLINE#
collections . Counter ( lst ) #NEWLINE#
ax . fill_between ( np . arange ( 1 , 10 ) , 1 , 2 , zorder = - 1 , ** kwargs ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
frame . Show ( ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE# plt . show ( ) #NEWLINE#
df . columns = zip ( * col_names ) [ 1 ] #NEWLINE#
print ( ( df [ 'phone_no' ] != df [ 'phone_no' ] . shift ( ) ) . cumsum ( ) ) #NEWLINE#
[ 'a' , 'c' , 'b' ] , [ 'b' ] , [ 'c' ] #NEWLINE#
float ( x ) / float ( x ) #NEWLINE#
my_app = MyApp ( ) #NEWLINE#
print ( url_without_query_string ) #NEWLINE#
img . putdata ( my_list ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
cookies . save ( 'mycookies.txt' ) #NEWLINE#
r . rpop ( 'task_queue' ) #NEWLINE#
foo ( ) #NEWLINE#
"""Load#SPACE#text#SPACE#file#SPACE#into#SPACE#a#SPACE#string.#SPACE#I#SPACE#let#SPACE#FILE#SPACE#exceptions#SPACE#to#SPACE#pass.""" #NEWLINE#
self . canvas = tk . Canvas ( self , width = 100 , height = 100 ) #NEWLINE#
data = json . loads ( json_input ) #NEWLINE#
my_value = kwargs . pop ( 'my_value' , None ) #NEWLINE#
df [ 'out' ] = np . searchsorted ( [ W1 , W2 ] , df . column1 ) + 1 #NEWLINE#
raise RuntimeError ( 'Compressed#SPACE#size#SPACE#larger#SPACE#than#SPACE#uncompressed#SPACE#size' ) #NEWLINE#
window . set_title ( 'Event#SPACE#Box' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
B = np . array ( [ 2 , 4 , 6 , 8 ] ) #NEWLINE#
nocapture = 1 #NEWLINE#
series . apply ( lambda x : x . strftime ( '%Y-%m-%d' ) ) . to_json ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
sys . stderr . write ( '\n' ) #NEWLINE#
div . xpath ( 'normalize-space(.//p[@class="class-name"])' ) . extract ( ) #NEWLINE#
[ x for x in l1 if not any ( fnmatch ( x , p ) for p in l2 ) ] #NEWLINE#
dict ( ( k , find_key ( v , 'md5' ) ) for k , v in list ( json_result . items ( ) ) ) #NEWLINE#
logger2 = logging . getLogger ( '2' ) #NEWLINE#
"""{{#SPACE#"another#SPACE#{{#SPACE#mask"#SPACE#}}#SPACE#{{#SPACE#func()#SPACE#}},#SPACE#{{#SPACE#a+b#SPACE#}}#SPACE#,#SPACE#{{#SPACE#"string#SPACE#with#SPACE#\\""|filter#SPACE#}}""" #NEWLINE#
f . close ( ) #NEWLINE#
print ( data [ 'City' ] ) #NEWLINE#
self . video_out . release ( ) #NEWLINE#
ax [ 0 ] . set_title ( 'Setting#SPACE#handlesize' ) #NEWLINE#
df = psql . read_frame ( sql , conn ) #NEWLINE#
self . searchqueryset . filter ( _missing_ = 'group' ) #NEWLINE#
uniq_animal_groups = set ( map ( tuple , animal_groups ) ) #NEWLINE#
mylist = [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 3 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 , 5 ] #NEWLINE# { k : mylist . count ( k ) for k in set ( mylist ) } #NEWLINE#
print ( config . get ( 'job1' , 'logfile' ) ) #NEWLINE#
print ( config . get ( 'job2' , 'mailto' ) ) #NEWLINE#
sys . path . append ( 'path/to/your/file' ) #NEWLINE#
fig , ax = plt . subplots ( 2 , 1 ) #NEWLINE#
color_box ( 'blellow' , color = 'green' , height = 20 , width = 30 ) #NEWLINE#
outfile . close ( ) #NEWLINE#
im = Image . open ( 'test.png' ) #NEWLINE#
36.11111111111111 , 47.22222222222222 , 58.333333333333336 #NEWLINE#
urllib . parse . urlencode ( params , safe = '|' ) #NEWLINE#
warnings . simplefilter ( 'always' ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
conset = set ( map ( frozenset , consarray ) ) #NEWLINE#
a [ : : - 1 ] #NEWLINE#
{ 'Status' : 'Active' , 'Card#SPACE#name' : 'NAMEn' , 'Account#SPACE#holder' : 'NAME' , #NEWLINE# 'Card#SPACE#number' : '1234' , 'Card#SPACE#balance' : '$18.30' } #NEWLINE#
"""one#SPACE#quote:#SPACE#'""" #NEWLINE#
print ( message . get_payload ( ) ) #NEWLINE#
return astar ( formation , heuristic , solution , getneighbors ) #NEWLINE#
sanitised_path = sanitise_filesystem_path ( path ) #NEWLINE#
logger = logging . getLogger ( 'blabla' ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
sum ( masked , axis = 1 ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] ] ) #NEWLINE#
self . name = input ( 'What#SPACE#is#SPACE#your#SPACE#name?#SPACE#' ) #NEWLINE#
sparse_out = coo_matrix ( ( data , ( np . arange ( N ) , a . ravel ( ) - 1 ) ) , shape = ( N , L ) ) #NEWLINE#
a . tolist ( ) #NEWLINE#
set ( df . Col1 ) | set ( df . Col2 ) #NEWLINE#
data = [ str ( float ( fractions . Fraction ( x ) ) ) for x in data ] #NEWLINE#
self . driver . close ( ) #NEWLINE#
[ [ 4.99902584 - 21.958 ] [ 4.99954573 - 21.958 ] ] #NEWLINE#
[ 1 ] [ 2 ] [ 2 ] #NEWLINE#
admin . site . register ( FooProxy , FooAdmin2 ) #NEWLINE#
connection . drop_database ( '<DBNAME>' ) #NEWLINE#
( datetime . datetime . min + value ) . time ( ) #NEWLINE#
ord ( 'c' ) #NEWLINE#
run ( 'apt-get#SPACE#update' ) #NEWLINE#
print ( User . objects . filter ( last_name__icontains = 'ax' ) . query ) #NEWLINE#
jsonpath . jsonpath ( data , path ) #NEWLINE#
print ( df [ 'col_name' ] . mean ( ) ) #NEWLINE#
a = array . array ( 'f' ) #NEWLINE#
[ '2' , 'AP' , '' , '' , '' , '35.0000' , '105.0000' , '' , '' ] , #NEWLINE#
ax . plot ( x , i * x , label = '$y#SPACE#=#SPACE#%ix$' % i ) #NEWLINE#
flask . abort ( 403 ) #NEWLINE#
getattr ( Ls , 'thelist' ) [ 0 ] . append ( 3 ) #NEWLINE#
new_dict = dict ( list ) #NEWLINE#
return None if x is None else something_else #NEWLINE#
logging . getLogger ( 'suds.transport' ) . setLevel ( logging . DEBUG ) #NEWLINE#
naive_utc_dt = datetime . utcnow ( ) #NEWLINE#
thedata = [ { 'date' : '2002-02' , 'data' : 2.0 } , { 'date' : '2002-03' , 'data' : #NEWLINE# 2.0017 } ] #NEWLINE# print ( [ a [ 'data' ] for a in thedata ] ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
im . save ( '/tmp/' + f . name ) #NEWLINE#
a = np . arange ( 100 ) #NEWLINE#
create_log_file ( '/temp/log2.log' , logging . INFO ) #NEWLINE#
return HttpResponse ( open ( 'myxmlfile.xml' ) . read ( ) ) #NEWLINE#
pid = int ( os . popen ( 'pidof#SPACE#' + app ) . read ( ) ) #NEWLINE#
proc . stdin . write ( 'my#SPACE#data' ) #NEWLINE#
print ( ( dir ( A ( ) ) , dir ( A ) ) ) #NEWLINE#
max_idx , max_val = max ( enumerate ( l ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
l = [ 3 , 0 , 2 ] #NEWLINE# sum ( j ** i for i , j in enumerate ( l , 1 ) ) #NEWLINE#
axes [ 0 ] . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
debugprint ( 'Auth#SPACE#header#SPACE#was#SPACE#not#SPACE#present.' ) #NEWLINE#
img . save ( 'test_diff2.png' ) #NEWLINE#
img . save ( 'test_diff3.png' ) #NEWLINE#
reader = io . open ( sys . stdin . fileno ( ) ) #NEWLINE#
PLT . show ( ) #NEWLINE#
0 * float ( 'inf' ) #NEWLINE#
raise Exception ( 'Gvie#SPACE#ffprobe#SPACE#a#SPACE#full#SPACE#file#SPACE#path#SPACE#of#SPACE#the#SPACE#video' ) #NEWLINE#
L [ 1 ] [ 0 : 3 ] #NEWLINE#
super ( B , self ) . __init__ ( * args ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
b = a . decode ( 'utf8' ) [ : : - 1 ] #NEWLINE#
setattr ( self , attr , value ) #NEWLINE#
ax . grid ( 'off' , axis = 'x' ) #NEWLINE#
"""[Hello|Hi].#SPACE#We#SPACE#are#SPACE#[inviting#SPACE#|#SPACE#calling]#SPACE#you#SPACE#at#SPACE#position#SPACE#[[junior|#SPACE#mid#SPACE#junior]|senior]#SPACE#developer.""" #NEWLINE#
os . remove ( str ( local_path ) + '/temp_video2.avi' ) #NEWLINE#
s = 'Zaptoit:685158:zaptoit@hotmail.com' #NEWLINE# s . split ( ':' , 1 ) [ 1 ] #NEWLINE#
series [ 10 ] = np . nan #NEWLINE#
re . search ( '\\d+' , 'foo123bar' ) . group ( ) #NEWLINE#
p = subprocess . Popen ( [ 'ls' , '-l' ] , stdout = subprocess . PIPE ) #NEWLINE# print ( p . stdout . read ( ) ) #NEWLINE#
data = serializers . serialize ( 'xml' , Book . objects . all ( ) ) #NEWLINE#
df = pd . DataFrame ( np . random . rand ( 10 , 4 ) , columns = [ 'a' , 'b' , 'c' , 'd' ] ) #NEWLINE#
canvas . drawImage ( self , image , x , y , width = None , height = None , mask = None ) #NEWLINE#
matplotlib . pyplot . close ( ) #NEWLINE#
driver . set_script_timeout ( 30 ) #NEWLINE#
ax1 . plot ( x1 , x2 , color = 'k' , marker = 'x' , ms = '9' ) #NEWLINE#
np . nanargmax ( a , axis = 1 ) #NEWLINE#
plt . title ( 'Affinity#SPACE#-#SPACE#Retail#SPACE#Details(Home#SPACE#category)' ) #NEWLINE#
from workalendar . europe import France #NEWLINE#
rdd_malformed = sc . parallelize ( [ "{u'data':#SPACE#{u'text':#SPACE#{u'de':" ] ) . union ( rdd ) #NEWLINE#
file = zipfile . ZipFile ( BytesIO ( request . content ) ) #NEWLINE#
os . environ [ 'CUDA_VISIBLE_DEVICES' ] = '{}' . format ( gpu_id ) #NEWLINE#
msglist = list ( chunkify ( hextotal , 4096 ) ) #NEWLINE#
ax . xaxis . set_minor_locator ( MultipleLocator ( 0.2 ) ) #NEWLINE#
return list ( { k . partition ( ':' ) [ 0 ] : k for k in workers } . values ( ) ) #NEWLINE#
django . setup ( ) #NEWLINE#
shutil . copyfileobj ( infile , outfile ) #NEWLINE#
df [ 'D' ] = np . nan #NEWLINE#
celery . start ( ) #NEWLINE#
x . reshape ( x . shape [ 0 ] , - 1 ) . shape #NEWLINE#
return Response ( UserSerializer ( request . user ) . data ) #NEWLINE#
return [ Factorial ( x ) for x in it ] #NEWLINE#
self . entry . delete ( 0 , 'end' ) #NEWLINE#
str . replace ( '\\' , '#SPACE#' ) #NEWLINE#
b . place ( relx = 0.5 , rely = 0.5 , anchor = 'c' ) #NEWLINE#
open ( '/etc/passwd' , 'r' ) #NEWLINE#
f ( ) #NEWLINE#
ax3 . plot_surface ( xi , ti , u_int , cmap = cm . coolwarm ) #NEWLINE#
np . roll ( a , - 2 ) #NEWLINE#
mail . login ( 'userName' , 'password' ) #NEWLINE#
fp . close ( ) #NEWLINE#
pass #NEWLINE#
gca ( ) . get_xaxis ( ) . get_major_formatter ( ) . set_useOffset ( False ) #NEWLINE#
df3 . merge ( colors_df , how = 'left' ) . fillna ( 'unknown' ) #NEWLINE#
myfunc ( ) #NEWLINE#
res . cumsum ( ) . applymap ( lambda x : np . unique ( list ( x ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'group#SPACE#heads:' , head_list ) #NEWLINE#
dt = yaml . load ( 'dt:#SPACE#!!python/object/apply:time.time#SPACE#[]' ) #NEWLINE#
p . start ( ) #NEWLINE#
print ( 'test' * 2 ) #NEWLINE#
b = np . array ( [ [ [ 1 , 2 ] , [ 2 , 3 ] ] , [ [ 3 , 4 ] , [ 5 , 6 ] ] ] ) #NEWLINE# b . swapaxes ( 0 , 1 ) #NEWLINE#
print ( 'show_where:#SPACE#cwd#SPACE#is' , repr ( os . getcwd ( ) ) ) #NEWLINE#
mylist = [ 1 , 2 , 3 , 4 ] #NEWLINE# mylist . pop ( 0 ) #NEWLINE#
return pd . DataFrame ( v [ i0 : i1 ] , df . loc [ df . name ] . index [ i0 : i1 ] , df . columns ) #NEWLINE#
ax . set_zlabel ( 'Z#SPACE#Label' ) #NEWLINE#
process . daemon = True #NEWLINE#
return new_string #NEWLINE#
pizzas_bought = models . ManyToManyField ( related_name = 'pizzas' ) #NEWLINE#
connection . disconnect ( ) #NEWLINE#
sizer . Add ( widget , 0 , wx . ALL , 5 ) #NEWLINE#
plt . ylabel ( 'IntensitÃ¤t' ) #NEWLINE#
type ( a ) . <VAR0> ( a ) #NEWLINE#
f . write ( chunk ) #NEWLINE#
b . sort ( key = order . get ) #NEWLINE#
print ( 'You#SPACE#set#SPACE#the#SPACE#option#SPACE#"-b"' ) #NEWLINE#
a = np . array ( [ 'john' , 'bill' , 'greg' , 'bill' , 'bill' , 'greg' , 'bill' ] ) #NEWLINE#
self . setWindowFlags ( Qt . FramelessWindowHint ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
product ( [ 'Long' , 'Med' ] , [ 'Yes' , 'No' ] ) #NEWLINE# list ( product ( [ 'Long' , 'Med' ] , [ 'Yes' , 'No' ] ) ) #NEWLINE#
conn . close ( ) #NEWLINE#
time . strftime ( '%H:%M:%S' , t ) #NEWLINE#
super ( BaseModel , self ) . save ( force_insert , force_update ) #NEWLINE#
ax . plot_surface ( x , y , 10 , rstride = 5 , cstride = 5 , facecolors = img ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x . union ( y ) , map ( set , powerset ( set ( [ 1 , 2 , 3 ] ) ) ) ) #NEWLINE#
im = img . load ( ) #NEWLINE#
xcat . loc [ 'a' ] #NEWLINE#
return self . __class__ . __name__ #NEWLINE#
sys . modules [ 'main' ] = sys . modules [ '__main__' ] #NEWLINE#
print ( '#SPACE##SPACE#%r' % ( branch , ) ) #NEWLINE#
from PyQt4 import QtGui #NEWLINE#
template . render ( users = [ 'tom' , 'dick' , 'harry' ] ) #NEWLINE#
print ( df . reset_index ( ) ) #NEWLINE#
r1 = requests . get ( 'http://www.google.com' ) #NEWLINE#
self . process . terminate ( ) #NEWLINE#
[ 1 , 2 ] #NEWLINE#
print ( ',#SPACE#' . join ( map ( str , cheapest_path ( path_list ) ) ) ) #NEWLINE#
[ list ( g ) for k , g in groupby ( a ) ] #NEWLINE#
'__getattribute__' , '__getitem__' , '__getslice__' , '__gt__' , '__hash__' #NEWLINE#
'__repr__' , '__reversed__' , '__rmul__' , '__setattr__' , '__setitem__' #NEWLINE#
'__setslice__' , '__sizeof__' , '__str__' , '__subclasshook__' , 'append' #NEWLINE#
self . start . connect ( self . run ) #NEWLINE#
plt . bar ( J2 - 0.5 * width , z ( J2 ) , width = width ) #NEWLINE#
print ( x ) #NEWLINE#
csv_fileh . seek ( 0 ) #NEWLINE#
regex = '[^/].*?' #NEWLINE#
return User . objects . get ( pk = user_id ) #NEWLINE#
ser . write ( 'H' ) #NEWLINE#
df [ 'min' ] = df . groupby ( [ 'ID' , 'cumsum' ] ) [ 'DATE' ] . transform ( 'min' ) #NEWLINE# df [ 'count' ] = df . groupby ( [ 'cumsum' ] ) [ 'cumsum' ] . transform ( 'count' ) #NEWLINE#
[ 'Country#SPACE#Name' , 'Country#SPACE#Code' , 'Year' , 'Value' ] #NEWLINE#
ee . save ( ) #NEWLINE#
max ( n for n in a if n < 0.7 ) #NEWLINE#
[ [ 1 ] , [ 2 ] , [ 3 ] ] #NEWLINE#
plt . savefig ( 'tmp2.jpg' ) #NEWLINE#
{ { raw | unquote_raw } } #NEWLINE#
inspect . getargvalues ( traceback . tb_frame ) #NEWLINE#
month = CharField ( max_length = 9 , choices = MONTHS_CHOICES , default = '1' ) #NEWLINE#
for x in range ( 0 , 9 ) : #NEWLINE# #INDENT# globals ( ) [ 'string%s' % x ] = 'Hello' #NEWLINE#
return dict . __delitem__ ( self , key ) #NEWLINE#
p . start ( ) #NEWLINE#
from PyQt4 . QtGui import * #NEWLINE#
a if b else c #NEWLINE#
ax . set_xlabel ( 'X#SPACE#Label' ) #NEWLINE#
instance . save ( ) #NEWLINE#
df #NEWLINE#
l = np . array ( [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 1 ] ] ) #NEWLINE#
args , unknownargs = parser . parse_known_args ( ) #NEWLINE#
print ( 'Goodbye' ) #NEWLINE#
[ 1 ] [ 2 ] [ 1 ] #NEWLINE#
r = requests . post ( url , files = files , data = values ) #NEWLINE#
"""78347834745""" #NEWLINE#
print ( ( 'all(err2#SPACE#==#SPACE#0):' , np . all ( err2 == 0 ) ) ) #NEWLINE#
pprint ( { key : getattr ( f , key ) for key in dir ( f ) } ) #NEWLINE#
self . fig = mplfig . Figure ( figsize = ( 5 , 4 ) , dpi = 100 ) #NEWLINE#
f ( numpy . array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] ) ) #NEWLINE#
frec ( word ) #NEWLINE#
keys = set ( ) #NEWLINE#
ax . bar ( list ( range ( len ( dates ) ) ) , values , width = width ) #NEWLINE#
module1 . f ( ) #NEWLINE#
s . run ( ) #NEWLINE#
return get_model ( 'app_name' , self . kwargs . get ( 'model_name' ) ) #NEWLINE#
"""***foo#SPACE#?!#SPACE#bar""" . translate ( None , '*?!' ) #NEWLINE#
subprocess . call ( [ 'path/to/dot.exe' , '-Tpng' , 'hello.dot' , '-o' , 'graph1.png' ] ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
nums . sort ( key = functools . cmp_to_key ( lambda x , y : cmp ( y + x , x + y ) ) ) #NEWLINE#
plt . legend ( handles = legend_patches ) #NEWLINE#
ssh_client = paramiko . SSHClient ( ) #NEWLINE#
print ( { i : f . lower ( ) for i in nums for f in fruit } ) #NEWLINE#
wsgi . server ( eventlet . listen ( ( '' , 8000 ) ) , your_app ) #NEWLINE#
setup ( name = 'myext' , cmdclass = { 'build_ext' : build_ext } , ext_modules = ext_modules ) #NEWLINE#
'^(?P<chararg>\\w+)/(?P<arg>[\\w\\+%_&#SPACE#]+)/(?P<intarg>\\d+)' , 'dest' #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 6 , 7 ] #NEWLINE#
request . finish ( ) #NEWLINE#
requests . post ( url , data = [ ( 'interests' , 'football' ) , ( 'interests' , #NEWLINE# 'basketball' ) ] ) #NEWLINE#
sns . pointplot ( data = df , y = 'total_bill' , x = 'group' , hue = 'group' , linestyles = '' ) #NEWLINE#
print ( cursor . fetchall ( ) ) #NEWLINE#
df . reindex ( ind - ind2 ) . join ( df2 . reindex ( ind - ind2 ) ) #NEWLINE#
plt . yticks ( [ 0 , 1 , 2 ] , [ 'A' , 'B' , 'C' ] ) #NEWLINE#
return a [ S * np . arange ( nrows ) [ : , ( None ) ] + np . arange ( L ) ] #NEWLINE#
type ( varname ) #NEWLINE#
inithello ( ) #NEWLINE#
print ( lastHourDateTime . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) ) #NEWLINE#
base64 . b64decode ( a ) #NEWLINE#
ax . scatter ( x , y ) #NEWLINE#
return np . einsum ( 'ijk,ij->ik' , sep , Gm / dists ) #NEWLINE#
np . shape ( result ) #NEWLINE#
df [ 'color' ] = [ ( 'red' if x == 'Z' else 'green' ) for x in df [ 'Set' ] ] #NEWLINE#
np . issubdtype ( df [ 'A' ] . dtype , np . number ) #NEWLINE#
time . strftime ( '%m/%d/%Y' , ts ) #NEWLINE#
print ( tabulate ( [ [ 'Alice' , 24 ] , [ 'Bob' , 19 ] ] , headers = [ 'Name' , 'Age' ] ) ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
type ( None ) ( ) #NEWLINE#
a = np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] ] ) #NEWLINE# d = np . diag ( a [ : , ( 0 ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
import numpy as np #NEWLINE#
df . index . get_level_values ( 0 ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE# sys . stderr = sys . __stderr__ #NEWLINE#
p . plot ( x , y ) #NEWLINE#
df [ 'my_dates' ] = pd . to_datetime ( df [ 'my_dates' ] ) #NEWLINE#
fig , axes = plt . subplots ( ( 2 , 2 ) ) #NEWLINE#
self . layout2 . addWidget ( QTextEdit ( ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
plt . pcolormesh ( X [ 0 : 1 ] , Y [ 0 : 1 ] , C [ 0 : 1 ] ) #NEWLINE#
parser . add_argument ( '-b' , nargs = '+' , action = MyAction ) #NEWLINE#
newList = [ word for word , mask in zip ( s , b ) if mask ] #NEWLINE#
mask [ y : y + h , x : x + w ] = img [ y : y + h , x : x + w ] #NEWLINE#
nltk . data . path . append ( '/libs/nltk_data/' ) #NEWLINE#
zip ( * ( [ iter ( l ) ] * 2 ) ) #NEWLINE#
server . sendmail ( FROMADDR , TOADDRS , msg ) #NEWLINE#
out . close ( ) #NEWLINE#
db . put ( 1 ) #NEWLINE#
self . assertAlmostEqual ( em ( 1 , 3 ) , 0.2112 , 4 ) #NEWLINE#
open ( 'newfile' , 'w' ) . writelines ( [ line for line in open ( 'textfile' ) if #NEWLINE# 'apple' in line ] ) #NEWLINE#
y . <STR0> ( 7 ) #NEWLINE#
os . kill ( pid , 0 ) #NEWLINE#
df . loc [ i ] = [ float ( d ) for d in data ] #NEWLINE#
LOCALE_PATHS = '/home/mustafa/python/myproject/locale' #NEWLINE#
len ( [ i for i in x if 60 < i < 70 ] ) #NEWLINE#
( df == 0 ) . astype ( int ) . sum ( axis = 1 ) #NEWLINE#
b = a [ m ] #NEWLINE#
return { 'y0' : y0 , 'y1' : y1 , 'y2' : y2 } #NEWLINE#
bool ( BeautifulSoup ( non_html , 'html.parser' ) . find ( ) ) #NEWLINE#
xr . open_dataset ( 'myds2.nc' ) #NEWLINE#
{ 'a' : [ 0 , 1 ] , 'b' : [ 0 ] , 'c' : [ 1 ] , 'd' : [ 1 ] } #NEWLINE#
board . append ( [ ] ) #NEWLINE#
destination . close ( ) #NEWLINE#
y = x [ 1 : ] - x [ : - 1 ] #NEWLINE#
result = re . findall ( "[\\w']+|[.,!?;]" , '#SPACE#' . join ( a ) ) #NEWLINE#
self . response . out . write ( '<tr><td>' ) #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
c . coords ( x ) #NEWLINE#
word_dict [ 'apple' ] . add ( 'red' ) #NEWLINE#
word_dict [ 'apple' ] . add ( 'green' ) #NEWLINE#
[ [ 'John' , 'Sergeant#SPACE#' , '800' ] , [ 'Jack' , 'Commander#SPACE#' , '854' ] , [ 'Jill' , #NEWLINE# 'Captain#SPACE#' , '453' ] ] #NEWLINE#
plot ( x , sin ( x ) ) #NEWLINE#
instance . _meta . app_label #NEWLINE#
subprocess . Popen ( SCRIPT % filename , shell = True ) #NEWLINE#
python - V #NEWLINE#
decoded = some_string . decode ( 'sjis' ) #NEWLINE#
plt . ion ( ) #NEWLINE#
next ( p ) #NEWLINE#
server . test ( ** { 'arg1' : 1 , 'arg2' : 2 } ) #NEWLINE#
x . astype ( int ) #NEWLINE#
sys . stdout = old_stdout #NEWLINE#
tkMessageBox . showinfo ( title = 'Greetings' , message = 'Hello#SPACE#World!' ) #NEWLINE#
[ x for x in l if x not in f ] #NEWLINE#
return [ x for i , x in enumerate ( a ) if i in indices ] #NEWLINE#
list ( intermix ( [ 1 , 0 , 1 , 1 , 2 , 1 , 0 , 1 , 1 , 1 , 2 ] ) ) #NEWLINE#
a ( ) #NEWLINE#
self . widget . insert ( 'end' , '\n' . join ( self . content ) ) #NEWLINE#
results . vertices . select ( 'id' , 'pagerank' ) . show ( ) #NEWLINE#
[ '' . join ( x ) for x in itertools . combinations ( 'abcd' , 2 ) ] #NEWLINE#
picture = pygame . transform . scale ( picture , ( 1280 , 720 ) ) #NEWLINE#
return Silly ( 0 ) #NEWLINE#
plt . gca ( ) . set_color_cycle ( None ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
q = array ( [ [ 1 , 2 , 3 , 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 , 11 , 12 ] ] ) #NEWLINE#
[ id ( i ) for i in x ] #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
double ( [ 1 , 2 ] ) #NEWLINE#
'fo#SPACE#o#SPACE#bar' , 'fo#SPACE#o#SPACE#ba#SPACE#r' , 'fo#SPACE#o#SPACE#b#SPACE#ar' , 'fo#SPACE#o#SPACE#b#SPACE#a#SPACE#r' , 'f#SPACE#oobar' #NEWLINE#
cont , = ax . contourf ( [ ] , [ ] , [ ] , 500 ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
return int ( s ) #NEWLINE#
os . rename ( blah [ 0 ] , 'dont#SPACE#be#SPACE#them.mp3' ) #NEWLINE#
print ( map ( None , a , b ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
isinstance ( x , int ) #NEWLINE#
ax . plot ( x , y , 'ko' ) #NEWLINE#
super ( Graph , self ) . __init__ ( ) #NEWLINE#
"""""" . join ( map ( lambda x : chr ( ord ( x ) + 1 ) , value ) ) #NEWLINE#
fruit = re . compile ( '|' . join ( fruit_list ) ) #NEWLINE#
sorted ( array , key = lambda x : x is 0 ) #NEWLINE#
c . append ( l ) #NEWLINE#
"""{:.5}""" . format ( zip_ ) #NEWLINE#
main_sizer . Add ( content_sizer , 1 , wx . EXPAND ) #NEWLINE#
a = A ( 10 ) #NEWLINE#
file . seek ( 0 , os . SEEK_END ) #NEWLINE#
def num_groups ( regex ) : #NEWLINE# #INDENT# return re . compile ( regex ) . groups #NEWLINE#
print ( url ) #NEWLINE#
ax . set_ylim ( 0 , max_height ) #NEWLINE#
logging . info ( 'No#SPACE#user#SPACE#script#SPACE#loaded.' ) #NEWLINE#
name = models . CharField ( max_length = 140 ) #NEWLINE#
num = int ( input ( 'input#SPACE#number:#SPACE#' ) ) #NEWLINE#
a [ i ] = d . get ( a [ i ] , a [ i ] ) #NEWLINE#
print ( 'exit#SPACE#with#SPACE#^C#SPACE#or#SPACE#^D' ) #NEWLINE#
surround . py #NEWLINE#
df [ 'value_group' ] = df [ 'is_first' ] . cumsum ( ) #NEWLINE#
result . append ( item ) #NEWLINE#
ax . set_ylabel ( 'Label#SPACE#One' , size = 16 ) #NEWLINE#
df [ [ 'A' , 'B' ] ] #NEWLINE#
self . show ( ) #NEWLINE#
xl . ActiveWorkbook . Close ( SaveChanges = 1 ) #NEWLINE#
( 0 , 3 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 1 , 0 ) , ( 3 , 0 , 1 ) #NEWLINE#
[ 'banana' , 'water' , 'cat' ] #NEWLINE#
data [ 'x' ] #NEWLINE#
return HttpResponseRedirect ( '/startjob/' ) #NEWLINE#
driver . switch_to_default_content ( ) #NEWLINE#
areas_pos = abs ( z [ : - 1 ] + z [ 1 : ] ) * 0.5 * dx #NEWLINE#
any ( i in '<string>' for i in '123' ) #NEWLINE#
out , err = proc . communicate ( ) #NEWLINE#
[ 'home.score#SPACE#has#SPACE#changed' ] #NEWLINE#
client . service . GetAccountBalance ( __inject = { 'msg' : xml } ) #NEWLINE#
set ( [ 'a' , 'b' ] ) . issubset ( d ) #NEWLINE#
x = len ( data [ data [ 'cond' ] == 1 ] ) #NEWLINE#
a = [ 1 , 9 , 12 ] #NEWLINE# print ( sum ( a ) ) #NEWLINE#
do_print ( 'end' ) #NEWLINE#
fig = plt . figure ( figsize = ( 10 , 5 ) ) #NEWLINE#
shout . start ( ) #NEWLINE#
list ( f ( [ 9 , 8 ] , [ 2 , 1 ] ) ) #NEWLINE#
map ( int , testList ) #NEWLINE#
img . show ( ) #NEWLINE#
f = codecs . open ( 'test' , encoding = 'utf-8' , mode = 'w+' ) #NEWLINE#
values = ',' . join ( str ( v ) for v in value_list ) #NEWLINE#
exit ( EXIT_FAILURE ) #NEWLINE#
print ( 'First#SPACE#number#SPACE#is#SPACE#{}#SPACE##SPACE#and#SPACE#second#SPACE#number#SPACE#is#SPACE#{}' . format ( first , second ) ) #NEWLINE#
cur . execute ( 'BEGIN#SPACE#TRANSACTION' ) #NEWLINE#
from twisted . internet import <STR0> #NEWLINE#
print ( ( a , b ) ) #NEWLINE#
return wrapper ( fn ( * args , ** kw ) ) #NEWLINE#
pattern = re . compile ( '[\\uD800-\\uDFFF].' , re . UNICODE ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
system ( 'python#SPACE#{$pyt}' ) #NEWLINE#
[ ulist . append ( x ) for x in l if x not in ulist ] #NEWLINE#
print ( a , b , c , d ) #NEWLINE#
result = findCommon ( [ [ 1 , 2 , 3 ] , [ 3 , 4 , 5 ] , [ 5 , 6 , 7 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
dict_you_want = { your_key : old_dict [ your_key ] for your_key in your_keys } #NEWLINE#
return '' . join ( [ ch for ch in s if ch not in exclude ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
local_func ( ) #NEWLINE#
user ( ) . key ( ) . id ( ) #NEWLINE#
list_comprehension = [ i for i in range ( 4 ) if i > 0 ] #NEWLINE#
self . txt . focus_set ( ) #NEWLINE#
model = models . get_model ( 'timeapp' , 'Employee' ) #NEWLINE#
lstB . append ( eval ( input ( 'some#SPACE#input#SPACE#from#SPACE#theuser' ) ) ) #NEWLINE#
print ( root . findall ( './/a[@x]' ) [ 0 ] . tag ) #NEWLINE#
unbroadcast ( y ) . shape #NEWLINE#
arr . flat [ 3 , 4 ] #NEWLINE#
print ( '<TITLE>CGI#SPACE#script#SPACE#output</TITLE>' ) #NEWLINE#
my_df . to_csv ( 'mypath/df_' + str ( idx + 1 ) + '.csv' ) #NEWLINE#
setup ( name = 'proj' , packages = find_packages ( ) , package_data = { '' : [ '*.png' ] } ) #NEWLINE#
os . system ( 'cat#SPACE#1mbfile.txt' ) #NEWLINE#
stdscr . addstr ( 5 , 3 , '#SPACE#HOT!' ) #NEWLINE#
stdscr . addstr ( 5 , 3 , '#SPACE#Invalid#SPACE#input' ) #NEWLINE#
plt . show ( ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
z , x , y = d . nonzero ( ) #NEWLINE#
text = str ( encoded_string , the_encoding ) #NEWLINE#
arr [ : ] = [ a , b ] #NEWLINE#
a1 [ mask . A ] = 0 #NEWLINE#
ax2 . yaxis . get_offset_text ( ) . set_color ( plot_ax2 . get_color ( ) ) #NEWLINE#
proc = subprocess . Popen ( 'ls' , stdout = subprocess . PIPE ) #NEWLINE# tmp = proc . stdout . read ( ) #NEWLINE#
elem . click ( ) #NEWLINE#
df1 . rename ( columns = { 'positive_action' : 'action' } , inplace = True ) #NEWLINE#
return [ item for item in mylist if item . isalpha ( ) ] #NEWLINE#
thread . start_new_thread ( loop0 , ( ) ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#df#SPACE#WHERE#SPACE#size(tokens)#SPACE#<=#SPACE#3' ) . show ( ) #NEWLINE#
return [ n ] #NEWLINE#
print ( 'Downloading#SPACE#"%s"#SPACE#to#SPACE#"%s"...' % ( url , filename ) ) #NEWLINE#
socket . create_connection ( ( 'andes-1-47' , 8181 ) , timeout = 2 ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_theta_direction ( - 1 ) #NEWLINE#
graph . tree ( ) . pprint ( ) #NEWLINE#
find_second_last ( 'abracadabra' , 'a' ) #NEWLINE#
plt . plot ( x , y , c = 'blue' , label = 'Your#SPACE#data' ) #NEWLINE#
latest_subdir = max ( all_subdirs , key = os . path . getmtime ) #NEWLINE#
pass #NEWLINE#
process = subprocess . Popen ( [ 'python' , '-h' ] , bufsize = 1 , stdout = sys . stdout , #NEWLINE# stderr = sys . stderr ) #NEWLINE#
np . where ( binplace == 2 ) #NEWLINE#
self . _numberButtons [ i ] . clicked . connect ( lambda i = i : self . _number ( i ) ) #NEWLINE#

[ '*' , '+' , 1 , 2 , 3 ] #NEWLINE#
self . listbox . pack ( padx = 10 , pady = 10 ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = port ) #NEWLINE#
ax . plot ( data_x , data_y , 'or' ) #NEWLINE#
do_post_install_stuff ( ) #NEWLINE#
print ( k , a [ k ] ) #NEWLINE#
urllib . request . urlopen ( 'http://www.example.com/login.html' ) #NEWLINE#
data = s . recv ( 4096 ) #NEWLINE#
"""dict((c,#SPACE#string.count(c))#SPACE#for#SPACE#c#SPACE#in#SPACE#set(string))""" #NEWLINE#
"""for#SPACE#loop#SPACE#from#SPACE#cha0site""" #NEWLINE#
"""defaultdict#SPACE#from#SPACE#joaquin""" #NEWLINE#
app . exec_ ( ) #NEWLINE#
print ( Foo . bar . __get__ ) #NEWLINE#
output . write ( '{}:{}\n' . format ( ind , item ) ) #NEWLINE#
uniques [ col ] . update ( chunk [ col ] . unique ( ) ) #NEWLINE#
a [ 1 ] = 'a' #NEWLINE# a [ 1 ] = 'b' #NEWLINE#
ax . yaxis . set_ticks ( [ ] ) #NEWLINE#
text2_re2 = re . sub ( '(\\d+)/(\\d+)/(\\d+)' , '\x03-\x01-\x02' , text2 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
f . write ( s ) #NEWLINE#
print ( df1 [ [ 0 , 7 ] ] ) #NEWLINE#
l = [ s . name for s in sections ] #NEWLINE#
re . sub ( '\\B([A-Z])' , '-\\1' , 'ThisIsMyText' ) . lower ( ) #NEWLINE#
def chunkstring ( string , length ) : #NEWLINE# #INDENT# return ( string [ 0 + i : length + i ] for i in range ( 0 , len ( string ) , length ) ) #NEWLINE#
self . transport . loseConnection ( ) #NEWLINE#
print ( 'Price#SPACE#-#SPACE#field#SPACE#4:#SPACE#' , dl . field4price ) #NEWLINE#
print ( ( 'Before#SPACE#truncate:' , open ( filename ) . read ( ) ) ) #NEWLINE#
self . suggestions . append ( a [ 1 ] ) #NEWLINE#
outFile . close ( ) #NEWLINE#
model_method_field = serializers . CharField ( source = 'model_method' ) #NEWLINE#
args . append ( arg ) #NEWLINE#
df2 . rename ( columns = { 'Adj#SPACE#Close' : 'ford' } , inplace = True ) #NEWLINE#
d [ 'a' ] . append ( list2 ) #NEWLINE#
p . map ( g , list ( range ( 10 ) ) ) #NEWLINE#
return self . name #NEWLINE#
df3 . plot ( 'type_of_plot' , ax = c ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
data = [ [ 'date_a' , '1a' , '2a' , '3a' ] , [ 'date_b' , '1b' , '2b' , '3b' ] ] #NEWLINE#
key = '#SPACE#=#SPACE#' . join ( ( key , str ( value ) . replace ( '\n' , '\n\t' ) ) ) #NEWLINE#
line += '#SPACE#Look#SPACE#ma,#SPACE#no#SPACE#hands!' #NEWLINE#
print ( user_result ) #NEWLINE#
subprocess . call ( cmd , stdin = fd ) #NEWLINE#
df . drop ( df . index . get_duplicates ( ) ) #NEWLINE#
print ( 'Hello#SPACE#world#SPACE#!' ) #NEWLINE#
super ( A , self ) . __init__ ( ) #NEWLINE#
[ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 ] , #NEWLINE#
self . selenium . start ( ) #NEWLINE#
od = OrderedDict ( sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) ) #NEWLINE#
os . kill ( int ( pid ) , 0 ) #NEWLINE#
print ( 'In#SPACE#sub_main' ) #NEWLINE#
[ '0893' , '000' , '4442' ] #NEWLINE#
pd . read_csv ( 'wspace.csv' , header = None , delim_whitespace = True ) #NEWLINE#
date ( a_date , 'F' ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
resp , items = m . search ( None , 'UNSEEN' , 'FROM' , '"Impact#SPACE#Stats#SPACE#Script"' ) #NEWLINE#
time . sleep ( 4 ) #NEWLINE#
df . loc [ df . groupby ( 'category' ) [ 'dif' ] . idxmin ( ) ] #NEWLINE#
return ( x & - x ) . bit_length ( ) - 1 #NEWLINE#
show ( ) #NEWLINE#
print ( [ [ ( each - x ) for x in l ] for each in l ] ) #NEWLINE#
file . close ( ) #NEWLINE#
dir ( ) #NEWLINE#
X = pd . DataFrame ( dict ( one = [ 'Strawberry' , 'Fields' , 'Forever' ] , two = [ 1 , 2 , 3 ] ) ) #NEWLINE# X #NEWLINE#
ax . plot ( np . arange ( 0 , 9 ) ** 2 , label = '$y=x^2$' ) #NEWLINE#
ax2 . set_ylabel ( 'Static#SPACE#axis' , weight = 'bold' ) #NEWLINE#
lesser = qsort ( [ x for x in inlist [ 1 : ] if x < pivot ] ) #NEWLINE#
np . fromiter ( myfunc ( 5 ) , dtype = int ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
a = 1 if x < 1 else 10 if x > 10 else x #NEWLINE#
data = { 'name' : 'Hank' , 'address' : 'Far#SPACE#away' , 'pets' : [ { 'name' : 'Scooter' } ] } #NEWLINE#
B = A [ 0 ] #NEWLINE#
plt . xticks ( [ 0 , 200 , 400 , 600 ] ) #NEWLINE#
print ( json . dumps ( testvar , cls = RawJsJSONEncoder ) ) #NEWLINE#
conv1d_on_image = Reshape ( ( dim_x , output_channels ) ) ( conv1d_on_image ) #NEWLINE#
xml . write ( '<gedcom>' ) #NEWLINE#
xml . write ( '</gedcom>\n' ) #NEWLINE#
yourdate = dateutil . parser . parse ( datestring ) #NEWLINE#
plt . show ( ) #NEWLINE#
student = Student . objects . get ( user = id ) #NEWLINE#
literal_eval ( "import#SPACE#os;#SPACE#os.system('rm#SPACE#-rf#SPACE#somepath')" ) #NEWLINE#
print ( 'Access-Control-Allow-Origin:*' ) #NEWLINE#
a [ : , : , : , ( 0 ) ] . flatten ( ) #NEWLINE#
cur . execute ( 'select#SPACE#*#SPACE#from#SPACE#test;' ) #NEWLINE#
ax . set_zlabel ( 'Column(s)' ) #NEWLINE#
ax . yaxis . labelpad = 20 #NEWLINE#
assert datetime . datetime . now ( ) == FAKE_TIME #NEWLINE#
sys . stdout . write ( '\x1b[0m\n' ) #NEWLINE#
print ( 'Got#SPACE#page' ) #NEWLINE#
ax . set_ylim ( lims ) #NEWLINE#
return json . dumps ( _data , indent = 4 ) #NEWLINE#
ftp . login ( 'USR#SPACE#Name' , 'Pass' ) #NEWLINE#
df = df . loc [ : , ( df . var ( ) == 0.0 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
descendents_ancestors . add ( descendent ) #NEWLINE#
logging . info ( 'My#SPACE#log#SPACE#handler#SPACE#connected#SPACE#->#SPACE#Global#SPACE#Logging' ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS += ( #NEWLINE# 'custom_app.context_processors.categories_processor' , ) #NEWLINE#
( timestamp4 , { 'a' : False , 'b' : True , 'c' : False } ) , #NEWLINE#
myfile . write ( '%s\n' % var1 ) #NEWLINE#
min ( dates , key = lambda d : abs ( d - date ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( locals ( ) [ 'VAR' ] ) #NEWLINE#
row . append ( 'x' ) #NEWLINE#
stdscr . addstr ( 0 , 0 , 'Moving#SPACE#file:#SPACE#{0}' . format ( filename ) ) #NEWLINE#
logger . exception ( 'FFFFFFFFFFFFFFFFFFFFFFFUUUUUUUUUUUUUUUUUUUUUU-' ) #NEWLINE#
mask . reshape ( - 1 , 20 ) . sum ( 1 ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
QtGui . QApplication . __init__ ( self , argv ) #NEWLINE#
eval ( "shutil.rmtree('mongo')" ) #NEWLINE# ast . literal_eval ( "shutil.rmtree('mongo')" ) #NEWLINE#
r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' ) ) #NEWLINE# r . status_code #NEWLINE#
df . loc [ mask ] #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
curses . nocbreak ( ) #NEWLINE#
my_array = my_array . reshape ( ( 50 , 50 ) ) . astype ( 'uint8' ) * 255 #NEWLINE#
api . update_status ( status = single_tweet ) #NEWLINE#
print ( nat . Poland ) #NEWLINE#
plt . plot ( [ 1 , 2 , 3 ] , [ 3 , 4 , 3 ] ) #NEWLINE#
a . encode ( 'string-escape' ) . split ( '\\x' ) #NEWLINE#
db . rename_column ( 'app_foo' , 'name' , 'full_name' ) #NEWLINE#
allrows = table . findAll ( 'tr' ) #NEWLINE#
output . writeframes ( data [ 0 ] [ 1 ] ) #NEWLINE#
self . thread = threading . Thread ( target = self . run , args = ( ) ) #NEWLINE#
print ( "We're#SPACE#not#SPACE#root." ) #NEWLINE#
ImageOps . fit ( image , ( min ( * image . size ) , ) * 2 , Image . ANTIALIAS , 0 , ( 0.5 , 0.5 ) ) #NEWLINE#
pl . savefig ( 'smooth_array_' + str ( sigma_x ) + '_' + str ( sigma_y ) + '.png' ) #NEWLINE#
code . interact ( 'Enter#SPACE#Here' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( df . to_csv ( index = False , header = False ) ) #NEWLINE#
os . system ( "say#SPACE#'hello#SPACE#world'" ) #NEWLINE#
ax . set_ylim ( - 40 , 40 ) #NEWLINE#
return pd . concat ( vals , axis = 1 , keys = keys , ** kwargs ) #NEWLINE#
obj . save ( ) #NEWLINE#
root = Tk ( ) #NEWLINE#
"""encode/decode#SPACE#requested#SPACE#URL""" #NEWLINE#
plt . show ( ) #NEWLINE#
process . poll ( ) #NEWLINE#
categories = Category . filter ( animals__in = animals ) . all ( ) #NEWLINE#
s . sendmail ( me , you , msg . as_string ( ) ) #NEWLINE#
l . extend ( [ pad ] * ( n - len ( l ) ) ) #NEWLINE#
b = list ( a ) #NEWLINE#
a . readlist ( myheader ) #NEWLINE#
inputTag = soup . find ( attrs = { 'name' : 'stainfo' } ) #NEWLINE#
df . plot ( ) #NEWLINE#
map ( list , zip ( * lis ) ) #NEWLINE#
{ url . environ [ 'pylons.routes_dict' ] [ 'action' ] } #NEWLINE#
size = sum ( 1 for _ in bucket . objects . all ( ) ) #NEWLINE#
ego_graph ( G , n , radius = 1 , center = True , undirected = False , distance = None ) #NEWLINE#
"""A#SPACE#sentence#SPACE#with#SPACE#a#SPACE#error#SPACE#in#SPACE#the#SPACE#Hitchhiker’s#SPACE#Guide#SPACE#tot#SPACE#he#SPACE#Galaxy""" #NEWLINE#
df [ 'Min' ] = [ min ( x ) for x in df . Lists . tolist ( ) ] #NEWLINE#
parse_time ( '12hr5m10s' ) #NEWLINE#
parse_time ( '12hr10s' ) #NEWLINE#
x , y = np . ogrid [ : shape [ 0 ] , : shape [ 1 ] ] #NEWLINE#
plt . plot ( xs [ s1mask ] , series1 [ s1mask ] , linestyle = '-' , marker = 'o' ) #NEWLINE#
html_source = driver . page_source #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
start . mainloop ( ) #NEWLINE#
df . update ( normalize ( df , 'torso' ) ) #NEWLINE#
ax . set_ylabel ( 'Scores' ) #NEWLINE#
setattr ( requests , 'post' , post ) #NEWLINE#
set ( chain . from_iterable ( df . genres ) ) #NEWLINE#
df = pd . read_csv ( 'hourmelt.csv' , sep = '\\s+' ) #NEWLINE#
db = client . get_default_database ( ) #NEWLINE#
'' . join ( reversed ( to_bytes ( 456 ) ) ) or chr ( 0 ) #NEWLINE#
df . idxmax ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
{ 'Bob' : 10.0 , 'Mike' : 1.4 , 'Tom' : 4.0 } #NEWLINE#
raise Exception ( 'Bad#SPACE#revision' ) #NEWLINE#
curs . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#big_table' ) #NEWLINE#
[ row . tostring ( ) for row in data ] #NEWLINE#
page = BeautifulSoup ( urllib . request . urlopen ( 'http://www.url.com' ) ) #NEWLINE#
[ 'cat' , 'dog' , 'rabbit' ] #NEWLINE#
csv_writer = csv . writer ( csv_file ) #NEWLINE#
merge_EvKounis [ 2.0611778700003924 , 2.0809960999995383 , 2.0933345120010927 ] #NEWLINE#
print ( inv_map ( { 'a' : 2 , 'b' : 1 , 'c' : 2 , 'd' : 1 } ) ) #NEWLINE#
app . register_blueprint ( mod , subdomain = 'br' , url_prefix = '/' ) #NEWLINE#
dateutil . parser . parse ( '0001-01-01' ) #NEWLINE#
np . vstack ( np . hsplit ( a , m / k ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
Z [ np . where ( Z == 0 ) ] = np . nan #NEWLINE#
raise Exception ( 'inner' ) #NEWLINE#
p . Series ( [ 1 , 3 , 5 , 10 , 12 , 20 , 21 , 25 ] ) . hist ( bins = [ 0 , 10 , 20 , 30 ] ) . figure #NEWLINE#
g [ 'A' ] [ 'B' ] #NEWLINE#
cv2 . CV_FONT_HERSHEY_SIMPLEX #NEWLINE#
self . SetIcon ( icon ) #NEWLINE#
context . pop ( ) #NEWLINE#
globals ( ) [ 'z' ] = None #NEWLINE#
df . join ( labeldf , on = 'label' ) #NEWLINE#
setattr ( a , 'hi' , 'mom' ) #NEWLINE#
x += tuple ( y ) #NEWLINE#
lines = list ( csv . reader ( f , delimiter = ',' ) ) #NEWLINE#
grammar . parseString ( 'from:mary' ) #NEWLINE#
keywords = dict ( keyword1 = 'foo' , keyword2 = 'bar' ) #NEWLINE#
xml = ET . parse ( '<path-to-xml-file' ) #NEWLINE#
audio . save ( ) #NEWLINE#
super ( FlaskCelery , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
myfield = models . ForeignKey ( 'myotherapp.MyOtherModel' ) #NEWLINE#
with open ( 'file.txt' , 'w' ) as fout : #NEWLINE# #INDENT# fout . writelines ( data [ 1 : ] ) #NEWLINE#
plt . plot ( xvalues , yvalues ) #NEWLINE#
[ 'line1' , 'line1' , 'line3' , 'line4' , 'line5' ] #NEWLINE#
setattr ( self , attr , getattr ( student , attr ) ) #NEWLINE#
tk . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
1 , 2 , 3 #NEWLINE#
df_counts . pivot ( index = 'word' , columns = 'det' , values = 'counts' ) . fillna ( 0 ) #NEWLINE#
print ( my_new_function ( ) ) #NEWLINE#
print ( form . cleaned_data [ 'my_field' ] ) #NEWLINE#
'My#SPACE#name#SPACE#is#SPACE#%(surname)s,#SPACE#%(name)s#SPACE#%(surname)s.#SPACE#I#SPACE#am#SPACE#%(age)i.' % locals ( ) #NEWLINE#
data = dict ( re . findall ( '(Spec#SPACE#\\d+#SPACE#(?:Included|Label))\\s*:\\s*(\\S+)' , data ) ) #NEWLINE#
ax . set_zlim3d ( numpy . min ( U ) , numpy . max ( U ) ) #NEWLINE#
pts = [ ( 10 , 10 ) , ( 10 , 11 ) , ( 20 , 11 ) , ( 20 , 10 ) , ( 10 , 10 ) ] #NEWLINE#
val = convert ( input ( 'Enter#SPACE#value:' ) ) #NEWLINE#
ii = ( s1 ** 2 + s2 ** 2 < 1 ) . sum ( ) #NEWLINE#
print ( df1 . ix [ df1 . B . isin ( df2 . B ) , 'B' ] . tolist ( ) ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 10 , ( 7 , 6 ) ) , columns = list ( 'ABCDEF' ) ) #NEWLINE#
a . loc [ 1 , 'b' ] = b #NEWLINE#
fout . write ( struct . pack ( '>if' , 42 , 2.71828182846 ) ) #NEWLINE#
plt . plot ( [ 2 , 4 , 6 , 1 , 3 , 5 ] , '+' , mew = 10 , ms = 20 ) #NEWLINE#
GL . glVertexAttribPointer ( self . loc , 1 , GL . GL_FLOAT , GL . GL_FALSE , 0 , 0 ) #NEWLINE#
p2 . stdout . close ( ) #NEWLINE#
pg . draw . rect ( surf , STIMCOL , ( 10 , 20 , 40 , 50 ) ) #NEWLINE#
top . addstr ( 0 , 8 , 'X' ) #NEWLINE#
output . append ( test ) #NEWLINE#
lst [ i : ] + lst [ : i ] #NEWLINE#
def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# super ( ChildClass , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
http_client . fetch ( 'http://localhost:8888/cook' , headers = cookie ) #NEWLINE#
json . dump ( pickle . load ( fpick ) , fjson ) #NEWLINE#
plt . ylabel ( 'My#SPACE#y-axis#SPACE#title' ) #NEWLINE#
"""{:.3g}""" . format ( 1 ) #NEWLINE#
inF . close ( ) #NEWLINE#
x_new = sparse . lil_matrix ( sparse . csr_matrix ( x ) [ : , ( col_list ) ] ) #NEWLINE#
print ( ( f , b ) ) #NEWLINE#
all ( a != b for a , b in itertools . combinations ( [ 'a' , 'b' , 'c' , 'd' , 'a' ] , 2 ) ) #NEWLINE#
a = numpy . array ( [ 'hello' , 'how' , 'are' , 'you' ] ) #NEWLINE#
k . write ( '\n' ) #NEWLINE#
scipy . stats . linregr ( X , Y ) #NEWLINE#
3 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 20160224 , 20160226 #NEWLINE#
{ k : ( v ( ) if callable ( v ) else v ) for k , v in a . items ( ) } #NEWLINE#
lang = { 'en' : lang [ 'en' ] } #NEWLINE#
import numpy as np #NEWLINE#
{ 'keyword2' : 'bar' , 'keyword1' : 'foo' } #NEWLINE# { 'keyword2' : 'bar' , 'keyword1' : 'foo' } #NEWLINE#
open ( 'out.txt' , 'w' ) . write ( out ) #NEWLINE#
axes [ 1 ] . plot ( np . linspace ( 0 , 10 , 100 ) , np . random . normal ( 0 , 1 , 100 ) . cumsum ( ) ) #NEWLINE#
test = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
repo = user . create_repo ( full_name ) #NEWLINE#
def f ( ) : #NEWLINE# #INDENT# return [ 1 , 2 , 3 ] , [ 'a' , 'b' , 'c' ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# list1 , list2 = f ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
pd . get_dummies ( s1 [ s1 . notnull ( ) ] ) #NEWLINE#
print ( 'Your#SPACE#guess#SPACE#is#SPACE#too#SPACE#high.' ) #NEWLINE#
print ( list ( igroups ( [ 7 , 8 , 9 , 10 , 6 , 0 , 1 , 2 , 3 , 4 , 5 ] ) ) ) #NEWLINE#
map ( lambda v : '%02d' % v , x ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
sys . path . extend ( '%s../' % os . getcwd ( ) ) #NEWLINE#
blue_count = len ( set ( list_of_blue_items ) . difference ( list_of_all_items ) ) #NEWLINE#
mylist = [ 'x' , 3 , 'b' ] #NEWLINE# print ( '[%s]' % ',#SPACE#' . join ( map ( str , mylist ) ) ) #NEWLINE#
toppings = forms . ModelMultipleChoiceField ( queryset = Topping . objects . all ( ) ) #NEWLINE#
oname = soup . find ( 'title' ) #NEWLINE# oname . text #NEWLINE#
df_norm . max ( ) - df_norm . min ( ) #NEWLINE#
topten = sorted ( list ( mydict . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) [ 0 : 10 ] #NEWLINE#
browser = webdriver . Chrome ( chrome_options = co ) #NEWLINE#
m = re . match ( '(\\d+)#SPACE#(@(\\w+)@#SPACE#)?(\\w+)(#SPACE#(.*))?' , s ) #NEWLINE#
self . send ( response . toXml ( ) ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( count . most_common ( 16 ) ) #NEWLINE#
[ ( a , b , c ) for a in range ( x + 1 ) for b in range ( y + 1 ) for c in range ( z + 1 ) ] #NEWLINE#
functools . reduce ( dict . __getitem__ , keys , d [ 'word' ] ) #NEWLINE#
predict ( self , x , batch_size = 32 , verbose = 0 ) #NEWLINE#
df = pd . read_csv ( f , header = None ) #NEWLINE#
f . seek ( 0 , os . SEEK_END ) #NEWLINE#
webbrowser . open ( 'www.youtube.com' ) #NEWLINE#
'Aden' , 'Baku' , 'Dili' , 'Gaza' , 'Hovd' , 'Omsk' , 'Oral' , 'Zulu' #NEWLINE#
'Kiev' , 'Oslo' , 'Bonn' , 'Riga' , 'Rome' , 'Mahe' , 'Apia' , 'Fiji' #NEWLINE#
'Guam' , 'Niue' , 'Truk' , 'Wake' , 'Chad' , 'Cuba' , 'Fiji' , 'Iran' #NEWLINE#
Foo . objects . create ( name = 'a10' ) #NEWLINE#
chars = '䄲' . encode ( 'utf-16be' ) #NEWLINE#
from distutils . core import setup #NEWLINE#
plt . show ( ) #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
print ( ( 'First#SPACE#10#SPACE#non-primes' , list ( islice ( not_primes , 10 ) ) ) ) #NEWLINE#
forwarder . write ( serial_out ) #NEWLINE#
root = Tk ( ) #NEWLINE#
return GpsPoint ( self . x + other , self . y + other , self . z + other ) #NEWLINE#
tuples . remove ( ( entry [ 1 ] , entry [ 0 ] ) ) #NEWLINE#
foo_cv = cv . CreateMat ( h , w , cv . CV_8UC3 ) #NEWLINE#
config . read ( 'test.ini' ) #NEWLINE#
plt . scatter ( latt , lont , c = uniqueish_color ( len ( latt ) ) ) #NEWLINE#
rec = logging . LogRecord ( 'bob' , 1 , 'foo' , 23 , 'ciao' , ( ) , False ) #NEWLINE#
print ( 'the#SPACE#remainder#SPACE#is' , n % 2 ) #NEWLINE#
raise SyntaxError ( 'Too#SPACE#many#SPACE#opening#SPACE#braces.' ) #NEWLINE#
f . write ( data ) #NEWLINE#
ax . set_yticklabels ( map ( str , list ( range ( 90 , 0 , - 10 ) ) ) ) #NEWLINE#
data . most_common ( 1 ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
return 'break' #NEWLINE#
sys . stdout . write ( '/some/directory/without/a/file\n' ) #NEWLINE#
plt . xlabel ( 'X' ) #NEWLINE#
print ( normalized ( np . arange ( 3 ) ) ) #NEWLINE#
pubs = Publisher . objects . annotate ( num_books = Count ( 'book' ) ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
set_keyring ( PlaintextKeyring ( ) ) #NEWLINE#
map ( int , temps ) #NEWLINE#
ax . plot ( x , y , zs = 0 , zdir = 'z' , label = 'zs=0,#SPACE#zdir=z' ) #NEWLINE#
seaborn . kdeplot ( df [ 'col1' ] , ax = ax ) #NEWLINE#
print ( config . get ( 'main' , 'key1' ) ) #NEWLINE#
print ( list ( enumerate ( 'a#SPACE#b#SPACE#c' . split ( ) ) ) ) #NEWLINE#
s += 'baz' #NEWLINE#
stdoutdata , stderrdata = process . communicate ( ) #NEWLINE#
"""projname:dataset.devices""" #NEWLINE#
df = DataFrame ( np . random . randn ( 3 , 3 ) , columns = [ 'a' , 'b' , 'c' ] ) #NEWLINE#
plt . title ( 'sin(x)' ) #NEWLINE#
self . button . pack ( ) #NEWLINE#
print ( args . bar ) #NEWLINE#
print ( 'Simple!' ) #NEWLINE#
window . show_all ( ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
[ ( 'localhost:54353' , ) ] #NEWLINE#
annotation . set_visible ( False ) #NEWLINE#
print ( bwt ( 'Text#SPACE#I#SPACE#want#SPACE#to#SPACE#apply#SPACE#BTW#SPACE#to#SPACE#:D' ) ) #NEWLINE#
[ 'Const' , 'Const_1' , 'add' ] #NEWLINE#
struct . pack ( 'B' , 1 ) #NEWLINE#
l = math . floor ( math . log10 ( i ) ) + 1 #NEWLINE#
list ( collection . questions ) #NEWLINE#
entry_list . extend ( x . title . text for x in feed . entry ) #NEWLINE#
a . sort ( key = operator . itemgetter ( 1 ) ) #NEWLINE#
return random . random ( ) < probability #NEWLINE#
bin ( 100 ) #NEWLINE#
df2 . reindex ( ix ) #NEWLINE#
return [ multiply ( * pair ) for pair in zip ( iterA , iterB ) ] #NEWLINE#
plt . plot ( x_fit , y_fit ) #NEWLINE#
pickle . loads ( session_data . decode ( 'base64' ) ) #NEWLINE#
min ( data , key = operator . itemgetter ( 1 ) ) #NEWLINE#
[ OrderedDict ( [ ( 'one' , 1 ) , ( 'two' , 2 ) , ( 'three' , 3 ) , ( 'four' , 4 ) ] ) ] #NEWLINE#
self . aMenu . add_command ( label = 'Redo' , command = self . hello ) #NEWLINE#
fruits_text = ',#SPACE#' . join ( fruits ) #NEWLINE#
y = np . linspace ( 0 , 1 , 20 ) #NEWLINE#
value = struct . unpack ( '>h' , s ) #NEWLINE#
ax . plot_surface ( X , Y , Z , rstride = 8 , cstride = 8 , alpha = 0.3 ) #NEWLINE#
serializer . save ( ) #NEWLINE#
shutil . rmtree ( os . path . join ( settings . BASE_DIR , 'static/sources' ) ) #NEWLINE#
sysinfo . get_info ( 'atlas' ) #NEWLINE#
toggle_button . set_label ( 'Show#SPACE#Calendar' ) #NEWLINE#
print ( soup . find ( 'strong' , text = 'some#SPACE#value' ) . parent ) #NEWLINE#
groups . append ( list ( g ) ) #NEWLINE#
dict . fromkeys ( keys , None ) #NEWLINE#
print ( dishes [ key ] ) #NEWLINE#
self . SetTitle ( str ( event . GetSize ( ) ) ) #NEWLINE#
combo . append_text ( 'world' ) #NEWLINE#
x , y = zip ( * li ) #NEWLINE#
urllib . request . urlopen ( 'http://example.com' , timeout = 2 ) #NEWLINE#
datetime . datetime . strptime ( 'Sun,#SPACE#09#SPACE#Mar#SPACE#1997#SPACE#13:45:00' , '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' #NEWLINE# ) #NEWLINE#
b = [ x for x in a if x is not None ] #NEWLINE#
Example ( root ) . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
zip ( f1 , f2 ) #NEWLINE#
ax . grid ( b = True , which = 'minor' , color = 'w' , linewidth = 0.5 ) #NEWLINE#
streams [ 0 ] . dtype = '>i' #NEWLINE#
df2 [ 'col1' ] - df2 [ 'col2' ] #NEWLINE#
len ( diffs [ 'df2' ] . value_counts ( ) ) #NEWLINE#
{ 'id' : '14e92e94a2645355' , 'internalDate' : '1436983839000' } , #NEWLINE#
{ 'id' : '14e92e95cfa0651d' , 'internalDate' : '1436983844000' } , #NEWLINE#
os . environ [ 'SCRAPY_JOB' ] #NEWLINE#
[ ( x [ 0 ] * x [ 1 ] ) for x in result ] #NEWLINE#
pilImage = Image . open ( StringIO ( rawImage ) ) . convert ( 'RGB' ) #NEWLINE#
c [ a | b ] #NEWLINE#
return pd . DataFrame ( data = test , index = df . columns , columns = [ 'test' ] ) #NEWLINE#
"""[["a"#SPACE#"b"]#SPACE#["c"#SPACE#"d"]]""" #NEWLINE#
admin . site . register ( ModelMock ) #NEWLINE#
list ( np . array ( a ) - np . array ( b ) ) #NEWLINE#
sys . stdout . write ( next ( spinner ) ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
obj . __dict__ [ prop ] #NEWLINE#
sftp . put ( 'myfile' , 'myRemoteFile' , callback = printTotals ) #NEWLINE#
return theclass #NEWLINE#
return any ( lst [ i : i + ln ] == sub for i in range ( len ( sub ) - ln + 1 ) ) #NEWLINE#
return [ idx for idx , value in enumerate ( bool_list , 1 ) if value ] #NEWLINE#
decPrefixes = [ 'm' , 'Âµ' , 'n' , 'p' , 'f' , 'a' , 'z' , 'y' ] #NEWLINE#
return str ( str ( self ) ) #NEWLINE#
a = parser . add_subparser ( 'run' , parents = [ parser ] ) #NEWLINE#
mergesort ( [ 6 , 5 , 4 , 3 , 2 , 1 ] ) #NEWLINE#
sys . modules [ __name__ ] = ModuleClass ( ) #NEWLINE#
admin . site . site_header = 'My#SPACE#admin' #NEWLINE#
n * ( n - 1 ) * 2 #NEWLINE#
[ node ( ) for _ in range ( 100 ) ] #NEWLINE#
title = CharField ( ) #NEWLINE#
lst [ : ] = [ i for i in lst if i > 3 ] #NEWLINE#
proc . stdin . write ( text ) #NEWLINE#
s = '{0:-08d}' . format ( i ) #NEWLINE#
print ( cell . value_type ) #NEWLINE#
def zerolistmaker ( n ) : #NEWLINE# #INDENT# listofzeros = [ 0 ] * n #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# return listofzeros #NEWLINE#
print ( '%r#SPACE#does#SPACE#not#SPACE#repeat.' % e ) #NEWLINE#
firstpost = db . DateTimeProperty ( ) #NEWLINE#
re . search ( 'hello' , testString ) #NEWLINE#
current_time = time . time ( ) #NEWLINE#
plt . ylim ( [ 0 , 1 ] ) #NEWLINE#
package_dir = { '' : 'src' } , #NEWLINE#
return '\n' . join ( lines ) #NEWLINE#
[ ( y - x ) for x , y in it . combinations ( a , 2 ) ] #NEWLINE#
ast . literal_eval ( repr ( { 'd' : [ 'x' , 'x' ] } ) ) #NEWLINE#
df . buyer_id = df . apply ( make_buyer_id , axis = 1 ) #NEWLINE#
"""'{0}'#SPACE#is#SPACE#longer#SPACE#than#SPACE#'{1}'""" . format ( name1 , name2 ) #NEWLINE#
np . column_stack ( [ a1 , a2 , a3 ] ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'pt_PT' ) #NEWLINE#
print ( [ k for k , v in list ( count . items ( ) ) if v == highest ] ) #NEWLINE#
np . linalg . inv ( a ) #NEWLINE#
app . run ( '0.0.0.0' , 8080 , True ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
print ( 'success!' ) #NEWLINE#
print ( '.' . join ( str ( x ) for x in reversed ( bytes ) ) ) #NEWLINE#
lst = ast . literal_eval ( strab ) #NEWLINE#
while gtk . events_pending ( ) : #NEWLINE# #INDENT# gtk . main_iteration ( ) #NEWLINE#
Session = sessionmaker ( bind = engine , autocommit = True ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
my_list = [ 1 , 2 , 3 ] #NEWLINE# dict . fromkeys ( my_list ) #NEWLINE#
f = urllib . request . urlopen ( 'http://tinyurl.com/oex2e' ) #NEWLINE#
cprint ( 'hello' , 'red' ) #NEWLINE#
max ( MyCount , key = int ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
df . drop ( df . columns [ [ 1 , 2 ] ] , axis = 1 , inplace = True ) #NEWLINE#
return sp . Matrix ( np . diag ( d - 4 ) + 4 ) #NEWLINE#
print ( random . triangular ( 0 , 1 , 0.7 ) ) #NEWLINE#
print ( [ ( i , sum ( j ) ) for i , j in list ( d . items ( ) ) ] ) #NEWLINE#
p . stdin . close ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
r = int ( s ) #NEWLINE#
lines . pop ( 0 ) . remove ( ) #NEWLINE#
assert_contains ( client . request_log , 'stuff' ) #NEWLINE#
plt . hold ( True ) #NEWLINE#
platform . version ( ) #NEWLINE#
ax . grid ( 'off' , axis = 'both' ) #NEWLINE#
[ 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 ] , #NEWLINE#
d = dict ( ( k , eval ( k ) ) for k in ( 'foo' , 'bar' ) ) #NEWLINE#
from backports import lzma #NEWLINE#
print ( eventdata ) #NEWLINE#
context . update ( { 'contact' : instance } ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] ) #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
pos = nx . spring_layout ( G ) #NEWLINE#
requests . post ( url = 'https://foo.com' , data = { 'bar' : 'baz' } ) #NEWLINE#
print ( 'debug#SPACE#flag' ) #NEWLINE#
content = browser . page_source #NEWLINE#
wb . save ( stream ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
b [ : , ( None ) ] #NEWLINE#
gevent . sleep ( 1 ) #NEWLINE#
axes . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
shutil . rmtree ( TEST_OBJECTS_DIR , onerror = on_rm_error ) #NEWLINE#
return '' . join ( result ) #NEWLINE#
19.4164878389476 #NEWLINE#
a . update ( 1 ) #NEWLINE#
ax . plot ( x , x ** 2 - 8.8 ) #NEWLINE#
a . bit_length ( ) #NEWLINE#
g ( a = 1 , b = 2 , c = 3 ) #NEWLINE#
print ( match . groups ( ) ) #NEWLINE#
sock . bind ( ( '' , MCAST_PORT ) ) #NEWLINE#
i = s . index ( t . lower ( ) ) #NEWLINE#
data = sorted ( data , key = itemgetter ( 'Organization' ) ) #NEWLINE#
value = b [ 'x' ] [ 'y' ] [ 'z' ] #NEWLINE#
serializer . is_valid ( ) #NEWLINE#
self . connection . close ( ) #NEWLINE#
s = '%i:%02i:%06.3f' % ( hours , minutes , seconds ) #NEWLINE#
out = x [ sidx [ ( np . convolve ( mask , [ 1 , 1 ] ) > 1 ) [ 1 : - 1 ] ] ] #NEWLINE#
print ( 'a:#SPACE#$a#SPACE#b:#SPACE#$b\n' ) #NEWLINE#
return word . upper ( ) + '#SPACE#' + s [ len ( word ) : ] #NEWLINE#
db . session . commit ( ) #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 1 , 0 , 0 ) , datetime . datetime ( 2012 , 1 , 1 , 1 , 0 ) ] #NEWLINE#
super ( UserCreateForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ax . set_xlabel ( 'x-points' ) #NEWLINE#
df . apply ( lambda row : get_nth ( row , n ) , axis = 1 ) #NEWLINE#
path = 'C:\\Users\\Deusdies\\Documents\\Work\\myapp' #NEWLINE#
_MONGODB_DATABASE_HOST = 'mongodb://%s/%s' % ( _MONGODB_HOST , _MONGODB_NAME ) #NEWLINE#
from multiprocessing import Process , Queue #NEWLINE#
cursor . execute ( 'COMMIT' ) #NEWLINE#
cursor . execute ( 'ROLLBACK' ) #NEWLINE#
result . extend ( list ( range ( a , b + 1 ) ) ) #NEWLINE#
now . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE# ax . spines [ 'left' ] . set_visible ( False ) #NEWLINE#
list ( d . keys ( ) ) . index ( 'animal' ) #NEWLINE#
frame . set_facecolor ( 'green' ) #NEWLINE# frame . set_edgecolor ( 'red' ) #NEWLINE#
datetime . datetime . now ( pytz . timezone ( 'Europe/Paris' ) ) . isoformat ( ) #NEWLINE#
p_adjust = stats . p_adjust ( FloatVector ( pvalue_list ) , method = 'BH' ) #NEWLINE#
data_cluster . fit ( data_numeric ) #NEWLINE#
element = fox . find_element_by_id ( 'hlogo' ) #NEWLINE#
re . sub ( '@' , lambda _ : next ( subs ) , some_text ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( dict . get , key . split ( '.' ) , my_dict ) #NEWLINE#
x . dtype #NEWLINE#
f = open ( 'filename.txt' , 'r' ) #NEWLINE# lines = set ( f . readlines ( ) ) #NEWLINE#
list ( grouper ( 3 , list ( range ( 10 ) ) ) ) #NEWLINE#
isinstance ( [ 0 , 10 , 20 , 30 ] , list ) #NEWLINE#
keyfunc = lambda t : ( t [ 0 ] , t [ 1 ] , t [ 3 ] , t [ 4 ] ) #NEWLINE#
index_list ( l ) #NEWLINE#
callback ( ) #NEWLINE#
dummy_df == '0%' #NEWLINE#
print ( re . sub ( '(.{0,%d}).{0,%d}' % ( n , m ) , '\\1' , input [ start : ] ) ) #NEWLINE#
docvec = model . docvecs [ 99 ] #NEWLINE#
self . save ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
Product . objects . extra ( select = { 'day' : 'date(#SPACE#date_created#SPACE#)' } ) . values ( 'day' #NEWLINE# ) . annotate ( available = Count ( 'date_created' ) ) #NEWLINE#
df . to_json ( 'test_data_01.json' , date_unit = 's' , date_format = 'iso' ) #NEWLINE#
re . match ( 'a\\w\\w\\wz' , normalize ( 'NFC' , 'aoóoz' ) , re . UNICODE ) #NEWLINE#
list2 = [ [ item [ i ] for item in list if len ( item ) > i ] for i in range ( 0 , 100 ) ] #NEWLINE#
client . close ( ) #NEWLINE#
( 1 , 2 ) in d #NEWLINE#
print ( list ( kwargs . items ( ) ) ) #NEWLINE#
result = DataFrame ( list ( cursor ) , columns = tweet_fields ) #NEWLINE#
draw . ellipse ( ( 0 , 0 ) + size , fill = 255 ) #NEWLINE#
setup ( setup_requires = [ 'numpy' ] , install_requires = [ 'numpy' ] ) #NEWLINE#
intersection ( [ 1 , 2 , 3 , 4 ] , [ 4 , 5 , 6 ] , [ 2 , 4 , 5 ] , [ 1 , 4 , 8 ] ) #NEWLINE#
print ( __file__ ) #NEWLINE#
CONSTANT2 = 'value2' #NEWLINE#
np . savetxt ( f , np . hstack ( ( rows , str_data ) ) , delimiter = ',#SPACE#' , fmt = '%s' ) #NEWLINE#
list ( itertools . product ( a , b ) ) #NEWLINE#
parser . add_argument ( '-x' , nargs = 2 ) #NEWLINE#
form = forms . ChapterForm ( request . POST , request . FILES , instance = chapter ) #NEWLINE#
df [ 'text' ] . str . lower ( ) . str . split ( ) . apply ( results . update ) #NEWLINE#
M3 = numpy . zeros ( ( n , n , n ) ) #NEWLINE#
mycards = [ '0H' , '8H' , '7H' , '6H' , 'AH' , 'QS' ] #NEWLINE# all ( x == 'QS' or 'H' in x for x in mycards ) #NEWLINE#
( df [ self . target ] == t ) . any ( ) #NEWLINE#
cfloats [ i ] = pyfloats [ i ] #NEWLINE#
print ( 'by#SPACE#lstsq:' , np . linalg . lstsq ( x2 , y2 ) [ 0 ] ) #NEWLINE#
return '%s,#SPACE#<%s>' % ( self . name , self . email ) #NEWLINE#
np . argmin ( myList ) #NEWLINE#
[ list ( zip ( a , p ) ) for p in permutations ( b ) ] #NEWLINE#
count . unstack ( 'value' , fill_value = 0 ) #NEWLINE#
parser . parse_args ( [ '--se' ] ) #NEWLINE#
app . logger . info ( 'request#SPACE#started' ) #NEWLINE#
app . logger . info ( 'request#SPACE#finished' ) #NEWLINE#
print ( type ( im ) ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( operator . xor , lst [ : : 2 ] ) #NEWLINE#
br . set_handle_refresh ( mechanize . _http . HTTPRefreshProcessor ( ) , max_time = 1 ) #NEWLINE#
print ( info . get_content_maintype ( ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
mylist = [ 1 , 2 , 3 , '' , 4 ] #NEWLINE# mylist = [ i for i in mylist if i != '' ] #NEWLINE#
df [ 'b' ] = df [ 'a' ] . shift ( 1 ) . replace ( np . NaN , 0 ) . astype ( int ) #NEWLINE#
np . may_share_memory ( data , data [ 'y' ] ) #NEWLINE#
return os . path . isdir ( d ) and glob . glob ( os . path . join ( d , '__init__.py*' ) ) #NEWLINE#
logger . info ( 'knights:{0}' , 'ni' ) #NEWLINE#
cursor . execute ( 'select#SPACE#*#SPACE#from#SPACE#Company;' ) #NEWLINE#
out [ mask ] = np . core . defchararray . add ( 't:' , series2 [ mask ] . astype ( str ) ) #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
[ 'ROOT' , 'Node1' , 'Node2' , 'Node3' ] #NEWLINE#
aDict [ name ] . append ( ( startTime , endTime ) ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
f = open ( 'my_recovered_log_file' , 'wb' ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
x = 'abc' #NEWLINE# list ( x ) #NEWLINE#
return list . pop ( self , * args , ** kwargs ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
s . bind ( ( 'eth1' , 0 ) ) #NEWLINE#
target_path = __import__ ( 'pkg' ) . __file__ #NEWLINE#
'encoding' , 'filter' , 'filters' , 'flush' , 'format' , 'formatter' #NEWLINE#
'release' , 'removeFilter' , 'setFormatter' , 'setLevel' , 'set_name' , 'stream' #NEWLINE#
'http://www.address.com/something' , 'something' #NEWLINE#
vec [ np . in1d ( vec , [ 2 , 7 ] ) ] #NEWLINE#
choice ( Counter ( d ) . most_common ( 3 ) ) [ 0 ] #NEWLINE#
url_for ( '.index' ) #NEWLINE#
browser . show ( ) #NEWLINE#
'dealer#SPACE#has#SPACE#%s#SPACE#%s#SPACE#showing' % self . dealer [ : 2 ] #NEWLINE#
out . append ( l [ new_i ] . pop ( random . randint ( 0 , len ( l [ new_i ] ) - 1 ) ) ) #NEWLINE#
ax . zaxis . set_major_formatter ( FormatStrFormatter ( '%.02f' ) ) #NEWLINE#
route = RedirectRoute ( '/feed' , handler = feed , strict_slash = True ) #NEWLINE#
print ( sqrt ( 2 ) ) #NEWLINE#
df2 = df2 . drop ( [ 'NumOfDaysSinceLastWin' , 'WIN' , 'WIN1' ] , axis = 1 ) #NEWLINE#
dest_file . close ( ) #NEWLINE#
set ( ) . union ( * lis ) #NEWLINE#
values = list ( dictionary . values ( ) ) #NEWLINE#
a = '' . join ( [ str ( random . randint ( 0 , 9 ) ) for i in range ( x ) ] ) #NEWLINE#
matrix = [ line . rstrip ( ) for line in infile ] #NEWLINE#
np . where ( a > 5 ) [ 0 ] [ 0 ] #NEWLINE#
ax1 . plot ( x , y ) #NEWLINE#
sp = sp . asfreq ( 'W-FRI' , method = 'pad' ) #NEWLINE#
a . astype ( numpy . int64 ) #NEWLINE#
skel = mh . thin ( im ) #NEWLINE#
for e in s : #NEWLINE# #INDENT# break #NEWLINE#
mylist = [ p for i , p in enumerate ( mylist ) if i not in remove ] #NEWLINE#
child . expect ( [ 'password:#SPACE#' ] ) #NEWLINE#
[ x for x in [ 'id1' , 'x' , 'x' , 'x' ] if x != 'x' ] #NEWLINE#
msvcrt . putch ( '*' ) #NEWLINE#
msvcrt . putch ( '\r' ) #NEWLINE#
msvcrt . putch ( '\n' ) #NEWLINE#
return int ( s ) #NEWLINE#
queue . put ( ( True , function ( * args , ** kwargs ) ) ) #NEWLINE#
fullname = os . path . join ( thispath , filename ) #NEWLINE#
plt . show ( ) #NEWLINE#
main ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
mainarea . pack ( expand = True , fill = 'both' , side = 'right' ) #NEWLINE#
filename = input ( ) #NEWLINE#
np . all ( yroll3 == ymulti ) #NEWLINE#
sorted ( your_list , key = lambda x : ( your_dict [ x ] [ 'downloads' ] , your_dict [ x ] [ #NEWLINE# 'date' ] ) ) #NEWLINE#
print ( 'Opening#SPACE#the#SPACE#file...' ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
re . sub ( '\\sAND\\s' , '#SPACE#&#SPACE#' , 'Baked#SPACE#Beans#SPACE#And#SPACE#Spam' , flags = re . IGNORECASE ) #NEWLINE#
duggars = db . session . query ( Parent ) . filter ( Parent . child_count > 17 ) #NEWLINE#
change_func_args ( g , [ 'p' , 'q' ] ) #NEWLINE#
print ( ( x , y , z ) ) #NEWLINE#
"""hel#SPACE#lo""" . isalpha ( ) #NEWLINE#
self . exporter . start_exporting ( ) #NEWLINE#
f . write ( file_data ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
return x_2 , y_2 #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
ax . set_xticks ( np . arange ( len ( dates ) ) + width / 2 ) #NEWLINE#
plt . rcParams [ 'keymap.save' ] #NEWLINE#
ax2 . set_xlabel ( 'x-transformed' ) #NEWLINE#
min_val , max_val = min ( x , y ) , max ( x , y ) #NEWLINE#
resource = urllib . request . urlopen ( url ) #NEWLINE#
serializer = UserSerializer ( user , data = request . DATA , partial = True ) #NEWLINE#
from multiprocessing import Pool #NEWLINE#
print ( '%-20s#SPACE#%s' % ( key , value ) ) #NEWLINE#
int ( hashlib . sha256 ( s . encode ( 'utf-8' ) ) . hexdigest ( ) , 16 ) % 10 ** 8 #NEWLINE#
format_to_year_to_value_dict . setdefault ( format_str , { } ) [ year ] = value #NEWLINE#
return str ( value . decode ( 'ascii' , errors = 'ignore' ) ) #NEWLINE#
x = array ( [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 ] , dtype = np . bool ) #NEWLINE#
subprocess . Popen ( shlex . split ( command ) ) #NEWLINE#
print ( f . __self__ ) #NEWLINE#
first_set = set ( map ( tuple , first_list ) ) #NEWLINE# secnd_set = set ( map ( tuple , secnd_list ) ) #NEWLINE#
COMPRESS_JS_FILTERS = [ 'compressor.filters.template.TemplateFilter' ] #NEWLINE#
session . add ( another_obj ) #NEWLINE#
plt . scatter ( x , y , c = y , s = 500 , cmap = 'gray' ) #NEWLINE#
plt . close ( ) #NEWLINE#
parser . add_argument ( '-d' , '--my-dict' , type = json . loads ) #NEWLINE#
dupemask = ~ df . duplicated ( subset = [ 'id' ] ) #NEWLINE#
del df [ '_id' ] #NEWLINE#
argvb = list ( map ( os . fsencode , sys . argv ) ) #NEWLINE#
sys . exit ( load_entry_point ( 'pip' , 'console_scripts' , 'pip' ) ( ) ) #NEWLINE#
[ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 ] , #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
print ( np . array ( [ i , j ] , dtype = np . int64 ) ) #NEWLINE#
return iter ( self . __dict__ ) #NEWLINE#
decimal . Decimal ( x . seconds ) #NEWLINE#
_ ( 1 , 4 ) #NEWLINE#
reactor . run ( ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . INFO ) #NEWLINE#
html . escape ( 'x#SPACE#>#SPACE#2#SPACE#&&#SPACE#x#SPACE#<#SPACE#7' ) #NEWLINE#
print ( 'Admin#SPACE#check#SPACE#failed,#SPACE#assuming#SPACE#not#SPACE#an#SPACE#admin.' ) #NEWLINE#
scipy . misc . imsave ( 'v.png' , v ) #NEWLINE#
form = CustomQueryConstraintForm ( initial = request . POST ) #NEWLINE#
XYZ . objects . extra ( select = { 'z' : 'x/y' } ) . annotate ( ) . order_by ( '-z' ) [ 0 ] #NEWLINE#
process . kill ( ) #NEWLINE#
return super ( Egg , self ) . __setitem__ ( key , value ) #NEWLINE#
self . cl . setstatus ( 'CL1.Item1' , 'off' ) #NEWLINE#
self . cl . setstatus ( 'CL2' , 'on' ) #NEWLINE#
section = models . ForeignKey ( Section , related_name = 'books' ) #NEWLINE#
"""C:/mydir""" #NEWLINE#
response . headers . add ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
s2 . replace ( 'v' , 'b' ) #NEWLINE#
test6 = "'" #NEWLINE#
test7 = '"' #NEWLINE#
self . fig . canvas . draw ( ) #NEWLINE#
subprocess . check_output ( [ 'scrapy' , 'runspider' , 'epgd.py' ] ) #NEWLINE#
data = pkg_resources . resource_string ( 'hermes' , 'templates/python.tpl' ) #NEWLINE#
foo [ : - 3 ] . strip ( ) . replace ( '#SPACE#' , '' ) #NEWLINE#
sorter = np . argsort ( colkeys ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] #NEWLINE#
[ { 'name' : 'Paul' , 'age' : 29 } , { 'name' : 'Kathy' , 'age' : 101 } , { 'name' : #NEWLINE# 'Paula' , 'age' : 12 } , { 'name' : 'Bruce' , 'age' : 56 } ] #NEWLINE#
match = re . search ( pat , s ) #NEWLINE#
new_df = pandas . DataFrame . from_dict ( a_dict ) #NEWLINE#
channel . basic_publish ( exchange = '' , routing_key = queue_name , body = 'A#SPACE#Message' ) #NEWLINE#
max ( players , <STR0> = func ) #NEWLINE#
event . widget . configure ( background = 'bisque' ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE# plt . show ( ) #NEWLINE#
array ( 'Py4C' , 'pythonkhmer.wordpress.com' , 'TUTORIAL' ) #NEWLINE#
s . loc [ 'b' , slice ( 2 , 10 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( 'Clearing#SPACE#{e}' . format ( e = ET . tostring ( elem ) ) ) #NEWLINE#
StockRequest . objects . filter ( amount_requested = F ( 'amount_approved' ) ) #NEWLINE#
strings = [ 'first' , '' , 'second' ] #NEWLINE#
new_list = [ x ] + your_list #NEWLINE#
b = np . array ( [ 1.0 , 0.9 , 0.8 , 0.7 , 0.6 ] ) #NEWLINE#
the_element [ 'href' ] #NEWLINE#
print ( 'all#SPACE#done' ) #NEWLINE#
ax . scatter ( theta , r ) #NEWLINE#
response = requests . get ( bl_url , headers = headers ) #NEWLINE#
script_dir = os . path . dirname ( __file__ ) #NEWLINE#
abort ( 413 ) #NEWLINE#
raise ValueError ( '{!r}#SPACE#is#SPACE#the#SPACE#last#SPACE#key' . format ( key ) ) #NEWLINE#
out . set_index ( [ 'Book' , 'Trader' ] , inplace = True ) #NEWLINE#
print ( polygon ( 4 , 2 , math . pi / 4 , [ 10 , 10 ] ) ) #NEWLINE#
connection . putheader ( 'Content-Type' , 'text/xml' ) #NEWLINE#
connection . putheader ( 'User-Agent' , 'Python-xmlrpc/3.5' ) #NEWLINE#
self . canvas . after ( 10 , self . move ) #NEWLINE#
json . dump ( data , codecs . getwriter ( 'utf-8' ) ( f ) , ensure_ascii = False ) #NEWLINE#
df . loc [ ( idx [ : , ( '2014-05' ) ] ) , : ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
p . wait ( ) #NEWLINE#
list ( hex_list ) #NEWLINE#
self . _handler . close ( ) #NEWLINE#
for line in open ( 'myfile' , 'r' ) . readlines ( ) : #NEWLINE# #INDENT# do_something ( line ) #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
with open ( 'codified.xml' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( xmldoc . toxml ( 'utf-8' ) . decode ( 'utf-8' ) ) #NEWLINE#
print ( os . path . dirname ( os . path . dirname ( 'C:\\Users\\myFile.txt' ) ) ) #NEWLINE#
print ( '#SPACE##SPACE#<tr><td>' ) #NEWLINE#
print ( '#SPACE##SPACE#</td></tr>' ) #NEWLINE#
self . show ( ) #NEWLINE#
return - np . linalg . det ( self . state ) #NEWLINE#
print ( 'You#SPACE#passed#SPACE#in#SPACE#something#SPACE#else!' ) #NEWLINE#
__tablename__ = 'users' #NEWLINE#
__tablename__ = 'people' #NEWLINE#
sp . ndimage . filters . convolve1d ( A , [ 0.707 , 0.707 ] , axis = 1 , mode = 'constant' ) #NEWLINE#
plt . title ( 'Default' ) #NEWLINE#
ax . imshow ( data ) #NEWLINE#
window . title ( 'Join' ) #NEWLINE#
print ( r . content ) #NEWLINE#
binascii . hexlify ( struct . pack ( '2I' , 12 , 31 ) ) #NEWLINE#
data . remove ( row ) #NEWLINE#
"""C:\\Program#SPACE#Files\\Windows#SPACE#NT\\Accessories\\Wordpad.exe%1""" #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 ] #NEWLINE#
session = requests . session ( ) #NEWLINE#
print ( textarea . get_attribute ( 'value' ) ) #NEWLINE#
writer = csv . writer ( open ( 'out.csv' , 'w' ) ) #NEWLINE#
my_dict [ 'foo' ] [ 'bar' ] [ 'spam' ] [ 'egg' ] = 0 #NEWLINE#
df = df . drop ( 'TimeStamp' , axis = 1 ) #NEWLINE#
[ ( x == y ) for x , y in zip ( s , t ) ] #NEWLINE#
x = [ 'a' , 'a' , 'b' , 'c' , 'c' , 'c' ] #NEWLINE#
current_milli_time ( ) #NEWLINE#
self . lock . release ( ) #NEWLINE#
df . reindex ( d [ 'Time' ] , method = 'nearest' , tolerance = pd . Timedelta ( '30Min' ) ) #NEWLINE#
json_part = log_line . split ( None , 4 ) [ - 1 ] #NEWLINE#
plt . xlabel ( 'x' ) #NEWLINE#
random . shuffle ( c ) #NEWLINE#
data = [ { 'id1' : 'a' , 'price' : '2' , 'color' : 'green' } , { 'id1' : 'b' , 'price' : #NEWLINE# '5' , 'color' : 'red' } , { 'id1' : 'a' , 'price' : '2' , 'color' : 'green' } ] #NEWLINE#
return ( ( int ( x ) , int ( y ) ) for x , y in split ) #NEWLINE#
logging . getLogger ( 'schedule' ) . addHandler ( logging . NullHandler ( ) ) #NEWLINE#
getpass ( ) #NEWLINE#
{ { form . as_p } } #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
f = open ( 'temp' , 'rb' ) #NEWLINE#
app . config . from_object ( __name__ ) #NEWLINE#
print ( make_hash ( Foo . __dict__ ) ) #NEWLINE#
eom ( datetime . datetime ( 1980 , 12 , 31 ) ) #NEWLINE#
print ( test . _tests ) #NEWLINE#
self . rect . top += self . yvel #NEWLINE#
print ( list ( get_names ( func ) ) ) #NEWLINE#
number = request . POST [ 'number' ] #NEWLINE#
soup . findAll ( 'td' , 'altRow' ) [ 1 ] . findAll ( 'a' , href = re . compile ( '/.a\\w+' ) , #NEWLINE# recursive = False ) #NEWLINE#
df = pd . DataFrame ( { 'a' : np . random . randn ( 5 ) } ) #NEWLINE#
main ( ) #NEWLINE#
list ( map ( lambda x : x [ 'checksum' ] , images ) ) #NEWLINE#
[ { 'text' : 'second#SPACE#value' , 'value' : 'number#SPACE#2' } , { 'text' : 'third#SPACE#value' , #NEWLINE# 'value' : 'number#SPACE#3' } , { 'text' : 'first#SPACE#value' , 'value' : 'number#SPACE#1' } ] #NEWLINE#
parser . add_argument ( 'action' , choices = ( 'start' , 'stop' , 'restart' ) ) #NEWLINE#
sub2 [ 'income' ] . fillna ( sub2 [ 'income' ] . mean ( ) , inplace = True ) #NEWLINE#
e = Employee ( { 'name' : 'abc' , 'age' : 32 } ) #NEWLINE#
somevar = str ( tag . getArtist ( ) ) #NEWLINE#
"""""" . join ( re . findall ( '..?' , '123456' , flags = re . S ) [ : : - 1 ] ) #NEWLINE#
df [ 'e' ] = df . sum ( axis = 1 ) #NEWLINE#
z . writestr ( 'site/foo/hello/index.html' , my_data ) #NEWLINE#
s2 = '0b1100000000101100000000000000000000000000000000000000000000000000' #NEWLINE# struct . unpack ( 'd' , struct . pack ( 'Q' , int ( s2 , 0 ) ) ) [ 0 ] #NEWLINE#
m = re . match ( 'going#SPACE#to#SPACE#the#SPACE#((?:\\w+\\s*(?!to#SPACE#try)){1,3})' , line ) #NEWLINE#
cv_image = cv_image [ : , : , : : - 1 ] #NEWLINE#
a . remove ( b ) #NEWLINE#
plot ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
cursor . execute ( 'UPDATE#SPACE#myapp_server#SPACE#...' ) #NEWLINE#
win . connect ( 'key-press-event' , keypress ) #NEWLINE#
app . run ( host = '0.0.0.0' ) #NEWLINE#
inithello ( ) #NEWLINE#
sys . exit ( main ( ) ) #NEWLINE#
printFoo ( ) #NEWLINE#
( 'Command' , ctypes . c_ubyte ) , #NEWLINE#
np . sort ( a . view ( 'i8,i8,i8' ) , order = [ 'f1' ] , axis = 0 ) . view ( np . int ) #NEWLINE#
{ { analytics_code } } #NEWLINE#
print ( 'foo' ) #NEWLINE#
cv2 . drawContours ( im , contours , i , ( 0 , 0 , 255 ) , 2 ) #NEWLINE#
v = fbx . FbxVector4 ( x , y , z ) #NEWLINE#
newdict . update ( mydict ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
turtle . update ( ) #NEWLINE#
visit . find ( 'DAS' ) . find ( 'Joints' ) . set ( 'SWOL28' , new_swol28 ) #NEWLINE#
x = 'Short#SPACE#string' #NEWLINE#
from PIL import Image #NEWLINE#
grequests . map ( rs ) #NEWLINE#
k . append ( '{0:.2f}' . format ( c ) ) #NEWLINE#
df . loc [ : '2015-04-25' ] #NEWLINE#
super ( Mom , self ) . __init__ ( ) #NEWLINE#
super ( SomeMixin , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return TaskBase . __call__ ( self , * args , ** kwargs ) #NEWLINE#
print ( data [ data [ 'tag' ] . isin ( tags ) ] ) #NEWLINE#
l = [ [ 1 , 2 , 3 ] , [ 1 , 3 , 4 ] , [ 1 , 4 , 5 ] , [ 2 , 4 , 3 ] , [ 2 , 5 , 6 ] , [ 2 , 1 , 3 ] ] #NEWLINE#
main ( ) #NEWLINE#
objectArrray = [ c ( ) for c in classArray ] #NEWLINE#
return render ( 'edit_team.html' ) #NEWLINE#
{ 'font_face' : 'Source#SPACE#Code#SPACE#Pro' } #NEWLINE#
setattr ( self . __class__ , 'Pear' , property ( lambda s : 'Pear' ) ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
random . shuffle ( row ) #NEWLINE#
url = 'http://foo.appspot.com/abc?def=ghi' #NEWLINE#
sys . getwindowsversion ( ) [ 0 ] >= 6 #NEWLINE#
d [ k ] . add ( v ) #NEWLINE#
time . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' , time . gmtime ( time . mktime ( time . strptime ( #NEWLINE# '2008-09-17#SPACE#14:04:00' , '%Y-%m-%d#SPACE#%H:%M:%S' ) ) ) ) #NEWLINE#
map ( flat_tuple , a , b , c ) #NEWLINE#
return OrderedDict . __getitem__ ( self , key ) #NEWLINE#
l = [ 0 ] * 10000 #NEWLINE#
Html_file = open ( 'filename' , 'w' ) #NEWLINE#
b [ 0 ] . append ( 1 ) #NEWLINE#
sorted ( lst ) #NEWLINE#
dtsegs = zip ( dtg0 , dtg1 ) #NEWLINE#
area += ( p1 [ 0 ] - p0 [ 0 ] ) * ( ( p1 [ 1 ] + p0 [ 1 ] ) / 2 if trapezoid else p0 [ 1 ] ) #NEWLINE#
show ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
return mark_safe ( '\n' . join ( output ) ) #NEWLINE#
sys . stderr . close ( ) #NEWLINE#
[ '1.1.1.1-1.1.1.25' , '2.2.2.2-2.2.2.10' , '3.3.3.3-3.3.3.3' ] #NEWLINE#
setattr ( self , name , kwargs [ name ] ) #NEWLINE#
img . resize ( ( width , height ) , Image . ANTIALIAS ) #NEWLINE#
print ( 'Inventory:' , player . inventory ( ) ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
print ( intersects ( a , b ) ) #NEWLINE#
print ( dict ( customers ) ) #NEWLINE#
def watchout ( ) : #NEWLINE# #INDENT# print ( 'my#SPACE#message' ) #NEWLINE#
dates = pd . date_range ( '1/1/2000' , periods = 8 ) #NEWLINE#
df . filter ( like = 'a' ) #NEWLINE#
sys . getsizeof ( Animal ( 4 , [ 'Lasagna' , 'Fish' ] ) ) #NEWLINE#
sublist . sort ( key = '*/+-' . index ) #NEWLINE#
s = pd . Series ( [ 'foo' , 'bar' , 'baz' ] ) #NEWLINE#
management . call_command ( 'migrate' , new_app_name , interactive = False ) #NEWLINE#
canvas . pack ( ) #NEWLINE#
im = Image . open ( 'sample.gif' ) #NEWLINE#
k , v = random . choice ( list ( d . items ( ) ) ) #NEWLINE#
[ 1 , 2 , 10 , 4 , '1fba' ] #NEWLINE#
server_sock . bind ( ( '0.0.0.0' , 13000 ) ) #NEWLINE#
package_dir = { '' : 'src' } , #NEWLINE#
data = f . read ( ) #NEWLINE#
rgb_values . pop ( - 1 ) #NEWLINE#
df [ 'e' ] = df . applymap ( np . isreal ) . T . all ( ) . astype ( int ) #NEWLINE#
print ( 'Column:' , ',' . join ( list ( df . columns . values ) ) ) #NEWLINE#
{ k : ( v / len ( list_of_dicts ) ) for k , v in list ( summed . items ( ) ) } #NEWLINE#
MyModel . objects . filter ( created__isoyear = year , created__week = week ) #NEWLINE#
getattr ( hello , m ) ( ) #NEWLINE#
d . join ( d . set_index ( 'i' ) , rsuffix = '_y' ) #NEWLINE#
string . ascii_lowercase [ : 14 : 2 ] #NEWLINE#
return scipy . optimize . fsolve ( g , 0.0 ) #NEWLINE#
return unicodedata . normalize ( 'NFKD' , x ) . encode ( 'ASCII' , 'ignore' ) #NEWLINE#
client . connect ( HOST , username = USER , password = PASSWORD ) #NEWLINE#
c . test . uuidtest . find_one ( ) #NEWLINE#
return func ( * args , ** kw ) #NEWLINE#
datetime . datetime . strptime ( 'February' , '%B' ) #NEWLINE#
result = urllib . request . urlopen ( 'http://example.com' , urllib . parse . #NEWLINE# urlencode ( post_data ) ) #NEWLINE#
print ( '#SPACE#' . join ( item ) ) #NEWLINE#
list ( params . items ( ) ) #NEWLINE#
items = list ( dictionary . items ( ) ) #NEWLINE#
nltk . clean_html ( html ) #NEWLINE#
df = pandas . DataFrame ( columns = [ 'a' , 'b' , 'c' , 'd' ] , index = [ 'x' , 'y' , 'z' ] ) #NEWLINE#
do_something_useful ( ) #NEWLINE#
req . add_header ( 'Accept' , 'application/json' ) #NEWLINE#
someList . sort ( key = key2 , reverse = True ) #NEWLINE#
self . fields [ 'long_desc' ] . widget . attrs [ 'rows' ] = 20 #NEWLINE#
return response #NEWLINE#
return dict ( map ( convert , list ( data . items ( ) ) ) ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( doc ) #NEWLINE#
class Foo ( models . Model ) : #NEWLINE# #INDENT# int_list = models . CommaSeparatedIntegerField ( max_length = 200 ) #NEWLINE#
self . browser . get ( 'url/to/test' ) #NEWLINE#
print ( dateparser . parse ( date_string ) . date ( ) ) #NEWLINE#
return os . path . join ( path , fname ) #NEWLINE#
ax . get_xticklabels ( ) [ i ] . set_visible ( False ) #NEWLINE#
labs ( title = 'Views#SPACE#and#SPACE#other#SPACE#stuff' , y = '%#SPACE#of#SPACE#views' ) #NEWLINE#
img = Image . open ( sys . argv [ 1 ] ) . convert ( 'RGB' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ [ 1 , 2 ] , [ 2 , 3 , 4 ] , [ 5 ] ] , 'c' : [ 5 , #NEWLINE# 6 , 7 ] } ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
g = lambda S , b : ( g ( S [ 1 : ] , b ) , S ) [ len ( S ) == b ] #NEWLINE#
np . unravel_index ( 7 , [ 1 , 2 , 3 , 4 ] , 'F' ) #NEWLINE#
posts . find_one ( { 'author' : 'Mike' } ) #NEWLINE#
service . files ( ) . copy ( fileId = originalId , body = newfile ) . execute ( ) #NEWLINE#
self . run . grid ( row = 4 , column = 0 , sticky = EW ) #NEWLINE#
y = np . array ( [ 0 , 0 , 1 , 1 ] ) #NEWLINE# scores = np . array ( [ 0.1 , 0.4 , 0.35 , 0.8 ] ) #NEWLINE#
dataPadded = numpy . concatenate ( ( data , padding ) , axis = 1 ) #NEWLINE#
paragraphs3 [ 0 ] [ 2 ] #NEWLINE#
"""\\""" #NEWLINE#
"""\\kjsh#TAB#dfkj"\\\\\\""" #NEWLINE#
"""kjsdhfksd#SPACE#f\\\\""" #NEWLINE#
dic = { 'fruit' : 'apple' , 'place' : 'table' } #NEWLINE#
csv . write ( '' . join ( [ ( FMT % dict [ k ] [ i ] ) for k in keys ] ) + '\n' ) #NEWLINE#
e = ET . parse ( 'test.txt' ) #NEWLINE#
df_new #NEWLINE#
json . dump ( sample , fp ) #NEWLINE#
df . loc [ 'A' , 'C' ] = 999 #NEWLINE#
raise ValueError ( 'Empty#SPACE#segment#SPACE#in#SPACE#%r' % tablename ) #NEWLINE#
"""àà""" #NEWLINE#
f ( 1 ) #NEWLINE#
self . Show ( ) #NEWLINE#
decorated_function_with_arguments ( 'Rajesh' , 'Howard' ) #NEWLINE#
e . grid ( row = 0 , column = 0 ) #NEWLINE#
print ( 'Starting#SPACE#cluster' , cluster_id ) #NEWLINE#
sudo ( '~/install_script.py' ) #NEWLINE#
( b - a ) . seconds #NEWLINE#
re . sub ( "x(?=[^']*'([^']|'[^']*')*$)" , 'P' , "axbx'cxdxe'fxgh'ixj'k" ) #NEWLINE#
s = re . sub ( '#SPACE#+' , '#SPACE#' , s ) #NEWLINE#
return len ( self . __dict__ ) #NEWLINE#
im = cv2 . imread ( 'image.jpg' ) #NEWLINE#
with open ( 'test.csv' , 'r' ) as textfile : #NEWLINE# #INDENT# for row in reversed ( list ( csv . reader ( textfile ) ) ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
url ( '^(api|internal|admin)/' , SomeView . as_view ( ) ) , #NEWLINE#
a = list ( range ( 1 , 10 ) ) #NEWLINE# [ x for x in a if x not in [ 2 , 3 , 7 ] ] #NEWLINE#
l = Location . objects . get_or_create ( location_name = sq ) [ 0 ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
browser . submit ( ) #NEWLINE#
foo <STR0> ( obj . id for obj <STR0> bar if hasattr ( obj , 'id' ) ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'z' ] #NEWLINE#
return loader . construct_yaml_map ( node ) #NEWLINE#
inspect . getmembers ( a , predicate = inspect . ismethod ) #NEWLINE#
df . isnull ( ) . any ( axis = 1 ) #NEWLINE#
myClass . __subclasses__ ( ) #NEWLINE#
goodXML = decoded . encode ( 'utf-8' ) #NEWLINE#
print ( L [ i ] ) #NEWLINE#
infile . close ( ) #NEWLINE#
print ( str2seconds ( '255:25:25' ) ) #NEWLINE#
print ( str2seconds ( '255:25:25:255' ) ) #NEWLINE#
raise ValueError ( 'a#SPACE#cyclic#SPACE#dependency#SPACE#exists' ) #NEWLINE#
frame1 . axes . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
__hash__ = None #NEWLINE#
{ k : c [ k ] for k in li } #NEWLINE#
output . append ( sublist [ 0 ] ) #NEWLINE#
df [ df [ [ 'A' ] ] . apply ( lambda x : x [ 0 ] . isdigit ( ) , axis = 1 ) ] #NEWLINE#
ws . append ( l ) #NEWLINE#
matshow ( board_prob , cmap = cm . Spectral_r , interpolation = 'none' , vmin = 0 , vmax = 1 ) #NEWLINE#
elem . clear ( ) #NEWLINE#
[ zip ( x , list2 ) for x in itertools . permutations ( list1 , len ( list2 ) ) ] #NEWLINE#
numcols = len ( input [ 0 ] ) #NEWLINE#
sys . __excepthook__ ( type , value , tb ) #NEWLINE#
print ( server . get_job ( 'jobname' ) . get_last_buildnumber ( ) ) #NEWLINE#

fout . write ( text_type ( chunk ) + '\n\n' ) #NEWLINE#
from django . contrib . auth . models import User #NEWLINE#
ax2 . set_xlim ( [ 0 , repeat_length ] ) #NEWLINE#
'MessageTime#SPACE#<#SPACE#%s' % ( i , j , k , l , m ) #NEWLINE#
plt . figure ( ) #NEWLINE#
ax . set_xlim ( - 40 , 40 ) #NEWLINE#
c = [ 1 , 2 , 3 , 4 ] #NEWLINE#
return super ( UserSettingsView , self ) . get_login_url ( ) #NEWLINE#
s = cgi . escape ( '&#SPACE#<#SPACE#>' ) #NEWLINE#
ax . legend ( handles , labels , loc = 'upper#SPACE#right' ) #NEWLINE#
print ( self . __class__ . __name__ + '.__call__' ) #NEWLINE#
print ( self . __class__ . __name__ + '.second_init' ) #NEWLINE#
print ( self . __class__ . __name__ + '.decorated_method' ) #NEWLINE#
self . setWindowFlags ( Qt . FramelessWindowHint ) #NEWLINE#
self . finish ( ) #NEWLINE#
password = 'abcd' #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
os . path . basename ( file ) #NEWLINE#
raise ValueError ( name + '#SPACE#must#SPACE#be#SPACE#positive' ) #NEWLINE#
cropped = pygame . Surface ( ( 80 , 80 ) ) #NEWLINE# cropped . blit ( buttonStates , ( 0 , 0 ) , ( 30 , 30 , 80 , 80 ) ) #NEWLINE#
imshow ( Z1 , cmap = cm . hsv , alpha = 0.6 , extent = extent ) #NEWLINE#
content . encode ( 'latin1' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
exampleItem . exampleName ( * function1 ( ) , name = name ) #NEWLINE#
last_modified_date = datetime . fromtimestamp ( mtime ) #NEWLINE#
result = pattern . sub ( lambda x : d [ x . group ( ) ] , s ) #NEWLINE#
SORT_ORDER = { 'DINT' : 0 , 'INT' : 1 , 'BOOL' : 2 } #NEWLINE# mylist . sort ( key = lambda val : SORT_ORDER [ val [ 1 ] ] ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
text_file . write ( 'Purchase#SPACE#Amount:#SPACE#%s#SPACE#price#SPACE#%f' % ( TotalAmount , price ) ) #NEWLINE#
super ( Widget , self ) . __init__ ( parent ) #NEWLINE#
return all ( x >= y for x , y in zip ( L , L [ 1 : ] ) ) #NEWLINE#
[ v for v in x2 if v [ 1 ] == optimal [ 0 ] and v [ 2 ] == optimal [ 1 ] ] #NEWLINE#
today = datetime . datetime . today ( ) #NEWLINE#
self . text . tag_configure ( 'BOLD' , font = self . bold_font ) #NEWLINE#
thread . start_new_thread ( motor_thread ) #NEWLINE#
df [ 1 ] . apply ( pd . Series ) #NEWLINE#
return s . get_data ( ) #NEWLINE#
print ( 'bar' ) #NEWLINE#
print ( '</table>' ) #NEWLINE#
app . run ( ) #NEWLINE#
ssh_client = paramiko . SSHClient ( ) #NEWLINE#
data = json . loads ( file ) #NEWLINE#
file . close ( ) #NEWLINE#
mystr . replace ( k , v ) #NEWLINE#
stream . write ( ')' ) #NEWLINE#
return getattr ( self . _i , n ) #NEWLINE#
my_dictionary = { 'foo' : 10 , 'bar' : 20 } #NEWLINE#
result = sorted ( iter ( promotion_items . items ( ) ) , key = item_value ) #NEWLINE#
print ( x . task_id ) #NEWLINE#
sorted ( s , lambda x , y : cmp ( x . lower ( ) , y . lower ( ) ) or cmp ( x , y ) ) #NEWLINE#
plt . xlim ( 0 , variability . shape [ 1 ] ) #NEWLINE#
value = next ( iter ( some_collection ) ) #NEWLINE#
df . groupby ( level = [ 0 , 1 ] ) . sum ( ) . reset_index ( ) . sort_values ( [ 'borough' , #NEWLINE# 'total_loans' ] , ascending = [ 1 , 0 ] ) . groupby ( 'borough' ) . head ( 3 ) #NEWLINE#
print ( unique ( [ 1 , 1 , 2 , 'a' , 'a' , 3 ] ) ) #NEWLINE#
"""ގެ#SPACE#ފުރަތަމަ#SPACE#ދެ#SPACE#އަކުރު#SPACE#ކަ""" #NEWLINE#
regex . search ( 'honeysucker' ) #NEWLINE#
regex . search ( 'suckle' ) #NEWLINE#
logging . info ( "Hi!#SPACE#I'm#SPACE#the#SPACE#root#SPACE#logger!" ) #NEWLINE#
Timer ( '"%s"#SPACE#%#SPACE#x' , 'x=100' ) . timeit ( ) #NEWLINE#
ax . set_ylabel ( 'Foo' ) #NEWLINE#
self . __dict__ . update ( _dict ) #NEWLINE#
"""#SPACE#""" . join ( [ w for w in msg . split ( ) if w not in stopWords ] ) #NEWLINE#
return my_list #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
good = [ x for x in mylist if x in goodvals ] #NEWLINE# bad = [ x for x in mylist if x not in goodvals ] #NEWLINE#
d = { 'a' : 6 , 'b' : 'hello' , 'c' : set ( ) } #NEWLINE#
frame . Show ( ) #NEWLINE#
print ( subprocess . check_output ( 'git#SPACE#add#SPACE#.' , shell = True ) ) #NEWLINE#
cursor . execute ( 'desc#SPACE#table_name' ) #NEWLINE# print ( [ columns [ 0 ] for column in cursor . fetchall ( ) ] ) #NEWLINE#
self . builder . add_from_file ( self . glade_file ) #NEWLINE#
math . isnan ( math . nan ) #NEWLINE#
a [ np . arange ( a . shape [ 0 ] ) , entries_of_interest ] #NEWLINE#
return None #NEWLINE#
d = math . floor ( sdl2 . SDL_ALPHA_OPAQUE * ( math . ceil ( s ) - s ) + 0.5 ) #NEWLINE#
fh = open ( 'filename.ext' , 'r+b' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ list ( comb ) for i in range ( 1 , n + 1 ) for comb in itertools . combinations ( x , i ) ] #NEWLINE#
startupinfo . dwFlags |= subprocess . STARTF_USESHOWWINDOW #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 ] , 'b' : [ 2 , 'b' ] , 'c' : [ 3 , 'd' ] } ) #NEWLINE#
string = string . replace ( '\r' , '' ) . replace ( '\n' , '' ) #NEWLINE#
f . sort_values ( by = [ 'c1' , 'c2' ] , ascending = [ False , True ] ) #NEWLINE#
shlex . split ( raw_args , posix = False ) #NEWLINE#
A = numpy . vstack ( [ A , newrow ] ) #NEWLINE#
logging . Formatter . converter = time . gmtime #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
df [ 'Date' ] = pd . to_datetime ( df [ 'Date' ] ) #NEWLINE#
bar . baz [ a : b : c ] . foo ( ) #NEWLINE#
mainFrame . grid ( ) #NEWLINE#
object_list = [ c for c in Content . objects . all ( ) if random . random ( ) < fraction ] #NEWLINE#
writer . writerows ( worksheet . get_all_values ( ) ) #NEWLINE#
number += 1 #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
print ( session . get ( 'plus.google.com' ) ) #NEWLINE#
sorted ( s2 , key = prefixed_digits ( 'B' , 'C' ) ) #NEWLINE#
return logging . getLogger ( className ) #NEWLINE#
self . popMenu . addAction ( QtGui . QAction ( 'test1' , self ) ) #NEWLINE#
self . popMenu . addAction ( QtGui . QAction ( 'test2' , self ) ) #NEWLINE#
len ( set ( sum ( a , [ ] ) ) & set ( b ) & set ( c ) . is_empty ( ) ) > 0 #NEWLINE#
print ( curses . version . decode ( 'utf-8' ) ) #NEWLINE#
MySuperClass . __init__ ( self ) #NEWLINE#
drug_dictionary [ 'MORPHINE' ] . append ( list1 ) #NEWLINE#
img1 . save ( 'test.tiff' ) #NEWLINE#
t . start ( ) #NEWLINE#
QtGui . QWidget . __init__ ( self , parent ) #NEWLINE#
A . remove ( i ) #NEWLINE#
h = ( d - d . replace ( hour = 0 , minute = 0 , second = 0 ) ) . seconds / 3600.0 #NEWLINE#
root . iconbitmap ( 'c:\\Python32\\DLLs\\py.ico' ) #NEWLINE#
[ 'value1' , 'value2' ] #NEWLINE#
plt . legend ( numpoints = 1 ) #NEWLINE#
out . read ( ) #NEWLINE#
e . find ( './/{http://www.w3.org/1999/xhtml}p' ) #NEWLINE#
Decimal ( '3.1415926535' ) #NEWLINE#
remotefile = urllib . request . urlopen ( 'http://example.com/somefile.zip' ) #NEWLINE# remotefile . info ( ) [ 'Content-Disposition' ] #NEWLINE#
print ( '%.15f' % n ) #NEWLINE#
list ( y ) #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
print ( root . winfo_width ( ) ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
args = os . environ [ 'MY_LOG_DIR' ] + '/myapp-debugging-errors.log' , 'a' #NEWLINE#
print ( 'several#SPACE#tokens' ) #NEWLINE#
m . plot ( land_loc [ : , ( 0 ) ] , land_loc [ : , ( 1 ) ] , 'ro' ) #NEWLINE#
plt . ylabel ( 'y#SPACE#vals' ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
person . delete ( ) #NEWLINE#
print ( json . dumps ( { 'foo' : True } ) ) #NEWLINE#
with lzma . open ( 'hello.xz' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( 'hello' ) #NEWLINE#
client = requests . session ( ) #NEWLINE#
my_list . pop ( ) #NEWLINE#
self . _getlock ( ) #NEWLINE#
out . write ( simplejson . dumps ( r , ensure_ascii = False , use_decimal = True ) + '\n' ) #NEWLINE#
text = text . replace ( '&' , '\\&' ) . replace ( '#' , '\\#' ) #NEWLINE#
df [ [ iscomedy ( l ) for l in df . genre . values . tolist ( ) ] ] #NEWLINE#
element = min ( myset ) #NEWLINE#
image . SaveFile ( 'output.png' , wx . BITMAP_TYPE_PNG ) #NEWLINE#
diags . extend ( a . diagonal ( i ) for i in range ( a . shape [ 1 ] - 1 , - a . shape [ 0 ] , - 1 ) ) #NEWLINE#
list_of_tuples = [ ( 'day1' , 'name1' , 'value1' ) , ( 'day2' , 'name2' , 'value2' ) , #NEWLINE# ( 'day3' , 'name3' , 'value3' ) ] #NEWLINE# [ list ( t ) for t in zip ( * list_of_tuples ) ] #NEWLINE#
some_object = klass ( ) #NEWLINE#
form . save ( ) #NEWLINE#
plt . bar ( tickpositions , numincidents ) #NEWLINE#
app . start ( ) #NEWLINE#
array ( [ 10 , 1 , 1 , 1 , 52 , 1 , 1 , 1 , 1 , 131 , 1 , 1 , 1 ] ) #NEWLINE#
df1 . loc [ df1 [ 'cell_1' ] . lt ( 0 ) , 'cell_1' ] . to_dict ( ) #NEWLINE#
ax . add_patch ( rect ) #NEWLINE#
sorted ( L , key = lambda v : [ int ( p ) for p in v . split ( '.' ) if p . isdigit ( ) ] ) #NEWLINE#
dates = [ 19940903 , 19940907 , 19940801 , 19950701 , 19950702 ] #NEWLINE#
with open ( filename ) as f : #NEWLINE# #INDENT# return json . load ( f ) #NEWLINE#
list . append ( run ( * i ) ) #NEWLINE#
ax . set_xlabel ( 'Percentage#SPACE#of#SPACE#Max#SPACE#Capacity' , fontsize = 35 ) #NEWLINE#
conn . commit ( ) #NEWLINE#
return min ( max ( start , num ) , end ) #NEWLINE#
plt . xlabel ( 'My#SPACE#x#SPACE#label' ) #NEWLINE#
print ( '.' . join ( item . upper ( ) for item in Arr [ 'strings' ] ) ) #NEWLINE#
html . unescape ( 'Suzy#SPACE#&#SPACE#John' ) #NEWLINE#
client = pymongo . MongoClient ( ) #NEWLINE# client . close ( ) #NEWLINE#
return group in user . groups . all ( ) #NEWLINE#
tups = [ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE# """,#SPACE#""" . join ( map ( str , tups ) ) #NEWLINE#
pkgpath = os . path . dirname ( testpkg . __file__ ) #NEWLINE#
ax . grid ( ) #NEWLINE#
[ ( 'A' , 'DT' ) , ( 'car' , 'NN' ) , ( 'has' , 'VBZ' ) , ( 'a' , 'DT' ) , ( 'door' , 'NN' ) ] #NEWLINE#
sudo ( 'mkdir#SPACE#/var/www/new_docroot' , user = 'www-data' ) #NEWLINE#
str ( s1 . encode ( 'utf-8' ) ) #NEWLINE#
sys . stdout . write ( 'Content-Type:#SPACE#text/html;charset=utf-8\r\n\r\n' ) #NEWLINE#
y = odeint ( func , 0 , t ) #NEWLINE#
np . delete ( arr , index , 0 ) #NEWLINE#
np . vstack ( [ A [ i : i - width ] for i in range ( width ) ] ) . T #NEWLINE#
line = plt . plot ( x , y , '-' ) [ 0 ] #NEWLINE#
ax . plot ( time , Rn , '-' , label = 'Rn' ) #NEWLINE#
client . delete_object ( Bucket = 'mybucketname' , Key = 'myfile.whatever' ) #NEWLINE#
( df == 38.15 ) . idxmax ( axis = 1 ) [ 0 ] #NEWLINE#
CS = m . scatter ( x , y , c = BT2 , edgecolors = 'none' , s = sz , cmap = 'gray' ) #NEWLINE#
message . save ( ) #NEWLINE#
the_dump = json . dumps ( "['foo',#SPACE#{'bar':['baz',#SPACE#null,#SPACE#1.0,#SPACE#2]}]" ) #NEWLINE#
L = Label ( root , text = 'What#SPACE#comes#SPACE#in#SPACE#the#SPACE#following' , fg = 'blue' ) #NEWLINE# L . grid ( row = 6 , column = 0 ) #NEWLINE#
t . isoformat ( ) #NEWLINE#
[ word . strip ( string . punctuation ) for word in text . split ( ) ] #NEWLINE#
f . write ( response . body ) #NEWLINE#
Button ( root , text = 'Quit' , command = quit ) . pack ( ) #NEWLINE#
timestamp = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
f_out . write ( data ) #NEWLINE#
ax . xaxis . set_major_locator ( ticker . FixedLocator ( x ) ) #NEWLINE#
ax1 . plot ( pd . Series ( np . random . uniform ( 0 , 1 , size = 10 ) ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ 'text' ] = df [ 'text' ] . str . replace ( '[^\\w\\s]' , '' ) #NEWLINE#
hours = int ( s . split ( ':' , 1 ) [ 0 ] ) #NEWLINE#
seq . sort ( ) #NEWLINE#
"""\\textbf{{This#SPACE#and#SPACE#that}}#SPACE#plus#SPACE#\\textbf{{{val}}}""" . format ( val = '6' ) #NEWLINE#
print ( map ( itemgetter ( 1 ) , g ) ) #NEWLINE#
return [ i for i , elem in enumerate ( lst ) if condition ( elem ) ] #NEWLINE#
assert np . all ( list ( filter ( df , 1 , 'A' , 'B' ) ) == df [ ( df . A == 1 ) & ( df . B == 1 ) ] ) #NEWLINE#
pdf = pyPdf . PdfFileReader ( file ( path , 'rb' ) ) #NEWLINE# content = pdf . getPage ( 1 ) . extractText ( ) #NEWLINE#
( '^item/value/(?P<value>\\d+\\.\\d{2})/$' , 'myapp.views.byvalue' ) , #NEWLINE#
time . sleep ( 0 ) #NEWLINE#
print ( 'Unexpected#SPACE#error#SPACE#deleting#SPACE#item#SPACE#{}' . format ( ex ) ) #NEWLINE#
a = list ( range ( 10 ) ) #NEWLINE#
return any ( i ) and not any ( i ) #NEWLINE#
a = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 9 , 3 ] ] #NEWLINE#
s . replace ( [ 'a' , 'l' ] , [ 'x' , 'p' ] , regex = True ) #NEWLINE#
plt . annotate ( 'some#SPACE#text#SPACE#there' , ( - 2 , - 1.5 ) ) #NEWLINE#
bar = models . ManyToManyField ( Child , related_name = 'bar+' ) #NEWLINE#
format ( ord ( 'c' ) , 'x' ) #NEWLINE#
result = np . array ( list ( ranges ( intersect ( a , b ) ) ) ) #NEWLINE#
df = pd . read_csv ( 'file' ) #NEWLINE#
r = requests . get ( 'https://github.com/timeline.json' ) #NEWLINE#
main . py #NEWLINE#
plt . ylabel ( 'Home#SPACE#Category' ) #NEWLINE#
lst = [ 1 , 2 , 3 , 4 , 4 , 4 , 4 , 4 ] #NEWLINE#
print ( 'average#SPACE#=' , MA . average ( a ) ) #NEWLINE#
image_data = np . asarray ( image ) #NEWLINE#
x = [ 'a' , '3' , '4' , 'b' , '1' , '2' , 'c' , '4' , '5' ] #NEWLINE#
df [ 'date' ] [ df . index [ 0 ] ] #NEWLINE# df [ 'date' ] [ df . index [ - 1 ] ] #NEWLINE#
list ( grpname . keys ( ) ) #NEWLINE#
list ( subgrpname . keys ( ) ) #NEWLINE#
return lambda self , x : function ( self , x + 1 ) #NEWLINE#
format ( value , 'b' ) . zfill ( 8 ) #NEWLINE#
input_el = driver . find_element_by_name ( 'A' ) #NEWLINE#
print ( df ) #NEWLINE#
pylab . show ( ) #NEWLINE#
sys . stdout . write ( '\x1b[D#SPACE#\x1b[D' ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE#
"""nde*""" #NEWLINE#
ax . add_patch ( unmanhattan_patch ) #NEWLINE#
myList = [ ] #NEWLINE# for i in range ( 10 ) : #NEWLINE# #INDENT# myList . append ( i ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( eval ( 'a#SPACE#+#SPACE#4' ) ) #NEWLINE#
pass #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# sys . exit ( main ( ) ) #NEWLINE#
EmailThread ( subject , html_content , recipient_list ) . start ( ) #NEWLINE#
pd . rolling_mean ( aapl , 50 ) . plot ( ) #NEWLINE#
arr [ mask != 5 ] = 0 #NEWLINE#
writer . writeheader ( ) #NEWLINE#
a = np . ones ( ( 3 , 3 , 3 ) ) #NEWLINE#
self . root . quit ( ) #NEWLINE#
k = cPickle . load ( open ( 'xxx.dmp' , 'r' ) ) #NEWLINE#
self . log . error ( 'error#SPACE#from#SPACE#test#SPACE#class#SPACE#A' ) #NEWLINE#
draw . polygon ( points , fill = 'red' ) #NEWLINE#
p . stdin . write ( 'dir\n' ) #NEWLINE#
set ( b1 ) . intersection ( b2 ) #NEWLINE#
hformats . append ( '%%-%ds' % lens [ i ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
current_frame = inspect . currentframe ( ) #NEWLINE#
a . sort ( key = lambda v : v != 0 ) #NEWLINE#
ordered_items = sorted ( list ( ips_data . items ( ) ) , key = lambda item : item [ 1 ] [ #NEWLINE# 'data_two' ] ) #NEWLINE#
logging . info ( prop . find ( 'name' ) . text + '#SPACE#=>#SPACE#' + prop . find ( 'value' ) . text ) #NEWLINE#
a [ mask ] = 888 #NEWLINE#
print ( Child . getId ( ) ) #NEWLINE#
return '/' . join ( [ res . geturl ( ) , 'financial-ratios' ] ) #NEWLINE#
plt . plot ( x , y , color = ( r , g , b ) ) #NEWLINE#
df . query ( 'some_column#SPACE#!=#SPACE#list(my_dict.keys()' ) #NEWLINE#
"""I#SPACE#am#SPACE#at#SPACE#Starbucks#SPACE#http://4sq.com/samqUI#SPACE#(7419#SPACE#3rd#SPACE#ave,#SPACE#at#SPACE#75th,#SPACE#Brooklyn)#SPACE#""" #NEWLINE#
"""I#SPACE#c#SPACE#RT#SPACE#@iamFink:#SPACE#@SamanthaSpice#SPACE#that's#SPACE#my#SPACE#excited#SPACE#face#SPACE#and#SPACE#my#SPACE#regular#SPACE#face.#SPACE#The#SPACE#expression#SPACE#never#SPACE#changes.""" #NEWLINE#
"""RT#SPACE#@AstrologyForYou:#SPACE##Gemini#SPACE#recharges#SPACE#through#SPACE#regular#SPACE#contact#SPACE#with#SPACE#people#SPACE#of#SPACE#like#SPACE#mind,#SPACE#and#SPACE#social#SPACE#involvement#SPACE#that#SPACE#allows#SPACE#expression#SPACE#of#SPACE#their#SPACE#ideas""" #NEWLINE#
"""New#SPACE#comment#SPACE#by#SPACE#diego.bosca:#SPACE#Re:#SPACE#Re:#SPACE#wrong#SPACE#regular#SPACE#expression?#SPACE#http://t.co/4KOb94ua""" #NEWLINE#
ax1 . set_xlabel ( 'meters' ) #NEWLINE#
A ( ) . test ( ) #NEWLINE#
[ mapping [ value ] for value in a1 if value in mapping ] #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( operator . mul , iterable , 1 ) #NEWLINE#
mask = pd . Index ( base ) . union ( pd . Index ( base - 1 ) ) . union ( pd . Index ( base + 1 ) ) #NEWLINE#
return JsonResponse ( posts_serialized , safe = False ) #NEWLINE#
a = np . array ( t ) #NEWLINE#
send_thread . daemon = True #NEWLINE#
bigdata = data1 . append ( data2 , ignore_index = True ) #NEWLINE#
set ( [ Synset ( 'speaker.n.03' ) , Synset ( 'speaker.n.01' ) ] ) #NEWLINE#
pixbuf = GdkPixbuf . Pixbuf . new_from_file ( 'sunshine.png' ) #NEWLINE#
result = collections . defaultdict ( lambda : collections . defaultdict ( list ) ) #NEWLINE#
return time . mktime ( utc_tuple ) - time . mktime ( ( 1970 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ) ) #NEWLINE#
Record = namedtuple ( 'MyNamedTuple' , [ 'ID' , 'Value' , 'Name' ] ) #NEWLINE#
calendar . timegm ( time . gmtime ( 0 ) ) #NEWLINE#
B = np . array ( [ [ 2 , 1 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 5 , 4 ] ] ) #NEWLINE#
setattr ( obj . a , 'somefield' , 'somevalue' ) #NEWLINE#
b = A [ ( 2 ) , : ] . copy ( ) #NEWLINE#
key = sum ( map ( itemgetter ( play ) ) ) #NEWLINE#
win . show ( ) #NEWLINE#
app . register_blueprint ( auth_blueprint ) #NEWLINE#
libtest2d . print_2d_list ( arr2d . shape [ 0 ] , arr2d . shape [ 1 ] , arr2d ) #NEWLINE#
dictvar [ 'key1' ] += 1 #NEWLINE#
ax1 . plot ( [ 0 , 1 ] , [ 0 , 1 ] , color = 'blue' ) #NEWLINE#
ax . set_zlabel ( 'label#SPACE#text' ) #NEWLINE#
dave = next ( person for person in a . pList if person . num == 123 ) #NEWLINE#
with open ( outputfilename , 'wb' ) as output : #NEWLINE# #INDENT# output . write ( bytearray ( int ( i , 16 ) for i in yoursequence ) ) #NEWLINE#
parm [ var_name ] = int ( eval ( input ( ) ) ) #NEWLINE#
result += [ [ x , y , z ] ] #NEWLINE#
print ( y [ 'Country' ] [ np . isnan ( y [ 'Sales' ] ) ] ) #NEWLINE#
np . linalg . inv ( b ) #NEWLINE#
testclassb ( ) . testmethod2 ( ) #NEWLINE#
item [ key ] = float ( value ) #NEWLINE#
os . chdir ( '/' ) #NEWLINE#
{ 'foo' : array ( 'd' , [ 1.0 , 2.0 ] ) , 'bar' : array ( 'd' , [ 3.0 , 4.0 ] ) } #NEWLINE#
self . response . out . write ( filename ) #NEWLINE#
c . execute ( "INSERT#SPACE#INTO#SPACE#child#SPACE#VALUES(NULL,#SPACE#'bobby')" ) #NEWLINE#
plt . savefig ( 'image1.png' ) #NEWLINE#
raise tornado . web . HTTPError ( 404 ) #NEWLINE#
writer . writerow ( header ) #NEWLINE#
cv2 . imshow ( 'lalala' , img ) #NEWLINE#
lst = [ maybe_int ( s ) for s in lst ] #NEWLINE#
print ( '%.11f' % unpack ( '<f' , hexbytes ) [ 0 ] ) #NEWLINE#
np . arange ( 100 , 1 , - 1 ) #NEWLINE#
np . array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] ) [ 1 ] #NEWLINE#
[ x for x in a if x not in b ] #NEWLINE#
thread . start ( ) #NEWLINE#
return op ( x , y ) #NEWLINE#
graph [ node_id ] = [ other_node_id for other_node_id in neighbors ( node_id ) ] #NEWLINE#
self . _stdout = sys . stdout #NEWLINE#
ax . set_xticks ( np . arange ( AUC . shape [ 1 ] ) + 0.5 , minor = False ) #NEWLINE#
ax . add_patch ( poly ) #NEWLINE#
objc . __version__ #NEWLINE#
list ( IT . izip_longest ( readers [ 0 ] , readers [ 1 ] , readers [ 2 ] ) ) #NEWLINE#
dt_sec = map ( datetime . timedelta . total_seconds , dt ) #NEWLINE#
plt . draw ( ) #NEWLINE#
newurl = '' . join ( random . choice ( string . lowercase ) for _ in range ( 30 ) ) #NEWLINE#
ax . barh ( ind , df [ 'EndUse_80_nan' ] , color = '#0070C0' , left = lefts ) #NEWLINE#
print ( data [ : , : , : , ( 1 ) ] ) #NEWLINE#
im = Image . open ( filename ) #NEWLINE#
f . write ( '{}\n' . format ( x ) ) #NEWLINE#
session2 . add ( new_item ) #NEWLINE#
c = np . hstack ( ( a [ a_inds ] , b [ b_inds ] ) ) #NEWLINE#
with open ( filename ) as file : #NEWLINE# #INDENT# found = any ( word in line . split ( ) for line in file ) #NEWLINE#
color_box ( 20 , 30 , color = 'green' ) #NEWLINE#
df . loc [ df . A . isin ( vc [ vc >= 2 ] . index ) ] . groupby ( 'A' ) . mean ( ) #NEWLINE#
__all__ = [ 'bar' , 'spam' , 'eggs' ] #NEWLINE#
first_list = [ 'Johnny' , 'Steve' , 'Ben' , 'Johnny' ] #NEWLINE#
wx . Dialog . __init__ ( self , None , title = 'Dialog' ) #NEWLINE#
[ 0 , 1 , 3 , 4 ] #NEWLINE#
x = np . arange ( 200 ) . reshape ( ( 4 , 5 , 10 ) ) #NEWLINE# np . savetxt ( 'test.txt' , x ) #NEWLINE#
f . close ( ) #NEWLINE#
dict [ firstname ] = dict . get ( firstname , 0 ) + 1 #NEWLINE#
print ( [ ',#SPACE#' . join ( [ k , str ( v ) ] ) for k , v in list ( d . items ( ) ) ] ) #NEWLINE#
create_engine ( db_connect_string , connect_args = ssl_args ) #NEWLINE#
del lst [ len ( lst ) - n : ] #NEWLINE#
my_array = diag ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 ] ) #NEWLINE#
print ( sorted ( l , key = functools . cmp_to_key ( my_cmp ) ) ) #NEWLINE#
'January' == 'janUAry' . capitalize ( ) #NEWLINE#
f1 ( * args , localvariable = localvariable ) #NEWLINE#
stringaxis . setTicks ( [ list ( xdict . items ( ) ) ] ) #NEWLINE#
cv . postscript ( file = 'file_name.ps' , colormode = 'color' ) #NEWLINE#
b = zip ( * a ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
b . __class__ #NEWLINE#
request . add_header ( 'Accept' , 'application/*+xml;version=1.5' ) #NEWLINE#
imshow ( X , norm = norm ) #NEWLINE#
[ 'a' , 'l' ] #NEWLINE#
repeat ( 10 , inquisition , 'surprise' , 'fear' , 'ruthless#SPACE#efficiency' ) #NEWLINE#
[ ( '4' , 'test' ) , ( 'foo' , '4' ) ] #NEWLINE#
all_data = np . hstack ( ( my_data , new_col ) ) #NEWLINE# all_data = np . concatenate ( ( my_data , new_col ) , 1 ) #NEWLINE#
Counter ( protein [ i : i + 6 ] for i in range ( len ( protein ) - 5 ) ) #NEWLINE#
iter ( f ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 3 , ( 5 , 3 ) ) , columns = list ( 'abc' ) ) #NEWLINE#
return get_hotp_token ( secret , intervals_no = int ( time . time ( ) ) // 30 ) #NEWLINE#
s . connect ( ( 'localhost' , 5000 ) ) #NEWLINE#
execute ( [ 'scrapy' , 'crawl' , 'dmoz' ] ) #NEWLINE#
models . ForeignKey ( EntryAdmin ) #NEWLINE#
df = pd . read_csv ( 'test.csv' , usecols = [ 0 , 1 , 2 ] , names = [ 'A' , 'B' , 'C' ] ) #NEWLINE#
a , b , c , d = map ( float , line . split ( ) ) #NEWLINE#
ws . apply_style ( sheet , 'C2' , new_style ) #NEWLINE#
timeit . timeit ( lambda : timeit . timeit ( f ) , number = 100 ) #NEWLINE#
f = file ( 'test' , 'r' ) #NEWLINE# print ( f . read ( ) . decode ( 'utf8' ) ) #NEWLINE#
data . dtype . names #NEWLINE#
col_dict = { x : col for x , col in enumerate ( df . columns ) } #NEWLINE#
nlistnew = [ ( [ a ] + row ) for row in nlist ] #NEWLINE#
from datetime import datetime #NEWLINE#
"""Meta""" #NEWLINE#
print ( 'exit#SPACE#%s' % self . name ) #NEWLINE#
for key , value in list ( inputdict . items ( ) ) : #NEWLINE# #INDENT# inputdict [ key ] = newvalue #NEWLINE#
pyplot . plot ( x , y ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
( df > df . shift ( 1 ) ) . values & ( df . D == 1 ) [ : , ( None ) ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
b = a [ 4 ] if a [ 4 : ] else 'sss' #NEWLINE#
re . sub ( '<.*?>' , '' , st ) #NEWLINE#
ax . legend ( ) #NEWLINE#
print ( 'displays#SPACE#on#SPACE#screen' ) #NEWLINE#
print ( 'hello#SPACE#world2' ) #NEWLINE#
print ( 'done' ) #NEWLINE#
user = request . POST . get ( 'user' ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
my_module . myvar #NEWLINE#
run ( 'localhost' , 8080 ) #NEWLINE#
canvas . pack ( ) #NEWLINE#
breakfast . add_argument ( '--eggs' ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
from django . template . loader import get_template #NEWLINE#
text_file . write ( 'Purchase#SPACE#Amount:#SPACE#%s' % TotalAmount ) #NEWLINE#
created_at = db . DateTimeField ( default = datetime . now ) #NEWLINE#
[ 2 , 3 , 6 , 4 , 5 , 1 ] #NEWLINE#
ax . set_xlim ( 0 , 2 * np . pi ) #NEWLINE#
driver = webdriver . Firefox ( profile ) #NEWLINE#
QtGui . QTableWidget . __init__ ( self , * args ) #NEWLINE#
re . sub ( '@' , lambda _ : substitutions . pop ( 0 ) , some_text ) #NEWLINE#
cmyk_im = im . convert ( 'CMYK' ) #NEWLINE#
print ( 'hello#SPACE#world' ) #NEWLINE#
self . fields [ 'person' ] . widget . can_add_related = False #NEWLINE#
one = request . GET . get ( 'one' , '' ) . strip ( ) #NEWLINE#
per_column = zip ( * per_row ) #NEWLINE#
hex ( ord ( chars [ 0 ] ) ) #NEWLINE#
nx . draw_networkx_edges ( GG , pos = pos , edge_color = 'gray' , alpha = 0.1 ) #NEWLINE#
return '' . join ( rtf_encode_char ( c ) for c in unistr ) #NEWLINE#
x = x + 1 #NEWLINE#
c = pygame . time . Clock ( ) #NEWLINE#
s . send_message ( msg ) #NEWLINE#
df . reset_index ( inplace = True ) #NEWLINE#
print ( 'end#SPACE#at#SPACE#%s' % str ( datetime . datetime . now ( ) ) ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
x . append ( [ ] ) #NEWLINE#
g . serialize ( 'test.rdf' , format = 'pretty-xml' ) #NEWLINE#
return audio_data , pyaudio . paContinue #NEWLINE#
z = np . sqrt ( x ** 2 + y ** 2 ) + np . sin ( x ** 2 + y ** 2 ) #NEWLINE#
l . append ( 'foo' ) #NEWLINE#
l . append ( 'baz' ) #NEWLINE#
ax . set_ylim ( min ( y ) , max ( y ) ) #NEWLINE#
Unicode ( 500 , unicode_errors = 'ignore' , convert_unicode = 'force' ) #NEWLINE#
ax . set_zlim ( - 1.01 , 1.01 ) #NEWLINE#
print ( text . encode ( 'utf-8' ) ) #NEWLINE#
p . dumps ( re . compile ( 'a*b+c*' ) ) #NEWLINE#
base64 . b64encode ( 'a' ) #NEWLINE#
format_elements ( reduce_list ( some_list ) ) #NEWLINE#
{ ( '10.125.255.133' , '104.244.42.130' ) } #NEWLINE#
self . progbar . start ( ) #NEWLINE#
tk . Toplevel . __init__ ( self , * args , ** kwargs ) #NEWLINE#
ax . add_line ( line_3 ) #NEWLINE#
re . split ( '\n\\s*\n' , s ) #NEWLINE#
label . pack ( padx = 4 , pady = 4 ) #NEWLINE#
self . app = Flask ( __name__ ) #NEWLINE#
shutil . copyfileobj ( src , dest ) #NEWLINE#
base_lists = [ [ a , b ] for a in range ( 1 , 3 ) for b in range ( 1 , 6 ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
temp . sort ( ) #NEWLINE#
super ( ) . __init__ ( args ) #NEWLINE#
self . label = tk . Label ( self , text = 'Hello,#SPACE#world' ) #NEWLINE#
s . translate ( None , string . ascii_lowercase ) #NEWLINE#
joint = [ [ sum ( x ) for x in zip ( a , b ) ] for a , b in zip ( incoming , outgoing ) ] #NEWLINE#
db . put ( groups ) #NEWLINE#
df2 = df [ df . columns . difference ( [ 'B' , 'D' ] ) ] #NEWLINE#
f = open ( 'out.txt' , 'w' ) #NEWLINE#
print ( sum ( sum ( map ( int , r . findall ( line ) ) ) for line in data ) ) #NEWLINE#
self . window . set_border_width ( 8 ) #NEWLINE#
'%.15g' % f #NEWLINE#
axes [ 0 ] . set_title ( 'Scatterplot#SPACE#of#SPACE#all#SPACE#data' ) #NEWLINE#
creatures [ 'birds' ] = dict ( ) #NEWLINE#
self . send_header ( 'Expires' , '0' ) #NEWLINE#
self . send_header ( 'Pragma' , 'no-cache' ) #NEWLINE#
canvas . setFont ( 'Times-Bold' , 16 ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
device . dispose ( ) #NEWLINE#
return int ( s ) if s else 0 #NEWLINE#
t . queue . put ( 'Print#SPACE#this!' ) #NEWLINE#
mydict = dict ( ( k . strip ( ) , v . strip ( ) ) for k , v in ( item . split ( '-' ) for item in #NEWLINE# s . split ( ',' ) ) ) #NEWLINE#
struct . pack ( 'i' , 34 ) #NEWLINE#
max ( hand , key = lambda c : rank_cards . index ( c [ 0 ] ) ) #NEWLINE#
proc . wait ( ) #NEWLINE#
a = [ [ 0 ] * ROWS ] * COLUMNS #NEWLINE#
self . out . write ( bytearray ( [ self . accumulator ] ) ) #NEWLINE#
my_cmap . set_under ( 'm' ) #NEWLINE#
A = np . empty ( ( 15 , 15 ) ) #NEWLINE#
df [ 'C' ] = df . apply ( f , axis = 1 ) #NEWLINE# df #NEWLINE#
client_sock . close ( ) #NEWLINE#
fh = open ( 'my_file.dat' , 'rb' ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
exec ( '%s#SPACE#=#SPACE#module' % module_name ) #NEWLINE#
User = { ( 0 ) : { 'uid' : '#SPACE#rpatil\n' } , ( 1 ) : None } #NEWLINE#
input = input ( 'Enter#SPACE#the#SPACE#inputs#SPACE#:#SPACE#' ) or 0.025 #NEWLINE#
"""""" . join ( next ( it ) + x for x in it ) #NEWLINE#
Author . objects . all ( ) #NEWLINE#
{ 'field2' : 'e' , 'field3' : 'f' , 'field1' : 'd' } #NEWLINE#
mpl . rc ( 'text' , usetex = True ) #NEWLINE#
ax1 . set_ylim ( [ 0.1 , 10 ] ) #NEWLINE#
offset = datetime . fromtimestamp ( 0 ) - datetime . utcfromtimestamp ( 0 ) #NEWLINE#
a = np . array ( [ [ 1 , 0 , 1 ] , [ 2 , 3 , 4 ] , [ 0 , 0 , 7 ] ] ) #NEWLINE#
x = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE# y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
out = a . reshape ( - 1 , 3 , 3 , 3 , 3 , 3 ) . transpose ( 0 , 2 , 4 , 1 , 3 , 5 ) . reshape ( 27 , 27 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
self . response . headers . add_header ( 'Set-Cookie' , #NEWLINE# 'access_token=deleted;#SPACE#Expires=Thu,#SPACE#01-Jan-1970#SPACE#00:00:00#SPACE#GMT' ) #NEWLINE#
subprocess . check_call ( [ 'myscript' , f ] ) #NEWLINE#
analysed . add ( color ) #NEWLINE#
[ ( a if tC else b ) for i in items if fC ] #NEWLINE#
metadata , Column ( 'user_id' , Integer , ForeignKey ( 'base_user.id' ) ) #NEWLINE#
result . predict ( np . vander ( x_new , degree + 1 ) ) #NEWLINE#
0.32793 , 0.38483 , 0.38577 , 0.39278 , 0.42999 , 0.45023 , 0.50728 , 0.56756 #NEWLINE#
max ( elements , key = lambda e : int ( e [ 0 ] ) ) #NEWLINE#
[ e for sub in tgt if isinstance ( sub , ( list , tuple ) ) for e in sub ] [ - 5 : ] #NEWLINE#
jsonindata [ 'truncated' ] , jsonindata [ 'user' ] [ 'contributors_enabled' ] #NEWLINE#
np . issubdtype ( np . int32 , np . integer ) #NEWLINE#
print ( sum ( a * b for a , b in combinations ( xList , 2 ) ) ) #NEWLINE#
p = re . compile ( '[a-z]' ) #NEWLINE#
x = np . array ( [ 0 , - 1 , - 1 , 0 , 1 , 1 ] ) #NEWLINE#
user_id = db . Column ( db . Integer , db . ForeignKey ( 'user.id' ) , primary_key = True ) #NEWLINE#
return itertools . product ( list ( range ( 2 ) ) , repeat = n ) #NEWLINE#
obj = MyModel . objects . all ( ) . extra ( order_by = [ 'LENGTH(`name`)' ] ) #NEWLINE#
print ( [ dict ( zip ( keys , items ) ) for items in res ] ) #NEWLINE#
plt . matshow ( M , cmap = plt . cm . Blues ) #NEWLINE#
MySQLdb . escape_string ( "'" ) #NEWLINE#
all_challenges = session . query ( Challenge ) . all ( ) #NEWLINE#
print ( 'subs:#SPACE#' , subs1 ) #NEWLINE#
print ( ( 'UDP#SPACE#target#SPACE#IP:' , UDP_IP ) ) #NEWLINE#
cdict1 = { 'red' : ( ( 0.0 , 0.0 , 0.0 ) , ( 0.5 , 1.0 , 1.0 ) , ( 1.0 , 0.0 , 0.0 ) ) , #NEWLINE# 'green' : ( ( 0.0 , 0.0 , 0.0 ) , ( 0.5 , 1.0 , 1.0 ) , ( 1.0 , 0.0 , 0.0 ) ) , 'blue' : ( #NEWLINE# ( 0.0 , 0.0 , 0.0 ) , ( 0.5 , 1.0 , 1.0 ) , ( 1.0 , 0.0 , 0.0 ) ) } #NEWLINE#
all_pixels . append ( luma ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
return promotion_items [ k ] [ 'discount_ratio' ] #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
print ( 'sure,#SPACE#it#SPACE#was#SPACE#defined.' ) #NEWLINE#
[ 'C' , 'D' , 'E' , 'O' ] #NEWLINE#
return [ ( key , other ) for key in keys for other in prefixes [ key [ 1 : ] ] ] #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
plt . rcParams . update ( params ) #NEWLINE#
foo . __defaults__ #NEWLINE#
any ( 'c' == x [ 1 ] for x in the_list ) #NEWLINE#
bgs . set_index ( 'expanded_date' ) #NEWLINE#
a = np . fromiter ( Data , dtype = np . float , count = DataLength . value ) #NEWLINE#
np . random . shuffle ( indices ) #NEWLINE#
s . connect ( ( 'localhost' , 9988 ) ) #NEWLINE#
result . update ( d ) #NEWLINE#
fluidsynth . play_Note ( 64 , 0 , 100 ) #NEWLINE#
d1 = np . random . random ( ( 25 , 4 ) ) #NEWLINE#
screen . blit ( surface , ( 0 , 0 ) ) #NEWLINE#
issubclass ( test , object ) #NEWLINE#
[ item for item in re . split ( '(\\*)' , 'abc*bbc' ) if item ] #NEWLINE#
assert args [ 0 ] == '--batman-and-robin' #NEWLINE#
parser . parse_args ( [ ] ) #NEWLINE#
profile . set_preference ( 'browser.download.dir' , 'c:\\firefox_downloads\\' ) #NEWLINE#
x = numpy . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) #NEWLINE#
some_list [ start : stop : step ] #NEWLINE#
df [ : 5 ] #NEWLINE#
doctest . testmod ( ) #NEWLINE#
client = Client ( url , transport = ntlm ) #NEWLINE#
return None #NEWLINE#
new_a = a [ ( a == a ) . all ( 1 ) ] #NEWLINE#
raise ValueError ( 'Start#SPACE#must#SPACE#be#SPACE#before#SPACE#end' ) #NEWLINE#
ax . bar ( x , z , width = w , color = 'g' , align = 'center' ) #NEWLINE#
print ( _ ( 'Edit' ) ) #NEWLINE#
print ( _ ( 'Find' ) ) #NEWLINE#
print ( _ ( 'View' ) ) #NEWLINE#
print ( _ ( 'Document' ) ) #NEWLINE#
maxValue = curs . fetchone ( ) [ 0 ] #NEWLINE#
model . add ( Dense ( X . shape [ 1 ] , input_dim = X . shape [ 1 ] , activation = 'relu' ) ) #NEWLINE#
fh . write ( str ( 5 ) + '\n' ) #NEWLINE#
win . add ( vbox ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 1 , 6 , 1 ] ) #NEWLINE#
x = [ False , True , True , False ] #NEWLINE#
pare_dir = os . path . abspath ( '..' ) #NEWLINE#
a [ np . core . defchararray . rfind ( a . astype ( str ) , 'dd' ) == 2 ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
np . fromiter ( a , dtype = np . float , count = 100000 ) #NEWLINE#
theanswer = Item . objects . values ( 'category' ) . annotate ( Count ( 'category' ) ) #NEWLINE#
seaborn . set_style ( 'darkgrid' ) #NEWLINE#
a . exec_loop ( ) #NEWLINE#
server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
user = models . OneToOneField ( User , related_name = 'profile' ) #NEWLINE#
[ 1.0 , 3.0 , 2.0 , 427344.794 , 4848482.07 ] , #NEWLINE#
pprint . pprint ( output ) #NEWLINE#
find ( '*.txt' , '/path/to/dir' ) #NEWLINE#
for x in b : #NEWLINE# #INDENT# a . remove ( x ) #NEWLINE#
print ( 'welcome#SPACE#to#SPACE#the#SPACE#program' ) #NEWLINE#
print ( 'It#SPACE#Matches!' ) #NEWLINE#
Author . objects . using ( 'other' ) . all ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
call ( [ 'xcopy' , 'c:\\file.txt' , 'n:\\folder\\' , '/K/O/X' ] ) #NEWLINE#
'@' in parseaddr ( 'invalid-email' ) [ 1 ] #NEWLINE#
l = [ ( 'a' , 1 ) , ( 'b' , 2 ) ] #NEWLINE#
element = tree . xpath ( '//div[@id="p-logo"]/a' ) [ 0 ] #NEWLINE#
{ a : 1 , b : 2 } #NEWLINE#
sorted ( [ 1 , 2 , 3 ] , key = lambda x : - x ) #NEWLINE#
return cppcode . init ( ) #NEWLINE#
return [ file for file in os . listdir ( '.' ) if fnmatch . fnmatch ( file , '*.txt' ) ] #NEWLINE#
print ( rpart ( 'I#SPACE#Me#SPACE#You' ) ) #NEWLINE#
[ dataset2D [ row_idx ] for row_idx in row_indices ] #NEWLINE#
ax . plot_date ( t , y , 'b-' ) #NEWLINE#
print ( json . dumps ( data , indent = 4 ) ) #NEWLINE#
N = np . array ( [ np . random . randint ( 0 , 10 , 3 ) for i in range ( 1000 ) ] ) #NEWLINE#
workbook . save ( 'wrap_text1.xlsx' ) #NEWLINE#
time_waited = time . time ( ) - then #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
return d + timedelta ( weeks = week - 1 , days = - d . weekday ( ) ) #NEWLINE#
attrdef . mutated ( subdef ) #NEWLINE#
base64 . b64encode ( bytes ( [ foo ] ) ) #NEWLINE#
q = forms . CharField ( label = 'search' , widget = forms . TextInput ( attrs = { #NEWLINE# 'placeholder' : 'Search' } ) ) #NEWLINE#
os . path . realpath ( '/usr/bin/../..' ) #NEWLINE#
d [ 'b' ] . v == 2 #NEWLINE#
self . lineedit . setFocus ( ) #NEWLINE#
foo = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 8 ] ] #NEWLINE#
return { 'x' : 1 , 'y' : 2 } #NEWLINE#
return jsonify ( indent = 2 , sort_keys = False , result = 'This#SPACE#is#SPACE#just#SPACE#a#SPACE#test' ) #NEWLINE#
ax1 . set_xlabel ( 'x' ) #NEWLINE#
pd . concat ( df_list , ignore_index = True ) #NEWLINE#
plt . scatter ( x , y , marker = 'o' , c = 'b' , s = 5 , zorder = 10 ) #NEWLINE#
return super ( MyJSONEncoder , self ) . default ( obj ) #NEWLINE#
[ 'line2' , 'line1' , 'line3' , 'line4' ] #NEWLINE#
app_log . addHandler ( file_handler ) #NEWLINE#
print ( get_defined_names ( '/Users/ashwini/py/so.py' ) ) #NEWLINE#
self . belltimer . Start ( 1000 ) #NEWLINE#
ax . set_zlim ( ( 0 , 50 ) ) #NEWLINE#
filename = tkFileDialog . askopenfilename ( filetypes = FILE_DIALOG_FILETYPES ) #NEWLINE#
iso = time . strftime ( '%Y-%m-%dT%H:%M:%SZ' , timetup ) #NEWLINE#
iso = time . strftime ( '%Y-%m-%dT%H:%M:%S' , timetup ) #NEWLINE#
import xml . etree . ElementTree as et #NEWLINE#
return f . replace ( 'Y' , '%Y' ) . replace ( 'm' , '%m' ) . replace ( 'd' , '%d' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
allSentences . extend ( sentence . split ( '?' ) ) #NEWLINE#
ax . plot ( x , y * 10 ) #NEWLINE#
self . _shape = self . _shape [ 0 ] - 1 , self . shape [ 1 ] #NEWLINE#
return m . group ( 1 ) , int ( m . group ( 2 ) ) #NEWLINE#
print ( '{0}#SPACE#=#SPACE#{1}' . format ( key , params [ key ] ) ) #NEWLINE#
pl . gca ( ) . set_xscale ( 'log' ) #NEWLINE#
my_list . sort ( key = lambda elem : [ my_alphabet . index ( c ) for c in elem [ 0 ] ] ) #NEWLINE#
pd . DataFrame ( zip ( X . columns , np . transpose ( model . coef_ ) ) ) #NEWLINE#
image = cv2 . imread ( 'gray.jpg' ) #NEWLINE# print ( image . shape ) #NEWLINE#
utc_dt = tz . localize ( naive_dt , is_dst = None ) . astimezone ( pytz . utc ) #NEWLINE#
regexp = '"(.+)"' #NEWLINE#
[ Object [ A ] [ 1 ] , Object [ B ] [ 1 ] , Object [ C ] [ 2 ] , Object [ D ] [ 2 ] , Object [ E ] [ 3 ] ] #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
test . py #NEWLINE#
Process ( target = foo , args = ( y , 'y' ) ) . start ( ) #NEWLINE#
ax . text ( lxpos , ypos , label , ha = 'center' , transform = ax . transAxes ) #NEWLINE#
dict ( ( k , sum ( map ( itemgetter ( k ) , dict1 ) ) ) for k in dict1 [ 0 ] ) #NEWLINE#
ws = wb . active #NEWLINE#
list ( combinations ( 'abcd' ) ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( re . search ( pattern , string_ ) . groups ( 1 ) [ 0 ] ) #NEWLINE#
fig , axes = plt . subplots ( ncols = 3 , sharey = True ) #NEWLINE#
system ( 'mklink#SPACE#test-link.txt#SPACE#test.txt' ) #NEWLINE#
out = np . add . reduceat ( X [ : , ( idx0 ) ] , cut_idx , axis = 1 ) #NEWLINE#
len ( set ( str_ . split ( ) ) & set ( dict_1 . values ( ) ) ) #NEWLINE#
maxu2 ( ) . sum ( ) #NEWLINE#
subprocess . list2cmdline ( args ) #NEWLINE#
'znnn' , 'nnnn' , 'nnnd' , 'nndd' , 'dddz' , 'ddzn' , 'dznn' , 'znnz' , 'nnzz' #NEWLINE#
m [ list ( zip ( * map ( range , m . shape ) ) ) ] = 0 #NEWLINE#
db . commit ( ) #NEWLINE#
return render_template ( 'index.html' , response = get_data ( ) ) #NEWLINE#
for k , v in list ( d . items ( ) ) : #NEWLINE# #INDENT# result [ k ] . append ( v ) #NEWLINE#
x = zip ( x [ 'date' ] , x [ 'users' ] ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( 'https://www.google.com' ) ) #NEWLINE#
with open ( 'datafile' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# numbers_float = map ( float , line . split ( ) ) #NEWLINE#
HTML_with_style ( df . head ( ) ) #NEWLINE#
ax . plot ( x , np . sin ( x ) , label = 'Sine' ) #NEWLINE#
self . SetSizer ( self . sizer ) #NEWLINE#
replace ( '\n' , '<br#SPACE#/>\n' ) #NEWLINE#
button . config ( state = 'normal' ) #NEWLINE#
Player . objects . order_by ( 'lname' ) . values ( 'lname' , 'coach__fname' , #NEWLINE# 'coach__lname' , 'club__name' , 'club__league' ) #NEWLINE#
print ( df . sum ( 1 ) . to_frame ( ) ) #NEWLINE#
pprint . pprint ( yourDict ) #NEWLINE#
url ( '^delete/(\\d+)/$' , 'moderation.delete' , name = 'comments-delete' ) , #NEWLINE#
BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) #NEWLINE#
result = df . a . sort_values ( ) . apply ( lambda x : sorted ( x ) ) #NEWLINE# result = DataFrame ( result ) . reset_index ( drop = True ) #NEWLINE#
[ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] , [ [ 9 , 10 ] , [ 11 , 12 ] ] ] #NEWLINE#
new_matrix . append ( matrix [ i ] ) #NEWLINE#
self . children = weakref . WeakValueDictionary ( ) #NEWLINE#
imshow ( Z , cmap = get_cmap ( 'Spectral' ) , interpolation = 'nearest' ) #NEWLINE#
self . fields [ 'my_field_name' ] . label = 'My#SPACE#New#SPACE#Title' #NEWLINE#
sys . path . append ( path_to_parent ) #NEWLINE#
thismanager . window . wm_geometry ( '+500+0' ) #NEWLINE#
a , b = zip ( * my_list ) #NEWLINE#
df . a . plot ( kind = <STR0> , ax = ax1 ) #NEWLINE#
f = zipfile . ZipFile ( 'sample.zip' , 'r' ) #NEWLINE#
os . chdir ( default_path ) #NEWLINE#
st . ix [ i , 'a' ] = a #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . plot ( x , y , color = 'gray' ) #NEWLINE#
return df . reset_index ( drop = True ) #NEWLINE#
print ( 'Printing#SPACE#the#SPACE#full#SPACE#traceback#SPACE#as#SPACE#if#SPACE#we#SPACE#had#SPACE#not#SPACE#caught#SPACE#it#SPACE#here...' ) #NEWLINE#
shutil . rmtree ( 'build' , ignore_errors = True ) #NEWLINE#
cin = ast . literal_eval ( cin ) #NEWLINE#
print ( root . find ( './/b' ) . tag ) #NEWLINE#
fruit_list = [ 'apple' , 'banana' , 'peach' , 'plum' , 'pineapple' , 'kiwi' ] #NEWLINE#
json . dumps ( rh ) #NEWLINE#
del L [ len ( L ) % 2 : : 2 ] #NEWLINE#
Tkinter . mainloop ( ) #NEWLINE#
bSizer . Add ( button6 , 0 , wx . ALL , 5 ) #NEWLINE#
bSizer . Add ( button7 , 0 , wx . ALL , 5 ) #NEWLINE#
bSizer . Add ( button8 , 0 , wx . ALL , 5 ) #NEWLINE#
logging . Formatter ( '%(levelname)-8s#SPACE#%(asctime)s#SPACE#%(qthreadname)-15s#SPACE#%(message)s' ) #NEWLINE#
mad ( df [ 'count' ] , c = 1 ) #NEWLINE#
print ( 'Blastoff!' ) #NEWLINE#
yield item , l [ : index ] + l [ index + 1 : ] #NEWLINE#
new_list = [ foo for foo in foos if foo . location == 2 ] #NEWLINE#
plt . xlim ( [ 0 , bin . size ] ) #NEWLINE#
fig = plt . figure ( figsize = ( 18 , 16 ) , dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) #NEWLINE#
objs [ 0 ] . do_sth ( ) #NEWLINE#
ast . literal_eval ( s ) #NEWLINE#
frame . focus_set ( ) #NEWLINE#
return str ( '' . join ( ascii . isprint ( c ) and c or '?' for c in text ) ) #NEWLINE#
DATABASES [ 'default' ] [ 'ENGINE' ] = 'django.db.backends.sqlite3' #NEWLINE#
parse ( 'the#SPACE#date#SPACE#was#SPACE#the#SPACE#1st#SPACE#of#SPACE#December#SPACE#2006#SPACE#2:30pm' , fuzzy = True ) #NEWLINE#
out [ - 1 ] #NEWLINE#
print ( datetime . date . strftime ( d , '%m/%d/%y' ) ) #NEWLINE#
axborder . set_axis_off ( ) #NEWLINE#
print ( le . tostring ( doc ) ) #NEWLINE#
return render ( request , 'mytemplate.html' , { 'form' : form } ) #NEWLINE#
l = [ '444' , '1.2' , 'foo' , '[1,2]' , '[1' ] #NEWLINE#
hour , the_rest = int ( s [ 0 : s . find ( ':' ) ] ) , s [ s . find ( ':' ) + 1 : ] #NEWLINE#
handler = logging . StreamHandler ( ) #NEWLINE#
file . close ( ) #NEWLINE#
assert len ( name ) < len ( input_given ) #NEWLINE#
file . close ( ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
plt . title ( 'This#SPACE#figure#SPACE#will#SPACE#be#SPACE#shown' ) #NEWLINE#
self . assertOK ( response ) #NEWLINE#
tree . add ( 3 ) #NEWLINE#
thread . start_new_thread ( updateCounter , ( ) ) #NEWLINE#
list ( range ( 0 , 1 ) ) == list ( range ( 0 , 1 ) ) #NEWLINE#
( a - a [ 0 ] == 0 ) . all ( ) #NEWLINE#
print ( datetime . now ( ) - start ) #NEWLINE#
[ 'dog' , 'duck' , 'duck' , 'duck' , 'duck' , 'goose' , 'goose' , 'goose' ] #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/plain' #NEWLINE#
a = models . ForeignKey ( Foo , default = lambda : Foo . objects . get ( id = 1 ) ) #NEWLINE#
"""package(?:\\s.*?)(?P<needle>[^\\s]+)\\s+is\\s+(.*?)end\\s+(?:package|(?P=needle));""" #NEWLINE#
dmap = { 'As' : parse_as , 'Between' : parse_between , 'During' : parse_during } #NEWLINE#
print ( 'Running#SPACE#in#SPACE#background.' ) #NEWLINE#
x = numpy . array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
parser . add_argument ( '-t' , '--title' ) #NEWLINE#
return next ( ( s . index ( t ) for t in map ( str . lower , targ ) if t in s ) , None ) #NEWLINE#
print ( add . addtwo_ ( byref ( a ) , byref ( b ) ) ) #NEWLINE#
im = Image . open ( 'image.jpg' ) #NEWLINE#
df . columns [ df . columns . str . contains ( '^new_\\d+_(?:quantity|cost)' ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
reactor . run ( ) #NEWLINE#
all ( i . isalpha ( ) or i . isspace ( ) for i in 'test#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#string' ) #NEWLINE#
groups . append ( list ( g ) ) #NEWLINE#
self . file = self . sslobj . makefile ( 'rb' ) #NEWLINE#
return [ random . randint ( 1 , 100 ) for _ in range ( 3 ) ] #NEWLINE#
ax1 . plot ( x , y ) #NEWLINE#
a [ : , ( 0 ) ] . shape #NEWLINE#
cmap = ListedColormap ( [ '#E0E0E0' , '#FF8C00' , '#8c00FF' , '#00FF8C' ] ) #NEWLINE#
{ { form . title } } #NEWLINE#
C / C . astype ( np . float ) . sum ( axis = 0 ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
os . listdir ( short_unc ) #NEWLINE#
df [ 'Match' ] = df . apply ( search_func , axis = 1 ) #NEWLINE#
df . drop_duplicates ( subset = [ 'weekday' , 'week' ] , inplace = True ) #NEWLINE#
contains ( 'xbababa' , 'x' ) #NEWLINE#
c = a [ 2 : ] #NEWLINE#
locate ( 'mypackage.model.base.BaseModel' ) #NEWLINE#
start_time = time . time ( ) #NEWLINE# end_time = time . time ( ) #NEWLINE# print ( 'Elapsed#SPACE#time#SPACE#was#SPACE#%g#SPACE#seconds' % ( end_time - start_time ) ) #NEWLINE#
mean = A . mean ( axis = 1 ) #NEWLINE#
ax1 . plot ( xv1 , yv1 , 'green' , linestyle = 'dashed' ) #NEWLINE#
response = br . open ( 'http://example.com' ) #NEWLINE#
r = requests . post ( post_url , data = json . dumps ( payload ) , headers = headers ) #NEWLINE#
os . chdir ( 'C:/temp' ) #NEWLINE#
super ( BaseModel , self ) . clean ( * args , ** kwargs ) #NEWLINE#
result = ast . literal_eval ( '[1,#SPACE#2,#SPACE#3]' ) #NEWLINE#
sorted ( s2 , key = prefixed_digits ( 'B' ) ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
parser = argparse . ArgumentParser ( description = 'Get#SPACE#my#SPACE#Option' ) #NEWLINE#
d4 = dict ( list ( d1 . items ( ) ) + list ( d2 . items ( ) ) + list ( d3 . items ( ) ) ) #NEWLINE#
x = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
menu . add_command ( label = 'Redo' , command = hello ) #NEWLINE#
tm += datetime . timedelta ( minutes = 10 ) #NEWLINE#
ax . bar ( bin , data , width , color = 'r' ) #NEWLINE#
bool ( b ) #NEWLINE#
datetime . datetime ( * map ( int , values ) ) #NEWLINE#
cursor . execute ( 'SET#SPACE#CHARACTER#SPACE#SET#SPACE#utf8mb4;' ) #NEWLINE#
cursor . execute ( 'SET#SPACE#character_set_connection=utf8mb4;' ) #NEWLINE#
cursor . execute ( '****' ) #NEWLINE#
argv . pop ( 0 ) #NEWLINE#
plt . figure ( ) #NEWLINE#
df [ df [ 'stridx' ] . str . contains ( 'Hello|Britain' ) ] #NEWLINE#
unique_edges = set ( map ( normalize , edges ) ) #NEWLINE#
timer . start ( ) #NEWLINE#
ax . plot ( x , np . cos ( x ) , label = 'Cosine' ) #NEWLINE#
time . gmtime ( ) #NEWLINE#
u . encode ( 'ascii' ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
name = '.something' #NEWLINE#
[ i for i in regex . split ( '(<(?:(?R)|[^<>])*>)|\\s*:\\s*' , s ) if i ] #NEWLINE#
self . cmdloop ( ) #NEWLINE#
from collections import Counter #NEWLINE#
return timedelta ( seconds = _diff . total_seconds ( ) ) - timedelta ( wek ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
COLON = ':' #NEWLINE#
c . execute ( 'create#SPACE#table#SPACE#foo#SPACE#(bar#SPACE#integer,#SPACE#baz#SPACE#timestamp)' ) #NEWLINE#
return json . dumps ( message ) #NEWLINE#
cvtColor ( src , gray , COLOR_BGR2GRAY ) #NEWLINE#
print ( df [ 'AltID' ] . apply ( type ) ) #NEWLINE#
self . button = QtGui . QPushButton ( 'Button' , self ) #NEWLINE#
[ ( 's' , 't' ) , ( 't' , 'a' ) , ( 'a' , 'c' ) , ( 'c' , 'k' ) , ( 'k' , 'o' ) , ( 'o' , 'v' ) , ( #NEWLINE# 'v' , 'e' ) , ( 'e' , 'r' ) , ( 'r' , 'f' ) , ( 'f' , 'l' ) , ( 'l' , 'o' ) , ( 'o' , 'w' ) ] #NEWLINE#
f = open ( locfile , 'rb' ) #NEWLINE#
print ( f . readlines ( ) [ 1 : 15 ] ) #NEWLINE#
lists = [ [ ] ] * 5 #NEWLINE#
Command ( 'speed_analysis.tex' , 'code/speed.py' , 'python#SPACE#code/speed.py' ) #NEWLINE#
self . ax . set_xlim3d ( FLOOR , CEILING ) #NEWLINE#
array_double = np . array ( a , dtype = np . double ) #NEWLINE#
testsite_array = my_file . readlines ( ) #NEWLINE#
s . send ( data_string ) #NEWLINE#
ax . cla ( ) #NEWLINE#
my_arr = np . array ( itertools . islice ( f ( ) , 3 ) ) #NEWLINE#
return [ x for x in s . lower ( ) if x in string . ascii_lowercase ] #NEWLINE#
sheet . write ( top_row , left_column , 'Long#SPACE#Cell' ) #NEWLINE#
myMatrix = sp . zeros ( ( len ( var1 ) , len ( var2 ) , len ( var3 ) ) ) #NEWLINE#
all_pairs . sort ( key = lambda p : distance ( p [ 0 ] [ 0 ] , p [ 1 ] [ 0 ] ) ) #NEWLINE#
zfile . close ( ) #NEWLINE#
time . sleep ( random . random ( ) ) #NEWLINE#
plt . xlabel ( 'Day' ) #NEWLINE#
b = tf . Variable ( tf . zeros ( [ 1 ] ) , name = 'biases' ) #NEWLINE#
b . save ( ) #NEWLINE#
elements . append ( KeepTogether ( Spacer ( width , height ) ) ) #NEWLINE#
keys = list ( test ) #NEWLINE#
gtk . main_quit ( ) #NEWLINE#
return day_list . index ( inp ) #NEWLINE#
print ( x , categorize ( x ) ) #NEWLINE#
return np . sum ( np . log ( np . arange ( 1 , n + 1 ) ) ) #NEWLINE#
super ( ModelB , self ) . save ( ) #NEWLINE#
[ "('index.html',#SPACE#'home')" , "('base.html',#SPACE#'base')" ] #NEWLINE#
s . ioctl ( socket . SIO_RCVALL , socket . RCVALL_OFF ) #NEWLINE#
plt . plot ( np . arange ( 10 ) , 4 * np . arange ( 10 ) ) #NEWLINE#
[ [ 'a' , 'c' ] , [ 'b' ] , [ 'a' , 'c' ] ] #NEWLINE#
out_file . write ( line ) #NEWLINE#
plt . plot ( y ) #NEWLINE#
data = open ( 'chorales.lisp' ) . read ( ) . split ( '\n' ) #NEWLINE#
time = models . FloatField ( ) #NEWLINE#
results . append ( ( parts [ 0 ] , parts [ 2 ] , parts [ 4 ] . split ( ',' ) [ 0 ] , price ) ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
np . random . seed ( 123 ) #NEWLINE#
cooler ( ) #NEWLINE#
fline = re . sub ( '[' + string . punctuation + ']' , '' , fline ) #NEWLINE#
circles = cv2 . HoughCircles ( gray , cv2 . HOUGH_GRADIENT ) #NEWLINE#
pass #NEWLINE#
xmlText = str ( xmlText , errors = 'replace' ) . replace ( '�' , '?' ) #NEWLINE#
v . toPyObject ( ) [ 0 ] #NEWLINE#
Page . objects . published ( ) #NEWLINE#
time . __file__ #NEWLINE#
df . iloc [ : 10 , : 5 ] #NEWLINE#
[ map ( second , row ) for row in data ] #NEWLINE#
print ( '%-8s#SPACE#%s' % ( k , thedict [ k ] ) ) #NEWLINE#
re . findall ( '\\d+|$' , 'aazzzbbb' ) [ 0 ] #NEWLINE#
raise Exception ( '' . join ( traceback . format_exception ( * sys . exc_info ( ) ) ) ) #NEWLINE#
return list ( filter ( str . isdigit , text ) ) #NEWLINE#
req_handler . send_response ( 200 , 'OK' ) #NEWLINE#
n = re . findall ( pattern , string ) #NEWLINE#
extract_date ( '2007-09-10_00005.jpg' ) #NEWLINE#
cherrypy . tools . authenticate = cherrypy . Tool ( 'before_handler' , authenticate ) #NEWLINE#
x = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE# y = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
print ( 'Type#SPACE#in#SPACE#your#SPACE#choice#SPACE#below:' ) #NEWLINE#
print ( 'Draw!' ) #NEWLINE#
print ( 'Paper#SPACE#beats#SPACE#Rock.#SPACE#You#SPACE#lose!' ) #NEWLINE#
print ( 'Scissors#SPACE#cuts#SPACE#Paper.#SPACE#You#SPACE#lose!' ) #NEWLINE#
print ( 'Rock#SPACE#blunts#SPACE#Scissors.#SPACE#You#SPACE#lose!' ) #NEWLINE#
print ( 'You#SPACE#win!' ) #NEWLINE#
print ( 'Do#SPACE#you#SPACE#want#SPACE#to#SPACE#play#SPACE#again?#SPACE#(y/n)' ) #NEWLINE#
fig . savefig ( figdata , format = 'png' ) #NEWLINE#
ax . set_xticks ( indeces ) #NEWLINE#
pattern = '(?:DT\\s+)+(?:(?:RB\\s+)+|(?:JJ\\s+)+)NN' #NEWLINE#
self . _fd . close ( ) #NEWLINE#
return a * np . exp ( - c * x ) + d #NEWLINE#
root = Tk ( ) #NEWLINE#
pl . plot ( x , np . random . standard_normal ( len ( x ) ) , 'o' , label = 'rand' ) #NEWLINE#
dict ( counts ) #NEWLINE#
area = area1 + area2 #NEWLINE#
C . f ( 2 ) #NEWLINE#
self . stop ( ) #NEWLINE#
row = [ item [ 0 ] for item in cursor . fetchall ( ) ] #NEWLINE# row #NEWLINE#
main ( sys . argv ) #NEWLINE#
super ( ExpectingTestCase , self ) . run ( result ) #NEWLINE#
output = p2 . communicate ( ) [ 0 ] #NEWLINE#
query . parse ( 'a#SPACE#AND#SPACE#b#SPACE#AND#SPACE#c' ) #NEWLINE#
threading . Thread ( target = cli ) . start ( ) #NEWLINE#
ax . xaxis . set_major_formatter ( formatter ) #NEWLINE#
cursor . execute ( 'SET#SPACE#character_set_connection=utf8mb4' ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
m = re . search ( '(hardware#SPACE#ethernet\\s+(\\S+));\\s+\\S+\\s+(\\S+);' , data ) #NEWLINE# print ( m . groups ( ) ) #NEWLINE#
return reverse ( 'project.app.views.view_name' , None , [ str ( self . id ) ] ) #NEWLINE#
plt . savefig ( 'my_fig.png' , dpi = my_dpi * 10 ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
router . register ( 'myObjects/(?P<id>\\d+)' , views . MyObjectsViewSet ) #NEWLINE#
r . _meta . id #NEWLINE#
while thing in some_list : #NEWLINE# #INDENT# some_list . remove ( thing ) #NEWLINE#
np . array ( mp . arange ( 600 ) ) #NEWLINE#
User . add_to_class ( 'openid' , models . CharField ( max_length = 250 , blank = True ) ) #NEWLINE#
repo . pull ( ) #NEWLINE#
plt . xlim ( [ 0 , n ] ) #NEWLINE#
task . react ( main_task ) #NEWLINE#
super ( MyModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return [ value for value in the_list if value != val ] #NEWLINE#
some_value = cookie [ 'some_key' ] . value #NEWLINE#
d [ '2' ] += 2 #NEWLINE# if __name__ == '__main__' : #NEWLINE# #INDENT# manager = Manager ( ) #NEWLINE# d = manager . dict ( ) #NEWLINE# d [ 1 ] = '1' #NEWLINE# d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
result . append ( c ) #NEWLINE#
print ( n . tag , '=' , n . text ) #NEWLINE#
post_body = self . rfile . read ( content_len ) #NEWLINE#
driver . set_window_size ( 1024 , 768 ) #NEWLINE#
lis . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
print ( 'Press#SPACE#Ctrl+C' ) #NEWLINE#
new_df = new_df . reset_index ( ) . pivot ( 'times' , 'events' ) . fillna ( 0 ) #NEWLINE#
X = pd . DataFrame ( dict ( one = [ 'Strawberry' , 'Fields' , 'Forever' ] , two = [ 1 , 2 , 3 ] ) ) #NEWLINE#
df = pd . DataFrame ( { 'foo' : [ 1 , 2 , 3 , 4 ] } ) #NEWLINE# df . to_html ( classes = 'mytable' ) #NEWLINE#
return self . request . route_url ( name , id = self . id , ** kw ) #NEWLINE#
req . add_header ( 'Content-type' , 'application/x-www-form-urlencoded' ) #NEWLINE#
self . target ( * args , ** kwargs ) #NEWLINE#
df . groupby ( 'company_id' ) . first ( ) . loc [ df . company_id ] #NEWLINE#
json_dict = eval ( '{"sky_is_blue":true}' ) #NEWLINE#
print ( locale . atof ( re . sub ( '^\\((.*?)\\)$' , '-\\1' , a ) ) ) #NEWLINE#
print ( 'Caps#SPACE#Lock#SPACE#is#SPACE#On:#SPACE#%s' % status ) #NEWLINE#
data = ( 1 , ) , ( 3 , ) #NEWLINE# print ( [ x [ 0 ] for x in data ] ) #NEWLINE#
obj . save ( ) #NEWLINE#
df . loc [ df [ 'column' ] . isin ( list ( my_dict . keys ( ) ) ) ] #NEWLINE#
wb . Close ( ) #NEWLINE#
ax . scatter ( dates , zaxisvalues0 , highs , color = 'g' , marker = 'o' ) #NEWLINE#
sales [ 'time_hour' ] = sales . timestamp . apply ( lambda x : x . hour ) #NEWLINE#
return lambda x : f ( g ( x ) ) #NEWLINE#
notices = soup . find ( 'div' , { 'class' : 'middlecontent' } ) #NEWLINE# contents = '' . join ( [ str ( item ) for item in notices . contents ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
socket . connect ( 'tcp://localhost:5555' ) #NEWLINE#
return cls ( os . path . expanduser ( '~' ) ) #NEWLINE#
plt . subplots_adjust ( left = 0.2 , bottom = 0.2 ) #NEWLINE#
print ( list ( uniquenames ( 'abc' ) ) ) #NEWLINE#
k_keys_sorted_by_values = heapq . nlargest ( k , dictionary , key = dictionary . get ) #NEWLINE#
q . open ( ) #NEWLINE#
list ( unique_everseen ( a , key = frozenset ) ) #NEWLINE#
t . astype ( np . int64 ) / 10 ** 3 #NEWLINE#
codecs . BOM_UTF8 #NEWLINE#
chi2_contingency ( data ) #NEWLINE#
return datetime . strptime ( text , fmt ) #NEWLINE#
logger = logging . getLogger ( 'MyLogger' ) #NEWLINE#
regex . sub ( '[^\\p{Latin}]' , '' , text ) #NEWLINE#
response . status_code #NEWLINE#
style . configure ( 'CustomRadiobutton' , background = 'white' ) #NEWLINE#
parser . error ( '{}#SPACE#not#SPACE#valid#SPACE#column' . format ( value ) ) #NEWLINE#
second_d = dict ( [ ( k , first_d [ k ] ) for k in ( 2 , 3 ) ] ) #NEWLINE#
canvas . place ( x = 5 , y = height + 10 ) #NEWLINE#
unittest . main ( ) #NEWLINE#
model . setData ( index , newValue , QtCore . Qt . EditRole ) #NEWLINE#
def save ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# super ( Klass , self ) . save ( * args , ** kwargs ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# self . _original_state = self . _as_dict ( ) #NEWLINE#
[ 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
ndimage . gaussian_filter1d ( np . float_ ( [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ] ) , 1 ) #NEWLINE#
total = sum ( total ) #NEWLINE#
raw_data [ 'Mycol' ] = pd . to_datetime ( raw_data [ 'Mycol' ] , format = #NEWLINE# '%d%b%Y:%H:%M:%S.%f' ) #NEWLINE#
print ( mystring [ : 1 ] ) #NEWLINE#
print ( parser . parse_args ( '--foo#SPACE#B#SPACE#cmd#SPACE#--arg1#SPACE#XX#SPACE#ZZ' . split ( ) ) ) #NEWLINE#
data [ k ] . append ( fitem ( v ) ) #NEWLINE#
Thread ( target = serve_on_port , args = [ 1111 ] ) . start ( ) #NEWLINE#
msg = MIMEMultipart ( 'related' ) #NEWLINE#
sum ( 1 for i in x if 60 < i < 70 ) #NEWLINE#
list ( chain . from_iterable ( result ) ) #NEWLINE#
print ( p . url ) #NEWLINE#
axarr [ 0 ] . set_xticklabels ( map ( str , axarr [ 0 ] . get_xticks ( ) ) ) #NEWLINE#
in_trie ( make_trie ( 'foo' , 'bar' , 'baz' , 'barz' ) , 'ba' ) #NEWLINE#
p . start ( ) #NEWLINE#
writer . writerow ( d ) #NEWLINE#
df = DataFrame ( np . random . rand ( 4 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE# df . ix [ : , 'b' : ] #NEWLINE#
c . __getattribute__ #NEWLINE#
m = re . search ( '\\[([A-Za-z0-9_]+)\\]' , s ) #NEWLINE#
super ( ) . __init__ ( argp ) #NEWLINE#
print ( Decimal ( 2 ) ** Decimal ( 2 ) ) #NEWLINE#
c . add ( 1 ) . cumprod ( ) #NEWLINE#
print ( 'data#SPACE#from#SPACE#new_stdout:' , new_stdout . read ( ) ) #NEWLINE#
__metaclass__ = Singleton #NEWLINE#
text = pattern . sub ( lambda m : rep [ re . escape ( m . group ( 0 ) ) ] , text ) #NEWLINE#
print ( 't-statistic#SPACE#=#SPACE#%6.3f#SPACE#pvalue#SPACE#=#SPACE#%6.4f' % stats . ttest_1samp ( x , m ) ) #NEWLINE#
print ( df . groupby ( lambda x : x . month ) . agg ( [ min , max , np . mean ] ) ) #NEWLINE#
logging . getLogger ( 'schedule' ) . setLevel ( logging . CRITICAL + 10 ) #NEWLINE#
mlab . show ( ) #NEWLINE#
xl . Quit ( ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
printf ( 'Sorry#SPACE#Marty\n' ) #NEWLINE#
return df . groupby ( 'categories' ) . agg ( f ) #NEWLINE#
self . request . send ( 'Received:#SPACE#{0}' . format ( recvdata ) ) #NEWLINE#
Counter ( data ) . most_common ( ) #NEWLINE#
title = models . CharField ( max_length = 30 ) #NEWLINE#
COMPRESS_JS_FILTERS = [ 'compressor.filters.template.TemplateFilter' ] #NEWLINE#
url = '/' , 'index' #NEWLINE#
p1 . wait ( ) #NEWLINE#
print ( date_object . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) ) #NEWLINE#
social . set_extra_data ( extra_data ) #NEWLINE#
yield '' . join ( loop ( ) ) #NEWLINE#
o5 . __dict__ [ 'var' ] #NEWLINE#
main ( ) #NEWLINE#
print ( paths ( p ) [ 0 ] ) #NEWLINE#
f . __code__ . co_varnames #NEWLINE#
elapsed_time = time . time ( ) - start_time #NEWLINE#
print ( np . sort ( x ) [ - 10 : ] ) #NEWLINE#
open ( new_path , 'w' ) . write ( data ) #NEWLINE#
name_list = [ re . findall ( '(\\w+)\\(\\d+\\)' , s ) for s in L1 ] #NEWLINE#
list_of_lists = [ [ 'aa' , '2' ] , [ 'bb' , '3' ] ] #NEWLINE# [ [ try_int ( x ) for x in lst ] for lst in list_of_lists ] #NEWLINE#
"""交易金额：(\\d+\\.?\\d+)元""" #NEWLINE#
day . <STR0> ( ) #NEWLINE#
self . fig . canvas . mpl_connect ( 'button_press_event' , self . on_click ) #NEWLINE#
my_randoms = random . sample ( range ( 100 ) , 10 ) #NEWLINE#
grid . cbar_axes [ 2 ] . colorbar ( im2 ) #NEWLINE#
l = [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 2 , 2 , 2 ] #NEWLINE#
process . wait ( ) #NEWLINE#
super ( Feed , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return super ( SlicableDict , self ) . __getitem__ ( key ) #NEWLINE#
print ( d . strftime ( '%m/%d/%Y' ) ) #NEWLINE#
runInParallel ( func1 , func2 ) #NEWLINE#
mainloop ( ) #NEWLINE#
return [ Link ( url , text ) for url , text in urlstext ] #NEWLINE#
q = [ [ None ] * 5 ] * 4 #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
ax . plot_surface ( X [ : , : , ( 0 ) ] , Y [ : , : , ( 0 ) ] , z , cstride = 4 , rstride = 4 , color = 'y' ) #NEWLINE#
ax . plot_surface ( X [ : , : , ( 0 ) ] , Y [ : , : , ( 0 ) ] , z , cstride = 4 , rstride = 4 , color = 'b' ) #NEWLINE#
clean . v . plot ( kind = 'kde' , ax = ax , secondary_y = True ) #NEWLINE#
l = [ 0 , 1 , 2 , 3 , 4 , 7 , 8 , 9 , 11 ] #NEWLINE#
return HttpResponseRedirect ( settings . LOGIN_URL ) #NEWLINE#
stdout , stderr = p . communicate ( in_string ) #NEWLINE#
self . timeout . cancel ( ) #NEWLINE#
{ 'error' : '500#SPACE#-#SPACE#internal#SPACE#server#SPACE#error' } #NEWLINE#
udata = data . decode ( 'utf-8' ) #NEWLINE#
octave . call ( 'foo' , a , b ) #NEWLINE#
window . event_generate ( '<Motion>' , warp = True , x = 50 , y = 50 ) #NEWLINE#
compressed_value = s . encode ( 'zlib' ) #NEWLINE#
get_sliding_window ( df , 3 , return2D = 0 ) #NEWLINE#
self . name = name #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
connection . my_database . my_collection . insert ( { 'created_at' : dt } , safe = True ) #NEWLINE#
( 'enc_key' , '...' ) , #NEWLINE#
[ round_to_nearest ( i , 6 ) for i in range ( 20 ) ] #NEWLINE#
import cloudstorage as gcs #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
re . sub ( '\\$\\[([^\\]]*)\\]' , lambda x : d . get ( x . group ( 1 ) ) , msg ) #NEWLINE#
return super ( DeleteQueueItem , self ) . put ( ** kwargs ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
"""""" . join ( reversed ( s ) ) #NEWLINE#
return response . read ( ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
filter_func ( parent_dict , func ) #NEWLINE#
f . seek ( 0 , 0 ) #NEWLINE#
[ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 ] #NEWLINE#
t . date ( ) #NEWLINE#
headers = { 'content-type' : 'application/xml' } #NEWLINE#
print ( cur . fetchall ( ) ) #NEWLINE#
s = pd . Series ( [ 2 ] , index = [ 2 ] ) #NEWLINE#
result . append ( x ) #NEWLINE#
frame . set_facecolor ( 'green' ) #NEWLINE#
lst = [ 'aaaa8' , 'bb8' , 'ccc8' , 'dddddd8' ] #NEWLINE# print ( [ s . strip ( '8' ) for s in lst ] ) #NEWLINE# print ( [ s . replace ( '8' , '' ) for s in lst ] ) #NEWLINE#
return tuple ( int ( i * 255 ) for i in colorsys . hsv_to_rgb ( h , s , v ) ) #NEWLINE#
plt . savefig ( 'fig.png' ) #NEWLINE#
process . wait ( ) #NEWLINE#
raise KeyboardInterrupt ( 'Signal#SPACE#handler' ) #NEWLINE#
return [ a [ i ] for i in b ] #NEWLINE#
r . search ( 'visit#SPACE#usenet:comp.lang.python#SPACE#today' ) . span ( ) #NEWLINE#
r . search ( '012cat' ) . span ( ) #NEWLINE#
asyncore . loop ( ) #NEWLINE#
re . sub ( rx , '' , subj ) #NEWLINE#
0.20408199999999999 , 0.263235 , 0.196243 , 0.5287850000000001 , 0.853517 #NEWLINE#
0.294473 , 0.264698 , 0.8466469999999999 , 0.11871300000000001 , 0.872064 #NEWLINE#
wd . config ( height = 500 , width = 500 ) #NEWLINE#
df = df . replace ( 'AAA' , np . nan ) #NEWLINE#
df = pd . DataFrame ( { 'col' : [ 2 , 1 , 2 ] } ) #NEWLINE#
headers = { 'Content-type' : 'text/xml' } #NEWLINE#
self . top_frame . pack ( side = 'top' , fill = 'x' , expand = False ) #NEWLINE#
plot . rcParams . update ( params ) #NEWLINE#
print ( list ( chain ( * A ) ) ) #NEWLINE#
funs = list ( get_petters ( ) ) #NEWLINE#
quit ( ) #NEWLINE#
logger . info ( 'PikaClient:#SPACE#connected#SPACE#to#SPACE#RabbitMQ' ) #NEWLINE#
logger . info ( 'PikaClient:#SPACE#rabbit#SPACE#connection#SPACE#closed' ) #NEWLINE#
self . label . pack ( ) #NEWLINE#
lines = infile . readlines ( ) #NEWLINE#
A . __init__ ( self , n ) #NEWLINE#
Base . __init__ ( self ) #NEWLINE#
rows , cols = X . nonzero ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
df [ 'Col3' ] = df . Col2 . values [ df . Col1 . values == 34 ] [ df . ID . factorize ( ) [ 0 ] ] #NEWLINE#
print ( ndimage . zoom ( data , ( 1 , 2 , 2 ) ) ) #NEWLINE#
[ ( 'localhost' , ) ] #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE#
df = df . stack ( ) . sample ( frac = 0.8 ) . unstack ( ) #NEWLINE#
cur . execute ( sql , macs , host ) #NEWLINE#
dict2 = dict1 . copy ( ) #NEWLINE#
datetime . fromtimestamp ( ts ) . strftime ( '%a,#SPACE#%b#SPACE#%d,#SPACE#%Y#SPACE#at#SPACE#%I:%M#SPACE#%p' ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 164 ] , #NEWLINE#
self . assertEqual ( 2 , self . comic_file . page_count ( ) ) #NEWLINE#
plt . plot ( [ 0 , 3 ] ) #NEWLINE#
my_list . extend ( [ int ( i ) for i in row if i . isdigit ( ) ] ) #NEWLINE#
print ( Dummy ( ) ) #NEWLINE#
self . text . tag_config ( 'newline' , background = 'green' ) #NEWLINE#
[ [ 4 , 2 , 6 ] , [ 8 , 10 , 12 ] , [ 6 , 4 , 6 ] ] #NEWLINE#
{ { user . username | e } } #NEWLINE#
req . add_header ( 'Content-Type' , 'application/json;#SPACE#charset=utf-8' ) #NEWLINE#
submit_response = self . br . <STR0> ( name = 'Create' , label = 'Create#SPACE#New#SPACE#Page' ) #NEWLINE#
Model . objects . filter ( filters_for_query ) #NEWLINE#
m . drawmapboundary ( fill_color = 'white' ) #NEWLINE#
self . br . open ( 'http://foo.com/path/to/page.html' ) #NEWLINE#
plt . scatter ( X , Y , color = 'g' , alpha = 0.3 ) #NEWLINE#
print ( df . query ( 'country#SPACE#==#SPACE#"KR"' ) ) #NEWLINE#
req = urllib . request . Request ( site , data , headers ) #NEWLINE#
table [ 0 ] [ 1 ] #NEWLINE#
r = s . post ( url , data = data ) #NEWLINE#
[ 2 , 5 ] #NEWLINE#
[ 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 ] , #NEWLINE#
r = re . compile ( ':#SPACE#(.*)#SPACE#\\(based#SPACE#on#SPACE#SDK#SPACE#(.*)\\)' ) #NEWLINE#
sys . __class__ . __dict__ [ '__repr__' ] #NEWLINE#
list ( gen ( ) ) #NEWLINE#
l , c , v = np . loadtxt ( 'test.txt' , skiprows = 1 ) . T #NEWLINE# m = coo_matrix ( ( v , ( l - 1 , c - 1 ) ) , shape = ( l . max ( ) , c . max ( ) ) ) #NEWLINE#
s . write ( 'abc' ) #NEWLINE#
m = np . log10 ( np . abs ( x ) ) #NEWLINE#
raise RuntimeError ( 'cannot#SPACE#zero#SPACE#interned#SPACE#string' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE' ) #NEWLINE#
print ( hex ( res ) ) #NEWLINE#
windll . user32 . MessageBoxA ( None , 'Hello#SPACE#world' , 'ctypes' , 0 ) #NEWLINE#
date = datetime ( year = int ( s [ 0 : 4 ] ) , month = int ( s [ 4 : 6 ] ) , day = int ( s [ 6 : 8 ] ) ) #NEWLINE#
print ( 'Terminated#SPACE#by#SPACE#signal#SPACE#%s' % SIGNALS_TO_NAMES_DICT [ signal_number ] ) #NEWLINE#
print ( remove_common ( 'aa#SPACE#bb#SPACE#s' , 'a#SPACE#bbb' ) ) #NEWLINE#
label . master . wm_attributes ( '-disabled' , True ) #NEWLINE#
l . append ( 'bar' ) #NEWLINE#
return [ lst [ i : : n ] for i in range ( n ) ] #NEWLINE#
IP ( '127.0.0.1' ) #NEWLINE#
data = pd . DataFrame ( [ [ 1 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 0 , 1 ] ] , columns = [ 'sex' , 'split' ] ) #NEWLINE#
print ( is_sorted ( [ 'a' , 'd' , 'b' , 'c' , 'e' ] ) ) #NEWLINE#
exif_data = img . _getexif ( ) #NEWLINE#
super ( CustomHandler , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
def func ( num , start , end ) : #NEWLINE# #INDENT# return min ( max ( num , start ) , end ) #NEWLINE#
ax . set_yscale ( 'log' , basey = 2 ) #NEWLINE#
ax . xaxis . set_major_formatter ( date_format ) #NEWLINE#
role = models . CharField ( ) #NEWLINE#
f = open ( 'tracks.txt' , 'r' ) #NEWLINE#
axes [ 0 ] . plot ( x , y , 'bo' ) #NEWLINE#
return self . __addL__ [ self . number ] [ x ] #NEWLINE#
ax . contour ( xi , yi , zi ) #NEWLINE#
x = np . random . random ( ( 3 , 2 ) ) - 0.5 #NEWLINE#
container . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
new_ts = ts . tz_convert ( 'US/Eastern' ) #NEWLINE#
issubclass ( B , A ) #NEWLINE#
result = np . zeros ( ( X . shape [ 0 ] , W . shape [ 1 ] ) , order = 'F' , dtype = np . double ) #NEWLINE#
data = in_file . read ( ) . split ( '\n' ) #NEWLINE#
subprocess . Popen ( 'notepad.exe' , shell = True ) #NEWLINE#
{ 'model' : 'Event' , 'name' : 'vs#SPACE#Washington#SPACE#Redskins' } , #NEWLINE#
eval ( 'map(lambda#SPACE#x,#SPACE#self=self:#SPACE#self.var*x,#SPACE#[1,2,3,4,5])' ) #NEWLINE#
df = df . rename ( columns = { 'two' : 'new_name' } ) #NEWLINE#
self . response . out . write ( json . dumps ( response ) ) #NEWLINE#
s . add ( item ) #NEWLINE#
worksheet . write ( 'A1' , 'Hello#SPACE#world' ) #NEWLINE#
return max ( depth ( self . left ) , depth ( self . right ) ) + 1 #NEWLINE#
myprocess . kill ( ) #NEWLINE#
sys . stdout . write ( sio . getvalue ( ) ) #NEWLINE#
root = ET . Element ( 'root' ) #NEWLINE#
return self . parent . x #NEWLINE#
matplotlib . use ( 'Qt4Agg' ) #NEWLINE#
z = zipfile . ZipFile ( 'myzip.zip' , 'r' , zipfile . ZIP_DEFLATED ) #NEWLINE#
datetime . now ( ) + relativedelta ( weekday = FR ( - 1 ) ) #NEWLINE#
for filename in os . listdir ( sub_dir ) : #NEWLINE# #INDENT# f = open ( os . path . join ( sub_dir , filename ) , 'r' ) #NEWLINE#
plt . show ( ) #NEWLINE#
manager . start ( ) #NEWLINE#
df . plot ( x = 'lat' , y = 'lon' , kind = 'scatter' , ax = ax ) #NEWLINE#
print ( x [ 0 ] + y [ 0 ] ) #NEWLINE#
sys . executable #NEWLINE#
return f ( x ) #NEWLINE#
session . add ( User ( name = 'jean' ) ) #NEWLINE#
session . add ( User ( name = 'albert' ) ) #NEWLINE#
graph = facebook . GraphAPI ( oauth_access_token ) #NEWLINE#
console_handler . setLevel ( logging . DEBUG ) #NEWLINE#
match = next ( ( x for x in a if x in str ) , False ) #NEWLINE#
main ( ) #NEWLINE#
[ 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 ] , #NEWLINE#
datetime . datetime . strptime ( ds [ : - 3 ] , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
zip ( x , y , z ) #NEWLINE#
print ( '\ndog\ncat\n' [ 1 : - 1 ] ) #NEWLINE#
[ x . extract ( ) for x in soup . findAll ( [ 'script' , 'style' ] ) ] #NEWLINE#
id9 , Wood , moreinfo9 #NEWLINE#
parser . add_argument ( '--left-operands' , '-l' , nargs = '+' , required = True ) #NEWLINE#
show ( ) #NEWLINE#
print ( etree . tostring ( elem , pretty_print = True ) ) #NEWLINE#
container . pack ( side = 'bottom' , fill = 'both' , expand = True ) #NEWLINE#
s = 'Hello!' #NEWLINE# u = str ( s , 'utf-8' ) #NEWLINE#
fig . savefig ( 'nba.png' ) #NEWLINE#
window . show ( ) #NEWLINE#
x [ 0 ] [ 0 ] [ 1 ] = 111 #NEWLINE#
conn = sqlite3 . connect ( path ) #NEWLINE#
for line in open ( 'csvfile.csv' ) : #NEWLINE# #INDENT# csv_row = line . split ( ) #NEWLINE#
packages = [ 'foo' , 'foo.bar' ] , #NEWLINE#
[ ( 'one' , 2 ) , ( 'two' , 1 ) ] #NEWLINE#
def sum1 ( input ) : #NEWLINE# #INDENT# return sum ( map ( sum , input ) ) #NEWLINE#
f = open ( os . path . join ( settings . ROOT_PATH , 'myfile.db' ) ) #NEWLINE#
numpy_dict [ 'c' ] #NEWLINE#
s = format ( s , '0<22' ) #NEWLINE#
self . redirect ( '/' ) #NEWLINE#
mylist [ i ] = num . replace ( ':' , '' ) #NEWLINE#
"""{},{},{}""" . format ( * ( x + ( y , ) ) ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
gimpfu . main ( ) #NEWLINE#
mlb . pack ( side = 'top' , fill = 'both' , expand = 1 ) #NEWLINE#
print ( df . pivot ( index = 'g' , columns = 'Col1' , values = 'Col2' ) ) #NEWLINE#
parser . add_argument ( '--delete' , action = 'store_true' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
form . save ( ) #NEWLINE#
PREPEND_WWW = True #NEWLINE#
doc = etree . fromstring ( xml ) #NEWLINE#
[ int ( next ( h ) . strip ( ) ) for _ in range ( 4 ) ] #NEWLINE#
a = Dimarray ( values , ( 'lat' , lat ) , ( 'lon' , lon ) ) #NEWLINE#
logger . info ( 'info#SPACE#message' ) #NEWLINE#
print ( 'MySQL#SPACE#Error#SPACE#%d:#SPACE#%s' % ( e . args [ 0 ] , e . args [ 1 ] ) ) #NEWLINE#
data [ 'a' ] . T . ravel ( ) #NEWLINE#
runPipe ( [ 'ls#SPACE#-1' , 'head#SPACE#-n#SPACE#2' , 'head#SPACE#-n#SPACE#1' ] ) #NEWLINE#
return array ( [ np . linalg . solve ( x , identity ) for x in A ] ) #NEWLINE#
self . append ( x ) #NEWLINE#
merged . setdefault ( d [ 'name' ] , set ( ) ) . update ( d [ 'playing' ] ) #NEWLINE#
[ x for x in a if x . size > 0 ] #NEWLINE#
AllItems = [ QComboBoxName . itemText ( i ) for i in range ( QComboBoxName . count ( ) ) ] #NEWLINE#
grouped [ film [ 'film' ] [ 0 ] ] . append ( film ) #NEWLINE#
filecmp . cmp ( 'file1.txt' , 'file2.txt' ) #NEWLINE#
wx . Frame . __init__ ( self , parent , id , title , size = ( 350 , 250 ) ) #NEWLINE#
ax . set_zlabel ( 'z' ) #NEWLINE#
q . interruptable_get ( ) #NEWLINE#
plt . plot ( x , counts , 'ro' ) #NEWLINE#
print ( f ( 3 ) ) #NEWLINE#
first_split = input . split ( '=' ) #NEWLINE#
Author . objects . using ( 'default' ) . all ( ) #NEWLINE#
{ 'Y' : 'brown' , 'X' : 1 } #NEWLINE#
np . random . choice ( elements , 10 , p = probabilities ) #NEWLINE#
ctypes . windll . user32 . mouse_event ( 4 , 0 , 0 , 0 , 0 ) #NEWLINE#
x = pd . DataFrame ( { 'cat' : ( 'A' , 'A' , 'B' ) , 'val' : ( 10 , 20 , 30 ) } ) #NEWLINE#
plt . plot ( xdata , ydata ) #NEWLINE#
all ( is_okay ( s ) for s in some_array ) #NEWLINE#
rect . set_height ( h ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# unittest . main ( ) #NEWLINE#
dict ( urlparse . parse_qsl ( urlparse . urlsplit ( url ) . query ) ) #NEWLINE#
cursor . execute ( 'SET#SPACE#search_path#SPACE#TO#SPACE#' , subdomain ) #NEWLINE#
print ( 'Slope#SPACE#=#SPACE#' , get_logslope ( np . array ( k ) , np . array ( ebk ) ) ) #NEWLINE#
screen = pygame . display . set_mode ( ( 500 , 500 ) ) #NEWLINE#
name = module . name #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
return overrider #NEWLINE#
[ '0' , '0' , '0' , '1' , '0' ] #NEWLINE#
[ '0' , '0' , '0' , '1' , '1' ] #NEWLINE#
[ '0' , '0' , '1' , '0' , '0' ] #NEWLINE#
[ '0' , '0' , '1' , '0' , '1' ] #NEWLINE#
[ '0' , '0' , '1' , '1' , '0' ] #NEWLINE#
[ '0' , '0' , '1' , '1' , '1' ] #NEWLINE#
[ '0' , '1' , '0' , '0' , '0' ] #NEWLINE#
[ '0' , '1' , '0' , '0' , '1' ] #NEWLINE#
[ '0' , '1' , '0' , '1' , '0' ] #NEWLINE#
[ '0' , '1' , '0' , '1' , '1' ] #NEWLINE#
[ '0' , '1' , '1' , '0' , '0' ] #NEWLINE#
[ '0' , '1' , '1' , '0' , '1' ] #NEWLINE#
[ '0' , '1' , '1' , '1' , '0' ] #NEWLINE#
[ '0' , '1' , '1' , '1' , '1' ] #NEWLINE#
[ '1' , '0' , '0' , '0' , '0' ] #NEWLINE#
[ '1' , '0' , '0' , '0' , '1' ] #NEWLINE#
[ '1' , '0' , '0' , '1' , '0' ] #NEWLINE#
[ '1' , '0' , '0' , '1' , '1' ] #NEWLINE#
[ '1' , '0' , '1' , '0' , '0' ] #NEWLINE#
np . nanargmax ( a , axis = 0 ) #NEWLINE#
list ( int ( x , 0 ) for x in [ '0x28' , '0x0' , '0x0' , '0x0' ] ) #NEWLINE#
"""FOO#SPACE#BAR""" #NEWLINE#
print ( fixurl ( 'http://â\x9e¡.ws/â\x99¥/%2F' ) ) #NEWLINE#
print ( fixurl ( 'http://Åsa:abc123@➡.ws:81/admin' ) ) #NEWLINE#
admin . site . register ( User , CustomUserAdmin ) #NEWLINE#
reader = csv . reader ( open ( 'abx.csv' ) , delimiter = '#SPACE#' ) #NEWLINE#
imobj . set_data ( img ) #NEWLINE#
fs . noteon ( 0 , 67 , 30 ) #NEWLINE#
data [ 'y' ] #NEWLINE#
dict ( ( k , [ v [ 1 ] for v in vs ] ) for k , vs in itertools . groupby ( l , lambda x : x [ 0 ] ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return wx . Icon ( 'gfx/myapp.ico' , wx . BITMAP_TYPE_ICO ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
plt . fill ( [ 0 , 0 , 1 , 1 ] , [ 0 , 1 , 1 , 0 ] ) #NEWLINE#
Image . objects . all ( ) . large ( ) . portraits ( ) #NEWLINE#
return response #NEWLINE#
def division ( a , b ) : #NEWLINE# #INDENT# return float ( a ) / float ( b ) #NEWLINE#
df . myCol . plot ( ) . legend ( loc = 'center#SPACE#left' , bbox_to_anchor = ( 1 , 0.5 ) ) #NEWLINE#
print ( 'Values#SPACE#after:' , sess . run ( [ data ] ) ) #NEWLINE#
np . dot ( a , b ) #NEWLINE#
ax . scatter ( x , y , z ) #NEWLINE#
ax . set_zlim ( z_min , z_max ) #NEWLINE#
conn . putheader ( 'Content-Type' , 'application/octet-stream' ) #NEWLINE#
f . close ( ) #NEWLINE#
a = np . random . rand ( 10 , 10 ) #NEWLINE#
plt . plot ( x , yhat , color = 'red' ) #NEWLINE#
sys . stdout = open ( '/dev/stdout' , 'w' ) #NEWLINE#
df1 . reset_index ( inplace = True ) #NEWLINE#
port = s . getsockname ( ) [ 1 ] #NEWLINE#
my_list = [ tuple ( i ) for i in my_list ] #NEWLINE#
choose = models . CharField ( max_length = 3 , choices = choose_dict , default = None ) #NEWLINE#
p . kill ( ) #NEWLINE#
print ( df . sum ( ) . to_frame ( ) ) #NEWLINE#
s = 'helloworld' #NEWLINE# print ( collections . Counter ( s ) . most_common ( 1 ) [ 0 ] ) #NEWLINE#
password = getpass ( ) #NEWLINE#
self . process . stdin . write ( str . join ( '\n' , args ) ) #NEWLINE#
sum ( letterGoodness [ c ] for c in yourstring ) #NEWLINE#
ax . contour ( X , Y , Z , zdir = 'z' , offset = - 1 , colors = 'k' ) #NEWLINE#
bool ( array ) #NEWLINE#
plot_with_text ( x , y , 'test' ) #NEWLINE#
s [ repr ( ( 1 , 2 , 3 ) ) ] = 4 #NEWLINE#
pruned = '' . join ( c for i , c in enumerate ( s ) if i not in exclusions ) #NEWLINE#
p = ( b - a ) * p + a * p . ceil ( ) #NEWLINE#
- 34.0 , - 21.2 , - 18.4 , 34.6 , 9.3 , - 45.2 , - 21.1 , - 10.3 , - 19.8 , 29.1 , 31.3 , 37.7 , 27.2 , 19.3 #NEWLINE#
pl . show ( ) #NEWLINE#
draw ( ) #NEWLINE#
urlpatterns = { url ( '^$' , views . index , name = 'index' ) } #NEWLINE#
return Column ( id_column_name , UUID ( ) , primary_key = True , default = uuid . uuid4 ) #NEWLINE#
main ( ) #NEWLINE#
writes . writerow ( x ) #NEWLINE#
regex = re . compile ( '\\d+(.*?)[\\u263a-\\U0001f645]' ) #NEWLINE#
f . writelines ( mylist ) #NEWLINE#
checkbutton . grid ( row = 1 , column = 0 ) #NEWLINE#
"""-3""" . isdigit ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
self . root . geometry ( '300x200' ) #NEWLINE#
return 'I#SPACE#received#SPACE#{}!' . format ( ',#SPACE#' . join ( str ( arg ) for arg in args ) ) #NEWLINE#
X = [ [ 'A' , 'B' , 'C' ] , [ 'A' , 'B' , 'D' ] ] #NEWLINE#
im . show ( ) #NEWLINE#
with open ( 'file.txt' , 'r' ) as f : #NEWLINE# #INDENT# contents = f . readlines ( ) #NEWLINE# print ( contents ) #NEWLINE#
isinstance ( gen , types . GeneratorType ) #NEWLINE#
OrderedDict ( [ ( 'id' , '0' ) , ( 'last_modified' , 'undefined' ) ] ) #NEWLINE# OrderedDict ( [ ( 'last_modified' , 'undefined' ) , ( 'id' , '0' ) ] ) #NEWLINE#
print ( twenty . data [ 958 ] ) #NEWLINE#
fh = logging . FileHandler ( 'output.txt' , 'w' ) #NEWLINE#
max_product = max ( mul ( * l [ : 2 ] ) , mul ( * l [ - 2 : ] ) ) #NEWLINE#
df = pandas . DataFrame ( data ) #NEWLINE#
logger . addHandler ( dh ) #NEWLINE#
print ( time . strftime ( '%d/%m/%Y' ) ) #NEWLINE#
re . sub ( '(.)\\1\\1+' , '\\1\\1' , 'jeeeep' ) #NEWLINE#
q . put ( 'done' ) #NEWLINE#
[ y for x in map ( None , lis_a , lis_b ) for y in x ] #NEWLINE#
text2_re3 = re . sub ( '(\\d+)/(\\d+)/(\\d+)' , '\x03-\x01-\x02' , text2 ) #NEWLINE#
conn . send ( data ) #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
board [ x , y ] #NEWLINE#
__builtins__ . _ is _ #NEWLINE#
win = tk . Toplevel ( root ) #NEWLINE#
print ( '\r2' ) #NEWLINE#
return list ( zip ( * G ) ) [ 0 ] #NEWLINE#
s = s . replace ( c , '' ) #NEWLINE#
size = win . window . get_size ( ) #NEWLINE#
do_stuff ( ) #NEWLINE#
layout . addWidget ( self . edit ) #NEWLINE#
df . replace ( [ np . inf , - np . inf ] , np . nan ) #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
np . min ( np . nonzero ( np . hstack ( ( A , 1 ) ) ) ) #NEWLINE#
y = [ a for a in x ] #NEWLINE#
a = [ 'a' , 'a' , 'b' , 'c' , 'c' , 'c' , 'b' ] #NEWLINE#
db = MySQLdb . connect ( self . server , self . user , self . passwd , self . schema ) #NEWLINE#
soup = BeautifulSoup ( driver . page_source ) #NEWLINE#
shutil . make_archive ( zip_name , 'zip' , directory_name ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] [ : 5 ] #NEWLINE#
Repeat . repeat ( 3 , 2 , foo ) #NEWLINE#
"""(\\<\\/dd\\>\\<dt\\>)+#SPACE#([\\w+\\,\\.\\s]+)([\\&\\#\\d\\;]+)(\\<\\/dt\\>\\<dd\\>)+#SPACE#([\\w\\,\\s\\w\\s\\w\\?\\!\\.]+)#SPACE#(\\(\\<i\\>)([\\w\\s\\,\\-]+)(\\<\\/i\\>\\))""" #NEWLINE#
np . unique1d ( np . floor ( 10000000.0 * x ) / 10000000.0 ) #NEWLINE#
b [ 0 ] . append ( 1 ) #NEWLINE#
l1 . remove ( x ) #NEWLINE#
fields = 'key' , 'title' , 'pub_dates' , 'videos' #NEWLINE#
lambda s : int ( s ) if s . isdigit ( ) else 0 #NEWLINE#
[ 'UGG' , 'CCA' ] #NEWLINE#
rules . update ( rule . split ( '=' , 1 ) for rule in recurrence . split ( ';' ) ) #NEWLINE#
directories = [ item [ 'name' ] for item in itertools . islice ( gen ( ) , x ) ] #NEWLINE#
spans = soup . find_all ( 'span' , { 'class' : 'blue' } ) #NEWLINE#
plt . subplot ( 1 , 3 , n ) #NEWLINE#
pobj = sp . Popen ( 'sp.py' , stdin = sp . PIPE , stdout = sp . PIPE , shell = True ) #NEWLINE#
[ mean ( cluster ) for cluster in cl . getlevel ( 2 ) ] #NEWLINE#
out = np . sqrt ( np . einsum ( 'ijk,ijk->ij' , subs , subs ) ) #NEWLINE#
class Link ( models . Model ) : #NEWLINE# #INDENT# blog_post = models . ForeignKey ( BlogPost ) #NEWLINE#
GST_VERSION_MAJOR , #NEWLINE#
df2 = df [ df . dte < lastyear ] . head ( depth ) #NEWLINE#
worksheet . write_column ( 'B2' , data [ 1 ] ) #NEWLINE#
[ iter ( l ) ] * 2 #NEWLINE#
site . addsitedir ( self . install_lib ) #NEWLINE#
self . ui . PoseBtn_GridLayout . addWidget ( self . button , 0 , 0 , 1 , 1 ) #NEWLINE#
group , created = Group . objects . get_or_create ( name = 'everyone' ) #NEWLINE#
ax2 . yaxis . set_major_locator ( MaxNLocator ( nbins = len ( ax1 . get_yticks ( ) ) ) ) #NEWLINE#
any ( [ True , False , True ] ) #NEWLINE#
inputTag = soup . find ( attrs = { 'name' : 'stainfo' } ) #NEWLINE# output = inputTag [ 'value' ] #NEWLINE#
a = np . arange ( 100 ) . reshape ( 10 , 10 ) #NEWLINE#
q . close ( ) #NEWLINE#
val = s . split ( '[' , 1 ) [ 1 ] . split ( ']' ) [ 0 ] #NEWLINE#
data = np . genfromtxt ( csv_file , delimiter = ',' , names = True ) #NEWLINE#
return sum ( args ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
return max ( dict_depth ( v , depth + 1 ) for k , v in d . items ( ) ) #NEWLINE#
function_to_call ( ) #NEWLINE#
browser . get ( url ) #NEWLINE#
a = np . random . randint ( 0 , 2 , ( 10 , 8 ) ) #NEWLINE#
[ 'Platypus' , 'Eagle' , 'Aardvark' , 'Anteater' ] #NEWLINE#
set ( a ) == set ( c ) #NEWLINE#
compat . register ( ) #NEWLINE#
df [ 'Col1_0_prev' ] = df . groupby ( 'User' ) [ 'Col1_0' ] . shift ( ) #NEWLINE#
print ( m , len ( b ) , b . decode ( 'utf8' ) ) #NEWLINE#
ax . figure . autofmt_xdate ( ) #NEWLINE#
os . close ( f ) #NEWLINE#
print ( list ( remove_n_dupes ( lst , 4 , 3 ) ) ) #NEWLINE#
x [ 1 : : 2 ] #NEWLINE#
df . divide ( df . sum ( axis = 1 ) , axis = 0 ) #NEWLINE#
csvout . writerow ( ( 'Country' , 'Year' ) ) #NEWLINE#
print ( [ str ( r ) for r in _package . requires ( ) ] ) #NEWLINE#
res = df . groupby ( [ 'VehID' , 'Material' ] ) [ 'JobNo' ] . apply ( list ) . reset_index ( ) #NEWLINE#
mylist = mylist [ 2 : - 2 ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE# result = my_func ( ** vars ( args ) ) #NEWLINE#
object . __set__ ( self , instance , value ) #NEWLINE#
b [ b > 0 ] #NEWLINE#
trimmed . setdefault ( ( k [ 0 ] , k [ - 1 ] ) , [ ] ) . append ( v ) #NEWLINE#
print ( i [ 0 ] + '(' + i [ 1 ] + ')' ) #NEWLINE#
loggerA = logging . getLogger ( __name__ + '.A' ) #NEWLINE#
plt . xlim ( bins [ 0 ] , bins [ - 1 ] ) #NEWLINE#
numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
ax . plot_wireframe ( x , y , z , color = 'r' ) #NEWLINE#
print ( df1 . groupby ( [ 'Name' , 'City' ] ) . count ( ) ) #NEWLINE#
file . seek ( 0 , os . SEEK_END ) #NEWLINE#
f . apply ( clean , axis = 1 ) . reindex ( f . index ) #NEWLINE#
fct ( ) #NEWLINE#
parser . add_argument ( '--ipv4' , action = 'store_true' , dest = 'ipv4' ) #NEWLINE#
return list ( theDict . keys ( ) & theList ) #NEWLINE#
source_file . readline ( ) #NEWLINE#
s = '2014-04-07' #NEWLINE# datetime . datetime . strptime ( s , '%Y-%m-%d' ) . date ( ) #NEWLINE#
return '#SPACE#' . join ( out ) #NEWLINE#
return s . translate ( None , punc ) #NEWLINE#
os . rename ( filename , filename_ext ) #NEWLINE#
checkMAC ( 'AA:BB:CC:DD:EE:FF' ) #NEWLINE#
dct = defaultdict ( list ) #NEWLINE#
street = models . CharField ( max_length = 100 ) #NEWLINE#
print ( os . getegid ( ) ) #NEWLINE#
logger . info ( 'I#SPACE#ran' ) #NEWLINE#
georfe = Author . objects . get ( name = 'Georfe' ) #NEWLINE#
B = A [ ( [ 0 , 2 ] ) , : , : ] [ : , : , ( [ 1 , 2 ] ) ] #NEWLINE#
temp_file . close ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df_a . merge ( df_b , left_index = True , right_index = True ) #NEWLINE#
listing . extend ( ( 1 , 2 , 3 ) ) #NEWLINE#
w . menuBar ( ) . addMenu ( menu ) #NEWLINE#
win . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
print ( bsk . search ( 'boring#SPACE#stuff#SPACE#start=>interesting#SPACE#stuff' ) ) #NEWLINE#
window . connect ( 'destroy' , lambda _ : gtk . main_quit ( ) ) #NEWLINE#
return 'The#SPACE#about#SPACE#page' #NEWLINE#
a [ a < 0 ] = 0 #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
dosomethingelse #NEWLINE#
array ( [ [ 2 , 3 ] , [ 2 , 3 ] , [ 2 , 3 ] , [ 1 , 2 ] ] ) #NEWLINE#
df . set_index ( 'Firstlevel' , append = True , inplace = True ) #NEWLINE#
raise TypeError ( 'Again#SPACE#!?!' ) #NEWLINE#
return sorted ( list ( scores . items ( ) ) , key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
os . chmod ( 'mydir' , 493 ) #NEWLINE#
return mapping [ frozenset ( list ( d . keys ( ) ) ) ] ( ** d ) #NEWLINE#
aaa ( ) #NEWLINE#
creatures [ 'birds' ] [ 'eagle' ] = dict ( ) #NEWLINE#
fid = Column ( Integer , ForeignKey ( 'Price_History.id' ) ) #NEWLINE#
t_points = t_image [ [ t_pos [ : , ( 1 ) ] , t_pos [ : , ( 0 ) ] ] ] #NEWLINE#
random . shuffle ( charlst ) #NEWLINE#
plot . savefig ( 'hanning(%d).pdf' % num ) #NEWLINE#
stdin . close ( ) #NEWLINE#
print ( re . sub ( '([\\"])' , '\\\\\\1' , 'it\'s#SPACE#"this"' ) ) #NEWLINE#
plt . legend ( scatterpoints = 1 ) #NEWLINE#
return '' . join ( chr ( ord ( c ) ) for c in s . decode ( encoding ) ) . decode ( encoding ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
return list ( set ( seq ) ) #NEWLINE#
print ( calendar . month ( tgtdate . year , tgtdate . month ) ) #NEWLINE#
ip = models . CharField ( max_length = 200 , blank = True , db_index = True ) #NEWLINE#
{ 'table' : 'sales' , 'host' : 'localhost' , 'db_name' : 'new' } #NEWLINE#
{ 'table' : 'users' , 'host' : 'localhost' , 'db_name' : 'test' } #NEWLINE#
{ 'table' : 'partners' , 'host' : 'localhost' , 'db_name' : 'test' } #NEWLINE#
plt . gca ( ) . get_xaxis ( ) . get_major_formatter ( ) . set_useOffset ( False ) #NEWLINE#
s . seek ( 0 ) #NEWLINE#
ast . literal_eval ( '6.2' ) #NEWLINE#
l = [ 1 , 5 , 7 ] #NEWLINE# print ( [ y for x in l for y in ( x , x + 1 ) ] ) #NEWLINE#
s . apply ( '{:0.0f}' . format ) . replace ( 'nan' , '' ) . to_dict ( ) #NEWLINE#
( df * weights ) . sum ( 1 ) #NEWLINE#
sys . path . append ( os . path . abspath ( '..' ) ) #NEWLINE#
return func ( S [ 1 : ] ) #NEWLINE#
update_field ( PersonneProgramme , 'programme' , personne = obj ) #NEWLINE#
logger . addHandler ( logging . StreamHandler ( ) ) #NEWLINE#
df3 = df3 . sort ( ) #NEWLINE#
return len ( set ( in_list ) ) == len ( in_list ) #NEWLINE#
dfs [ df ] . to_sql ( df , con = db . engine , index = False , if_exists = 'append' ) #NEWLINE#
[ ( L1 [ i ] + L2 [ i ] ) for i in range ( min ( len ( L1 ) , len ( L2 ) ) ) ] #NEWLINE#
df [ 'time_diff' ] = df . groupby ( 'User' ) [ 'Time' ] . diff ( ) #NEWLINE#
self . connection . commit ( ) #NEWLINE#
sub_df . iloc [ 0 ] #NEWLINE#
zip ( * ( [ it ] * 2 ) ) #NEWLINE#
num = - int ( my_str . translate ( None , '(),' ) ) #NEWLINE#
Extension ( 'mypackage.mycythonmodule' , [ 'cython/mycythonmodule.c' ] ) , #NEWLINE#
foo ( ) #NEWLINE#
__init__ . py #NEWLINE#
frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2RGB ) #NEWLINE#
print ( '{0}' . format ( s ) ) #NEWLINE#
run ( host = 'localhost' , port = 8080 ) #NEWLINE#
set_cmap ( 'hot' ) #NEWLINE#
answer . append ( ( key , len ( list ( iter ) ) ) ) #NEWLINE#
def rev ( l ) : #NEWLINE# #INDENT# return l [ : : - 1 ] #NEWLINE#
warnings . simplefilter ( 'always' , UserWarning ) #NEWLINE#
( 4 , 5 , 6 ) > ( 1 , 1 , 1 , 9 ) #NEWLINE#
form . initial [ 'user' ] = user . pk #NEWLINE#
super ( GenericWorker , self ) . __init__ ( ) #NEWLINE#
os . setsid ( ) #NEWLINE#
seen = set ( ) #NEWLINE#
fig . savefig ( 'performance.png' , dpi = 100 ) #NEWLINE#
ax2 = fig . add_subplot ( 2 , 2 , 2 ) #NEWLINE#
"""2015-04-25#SPACE#00:00:00""" #NEWLINE#
a . update ( { 'one' : 1 , 'two' : 2 } ) #NEWLINE#
return Simulation . mocked_method #NEWLINE#
bytearray . fromhex ( '{:0192x}' . format ( lepi_int ) ) #NEWLINE#
sock . bind ( ( '' , 999 ) ) #NEWLINE#
exec ( compile ( open ( 'abc.py' ) . read ( ) , 'abc.py' , 'exec' ) ) #NEWLINE#
mystring . decode ( 'ascii' ) #NEWLINE#
img . save ( buffer , 'PNG' ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( soup . find ( 'div' , { 'class' : 'lyricbox' } ) . string ) #NEWLINE#
print ( '.2f' % d ) #NEWLINE#
combs = [ i for j in range ( 1 , len ( atom ) + 1 ) for i in combinations ( atom , j ) ] #NEWLINE#
select_indices = np . where ( np . logical_or ( x < 1 , x > 5 ) ) #NEWLINE#
print ( line ) #NEWLINE#
df . drop ( labels = [ 'rank' ] , axis = 1 ) #NEWLINE#
draw . ellipse ( ( x - r , y - r , x + r , y + r ) , fill = ( 255 , 0 , 0 , 0 ) ) #NEWLINE#
f . write ( new_text ) #NEWLINE#
g = lambda ** kwargs : f ( kwargs . get ( 'a' , 0 ) , kwargs [ 'b' ] ) #NEWLINE#
x . subs ( [ ( y , z ) , ( x , y ) ] ) #NEWLINE#
inset . set_xlim ( inset_xlimit [ 0 ] , inset_xlimit [ 1 ] , auto = False ) #NEWLINE#
return float ( p [ 1 ] - b [ 1 ] ) / float ( p [ 0 ] - b [ 0 ] ) , p [ 0 ] < b [ 0 ] #NEWLINE#
startupinfo . dwFlags |= _subprocess . STARTF_USESHOWWINDOW #NEWLINE#
return 'Sssshhh,#SPACE#this#SPACE#is#SPACE#a#SPACE#secret' #NEWLINE#
return DataFrame ( { 'class' : [ row [ 'class' ] ] * row [ 'count' ] } ) #NEWLINE#
foo ( [ 'hello' , 'python' , 'world' ] , [ 'python' , 'rules' ] ) #NEWLINE#
raise ValueError ( 'x#SPACE#must#SPACE#be#SPACE#{}#SPACE#long' . format ( n ** 2 ) ) #NEWLINE#
f . write ( s ) #NEWLINE#
struct . pack ( '>B' , 12 ) #NEWLINE#
noop = lambda * args , ** kwargs : None #NEWLINE#
now . timetuple ( ) . tm_isdst #NEWLINE#
set ( a ) == set ( b ) #NEWLINE#
list ( product ( x , flatten ( y ) ) ) #NEWLINE#
print ( 'Hello,#SPACE#' , self . name , '!' ) #NEWLINE#
list ( set ( array2 ) ) #NEWLINE#
MyList = [ inst1 . i , inst2 . i ] #NEWLINE#
return self . send_result #NEWLINE#
global brk1_int_c , brk1_ext_c , brk2_int_c , brk2_ext_c #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
app = wx . PySimpleApp ( ) #NEWLINE#
RNA_integers = [ RNA_dictionary [ i ] for i in RNA_list if i in RNA_dictionary ] #NEWLINE#
df [ 'C' ] = '' #NEWLINE#
print ( twenty . data [ 0 ] ) #NEWLINE#
tgt . close ( ) #NEWLINE#
dict ( ( k , json . dumps ( v ) ) for k , v in list ( json . loads ( val ) . items ( ) ) ) #NEWLINE#
( '%.4f' % k ) . lstrip ( '0' ) #NEWLINE#
win . title ( 'Centered!' ) #NEWLINE#
req . add_header ( 'Referer' , 'http://www.python.org/' ) #NEWLINE#
print ( 'zipfile.namelist():#SPACE#{}' . format ( zipfile . namelist ( ) ) ) #NEWLINE#
print ( line + '#SPACE#!' ) #NEWLINE#
print ( line + '!' ) #NEWLINE#
x1 , y1 , x2 , y2 = itertools . repeat ( 0 , 4 ) #NEWLINE#
res . append ( count ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
eval ( '' . join ( token . lstrip ( '0' ) for token in s . split ( ) ) ) #NEWLINE#
print ( os . path . join ( root , f ) ) #NEWLINE#
my_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
pprint . pprint ( dataDict ) #NEWLINE#
[ '' . join ( v ) for k , v in groupby ( list_1 , key = lambda s : s . startswith ( '>' ) and s ) ] #NEWLINE#
'd' in ( x [ 0 ] for x in tups ) #NEWLINE#
reactor . stop ( ) #NEWLINE#
"""a#SPACE#regex#SPACE#digit:#SPACE#\\d""" #NEWLINE#
m = re . match ( '\\W*productId[^:]*:\\D*(\\d+)' , t ) #NEWLINE#
array ( [ [ 14 , 22 ] , [ 46 , 54 ] ] ) #NEWLINE#
app = wx . App ( redirect = True ) #NEWLINE#
( 2 , 2 , 10 , 10 ) , ( 12 , 8 , 2 , 10 ) #NEWLINE#
result = image . convert ( 'P' , palette = Image . ADAPTIVE , colors = 5 ) #NEWLINE#
file . write ( 'Spam#SPACE#and#SPACE#eggs!\n' ) #NEWLINE#
r . json ( ) [ 'form' ] #NEWLINE#
[ 2 , 3 ] #NEWLINE#
self . request = kwargs . pop ( 'request' , None ) #NEWLINE#
return __import__ ( package ) #NEWLINE#
with open ( 'test.txt' ) as f : #NEWLINE# #INDENT# size = sum ( 1 for _ in f ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
fxn ( ) #NEWLINE#
return '' . join ( shift ( i [ 0 ] ) + i [ 1 : ] for i in answer . split ( '[SHIFT]' ) if i ) #NEWLINE#
strvalue = bytesvalue . decode ( 'utf-8' ) #NEWLINE#
dict ( ( ( 'a' , 2 ) , ) ) #NEWLINE#
screen . update ( ) #NEWLINE#
print ( 'Letter#SPACE##%d#SPACE#is#SPACE#%s/%s' % ( i , lowercase , uppercase ) ) #NEWLINE#
conn . request ( 'POST' , 'http://202.45.139.58:8080/ppod-web' , params , headers ) #NEWLINE#
print ( list ( go ( iter ( lst ) ) ) ) #NEWLINE#
msvcrt . setvbuf ( msvcrt . stdout , None , _IONBF , 0 ) #NEWLINE#
print ( 'co_cellvars#SPACE#=#SPACE#' , test . __code__ . co_cellvars ) #NEWLINE#
print ( 'co_firstlineno#SPACE#=#SPACE#' , test . __code__ . co_firstlineno ) #NEWLINE#
print ( 'co_freevars#SPACE#=#SPACE#' , test . __code__ . co_freevars ) #NEWLINE#
print ( 'co_lnotab#SPACE#=#SPACE#' , test . __code__ . co_lnotab ) #NEWLINE#
print ( 'co_nlocals#SPACE#=#SPACE#' , test . __code__ . co_nlocals ) #NEWLINE#
print ( 'co_stacksize#SPACE#=#SPACE#' , test . __code__ . co_stacksize ) #NEWLINE#
print ( 'isbn:' , book . attrib [ 'isbn' ] ) #NEWLINE#
self . foo . kill ( ) #NEWLINE#
x = np . arange ( 100 ) #NEWLINE#
return result . rename ( columns = { 'B2' : 'B' , 'C2' : 'C' } ) #NEWLINE#
print ( 'Parsing#SPACE#data...' ) #NEWLINE#
sess . run ( [ sparse_update ] ) #NEWLINE#
[ ( 'Dogs' , 'NN' ) , ( 'chase' , 'VB' ) , ( 'cats' , 'NN' ) ] #NEWLINE#
m = [ ( x . start ( ) , x . end ( ) ) for x in re . finditer ( '(\\w)\\1\\1' , s ) ] #NEWLINE#
A [ c1b , r1b ] , A [ c2b , r2b ] = A [ c2b , r2b ] , A [ c1b , r1b ] #NEWLINE#
raise RuntimeError ( 'Something#SPACE#bad#SPACE#happened' ) #NEWLINE#
t . selection_get ( ) #NEWLINE#
print ( lookup [ key ( 1000215555 ) ] ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
pattern = '[-#SPACE#\\[\\]]' #NEWLINE#
print ( 'poll#SPACE#=' , proc . poll ( ) , '("None"#SPACE#means#SPACE#process#SPACE#not#SPACE#terminated#SPACE#yet)' ) #NEWLINE#
x . select ( '//body' ) . extract ( ) #NEWLINE#
br . form [ 'password' ] = 'password.' #NEWLINE#
nochinese = RE . sub ( '' , mystring ) #NEWLINE#
friends = numpy . loadtxt ( 'friends.txt' ) #NEWLINE#
sys . stdout . write ( session . recv ( 4096 ) ) #NEWLINE#
ax . set_xscale ( 'log' ) #NEWLINE#
pattern . match ( 'foo\\/oof#SPACE#/bar\\/bam/#SPACE#baz' ) . group ( 1 ) #NEWLINE#
[ [ next ( a_iter ) for _ in range ( n ) ] for n in b ] #NEWLINE#
Xy = numpy . genfromtxt ( 'yourfile.csv' , delimiter = ',' ) #NEWLINE#
start_response ( '200#SPACE#OK' , headers ) #NEWLINE#
a [ np . ix_ ( index , index ) ] #NEWLINE#
return sum ( range ( start , start + n ) ) #NEWLINE#
subprocess . check_call ( [ 'open' , '--' , path ] ) #NEWLINE#
calculate_something = Mock ( return_value = None ) #NEWLINE#
0 , 0 , 0 , 0 | 0 , 1 , 0 , 1 , 1 , 0 #NEWLINE#
map ( lambda x : x . upper ( ) , [ 'a' , 'b' , 'c' ] ) #NEWLINE#
newdf . iloc [ : 10 , : 5 ] #NEWLINE#
p . kill ( ) #NEWLINE#
arr = np . array ( [ [ 1 , 2 , 3 , 4 , 5 ] , [ 6 , 7 , 8 , 9 , 10 ] ] ) #NEWLINE#
print ( func . __name__ , args , kwargs ) #NEWLINE#
return data [ : size ] #NEWLINE#
f . write ( r . content ) #NEWLINE#
process . stdin . write ( chunk ) #NEWLINE#
return super ( CreateArticle , self ) . form_valid ( form ) #NEWLINE#
plt . show ( ) #NEWLINE#
f = codecs . open ( filename , 'r' , 'cp1251' ) #NEWLINE#
cleanr = re . compile ( '<.*?>' ) #NEWLINE#
verbose_name = 'your#SPACE#text' #NEWLINE#
print ( icons [ I ] + '\x08' , end = '#SPACE#' ) #NEWLINE#
print ( ( self , "is#SPACE#saying#SPACE#'hello'" ) ) #NEWLINE#
print ( ( 'show1:' , self . geometry ( ) ) ) #NEWLINE#
str = '' . join ( [ ( '%s_%s' % ( k , v ) ) for k , v in dict . items ( ) ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
set ( a ) #NEWLINE#
print ( a . data . nbytes + a . indptr . nbytes + a . indices . nbytes ) #NEWLINE#
df . search_term . str . replace ( 'in\\.' , 'in.#SPACE#' ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
print ( json . dumps ( tree , indent = 4 ) ) #NEWLINE#
functools . reduce ( lambda x , y : x + y , test , 'testing' ) #NEWLINE#
h . setdefault ( x , [ ] ) . append ( y ) #NEWLINE#
print ( df [ 'feedback_id' ] . fillna ( df [ '_id' ] ) ) #NEWLINE#
array ( [ [ 1 , 2 , 5 ] , [ 3 , 4 , 6 ] ] ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
df . columns = df . columns . set_levels ( [ 'one' , 'two' ] , level = 0 ) #NEWLINE#
np . intersect1d ( b1 , a ) #NEWLINE#
print ( [ dict [ i ] for i in dict if dict [ i ] >= x ] ) #NEWLINE#
screen . exitonclick ( ) #NEWLINE#
name = models . CharField ( max_length = 150 ) #NEWLINE#
print ( match . groups ( ) ) #NEWLINE#
x1 = y1 = x2 = y2 = 0 #NEWLINE#
workbook = xlrd . open_workbook ( 'test.xlsm' ) #NEWLINE#
top . mainloop ( ) #NEWLINE#
print ( t . timeit ( number = 1 ) ) #NEWLINE#
PyOS_snprintf ( buffer , sizeof ( buffer ) , 'invalid#SPACE#literal#SPACE#for#SPACE#float():#SPACE#%.200s' , s ) #NEWLINE#
self . emitter . append ( e ) #NEWLINE#
self . platforms . append ( e ) #NEWLINE#
ax . set_xlim ( xbnds ) #NEWLINE#
return s . upper ( ) #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
g . add_argument ( 'files' , nargs = '*' , default = None ) #NEWLINE#
self . text . insert ( 'end' , "Select#SPACE#part#SPACE#of#SPACE#text#SPACE#and#SPACE#then#SPACE#click#SPACE#'Bold'..." ) #NEWLINE#
df . to_csv ( s ) #NEWLINE#
a . sort ( key = lambda d : list ( d . values ( ) ) [ 0 ] , reversed = True ) #NEWLINE#
result_dict . setdefault ( x . key , [ ] ) . append ( x . value ) #NEWLINE#
self . driver . get ( 'http://www.italki.com/entries/korean' ) #NEWLINE#
self . button . clicked . connect ( self . handleButton ) #NEWLINE#
sum_cubes ( terms = [ 1 , 2 , 3 ] ) #NEWLINE#
dic [ i ] . append ( j ) #NEWLINE#
app . config . from_pyfile ( 'config.py' ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
database [ 'test' ] . insert ( { 'name' : 'foo' } ) #NEWLINE#
print ( 'hi' ) #NEWLINE#
eval ( command ) #NEWLINE#
cmap = mcolors . ListedColormap ( [ ( 0 , 0 , 1 ) , ( 0 , 1 , 0 ) , ( 1 , 0 , 0 ) ] ) #NEWLINE#
connection . close ( ) #NEWLINE#
yieldnext = line . startswith ( '@CAR_NAME' ) #NEWLINE#
plt . clf ( ) #NEWLINE#
my_dict [ 'k3' ] . append ( 1 ) #NEWLINE#
x = [ [ i ] for i in range ( 10 ) ] #NEWLINE#
ax . xaxis . set_ticklabels ( df [ 'g' ] ) #NEWLINE#
gcs_file = gcs . open ( filename , 'w' , content_type = 'audio/mp3' ) #NEWLINE# gcs_file . write ( buf . encode ( 'utf-8' ) ) #NEWLINE# gcs_file . close ( ) #NEWLINE#
[ len ( set ( i ) ) for i in data . reshape ( data . shape [ 0 ] , - 1 ) ] #NEWLINE#
print ( repr ( html_to_text ( html ) ) ) #NEWLINE#
setup . py #NEWLINE#
[ 19139 , 19138 , 19140 , 19139 , 19140 ] #NEWLINE#
list . append ( run ( i [ 0 ] , i [ 1 ] , i [ 2 ] ) ) #NEWLINE#
shell . SendKeys ( '%' ) #NEWLINE#
platform . system ( ) #NEWLINE#
conn . send ( 'exit\r' ) #NEWLINE#
subprocess . call ( [ 'kill' , '-9' , '%d' % proc . pid ] ) #NEWLINE#
self . Raise ( ) #NEWLINE#
__declspec ( dllexport ) #NEWLINE#
x = [ 1 , 2 , 3 ] + [ 4 , 5 ] #NEWLINE#
min ( timeit . repeat ( lambda : dict ( [ ( k , v ) for k , v in zip ( keys , values ) ] ) ) ) #NEWLINE#
inFile . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ] #NEWLINE#
return super ( UserViewSet , self ) . get_object ( ) #NEWLINE#
plt . xlim ( 0 , 9 ) #NEWLINE#
CONNECTION = MongoClient ( '/tmp/mongodb-27017.sock' ) #NEWLINE#
ps = subprocess . Popen ( ( 'ps' , '-A' ) , stdout = subprocess . PIPE ) #NEWLINE#
stdscr . addstr ( 'This#SPACE#is#SPACE#correct!' ) #NEWLINE#
stdscr . addstr ( 'Exiting!\n' ) #NEWLINE#
printf ( '%f#SPACE#' , arr [ i ] [ j ] ) #NEWLINE#
ax . contourf ( X , Y , Z , zdir = 'z' , offset = - 1 , cmap = plt . cm . hot ) #NEWLINE#
"""кириллический""" #NEWLINE#
return str ( self . i ) #NEWLINE#
reversed ( lines ) #NEWLINE#
map ( functools . partial ( f , y = fixed ) , srclist ) #NEWLINE#
a = np . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE#
self . maximize . setIcon ( QtGui . QIcon ( 'img/max.png' ) ) #NEWLINE#
stdout_thread . start ( ) #NEWLINE#
a . reshape ( a . shape [ 0 ] // n , n , a . shape [ 1 ] ) . sum ( 1 ) #NEWLINE#
engine = sa . create_engine ( 'postgresql:///somedb' ) #NEWLINE#
self . button . Bind ( wx . EVT_BUTTON , self . OnButton ) #NEWLINE#
_mirrored_op = { '__eq__' : '__eq__' , '__ne__' : '__ne__' , '__lt__' : '__ge__' , #NEWLINE# '__le__' : '__gt__' , '__ge__' : '__lt__' , '__gt__' : '__le__' } #NEWLINE#
the_frame = pd . read_sql_table ( name_of_table , engine ) #NEWLINE#
pickle . dump ( data , fp ) #NEWLINE#
ax . set_yticks ( numpy . arange ( 0 , 1.0 , 0.1 ) ) #NEWLINE#
grouped . sort ( key = itemgetter ( 1 ) , reverse = True ) #NEWLINE#
plt . style . use ( 'ggplot' ) #NEWLINE#
list2 = [ 'T' , 'P' , 'M' , 'M' , 'A' , 'R' , 'k' , 'S' , 'G' , 'C' , 'N' ] #NEWLINE#
a . close ( ) #NEWLINE#
heapq . heappush ( heap , ( - prod1 , x - 1 , y ) ) #NEWLINE#
im . save ( 'icon.gif' , transparency = transparency ) #NEWLINE#
fruit = [ df . columns [ row . astype ( bool ) ] . tolist ( ) for row in df . values ] #NEWLINE#
app = Flask ( __name__ , static_url_path = '/' ) #NEWLINE#
discoverer . connect ( 'discovered' , on_discovered ) #NEWLINE#
sys . modules [ 'location.old.script' ] = script #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
self . canvas . scale ( ALL , x , y , self . scale , self . scale ) #NEWLINE#
limit = int ( limit ) #NEWLINE#
print ( a . to ( 'dimensionless' ) ) #NEWLINE#
print ( ana [ 'href' ] ) #NEWLINE#
window = gtk . Window ( ) #NEWLINE#
chris . userprofile . followed_by . all ( ) #NEWLINE#
two_d [ [ 0 , 1 ] , [ 3 , 4 ] ] #NEWLINE#
renormalize = true #NEWLINE#
keys = [ k for k in scores if scores [ k ] == scores [ key ] ] #NEWLINE#
s . cookies . set ( cookie [ 'name' ] , cookie [ 'value' ] ) #NEWLINE#
pow ( Decimal ( '2' ) , Decimal ( '2' ) ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
[ { k : d [ k ] } for k in sorted ( d ) ] #NEWLINE#
for i in range ( 1 , 10 ) : #NEWLINE# #INDENT# string = 'string' + str ( i ) #NEWLINE#
form = SomeModelForm ( request . POST or None , initial = { 'option' : '10' } ) #NEWLINE#
cset = ax . contourf ( X , Y , Z , zdir = 'y' , offset = 40 , cmap = plt . cm . jet ) #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
r = re . compile ( '(?:[^,(]|\\([^)]*\\))+' ) #NEWLINE#
( lambda j : lambda x : x == j or x % j != 0 ) ( i ) #NEWLINE#
"""{{course_codes[s.course]}}""" #NEWLINE#
z = a [ 0 ] * b [ 1 ] - a [ 1 ] * b [ 0 ] #NEWLINE#
main . py #NEWLINE#
print ( decimal . Decimal ( '3.14' ) ) #NEWLINE#
j = urllib . request . urlopen ( 'http://site.com/data.json' ) #NEWLINE#
list ( traverse ( t , 'pre' ) ) , list ( traverse ( t , 'in' ) ) , list ( traverse ( t , 'post' ) ) #NEWLINE#
re . match ( 'world' , testString ) #NEWLINE#
[ ( 'c' , 1 ) , ( 'd' , 2 ) , ( 'g' , 4 ) , ( 'f' , 3 ) , ( 'i' , 5 ) , ( 'j' , 6 ) ] #NEWLINE#
df . select ( lambda x : not re . search ( 'Test\\d+' , x ) , axis = 1 ) #NEWLINE#
{ 'a' : 1 , 'b' : 2 } #NEWLINE#
schema . Column ( 'created' , types . TIMESTAMP ( ) , default = now ( ) ) , #NEWLINE#
m . getdate ( 'Date' ) #NEWLINE#
d = dict ( matches ) #NEWLINE#
old_array = [ [ 2 , 3 ] , [ 4 , 5 ] ] #NEWLINE# new_array = map ( list , old_array ) #NEWLINE#
pprint ( response . json ( ) [ 'headers' ] ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#printed#SPACE#on#SPACE#stdout' ) #NEWLINE#
subprocess . call ( cmd ) #NEWLINE#
[ dic [ k ] for k in sorted ( dic ) ] #NEWLINE#
allcols = row . findAll ( 'td' ) #NEWLINE#
outfile . write ( 'write#SPACE#your#SPACE#data' ) #NEWLINE#
return Response ( 'Access#SPACE#denied' ) #NEWLINE#
img_float = img . copy ( ) . astype ( 'float' ) #NEWLINE#
grid_2 = wx . GridSizer ( 10 , 3 , 0 , 0 ) #NEWLINE#
plt . imshow ( img ) #NEWLINE#
print ( '%i#SPACE#words#SPACE#in#SPACE#list' % len ( words ) ) #NEWLINE#
self . _id = uuid1 ( ) . urn #NEWLINE#
termios . tcsetattr ( sys . stdin , termios . TCSADRAIN , orig_settings ) #NEWLINE#
dbQueryModel . itemData ( treeView . selectedIndexes ( ) [ 0 ] ) #NEWLINE#
bp . stdout . readline ( ) #NEWLINE#
print ( eformat ( 1.1e+123 , 4 , 4 ) ) #NEWLINE#
frame . grid ( ) #NEWLINE#
logging . basicConfig ( filename = 'foo' , level = logging . DEBUG ) #NEWLINE#
return iter ( self . books . values ( ) ) #NEWLINE#
min ( zip ( Lat , Lon ) , key = operator . itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
s . index ( 'r' ) #NEWLINE#
print ( '<%-*s>' % ( len ( text ) + 2 , text ) ) #NEWLINE#
ax . set_xticks ( np . arange ( - 0.5 , width , 1 ) , minor = True ) #NEWLINE#
"""hello""" . index ( 'l' ) #NEWLINE#
print ( sys . argv [ 0 ] ) #NEWLINE#
a = numpy . array ( [ [ 2 , 3 , 2 ] , [ 5 , 6 , 1 ] ] ) #NEWLINE#
print ( '<table>' ) #NEWLINE#
pivots = np . zeros ( ( m , n ) , intc ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
dates = pd . to_datetime ( pd . Series ( [ '20010101' , '20010331' ] ) , format = '%Y%m%d' ) #NEWLINE#
return GF4 ( self . __addL__ [ self . number ] [ x ] ) #NEWLINE#
return list ( groups . values ( ) ) #NEWLINE#
plt . figure ( ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
d = { 'a' : 10 , 'b' : 20 , 'c' : 30 } #NEWLINE# newd = [ ( 'a' , 10 ) , ( 'b' , 20 ) , ( 'c' , 30 ) ] #NEWLINE#
ax . autoscale ( ) #NEWLINE#
cap . release ( ) #NEWLINE#
[ 5 , 5 , 5 , 4 ] #NEWLINE#
res = df . groupby ( [ 'VehID' , 'Material' ] ) [ 'JobNo' ] . apply ( list ) . reset_index ( ) #NEWLINE# res #NEWLINE#
print ( 'No#SPACE#data' ) #NEWLINE#
print ( np . arange ( 100 ) . nbytes ) #NEWLINE#
a = np . zeros ( ( 2 , 3 , 4 ) ) #NEWLINE#
img = cv2 . imread ( 'mCOFl.png' ) #NEWLINE#
print ( df . head ( ) ) #NEWLINE#
y . reshape ( 2 , 1 ) - x #NEWLINE#
self . urls_seen . add ( request . url ) #NEWLINE#
self . send_blob ( blobstore . BlobInfo . get ( blob_key ) , save_as = True ) #NEWLINE#
foo [ : - 3 ] . strip ( ) #NEWLINE#
html = df . to_html ( ) . replace ( '<table' , '<table#SPACE#class="tableBoot"#SPACE#id="myTable"' ) #NEWLINE#
print ( '<title>#SPACE#MyPythonWebpage#SPACE#</title>' ) #NEWLINE#
TRUE = 1 #NEWLINE#
setattr ( fundamentalconstants , name , value ) #NEWLINE#
print ( 'Real#SPACE#rsync:' ) #NEWLINE#
s = [ '1' , '2' , '3.4' , '5.6' , '7.8' ] #NEWLINE# [ ( int ( i ) if i . isdigit ( ) else float ( i ) ) for i in s ] #NEWLINE#
fp . write ( '<html><body>\n' ) #NEWLINE#
plt . scatter ( X , Y ) #NEWLINE#
[ s [ i : i + 3 ] for i in range ( len ( s ) - 2 ) ] #NEWLINE#
f . open ( mode = 'rb' ) #NEWLINE#
print ( "They're#SPACE#there!" ) #NEWLINE#
do_something_with ( x ) #NEWLINE#
sns . distplot ( a , bins = list ( range ( 1 , 110 , 10 ) ) , ax = ax , kde = False ) #NEWLINE#
QMainWindow . __init__ ( self , parent ) #NEWLINE#
proc . communicate ( ) #NEWLINE#
mystr = '0110100001100101011011000110110001101111' #NEWLINE# [ mystr [ i : i + 8 ] for i in range ( 0 , len ( mystr ) , 8 ) ] #NEWLINE#
np . allclose ( df_norm . values . dot ( coef ) , pca . fit_transform ( df_norm . values ) ) #NEWLINE#
ax [ 1 ] . set_title ( 'Proxy#SPACE#markers' ) #NEWLINE#
my_dict [ k ] . append ( dict1 [ k ] ) #NEWLINE#
df [ 'a' ] . drop_duplicates ( ) . values . tolist ( ) #NEWLINE#
[ i for i in mysites if i not in list ( sites . keys ( ) ) ] #NEWLINE#
chr ( 65 ) #NEWLINE#
pyplot . plot ( x , y ) #NEWLINE#
[ index_dict [ x ] for x in b ] #NEWLINE#
ax1 . set_ylabel ( 'volt' ) #NEWLINE#
p . get_open_files ( ) #NEWLINE#
logger . addHandler ( handler2 ) #NEWLINE#
x = np . asarray ( x ) #NEWLINE#
all ( c in string . hexdigits for c in s ) #NEWLINE#
m = coo_matrix ( ( values , ( row , col ) ) , shape = ( nrows , ncols ) , dtype = float ) #NEWLINE#
raise ValueError ( 'Invalid#SPACE#input:#SPACE#%s' % val ) #NEWLINE#
repo . git . push ( 'origin' , 'feature4' ) #NEWLINE#
return QtGui . QMainWindow . eventFilter ( self , widget , event ) #NEWLINE#
fig , ax = plt . subplots ( ncols = 2 ) #NEWLINE#
print ( G . edges ( ) ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
x . append ( l ) #NEWLINE#
models . ForeignKey . __init__ ( self , User , null = True , ** kwargs ) #NEWLINE#
return zip ( a , b ) #NEWLINE#
a /= n [ : , ( None ) ] #NEWLINE#
main . config . from_object ( config ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd2' , 'd3' , 'd1' ] #NEWLINE#
return cPickle . load ( f ) #NEWLINE#
img = cv2 . imread ( 'img.png' , cv2 . IMREAD_COLOR ) #NEWLINE#
l = [ [ 'x1' , 'y1' ] , [ 'x2' , 'y2' ] ] #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
s . replace ( { 'ape' : 'lion' , 'monkey' : 'panda' } ) #NEWLINE#
lists = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE# np . array ( lists ) #NEWLINE#
perms = [ '' . join ( p ) for p in permutations ( 'stacks' ) ] #NEWLINE#
plt . plot ( freqs [ idx ] , ps [ idx ] ) #NEWLINE#
plt . ylabel ( 'axis#SPACE#2' ) #NEWLINE#
root . attributes ( '-alpha' , 1.0 ) #NEWLINE#
ax2 . set_ylim ( 0 , 2 ) #NEWLINE#
print ( info . get_content_type ( ) ) #NEWLINE#
self . ax . set_ylim3d ( FLOOR , CEILING ) #NEWLINE#
return sum ( scipy . stats . hypergeom . pmf ( k , N , M , Q ) for k in range ( 1 , Q + 1 ) ) #NEWLINE#
db . model_to_protobuf ( your_entity ) #NEWLINE#
xr . open_dataset ( 'myds.nc' ) #NEWLINE#
list ( combinations ( x , 2 ) ) #NEWLINE#
thirdpartymodule1 . py #NEWLINE#
thirdpartymodule2 . py #NEWLINE#
zip ( l , combinations ( reversed ( l ) , len ( l ) - 1 ) ) #NEWLINE#
self . send ( message ) #NEWLINE#
plt . show ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
c . execute ( 'create#SPACE#table#SPACE#test#SPACE#(col1,col2)' ) #NEWLINE#
x . split ( ) #NEWLINE#
client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
start_response ( '200#SPACE#OK' , [ ( 'Content-Type' , 'text/plain' ) ] ) #NEWLINE#
new_array = new_array . reshape ( old_array . shape ) #NEWLINE#
padded_input = tf . pad ( input , [ [ 0 , 0 ] , [ 2 , 2 ] , [ 1 , 1 ] , [ 0 , 0 ] ] , 'CONSTANT' ) #NEWLINE#
leg . legendHandles [ 0 ] . set_color ( 'red' ) #NEWLINE#
{ { ( mylist | slice ) : '3:' } } #NEWLINE#
data = data [ ~ np . isnan ( data ) . any ( axis = 1 ) ] #NEWLINE#
p . stdin . write ( 'user\n' ) #NEWLINE#
child . sendline ( mypassword ) #NEWLINE#
print ( int ( x ) ) #NEWLINE#
my_set = set ( map ( str . strip , open ( 'filename.txt' ) ) ) #NEWLINE#
return render_to_response ( 'app/template.html' , context ) #NEWLINE#
pygame . draw . rect ( game_display , ( 0 , 0 , 0 ) , rect_old ) #NEWLINE#
print ( 'outside#SPACE#range' ) #NEWLINE#
list ( csv . reader ( StringIO ( '2,"dat,a1",\'dat,a2\',' ) , skipinitialspace = True ) ) #NEWLINE#
d = { 'foo' : 123 , 'bar' : 456 } #NEWLINE#
DEBUG = True #NEWLINE#
np . argmin ( abs ( f2 - f1 ) ) #NEWLINE#
date2 = dateutil . parser . parse ( 'January#SPACE#1st,#SPACE#2009' ) #NEWLINE#
regex . findall ( string ) #NEWLINE#
ax . plot ( [ 3 , 2 , 1 ] , 'ro' ) #NEWLINE#
ax . plot ( x , x ) #NEWLINE#
tar = tarfile . TarFile ( 'test.tar' , 'w' ) #NEWLINE#
chmod + x / home / randy / lib / python / gbmx . py #NEWLINE#
L1 = [ [ 0 , 50 ] , [ 7.75 , 120 ] , [ 10.25 , 70 ] , [ 17 , 100 ] , [ 20 , 60 ] ] #NEWLINE#
from bs4 import BeautifulSoup #NEWLINE#
print ( min ( l , key = lambda x : x . rsplit ( None , 1 ) [ - 1 ] ) ) #NEWLINE#
mat_array = cv . fromarray ( numpy_array ) #NEWLINE#
round ( 2.675 , 2 ) #NEWLINE#
'(\ud83c[\udf00-\udfff]|\ud83d[\udc00-\ude4f\ude80-\udeff]|[☀-⛿✀-➿])+' #NEWLINE#
"""[🌀-🙏🚀-🛿☀-⛿✀-➿]+""" #NEWLINE#
s = p . sub ( process_match , s ) #NEWLINE#
big_regex . sub ( 'swords' , 'a#SPACE#sample#SPACE#message#SPACE#with#SPACE#random#SPACE#words' ) #NEWLINE#
printf ( '\n' ) #NEWLINE#
return sum ( range ( a + a % 2 , b + 1 , 2 ) ) #NEWLINE#
pd . DataFrame ( d ) #NEWLINE#
dict_ . update ( ( prefix , value ) for prefix in prefixes ) #NEWLINE#
rotn = np . degrees ( np . arctan2 ( y [ : , 1 : ] - y [ : , : - 1 ] , x [ : , 1 : ] - x [ : , : - 1 ] ) ) #NEWLINE#
gui . root . mainloop ( ) #NEWLINE#
Foo ( ) #NEWLINE#
numpy . arange ( 11 , 17 , 0.5 ) #NEWLINE#
j = i . replace ( '#SPACE#' , '' ) #NEWLINE#
driver . get ( 'http://stackoverflow.com/' ) #NEWLINE#
driver . get ( 'http://www.google.com/' ) #NEWLINE#
toolbar . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
changeX ( ) #NEWLINE#
list . append ( [ ] ) #NEWLINE#
a = [ '5' , '6' ] #NEWLINE# sum ( Decimal ( i ) for i in a ) #NEWLINE#
myarray [ x . group ( 1 ) ] = [ x . group ( 2 ) ] #NEWLINE#
d = MyOrderedDict ( [ ( 'a' , '1' ) , ( 'b' , '2' ) ] ) #NEWLINE#
driver . set_script_timeout ( 10 ) #NEWLINE#
ax2 . plot ( x , y ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
mdfont = int ( input ( 'Font#SPACE#size?#SPACE#' ) ) #NEWLINE#
sql = 'INSERT#SPACE#INTO#SPACE#TABLE_A(COL_A,COL_B)#SPACE#VALUES(%s,#SPACE#%s)' #NEWLINE#
Gtk . main ( ) #NEWLINE#
do_something ( f . result ( ) ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
return lambda _ : f ( ) #NEWLINE#
image = Image . open ( data ) #NEWLINE#
"""select#SPACE#MessageTime,#SPACE#Value#SPACE#from#SPACE#[%s]#SPACE#where#SPACE#Subsystem=%s#SPACE#and#SPACE#Field=%s#SPACE#and#SPACE#MessageTime#SPACE#>#SPACE#%s#SPACE#and#SPACE#MessageTime#SPACE#<#SPACE#%s""" #NEWLINE#
session . close ( ) #NEWLINE#
result = '' . join ( i for i in s if not i . isdigit ( ) ) #NEWLINE#
client . connect ( ( ip , port ) ) #NEWLINE#
limitx = random . choice ( [ 0 , 1 ] ) #NEWLINE#
list ( range ( string . ascii_lowercase ) ) #NEWLINE#
dt_obj = datetime . datetime . strptime ( testeddate , '%m/%d/%Y' ) #NEWLINE#
pdf_im = pyPdf . PdfFileReader ( file ( 'multi_page.pdf' , 'rb' ) ) #NEWLINE#
b = np . identity ( A . shape [ 2 ] , dtype = A . dtype ) #NEWLINE#
q = mp . Queue ( ) #NEWLINE#
[ 'Arts#SPACE#&#SPACE#Entertainment' , 'Animation#SPACE#&#SPACE#Comics' ] , #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
img . scale ( ( 150 , 100 ) , 'lanczos' ) #NEWLINE#
nx . traversal . dfs_successors ( G ) #NEWLINE#
filedata = open ( filename , encoding = 'other-single-byte-encoding' ) . read ( ) #NEWLINE#
sys . stdout . write ( out ) #NEWLINE#
db , host , user , password = user_list [ 0 ] #NEWLINE#
INTERNAL_IPS = '0.0.0.0' , '127.0.0.1' #NEWLINE#
foo ( np . eye ( 3 ) , [ 1 , 2 , 3 ] , axis = 1 ) #NEWLINE#
self . sizer . Add ( self . canvas , 1 , wx . LEFT | wx . TOP | wx . GROW ) #NEWLINE#
return { k : v for k , v in list ( d . items ( ) ) if k not in excluded_keys } #NEWLINE#
list_of_ids = Bs . objects . values_list ( 'id_field' , flat = True ) #NEWLINE#
l [ len ( l ) : ] = [ 11 ] #NEWLINE#
ax . w_zaxis . set_major_formatter ( FormatStrFormatter ( '%.03f' ) ) #NEWLINE#
from functools import reduce #NEWLINE# print ( reduce ( operator . iand , map ( set , x ) ) ) #NEWLINE#
max ( len ( i [ j ] ) for i in x ) #NEWLINE#
df . index [ ( df == window_stop_row ) . all ( axis = 1 ) ] #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 3 ) ) #NEWLINE#
combine_date_time ( df , 'Date' , 'Time' ) #NEWLINE#
from functools import reduce #NEWLINE# df . groupby ( 'A' ) . B . apply ( lambda x : reduce ( set . union , x . map ( set ) ) ) #NEWLINE#
event . listen ( engine , 'connect' , _fk_pragma_on_connect ) #NEWLINE#
result [ - 1 ] . append ( thetext ) #NEWLINE#
pd . Timestamp ( datetime . date ( 2013 , 12 , 25 ) ) #NEWLINE#
with open ( the_filename , 'rb' ) as f : #NEWLINE# #INDENT# my_list = pickle . load ( f ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
"""{:,.{n}f}#SPACE#{}""" . format ( 1234.567 , 'USD' , n = 2 ) #NEWLINE#
[ max ( min ( x , 255 ) , 0 ) for x in oldList ] #NEWLINE#
ctrl + shift + numpad1 + numpad2 + numpad3 + numpad4 + numpad5 + numpad6 #NEWLINE#
def obj_dict ( obj ) : #NEWLINE# #INDENT# return obj . __dict__ #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# json_string = json . dumps ( list_name , default = obj_dict ) #NEWLINE#
QtWebKit . QWebView . __init__ ( self ) #NEWLINE#
dom3 = parseString ( '<myxml>Some#SPACE#data<empty/>#SPACE#some#SPACE#more#SPACE#data</myxml>' ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
for idx in range ( len ( li ) ) : #NEWLINE# #INDENT# li [ idx ] = 'foo' #NEWLINE#
df [ 'year' ] = df [ 'ArrivalDate' ] . dt . year #NEWLINE# df [ 'month' ] = df [ 'ArrivalDate' ] . dt . month #NEWLINE#
sc = SparkContext ( 'local' , 'foo' ) #NEWLINE#
ssl . OPENSSL_VERSION #NEWLINE#
root . mainloop ( ) #NEWLINE#
super ( SecondBase , self ) . __init__ ( ** kwargs ) #NEWLINE#
return [ self [ i ] for i in index ] #NEWLINE#
plot_date ( a , 2 ) #NEWLINE#
pip . main ( [ 'install' , 'numpy' ] ) #NEWLINE#
"""<p>This#SPACE#is#SPACE#a#SPACE#paragraph.</p><p>This#SPACE#is#SPACE#another#SPACE#paragraph.</p>""" #NEWLINE#
f = Frame ( root , bg = 'orange' , width = 500 , height = 500 ) #NEWLINE#
plt . legend ( title = 'Line' , loc = 'upper#SPACE#left' , handles = handles [ : : - 1 ] ) #NEWLINE#
[ 0.269944 , 0.014625 , 0.341379 ] , #NEWLINE#
[ 0.983868 , 0.904867 , 0.136897 ] , #NEWLINE#
df . columns #NEWLINE#
a = [ 'Tests#SPACE#run:#SPACE#1' , '#SPACE#Failures:#SPACE#0' , '#SPACE#Errors:#SPACE#0' ] #NEWLINE#
plt . plot ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) #NEWLINE#
d [ 'k' ] = d [ 'k' ] + 1 if 'k' in d else 0 #NEWLINE#
bar ( ) #NEWLINE#
store . insert ( None , - 1 , [ 'B' , 'Task#SPACE#B' ] ) #NEWLINE#
store . insert ( None , - 1 , [ 'C' , 'Task#SPACE#C' ] ) #NEWLINE#
passer ( ) #NEWLINE#
df . select ( explode ( split ( col ( 'word' ) , '\\s+' ) ) . alias ( 'word' ) ) . show ( ) #NEWLINE#
print ( ',#SPACE#' . join ( map ( str , chain ( a , b ) ) ) ) #NEWLINE#
test [ 3 : ] = [ 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
f . close ( ) #NEWLINE#
merged [ k ] . append ( d2 [ k ] ) #NEWLINE#
print ( d [ 2 ] ) #NEWLINE#
start_response ( status , headers ) #NEWLINE#
ax . set_ylabel ( 'Percent#SPACE#(%)' ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
ax . contourf ( X , Y , Z , zdir = 'y' , offset = 4 , cmap = plt . cm . hot ) #NEWLINE#
a = Counter ( your_list ) #NEWLINE# print ( a [ '1' ] ) #NEWLINE#
return form #NEWLINE#
print ( a ) #NEWLINE#
wordslist = line . split ( ) #NEWLINE#
palette . set_bad ( alpha = 0.0 ) #NEWLINE#
display ( fig ) #NEWLINE#
[ [ 1 , 'Foo' ] , [ 5 , 'Bar' ] ] #NEWLINE#
"""(?!\\})""" #NEWLINE#
c_mat1 = np . tensordot ( Q , a1 , axes = ( [ - 1 ] , [ 0 ] ) ) #NEWLINE#
img . save ( 'image.tiff' ) #NEWLINE#
start_time = time . time ( ) #NEWLINE#
p . join ( ) #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
data [ 0 , 0 ] = [ 1 , 2 ] #NEWLINE#
area = cv2 . contourArea ( contour ) #NEWLINE#
{ 'a' : 1 , 'b' : 2 , 'extra' : 'stuff' } #NEWLINE#
numpy . random . seed ( 1 ) #NEWLINE#
print ( test [ 'a' ] [ i ] , test [ 'b' ] [ i ] ) #NEWLINE#
udata . encode ( 'latin-1' ) #NEWLINE#
mapping = [ ( 'A' , '1' ) , ( 'B' , '2' ) , ( 'C' , '3' ) , ( 'D' , '4' ) , ( 'E' , '5' ) ] #NEWLINE#
copydir ( 'windows' , 'modname' ) #NEWLINE#
img = driver . find_element_by_xpath ( '//div[@id="recaptcha_image"]/img' ) #NEWLINE#
df #NEWLINE#
print ( [ elm [ 'data-js' ] for elm in soup . find_all ( attrs = { 'data-js' : True } ) ] ) #NEWLINE#
ax [ 1 ] . imshow ( np . random . rand ( 30 , 30 ) , interpolation = 'none' , cmap = cmap2 ) #NEWLINE#
locale . currency ( float ( cents ) / 100.0 ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""0x0037BB6A""" #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
rows . append ( { 'dns' : r [ 0 ] , 'ip' : r [ 1 ] , 'description' : r [ 2 ] } ) #NEWLINE#
dict ( d ) #NEWLINE#
profile = webdriver . FirefoxProfile ( ) #NEWLINE#
bar ( ind , num , width , color = colors ) #NEWLINE#
sck = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE# sck . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
plt . ylabel ( '$y\\mathrm{-axis}$' ) #NEWLINE#
spherical_dist ( locations_1 [ : , ( None ) ] , locations_2 ) #NEWLINE#
ax . xaxis . set_major_formatter ( daysFmt ) #NEWLINE#
scene = bpy . data . scenes [ 'Scene' ] #NEWLINE#
fd = os . open ( 'y' , os . O_WRONLY | os . O_CREAT | os . O_EXCL ) #NEWLINE#
f = open ( 'example' , 'r' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
( - 3 , 10 ) [ - 3 , - 2 , - 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
df . to_hdf ( 'file.h5' , f , df ) #NEWLINE#
sort ( data , key = tiebreakerkey ) #NEWLINE#
df [ 'C' ] = df [ [ 'A' , 'B' ] ] . max ( axis = 1 ) #NEWLINE# df #NEWLINE#
subprocess . call ( cmd , shell = True ) #NEWLINE#
plt . show ( ) #NEWLINE#
request . GET [ 'section' ] #NEWLINE#
print ( tailq . get_nowait ( ) ) #NEWLINE#
ws . cell ( row = 1 , column = 1 ) . hyperlink = link #NEWLINE#
return Response ( status = 204 ) #NEWLINE#
client = Client ( 'http://10.10.10.10/p.wsdl' ) #NEWLINE#
nltk . download ( 'maxent_treebank_pos_tagger' ) #NEWLINE#
self . origstream = sys . stdout #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
im . save ( 'logo_py.png' , transparency = 0 ) #NEWLINE#
def save_model ( self , request , obj , form , change ) : #NEWLINE# #INDENT# obj . save ( ) #NEWLINE#
Entry . objects . bulk_create ( [ Entry ( name = x ) for x in a ] ) #NEWLINE#
return list ( product ( * map ( lambda x : list ( range ( x [ 0 ] , x [ 1 ] + 1 ) ) , args ) ) ) #NEWLINE#
Row ( ** OrderedDict ( sorted ( row_dict . items ( ) ) ) ) #NEWLINE#
plot . append ( axE ) #NEWLINE#
plot . append ( axPA ) #NEWLINE#
d3 = { v : k for k , v in list ( d1 . items ( ) ) } #NEWLINE#
pyversion ( 'path/to/python' ) #NEWLINE#
writer = csv . writer ( output ) #NEWLINE#
print ( '%.3f' % round ( 0.3125 , 3 ) ) #NEWLINE#
self . button . config ( text = 'LED#SPACE#0#SPACE#ON' ) #NEWLINE#
cast ( a , POINTER ( c_int ) ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
map . redirect ( '/*(url)/' , '/{url}' , _redirect_code = '301#SPACE#Moved#SPACE#Permanently' ) #NEWLINE#
return lst [ - 1 : ] + reverse ( lst [ : - 1 ] ) #NEWLINE#
os . system ( 'CLS' ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'none' ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
parameters = Schema ( { Required ( 'zip' ) : Coerce ( int ) } ) #NEWLINE#
p . start ( ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
struct . pack ( 'B' * len ( integers ) , * integers ) #NEWLINE#
main ( sys . argv ) #NEWLINE#
Qt . QFrame . paintEvent ( self , event ) #NEWLINE#
IOLoop . current ( ) . run_sync ( runner ) #NEWLINE#
print ( df . sort_values ( by = 'class' ) ) #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
def removearticles ( text ) : #NEWLINE# #INDENT# re . sub ( '\\s+(a|an|and|the)(\\s+)' , '\x02' , text ) #NEWLINE#
with open ( 'obj/' + name + '.pkl' , 'rb' ) as f : #NEWLINE# #INDENT# return pickle . load ( f ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
return render_to_response ( 'my_template.html' , { 'data' : data } ) #NEWLINE#
re . search ( '\\[\\[([^\\]|]*)(?=.*\\]\\])' , '[[aaa|bbb]]' ) . group ( 1 ) #NEWLINE#
plt . plot ( X , Y ) #NEWLINE#
print ( OrderedDict . fromkeys ( s ) ) #NEWLINE#
list ( grouper ( 3 , list ( range ( 10 ) ) ) ) #NEWLINE#
os . close ( sys . stderr . fileno ( ) ) #NEWLINE#
self . figure . set_facecolor ( ( 1 , 1 , 1 ) ) #NEWLINE#
image = np . zeros ( ( max_x , max_y ) ) #NEWLINE# image [ coordinates ] = 1 #NEWLINE#
win . mainloop ( ) #NEWLINE#
writer . writerow ( out ) #NEWLINE#
wsh . SendKeys ( 'a' ) #NEWLINE#
x = np . linspace ( 0 , 2 * np . pi , 100 ) #NEWLINE#
i . write ( 'line2#SPACE#qwer\n' ) #NEWLINE#
i . write ( 'line3#SPACE#zxcv#SPACE#asdf' ) #NEWLINE#
i . write ( 'line4#SPACE#tyui\n' ) #NEWLINE#
i . write ( 'line5#SPACE#hjkl\n' ) #NEWLINE#
i . write ( 'line6#SPACE#mnbv' ) #NEWLINE#
1.0j * numpy . inf #NEWLINE#
lib . some_function ( lib . some_callback ) #NEWLINE#
area = img . crop ( box ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ 'table' , 'apple' , 'chair' , 'table' , 'cupboard' ] #NEWLINE#
elements = [ e for e in bs . <VAR0> ( 'a' ) if reg . match ( e . text ) ] #NEWLINE#
Base . objects . all ( ) . select_subclasses ( ) #NEWLINE#
f2 . write ( line ) #NEWLINE#
grid . grid ( sticky = N + S + E + W , column = 0 , row = 7 , columnspan = 2 ) #NEWLINE#
df [ 'rtrend' ] . ffill ( ) #NEWLINE#
f128 = numpy . frombuffer ( file . read ( 16 ) , dtype = numpy . float128 ) #NEWLINE#
ssh . connect ( host , username = username , password = password ) #NEWLINE#
return self . est . predict_proba ( X ) [ : , ( 1 ) ] #NEWLINE#
q = 'uri:http\\://www.example.com' #NEWLINE#
ImageGrab . grab ( ) . crop ( ( x , y , x1 , y1 ) ) . save ( 'file#SPACE#path#SPACE#here' ) #NEWLINE#
np . tile ( v , ( 1 , 2 ) ) #NEWLINE#
[ 1 , 2 , 3 ] , #NEWLINE#
pdfmetrics . registerFont ( TTFont ( 'DejaVuSans' , 'DejaVuSans.ttf' ) ) #NEWLINE#
coll . update ( { 'ref' : ref } , { '$push' : { 'tags' : new_tag } } ) #NEWLINE#
return [ dict ( zip ( columns , row ) ) for row in cursor ] #NEWLINE#
return np . cumsum ( a , out = a ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
session . query ( QuerySchema ) . filter ( QuerySchema . way . ST_Within ( bbox ) ) #NEWLINE#
array ( [ [ 2.0 , 4.0 , 4.0 , 4.0 ] , [ 0.0 , 2.0 , 1.0 , 2.0 ] , [ 0.0 , 0.0 , 1.0 , 1.0 ] , [ #NEWLINE# 0.0 , 0.0 , 0.0 , 0.0 ] ] ) #NEWLINE#
MyObject = MyClass ( ) #NEWLINE#
raise TypeError ( "can't#SPACE#pickle#SPACE#%s#SPACE#objects" % base . __name__ ) #NEWLINE#
rgbtype = [ ( 'r' , 'uint8' ) , ( 'g' , 'uint8' ) , ( 'b' , 'uint8' ) ] #NEWLINE#
"""First#SPACE#item:#SPACE#{:d},#SPACE#second#SPACE#item:#SPACE#{:d}#SPACE#and#SPACE#third#SPACE#item:#SPACE#{:d}.""" . format ( * t ) #NEWLINE#
pass #NEWLINE#
listbox . pack ( ) #NEWLINE#
return struct . unpack ( 'L' , socket . inet_aton ( ip ) ) [ 0 ] #NEWLINE#
a = np . zeros ( ( 2 , 3 , 4 ) ) #NEWLINE# a #NEWLINE#
image = cv2 . imread ( 'foo.jpg' ) #NEWLINE#
self . set . add ( d ) #NEWLINE#
s = 'ACGTAC' #NEWLINE#
return [ x for x , y in zip ( t1 , t2 ) if x == y ] #NEWLINE#
return fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
{ 'inner' : [ 1 , 2 , 3 ] } #NEWLINE#
new_dict = dict ( zip ( keys , values ) ) #NEWLINE#
return Counter ( chain . from_iterable ( map ( str . split , f ) ) ) #NEWLINE#
def f ( x , y , z ) : #NEWLINE# #INDENT# return x + y * z #NEWLINE#
a , b = map ( int , input ( ) . split ( ) ) #NEWLINE#
f = open ( 'myfile' ) #NEWLINE#
o . writerow ( line . split ( ) ) #NEWLINE#
return map ( lambda x : int ( 255 * x ) , ( r , g , b ) ) #NEWLINE#
np . arange ( 0 , 1 , 0.1 ) #NEWLINE#
image . write ( base64string . decode ( 'base64' ) ) #NEWLINE#
print ( 'test' ) #NEWLINE#
QMainWindow . __init__ ( self , parent ) #NEWLINE#
list ( it1 ) #NEWLINE#
reduced_list = [ x for x in full_list if not omit . intersection ( x ) ] #NEWLINE#
print ( sys . argv [ 0 ] , '#SPACE#' . join ( [ pipes . quote ( s ) for s in sys . argv [ 1 : ] ] ) ) #NEWLINE#
Y = np . power ( X - X0 , 2 ) #NEWLINE#
sys . modules [ 'inspect' ] = None #NEWLINE#
app . register_blueprint ( child2 . child2 ) #NEWLINE#
print ( 'condition#SPACE#fails' ) #NEWLINE#
someList . sort ( key = key1 ) #NEWLINE#
line = line . strip ( ) #NEWLINE#
abs ( numpy . array ( [ 0.24 ] ) [ 0 ] - 0.24 ) < numpy . finfo ( float ) . eps #NEWLINE#
plt . show ( ) #NEWLINE#
print ( newcorpus . sents ( newcorpus . fileids ( ) [ 0 ] ) ) #NEWLINE#
self . root . destroy ( ) #NEWLINE#
random . shuffle ( x ) #NEWLINE#
wtr . writerow ( r ) #NEWLINE#
fig . canvas . mpl_connect ( 'button_press_event' , on_click ) #NEWLINE#
os . chdir ( prev_cwd ) #NEWLINE#
print ( '%8.2f#SPACE##SPACE##SPACE#%8.2f' % ( v1 , v2 ) ) #NEWLINE#
EMAIL_USE_TLS = False #NEWLINE#
datetime . datetime . strptime ( datestring , '%Y-%m-%d' ) #NEWLINE#
process . stderr . close ( ) #NEWLINE#
cursor . close ( ) #NEWLINE#
print ( 'could#SPACE#not#SPACE#find#SPACE#' + name + '#SPACE#in#SPACE#data.pickle' ) #NEWLINE#
df1 [ ind ] . append ( df2 [ ind ] ) #NEWLINE#
reverse ( 'bar-page' , kwargs = { 'page_slug' : 'bar' } ) #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE# print ( df ) #NEWLINE#
ax . contour ( X , Y , Z , zdir = 'y' , offset = 4 , colors = 'k' ) #NEWLINE#
KillerApp ( ) . run ( ) #NEWLINE#
d = array ( [ 0 , 1 ] ) #NEWLINE# l . index ( d ) #NEWLINE#
print ( hashlib . sha1 ( json . dumps ( a , sort_keys = True ) ) . hexdigest ( ) ) #NEWLINE#
driver = webdriver . Remote ( desired_capabilities = options . to_capabilities ( ) ) #NEWLINE#
b [ 0 ] . append ( 1 ) #NEWLINE#
pts_dst = np . array ( [ [ 2.0 , 2.0 ] , [ 379.0 , 2.0 ] , [ 379.0 , 435.0 ] , [ 2.0 , 435.0 ] ] ) #NEWLINE#
k [ np . in1d ( list ( map ( np . ndarray . dumps , k ) ) , list ( map ( np . ndarray . dumps , k2 ) ) ) ] #NEWLINE#
new_x = itertools . chain ( y , x ) #NEWLINE#
print ( np . array_equal ( A , C ) ) #NEWLINE#
return list ( d . values ( ) ) #NEWLINE#
print ( 'after' ) #NEWLINE#
[ output . write ( ';' . join ( list ( map ( str , list ( r . values ( ) ) ) ) ) + '\n' ) for r in res ] #NEWLINE#
imshow ( img , zorder = 0 , extent = [ left , right , bottom , top ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
p . wait ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ '3' , '4' , '3' ] #NEWLINE#
[ '4' , '3' , '3' ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
app . config . from_object ( __name__ ) #NEWLINE#
t . start ( ) #NEWLINE#
fig . savefig ( my_path + '/Sub#SPACE#Directory/graph.png' ) #NEWLINE#
blobstore . delete ( key ) #NEWLINE#
curs . execute ( 'select#SPACE#x,y#SPACE#from#SPACE#TABLENAME' ) #NEWLINE#
emonth1 . grid ( row = 1 , column = 2 ) #NEWLINE#
assert module . function ( ) == 'expected_output' #NEWLINE#
re . findall ( str_in_doublequotes , text ) #NEWLINE#
plot ( a [ : , ( 0 ) ] , a [ : , ( 1 ) ] , 'ro' ) #NEWLINE#
return '#SPACE#' . join ( reversed ( words ) ) #NEWLINE#
[ ( barcode ( productId ) , metric ( size ) ) for name , size in [ lookup ( productId ) ] ] [ 0 ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
def square ( list ) : #NEWLINE# #INDENT# return map ( lambda x : x ** 2 , list ) #NEWLINE#
return regex . sub ( '' , s ) #NEWLINE#
df [ 'Country' ] = df [ 'Country' ] . str . replace ( 'Å' , 'A' ) #NEWLINE#
os . remove ( str ( local_path ) + '/' + filename + '.avi' ) #NEWLINE#
[ a , b ] = [ 1 , 2 ] #NEWLINE#
[ x for x in individual ( nest ) ] #NEWLINE#
print ( '#SPACE#' . join ( fibs ) ) #NEWLINE#
numpy . random . seed ( 29 ) #NEWLINE#
conn . response ( ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
np . savetxt ( myfile , sample_array ) #NEWLINE#
zip ( ( 1 , 23 , 34 ) , ( 2 , 34 , 44 ) , ( 3 , 444 , 234 ) ) #NEWLINE#
sqs = SearchQuerySet ( ) . filter ( color = 'blue' , price__range = ( 10 , 100 ) ) #NEWLINE#
img . getpixel ( 20 , 30 ) #NEWLINE#
date = datetime . datetime . strptime ( '2012-02-11' , '%Y-%m-%d' ) #NEWLINE#
ax2 . set_yticks ( y_tick * np . pi ) #NEWLINE#
soup . select ( 'a[href^=price]' ) #NEWLINE#
ax . set_xlim ( - 5 , 100 ) #NEWLINE#
main_menu . display ( ) #NEWLINE#
pylab . plot ( np . cos ( theta ) * r_ab , np . sin ( theta ) * r_ab , color = 'red' ) #NEWLINE#
Something . objects . filter ( data__has_key = 'a' ) #NEWLINE#
content = fp . read ( ) #NEWLINE#
br . open ( 'https://id.arduino.cc/auth/login/' ) #NEWLINE#
axr . set_ylim ( altitude . min ( ) , altitude . max ( ) ) #NEWLINE#
req , filename , content_type = download_file ( 'http://some.url' ) #NEWLINE#
message . add_filter ( 'templates' , 'template_id' , 'TEMPLATE-ALPHA-NUMERIC-ID' ) #NEWLINE#
return d [ 'ham' ] [ 'fry' ] #NEWLINE#
full_df = pd . concat ( dfs ) #NEWLINE#
clf . fit ( X , Y ) #NEWLINE#
rjs = '[\\s]*(&#x.{1,7})?' . join ( list ( 'javascript:' ) ) #NEWLINE#
path = os . getcwd ( ) #NEWLINE#
tree = etree . ElementTree ( root ) #NEWLINE#
array ( [ - 32.68247364 , 25.85861809 ] ) #NEWLINE#
array ( [ - 33.72945377 , 24.31891936 ] ) #NEWLINE#
df2 . boxplot ( ) #NEWLINE#
df1 = pd . DataFrame ( { 'a' : [ 1.0 , 2.0 ] , 'b' : [ 3.0 , 4.0 ] } ) #NEWLINE# df2 = pd . DataFrame ( { 'a' : [ 1.0 , 2.0 ] , 'b' : [ np . nan , 4.0 ] } ) #NEWLINE#
data [ 'p' ] [ 'b' ] = None #NEWLINE#
return tf . mul ( scale , x ) #NEWLINE#
response = urllib . request . urlopen ( request ) #NEWLINE#
return string . encode ( 'utf8' ) #NEWLINE#
self . ax = self . fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
assert not isidentifier ( 'pass' ) #NEWLINE#
parser . add_argument ( '-t' ) #NEWLINE#
return HttpResponseRedirect ( '/cp/login?ret=' + request . path ) #NEWLINE#
gc . collect ( ) #NEWLINE#
list ( [ val for val in range ( 10 ) if val & 1 ] ) #NEWLINE#
del tup [ 0 ] #NEWLINE#
my_file . close ( ) #NEWLINE#
r . findall ( 'fffagggahhh' ) #NEWLINE#
setattr ( obj , name , value ) #NEWLINE#
{ { ( object . some_date_field | date ) : 'l' } } #NEWLINE#
return str ( self ) #NEWLINE#
return '' . join ( new_cipher ) #NEWLINE#
[ [ 'google' , [ 'http://google.com' ] ] ] #NEWLINE# [ [ 'google' , [ 'http://google.com' ] ] , [ 'computing' , [ 'http://acm.org' ] ] ] #NEWLINE# [ [ 'google' , [ 'http://google.com' , 'http://gmail.com' ] ] , [ 'computing' , [ #NEWLINE# 'http://acm.org' ] ] ] #NEWLINE#
df [ 'prod_type' ] = df [ 'prod_type' ] . replace ( 'respon' , 'responsvie' ) #NEWLINE#
reactor . run ( ) #NEWLINE#
[ num for num in range ( 1 , 6 ) ] #NEWLINE#
self . handler = logging . StreamHandler ( self . stream ) #NEWLINE#
print ( dict ( re . findall ( r , z ) ) ) #NEWLINE#
a [ 0 : 10000 ] = a [ 0 : 10000 ] . astype ( 'float32' ) . view ( 'int32' ) #NEWLINE#
print ( 'My#SPACE#name#SPACE#is#SPACE#%s' % MyClass . foo . __name__ ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . title ( 'your#SPACE#title' ) #NEWLINE#
sort ( data , key = key , reverse = rev ) #NEWLINE#
response . set_data ( soup . prettify ( ) ) #NEWLINE#
emailer . send ( messages ) #NEWLINE#
print ( 'xyzzy' ) #NEWLINE#
'x' * 3 #NEWLINE#
np . column_stack ( ( pic , np . repeat ( [ '\n' ] , pic . shape [ 0 ] ) [ : , ( None ) ] ) ) . tostring ( ) #NEWLINE#
list2 = [ int ( y ) for y in list ( itertools . chain ( * [ str ( x ) for x in list1 ] ) ) ] #NEWLINE#
a [ i ] . append ( int ( value ) ) #NEWLINE#
plt . title ( 'Test' ) #NEWLINE#
np . savetxt ( 'test.csv' , example [ 1 , ... ] , delimiter = ',' , fmt = '%.18e' ) #NEWLINE#
print ( sum ( chain ( n , o , p ) ) ) #NEWLINE#
del sys . modules [ 'mod' ] #NEWLINE#
axes [ 0 ] . legend ( bbox_to_anchor = ( 0 , 0.5 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . set_ylim ( - 1 , 7 ) #NEWLINE#
[ ( 2 , 5 ) , ( 12 , 17 ) , ( 22 , 22 ) , ( 25 , 26 ) , ( 28 , 28 ) , ( 51 , 52 ) , ( 57 , 57 ) ] #NEWLINE#
pixels = [ pixels [ i * width : ( i + 1 ) * width ] for i in range ( height ) ] #NEWLINE#
events = list ( groupify ( lines ) ) #NEWLINE#
self . logger = logging . getLogger ( 'W%i' % self . n ) #NEWLINE#
plt . subplot ( 111 ) #NEWLINE#
print ( ( 'before,#SPACE#outer_string#SPACE#=' , outer_string ) ) #NEWLINE#
G . add_edges_from ( [ ( 'D' , 'A' ) , ( 'D' , 'E' ) , ( 'B' , 'D' ) , ( 'D' , 'E' ) ] , weight = 2 ) #NEWLINE#
list ( repeat ( 100 , foo ) ) #NEWLINE#
"""gnimmargorP#SPACE#noitcudortnI#SPACE#ot#SPACE#retupmoC""" #NEWLINE#
cv2 . imwrite ( 'out.jpg' , img ) #NEWLINE#
[ [ 6 , 4 ] , [ 7 , 7 ] , [ 8 , 8 ] , [ 9 , 43 ] , [ 0 , 6 ] ] #NEWLINE#
s2 [ s2 . isin ( s1 ) ] #NEWLINE#
plt . xlim ( [ 0 , 6 ] ) #NEWLINE#
self . window . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
self . write ( self . request . uri ) #NEWLINE#
ldap . set_option ( ldap . OPT_X_TLS_REQUIRE_CERT , ldap . OPT_X_TLS_NEVER ) #NEWLINE#
df_out #NEWLINE#
[ 'Schalk_4' , '16' , '11' , '14:3' ] #NEWLINE#
[ 'Borrusi_ortmund' , '16' , '11' , '15:4' ] #NEWLINE#
[ 'Vf_olfsburg' , '14' , '4' , '10:6' ] #NEWLINE#
[ 'Baye_everkusen' , '14' , '3' , '11:8' ] #NEWLINE#
[ 'Herth_S_erlin' , '14' , '1' , '5:4' ] #NEWLINE#
[ '1._F_ologne' , '13' , '0' , '10:10' ] #NEWLINE#
[ 'F_ngolstad_4' , '13' , '-2' , '4:6' ] #NEWLINE#
[ 'Eintrach_rankfurt' , '9' , '4' , '13:9' ] #NEWLINE#
[ 'S_armstad_8' , '9' , '-1' , '8:9' ] #NEWLINE#
[ 'Hamburg' , '9' , '-2' , '8:10' ] #NEWLINE#
[ 'Mainz' , '9' , '-3' , '6:9' ] #NEWLINE#
[ 'Werde_remen' , '6' , '-5' , '7:12' ] #NEWLINE#
[ 'Borussi_oenchengladbach' , '6' , '-6' , '9:15' ] #NEWLINE#
[ 'Hoffenheim' , '5' , '-4' , '8:12' ] #NEWLINE#
[ 'F_ugsburg' , '4' , '-5' , '7:12' ] #NEWLINE#
[ 'Vf_tuttgart' , '4' , '-8' , '9:17' ] #NEWLINE#
random . seed ( ) #NEWLINE#
ax1 = fig . add_subplot ( 2 , 2 , 1 ) #NEWLINE#
plt . scatter ( x2 , y2 , marker = 'o' , label = 'second' , s = 35.0 , c = 'r' ) #NEWLINE#
myArray . append ( np . array ( [ i , i + 1 , i + 2 ] ) ) #NEWLINE#
__all__ = [ 'doit' , 'dataholder' , 'getSomeStuff' , 'hold_more_data' ] #NEWLINE#
return self . category . name #NEWLINE#
game . init ( ) #NEWLINE#
locals ( ) . update ( { 'a' : 1 } ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
re . sub ( '([\ud800-\udbff])([\udc00-\udfff])' , lambda m : chr ( ( ord ( m . group ( 1 ) ) - #NEWLINE# 55296 << 10 ) + ord ( m . group ( 2 ) ) - 56320 + 65536 ) , s ) #NEWLINE#
( 1 in ( ) ) is False #NEWLINE#
float ( 'ħ' ) #NEWLINE#
19327 , 19712 , 21424 , 21978 , 22684 , 22597 , 22735 , 22217 , 22214 , 22655 #NEWLINE#
"""{\\x22username\\x22:\\x229\\x22,\\x22password\\x22:\\x226\\x22,\\x22id\\x22:\\x222c8bfa56-f5d9\\x22,#SPACE#\\x22FName\\x22:\\x22AnkQcAJyrqpg\\x22}""" #NEWLINE#
print ( b [ 'x' ] , b [ 'y' ] ) #NEWLINE#
mlab . show ( ) #NEWLINE#
print ( m . cancel ( ) ) #NEWLINE#
np . savetxt ( outfile , slice_2d ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
counts = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] #NEWLINE#
self . time . pack ( side = 'top' ) #NEWLINE#
print ( x , end = '#SPACE#' ) #NEWLINE#
arr2d [ np . arange ( 10 ) [ : , ( None ) ] , idx ] = 1 #NEWLINE#
myDict . setdefault ( newKey , [ ] ) . append ( value ) #NEWLINE#
channels = cv2 . split ( img ) #NEWLINE#
CDLL ( 'C:/library/path/library.dll' ) #NEWLINE#
ax . bar ( np . arange ( counts . size ) , counts , align = 'center' , width = 1.0 ) #NEWLINE#
print ( 'Found#SPACE#"{}"' . format ( word ) ) #NEWLINE#
'Belem' , 'Boise' , 'Vevay' , 'Thule' , 'Casey' , 'Davis' , 'Syowa' #NEWLINE#
'Amman' , 'Aqtau' , 'Dacca' , 'Dhaka' , 'Dubai' , 'Kabul' , 'Macao' #NEWLINE#
'Macau' , 'Qatar' , 'Seoul' , 'Tokyo' , 'Faroe' , 'Eucla' , 'Perth' #NEWLINE#
'Malta' , 'Minsk' , 'Paris' , 'Sofia' , 'Vaduz' , 'Cocos' , 'Efate' #NEWLINE#
'Nauru' , 'Palau' , 'Samoa' , 'Benin' , 'Chile' , 'China' , 'Congo' #NEWLINE#
'Egypt' , 'Gabon' , 'Ghana' , 'Haiti' , 'India' , 'Italy' , 'Japan' #NEWLINE#
'Kenya' , 'Libya' , 'Malta' , 'Nauru' , 'Nepal' , 'Niger' , 'Palau' #NEWLINE#
'Qatar' , 'Samoa' , 'Spain' , 'Sudan' , 'Syria' , 'Tonga' , 'Yemen' #NEWLINE#
plt . show ( ) #NEWLINE#
contours , _ = cv2 . findContours ( edges , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) #NEWLINE#
plt . scatter ( times , price , volume , marker = 'x' ) #NEWLINE#
self . wfile . write ( '<foo>bar</foo>' ) #NEWLINE#
re . sub ( 'url(#[0-9]+|$)' , 'new_url\\1' , test1 ) #NEWLINE#
parent_map = dict ( ( c , p ) for p in tree . getiterator ( ) for c in p ) #NEWLINE#
outfile . write ( ',' ) #NEWLINE#
l [ 1 : : 2 ] #NEWLINE#
ax . set_xticks ( np . arange ( max_val ) ) #NEWLINE#
somestring = rchop ( somestring , '#SPACE#rec' ) #NEWLINE#
set ( map ( tuple , map ( sorted , pairs ) ) ) #NEWLINE#
( df2 - df2 . shift ( ) ) . iloc [ 1 : , : ] #NEWLINE#
print ( re . sub ( "(?<!s)'(?!(?:t|ll|e?m)\\b)" , '"' , input ) ) #NEWLINE#
self . setWindowIcon ( QtGui . QIcon ( 'test_icon.png' ) ) #NEWLINE#
ax . xaxis . set_major_formatter ( fmt ) #NEWLINE#
self . log . close ( ) #NEWLINE#
self . config_from_object ( app . config ) #NEWLINE#
ax . set_title ( '%03d' % i ) #NEWLINE#
app . run ( debug = True , threaded = False ) #NEWLINE#
print ( 'Content-type:#SPACE#application/json' ) #NEWLINE#
union ( [ ( 10 , 12 ) , ( 14 , 16 ) , ( 15 , 22 ) ] ) #NEWLINE#
print ( PixelAt ( int ( sys . argv [ 1 ] ) , int ( sys . argv [ 2 ] ) ) ) #NEWLINE#
df1 . div ( df2 . ix [ 0 ] , axis = 'columns' ) #NEWLINE#
[ 1.0 , 1.0 , 7085.0 , 427352.928 , 4848790.94 ] , #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
df . resample ( '30s' , how = 'mean' , closed = 'right' ) #NEWLINE#
event . widget . pack_forget ( ) #NEWLINE#
soup3 = BeautifulSoup ( page3 , 'html5lib' ) #NEWLINE#
my_string = 'A,B,C,D,E' #NEWLINE# my_list = my_string . split ( ',' ) #NEWLINE# print ( my_list ) #NEWLINE#
log . debug ( 'Home#SPACE#page#SPACE#loaded.' ) #NEWLINE#
your_new_soup . body . insert ( 3 , div_tag ) #NEWLINE#
a = fig . add_subplot ( 1 , 2 , 2 ) #NEWLINE#
return np . intersect1d ( amem , bmem ) . size #NEWLINE#
func ( 'something#SPACE#third' , a = A , c = C , d = D ) #NEWLINE#
ax . view_init ( azim = 60 , elev = 30 ) #NEWLINE#
print ( '' . join ( traceback . format_exception_only ( type ( e ) , e ) ) ) #NEWLINE#
ovec [ ivec [ i ] : ivec [ i + 1 ] ] #NEWLINE#
scores . ffill ( ) . sum ( axis = 1 ) #NEWLINE#
df [ 'value' ] = np . maximum ( df [ 'value' ] , 0 ) #NEWLINE#
d = eval ( "{'a':1,#SPACE#'b':#SPACE#2}" ) #NEWLINE#
GPS = 'Exif.GPSInfo.GPS' #NEWLINE#
print ( '%.2e' % earth ) #NEWLINE#
root . geometry ( '300x200' ) #NEWLINE#
data_df = pd . read_json ( data_json_str ) #NEWLINE#
proc = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
s . close ( ) #NEWLINE#
tree . write ( path ) #NEWLINE#
m . save ( ) #NEWLINE#
sys . path . append ( package1_path ) #NEWLINE#
raise ValueError ( 'failed#SPACE#to#SPACE#coerce#SPACE#str#SPACE#to#SPACE#int#SPACE#or#SPACE#float' ) #NEWLINE#
return [ i for i , var in enumerate ( l [ 1 : ] , start = 1 ) if var - l [ i - 1 ] >= num ] #NEWLINE#
wb = openpyxl . load_workbook ( filename = file ) #NEWLINE#
[ x for x in names if 'aet' in x ] #NEWLINE#
print ( 'User#SPACE#closed#SPACE#the#SPACE#file' ) #NEWLINE#
outarr [ x1to : x2to , y1to : y2to ] = inarr [ x1fr : x2fr , y1fr : y2fr ] #NEWLINE#
df2 [ 'total' ] = df2 . sum ( axis = 1 ) #NEWLINE# df2 #NEWLINE#
np . where ( M == 0 ) #NEWLINE#
a2 . ravel ( ) [ : ] = [ tuple ( l ) for l in m . reshape ( 2 , - 1 ) . T ] #NEWLINE#
tuple_containment ( ( 1 , 2 , 3 , 4 , 5 ) , ( 1 , 2 ) ) #NEWLINE#
"""{0[latitude]}#SPACE#{0[longitude]}""" . format ( geopoint ) #NEWLINE#
ttk . Radiobutton ( self . mainframe , value = 1 ) . grid ( column = 2 , row = 2 ) #NEWLINE#
ax . set_zlabel ( 'Amount' ) #NEWLINE# plt . show ( ) #NEWLINE#
headers = { 'Authorization' : 'Basic#SPACE#%s' % base64 . b64encode ( 'username:password' ) } #NEWLINE#
self . response . out . write ( translatedObject ) #NEWLINE#
[ '238' , 'NEO#SPACE#Sports' ] #NEWLINE#
rows = soup . select ( 'table.ms-rteTable-default#SPACE#tr' ) #NEWLINE#
W = tf . get_variable ( 'W' , shape = [ 784 , 256 ] , initializer = tf . contrib . layers . #NEWLINE# xavier_initializer ( ) ) #NEWLINE#
l = [ 'element1\t0238.94' , 'element2\t2.3904' , 'element3\t0139847' , '' ] #NEWLINE# [ i . partition ( '\t' ) [ - 1 ] for i in l ] #NEWLINE#
conn . commit ( ) #NEWLINE#
l [ 1 : : 2 ] #NEWLINE#
my_list = [ 'abc-123' , 'def-456' , 'ghi-789' , 'abc-456' , 'def-111' , 'qwe-111' ] #NEWLINE#
filtered_list = [ x for x in your_list if all ( f ( x ) for f in filters ) ] #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
proc = subprocess . Popen ( [ 'pgrep' , process_name ] , stdout = subprocess . PIPE ) #NEWLINE#
domain = str ( line . strip ( ) ) #NEWLINE#
df . set_index ( 'id' , inplace = True ) #NEWLINE#
x . a = 2 #NEWLINE#
{ file : find_mime_with_file ( file ) for file in files } #NEWLINE#
def handler ( environ , start_response ) : #NEWLINE# #INDENT# return application . wsgi_app ( environ , start_response ) #NEWLINE#
exec ( compile ( open ( activate_this ) . read ( ) , activate_this , 'exec' ) , dict ( #NEWLINE# __file__ = activate_this ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
fields = [ 'rows__name' ] #NEWLINE#
fields = [ 'row__name' ] #NEWLINE#
m = plt . cm . ScalarMappable ( norm = norm , cmap = 'jet' ) #NEWLINE#
rx . findall ( allsorts ) #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
f ( * args , ** kwargs ) #NEWLINE#
ax . set_xlim ( 0.5 , ly + 0.5 ) #NEWLINE#
print ( read_words ( 'test.txt' ) ) #NEWLINE#
f = open ( 'path_to_file' , 'r' ) #NEWLINE#
pool . map ( lambda x : preprocess ( x ) , real_preds ) #NEWLINE#
print ( re . escape ( '\\#SPACE#a.*$' ) ) #NEWLINE#
self . valueChanged . emit ( value ) #NEWLINE#
p = Popen ( [ 'xsel' , '-bi' ] , stdin = PIPE ) #NEWLINE#
assert response . status_code == 200 #NEWLINE#
dest = dict ( chain ( list ( orig . items ( ) ) , list ( extra . items ( ) ) ) ) #NEWLINE#
return ',#SPACE#' . join ( listing ) #NEWLINE#
url = 'http://httpbin.org/post' #NEWLINE# files = { 'file' : open ( 'report.xls' , 'rb' ) } #NEWLINE# r = requests . post ( url , files = files ) #NEWLINE#
Toplevel . __init__ ( self , parent ) #NEWLINE#
lines . append ( [ ( x , lastY ) , ( x , y ) ] ) #NEWLINE#
os . stat ( 'testdv.py' ) == os . fstat ( g . fileno ( ) ) #NEWLINE#
parser . add_argument ( '-b' ) #NEWLINE#
foo ( x , y ) #NEWLINE#
'file1' , 'foo#SPACE#bar' , 'baz' #NEWLINE#
'file2' , 'foo' , 'bar' #NEWLINE#
'file1' , 'foo#SPACE#bar' , 'string2' #NEWLINE#
'file3' , 'foo' , 'bar' #NEWLINE#
df2 [ list ( 'xab' ) ] #NEWLINE#
connection = sqlite3 . connect ( ':memory:' ) #NEWLINE#
i = PIL . Image . fromarray ( a . astype ( 'u1' ) . reshape ( ( 3 , 3 , 3 ) ) , 'RGB' ) #NEWLINE#
plt . show ( ) #NEWLINE#
setattr ( obj , 'has_str_override_flag' , True ) #NEWLINE#
[ ord ( c ) for c in struct . pack ( '!I' , number ) ] #NEWLINE#
df = pd . DataFrame ( data = my_data , columns = [ 'y' , 'dummy' , 'x' ] ) #NEWLINE#
print ( np . all ( A [ a_to_b ] == B ) ) #NEWLINE#
reducefn ( { 'practical' : 1 , 'volume' : 1 , 'physics' : 1 } , { 'practical' : 1 , #NEWLINE# 'volume' : 1 , 'chemistry' : 1 } ) #NEWLINE#
PYTHONSCRIPTPATH = 'C:\\Python27\\Scripts' #NEWLINE#
draw . rectangle ( bbox , outline = ( 0 , 255 , 0 ) ) #NEWLINE#
repr ( tst2 ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( dict . get , 'abcd' , d ) == d [ 'a' ] [ 'b' ] [ 'c' ] [ 'd' ] == 4 #NEWLINE#
plt . axvspan ( a , b , color = 'y' , alpha = 0.5 , lw = 0 ) #NEWLINE#
def __init__ ( self , city = 'Berlin' ) : #NEWLINE# #INDENT# self . city = city #NEWLINE#
s . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
data = sock . recv ( ) #NEWLINE#
run ( 'do#SPACE#another#SPACE#thing' ) #NEWLINE#
line_1 = Line2D ( [ 0 , 1 ] , [ 0 , 4 ] , linewidth = 1 , linestyle = '-' , color = 'green' ) #NEWLINE#
func ( 1 , 2 , kwonly = 3 , kw = 4 ) #NEWLINE#
[ 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] , #NEWLINE#
f . close ( ) #NEWLINE#
opener = urllib . request . build_opener ( ) #NEWLINE#
df [ df . one . isin ( checkList ) | df . two . isin ( checkList ) ] #NEWLINE#
datetime . date ( datetime . now ( ) ) . isocalendar ( ) [ 1 ] #NEWLINE#
"""foo#SPACE#bar#SPACE#baz""" . title ( ) . replace ( '#SPACE#' , '' ) #NEWLINE#
d = defaultdict ( int , zip ( list ( range ( 1 , 10 ) ) , list ( range ( 50 , 61 ) ) ) ) #NEWLINE#
dict . get ( dict . get ( dict . get ( d , 'a' ) , 'b' ) , 'c' ) #NEWLINE#
'a' in s . values #NEWLINE#
a = a [ : 2 ] + 'm' + a [ 3 : ] #NEWLINE#
B ( ) . a ( ) #NEWLINE#
term_appearance = Counter ( chain . from_iterable ( texts_list ) ) #NEWLINE#
{ { ( listing . date | date ) : 'd#SPACE#M#SPACE#Y' } } #NEWLINE#
layout . addWidget ( self . canvas ) #NEWLINE#
l = [ item for sublist in list for item in sublist ] #NEWLINE#
doc = SimpleDocTemplate ( 'my_file.pdf' , pagesize = LETTER ) #NEWLINE#
output . replace ( '#N/A#SPACE#History' , pandas . np . nan , inplace = True ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
data = data . reshape ( data . size / 2 , 2 ) #NEWLINE#
ax . set_title ( 'Energy#SPACE#Distribution' ) #NEWLINE#
ax . set_xlim3d ( 0 , 1 ) #NEWLINE#
func . __code__ . co_varnames #NEWLINE#
stuff = [ item for item in stuff if not item . endswith ( 'pie' ) ] #NEWLINE#
def f ( d ) : #NEWLINE# #INDENT# d [ 1 ] += '1' #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# d [ '2' ] += 2 #NEWLINE# if __name__ == '__main__' : #NEWLINE# #INDENT# manager = Manager ( ) #NEWLINE# d = manager . dict ( ) #NEWLINE# d [ 1 ] = '1' #NEWLINE# d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
print ( 'Component#SPACE#%s#SPACE#found#SPACE#with#SPACE#rowid#SPACE#%s' % ( name , data [ 0 ] ) ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
lstA . append ( eval ( input ( 'some#SPACE#input#SPACE#from#SPACE#the#SPACE#user' ) ) ) #NEWLINE#
window . set_title ( 'Foo' ) #NEWLINE#
clr . AddReference ( 'YourDLLAssemblyName' ) #NEWLINE#
DATA = [ [ '5' , '1' ] , [ '5' , '5' ] , [ '3' , '1' ] , [ '6' , '1' ] , [ '4' , '3' ] ] #NEWLINE#
source_file = open ( 'file.txt' , 'r' ) #NEWLINE#
p . write ( 'my#SPACE#string#SPACE#to#SPACE#print#SPACE#and#SPACE#save!' ) #NEWLINE#
new_array [ : , ( 3 ) ] = c [ 'score' ] [ index ] #NEWLINE#
PyErr_Print ( ) #NEWLINE#
writer . writerow ( row [ 0 : 3 ] + ( k , ) + v ) #NEWLINE#
conn2 = psycopg2 . connect ( dsn2 ) #NEWLINE#
x . argsort ( ) . argsort ( ) #NEWLINE#
rendered = render_to_string ( 'my_template.html' , { 'foo' : 'bar' } ) #NEWLINE#
is_active = True #NEWLINE#
plt . clf ( ) #NEWLINE#
b = np . array ( [ [ 0 , 0 , 5 ] , [ 0 , 1 , 0 ] , [ 1 , 1 , 3 ] ] ) #NEWLINE#
ax . set_title ( 'Wage#SPACE#Variance#SPACE#and#SPACE#Mean#SPACE#Age' ) #NEWLINE#
parser . add_argument ( '-d' , required = True ) #NEWLINE#
regex . findall ( '<b*>Text</b>' ) #NEWLINE#
os . path . exists ( '/proc/0' ) #NEWLINE#
os . path . join ( SITE_ROOT , 'templates' ) , #NEWLINE#
s = 'hello' #NEWLINE# s . rfind ( 'l' ) #NEWLINE#
self . sock . close ( ) #NEWLINE#
sys . modules [ 'project' ] = sys . modules . pop ( 'temp/a40bd22344' ) #NEWLINE#
self . selection_range ( 0 , 'end' ) #NEWLINE#
myvalues = [ i [ 'd' ] for i in mylist if 'd' in i ] #NEWLINE#
signal . signal ( signal . SIGINT , handle ) #NEWLINE#
os . symlink ( pythonapp , newpython ) #NEWLINE#
my_dictionary = { 'key1' : 1 , 'key2' : 2 , 'key3' : 3 } #NEWLINE#

url ( '^([a-z0-9]{1,5})/$' , open ) #NEWLINE#
file = models . FileField ( upload_to = get_random_filename ) #NEWLINE#
p4in . write ( 'change:#SPACE#new\n' ) #NEWLINE#
A = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ) #NEWLINE#
kmeans . fit ( p_df ) #NEWLINE#
bin ( a ^ b ) #NEWLINE#
print ( ctx . eval ( js . replace ( 'document.write' , 'return#SPACE#' ) ) ) #NEWLINE#
pos = emcee . utils . sample_ball ( mean , np . sqrt ( np . diag ( C ) ) , size = Nwalkers ) #NEWLINE#
print ( 'MySQL#SPACE#Error#SPACE#%d:#SPACE#%s' % ( e . args [ 0 ] , e . args [ 1 ] ) ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = profile ) #NEWLINE#
os . system . __module__ #NEWLINE#
pd . crosstab ( df . gender , df . doctor ) #NEWLINE#
[ 1 , 2 , 3 ] + MyList ( [ 1 , 2 , 3 ] ) #NEWLINE#
df [ 'STD' ] . plot ( ax = axarr [ 1 ] ) #NEWLINE# plt . show ( ) #NEWLINE#
jpgtxt = base64 . encodestring ( open ( 'in.jpg' , 'rb' ) . read ( ) ) #NEWLINE#
ax . plot_surface ( X [ : , : , ( 0 ) ] , Y [ : , : , ( 0 ) ] , z , cstride = 4 , rstride = 4 , color = 'g' ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
return all ( x < y for x , y in zip ( L , L [ 1 : ] ) ) #NEWLINE#
X , Y = np . mgrid [ - 5 : 5.1 : 0.5 , - 5 : 5.1 : 0.5 ] #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
p = re . compile ( '("[^"]*)"' ) #NEWLINE#
my_list = [ 'foo' , 'fob' , 'faz' , 'funk' ] #NEWLINE#
paired_sorted = sorted ( rev_sorted , key = lambda x : x [ 0 ] ) #NEWLINE#
q . T . reshape ( - 1 , 2 , 2 ) . swapaxes ( 1 , 2 ) . reshape ( - 1 , 2 ) #NEWLINE#
nx . draw_graphviz ( G , prog = 'dot' ) #NEWLINE#
[ [ 1 ] , [ 3 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
filename . write ( 'Hi!' ) #NEWLINE#
cache . _cache . flush_all ( ) #NEWLINE#
ax . plot ( data2 ) #NEWLINE#
files = glob . glob ( '*.ods' ) #NEWLINE#
files = glob . glob ( '../*.ods' ) #NEWLINE#
cv . create_rectangle ( 10 , 10 , 50 , 50 ) #NEWLINE#
df [ df . genre . map ( iscomedy ) ] #NEWLINE#
sum ( sys . getsizeof ( x ) for x in s ) #NEWLINE#
func ( 2 , 2 , 3 , foosim , barsim ) #NEWLINE#
s = '23.45678' #NEWLINE# int ( float ( s ) ) #NEWLINE#
print ( 'For#SPACE#more#SPACE#results,#SPACE#see#SPACE#%s' % data [ 'cursor' ] [ 'moreResultsUrl' ] ) #NEWLINE#
connection . close ( ) #NEWLINE#
kurt = kurt . T #NEWLINE#
w . writerow ( [ 'a\nb\nc' ] ) #NEWLINE#
file_2 . write ( file_1 . read ( ) ) #NEWLINE#
printTree ( tree , tree [ '' ] [ 0 ] ) #NEWLINE#
gnuplot . stdin . write ( 'set#SPACE#term#SPACE#dumb#SPACE#79#SPACE#25\n' ) #NEWLINE#
ip = IP ( '127.0.0.0/30' ) #NEWLINE#
profile = request . user . get_profile ( ) #NEWLINE#
axborder . plot ( hseg , vseg , 'r-' , lw = 3 ) #NEWLINE#
zusers = bcolz . ctable . fromdataframe ( users ) #NEWLINE#
unicodestr . encode ( 'utf8' ) #NEWLINE#
re . findall ( '//.*?(?=\\r|\\n|(?!.))' , input , re . DOTALL | re . MULTILINE ) #NEWLINE#
self . redirect ( '/_ah/login' ) #NEWLINE#
es . indices . delete ( index = 'test-index' , ignore = [ 400 , 404 ] ) #NEWLINE#
def num_there ( s ) : #NEWLINE# #INDENT# return any ( i . isdigit ( ) for i in s ) #NEWLINE#
my_num = int ( f . read ( 1 ) ) #NEWLINE#
MyApp ( ) . run ( ) #NEWLINE#
Done #NEWLINE#
thumb = models . ImageField ( upload_to = 'thumbs' ) #NEWLINE#
print ( ',#SPACE#' . join ( s ) ) #NEWLINE#
MORE = 'another#SPACE#value' #NEWLINE#
os . environ [ 'TZ' ] = ':Pacific/Auckland' #NEWLINE# run ( 'date' ) #NEWLINE#
list ( map ( double , [ 1 , 2 , 3 ] ) ) #NEWLINE#
next ( it1 ) #NEWLINE#
print ( np . linalg . det ( A ) ) #NEWLINE#
ax . set_zlabel ( 'z' ) #NEWLINE#
plt . imshow ( c , interpolation = 'nearest' ) #NEWLINE#
request . REQUEST [ 'MAINS' ] #NEWLINE#
ax . set_ylim ( 1 , 3 ) #NEWLINE#
json_data_rdd . flatMap ( lambda j : processDataLine ( j , arg1 , arg2 ) ) #NEWLINE#
p . <VAR0> . close ( ) #NEWLINE#
re . split ( '\\s(?=[a-z]:)' , s ) #NEWLINE#
zip ( * [ L [ i : : 4 ] for i in range ( 4 ) ] ) #NEWLINE#
e . send_keys ( '12.34' ) #NEWLINE#
e . send_keys ( '56.78' ) #NEWLINE#
s = s . replace ( '/' , '_' ) . replace ( ':' , '_' ) #NEWLINE#
product ( a [ 'common' ] , b [ 'unique' ] ) , #NEWLINE#
hours = int ( s [ : s . index ( ':' ) ] ) #NEWLINE#
[ 'CA' , 'AG' ] #NEWLINE#
print ( list ( negations ( [ 'a' , 'b' , 'c' ] ) ) ) #NEWLINE#
messages = re . split ( '(?:(?:ÿ){8})+' , re . sub ( '^(?:(?:ÿ){8})+' , '' , payload ) ) #NEWLINE#
result_df = json_normalize ( my_list ) . T #NEWLINE#
plt . plot_date ( df . index . to_pydatetime ( ) , df . Val , fmt = '-' ) #NEWLINE#
plt . plot ( x , i * x + i , color = color , label = '$y#SPACE#=#SPACE#{i}x#SPACE#+#SPACE#{i}$' . format ( i = i ) ) #NEWLINE#
b = pd . Series ( [ 13.0 , 15.0 ] , index = pd . MultiIndex . from_product ( [ [ 'b' ] , [ 0 , 1 ] ] ) ) #NEWLINE#
result = '' . join ( l ) #NEWLINE#
list ( accumulate ( example_list , add ) ) #NEWLINE#
ax = self . figure . add_subplot ( 111 ) #NEWLINE#
person = models . ForeignKey ( Person ) #NEWLINE#
ax . scatter ( dates , zaxisvalues0 , lows , color = 'y' , marker = '^' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
list_a = [ 1 , 2 , 4 , 6 ] #NEWLINE#
b = a . transpose ( ) #NEWLINE#
__init__ ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
'%f' % ( 1 / 10 ** 8 ) #NEWLINE#
v . append ( n ) #NEWLINE#
ttkcal . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
raise TypeError ( 'Wrong#SPACE#number#SPACE#of#SPACE#arguments!' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
return np . take ( arr , inds ) #NEWLINE#
now_plus_10 = now + datetime . timedelta ( minutes = 10 ) #NEWLINE#
my_string . decode ( 'utf-8' ) #NEWLINE#
req = urllib . request . Request ( 'http://example.com/api/posts/create' ) #NEWLINE#
df = pd . read_csv ( 'test.csv' , sep = ';' ) #NEWLINE#
x = 314159 #NEWLINE# x = int ( str ( x ) [ : : - 1 ] ) #NEWLINE# print ( x ) #NEWLINE#
a = datetime . datetime . now ( ) #NEWLINE#
for i in range ( n ) : #NEWLINE# #INDENT# list1 . append ( i ) #NEWLINE#
G . add_nodes_from ( [ 1 , 2 ] ) #NEWLINE#
yield input_list [ i : i + n ] #NEWLINE#
globals ( ) [ 'b' ] = importlib . import_module ( 'b' ) #NEWLINE#
df2 = df [ [ 'ItemId' , 'ClientId' , 'PriceQuoted' ] ] #NEWLINE#
p . start ( ) #NEWLINE#
__init__ . py #NEWLINE#
assert function1_mock . called #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
print ( '#SPACE#' . join ( cleanse ( a . split ( ) , 5 ) ) == b ) #NEWLINE#
sqlalchemy . create_engine ( 'mssql+pyodbc:///?odbc_connect={}' . format ( quoted ) ) #NEWLINE#
f = open ( 'blah.txt' , 'w' ) #NEWLINE# subprocess . call ( [ '/home/myuser/run.sh' , '/tmp/ad_xml' , '/tmp/video_xml' ] , #NEWLINE# stdout = f ) #NEWLINE#
hour = time . strftime ( '%H' ) #NEWLINE#
text = text . replace ( '#' , '\\#' ) #NEWLINE#
text = text . replace ( '*' , '\\*' ) #NEWLINE#
text = text . replace ( '{' , '\\{' ) #NEWLINE#
text = text . replace ( '>' , '\\>' ) #NEWLINE#
text = text . replace ( '.' , '\\.' ) #NEWLINE#
text = text . replace ( '!' , '\\!' ) #NEWLINE#
text = text . replace ( '$' , '\\$' ) #NEWLINE#
text = text . replace ( '`' , '\\`' ) #NEWLINE#
text = text . replace ( '_' , '\\_' ) #NEWLINE#
text = text . replace ( '}' , '\\}' ) #NEWLINE#
text = text . replace ( '[' , '\\[' ) #NEWLINE#
text = text . replace ( ']' , '\\]' ) #NEWLINE#
text = text . replace ( '(' , '\\(' ) #NEWLINE#
text = text . replace ( ')' , '\\)' ) #NEWLINE#
text = text . replace ( '+' , '\\+' ) #NEWLINE#
text = text . replace ( '-' , '\\-' ) #NEWLINE#
print ( df . loc [ mask ] ) #NEWLINE#
return f ( x , y , z ) #NEWLINE#
j_obj = json . load ( j ) #NEWLINE#
def power_two ( n ) : #NEWLINE# #INDENT# return int ( math . log ( n , 2 ) ) #NEWLINE#
ax . plot_surface ( xs , ys , zs , rstride = 1 , cstride = 1 , cmap = 'hot' ) #NEWLINE#
pylab . figure ( figsize = ( 20 , 9 ) ) #NEWLINE#
{ { nhl_form . league } } #NEWLINE#
dict ( alist [ i : i + 2 ] for i in range ( 0 , len ( alist ) , 2 ) ) #NEWLINE#
func ( bar = 'quux' , foo = 42 ) #NEWLINE#
f ( ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
{ 'oranges' : 'big' , 'apples' : 'red' } , #NEWLINE#
social . extra_data [ 'access_token' ] #NEWLINE#
form . show ( ) #NEWLINE#
profile . user . save ( ) #NEWLINE#
L = [ { 'a' : 1 } , { 'b' : 2 } , { 'c' : 1 } , { 'd' : 2 } ] #NEWLINE# dict ( list ( i . items ( ) ) [ 0 ] for i in L ) #NEWLINE#
from flask import Flask , request #NEWLINE#
return df . loc [ df . name ] . tail ( 2 ) #NEWLINE#
Node . objects . get_queryset_descendants ( my_queryset , include_self = False ) #NEWLINE#
self . panel . Bind ( wx . EVT_CHAR , self . OnKeyDown ) #NEWLINE#
from pyspark . sql . functions import * #NEWLINE#
time . mktime ( datetime ( 2010 , 3 , 17 , 10 , 1 , 40 ) . timetuple ( ) ) #NEWLINE#
t . start ( ) #NEWLINE#
result += sum ( [ int ( x ) for x in re . findall ( '\\d+' , str ( word ) ) ] ) #NEWLINE#
print ( 'ordinary#SPACE#string' ) #NEWLINE#
df #NEWLINE#
thread . start ( ) #NEWLINE#
webbrowser . open ( 'file:///Users/test/test_folder' ) #NEWLINE#
plt . setp ( xticklabels , visible = False ) #NEWLINE#
list ( t ) #NEWLINE#
return tobin ( x / 2 ) + [ x % 2 ] if x > 1 else [ x ] #NEWLINE#
gb = df . groupby ( [ 'id' , 'date1' ] ) . size ( ) . reset_index ( name = 'count' ) #NEWLINE#
sep = '...' #NEWLINE# rest = text . split ( sep , 1 ) [ 0 ] #NEWLINE#
Counter ( { ( 0 ) : 2 , ( - 1 ) : 2 , ( 1 ) : 1 } ) #NEWLINE#
subprocess . call ( args , stderr = subprocess . STDOUT , stdout = f ) #NEWLINE#
regex = re . compile ( '(\\d+,?)+' ) #NEWLINE#
logger . setLevel ( logging . INFO ) #NEWLINE#
self . table . setItem ( 1 , 0 , QtGui . QTableWidgetItem ( self . led . text ( ) ) ) #NEWLINE#
someClass . doSomething ( ) #NEWLINE#
df . columns = df . columns . astype ( str ) #NEWLINE#
pylab . gca ( ) . add_patch ( arr ) #NEWLINE#
ord ( 'c' ) + 1 #NEWLINE#
parser . parse_args ( [ 'input.txt' , 'output.txt' ] ) #NEWLINE#
print ( etree . tostring ( tree ) ) #NEWLINE#
deactivate #NEWLINE#
window . show ( ) #NEWLINE#
my_list = [ run ( a , b , c ) for a , b , c in product ( range ( 100 ) , repeat = 3 ) ] #NEWLINE#
regex . match ( string ) #NEWLINE#
return a . result ( ) + b . result ( ) #NEWLINE#
tk . Frame . __init__ ( self , root ) #NEWLINE#
f . write ( s . getvalue ( ) ) #NEWLINE#
f . seek ( 0 , 2 ) #NEWLINE#
self . out_file . close ( ) #NEWLINE#
v1fColor = NP . array ( v1fColor . split ( ',' ) , dtype = NP . uint8 ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/xml;#SPACE#charset=utf-8' #NEWLINE#
print ( l . decode ( 'utf-8' ) ) #NEWLINE#
{ k : g [ 'value' ] . tolist ( ) for k , g in ptest . groupby ( 'id' ) } #NEWLINE#
a . print_x . __func__ ( b ) #NEWLINE#
print ( s [ : ] ) #NEWLINE#
re . findall ( '\\s' , stri ) #NEWLINE#
""">""" . replace ( '&' , '&' ) #NEWLINE#
f = np . array ( [ ( df * n if n < N / 2 else df * ( n - N ) ) for n in range ( N ) ] ) #NEWLINE#
my_dict = { x : ( x ** 2 ) for x in range ( 10 ) } #NEWLINE#
centroids [ clno ] /= float ( lens [ clno ] ) #NEWLINE#
Player . objects . filter ( name = 'Bob' ) . prefetch_related ( #NEWLINE# 'position__positionstats_set' , 'playerstats_set' ) #NEWLINE#
value = re . sub ( '\\s+' , '' , value ) #NEWLINE#
re . sub ( '([a-z]+)(\\d+)' , lambda m : m . group ( 1 ) + m . group ( 2 ) . zfill ( 2 ) , text ) #NEWLINE#
print ( json . dumps ( doc . reprJSON ( ) , cls = ComplexEncoder ) ) #NEWLINE#
g . username = user . name #NEWLINE#
print ( 'From#SPACE#process#SPACE#1,#SPACE#sum#SPACE#=' , x ) #NEWLINE#
file . close ( ) #NEWLINE#
p . stdout . close ( ) #NEWLINE#
[ os . path . join ( * choices [ : i + 1 ] ) for i in range ( len ( choices ) ) ] #NEWLINE#
print ( row [ 0 ] ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return { c : counter . get ( c , 0 ) for c in chars } #NEWLINE#
print ( 'PASS' ) #NEWLINE#
print ( 'FAIL' ) #NEWLINE#
df2 [ 'total' ] = df2 . sum ( axis = 1 ) #NEWLINE#
sys . path #NEWLINE#
match . group ( 'value' ) #NEWLINE#
ifd_offset = struct . unpack ( '{0}I' . format ( endian_flag ) , header [ 4 : ] ) [ 0 ] #NEWLINE#
do_stuff ( ) #NEWLINE#
reader = csv . reader ( open ( 'big.csv' , 'rb' ) ) #NEWLINE#
client_name = models . CharField ( max_length = 400 ) #NEWLINE#
tup [ 0 ] = 'string' #NEWLINE#
'genpareto' , 'genexpon' , 'genextreme' , 'gausshyper' , 'gamma' #NEWLINE#
'gengamma' , 'genhalflogistic' , 'gilbrat' , 'gompertz' , 'gumbel_r' #NEWLINE#
'gumbel_l' , 'halfcauchy' , 'halflogistic' , 'halfnorm' , 'hypsecant' #NEWLINE#
'triang' , 'truncexpon' , 'truncnorm' , 'tukeylambda' , 'uniform' #NEWLINE#
laplace_k = make_kernel ( [ [ 0.5 , 1.0 , 0.5 ] , [ 1.0 , - 6.0 , 1.0 ] , [ 0.5 , 1.0 , 0.5 ] ] ) #NEWLINE#
list ( it . product ( x , mit . collapse ( y ) ) ) #NEWLINE#
print ( 'Exit' ) #NEWLINE#
print ( 'Inside' ) #NEWLINE#
paris = pytz . timezone ( 'Europe/Paris' ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
ax . axhline ( linewidth = 2 , color = 'blue' ) #NEWLINE#
return self . name #NEWLINE#
return fun ( * args , ** kwargs ) #NEWLINE#
jinja . render_template ( 'index.html' ) #NEWLINE#
type ( s ) #NEWLINE#
df [ 'Count' ] = df . groupby ( [ 'Name' ] ) [ 'ID' ] . transform ( 'count' ) #NEWLINE#
list2 = [ 1 , 2 , 3 , 4 ] #NEWLINE#
m_action2 . perform ( ) #NEWLINE#
def getRank ( myDict ) : #NEWLINE# #INDENT# return myDict [ 'rank' ] #NEWLINE#
ax = self . figure . add_subplot ( 111 ) #NEWLINE#
c . InteractiveShellApp . exec_lines = [ 'def#SPACE#f(s):#SPACE#print#SPACE#s' ] #NEWLINE#
f = urllib . request . urlopen ( 'http://tinyurl.com/oex2e' ) #NEWLINE# f . geturl ( ) #NEWLINE#
urlparse . urlparse ( 'http://www.vimeo.com/52422837' ) #NEWLINE#
process . kill ( ) #NEWLINE#
df_two = df . select ( 'col1' , 'col3' ) #NEWLINE#
plt . title ( 'Title#SPACE#here!' , color = 'black' ) #NEWLINE#
replace_chars = [ '1' , '2' , '3' ] #NEWLINE#
ax . set_ylabel ( 'Ground#SPACE#truth' ) #NEWLINE#
timezone . localtime ( timezone . now ( ) ) #NEWLINE#
print ( 'search#SPACE#in#SPACE#meta' ) #NEWLINE#
mz = np . indices ( IRtest . shape ) [ 0 ] #NEWLINE#
print ( isinstance ( MyInt ( '3' ) , int ) ) #NEWLINE#
width , height = img . size #NEWLINE#
df3 = df . apply ( lambda x : x - df2 . squeeze ( ) , axis = 1 ) #NEWLINE#
c . append ( a [ index ] ) #NEWLINE#
df . ix [ idx ] #NEWLINE#
config . write ( configfile ) #NEWLINE#
main ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
cur . close ( ) #NEWLINE#
gp1 . iloc [ 0 ] . values #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( 'show_where:#SPACE#__file__#SPACE#is' , repr ( __file__ ) ) #NEWLINE#
fsizer . Add ( self . stext , 0 , wx . ALL ) #NEWLINE#
outputfile = open ( 'test.csv' , 'w' ) #NEWLINE#
request . POST [ 'file' ] #NEWLINE#
pickle . dump ( selfref_list , output , - 1 ) #NEWLINE#
fixed_phone = re . sub ( '[^\\d]+' , '-' , raw_phone ) #NEWLINE#
start_response ( status , response_headers ) #NEWLINE#
self . redirect ( '/' ) #NEWLINE#
auser = self . auth . get_user_by_session ( ) #NEWLINE#
lines . append ( line . split ( ) ) #NEWLINE#
print ( list ( takewhile ( lambda x : bool ( x . strip ( ) ) , v ) ) ) #NEWLINE#
np . dot ( J , mat ) #NEWLINE#
df = pd . DataFrame ( list ( BlogPost . objects . all ( ) . values ( ) ) ) #NEWLINE#
response = urllib . request . urlopen ( url ) #NEWLINE#
strings = [ 'first' , '' , 'second' ] #NEWLINE# [ x for x in strings if x ] #NEWLINE#
super ( CompanyPresenter , self ) . __init__ ( ) #NEWLINE#
string_input = input ( ) #NEWLINE# input_list = string_input . split ( ) #NEWLINE# input_list = [ int ( a ) for a in input_list ] #NEWLINE#
all_pairs += [ ( ( nA , 0 ) , ( nC , 2 ) ) for nA , nC in itertools . product ( listA , listC ) ] #NEWLINE#
cv2 . imshow ( 'mask' , mask ) #NEWLINE#
print ( 'collide#SPACE#left' ) #NEWLINE#
result [ nI ] = v2 [ nI ] #NEWLINE#
'' , None , 'text' , '{b}' , '' #NEWLINE#
smtp . quit ( ) #NEWLINE#
mail = imaplib . IMAP4_SSL ( 'imap.gmail.com' ) #NEWLINE#
os . dup2 ( savout , 1 ) #NEWLINE#
a = a & b #NEWLINE#
{ { ( user | hash ) : item } } #NEWLINE#
print ( 'b' ) #NEWLINE#
plt . hist ( data , bins , alpha = 0.7 , label = [ 'x' , 'y' ] ) #NEWLINE#
print ( tmp ) #NEWLINE#
l = [ '7' , 'Google' , 'Chrome' , '10' , 'Python' ] #NEWLINE# sorted ( l , key = lambda s : ( s . isdigit ( ) , s ) ) #NEWLINE#
pd . concat ( ( df1 , df2 ) , axis = 1 ) #NEWLINE#
line = DataFrame ( { 'onset' : 30.0 , 'length' : 1.3 } , index = [ 3 ] ) #NEWLINE# df2 = concat ( [ df . ix [ : 2 ] , line , df . ix [ 3 : ] ] ) . reset_index ( drop = True ) #NEWLINE#
mydict_as_string = cPickle . dumps ( mydict ) #NEWLINE#
df = pd . DataFrame ( { 'value' : [ '[63]' , '[65]' , '[64]' ] } ) #NEWLINE#
print ( str ( mytuple ) [ 1 : - 1 ] ) #NEWLINE#
queryset = Profile . objects . filter ( condition ) #NEWLINE#
elem = driver . find_element_by_css_selector ( 'div.dijitReset>input[type=hidden]' ) #NEWLINE#
df2 . to_sql ( 'tablename' , mydb , if_exists = 'append' , chunksize = 100 ) #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 ) #NEWLINE#
result = [ s for s in my_list if not s . strip ( 'abc' ) ] #NEWLINE#
sizeof_fmt ( 168963795964 ) #NEWLINE#
plt . subplot ( 122 ) #NEWLINE#
print ( yaml . dump ( a , default_flow_style = False ) ) #NEWLINE#
plt . xticks ( xticks_pos , country_list , ha = 'right' , rotation = 45 ) #NEWLINE#
parameters ( my_get_params ) #NEWLINE#
get_lineage ( dt , df . columns ) #NEWLINE#
return self . function ( * args , ** kwargs ) #NEWLINE#
f = open ( 'myfile.txt' , 'U' ) #NEWLINE#
print ( '#SPACE#' . join ( [ ( i . text + i . type ) for i in f ] ) ) #NEWLINE#
my_list = [ item for item in range ( 10 ) ] #NEWLINE#
df = pandas . csv_read ( doc , sep = '\t' ) #NEWLINE#
print ( 'His#SPACE#health#SPACE#is#SPACE#now' , enemy1 ) #NEWLINE#
return strided ( a , shape = ( ( a . size + n - 1 ) // n , n ) , strides = ( n * s , s ) ) [ : , 1 : ] #NEWLINE#
x = binascii . unhexlify ( 'b62e000052e366667a66408d' ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
ax . set_title ( 'line#SPACE#$s#SPACE#=#SPACE#t$#SPACE#in#SPACE#$\\cal#SPACE#F$' ) #NEWLINE#
my_dict = OrderedDict ( [ ( 'Forename' , 'Paul' ) , ( 'Surname' , 'Dinh' ) ] ) #NEWLINE#
return self . _app ( environ , log_response ) #NEWLINE#
stream . write ( '}' ) #NEWLINE#
config . add_route ( 'add_page' , '/add_page/{pagename}' ) #NEWLINE#
config . add_route ( 'view_page' , '/{pagename}' ) #NEWLINE#
f . seek ( 2 ) #NEWLINE#
len ( a ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
from django . utils import simplejson #NEWLINE#
doc = imp . createDocument ( 'http://www.w3.org/1999/xhtml' , 'html' , dt ) #NEWLINE# print ( doc . toxml ( ) ) #NEWLINE#
print ( np . mean ( image ) ) #NEWLINE#
qualifier = re . sub ( '[-_]+' , '' , os . environ [ 'BUILD_ID' ] ) [ 0 : 12 ] #NEWLINE#
pattern . sub ( '' , file_name ) #NEWLINE#
plt . rcParams . update ( params ) #NEWLINE#
print ( 'Yay' ) #NEWLINE#
QtCore . QAbstractTableModel . __init__ ( self , parent ) #NEWLINE#
plt . hexbin ( x , y ) #NEWLINE#
self . right . extend ( self . left [ 0 : x ] ) #NEWLINE#
outfile . write ( '#SPACE#' . join ( line . split ( ) ) . replace ( '#SPACE#' , ',' ) ) #NEWLINE#
shallow_copy_of_set = set ( old_set ) #NEWLINE#
clf . fit ( K , y ) #NEWLINE#
entry3 . grid ( row = 2 , column = 0 ) #NEWLINE#
ax . xaxis . set_major_locator ( dates . MinuteLocator ( ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
time = models . DateTimeField ( auto_now_add = True ) #NEWLINE#
image_file_size = img_file . tell ( ) #NEWLINE#
getattr ( web , 'input' ) ( * my_args_list ) #NEWLINE#
return QtCore . Qt . ItemIsEnabled | QtCore . Qt . ItemIsSelectable | QtCore . Qt . ItemIsDragEnabled | QtCore . Qt . ItemIsDropEnabled #NEWLINE#
pri ( ) #NEWLINE#
p = Popen ( [ 'r' , '--nosave' ] , stdin = PIPE , stdout = PIPE , stderr = PIPE ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
self . _decks = [ ] #NEWLINE#
self . response . write ( 'Hello#SPACE#cruel#SPACE#world.' ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#on#SPACE#the#SPACE#same#SPACE#line' ) #NEWLINE#
object_list . append ( new_element ) #NEWLINE#
files = glob . iglob ( os . path . join ( source_dir , '*.ext' ) ) #NEWLINE#
sleep ( 10 ) #NEWLINE#
url ( '^(?P<pk>[^/]+)/' , views . b ) , #NEWLINE#
Feed . objects . update_one ( push__posts = post ) #NEWLINE#
fee_total = property ( _fee_total ) #NEWLINE#
globals ( ) . update ( vars ( library ) ) #NEWLINE#
s . ix [ x : y ] . asfreq ( BDay ( ) ) . count ( ) #NEWLINE#
print ( arr [ [ 1 , 2 ] , [ 0 , 1 ] ] ) #NEWLINE#
user = models . ForeignKey ( User , unique = True ) #NEWLINE#
df = pd . DataFrame ( d , index = list ( 'aaaaaaaaaabbbbbbbbbb' ) ) #NEWLINE#
image . show ( ) #NEWLINE#
os . symlink ( src , dst ) #NEWLINE#
d = dict ( item . split ( ':' , 1 ) for item in list1 ) #NEWLINE#
txt_frm . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
np . sum ( a == b ) #NEWLINE#
print ( 'Command2' ) #NEWLINE#
result . extend ( flatten_to_strings ( i ) ) #NEWLINE#
canvas = Canvas ( window , width = WIDTH , height = HEIGHT , bg = '#000000' ) #NEWLINE#
view . load ( QUrl ( 'http://www.google.com' ) ) #NEWLINE#
sl = slice ( 0 , 4 ) #NEWLINE#
var = 'Changed' #NEWLINE#
self . _display . sync ( ) #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 2 , 0 , 0 ) ] , #NEWLINE#
return frozenset ( itertools . chain . from_iterable ( args ) ) #NEWLINE#
conn = sqlite3 . connect ( 'database.db' ) #NEWLINE#
proc = subprocess . Popen ( [ 'sleep' , '60' ] , shell = False ) #NEWLINE#
globals ( ) [ attr ] = getattr ( m , attr ) #NEWLINE#
print ( 'hmm...' ) #NEWLINE#
return next ( i for i , string in enumerate ( strings ) if substring in string ) #NEWLINE#
other_work ( ) #NEWLINE#
print ( 'Hello#SPACE#from#SPACE#foo!' ) #NEWLINE#
print ( 'Hello#SPACE#from#SPACE#Bar!' ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) , label = 'Test' ) #NEWLINE#
response = urllib . request . urlopen ( 'http://google.com' ) #NEWLINE#
print ( 'The#SPACE#password#SPACE#is#SPACE#valid,#SPACE#but#SPACE#the#SPACE#account#SPACE#has#SPACE#been#SPACE#disabled!' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
curses . wrapper ( MyApp ) #NEWLINE#
df1 = df . groupby ( [ 'S' , 'bins_X' ] ) . sum ( ) #NEWLINE#
hex ( int ( '010110' , 2 ) ) #NEWLINE#
list ( silvermoon [ 'wintergrasp' ] . keys ( ) ) #NEWLINE#
del request . META [ 'HTTP_REFERER' ] #NEWLINE#
from collections import Counter #NEWLINE#
self . name = name #NEWLINE#
e = create_engine ( 'sqlite://' ) #NEWLINE#
return Response ( 'with#SPACE#logging' ) #NEWLINE#
fig . colorbar ( surf , shrink = 0.5 , aspect = 5 ) #NEWLINE#
{ value : key for key in my_map for value in my_map [ key ] } #NEWLINE#
convert_A_to_B ( sys . stdin , sys . stdout ) #NEWLINE#
time . mktime ( utc_dt . timetuple ( ) ) #NEWLINE#
infile . seek ( 0 ) #NEWLINE#
self . process . run ( ) #NEWLINE#
output . append ( ( num , val ) ) #NEWLINE#
datetime . date ( int ( a [ : 4 ] ) , int ( a [ 5 : 7 ] ) , int ( a [ 8 : 10 ] ) ) #NEWLINE#
mask = df [ 'some#SPACE#column' ] . isin ( [ 'this' , 'that' , 'other' ] ) #NEWLINE# df [ ~ mask ] #NEWLINE#
self . response . write ( '#SPACE#=#SPACE#%s\n' % user ) #NEWLINE#
p = regex . compile ( '\\p{Lu}' , regex . U ) #NEWLINE#
browser . find_by_name ( 'u' ) #NEWLINE#
x = [ '1' , '2' , '3' , '4' ] #NEWLINE# y = [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 ] ] #NEWLINE# dict ( zip ( x , y ) ) #NEWLINE#
self . child . setParent ( None ) #NEWLINE#
result = [ x for k , v in list ( d . items ( ) ) for x in k * v ] #NEWLINE#
print ( cursor . bindnames ( ) ) #NEWLINE#
{ { ( value | currency ) : request . session . currency_type } } #NEWLINE#
source . set_property ( 'location' , sys . argv [ 1 ] ) #NEWLINE#
os . environ [ 'probe1' ] = 'hello' #NEWLINE# os . system ( 'echo#SPACE#$probe1' ) #NEWLINE#
ax . legend ( loc = 'best' , frameon = False ) #NEWLINE#
execute ( sys . argv [ 1 ] ) #NEWLINE#
fh . readlines ( ) #NEWLINE#
A = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
c . dropna ( ) . plot ( marker = 'o' ) #NEWLINE#
df . xs ( 'A' ) . plot ( kind = 'bar' , ax = a [ 0 ] ) #NEWLINE#
msg . attach ( msgImage ) #NEWLINE#
imshow ( 'src' , src ) #NEWLINE#
df [ df [ df . columns [ pd . Series ( df . columns ) . str . startswith ( 'foo' ) ] ] == 1 ] #NEWLINE#
print ( 'Cannot#SPACE#go#SPACE#above#SPACE#root' ) #NEWLINE#
print ( 'Usage:#SPACE#mkdir#SPACE#<directory>' ) #NEWLINE#
allmodules = [ sys . modules [ name ] for name in modulenames ] #NEWLINE#
ax . legend ( loc = 'center#SPACE#right' , numpoints = 1 ) #NEWLINE#
alist = [ ( 1 , 3 ) , ( 2 , 5 ) , ( 2 , 4 ) , ( 7 , 5 ) ] #NEWLINE#
t . to_datetime ( ) #NEWLINE#
fact2 = dd0 * dd0 / 2 #NEWLINE#
c . append ( int ( digit ) ) #NEWLINE#
ctypes . windll . urlmon . URLDownloadToFileA ( 0 , url , local_file_name , 0 , 0 ) #NEWLINE#
etree . tostring ( doc , xml_declaration = True , encoding = 'utf-8' ) #NEWLINE#
myunicode = 'işğüı' #NEWLINE#
widget . bind ( '' , functools . partial ( callback , param = arg ) ) #NEWLINE#
from email . mime . multipart import MIMEMultipart #NEWLINE#
conn . request ( 'GET' , '/index.html' ) #NEWLINE#
somelist = [ i for j , i in enumerate ( somelist ) if j not in indices ] #NEWLINE#
prev = driver . find_element_by_xpath ( "//li[@class='previous']/a" ) #NEWLINE#
s . replace ( 'a' , 'x' , regex = True ) #NEWLINE#
[ fac ( n ) for n in nums ] #NEWLINE#
s = '125:126,#SPACE#126:126,#SPACE#127:128,#SPACE#128:128' #NEWLINE#
return app #NEWLINE#
index_file . write ( template . render ( index_variables ) ) #NEWLINE#
numpy . float64 ( 1.0 ) / 0.0 #NEWLINE#
f . close ( ) #NEWLINE#
np . issubdtype ( np . bool , np . integer ) #NEWLINE#
list ( group_by_capacity ( ( 3 , 1 , 4 , 2 , 2 , 1 , 1 , 2 ) ) ) #NEWLINE#
print ( 'process#SPACE#does#SPACE#not#SPACE#exist' ) #NEWLINE#
dis . dis ( f ) #NEWLINE#
a [ ind ] #NEWLINE#
all ( i . isalpha ( ) or i . isspace ( ) for i in 'test@string' ) #NEWLINE#
{ { test | safe } } #NEWLINE#
tuple ( f ( ) ) #NEWLINE#
self . data = data #NEWLINE#
print ( 'this#SPACE#should#SPACE#not#SPACE#print' ) #NEWLINE#
flipbf ( m ) . swapaxes ( 1 , 2 ) #NEWLINE#
times = [ match . group ( 1 ) for match in pattern . finditer ( ifile . read ( ) ) ] #NEWLINE#
states . split ( ) #NEWLINE#
mylist = [ ( '' , '1' , [ ] ) , ( '' , [ ] , 2 ) ] #NEWLINE#
return func ( ) #NEWLINE#
{ ( 0 ) : 'first' , ( 1 ) : 'first' } #NEWLINE#
np . argmax ( np . mean ( complete_matrix , axis = 1 ) ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
{ 'oranges' : 'big' , 'apples' : 'red' } , #NEWLINE#
{ 'apples' : 'red' , 'oranges' : 'big' } , #NEWLINE#
"""Return#SPACE#True#SPACE#if#SPACE#the#SPACE#script#SPACE#is#SPACE#running,#SPACE#False#SPACE#otherwise.""" #NEWLINE#
df_test = df_test . apply ( sizes , axis = 1 ) #NEWLINE#
a = [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 ] #NEWLINE#
ax . grid ( True ) #NEWLINE#
logger1 = logging . getLogger ( 'general_logger' ) #NEWLINE#
shutil . copyfile ( source_path + file_name , dest_path + file_name ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
p . stdout . flush ( ) #NEWLINE#
return self . __name__ #NEWLINE#
lst = [ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) ] #NEWLINE#
conn . send ( msg ) #NEWLINE#
any ( unique . update ( line ) for line in codecs . open ( filename , encoding = 'UTF-8' ) ) #NEWLINE#
"""c#SPACE#=#SPACE#55.6""" #NEWLINE#
import dependencyname_version as dependencyname #NEWLINE#
print ( list ( unpack ( { 'A' : [ { 'x' : 1 } , { 'x' : 2 } ] , 'B' : [ { 'x' : 3 } , { 'x' : 4 } ] } ) ) ) #NEWLINE#
a = np . ones ( ( 4 , 3 ) , dtype = int ) #NEWLINE#
df . applymap ( lambda x : float ( x . rstrip ( '%' ) ) / 100 ) #NEWLINE#
print ( ( k , v ) ) #NEWLINE#
foo . config . getboolean = mock . MagicMock ( return_value = True ) #NEWLINE#
return np . rollaxis ( result , 0 , result . ndim ) #NEWLINE#
f . write ( the_bytearray ) #NEWLINE#
ok = models . BooleanField ( null = False , default = True ) #NEWLINE#
print ( 'WHO#SPACE#COMPLETE' ) #NEWLINE#
print ( sys . maxunicode ) #NEWLINE#
"""System:#SPACE#System#SPACE#uptime#SPACE#(sorted)#SPACE#-#SPACE#Use#SPACE#parallel#SPACE#for#SPACE#best#SPACE#effect""" #NEWLINE#
Py_Finalize ( ) #NEWLINE#
plt . clf ( ) #NEWLINE#
data_mean = pd . rolling_mean ( data , window = 5 ) . shift ( - 2 ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
print ( "Couldn't#SPACE#open#SPACE#capture#SPACE#device." ) #NEWLINE#
print ( "Couldn't#SPACE#add#SPACE#input#SPACE#device." ) #NEWLINE#
print ( 'Failed#SPACE#to#SPACE#add#SPACE#output#SPACE#delegate.' ) #NEWLINE#
print ( 'Initiating#SPACE#capture...' ) #NEWLINE#
print ( 'Frame#SPACE#capture#SPACE#completed.' ) #NEWLINE#
print ( bar . x ) #NEWLINE#
elevation [ elevation > 0 ] = numpy . NAN #NEWLINE#
a = some_function ( '1' + '2' + '3' - '4' ) #NEWLINE#
list ( range ( start , stop + 1 , step ) ) #NEWLINE#
print ( add_number ( A ) ) #NEWLINE#
cube = numpy . array ( list ( itertools . product ( ( 0 , 1 ) , ( 0 , 1 ) , ( 0 , 1 ) ) ) ) #NEWLINE#
print ( requests . get ( 'https://httpbin.org/cookies/set?foo=bar' ) . json ( ) ) #NEWLINE#
parser . error ( '--interval#SPACE#should#SPACE#not#SPACE#be#SPACE#used#SPACE#with#SPACE#--build' ) #NEWLINE#
r . match ( 'January#SPACE#32,#SPACE#2001' ) is not None #NEWLINE#
r . match ( 'February#SPACE#32,#SPACE#2001' ) is not None #NEWLINE#
r . match ( 'February#SPACE#29,#SPACE#2001' ) is not None #NEWLINE#
r . match ( 'February#SPACE#28,#SPACE#2001' ) is not None #NEWLINE#
r . match ( 'February#SPACE#29,#SPACE#2000' ) is not None #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE# path = os . path . abspath ( args . file . name ) #NEWLINE#
locale . setlocale ( locale . LC_COLLATE , newone ) #NEWLINE#
xl . Application . Run ( 'excelsheet.xlsm!modulename.macroname' ) #NEWLINE#
a * b [ : , ( np . newaxis ) ] #NEWLINE#
print ( request . args [ 'x' ] ) #NEWLINE#
handles , labels = ax . get_legend_handles_labels ( ) #NEWLINE#
self . fig . canvas . mpl_connect ( 'pick_event' , self . on_pick ) #NEWLINE#
print ( '#SPACE##SPACE#From#SPACE#numpy:#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#%s' % list ( nump_hist ) ) #NEWLINE#
run ( 'chown#SPACE#-R#SPACE#web:ebalu#SPACE#rhino' ) #NEWLINE#
SOCIALACCOUNT_ADAPTER = 'point.to.adaptor.SocialAccountAdapter' #NEWLINE#
contour ( xi , yi , zi ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE#day#SPACE#{0}#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#week#SPACE#{1}' . format ( start_week_on , this_week ) ) #NEWLINE#
dir ( nltk . corpus ) #NEWLINE#
pd . concat ( [ df [ 'ID' ] , df [ 'col2' ] . str . join ( '@' ) . str . get_dummies ( '@' ) ] , axis = 1 ) #NEWLINE#
c . execute ( 'begin' ) #NEWLINE#
list_of_lists = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE# list_of_lists #NEWLINE#
unique_items = Cart . objects . filter ( user = user ) . first ( ) . distinct ( 'items' ) #NEWLINE#
p . stdin . write ( '\x1bOB' ) #NEWLINE#
self . bbutton = Button ( root , text = 'Browse' , command = self . browsecsv ) #NEWLINE#
plt . gca ( ) . add_artist ( scalebar ) #NEWLINE#
print ( 'Thread#SPACE#finished' ) #NEWLINE#
print ( 'Terminating#SPACE#process' ) #NEWLINE#
selenium . find_element_by_name ( 'submit' ) . click ( ) #NEWLINE#
st = 'wordW#SPACE#wordX#SPACE#wordY#SPACE#wordZ' #NEWLINE# re . findall ( '(?=(\\b\\w+\\s\\b\\w+))' , st ) #NEWLINE#
p = csv . reader ( contenu , dialect = 'windows_dialect' ) #NEWLINE#
s . connect ( ( host , port ) ) #NEWLINE#
plt . title ( 'fixed' ) #NEWLINE#
self . stop . grid ( row = 4 , column = 1 , sticky = EW ) #NEWLINE#
def somme ( x , y ) : #NEWLINE# #INDENT# return x + y #NEWLINE#
Str = random . randomint ( 1 , 18 ) #NEWLINE#
print ( df1 . to_string ( ) ) #NEWLINE#
c = np . array ( [ [ 1 , 0 , 0 ] , [ 1 , 0 , 0 ] , [ 1 , 0 , 0 ] , [ 1 , 1 , 0 ] ] ) #NEWLINE#
G = np . array ( [ [ 0 , 0 , 0 , 0 ] , [ 1 , 0 , 0 , 0 ] , [ 1 , 1 , 0 , 0 ] , [ 1 , 1 , 1 , 0 ] ] ) #NEWLINE#
manager . connect ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( rf . predict ( [ testdataset [ - 1 ] ] ) ) #NEWLINE#
response = requests . get ( 'http://www.stackoverflow.com' ) #NEWLINE#
print ( 'bar' ) #NEWLINE#
float_equal ( x , abc [ : , ( None ) ] ) . sum ( axis = 0 ) #NEWLINE#
phone_book . setdefault ( 'name' , [ ] ) . append ( number ) #NEWLINE#
django . setup ( ) #NEWLINE#
columns = np . array ( [ 2 , 1 , 3 ] ) #NEWLINE# rows = np . array ( [ 2 , 3 , 1 ] ) #NEWLINE#
sql = 'INSERT#SPACE#INTO#SPACE#TABLE_A#SPACE#(COL_A,COL_B)#SPACE#VALUES#SPACE#(%s,#SPACE#%s)' #NEWLINE# cursor . execute ( sql , ( val1 , val2 ) ) #NEWLINE#
[ i for i in x ] #NEWLINE#
Food . _meta . get_all_related_objects ( ) [ 0 ] . model #NEWLINE#
df [ [ 'col1' , 'col2' , 'col3' , 'col4' ] ] . groupby ( [ 'col1' , 'col2' ] ) . agg ( [ 'mean' , #NEWLINE# 'count' ] ) #NEWLINE#
df = DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 1 , 4 , 7 ] } ) #NEWLINE# df . isin ( { 'A' : [ 1 , 3 ] , 'B' : [ 4 , 7 , 12 ] } ) #NEWLINE#
"""<?xml#SPACE#version="1.0"#SPACE#encoding="UTF-8"?>#NEWLINE#<spellrequest#SPACE#textalreadyclipped="0"#SPACE#ignoredups="1"#SPACE#ignoredigits="1"#SPACE#ignoreallcaps="0">#NEWLINE#<text>%s</text>#NEWLINE#</spellrequest>#NEWLINE#""" #NEWLINE#
[ list ( range ( 2 , 6 ) ) , list ( range ( 12 , 18 ) ) ] #NEWLINE#
ax . pcolormesh ( theta , r , Z ) #NEWLINE#
def get_name ( ) : #NEWLINE# #INDENT# return first_name , last_name #NEWLINE#
plt . xticks ( [ 0 , 200 , 400 , 600 ] ) #NEWLINE# plt . xlabel ( 'Purchase#SPACE#amount' , fontsize = 18 ) #NEWLINE#
df [ 'AB' ] . str . split ( '-' , 1 ) . str [ 0 ] #NEWLINE#
f = open ( 'outfile' , 'wb' ) #NEWLINE#
funcA ( ) #NEWLINE#
hb2 = plt . hexbin ( x2 , y2 , norm = norm ) #NEWLINE#
greyscale = rgba_image . convert ( 'L' ) #NEWLINE#
zip ( list ( range ( len ( mylist ) ) ) , mylist ) #NEWLINE#
plt . title ( 'Sample#SPACE#Wav' ) #NEWLINE#
return [ Factorial ( x ) for x in arg ] #NEWLINE#
return response #NEWLINE#
f . write ( template ) #NEWLINE#
a [ : : 2 ] = 1 #NEWLINE# a [ 1 : : 2 ] = - 1 #NEWLINE#
scc . send ( base64 . b64encode ( 'username' ) + '\r\n' ) #NEWLINE#
f . flush ( ) #NEWLINE#
print ( link . text . strip ( ) [ 5 : ] ) #NEWLINE#
x [ 'b' ] = x . groupby ( 'c' ) . cumcount ( ) #NEWLINE#

( float ( d . strftime ( '%j' ) ) - 1 ) / 366 + float ( d . strftime ( '%Y' ) ) #NEWLINE#
[ 36.0 , 1.0 , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 2.0 , 1.0 ] #NEWLINE# [ - 100.0 , 5.0 , 110.0 , 215.0 , 320.0 , 425.0 , 530.0 , 635.0 , 740.0 , 845.0 , 950.0 ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
PyEval_SaveThread ( ) #NEWLINE#
numbers = map ( int , s . split ( ) ) #NEWLINE#
listitems = hxs . select ( "//div[@class='listItem']" ) #NEWLINE#
element2 = driver . find_element_by_xpath ( "//div[@title='div2']" ) #NEWLINE#
if 'key' in myDict : #NEWLINE# #INDENT# del myDict [ 'key' ] #NEWLINE#
reader = csv . reader ( open ( 'test.csv' ) ) #NEWLINE#
signed_number = ctypes . c_long ( number ) . value #NEWLINE#
text . set_rotation ( 90 ) #NEWLINE#
for x , y in list_of_tuples : #NEWLINE# #INDENT# pass #NEWLINE#
joe ( joe ( joe ( { } , myTupleList [ 0 ] ) , myTupleList [ 1 ] ) , myTupleList [ 2 ] ) #NEWLINE#
setp ( ax1 . get_xticklabels ( ) , fontsize = 6 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
screen = pygame . display . set_mode ( ( 800 , 350 ) , FULLSCREEN ) #NEWLINE#
myNames = f . readlines ( ) #NEWLINE#
lst . append ( '#SPACE#[' ) #NEWLINE#
lst . append ( ']' ) #NEWLINE#
temp . write ( line . replace ( '\r' ) ) #NEWLINE#
print ( 'Semaphore#SPACE#acquired' ) #NEWLINE#
print ( 'Blocking#SPACE#on#SPACE#semaphore#SPACE#-#SPACE#waiting#SPACE#for#SPACE#SIGTERM' ) #NEWLINE#
print ( 'Subprocess#SPACE#exiting#SPACE#gracefully' ) #NEWLINE#
[ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' ] #NEWLINE#
row = [ item [ 'id' ] for item in cursor . fetchall ( ) ] #NEWLINE# row #NEWLINE#
logger . addHandler ( fh ) #NEWLINE#
o . a = 2 #NEWLINE#
[ '##SPACE#coding#SPACE#=#SPACE#cp1252\n' , 'â\x80\x9chello#SPACE#seÃ±norâ\x80\x9d' ] #NEWLINE#
return sum ( float ( embedding ) for embedding in listOfEmb ) / len ( listOfEmb ) #NEWLINE#
plt . draw ( ) #NEWLINE#
mydata = c . execute ( 'DELETE#SPACE#FROM#SPACE#Zoznam#SPACE#WHERE#SPACE#Name=?' , ( data3 , ) ) #NEWLINE#
app . SetTopWindow ( frame ) #NEWLINE#
return render_template ( 'index.html' ) #NEWLINE#
fd = os . open ( 'filename' , os . O_CREAT | os . O_WRONLY | os . O_NONBLOCK ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( partitions ( '4824' ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
button . clicked . connect ( lambda : setattr ( self . model , 'value' , 10 ) ) #NEWLINE#
s = smtplib . SMTP ( 'smtp.gmail.com' ) #NEWLINE#
B = matrix ( expm ( A ) ) #NEWLINE#
print ( f ( 1 ) ) #NEWLINE#
x [ 1 ] #NEWLINE#
stdscr . getch ( ) #NEWLINE#
2 * a + b #NEWLINE#
vbox1 . addWidget ( self . edit2 ) #NEWLINE#
progbar . pack ( ) #NEWLINE#
main ( ) #NEWLINE#
hpattern = '#SPACE#|#SPACE#' . join ( hformats ) #NEWLINE#
kdll = ctypes . windll . LoadLibrary ( 'kernel32.dll' ) #NEWLINE# kdll . CreateSymbolicLinkA ( 'd:\\test.txt' , 'd:\\test_link.txt' , 0 ) #NEWLINE#
print ( '' . join ( traceback . format_exception_only ( * __exception__ ) ) ) #NEWLINE#
result_dict [ str ( len ( word ) ) ] . append ( word ) #NEWLINE#
ax2 . set_zlabel ( 'Z#SPACE#-#SPACE#axis' ) #NEWLINE#
logging . root . setLevel ( logging . DEBUG ) #NEWLINE#
builder . set_translation_domain ( 'domain' ) #NEWLINE#
data = request . GET #NEWLINE#
return between1 ( b [ 0 ] , p [ 0 ] , q [ 0 ] ) and between1 ( b [ 1 ] , p [ 1 ] , q [ 1 ] ) #NEWLINE#
print ( df [ 'date' ] . values . astype ( '<M8[h]' ) ) #NEWLINE#
from django . utils . translation import ugettext_lazy as _ #NEWLINE#
myDict [ key ] += val #NEWLINE#
flt = np . array ( [ x for x in lrg if x == 0 ] ) #NEWLINE#
print ( s [ i : ] ) #NEWLINE#
a = '123' #NEWLINE# int ( a ) #NEWLINE#
wb . save ( 'wrap.xlsx' ) #NEWLINE#
im2 , = ax2 . plot ( image [ 0 : time , ( 5 ) , ( 5 ) ] ) #NEWLINE#
Obj2 . grid_forget ( ) #NEWLINE#
result = list ( DBProcessor ( ) . get_listings ( ) ) #NEWLINE#
res += [ os . path . join ( root , d ) for d in dirs ] #NEWLINE#
par2 . set_xlabel ( 'treatment' ) #NEWLINE#
proc = subprocess . Popen ( 'ls' , stdout = subprocess . PIPE ) #NEWLINE#
cap = cv2 . VideoCapture ( 0 ) #NEWLINE#
f = open ( 'file.py' , 'w' ) #NEWLINE#
dict . fromkeys ( s , 0 ) #NEWLINE#
app . register_blueprint ( mod ) #NEWLINE#
cur . close ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
df [ 'D' ] [ ( df [ 'A' ] > 0 ) & ( df [ 'B' ] == 0 ) & ( df [ 'C' ] == 0 ) ] = 'c1' #NEWLINE#
"""fred""" . encode ( 'utf' ) #NEWLINE# hashlib . md5 ( 'fred' . encode ( 'utf' ) ) . hexdigest ( ) #NEWLINE#
print ( tag . find ( 'ns1:familyname' ) . text ) #NEWLINE#
m = fromfunction ( f , shape ) #NEWLINE#
x = np . arange ( len ( df . columns ) ) #NEWLINE#
df . set_index ( [ 'group' , 'id_' ] , inplace = True ) #NEWLINE#
min ( map ( lambda x : s . index ( x ) if x in s else len ( s ) , a ) ) #NEWLINE#
{ { message } } #NEWLINE#
print ( '{},#SPACE#{}' . format ( triplet ( ( 170 , 2 , 0 ) ) , triplet ( ( 170 , 2 , 0 ) , UPPERCASE ) ) ) #NEWLINE#
dall . update ( d3 ) #NEWLINE#
print ( '{}#SPACE#not#SPACE#found' . format ( kidname ) ) #NEWLINE#
GTK_LOCALE_DATA = os . path . join ( 'share' , 'locale' ) #NEWLINE#
print ( 'vixens#SPACE#cry' ) #NEWLINE#
df #NEWLINE#
plt . show ( ) #NEWLINE#
raise Exception ( 'some#SPACE#info' ) #NEWLINE#
e . save ( ) #NEWLINE#
[ [ 1 , 10 ] , [ 2 , 20 ] , [ 3 , 30 ] , [ 4 , 40 ] ] #NEWLINE#
find_indices ( a , lambda e : e > 2 ) #NEWLINE#
nodes [ 2 ] = 1 #NEWLINE#
print ( regex . group ( 2 ) ) #NEWLINE#
obj . refresh_from_db ( ) #NEWLINE#
self . visit_typeA ( dataobj ) #NEWLINE#
checkMAC ( '00-11-22-33-44-66' ) #NEWLINE#
checkMAC ( '1#SPACE#2#SPACE#3#SPACE#4#SPACE#5#SPACE#6#SPACE#7#SPACE#8#SPACE#9#SPACE#a#SPACE#b#SPACE#c' ) #NEWLINE#
print ( re . sub ( pattern , '<b>\\1</b>' , myInput ) ) #NEWLINE#
[ ( 'starts' , 2 ) , ( 'the' , 2 ) , ( 'counter' , 1 ) , ( 'for' , 1 ) ] #NEWLINE#
a = np . array ( [ 1 , 2 , 2 , 1 ] ) . reshape ( 2 , 2 ) #NEWLINE#
print ( parser . parse_args ( [ 'stop' , '--help' ] ) ) #NEWLINE#
a = 'hello' #NEWLINE# list ( a ) #NEWLINE#
df [ 'tw_avg' ] = df [ 'weight' ] . sum ( ) / df [ 'days-back' ] . sum ( ) #NEWLINE#
user . Setinfo ( ) #NEWLINE#
html = gzipper . read ( ) #NEWLINE#
gmpy . divm ( 1 , 4 , 9 ) #NEWLINE#
dict ( dd ) #NEWLINE#
a = str ( tag . getArtist ( ) ) #NEWLINE#
msg . set_payload ( 'Body#SPACE#of#SPACE#the#SPACE#message' ) #NEWLINE#
cet = pytz . timezone ( 'CET' ) #NEWLINE#
print ( '---STDERR---' ) #NEWLINE#
with open ( the_filename , 'wb' ) as f : #NEWLINE# #INDENT# pickle . dump ( my_list , f ) #NEWLINE#
df . to_excel ( writer , sheet_name = sheetname ) #NEWLINE#
main ( ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
ax . tick_params ( axis = 'y' , colors = 'red' ) #NEWLINE#
wx . Frame . __init__ ( self , None , title = 'Main#SPACE#Program' ) #NEWLINE#
nlargest ( 2 , tags , key = lambda e : e [ 1 ] ) #NEWLINE#
data = serializers . serialize ( 'json' , models . MyModel . objects . all ( ) , indent = 4 ) #NEWLINE#
return response #NEWLINE#
simplejson . loads ( json ) #NEWLINE#
oldest = max ( people , key = lambda p : p [ 1 ] ) #NEWLINE#
sys . exit ( EMERGENCY ) #NEWLINE#
result . append ( [ ] ) #NEWLINE#
opt , args = parser . parse_args ( ) #NEWLINE#
df = df . set_index ( 'concatenated' ) #NEWLINE# df #NEWLINE#
datetime . date ( 2011 , 1 , 3 ) . strftime ( '%Y-%m-%d' ) #NEWLINE#
axes . legend ( handles , labels ) #NEWLINE#
return dt + timedelta ( days = 365 ) #NEWLINE#
unicode_string = byte_string . decode ( encoding ) #NEWLINE#
img = Image . open ( StringIO ( response . content ) ) #NEWLINE#
app . cgirun ( ) #NEWLINE#
print ( 'Running#SPACE#test_callback,#SPACE#just#SPACE#for#SPACE#kicks' ) #NEWLINE#
p2 = subprocess . Popen ( [ 'grep' , '-c' , 'test' ] , stdin = p1 . stdout ) #NEWLINE#
r . sub ( '' , s ) #NEWLINE#
image = Image . open ( picture ) #NEWLINE#
[ 'apple' , 'Doppler' , 'applaud' , 'append' ] #NEWLINE#
self . setCentralWidget ( listWidget ) #NEWLINE#
df2 . rename ( columns = { 'negative_action' : 'action' } , inplace = True ) #NEWLINE#
groupby ( a , [ 1 ] ) #NEWLINE#
[ groups [ k ] for k in sorted ( groups . keys ( ) ) ] #NEWLINE#
print ( json_util . dumps ( data ) ) #NEWLINE#
sock . setsockopt ( socket . IPPROTO_TCP , socket . TCP_KEEPINTVL , interval_sec ) #NEWLINE#
signal . signal ( signal . SIGTERM , self . exit_gracefully ) #NEWLINE#
res = urllib . request . urlopen ( req ) #NEWLINE#
3 , 5 , ( 1 , 2 , 3 ) #NEWLINE#
setattr ( obj , self . name , float ( val ) ) #NEWLINE#
float ( '-0.0' ) == 0.0 #NEWLINE#
y = [ [ 1 , 2 ] , [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
f . write ( plaindata ) #NEWLINE#
plt . figure ( ) #NEWLINE#
q = DBSession . query ( model . Name ) . distinct ( model . Name . value ) #NEWLINE#
m . make_async_request ( { 'more_data' : 'more_mock_data' } ) #NEWLINE#
return obj . post_set . count ( ) #NEWLINE#
raise Http404 ( 'Page#SPACE#does#SPACE#not#SPACE#exist' ) #NEWLINE#
numpy . histogram ( a , bins = ( 0.0 , 7.3 , 22.4 , 55.5 , 77 , 79 , 98 , 100 ) ) #NEWLINE#
draw ( 2 , 4 , 5 ) #NEWLINE#
[ [ 'abc' , 'def' , 'geh' , 'ijk' , 'case1' ] , [ 'lmn' , 'opq' , 'rst' , 'uvw' , 'case2' ] ] #NEWLINE#
data = [ { 'id1' : 'a' , 'price' : '2' } , { 'id1' : 'b' , 'price' : '5' } , { 'id1' : 'a' , #NEWLINE# 'price' : '2' } ] #NEWLINE#
sys . version_info [ : 3 ] #NEWLINE#
plt . locator_params ( nbins = 10 ) #NEWLINE#
s = '' . join ( s ) #NEWLINE#
print ( hex ( id ( x ) ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda acc , y : acc + y [ 0 ] + y [ 1 ] , nums , 0 ) #NEWLINE#
print ( dll . get_buf ( ) ) #NEWLINE#
return [ ( arr [ i ] , i ) for i in indices ] #NEWLINE#
p = figure ( x_range = ( - 1 , 1 ) , y_range = ( - 1 , 1 ) ) #NEWLINE#
re . findall ( '([' + string . letters + '])+' , st ) #NEWLINE#
words . flatMap ( set ) . distinct ( ) . count ( ) #NEWLINE#
sys . stdout . buffer . write ( data ) #NEWLINE#
return HttpResponse ( 'ERROR:#SPACE#Kumquat#SPACE#already#SPACE#exists!' ) #NEWLINE#
a = defaultdict ( lambda : 1 ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
return ',#SPACE#' . join ( words ) #NEWLINE#
print ( key , dict [ key ] ) #NEWLINE#
zippend ( ( one_array , two_array ) , two_outputs ( ) ) #NEWLINE#
return l [ : n ] #NEWLINE#
bool ( 'NO' ) #NEWLINE#
self . mplvl . setGeometry ( QtCore . QRect ( 150 , 150 , 251 , 231 ) ) #NEWLINE#
my_dict [ 1 , 2 ] = 3 #NEWLINE#
numpy . set_printoptions ( threshold = numpy . nan ) #NEWLINE#
self . label . setMouseTracking ( True ) #NEWLINE#
flann = cv2 . flann_Index ( desc2 , flann_params ) #NEWLINE#
sys . modules [ 'package.module' ] #NEWLINE#
sys . modules [ '__main__' ] #NEWLINE#
m = merge_a_b ( a , b ) #NEWLINE#
Column ( 'created_on' , DateTime , default = datetime . datetime . now ) #NEWLINE# Column ( 'last_updated' , DateTime , onupdate = datetime . datetime . now ) #NEWLINE#
print ( [ sum ( x ) for x in itertools . zip_longest ( * lists , fillvalue = 0 ) ] ) #NEWLINE#
tz = pytz . timezone ( 'CST6CDT' ) #NEWLINE#
sys . exit ( ) #NEWLINE#
from matplotlib . backends . backend_gtkagg import FigureCanvasGTKAgg as Canvas #NEWLINE#
from urllib . parse import parse_qs #NEWLINE#
[ 18632400 , 18632160 , 18632400 , 18632160 , 18651400 , 18651440 , 18651360 , #NEWLINE# 18632400 , 18651360 ] #NEWLINE#
ellipse . set_color ( 'red' ) #NEWLINE#
writer = csv . writer ( self . response . out ) #NEWLINE#
def remove_abnormalities ( values , indices ) : #NEWLINE# #INDENT# return [ val for i , val in enumerate ( values ) if i not in indices ] #NEWLINE#
print ( '\n' . join ( table ) ) #NEWLINE#
parser . add_option ( '-q' , action = 'store_false' , dest = 'verbose' ) #NEWLINE#
f = open ( 'mydata.pkl' , 'rb' ) #NEWLINE#
request . environ . get ( 'HTTP_X_REAL_IP' , request . remote_addr ) #NEWLINE#
s = requests . Session ( ) #NEWLINE#
int_list = [ int ( x ) for x in line . split ( ) ] #NEWLINE#
plt . set_cmap ( viridis ) #NEWLINE#
documents = [ doc [ 0 ] for doc in documents ] #NEWLINE#
def get_creation_time ( path ) : #NEWLINE# #INDENT# return os . stat ( path ) . st_birthtime #NEWLINE#
print ( [ b ( 5 ) for b in bases ] ) #NEWLINE#
import imp #NEWLINE# imp . reload ( MyPak ) #NEWLINE#
( dt - epoch ) . total_seconds ( ) #NEWLINE#
p = Popen ( [ 'python' , 'script.py' ] , stdin = PIPE , stdout = PIPE ) #NEWLINE#
super ( integer_expression , self ) . __init__ ( ) #NEWLINE#
Py_DECREF ( result ) #NEWLINE#
sigmoid ( W1 * x1 + W2 * x2 + B ) #NEWLINE#
not any ( data ) #NEWLINE#
list ( zip ( A , B * 2 ) ) #NEWLINE#
for d in list_of_d : #NEWLINE# #INDENT# del d [ 'k1' ] #NEWLINE#
fout . writelines ( '{}\t{}' . format ( line , next ( fin2 ) ) for line in fin1 ) #NEWLINE#
options , args = parser . parse_args ( ) #NEWLINE#
{ 1 } . pop ( ) #NEWLINE#
my_list = [ b , a ] #NEWLINE#
cv . SetCaptureProperty ( camcapture , cv . CV_CAP_PROP_FRAME_WIDTH , 1280 ) #NEWLINE#
( np . diff ( sdata ) > 0 ) . sum ( axis = 1 ) + 1 #NEWLINE#
from pygame . locals import * #NEWLINE#
list ( chain . from_iterable ( a ) ) #NEWLINE#
'file3' , 'string5' , 'string6' #NEWLINE#
data . append ( map ( str . strip , row ) ) #NEWLINE#
reader = csv . DictReader ( open ( 'myfile.csv' ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
ax . plot ( x , i * x + x , label = '$y={i}x#SPACE#+#SPACE#{i}$' . format ( i = i ) ) #NEWLINE#
print ( d [ 'bookmark_collection' ] [ 'sublinks' ] ) #NEWLINE#
category = models . ForeignKey ( Category ) #NEWLINE#
return transact2 ( ) #NEWLINE#
with open ( 'wxdata' , 'w' ) as file : #NEWLINE# #INDENT# file . write ( port . read ( ) ) #NEWLINE#
"""""" . join ( sorted ( [ '1' , '5' , '2' , '9' ] , reverse = True ) ) #NEWLINE#
mail . quit ( ) #NEWLINE#
request . user . subprofile = self . user . default_subprofile #NEWLINE#
os . environ [ 'MY_THING' ] = my_thing #NEWLINE#
pylab . show ( ) #NEWLINE#
unittest . main ( ) #NEWLINE#
ax . legend ( handles = ax . lines [ : : len ( df1 ) + 1 ] , labels = [ 'A' , 'B' , 'C' ] ) #NEWLINE#
myDF = pd . DataFrame ( data ) #NEWLINE#
self . _shape = self . _shape [ 0 ] , self . _shape [ 1 ] - 1 #NEWLINE#
print ( 'Done!' ) #NEWLINE#
ax3 . plot_surface ( ti , xi , u_int , cmap = cm . coolwarm ) #NEWLINE#
image = pygame . Surface ( [ 640 , 480 ] , pygame . SRCALPHA , 32 ) #NEWLINE# image = image . convert_alpha ( ) #NEWLINE#
le . fit ( [ 'paris' , 'paris' , 'tokyo' , 'amsterdam' ] ) #NEWLINE#
df [ ~ df . filter ( regex = '^sps(?!1$)\\d+$' ) . eq ( df . sps1 , axis = 'rows' ) . any ( 1 ) ] #NEWLINE#
print ( re . findall ( '(\\S[^:]+):\\s*(.*\\S)' , r ) ) #NEWLINE#
str1 = 'a#SPACE##SPACE##SPACE##SPACE#b#SPACE##SPACE##SPACE##SPACE##SPACE#c#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#d' #NEWLINE# re . split ( '#SPACE#+' , str1 ) #NEWLINE#
plt . ylabel ( 'ylabel' ) #NEWLINE#
mylst = [ ( a , b , c ) , ( x , y , z ) , ( l , m , n ) ] , #NEWLINE#
return app #NEWLINE#
mydll = ctypes . CDLL ( '...' ) #NEWLINE# del mydll #NEWLINE# mydll = ctypes . CDLL ( '...' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 2 , 2 ] , [ 3 , 1 ] , [ 7 , 5 ] ] ) #NEWLINE#
[ sum ( i ) for i in zip_longest ( * l , fillvalue = 0 ) ] #NEWLINE#
eday1 . grid ( row = 1 , column = 3 ) #NEWLINE#
cursor . close ( ) #NEWLINE#
listD . append ( listC [ num ] ) #NEWLINE#
soup . findAll ( 'div' , id = 'hotlink' ) [ 2 ] . a #NEWLINE#
struct . pack ( '<h' , - 2 ) #NEWLINE#
canvas . grid ( row = 0 , column = 0 , sticky = N + S + E + W ) #NEWLINE#
x = np . clip ( x , 0 , 1 ) #NEWLINE#
print ( 'clean#SPACE#me' ) #NEWLINE#
[ i for i , _ in enumerate ( L ) if _ [ 'name' ] == 'Tom' ] [ 0 ] #NEWLINE#
self . entry . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
np . array ( zip ( A , A [ 1 : ] , A [ 2 : ] , A [ 3 : ] ) ) #NEWLINE#
list ( itertools . combinations ( enumerate ( a ) , 2 ) ) #NEWLINE#
print ( 'Starting' ) #NEWLINE#
self . conf . update ( params = { 'type' : 'all' , 'direction' : 'desc' } ) #NEWLINE#
"""#NEWLINE#""" . join ( [ '\t' . join ( b ) for b in p ] ) #NEWLINE#
self . stats . inc_value ( 'scheduler/enqueued/memory' , spider = self . spider ) #NEWLINE#
self . stats . inc_value ( 'scheduler/enqueued' , spider = self . spider ) #NEWLINE#
'adapter/ALabSimulatorTime.cpp' , 'adapter/ALabNetBinding.cpp' , 'adapter/AValueArg.cpp' , 'adapter/ALabSiteSetsManager.cpp' #NEWLINE#
'adapter/ALabNetBinding.cpp' , 'adapter/AValueArg.cpp' , 'adapter/ALabSiteSetsManager.cpp' , 'adapter/ALabSite.cpp' #NEWLINE#
f = open ( 'out.txt' , 'r' ) #NEWLINE#
result = np . vectorize ( my_dict . get ) ( a ) #NEWLINE#
type ( counts ) #NEWLINE#
coeff , r , rank , s = np . linalg . lstsq ( A , B ) #NEWLINE#
time . sleep ( 1.1234 ) #NEWLINE#
s3 = boto . connect_s3 ( ) #NEWLINE#
admin . site . register ( Department , DepartmentAdmin ) #NEWLINE#
c . close ( ) #NEWLINE#
print ( self . var ) #NEWLINE#
cleaned = [ i for i in map ( str . strip , words ) if i ] #NEWLINE#
templates_path = [ 'templates' ] #NEWLINE#
print ( [ element for element in lst ] ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
ord ( 'a' ) , ord ( 'b' ) #NEWLINE#
df [ 'uld' ] = 0 #NEWLINE#
Counter ( map ( tuple , a ) ) #NEWLINE#
text = pipe . communicate ( ) [ 0 ] #NEWLINE#
filename = models . CharField ( max_length = 128 ) #NEWLINE#
sock . close ( ) #NEWLINE#
random . shuffle ( l2 ) #NEWLINE#
parser . parse_args ( ) #NEWLINE#
requestCode = struct . unpack ( '>i' , self . request . recv ( 4 ) ) [ 0 ] #NEWLINE#
DEBUG_TOOLBAR_PANELS = [ #NEWLINE# 'ddt_request_history.panels.request_history.RequestHistoryPanel' , #NEWLINE# 'debug_toolbar.panels.versions.VersionsPanel' , #NEWLINE# 'debug_toolbar.panels.timer.TimerPanel' , #NEWLINE# 'debug_toolbar.panels.settings.SettingsPanel' , #NEWLINE# 'debug_toolbar.panels.headers.HeadersPanel' , #NEWLINE# 'debug_toolbar.panels.request.RequestPanel' , #NEWLINE# 'debug_toolbar.panels.sql.SQLPanel' , #NEWLINE# 'debug_toolbar.panels.templates.TemplatesPanel' , #NEWLINE# 'debug_toolbar.panels.staticfiles.StaticFilesPanel' , #NEWLINE# 'debug_toolbar.panels.cache.CachePanel' , #NEWLINE# 'debug_toolbar.panels.signals.SignalsPanel' , #NEWLINE# 'debug_toolbar.panels.logging.LoggingPanel' , #NEWLINE# 'debug_toolbar.panels.redirects.RedirectsPanel' , #NEWLINE# 'debug_toolbar.panels.profiling.ProfilingPanel' ] #NEWLINE#
a2D = np . lib . stride_tricks . as_strided ( a , shape = ( nrows , N ) , strides = ( n , n ) ) #NEWLINE#
pip . main ( [ 'install' , '--user' , 'zumba' ] ) #NEWLINE#
a = [ 1 , 1 , 1 , 1 , 1 ] #NEWLINE#
bin_n = bin ( int ( n ) ) #NEWLINE#
sc . addFile ( config . get ( 'model_file' ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
diff ( x ) #NEWLINE#
df2 [ 'revenue' ] = df2 . CET . map ( df1 . set_index ( 'date' ) [ 'revenue' ] . to_dict ( ) ) #NEWLINE#
os . execve ( os . path . realpath ( __file__ ) , sys . argv , os . environ ) #NEWLINE#
self . server . bind ( ( host , port ) ) #NEWLINE#
b [ 1 : 2 : 3 ] #NEWLINE#
map ( a . __getitem__ , b ) #NEWLINE#
plt . xlabel ( 'x#SPACE#axis' , fontsize = 13 ) #NEWLINE#
[ 0 , 2 , 6 , 7 ] #NEWLINE#
db = _mysql . connect ( host = 'localhost' , user = 'joebob' , passwd = 'moonpie' , db = #NEWLINE# 'thangs' ) #NEWLINE#
matrix [ : ] = [ ( [ 0 ] * len ( row ) if 0 in row else row ) for row in matrix ] #NEWLINE#
df [ 'month' ] = df [ <STR0> ] . dt . month #NEWLINE#
super ( MyGrid , self ) . __init__ ( ** kwargs ) #NEWLINE#
pickle . dump ( abe , f ) #NEWLINE#
qs_sorted . append ( qs . get ( id = id ) ) #NEWLINE#
plt . title ( 'Signal#SPACE#Wave...' ) #NEWLINE#
button1 = Button ( self , text = 'Quit' , command = self . quit , anchor = W ) #NEWLINE#
solution = pd . concat ( frames ) #NEWLINE#
myparent = models . ForeignKey ( Parent ) #NEWLINE#
input = [ 'word1,#SPACE#23,#SPACE#12' , 'word2,#SPACE#10,#SPACE#19' , 'word3,#SPACE#11,#SPACE#15' ] #NEWLINE#
raise ValueError ( 'temp#SPACE#password#SPACE#must#SPACE#have#SPACE#positive#SPACE#length' ) #NEWLINE#
sys . path . insert ( 0 , parent_dir ) #NEWLINE#
child . sendline ( password ) #NEWLINE#
strc = np . zeros ( 3 , dtype = [ ( 'x' , int ) , ( 'y' , float ) , ( 'z' , int ) , ( 't' , 'i8' ) ] ) #NEWLINE#
origin . py | process1 . py | process2 . py | process3 . py #NEWLINE#
data [ 'maps' ] [ 0 ] [ 'id' ] #NEWLINE#
lst1 = [ { 'id' : 1 , 'x' : 'one' } , { 'id' : 2 , 'x' : 'two' } ] #NEWLINE#
"""a#SPACE#=1#SPACE#+2#SPACE#""" #NEWLINE#
print ( 'Invalid#SPACE#date!' ) #NEWLINE#
'B' , 'A' , 'C' #NEWLINE#
'B' , 'C' , 'A' #NEWLINE#
'C' , 'A' , 'B' #NEWLINE#
[ '>Safr02' , 'R' , '104' ] [ '>Safr01' , 'C' , '15' ] #NEWLINE#
raise Exception ( 'Unexpected#SPACE#type#SPACE#of#SPACE#tagged#SPACE#object' ) #NEWLINE#
collections . deque ( iterator , maxlen = 0 ) #NEWLINE#
root . rowconfigure ( ( 0 , 1 ) , weight = 1 ) #NEWLINE#
'vcUserId' , 'vcPortionId' , 'vcPortionName' , 'vcPortionSize' #NEWLINE#
print ( x . group ( 1 ) ) #NEWLINE#
nltk . set_proxy ( 'http://proxy.example.com:3128' ( 'USERNAME' , 'PASSWORD' ) ) #NEWLINE#
transform = { 'type_id' : 'type' , 'type_name' : 'name' } #NEWLINE# new_list = [ dict ( ( transform [ k ] , v ) for k , v in list ( d . items ( ) ) ) for d in #NEWLINE# old_list ] #NEWLINE#
strint ( 'abc' [ : : - 1 ] ) #NEWLINE#
zip ( * list_of_values [ i : i + len ( pattern ) ] ) #NEWLINE#
super ( FirstBase , self ) . __init__ ( ** kwargs ) #NEWLINE#
memoryview ( zeros ( 10 , dtype = [ ( 'A' , 'm8[s]' ) ] ) ) #NEWLINE#
[ item for item in items if item . col2 == 2006 ] #NEWLINE#
a = np . array ( [ 1 , 3 , 5 , 6 , 4 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
asyncore . dispatcher . __init__ ( self ) #NEWLINE#
return DataFrame ( [ row for i in range ( 1000 ) ] ) #NEWLINE#
kwargs = { } #NEWLINE#
pronouncing . rhymes ( 'climbing' ) #NEWLINE#
isinstance ( dict ( ) , collections . MutableMapping ) #NEWLINE#
plt . show ( ) #NEWLINE#
wr . writerow ( mylist ) #NEWLINE#
template = cv2 . imread ( template_path , cv2 . IMREAD_UNCHANGED ) #NEWLINE#
sum ( y > 2 for y in x ) #NEWLINE#
s = 'aabbccdd' #NEWLINE# """-""" . join ( s [ i : i + 2 ] for i in range ( 0 , len ( s ) , 2 ) ) #NEWLINE#
[ x [ i : i + chunk_size ] for i in range ( 0 , chunks , chunk_size ) ] #NEWLINE#
myClassObj = MyClass ( a = 12 , b = 'abc' ) #NEWLINE#
keys = [ 'name' , 'last_name' , 'phone_number' , 'email' ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
mech = mechanize . Browser ( ) #NEWLINE#
return pd . DataFrame ( r , i , u ) #NEWLINE#
sys . path #NEWLINE#
regex = re . compile ( '\\b(' + remove + ')\x08' , flags = re . IGNORECASE ) #NEWLINE#
[ 'Westminister' , '15' , 'London' , '#SPACE#' , 'England' ] #NEWLINE#
new_list2 = [ list2 [ i ] for i in indicies ] #NEWLINE#
pprint . pprint ( w . config ( ) ) #NEWLINE# root . mainloop ( ) #NEWLINE#
lst = [ [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] ] #NEWLINE# x , y = zip ( * lst ) #NEWLINE#
plt . gca ( ) . add_patch ( plt . Circle ( ( j , - i ) , radius = 0.1 , fc = 'y' ) ) #NEWLINE#
output += item [ 0 ] . upper ( ) + item [ 1 : ] #NEWLINE#
bars [ 3 ] . set_color ( 'g' ) #NEWLINE#
a [ np . ix_ ( a [ : , ( 0 ) ] > 3 , np . array ( [ True , True , False , True ] ) ) ] #NEWLINE#
print ( '{FamilyN}#SPACE#{Name}#SPACE#{Age}' . format ( ** data ) ) #NEWLINE#
df . join ( x ) #NEWLINE#
parser . add_argument ( '-mode' , choices = [ 'download' , 'upload' ] , required = True ) #NEWLINE#
return fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
date_parser = pd . datetools . to_datetime #NEWLINE#
pylab . show ( ) #NEWLINE#
cj . add_cookie_header ( req ) #NEWLINE#
parser . add_option ( '--some-option' ) #NEWLINE#
func ( ) #NEWLINE#
[ 'apple' , 'sausage' , 'banana' , 'cheese' ] #NEWLINE#
button . set_sensitive ( False ) #NEWLINE#
logger . warning ( 'WARNING' ) #NEWLINE#
yield key , sum ( d . get ( key , 0 ) for d in dict_list ) #NEWLINE#
pprint ( result ) #NEWLINE#
C . setopt ( pycurl . COOKIEFILE , 'cookie.txt' ) #NEWLINE#
win = gtk . Window ( gtk . WINDOW_TOPLEVEL ) #NEWLINE#
list . __setitem__ ( self , index , value ) #NEWLINE#
suite . sort ( ) #NEWLINE#
list [ i ] . append ( random . randint ( 0 , 9 ) ) #NEWLINE#
del df [ 'dummy' ] #NEWLINE#
print ( df . reset_index ( ) ) #NEWLINE#
print ( d . get ( 'b' ) ) #NEWLINE#
config . add_site_route ( 'site_users' , '/user' ) #NEWLINE#
re . sub ( '\\.txt$' , '' , 'Boat.txt.txt' ) #NEWLINE#
df . loc [ [ 0 , 2 , 4 ] ] #NEWLINE#
writer . writerows ( zip ( * test_data [ 1 : ] ) ) #NEWLINE#
df = pd . DataFrame ( { 'key' : key , 'sum' : sum_ } ) #NEWLINE#
data = self . cleaned_data [ 'password' ] #NEWLINE#
user . put ( ) #NEWLINE#
4.0 * scipy . integrate . nquad ( f , [ [ 0 , inf ] , [ 0 , inf ] ] ) [ 0 ] #NEWLINE#
x . execute ( 'INSERT#SPACE#INTO#SPACE#anooog1#SPACE#VALUES#SPACE#(%s,%s)' , ( 188 , 90 ) ) #NEWLINE#
lock . acquire ( ) #NEWLINE#
LOGGING [ 'handlers' ] [ 'console' ] [ 'filters' ] . append ( 'suppress_deprecated' ) #NEWLINE#
return '<{0}#SPACE#{1}>' . format ( self . __class__ . __name__ , self . _list ) #NEWLINE#
print ( dict . setdefault . __doc__ ) #NEWLINE#
super ( FooModel , self ) . save ( force_insert , force_update ) #NEWLINE#
np . where ( np . convolve ( may_a , may_b . astype ( int ) , mode = 'valid' ) == may_b . sum ( ) ) [ 0 ] #NEWLINE#
print ( json_data [ entry ] ) #NEWLINE#
main ( ) #NEWLINE#
[ [ [ 1 ] [ 2 ] ] ] #NEWLINE#
print ( e . subs ( [ ( a , d ) , ( b , f ) ] ) ) #NEWLINE#
fig . clf ( ) #NEWLINE#
return super ( ProtectedView , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
s . bind ( ( TCP_IP , TCP_PORT ) ) #NEWLINE#
scipy . misc . factorial ( 6 ) #NEWLINE#
db . init_app ( app ) #NEWLINE#
nom_plan_label . setStyleSheet ( 'color:#SPACE#yellow' ) #NEWLINE#
xl . Workbooks . Open ( 'book1.xlsx' ) #NEWLINE#
plt . legend ( loc = 'best' , bbox_to_anchor = ( 1.0 , 1.0 ) ) #NEWLINE#
gc . collect ( ) #NEWLINE#
image . paste ( ic , box ) #NEWLINE#
float ( a . replace ( ',' , '' ) ) #NEWLINE#
img . save ( 'out.jpg' , quality = 100 ) #NEWLINE#
some_func ( value = some_dict . get ( 'value' ) ) #NEWLINE#
MyStruct = namedtuple ( 'MyStruct' , 'field1#SPACE#field2#SPACE#field3' ) #NEWLINE#
groups_no_a = [ i for i in groups if a not in i ] #NEWLINE#
spwd . getspnam ( 'root' ) #NEWLINE#
return render_template ( 'users/iscrizione.html' , ** ctx ) #NEWLINE#
self . image . set_size_request ( width = 400 , height = 400 ) #NEWLINE#
QWebView . page ( ) . setNetworkAccessManager ( myNetworkAccessManager ) #NEWLINE#
print ( moneyx ) #NEWLINE#
django . setup ( ) #NEWLINE#
print ( 'this#SPACE#took#SPACE#too#SPACE#long...' ) #NEWLINE#
getFromDict ( dataDict , [ 'a' , 'r' ] ) #NEWLINE#
d = [ ( 'B' , 3 ) , ( 'A' , 2 ) , ( 'A' , 1 ) , ( 'I' , 1 ) , ( 'J' , 1 ) ] #NEWLINE# sorted ( d , key = lambda x : ( - x [ 1 ] , x [ 0 ] ) ) #NEWLINE#
lst = [ 1 , 2 , 3 ] #NEWLINE# print ( '\n' . join ( '{}:#SPACE#{}' . format ( * k ) for k in enumerate ( lst ) ) ) #NEWLINE#
{ { request . user . get_myuser . pretty_username } } #NEWLINE#
return '' #NEWLINE#
clear ( ) #NEWLINE#
df . set_index ( 'Date' ) #NEWLINE#
sampl = np . random . uniform ( low = 0.5 , high = 13.3 , size = ( 50 , ) ) #NEWLINE#
n = gmpy2 . next_prime ( n ) #NEWLINE#
df = pd . read_csv ( fie_name , header = None , names = col_headers_list ) #NEWLINE#
parser . add_argument ( '--foo' , help = 'do#SPACE#something.' ) #NEWLINE#
df . sort_values ( 'order' ) #NEWLINE#
input . write ( 'hello#SPACE#world#SPACE#!' ) #NEWLINE#
pat . search ( s ) #NEWLINE#
plt . scatter ( x , y , zorder = 1 ) #NEWLINE#
text = '\\u0631\\u064e\\u062c\\u0627' #NEWLINE# print ( text . encode ( ) . decode ( 'unicode-escape' ) ) #NEWLINE#
max_by_group . collect ( ) #NEWLINE#
print ( 'You#SPACE#have#SPACE#finished#SPACE#{0}%\r' . format ( percentage ) , end = '#SPACE#' ) #NEWLINE#
self . f = wave . open ( TESTFN , 'wb' ) #NEWLINE#
( ( df [ 'A' ] == 2 ) & ( df [ 'B' ] == 3 ) ) . any ( ) #NEWLINE# ( ( df [ 'A' ] == 1 ) & ( df [ 'B' ] == 2 ) ) . any ( ) #NEWLINE#
data = super ( ) . get_context_data ( ** kwargs ) #NEWLINE#
print ( next ( next ( mp . parse_sents ( [ sent , sent2 ] ) ) ) ) #NEWLINE#
return re . search ( '\\d' , string ) #NEWLINE#
def is_prime ( n ) : #NEWLINE# #INDENT# for i in range ( 3 , n ) : #NEWLINE# #INDENT# #INDENT# if n % i == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# return False #NEWLINE# #INDENT# #INDENT# #INDENT# #NEWLINE# #NEWLINE# return True #NEWLINE#
print ( list ( myDict . keys ( ) ) ) #NEWLINE#
arr = np . append ( arr , np . array ( [ [ 1 , 2 , 3 ] ] ) , axis = 0 ) #NEWLINE#
self . rect . set_height ( self . y1 - self . y0 ) #NEWLINE#
return struct . unpack ( 'i' , struct . pack ( 'f' , float ( i ) ) ) [ 0 ] #NEWLINE#
wordlist = openedfile . read ( ) . split ( ) #NEWLINE#
do_something ( column ) #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
print ( a . replace ( '\\\\' , '\\' ) ) #NEWLINE#
df1 [ 'sum' ] = df1 . sum ( axis = 1 ) #NEWLINE#
new_str = unicodedata . normalize ( 'NFKD' , unicode_str ) #NEWLINE#
[ ( a [ 'pos' ] [ name ] > b [ 'pos' ] [ name ] ) for name in [ 'x' , 'y' ] ] #NEWLINE#
return tuple ( [ x for x in map ( itemgetter ( 0 ) , G ) ] ) #NEWLINE#
n . addConnection ( bias_to_hidden ) #NEWLINE#
reversed_dict [ value ] . append ( key ) #NEWLINE#
np . random . seed ( 12345 ) #NEWLINE#
raise TesseractError ( 'initialization#SPACE#failed' ) #NEWLINE#
raise TesseractError ( 'lib#SPACE#not#SPACE#configured' ) #NEWLINE#
raise TesseractError ( 'api#SPACE#not#SPACE#created' ) #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
manylinux1_compatible = False #NEWLINE#
os . listdir ( long_unc ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
do_something ( ) #NEWLINE#
ax . set_xlim ( x . min ( ) , x . max ( ) ) #NEWLINE#
return send_file ( filename , mimetype = 'image/gif' ) #NEWLINE#
print ( [ '|' . join ( line ) for line in join_lines ( data ) if line ] ) #NEWLINE#
return math . pow ( x , y ) #NEWLINE#
print ( '%s#SPACE#is#SPACE#even' % ( x , ) ) #NEWLINE#
B = np . hstack ( ( splits [ 0 ] , splits [ 2 ] ) ) #NEWLINE#
format ( nine_hours_from_now , '%H:%M:%S' ) #NEWLINE#
[ x for x in filename if x . isdigit ( ) ] #NEWLINE#
return os . path . split ( x ) [ - 1 ] #NEWLINE#
pkl_file = open ( 'data.pkl' , 'rb' ) #NEWLINE#
ls . insert ( 0 , 'new' ) #NEWLINE#
cursor = cnx . cursor ( dictionary = True ) #NEWLINE#
commom = [ item for item in list ( dict_b . values ( ) ) if item in list ( dict_a . #NEWLINE# values ( ) ) ] #NEWLINE#
print ( G . __code__ . co_freevars ) #NEWLINE#
unittest . main ( ) #NEWLINE#
return v [ np . lexsort ( tuple ( v [ : , ( i ) ] for i in order [ : : - 1 ] ) ) ] #NEWLINE#
self . show_popup ( ) #NEWLINE#
f . write ( part . get_payload ( None , True ) ) #NEWLINE#
print ( fin . read ( ) ) #NEWLINE#
self . webdriver . get ( self . store [ 'base' ] + url ) #NEWLINE#
parser . add_argmument ( 'p' , '--pattern' , dest = 'pattern' , help = 'your#SPACE#help#SPACE#text' ) #NEWLINE#
c . connect ( ( hostn , 80 ) ) #NEWLINE#
hover . tooltips = [ ( 'Days' , '@x{int}' ) , ( 'Return' , '@y{1.11}' ) ] #NEWLINE#
super ( ) . __init__ ( steamid ) #NEWLINE#
os . environ [ 'USER_IS_ADMIN' ] = '' #NEWLINE#
return { 'foo' : 'bar' } #NEWLINE#
df . index = df . index + 1 #NEWLINE#
sys . stdout . write ( '\rDone:#SPACE#' + str ( progress ) + '%' ) #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE# ax . set_yticklabels ( [ ] ) #NEWLINE#
new_instance = MyModel ( month = MyModel . JAN ) #NEWLINE#
return '' . join ( reversed ( s ) ) #NEWLINE#
print ( page_content . encode ( 'utf-8' ) ) #NEWLINE#
a / ( math . sqrt ( 2 ) * erfinv ( P ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
test . py #NEWLINE#
plt . step ( x , y ) #NEWLINE#
warnings . simplefilter ( 'error' , DeprecationWarning ) #NEWLINE#
print ( cookie ) #NEWLINE#
engine = create_engine ( 'mysql://test:test@localhost/test1' , echo = True ) #NEWLINE#
hllDll = ctypes . WinDLL ( 'c:\\PComm\\ehlapi32.dll' ) #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
check_geometry ( lines , 'BCD' ) == check_geometry ( lines , ( 'B' , 'C' , 'D' ) ) #NEWLINE#
print ( 'output:\n%s' % s ) #NEWLINE#
return itertools . zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
return tuple_foo ( tuple ( a ) ) #NEWLINE#
os . makedirs ( path ) #NEWLINE#
csv_writer = csv . writer ( test_file , delimiter = ',' ) #NEWLINE#
df [ : - 1 ] #NEWLINE#
CoverageACol = array ( list ( range ( 10 ) ) , dtype = str ) . reshape ( 2 , 5 ) #NEWLINE#
logging . getLogger ( 'comtypes' ) . setLevel ( logging . INFO ) #NEWLINE#
[ 'Egypt' , 'EÌ\x81gypt' , 'US' ] #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) #NEWLINE#
df #NEWLINE#
self . spritesheet = tk . PhotoImage ( file = 'spritesheet.gif' ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
test = np . array ( [ 0 , 1 , 2 , 5 , 0 ] ) #NEWLINE#
args = parser . parse_args ( sys . argv [ 1 : ] ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
re . sub ( '(this)(.*)(string)' , '<markup>\\1</markup>\\2<markup>\\3</markup>' , #NEWLINE# text ) #NEWLINE#
image . save ( output ) #NEWLINE#
print ( 'Hello!' ) #NEWLINE#
np . set_printoptions ( suppress = True ) #NEWLINE#
pyhk . addHotkey ( SomeHotkey , SomeFunction ) #NEWLINE#
df #NEWLINE#
[ list ( range ( s , s + step + 1 , step ) ) for s in range ( start , stop , step ) ] #NEWLINE#
fn ( * args , ** kwargs ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
df_reorder . to_csv ( '/path/to/sample_reorder.csv' , index = False ) #NEWLINE#
conn . close ( ) #NEWLINE#
CONFIG_PATH = os . path . join ( ROOT_DIR , 'configuration.conf' ) #NEWLINE#
p . start ( ) #NEWLINE#
nx . draw ( G ) #NEWLINE#
q . findall ( './/hello' ) #NEWLINE#
walk , walk2 = itertools . tee ( walk ) #NEWLINE#
do_code ( ) #NEWLINE#
app ( 'Finder' ) . desktop_picture . set ( mactypes . File ( '/your/filename.jpg' ) ) #NEWLINE#
out , err = p . communicate ( ) #NEWLINE#
[ ( 'b' , '21' ) , ( 'b' , '31' ) ] , #NEWLINE#
nx . draw_networkx_edge_labels ( G , pos , edge_labels = edge_labels ) #NEWLINE#
do_stuff ( ) #NEWLINE#
app = QApplication ( sys . argv ) #NEWLINE#
a = 'Hello\\u2026' #NEWLINE# print ( a . decode ( 'unicode-escape' ) ) #NEWLINE#
buildOptions = dict ( include_files = [ 'your_folder/' ] ) #NEWLINE#
curses . endwin ( ) #NEWLINE#
bar = models . CharField ( ) #NEWLINE#
data = json . load ( f ) #NEWLINE#
string2 = string1 . replace ( '\n' , '' ) #NEWLINE#
print ( 'MyThreadingActor#SPACE#Received:#SPACE#{message}' . format ( message = message ) ) #NEWLINE#
print ( '<ul>' ) #NEWLINE#
sum ( int ( c ) for c in s if c . isdigit ( ) ) #NEWLINE#
ws = wb . worksheets [ 0 ] #NEWLINE#
print ( columns [ 0 ] ) #NEWLINE#
Gtk . ContainerClass . list_child_properties ( parent ) #NEWLINE#
sys . modules [ 'packageA' ] = packageA #NEWLINE#
signal . signal ( signal . SIGINT , handler ) #NEWLINE#
[ 0.13525915145874023 , 0.12136101722717285 , 0.12127304077148438 ] #NEWLINE#
ax . legend ( ) #NEWLINE#
raise AttributeError ( '%r#SPACE#object#SPACE#has#SPACE#no#SPACE#attribute#SPACE#%r' % ( self . __class__ , attr ) ) #NEWLINE#
System . out . println ( output ) #NEWLINE#
ax2 . plot ( list ( range ( 100 ) ) , np . ones ( 100 ) ) #NEWLINE#
foo = 'something' #NEWLINE#
print ( 'this#SPACE#spam#SPACE#is#SPACE#lite!' ) #NEWLINE#
df . loc [ df2 . index , df2 . columns ] = df2 #NEWLINE#
print ( [ ( k , out [ k ] ) for k in sorted ( out . keys ( ) ) ] ) #NEWLINE#
in_trie ( make_trie ( 'foo' , 'bar' , 'baz' , 'barz' ) , 'barz' ) #NEWLINE#
in_trie ( make_trie ( 'foo' , 'bar' , 'baz' , 'barz' ) , 'barzz' ) #NEWLINE#
in_trie ( make_trie ( 'foo' , 'bar' , 'baz' , 'barz' ) , 'bart' ) #NEWLINE#
attributes = [ attr for attr in dir ( a ) if not attr . startswith ( '__' ) ] #NEWLINE#
self . columnconfigure ( 10 , weight = 1 ) #NEWLINE#
tn . write ( 'command1' ) #NEWLINE#
return call_user_func_array ( 'A' , func_get_args ( ) ) #NEWLINE#
axclust . set_xticks ( [ ] ) #NEWLINE#
axcltwo . set_xticks ( [ ] ) #NEWLINE#
ax . autoscale ( False ) #NEWLINE#
simplejson . loads ( '[%s]' % js [ : - 1 ] ) #NEWLINE#
super ( ImageView , self ) . __init__ ( parent ) #NEWLINE#
data = np . array ( [ 4 , 2 , 5 , 6 , 7 , 5 , 4 , 3 , 5 , 7 ] ) #NEWLINE#
self . window . refresh ( ) #NEWLINE#
data_array = np . fromfile ( fid , np . int16 ) . reshape ( ( - 1 , 2 ) ) . T #NEWLINE#
curses . initscr ( ) #NEWLINE#
username = form . cleaned_data [ 'username' ] #NEWLINE#
np . count_nonzero ( grouping [ : , ( None ) , : ] == grouping [ : , : , ( None ) ] , axis = 0 ) #NEWLINE#
var = request . form . get ( 'checkbox' ) #NEWLINE#
{ { field . errors } } #NEWLINE#
print ( 'No!' ) #NEWLINE#
[ 2 , 3 , 3 ] #NEWLINE#
out . append ( [ ] ) #NEWLINE#
s = 'http://www.domain.com/?s=some&two=20' #NEWLINE# s . split ( '&' ) #NEWLINE#
print ( list ( date_range ( 'tue' , 'fri' ) ) ) #NEWLINE#
print ( list ( date_range ( 'sat' , 'wed' ) ) ) #NEWLINE#
ax . set_xlabel ( '$\\Phi$' , fontsize = 'xx-large' ) #NEWLINE#
list ( itertools . combinations ( keys , 2 ) ) #NEWLINE#
cv2 . imwrite ( 'remainder.png' , image_remainder ) #NEWLINE#
logging . info ( 'info' ) #NEWLINE#
c . execute ( 'INSERT#SPACE#INTO#SPACE#last_names#SPACE#VALUES(%s)' , ( 'Müller' , ) ) #NEWLINE#
mqtt . client . loop_start ( ) #NEWLINE#
run_loop_with_timeout ( ) #NEWLINE#
self . fig . canvas . draw ( ) #NEWLINE#
most_expensive_cars . append ( list ( company . cars_by_price . all ( ) ) [ 0 ] ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
yests += [ yest ] #NEWLINE#
sqs = SearchQuerySet ( ) . models ( Post ) . autocomplete ( text = 'hello' ) #NEWLINE#
fileout . close ( ) #NEWLINE#
return [ x for x in seq if x not in seen and not seen . add ( x ) ] #NEWLINE#
return '' . join ( format_exception ( etype , value , tb , limit ) ) #NEWLINE#
str . __init__ ( self , * args ) #NEWLINE#
jmap / __init__ . py #NEWLINE#
print ( list ( zip ( A , i ) ) ) #NEWLINE#
ugettext_lazy ( 'The#SPACE#Beatles#SPACE#frontmen' ) + '' #NEWLINE#
yield '' . join ( newblah ) #NEWLINE#
s = re . sub ( '#SPACE#\\d+' , '#SPACE#' , s ) #NEWLINE#
super ( AttrDict , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
df = pd . DataFrame ( { 'Val' : np . random . random ( 50 ) } ) #NEWLINE#
out = np . empty ( ( a . shape [ 0 ] , b . shape [ 1 ] ) , dtype = a . dtype ) #NEWLINE#
print ( '#SPACE#module2' ) #NEWLINE#
[ e ] * n #NEWLINE#
ax . tick_params ( axis = 'x' , colors = 'red' ) #NEWLINE#
return bool ( s . intersection ( list ( someDict . keys ( ) ) ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
self . top_left . pack ( side = 'left' , fill = 'x' , expand = True ) #NEWLINE#
A = np . array ( [ ( 'a' , 'b' , 'c' ) , ( 'd' , 'e' , 'f' ) , ( 'g' , 'h' , 'i' ) ] ) #NEWLINE#
{ file : check_image_with_pil ( file ) for file in files } #NEWLINE#
( df . time - df . ix [ 0 , 'time' ] ) . dt . total_seconds ( ) // 60 #NEWLINE#
logging . debug ( 'hello' ) #NEWLINE#
result . setdefault ( v , [ ] ) . append ( k ) #NEWLINE#
print ( '%s:#SPACE#%s#SPACE#is#SPACE#present#SPACE#in#SPACE#both#SPACE#aa#SPACE#and#SPACE#bb' % ( key , value ) ) #NEWLINE#
all_data . to_csv ( 'test/final.csv' , index = None , header = None ) #NEWLINE#
self . func ( ) #NEWLINE#
request . FILES [ 'thumbnail' ] = request . FILES [ 'avatar' ] #NEWLINE#
raise ValueError ( 'ABORT' ) #NEWLINE#
plt . rc ( 'text' , usetex = True ) #NEWLINE#
plt . xlim ( [ 0 , len ( sub_data ) ] ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
readline . write_history_file ( '/tmp/hist.txt' ) #NEWLINE#
btn . Bind ( wx . EVT_BUTTON , self . onDialog ) #NEWLINE#
set ( x [ 0 ] for x in zip ( a , a [ 1 : ] ) if x [ 0 ] == x [ 1 ] ) #NEWLINE# set ( x [ 0 ] for x in zip ( a , a [ 1 : ] ) if x [ 0 ] == x [ 1 ] ) #NEWLINE#
[ 23.67 , 23.97 , 23.87 ] #NEWLINE#
df #NEWLINE#
user = models . OneToOneField ( User , related_name = 'profile' ) #NEWLINE#
return simplejson . JSONEncoder . default ( self , obj ) #NEWLINE#
foo . fire ( 'one' ) #NEWLINE#
print ( 'good' ) #NEWLINE#
sys . stdout . write ( char ) #NEWLINE#
fulltxt = open ( mifilepath , 'rb' ) . read ( ) #NEWLINE# laststring = fulltxt . split ( ',' ) [ - 1 ] #NEWLINE#
Counter ( { 'AC' : 1 , 'AG' : 1 , 'AT' : 3 , 'CA' : 2 , 'CC' : 4 , 'GA' : 2 , 'TA' : 1 , #NEWLINE# 'TC' : 2 } ) #NEWLINE#
sys . stderr . flush ( ) #NEWLINE#
return int ( f ) if f . is_integer ( ) else f #NEWLINE#
return [ ( 'site:%d' % s . id ) for s in sites ] #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
my_line = list ( my_reader ) [ 3 ] #NEWLINE#
( 'A' , 'E' ) , ( 'B' , 'D' ) , ( 'C' , 'F' ) #NEWLINE#
server . start ( ) #NEWLINE#
s . send ( 'Hello,#SPACE#world' ) #NEWLINE#
flattened = pd . melt ( df , value_vars = [ 'A' , 'B' ] ) #NEWLINE#
db . session . add ( foo_obj ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 1 , 2 , 1 , 1 , 1 , 3 , 2 , 2 , 1 ] ) #NEWLINE#
plt . scatter ( x , y , s = 70 , alpha = 0.03 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( [ eq1 ] == [ eq2 ] ) #NEWLINE#
type ( data [ 'realms' ] [ 0 ] ) #NEWLINE#
""",b=""" #NEWLINE#
driver = webdriver . WhatEverBrowser ( ) #NEWLINE# driver . implicitly_wait ( 60 ) #NEWLINE#
self . zipper . close ( ) #NEWLINE#
created = models . DateTimeField ( 'Date#SPACE#Created' ) #NEWLINE#
return super ( MyClient , self ) . send ( ** kwargs ) #NEWLINE#
config . add_section ( 'main' ) #NEWLINE#
10285324 #NEWLINE#
sleep ( 3 ) #NEWLINE#
return '#SPACE#' . join ( words ) #NEWLINE#
f . write ( contents ) #NEWLINE#
newest = max ( glob . iglob ( '*.[Mm][Pp]3' ) , key = os . path . getctime ) #NEWLINE#
q = B . select ( ) . join ( A ) . where ( B . date == last_entry_date ) #NEWLINE#
np . pad ( x , ( ( 0 , 1 ) , ( 0 , 0 ) ) , mode = 'constant' , constant_values = 42 ) #NEWLINE#
ax . pcolormesh ( tgrid , pgrid , heat , cmap = 'gist_heat_r' ) #NEWLINE#
[ 0.66666667 - 0.66666667 ] #NEWLINE#
__DBNAME__ [ 0 ] = name #NEWLINE#
dict . __setitem__ ( self , frozenset ( ( idx , ) ) , value ) #NEWLINE#
items = sorted ( list ( dct . items ( ) ) , key = lambda kv : kv [ 0 ] ) #NEWLINE#
cv2 . imshow ( 'tree' , image ) #NEWLINE#
[ 'A' , '+' , 'B' , '+' , [ 'C' , '*' , 'D' ] , '+' , 'E' ] #NEWLINE#
list ( zip ( a , b , zip ( * gr ) , d ) ) #NEWLINE#
new_y = sp . interpolate . interp1d ( x1 , y1 , kind = 'cubic' ) ( new_x ) #NEWLINE#
return HttpResponse ( 'Request#SPACE#is#SPACE#not#SPACE#POST' ) #NEWLINE#
return HttpResponse ( 'Success' ) #NEWLINE#
return self . x == p . x and self . y == p . y #NEWLINE#
pattern = re . compile ( '|' . join ( map ( re . escape , keys ) ) , re . IGNORECASE ) #NEWLINE#
ax . axis ( 'tight' ) #NEWLINE#
pass #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 6 ) , columns = cols ) #NEWLINE#
p = subprocess . Popen ( cmdline , stdout = sys . stdout , stderr = sys . stderr ) #NEWLINE#
{ 'old_dm_cm1' : 'cm1' , 'old_dt_cm1_tt' : 'cm1' , 'old_rr_cm2_epf' : 'cm2' } #NEWLINE#
printf ( 'No#SPACE#serial#SPACE#number#SPACE#available\n' ) #NEWLINE#
perror ( 'ERROR:#SPACE#HDIO_GET_IDENTITY' ) #NEWLINE#
parent . config ( menu = menubar ) #NEWLINE#
return '' . join ( ch for ch in s if ch not in exclude ) #NEWLINE#
Counter ( tok [ 'Value' ] for tok in tokens ) #NEWLINE#
edge_dict [ e [ 0 ] ] [ e [ - 1 ] ] += 1 #NEWLINE#
return lambda s , * args , ** kw : not v ( s , * args , ** kw ) #NEWLINE#
im = Image . open ( filename ) #NEWLINE#
self . parent . title ( 'Mouse#SPACE#at#SPACE#%s,%s' % ( event . x , event . y ) ) #NEWLINE#
result = list ( filter_value ( a , 1 ) ) #NEWLINE#
print ( '\n' . join ( '' . join ( x ) for x in itertools . permutations ( a , 2 ) ) ) #NEWLINE#
firstname , lastname = 'Anonym#SPACE#Anonymous' . split ( ) #NEWLINE#
len ( set ( 'AAAAAAAA' ) ) #NEWLINE#
super ( MyUpdateDict , self ) . __setitem__ ( key , value ) #NEWLINE#
sns . set ( ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
class A : #NEWLINE# #INDENT# a = 1 #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class B ( A ) : #NEWLINE# #INDENT# b = 2 #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class C ( B ) : #NEWLINE# #INDENT# c = 3 #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# c = C ( ) #NEWLINE# print ( ( 'c.a#SPACE#=' , c . a ) ) #NEWLINE#
max_value = max ( scores . values ( ) ) #NEWLINE# keys = [ i for i , v in scores . items ( ) if v == max_value ] #NEWLINE#
base64 . b64encode ( bytes ( str ( foo ) , 'ascii' ) ) #NEWLINE#
float ( x ) #NEWLINE#
regex = re . compile ( '^([A-Z])(?!.?\\1)([A-Z])(?!\\2)([A-Z])[a-z]\\1\\1\\3$' ) #NEWLINE#
gray = img [ : , : , ( 0 ) ] #NEWLINE#
with open ( 'original_filename' ) as original : #NEWLINE# #INDENT# data = [ [ int ( i ) for i in line . split ( ) ] for line in original ] #NEWLINE#
thread . start ( ) #NEWLINE#
pd . DataFrame ( out2D , index = list ( 'ABCD' ) , columns = list ( 'ABCD' ) ) #NEWLINE#
print ( s . query ( myTable ) ) #NEWLINE#
print ( '%s:#SPACE#%i' % ( k , v ) ) #NEWLINE#
min_obj_set . append ( obj ) #NEWLINE#
num = Decimal ( '3.14159261034899999' ) #NEWLINE#
x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE# zip ( * ( [ iter ( x ) ] * 3 ) ) #NEWLINE#
regex . match ( 'ABAaAAA' ) #NEWLINE#
Foo . _meta . get_field ( 'name' ) . verbose_name = 'Whatever' #NEWLINE#
sess = tf . Session ( config = tf . ConfigProto ( gpu_options = gpu_options ) ) #NEWLINE#
line1 , = ax . plot ( x , y , 'r-' ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
jdata [ 'uri' ] #NEWLINE#
iequal ( 'joe' , 'Joel' ) #NEWLINE#
plt . plot ( list ( range ( 5 ) ) , list ( range ( 5 ) ) ) #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
root . bind ( '<Return>' , func ) #NEWLINE#
msg = MIMEMultipart ( 'alternative' ) #NEWLINE#
if len ( lst ) > 10 : #NEWLINE# #INDENT# lst = lst [ : 10 ] #NEWLINE#
con . commit ( ) #NEWLINE#
z . close ( ) #NEWLINE#
engine = create_engine ( 'sqlite:///csv_test.db' ) #NEWLINE#
y . std ( ) #NEWLINE#
json . dumps ( s ) #NEWLINE#
for t in some_list : #NEWLINE# #INDENT# f . write ( '#SPACE#' . join ( str ( s ) for s in t ) + '\n' ) #NEWLINE#
cert = crypto . dump_certificate ( crypto . FILETYPE_PEM , k ) #NEWLINE#
frame2 = cv . QueryFrame ( video2 ) #NEWLINE#
x = { 'a' : 1 , 'b' : 2 } #NEWLINE# y = { 'b' : 3 , 'c' : 4 } #NEWLINE#
print ( 'This#SPACE#is#SPACE#the#SPACE#return:#SPACE#%s' % singleProcessExecuter ( [ 'ls' , '-la' ] ) ) #NEWLINE#
id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
result [ a ] [ b ] = n [ a ] [ b ] - 1 #NEWLINE#
return HttpResponse ( 'My#SPACE#custom#SPACE#django#SPACE#500#SPACE#page' ) #NEWLINE#
resp , items = m . search ( None , 'FROM' , '"Impact#SPACE#Stats#SPACE#Script"' ) #NEWLINE#
now = datetime . datetime . utcnow ( ) #NEWLINE#
plt . axhline ( l [ 'low' ] , color = 'b' ) #NEWLINE#
return x #NEWLINE#
c = concatenate ( ( a [ ... , None ] , b [ ... , None ] ) , axis = 3 ) #NEWLINE#
L = [ { 'a' : 1 } , { 'b' : 2 } , { 'c' : 1 } , { 'd' : 2 } ] #NEWLINE#
pd . rolling_mean ( df , window = 30 ) . iloc [ 28 : 40 ] #NEWLINE#
out , err = p . communicate ( ) #NEWLINE#
evaluate ( lambda x : x < 5 and x > - 5 ) #NEWLINE#
p . add_argument ( '-f' , dest = 'infile' ) #NEWLINE#
return self . y / self . x #NEWLINE#
raise Exception ( 'negative#SPACE#number' ) #NEWLINE#
a1Note = pg . mixer . Sound ( 'F:\\Project#SPACE#Harpsichord\\The#SPACE#wavs\\A1.wav' ) #NEWLINE#
random . shuffle ( arr ) #NEWLINE#
stdout . write ( '\n' ) #NEWLINE#
numpy . std ( rolling_window ( observations , n ) , 1 ) #NEWLINE#
ctx . set_ciphers ( ':' . join ( ciphers ) ) #NEWLINE#
print ( ( 'check:' , numpy . sum ( M3 ) , '=#SPACE#218028826.631?' ) ) #NEWLINE#
stdout . write ( '#SPACE#Blastoff' ) #NEWLINE#
set_key ( 'ProxyEnable' , 0 ) #NEWLINE#
instance = SomeModel . objects . get ( id = id ) #NEWLINE# instance . delete ( ) #NEWLINE#
return zip ( np . ravel ( ix0 ) , np . ravel ( ix1 ) , np . ravel ( v2 ) ) #NEWLINE#
handle_last_line ( last_line ) #NEWLINE#
wm . add_watch ( watched_dir , pyinotify . IN_CLOSE_WRITE , proc_fun = MyProcessEvent ( ) ) #NEWLINE#
shutil . rmtree ( dir ) #NEWLINE#
file_path = os . path . join ( module_dir , 'baz.txt' ) #NEWLINE#
print ( ( r . status_code , r . reason ) ) #NEWLINE#
x += y . todense ( ) #NEWLINE#
ax . figure . canvas . draw ( ) #NEWLINE#
print ( 'Not#SPACE#able#SPACE#to#SPACE#read#SPACE#back#SPACE#intermediate#SPACE#JSON#SPACE#file' ) #NEWLINE#
np . random . shuffle ( coordinates ) #NEWLINE#
return func ( * args , ** kwds ) #NEWLINE#
button = Tk . Button ( master = frame , text = 'press' , command = action_with_arg ) #NEWLINE#
yvalues = line2d [ 0 ] . get_ydata ( ) #NEWLINE#
r . json ( ) [ 'name' ] #NEWLINE#
prof . set_preference ( 'network.proxy.share_proxy_settings' , 'false' ) #NEWLINE#
prof . set_preference ( 'network.automatic-ntlm-auth.allow-proxies' , 'false' ) #NEWLINE#
prof . set_preference ( 'network.auth.use-sspi' , 'false' ) #NEWLINE#
df . groupby ( 'CreateDate' , as_index = False , group_keys = False ) . apply ( splitRows ) #NEWLINE#
model4 . py #NEWLINE#
print ( find_interval ( tlist , item ) for item in newlist ) #NEWLINE#
sheet . write ( 0 , index , value ) #NEWLINE#
soup = BeautifulSoup ( html_object ) #NEWLINE#
root . wm_title ( 'CalendarDialog#SPACE#Demo' ) #NEWLINE#
return np . array ( [ row [ : num_cols ] for row in arr ] ) #NEWLINE#
ax . plot ( [ point [ 0 ] ] , [ point [ 1 ] ] , [ point [ 2 ] ] , 'w' ) #NEWLINE#
x += datetime . timedelta ( 1 ) #NEWLINE#
print ( int ( round ( random . randint ( 100 , 200001 ) , - 2 ) ) ) #NEWLINE#
conn = sqlite3 . connect ( 'my.db' ) #NEWLINE#
session . add ( s ) #NEWLINE#
import os , os . path #NEWLINE#
( '^change-password/$' , 'django.contrib.auth.views.password_change' ) , #NEWLINE# ( '^password-changed/$' , 'django.contrib.auth.views.password_change_done' ) , #NEWLINE#
list ( takewhile ( lambda i , j = iter ( list2 ) : i == next ( j ) , list1 ) ) #NEWLINE#
list ( bytes ( '0xff' ) ) #NEWLINE#
print ( request . GET [ 'username' ] ) #NEWLINE#
p . close ( ) #NEWLINE#
[ 0 , 0.1 , 0.2 , 0.3 ] #NEWLINE#
df = pd . concat ( ( ser1 , ser2 ) , axis = 1 ) #NEWLINE#
urllib . parse . unquote_plus ( t ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return '' . join ( data ) #NEWLINE#
driver = webdriver . Firefox ( firefox_profile = firefox_profile ) #NEWLINE#
list ( zip_longest ( a , b , fillvalue = 0 ) ) #NEWLINE#
ax1 . scatter ( x , y , c = t , cmap = 'viridis' ) #NEWLINE#
array . append ( [ 0 ] * 8 ) #NEWLINE#
plt . polar ( theta , r , lw = 3 ) #NEWLINE#
return r . getvalue ( ) . encode ( 'ascii' ) [ : : - 1 ] #NEWLINE#
from datetime import date , timedelta #NEWLINE#
gens = [ ( lambda v : ( i for i in deck if i % 13 == v ) ) ( v ) for v in range ( 13 ) ] #NEWLINE#
sys . stdout . write ( prompt ) #NEWLINE#
idx = np . argsort ( a , axis = 1 ) #NEWLINE#
proc . wait ( ) #NEWLINE#
sys . path . insert ( 1 , os . path . join ( PROJECT_PATH , 'lib' ) ) #NEWLINE#
k = [ ( ord ( x ) - 96 ) for x in l ] #NEWLINE#
population = 2 * [ ( 'A' , 'A' ) ] + 3 * [ ( 'A' , 'a' ) ] + 4 * [ ( 'a' , 'a' ) ] #NEWLINE#
model . setData ( index , editor . currentIndex ( ) ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
[ ( 8 , 9 ) , ( 4 , 9 ) , ( 7 , 9 ) ] #NEWLINE#
super ( MyType , self ) . __init__ ( name , bases , attrs ) #NEWLINE#
pkill ( 'program_name' ) #NEWLINE#
next ( ( barcode ( productId ) , metric ( size ) ) for name , size in [ lookup ( productId ) ] ) #NEWLINE#
drive , path_and_file = os . path . splitdrive ( path ) #NEWLINE#
f . write ( data ) #NEWLINE#
df2 = df2 . drop ( 'n' , axis = 1 ) . reset_index ( drop = True ) #NEWLINE#
max ( MyCount , key = int ) #NEWLINE#
print ( df . groupby ( 'A' ) . agg ( { 'B' : f , 'C' : f1 } ) ) #NEWLINE#
next ( ( i for i , x in enumerate ( a ) if 99 in x ) , None ) #NEWLINE#
first_index = match . start ( ) #NEWLINE#
nat = Nationalities ( 'PL' , 'FR' , 'DE' ) #NEWLINE#
data = [ ( 'red' , 5 ) , ( 'blue' , 1 ) , ( 'yellow' , 8 ) , ( 'black' , 0 ) ] #NEWLINE#
my_list = [ 'this\n' , 'is\n' , 'a\n' , 'list\n' , 'of\n' , 'words\n' ] #NEWLINE# map ( str . strip , my_list ) #NEWLINE#
return QtGui . QMainWindow . eventFilter ( self , source , event ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
QtGui . QWidget . __init__ ( self ) #NEWLINE#
print ( pool . map ( f , [ 1 , 2 , 3 ] ) ) #NEWLINE#
fig . savefig ( imgdata , format = 'PDF' ) #NEWLINE#
return HttpResponse ( response , content_type = mimetype [ 0 ] ) #NEWLINE#
df [ 'uld' ] = np . where ( df [ 'uld' ] > 0 , 1 , 0 ) #NEWLINE#
return False #NEWLINE#
plt . plot ( ) #NEWLINE#
driver . set_window_size ( 1280 , 1024 ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( './test.html' ) . read ( ) , 'lxml' ) #NEWLINE#
{ i : ( IDsums [ itr ] , value_sums [ itr ] ) for itr , i in enumerate ( unqID ) } #NEWLINE#
s = int ( s ) #NEWLINE#
pygame . init ( ) #NEWLINE#
all_lines = [ [ int ( num ) for num in line . split ( ) ] for line in fobj ] #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
formatted_time = datetime . fromtimestamp ( utc_secs ) . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
json . dump ( parse ( sys . stdin ) , sys . stdout , indent = 2 ) #NEWLINE#
s = '\x00\x02' #NEWLINE# struct . unpack ( '>H' , s ) #NEWLINE#
sys . modules [ 'ssl' ] = None #NEWLINE#
p = p2 . set_index ( 'Date' ) #NEWLINE#
ax . plot ( [ 0 , normp [ 0 ] ] , [ 0 , normp [ 1 ] ] , zs = [ 0 , normp [ 2 ] ] ) #NEWLINE#
p = os . path . normpath ( os . path . join ( self . _cwd , path ) ) #NEWLINE#
plt . ylabel ( 'Y' ) #NEWLINE#
plt . ylabel ( 'X' ) #NEWLINE#
groups = MembershipSerializer ( source = 'membership_set' , many = True ) #NEWLINE#
{ 'a' : 3 , 'b' : 4 } #NEWLINE#
boolarr = np . array ( [ [ 0 , 0 , 1 ] , [ 1 , 0 , 1 ] , [ 1 , 0 , 1 ] ] , dtype = np . bool ) #NEWLINE#
myfunc2 ( 1 , 2 , 3 , banan = 123 ) #NEWLINE#
ax1 . plot ( list ( range ( 10 ) ) , 'b-' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
intersections . append ( start_set ) #NEWLINE#
child . kill ( ) #NEWLINE#
get_out ( 'adb' , 'devices' , 'foo' ) #NEWLINE#
matrix . data [ row ] . append ( column ) #NEWLINE#
attrs_needed = [ '_language' , '_field' , '_otherfield' ] #NEWLINE#
to_call ( * args , ** kwargs ) #NEWLINE#
d . pop ( '' , None ) #NEWLINE#
urllib . parse . urlencode ( [ ( 'criterias[]' , i ) for i in criterias ] ) #NEWLINE#
any ( x in mystr for x in ls ) #NEWLINE#
a = '067b' #NEWLINE# a . decode ( 'ascii' ) #NEWLINE#
r = re . compile ( '(..)' ) . findall ( s ) #NEWLINE#
logger . warning ( "'Twas#SPACE#brillig,#SPACE#and#SPACE#the#SPACE#slithy#SPACE#toves" ) #NEWLINE#
register . filter ( 'slug' , slug ) #NEWLINE#
raise AssertionError ( 'unenforceable#SPACE#alignment#SPACE#%d' % ( info [ 'align' ] , ) ) #NEWLINE#
plt . ylim ( - 2 , 5 ) #NEWLINE#
cloud . call ( cpu_intensive_function , some , args ) #NEWLINE#
lists = [ [ ] for _ in range ( n ) ] #NEWLINE#
self . Show ( ) #NEWLINE#
"""kjsdhfksd#SPACE#f\\\"""" #NEWLINE#
results = sorted ( query . fetch ( FETCHED ) , key = _func ) #NEWLINE#
Counter ( data [ 1 ] ) . most_common ( ) #NEWLINE#
print ( 'Yay!' ) #NEWLINE#
return idx [ mask ] . argsort ( ) [ unqID ] #NEWLINE#
new_list = [ g ( f ( x ) ) for x in old_list ] #NEWLINE#
nt = lambda a , b : S [ a ] . intersection ( S [ b ] ) #NEWLINE#
db . session . add ( provider ) #NEWLINE#
set_column ( first_col , last_col , width , cell_format , options ) #NEWLINE#
fin . seek ( 0 ) #NEWLINE#
resp = session . post ( url , headers = headers , data = form ) #NEWLINE#
my_data = [ [ int ( val ) for val in line . split ( ) ] for line in lines_list [ 1 : ] ] #NEWLINE#
from app import app #NEWLINE#
hand . sort ( key = lambda c : rank_cards . index ( c [ 0 ] ) , reverse = True ) #NEWLINE#
[ hex ( c ) for c in chars ] #NEWLINE#
wx . ListCtrl . __init__ ( self , parent , ID , pos , size , style ) #NEWLINE#
deque ( [ 'new.com' , '1.com' , '2.com' ] ) #NEWLINE#
df = concat ( [ reader ( f ) for f in files ] , keys = files ) #NEWLINE#
img = Image . open ( input_path ) #NEWLINE#
dirs = list ( set ( [ os . path . dirname ( x ) for x in z . namelist ( ) ] ) ) #NEWLINE#
tags = r . refs . as_dict ( 'refs/tags' ) #NEWLINE#
make_tuple ( '(1,2,3,4,5)' ) #NEWLINE#
make_tuple ( '(1,)' ) #NEWLINE#
pickle . dump ( d , afile ) #NEWLINE#
print ( 'Reloading' , widget ) #NEWLINE#
ax . plot ( [ 5 , 30 ] , [ 5 , 5 ] , 'k-' , lw = 10 ) #NEWLINE#
return cause #NEWLINE#
class Customer ( models . Model ) : #NEWLINE# #INDENT# pizzas_bought = models . ManyToManyField ( related_name = 'pizzas' ) #NEWLINE#
OrderedDict ( ( word , True ) for word in words ) #NEWLINE#
feedback . save ( ) #NEWLINE#
a = [ [ 0 , 0 ] , [ 0 , 0 ] ] #NEWLINE#
duplicates = df [ df [ 'C' ] == 'b' ] . copy ( ) #NEWLINE#
sig1 , sig2 = abs ( sig1 ) , abs ( sig2 ) #NEWLINE#
setattr ( object , attrname , value ) #NEWLINE#
writer = csv . writer ( output , quoting = csv . QUOTE_NONNUMERIC ) #NEWLINE#
print ( list ( starmap ( lambda key , value : int ( value ) , list ( ss . items ( ) ) ) ) ) #NEWLINE#
df . assign ( c = df . set_index ( [ 'feature1' , 'feature2' ] ) . index . to_series ( ) . values ) #NEWLINE#
self . label . configure ( text = "time's#SPACE#up!" ) #NEWLINE#
element . close ( ) #NEWLINE#
raise AttributeError ( ) #NEWLINE#
L = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
print ( df . index . max ( ) ) #NEWLINE#
child . destroy ( ) #NEWLINE#
print ( 'excel_col({0})#SPACE#->#SPACE#{1}' . format ( i , excel_col ( i ) ) ) #NEWLINE#
df . groupby ( 'Id' ) . apply ( func ) #NEWLINE#
connection = sqlite3 . connect ( '~/foo.sqlite' ) #NEWLINE#
list1 . insert ( 0 , 'a' ) #NEWLINE#
blobKey = blobstore . create_gs_key ( '/gs' + gcs_filename ) #NEWLINE#
super ( TagForm , self ) . save ( * args , ** kwargs ) #NEWLINE#
p . stdin . write ( 'abc\n' ) #NEWLINE#
b = a . reshape ( 3 , 3 , 2 ) . swapaxes ( 0 , 2 ) #NEWLINE#
pairs = list ( my_dict . items ( ) ) #NEWLINE#
print ( df . set_index ( 'fruits' ) . T ) #NEWLINE#
[ re . match ( '\\/?([^\\/]+)' , p ) . groups ( ) [ 0 ] for p in paths ] #NEWLINE#
f = open ( 'myTextFile.txt' , 'r' ) #NEWLINE#
output [ [ 0 , 'spam' , 2 , 3 , 4 ] , [ 5 , 'spam' , 7 , 8 , 9 ] , [ 10 , 'spam' , 12 , 13 , 14 ] ] #NEWLINE#
print ( 'words[{}]#SPACE#=#SPACE#{}' . format ( i , word ) ) #NEWLINE#
return render_template ( 'im.html' , user = None , content = xxx , timestamp = xxx ) #NEWLINE#
plt . gca ( ) . set_xlim ( larger_alim ( plt . gca ( ) . get_xlim ( ) ) ) #NEWLINE#
np . savetxt ( 'file.txt' , output , fmt = '%10.5f' , delimiter = '\t' ) #NEWLINE#
random . choice ( [ p for p in itertools . product ( x , repeat = 2 ) ] ) #NEWLINE#
deserialized = Data . deserialize ( json . loads ( json_string ) ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
plt . legend ( ) #NEWLINE#
value . decode ( 'string_escape' ) #NEWLINE#
def listRightIndex ( alist , value ) : #NEWLINE# #INDENT# return len ( alist ) - alist [ - 1 : : - 1 ] . index ( value ) - 1 #NEWLINE#
response_data [ 'message' ] = 'Some#SPACE#error#SPACE#message' #NEWLINE#
return render_template ( 'profile.html' ) #NEWLINE#
auth . set_access_token ( access_token , access_token_secret ) #NEWLINE#
self . assertEqual ( parsed . something , 'test' ) #NEWLINE#
df1 . add ( df2 , fill_value = 0 ) #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
print ( '{}:#SPACE#{!r}' . format ( key , val ) ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
group . plot ( ax = ax [ ix ] , title = i ) #NEWLINE#
setup . py #NEWLINE#
url = 'http://d604721fxaaqy9.cloudfront.net/horizon.jpg?large=yes&license=yes' #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
{ file : mimetypes . guess_type ( file ) for file in files } #NEWLINE#
obj = getattr ( foo , 'Class%d' % i ) ( ) #NEWLINE#
opts = parser . parse_args ( ) #NEWLINE#
import xml . etree . ElementTree as xml #NEWLINE#
[ ( [ None ] * 5 ) for i1 in range ( 4 ) ] #NEWLINE#
np . random . seed ( 1234 ) #NEWLINE#
setInDict ( dataDict , [ 'b' , 'v' , 'w' ] , 4 ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
image = Image . open ( 'File.jpg' ) #NEWLINE#
foo . bar ( ) #NEWLINE#
return getattr ( self . ham , func ) ( * args , ** kwargs ) #NEWLINE#
[ [ max ( first [ 0 ] , second [ 0 ] ) , min ( first [ 1 ] , second [ 1 ] ) ] for first in a for #NEWLINE# second in b if max ( first [ 0 ] , second [ 0 ] ) <= min ( first [ 1 ] , second [ 1 ] ) ] #NEWLINE#
return [ list_a for list_a in list_a if list_a [ 0 ] in list_b ] #NEWLINE#
array ( [ [ 1.0 , 0.1 , 0.1 ] , [ 0.09 , 1.0 , 0.1 ] , [ 0.2 , 0.1 , 1.0 ] ] ) #NEWLINE#
df = pandas . DataFrame . from_records ( data_records ) #NEWLINE#
max ( lod , key = itemgetter ( 'score' ) ) #NEWLINE#
app . run ( host = '0.0.0.0' , port = 3000 ) #NEWLINE#
df . columns = [ 'YEAR' , 'A' , 'B' ] #NEWLINE#
number = random . randrange ( 1 , 10 ) #NEWLINE#
for x in gradebook : #NEWLINE# #INDENT# pass #NEWLINE#
d . setdefault ( key , [ ] ) #NEWLINE#
date_1 = datetime . datetime . strptime ( start_date , '%m/%d/%y' ) #NEWLINE#
array ( [ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 0 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 1 , 0 , 1 ] , [ 1 , #NEWLINE# 1 , 0 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
lines . append ( line ) #NEWLINE#
w . show ( ) #NEWLINE#
y_actu = [ 2 , 0 , 2 , 2 , 0 , 1 , 1 , 2 , 2 , 0 , 1 , 2 ] #NEWLINE#
assert np . allclose ( results [ 0 ] , results [ 1 ] ) #NEWLINE#
os . path . basename ( 'folder1/folder2/folder3/new_folder/image.jpg' ) #NEWLINE#
print ( set_list_intersection ( set_list ) ) #NEWLINE#
self . save ( ) #NEWLINE#
x . transpose ( 1 , 2 , 0 ) . reshape ( - 1 , 3 ) #NEWLINE#
d = { } #NEWLINE# d [ 'js' ] = [ { 'foo' : 'bar' } , { 'other' : 'thing' } ] #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
self . write_message ( 'green!' ) #NEWLINE#
plt . scatter ( x , y , c = c ) #NEWLINE#
f = pattern . findall ( row ) #NEWLINE#
print ( '{0:.3f}#SPACE#{1}' . format ( t , f . __name__ ) ) #NEWLINE#
ax . set_ylim ( 0 , 16000 ) #NEWLINE#
substitutions = [ 'ONE' , 'TWO' , 'THREE' ] #NEWLINE#
entry . grid ( row = 0 , column = 0 ) #NEWLINE#
engine . execute ( 'CREATE#SPACE#DATABASE#SPACE#dbname' ) #NEWLINE#
random . shuffle ( a ) #NEWLINE#
g = f ( ) #NEWLINE#
url ( '^location/$' , views . LocationListAPIView . as_view ( ) , name = 'location-list' ) , #NEWLINE#
l = [ { 'A' : 123 } , { 'B' : 234 } , { 'C' : 345 } ] #NEWLINE#
fav = serializers . SerializerMethodField ( 'likedByUser' ) #NEWLINE#
print ( len ( locals ( ) ) ) #NEWLINE#
repo . diff ( 'HEAD' , 'HEAD~1' ) #NEWLINE#
i = pd . date_range ( '20110101' , '20150101' , freq = 'B' ) #NEWLINE#
self . driver . quit ( ) #NEWLINE#
els = list ( d . items ( ) ) #NEWLINE#
doc = lxml . etree . parse ( 't.xml' ) #NEWLINE#
model . add ( Dropout ( 0.5 ) ) #NEWLINE#
del seq [ i ] #NEWLINE#
print ( [ type ( x ) for x in htmldata ] ) #NEWLINE# Series ( [ str ( x ) for x in htmldata ] ) #NEWLINE#
pattern . sub ( '#SPACE#' , "doesn't#SPACE#it#SPACE#rain#SPACE#today?" ) #NEWLINE#
groups . mean ( ) . b #NEWLINE#
print ( 'this#SPACE#will#SPACE#appear#SPACE#in#SPACE#the#SPACE#postprocessed#SPACE#code' ) #NEWLINE#
[ '1.7.0.rc0' , '1.7.0' , '1.8.0' ] #NEWLINE#
writer . writerow ( values ) #NEWLINE#
v = myDict [ k ] #NEWLINE#
DISPATCH ( ) #NEWLINE#
ax . add_patch ( circle ) #NEWLINE#
hbar . pack ( side = BOTTOM , fill = X ) #NEWLINE#
self . get_next_probe ( new_list , probes , unit_length ) #NEWLINE#
df . loc [ df . precedingWord . isin ( neuter ) , 'gender' ] = 'neuter' #NEWLINE#
def get_user_by_id ( id ) : #NEWLINE# #INDENT# return User . query . get ( id ) #NEWLINE#
test ( ) #NEWLINE#
if 'seek' in 'those#SPACE#who#SPACE#seek#SPACE#shall#SPACE#find' : #NEWLINE# #INDENT# pass #NEWLINE#
img = ndi . gaussian_filter ( img , ( 10 , 10 ) ) #NEWLINE#
df . xs ( 'at' , level = 'QGram' , drop_level = False ) . loc [ [ 1 , 4 ] ] #NEWLINE#
img . show ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
HTML ( df . to_html ( escape = False ) ) #NEWLINE#
sql = 'SELECT#SPACE#*#SPACE#FROM#SPACE#someTable' #NEWLINE#
Serial . println ( a ) #NEWLINE#
is_private = 'is_private' in request . POST and request . POST [ 'is_private' ] #NEWLINE#
df = df . dot ( p_value ) #NEWLINE#
pylab . ylabel ( 'Y#SPACE#Axis#SPACE#Label' ) #NEWLINE#
axes [ 2 ] . set_title ( 'Hexbin#SPACE#plot#SPACE#of#SPACE#data' ) #NEWLINE#
ax . set_ylabel ( '$\\Theta$' , fontsize = 'xx-large' ) #NEWLINE#
X [ [ [ 0 ] , [ 1 ] ] , [ 0 , 1 ] ] #NEWLINE#
browser . set_handle_equiv ( True ) #NEWLINE#
m . group ( 1 ) #NEWLINE#
return list ( islice ( ( x for x in a if x not in bset ) , 100 ) ) #NEWLINE#
print ( datetime . now ( EST ) . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
t . start ( ) #NEWLINE#
self . root . bind ( '<Left>' , self . ship . rotate ) #NEWLINE#
np . array ( [ 1.0 , 1.0 ] ) . astype ( int ) #NEWLINE#
print ( list ( request . headers . keys ( ) ) ) #NEWLINE#
return '' . join ( v for v in list ( locals ( ) . values ( ) ) if v is not None ) #NEWLINE#
[ 5 , 6 , 9 ] #NEWLINE#
x = [ 'something' ] #NEWLINE#
return x + y + z #NEWLINE#
return self . get_type_display ( ) #NEWLINE#
print ( 'Hello,#SPACE#World' ) #NEWLINE#
def downgrade ( ) : #NEWLINE# #INDENT# raise Exception ( 'Irreversible#SPACE#migration' ) #NEWLINE#
toplevel . geometry ( '%dx%d+%d+%d' % ( size + ( x , y ) ) ) #NEWLINE#
self . greet ( ) #NEWLINE#
input = '1:3.0#SPACE#false,hello' #NEWLINE#
fp . close ( ) #NEWLINE#
g . write ( base64 . decodestring ( newjpgtxt ) ) #NEWLINE#
return loads ( dumps ( input_ordered_dict ) ) #NEWLINE#
fdw = open ( 'test.pcap' , 'wb' ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
l1 = [ 1 , 2 , 3 , 4 ] #NEWLINE#
df . end_time = pd . to_datetime ( df . end_time ) #NEWLINE#
admin . site . site_header = get_admin_header ( ) #NEWLINE#
ax . xaxis . set_minor_locator ( FixedLocator ( x_da ) ) #NEWLINE#
to_find = re . compile ( 'cat|fish|dog' ) #NEWLINE#
fig , axes = plt . subplots ( nrows = 2 , ncols = 2 ) #NEWLINE#
frame . bind ( '<Motion>' , onmotion ) #NEWLINE#
pd . DatetimeIndex ( [ i . replace ( tzinfo = None ) for i in t ] ) #NEWLINE#
os . environ [ 'CUDA_VISIBLE_DEVICES' ] = '0' #NEWLINE#
'a' , 'foo' , 'bar' , 'baz' , 'golf' , 'cart' , 'fred' , 'food' #NEWLINE#
curs . execute ( query , args_tuple ) #NEWLINE#
df [ 'Match' ] = ( X . toarray ( ) [ : , ( common_cols_idx ) ] == 1 ) . any ( 1 ) #NEWLINE#
global inited #NEWLINE#
[ ( x , y ) for x in nums for y in nums ] #NEWLINE#
proc . stdin . write ( 'message' ) #NEWLINE# proc . stdin . write ( 'message2' ) #NEWLINE#
array [ n - i : - i or None ] #NEWLINE#
now = datetime . now ( ) #NEWLINE#
data = { a : int ( float ( sum ( b ) ) / float ( len ( b ) ) ) for a , b in list ( data . items ( ) ) } #NEWLINE#
browser . select_form ( name = 'loginform' ) #NEWLINE#
inlist = [ 1 , 2 , 3 ] #NEWLINE#
img . save ( 'lmode.png' ) #NEWLINE#
rates . sub ( treas . squeeze ( ) , axis = 0 ) . dropna ( ) #NEWLINE#
list ( zip_longest ( * a ) ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
anchors = soup . find_all ( 'a' , { 'class' : 'Unique_Class_Name' , 'href' : True } ) #NEWLINE#
print ( 'a%s' % str_number . rjust ( width ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
assert len ( set ( a ) ) == len ( a ) #NEWLINE#
print ( hdict_from_dict ( data ) ) #NEWLINE#
s . getsockname ( ) #NEWLINE#
super ( ExcludedDateForm , self ) . __init__ ( ** kwargs ) #NEWLINE#
print ( repr ( value ) ) #NEWLINE#
slice = arr [ : 2 , : 2 ] #NEWLINE#
p1 + '/' + os . path . basename ( p2 ) #NEWLINE#
globals ( ) [ lib ] = __import__ ( lib ) #NEWLINE#
print ( sock . recv ( 10240 ) ) #NEWLINE#
app . logger . info ( 'hello#SPACE#world' ) #NEWLINE#
raise SystemExit ( 1 ) #NEWLINE#
self . write ( "I'm#SPACE#awake!" ) #NEWLINE#
r . content #NEWLINE#
print ( casefold ( 'tschüß' ) ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
print ( ( x . subs ( sol [ 0 ] ) , y . subs ( sol [ 0 ] ) ) ) #NEWLINE#
sum ( dice ) - min ( dice ) #NEWLINE#
OrderNotes . objects . filter ( item = item ) . values_list ( 'shared_note' , flat = True #NEWLINE# ) . distinct ( ) #NEWLINE#
def removearticles ( text ) : #NEWLINE# #INDENT# re . sub ( '(\\s+)(a|an|and|the)(\\s+)' , '\x01\x03' , text ) #NEWLINE#
child . sendcontrol ( 'c' ) #NEWLINE#
t . start ( ) #NEWLINE#
age . __class__ . __class__ #NEWLINE#
cur_date += relativedelta ( months = 1 ) #NEWLINE#
activate_this_file = '/path/to/virtualenv/bin/activate_this.py' #NEWLINE# exec ( compile ( open ( activate_this_file ) . read ( ) , activate_this_file , 'exec' ) , #NEWLINE# dict ( __file__ = activate_this_file ) ) #NEWLINE#
return datetime . datetime ( * time . gmtime ( ) [ : 6 ] ) #NEWLINE#
return response #NEWLINE#
self . app . get ( 'foo/' , headers = headers ) #NEWLINE#
df . isnull ( ) #NEWLINE#
df [ 'e' ] = pd . rolling_apply ( np . arange ( len ( df ) ) , 6 , foo ( df ) ) #NEWLINE#
myapp . db . session . commit ( ) #NEWLINE#
conn = win32com . client . Dispatch ( 'ADODB.Connection' ) #NEWLINE#
plot ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
self . button = QtGui . QPushButton ( 'Click' ) #NEWLINE#
[ x for x in list_1 if x [ 3 ] <= 0.3 and x [ 2 ] < 5 ] #NEWLINE#
t . start ( ) #NEWLINE#
print ( driver . page_source ) #NEWLINE#
{ { ( pages | selectattr ( 'tags.foo' , bar ) | first ) . title } } #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] , [ 9 , 10 , 11 ] ] ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
your_list = f . read ( ) . split ( ) #NEWLINE#
self . config ( width = self . width , height = self . height ) #NEWLINE#
sys . getsizeof ( 'ab' ) #NEWLINE#
sys . getsizeof ( 'a' ) #NEWLINE#
x = EqM_list ( bah * 2 for bah in buh ) #NEWLINE#
outfile . write ( 'export#SPACE#MYVAR=MYVALUE' ) #NEWLINE#
reversed_arr = np . fliplr ( [ arr1d ] ) [ 0 ] #NEWLINE#
( 1 , 6 ) , ( 2 , 5 ) , ( 3 , 4 ) #NEWLINE#
children . append ( node . starargs ) #NEWLINE#
email = ndb . StringProperty ( validator = stringValidator , verbose_name = 'E-mail' ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
mydict = dict ( key1 = 1 , key2 = 2 , key3 = 3 ) #NEWLINE#
dummy_df [ cols [ cols ] . index ] #NEWLINE#
print ( 'I#SPACE#slept#SPACE#for#SPACE#' + str ( seconds_till_future ) + '#SPACE#seconds!' ) #NEWLINE#
return [ list_ [ v : indices [ k + 1 ] ] for k , v in enumerate ( indices [ : - 1 ] ) ] #NEWLINE#
json . dump ( { 'numbers' : n , 'strings' : s , 'x' : x , 'y' : y } , outfile , indent = 4 ) #NEWLINE#
popt , pcov = curve_fit ( func , x1 , x2 ) #NEWLINE#
myintfunction ( 5 ) #NEWLINE#
cursor . close ( ) #NEWLINE#
line4 = [ ( 'Wave#SPACE#1:' , 0 ) , ( '_XXXX_X____X_X_' , 0 ) ] #NEWLINE#
print ( [ ( x , text . count ( x ) ) for x in set ( text ) ] ) #NEWLINE#
logger = logging . getLogger ( 'log_namespace.%s' % name ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
res = { k : coords [ nzvals == k ] for k in range ( 1 , num_labels + 1 ) } #NEWLINE#
test1 = re . compile ( 'cat|catdog' ) #NEWLINE#
pprint ( d ) #NEWLINE#
print ( 'process#SPACE#initializing' , mp . current_process ( ) ) #NEWLINE#
b_any ( word in x for x in lst ) #NEWLINE#
file . write ( '\ufeff' ) #NEWLINE# file . close ( ) #NEWLINE#
[ '0238.94' , '2.3904' , '0139847' , '' ] #NEWLINE#
print ( #NEWLINE# '<html><head><title>Hello#SPACE#World#SPACE#from#SPACE#Python</title></head><body>Hello#SPACE#World#SPACE#from#SPACE#a#SPACE#Python#SPACE#CGI#SPACE#Script</body></html>' #NEWLINE# ) #NEWLINE#
stack . append ( ( y0 , w0 ) ) #NEWLINE#
list ( combinations ( list ( range ( len ( sent ) ) ) , n - 1 ) ) #NEWLINE#
stdin , stdout , stderr = client . exec_command ( 'service#SPACE#XXX#SPACE#start' ) #NEWLINE#
self . root . update ( ) #NEWLINE#
ao [ 1 : , 1 : ] += ai [ : - 1 , : - 1 ] #NEWLINE#
print ( 'index=%d,#SPACE#element=%s' % ( i , e ) ) #NEWLINE#
print ( ( b [ 2 ] [ 0 ] == b [ 2 ] [ 0 ] ) . all ( ) ) #NEWLINE#
raise KeyboardInterrupt #NEWLINE#
new_button . pack ( ) #NEWLINE#
global_dict [ 'foo' ] = 1 #NEWLINE#
df = df . set_index ( [ 'a' , 'b' ] ) #NEWLINE#
print ( datetime . date . today ( ) - datetime . timedelta ( 1 ) ) #NEWLINE#
self . cursor . execute ( 'SELECT#SPACE#d_id,d_link,d_name#SPACE#FROM#SPACE#`d_details`' ) #NEWLINE#
[ o for o in gc . get_objects ( ) if isinstance ( o , Foo ) ] #NEWLINE#
test_trisolve2 . test_trisolve ( ) #NEWLINE#
pool . join ( ) #NEWLINE#
plot_selected . xaxis . set_ticks ( np . arange ( 0.2 , 1.1 , 0.2 ) ) #NEWLINE#
req = Request ( environ , shallow = True ) #NEWLINE#
return min ( ( s . index ( t ) for t in map ( str . lower , targ ) if t in s ) , default = None ) #NEWLINE#
f . axes [ 1 ] . set_position ( [ 0.05 , 0.45 , 0.4 , 0.05 ] ) #NEWLINE#
day_string = d . strftime ( '%Y-%m-%d' ) #NEWLINE#
self . connect ( 'realize' , self . _on_realize ) #NEWLINE#
p1 = subprocess . Popen ( [ 'convert' , fileIn , 'bmp:-' ] , stdout = subprocess . PIPE ) #NEWLINE#
return np . random . permutation ( indices ) #NEWLINE#
return dict . __getitem__ ( self , item ) #NEWLINE#
queryset = SomeObject . objects . filter ( owner = request . user ) #NEWLINE#
print ( 'Welcome#SPACE#to#SPACE#the#SPACE#converter#SPACE#toolkit#SPACE#made#SPACE#by#SPACE#Alan.' ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
print ( grouped_df . get_group ( key ) , '\n\n' ) #NEWLINE#
return first_name , last_name #NEWLINE#
x , y , z = scipy . sparse . find ( a ) #NEWLINE#
permu ( l ) #NEWLINE#
dog = Dog . objects . create ( name = 'Fido' , age = 3 , sex = 'M' ) #NEWLINE#
location_out . append ( ',#SPACE#' . join ( loci ) ) #NEWLINE#
eb = plt . errorbar ( x , y , yerr = 0.1 , fmt = None , color = 'b' ) #NEWLINE#
'MIN' , 'NJN' , 'NOH' , 'NOK' , 'NOP' , 'NYK' , 'OKC' , 'ORL' , 'PHI' , 'PHO' #NEWLINE#
add2virtualenv / path / to / package #NEWLINE#
plt . yticks ( visible = False ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 , 10 ] #NEWLINE# sum ( range ( a [ 0 ] , a [ - 1 ] + 1 ) ) - sum ( a ) #NEWLINE#
[ '04' , '04' , '06' ] #NEWLINE#
my_handler . setLevel ( logging . DEBUG ) #NEWLINE#
fnew = np . empty ( ( Nj , Nk ) ) #NEWLINE#
print ( eval ( 'dict(' + s . replace ( ';' , ',' ) + ')' ) ) #NEWLINE#
worksheet . write ( row , col , key ) #NEWLINE#
[ bool ( x ) for x in [ [ ] , { } , np . array ( [ ] ) ] ] #NEWLINE#
return np . interp ( np . linspace ( 0 , npt , nbin + 1 ) , np . arange ( npt ) , np . sort ( x ) ) #NEWLINE#
self . i += 1 #NEWLINE#
listbox . insert ( tk . END , key ) #NEWLINE#
return time . time ( ) - time #NEWLINE#
strftime ( '%m_%d_%y_%H_%M_%S' ) #NEWLINE#
return list ( itertools . chain . from_iterable ( line . split ( ) for line in f ) ) #NEWLINE#
return str ( int ( match . group ( 0 ) ) - 1 ) #NEWLINE#
wi . fooi ( 7 ) #NEWLINE#
plt . show ( ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
print ( 'xy:#SPACE#%f:%f' % ( x , y ) ) #NEWLINE#
return { key : d . get ( key , default ) for key in keys } #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE#
np . arange ( x . size ) % 2 * ( x + np . array ( [ - 1 , 0 , 1 ] ) [ : , ( None ) ] ) #NEWLINE#
df [ 'count_max' ] = df . groupby ( [ 'Mt' ] ) [ 'count' ] . transform ( max ) #NEWLINE# df #NEWLINE#
plt . clf ( ) #NEWLINE#
np . maximum ( a , 0 , a ) #NEWLINE#
gb = df . groupby ( 'ZZ' ) #NEWLINE# [ gb . get_group ( x ) for x in gb . groups ] #NEWLINE#
x = np . linspace ( - 100 , 100 , N ) #NEWLINE#
[ 8 , 2 , 3 , 6 , 9 ] #NEWLINE#
from rpy2 . robjects . packages import importr #NEWLINE#
form . fields [ 'myuser' ] . queryset = User . objects . filter ( groups__name = 'foo' ) #NEWLINE# form . fields [ 'myuser' ] . queryset = User . objects . filter ( groups__name__in = [ 'foo' ] ) #NEWLINE#
self . listofrecords . append ( record ) #NEWLINE#
Category . objects . filter ( child__isnull = True ) #NEWLINE#
btn2 = Button ( root , text = 'Click#SPACE#too' ) #NEWLINE#
pylab . yscale ( 'close_to_one' , nines = 3 ) #NEWLINE#
f . close ( ) #NEWLINE#
l . extend ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
return '' . join ( s ) #NEWLINE#
socket . bind ( 'tcp://127.0.0.1:5555' ) #NEWLINE#
getattr ( obj , 'func' ) ( * arr ) #NEWLINE#
df = pd . concat ( [ df [ : ] , tags [ : ] ] , axis = 1 ) #NEWLINE#
ax0a . yaxis . set_major_locator ( MaxNLocator ( nbins = nbins , prune = 'upper' ) ) #NEWLINE#
ax0b . yaxis . set_major_locator ( MaxNLocator ( nbins = nbins , prune = 'upper' ) ) #NEWLINE#
"""{0:07b}""" . format ( 12 ) #NEWLINE#
with open ( 'Jfile.txt' , 'r' ) as infile : #NEWLINE# #INDENT# newList = json . load ( infile ) #NEWLINE# print ( newList ) #NEWLINE#
table = Table ( data , colWidths = 270 , rowHeights = 79 ) #NEWLINE#
wx . Frame . __init__ ( self , parent ) #NEWLINE#
models . OneToOneField ( EntryAdmin ) #NEWLINE#
f . write ( xmlstr ) #NEWLINE#
df = pd . DataFrame ( np . random . rand ( 4 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE# df [ df [ 'c' ] > 0.5 ] [ [ 'b' , 'e' ] ] #NEWLINE#
result = [ i for s in S for i , row in enumerate ( X ) if ( s == row ) . all ( ) ] #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
[ 'phrase3' ] #NEWLINE#
[ 'abcd' ] #NEWLINE#
[ 'xyzw' ] #NEWLINE#
[ 'pqrs' ] #NEWLINE#
[ 'xyz' ] #NEWLINE#
register_namespace ( 'brcd' , BROCADE_1_0 ) #NEWLINE#
n = sorted ( [ minN , n , maxN ] ) [ 1 ] #NEWLINE#
y = [ 0.0 , 0.5 , 1.0 , 1.5 , 2.0 , 2.5 ] #NEWLINE#
combinations = [ ( 'Long' , 'Yes' ) , ( 'Long' , 'No' ) , ( 'Med' , 'Yes' ) , ( 'Med' , 'No' ) ] #NEWLINE#
[ 235 , 40 , 17 ] #NEWLINE#
[ 1 , 0 , 0 , 0 , 0 ] #NEWLINE#
dlg . ShowModal ( ) #NEWLINE#
draw . rectangle ( ( x , y , x + walnut . size [ 0 ] , y + walnut . size [ 1 ] ) , outline = 'red' ) #NEWLINE#
print ( list ( flatten_group ( b ) ) ) #NEWLINE#
return super ( self . __class__ , self ) . on_touch_down ( touch ) #NEWLINE#
return np . broadcast_arrays ( * output ) #NEWLINE#
print ( s [ s . find ( 'CDE' ) + len ( 'CDE' ) : ] ) #NEWLINE#
sys . stdin = open ( '/dev/tty' ) #NEWLINE# a = input ( 'Prompt:#SPACE#' ) #NEWLINE#
self . tableWidget . setItem ( 3 , 5 , QtGui . QTableWidgetItem ( ) ) #NEWLINE# self . tableWidget . item ( 3 , 5 ) . setBackground ( QtGui . QColor ( 100 , 100 , 150 ) ) #NEWLINE#
stdscr . refresh ( ) #NEWLINE#
inv_map = { v : k for k , v in my_map . items ( ) } #NEWLINE#
p = subprocess . Popen ( [ 'md5sum' , file ] , stdout = f ) #NEWLINE#
collapse ( [ '011' , '101' , '111' ] ) #NEWLINE#
self . SetTopWindow ( mainDlg ) #NEWLINE#
grid = np . zeros ( ( 10 , 10 ) ) #NEWLINE#
mydriver . find_element_by_xpath ( xpaths [ 'usernameTxtBox' ] ) . clear ( ) #NEWLINE#
mydriver . find_element_by_xpath ( xpaths [ 'passwordTxtBox' ] ) . clear ( ) #NEWLINE#
sum ( dct [ k ] for k in lst if k in dct ) #NEWLINE#
np . issubdtype ( np . float32 , np . floating ) #NEWLINE#
main ( ) #NEWLINE#
0.0697 , 0.0015 , 0.0077 , 0.0402 , 0.0241 , 0.0675 , 0.0751 , 0.0193 , 0.0009 #NEWLINE#
self . finish ( ) #NEWLINE#
location = models . CharField ( max_length = 25 , choices = SHOP1_CHOICES ) #NEWLINE#
[ x for x in s if x in printable ] #NEWLINE#
del request . session [ 'jobfile' ] #NEWLINE#
test_file . write ( '¢\x00\x00\x00' ) #NEWLINE#
del array [ 0 ] #NEWLINE#
int ( '%o' % 11 , 10 ) #NEWLINE#
re . match ( '^/by_tag/(?P<tag>\\w+)/(?P<filename>(\\w|[.,!#%{}()@])+)$' , #NEWLINE# '/by_tag/påske/øyfjell.jpg' , re . UNICODE ) . groupdict ( ) #NEWLINE#
self . assertEqual ( exception . args , ( 'expected#SPACE#arg' , ) ) #NEWLINE#
B = np . array ( [ [ 1 ] , [ 2 ] ] ) #NEWLINE#
[ eval ( i , { '__builtins__' : None } ) for i in [ '6.2' , '"Hello,#SPACE#world!"' , '7' ] ] #NEWLINE#
ax . zaxis . set_major_locator ( LinearLocator ( 10 ) ) #NEWLINE#
new_list #NEWLINE#
np . alltrue ( ( a == b ) . compressed ( ) ) #NEWLINE#
pretty_xml_as_string = xml . toprettyxml ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
[ min ( y , max ( x , z ) ) for x , y , z in zip ( a , b , c ) ] #NEWLINE#
df . eq ( df . max ( 1 ) , 0 ) . astype ( int ) #NEWLINE#
new_name = old_name . rsplit ( '.' , 1 ) [ 0 ] [ : - 20 ] + '.mkv' #NEWLINE#
for test in suite : #NEWLINE# #INDENT# pass #NEWLINE#
return [ list ( v ) for k , v in groupby ( a , np . isfinite ) if k ] #NEWLINE#
DATE_FORMAT = '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#UTC' #NEWLINE#
pixbuf = gtk . gdk . Pixbuf ( gtk . gdk . COLORSPACE_RGB , False , 8 , width , height ) #NEWLINE#
pstree - p - a #NEWLINE#
rgb = numpy . fliplr ( cube . reshape ( - 1 , 3 ) ) . reshape ( cube . shape ) #NEWLINE#
max ( s , key = operator . methodcaller ( 'arity' ) ) #NEWLINE#
print ( repr ( line ) ) #NEWLINE#
ax . plot ( a , b , 'k-' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
q . write ( w ) #NEWLINE#
tree = ET . ElementTree ( root ) #NEWLINE#
filename = os . path . join ( dir , '/relative/path/to/file/you/want' ) #NEWLINE#
return np . ma . masked_array ( np . interp ( value , x , y ) ) #NEWLINE#
parser . add_argument ( '--sizes' , nargs = '+' ) #NEWLINE#
sys . path . insert ( 0 , os . getcwd ( ) ) #NEWLINE#
outfile . write ( json . dumps ( output , indent = 4 ) ) #NEWLINE#
font = pygame . font . SysFont ( 'Arial' , 64 ) #NEWLINE#
[ a , b , c , d , e ] #NEWLINE#
ts_clip = ts . reindex ( idx ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
rows = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# [ x [ 0 ] for x in rows ] #NEWLINE#
db . rename_column ( 'app1_a' , 'instance_b_id' , 'instance_b_placeholder_id' ) #NEWLINE#
df . columns = pd . MultiIndex . from_product ( [ [ 1 , 2 ] , [ 'A' , 'B' ] ] ) #NEWLINE#
plt . xscale ( 'log' ) #NEWLINE#
req = urllib . request . Request ( url ) #NEWLINE#
map ( str , x ) #NEWLINE#
make_aware ( some_datetime , get_current_timezone ( ) , is_dst = False ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
m = np . loadtxt ( 'matrix.csv' , delimiter = ',' ) #NEWLINE#
db . session . begin ( ) #NEWLINE#
number = scipy . misc . imread ( 'cropped_image.png' ) #NEWLINE#
my_choices = [ ( '1' , 'Choice1' ) , ( '2' , 'Choice2' ) , ( '3' , 'Choice3' ) ] #NEWLINE# SelectMultipleField ( choices = my_choices , default = [ '1' , '3' ] ) #NEWLINE#
browser . set_handle_referer ( True ) #NEWLINE#
thing = models . ForeignKey ( Thing , related_name = 'subthings' ) #NEWLINE#
Process . __init__ ( self ) #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
return self ( * args , ** kwargs ) + other ( * args , ** kwargs ) #NEWLINE#
print ( datetime . now ( GMT ) . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S#SPACE#%Z' ) ) #NEWLINE#
message_type = request . session . get ( 'message_type' , 'error' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda s , pat : s . split ( pat , 1 ) [ 0 ] , patterns , 'uiopuiopuiopuipouiop' ) #NEWLINE#
distances = numpy . linalg . norm ( np_cell [ 1 ] - srcPos , ord = 1 , axis = 1 ) #NEWLINE#
return time . strftime ( '%a-%b' ) #NEWLINE#
get_input ( sys . <STR0> ) #NEWLINE#
A = np . arange ( 600 ) #NEWLINE#
os . system ( '/usr/local/build#SPACE#' + self . site + '#SPACE#' + self . num + '#SPACE#' + self . octet ) #NEWLINE#
s . close ( ) #NEWLINE#
stdout_copy = os . fdopen ( os . dup ( sys . stdout . fileno ( ) ) , sys . stdout . mode ) #NEWLINE#
thread . start ( ) #NEWLINE#
random . shuffle ( tmp ) #NEWLINE#
x [ ~ np . isnan ( x ) ] #NEWLINE#
A [ : , ( j ) ] = ( C [ j ] * mask ) . sum ( axis = - 1 ) #NEWLINE#
sys . stderr . write ( 'default#SPACE#encoding:#SPACE#%s\n' % sys . stdout . encoding ) #NEWLINE#
ynew = np . linspace ( 0 , 1 , Newy ) #NEWLINE#
f = open ( str ( path , encoding ) ) #NEWLINE#
df #NEWLINE# df . fillna ( 0 ) #NEWLINE#
A . add_edge ( '7th#SPACE#Edition' , 'Xenix' ) #NEWLINE#
df [ 'day_of_week' ] = df [ 'day_of_week' ] . apply ( lambda x : days [ x ] ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
lst = [ 'cow' , 'orange' , 'mango' ] #NEWLINE#
writer . write ( '\r\n' ) #NEWLINE#
ax . xaxis . set_major_locator ( ticker . FixedLocator ( pos_list ) ) #NEWLINE#
f = io . open ( 'file.txt' , 'w' , newline = '' ) #NEWLINE#
print ( file . read ( ) ) #NEWLINE#
f . write ( file_str ) #NEWLINE#
df [ [ 'a_col_ffill' , 'b_col_ffill' ] ] . plot ( ) #NEWLINE#
is_valid_code ( 'x#SPACE#=#SPACE#1' ) #NEWLINE#
is_valid_code ( 'for#SPACE#j#SPACE#in#SPACE#range(10#SPACE#in#SPACE#range(10(' ) #NEWLINE#
lfunctionHashes = set ( ) #NEWLINE#
setattr ( modelclass , collection_name , ( cls , self ) ) #NEWLINE#
best_index = np . argmin ( sq ) #NEWLINE#
warnings . simplefilter ( 'ignore' ) #NEWLINE#
return calling_func ( * args , ** kw ) #NEWLINE#
x = defaultdict ( int ) #NEWLINE#
axnum . yaxis . set_major_formatter ( ticker . FormatStrFormatter ( '%.2f' ) ) #NEWLINE#
process = subprocess . Popen ( cmd , stdout = subprocess . PIPE ) #NEWLINE#
cpoints = np . unique ( cpoints ) #NEWLINE#
proc = subprocess . Popen ( 'cmake' , shell = True , stdout = subprocess . PIPE ) #NEWLINE#
print ( name . lower ( ) ) #NEWLINE#
is_binary_string ( open ( '/usr/bin/python' , 'rb' ) . read ( 1024 ) ) #NEWLINE#
od = MyOrderedDict ( [ ( 'apple' , 4 ) , ( 'banana' , 3 ) , ( 'orange' , 2 ) , ( 'pear' , 1 ) ] ) #NEWLINE#
print ( request . json ) #NEWLINE#
code . interact ( local = locals ( ) ) #NEWLINE#
validators . validate_email ( 'test@examplecom' ) #NEWLINE#
output_file . write ( line ) #NEWLINE#
hashlib . sha1 ( bn . T ) . hexdigest ( ) #NEWLINE#
print ( np . array2string ( x , separator = ',#SPACE#' ) ) #NEWLINE#
[ 'fruit' , 'drinks' , 'animal' ] #NEWLINE#
img . show ( ) #NEWLINE#
0 , 1 , 2 , 3 , 4 #NEWLINE#
a [ 0 ] . append ( 8 ) #NEWLINE#
SQLITE_3 = os . path . join ( PROJECT_PATH , 'YOUR#SPACE#DATABASE.DB' ) #NEWLINE#
xs [ 1 : : 4 ] #NEWLINE#
children = li . find_all ( 'a' ) #NEWLINE#
df [ 'prod_type' ] = df [ 'prod_type' ] . replace ( 'r' , 'responsive' ) #NEWLINE#
ord ( '\x7f' ) #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
all_data = np . hstack ( ( my_data , new_col ) ) #NEWLINE#
pairs = [ ( a , b , None ) for a , b in L ] #NEWLINE#
abacus [ index ] = abacus [ index ] + 1 #NEWLINE#
f . write ( 'asd' ) #NEWLINE#
p = Popen ( cmd , stdin = PIPE , stdout = PIPE , stderr = PIPE ) #NEWLINE#
p1 . wait ( ) #NEWLINE#
app_log . setLevel ( logging . INFO ) #NEWLINE#
print ( locale . atof ( '1,234,456.23' ) ) #NEWLINE#
numpy . std ( arr , axis = 0 ) #NEWLINE#
hex ( x ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
main ( ) #NEWLINE#
mytz = pytz . timezone ( 'Europe/Amsterdam' ) #NEWLINE#
glOrtho ( 0 , 1 , 0 , 1 , - 1 , 1 ) #NEWLINE#
the_integers [ a : b : c ] . foo ( ) #NEWLINE#
my_list [ 1 : : 3 ] #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
mlab . plot3d ( [ 0 , 1000 ] , [ 0 , 0 ] , [ 0 , 0 ] , color = black , tube_radius = 10.0 ) #NEWLINE#
new_list_of_dict = map ( new_dict , list_of_dict ) #NEWLINE#
sess = tf . InteractiveSession ( ) #NEWLINE#
time_d . total_seconds ( ) #NEWLINE#
a = np . arange ( 1 , 10 ) . reshape ( 3 , 3 ) #NEWLINE#
im = np . asarray ( x ) #NEWLINE#
"""{:*>16}""" . format ( card [ - 4 : ] ) #NEWLINE#
t . start ( ) #NEWLINE#
pass #NEWLINE#
a = np . array ( [ 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 ] ) #NEWLINE#
f = { x : make_func ( x ) for x in range ( 10 ) } #NEWLINE#
p . add_argument ( 'arg%d' % i ) #NEWLINE#
write ( n , 0 , 0 , 0 ) #NEWLINE#
[ i for i in dbm . neo_nodes . find ( { '_id' : ObjectId ( obj_id_to_find ) } ) ] #NEWLINE#
return pat . sub ( '' , html ) #NEWLINE#
L = [ 'foo' , 'biology' , 'sequence' ] #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 3 , 0 , 0 ) ] , #NEWLINE#
np . arange ( n ) >= arr [ : , ( np . newaxis ) ] #NEWLINE#
np . savetxt ( outfile , data_slice , fmt = '%-7.2f' ) #NEWLINE#
runfastcgi ( method = 'threaded' , daemonize = 'false' ) #NEWLINE#
result ( ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
ax1 . yaxis . get_offset_text ( ) . set_color ( plot_ax1 . get_color ( ) ) #NEWLINE#
df [ 'Names2' ] = df [ 'Names' ] . apply ( lambda x : '#' + x . replace ( '#SPACE#' , '' ) ) #NEWLINE#
A [ i ] , A [ j ] , A [ k ] = A [ j ] , A [ k ] , A [ i ] #NEWLINE#
w . writerow ( [ key , val ] ) #NEWLINE#
return line #NEWLINE#
data = response . json ( ) #NEWLINE#
module_b . py #NEWLINE#
buffer += socket . recv ( 1024 ) #NEWLINE#
self . Bind ( wx . EVT_SIZE , self . on_size ) #NEWLINE#
serve ( app , host = '0.0.0.0' ) #NEWLINE#
any_func ( 'Mona' , 45 , ( 'H' , 'K' , 'L' ) , 'F' ) #NEWLINE#
browser . set_handle_redirect ( False ) #NEWLINE#
tcpCliSock . close ( ) #NEWLINE#
d . tzname ( ) #NEWLINE#
child . kill ( ) #NEWLINE#
long_string = 'this#SPACE#is#SPACE#a#SPACE#really#SPACE#long#SPACE#string#SPACE#I#SPACE#want#SPACE#to#SPACE#wrap#SPACE#over#SPACE#multiple#SPACE#lines' #NEWLINE#
combine ( list1 , list2 ) . get ( '00f7e0b88577106a' ) #NEWLINE#
[ x [ n : n + 3 ] for n in range ( len ( x ) - 2 ) ] #NEWLINE#
( fn for fn in os . listdir ( '.' ) if fn . endswith ( '.gif' ) or fn . endswith ( '.GIF' ) ) #NEWLINE#
print ( 'Content-Type:#SPACE#text/html' ) #NEWLINE#
db . relationship ( 'User' , uselist = False , backref = 'memberships' , lazy = 'dynamic' ) #NEWLINE#
print ( casefold ( 'tschüß' ) ) #NEWLINE#
urllib . parse . unquote ( 'erythrocyte+membrane+protein+1%2C+PfEMP1+%28VAR%29' ) #NEWLINE#
p_values = scipy . stats . norm . sf ( abs ( z_scores ) ) * 2 #NEWLINE#
from sympy import * #NEWLINE#
print ( np . asarray ( ( unique , counts ) ) . T ) #NEWLINE#
f . write ( bytearray ( b ) ) #NEWLINE#
model . fit ( X , Y , nb_epoch = 5 , batch_size = 100 , verbose = 1 ) #NEWLINE#
print ( np . flatnonzero ( npi . contains ( [ [ 0 , 1 ] ] , vals ) ) ) #NEWLINE#
'dealer#SPACE#has#SPACE#%s#SPACE#showing' % self . dealer [ 0 ] #NEWLINE#
my_count ( 'aaaaaa' , 'aaa' ) #NEWLINE#
return int ( inp [ 'value' ] ) + 1 #NEWLINE#
keysList = [ 'x2' , 'x1' , 'y1' , 'y2' ] #NEWLINE#
print ( pd . get_dummies ( values ) ) #NEWLINE#
file = open ( 'graph4.dot' , 'r' ) #NEWLINE#
print ( '\n' . join ( [ tup [ 0 ] for tup in yourList ] ) ) #NEWLINE#
struct . pack ( '4f' , 1.0 , 2.0 , 3.0 , 4.0 ) #NEWLINE#
print ( type ( data ) ) #NEWLINE#
print ( a . a , a [ 'b' ] ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
df [ 'P' ] = df [ 'P' ] . str . replace ( '\\D+' , '' ) . astype ( 'int' ) #NEWLINE#
result = [ ] #NEWLINE# for s in l : #NEWLINE# #INDENT# result . extend ( re . split ( '_(?:f?or|and)_' , s ) ) #NEWLINE#
"""blahprefix12341234567890ABCDEF1234|randomjunkprefix12349876543210ABCDEF1234,more#SPACE#random#SPACE#junkprefix1234hellothereABCDEF1234...""" #NEWLINE#
self . canvas . delete ( self . last_img ) #NEWLINE#
plt . subplot ( 6 , 1 , 1 ) #NEWLINE#
plt . title ( 'signal2' ) #NEWLINE#
plt . title ( 'cross#SPACE#spectral#SPACE#density#SPACE#between#SPACE#signal#SPACE#1#SPACE#and#SPACE#2' ) #NEWLINE#
a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) #NEWLINE# a #NEWLINE#
data [ 'masks' ] [ 'id' ] #NEWLINE#
my_dict = obj . __dict__ #NEWLINE#
@ memoize #NEWLINE# class Test ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , somevalue ) : #NEWLINE# #INDENT# #INDENT# self . somevalue = somevalue #NEWLINE#
example . examplemod . do_stuff ( ) #NEWLINE#
np . random . seed ( 1 ) #NEWLINE#
np . all ( a == b , axis = 1 ) #NEWLINE#
result = numpy . array ( x ) . astype ( 'float' ) #NEWLINE#
data = cPickle . loads ( str ( row [ 'data' ] ) ) #NEWLINE#
df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 0 ) #NEWLINE# df . apply ( lambda x : sum ( x . isnull ( ) . values ) , axis = 1 ) #NEWLINE#
Sensor . __init__ ( self , * args , ** kwargs ) #NEWLINE#
axes . legend ( ( rep , inter ) , ( 'Representatives' , 'Intersections' ) ) #NEWLINE#
[ 1 , 3 , 2 ] #NEWLINE#
self . HookMessage ( self . OnMouseMove , win32con . WM_MOUSEMOVE ) #NEWLINE#
plt . xticks ( x , my_xticks ) #NEWLINE#
Thread ( target = open_website , args = [ 'http://google.com' ] ) . start ( ) #NEWLINE#
s = [ ( e + d ) for e in line . split ( d ) if e ] #NEWLINE#
zip ( [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 ] ) #NEWLINE#
print ( isEnglish ( '?fd4))45s&' ) ) #NEWLINE#
print ( 'Your#SPACE#IP#SPACE#detail\n#SPACE#' ) #NEWLINE#
[ array ( [ 1 , 3 , 2 , 4 ] ) , array ( [ 5 , 7 , 6 , 8 ] ) ] #NEWLINE# [ array ( [ [ 1 , 2 , 3 ] , [ 2 , 4 , 7 ] ] ) , array ( [ [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) ] #NEWLINE#
depends_on = ( 'app1' , '<migration_number>_update_fields' ) , #NEWLINE#
a . do_something ( ) #NEWLINE#
test2 = array ( [ [ 1 , 0 , 1 , 0 , 1 ] ] ) #NEWLINE#
pygame . mixer . init ( ) #NEWLINE#
lists = [ [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 ] , [ 0 , 3 , 4 ] ] #NEWLINE#
sys . stdout . buffer . write ( bytes ( output . encode ( 'utf-8' ) ) ) #NEWLINE#
'cua' , 'cug' , 'ccu' , 'ccc' , 'cca' , 'ccg' , 'cau' , 'cac' , 'caa' #NEWLINE#
'cag' , 'cgu' , 'cgc' , 'cga' , 'cgg' , 'auu' , 'auc' , 'aua' , 'acu' #NEWLINE#
'acc' , 'aca' , 'acg' , 'aau' , 'aac' , 'aaa' , 'aag' , 'agu' , 'agc' #NEWLINE#
'aga' , 'agg' , 'guu' , 'guc' , 'gua' , 'gug' , 'gcu' , 'gcc' , 'gca' #NEWLINE#
import imp #NEWLINE# imp . reload ( some_module ) #NEWLINE#
f . close ( ) #NEWLINE#
plt . plot ( x , abline_values , 'b' ) #NEWLINE#
cset = ax . contourf ( X , Y , Z , zdir = 'x' , offset = - 40 , cmap = plt . cm . jet ) #NEWLINE#
get_template ( self . template_name ) #NEWLINE#
return self . _lock . __exit__ ( * args , ** kwargs ) #NEWLINE#
p . start ( ) #NEWLINE#
return subprocess . Popen ( [ command ] + args , startupinfo = startupinfo ) . wait ( ) #NEWLINE#
pass #NEWLINE#
[ ( 4 - x , x ) for x in range ( 5 ) ] #NEWLINE#
r = r . astype ( [ ( 'name' , '|S30' ) , ( 'age' , '<f4' ) , ( 'weight' , '<f4' ) ] ) #NEWLINE#
sizer . Add ( button , 0 , wx . ALIGN_CENTER ) #NEWLINE#
unpickler . load ( ) #NEWLINE#
( '**/templates/**.pt' , 'lingua_xml' , None ) , #NEWLINE#
arr = np . array ( [ [ 0.393 , - 0.428 , - 0.546 , 0.103 ] , [ 0.439 , - 0.154 , 0.962 , 0.37 #NEWLINE# ] , [ - 0.038 , - 0.216 , - 0.314 , 0.458 ] , [ - 0.123 , - 0.881 , - 0.204 , 0.476 ] ] ) #NEWLINE#
re . sub ( '[%s]+$' % '' . join ( bad_chars ) , '' , example_line ) #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
image_output . seek ( 0 ) #NEWLINE#
setattr ( target , attr , value ) #NEWLINE#
sys . stdout = open ( 'file' , 'w' ) #NEWLINE# print ( 'test' ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'both' ) #NEWLINE#
obj = cPickle . load ( open ( 'save.p' , 'rb' ) ) #NEWLINE#
User . query . filter_by ( display_name = 'davidism' ) . all ( ) #NEWLINE#
self . w . show ( ) #NEWLINE#
p3 = np . einsum ( '...i,ij,...j' , dev , np . linalg . inv ( cov ) , dev ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
Decimal ( '3.1415926535' ) + Decimal ( '2.7182818285' ) #NEWLINE#
ast . literal_eval ( s ) #NEWLINE#
self . setCentralWidget ( self . form_widget ) #NEWLINE#
row . append ( 0 ) #NEWLINE#
print ( 'This#SPACE#is#SPACE#how#SPACE#we#SPACE#print#SPACE#on#SPACE#the#SPACE#same#SPACE#line.' ) #NEWLINE#
print ( "Created#SPACE#file#SPACE#'%s'#SPACE#id#SPACE#'%s'." % ( fiahl . get ( 'name' ) , fiahl . get ( 'id' ) ) ) #NEWLINE#
outfile . close ( ) #NEWLINE#
print ( [ i for r in ranges for i in range ( int ( r [ 0 ] ) , int ( r [ - 1 ] ) + 1 ) ] ) #NEWLINE#
return any ( sublst == lst [ i : i + n ] for i in range ( len ( lst ) - n + 1 ) ) #NEWLINE#
module_object = importlib . import_module ( module_name ) #NEWLINE#
f . write ( "This#SPACE#is#SPACE#mike#SPACE#number#SPACE#one,#SPACE#isn't#SPACE#this#SPACE#a#SPACE#lot#SPACE#of#SPACE#fun?" ) #NEWLINE#
print ( 'Process#SPACE#not#SPACE#found:#SPACE#starting#SPACE#it.' ) #NEWLINE#
assert ( np_data == new_data ) . all ( ) #NEWLINE#
print ( [ x for x in list_dirs if x . split ( '\\' ) [ - 1 ] not in unwanted_files ] ) #NEWLINE#
'unicodedata' in sys . modules #NEWLINE#
for ul in soup . findAll ( 'p' ) : #NEWLINE# #INDENT# pass #NEWLINE#
product = self . request . get ( 'product' ) #NEWLINE#
output = f . read ( ) #NEWLINE#
t . strftime ( '%a' ) #NEWLINE#
co . co_firstlineno , co . co_lnotab , co . co_freevars #NEWLINE#
list ( ( 3 , ) ) #NEWLINE#
f ( ) #NEWLINE#
totaldict = dict ( totaldict ) #NEWLINE#
cv2 . imshow ( 'Output' , out ) #NEWLINE#
print ( f . read ( line_len ) . decode ( ) ) #NEWLINE#
Process . __init__ ( self ) #NEWLINE#
reader = csv . DictReader ( csvfile , fieldnames ) #NEWLINE#
item . setCheckState ( QtCore . Qt . Unchecked ) #NEWLINE#
getattr ( web , 'input' ) ( ** my_args ) #NEWLINE#
pool . terminate ( ) #NEWLINE#
a [ sort_indices , static_indices [ 1 ] , static_indices [ 2 ] ] #NEWLINE#
show_query ( 'available#SPACE#databases' , 'SELECT#SPACE#*#SPACE#FROM#SPACE#pg_database' ) #NEWLINE#
output . write ( '#SPACE#' . join ( line_split ) + '\n' ) #NEWLINE#
setattr ( foo , i , i ) #NEWLINE#
int ( x ) if x else 0 #NEWLINE#
print ( 'After#SPACE#mod_without_dec,#SPACE#global#SPACE#g_c=' + str ( globals ( ) [ 'g_c' ] ) ) #NEWLINE#
nx . draw_networkx_labels ( G , pos , labels , font_size = 16 , font_color = 'r' ) #NEWLINE#
li = [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] #NEWLINE# li2 = [ y for x in li for y in x ] #NEWLINE#
idx = np . array ( [ [ 0 , 0 , 0 ] , [ 1 , 1 , 0 ] , [ 0 , 1 , 2 ] ] ) #NEWLINE#
im = Image . merge ( 'RGB' , ( b , g , r ) ) #NEWLINE#
head , tail = seq [ 0 ] , seq [ 1 : ] #NEWLINE#
import imp #NEWLINE#
sys . path . insert ( 'package.zip' ) #NEWLINE#
time . sleep ( delay ) #NEWLINE#
print ( df ) #NEWLINE#
ss . chisquare ( FRQ ) #NEWLINE#
matches = list ( compress ( totalist , selectors ) ) #NEWLINE#
pool . map_async ( f , args ) #NEWLINE#
app . run ( ) #NEWLINE#
np . trace ( matrix , offset ) #NEWLINE#
print ( ( 'Y#SPACE#on#SPACE#Foo' , hasattr ( Foo , 'Y' ) ) ) #NEWLINE#
ECD . close ( ) #NEWLINE#
pass #NEWLINE#
from functools import reduce #NEWLINE# reduce ( set . union , starmap ( set . intersection , combinations ( map ( set , ll ) , 2 ) ) ) #NEWLINE#
return True #NEWLINE#
entries = Entry . objects . select_for_update ( ) . filter ( author = request . user ) #NEWLINE#
df . to_excel ( xlsx , 'Sheet#SPACE#1' ) #NEWLINE#
print ( sign . getvalue ( ) ) #NEWLINE#
'c' in 'abc' #NEWLINE#
result = [ x . rsplit ( '[' , 1 ) [ 0 ] for x in flattened ] #NEWLINE#
yield np . fromfile ( f , array_dtype , np . prod ( dims ) ) . reshape ( dims ) #NEWLINE#
r = requests . get ( sys . argv [ 1 ] + '?keys=stream' ) #NEWLINE#
screen_width = root . winfo_screenwidth ( ) #NEWLINE# screen_height = root . winfo_screenheight ( ) #NEWLINE#
mlab . set ( h , 'XData' , [ 0 , 0 , 0 ] , nout = 0 ) #NEWLINE#
{ { ( mydate | date ) : 'Y-m-d' } } #NEWLINE#
B . append ( A [ 0 ] ) #NEWLINE#
plt . contour ( X , Y , scalar_field ) #NEWLINE#
serializers . serialize ( 'xml' , Dog . objects . select_related ( ) . all ( ) ) #NEWLINE#
raw_xml = etree . tostring ( div ) #NEWLINE#
df2 = pd . DataFrame ( dic ) . set_index ( 'Name' ) #NEWLINE#
net . params #NEWLINE#
f . write ( '\n' . join ( result ) ) #NEWLINE#
cb = plt . colorbar ( ) #NEWLINE# cb . set_label ( label = 'a#SPACE#label' , weight = 'bold' ) #NEWLINE#
L [ : 1 ] , L [ 1 : ] = L [ - 1 : ] , L [ : - 1 ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
tf . set_random_seed ( 1 ) #NEWLINE#
print ( json . loads ( jsonstring , object_hook = hinted_tuple_hook ) ) #NEWLINE#
db . session . add ( query ) #NEWLINE#
s . commit ( ) #NEWLINE#
print ( 'Always#SPACE#gets#SPACE#executed.' ) #NEWLINE#
pass #NEWLINE#
request . session . flash ( 'Form#SPACE#was#SPACE#submitted#SPACE#successfully.' ) #NEWLINE#
self . assertTrue ( r . zrangebyscore ( name , '(1' , '(2' ) == [ ] ) #NEWLINE#
return Image . merge ( 'CMYK' , cmyk_im ) #NEWLINE#
results . div ( weights , axis = 0 ) #NEWLINE#
dic1 = { 'a' : 'a' , 'b' : 'c' , 'c' : 'd' } #NEWLINE#
lst . append ( '{a}#SPACE#*#SPACE#{a}#SPACE#=#SPACE#{b}' . format ( a = a , b = a * a ) ) #NEWLINE#
os . path . isdir ( path ) #NEWLINE#
s [ [ 'keyA' , 'state' , 'v1' , 'v2' ] ] #NEWLINE#
s . group ( 0 ) #NEWLINE#
data_file . close ( ) #NEWLINE#
return [ d [ i ] for i in k ] #NEWLINE#
os . _exit ( ) #NEWLINE#
factarr * cplxarr . real + 1.0j * cplxarr . imag #NEWLINE#
df . iloc [ 0 , 2 ] = np . nan #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
"""-""" . join ( item for item in your_list if item ) #NEWLINE#
print ( filename [ 0 ] ) #NEWLINE#
body = data . decode ( 'utf-8' ) #NEWLINE#
print ( row [ 0 ] , binascii . b2a_hex ( row [ 1 ] ) ) #NEWLINE#
x [ 1 ] [ 0 ] [ 2 ] #NEWLINE#
nx . draw ( G , pos , with_labels = False , arrows = False ) #NEWLINE#
"""{0:.2f}""" . format ( pi ) #NEWLINE#
text = text . replace ( '(' , '(#SPACE#' ) . replace ( ')' , '#SPACE#)' ) . replace ( ',' , '#SPACE#,#SPACE#' ) #NEWLINE#
plt . xticks ( rotation = 15 ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
df [ 'A' ] . irow ( 0 ) #NEWLINE#
msg . attach ( img ) #NEWLINE#

y_pred = [ 0 , 1 , 0 , 1 , 2 , 2 , 1 ] #NEWLINE#
plt . axis ( [ - 2 , 2 , - 12 , 12 ] ) #NEWLINE#
cell = sheet . cell ( 6 , 0 ) #NEWLINE#
from functools import reduce #NEWLINE# #NEWLINE# #NEWLINE# def magic ( numList ) : #NEWLINE# #INDENT# s = map ( str , numList ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# s = '' . join ( s ) #NEWLINE# s = int ( s ) #NEWLINE# return s #NEWLINE# #NEWLINE# #NEWLINE# def magic ( numList ) : #NEWLINE# #INDENT# s = '' . join ( map ( str , numList ) ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# return int ( s ) #NEWLINE# num = int ( '' . join ( map ( str , numList ) ) ) #NEWLINE# s = reduce ( lambda x , y : x + str ( y ) , numList , '' ) #NEWLINE# num = int ( s ) #NEWLINE# s = list ( filter ( str . isdigit , repr ( numList ) ) ) #NEWLINE# num = int ( s ) #NEWLINE#
return setattr ( self , name , value ) #NEWLINE#
return sum ( ( y_pred - y_true ) ** 2 , axis = - 1 ) #NEWLINE#
s = datetime . datetime . strptime ( '20091229050936' , '%Y%m%d%H%M%S' ) #NEWLINE#
wx . PyControl . __init__ ( self , parent , id , ** kwargs ) #NEWLINE#
self . d . callback ( self . buffer ) #NEWLINE#
print ( subshift ( [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' ] , 2 , 5 , 4 ) ) #NEWLINE#
super ( test , self ) . __init__ ( { 'a' : 0 , 'b' : 1 } ) #NEWLINE#
[ 99.0 , 99.0 , 99.0 , 99.0 , 99.0 , 99.0 ] , #NEWLINE#
np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) . shape #NEWLINE#
plt . imshow ( labels , cmap = 'flag' , vmin = 0 , vmax = n_regions ) #NEWLINE#
print ( ( 'y=' , y , 'func3' ) ) #NEWLINE#
wx . Dialog . __init__ ( self , parent , - 1 , 'Progress' , size = ( 350 , 200 ) ) #NEWLINE#
[ ( Decimal ( '1.000' ) , Decimal ( '47.60' ) ) , ( Decimal ( '1.002' ) , Decimal ( '47.49' ) ) ] #NEWLINE#
aware = naive . replace ( tzinfo = utc ) #NEWLINE#
ax . tick_params ( axis = 'x' , which = 'both' , length = 0 ) #NEWLINE#
server_ssl . close ( ) #NEWLINE#
locale . atof ( '3,1415926' ) #NEWLINE#
tree . xpath ( '//table[@class="quotes"]/tr' ) #NEWLINE#
[ 1 , 2 ] #NEWLINE#
print ( 'Glück' ) #NEWLINE#
ts . groupby ( [ by ( 'year' ) , by ( 'month' ) , by ( 'day' ) ] ) . apply ( np . mean ) #NEWLINE#
Timestamp ( '17:10' ) #NEWLINE#
{ y : x for x , y in t } #NEWLINE#
fliplr ( m ) . swapaxes ( 0 , 1 ) #NEWLINE#
labels = { 'title' : 'Rule#SPACE#Title' , 'other_field' : 'Other#SPACE#Title' } #NEWLINE#
"""key1=[subKey1=[val1,val2=[k1,k2]],val3,val4,subKey2=[aaa,bbb]],key2=val5,key3,key4=[1,2,3]""" #NEWLINE#
import imp #NEWLINE# imp . reload ( widget ) #NEWLINE#
print ( json . loads ( '{}{}#SPACE#{' , cls = ConcatJSONDecoder ) ) #NEWLINE#
regex = re . compile ( '[^atgc]' ) #NEWLINE#
return stdin , stdout , stderr #NEWLINE#
df . loc [ idx [ : , ( mask_1 ) ] , idx [ ( mask_2 ) , : ] ] . fillna ( value = 0 , inplace = True ) #NEWLINE#
file . write ( '%s:%s\n' % ( key , value ) ) #NEWLINE#
window . show ( ) #NEWLINE#

do_stuff ( ) #NEWLINE#
query . filter ( User . name == None ) #NEWLINE#
f . close ( ) #NEWLINE#
printf ( 'This#SPACE#is#SPACE#a#SPACE#tab#SPACE#->#SPACE#*t#SPACE#<-#SPACE#That#SPACE#was#SPACE#a#SPACE#tab' ) #NEWLINE#
a += numpy . array ( ( 1 , 3 , 2 ) ) . reshape ( ( 3 , 1 , 1 ) ) #NEWLINE#
print ( '%07.1g,#SPACE#%07.1g,#SPACE#%07.1g' % ( 1.23 , 4567.8 , 9012345678.2 ) ) #NEWLINE#
l . sort ( ) #NEWLINE#
datetime . datetime . combine ( day , time ) #NEWLINE#
timezone . localize ( value , is_dst = None ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) , linewidth = 32 ) #NEWLINE#
C = scipy . delete ( C , 1 , 1 ) #NEWLINE#
self . vsb . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
r = dict ( list ( a . items ( ) ) + list ( b . items ( ) ) + [ ( k , a [ k ] + b [ k ] ) for k in set #NEWLINE# ( b ) & set ( a ) ] ) #NEWLINE#
parser . add_argument ( '-b' , action = 'store_const' , const = True , default = False ) #NEWLINE#
shop1 ( ) #NEWLINE#
pass #NEWLINE#
self . byid [ row [ 0 ] ] = item #NEWLINE#
return super ( ) . formfield_for_foreignkey ( db_field , request , ** kwargs ) #NEWLINE#
input . sort ( key = sortkeyfn ) #NEWLINE#
betas . iloc [ : 5 , : 5 ] #NEWLINE#
super ( EuDateFormField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
plt . xlabel ( 'Smarts' ) #NEWLINE#
( 'John' , 'Doe' ) , ( 'Jane' , 'Smith' ) , ( 'Bill' , 'Clinton' ) #NEWLINE#
print ( list ( row ) ) #NEWLINE#
win32clipboard . SetClipboardText ( 'testing#SPACE#123' ) #NEWLINE#
return Silly ( 1 ) #NEWLINE#
df [ 'fruitname' ] . value_counts ( ) % 2 #NEWLINE#
np . savetxt ( 'Test.txt' , A2 , fmt = '%s' , delimiter = ',' ) #NEWLINE#
super ( parent , self ) . __init__ ( x , y ) #NEWLINE#
df . columns = pd . to_datetime ( df . columns ) #NEWLINE#
line = line . replace ( '\t' , '' ) #NEWLINE#
a * b #NEWLINE#
print ( '\n' . join ( ( 'dog' , 'cat' ) ) ) #NEWLINE#
plt . plot ( list ( range ( 10 , 20 ) ) ) #NEWLINE#
angular_t = fields . CharField ( attributes = 'angular_t' , null = True ) #NEWLINE#
print ( '' ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
template = env . get_template ( 'index.html' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 0 , - 1 , 2 ] , 'b' : [ - 3 , 2 , 1 ] } ) #NEWLINE#
channel . queue_declare ( queue = 'hello' , durable = True ) #NEWLINE#
super ( MathQuestion , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
files = [ 'file9.txt' , 'file10.txt' , 'file11.txt' , '32foo9.txt' , '32foo10.txt' ] #NEWLINE#
print ( [ item for items , c in Counter ( a ) . most_common ( ) for item in [ items ] * c ] ) #NEWLINE#
writer . writeheader ( ) #NEWLINE#
r . text #NEWLINE#
b = map ( list , zip ( * a ) ) #NEWLINE#
print ( get_numbers_from_file ( 'numbers.txt' ) ) #NEWLINE#
printf ( 'SQLSETPOSIROW#SPACE#Size.:#SPACE#%d\n' , sizeof ( SQLSETPOSIROW ) ) #NEWLINE#
return super ( TestAdmin , self ) . edit_view ( ) #NEWLINE#
self . top_left . grid ( row = 0 , column = 0 , sticky = 'w' ) #NEWLINE#
ax . scatter ( x , y , c = z , cmap = cm , norm = norm ) #NEWLINE#
round ( '1' ) #NEWLINE#
fields = [ 'day' , 'hour' , 'microsecond' , 'minute' , 'month' , 'second' , 'year' ] #NEWLINE#
r = proc . stdout . readline ( ) #NEWLINE#
super ( PersonChangeListForm , self ) . save ( * args , ** kwargs ) #NEWLINE#
return True #NEWLINE#
result . append ( item ) #NEWLINE#
myarray = np . asarray ( mylist ) #NEWLINE#
df = pd . read_csv ( sep = '\t' ) #NEWLINE#
newList = map ( lambda y : max ( 0 , min ( 255 , y ) ) , oldList ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
driver . implicitly_wait ( 20 ) #NEWLINE#
client . load_host_keys ( os . path . expanduser ( '~/.ssh/known_hosts' ) ) #NEWLINE#
print ( pool . map ( square , range ( 1000 ) ) ) #NEWLINE#
y = np . sin ( x ) #NEWLINE#
c . execute ( 'select#SPACE#*#SPACE#from#SPACE#kv;' ) . fetchall ( ) #NEWLINE#
main ( ) #NEWLINE#
inspect . isclass ( X ) #NEWLINE#
print ( 1 + len ( list ( takewhile ( lambda x : x <= pos , countbytes ( open ( file , 'r' ) ) ) ) ) #NEWLINE# ) #NEWLINE#
return '%s#SPACE#%s' % ( self . user . first_name , self . user . last_name ) #NEWLINE#
return len ( self . left ) + len ( self . right ) #NEWLINE#
print ( d [ 'dict1' ] ) #NEWLINE#
real_fun = getattr ( generator , 'getCmd' ) #NEWLINE#
real_fun = getattr ( generator , 'nextCmd' ) #NEWLINE#
return 'My#SPACE#Object#SPACE##%i' % obj . id #NEWLINE#
ax2 . plot ( [ 0 , 1 ] , [ 0 , 3 ] , color = 'red' ) #NEWLINE#
[ 'Jane' , 'john' ] #NEWLINE#
res . append ( f ( v ) ) #NEWLINE#
json . loads ( '[[1,2,3],[4,5,6],[7,8,9],[10,11,12]]' ) #NEWLINE#
out [ : - 1 , : ] += tmp [ 1 : , : ] #NEWLINE#
genn ( igap , igap + 2 ) #NEWLINE#
pdf = pyPdf . PdfFileReader ( file ( path , 'rb' ) ) #NEWLINE#
func2 ( gen2 ) #NEWLINE#
result = [ ] #NEWLINE#
re . split ( '\\||<>' , input ) #NEWLINE# [ 'Item#SPACE#1#SPACE#' , '#SPACE#Item#SPACE#2#SPACE#' , '#SPACE#Item#SPACE#3#SPACE#' , '#SPACE#Item#SPACE#4#SPACE#' , '#SPACE#Item#SPACE#5' ] #NEWLINE#
combs_nd ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , 2 , axis = 1 ) #NEWLINE#
print ( resp . status_code ) #NEWLINE#
Rule ( LinkExtractor ( allow = '/trains/\\d+$' ) , callback = 'parse_trains' ) #NEWLINE#
plotly . offline . plot ( data , filename = 'file.html' ) #NEWLINE#
extra_compile_args = [ '-I./some/path/to/includes/' , '-fopenmp' , '-O3' ] #NEWLINE#
plt . show ( ) #NEWLINE#
"""2s""" . capitalize ( ) #NEWLINE#
ax2 . xaxis . set_major_formatter ( copy . copy ( Formatter ) ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
open ( filename , 'w' ) #NEWLINE#
b = datetime . datetime . now ( ) #NEWLINE#
import subprocess #NEWLINE# subprocess . call ( [ 'java' , '-jar' , 'Blender.jar' ] ) #NEWLINE#
print ( float ( val . replace ( 'D' , 'E' ) ) ) #NEWLINE#
g . pull ( ) #NEWLINE#
logging . getLogger ( 'tornado.access' ) . propagate = False #NEWLINE#
b , c = zip ( * [ ( m . group ( 0 ) , ( m . start ( ) , m . end ( ) - 1 ) ) for m in re . finditer ( #NEWLINE# '\\S+' , a ) ] ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
return str ( self ) #NEWLINE#
scipy . stats . norm ( 100 , 12 ) . cdf ( 100 ) #NEWLINE#
print ( repr ( text ) ) #NEWLINE#
ax1 . plot ( x1 , x1 , color = 'k' , marker = 'x' , ms = '9' ) #NEWLINE#
return format ( f , '.2f' ) . rstrip ( '0' ) . rstrip ( '.' ) #NEWLINE#
err = p . communicate ( ) [ 1 ] #NEWLINE#
imshow ( data ) #NEWLINE#
fcntl . flock ( f . fileno ( ) , fcntl . LOCK_EX ) #NEWLINE#
from django . conf import settings #NEWLINE#
print ( df . groupby ( 'A' ) . B . nunique ( ) . to_dict ( ) ) #NEWLINE#
print ( a . intersection ( b ) ) #NEWLINE#
s = 'Tue#SPACE#Oct#SPACE#04#SPACE#2016#SPACE#12:13:00#SPACE#GMT+0200#SPACE#(CEST)' #NEWLINE# datetime . strptime ( s , '%a#SPACE#%b#SPACE#%d#SPACE#%Y#SPACE#%H:%M:%S#SPACE#GMT%z#SPACE#(%Z)' ) #NEWLINE#
plt . plot ( x2 , y2 , 'b' ) #NEWLINE#
OrderedDict ( [ ( 1 , 0.3 ) , ( 3 , 0.2 ) , ( 2 , 0.01 ) ] ) #NEWLINE#
req . send_header ( 'Content-Type' , 'application/zip' ) #NEWLINE#
df . columns [ ( df == 0 ) . all ( ) ] #NEWLINE#
print ( 'Job#SPACE#will#SPACE#finish#SPACE#at:#SPACE#' , jobstop ) #NEWLINE#
print ( 'the#SPACE#job#SPACE#will#SPACE#run#SPACE#again#SPACE#' , jobstart ) #NEWLINE#
print ( 'and#SPACE#will#SPACE#finish#SPACE#at#SPACE#' , jobstop ) #NEWLINE#
inner_function ( ) #NEWLINE#
get_close_matches ( 'appel' , [ 'ape' , 'apple' , 'peach' , 'puppy' ] ) #NEWLINE#
grid . cbar_axes [ 0 ] . colorbar ( im0 ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
numbers = { 'a' : 1 , 'b' : 0 , 'c' : 1 , 'd' : 3 , 'e' : 3 } #NEWLINE# [ k for k , v in numbers . items ( ) if v == max ( numbers . values ( ) ) ] #NEWLINE#
print ( trk . name ( ) ) #NEWLINE#
print ( 'arr#SPACE#is#SPACE#empty' ) #NEWLINE#
super ( MyMixin , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
dists . value #NEWLINE#
return Article . all ( ) . filter ( 'tags' , tag ) . run ( ) #NEWLINE#
imgdata = base64 . b64decode ( imgstring ) #NEWLINE#
file1 . close ( ) #NEWLINE#
"""rush#SPACE##SPACE##SPACE##SPACE#hour#SPACE#2""" #NEWLINE#
myfile . write ( S ) #NEWLINE#
smallerThanN ( [ 1 , 4 , 10 , 2 , 7 ] , 5 ) #NEWLINE#
top . mainloop ( ) #NEWLINE#
z = { ( s [ x : ] + s [ : x ] ) for x in range ( len ( s ) ) } #NEWLINE#
re . sub ( '[%]\\s*[^%]+\\s*[%]' , lambda k : d . get ( k [ 1 , - 1 ] . strip ( ) , k ) , s ) #NEWLINE#
return { chr ( i ) : L [ i ] for i in range ( 65536 ) if L [ i ] } #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
pylab . savefig ( 'foo.pdf' ) #NEWLINE#
f . close ( ) #NEWLINE#
attachment . add_header ( 'Content-Disposition' , 'attachment' , filename = filename ) #NEWLINE#
pdf . add_page ( ) #NEWLINE#
index3 = abs ( x - pcen ) . argmin ( ) #NEWLINE#
[ 0 , 99 , 99 , 99 , 99 , 99 , 99 , 99 , 1 , 99 , 99 , 99 , 2 , 3 , 4 ] #NEWLINE#
__init__ . py #NEWLINE#
cdata = soup . find ( text = re . compile ( 'CDATA' ) ) #NEWLINE#
matplotlib . use ( 'TkAgg' ) #NEWLINE#
return np . concatenate ( ( M , new_face ) , dim ) #NEWLINE#
sys . exit ( ) #NEWLINE#
arg = 'default#SPACE#value' #NEWLINE#
width = img . shape [ 1 ] #NEWLINE#
""",#SPACE#""" . join ( map ( lambda x : "'" + x + "'" , parameters ) ) #NEWLINE#
pl . bar ( X , list ( d . values ( ) ) , align = 'center' , width = 0.5 ) #NEWLINE#
print ( '#SPACE#|#SPACE#' . join ( parser . parseString ( line ) ) ) #NEWLINE#
picturetag . type = 3 #NEWLINE#
app . MainLoop ( ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
return NULL #NEWLINE#
self . button = QtGui . QPushButton ( 'Horizontal' , self ) #NEWLINE#
return seq [ - a : ] + seq [ : - a ] #NEWLINE#
name = models . CharField ( ) #NEWLINE#
print ( 'File#SPACE#Changed:#SPACE#%s' % path ) #NEWLINE#
any ( [ True , True , False ] ) #NEWLINE#
canvas . bind ( '<ButtonPress-1>' , on_click ) #NEWLINE#
plt . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
self . harmstat = harmstat #NEWLINE#
current_child . save ( ) #NEWLINE#
log . debug ( 'In#SPACE#new#SPACE#log#SPACE#file' ) #NEWLINE#
x = np . linspace ( 0 , 4 , 5 ) #NEWLINE#
foo [ 0 ] [ 0 ] [ 0 ] is foo #NEWLINE#
return getattr ( self . _ref2 , name ) #NEWLINE#
s . connect ( ( HOST , PORT ) ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#add_one(1)' ) . show ( ) #NEWLINE#
cursor . execute ( query , param ) #NEWLINE#
from flask import request #NEWLINE#
time . sleep ( 1.0 ) #NEWLINE#
with open ( 'cross3x3.png' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( makeGrayPNG ( [ [ 0 , 255 , 0 ] , [ 255 , 255 , 255 ] , [ 0 , 255 , 0 ] ] ) ) #NEWLINE#
button1_window = canvas1 . create_window ( 10 , 10 , anchor = NW , window = button1 ) #NEWLINE#
print ( [ ( '%E' % e ) for e in a . flat ] ) #NEWLINE#
arr = [ [ ] for _ in range ( 5 ) ] #NEWLINE#
b = json . loads ( a ) #NEWLINE#
parser . add_argument ( '--nargs' , nargs = '+' ) #NEWLINE#
myList . sort ( cmp_dict ) #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
l2 = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] #NEWLINE#
print ( ( c , p ( c ) ) ) #NEWLINE#
PyObject_HEAD_INIT ( NULL ) #NEWLINE#
[ 2 , 3 , 4 , 5 ] #NEWLINE#
arr = np . array ( [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
print ( os . environ [ 'MyVar' ] ) #NEWLINE#
np . arange ( n ) #NEWLINE#
return whisper #NEWLINE#
my_module = imp . load_source ( 'my_module' , '.test.py' ) #NEWLINE#
x = a << 1 & 4294967295 #NEWLINE#
print ( paramdata . values ) #NEWLINE#
df . loc [ pd . to_datetime ( df [ 'Date' ] ) . dt . month == 9 ] #NEWLINE#
d . check ( 'Helo' ) #NEWLINE#
data = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
re2 = re . compile ( 'two' ) #NEWLINE#
np . dstack ( ( a1 , a1 . T ) ) . reshape ( - 1 , 2 ) #NEWLINE#
( 0 , 1 , 3 , 4 , 6 , 7 , 9 , 10 ) == 0 , 1 , 3 , 4 , 6 , 7 , 9 , 10 #NEWLINE#
window . fullscreen ( ) #NEWLINE#
print ( sys . argv [ 1 ] ) #NEWLINE#
command = '#SPACE#' . join ( sys . argv [ 1 : ] ) #NEWLINE#
timeit . timeit ( 'type(s)#SPACE#is#SPACE#str' , "s#SPACE#=#SPACE#''" ) #NEWLINE#
f . pack ( padx = 100 , pady = 100 ) #NEWLINE#
pdf . savefig ( ) #NEWLINE#
links = soup . find_all ( 'a' , { 'class' : 'institution' } ) #NEWLINE#
print ( re . findall ( r , s ) ) #NEWLINE#
bool ( re . match ( 'he' , 'Hello' , re . I ) ) #NEWLINE# bool ( re . match ( 'el' , 'Hello' , re . I ) ) #NEWLINE#
Matrix ( [ [ 0.1 , 4 , 4 ] , [ 4 , 0.2 , 4 ] , [ 4 , 4 , 0.3 ] ] ) #NEWLINE#
self . stdout . write ( 'Writing#SPACE#%r\n' % s ) #NEWLINE#
print ( my_list ) #NEWLINE#
re . search ( '^\\d+\\Z' , s ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) , color = color ) #NEWLINE#
x = df . reset_index ( ) #NEWLINE#
txt = Text ( str , x = 0 , y = 0 , width = None , height = None ) #NEWLINE#
outer_list = [ 'we' , 'like' , 'proper' , 'English' ] #NEWLINE#
tmp = db . __getitem__ ( 'a' ) #NEWLINE#
super ( testForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pat . findall ( text ) #NEWLINE#
[ 'is#SPACE#THAT#SPACE#what#SPACE#you#SPACE#mean,#SPACE#Mrs.#SPACE#Hussey?' ] #NEWLINE#
conn . close ( ) #NEWLINE#
return 'copyright#SPACE#©' . encode ( 'utf-8' ) #NEWLINE#
plt . xticks ( rotation = 90 ) #NEWLINE#
list_list = [ [ ] for Null in range ( 2 ) ] #NEWLINE#
f . write ( e ) #NEWLINE#
config . read ( 'config.ini' ) #NEWLINE#
regex . sub ( '\\1test' , 'fksf#SPACE#var:asfkj;' ) #NEWLINE#
yappi . start ( ) #NEWLINE#
df [ ( df [ 'A' ] > 0 ) & ( df [ 'B' ] > 0 ) & ( df [ 'C' ] > 0 ) ] #NEWLINE#
list ( split_list ( [ 1 , 2 , 3 , 4 ] , 3 ) ) #NEWLINE#
print ( ( x , y ) ) #NEWLINE#
utils . error ( 'The#SPACE#site#SPACE#is#SPACE#not#SPACE#in#SPACE#maintenance#SPACE#mode!' ) #NEWLINE#
array = [ 1 , 2 , 3 , 4 ] #NEWLINE#
os1 = imp . load_module ( 'os1' , * imp . find_module ( 'os' ) ) #NEWLINE#
contour = numpy . array ( [ [ [ 0 , 0 ] ] , [ [ 10 , 0 ] ] , [ [ 10 , 10 ] ] , [ [ 5 , 4 ] ] ] ) #NEWLINE# area = cv2 . contourArea ( contour ) #NEWLINE#
new_y = sp . interpolate . interp1d ( x , y , kind = 'cubic' ) ( new_x ) #NEWLINE#
matches = [ string for string in l if re . match ( regex , string ) ] #NEWLINE#
LOCALE_PATHS = os . path . join ( PROJECT_ROOT , 'locale' ) , #NEWLINE#
run ( 'mv#SPACE#maintenance-mode-on#SPACE#maintenance-mode-off' ) #NEWLINE#
sys . path . append ( '/path/to/your/django/app' ) #NEWLINE#
[ { ( 1 ) : 2 } , { ( 1 ) : 3 } ] #NEWLINE#
msg = email . message_from_string ( raw_message ) #NEWLINE# msg . get_payload ( ) #NEWLINE#
cv . SetData ( cv_img , pil_img . tostring ( ) , pil_img . size [ 0 ] * 3 ) #NEWLINE#
from tornado . ioloop import IOLoop #NEWLINE#
bool ( collections . Counter ( [ 1 ] ) ) #NEWLINE#
x . fillna ( method = 'ffill' , limit = 2 ) #NEWLINE#
i = np . array ( [ [ 0 , 0 ] , [ 1 , 1 ] ] ) #NEWLINE#
df . sort_index ( inplace = True ) #NEWLINE#
sys . getsizeof ( a ) #NEWLINE#
excel . Quit ( ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
cv2 . imshow ( 'img' , img ) #NEWLINE#
dist = np . array ( [ - 0.13615181 , 0.53005398 , 0 , 0 , 0 ] ) #NEWLINE#
self . canvas . scan_mark ( event . x , event . y ) #NEWLINE#
y = tf . slice ( x , [ i ] , [ 1 ] ) #NEWLINE#
f . axes [ 3 ] . set_position ( [ 0.55 , 0.05 , 0.4 , 0.4 ] ) #NEWLINE#
range_with_holes = itertools . chain ( range ( 1 , 6 ) , range ( 7 , 31 ) ) #NEWLINE#
wx . BeginBusyCursor ( ) #NEWLINE#
[ math . sqrt ( sum ( [ ( i * i ) for i in vec ] ) ) for vec in x ] #NEWLINE#
subprocess . call ( [ 'xterm' , '-e' , 'python#SPACE#bb.py' ] ) #NEWLINE# subprocess . call ( [ 'rxvt' , '-e' , 'python#SPACE#bb.py' ] ) #NEWLINE#
del sys . modules [ 'empty' ] #NEWLINE#
im = Image . open ( 'image.png' ) #NEWLINE#
myproject / myapp / middleware / globalrequestmiddleware . py #NEWLINE#
s . sendmail ( me , family , msg . as_string ( ) ) #NEWLINE#
theproc = subprocess . Popen ( 'myscript.py' , shell = True ) #NEWLINE#
self . mainframe . grid ( column = 0 , row = 0 , sticky = ( N , W , E , S ) ) #NEWLINE#
my = np . matrix ( y ) #NEWLINE#
self . canvas . configure ( scrollregion = ( 0 , 0 , 1000 , 1000 ) ) #NEWLINE#
di = { 'resp' : { 'frame' : { 'html' : { 'div' : [ 'test1' ] } } } } #NEWLINE#
glfw . WindowHint ( glfw . OPENGL_FORWARD_COMPAT , GL_TRUE ) #NEWLINE#
df = pd . DataFrame ( { 'cat' : [ 'a' , 'b' , 'c' , 'd' ] , 'val' : [ 1 , 2 , 5 , 10 ] } ) #NEWLINE#
print ( channel . recv ( 1024 ) ) #NEWLINE#
"""(?P<full_path>.+):\\d+:\\s+warning:\\s+Member\\s+(?P<member_name>.+)\\s+\\((?P<member_type>%s)\\)#SPACE#of#SPACE#(class|group|namespace)\\s+(?P<class_name>.+)\\s+is#SPACE#not#SPACE#documented""" #NEWLINE#
print ( trimmed_text ) #NEWLINE#
urlpatterns = patterns ( '' , ( '^one/$' , RedirectView . as_view ( url = '/another/' ) ) ) #NEWLINE#
Listsuper . __init__ #NEWLINE#
raise TypeError ( 'x#SPACE#must#SPACE#be#SPACE#a#SPACE#sequence#SPACE#or#SPACE#numpy#SPACE#array' ) #NEWLINE#
datetime . now ( ) . strftime ( 'mylogfile_%H_%M_%d_%m_%Y.log' ) #NEWLINE#
vars ( type ( obj ) ) [ 3 ] #NEWLINE#
random . shuffle ( shuffled ) #NEWLINE#
return htmlentitydefs . entitydefs [ x [ 1 : - 1 ] ] #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
shutil . rmtree ( '/path/to/folder' ) #NEWLINE#
test = [ 0 , 1 , 2 , 3 , 2 , 2 , 3 ] #NEWLINE#
shutil . move ( tempname , zipfname ) #NEWLINE#
start_time = time . time ( ) #NEWLINE#
df [ 'A' ] . replace ( to_replace = 0 , method = 'ffill' ) . values #NEWLINE#
arr_ip = [ tuple ( i ) for i in X . as_matrix ( ) ] #NEWLINE#
sheet . write ( 0 , 1 , 'Hello\nWorld' , style ) #NEWLINE#
L1 = [ 'cat' , 'dog' , 'fish' , 'rabbit' , 'horse' , 'bird' , 'frog' , 'mouse' ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
ans = { d [ 'pw' ] for d in data } . issubset ( { '' , '*sss*' } ) #NEWLINE#
plt . legend ( [ p1 , p2 ] , [ '$\\sin(x)$' , '$x^2$' ] , loc = 'best' ) #NEWLINE#
d . get ( 'z' , 'z' ) #NEWLINE#
db . commit ( ) #NEWLINE#
response . headers [ 'X-Frame-Options' ] = 'SAMEORIGIN' #NEWLINE#
turtle . mainloop ( ) #NEWLINE#
new . module ( 'foo' ) #NEWLINE#
profile . set_preference ( 'browser.search.countryCode' , 'US' ) #NEWLINE#
self . widget . config ( state = 'normal' ) #NEWLINE#
Counter ( myletters ) #NEWLINE#
df #NEWLINE#
writer . writerow ( fields ) #NEWLINE#
mystring = mystring . replace ( '#SPACE##SPACE#' , '#SPACE#' ) #NEWLINE#
new_file . write ( new_line ) #NEWLINE#
[ ( b . index ( x ) if x in b else None ) for x in a ] #NEWLINE#
x = gdb . selected_frame ( ) . read_var ( 'x' ) #NEWLINE#
datetime . date ( 2011 , 1 , 1 ) #NEWLINE#
pdDF = pd . DataFrame ( [ ( 'foo' , 1 ) , ( 'bar' , 2 ) ] , columns = ( 'k' , 'v' ) ) #NEWLINE# print ( pdDF ) #NEWLINE#
output . write ( ',' . join ( row ) + '\n' ) #NEWLINE#
list ( df ) #NEWLINE#
winlist . append ( ( hwnd , win32gui . GetWindowText ( hwnd ) ) ) #NEWLINE#
print ( sympify ( 'mega*m' ) . subs ( subs ) ) #NEWLINE#
print ( 'Error.#SPACE#Connection#SPACE#closed,#SPACE#and#SPACE#the#SPACE#message#SPACE#was#SPACE#never#SPACE#delivered.' ) #NEWLINE#
df = pd . merge ( df1 , df2 , on = 'Name' , how = 'outer' ) #NEWLINE#
email = self . request . get ( 'email' ) #NEWLINE# product = self . request . get ( 'product' ) #NEWLINE#
print ( #NEWLINE# '111111111111111111111111111111111111111111111111111111111111111111111111111' #NEWLINE# ) #NEWLINE#
self . vsb . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
zip . writestr ( '{}.csv' . format ( i ) , file . read ( ) ) #NEWLINE#
putchar ( '\n' ) #NEWLINE#
QObjectCleanupHandler ( ) . add ( self . layout ( ) ) #NEWLINE#
D = np . diff ( np . sort ( product . T , axis = 0 ) , axis = 0 ) == 0 #NEWLINE#
plt . axvspan ( 3 , 6 , color = 'red' , alpha = 0.5 ) #NEWLINE#
Notification . objects . exclude ( pk__in = list ( notes ) ) . delete ( ) #NEWLINE#
tokenizer . tokenize ( 'Fig.#SPACE#2#SPACE#shows#SPACE#a#SPACE#U.S.A.#SPACE#map.' ) #NEWLINE#
re . sub ( myre , '<markup>\\1</markup>' , 'this#SPACE#is#SPACE#my#SPACE#string#SPACE#with#SPACE#many#SPACE#words!' ) #NEWLINE#
agg [ agg [ 'size' ] > 100 ] #NEWLINE#
countlxml = doc . xpath ( 'count(//author)' ) #NEWLINE#
raise ValueError ( 'expected#SPACE#arg' ) #NEWLINE#
h = bin ( int ( h , 16 ) ) [ 2 : ] . zfill ( h_size ) #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
A [ ( idx ) , : ] #NEWLINE#
my_list . Skip ( 1 ) . Concat ( my_list . Take ( 1 ) ) #NEWLINE#
[ { 'transaction' : { 'type' : 'SELL' , 'apples' : '100' , 'oranges' : '20' } } , { #NEWLINE# 'transaction' : { 'type' : 'BUY' , 'apples' : '200' , 'oranges' : '10' } } ] #NEWLINE#
store . select_column ( 'df' , 'one' ) #NEWLINE#
print ( data . text ) #NEWLINE#
x = np . linspace ( 0 , 10 , 50 ) #NEWLINE#
x , y , z = v #NEWLINE#
del x [ key ] #NEWLINE#
print ( r . get ( 'key_name' ) ) #NEWLINE#
orig_image = Image . open ( original_file ) #NEWLINE#
ax . set_ylim ( 0 , 7 ) #NEWLINE#
a = np . frombuffer ( array_pointer . contents ) #NEWLINE#
d [ 'abc' ] += 1 #NEWLINE#
x = np . array ( [ ( 1 , 'O' , 1 ) ] , dtype = np . dtype ( [ ( 'step' , 'int32' ) , ( 'symbol' , #NEWLINE# '|S1' ) , ( 'index' , 'int32' ) ] ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( paragraph . text ) #NEWLINE#
yield gen . Task ( IOLoop . instance ( ) . add_timeout , time . time ( ) + 5 ) #NEWLINE#
ax [ 2 ] . imshow ( np . random . rand ( 30 , 30 ) , interpolation = 'none' , cmap = cmap3 ) #NEWLINE#
wql = 'Select#SPACE#*#SPACE#From#SPACE#Win32_SerialPort' #NEWLINE#
b = [ ( b [ i ] if i % 3 == 0 else int ( b [ i ] ) ) for i in range ( 0 , len ( b ) ) ] #NEWLINE#
a = '#SPACE##SPACE##SPACE#Hello#SPACE#world' #NEWLINE# len ( a ) - len ( a . lstrip ( ) ) #NEWLINE#
new_a = np . delete ( a , index ) #NEWLINE#
response = opener . open ( 'https://example.org' ) #NEWLINE#
return self . fileobj . fileno ( ) #NEWLINE#
c = matplotlib . pyplot . contour ( x , y , f ( x , y ) ) #NEWLINE#
plt . plot ( x , y , linestyle = 'dashed' , label = 'MyLabel' ) #NEWLINE#
c = [ tuple ( [ ( i + j ) for i , j in zip ( e , b ) ] ) for e in a ] #NEWLINE#
print ( 'custom:#SPACE#{}#SPACE#standard:#SPACE#{}' . format ( custom_time , standard_time ) ) #NEWLINE#
print ( '\x07' ) #NEWLINE#
self . set_from_pixbuf ( pixbuf ) #NEWLINE#
assert np . allclose ( np . dot ( P , vec ) , val * vec ) #NEWLINE#
self . num = 1 #NEWLINE#
df [ 'two' ] = 'bar' #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE#
"""""" . join ( random . sample ( string . ascii_lowercase , X ) ) #NEWLINE#
pygame . time . delay ( 100 ) #NEWLINE#
d [ 'dict1' ] = { } #NEWLINE#
print ( 'Hello,#SPACE#world!' . translate ( widemap ) ) #NEWLINE#
df = df . drop ( [ 'L' , 'Q' ] , axis = 1 ) #NEWLINE#
Py_Initialize ( ) #NEWLINE#
self . sock . listen ( 5 ) #NEWLINE#
tree . add ( 0 ) #NEWLINE#
regex . sub ( '' , 'ab3d*E' ) #NEWLINE#
print ( ( df [ 'phone_no' ] != df [ 'phone_no' ] . shift ( ) ) . cumsum ( ) . map ( '{:02}' . format ) ) #NEWLINE#
server . listen ( 5 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df1 . index . get_loc ( t ) #NEWLINE#
M ( ** vars ( args ) ) #NEWLINE#
inner1 ( ) #NEWLINE#
locals ( ) [ 's' ] #NEWLINE#
data = s . recv ( 2048 ) #NEWLINE#
pass #NEWLINE#
[ '-' . join ( x ) for x in zip ( i , i ) ] #NEWLINE#
main ( ) #NEWLINE#
raise TypeError ( 'Too#SPACE#many#SPACE#keys#SPACE#created' ) #NEWLINE#
l . pack ( ) #NEWLINE#

model . fit ( X ) #NEWLINE#
created_at = models . DateTimeField ( ) #NEWLINE#
return False #NEWLINE#
output . close ( ) #NEWLINE#
flipbf ( m ) . swapaxes ( 0 , 2 ) #NEWLINE#
reader = csv . reader ( f , delimiter = ',' ) #NEWLINE#
lst = [ [ 'a' , 1 ] , [ 'b' , 1 ] , [ 'a' , 1 ] , [ 'b' , 1 ] , [ 'b' , 2 ] , [ 'c' , 2 ] , [ 'b' , 3 ] ] #NEWLINE#
[ 10 , 11 , 12 , 13 , 14 , 15 , 16 ] #NEWLINE#
print ( 'Effective#SPACE#user#SPACE#is#SPACE#[%s]' % getpass . getuser ( ) ) #NEWLINE#
root = Tk ( ) #NEWLINE#
shutdownJVM ( ) #NEWLINE#
instance . save ( ) #NEWLINE#
IP ( '277.0.0.1' ) #NEWLINE#
return d + ( date ( d . year + years , 1 , 1 ) - date ( d . year , 1 , 1 ) ) #NEWLINE#
newList = [ elem for elem in oldlist ] #NEWLINE#
dct = dict ( zip ( l2 , lens ) ) #NEWLINE#
yaml_file . write ( yaml . dump ( data , default_flow_style = False ) ) #NEWLINE#
"""""" . join ( x for x in 'make#SPACE#IT#SPACE#camel#SPACE#CaSe' . title ( ) if not x . isspace ( ) ) #NEWLINE#
id = Column ( Integer , primary_key = True , nullable = False ) #NEWLINE#
parser . add_argument ( '--sample-differently' , action = 'store_true' ) #NEWLINE#
datetime . datetime . strptime ( re . sub ( '[+-]([0-9])+' , '' , #NEWLINE# 'Tue#SPACE#May#SPACE#08#SPACE#15:14:45#SPACE#+0800#SPACE#2012' ) , '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#%Y' ) #NEWLINE#
y_data_plot . append ( K00 [ i ] ) #NEWLINE#
sys . stdout . write ( format % args ) #NEWLINE#
conn . upload ( 'some_file.zip' , f , 'my_bucket' ) #NEWLINE#
u16 = v . decode ( 'iso-8859-1' ) . encode ( 'utf-16' ) #NEWLINE#
np . issubdtype ( np . void , np . integer ) #NEWLINE#
mylist = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
wav_file . writeframes ( struct . pack ( 'h' , sample ) ) #NEWLINE#
np . einsum ( 'ij,ji->i' , a , b ) #NEWLINE#
s = 'hello,#SPACE#world' #NEWLINE# s = s [ : : - 1 ] #NEWLINE# print ( s ) #NEWLINE#
ax . set_xlim ( - 0.5 , 4.5 ) #NEWLINE#
matplotlib . use ( 'pdf' ) #NEWLINE#
foo ( 'Monty' ) #NEWLINE#
self . assertEqual ( first , second , msg ) #NEWLINE#
print ( 'Now#SPACE#switch#SPACE#back#SPACE#to#SPACE#the#SPACE#calling#SPACE#user:#SPACE#' + getpass . getuser ( ) ) #NEWLINE#
child . start ( ) #NEWLINE#
plt . ylim ( 0 , ymax ) #NEWLINE#
ax . set_ylabel ( LabelY ) #NEWLINE#
array ( [ 6 , 4 , 30 ] ) #NEWLINE#
myFTP . cwd ( '..' ) #NEWLINE#
all ( error2 ( ) for i in range ( 2 ) ) #NEWLINE#
data = line . split ( '#SPACE#-#SPACE#' ) #NEWLINE#
list ( incremental_range ( 0 , 20 , 1 , 1 ) ) #NEWLINE#
result . append ( None ) #NEWLINE#
sum ( str ( abs ( x ) ) . startswith ( '3' ) for x in ( a , b , c , d , e ) ) #NEWLINE#
np . array_split ( a , [ 1 ] , axis = 1 ) #NEWLINE#
foo ( 'outer#SPACE#arg' ) #NEWLINE#
df . index = pd . to_datetime ( df . index ) #NEWLINE#
print ( count_function ( L , 1 , value = 0 ) ) #NEWLINE#
a = array . array ( 'b' , itertools . repeat ( 0 , 10000 ) ) #NEWLINE#
root . geometry ( '300x100' ) #NEWLINE#
freq = db . StringProperty ( ) #NEWLINE#
ax1 . plot ( x , y1 , color = 'b' , label = 'aVal' ) #NEWLINE#
QtCore . QThread . __init__ ( self ) #NEWLINE#
axr . set_ylabel ( 'Altitude#SPACE#[km]' ) #NEWLINE#
my_list = [ ( 'a' , 1 ) , ( 'b' , 2 ) ] #NEWLINE# dict ( my_list ) #NEWLINE#
"""12345a""" . isdigit ( ) #NEWLINE#
[ x for x in lis if x != '' ] #NEWLINE#
[ 12 , 13 , 14 , 15 , 16 , 17 ] #NEWLINE#
print ( [ int ( ch ) for i in list1 for ch in str ( i ) ] ) #NEWLINE#
print ( ( k , list ( g ) ) ) #NEWLINE#
print ( my_object ) #NEWLINE#
plt . scatter ( i , y ) #NEWLINE#
print ( 'error:\n%s\n' % s ) #NEWLINE#
con = sqlite3 . connect ( ':memory:' ) #NEWLINE#
foofunc ( ) #NEWLINE#
parser . add_argument ( 'filename' ) #NEWLINE#
ax . set_ylim ( 6 , 24 ) #NEWLINE#
b . append ( ( begin , end ) ) #NEWLINE#
System . out . println ( i + '\t' + cbSeed ( i ) ) #NEWLINE#
print ( ( index , item ) ) #NEWLINE#
functest ( ) #NEWLINE#
print ( '*' * ( len ( card ) - 4 ) + card [ - 4 : ] ) #NEWLINE#
re . findall ( '\\b\\d+\\b' , "he33llo#SPACE#42#SPACE#I'm#SPACE#a#SPACE#32#SPACE#string#SPACE#-30" ) #NEWLINE#
d = datetime . strptime ( '2007-07-18#SPACE#10:03:19' , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
os . fsync ( f . fileno ( ) ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
return ( w for w in wordlist if is_neighbors ( word , w ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
f_out . write ( f_in . read ( ) . replace ( 'ROW_DEL#SPACE#' , os . linesep ) ) #NEWLINE#
pandas_df_to_markdown_table ( infodf ) #NEWLINE#
d [ key ] . append ( list ( value ) ) #NEWLINE#
launchWithoutConsole ( 'd:\\bin\\gzip.exe' , [ '-d' , 'myfile.gz' ] ) #NEWLINE#
names [ : ] = ( name for name in names if name [ - 5 : ] != 'Smith' ) #NEWLINE#
build_cscript ( ) #NEWLINE#
dict = { 'one' : 1 , 'two' : 2 } #NEWLINE# print ( [ y for x in list ( dict . items ( ) ) for y in x ] ) #NEWLINE#
return 'H' if random . random ( ) < p else 'T' #NEWLINE#
regex . split ( 'abc#SPACE#Feat.#SPACE#def' ) #NEWLINE#
{ { ( img . height | div ) : 2 } } #NEWLINE#
readonly_fields = [ 'address_2_html' ] #NEWLINE#
plt . bar ( tickpositions , numincidents ) #NEWLINE#
d . update ( { 1 } ) #NEWLINE#
plt . show ( ) #NEWLINE#
logger = logging . getLogger ( 'demo' ) #NEWLINE#
from lxml . etree import parse , tostring #NEWLINE#
wpf . LoadComponent ( self , 'WpfApplication3.xamll' ) #NEWLINE#
return r . headers [ 'content-type' ] #NEWLINE#
df [ 'Adj#SPACE#Close' ] . plot ( ) #NEWLINE#
sizer = wx . BoxSizer ( wx . VERTICAL ) #NEWLINE#
l = [ 'dog' , 'Cat' , 'house' , 'foo' ] #NEWLINE#
dev . ledstates ( verbose = True ) #NEWLINE#
arr = input ( ) . split ( ) #NEWLINE#
array ( [ [ 4 , 3 , 6 ] , [ 5 , 4 , 2 ] , [ 1 , 3 , 0 ] , [ 1 , 4 , 2 ] , [ 1 , 4 , 3 ] , [ 7 , 4 , 6 ] , [ 7 , #NEWLINE# 5 , 8 ] , [ 7 , 5 , 4 ] ] , dtype = int32 ) #NEWLINE#
import imp #NEWLINE# imp . reload ( dependant ) #NEWLINE#
x = np . array ( [ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , np . nan , 5 ] , [ np . nan , 5 , 2 , 3 ] ] ) #NEWLINE# np . argwhere ( np . isnan ( x ) ) #NEWLINE#
browser . get_screenshot_as_file ( 'twitter_screenshot.png' ) #NEWLINE#
http_request = get_request ( ) #NEWLINE#
[ 'c' ] #NEWLINE#
[ 'D' , 'A' , 'C' , 'B' , 'C' , 'A' , 'B' , 'D' ] #NEWLINE#
[ 'B' , 'D' , 'C' , 'A' , 'C' , 'B' , 'A' , 'D' ] #NEWLINE#
df [ 'closest' ] = idx . index . map ( lambda x : df . ix [ x ] [ idx . ix [ x ] ] ) #NEWLINE# df #NEWLINE#
loss_or_grads = loss_or_grads . mean ( ) #NEWLINE#
outlook = win32com . client . Dispatch ( 'Outlook.Application' ) . GetNamespace ( 'MAPI' ) #NEWLINE#
dicC . update ( dicB ) #NEWLINE#
x = np . linspace ( 0 , 1 , N ) #NEWLINE#
set ( zip ( 'aabbcc' , [ 1 , 1 , 5 , 5 , 2 , 2 ] ) ) #NEWLINE#
foo ( ) #NEWLINE#
cur . execute ( 'select#SPACE#charecteristics#SPACE#from#SPACE#product#SPACE#where#SPACE#store_id#SPACE#=#SPACE#1' ) #NEWLINE# dictionary = json . loads ( cur . fetchone ( ) [ 0 ] ) #NEWLINE#
cv = Canvas ( root , width = width , height = height , bg = 'white' ) #NEWLINE#
cv . ShowImage ( 'Target' , color_image ) #NEWLINE#
print ( template . render ( the = 'variables' , go = 'here' ) ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
return list ( self ) . index ( obj ) #NEWLINE#
cmap = colors . ListedColormap ( [ 'white' , 'red' ] ) #NEWLINE#
np . fromfile ( 'c_order.dat' , dtype = np . uint8 ) [ : 10 ] #NEWLINE#
foo = np . array ( [ [ 0 , 1 ] , [ 1 , 1 ] ] ) #NEWLINE#
if var in [ 'string#SPACE#one' , 'string#SPACE#two' ] : #NEWLINE# #INDENT# do_something ( ) #NEWLINE#
df = pd . DataFrame ( index = [ 'a' , 'b' ] ) #NEWLINE#
username = request . form . get ( 'username' ) #NEWLINE#
instance = klass ( ) #NEWLINE#
view . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
pygame . camera . quit ( ) #NEWLINE#
open ( filename , 'a' ) . close ( ) #NEWLINE#
s2 . replace ( 'b' , '#SPACE#' ) #NEWLINE#
"""https://bitbucket.org/zzzeek/alembic/get/tip.zip#egg=alembic-0.6.0""" #NEWLINE#
regex . findall ( '(?i)(?<=\\d+[a-z]+\\d+)[a-z]+' , s ) #NEWLINE#
string_input = input ( ) #NEWLINE#
SERVER_IP = '127.0.0.1' #NEWLINE#
env = Environment ( ) #NEWLINE#
print_foo ( ) #NEWLINE#
df1 = df1 . drop ( [ 'B' , 'C' ] , axis = 1 ) #NEWLINE#
x_axis . insert ( 0 , '#SPACE#' ) #NEWLINE#
NP . fromstring ( '1,2,3' , sep = ',' , dtype = NP . uint8 ) #NEWLINE#
c_uint . __init__ ( self , value ) #NEWLINE#
df = df [ [ 'D' , 'A' , 'B' , 'C' ] ] #NEWLINE#
[ ( 'r' if x else 'k' ) for x in bool_arr ] #NEWLINE#
yield key , getattr ( self , key ) #NEWLINE#
sys . stdout . write ( 'h' ) #NEWLINE#
sys . path . append ( '/my/lib' ) #NEWLINE#
return crl_url . strip ( ) #NEWLINE#
ax2 = fig . add_subplot ( 122 ) #NEWLINE#
process . start ( ) #NEWLINE#
model . compile ( loss = 'mean_squared_error' , optimizer = 'rmsprop' ) #NEWLINE#
data = json . loads ( request . POST [ 'mydata' ] ) #NEWLINE#
main ( ) #NEWLINE#
df2 . to_csv ( 'output.csv' ) #NEWLINE#
w = Button ( root ) #NEWLINE#
child . send ( 'guest\r' ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = [ 'A' , 0 ] ) #NEWLINE#
a = Matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
ENTRYPOINT [ '/usr/bin/supervisord' ] #NEWLINE#
self . scat . set_offsets ( data [ : 2 , : ] ) #NEWLINE#
_draw_point ( renderer , position , i , j + 1 ) #NEWLINE#
df [ df . filter ( like = 'Value' ) . abs ( ) . lt ( 1 ) . all ( 1 ) ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
df = pd . concat ( [ df [ df . columns [ : 5 ] ] , a ] , axis = 1 ) #NEWLINE#
np . index_exp [ 10 : 4 , : : - 1 , ( ... ) ] #NEWLINE#
with open ( 'pagehead.section.htm' , 'r' ) as f : #NEWLINE# #INDENT# output = f . read ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
df1 = pd . DataFrame ( { 'a' : [ 1 , 2 ] , 'b' : [ 3 , 4 ] } , index = [ 1 , 2 ] ) #NEWLINE#
request = self . factory . get ( '/customer/details' ) #NEWLINE#
return path . split ( '.' ) [ 0 ] , '.' . join ( path . split ( '.' ) [ - 2 : ] ) #NEWLINE#
doing_fd . write ( 'new#SPACE#value' ) #NEWLINE#
request = urllib . request . Request ( url , data , headers ) #NEWLINE#
request . _url = request . url . replace ( '%5D' , ']' , 2 ) #NEWLINE#
content = resp . read ( ) #NEWLINE#
print ( dtd . error_log . filter_from_errors ( ) ) #NEWLINE#
a = [ [ '0' , '0' ] , [ '0' , '0' ] , [ '0' , '0' ] ] #NEWLINE#
G . add_edge ( 'B' , 'D' ) #NEWLINE#
G . add_edge ( 'B' , 'E' ) #NEWLINE#
G . add_edge ( 'C' , 'E' ) #NEWLINE#
arr = eval ( ( '[[0]*5]+' * 10 ) [ : - 1 ] ) #NEWLINE#
TESTDATA_FILENAME = os . path . join ( os . path . dirname ( __file__ ) , 'testdata.html' ) #NEWLINE#
contourf ( x , y , H1 , levels1 , cmap = cmap_lin1 ) #NEWLINE#
print ( item . find ( 'link' ) . text ) #NEWLINE#
tu = index . parse ( sys . argv [ 1 ] , args = [ '-x' , 'c++' ] ) #NEWLINE#
plt . gca ( ) . add_collection ( lc ) #NEWLINE#
eval ( input ( 'Enter#SPACE#to#SPACE#exit#SPACE#from#SPACE#this#SPACE#launcher#SPACE#script...' ) ) #NEWLINE#
data . sort ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
for col in df : #NEWLINE# #INDENT# df [ col ] = df [ col ] . sum ( ) #NEWLINE#
now = time . time ( ) #NEWLINE#
mask = x == 0 #NEWLINE#
plt . ylabel ( 'Angle#SPACE#(radians)' , color = 'g' ) #NEWLINE#
return render_template ( 'yourtemplate.html' , form = form ) #NEWLINE#
headers = { 'Content-Type' : 'text/html' } #NEWLINE#
lst = [ 'aq' , 'bs' , 'ce' ] #NEWLINE#
return HttpResponse ( 'SAVED' ) #NEWLINE#
browser = webdriver . Firefox ( fp ) #NEWLINE#
plt . xlabel ( 'time#SPACE#($s#SPACE#10^3$)' ) #NEWLINE#
fig . subplots_adjust ( wspace = 0 , hspace = 0 ) #NEWLINE#
fp . close ( ) #NEWLINE#
pygame . draw . rect ( game_display , ( 255 , 0 , 0 ) , rect_one ) #NEWLINE#
container . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
reader = csv . reader ( csvfile , delimiter = '#SPACE#' , quotechar = '|' ) #NEWLINE#
app . debug = True #NEWLINE#
s = str ( your_object ) . encode ( 'utf8' ) #NEWLINE# f . write ( s ) #NEWLINE#
t1 = datetime . datetime . strptime ( s , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
inner1d ( U . transpose ( 0 , 2 , 1 ) , V . T ) #NEWLINE#
test . main ( ) #NEWLINE#
c = [ random . random ( ) for _ in range ( 500 ) ] #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
sys . path . insert ( 0 , cfg [ 'plugin_path' ] ) #NEWLINE#
pd . notnull ( 'hey' ) #NEWLINE#
A . get_x ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
list ( get_stuff ( d , [ 'l' , 'm' ] , [ 'k' , 'stuff' ] ) ) #NEWLINE#
return abs ( x ) , angle ( x ) #NEWLINE#
self . scat = self . ax . scatter ( x , y , c = c , s = s , animated = True ) #NEWLINE#
return False #NEWLINE#
plt . plot ( np . sin ( np . linspace ( 0 , 10 , 100 ) ) ) #NEWLINE#
TScolumns = pd . DataFrame ( df . TimeStamp . tolist ( ) ) #NEWLINE#
a = numpy . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE# a . ravel ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , loc ) #NEWLINE#
list_of_keys = [ 'S_Length' , 'S_Width' , 'P_Length' , 'P_Width' , 'Predicate' ] #NEWLINE#
label . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
G . add_node ( 1 ) #NEWLINE#
ws [ 'A1' ] = 1 #NEWLINE#
ip = '192.168.1.1' #NEWLINE# print ( '.' . join ( [ bin ( int ( x ) + 256 ) [ 3 : ] for x in ip . split ( '.' ) ] ) ) #NEWLINE#
return a [ : i ] + MIDCHAR #NEWLINE#
savefig ( 'barchart.png' , dpi = 500 ) #NEWLINE#
some_jinja_template . render ( { 'list_of_emails' : emails } ) #NEWLINE#
return next ( self . iterator ) #NEWLINE#
f . close ( ) #NEWLINE#
batch . add ( service . files ( ) . delete ( fileId = file [ 'id' ] ) ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
for jsonline in f : #NEWLINE# #INDENT# yield json . loads ( jsonline ) #NEWLINE#
f = open ( filename , 'wb' ) #NEWLINE#
name = models . CharField ( max_length = 64 ) #NEWLINE#
print ( 'The#SPACE#average#SPACE#is#SPACE#{}' . format ( average ) ) #NEWLINE#
heap_sort ( ) #NEWLINE#
fv ( '1' , 'email-email' , 'blabla.com' ) #NEWLINE#
fv ( '1' , 'password-clear' , 'testpass' ) #NEWLINE#
for f in files : #NEWLINE# #INDENT# f . close ( ) #NEWLINE#
( 2 , 3 ) in iter_items #NEWLINE#
print ( 'Name' , link . text , 'URL' , link . get ( 'href' ) ) #NEWLINE#
array ( [ nan , nan , 9.0 , 14.0 , 16.0 , 14.0 , 16.0 , 14.0 , 19.0 , 15.0 ] ) #NEWLINE#
print ( list ( range ( maxend - maxrun + 1 , maxend + 1 ) ) ) #NEWLINE#
arrow . get ( s , 'YYYY/M/D#SPACE#HH:mm:ss' ) . replace ( tzinfo = dateutil . tz . gettz ( tz ) ) #NEWLINE#
np . random . seed ( 1977 ) #NEWLINE#
np . random . seed ( 462233 ) #NEWLINE#
a = np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( kwargs [ 'time_remaining' ] ) #NEWLINE#
gb [ 'C' ] . get_group ( 'foo' ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
XmlItemExporter ( file , 'data' , 'row' ) #NEWLINE#
reuests . post ( url , files = files ) #NEWLINE#
'elephant' , 'banana' , 'mouse' , 'mouse' , 'elephant' , 'ostrich' #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
self . widget . config ( state = 'normal' ) #NEWLINE#
struct . pack ( '40s' , str ( x ) ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
print ( 'Houston,#SPACE#we#SPACE#have#SPACE#a#SPACE#problem:#SPACE#{0}' . format ( e ) ) #NEWLINE#
de [ i ] . extend ( j ) #NEWLINE#
cv2 . imwrite ( 'tree_match.jpg' , image ) #NEWLINE#
d [ 'funcA' ] ( 1 , 2 , 3 ) #NEWLINE#
sphinx - apidoc - - help #NEWLINE#
print ( functools . reduce ( lambda x , y : x & y , [ a , b , c ] ) ) #NEWLINE#
print ( regex . sub ( '(?V1)[\\W--[-]]' , '#SPACE#' , 'black#white' ) ) #NEWLINE#
f ( * args , ** kwds ) #NEWLINE#
opener = urllib . request . build_opener ( ) #NEWLINE#
print ( line , end = '#SPACE#' ) #NEWLINE#
gc . collect ( ) #NEWLINE#
ssh . connect ( hostname = '...' , username = '...' , password = '...' ) #NEWLINE#
np . random . choice ( choices , 5 , p = counts / len ( a ) , replace = False ) #NEWLINE#
name = models . CharField ( max_length = 100 , verbose_name = 'some#SPACE#value' ) #NEWLINE#
root . title ( 'Simple#SPACE#MultiListbox#SPACE#demo' ) #NEWLINE#
print ( hashlib . sha1 ( bencode . bencode ( info ) ) . hexdigest ( ) ) #NEWLINE#
do_something ( line ) #NEWLINE#
"""ORDER_CREATED:#SPACE#%(PROPERTY_1)s#SPACE#-#SPACE#%(PROPERTY_2)s#SPACE#-#SPACE#%(PROPERTY_3)s#SPACE#-#SPACE#%(PROPERTY_4)s""" #NEWLINE#
uri = uri_for ( 'wiki-page' , page = 'my-first-page' , format = 'atom' ) #NEWLINE#
soup = BeautifulSoup ( '' . join ( html ) ) #NEWLINE#
self . stdin . flush ( ) #NEWLINE#
os . unlink ( filename ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 7 ] #NEWLINE#
pl . show ( ) #NEWLINE#
plt . xlim ( [ min ( data ) - 5 , max ( data ) + 5 ] ) #NEWLINE#
df . dropna ( subset = [ 'comments' ] ) #NEWLINE# df = df . dropna ( subset = [ 'comments' ] ) #NEWLINE#
admin . site . register ( Person , PersonAdmin ) #NEWLINE#
print ( [ x . split ( '.' ) [ - 2 ] for x in sites ] ) #NEWLINE#
main ( sys . argv ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
cur . executemany ( 'INSERT#SPACE#INTO#SPACE#Corpus#SPACE#(sid,#SPACE#scid,#SPACE#sent)#SPACE#VALUES#SPACE#(?,#SPACE#?,#SPACE#?);' , data ) #NEWLINE#
print ( content . index ( 'test' ) ) #NEWLINE#
{ x . split ( ':' ) [ 0 ] : x . split ( ':' ) [ 1 ] for x in a } #NEWLINE#
a [ 0 ] += 1 #NEWLINE#
list2 = [ 1 , 1 , 0 , 0 , 1 ] #NEWLINE#
conn = pymongo . MongoClient ( ) #NEWLINE#
super ( AB , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
{ { test [ 'this#SPACE#fails' ] } } #NEWLINE#
print ( re . sub ( '([\\.])([^\\s])' , '\\1#SPACE#\\2' , para ) ) #NEWLINE#
import winsound #NEWLINE# winsound . PlaySound ( 'sound.wav' , winsound . SND_FILENAME ) #NEWLINE#
return len ( nearbystrikes ) > 0 #NEWLINE#
df . loc [ ( idx [ : , ( 'a' , 'b' ) ] ) , : ] = df_ . values #NEWLINE#
1930697 , 2682695 , 3727593 , 5179474 , 7196856 #NEWLINE#
server . starttls ( ) #NEWLINE#
imshow ( 'quadrilateral' , transformed ) #NEWLINE#
import imp #NEWLINE# foo = imp . reload ( foo ) #NEWLINE#
apos += alo #NEWLINE#
s = smtplib . SMTP ( 'smtp.uk.xensource.com' ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE# np . random . normal ( 0 , 1 , ( 100 , 3 ) ) #NEWLINE#
return a , b #NEWLINE#
super ( ImageEx , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return pd . read_json ( json . dumps ( r ) ) . unstack ( ) #NEWLINE#
exec ( compile ( open ( 'someFile.py' ) . read ( ) , 'someFile.py' , 'exec' ) , variables ) #NEWLINE#
u . delete ( ) #NEWLINE#
transport = ssh_client . get_transport ( ) #NEWLINE#
strs = '#SPACE#' . join ( '{' + '{0}{1}' . format ( i , ':^2}' ) for i in range ( 7 ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
df [ 'foo' ] * df [ 'bar' ] #NEWLINE#
return '' . join ( self . fed ) #NEWLINE#
return time . mktime ( date . timetuple ( ) ) #NEWLINE#
return { 'length' : 0 , 'error' : e } #NEWLINE#
self . logger . info ( 'Hello' ) #NEWLINE#
suite = unittest . TestSuite ( ) #NEWLINE#
ax . plot ( x , counts , color = color , marker = marker , markersize = 10 , linestyle = 'none' ) #NEWLINE#
self . table . item ( 1 , 0 ) . setBackground ( QtGui . QColor ( 125 , 125 , 125 ) ) #NEWLINE#
fig = matplotlib . pyplot . figure ( ) #NEWLINE# fig . savefig ( 'myfig.png' , dpi = 600 ) #NEWLINE#
tk . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
self . file = self . sock . makefile ( 'rb' ) #NEWLINE#
print ( request . args . get ( 'change' ) ) #NEWLINE#
self . _send ( 'GET#SPACE#/#SPACE#HTTP/1.1\r\n' ) #NEWLINE#
setp ( ax2 . get_xticklabels ( ) , visible = False ) #NEWLINE#
mydict = { 'key1' : 1 , 'key2' : 2 , 'key3' : 3 } #NEWLINE# mylist = [ ( 1 , 'hello' ) , ( 2 , 'world' ) ] #NEWLINE# nested = { a : [ ( 1 , 'a' ) , ( 2 , 'b' ) ] , b : [ ( 3 , 'c' ) , ( 4 , 'd' ) ] } #NEWLINE#
d . apply ( pd . value_counts ) #NEWLINE#
list ( itertools . zip_longest ( * l , fillvalue = '' ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
subprofile = request . GET . get ( 'subprofile' , None ) #NEWLINE#
df [ 'date' ] = pd . DatetimeIndex ( df . date ) . normalize ( ) #NEWLINE#
{ k : v for k , v in zip ( list ( range ( 1 , 5 ) ) , list ( range ( 7 , 11 ) ) ) } #NEWLINE# { x : ( x + 6 ) for x in range ( 1 , 5 ) } #NEWLINE#
return { k : ( v [ 0 ] if len ( v ) == 1 else v ) for k , v in qdict . lists ( ) } #NEWLINE#
raise ValueError ( 'no#SPACE#valid#SPACE#date#SPACE#format#SPACE#found' ) #NEWLINE#
return np . where ( y == 0 , 0 , x / y ) #NEWLINE#
del list_2 [ int ( i ) ] #NEWLINE#
regex = '|' . join ( '\\b%s\\b' % state for state in states ) #NEWLINE#
plt . xticks ( np . arange ( 0 , 5 ) , [ 'A' , 'B' , 'C' , 'D' , 'E' ] ) #NEWLINE#
ax . set_xlabel ( 'X' ) #NEWLINE#
list1 = [ 'e1' , 'e2' , 'e3' , 'e4' , 'e5' , 'e6' , 'e7' ] #NEWLINE#
list1 = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
help ( window . set_position ) #NEWLINE#
[ 5 ] * 4 #NEWLINE#
context [ 'cart' ] = [ ] #NEWLINE#
m = [ i for i in l if i [ 0 ] == 'a' ] #NEWLINE#
re . findall ( '[^>]+>' , s ) #NEWLINE#
date ( today , 'F' ) #NEWLINE#
simulations_to_run . join ( ) #NEWLINE#
worker . run ( ** options ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . response . out . write ( '/static/unknown.gif' ) #NEWLINE#
parser . add_argument ( 'processes' , nargs = '*' ) #NEWLINE#
p = Process ( target = get_input , args = ( newstdin , ) ) #NEWLINE#
image = Image . new ( 'RGBA' , ( 600 , 150 ) , ( 255 , 255 , 255 ) ) #NEWLINE#
print ( msg . get_payload ( 2 ) ) #NEWLINE#
( 2 , 4 ) , ( 3 , 5 ) , ( 4 , 4 ) , ( 5 , 3 ) , ( 6 , 4 ) , ( 5 , 5 ) , ( 7 , 5 ) #NEWLINE#
s . connect ( ( TCP_IP , TCP_PORT ) ) #NEWLINE#
print ( df . head ( ) ) #NEWLINE#
df = pd . DataFrame ( ) #NEWLINE#
parseaddr ( '"Full#SPACE#Name#SPACE#with#SPACE#quotes#SPACE#and#SPACE#<weird@chars.com>"#SPACE#<weird@example.com>' ) #NEWLINE#
iren . Start ( ) #NEWLINE#
hwndEdit = win32gui . FindWindowEx ( hwndMain , hwndChild , 'Edit' , 'test#SPACE#-#SPACE#Notepad' ) #NEWLINE#
reader = csv . reader ( open ( 'input.csv' ) , delimiter = ';' ) #NEWLINE#
s . starttls ( ) #NEWLINE#
print ( 'sum#SPACE#of#SPACE#{0}#SPACE#and#SPACE#{1}#SPACE#is#SPACE#{2}' . format ( a , b , c ) ) #NEWLINE#
self . driver = webdriver . Firefox ( ) #NEWLINE#
from scipy . stats import norm #NEWLINE#
warnings . simplefilter ( 'error' ) #NEWLINE#
d1 . update ( d2 ) #NEWLINE#
print ( '%6e' % i ) #NEWLINE#
x = np . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE#
cur1 . callproc ( 'reffunc' , [ 'curname' ] ) #NEWLINE#
ranges . append ( ( 1 , 10 ) ) #NEWLINE#
4.0 * scipy . integrate . nquad ( f , ( [ 0 , d / 2 ] , [ 0 , d / 2 ] ) ) [ 0 ] #NEWLINE#
with open ( 'output.txt' , 'w+' ) as output : #NEWLINE# #INDENT# subprocess . call ( [ 'python' , './script.py' ] , stdout = output ) #NEWLINE#
outFile . close ( ) #NEWLINE#
myDictionary . get ( key ) #NEWLINE#
[ 1 , 2 , 5 , 6 , 7 , 10 ] #NEWLINE#
return json . JSONEncoder . default ( self , obj ) #NEWLINE#
gnuplot . stdin . write ( '%f#SPACE#%f\n' % ( i , j ) ) #NEWLINE#
p = pyaudio . PyAudio ( ) #NEWLINE#
ax . set_xlim ( [ - 2 , 2 ] ) #NEWLINE#
( 'left' , 'TIMES' , 'DIVIDE' ) , #NEWLINE#
t . start ( ) #NEWLINE#
dispatch_dict [ 'Foo' ] ( ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
cheese = args . three #NEWLINE#
matplotlib . use ( 'gtkagg' ) #NEWLINE#
np . argsort ( x ) #NEWLINE#
os . setsid ( ) #NEWLINE#
return query_set . filter ( deleted_at__isnull = True ) #NEWLINE#
for line in reversed ( open ( 'filename' ) . readlines ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
getattr ( c , m ) ( ) #NEWLINE#
seen . add ( x ) #NEWLINE#
return '_' . join ( [ tok . orth_ , tok . tag_ ] ) #NEWLINE#
f = x . decl ( ) #NEWLINE#
os . chmod ( 'file_path_name' , stat . S_IWRITE ) #NEWLINE#
re . findall ( '(?=(\\d+(?:\\.\\d+)?))\\d+(?:\\.\\d+(?!\\.?\\d))?' , i ) #NEWLINE#
df [ 'count_max' ] = df . groupby ( [ 'Mt' ] ) [ 'count' ] . transform ( max ) #NEWLINE#
gulp . watch ( '**/templates/**' ) . on ( 'change' , livereload . changed ) #NEWLINE#
numpy . random . bytes ( length ) #NEWLINE#
mode ( [ 1 , 2 , 2 , - 3 , - 3 , 4 , 5 ] ) #NEWLINE#
label . pack ( ) #NEWLINE#
{ 'c' : [ ] } #NEWLINE#
a *= a > 0 #NEWLINE#
tree = lxml . etree . fromstring ( doc ) #NEWLINE#
"""some_param_name#SPACE#must#SPACE#be#SPACE#an#SPACE#instance#SPACE#of#SPACE#SomeClassName,#SPACE#silly#SPACE#goose!""" #NEWLINE#
cache . delete ( 'settings' ) #NEWLINE#
loop . run_forever ( ) #NEWLINE#
grouped = df . groupby ( 'UsrId' ) #NEWLINE#
print ( len ( lines ) ) #NEWLINE#
pass #NEWLINE#
df [ 'color_code' ] = np . where ( df [ 'isfixed' ] , 'Blue' , 'Green' ) #NEWLINE#
app . config [ 'SECRET_KEY' ] = 'super-secret' #NEWLINE#
app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite://' #NEWLINE#
kmdistance = float ( kmdistance ) #NEWLINE#
sent = [ 'this' , 'is' , 'a' , 'foo' , 'bar' ] #NEWLINE#
bitmap = gtk . gdk . Pixmap ( win . window , size [ 0 ] , size [ 1 ] , 1 ) #NEWLINE#
ax . plot ( x , y , 'go-' ) #NEWLINE#
"""""" . join ( [ 'a' , 'b' , 'b' ] ) #NEWLINE#
pyplot . plot ( x , y ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
dir = os . path . dirname ( os . path . dirname ( file ) ) #NEWLINE#
self . transport . loseConnection ( ) #NEWLINE#
connection . close ( ) #NEWLINE#
cherrypy . response . headers [ 'Content-Disposition' #NEWLINE# ] = 'attachment;#SPACE#filename="file.png"' #NEWLINE#
[ 12684384 , 12684384 , 12684384 ] #NEWLINE#
mail . sendmail ( EMAIL_FROM , EMAIL_TO , msg . as_string ( ) ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
zf . writepy ( 'pychess' ) #NEWLINE#
fruit = [ df . columns [ row . astype ( bool ) ] . tolist ( ) for row in df . values ] #NEWLINE# pprint . pprint ( fruit ) #NEWLINE#
DF . cumsum ( ) #NEWLINE#
data_2010 . groupby ( 'category' ) . agg ( [ len , sum ] ) #NEWLINE#
thirdpartymodule_b . dosomething ( ) #NEWLINE#
'GAGAGAGAC' , 'GAGAGAGACA' , 'GAGAGAGACAU' , 'GAGAGAGACAUA' #NEWLINE#
TIME_ZONE = 'UTC' #NEWLINE#
list ( le . inverse_transform ( [ 2 , 2 , 1 ] ) ) #NEWLINE#
raise TypeError ( "type#SPACE#%.100s#SPACE#doesn't#SPACE#define#SPACE#__round__#SPACE#method" ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
print ( 'Hello#SPACE#from#SPACE#task1({0})' . format ( arg ) ) #NEWLINE#
print ( 'Bonjour#SPACE#from#SPACE#task2({0})' . format ( arg ) ) #NEWLINE#
'__str__' , '__subclasshook__' , '__weakref__' , '_name' , '_open' #NEWLINE#
roc_curve ( y_true , y_score ) #NEWLINE#
super ( Asset , self ) . save ( * args , ** kwargs ) #NEWLINE#
print ( ascii_num [ : : - 1 ] ) #NEWLINE#
print ( clean_types ( [ 3 , 'abc' , 'def' , date . today ( ) , datetime . now ( ) ] ) ) #NEWLINE#
return MDD_start , MDD_end , MDD_duration , drawdown , UW_dt , UW_duration #NEWLINE#
default_app_config = 'yourapp.apps.YourAppConfig' #NEWLINE#
print ( [ ( r / s ) for s in [ psum ( raw ) ] for r in raw ] ) #NEWLINE#
myFile . write ( struct . pack ( 'i' , x ) ) #NEWLINE#
setattr ( request , '_dont_enforce_csrf_checks' , True ) #NEWLINE#
layout . addWidget ( self . toolbar ) #NEWLINE#
return { 'my_big_dict' : { 'foo' : 'bar' } } #NEWLINE#
p = subprocess . Popen ( args , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) #NEWLINE#
df . AVG_GRADE = df [ [ 'HOUR' , 'AVG_GRADE' ] ] . values . tolist ( ) #NEWLINE#
zip ( cv . get_feature_names ( ) , np . asarray ( X . sum ( axis = 0 ) ) . ravel ( ) ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
db_table = 'legacy_series' #NEWLINE#
{ x : ( 0 ) for x in alphabet } #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
execute ( 'task1' ) #NEWLINE#
data = np . random . normal ( size = 1000 ) #NEWLINE#
df = pd . read_csv ( io . StringIO ( data ) ) #NEWLINE#
n_grams = CountVectorizer ( min_n = 1 , max_n = 5 ) #NEWLINE#
browser . open ( '/admin/discounts' , urllib . parse . urlencode ( pulled_params ) ) #NEWLINE#
curs . execute ( 'select#SPACE#*#SPACE#from#SPACE#people' ) #NEWLINE#
dfcopy . a . ix [ 0 ] = 2 #NEWLINE#
subprocess . call ( args ) #NEWLINE#
round ( 2.605 , 2 ) #NEWLINE#
round ( 2.067 , 2 ) #NEWLINE#
signal . signal ( signal . SIGALRM , handler ) #NEWLINE#
file . seek ( lastKnownSizeOfFile ) #NEWLINE#
<STR0> = threadlocals . get_current_user #NEWLINE#
[ './list_argv.py' , 'hey' , 'yo' ] #NEWLINE#
codecs . open ( file , 'r' , 'utf8' ) . readlines ( ) #NEWLINE#
Base2 . bar ( ) #NEWLINE#
res . read ( ) #NEWLINE#
self . root . bind ( '<Down>' , self . ship . accel ) #NEWLINE#
member = getattr ( module , membername ) #NEWLINE#
str . split ( sep = '&' , maxsplit = 8 ) #NEWLINE#
print ( list ( filter ( len , a ) ) ) #NEWLINE#
gettext . bindtextdomain ( 'myapp' , 'locale' ) #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE#
plt . bar ( x2 , y ) #NEWLINE#
print ( [ ( 2 ** ( ( N - abs ( N - k ) ) % N ) ) for k in range ( 2 * N + 1 ) ] ) #NEWLINE#
self . label = tk . Label ( text = '' ) #NEWLINE#
print ( unpack ( '<Id' , swapped ) ) #NEWLINE#
d . apply ( pd . value_counts ) . plot ( kind = 'bar' , subplots = True ) #NEWLINE#
unicodedata . name ( '\ua62c' ) #NEWLINE#
srf = pygame . display . set_mode ( ( 640 , 480 ) ) #NEWLINE#
decompressed_data = zlib . decompress ( f . read ( ) , 16 + zlib . MAX_WBITS ) #NEWLINE#
print ( f ( 3 ) ) #NEWLINE#
[ [ 1 , 3 , 7 , 8 , 9 ] ] #NEWLINE#
ax2 . plot ( list ( range ( 10 , 20 ) ) ) #NEWLINE#
print ( PATTERN . split ( data ) [ 1 : : 2 ] ) #NEWLINE#
saver . save ( sess , 'my-new-model' ) #NEWLINE#
print ( solution ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) ) #NEWLINE#
s . send ( command ) #NEWLINE#
return X [ : : - 1 , : : - 1 , : : - 1 ] #NEWLINE#
val16 = ( val + 32768 & 65535 ) - 32768 #NEWLINE#
fout . write ( regex . sub ( replfunc , line ) ) #NEWLINE#
mutable_query_dict . update ( dict . fromkeys ( [ 'spam' , 'spam' , 'potato' ] ) ) #NEWLINE#
print ( tuple ( l ) ) #NEWLINE#
df1 . join ( df2 ) #NEWLINE#
object_id = models . PositiveIntegerField ( ) #NEWLINE#
X = X . reindex ( np . roll ( X . index , 1 ) ) #NEWLINE#
x = a if b else 0 #NEWLINE#
img = plt . imread ( filename ) #NEWLINE#
request . add_data ( urllib . parse . urlencode ( [ ( 'arg1' , 'val1' ) , ( 'arg1' , 'val1' ) ] ) ) #NEWLINE#
raise ValueError ( '403' ) #NEWLINE#
dis . dis ( compile ( '(a,b,c)=(1,2,3)' , '' , 'exec' ) ) #NEWLINE#
plt . xscale ( 'log' ) #NEWLINE#
ax . legend ( ) #NEWLINE#
sorted ( y , key = x . __getitem__ ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
root = Tk ( ) #NEWLINE#
c . setopt ( c . URL , url ) #NEWLINE#
df = df . loc [ ( df [ col ] . isin ( counts [ counts > threshold ] . index ) ) , : ] #NEWLINE#
s = f . read ( ) #NEWLINE#
s = [ '1' , '2' , '3.4' , '5.6' , '7.8' ] #NEWLINE# [ ( float ( i ) if '.' in i else int ( i ) ) for i in s ] #NEWLINE#
print ( 'DF' , type ( df [ 'one' ] ) , '\n' , df [ 'one' ] ) #NEWLINE#
y = np . arange ( Y ) #NEWLINE#
print ( i , j , k ) #NEWLINE#
df #NEWLINE# { k : list ( v ) for k , v in df . groupby ( 'Address' ) [ 'ID' ] } #NEWLINE#
table . sort ( reverse = True , key = Team . getPoints ) #NEWLINE#
result . append ( list ( g ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'application/zip' #NEWLINE#
logger . removeFilter ( dup_filter ) #NEWLINE#
list_of_lists = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
p . savefig ( 'grayed.pdf' , papertype = 'a4' , orientation = 'portrait' ) #NEWLINE#
print ( 'world' ) #NEWLINE#
g = data . groupby ( 'tag' ) #NEWLINE# g . filter ( lambda x : len ( x ) > 1 ) #NEWLINE#
win . show_all ( ) #NEWLINE# gtk . main ( ) #NEWLINE#
plt . xlabel ( 'X' ) #NEWLINE#
plt . xlabel ( 'Y' ) #NEWLINE#
'xyz/bar' . format ( Pluralizer ( 2 ) ) == 'xyzbar' #NEWLINE#
pylab . xticks ( [ 2 , 3 , 4 ] , [ 'a' , 'b' , 'c' ] ) #NEWLINE#
return 'Hello,#SPACE#world!#SPACE#running#SPACE#on#SPACE#%s' % request . host #NEWLINE#
return UserInfo ( id = user_id , name = 'Adam#SPACE#Smith' ) #NEWLINE#
print ( get_image_info ( data ) ) #NEWLINE#
plt . ylim ( 0 , 40000 ) #NEWLINE#
df [ 'time' ] = [ time . strftime ( format = '%Y-%m-%d#SPACE#%H:%M:%S%z' ) for time in times ] #NEWLINE#
thread = threading . Thread ( target = server . serve_forever ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
text = 'a,b,c' #NEWLINE# text = eval ( '[' + text + ']' ) #NEWLINE#
return sps . csr_matrix ( ( new_data , new_cols , new_pointer ) , shape = sps_mat . shape ) #NEWLINE#
print ( resp . url ) #NEWLINE#
setattr ( self , key , getattr ( base , key ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
datetime . fromtimestamp ( 1172969203.1 ) #NEWLINE#
numpy . apply_along_axis ( lambda args : [ complex ( * args ) ] , 3 , Data ) #NEWLINE#
conn = boto . connect_dynamodb ( ) #NEWLINE#
[ [ 7 , 8 , 9 , 10 ] , [ 0 , 1 , 2 , 3 , 4 , 5 ] ] #NEWLINE#
demonym_dict = { 'USA' : 'American' , 'Russia' : 'Russian' , 'Japan' : 'Japanese' } #NEWLINE#
s [ 0 ] #NEWLINE#
df = pd . DataFrame ( [ { 'a' : 'ac' , 'b' : 'dc' } , { 'a' : 'ddd' , 'b' : 'fdf' } ] ) #NEWLINE#
xy_list = map ( list , xy_list ) #NEWLINE#
hllApi ( ctypes . byref ( p1 ) , p2 , ctypes . byref ( p3 ) , ctypes . byref ( p4 ) ) #NEWLINE#
QApplication . __init__ ( self , * args ) #NEWLINE#
plt . plot ( x , y , 'bo' , label = 'Data' ) #NEWLINE#
module = imp . new_module ( name ) #NEWLINE#
print ( key , value ) #NEWLINE#
df = pd . DataFrame ( a . T ) #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
tree = etree . parse ( 'some_file.xml' ) #NEWLINE# etree_to_dict ( tree . getroot ( ) ) #NEWLINE#
argrelextrema ( x , np . less ) #NEWLINE#
ax = fig . add_subplot ( 121 ) #NEWLINE#
assert not isidentifier ( 'foo#SPACE#' ) #NEWLINE#
assert not isidentifier ( '#SPACE#foo' ) #NEWLINE#
assert not isidentifier ( '1234' ) #NEWLINE#
assert not isidentifier ( '1234abc' ) #NEWLINE#
assert not isidentifier ( '' ) #NEWLINE#
assert not isidentifier ( '#SPACE##SPACE##SPACE#' ) #NEWLINE#
assert not isidentifier ( 'foo#SPACE#bar' ) #NEWLINE#
assert not isidentifier ( 'no-dashed-names-for-you' ) #NEWLINE#
rand_stocks = np . random . randint ( 0 , len ( data ) , size = batch_size ) #NEWLINE#
self . assertEqual ( 404 , response . status_code ) #NEWLINE#
plt . draw ( ) #NEWLINE#
self . myParent . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# unittest . main ( argv = [ sys . argv [ 0 ] ] ) #NEWLINE#
plt . title ( 'Title#SPACE#here!' , color = 'black' ) #NEWLINE#
tuples = list ( d . values ( ) ) #NEWLINE#
kivy . require ( '1.9.0' ) #NEWLINE#
pd . options . display . mpl_style = 'default' #NEWLINE#
result = re . search ( 'asdf=5;(.*)123jasd' , s ) #NEWLINE#
m . mymethod ( ) #NEWLINE#
Cal2 = sum ( n for n in domain if n % 2 == 0 ) #NEWLINE#
[ 'file' , 'file3' ] #NEWLINE#
harmonic_number = lambda n : sum ( Fraction ( 1 , d ) for d in range ( 1 , n + 1 ) ) #NEWLINE#
stdscr . refresh ( ) #NEWLINE#
os . sytsem ( '<command#SPACE#to#SPACE#run#SPACE#the#SPACE#process>' ) #NEWLINE#
df . groupby ( df [ 'Features' ] & frozenset ( { 1 , 40020 } ) , sort = False ) . sum ( ) #NEWLINE#
[ 1 , 2 ] [ : : - 1 ] #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
list ( OrderedDict . fromkeys ( items ) ) #NEWLINE#
list_words = [ fs . format ( a ) for x in l for a in x . split ( ) ] #NEWLINE#
ell . set_facecolor ( 'none' ) #NEWLINE#
"""{0}:<15}}{1}:<15}}{2}:<8}}""" . format ( '1' , '2' , '3' ) #NEWLINE#
raise forms . ValidationError ( 'Sorry,#SPACE#that#SPACE#course#SPACE#id#SPACE#is#SPACE#not#SPACE#valid.' ) #NEWLINE#
global earth #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
l = [ 1 , 3 , 7 , 2 , 6 , 8 , 10 ] #NEWLINE# sum ( 1 for i in l if i % 4 == 3 ) #NEWLINE#
random . seed ( 42 ) #NEWLINE#
{ 'tags' : [ 'mongodb' ] , 'title' : 'Loving#SPACE#Mongo' } #NEWLINE#
list_of_pairs = [ ( p1 , p2 ) for p1 in people for p2 in people if p1 != p2 ] #NEWLINE#
vars . put ( 'ID' , response . toString ( ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
image1 = Image . new ( 'RGB' , ( width , height ) , white ) #NEWLINE#
a , b = 'DEFAULT_LENGTH' . partition ( '=' ) [ : : 2 ] #NEWLINE#
li = [ id_s [ c ] for c in list ] #NEWLINE#
config [ 'DEFAULT' ] [ 'default_message' ] = 'Hey!#SPACE#help#SPACE#me!!' #NEWLINE#
Y_modified = np . where ( variance > 0.5 * np . max ( variance ) , Y , 0 ) #NEWLINE#
plt . bar ( df . index . to_pydatetime ( ) , df . Val , width = 0.4 ) #NEWLINE#
self . user . save ( ) #NEWLINE#
pad . refresh ( top , 0 , 0 , 0 , curses . LINES - 1 , curses . COLS - 1 ) #NEWLINE#
worker_function ( ** args ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
dict . __setitem__ ( self , key , value ) #NEWLINE#
c = re . compile ( '(?P<%s>%s)' % ( fname , f . __doc__ ) , re . VERBOSE | self . reflags ) #NEWLINE#
file = open ( '<FILENAME>.txt' , 'w' ) #NEWLINE# file . write ( 'first#SPACE#line\n' ) #NEWLINE# file . write ( 'second#SPACE#line\n' ) #NEWLINE# file . close ( ) #NEWLINE#
[ ( sum ( values ) / float ( len ( my_list ) ) ) for values in zip ( * [ my_dict [ key ] for #NEWLINE# key in my_list ] ) ] #NEWLINE#
os . makedirs ( directory_name ) #NEWLINE#
new_a = a [ ( a <= 100 ) . all ( 1 ) ] #NEWLINE#
print ( 'Got#SPACE#a#SPACE#multimedia#SPACE#key...' ) #NEWLINE#
ax . set_ylim ( 0 , 5 ) #NEWLINE#
p . saveimage ( '/tmp/plot.png' , format = 'png' ) #NEWLINE#
super ( BookForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
a = [ a . ix [ i ] for i in a . index if sorted1 [ i ] < sorted2 [ i ] ] #NEWLINE# b = [ a . ix [ i ] for i in a . index if sorted1 [ i ] >= sorted2 [ i ] ] #NEWLINE#
sys . path . insert ( 0 , 'c:/dev/Mercurial/lib' ) #NEWLINE#
words = [ 'cat' , 'dog' , 'tack' , 'coat' ] #NEWLINE#
return [ str ( v ) for v in obj . attrs . all ( ) ] #NEWLINE#
'xyz' . format ( Pluralizer ( 1 ) ) == 'xyz' #NEWLINE#
c = copy . deepcopy ( a ) #NEWLINE#
"""Hello#SPACE#world!""" #NEWLINE#
mlab . myFunction ( 'testadaptor' , './' , 'image.png' ) #NEWLINE#
color = '#DD3044' #NEWLINE#
namestr ( a , globals ( ) ) #NEWLINE#
df [ df . a < np . percentile ( df . a , 95 ) ] #NEWLINE#
sns . regplot ( x = idx , y = df [ 'x' ] , ax = ax1 ) #NEWLINE#
func ( b ) #NEWLINE#
[ [ 'bar' , 0 , 'b' ] , [ 'quux' , 1 , 'a' ] ] #NEWLINE#
self . frame = tk . Frame ( self . canvas , background = '#ffffff' ) #NEWLINE#
np . linalg . norm ( coef , axis = 0 ) #NEWLINE#
open_file . close ( ) #NEWLINE#
inspect . getargspec ( foo ) . args #NEWLINE#
measurement = np . array ( [ 1 , 2 , 3 , 4 , 5 , 5 , 6 , 7 , 8 , 5 , 4 , 5 ] ) #NEWLINE#
{ 'foo' , 'bar' , 'baz' } <= list ( dct . keys ( ) ) #NEWLINE#
doit ( 'one' ) #NEWLINE#
L3 = sorted ( map ( int , L1 ) ) #NEWLINE#
tar = tarfile . open ( 'example.tar.gz' , 'w:gz' ) #NEWLINE#
for i in hello : #NEWLINE# #INDENT# j = i . replace ( '#SPACE#' , '' ) #NEWLINE# k . append ( j ) #NEWLINE#
raise RuntimeError ( 'An#SPACE#exception#SPACE#was#SPACE#raised.' ) #NEWLINE#
pprint . pprint ( arr ) #NEWLINE#
[ [ 1 , 3 , 7 ] , [ 8 ] , [ 9 ] ] #NEWLINE#
print ( 'done' ) #NEWLINE#
yield Request ( link , callback = lambda r : self . parse2 ( r , i ) ) #NEWLINE#
z . update ( { key : value } ) #NEWLINE#
all_pairs += [ ( ( nB , 1 ) , ( nC , 2 ) ) for nB , nC in itertools . product ( listB , listC ) ] #NEWLINE#
print ( 'last#SPACE#changed#SPACE#=>#SPACE#{}' . format ( time . ctime ( st [ stat . ST_CTIME ] ) ) ) #NEWLINE#
f = open ( 'big#SPACE#text#SPACE#file.txt' , 'r' ) #NEWLINE#
return ( data [ index ] for index in indices [ field ] [ key ] ) #NEWLINE#
result . _fields #NEWLINE#
lens [ clno ] += 1 #NEWLINE#
print ( 'bad#SPACE#arg' ) #NEWLINE#
JSON . parse ( '{"background":#SPACE#"black"}' ) #NEWLINE#
print ( '' . join ( res ) ) #NEWLINE#
df = pandas . DataFrame ( data ) #NEWLINE#
print ( np . corrcoef ( x_tag [ 0 : len ( x_tag ) - 1 ] , x_tag [ 1 : ] ) [ 0 ] [ 1 ] ) #NEWLINE#
df [ 'date' ] = pd . to_datetime ( [ '21-11-2013' , '22-11-2013' ] ) #NEWLINE#
data = np . array ( data ) #NEWLINE# out = [ np . sum ( data [ c ] ) for c in contribs ] #NEWLINE#
df [ 'bar' ] . iloc [ 0 ] = 99 #NEWLINE#
df . apply ( make_plot ) #NEWLINE#
print ( 'At#SPACE#the#SPACE#bottom#SPACE#i#SPACE#is#SPACE#%d' % i ) #NEWLINE#
'ls' , 'linewidth' , 'agg_filter' , 'ec' , 'facecolor' , 'fc' #NEWLINE#
[ '34' , '12' ] #NEWLINE#
return ( i . bit_length ( ) + 7 ) // 8 #NEWLINE#

print ( os . path . expanduser ( '~' ) ) #NEWLINE#
s = '平成15' #NEWLINE# with open ( 'yop' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( s . encode ( 'UTF-8' ) ) #NEWLINE#
ordered = list ( list_dict [ val ] for val in ordering_list ) #NEWLINE#
print ( df5 . groupby ( level = 0 ) . apply ( process ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
im = Image . open ( 'image.jpg' ) #NEWLINE#
t = [ ( ( 'd' , 0 ) , ( 'g' , 0 ) ) , ( ( 'd' , 0 ) , ( 'd' , 1 ) ) , ( ( 'i' , 0 ) , ( 'g' , 0 ) ) ] #NEWLINE# print ( [ tuple ( ( a , b + 1 ) for a , b in group ) for group in t ] ) #NEWLINE#
df . groupby ( 'Arena' ) . delta . sum ( ) #NEWLINE#
a [ ( [ 0 , 1 , 3 ] ) , : : 2 ] #NEWLINE#
return urlparse . urljoin ( 'file:' , urllib . request . pathname2url ( path ) ) #NEWLINE#
"""1,2,hello""" #NEWLINE#
parser . add_argument ( '--foo' ) #NEWLINE#
logger . info ( 'hello#SPACE#mylogger' ) #NEWLINE#
return { 'a' : 1 , 'b' : 2 } . get ( x , 9 ) #NEWLINE#
ax . set_xscale ( 'log' , basex = 2 ) #NEWLINE#
pd . set_option ( 'display.float_format' , lambda x : '%.3f' % x ) #NEWLINE#
self . show ( ) #NEWLINE#
np . sum ( xs . data , axis = 1 ) #NEWLINE#
cPickle . dump ( ca . params , f , protocol = cPickle . HIGHEST_PROTOCOL ) #NEWLINE#
print ( '' . join ( result ) ) #NEWLINE#
'A7' , 'B7' , 'C7' , 'D7' , 'A8' , 'B8' , 'C8' , 'D8' , 'A9' , 'B9' , 'C9' , 'D9' #NEWLINE#
"""0x{:02x}""" . format ( 131 ) #NEWLINE#
form . initial [ 'user' ] = user . pk #NEWLINE#
a = np . loadtxt ( skipper ( 'your_file' ) , delimiter = ',' ) #NEWLINE#
RX = re . compile ( '([\\`*_{}[]()>#+-.!$])' ) #NEWLINE#
np . argwhere ( np . in1d ( a , np . intersect1d ( a , b ) ) == False ) #NEWLINE#
scopes = set ( ) #NEWLINE#
get_max ( my_list ) #NEWLINE#
plt . gcf ( ) . gca ( ) . add_artist ( circle1 ) #NEWLINE#
cursor . execute ( query , [ id ] ) #NEWLINE#
a = array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
p2 = Popen ( [ 'grep' , 'hda' ] , stdin = p1 . stdout , stdout = PIPE ) #NEWLINE#
newlist = old_list . copy ( ) #NEWLINE#
groups . append ( group ) #NEWLINE#
imshow ( A ) #NEWLINE#
ax1 . set_xlim ( 0 , 1000.0 ) #NEWLINE#
times = numpy . array ( [ datetime . timedelta ( 0 , 1 , 36000 ) ] ) #NEWLINE#
import numpy as np #NEWLINE#
raise Exception ( 'I#SPACE#found#SPACE#no#SPACE#duration' ) #NEWLINE#
matrix [ ~ mask ] = 0 #NEWLINE#
random . choice ( 'hello#SPACE#world' . split ( ) ) #NEWLINE#
parent2 . add_argument ( '--config' ) #NEWLINE#
ax . w_zaxis . set_major_locator ( LinearLocator ( 10 ) ) #NEWLINE#
a = struct . unpack ( '!I' , socket . inet_aton ( '192.0.43.10' ) ) [ 0 ] #NEWLINE#
self . SetSizer ( self . sizer ) #NEWLINE#
df [ 'size' ] . loc [ df . groupby ( 'adult' ) [ 'weight' ] . transform ( 'idxmax' ) ] . values #NEWLINE#
zfile . close ( ) #NEWLINE#
[ match . group ( 2 ) for match in re . finditer ( '(\\D|^)(\\d{5})(\\D|$)' , '12345abc' ) ] #NEWLINE#
Observation = namedtuple ( 'Observation' , 'dec#SPACE#ra#SPACE#other' ) #NEWLINE#
btn = QPushButton ( 'To#SPACE#be#SPACE#removed' ) #NEWLINE#
[ ( id ( x ) == id ( y ) ) for x , y in zip ( lis , new_lis1 ) ] #NEWLINE#
plt . ylim ( ymin , ymax ) #NEWLINE#
<VAR0> ( map ( '' . join , zip ( * ( [ iter ( s ) ] * 2 ) ) ) ) #NEWLINE#
s += etree . tostring ( sub_element ) #NEWLINE#
df = df . unstack ( ) . cumsum ( ) . fillna ( method = 'ffill' ) #NEWLINE#
pil_im = Image . open ( 'data/empire.jpg' , 'r' ) #NEWLINE#
ax . spines [ side ] . set_visible ( False ) #NEWLINE#
func ( [ 'abc' , '123' ] ) #NEWLINE#
df = pd . melt ( df , id_vars = [ 'Date' ] ) #NEWLINE#
writer . writerows ( row [ : 1 ] + [ 0.0 ] + row [ 1 : ] for row in reader ) #NEWLINE#
ax . grid ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( soup . p ) #NEWLINE#
with open ( 'yourfile.txt' ) as f : #NEWLINE# #INDENT# your_list = f . read ( ) . split ( ) #NEWLINE#
{ 'one' : 'remains' } #NEWLINE#
new_list . append ( l1 [ index ] + l2 [ index ] ) #NEWLINE#
exec ( compile ( open ( 'myfile.py' ) . read ( ) , 'myfile.py' , 'exec' ) ) #NEWLINE#
print ( 'I#SPACE#am#SPACE#being#SPACE#imported' ) #NEWLINE#
[ name for _ , name , _ in pkgutil . iter_modules ( [ 'testpkg' ] ) ] #NEWLINE#
cv2 . imshow ( 'frame' , frame ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
bar ( 'A' , 'B' , 'D' , 'E' ) #NEWLINE#
p1 . stdout . close ( ) #NEWLINE#
app = wx . App ( redirect = True ) #NEWLINE# app = wx . App ( redirect = True , filename = 'mylogfile.txt' ) #NEWLINE#
dilation . process ( tree . clone ( ) , tree ) #NEWLINE#
f ( 1 ) #NEWLINE#
aList . sort ( key = lambda x : ( x [ idx ] for idx in args ) ) #NEWLINE#
Counter ( string ) #NEWLINE#
numpy . vectorize ( complex ) ( Data [ ... , 0 ] , Data [ ... , 1 ] ) #NEWLINE#
port = int ( port ) #NEWLINE#
print ( 'Press#SPACE#Ctrl+C' ) #NEWLINE#
return render_template ( 'template.html' , filename = filename ) #NEWLINE#
type ( data ) #NEWLINE#
plt . draw ( ) #NEWLINE#
output = subprocess . check_output ( ( 'grep' , 'process_name' ) , stdin = ps . stdout ) #NEWLINE#
import summarize #NEWLINE#
root = ET . fromstring ( xmlstr ) #NEWLINE#
ax . set_xticks ( every30 ) #NEWLINE#
cfs = floating_bond . cashflows ( ) #NEWLINE#
print ( strftime ( '%z' , gmtime ( ) ) ) #NEWLINE#
random . sample ( list ( enumerate ( l ) ) , 5 ) #NEWLINE#
print ( df ) #NEWLINE#
stupidtrick ( ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
return 1 / ( 1 + math . exp ( - x ) ) #NEWLINE#
plot ( A_r [ i : i + 1000 ] , B_r [ i : i + 1000 ] , 'b.' ) #NEWLINE#
db . create_tables ( [ ModelA , ModelB , ModelC ] ) #NEWLINE#
imshow ( cm . hsv ( Z1 ) , alpha = 0.6 , extent = extent ) #NEWLINE#
model = Sequential ( ) #NEWLINE#
print ( 'hello#SPACE#world#SPACE#!' ) #NEWLINE#
cur . executemany ( 'INSERT#SPACE#INTO#SPACE#%s#SPACE#VALUES(%s)' % ( table_name , wildcards ) , data ) #NEWLINE#
locate ( 'int' ) #NEWLINE#
Decimal ( '3.0' ) #NEWLINE#
c_dict = { k : pd . DataFrame ( v ) for k , v in groups . groups . items ( ) } #NEWLINE#
a . put ( ( 3 , 'c' ) ) #NEWLINE#
myDB . connect ( ) #NEWLINE#
np . array ( zip ( * [ islice ( A , i , None ) for i in range ( n ) ] ) ) #NEWLINE#
plt . imshow ( heatmap . T , extent = extent , origin = 'lower' ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
"""This#SPACE#text#SPACE#contains#SPACE#some#SPACE#profane#SPACE#words#SPACE#like#SPACE#spam#SPACE#and#SPACE#eggs.#SPACE#But#SPACE#it#SPACE#wont#SPACE#match#SPACE#spammy#SPACE#stuff.""" #NEWLINE#
d [ re . compile ( 'a.*' ) ] #NEWLINE#
all ( [ 0 , 1 ] ) #NEWLINE#
[ s [ 5 * i : 5 * i + 5 ] for i in range ( 0 , math . ceil ( len ( s ) / 5 ) ) ] #NEWLINE#
df [ 'A' + col ] = df [ 'A' ] . apply ( lambda x : x [ n ] ) #NEWLINE#
purple = dbus . Interface ( obj , 'im.pidgin.purple.PurpleInterface' ) #NEWLINE#
"""/abcdefghijklmnopqrstuvwxyz-ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789.""" #NEWLINE#
x = [ n . strip ( ) for n in x ] #NEWLINE#
return a . A ( ) #NEWLINE#
axins1 . set_xlim ( x1 , x2 ) #NEWLINE#
socket . setdefaulttimeout ( ) #NEWLINE#
request . add_header ( 'Cache-Control' , 'max-age=0' ) #NEWLINE#
audio /= np . max ( np . abs ( audio ) , axis = 0 ) #NEWLINE#
map ( str , lst ) #NEWLINE#
plt . subplots_adjust ( bottom = 0.15 ) #NEWLINE#
result = sum ( range ( 1 , 401 , 4 ) ) #NEWLINE#
text_entry . pack ( ) #NEWLINE#
A [ : ] = somedata [ : ] #NEWLINE#
created_by = models . ForeignKey ( profile ) #NEWLINE#
print ( 'No#SPACE#clients.#SPACE#Sleeping...' ) #NEWLINE#
print ( 'Waiting#SPACE#for#SPACE#server#SPACE#to#SPACE#start...' ) #NEWLINE#
self . webview . loadUrl ( 'www.google.com' ) #NEWLINE#
results . append ( ( a [ first ] [ 0 ] , a [ second ] [ 0 ] , a [ third ] [ 0 ] ) ) #NEWLINE#
return render_template ( request , 'passwordReset/forgot_password.html' , context ) #NEWLINE#
"""(\\d{4}-\\d{2}-\\d{2}#SPACE#\\d{2}:\\d{2}:\\d{2}).*?succ.#SPACE#statistics\\s+\\|\\s+(\\d+)\\s+(\\d+)""" #NEWLINE#
self . builds = builds #NEWLINE#
print ( 'test' ) #NEWLINE#
list ( get_truthy_ones ( self , bool_list ) ) #NEWLINE#
print ( lines [ : 100 ] ) #NEWLINE#
cost_obj . save ( ) #NEWLINE#
lattice = np . empty ( ( 3 , 3 ) , dtype = object ) #NEWLINE#
return [ ( 'ABC' , '123' ) ] #NEWLINE#
UserModel . save ( using = db , force_insert = True ) #NEWLINE#
ip = socket . gethostbyname ( socket . gethostname ( ) ) #NEWLINE#
plt . colorbar ( coll , orientation = 'horizontal' ) #NEWLINE#
super ( UICPS , self ) . __init__ ( parent ) #NEWLINE#
from functools import reduce #NEWLINE# parent = reduce ( dict . get , folders [ : - 1 ] , dir ) #NEWLINE#
fcl ( df , dtObj ) [ 'column' ] #NEWLINE#
self . _result . addFailure ( self , sys . exc_info ( ) ) #NEWLINE#
import os . path #NEWLINE#
raise ValueError ( 'iitt:#SPACE#Error!' ) #NEWLINE#
matplotlib_fig . show ( ) #NEWLINE#
getSite = urllib . request . urlopen ( pageName ) . decode ( 'utf-16' ) #NEWLINE#
df . loc [ - 1 ] = [ 2 , 3 , 4 ] #NEWLINE#
df . xs ( 'B' ) . plot ( kind = 'bar' , ax = a [ 1 ] ) #NEWLINE#
c [ arange ( c . shape [ 1 ] ) + zeros ( ( len ( a ) , 1 ) , dtype = int ) < a [ : , ( None ) ] ] = b #NEWLINE#
"""└───────┘""" #NEWLINE#
df . columns = df . columns . date #NEWLINE#
g . __code__ . co_name #NEWLINE#
curses . flushinp ( ) #NEWLINE#
color_img = cv2 . cvtColor ( gray_img , cv . CV_GRAY2RGB ) #NEWLINE#
nlargest ( n , your2DList , key = lambda x : x [ - 1 ] ) #NEWLINE#
df = pd . concat ( [ df ] * 100000 ) . reset_index ( drop = True ) #NEWLINE#
super ( GraphUtils , self ) . __init__ ( ) #NEWLINE#
"""((?:never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint)\\b|\\b\\w+n't\\b)([^.:;!?]*)([.:;!?\\b])""" #NEWLINE#
int ( '10011001' , 2 ) #NEWLINE#
with open ( 'FILE.INI' , 'w' ) as configfile : #NEWLINE# #INDENT# config . write ( configfile ) #NEWLINE#
plt . show ( ) #NEWLINE#
df [ df . groupby ( [ 'A' , 'B' ] ) . transform ( np . count_nonzero ) . C >= 2 ] #NEWLINE#
'Antigua' , 'Cordoba' , 'Mendoza' , 'Tucuman' , 'Ushuaia' , 'Caracas' #NEWLINE#
'Cayenne' , 'Chicago' , 'Curacao' , 'Detroit' , 'Godthab' , 'Grenada' #NEWLINE#
'Halifax' , 'Indiana' , 'Marengo' , 'Winamac' , 'Iqaluit' , 'Managua' #NEWLINE#
'Marigot' , 'Moncton' , 'Nipigon' , 'Noronha' , 'Phoenix' , 'Rosario' #NEWLINE#
'Tijuana' , 'Toronto' , 'Tortola' , 'Yakutat' , 'McMurdo' , 'Rothera' #NEWLINE#
'Baghdad' , 'Bahrain' , 'Bangkok' , 'Bishkek' , 'Colombo' , 'Irkutsk' #NEWLINE#
'Jakarta' , 'Karachi' , 'Kashgar' , 'Kolkata' , 'Kuching' , 'Magadan' #NEWLINE#
'Nicosia' , 'Rangoon' , 'Tbilisi' , 'Thimphu' , 'Yakutsk' , 'Yerevan' #NEWLINE#
'Bermuda' , 'Madeira' , 'Stanley' , 'Andorra' , 'Belfast' , 'Tallinn' #NEWLINE#
df1 . reindex ( p , fill_value = 'UNKNOWN' ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
words = set ( re . findall ( '[a-z]+' , text . lower ( ) ) ) #NEWLINE#
print ( 'status#SPACE#code:#SPACE#%s' % curl . getinfo ( pycurl . HTTP_CODE ) ) #NEWLINE#
root2 . minsize ( root2 . winfo_reqwidth ( ) , root2 . winfo_reqheight ( ) ) #NEWLINE#
webbrowser . open_new ( url ) #NEWLINE#
myre . sub ( '' , 'Some#SPACE#example#SPACE#text#SPACE#with#SPACE#a#SPACE#sleepy#SPACE#face:#SPACE#😪' ) #NEWLINE#
a [ - 1 ] . shape #NEWLINE#
return np . sum ( ( coord [ 0 ] - x ) ** 2 + ( coord [ 1 ] - y ) ** 2 - r ** 2 ) #NEWLINE#
l = [ 1.565888 , 2.073744 , 2.962492 , 4.52838 , 5.417127 , 7.025337 ] #NEWLINE#
orcl = cx_Oracle . connect ( usrpass + '@' + dbase ) #NEWLINE#
e . pack ( ) #NEWLINE#
file . close ( ) #NEWLINE#
plt . plot ( np . cos ( np . linspace ( 0 , 10 , 100 ) ) ) #NEWLINE#
d . bar ( ) #NEWLINE#
normedA = array ( norm ( v ) for v in A ) #NEWLINE#
handles , labels = plt . gca ( ) . get_legend_handles_labels ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
win32clipboard . EmptyClipboard ( ) #NEWLINE#
a . add ( x ) #NEWLINE#
foofoo . py #NEWLINE#
df [ 'visit_period' ] = df . apply ( lambda x : max_spent ( x [ 'first_seen' ] , x [ #NEWLINE# 'last_seen' ] ) , axis = 1 ) #NEWLINE#
list ( incremental_window ( [ 1 , 2 , 3 , 4 ] ) ) #NEWLINE#
os . kill ( int ( sys . argv [ 1 ] ) , 0 ) #NEWLINE#
a = numpy . array ( [ 123 , 412 , 444 ] ) #NEWLINE#
url ( '^$' , 'myapp.so' , name = 'something' ) #NEWLINE#
font = { 'family' : 'normal' , 'weight' : 'bold' , 'size' : 22 } #NEWLINE# matplotlib . rc ( 'font' , ** font ) #NEWLINE#
strat1 . execute ( ) #NEWLINE#
return nil #NEWLINE#
config . add_route ( 'edit_page' , '/{pagename}/edit_page' ) #NEWLINE#
names = [ prop for prop in dir ( self . __class__ ) if prop [ 1 ] != '_' ] #NEWLINE#
pd . DataFrame . to_xml = to_xml #NEWLINE#
dictionary [ len ( i ) ] += 1 #NEWLINE#
response = urllib . request . urlopen ( url ) #NEWLINE#
[ 'ROOT' , 'Node1' , 'Node2' ] #NEWLINE#
return sorted ( l , key = alphanum_key ) #NEWLINE#
def big ( func , args ) : #NEWLINE# #INDENT# func ( * args ) #NEWLINE#
datetime . datetime . now ( ) #NEWLINE#
help ( raw_input ) #NEWLINE#
df [ col_ [ : 2 , ( 'col5' ) , 3 : 6 ] ] #NEWLINE#
print ( getValues ( 'CategoryA' ) ) #NEWLINE#
matmult ( x , y ) #NEWLINE#
pexpect . pty . spawn ( 'ftp' ) #NEWLINE#
g . index = g . index . swaplevel ( 1 , 2 ) #NEWLINE#
ax1 . plot ( t , s1 , 'b-' ) #NEWLINE#
chunk = req . read ( size ) #NEWLINE#
creatures = dict ( ) #NEWLINE#
"""x""" #NEWLINE#
return [ list ( islice ( i , n ) ) for n in chain ( indices , [ None ] ) ] #NEWLINE#
meds . sort ( ascending = False ) #NEWLINE#
args = parser . parse_args ( [ 'PRINT' ] ) #NEWLINE#
print ( df [ 'ibm#SPACE#weight' ] . min ( ) ) #NEWLINE#
canvas . pack ( side = LEFT , fill = BOTH , expand = TRUE ) #NEWLINE#
print ( self . parent . __name__ ) #NEWLINE#
print ( link [ 'href' ] ) #NEWLINE#
items = np . random . random_sample ( ( 10 , 3 ) ) #NEWLINE#
os . nice ( 5 ) #NEWLINE#
{ 'field2' : 'b' , 'field3' : 'c' , 'field1' : 'a' } #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
f = codecs . open ( 'test.html' , 'r' ) #NEWLINE#
df [ 'avg' ] = df [ [ 'Monday' , 'Tuesday' ] ] . mean ( axis = 1 ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( 'File#SPACE#:#SPACE#{0}' . format ( filename ) ) #NEWLINE#
next ( combs2 ) #NEWLINE#
ax1 . axis [ 'top' ] . label . set_axis_direction ( 'top' ) #NEWLINE#
app . run ( debug = True ) #NEWLINE#
print ( type ( data ) ) #NEWLINE#
__init__ . py #NEWLINE#
row , col = numpy . where ( M == 0 ) #NEWLINE#
pd . to_numeric ( s , errors = 'coerce' ) #NEWLINE#
self . setupUi ( self ) #NEWLINE#
plt . plot ( x , 4 * x ) #NEWLINE#
table . query ( 'column_name#SPACE#==#SPACE#some_value#SPACE#|#SPACE#column_name2#SPACE#==#SPACE#some_value2' ) #NEWLINE#
pnt . ewkt #NEWLINE#
print ( 'Doh' ) #NEWLINE#
[ 'left' , 'init' , 'declarations' , 'body' , 'name' , 'i' ] #NEWLINE#
__init__ . py #NEWLINE#
ax . set_xlim ( 0 , 10 ) #NEWLINE#
f . write ( 'yyyyyyyyyyyyyyyy\n' * 32768 ) #NEWLINE#
f . write ( 'zzzzzzzzzzzzzzzz\n' * 32768 ) #NEWLINE#
return arg [ : : - 1 ] #NEWLINE#
plt . scatter ( a [ 0 ] , a [ 1 ] , s = 50 , c = colormap [ categories ] ) #NEWLINE#
config . set_float ( '-pbeam' , 1e-10 ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
def contains_digits ( s ) : #NEWLINE# #INDENT# return any ( char . isdigit ( ) for char in s ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda a , b : a and b , alist , True ) #NEWLINE#
size = models . IntegerField ( blank = True , null = True ) #NEWLINE#
dct = dict ( zip ( ascii_uppercase , lens ) ) #NEWLINE#
self . model = QtGui . QStandardItemModel ( ) #NEWLINE#
inputElement = driver . find_element_by_id ( 'a1' ) #NEWLINE# inputElement . send_keys ( '1' ) #NEWLINE#
sublist . sort ( ) #NEWLINE#
saved = locale . setlocale ( locale . LC_ALL ) #NEWLINE#
formatter = logging . Formatter ( '%(host)s;%(message)s' ) #NEWLINE#
[ ( '.pyd' , 'rb' , 3 ) , ( '.py' , 'U' , 1 ) , ( '.pyw' , 'U' , 1 ) , ( '.pyc' , 'rb' , 2 ) ] #NEWLINE#
return len ( [ letter for letter in word if letter not in BAD_LETTERS ] ) #NEWLINE#
plt . figure ( 2 ) #NEWLINE#
shutil . copyfileobj ( r , f ) #NEWLINE#
return datetime . timedelta ( ** { unit : float ( value ) } ) #NEWLINE#
len ( response . content ) #NEWLINE#
plt . show ( ) #NEWLINE#
a . append ( a . pop ( 0 ) ) #NEWLINE#
lenient_int = lambda string : int ( string ) if string . strip ( ) else None #NEWLINE#
print ( f . info ( ) ) #NEWLINE#
outtab = 'aaaaaaaaaaaaooooooooooooeeeeeeeecciiiiiiiiuuuuuuuuynn' #NEWLINE#
os . unlink ( targetLink ) #NEWLINE#
b_result . append ( b ) #NEWLINE#
pd . read_csv ( s , parse_dates = [ 0 ] , dayfirst = True ) #NEWLINE#
tuple ( l ) #NEWLINE#
def clean_status ( self ) : #NEWLINE# #INDENT# return self . instance . status #NEWLINE#
objs . append ( pickle . load ( f ) ) #NEWLINE#
print ( '{}#SPACE#is#SPACE#perfect#SPACE#number' . format ( num ) ) #NEWLINE#
df #NEWLINE#
print ( np . allclose ( A1 , A3 ) ) #NEWLINE#
return response #NEWLINE#
pl . hist ( data , bins = np . logspace ( 0.1 , 1.0 , 50 ) ) #NEWLINE#
ax1 . set_xlabel ( 'Frequency#SPACE#(GHz)' ) #NEWLINE#
x = copy . deepcopy ( y ) #NEWLINE#
curses . wrapper ( main ) #NEWLINE#
s = ',#SPACE#' . join ( l + [ '' ] ) . rstrip ( '#SPACE#' ) #NEWLINE#
print ( '\n' . join ( it ) ) #NEWLINE#
writer ( fw , delimiter = ',' ) . writerows ( zip ( * reader ( f , delimiter = ',' ) ) ) #NEWLINE#
print ( sys . executable ) #NEWLINE#
super ( B , self ) . foo ( ) #NEWLINE#
print ( hex3 ( 17 ) ) #NEWLINE#
self . process . communicate ( ) #NEWLINE#
print ( utc_dt . astimezone ( get_localzone ( ) ) ) #NEWLINE#
return len ( set ( list_ ) ) == len ( list_ ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
print ( self . __class__ . __dict__ ) #NEWLINE#
print ( 'found#SPACE#a#SPACE#hat' ) #NEWLINE#
draw . text ( ( 50 , 50 ) , 'hey' ) #NEWLINE#
assert quotify ( '"type"#SPACE#"/?"' ) == '""type"#SPACE#"/?""' #NEWLINE#
assert quotify ( 'type#SPACE#"a#SPACE#a"#SPACE#b' ) == '"type#SPACE#"a#SPACE#a"#SPACE#b"' #NEWLINE#
assert quotify ( '"type"#SPACE#/?' ) == '""type"#SPACE#/?"' #NEWLINE#
assert quotify ( 'type#SPACE#""#SPACE#b' ) == '"type#SPACE#""#SPACE#b"' #NEWLINE#
assert quotify ( '"type"' ) == '"type"' #NEWLINE#
plt . xlabel ( '' ) #NEWLINE#
imghdr . what ( '/tmp/bass' ) #NEWLINE#
f_out = gzip . open ( '/home/joe/file.txt.gz' , 'wb' ) #NEWLINE#
print ( 'too#SPACE#long' ) #NEWLINE#
final_ensemble . estimators_ += ensemble . estimators_ #NEWLINE#
ns = np . arange ( - 5 , 5 + 1 ) #NEWLINE#
s = requests . Session ( ) #NEWLINE#
print ( abs ( x ) % 1000 ) #NEWLINE#
median = sum ( sorted ( a [ - 30 : ] ) [ 14 : 16 ] ) / 2.0 #NEWLINE#
nltk . set_proxy ( 'http://proxy.example.com:3128' , ( 'USERNAME' , 'PASSWORD' ) ) #NEWLINE#
logger . removeHandler ( logger . handlers [ 0 ] ) #NEWLINE#
self . foo . start ( ) #NEWLINE#
d [ i [ 1 ] ] [ i [ 2 ] ] = i [ 3 ] #NEWLINE#
[ 1693.558384 , 5742.0 , 8240.0 ] , #NEWLINE#
[ 1695.86408654 , 2140.0 , 6969.0 ] , #NEWLINE#
msg = MIMEMultipart ( ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
print ( key ) #NEWLINE#
ax . plot ( x , y , 'bo' ) #NEWLINE#
a [ : - 2 ] #NEWLINE#
res3 = ( U * V [ None , ... ] ) . sum ( 1 ) #NEWLINE#
f . seek ( 999999 ) #NEWLINE#
self . button = wx . Button ( self . panel , label = 'Test' ) #NEWLINE#
l = list ( filter ( str . strip , l ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
oname = soup . find ( 'title' ) #NEWLINE#
from functools import reduce #NEWLINE# all_union = reduce ( lambda a , b : a . union ( b ) , L [ 1 : ] , L [ 0 ] ) #NEWLINE#
len ( 'ã\x81\x93ã\x82\x93ã\x81«ã\x81¡ã\x81¯' ) #NEWLINE#
form = ContactForm ( request . POST ) #NEWLINE#
from tkinter import * #NEWLINE#
root . mainloop ( ) #NEWLINE#
data [ 'c' ] [ 2 ] #NEWLINE#
a , b = [ 1 , 2 , 3 ] #NEWLINE#
result = [ myFunc ( p , additionalArgument ) for p in pages ] #NEWLINE#
b ( ) #NEWLINE#
end_date [ - 1 ] = end_date [ - 1 ] [ : 4 ] #NEWLINE#
Counter ( map ( tuple , a . T ) ) #NEWLINE#
return any ( big [ i : i + l_sml ] == small for i <STR0> range ( l_big - l_sml + 1 ) ) #NEWLINE#
ainb = np . array ( [ ( x in b ) for x in a [ : , ( 2 ) ] ] ) #NEWLINE# a [ ainb ] #NEWLINE#
sorted ( versions , key = lambda v : version2 . NumberedVersion ( v , '.' , [ 'rc' ] ) ) #NEWLINE#
pylab . show ( ) #NEWLINE#
os . path . realpath ( '/usr/bin/..' ) #NEWLINE#
return kpt_data . reshape ( h_r . shape [ : 2 ] + ( - 1 , ) ) #NEWLINE#
x . upper ( ) #NEWLINE#
gobject . threads_init ( ) #NEWLINE#
logger . debug ( 'debug#SPACE#message' ) #NEWLINE#
tt = matplotlib . delaunay . triangulate . Triangulation ( x , y ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
"""Solo#SPACE#voy#SPACE#si#SPACE#se#SPACE#sucedierón#SPACE#o#SPACE#se#SPACE#suceden#SPACE#mañana#SPACE#los#SPACE#siguienñes#SPACE#eventos:""" #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
R1 . __init__ ( self ) #NEWLINE#
print ( types [ bisect . bisect ( points , Point ( 0.1 , 0.1 ) ) - 1 ] ) #NEWLINE#
time . sleep ( seconds / 1000000.0 ) #NEWLINE#
print ( np . pad ( x , ( ( 0 , 0 ) , ( 1 , 0 ) ) , mode = 'constant' ) [ : , : - 1 ] ) #NEWLINE#
[ 'A' , ';' , 'B' , ';' , 'C' , ';' , '!' ] #NEWLINE#
root . mainloop ( ) #NEWLINE#
wtr . writerows ( in_iter ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
environ [ 'PATH_INFO' ] = urllib . parse . unquote ( request_uri ) #NEWLINE#
fields = [ 'name' , 'active' , 'position' , 'categories' , 'sites' ] #NEWLINE#
from functools import reduce #NEWLINE# allkey = reduce ( set . union , map ( set , map ( dict . keys , alldict ) ) ) #NEWLINE#
parser . parse ( io . BytesIO ( '<a>é</a>' . encode ( 'utf8' ) ) ) #NEWLINE#
print ( 'calling#SPACE#recurse()' ) #NEWLINE#
s [ 1 ] #NEWLINE#
[ 'line1' , 'line2' , 'line3' , 'line4' ] #NEWLINE#
sys . path [ - 3 : ] #NEWLINE#
soup = BeautifulSoup ( r . text , 'lxml' ) #NEWLINE#
list ( chain . from_iterable ( zip ( data , tweets ) ) ) #NEWLINE#
ords = ( ord ( c ) for c in s ) #NEWLINE#
print ( 'Return#SPACE#value:#SPACE#{0}' . format ( rv ) ) #NEWLINE#
lines = ( line . rstrip ( ) for line in f ) #NEWLINE#
np . argpartition ( a , idx ) [ idx ] #NEWLINE#
s . set_debuglevel ( 1 ) #NEWLINE#
stdoutdata , stderrdata = proc . communicate ( ) #NEWLINE#
open_workbook ( excel_file_full_path , formatting_info = True ) #NEWLINE#
df . university . apply ( extract_city ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
df . iloc [ 0 : 3 ] #NEWLINE#
bool ( { ( 1 ) : 'One' , ( 2 ) : 'Two' } ) #NEWLINE#
self . _exit ( ) #NEWLINE#
np . dtype ( 'float64' ) #NEWLINE#
arr2d . sum ( 1 ) #NEWLINE#
print ( df1 . ix [ df1 . B . isin ( df2 . B ) , 'B' ] ) #NEWLINE#
df [ 'C' ] = df . apply ( f , axis = 1 ) #NEWLINE#
HypotheticalBranch ( 0 , 1 , 1 ) #NEWLINE#
shutil . copyfileobj ( zf , f ) #NEWLINE#
Parent . __init__ ( self , * args , ** kwargs ) #NEWLINE#
mail . settings . login = 'you:password' #NEWLINE#
ax . set_ylim ( min_val , max_val ) #NEWLINE#
df . ix [ 'a' ] . ix [ 'c' ] #NEWLINE#
df [ 'Percnt#SPACE#rank' ] = df . reset_index ( ) #NEWLINE#
print ( graph . serialize ( format = 'nt' ) ) #NEWLINE#
"""Get#SPACE#a#SPACE#translation#SPACE#for#SPACE#a#SPACE#real#SPACE#name""" #NEWLINE#
return df . reset_index ( ) #NEWLINE#
flatten ( [ 1 , 2 , [ 'dflkjasdf' , 'ok' ] , 'ok' ] ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
file . seek ( - 1024 * 1024 , os . SEEK_END ) #NEWLINE#
a = numpy . empty ( n , dtype = object ) #NEWLINE#
return np . array ( sorted ( set ( a ) | set ( b ) ) ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) #NEWLINE#
self . button . clicked . connect ( self . plot ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
plt . axis ( [ - 1 , 6 , 0 , 6 ] ) #NEWLINE#
ftp . close ( ) #NEWLINE#
pygame . draw . circle ( screen , COLOR , POS , RADIUS , WIDTH ) #NEWLINE#
pprint . pprint ( w . config ( ) ) #NEWLINE#
return float ( num ) / float ( denom ) #NEWLINE#
foo ( [ 1 , 2 , 3 , 'HELLO' , 'WORLD' ] ) #NEWLINE#
return result #NEWLINE#
my_list . remove ( '' ) #NEWLINE#
conn = sqlite3 . connect ( ':mem:' ) #NEWLINE#
foo . my_map = { 'rab' : barType , 'oof' : fooType } #NEWLINE#
raise Exception ( 'Dummy' ) #NEWLINE#
existing_pdf = PdfFileReader ( file ( 'mypdf.pdf' , 'rb' ) ) #NEWLINE#
dataframeFinal = dataframeFinal . drop ( 'time_x' , axis = 1 ) #NEWLINE#
alist2 = [ item [ : ] for item in alist ] #NEWLINE#
sel . click ( "xpath=//a[text()='Submit#SPACE#»')]" ) #NEWLINE#
if a . lower ( ) in b . lower ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
path = urllib . request . url2pathname ( path ) #NEWLINE#
return md5 . digest ( ) #NEWLINE#
return df . groupby ( 'OrderID' ) . apply ( lambda x : set ( x [ 'ItemID' ] ) ) . tolist ( ) #NEWLINE#
logger . setLevel ( logging . ERROR ) #NEWLINE#
url ( '^tasks/$' , 'www.views.tasks' , name = 'task-index' ) , #NEWLINE#
return subprocess . check_output ( [ 'git' , 'rev-parse' , 'HEAD' ] ) #NEWLINE#
cmyk . append ( cmyk_im [ i ] . load ( ) ) #NEWLINE#
yield data [ i : i + batch_size ] #NEWLINE#
loop . close ( ) #NEWLINE#
print ( C . x . __doc__ ) #NEWLINE#
pattern2 = re . compile ( '([0-9a-f]{2}\\s){48}' ) #NEWLINE#
newImage . paste ( srcImage , ( x1 , y1 , x1 + oldWidth , y1 + oldHeight ) ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
f . close ( ) #NEWLINE#
return [ hash ( tpl [ 0 ] ) for tpl in stackframe [ 1 : ] ] #NEWLINE#
return timediff . total_seconds ( ) #NEWLINE#
loop . run_forever ( ) #NEWLINE#
print ( request . POST . get ( 'my_field' ) ) #NEWLINE#
ax . contourf ( X , Y , Z , zdir = 'x' , offset = - 4 , cmap = plt . cm . hot ) #NEWLINE#
super ( Link , self ) . save ( * args , ** kwargs ) #NEWLINE#
return itertools . zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
json . loads ( '{}' ) #NEWLINE#
ax . plot ( VecStart_x + VecEnd_x , VecStart_y + VecEnd_y , VecStart_z + VecEnd_z ) #NEWLINE#
{ k : v for k , v in list ( d . items ( ) ) } #NEWLINE#
raise RuntimeError ( 'script#SPACE#used#SPACE#too#SPACE#many#SPACE#resources' ) #NEWLINE#
foo ( ) #NEWLINE#
print ( 'Changing#SPACE#[1]' ) #NEWLINE#
print ( 'Changing#SPACE#from#SPACE#client' ) #NEWLINE#
print ( 'Press#SPACE#Ctrl-C#SPACE#to#SPACE#exit' ) #NEWLINE#
xml . write ( m . group ( 1 ) ) #NEWLINE#
msg = logentry . find ( 'msg' ) #NEWLINE#
joint = [ [ ( x + y ) for x , y in zip ( * row ) ] for row in zip ( outgoing , incoming ) ] #NEWLINE#
l . pack ( ) #NEWLINE#
frozenset ( ) . union ( * l ) #NEWLINE#
plot ( path [ : , ( 1 ) ] , path [ : , ( 0 ) ] , 'w.-' ) #NEWLINE#
np . array ( test ) #NEWLINE#
list ( a . keys ( ) ) #NEWLINE#
self . val = 0 #NEWLINE#
list ( accumulative_product ( A , B , C ) ) #NEWLINE#
server_socket . bind ( ( HOST , PORT ) ) #NEWLINE#
fs . noteon ( 0 , 76 , 30 ) #NEWLINE#
L = [ 104 , 101 , 108 , 108 , 111 , 44 , 32 , 119 , 111 , 114 , 108 , 100 ] #NEWLINE# """""" . join ( chr ( i ) for i in L ) #NEWLINE#
files = { 'file' : ( 'userfile' , open ( 'image.jpg' , 'rb' ) ) , 'account_id' : 12345 } #NEWLINE#
print ( 'ERROR#SPACE#shelving:#SPACE#{0}' . format ( key ) ) #NEWLINE#
df [ 'wa' ] = df . value / g . value . transform ( 'sum' ) * df . wt #NEWLINE#
print ( 'You#SPACE#have#SPACE#new#SPACE#mail.' ) #NEWLINE#
print ( 'No#SPACE#new#SPACE#mail.' ) #NEWLINE#
x509 = OpenSSL . crypto . load_certificate ( OpenSSL . crypto . FILETYPE_PEM , cert ) #NEWLINE#
gevent . joinall ( greenlets ) #NEWLINE#
request . add_header ( 'Content-Type' , 'application/gooblygop' ) #NEWLINE#
print ( parser . parse_args ( '--head#SPACE#15' . split ( ) ) ) #NEWLINE#
tree_dict = { key : tree_dict } #NEWLINE#
hex_int = int ( hex_str , 16 ) #NEWLINE#
return 'Haha,#SPACE#overridden#SPACE#it#SPACE#with#SPACE#{}' . format ( self . _stub ) #NEWLINE#
output += 'The#SPACE#longest#SPACE#orf#SPACE#length#SPACE#is#SPACE#' + str ( max_val ) + '\n' #NEWLINE#
parser . add_argument ( 'otherthings' , nargs = '*' ) #NEWLINE#
print ( myzip . namelist ( ) ) #NEWLINE#
bib_data = parser . parse_file ( 'ref.bib' ) #NEWLINE#
form . set_value ( 'rhubarb#SPACE#rhubarb' , kind = 'text' , nr = 0 ) #NEWLINE#
df . merge ( df2 , how = 'left' ) #NEWLINE#
pool = multiprocessing . Pool ( processes = cpus ) #NEWLINE#
second = [ 1 , 2 , 3 ] #NEWLINE#
setattr ( obj , pname , v [ 0 ] ) #NEWLINE#
print ( locale . format ( '%.2f' , 32757121.33 , True ) ) #NEWLINE#
df . drop ( df . columns [ 1 : ] , axis = 1 ) #NEWLINE#
urllib . request . HTTPSHandler . __init__ ( self ) #NEWLINE#
plt . hold ( True ) #NEWLINE#
lst [ 0 ] = '' #NEWLINE#
return np . einsum ( 'ij,ik,jk->k' , F , V , V ) #NEWLINE#
table = df [ [ 'Qu1' , 'Qu2' , 'Qu3' ] ] . apply ( lambda x : x . value_counts ( ) ) #NEWLINE#
plt . boxplot ( x ) #NEWLINE#
[ ( sentence + '.' ) for sentence in txt . split ( '.' ) if 'apple' in sentence ] #NEWLINE#
f = open ( 'file.txt' , 'r+' ) #NEWLINE# f . truncate ( ) #NEWLINE#
input ( ) #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
pdb . run ( 'pip.main()' , globals ( ) ) #NEWLINE#
regex = re . compile ( ptn % re . escape ( punc ) ) #NEWLINE#
df [ 'index_by_color' ] = df . groupby ( 'color' ) . cumcount ( ) #NEWLINE#
plt . plot ( x , x , '0.3' , label = 'linear#SPACE#data' ) #NEWLINE#
a . reshape ( ( - 1 , 5 ) ) #NEWLINE#
lines . append ( [ ( lastX , lastY ) , ( lastX + 1 , lastY ) ] ) #NEWLINE#
return HttpResponse ( 'page#SPACE#one' ) #NEWLINE#
plt . streamplot ( X , Z , BX_IN , BZ_IN , color = 'r' , arrowstyle = '-' , density = 2 ) #NEWLINE#
ax . contour ( X , Y , Z , zdir = 'x' , offset = - 4 , colors = 'k' ) #NEWLINE#
[ 27.99 , 7.76 , 34.93 ] , #NEWLINE#
[ 27.17 , 8.58 , 33.79 ] , #NEWLINE#
print ( 'Access#SPACE#Token:' ) #NEWLINE#
Planet . MERCURY #NEWLINE#
from collections import Counter as mset #NEWLINE#
lis = [ 'A:1' , 'B:2' , 'C:3' , 'D:4' ] #NEWLINE# dict ( x . split ( ':' ) for x in lis ) #NEWLINE#
print ( soup ) #NEWLINE#
out , err = proc . communicate ( ) #NEWLINE#
print ( 'parsing#SPACE#complete' ) #NEWLINE#
process . stdin . write ( 'Hello\n' ) #NEWLINE#
values = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
engine . block ( ) #NEWLINE#
mpl . rcParams [ 'legend.numpoints' ] = 1 #NEWLINE#
p . start ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
with env . begin ( ) as txn : #NEWLINE# #INDENT# length = txn . stat ( ) [ 'entries' ] #NEWLINE#
s . bind ( ( '::1' , 1234 ) ) #NEWLINE#
ADMIN_LANGUAGE_CODE = 'ru-RU' #NEWLINE#
l = [ '1' , 'a' , 'b' , '---' , '2' , 'c' , 'd' , '---' , '3' , '123' , 'e' , '---' , '4' ] #NEWLINE#
out = abs ( z [ ... , np . newaxis ] - z ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'do_something' , 'f' , 'myList' , 'print' , 'range' , #NEWLINE# 'someMethod' , 'something' ] #NEWLINE#
pylab . axis ( [ 0 , 1 , 0 , 1 ] ) #NEWLINE#
split_str . groupby ( [ 0 , 1 ] ) [ 2 ] . apply ( fnc ) . reset_index ( level = [ 0 , 1 ] ) . reset_index ( #NEWLINE# drop = True ) #NEWLINE#
_nextkey += 1 #NEWLINE#
myset = set ( filter ( test , myset ) ) #NEWLINE#
hash ( foo ) #NEWLINE#
data = s . recv ( 2048 ) #NEWLINE# my_bytes = bytearray ( data ) #NEWLINE#
cv2 . drawContours ( drawing , [ cnt ] , 0 , ( 255 , 255 , 255 ) , 2 ) #NEWLINE#
self . platforms . append ( p ) #NEWLINE#
A = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
self . response . out . write ( str ( json . loads ( parsed_data ) [ 'data' ] [ 'translations' ] #NEWLINE# [ 'translatedText' ] ) ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
redundant_list = list ( x ) #NEWLINE#
ax . set_xlim ( 1 , 3 ) #NEWLINE#
sim_list . append ( simulation ( 'bar' ) ) #NEWLINE#
from django . db . models import Count #NEWLINE#
return list ( gen ( ) ) #NEWLINE#
df = pd . read_excel ( path + filename ) #NEWLINE#
return '' . join ( d ) #NEWLINE#
pd . infer_freq ( ts . index ) #NEWLINE#
fs . noteon ( 0 , 60 , 30 ) #NEWLINE#
os . write ( fd , 'data' ) #NEWLINE#
re . findall ( '\\d+|$' , 'aa33bbb44' ) [ 0 ] #NEWLINE#
pl . savefig ( 'smooth_array.png' ) #NEWLINE#
c . execute ( sql , tup ) #NEWLINE#
super ( Parameters , self ) . __setattr__ ( 'paramOrder' , [ ] ) #NEWLINE#
f . close ( ) #NEWLINE#
temp_list . append ( item ) #NEWLINE#
panel = tk . Label ( root , image = img ) #NEWLINE#
{ { ( floatvalue | floatformat ) : 2 | intcomma } } #NEWLINE#
count ( 'baba' , 'abababa#SPACE#baba#SPACE#alibababa' ) #NEWLINE#
data = data . reshape ( shape ) #NEWLINE#
float_color = color / 255.0 #NEWLINE#
df_new . columns = [ 'date' , 'ts' ] #NEWLINE#
[ 0 , 2 , 4 , 10 , 12 , 14 , 20 , 22 , 24 ] #NEWLINE#
print ( 'Importing#SPACE#Flash...' ) #NEWLINE#
assert datetime . date . today ( ) == datetime . date ( 2014 , 5 , 31 ) #NEWLINE#
for r in itertools . chain ( itertools . product ( a , b ) , itertools . product ( b , a ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
return gamma + log ( n ) + 0.5 / n - 1.0 / ( 12 * n ** 2 ) + 1.0 / ( 120 * n ** 4 ) #NEWLINE#
a = np . arange ( 1 , 7 ) . reshape ( 2 , 3 ) #NEWLINE#
print ( m . start ( ) , m . group ( ) ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
imp . find_module ( imported ) #NEWLINE#
super ( SomeForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
url = 'https://example.com/{0}' . format ( id ) #NEWLINE# print ( url ) #NEWLINE#
list ( filter ( pattern . match , strings ) ) #NEWLINE#
sorted ( lst , reverse = True ) #NEWLINE#
query . parse ( 'a#SPACE#AND#SPACE#b' ) #NEWLINE#
"""this#SPACE#is#SPACE#some#SPACE#text#SPACE#that#SPACE#will#SPACE#have#SPACE#one#SPACE#form#SPACE#or#SPACE#the#SPACE#other#SPACE#url#SPACE#embeded,#SPACE#most#SPACE#will#SPACE#have#SPACE#valid#SPACE#URLs#SPACE#while#SPACE#there#SPACE#are#SPACE#cases#SPACE#where#SPACE#they#SPACE#can#SPACE#be#SPACE#bad.#SPACE#for#SPACE#eg,#SPACE#http://www.google.com#SPACE#and#SPACE#http://www.google.co.uk#SPACE#and#SPACE#www.domain.co.uk#SPACE#and#SPACE#etc.""" #NEWLINE#
"""(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'".,<>?«»“”‘’]))""" #NEWLINE#
removed = original . replace ( 'M' , '' ) #NEWLINE#
image . save ( output_file ) #NEWLINE#
print ( arr . reshape ( 2 , 2 , 2 , 2 ) . swapaxes ( 1 , 2 ) . reshape ( 2 , 2 , 4 ) . max ( axis = - 1 ) ) #NEWLINE#
assert s . query ( B . id ) . order_by ( B . id ) . all ( ) == [ ( 1 , ) , ( 3 , ) , ( 4 , ) ] #NEWLINE#
data = np . array ( [ [ 1 , 5 ] , [ 2 , 10 ] , [ 3 , 15 ] , [ 4 , 20 ] , [ 5 , 25 ] ] ) #NEWLINE#
print ( 'test#SPACE#sys.stdout' ) #NEWLINE#
my_list = list ( my_iterable ) #NEWLINE#
form . field ( disabled = True ) #NEWLINE#
print ( "You#SPACE#have#SPACE#to#SPACE#select#SPACE#a#SPACE#person#SPACE#and#SPACE#it#SPACE#can't#SPACE#be#SPACE#Bob" ) #NEWLINE#
data . append ( group_data ) #NEWLINE#
spsd . euclidean ( nparray1 , nparray2 ) #NEWLINE#
myArray [ 0 ] [ 1 ] == 3.14159 #NEWLINE#
self . response . write ( '-#SPACE#user_id#SPACE##SPACE##SPACE##SPACE##SPACE#=#SPACE#%s\n' % user . user_id ( ) ) #NEWLINE#
self . ax . add_patch ( self . rect ) #NEWLINE#
list ( enumerate ( [ 4 , 5 , 6 , 7 ] ) ) #NEWLINE#
c . execute ( 'INSERT#SPACE#INTO#SPACE#child_dog#SPACE#VALUES(?,#SPACE#?)' , ( bobby_id , spot_id ) ) #NEWLINE#
setattr ( cls , membername , lockedmethod ) #NEWLINE#
pd . concat ( [ Out [ 24 ] , Out [ 25 ] ] , axis = 1 ) #NEWLINE#
return chain . from_iterable ( listOfLists ) #NEWLINE#
return range_prod ( 1 , n ) #NEWLINE#
frames . append ( pd . DataFrame . from_dict ( d , orient = 'index' ) . stack ( ) ) #NEWLINE#
re . sub ( '(?!-)\\W' , '#SPACE#' , 'black-white' ) #NEWLINE#
print ( driver . page_source ) #NEWLINE#
System . out . println ( id . getClass ( ) . getName ( ) ) #NEWLINE#
grid . fit ( data ) #NEWLINE#
random . choice ( [ 4 , 5 , 6 ] ) #NEWLINE#
im = Image . open ( StringIO . StringIO ( f . read ( ) ) ) #NEWLINE#
p1 = Popen ( [ 'tar' , '-cvf' , '-' , 'path_to_archive' ] , stdout = PIPE ) #NEWLINE#
a [ y [ : - 1 ] ] -= x [ : - 1 ] #NEWLINE#
print ( '{}#SPACE#{}#SPACE#X' . format ( name , type ( x ) ) ) #NEWLINE#
foosparse [ key1 , key2 ] = value #NEWLINE#
browser . driver . set_page_load_timeout ( 10 ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
fout . write ( '{0}#SPACE#{1}#SPACE#{2}#SPACE#{3}' . format ( row [ 0 ] , row [ 1 ] , row [ 7 ] , row [ 8 ] ) ) #NEWLINE#
fitness_landscape . shape #NEWLINE#
import sqlite3 #NEWLINE#
a [ 1 ] . axvspan ( sd , ed , alpha = 0.1 , color = 'r' ) #NEWLINE#
print ( 'Operation#SPACE#completed#SPACE#successfully.' ) #NEWLINE#
return '\n' . join ( lines ) #NEWLINE#
return func ( * args , ** kw ) #NEWLINE#
z , x , y = np . loadtxt ( 'data.txt' , usecols = [ 0 , 5 , 6 ] ) . T #NEWLINE#
my_list [ 0 ] . decode ( 'utf-8' ) #NEWLINE#
private [ 'ISH' ] = private . HolidayName . str . lower ( ) . str . contains ( 'holiday|recess' ) #NEWLINE#
plt . text ( 4 , 1 , t , ha = 'left' , rotation = 15 ) #NEWLINE#
'Your#SPACE#Meal#SPACE#Price#SPACE#is#SPACE#%.2f' % mealPrice #NEWLINE#
plt . scatter ( x , y , marker = 'o' , c = 'b' , s = 10 , zorder = 10 ) #NEWLINE#
d [ 'spam' ] = 'spam#SPACE#spam#SPACE#spam' #NEWLINE#
[ list ( g ) for _ , g in groupby ( sorted ( flat , key = len ) , key = len ) ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
a , b , c = [ list ( g ) for k , g in it . groupby ( mylist , keyfunc ) ] #NEWLINE#
ws . column_dimensions [ 'C' ] . width = 60.0 #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 0 , 1 ] , 'B' : [ 1 , 6 ] } ) #NEWLINE#
return axes . hist ( x , * args , bins = binedges , weights = weights , ** kwargs ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
myList = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
ALLOWED_HOSTS = [ 'www.example.com' ] #NEWLINE#
symbols ( 'a0:%d' % numEquations ) #NEWLINE#
from xml . dom import minidom #NEWLINE#
table = soup . find ( 'table' , { 'title' : 'TheTitle' } ) #NEWLINE#
wallpaper_dict [ 'data' ] [ 'children' ] [ 1 ] [ 'data' ] [ 'title' ] #NEWLINE#
canvas . setStrokeColorRGB ( 0 , 0 , 0 ) #NEWLINE#
matplotlib . use ( 'Agg' ) #NEWLINE#
assert isidentifier ( 'foo1_23' ) #NEWLINE#
self . opt . stdin . write ( string ) #NEWLINE#
response = urllib . request . urlopen ( 'http://example.com' ) #NEWLINE#
type ( a ) #NEWLINE#
parser . add_argument ( '--microseconds' , type = float , default = 0 ) #NEWLINE#
parser . add_argument ( '--milliseconds' , type = float , default = 0 ) #NEWLINE#
parser . add_argument ( '--minutes' , type = float , default = 0 ) #NEWLINE#
parser . add_argument ( '--hours' , type = float , default = 0 ) #NEWLINE#
parser . add_argument ( '--weeks' , type = float , default = 0 ) #NEWLINE#
data = np . zeros ( ( 200 , 200 ) , dtype = np . float ) #NEWLINE#
print ( 'x#SPACE#not#SPACE#equal#SPACE#0' ) #NEWLINE#
result = urllib . request . urlopen ( 'http://192.168.100.1:5280/' , data ) . read ( ) #NEWLINE#
id ( com1 . co_consts [ 0 ] ) == id ( com2 . co_consts [ 0 ] ) #NEWLINE#
spamreader = csv . reader ( csvfile , delimiter = '#SPACE#' , quotechar = '|' ) #NEWLINE#
return cursor . fetchall ( ) #NEWLINE#
env . Append ( BUILDERS = { 'Lint' : linter } ) #NEWLINE#
return list [ list . index ( target ) - 1 ] #NEWLINE#
pl . ylim ( 0 , ymax ) #NEWLINE#
mergeDf = pd . merge ( dfA , dfB , left_on = [ 'X' , 'Y' ] , right_on = [ 'X' , 'Y' ] ) #NEWLINE#
print ( sorted ( a , key = to_minutes ) ) #NEWLINE#
print ( open ( os . path . join ( '/proc' , pid , 'cmdline' ) , 'rb' ) . read ( ) ) #NEWLINE#
df = pd . read_table ( sio , sep = '\\s+' , parse_dates = [ 'dt' ] ) #NEWLINE#
[ 2 , 3 , 6 ] #NEWLINE#
array . sort ( key = lambda item : item is 0 ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE#
iv = Random . new ( ) . read ( 16 ) #NEWLINE#
axes [ 0 ] . axis ( 'image' ) #NEWLINE#
print ( config . get ( 'razor-assoc' , 'aws_secret_access_key' ) ) #NEWLINE#
[ remove_bad_substrings ( s ) for s in sites ] #NEWLINE#
ax2 = plt . subplot2grid ( ( 3 , 2 ) , ( 0 , 1 ) ) #NEWLINE#
net . addModule ( hidden1 ) #NEWLINE#
zelib . multiplier . argtypes = [ ctypes . c_float , ctypes . c_float ] #NEWLINE#
with open ( 'words.txt' , 'r' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# for word in line . split ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# pass #NEWLINE#
customers [ 'customer2' ] . append ( ( 'cereal' , 7 ) ) #NEWLINE#
d = { 'Report' : 1 , 'Article' : 2 , 'Book' : 3 } #NEWLINE# result = sorted ( mylist , key = lambda x : d [ x [ 0 ] ] ) #NEWLINE#
print ( 'Layer#SPACE#is#SPACE#a#SPACE#line#SPACE#layer' ) #NEWLINE#
print ( 'Layer#SPACE#is#SPACE#a#SPACE#polygon#SPACE#layer' ) #NEWLINE#
print ( 'Layer#SPACE#is#SPACE#a#SPACE#multi-polygon#SPACE#layer' ) #NEWLINE#
print ( 'foo' + '\\' ) #NEWLINE#
ax . xaxis . set_major_locator ( ticker . MultipleLocator ( 1 ) ) #NEWLINE#
setattr ( self , '__ordered_fields__' , [ ] ) #NEWLINE#
re_pattern = re . compile ( '[^\x00-\ud7ff\ue000-\uffff]' , re . UNICODE ) #NEWLINE# filtered_string = re_pattern . sub ( '�' , unicode_string ) #NEWLINE#
word [ - 1 : - len ( word ) - 1 : - 1 ] #NEWLINE#
path = os . path . join ( os . path . dirname ( __file__ ) , template_file ) #NEWLINE#
traceback . print_stack ( file = sys . stdout ) #NEWLINE#
return { n : g . drop ( '_merge' , 1 ) for n , g in df3 . groupby ( '_merge' ) } #NEWLINE#
py . plot ( data , filename = 'basic_line' , auto_open = False ) #NEWLINE#
print ( timestables ( 5 ) ) #NEWLINE#
etree . tostring ( fragment ) #NEWLINE#
sleep ( 10 ) #NEWLINE#
list ( result [ 0 ] [ 1 ] . keys ( ) ) #NEWLINE#
legend ( ( hB , hR ) , ( 'Apples' , 'Oranges' ) ) #NEWLINE#
d = pickle . load ( f , encoding = 'latin1' ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
return [ convert_value ( item ) for item in lst ] #NEWLINE#
df . update ( df2 ) #NEWLINE#
r = np . linspace ( 1 , 5 , n ) #NEWLINE#
n , bins , patches = plt . hist ( [ x , y ] ) #NEWLINE#
print ( 'disabled#SPACE#ctrl-y' ) #NEWLINE#
numpy . nanmax ( a ) #NEWLINE#
same_structure ( a [ 1 : ] , b [ 1 : ] ) #NEWLINE#
super ( UpdatedDict , self ) . __setitem__ ( key , value ) #NEWLINE#
fig . savefig ( '%03i.png' % i ) #NEWLINE#
plot ( c ( 0 , 1 ) , c ( 0 , 1 ) ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
np . resize ( a , 10 ) . reshape ( 5 , 2 ) #NEWLINE#
plt . clf ( ) #NEWLINE#
plt . figure ( num = None , figsize = ( 24 , 17 ) ) #NEWLINE#
app . config [ 'SECRET_KEY' ] = 'super-secret' #NEWLINE#
len ( df ) #NEWLINE#
all_columns = '+' . join ( DF . columns - [ 'y' ] ) #NEWLINE#
print ( drives ) #NEWLINE#
parser . add_argument ( 'arg2' ) #NEWLINE#
a [ ( i ) , : ] = map ( np . float32 , line . split ( ) ) #NEWLINE#
np . allclose ( OP ( cords , atoms , atom_proj ) , project_atom ( cords , atoms , atom_proj ) ) #NEWLINE#
screen . keypad ( 0 ) #NEWLINE#
( 0 , '%c' ) , #NEWLINE#
list ( test ) [ 0 ] #NEWLINE#
print ( ast . literal_eval ( input ( ) ) ) #NEWLINE#
fp = webdriver . FirefoxProfile ( ) #NEWLINE#
pylab . axis ( 'scaled' ) #NEWLINE# pylab . show ( ) #NEWLINE#
array ( [ True , True , False ] , dtype = bool ) #NEWLINE#
'\\)#SPACE#of#SPACE#' , '(class|group|namespace)' , '\\s+' , '(?P<class_name>.+)' #NEWLINE#
print ( 'Text#SPACE#indented#SPACE#4#SPACE#spaces:\n' ) #NEWLINE#
df = pd . DataFrame . from_dict ( d , orient = 'index' ) . reset_index ( ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
xs = np . array ( [ [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 1 ] ] ) * 1.0 #NEWLINE#
patt = '(?:Dr\\.|Mr\\.|.)*?[.!?]\\s?\\n?' #NEWLINE#
df . set_index ( keys = [ df . index . year , df . index . month ] ) . transpose ( ) #NEWLINE#
nsmap = { 'phylo' : 'http://www.phyloxml.org' } #NEWLINE# tree . xpath ( '//phylo:name[text()="Espresso"]' , namespaces = nsmap ) #NEWLINE#
"""""" . join ( '%2.2x' % ord ( c ) for c in s ) #NEWLINE#
array ( [ [ 0 , 1 , 2 , 3 ] , [ 4 , 5 , 6 , 7 ] , [ 8 , 9 , 10 , 11 ] ] ) #NEWLINE#
set ( MyList ) . intersection ( MyDict ) #NEWLINE#
os . environ [ 'PROGRAMFILES' ] #NEWLINE#
parent_parser = argparse . ArgumentParser ( add_help = False ) #NEWLINE#
functools . reduce ( op . mul , ( sum ( x ) for x in zip ( * list_ ) ) ) #NEWLINE#
plt . plot ( SX , SY , 'g' , alpha = 0.7 , lw = 3 ) #NEWLINE#
Point = collections . namedtuple ( 'Point' , [ 'x' , 'y' ] ) #NEWLINE#
ax . set_ylim ( ybnds ) #NEWLINE#
PROJECT_ROOT = os . path . realpath ( os . path . dirname ( __file__ ) ) #NEWLINE#
plot ( x , y1 ) #NEWLINE#
res = np . float32 ( out ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
my_list = [ { 'id' : 1 , 'val' : 123 } , { 'id' : 2 , 'val' : 456 } , { 'id' : 2 , 'val' : 789 } ] #NEWLINE#
return render_to_response ( 'comment_item.html' , { 'comment' : comment } ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
arr = numpy . array ( data ) #NEWLINE#
"""Returns#SPACE#a#SPACE#Unicode#SPACE#object#SPACE#on#SPACE#success,#SPACE#or#SPACE#None#SPACE#on#SPACE#failure""" #NEWLINE#
self . apple_button . Bind ( wx . EVT_BUTTON , self . apple_button_click ) #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
slice_list ( x , 7 ) #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
b = np . zeros ( ( 6 , 3 ) , dtype = 'int32' ) #NEWLINE#
36.6 , - 5.9 , 43.7 , - 14.6 , - 9.7 , - 8.6 , 34.7 , - 19.3 , - 15.5 , 19.3 , 21.4 , 3.9 , 34.0 , 29.8 #NEWLINE#
draw . ellipse ( ( 0 , 0 ) + size , fill = 0 ) #NEWLINE#
print ( md5sum ( 'utils.py' ) ) #NEWLINE#
timedelta ( hours = 2 ) #NEWLINE#
setattr ( C , 'noise' , noise ) #NEWLINE#
'hello#SPACE#%(name)s#SPACE#,#SPACE#how#SPACE#are#SPACE#you#SPACE#%(name)s,#SPACE#welcome#SPACE#%(name)s' % { 'name' : 'john' } #NEWLINE#
resource_filename ( 'MyPackage' , 'foo.dat' ) #NEWLINE#
[ - 0.7644875430808217 , 0.579935445918147 , - 0.2814847687566214 ] #NEWLINE#
print ( 'Response#SPACE#headers:' ) #NEWLINE#
ip = request . META . get ( 'REMOTE_ADDR' ) #NEWLINE#
d [ x ] . append ( y ) #NEWLINE#
a . append ( 'a' ) #NEWLINE#
form . set_all_readonly ( False ) #NEWLINE#
plt . gca ( ) . add_artist ( leg1 ) #NEWLINE#
plt . gca ( ) . add_artist ( leg5 ) #NEWLINE#
print ( 'covered_list=0' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
( data * vector [ : , ( None ) , ( None ) ] ) . sum ( axis = 0 ) #NEWLINE#
points , = ax . plot ( [ ] , [ ] , [ ] , 'k.' , markersize = 5 , alpha = 0.9 ) #NEWLINE#
window . show ( ) #NEWLINE#
np . set_printoptions ( suppress = True ) #NEWLINE#
response = HttpResponse ( myfile , content_type = 'audio/mpeg' ) #NEWLINE#
return repr ( s ) #NEWLINE#
[ 0.0 , 0.0 ] / sum ( [ 0.0 , 0.0 ] ) #NEWLINE#
arr . sum ( axis = 0 ) . shape #NEWLINE#
content = file . read ( ) #NEWLINE#
[ list ( g ) for k , g in groupby ( l , bool ) if k ] #NEWLINE#
from bokeh . plotting import figure , output_file , show #NEWLINE#
r . search ( 'smash#SPACE#atomic#SPACE#particles' ) . span ( ) #NEWLINE#
data = json . dumps ( data , cls = DjangoJSONEncoder ) #NEWLINE#
frame = pd . read_csv ( path , names = columns ) #NEWLINE#
xlim ( 0 , 1 ) #NEWLINE#
ax1 . axis [ 'top' ] . major_ticklabels . set_axis_direction ( 'top' ) #NEWLINE#
Location = models . PointField ( default = 'POINT(0.0#SPACE#0.0)' ) #NEWLINE#
result = Model . objects . exclude ( pk__in = qs . values_list ( 'pk' , flat = True ) ) #NEWLINE#
joined . query ( 'gvkey_x#SPACE#==#SPACE#@gvkey#SPACE#&#SPACE#@year#SPACE#-#SPACE#3#SPACE#<=#SPACE#year_y#SPACE#<=#SPACE#@year' ) #NEWLINE#
draw ( ) #NEWLINE#
group = Group . objects . get ( pk = 1 ) #NEWLINE#
return '' . join ( c . next ( ) ( x ) if x else '_' for x in value . split ( '_' ) ) #NEWLINE#
print ( ',#SPACE#' . join ( row [ 1 ] ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
p = subprocess . Popen ( command , stdout = subprocess . PIPE , stderr = subprocess . IGNORE ) #NEWLINE#
j . insert ( 'jacob' , 1 , 'marcus' , text = 'Marcus' ) #NEWLINE#
server . close ( ) #NEWLINE#
foo [ : ] [ 1 ] = 'two' #NEWLINE#
array ( [ 0 , 2 , 4 ] , dtype = int64 ) #NEWLINE#
Py_Initialize ( ) #NEWLINE#
server . connect ( 'smtp.gmail.com' , 'submission' ) #NEWLINE#
email . send ( ) #NEWLINE#
d = { } #NEWLINE#
MultiColumnLabelEncoder ( columns = [ 'fruit' , 'color' ] ) . fit_transform ( fruit_data ) #NEWLINE#
print ( df1 . groupby ( df1 . columns , axis = 1 ) . sum ( ) ) #NEWLINE#
self . close ( ) #NEWLINE#
df = pd . DataFrame ( m . toarray ( ) ) #NEWLINE#
browser . execute_script ( "arguments[0].innerText#SPACE#=#SPACE#'asdf';" , element ) #NEWLINE#
parent . kill ( ) #NEWLINE#
sys . stderr . close ( ) #NEWLINE#
B = np . array ( A ) #NEWLINE#
Qapp . exec_ ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
pdfdoc . writeToFile_ ( 'mynewfile.pdf' ) #NEWLINE#
f . write ( 'used\u200bZero' ) #NEWLINE#
_draw_point ( renderer , position , i , j ) #NEWLINE#
cluster_count = len ( set ( map ( representative , representatives ) ) ) #NEWLINE#
words . append ( Word ( 'kit' , [ 'patck' , 'bag' , 'gear' ] ) ) #NEWLINE#
words . append ( Word ( 'computer' , [ 'electronics' , 'PC' , 'abacus' ] ) ) #NEWLINE#
all = all [ : max ( current - 2 , 0 ) ] + all [ current : ] #NEWLINE#
print ( lol [ 1 : 4 , 2 : 5 ] ) #NEWLINE#
self . listofrecords [ listnum ] [ record ] = value #NEWLINE#
return True #NEWLINE#
sqllogger . addHandler ( sqlhandler ) #NEWLINE#
session . quit ( ) #NEWLINE#
indices = np . searchsorted ( u , arr . flat ) #NEWLINE#
return False #NEWLINE#
return self . a + self . b #NEWLINE#
return super ( ActiveOnly , self ) . get_queryset ( ) . filter ( active = True ) #NEWLINE#
dt_unaware = dt_aware . replace ( tzinfo = None ) #NEWLINE#
s = ',#SPACE#' . join ( l ) + ',' #NEWLINE#
print ( 'abc' . translate ( table , 'a' ) ) #NEWLINE#
hxs = HtmlXPathSelector ( response ) #NEWLINE#
l = [ 'paragraph#SPACE#1' , 'paragraph#SPACE#2' , 'paragraph#SPACE#3' ] #NEWLINE#
self . line_cycle = itertools . cycle ( [ '-' , ':' , '--' , '-.' ] ) #NEWLINE#
plot ( x , cos ( x ) ) #NEWLINE#
pprint ( ddiff ) #NEWLINE#
s = '\x00\x00\x00\x01\x00\x00\x00ÿÿ\x00\x00' #NEWLINE# map ( ord , s ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
df [ 'NEW_DATE' ] = df [ 'ACC_DATE' ] . apply ( lambda x : x - relativedelta ( years = 1 ) ) #NEWLINE#
print ( r . request . headers [ 'cookie' ] ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
example_df . iloc [ ( 1 ) , : ] . corr ( example_df . iloc [ ( 2 ) , : ] ) #NEWLINE#
print ( 'We#SPACE#have#SPACE#redirected!' ) #NEWLINE#
User . query . filter_by ( username = 'admin' ) . first ( ) #NEWLINE#
print ( zlib . decompress ( b ) ) #NEWLINE#
pdfmetrics . registerFont ( TTFont ( 'VeraBI' , 'VeraBI.ttf' ) ) #NEWLINE#
try : #NEWLINE# #INDENT# a = int ( yourstring ) #NEWLINE# except ValueError : #NEWLINE# #INDENT# print ( "can't#SPACE#convert" ) #NEWLINE#
[ x for xs in a for x in xs ] #NEWLINE#
merged = map ( list , zip ( listone , listtwo ) ) #NEWLINE#
mylist = [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 3 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 , 5 ] #NEWLINE#
connection . close ( ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
iter ( a ( ) . values ( ) ) #NEWLINE#
self . __class__ . bar ( self ) #NEWLINE#
crypto . verify ( cert , self . sig , data , 'sha1' ) #NEWLINE#
driver . switch_to_frame ( 'frame#SPACE#name' ) #NEWLINE#
records_array = array ( [ 1 , 2 , 3 , 1 , 1 , 3 , 4 , 3 , 2 ] ) #NEWLINE#
df2 [ 'lagged_val' ] = df2_lagged #NEWLINE#
df . set_index ( cols ) . groupby ( level = cols ) [ 'p234_r_c' ] . nlargest ( 1 ) . reset_index ( ) #NEWLINE#
server . sendmail ( FROM , TO , message ) #NEWLINE#
plt . ylim ( - 3 , 6 ) #NEWLINE#
( 'minute' , 60 ) , #NEWLINE#
ax . scatter ( x , y , z ) #NEWLINE#
cbar . set_ticklabels ( [ m0 , m1 , m2 , m3 , m4 ] ) #NEWLINE#
{ 'and' : 'CONJ' , 'go' : 'VERB' , 'have' : 'VERB' , 'tree' : 'NOUN' } #NEWLINE#
print ( '{0:e}#SPACE#{1:e}' . format ( True , False ) ) #NEWLINE#
sys . stdout . write ( 'Download#SPACE#progress:#SPACE#%d%%#SPACE##SPACE##SPACE#\r' % progress ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( np . vstack ( ndmesh ( x_p , y_p , z_p ) ) . reshape ( 3 , - 1 ) . T ) #NEWLINE#
results = [ do_smth ( file . read ( ) ) for file in files ] #NEWLINE#
val , vec = scipy . sparse . linalg . eigs ( a , k = 1 , which = 'LM' ) #NEWLINE#
def is_new_style ( cls ) : #NEWLINE# #INDENT# return str ( cls ) . startswith ( '<class#SPACE#' ) #NEWLINE#
ar . sort ( ) #NEWLINE#
inputs = list ( map ( int , input ( ) . split ( ) ) ) #NEWLINE#
data = np . random . normal ( 0 , 20 , 1000 ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
bools = [ True , True , False , True , True , False , True ] #NEWLINE# print ( '' . join ( chr ( ord ( 'A' ) + i ) if b else '#SPACE#' for i , b in enumerate ( bools ) ) ) #NEWLINE#
x = np . array ( x , copy = False , ndmin = 1 ) #NEWLINE#
handler404 = Custom404 . as_view ( ) #NEWLINE#
a = [ '123' , '456' , '789' ] #NEWLINE# map ( list , a ) #NEWLINE#
s = pd . Series ( np . random . randn ( n ) . cumsum ( ) ) #NEWLINE#
plt . plot ( X [ i ] ) #NEWLINE#
out = [ float ( f_interp ( * p ) ) for p in zip ( X , Y ) ] #NEWLINE#
xlib = cdll . LoadLibrary ( 'libX11.so' ) #NEWLINE#
return alpha . upper ( ) + '#SPACE#' + num #NEWLINE#
arr . reshape ( rows // 3 , 3 , cols // 3 , 3 ) . sum ( axis = ( 1 , 3 ) ) / 9 #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
m . groupdict ( ) [ 'arguments' ] #NEWLINE#
self . delete ( 0 , Tkinter . END ) #NEWLINE#
PYTHONPATH = '$PYTHONPATH:/usr/local/lib/vtk-5.6' #NEWLINE#
a [ 0 ] = [ 1 , 2 ] #NEWLINE#
print ( isinstance ( MyClass , MyClass ( ) ) ) #NEWLINE#
def find_min_id ( l ) : #NEWLINE# #INDENT# return min ( l , key = lambda d : d . get ( 'id' , float ( 'inf' ) ) ) [ 'id' ] #NEWLINE#
plt . scatter ( X , Y ) #NEWLINE#
pool . join ( ) #NEWLINE#
main ( ) #NEWLINE#
l = [ ] #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
def sort_string ( string ) : #NEWLINE# #INDENT# return '' . join ( sorted ( string ) ) #NEWLINE#
return s [ 1 : ] . isdigit ( ) #NEWLINE#
print ( dtd . validate ( root ) ) #NEWLINE#
data = { 'Japan' : 'æ\x97¥æ\x9c¬' } #NEWLINE#
return True #NEWLINE#
ax . set_xticklabels ( labels , minor = False ) #NEWLINE#
smallest_range ( list1 , list2 , list3 ) #NEWLINE#
[ ( x if x is not None else '' ) for x in l ] #NEWLINE#
[ given [ i : i + len ( sublist ) ] for i in range ( 0 , len ( given ) - len ( sublist ) ) ] #NEWLINE#
out = data [ np . in1d ( data [ : , ( 1 ) ] , goodIDs ) ] #NEWLINE#
df1 = DataFrame ( { 'test_set' : value for value in test_set } ) #NEWLINE#
halo = Image . new ( 'RGBA' , img . size , ( 0 , 0 , 0 , 0 ) ) #NEWLINE#
topping = models . ForeignKey ( 'Topping' ) #NEWLINE#
print ( 'My#SPACE#name#SPACE#is:#SPACE#%s' % funcname ( ) ) #NEWLINE#
tz = pytz . timezone ( 'America/Los_Angeles' ) #NEWLINE#
print ( 'Result#SPACE#Data:' , c . fetchone ( ) ) #NEWLINE#
df . mean ( ) #NEWLINE#
print ( 'starting#SPACE#the#SPACE#subprocess\n' ) #NEWLINE#
admin . site . register ( Foo , FooAdmin1 ) #NEWLINE#
return [ seq [ i : i + k ] for i in range ( 0 , len ( seq ) , k ) ] #NEWLINE#
plt . ylim ( - 0.1 , 1.1 ) #NEWLINE#
np . vstack ( np . unravel_index ( indices , arr . shape ) ) . T #NEWLINE#
unwrap_method ( get_func ) is unwrap_method ( Client . get ) #NEWLINE#
return Permission . objects . all ( ) #NEWLINE#
run ( 'date' ) #NEWLINE#
list ( itertools . starmap ( min , [ ( 1 , 2 ) , ( 2 , 2 ) , ( 3 , 2 ) ] ) ) #NEWLINE#
subparsers . add_parser ( 'sleep' , help = 'log#SPACE#sleep' ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
df . groupby ( pd . TimeGrouper ( '30s' , closed = 'right' ) ) . mean ( ) #NEWLINE#
setattr ( something , k , v ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
ts . ix [ ts . index . indexer_between_time ( datetime . time ( 10 ) , datetime . time ( 14 ) ) ] #NEWLINE#
sock . close ( ) #NEWLINE#
main ( ) #NEWLINE#
return list ( set ( x [ 0 ] ) . union ( * x [ 1 : ] ) ) #NEWLINE#
List . append ( Item ) #NEWLINE#
graph . es [ 10 : 20 ] [ 'weight' ] = list ( range ( 10 ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df . plot ( x = 'lat' , y = 'lon' , kind = 'scatter' , ax = ax1 ) #NEWLINE#
roomname = urllib . parse . unquote ( self . request . get ( 'roomname' ) ) #NEWLINE#
np . hstack ( [ a1 . reshape ( - 1 , 1 ) , a2 , a3 ] ) #NEWLINE#
kde . integrate_box_1d ( 1 , 2 ) #NEWLINE#
a . set_xticklabels ( '' ) #NEWLINE#
def my_method ( self ) : #NEWLINE# #INDENT# print ( 'hello#SPACE#kitty!' ) #NEWLINE#
password = getpass . getpass ( ) #NEWLINE#
sys . stdout . write ( out ) #NEWLINE#
bstr [ 0 ] #NEWLINE#
A [ ( 1 ) , ( 1 ) , : ] #NEWLINE#
foo = foo [ : - 3 ] #NEWLINE#
df1 = pd . DataFrame ( { 'a' : [ 1 , 2 ] , 'b' : [ 3.0 , 4.0 ] } ) #NEWLINE# df2 = pd . DataFrame ( { 'a' : [ 1 , 2 ] , 'b' : [ np . nan , 4.0 ] } ) #NEWLINE#
print ( [ str ( x ) for x in l ] ) #NEWLINE#
set . intersection ( * lis ) #NEWLINE#
[ [ 0 , 1 ] [ name . split ( ) [ - 1 ] in set ( B ) ] for name in A ] #NEWLINE#
print ( ( 'Old:#SPACE#' , teststr , '#SPACE#New:#SPACE#' , '' . join ( newchars ) ) ) #NEWLINE#
self . sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
form . fields [ 'myuser' ] . queryset = User . objects . filter ( groups__name__in = [ #NEWLINE# 'foo' , 'bar' ] ) #NEWLINE#
panel . pack ( side = 'bottom' , fill = 'both' , expand = 'yes' ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE##SPACE#-#SPACE#oauth_token_secret#SPACE#=#SPACE#%s' % access_token [ 'oauth_token_secret' ] ) #NEWLINE#
window . addch ( 'Ï\x80' ) #NEWLINE#
self . parser . result . append ( '#SPACE#' . join ( self . result ) ) #NEWLINE#
browser . back ( ) #NEWLINE#
{ 'a' : { 'A' : { '1' : { } , '2' : { } } , 'B' : { '1' : { } , '2' : { } } } , 'b' : { 'A' : { '1' : #NEWLINE# { } , '2' : { } } , 'B' : { '1' : { } , '2' : { } } } } #NEWLINE#
return '#SPACE#' . join ( s . split ( ) ) #NEWLINE#
True in set ( map ( lambda x : x [ 0 ] == 1 , a_list ) ) #NEWLINE#
output . addPage ( page ) #NEWLINE#
'word' in brown . words ( categories = 'news' ) #NEWLINE#
regex = re . compile ( pattern , re . MULTILINE | re . DOTALL ) #NEWLINE#
sck = socks . socksocket ( ) #NEWLINE#
open ( 'filename' , 'a+b' ) #NEWLINE#
download = text . find_all ( 'a' , href = re . compile ( '\\.mp3$' ) ) #NEWLINE#
w . show ( ) #NEWLINE#
print ( solution ( list ( range ( 1 , 2000 ) ) ) ) #NEWLINE#
s = requests . session ( ) #NEWLINE#
__path__ = pkgutil . extend_path ( __path__ , __name__ ) #NEWLINE#
hsv_to_rgb = np . vectorize ( colorsys . hsv_to_rgb ) #NEWLINE#
( 'myapp' , 'previous_migration' ) , #NEWLINE#
self . setCursor ( QtCore . Qt . SplitHCursor ) #NEWLINE#
model . fit ( x [ : , ( None ) ] , y ) #NEWLINE#
df1 . columns = [ ( x + '_' + str ( y ) ) for x , y in df1 . columns ] #NEWLINE#
round ( decimal . Decimal ( '2.5' ) , 0 ) #NEWLINE#
sorted_strings ( L , 'en_US' ) #NEWLINE#
print ( soup . find ( 'strong' , text = 'some#SPACE#value' ) . parent == soup . find ( 'strong' ) ) #NEWLINE#
ex1 . to_csv ( 'example.csv' , index = False , header = False ) #NEWLINE#
url_list . append ( site . xpath ( 'a/@href' ) . extract ( ) ) #NEWLINE#
worksheet . write_column ( 'C2' , data [ 2 ] ) #NEWLINE#
print ( 'succeeded!' ) #NEWLINE#
print ( 'failed!' ) #NEWLINE#
self . log . addHandler ( self . handler ) #NEWLINE#
gb = df [ df [ 'Value1' ] > 0 ] . groupby ( 'group' ) #NEWLINE#
chardet . detect ( elems [ 0 ] . getText ( ) ) #NEWLINE#
import mahotas #NEWLINE#
hwnd = win32gui . FindWindow ( None , windowname ) #NEWLINE#
plt . figure ( 3 ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , - 1 , - 2 , - 3 ] ) #NEWLINE#
plt . xlim ( [ 0 , 0.35 ] ) #NEWLINE#
pdf = pisa . pisaDocument ( StringIO . StringIO ( html ) , result , encoding = 'UTF-8' ) #NEWLINE#
logger . error ( 'an#SPACE#error' ) #NEWLINE#
path = os . path . dirname ( os . path . abspath ( filename ) ) #NEWLINE#
"""""" . join ( traceback . format_stack ( ) ) #NEWLINE#
service . setServiceParent ( application ) #NEWLINE#
'%.2E' % Decimal ( '40800000000.00000000000000' ) #NEWLINE#
sys . getwindowsversion ( ) [ 0 ] >= 6 #NEWLINE#
app . exec_ ( ) #NEWLINE#
x = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 1 , 2 ] , [ 2 , 2 , 2 ] , [ 3 , 3 , 3 ] ] , np . int32 ) #NEWLINE#
sns . violinplot ( data = d , inner = 'points' , ax = ax ) #NEWLINE#
print ( LH . tostring ( doc , pretty_print = True ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
start_time = time . time ( ) #NEWLINE#
[ 0 , 1 , 2 , 3 ] #NEWLINE#
return self . forms [ self . initial_form_count ( ) : ] #NEWLINE#
str ( Decimal ( '10.00' ) ) #NEWLINE#
s [ s . find ( ':' ) + 1 : ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
for i in range ( x . shape [ 1 ] ) : #NEWLINE# #INDENT# x [ : , ( i ) ] = np . roll ( x [ : , ( i ) ] , i ) #NEWLINE#
p = Pool ( 1 ) #NEWLINE#
keys [ - 1 ] in lastplace #NEWLINE#
print ( '{0}#SPACE#line(s)#SPACE#printed' . format ( i + 1 ) ) #NEWLINE#
result = cv2 . matchTemplate ( image , template , cv2 . TM_CCOEFF_NORMED ) #NEWLINE#
ax . set_ylim ( bottom = 0 ) #NEWLINE#
parser . add_argument ( '-f' , action = PwdAction , nargs = 0 ) #NEWLINE#
s = re . sub ( '23$' , 'penguins' , s ) #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
TEST_RUNNER = 'my_project.tests.runner.AppsTestSuiteRunner' #NEWLINE#
df = xl . parse ( 0 , converters = { i : str for i in range ( ncols ) } ) #NEWLINE#
dict_lol = { item [ 1 ] : item for item in lol } #NEWLINE#
the_queue . put ( 'world' ) #NEWLINE#
today = datetime . datetime . today ( ) #NEWLINE#
re . findall ( regex , statements , re . I ) #NEWLINE#
df . groupby ( 'Group' ) . filter ( lambda x : len ( x ) >= 4 and x [ 'SomeQuantity' ] . max ( #NEWLINE# ) >= 20 ) #NEWLINE#
bridgeport = get_tides ( 'bridgeport.txt' ) #NEWLINE#
self . transport . write ( data ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
csvfile . seek ( 0 ) #NEWLINE#
s = re . sub ( '^12' , 'penguins' , s ) #NEWLINE#
player_list . append ( player ) #NEWLINE#
name = models . CharField ( max_length = 30 ) #NEWLINE#
id ( d [ 'c' ] ) #NEWLINE#
admin . autodiscover ( ) #NEWLINE#
main ( ) #NEWLINE#
ax . set_rmax ( 1.25 ) #NEWLINE#
cur . execute ( sat ) #NEWLINE#
G . add_edges_from ( [ ( 'A' , 'B' ) , ( 'C' , 'D' ) , ( 'G' , 'D' ) ] , weight = 1 ) #NEWLINE#
test_Dict [ 'abc' ] . name #NEWLINE#
os . chdir ( sys . argv [ 0 ] . rsplit ( os . sep , 1 ) [ 0 ] ) #NEWLINE#
super ( AddRemoteField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
b . shape #NEWLINE#
connection . putrequest ( 'POST' , '/' ) #NEWLINE#
c = Counter ( [ 1 , 2 , 3 , 4 , 3 , 3 , 2 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 6 , 5 ] ) #NEWLINE#
time = datetime . now ( ) #NEWLINE# time . timetuple ( ) #NEWLINE#
return foo #NEWLINE#
a + b * c #NEWLINE#
MEDIA_URL = '/media/' #NEWLINE#
"""#SPACE#""\"#SPACE#""" #NEWLINE#
pass #NEWLINE#
[ ( 8 , 9 , 10 , 11 ) , ( 1 , 2 , 3 , 4 , 5 , 6 ) ] #NEWLINE#
print ( 'second#SPACE#resize:#SPACE#' + str ( ( x , y ) ) ) #NEWLINE#
arr . resize ( ( k , M ) ) #NEWLINE#
ax [ 0 ] . imshow ( np . random . rand ( 30 , 30 ) , interpolation = 'none' , cmap = cmap1 ) #NEWLINE#
print ( b [ 0 ] ) #NEWLINE#
y = 2 * np . sin ( x ) #NEWLINE#
recipientData = json . loads ( recipientContent . decode ( 'utf-8' , 'ignore' ) ) #NEWLINE#
get_version ( 'requests' ) #NEWLINE#
annotation . set_visible ( True ) #NEWLINE#
dataset = Dataset ( title = 'Sheet#SPACE#name' ) #NEWLINE#
f . close ( ) #NEWLINE#
for i in range ( 1 , 6 ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( match . group ( 1 ) ) #NEWLINE#
object . __setattr__ ( self , name , value ) #NEWLINE#
func ( ) #NEWLINE#
[ 'fox' , 'foX' , 'fOx' , 'fOX' , 'Fox' , 'FoX' , 'FOx' , 'FOX' ] #NEWLINE#
reader = csv . DictReader ( f , delimiter = ';' ) #NEWLINE#
counts [ item ] += 1 #NEWLINE#
r = requests_session . get ( 'file:///path/to/your/file' ) #NEWLINE#
pipeline . fit ( X , Y ) #NEWLINE#
cfgfile . close ( ) #NEWLINE#
im . resize ( size , Image . BILINEAR ) #NEWLINE#
print ( "Key#SPACE#'{}'#SPACE#appears#SPACE#{}#SPACE#unique#SPACE#times" . format ( key , keys . count ( key ) ) ) #NEWLINE#
env . use_ssh_config = True #NEWLINE#
polB . set_transform ( tB ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# print ( sum ( l , ( ) ) ) #NEWLINE#
reader = csv . reader ( toverd , delimiter = '|' , quoting = csv . QUOTE_NONE ) #NEWLINE#
clipboard . store ( ) #NEWLINE#
cursor . execute ( 'SET#SPACE#search_path#SPACE#TO#SPACE#t' + str ( tenant_id ) + ',#SPACE#shared;' ) #NEWLINE#
np . all ( [ i for i in range ( 10 ) ] ) #NEWLINE#
pd . DataFrame ( list ( d . values ( ) ) , index = pd . MultiIndex . from_tuples ( list ( d . keys ( #NEWLINE# ) ) , names = [ 'id' , 'act_type' ] ) ) #NEWLINE#
l = [ '1' , '1' , '1' , '1' , '1' , '1' , '2' , '2' , '2' , '2' , '7' , '7' , '7' , '10' , #NEWLINE# '10' ] #NEWLINE#
self . exif [ GPS + 'MapDatum' ] = 'WGS-84' #NEWLINE#
sess . run ( init_op ) #NEWLINE#
os . mkdir ( '../new_dir' ) #NEWLINE#
for line in codecs . open ( infile , 'r' , 'cp1252' ) : #NEWLINE# #INDENT# writer . write ( line ) #NEWLINE#
mylist . append ( first_el ) #NEWLINE#
reader = csv . DictReader ( data , delimiter = ',' , quotechar = '"' ) #NEWLINE#
driver . get ( 'page_with_download_link' ) #NEWLINE#
import_module ( '.' , 'foo' ) #NEWLINE#
raise ValueError ( 'value#SPACE#%s#SPACE#too#SPACE#large#SPACE#for#SPACE#buffer' , repr ( value ) ) #NEWLINE#
lbl3 . grid ( row = 2 , column = 0 ) #NEWLINE#
plt . title ( 'Original,#SPACE#template#SPACE#in#SPACE#blue' ) , plt . xticks ( [ ] ) , plt . yticks ( [ ] ) #NEWLINE#
for key , value in orig_dict : #NEWLINE# #INDENT# new_dict [ key ] . extend ( value ) #NEWLINE#
idx = list ( range ( len ( S ) ) ) #NEWLINE#
return obj . __class__ . _default_manager . get ( pk = obj . pk ) #NEWLINE#
opener = urllib . request . build_opener ( ) #NEWLINE# f = opener . open ( 'https://www.google.com/' ) #NEWLINE#
'text' , '{a}' , 'text' , None , '' #NEWLINE#
lines . append ( '\t' . join ( map ( str , row ) ) ) #NEWLINE#
return dict ( page = context ) #NEWLINE#
M12 = M1 * M1 #NEWLINE#
d [ i ] . append ( int ( j ) ) #NEWLINE#
[ 'No' , 'Yes' ] [ True ] #NEWLINE#
[ list ( islice ( it , i ) ) for i in b ] #NEWLINE#
arg_dict = lambda l : dict ( zip ( l . split ( ',#SPACE#' ) , eval ( l ) ) ) #NEWLINE#
db . connections . close_all ( ) #NEWLINE#
setattr ( self , 'Foo' , val ) #NEWLINE#
plot ( list_of_dates , counts ) #NEWLINE#
imgL = cv2 . imread ( 'SuXT483.png' , 0 ) #NEWLINE#
spamreader = csv . reader ( MYMEMORYFILE_HERE , delimiter = '#SPACE#' , quotechar = '|' ) #NEWLINE#
logging . getLogger ( 'gunicorn' ) . propagate = False #NEWLINE#
df . columns . name = 'COLLECTION_DATE' #NEWLINE#
br . addheaders = [ ( 'User-agent' , 'your#SPACE#user#SPACE#agent#SPACE#string#SPACE#here' ) ] #NEWLINE#
urlpatterns = [ url ( '^' , 'core.views.home' , name = 'home' ) ] #NEWLINE#
fs . noteoff ( 0 , 60 ) #NEWLINE#
print ( 'Hello,#SPACE#world!' ) #NEWLINE#
self . treestore . append ( piter , [ 'inconsistent' ] ) #NEWLINE#
z = [ int ( i == j ) for i , j in zip ( x , y ) ] #NEWLINE#
return static_file ( path , root = 'static' ) #NEWLINE#
re . match ( '(A+)(A)(A+)' , 'AAAAAAAAA' ) #NEWLINE#
rdd1 = sc . parallelize ( [ 'A' , 'B' , 'C' , 'A' , 'Z' ] ) #NEWLINE#
print ( [ joiner ( words ) for words in sixgrams ] ) #NEWLINE#
'longlong' , 'product' , 'int16' , 'str_' , 'mat' , 'fv' , 'max' #NEWLINE#
'radians' , 'fliplr' , 'alen' , 'recarray' , 'modf' , 'mean' , 'square' #NEWLINE#
'put' , 'byte' , 'remainder' , 'row_stack' , 'expm1' , 'nper' , 'ndfromtxt' #NEWLINE#
'ndim' , 'rint' , 'number' , 'rank' , 'little_endian' , 'ldexp' , 'lookfor' #NEWLINE#
'sometrue' , 'exp2' , 'bool8' , 'msort' , 'alltrue' , 'zeros' , 'False_' #NEWLINE#
'logical_not' , 'average' , 'partition' , 'nbytes' , 'exp' , 'sum' , 'dot' #NEWLINE#
'float64' , 'log1p' , 'ushort' , 'equal' , 'cumprod' , 'float_' , 'vander' #NEWLINE#
'conj' , 'asmatrix' , 'inf' , 'flatiter' , 'bitwise_xor' , 'fabs' , 'generic' #NEWLINE#
'ERR_IGNORE' , 'polysub' , 'fromfile' , 'prod' , 'nanmax' , 'core' , 'who' #NEWLINE#
'squeeze' , 'int8' , 'info' , 'seterr' , 'argmin' , 'genfromtxt' , 'maximum' #NEWLINE#
'delete' , 'tril' , 'int' , 'ediff1d' , 'char' , 'single' , 'loadtxt' #NEWLINE#
'polyadd' , 'nan' , 'TooHardError' , 'emath' , 'arctan' , 'bmat' , 'isclose' #NEWLINE#
format ( 3.2 , '.50f' ) #NEWLINE#
ctx . set_source_rgb ( 1 , 0 , 0 ) #NEWLINE#
print ( message . get_body_encoded ( ) ) #NEWLINE#
print ( 'With#SPACE#overlapping:' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
img = Image . open ( 'image.png' ) . convert ( 'LA' ) #NEWLINE# img . save ( 'greyscale.png' ) #NEWLINE#
sock . listen ( 1 ) #NEWLINE#
zipped = zip ( * l ) #NEWLINE#
A [ : , ( [ 1 , 2 ] ) ] #NEWLINE#
random . shuffle ( rest ) #NEWLINE#
np . may_share_memory ( data , data [ [ 1 , 3 , 4 ] ] ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE#
str ( { } ) #NEWLINE#
doSomething ( ) #NEWLINE#
y = x . reshape ( x . shape [ 0 ] / 2 , 2 , x . shape [ 1 ] / 2 , 2 ) #NEWLINE#
for column in zip ( * matrix ) : #NEWLINE# #INDENT# do_something ( column ) #NEWLINE#
print ( 'Match!' ) #NEWLINE#
array_to_filter [ np . in1d ( array_to_filter , equal_array ) ] #NEWLINE#
os2 = imp . load_module ( 'os2' , * imp . find_module ( 'os' ) ) #NEWLINE#
s = list ( filter ( str . isalnum , s ) ) #NEWLINE#
f . write ( '.%d%s' % ( len ( rand_str ) , rand_str ) ) #NEWLINE#
dataArray = np . array ( list ( chain ( * data ) ) , shape = ( 100 , 3 ) ) #NEWLINE#
tar . close ( ) #NEWLINE#
return self . _socket . recv ( buffersize , flags ) #NEWLINE#
george = Author . objects . get ( name = 'George' ) #NEWLINE#
s . describe ( ) [ [ 'count' , 'mean' ] ] #NEWLINE#
len ( re . findall ( '(?=11)' , text ) ) #NEWLINE#
df4 . plot ( kind = 'bar' , ax = ax [ 1 ] ) #NEWLINE#
send_mail ( subject , message , settings . DEFAULT_FROM_EMAIL , [ self . user . email ] ) #NEWLINE#
df . query ( '3.3#SPACE#<#SPACE#A#SPACE#<#SPACE#6.6' ) #NEWLINE#
contains_seq ( list ( range ( 10 ) ) , [ 2 , 3 , 6 ] ) #NEWLINE#
ax . set_xlabel ( 'xlabel' , fontsize = 14 , color = 'b' ) #NEWLINE#
'%x-%5x-%#5x-%05x-%#05x' % ( 12 , 12 , 12 , 12 , 12 ) #NEWLINE#
{ 'A' : 4 , 'B' : 7 , 'C' : 12 , 'D' : - 15 } #NEWLINE#
lst . insert ( randrange ( len ( lst ) + 1 ) , item ) #NEWLINE#
bin ( 10 ) #NEWLINE#
os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) ) #NEWLINE#
self . fc2 . draw ( ) #NEWLINE#
[ getrange ( x ) for x in newlist ] #NEWLINE#
a [ 1 , 0 ] + a [ 1 , 2 ] + a [ 1 , 3 ] + a [ 1 , 4 ] #NEWLINE#
self . navigate ( 1 ) #NEWLINE#
A = np . array ( [ [ 1 , 1 ] , [ 2 , 2 ] , [ 3 , 3 ] ] ) #NEWLINE#
s = '238#SPACE#NEO#SPACE#Sports' #NEWLINE# s . split ( '#SPACE#' , 1 ) #NEWLINE#
data = { 'path' : '/var/blah' , 'curr' : '1.1' , 'prev' : '1.0' } #NEWLINE# s = 'path:#SPACE#%(path)s#SPACE#curr:#SPACE#%(curr)s#SPACE#prev:#SPACE#%(prev)s' % data #NEWLINE#
return '' . join ( s ) #NEWLINE#
j = index - d * ( d - 1 ) / 2 + ( d - i ) * ( d - i - 1 ) / 2 + i + 1 #NEWLINE#
df [ 'A' ] , df [ 'B' ] = df [ 'AB' ] . str . split ( '-' , 1 ) . str #NEWLINE# df #NEWLINE#
username = db . Column ( db . String ( 80 ) , unique = True ) #NEWLINE#
return map ( int , s . split ( ',' ) ) #NEWLINE#
d . pop ( 'inside' ) #NEWLINE# list ( d . keys ( ) ) #NEWLINE#
print ( s . find ( 'John' , 0 , s . index ( ',' ) ) ) #NEWLINE#
np . allclose ( old , new ) #NEWLINE#
print ( now . replace ( hour = 0 ) ) #NEWLINE#
root . update ( ) #NEWLINE#
print ( p . pattern ) #NEWLINE#
'approved' , { 'position' : 1 , 'status_for' : 'owner' } #NEWLINE#
'pending' , { 'position' : 1 , 'status_for' : 'all' } #NEWLINE#
return NULL #NEWLINE#
return list ( set ( x [ - 1 ] ) . union ( * x [ 1 : ] ) ) #NEWLINE#
tz = pytz . timezone ( 'Australia/Melbourne' ) #NEWLINE#
itdb_device_set_sysinfo ( db . _itdb . device , 'ModelNumStr' , 'FOOBAR' ) #NEWLINE#
with open ( 'test.txt' , 'r' ) as f : #NEWLINE# #INDENT# myString = f . read ( ) . decode ( 'latin-1' ) #NEWLINE#
[ '' . join ( v ) for k , v in groupby ( st , key = lambda e : next ( it_lst ) ) ] #NEWLINE#
b = np . dot ( a , c ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
line = '<p#SPACE#class="{0}">{1}</p>\n' . format ( class_name , line . rstrip ( ) ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
[ ( 'NNP' , 'VBP' ) , ( 'VBP' , 'NN' ) , ( 'NN' , 'VBP' ) , ( 'VBP' , 'WRB' ) ] #NEWLINE# [ ( 'NNP' , 'WRB' ) , ( 'WRB' , 'VBP' ) , ( 'VBP' , 'PRP' ) , ( 'PRP' , 'NN' ) ] #NEWLINE#
max ( loc for loc , val in enumerate ( li ) if val == 'a' ) #NEWLINE#
client . set_options ( soapheaders = ssn ) #NEWLINE#
from functools import reduce #NEWLINE# return sorted ( reduce ( set . union , sequences , set ( ) ) ) #NEWLINE#
array ( [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] , [ 9 , 10 , 11 ] ] ) #NEWLINE#
[ 0.02408333 , 0.00625 , 0.03916667 , 0.00658333 ] , #NEWLINE#
[ 0.11808333 , 0.13583333 , 0.00625 , 0.02225 ] , #NEWLINE#
def nearest ( items , pivot ) : #NEWLINE# #INDENT# return min ( items , key = lambda x : abs ( x - pivot ) ) #NEWLINE#
print ( 'starting#SPACE#{0}#SPACE#with#SPACE#{1}' . format ( func . __name__ , args [ 0 ] ) ) #NEWLINE#
QtGui . QLabel . __init__ ( self ) #NEWLINE#
setattr ( modadd , camel_name , f ) #NEWLINE#
Test = type ( 'Test' , ( object , ) , { '__init__' : __init__ , 'printX' : printX } ) #NEWLINE#
f = open ( tmpFile , 'w' ) #NEWLINE#
df2 = df2 . reset_index ( ) #NEWLINE#
self . response . headers . add_header ( 'Access-Control-Allow-Origin' , '*' ) #NEWLINE#
t . substitute ( name = 'Lionel' , adjective = 'awesome' , noun = 'dude' , verb = 'snores' ) #NEWLINE#
driver . switch_to_default_content ( ) #NEWLINE#
gul = ctypes . windll . kernel32 . GlobalUnlock #NEWLINE#
return func ( obj , * args , ** kw ) #NEWLINE#
return dict ( zip_longest ( keys , values , fillvalue = default ) ) #NEWLINE#
image = cv2 . cvtColor ( image , cv2 . COLOR_RGB2GRAY ) #NEWLINE#
Bar . py #NEWLINE#
a = [ [ 'a' , 'b' ] , [ 'c' ] ] #NEWLINE# print ( list ( itertools . chain . from_iterable ( a ) ) ) #NEWLINE#
Html_file . write ( html_str ) #NEWLINE#
path = os . path . join ( os . path . dirname ( __file__ ) , 'upload_stuff' ) #NEWLINE#
python - i #NEWLINE#
input ( 'Press#SPACE#the#SPACE#Enter#SPACE#key#SPACE#to#SPACE#shutdown...' ) #NEWLINE#
main ( sys . argv [ 1 ] ) #NEWLINE#
print ( f ( 3 ) ) #NEWLINE#
array ( [ 10 , 4 , 1 ] , dtype = int64 ) #NEWLINE#
t . slashdot ( 'username' , 'password' ) #NEWLINE#
return ET . fromstring ( t ) #NEWLINE#
plt . plot ( [ 1 , 2 ] , [ 0 , 4 ] , 'w' ) #NEWLINE#
len ( new_strs . split ( ) ) #NEWLINE#
log . setLevel ( logging . INFO ) #NEWLINE#
print ( 'arg1:#SPACE#%s#SPACE#arg2:#SPACE#%s' % ( arg1 , arg2 ) ) #NEWLINE#
'Three#SPACE#first#SPACE#values#SPACE#are:#SPACE#%f,#SPACE#%f#SPACE#and#SPACE#%f' % ( 3.14 , 2.71 , 1 ) #NEWLINE#
foundwords . extend ( words [ 1 : ] ) #NEWLINE#
self . minimize . setIcon ( QtGui . QIcon ( 'img/min.png' ) ) #NEWLINE#
img = Image . open ( sys . argv [ 1 ] ) . convert ( 'L' ) #NEWLINE#
QtGui . QMainWindow . __init__ ( self ) #NEWLINE#
results = sorted ( results , key = getaccountingdate , reverse = True ) #NEWLINE#
SILENCED_SYSTEM_CHECKS = [ '1_8.W001' ] #NEWLINE#
followers = twitter . get_followers_list ( screen_name = 'whatever' ) #NEWLINE#
print ( [ ( int ( num ) if float ( num ) . is_integer ( ) else num ) for num in li ] ) #NEWLINE#
del alist [ i ] #NEWLINE#
admin . site . unregister ( User ) #NEWLINE# admin . site . unregister ( Group ) #NEWLINE# admin . site . unregister ( Site ) #NEWLINE#
ticks = [ list ( zip ( list ( range ( 5 ) ) , ( 'a' , 'b' , 'c' , 'd' , 'e' ) ) ) ] #NEWLINE#
t . start ( ) #NEWLINE#
print ( ',#SPACE#' . join ( map ( sep , tags ) ) ) #NEWLINE#
np . count_nonzero ( [ [ 0 , 1 , 7 , 0 , 0 ] , [ 3 , 0 , 0 , 2 , 19 ] ] ) #NEWLINE#
self . stats . inc_value ( 'scheduler/enqueued/disk' , spider = self . spider ) #NEWLINE#
all ( i >= 30 for i in my_list2 ) #NEWLINE#
wf . close ( ) #NEWLINE#
logger . info ( parsed_item_info ) #NEWLINE#
df = pd . DataFrame ( { 'ID' : [ '1' , '2' , '3' ] , 'J1' : [ 0 , 2 , 3 ] , 'J2' : [ 1 , 4 , 5 ] } ) #NEWLINE#
tag . save ( ) #NEWLINE#
env . globals [ 'clever_function' ] = clever_function #NEWLINE#
return None #NEWLINE#
wb . SaveAs ( os . path . join ( os . getcwd ( ) , 'CM.xlsx' ) ) #NEWLINE#
cursor . execute ( sql ) #NEWLINE#
self . image . set_from_pixbuf ( loader . get_pixbuf ( ) ) #NEWLINE#
my_loc ( df , [ 'a' , 'c' , 'e' ] ) #NEWLINE#
return url #NEWLINE#
id = db . Column ( db . Integer , db . ForeignKey ( 'people.id' ) , primary_key = True ) #NEWLINE#
foo ( ) #NEWLINE#
webapp2 . RequestHandler . dispatch ( self ) #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
c . InteractiveShellApp . exec_files = [ '/path/to/myscript.py' ] #NEWLINE#
'Mary.*little#SPACE#lamb' , '.*[lL]ittle#SPACE#[Ll]amb' , '\\blittle\\b' , s , 'little' #NEWLINE#
s = 'abc#SPACE#абв' #NEWLINE# s . encode ( 'utf8' ) #NEWLINE#
self . wfile . flush ( ) #NEWLINE#
urlretrieve ( 'http://example.org' , 'outfile.dat' ) #NEWLINE#
nli . insert ( [ 'c' , [ 'o' , 'w' ] ] ) #NEWLINE#
d = { 'a' : 1 , 'c' : 10 , 'b' : 8 , 'e' : 11 , 'g' : 3 , 'f' : 2 } #NEWLINE#
plt . yscale ( 'log' ) #NEWLINE#
image = Image . open ( 'your_image.png' ) #NEWLINE#
plt . scatter ( x , y + np . std ( y ) , c = 'y' ) #NEWLINE#
for line in lines : #NEWLINE# #INDENT# outfile . write ( line ) #NEWLINE#
xl . Application . Run ( 'SaveHTML' ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
df . index . to_series ( ) . apply ( lambda x : x . strftime ( '%Y-%m-%d' ) ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
CE , BF , BC , BD , BE #NEWLINE#
return itertools . chain ( [ 3 ] , super ( ) . gen ( ) ) #NEWLINE#
do_stuff ( ) #NEWLINE#
cur . execute ( 'data#SPACE#you#SPACE#want#SPACE#to#SPACE#insert:#SPACE#%s' % data ) #NEWLINE#
perf_func ( root . getroot ( ) , print_level ) #NEWLINE#
x if f else random . choice ( good ) #NEWLINE#
self . txt . config ( font = ( 'consolas' , 12 ) , undo = True , wrap = 'word' ) #NEWLINE#
today = datetime . datetime . today ( ) #NEWLINE#
curs . fetchone ( ) #NEWLINE#
fd . close ( ) #NEWLINE#
set ( [ 9 , 3 , 4 , 5 ] ) #NEWLINE#
nearby_strikes = other_strikes . loc [ ind [ 0 ] : ind [ 1 ] - 1 ] . copy ( ) #NEWLINE#
"""abc""" [ : None ] #NEWLINE#
ssh_stdin , ssh_stdout , ssh_stderr = ssh . exec_command ( cmd_to_execute ) #NEWLINE#
'%.2f' % ( a if a != 0 else abs ( a ) ) #NEWLINE#
self . results . append ( result ) #NEWLINE#
register . filter ( 'format' , format ) #NEWLINE#
List . append ( Item ) #NEWLINE#
logging . debug ( 'This#SPACE#message#SPACE#should#SPACE#go#SPACE#to#SPACE#the#SPACE#log#SPACE#file' ) #NEWLINE#
'groupindex' , 'groups' , 'match' , 'pattern' , 'scanner' , 'search' #NEWLINE#
super ( deque , self ) . __init__ ( iterable , maxlen ) #NEWLINE#
sys . getsizeof ( ( 1 , 2 ) ) #NEWLINE#
str_id = '{:08}' . format ( max_key + 1 + i ) #NEWLINE#
self . response . out . write ( 'Updated.' ) #NEWLINE#
a [ 0 : 1 ] = [ 1 ] #NEWLINE#
print ( df . groupby ( 'A' ) . B . nunique ( ) ) #NEWLINE#
return super ( MyUserAdmin , self ) . get_form ( request , obj , ** kwargs ) #NEWLINE#
first_list = [ 1 , 2 , 3 , 4 ] #NEWLINE#
ax1 . semilogx ( data [ : , ( 1 ) ] , data [ : , ( 2 ) ] ) #NEWLINE#
results = pool . map ( solve1 , args ) #NEWLINE#
[ 'baaz' , 'mumble' ] #NEWLINE#
fig = plt . figure ( figsize = ( 10 , 8 ) ) #NEWLINE#
os . close ( fd ) #NEWLINE#
"""3/2""" #NEWLINE#
category3 [ { 'Banana' : 1 , 'Orange' : 3 } ] #NEWLINE#
user . password == 'foo' #NEWLINE#
df . loc [ : , ( df . std ( ) > 0.3 ) ] #NEWLINE#
super ( A , self ) . __init__ ( * a , ** k ) #NEWLINE#
"""many#SPACE##SPACE##SPACE#fancy#SPACE#word#SPACE##NEWLINE#hello#SPACE##SPACE##SPACE##SPACE##TAB#hi""" . split ( ) #NEWLINE#
print ( '\t{}' . format ( event ) ) #NEWLINE#
[ func ( mylist ) for func in map ( globals ( ) . get , fxnOfInterest ) ] #NEWLINE#
driver . get ( 'file:///D:/folder/abcd.html' ) #NEWLINE#
return os . path . join ( path , filename ) #NEWLINE#
print ( nounify ( 'spoke' ) ) #NEWLINE#
print ( p . communicate ( ) [ 0 ] ) #NEWLINE#
'#SPACE##SPACE#B' , 'canvas.bbox:' , ( 0 , 0 , 915 , 915 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 926 , 926 ) #NEWLINE#
'#SPACE##SPACE#C' , 'canvas.bbox:' , ( 0 , 0 , 915 , 915 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 926 , 926 ) #NEWLINE#
'#SPACE##SPACE#A' , 'canvas.bbox:' , ( 0 , 0 , 915 , 915 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 926 , 926 ) #NEWLINE#
'#SPACE##SPACE#B' , 'canvas.bbox:' , ( 0 , 0 , 1372 , 1372 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 926 , 926 ) #NEWLINE#
'#SPACE##SPACE#B' , 'canvas.bbox:' , ( 0 , 0 , 686 , 686 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 1372 , 1372 ) #NEWLINE#
'#SPACE##SPACE#C' , 'canvas.bbox:' , ( 0 , 0 , 686 , 686 ) , 'mplCanvas.bbox:' , ( 0 , 0 , 1372 , 1372 ) #NEWLINE#
a , b = b , a + b #NEWLINE#
self . canvas . bind ( '<Motion>' , self . crop ) #NEWLINE#
pd . DatetimeIndex ( df [ 'old#SPACE#column' ] ) . round ( '15min' ) #NEWLINE#
type ( d ) #NEWLINE#
part1 = MIMEText ( text , 'plain' ) #NEWLINE#
print ( finfo . dtype , finfo . nexp , finfo . nmant ) #NEWLINE#
raise AppropriateError ( 'password#SPACE#contains#SPACE#illegal#SPACE#characters' ) #NEWLINE#
list_of_hets = [ ] #NEWLINE#
sympy . evalf ( f , subs = dict ( zip ( fvars , b ) ) ) #NEWLINE#
threading . Thread ( target = thread_job ) . start ( ) #NEWLINE#
window . show ( ) #NEWLINE#
xl . Workbooks . Close ( ) #NEWLINE#
test_Dict [ str ( 'abc' ) ] . name #NEWLINE#
s = input ( ) #NEWLINE# numbers = map ( int , s . split ( ) ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
del L [ - n : ] #NEWLINE#
df . B . plot ( secondary_y = True , label = 'Comments' , legend = True ) #NEWLINE#
np . testing . assert_allclose ( [ np . nan ] , [ np . nan ] ) #NEWLINE#
{ { var } } #NEWLINE#
a . stdin . write ( 'input#SPACE#data' ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
w . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
request . add_header ( 'User-Agent' , 'foo#SPACE#bar#SPACE#useragent' ) #NEWLINE#
df = pd . read_csv ( 'matrix.txt' , sep = ',' , header = None , skiprows = 1000 , #NEWLINE# chunksize = 1000 ) #NEWLINE#
yield self . item ( i ) #NEWLINE#
data = udata . encode ( 'latin-1' , 'ignore' ) #NEWLINE#
root . rowconfigure ( 1 , weight = 1 ) #NEWLINE#
group . add_argument ( 'value' , nargs = '?' ) #NEWLINE#
y = np . arange ( 3 ) #NEWLINE#
q = A . select ( A , B ) . join ( B ) . where ( B . date == last_entry_date ) #NEWLINE#
r . close ( ) #NEWLINE#
( 2 , 2 ) , ( 2 , 3 ) , ( 2 , 4 ) , ( 3 , 2 ) , ( 3 , 3 ) , ( 3 , 4 ) , ( 4 , 2 ) , ( 4 , 3 ) , ( 4 , 4 ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
tree . write ( 'addressbook1.xml' ) #NEWLINE#
{ ( 0 ) : [ 'a' , 'x' ] , ( 9 ) : [ 'd' ] , ( 3 ) : [ 'b' , 'y' ] , ( 6 ) : [ 'c' ] } #NEWLINE#
return HttpResponse ( tmp . read ( ) , mimetype = 'application/x-zip-compressed' ) #NEWLINE#
l2 = [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) ] #NEWLINE#
index = d * ( d - 1 ) / 2 - ( d - i ) * ( d - i - 1 ) / 2 + j - i - 1 #NEWLINE#
from functools import reduce #NEWLINE# reduce ( truediv , a ) #NEWLINE#
OrderedDict ( [ ( '__module__' , '__main__' ) , ( 'red' , 1 ) , ( 'green' , 2 ) , ( 'blue' , 3 ) ] #NEWLINE# ) #NEWLINE#
canvas . bind ( '<ButtonPress-1>' , lambda ev : ev . widget . configure ( relief = 'sunken' ) ) #NEWLINE#
cart = request . session . get ( 'cart' , 'no#SPACE#cart' ) #NEWLINE#
dict . __setitem__ ( self , key , val ) #NEWLINE#
g . Category . apply ( pd . value_counts ) . unstack ( - 1 ) . fillna ( 0 ) #NEWLINE#
a [ i ] #NEWLINE#
[ tag . text for tag in soup . find_all ( 'a' ) ] #NEWLINE#
df #NEWLINE#
for x in L : #NEWLINE# #INDENT# del x [ 2 ] #NEWLINE#
w . writerow ( ( 'é' , 'ñ' ) ) #NEWLINE#
return value . __format__ ( format_spec ) #NEWLINE#
random . shuffle ( s ) #NEWLINE#
stack [ - 1 ] . append ( eval ( input ( 'some#SPACE#input#SPACE#from#SPACE#the#SPACE#user' ) ) ) #NEWLINE#
html = html . replace ( '>' , '>' ) #NEWLINE#
return a . upper ( ) == b . upper ( ) #NEWLINE#
parameters = { 'name' : 'Foo' , 'family' : 'Bar' } #NEWLINE#
sys . path . insert ( 0 , os . path . abspath ( '../../' ) ) #NEWLINE#
pool . join ( ) #NEWLINE#
"""kostya""" #NEWLINE#
( 1 , 0 , 3 ) , ( 1 , 2 , 3 ) , ( 2 , None , 1 ) , ( 2 , 0 , None ) , ( 2 , 2 , 2 ) , ( 2 , 2 , 4 ) #NEWLINE#
MySuperClass . __init__ ( self ) #NEWLINE#
dis . dis ( bar ) #NEWLINE#
self . Change ( self . variable ) #NEWLINE#
a2 [ ... ] = m . transpose ( 1 , 2 , 0 ) . tolist ( ) #NEWLINE#
df [ 'cumsum' ] = df [ 'cumsum' ] . fillna ( 0 ) #NEWLINE#
conn . perform ( ) #NEWLINE#
d = datetime . datetime . now ( ) #NEWLINE#
g . add_edge ( 1 , 2 ) #NEWLINE#
db . session . remove ( ) #NEWLINE#
print ( parser . parse_args ( 'foo#SPACE#cmd1#SPACE#bar#SPACE#-x#SPACE#one#SPACE#8#SPACE#9' . split ( ) ) ) #NEWLINE#
print ( [ c for c in cumsum ( ( ( 'a' , ) , ( 'b' , ) , ( 'c' , ) ) ) ] ) #NEWLINE#
df . to_records ( ) . dtype #NEWLINE#
print ( ',\t' . join ( a ) ) #NEWLINE#
a = [ ( [ k ] + [ x [ 1 ] for x in g ] ) for k , g in groupby ( r , key = lambda row : row [ 0 ] ) ] #NEWLINE#
print ( '{{{}}}' . format ( ',#SPACE#' . join ( str ( e ) for e in set ( [ 1 , '2' , 3.0 ] ) ) ) ) #NEWLINE#
dumps ( a . __dict__ , default = encode_b ) #NEWLINE#
data [ 'good' ] [ 'day' ] = True #NEWLINE#
fruit_list = [ 'apple' , 'banana' , 'peach' , 'plum' , 'pineapple' , 'kiwi' ] #NEWLINE# fruit = re . compile ( '|' . join ( fruit_list ) ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
do_stuff ( A [ i ] , A [ j ] ) #NEWLINE#
output += '{0:>15s}' . format ( i ) #NEWLINE#
a = 'ZENOVW' #NEWLINE# """""" . join ( sorted ( a ) ) #NEWLINE#
C = np . empty ( ( A . shape [ 0 ] + B . shape [ 0 ] , A . shape [ 1 ] ) ) #NEWLINE#
myList = [ item for item in data if item == 'number1' ] #NEWLINE#
a += [ 3 , 4 ] #NEWLINE#
root = Tk ( ) #NEWLINE#
return render_template ( 'base.html' , myusers = myusers ) #NEWLINE#
s = 'orange' #NEWLINE#
plt . barh ( positions , values , align = 'center' ) #NEWLINE#
script = os . path . abspath ( sys . argv [ 0 ] ) #NEWLINE#
with open ( 'file.txt' , 'a' ) as file : #NEWLINE# #INDENT# file . write ( 'input' ) #NEWLINE#
print ( sys . executable ) #NEWLINE#
mypadn = curses . newpad ( padhlines , padwcols ) #NEWLINE#
ast . literal_eval ( s ) #NEWLINE#
a = dt . strptime ( '10/12/13' , '%m/%d/%y' ) #NEWLINE#
self . setCentralWidget ( page ) #NEWLINE#
[ distance ( * pair ) for pair in zip ( repeat ( pts [ 0 ] ) , pts [ 1 : ] ) ] #NEWLINE#
item = next ( ( i for i in items if i == 'value' ) , None ) #NEWLINE#
G . add_edge ( 'Grandchild_%i' % i , 'Greatgrandchild_%i' % i ) #NEWLINE#
print ( 'func1:#SPACE#finishing' ) #NEWLINE#
print ( 'func2:#SPACE#starting' ) #NEWLINE#
print ( 'func2:#SPACE#finishing' ) #NEWLINE#
img . save ( response , 'PNG' ) #NEWLINE#
"""I#SPACE#love#SPACE#yellow#SPACE#and""" #NEWLINE#
your_module . get_logger ( ) . log_to_file ( filename ) #NEWLINE#
print ( set ( n1 ) . difference ( set ( n2 ) ) ) #NEWLINE#
class A ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
bin ( 7 ) [ 2 : ] #NEWLINE#
print ( '\n' . join ( '' . join ( row ) for row in board ) ) #NEWLINE#
res . fillna ( 0 ) . squeeze ( ) . dt . days #NEWLINE#
re . search ( p , test_str ) #NEWLINE#
ax . set_ylim ( ylim ) #NEWLINE#
window . setGeometry ( 500 , 300 , 300 , 100 ) #NEWLINE#
ax1 = fig . add_subplot ( 121 ) #NEWLINE#
np . einsum ( 'nij,njk->ik' , np . einsum ( 'nij,jk->nik' , A . transpose ( 0 , 2 , 1 ) , B ) , A ) #NEWLINE#
kmer_proc . wait ( ) #NEWLINE#
data_table . append ( [ '' for _ in range ( len ( data_table [ 0 ] ) ) ] ) #NEWLINE#
conn . commit ( ) #NEWLINE#
t = pd . read_csv ( 'table.txt' , sep = '\\s+' ) #NEWLINE#
with open ( 'topsites.txt' ) as my_file : #NEWLINE# #INDENT# testsite_array = my_file . readlines ( ) #NEWLINE#
ex2 . show ( ) #NEWLINE#
return QtCore . QSize ( 150 , 75 ) #NEWLINE#
print ( tuple ( pad_strings ( x ) ) ) #NEWLINE#
14.078685 #NEWLINE#
ax . scatter ( x , y , c = colors , s = 50 , cmap = mpl . cm . Reds ) #NEWLINE#
plt . figure ( ) #NEWLINE#
from Crypto . PublicKey import RSA #NEWLINE#
plt . polar ( theta , r2 , lw = 3 ) #NEWLINE#
parts . insert ( 3 , ',' ) #NEWLINE#
str ( round ( numvar , 9 ) ) #NEWLINE#
process = subprocess . Popen ( command , shell = True , stdout = subprocess . PIPE ) #NEWLINE#
[ item . replace ( '#SPACE#' , '' ) for item in shlex . split ( text ) ] #NEWLINE#
outfile . close ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
modl = imp . load_source ( 'modulename' , '/path/to/module.py' ) #NEWLINE#
print ( list ( set ( a ) . difference ( b ) ) [ : 3 ] ) #NEWLINE# [ 3 , 5 , 7 ] #NEWLINE#
counts = df . groupby ( 'User_ID' ) . Datetime . count ( ) #NEWLINE#
path = os . path . split ( 'C:\\foo\\bar\\file_name.txt' ) #NEWLINE#
print ( ( i , l ) ) #NEWLINE#
requests . get ( 'https://example.org/private_api' , params = urlencode ( params ) ) #NEWLINE#
print ( pool . map ( f , list ( range ( 10 ) ) ) ) #NEWLINE#
[ 'What' , 'is' , 'thi' , '?' ] #NEWLINE#
B = A [ [ col1 , col2 ] ] . iloc [ idx ] #NEWLINE#
plt . legend ( handles = [ select ] , scatterpoints = 1 ) #NEWLINE#
new_list = list ( groups . values ( ) ) #NEWLINE#
ax . scatter ( [ 0 ] , [ 0 ] , [ 0 ] , color = 'g' , s = 100 ) #NEWLINE#
browser . submit ( ) #NEWLINE#
df #NEWLINE#
headings = [ th . get_text ( ) for th in table . find ( 'tr' ) . find_all ( 'th' ) ] #NEWLINE#
def magic ( numbers ) : #NEWLINE# #INDENT# return int ( '' . join ( [ ( '%d' % x ) for x in numbers ] ) ) #NEWLINE#
return f ( * args , ** kwds ) #NEWLINE#
older_books = [ b . title for b in BSI if b . year < 2000 ] #NEWLINE#
re . findall ( '([^=]+)=([^=]+)(?:,|$)' , #NEWLINE# 'foo=bar,breakfast=spam,eggs,blt=bacon,lettuce,tomato,spam=spam' ) #NEWLINE#
globals ( ) . update ( var = value ) #NEWLINE#
stack . append ( stack [ - 1 ] [ - 1 ] ) #NEWLINE#
zf . write ( os . path . join ( dirname , filename ) ) #NEWLINE#
'0' in '10' #NEWLINE#
password2 = self . cleaned_data . get ( 'password2' ) #NEWLINE#
self . _children = [ ] #NEWLINE#
contents . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
coroutines = [ 'acquire' , 'release' ] #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
super ( MyClass , self ) . __setattr__ ( 'data' , { 'a' : 'v1' , 'b' : 'v2' } ) #NEWLINE#
f . write ( 'Oh#SPACE#that#SPACE#this#SPACE#too#SPACE#too#SPACE#sullied#SPACE#flesh\n' ) #NEWLINE#
im = Image . open ( 'image.png' ) #NEWLINE#
browser . get ( 'https://medium.com/top-100/december-2013' ) #NEWLINE#
[ ( 'a' , 2 ) , ( 'b' , 1 ) , ( 'c' , 2 ) ] #NEWLINE#
plt . style . use ( style_name ) #NEWLINE#
getattr ( foo , 'foo1' ) #NEWLINE#
DISPATCH ( ) #NEWLINE#
df3 . set_index ( 'index' ) [ 'tot' ] . resample ( 'S' , how = 'sum' ) #NEWLINE#
nums [ 'evens' ] . append ( number ) #NEWLINE#
exec ( 'do_print()' ) #NEWLINE#
df . set_index ( keys = [ 'name' ] , drop = False , inplace = True ) #NEWLINE#
print ( 'Disconnected#SPACE#from' , self . getpeername ( ) ) #NEWLINE#
canvas . rect ( i , 0 , 2 , 100 ) #NEWLINE#
ax . plot ( list ( range ( 9 , - 1 , - 1 ) ) , linewidth = 32 ) #NEWLINE#
df . apply ( lambda x : x . astype ( object ) . replace ( 1 , x . name ) ) #NEWLINE#
f = open ( 'generic.png' , 'r' ) #NEWLINE#
print ( 'We#SPACE#are#SPACE#done.' ) #NEWLINE#
f = open ( 'file.txt' , 'w' ) #NEWLINE#
np . split ( df1 . index [ c ] , np . flatnonzero ( r [ 1 : ] > r [ : - 1 ] ) + 1 ) #NEWLINE#
fd = os . open ( 'y' , os . O_WRONLY | os . O_CREAT | os . O_EXCL ) #NEWLINE# f = os . fdopen ( fd , 'w' ) #NEWLINE#
"""it#SPACE#wouldn\\'t#SPACE#be#SPACE#possible#SPACE#to#SPACE#store#SPACE#this#SPACE#string""" #NEWLINE#
traceback . print_stack ( ) #NEWLINE#
x = [ [ 'a' ] , [ 'b' ] , [ 'c' ] , [ 'd' ] ] #NEWLINE# y = [ [ 'e' ] , [ 'f' ] , [ 'g' ] , [ 'h' ] ] #NEWLINE# z = [ [ 'i' ] , [ 'j' ] , [ 'k' ] , [ 'l' ] ] #NEWLINE# df = pd . DataFrame ( { 'col1' : x , 'col2' : y , 'col3' : z } ) #NEWLINE#
help ( myFunc . __code__ ) #NEWLINE#
ipaddress . ip_address ( 'foobar' ) #NEWLINE#
self . driver . set_window_size ( 1024 , 768 ) #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
input = self . myText_Box . get ( '1.0' , 'end-1c' ) #NEWLINE#
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~#SPACE#\t\n\r\x0b\x0c' #NEWLINE#
self . panel . Bind ( wx . EVT_KEY_DOWN , self . OnKeyDown ) #NEWLINE#
grid = np . random . random ( ( 10 , 10 ) ) #NEWLINE#
new_dic [ 1 ] [ 2 ] = 5 #NEWLINE#
return x . astype ( int ) #NEWLINE#
print ( sum ( [ float ( x ) for x in re . findall ( p , test_str ) ] ) ) #NEWLINE#
badenc = 'cp1252' #NEWLINE#
[ item . group ( ) for item in IT . islice ( re . finditer ( '\\d' , text ) , 3 ) ] #NEWLINE#
return x * 2 #NEWLINE#
return { 'address' : address } #NEWLINE#
sorted ( files ) #NEWLINE#
print ( t . format ( name = 'Barry' ) ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
"""^(?P<description>.*?)(Arguments:(?P<arguments>.*?))?(Returns:(?P<returns>.*))?$""" #NEWLINE#
db . Account . find ( ) . sort ( 'UserName' , 1 ) #NEWLINE#
tar . add ( source_dir , arcname = os . path . basename ( source_dir ) ) #NEWLINE#
biglist2 . sort ( key = ( operator . itemgetter ( 2 ) , operator . itemgetter ( 0 ) ) ) #NEWLINE#
dict ( ( k , v ) for k , v in list ( mydict . items ( ) ) if k >= 6 ) #NEWLINE#
plt . plot ( [ pt [ 0 ] , pt [ 0 ] ] , [ 0 , pt [ 1 ] ] ) #NEWLINE#
tk . Canvas . __init__ ( self , * args , ** kwargs ) #NEWLINE#
result . append ( ',' . join ( map ( str , lst [ scan : ] ) ) ) #NEWLINE#
int ( '' . join ( takewhile ( str . isdigit , s ) ) ) #NEWLINE#
plt . plot ( a , b , 'g' , linewidth = 3.5 , label = 'a' ) #NEWLINE#
root . quit ( ) #NEWLINE#
raise ValueError ( ( a , b ) ) #NEWLINE#
p = subprocess . Popen ( your_command , preexec_fn = os . setsid ) #NEWLINE# os . killpg ( os . getpgid ( p . pid ) , signal . SIGTERM ) #NEWLINE#
math . pow ( abs ( x ) , float ( 1 ) / 3 ) * ( 1 , - 1 ) [ x < 0 ] #NEWLINE#
return True #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
data = np . array ( [ 1 , 4 , 5 , 5 , 6 , 8 , 8 , 9 ] ) #NEWLINE#
print ( df . groupby ( [ 'A' , 'B' ] ) [ 'count' ] . sum ( ) . reset_index ( ) ) #NEWLINE#
thetd = soup . find ( 'td' , attrs = { 'class' : 'author' } ) #NEWLINE#
df . dropna ( ) #NEWLINE#
return str ( datetime . strptime ( value , FORMAT_STRING ) ) #NEWLINE#
text = text . replace ( '&' , '\\&' ) #NEWLINE#
text = text . replace ( '\\' , '\\\\' ) #NEWLINE#
driver . get ( 'http://www.google.com/' ) #NEWLINE#
return self . filter ( role = 'E' ) #NEWLINE#
do_something ( ) #NEWLINE#
df [ df . Group == 'B' ] . Age . hist ( ) #NEWLINE#
handle . close ( ) #NEWLINE#
plt . plot ( data_bp2 , label = 'order#SPACE#2' ) #NEWLINE#
np . array_split ( x , 3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
ao [ 1 : , : - 1 ] += ai [ : - 1 , 1 : ] #NEWLINE#
df2 = pd . read_csv ( StringIO ( df2_text ) , delim_whitespace = True ) #NEWLINE#
alist , blist , clist , dlist , elist = ( [ ] for i in range ( 5 ) ) #NEWLINE#
list ( map ( lambda l : mean ( i for i in l if i != None ) , zip_longest ( * A ) ) ) #NEWLINE#
float ( Mixed ( 1 , 1 , 2 ) ) #NEWLINE#
literal_eval ( '[1.23,#SPACE#2.34]' ) #NEWLINE#
isinstance ( x , list ) #NEWLINE#
"""(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}#SPACE##SPACE##SPACE##SPACE##SPACE#/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'".,<>?«»“”‘’]))""" #NEWLINE#
random . seed ( ) #NEWLINE#
em = trained . emission #NEWLINE#
my_instance . my_method = my_method . __get__ ( my_instance , MyClass ) #NEWLINE#
plot ( a [ : , ( 0 ) ] , a [ : , ( 1 ) ] ) #NEWLINE#
query . filter ( 'location_geocells#SPACE#IN' , cell ) #NEWLINE#
ax . plot ( theta , r ) #NEWLINE#
print ( len ( set ( probes ) ) ) #NEWLINE#
data = dd . from_pandas ( df , npartitions = 2 ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
frame . append ( 1 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( 'sum(col6)#SPACE#=#SPACE#%d' % df . sum ( axis = 0 , numeric_only = True ) [ 'col6' ] ) #NEWLINE#
len ( regex . findall ( '\\X' , 'A̲̅BC' ) ) #NEWLINE#
"""Avec#SPACE#Éloïse,#SPACE#ils#SPACE#président#SPACE#à#SPACE#l'assemblée""" #NEWLINE#
df = pd . read_csv ( StringIO ( txt ) , delim_whitespace = True , index_col = 'pos' ) #NEWLINE#
localtime ( now ( ) ) . date ( ) #NEWLINE#
x [ x ] #NEWLINE#
models . py #NEWLINE#
[ [ 1 , 2 , 4 , 8 ] , [ 2 , 3 , 21 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ] #NEWLINE#
y = np . array ( [ 1 , 2 , - 1 , 1 , 1 ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( operator . mul , numbers ) #NEWLINE#
df [ 'c' ] = df . groupby ( 'a' ) [ 'b' ] . shift ( ) #NEWLINE#
g . axes [ 0 ] [ 0 ] . legend ( loc = 1 ) #NEWLINE#
rep_shape ( b , ( 3 , 4 , 5 ) ) #NEWLINE#
"""[⺀-⺙⺛-⻳⼀-⿕々〇〡-〩〸-〺〻㐀-䶵一-鿃豈-鶴侮-頻並-龎]""" #NEWLINE#
self . redirect ( '/' ) #NEWLINE#
cnx . close ( ) #NEWLINE#
print ( '...baa#SPACE#{0}' . format ( i ) ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x if len ( x ) < len ( y ) else y , mywords ) #NEWLINE#
word_tokenize ( "'Hello.#SPACE#This#SPACE#is#SPACE#a#SPACE#test.#SPACE##SPACE#It#SPACE#works!" ) #NEWLINE#
self . canvas . clear ( ) #NEWLINE#
foo = [ 1 , 2 , 3 ] #NEWLINE# print ( max ( foo ) ) #NEWLINE#
output = Popen ( [ 'command-to-run' , 'some-argument' ] , stdout = PIPE ) #NEWLINE#
lY , { 'CaliperLength' , 'Centroid' , 'Mask' } #NEWLINE#
spam . ham #NEWLINE#
plt . imshow ( np . random . random ( 100 , 100 ) ) #NEWLINE#
print ( k , v ) #NEWLINE#
server . quit ( ) #NEWLINE#
'you#SPACE#dont#SPACE#think' , 'yes#SPACE#i#SPACE#do' , 'no#SPACE#you#SPACE#dont' , 'i#SPACE#dont#SPACE#think#SPACE#you#SPACE#think' #NEWLINE#
'i#SPACE#feel#SPACE#good' , 'but#SPACE#i#SPACE#am#SPACE#good' , 'i#SPACE#cant#SPACE#do#SPACE#it#SPACE#now' , 'yes#SPACE#you#SPACE#can' #NEWLINE#
conn = imaplib . IMAP4_SSL ( 'imap.googlemail.com' ) #NEWLINE#
[ staging ] #NEWLINE#
{ 'a' : 42 , 'b' : 'my_string' , 'c' : '{\'d\':#SPACE#33,#SPACE#\'e\':#SPACE#"{\'f\'#SPACE#:#SPACE#64}"}' } #NEWLINE# { 'a' : 42 , 'b' : 'my_string' , 'c' : { 'e' : { 'f' : 64 } , 'd' : 33 } } #NEWLINE#
print ( str_to_type ( v ) ) #NEWLINE#
plt . plot ( x , y , 'k' , x , y1 , 'k' , x , y2 , 'k' , linewidth = 2 ) #NEWLINE#
doSomething ( ) #NEWLINE#
"""""" . join ( x [ 0 ] for x in names . split ( ) ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
traceback . print_stack ( ) #NEWLINE#
print ( 'Value#SPACE#is#SPACE#"%d"' % value ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
dictname = pickle . load ( f ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda v1 , v2 : v1 or v2 , map ( lambda v : v in list2 , list1 ) ) #NEWLINE#
super ( A , self ) . save ( ) #NEWLINE#
seclist = [ 2 , 4 , 6 , 8 ] #NEWLINE#
print ( img . shape ) #NEWLINE#
p = argparse . ArgumentParser ( ) #NEWLINE#
short_list = np . array ( list ( 'aaabaaacaaadaaac' ) ) #NEWLINE#
print ( FileNotFoundError ( errno . ENOENT , os . strerror ( errno . ENOENT ) , 'foobar' ) ) #NEWLINE#
print ( file . read ( ) ) #NEWLINE#
image . set_from_stock ( gtk . STOCK_CLOSE , gtk . ICON_SIZE_MENU ) #NEWLINE#
values = [ 1 , 2 , 3 ] #NEWLINE#
re = [ y for x , y , z in zip ( tmp [ 2 : ] , tmp [ 1 : - 1 ] , tmp [ : - 2 ] ) if y != x and y != z ] #NEWLINE#
plt . yticks ( pos , labels . sort_index ( ) ) #NEWLINE#
output , error = process . communicate ( ) #NEWLINE#
plt . figure ( facecolor = 'white' ) #NEWLINE#
plt . savefig ( 'baralign.png' ) #NEWLINE#
0.2775516299989249 #NEWLINE#
ax1 . set_xlabel ( 'my#SPACE#label#SPACE#' + '$10^{{{0:d}}}$' . format ( scale_pow ) ) #NEWLINE#
pprint . pformat ( { 'key1' : 'val1' , 'key2' : [ 1 , 2 ] } ) #NEWLINE#
plt . show ( ) #NEWLINE#
math . degrees ( math . atan ( 1 ) ) #NEWLINE#
answers = relationship ( 'Answer' , backref = 'question' ) #NEWLINE#
a [ 0 : 1 ] = [ 1 ] #NEWLINE#
np . random . seed ( 10 ) #NEWLINE#
f . write ( site . read ( ) ) #NEWLINE#
post_data = { 'data' : 'test#SPACE#data' } #NEWLINE#
[ '' . join ( c ) for c in combos ] #NEWLINE#
user = User . objects . get ( pk = request . user . id ) #NEWLINE#
__main__ . py #NEWLINE#
dollars = Decimal ( dollars . strip ( '$' ) ) #NEWLINE#
db . delete ( item ) #NEWLINE#
1 + 1 #NEWLINE#
words = { } #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
d [ 'count' ] = list1 [ i ] #NEWLINE#
return { 'test' : request . resolver_match . url_name } #NEWLINE#
"""""" . join ( [ chr ( int ( '' . join ( c ) , 16 ) ) for c in zip ( txt [ 0 : : 2 ] , txt [ 1 : : 2 ] ) ] ) #NEWLINE#
with open ( 'gallery.html' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( doc . render ( ) ) #NEWLINE#
return os . path . join ( path , filename ) #NEWLINE#
[ x for xs in a for x in xs ] #NEWLINE#
print ( uuid . UUID ( o [ 'uuid' ] ) . hex ) #NEWLINE#
print ( response . content ) #NEWLINE#
"""Solo#SPACE#voy#SPACE#si#SPACE#se#SPACE#sucedierón#SPACE#o#SPACE#se#SPACE#suceden#SPACE#mañana#SPACE#los#SPACE#siguienñes#SPACE#eventos:""" #NEWLINE#
return True #NEWLINE#
pythons_tasklist [ 0 ] [ 'Mem#SPACE#Usage' ] #NEWLINE#
i += 1 #NEWLINE#
f = open ( 'output.txt' , 'rb' ) #NEWLINE#
self . assertEqual ( fn ( i ) , output [ i ] ) #NEWLINE#
for key in list ( data . keys ( ) ) : #NEWLINE# #INDENT# df . loc [ row , key ] = data [ key ] #NEWLINE#
ordereddict . py #NEWLINE#
any ( c in yourString for c in badChars ) #NEWLINE#
locals ( ) . update ( vars ( args ) ) #NEWLINE#
{ { ( img . height | add ) : 1 } } #NEWLINE#
self . request . send ( self . data . upper ( ) ) #NEWLINE#
setattr ( self , key . lower ( ) , val ) #NEWLINE#
intified_list = list ( intify ( lst ) ) #NEWLINE#
result [ k ] = d1 [ k ] #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) #NEWLINE#
re . findall ( '{(\\w+)}' , strs ) #NEWLINE#
glDrawArrays ( GL_TRIANGLE_STRIP , 0 , 4 ) #NEWLINE#
a [ [ 0 , 1 ] , [ 1 , 1 ] , [ 2 , 2 ] ] #NEWLINE# a [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 2 ] ] #NEWLINE#
print ( stockquote . get_quote ( 'goog' ) ) #NEWLINE#
[ iplocation ] #NEWLINE#
worksheet . set_column ( 0 , 0 , None , index ) #NEWLINE#
print ( config . options ( 'myfiles' , no_defaults = True ) ) #NEWLINE#
MEDIA_ROOT = '<your_path>/media' #NEWLINE# MEDIA_URL = '/media/' #NEWLINE#
ax . set_xlim ( min_val , max_val ) #NEWLINE#
gen = iter ( [ 1 , 2 , 3 ] ) #NEWLINE#
[ 'here#SPACE#there#SPACE#' , 'x#SPACE#y#SPACE#' , '#SPACE#thereagain#SPACE#' , 'there#SPACE#there' ] #NEWLINE#
c = sorted ( set ( a ) . intersection ( b ) ) #NEWLINE#
print ( in_nested_list ( x , [ ] ) ) #NEWLINE#
'a' in x #NEWLINE#
return datetime . date . today ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
with open ( infile ) as fp : #NEWLINE# #INDENT# indata = fp . read ( ) #NEWLINE#
f . flush ( ) #NEWLINE#
listofLines . sort ( key = extract_time ) #NEWLINE#
print ( df . values . flatten ( ) ) #NEWLINE#
setattr ( self , name , callable ) #NEWLINE#
print ( map ( lambda x : not B_set - set ( x ) , A ) ) #NEWLINE#
my_process = subprocess . Popen ( [ 'my_executable' ] , preexec_fn = preexec_function ) #NEWLINE#
os . remove ( '_config.file' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( list . __add__ , a ) #NEWLINE#
args = dict ( arg . split ( '=' , 1 ) for arg in shlex . split ( cmdln_args ) ) #NEWLINE#
array ( [ [ 'v' , 'e' , 'r' , 'y' ] ] , dtype = '<U1' ) #NEWLINE#
main ( ) #NEWLINE#
reactor . connectTCP ( host , port , factory ) #NEWLINE#
ps . wait ( ) #NEWLINE#
max = int ( input ( 'Type#SPACE#in#SPACE#max#SPACE#value#SPACE#for#SPACE#the#SPACE#loop#SPACE#>#SPACE#' ) ) #NEWLINE#
wx . Dialog . __init__ ( self , None , title = 'Test' ) #NEWLINE#
thisprogramdoesntexist #NEWLINE#
jsonFile . truncate ( ) #NEWLINE#
1 / 2 #NEWLINE#
return Response ( serializer . data , status = status . HTTP_201_CREATED ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
django . template . add_to_builtins ( 'django.templatetags.future' ) #NEWLINE#
fig . savefig ( imgdata , format = 'png' ) #NEWLINE#
f . write ( line ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
print ( '%d:%d:%d:%d' % ( d . day - 1 , d . hour , d . minute , d . second ) ) #NEWLINE#
data = json . load ( contactFile ) #NEWLINE#
A [ : , ( ~ np . triu ( ( A [ : , : , ( None ) ] - A [ : , ( None ) , : ] >= 0 ) . all ( 0 ) , 1 ) . any ( 0 ) ) ] #NEWLINE#
pprint ( sorted ( list ( results . items ( ) ) , key = lambda x : x [ 1 ] ) ) #NEWLINE#
print ( '"A#SPACE#word#SPACE#that#SPACE#needs#SPACE#quotation#SPACE#marks"' ) #NEWLINE#
l [ : n ] + [ 0 ] * ( n - len ( l ) ) #NEWLINE#
class MyForm ( forms . Form ) : #NEWLINE# #INDENT# a = forms . CharField ( max_length = 20 ) #NEWLINE#
x [ 'cat' ] = labels + 1 #NEWLINE#
obj_list [ 0 ] . do_somthing ( ) #NEWLINE#
map ( lambda a , b : 100 * abs ( a - b ) / a < 3 , a , b ) #NEWLINE#
dicts_from_file . append ( eval ( line ) ) #NEWLINE#
tuple ( y ) #NEWLINE#
b = np . random . rand ( 10 , 10 ) #NEWLINE#
plt . show ( ) #NEWLINE#
numpy . array ( [ 'hello' , 'world!' ] ) #NEWLINE# numpy . array ( [ 'hello' , 'world!' ] , dtype = object ) #NEWLINE#
method ( * args , ** kwargs ) #NEWLINE#
print ( tweet [ 'text' ] . encode ( 'utf-8' ) , '\n' ) #NEWLINE#
fig . canvas . mpl_connect ( 'resize_event' , resize_colobar ) #NEWLINE#
plt . gca ( ) . axis ( 'off' ) #NEWLINE#
instance . topping_set . add ( topping ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
main ( ) #NEWLINE#
return super ( ) . render_change_form ( request , context , * args , ** kwargs ) #NEWLINE#
cursor . execute ( 'TRUNCATE#SPACE#TABLE#SPACE#"{0}"' . format ( MyModel . _meta . db_table ) ) #NEWLINE#
self . connect ( self , SIGNAL ( 'lastWindowClosed()' ) , self . byebye ) #NEWLINE#
os . mkfifo ( thefifo ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
parser . add_argument ( '-u' , '--username' , dest = 'username' , help = 'User#SPACE#name' ) #NEWLINE#
print ( 'Uploading#SPACE#%s#SPACE#to#SPACE#Amazon#SPACE#S3#SPACE#bucket#SPACE#%s' % ( testfile , bucket_name ) ) #NEWLINE#
root , dirs , files = next ( os . walk ( '/path/to/your/dir' ) ) #NEWLINE#
data [ data < threshold ] = 0 #NEWLINE#
B [ : , ( col ) ] = np . prod ( np . delete ( A , col , 1 ) , 1 ) #NEWLINE#
root . title ( 'Main#SPACE#Window' ) #NEWLINE#
fifo_read = open ( 'fifo' , 'r' , 0 ) #NEWLINE#
last_name = models . CharField ( max_length = 50 ) #NEWLINE#
[ ( i + j ) for i , j in zip ( arr [ : - 2 ] , arr [ 2 : ] ) ] #NEWLINE#
raise GIFError ( 'unknown#SPACE#block#SPACE#type' ) #NEWLINE#
return d . replace ( hour = 0 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
self . assertEqual ( x , 0 ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
with open ( 'file.txt' , 'a' ) as file : #NEWLINE# #INDENT# file . write ( 'input' ) #NEWLINE#
random . shuffle ( rects ) #NEWLINE#
edge_list = [ tuple ( map ( int , line . split ( ) ) ) for line in data ] #NEWLINE#
df = pd . DataFrame ( np . repeat ( [ 1 , 2 , 3 , 4 ] , 4 ) . reshape ( 4 , - 1 ) ) #NEWLINE#
print ( hashlib . sha512 ( password + salt ) . hexdigest ( ) ) #NEWLINE#
raise ValueError ( 'Currently#SPACE#the#SPACE#only#SPACE#supported#SPACE#mode#SPACE#is#SPACE#"rb"' ) #NEWLINE#
print ( d [ 'Hello' ] ) #NEWLINE#
powerpoint . Quit ( ) #NEWLINE#
[ str ( i ) for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ] #NEWLINE#
print ( list ( itertools . starmap ( func1 , [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) ) ) #NEWLINE#
main_window . show ( ) #NEWLINE#
f ( ) #NEWLINE#
dom = minidom . parseString ( xml_text ) #NEWLINE#
print ( list ( itertools . chain ( * list ( parser_config . keys ( ) ) ) ) ) #NEWLINE#
a = np . array ( [ 1e-09 ] ) #NEWLINE#
winsorize_series ( pd . Series ( list ( range ( 20 ) ) , dtype = 'float' ) ) [ 0 ] #NEWLINE#
A . columns = pd . MultiIndex . from_product ( [ list ( range ( A . shape [ 1 ] / 10 ) ) , list ( #NEWLINE# range ( 10 ) ) ] ) #NEWLINE#
words = re . findall ( '\\w+' , open ( 'hamlet.txt' ) . read ( ) . lower ( ) ) #NEWLINE#
return self . model . objects . filter ( user = request . user ) #NEWLINE#
locals ( ) [ 'x' ] = 4 #NEWLINE#
os . path . join ( 'build' , distutils_dir_name ( 'lib' ) ) #NEWLINE#
z . set_zorder ( - 1 ) #NEWLINE#
pool = multiprocessing . Pool ( 4 ) #NEWLINE#
g . fig . suptitle ( 'THIS#SPACE#IS#SPACE#A#SPACE#TITLE,#SPACE#YOU#SPACE#BET' ) #NEWLINE#
conn . close ( ) #NEWLINE#
np . where ( abs ( arr_f - a ) < t ) [ 0 ] . any ( ) #NEWLINE#
a = np . arange ( 8 ) #NEWLINE#
import xml . etree . ElementTree as et #NEWLINE#
f_new . write ( line ) #NEWLINE#
do_something ( item ) #NEWLINE#
raise RuntimeError ( "generator#SPACE#didn't#SPACE#stop#SPACE#after#SPACE#throw()" ) #NEWLINE#
print ( df . sum ( 1 ) . to_frame ( ) . dot ( df . sum ( ) . to_frame ( ) . T ) . div ( df . sum ( ) . sum ( ) ) ) #NEWLINE#
( 1 , 2 , 3 ) * 3 #NEWLINE#
json . loads ( json1 ) #NEWLINE#
"""[_-](\\d{4}[A-Z]{0,3})[_-]{1,3}((?=\\d{2,4}[A-Z]{0,3}(?![\\dA-Z]))(?:[0-9A-Z_-]+?))(?:[-_]+NC.*)?(?![0-9A-Z_-])""" #NEWLINE#
return not self . thread . is_alive ( ) #NEWLINE#
df = pd . read_csv ( io . StringIO ( temp ) , sep = '^' , comment = '-' ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
lemmatizer . lemmatize ( 'می\u200cروم' ) #NEWLINE#
return '' . join ( l ) #NEWLINE#
self . _connect ( ) #NEWLINE#
df = df . reset_index ( ) #NEWLINE#
print ( requests . post ( endpoint , data = data , headers = headers ) . json ( ) ) #NEWLINE#
fields = ( field . strip ( ) for field in line . split ( ',' ) ) #NEWLINE#
p = subprocess . Popen ( [ 'ls' , '-l' ] , stdout = subprocess . PIPE ) #NEWLINE#
parser . add_argument ( 'files' , nargs = '*' , help = 'specify#SPACE#input#SPACE#files' ) #NEWLINE#
test . write ( 'world' ) #NEWLINE#
lib . get_strings ( c_array , len ( list_to_send ) ) #NEWLINE#
wb = load_workbook ( filename = 'xxxxx.xlsx' ) #NEWLINE#
wb = load_workbook ( filename = 'xxxx.xlsx' ) #NEWLINE#
conn . sendmail ( sender , destination , msg . as_string ( ) ) #NEWLINE#
a2Note = pg . mixer . Sound ( 'F:\\Project#SPACE#Harpsichord\\The#SPACE#wavs\\A0.wav' ) #NEWLINE#
createSubElement ( 'SecondChild' , 'second#SPACE#one' ) #NEWLINE#
mat - vec [ : , ( [ 0 , 0 , 0 ] ) ] #NEWLINE#
A . reshape ( h // ph , ph , w // pw , pw , - 1 ) . swapaxes ( 1 , 2 ) . shape #NEWLINE#
group . add_option ( '-g' , action = 'store_true' , help = 'Group#SPACE#option.' ) #NEWLINE#
theproc = subprocess . Popen ( [ sys . executable , 'myscript.py' ] ) #NEWLINE#
print ( ( cities [ 0 ] [ 0 ] , cities [ 1 ] [ 0 ] ) ) #NEWLINE# print ( ( cities [ 0 ] [ 1 ] , cities [ 1 ] [ 1 ] ) ) #NEWLINE#
pass #NEWLINE#
print ( 'found#SPACE#error' , mo . group ( 1 ) ) #NEWLINE#
parser . add_argument ( '-q' , '--query' , help = 'query' , required = False ) #NEWLINE#
"""mongoengine.django.mongo_auth""" #NEWLINE#
reactor . run ( ) #NEWLINE#
super ( Field , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
self . driver . close ( ) #NEWLINE#
print ( [ c for c in cumsum ( [ [ 'a' ] , [ 'b' ] , [ 'c' ] ] ) ] ) #NEWLINE#
( m . transpose ( ) - v ) . transpose ( ) #NEWLINE#
order_array [ 3 ] #NEWLINE#
A = [ ( 'a' , 'b' , 'c' ) , ( 'd' , 'e' , 'f' ) , ( 'g' , 'h' , 'i' ) ] #NEWLINE#
collections . Counter ( x ) == collections . Counter ( y ) #NEWLINE#
im = cv2 . imread ( 'sss.png' ) #NEWLINE#
re . split ( '\\{}|\\{}' . format ( first , frequent ) , s ) #NEWLINE#
parser . add_argument ( '--details' , nargs = '*' ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
self . window . show_all ( ) #NEWLINE#
list ( chain ( ls [ : idx ] , replace_with , ls [ idx + 1 : ] ) ) #NEWLINE#
[ [ 'Hello' , 'Good' , 'See' ] , [ 'world!' , 'morning' , 'you!' ] ] #NEWLINE#
print ( np . corrcoef ( x [ 0 : len ( x ) - 1 ] , x [ 1 : ] ) [ 0 ] [ 1 ] ) #NEWLINE#
print ( '%15s#SPACE#%s' % ( n . __repr__ ( ) , isinstance ( n , Number ) ) ) #NEWLINE#
myTurtle . color ( 'brown' ) #NEWLINE#
print ( average ( 'aa' , 'zz' ) ) #NEWLINE#
print ( average ( 'cat' , 'doggie' ) ) #NEWLINE#
print ( average ( 'google' , 'microsoft' ) ) #NEWLINE#
print ( average ( 'aa' , 'az' ) ) #NEWLINE#
s . commit ( ) #NEWLINE#
f . writelines ( lines ) #NEWLINE#
alsonow = now . astimezone ( yourtz ) #NEWLINE#
data [ 'Autopass(cb)%' ] = data [ 'Autopass(cb)' ] / data [ 'TotalCB' ] * 100 #NEWLINE# data [ 'Qd(cb)%' ] = data [ 'Qd(cb)' ] / data [ 'TotalCB' ] * 100 #NEWLINE#
decorated_argspec = inspect . getargspec ( func2 ) #NEWLINE#
'www.l.google.com' , [ ] , [ '74.125.77.104' , '74.125.77.147' , '74.125.77.99' ] #NEWLINE#
os . chmod ( full_path , stat . S_IWRITE ) #NEWLINE#
d . __setitem__ ( 'b' , 5 ) #NEWLINE#
res . columns = [ 'date_min' , 'date_max' , 'min' , 'max' ] #NEWLINE#
image = 'convert#SPACE#-background#SPACE#' + background + '#SPACE#' + file_from + '#SPACE#' + file_to #NEWLINE#
data = numpy . fromfile ( f , dt ) #NEWLINE#
pd . io . json . dumps ( summary , double_precision = 2 ) #NEWLINE#
return revlist ( lst [ 1 : ] ) + [ lst [ 0 ] ] #NEWLINE#
frq = frq [ list ( range ( n / 2 ) ) ] #NEWLINE#
self . set_header ( 'length' , headers [ 'length' ] ) #NEWLINE#
ax . plot ( x , y , 'ro' , markersize = 23 ) #NEWLINE#
foo = Foo ( ) #NEWLINE#
[ 5 , 7 , 9 , 11 ] #NEWLINE#
image_urls . append ( image [ 'images' ] [ 'src' ] ) #NEWLINE#
self . flush ( ) #NEWLINE#
ShapedFrame ( ) . Show ( ) #NEWLINE#
stack [ - 1 ] . append ( x ) #NEWLINE#
requests . post ( 'http://requestb.in/xucj9exu' , files = ( ( 'foo' , 'bar' ) , ( 'spam' , #NEWLINE# 'eggs' ) ) ) #NEWLINE#
setup ( ) #NEWLINE#
Book = namedtuple ( 'Book' , [ 'id' , 'title' , 'authors' ] ) #NEWLINE#
file . close ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
x = 'iamonlywhoknock#SPACE#BREAKINGBAD\n' . split ( '#SPACE#' ) #NEWLINE# mydict = { x [ 0 ] : x [ 1 ] } #NEWLINE#
image = cv2 . imread ( 'gray.jpg' ) #NEWLINE#
df [ 'paths' ] . str . extract ( '(\\d{4})(\\d{2})' ) #NEWLINE#
main ( ) #NEWLINE#
run ( 'echo#SPACE#test' ) #NEWLINE#
pool = Pool ( processes = 4 ) #NEWLINE#
struct . unpack ( str ( len ( s ) / 2 ) + 'h' , s ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
plt . plot ( sorted , yvals ) #NEWLINE#
bid = int ( bid ) #NEWLINE#
axes [ 1 ] . set ( ylabel = 'Filled#SPACE#Data' ) #NEWLINE#
plt . show ( ) #NEWLINE#
df . set_index ( [ 0 , 1 ] , inplace = True ) #NEWLINE#
df = pd . DataFrame ( [ { 'a' : 1 } , { 'a' : 3 , 'b' : 2 } ] ) #NEWLINE#
data = pandas . read_csv ( 'file.csv' ) . as_matrix ( ) #NEWLINE#
connection . close ( ) #NEWLINE#
b = Matrix ( [ [ 0 , 0 ] , [ 0 , 0 ] ] ) #NEWLINE#
ax . margins ( 0.05 ) #NEWLINE#
files . sort ( key = os . path . getmtime ) #NEWLINE#
print ( 'You#SPACE#entered' , input ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
raise ValueError ( 'ORDER_FIELD#SPACE#must#SPACE#be#SPACE#defined' ) #NEWLINE#
"""#SPACE#compute#SPACE#the#SPACE#longest#SPACE#common#SPACE#prefix#SPACE#of#SPACE#s[x:]#SPACE#and#SPACE#s[y:]#SPACE#in#SPACE#O(log#SPACE#n).#SPACE#""" #NEWLINE#
"""#SPACE#compare#SPACE#substrings#SPACE#s[x:x+lx]#SPACE#and#SPACE#s[y:y+yl]#SPACE#in#SPACE#O(log#SPACE#n).#SPACE#""" #NEWLINE#
"""#SPACE#count#SPACE#occurences#SPACE#of#SPACE#substring#SPACE#s[x:x+l]#SPACE#in#SPACE#O(log#SPACE#n).#SPACE#""" #NEWLINE#
"""#SPACE#print#SPACE#the#SPACE#suffix#SPACE#array#SPACE#for#SPACE#debugging#SPACE#purposes.#SPACE#""" #NEWLINE#
mainloop ( ) #NEWLINE#
[ ( 'a' , 2 ) , ( 'b' , 1 ) , ( 'c' , 1 ) ] #NEWLINE#
lst [ : ] = whatever #NEWLINE#
a [ 0 ] . append ( [ 1 , 2 , 3 ] ) #NEWLINE#
newlist = [ [ y [ 0 ] for y in list if y [ 1 ] == x ] for x in values ] #NEWLINE#
self . button = QPushButton ( 'Test' , self ) #NEWLINE#
class Node ( models . Model ) : #NEWLINE# #INDENT# well = models . ForeignKey ( 'Well' ) #NEWLINE#
d . setdefault ( word [ 0 ] . lower ( ) , [ ] ) . append ( word ) #NEWLINE#
cmdlist . append ( '-o' ) #NEWLINE#
cmdlist . append ( '--overwrite' ) #NEWLINE#
img = QImage ( 'input.jpg' ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
a [ : , ( 0 ) ] #NEWLINE#
ylabel ( 'axis#SPACE#2' ) #NEWLINE#
urllib . request . Request . __init__ ( * args , ** kwargs ) #NEWLINE#
myslice = array [ tuple ( idx ) ] #NEWLINE#
list ( combinations ( [ 1 , 2 , 3 , 4 ] , 3 ) ) #NEWLINE#
d1 = { 'a' : 1 , 'b' : 1 , 'c' : 1 , 'd' : 1 } #NEWLINE#
type ( dates [ 0 ] ) == pd . tslib . Timestamp #NEWLINE#
br . open ( 'http://www.website.com/' ) #NEWLINE#
entry_list = [ x . title . text for x in feed . entry ] #NEWLINE#
df . b . notnull ( ) #NEWLINE#
map ( lambda x : 'hello%i' % x , a ) #NEWLINE#
VDATA . close ( ) #NEWLINE#
log . addHandler ( h ) #NEWLINE#
foo ( ) #NEWLINE#
import imp #NEWLINE# imp . reload ( greetings ) #NEWLINE#
pool = Pool ( processes = 3 ) #NEWLINE#
return render_template ( 'projects.html' ) #NEWLINE#
self . driver = webdriver . Firefox ( ) #NEWLINE#
plt . plot ( df . index , df . Rt , '.' ) #NEWLINE#
print ( 'Failed#SPACE#to#SPACE#connect#SPACE#to#SPACE#iBus' ) #NEWLINE#
ax . plot_date ( dates , closes , '-' , marker = '_' , color = 'black' ) #NEWLINE#
output . close ( ) #NEWLINE#
result_dict = dict ( ( n , res_list [ i ] ) for i , n in enumerate ( header ) ) #NEWLINE#
yy = self . driver . get_window_size ( ) [ 'height' ] / 2 #NEWLINE#
ax . annotate ( str ( j ) , xy = ( i , j ) ) #NEWLINE#
[ 0 , 3 , 4 , 17 , 8 , 7 , 9 , 12 , 16 , 5 ] #NEWLINE#
data . loc [ row , 'new_column' ] = n . get ( 'key' ) #NEWLINE#
s . listen ( 1 ) #NEWLINE#
print ( m . group ( ) ) #NEWLINE#
def cap ( s , l ) : #NEWLINE# #INDENT# return s if len ( s ) <= l else s [ 0 : l - 3 ] + '...' #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
emit ( 'echo' , { 'data' : 'what#SPACE#ever#SPACE#you#SPACE#are#SPACE#trying#SPACE#to#SPACE#send' } , broadcast = True ) #NEWLINE#
the_list . sort ( ) #NEWLINE# the_list . sort ( key = len , reverse = True ) #NEWLINE#
game_display = pygame . display . set_mode ( ( 800 , 800 ) ) #NEWLINE#
smtp . close ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
order = [ 'item#SPACE#4.1' , 'item#SPACE#2.1' , 'item#SPACE#3.1' , 'item#SPACE#1.1' ] #NEWLINE# my_list . sort ( key = lambda x : order . index ( x [ 0 ] ) ) #NEWLINE#
return None if self . x == 0 else self . y / self . x #NEWLINE#
rtc . Newline ( ) #NEWLINE#
header = driver . find_element_by_id ( 'header' ) #NEWLINE#
raise argparse . ArgumentError ( self , 'Duplicate#SPACE#OuterIPs#SPACE#found' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
os . chdir ( '..' ) #NEWLINE#
output = check_output ( cmd , stdin = file ) #NEWLINE#
response = HttpResponse ( pdf . read ( ) , mimetype = 'application/pdf' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x . union ( y ) , [ r , s , t ] ) #NEWLINE#
fortnight = df . resample ( '2W-SUN' ) . sum ( ) #NEWLINE#
entry . pack ( ) #NEWLINE#
axes [ 0 ] . set_ylabel ( 'Cumulative#SPACE#Frequency' ) #NEWLINE#
s . reset_index ( name = 's' ) . groupby ( 'level_0' ) . apply ( lambda s : s . sort ( 's' ) #NEWLINE# ) . set_index ( [ 'level_0' , 'level_1' ] ) [ 's' ] #NEWLINE#
print ( [ 0 ] * i ) #NEWLINE#
plt . plot ( ns , elapsed3s , label = 'Optimized' , lw = 2 ) #NEWLINE#
plt . plot ( ns , elapsed2s , label = 'numpy' , lw = 2 ) #NEWLINE#
log . info ( 'message#SPACE#from#SPACE#SubClass#SPACE#/#SPACE#SomeMethod' ) #NEWLINE#
"""}}#SPACE#{}#SPACE#{{#SPACE#{{""" . format ( 3 ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#README' , open ( 'README' , 'wb' ) . write ) #NEWLINE# ftp . quit ( ) #NEWLINE#
file_writer . writerow ( [ x [ i ] for x in lol ] ) #NEWLINE#
print ( type ( result ) ) #NEWLINE#
d1 = { 'foo' : 'baz' , 'spam' : 'eggs' } #NEWLINE#
d = dict ( zip ( list ( adict . values ( ) ) , list ( adict . keys ( ) ) ) ) #NEWLINE#
del sys . modules [ 'MyPak.MyMod' ] #NEWLINE#
df [ 1 ] . fillna ( 0 , inplace = True ) #NEWLINE# df #NEWLINE#
soup . select ( 'a[href*=price]' ) #NEWLINE#
print ( 'it#SPACE#was#SPACE#not#SPACE#a#SPACE#ascii-encoded#SPACE#unicode#SPACE#string' ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . foo ( 1 , 2 , 3 ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
tkMessageBox . showinfo ( message = 'Hello' ) #NEWLINE#
p1 = subprocess . Popen ( [ 'ps' , '-ux' ] , stdout = subprocess . PIPE ) #NEWLINE#
tk . Frame . __init__ ( self , parent ) #NEWLINE#
ax . annotate ( str ( y ) , xy = ( x , y ) ) #NEWLINE#
quote ( '/test' , safe = '' ) #NEWLINE#
return str ( list ( self . __iter__ ( ) ) ) #NEWLINE#
sys . stdout . write ( title + ':#SPACE#[' + '-' * 40 + ']' + chr ( 8 ) * 41 ) #NEWLINE#
warnings . warn ( 'deprecated' , DeprecationWarning ) #NEWLINE#
[ ( 'survey' , 1.0000001192092896 ) ] #NEWLINE#
print ( '%s#SPACE#was#SPACE#provided#SPACE#as#SPACE#positional#SPACE#arg' % arg_name ) #NEWLINE#
print ( '%s#SPACE#was#SPACE#provided#SPACE#by#SPACE#default#SPACE#value' % arg_name ) #NEWLINE#
print ( ( 'in#SPACE#class#SPACE#"A":' , b_mod ( ) . B . __name__ ) ) #NEWLINE#
print ( [ ( '%d#SPACE#%d#SPACE#%s' % x ) for x in group ( mystuff , 3 ) ] . join ( '\n' ) ) #NEWLINE#
return '{}#SPACE#and#SPACE#{}' . format ( ',#SPACE#' . join ( lst [ : - 1 ] ) , lst [ - 1 ] ) #NEWLINE#
self . assertEqual ( os . environ . get ( 'HELLO' ) , 'WORLD' ) #NEWLINE#
req = urllib . request . Request ( url = 'http://www.google.com' ) #NEWLINE#
logger . debug ( 'debug#SPACE#message' ) #NEWLINE#
data = f ( data ) #NEWLINE#
print ( '<%s>' % e . tag ) #NEWLINE#
self . figure . set_canvas ( self . figurecanvas ) #NEWLINE#
image . save ( 'foo.png' ) #NEWLINE#
self . ui . main_plot . figure . subplots_adjust ( bottom = 0.4 ) #NEWLINE#
screen . fill ( ( 0 , 0 , 0 ) ) #NEWLINE#
return coords . reshape ( - 1 , N ) #NEWLINE#
self . ax . cla ( ) #NEWLINE#
child . kill ( ) #NEWLINE#
p = subprocess . Popen ( your_command , preexec_fn = os . setsid ) #NEWLINE#
self . g . get ( key ) #NEWLINE#
test . py #NEWLINE#
slicer_vectorized ( a , 1 , 3 ) #NEWLINE#
b = a . T #NEWLINE#
list ( enumerate2 ( [ 1 , 2 , 3 ] , 5 , - 2 ) ) #NEWLINE#
self . update ( { element . tag : element . text } ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 , [ 1 , 2 , 4 ] ] , [ 4 , 5 , [ 1 , 3 ] ] ] , columns = [ 'a' , 'b' , #NEWLINE# 'TimeStamp' ] ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
[ [ 3 , 4 ] , [ 2 , 3 , [ 5 , 3 ] ] ] #NEWLINE#
db . rename_table ( 'usergroups_myusergroup' , 'usergroups_myuser_group' ) #NEWLINE#
list1 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
print ( sum ( a ) ) #NEWLINE#
return [ 1 , 2 , 3 ] #NEWLINE#
Process ( target = do_something ) . start ( ) #NEWLINE#
cmap = colors . ListedColormap ( [ 'b' , 'g' , 'y' , 'r' ] ) #NEWLINE#
getattr ( globals ( ) [ 'Foo' ] ( ) , 'bar1' ) ( ) #NEWLINE#
foo , bar = itemgetter ( 'foo' , 'bar' ) ( d ) #NEWLINE#
df_csv = df0_fa . to_csv ( 'revenue/data/test.csv' , mode = 'w' , index = False ) #NEWLINE#
print ( sum ( ord ( char ) - base for char in mystring ) ) #NEWLINE#
line_count += 1 #NEWLINE#
eval_expr ( '9**9**9**9**9**9**9**9' ) #NEWLINE#
print ( sum1 ( - 1 , 0 , 6 , 10 ) ) #NEWLINE#
ax = fig . add_subplot ( gs [ 1 ] ) #NEWLINE#
pygame . display . update ( ) #NEWLINE#
func ( ) #NEWLINE#
__init__ . py #NEWLINE#
df . columns = [ 'a' , 'b' , 'c' ] #NEWLINE#
res = urllib . request . urlopen ( req ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
random . shuffle ( Order ) #NEWLINE#
print ( 'Done!' ) #NEWLINE#
status = call ( 'mvn#SPACE#clean#SPACE#&&#SPACE#mvn#SPACE#compile' , cwd = '/users/foo/xxx' , shell = True ) #NEWLINE#
draw . line ( ( 0 , im . size [ 1 ] , im . size [ 0 ] , 0 ) , fill = 128 ) #NEWLINE#
mylist = [ 1 , 2 , 3 , 4 ] #NEWLINE#
new = numpy . zeros_like ( arr ) #NEWLINE#
s . join ( ) #NEWLINE#
[ '' , '/Users/pat/xyz' ] #NEWLINE#
print ( 'missed' ) #NEWLINE#
s = '\\n' #NEWLINE# print ( s ) #NEWLINE#
df = sqlContext . createDataFrame ( rdd , [ 'user_id' , 'object_id' , 'score' ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
sc . _conf . getAll ( ) #NEWLINE#
ax0 . imshow ( img , cmap = plt . cm . gray ) #NEWLINE#
print ( str2seconds ( '255:25' ) ) #NEWLINE#
logger . info ( 'a#SPACE#message' ) #NEWLINE#
def sum_even ( a , b ) : #NEWLINE# #INDENT# return sum ( i for i in range ( a , b + 1 ) if i % 2 == 0 ) #NEWLINE#
A . reshape ( h // ph , ph , w // pw , pw , - 1 ) . swapaxes ( 1 , 2 ) #NEWLINE#
self . label . configure ( text = now ) #NEWLINE#
response = requests . get ( 'http://httpbin.org/redirect/3' ) #NEWLINE#
parser . add_argument ( 'arg1' ) #NEWLINE#
f = wave . open ( 'YOUR#SPACE#FILE#SPACE#NAME' , 'rb' ) #NEWLINE#
os . rename ( src , tmp ) #NEWLINE#
o = object ( ) #NEWLINE#
rdate1 = datetime . datetime . strptime ( rdate , '%Y-%m-%d' ) . date ( ) #NEWLINE#
my_logger . critical ( 'this#SPACE#is#SPACE#critical' ) #NEWLINE#
print ( ( d1 + datetime . timedelta ( i ) ) . isoformat ( ) ) #NEWLINE#
eval ( equation , { '__builtins__' : None } ) #NEWLINE#
print ( '' ) #NEWLINE#
a . add ( 3 , 5 ) #NEWLINE#
print ( workdaycount ( date ( 2011 , 8 , 15 ) , date ( 2011 , 8 , 22 ) , 1 ) ) #NEWLINE#
np . concatenate ( alist ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
self . SetTopWindow ( frame ) #NEWLINE#
app = service . service_mappings ( [ ( '/hello.*' , HelloService ) ] ) #NEWLINE#
print ( 'Could#SPACE#not#SPACE#fetch#SPACE#{}#SPACE#because#SPACE#of#SPACE#{},#SPACE#skipping.' . format ( url , ex ) ) #NEWLINE#
l . sort ( key = f ) #NEWLINE#
list ( intermix ( [ 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 ] ) ) #NEWLINE#
test = [ 'abc_1_2' , 'abc_2_2' , 'hij_1_1' , 'xyz_1_2' , 'xyz_2_2' ] #NEWLINE#
a = 'foobar' #NEWLINE# a [ len ( a ) ] #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com:587' ) #NEWLINE# server . ehlo ( ) #NEWLINE# server . starttls ( ) #NEWLINE#
os . kill ( pid , 0 ) #NEWLINE#
l . pop ( ) #NEWLINE#
a + b #NEWLINE#
a = [ 1000 + 1 , 1000 + 1 , 1000 + 1 ] #NEWLINE#
"""#SPACE#""" . join ( str ( part ) for part in parts if part is not None ) #NEWLINE#
first , last = myset [ 0 ] , myset . reverse ( ) [ 0 ] #NEWLINE#
x = obj . search ( cr , uid , criteria , offset = 0 , limit = 36 , order = 'field_name#SPACE#desc' ) #NEWLINE#
cbar0 = plt . colorbar ( cf0 ) #NEWLINE#
'C:\\Users\\user\\Desktop\\File_%s.pdf' , #NEWLINE#
dict [ key ] = val #NEWLINE#
test . my_redifinable ( ) #NEWLINE#
return pd . Series ( { 'col1' : a , 'col2' : b } ) #NEWLINE#
ax1 . axis [ 'left' ] . label . set_text ( 'R' ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
datetime . datetime ( 2010 , 2 , 28 , 0 , 0 ) #NEWLINE#
lst = [ [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] ] #NEWLINE#
ax . plot ( x , y , 'ro' ) #NEWLINE#
print ( traceback . format_exc ( ) ) #NEWLINE#
print ( recarr ( 'price' ) ) #NEWLINE#
plt . ylim ( [ 40 , 110 ] ) #NEWLINE#
node_schema . load ( json_data , instance = Node ( ) . query . get ( node_id ) , partial = True ) #NEWLINE#
x = np . arange ( 10 ) #NEWLINE#
ndprint ( x , 'Element[{1:d}]={0:.2f}' ) #NEWLINE#
self . setupUi ( self ) #NEWLINE#
f = open ( 'file_name.ext' , 'r' ) #NEWLINE# x = f . readlines ( ) #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , oldflags | os . O_NONBLOCK ) #NEWLINE#
values = ',' . join ( [ str ( i ) for i in value_list ] ) #NEWLINE#
df . loc [ ( df [ 'column_name' ] == some_value ) & df [ 'other_column' ] . isin ( some_values ) #NEWLINE# ] #NEWLINE#
timeit ( stmt4 , setup4 , number = 100 ) #NEWLINE#
p . start ( ) #NEWLINE#
ax . yaxis . grid ( True ) #NEWLINE#
print ( dirname ( dirname ( __file__ ) ) ) #NEWLINE#
np . cov ( data . T ) #NEWLINE#
any ( e in s for e in b ) #NEWLINE#
file . close ( ) #NEWLINE#
ax . set_xlim ( [ - 1 , 0.5 ] ) #NEWLINE#
d [ k ] . extend ( v ) #NEWLINE#
item [ 'name' ] = hxs . select ( '//td[@id="item_name"]/text()' ) . extract ( ) #NEWLINE#
return func ( self , * args , ** kwargs ) #NEWLINE#
app_name = 'yourappname' #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
thiskid [ 'hair' ] = 'blue' #NEWLINE#
r . json ( ) #NEWLINE#
diff = abs ( A . astype ( 'int32' ) - B . astype ( 'int32' ) ) #NEWLINE#
site . set_debuglevel ( 1 ) #NEWLINE#
import re #NEWLINE# re . findall ( '\\[[^\\]]*\\]|"[^"]*"|\\S+' , s ) #NEWLINE#
quadV = [ - 0.5 , - 0.5 , 0.0 , 0.5 , - 0.5 , 0.0 , - 0.5 , 0.5 , 0.0 , 0.5 , 0.5 , 0.0 ] #NEWLINE#
sheet . set_clip ( pygame . Rect ( SPRT_RECT_X , SPRT_RECT_Y , LEN_SPRT_X , LEN_SPRT_Y ) ) #NEWLINE#
data = cursor . fetchall ( ) #NEWLINE#
l_without_empty = [ x for x in l if x ] #NEWLINE#
plt . show ( ) #NEWLINE#
response = HttpResponse ( myfile . read ( ) , mimetype = 'audio/mpeg' ) #NEWLINE#
s = '#SPACE#\t#SPACE#foo#SPACE#\n#SPACE#bar#SPACE#' #NEWLINE# """""" . join ( s . split ( ) ) #NEWLINE#
YB = np . linspace ( - 1 , 1 , 20 ) #NEWLINE#
mycards = [ '0H' , '8H' , '7H' , '6H' , 'AH' , 'QS' ] #NEWLINE#
driver = webdriver . PhantomJS ( executable_path = #NEWLINE# '/usr/local/lib/node_modules/phantomjs/lib/phantom/bin/phantomjs' ) #NEWLINE#
print ( pd . concat ( [ df , pd . concat ( [ dm ] * df . shape [ 1 ] , axis = 1 , keys = df . columns ) ] ) ) #NEWLINE#
print ( sys . argv ) #NEWLINE#
f = csv . reader ( open ( 'links.csv' , 'rb' ) ) #NEWLINE#
p = Popen ( 'batchfile.bat' , cwd = 'c:\\directory\\containing\\batchfile' ) #NEWLINE#
tips . reset_index ( inplace = True ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 9 ] #NEWLINE#
print ( 'exiting' ) #NEWLINE#
self . assertTrue ( result ) #NEWLINE#
bool ( ( 'Hello' , 'World' ) ) #NEWLINE#
print ( list ( fd [ '/A/G' ] . keys ( ) ) ) #NEWLINE#
l = [ i for sub in l for i in sub ] #NEWLINE#
results = Stores . objects . filter ( thefilter ) #NEWLINE#
print ( 'Cookie#SPACE#Manip#SPACE#Right#SPACE#Here' ) #NEWLINE#
__path__ = extend_path ( __path__ , __name__ ) #NEWLINE#
help ( string ) #NEWLINE#
d [ hash ( foo ) ] #NEWLINE#
return '' #NEWLINE#
np . allclose ( tmp , tmp2 ) #NEWLINE#
from wx import xrc #NEWLINE#
print ( int ( number ) - int ( number [ : : - 1 ] ) ) #NEWLINE#
print ( dis . disco ( f . f_code , i ) ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 ] #NEWLINE# [ ( i ** 2 ) for i in l ] #NEWLINE#
text , xoff = line_data [ k ] [ - 1 ] #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
sstr = str . split ( ':' ) #NEWLINE#
print ( regex . group ( 3 ) ) #NEWLINE#
print ( m . hexdigest ( ) ) #NEWLINE#
r = requests . get ( 'http://www.google.com' , proxies = proxyDict , auth = auth ) #NEWLINE#
n = random . randint ( 1 , 10 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
root . attributes ( '-alpha' , 0.0 ) #NEWLINE#
print ( repr ( a ) ) #NEWLINE#
log = logging . getLogger ( 'FOO' ) #NEWLINE#
numpy . zeros ( ( 5 , 5 ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
power ( 3 , 4 ) #NEWLINE#
ctx . set_source_rgb ( 0.47 , 0.47 , 0.47 ) #NEWLINE#
parser2 . add_argument ( 'input' , nargs = '*' ) #NEWLINE#
data . append ( 0.25 * math . sin ( math . radians ( i ) ) ) #NEWLINE#
y = np . array ( [ 1 , 2 , 0 , 1 , 1 , 2 ] ) #NEWLINE#
print ( sys . path ) #NEWLINE#
elidelen , elidetxt = elidespec . split ( '^' ) #NEWLINE#
sspec , espec = sspec . split ( '$' ) #NEWLINE#
elidelen , elidetxt = elidespec . split ( '<' ) #NEWLINE#
elidelen , elidetxt = elidespec . split ( '>' ) #NEWLINE#
a [ 0 ] #NEWLINE#
[ [ 1 ] [ 2 ] ] #NEWLINE#
setup ( package_data = { 'hackertray.data' : [ 'hacker-tray.png' ] } ) #NEWLINE#
"""earth""" . startswith ( 'earth' ) #NEWLINE#
data_tuple = Item ( ** dict ( zip ( fields , raw_data ) ) ) #NEWLINE#
cursor . execute ( 'DROP#SPACE#DATABASE#SPACE#IF#SPACE#EXISTS#SPACE#database_of_armaments' ) #NEWLINE#
label . grid ( row = 0 , column = 0 ) #NEWLINE#
subprocess . Popen ( subprocess ) #NEWLINE#
X [ np . ix_ ( [ 0 , 1 ] , [ 0 , 1 ] ) ] #NEWLINE#
print ( fpp [ 1 ] ) #NEWLINE#
[ ( 'a' , 2 ) , ( 'b' , 2 ) , ( 'c' , 1 ) ] #NEWLINE#
np . datetime64 ( datetime . utcnow ( ) ) . astype ( datetime ) #NEWLINE#
sys . stdout = os . fdopen ( newstdout , 'w' ) #NEWLINE#
return df #NEWLINE#
ax . yaxis . set_minor_locator ( MultipleLocator ( 0.2 ) ) #NEWLINE#
your_code . run ( ) #NEWLINE#
d [ 'a' ] [ 'b' ] = 'c' #NEWLINE#
import numpy as np #NEWLINE#
minutes_diff = ( datetime_end - datetime_start ) . total_seconds ( ) / 60.0 #NEWLINE#
[ e for e in lst if 1 < e < 3 ] [ : 10 ] #NEWLINE#
df . query ( qry ) #NEWLINE#
a = array ( [ [ 10 , 50 , 30 ] , [ 60 , 20 , 40 ] ] ) #NEWLINE#
model . objects . filter ( id = id ) . update ( order = order . index ( id ) ) #NEWLINE#
plt . plot ( x , y , marker = 'o' , markevery = 0.05 ) #NEWLINE#
s = re . sub ( '\\w' , '#' , s ) #NEWLINE#
start ( ) #NEWLINE#
transsurface . fill ( ( 255 , 0 , 255 ) ) #NEWLINE#
print ( s . __dict__ ) #NEWLINE#
id ( b [ 0 ] ) , id ( b [ 1 ] ) #NEWLINE#
regex = re . compile ( '^page/(?P<slug>[-\\w]+)/(?P<page_id>[0-9]+)/$' ) #NEWLINE#
thread . start ( ) #NEWLINE#
matrix [ 0 ] #NEWLINE#
a = np . random . randint ( 0 , 256 , size = ( 100 , 100 , 3 ) ) . astype ( np . uint32 ) #NEWLINE#
somethingThread . join ( ) #NEWLINE#
li = [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 ] #NEWLINE#
return x . ix [ random . sample ( x . index , n ) ] #NEWLINE#
print ( parsestring ( '1,2,5-7,10' ) ) #NEWLINE#
[ 'init' , 'declarations' , 'body' , 'operator' , '*' ] #NEWLINE#
[ 'id' , 'declarations' , 'body' , 'name' , 'answer' ] #NEWLINE#
[ 'id' , 'declarations' , 'body' , 'name' , 'i' ] #NEWLINE#
[ 'id' , 'declarations' , 'body' , 'name' , 'j' ] #NEWLINE#
[ 'init' , 'declarations' , 'body' , 'type' , 'BinaryExpression' ] #NEWLINE#
return self . post ( request , * args , ** kwargs ) #NEWLINE#
b_set = set ( tuple ( x ) for x in a ) #NEWLINE#
rs = json . dumps ( dict ( lst ) ) #NEWLINE#
return s == s [ : : - 1 ] #NEWLINE#
df . describe ( ) . transpose ( ) #NEWLINE#
getpass ( 'Enter#SPACE#your#SPACE#password:#SPACE#' ) #NEWLINE#
root . deiconify ( ) #NEWLINE#
x . astype ( 'Float64' ) #NEWLINE#
netstruct . unpack ( 'b$' , '\x0cHello#SPACE#World!' ) #NEWLINE#
list ( source_list ) == zip ( list1 , list2 ) #NEWLINE#
res = optimize . minimize ( square , x , method = 'BFGS' , jac = True , args = args ) #NEWLINE#
_ = plt . setp ( p . get_xticklabels ( ) , rotation = 90 ) #NEWLINE#
os . chmod ( 'myfile' , 420 ) #NEWLINE#
plt . ylabel ( 'y#SPACE#axis' , fontsize = 13 ) #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
logging . getLogger ( 'sqlalchemy.engine' ) . setLevel ( 'INFO' ) #NEWLINE#
df1 . pivot ( columns = 'group' , values = 'A' ) . plot . hist ( stacked = True ) #NEWLINE#
return socket . inet_ntoa ( struct . pack ( '<L' , int ( fields [ 2 ] , 16 ) ) ) #NEWLINE#
return redirect ( '/teams' ) #NEWLINE#
result . append ( list ( set1 . union ( set2 ) ) ) #NEWLINE#
print ( 'no#SPACE#match' ) #NEWLINE#
a = [ ( '650' , '724' , '6354' , '' , '' , '' ) , ( '' , '' , '' , '650' , '723' , '4539' ) ] #NEWLINE# [ tuple ( y for y in x if y ) for x in a ] #NEWLINE#
logging . basicConfig ( level = logging . DEBUG ) #NEWLINE#
formset . save ( ) #NEWLINE#
m . eliminate_zeros ( ) #NEWLINE#
A = np . array ( ss . zscore ( A ) ) #NEWLINE#
frame . axes . get_yaxis ( ) . set_ticks ( [ ] ) #NEWLINE#
raise TypeError ( "Cannot#SPACE#booleanize#SPACE#ambiguous#SPACE#value#SPACE#'%s'" % value ) #NEWLINE#
print ( repr ( n ) ) #NEWLINE#
return function ( str , * args , ** kwargs ) #NEWLINE#
br . submit ( ) #NEWLINE#
return Response ( content ) #NEWLINE#
ax . clear ( ) #NEWLINE#
pd . options . display . max_columns = 50 #NEWLINE#
plt . figure ( ) #NEWLINE#
a = 632382 ** 518061 #NEWLINE#
from functools import reduce #NEWLINE# reduce ( dict . __getitem__ , [ 'Dict2' , 'Dict3' , 'Dict4' ] , Dict1 ) #NEWLINE#
return render_template ( 'spreadsheets/upload.html' , uploadform = uploadform ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
A = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
session . Start ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
df . to_excel ( writer , sheet_name = sheet_name ) #NEWLINE#
[ [ 2 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] ] , #NEWLINE#
print ( 'func2#SPACE#-#SPACE#call' ) #NEWLINE#
print ( 'func3#SPACE#-#SPACE#call' ) #NEWLINE#
college = models . CharField ( max_length = 30 ) #NEWLINE#
print ( '*' + '#SPACE#' * ( i - 2 ) + '*' ) #NEWLINE#
sys . exit ( main ( sys . argv ) ) #NEWLINE#
primes = { p for p in primes if '0' not in str ( p ) } #NEWLINE#
self . fp . write ( buf ) #NEWLINE#
urlpatterns = [ url ( '^$' , views . index , name = 'index' ) ] #NEWLINE#
elems [ 1 ] . click ( ) #NEWLINE#
h = [ [ 1 , 0 , 0 ] [ 0 , 0 , 0 ] [ 0 , 0 , - 1 ] ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( 'Either#SPACE#a#SPACE#or#SPACE#b#SPACE#is#SPACE#empty' ) #NEWLINE#
[ 1 , 1 , 1 , 1 , 1 , 1 ] #NEWLINE#
list ( set ( l1 ) & set ( l2 ) ) #NEWLINE#
bonds = [ ( 0.0 , 0.99 ) , ( - 30 , 30 ) , ( - 30 , 30 ) , ( 0.0 , 30 ) , ( 0.0 , 30 ) , ( - 0.99 , 0.99 ) #NEWLINE# ] * 3 #NEWLINE#
numpairs = [ nums [ i : i + 2 ] for i in range ( 0 , len ( nums ) , 2 ) ] #NEWLINE#
[ 100.0 , 93.08 , 92.85 , 92.62 , 91.12 , 90.89 ] #NEWLINE#
[ ( i . start ( ) , i . end ( ) ) for i in re . finditer ( 'o' , test ) ] #NEWLINE#
print ( '{}#SPACE#minutes,#SPACE#{}#SPACE#hours' . format ( minutes , hours ) ) #NEWLINE#
return next ( iter ( list ( self . items ( ) ) ) ) #NEWLINE#
print ( pst . astimezone ( UTC ) . strftime ( '%a#SPACE#%b#SPACE#%d#SPACE#%X' ) ) #NEWLINE#
movie = relationship ( 'Movie' ) #NEWLINE#
maker = models . ForeignKey ( 'Maker#SPACE#of#SPACE#this#SPACE#car' ) #NEWLINE#
[ ( a + b ) for a , b in zip ( l , l [ 1 : ] ) [ : : 2 ] ] #NEWLINE#
[ 'phrase' , 'one' ] #NEWLINE#
print ( monotonic_time ( ) ) #NEWLINE#
df . filter ( like = 'result' , axis = 1 ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
conn . rollback ( ) #NEWLINE#
ax . set_ylim ( [ - 1 , 1.5 ] ) #NEWLINE#
plt . legend ( handles , labels , loc = 'best' ) #NEWLINE#
package_path = os . path . join ( module_path , '__init__' ) #NEWLINE#
os . environ [ 'TERM' ] = 'dumb' #NEWLINE#
d = [ 1 , 2 , 3 ] #NEWLINE#
entry1 . grid ( row = 0 , column = 0 ) #NEWLINE#
new = dict ( old ) #NEWLINE#
file = open ( 'file.txt' , 'rb' ) #NEWLINE#
ax . yaxis . set_minor_locator ( MultipleLocator ( 0.1 ) ) #NEWLINE#
the_list = [ 'and' , 'we' , 'can' , 'not' , 'lie' ] #NEWLINE#
4176 , 4177 , 4185 , 4187 , 4189 , 4225 , 4243 , 4245 , 4263 , 4282 , 4306 , 4311 #NEWLINE#
4312 , 4313 , 4314 , 4337 , 4339 , 4357 , 4358 , 4363 , 4383 , 4395 , 4408 , 4433 #NEWLINE#
4443 , 4445 , 4446 , 5167 , 5234 , 5235 , 5252 , 5318 , 5424 , 5644 , 6987 , 7054 #NEWLINE#
( grouping [ : , ( None ) , : ] == grouping [ : , : , ( None ) ] ) . sum ( 0 ) #NEWLINE#
logger . addHandler ( ch ) #NEWLINE#
self . fp . write ( zinfo . FileHeader ( zip64 ) ) #NEWLINE#
win32file . GetDriveType ( 'D:/' ) == win32file . DRIVE_FIXED #NEWLINE#
stdout . write ( 'Blastoff' ) #NEWLINE#
stdout . write ( '*' ) #NEWLINE#
stdout . write ( '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE###SPACE#!!#SPACE#BLASTOUT#SPACE#!!#SPACE##\n' ) #NEWLINE#
stdout . write ( '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE####SPACE#!!#SPACE#BLASTOUT#SPACE#!!#SPACE###\n' ) #NEWLINE#
stdout . write ( '#SPACE##SPACE##SPACE##SPACE##SPACE#####SPACE#!!#SPACE#BLASTOUT#SPACE#!!#SPACE###\n' ) #NEWLINE#
stdout . write ( '#SPACE##SPACE##SPACE##SPACE######SPACE#!!#SPACE#BLASTOUT#SPACE#!!#SPACE#####\n' ) #NEWLINE#
root . geometry ( '1000x700' ) #NEWLINE#
key = line . strip ( ) [ 1 : ] #NEWLINE#
return ( 1 - exp ( - lambda_ * ( k + 1 ) ) ) / ( 1 - exp ( - lambda_ * N ) ) #NEWLINE#
data / vector . reshape ( ( 1 , 3 ) ) #NEWLINE#
print ( ( '{:.%df}' % p ) . format ( d ) ) #NEWLINE#
func ( 1 , 2 ) #NEWLINE#
self . button = wx . Button ( self . panel , label = 'Save' ) #NEWLINE#
foo = models . IntegerField ( ) #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] , [ 1 , 2 , 3 ] , [ 2 , 4 , 5 ] ] #NEWLINE#
valid_date = time . strptime ( date , '%m/%d/%Y' ) #NEWLINE#
out = np . column_stack ( ( sortedA [ ( start_unqA ) , : - 1 ] , np . nanmax ( grpA , axis = 1 ) ) ) #NEWLINE#
newarray = np . dstack ( mylist ) #NEWLINE#
df [ 'Name' ] = 'abc' #NEWLINE#
print ( 'Domain#SPACE#already#SPACE#exists:#SPACE#' , e . response . get ( 'Error' , { } ) . get ( 'Code' ) ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE# b = [ 6 , 7 , 8 , 9 , 0 ] #NEWLINE#
inspect . getargspec ( someMethod ) #NEWLINE#
self . assertForbidden ( response ) #NEWLINE#
reverse_dict [ 'value3' ] #NEWLINE#
streetno [ '1' ] = 'Sachine#SPACE#Tendulkar' #NEWLINE#
print ( type ( f . __self__ ) ) #NEWLINE#
( np . arange ( 3 ) == labels [ : , ( None ) ] ) . astype ( np . float32 ) #NEWLINE#
loop . run_until_complete ( main ( ) ) #NEWLINE#
f ( ) #NEWLINE#
reduce ( lambda d , k : d . setdefault ( k , { } ) , keys , dict_nested ) [ newkey ] = newvalue #NEWLINE#
Y . mean ( axis = 1 ) #NEWLINE#
print ( ( k , v ) ) #NEWLINE#
{ { r . report_desc } } #NEWLINE#
result = [ { 'type' : type } . update ( defaults ) for type in strings ] #NEWLINE#
print ( df [ df . columns [ 2 : 5 ] ] ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x and y in x and x [ y ] , [ 'b' , 'cd' , 'd' ] , a ) #NEWLINE#
print ( line ) #NEWLINE#
conn . request ( 'POST' , '/some/path/to/site' , params , headers ) #NEWLINE#
plt . subplot ( 122 ) #NEWLINE#
handler = logging . StreamHandler ( ) #NEWLINE#
value [ - 2 : ] #NEWLINE#
list ( ranges ( [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 10 ] ) ) #NEWLINE#
x = '(1,2,3)' #NEWLINE# t = tuple ( int ( v ) for v in re . findall ( '[0-9]+' , x ) ) #NEWLINE#
tar = tarfile . open ( 'test.tar' ) #NEWLINE#
d += timedelta ( days = 7 ) #NEWLINE#
pylab . show ( ) #NEWLINE#
config . read ( 'longsections.cfg' ) #NEWLINE#
return str ( value ) #NEWLINE#
pid . wait ( ) #NEWLINE#
isinstance ( re . compile ( 'goodbye' ) , retype ) #NEWLINE#
driver . find_element_by_css_selector ( #NEWLINE# "a[href='http://www.testsite.com/pageOne.html']" ) #NEWLINE#
numpy . bincount ( x , weights = None , minlength = None ) #NEWLINE#
print ( sys . argv ) #NEWLINE#
replace ( [ [ '0' , '0' ] , [ '0' , '0' ] , [ '0' , '0' ] ] , [ 1 , 2 ] ) #NEWLINE#
subprocess . call ( [ '/home/myuser/run.sh' , '/tmp/ad_xml' , '/tmp/video_xml' ] , #NEWLINE# stdout = myoutput ) #NEWLINE#
response = tester . get ( '/' , headers = [ ( 'X-Requested-With' , 'XMLHttpRequest' ) ] ) #NEWLINE#
show ( p ) #NEWLINE#
df #NEWLINE#
client = boto3 . client ( 'rekognition' ) #NEWLINE#
return [ row [ colidx ] for row in self . _getrow ( rowidx ) ] #NEWLINE#
xml . write ( '<?xml#SPACE#version="1.0"?>\n' ) #NEWLINE#
print ( requests . get ( url , auth = ( username , password ) ) . content ) #NEWLINE#
oceans [ regcode - 1 ] . append ( ( temp , fecha ) ) #NEWLINE#
print ( b . decode ( ) ) #NEWLINE#
self . data = self . data . map ( model . transformation_function ) #NEWLINE#
"""1a23""" . isdigit ( ) #NEWLINE#
job = dict ( zip ( keys , values ) ) #NEWLINE#
return len ( points ) - 1 #NEWLINE#
ax2 . set_ylabel ( 'Temperature#SPACE#($^\\circ$C)' ) #NEWLINE#
my_randoms = [ random . randrange ( 1 , 101 , 1 ) for _ in range ( 10 ) ] #NEWLINE#
parser = argparse . ArgumentParser ( description = 'SO#SPACE#test.' ) #NEWLINE#
self . x -= STEP #NEWLINE#
split_csv_file ( f , dst_dir , lambda r : r [ column - 1 ] + '.csv' ) #NEWLINE#
im = Image . open ( BytesIO ( base64 . b64decode ( data ) ) ) #NEWLINE#
assembler . transform ( df ) #NEWLINE#
self . photo = Image . new ( 'RGB' , ( 1 , 1 ) ) #NEWLINE#
"""__as_das___""" . rstrip ( '_' ) #NEWLINE#
values = pd . Series ( [ 'a' , 'b' , 'a' , 'b' , 'c' , 'd' , 'e' , 'a' ] ) #NEWLINE#
df = pd . read_csv ( 'chart.csv' ) #NEWLINE#
print ( str ( l ) [ 1 : - 1 ] ) #NEWLINE#
conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
from django . conf import settings #NEWLINE#
isinstance ( y , X ) #NEWLINE#
show ( ) #NEWLINE#
print ( counter . most_common ( 10 ) ) #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
print ( obj . __class__ . __name__ . split ( '_' ) [ 0 ] ) #NEWLINE#
letter_count = dict ( zip ( string . lowercase , itertools . repeat ( 0 ) ) ) #NEWLINE#
map ( lambda s : s . split ( ) , a ) #NEWLINE#
return super ( SlicableDict , self ) . __setitem__ ( key , value ) #NEWLINE#
print ( 'Command#SPACE#failed,#SPACE#here#SPACE#is#SPACE#the#SPACE#output:#SPACE#%s' % output ) #NEWLINE#
file_1 . write ( line ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
ax . xaxis . set_ticklabels ( df [ 'labels' ] ) #NEWLINE#
self . ax . set_zlim3d ( FLOOR , CEILING ) #NEWLINE#
return ',' . join ( map ( str , lst ) ) , [ ] #NEWLINE#
pool . close ( ) #NEWLINE#
o . many2many . all ( ) #NEWLINE#
p . set_preference ( 'webdriver.log.file' , '/tmp/firefox_console' ) #NEWLINE#
{ data [ k ] . append ( v ) for line_dict in dr for k , v in list ( line_dict . items ( ) ) } #NEWLINE#
get_value ( dic , 4 ) #NEWLINE#
r . findall ( url ) #NEWLINE#
plt . figure ( figsize = ( 12.5 , 2.5 ) ) #NEWLINE#
query_model . save ( ) #NEWLINE#
input . seek ( 0 , 2 ) #NEWLINE#
a = [ i for i in range ( 2 , 10 ) ] #NEWLINE#
QApplication . setOverrideCursor ( Qt . WaitCursor ) #NEWLINE#
return False #NEWLINE#
matches = { x for x in a if x in str } #NEWLINE#
plt . plot ( [ 0 , 2 ] , [ 2 , 4 ] ) #NEWLINE#
data = [ tryconvert ( x , int , float ) for x in line . split ( ) ] #NEWLINE#
command . run ( timeout = 1 ) #NEWLINE#
mean = sum_x / n #NEWLINE#
test ( ) #NEWLINE#
B = [ [ None ] * n ] * n #NEWLINE#
df . reset_index ( ) . drop ( [ 'level_0' ] , axis = 1 ) #NEWLINE#
os . _exit ( EMERGENCY ) #NEWLINE#
plt . show ( ) #NEWLINE#
pencil = [ 2 , 3 , 4 , 5 ] #NEWLINE#
subplot ( 2 , 1 , 1 ) #NEWLINE#
from functools import reduce #NEWLINE# return df . loc [ reduce ( and_ , ( df [ column ] == value for column in columns ) ) ] #NEWLINE#
return reprwrapper ( reprfun , func ) #NEWLINE#

mask = x ** 2 + y ** 2 + z ** 2 < radius ** 2 #NEWLINE#
return obj . __dict__ #NEWLINE#
myfile = open ( 'myfile.csv' , 'r+' ) #NEWLINE#
fig . colorbar ( im ) #NEWLINE#
tasks . remove ( t ) #NEWLINE#
random . shuffle ( data ) #NEWLINE#
parser . parse_args ( [ '-h' ] ) #NEWLINE#
sim_func ( a , b , c , sim_type = 'solar' ) #NEWLINE#
random . shuffle ( random_list ) #NEWLINE#
im = Image . open ( 'snapshot.jpg' ) #NEWLINE#
ax . set_xlim ( - 50 , 50 ) #NEWLINE#
root = Tk ( ) #NEWLINE#
ax2 . plot ( list ( range ( 6 ) ) [ : : - 1 ] , color = 'green' ) #NEWLINE#
sock = socket . socket ( ) #NEWLINE#
today = date . today ( ) #NEWLINE# print ( date ( today . year + 1 , today . month , today . day ) ) #NEWLINE#
df_norm . mean ( ) #NEWLINE#
last_dir = os . getcwd ( ) #NEWLINE#
driver . find_element_by_id ( get_id ( 'polishpottery' , html ) ) . toggle ( ) #NEWLINE#
result = next ( i for i in ( f ( somedata ) for f in funcs ) if i is not None ) #NEWLINE#
pool = multiprocessing . Pool ( processes = 4 ) #NEWLINE#
self . init ( ) #NEWLINE#
bins = np . arange ( - 100 , 100 , 5 ) #NEWLINE#
movie = np . concatenate ( ( img1 [ : , ( np . newaxis ) ] , img2 [ : , ( np . newaxis ) ] ) , axis = 3 ) #NEWLINE#
p . wait ( ) #NEWLINE#
STATUS_ERR_INVALID_PARAMETER = 2 #NEWLINE#
k = sum ( x for x in chain . from_iterable ( my_list ) if x ) #NEWLINE#
out , err = ssh_process . communicate ( ) #NEWLINE#
a = a & set ( 'bce' ) #NEWLINE#
print ( itemlist [ 0 ] . attributes [ 'name' ] . value ) #NEWLINE#
frame1 . pack ( fill = None , expand = False ) #NEWLINE#
handler . setLevel ( logging . DEBUG ) #NEWLINE#
deviceparent = fexdata [ 'parent' ] [ parentindex ] #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
et . find ( './/element' ) . text = str ( float64 ( 0.3 ) ) #NEWLINE#
helloset . issubset ( printset ) #NEWLINE#
return [ ( k , v ) for k , v in list ( item_list . items ( ) ) if v [ 'slot' ] == slot ] #NEWLINE#
manager . run ( ) #NEWLINE#
return self . makeList ( aNode . lChild ) + [ aNode . data ] + self . makeList ( aNode . rChild ) #NEWLINE#
libxxx = ctypes . CDLL ( './libxxx.so' ) #NEWLINE#
plt . show ( ) #NEWLINE#
self . initUI ( ) #NEWLINE#
plt . contour ( xgrid , ygrid , zgrid ) #NEWLINE#
comment = models . TextField ( ) #NEWLINE#
super ( ReportResults , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
unittest . TestCase . __init__ ( self , test_name ) #NEWLINE#
msg . attach ( msg_image ) #NEWLINE#
k , len ( v ) #NEWLINE#
raise ImportError ( 'Python#SPACE#<#SPACE#3#SPACE#is#SPACE#unsupported.' ) #NEWLINE#
test = 'I#SPACE#have#SPACE#one#SPACE#{fruit}#SPACE#on#SPACE#the#SPACE#{place}.' . format_map ( dic ) #NEWLINE#
result . append ( el ) #NEWLINE#
cons ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
urlopen ( 'http://www.python.com/' ) . info ( ) . get_content_charset ( ) #NEWLINE#
sys . maxunicode #NEWLINE#
c . execute ( 'DROP#SPACE#TABLE#SPACE#IF#SPACE#EXISTS#SPACE#customer' ) #NEWLINE#
AMOServer . Disconnect ( ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
driver . quit ( ) #NEWLINE#
df [ 'col.2' ] = df . groupby ( 'col.1' ) [ 'col.2' ] . cumsum ( ) #NEWLINE#
window = Tk ( ) #NEWLINE#
d = pd . DataFrame ( np . zeros ( ( N_rows , N_cols ) ) ) #NEWLINE#
QtGui . QFileDialog . __init__ ( self , * args ) #NEWLINE#
wx . Frame . __init__ ( self , None , title = 'Close#SPACE#Me' ) #NEWLINE#
np . take ( A , B + n * np . arange ( m ) [ : , ( None ) ] ) #NEWLINE#
help ( file . read ) #NEWLINE#
bar ( 5 , myarg = 'value' ) #NEWLINE#
ppc = run_ppc ( trace , model = model , samples = 200 ) #NEWLINE#
excel . ActiveSheet . Columns . AutoFit ( ) #NEWLINE#
img2 = Image . open ( 'test.tiff' ) #NEWLINE#
C = MyReallyBigClassNameWhichIHateToType #NEWLINE#
print ( i [ 'team_name' ] ) #NEWLINE#
hashstr = 'My#SPACE#hovercraft#SPACE#is#SPACE#full#SPACE#of#SPACE#eels' #NEWLINE#
subprocess . call ( [ '/bin/echo' , '$HOME' ] ) #NEWLINE#
response = client . get ( '/your/url' , headers = list ( request . headers ) ) #NEWLINE#
locals ( ) [ 'Exec' + key ] ( ) #NEWLINE#
self . Layout ( ) #NEWLINE#
return self . func ( self . parent_obj , * args , ** kwargs ) #NEWLINE#
f . write ( chunk ) #NEWLINE#
app . config [ 'PROPAGATE_EXCEPTIONS' ] = True #NEWLINE#
process ( data ) #NEWLINE#
axes [ 0 , 0 ] . set_title ( 'Scatterplot' ) #NEWLINE#
np . einsum ( 'ijjx->jix' , np . dot ( np . rollaxis ( a , 2 ) , a ) ) #NEWLINE#
print ( fcount ( path ) ) #NEWLINE#
line_strings . append ( '\t' . join ( line . astype ( str ) ) . replace ( '\n' , '' ) ) #NEWLINE#
a [ 0 , 1 , 1 ] = [ 0 , 1 , 0 ] #NEWLINE#
cmpthese . cmpthese ( [ f1 , f2 , f3 , f4 , f5 , f6 ] , c = 100000 ) #NEWLINE#
def a ( * args , ** kwargs ) : #NEWLINE# #INDENT# print ( len ( args ) + len ( kwargs ) ) #NEWLINE#
print ( same_direction ( [ 1 , 2 , 3 ] , [ 3 , 7 , 9 ] ) ) #NEWLINE#
print ( 'Ñ\x8fÐ½Ñ\x83Ð°Ñ\x80Ð¸' ) #NEWLINE#
var [ 0 ] = 'Changed' #NEWLINE#
print ( df1 [ df1 . B . isin ( df2 . B ) ] ) #NEWLINE#
return '#SPACE#' . join ( unique_everseen ( string . split ( ) , key = key ) ) #NEWLINE#
logger . addHandler ( ch ) #NEWLINE#
re . sub ( '[^0-9a-zA-Z]' , '' , 'this#SPACE#is#SPACE#a#SPACE#test!!' ) #NEWLINE#
max ( allfuncs ) #NEWLINE#
stmt1 = 'isinstance(123,#SPACE#bool)' #NEWLINE#
return super ( RestFacebookLogin , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
return object . __getattribute__ ( self , name ) #NEWLINE#
college = models . CharField ( max_length = 40 ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
array ( [ 8.00091648 , 10.46124587 , 27.03994936 , 31.26307275 , 41.51068952 , #NEWLINE# 55.2981205 , 67.43509764 , 77.15198457 , 85.43442468 , 90.79034372 ] ) #NEWLINE#
( k1 , k2 ) <STR0> d #NEWLINE#
df . gdp = df . gdp . shift ( - 1 ) #NEWLINE#
last_4_weeks . groupby ( 'REST_KEY' ) . resample ( '7D' , how = 'sum' ) . mean ( level = 0 ) #NEWLINE#
logger = logging . getLogger ( 'root' ) #NEWLINE# logger . debug ( 'submodule#SPACE#message' ) #NEWLINE#
nb . pack ( expand = 1 , fill = 'both' ) #NEWLINE#
choice . things . all ( ) #NEWLINE#
shutil . make_archive ( target_file , format = 'bztar' , root_dir = compress_me ) #NEWLINE#
split ( 'a#SPACE#b.c' , '#SPACE#.' ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE# ax . get_yaxis ( ) . set_ticklabels ( [ ] ) #NEWLINE#
x [ np . where ( [ c != 2 ] ) [ 1 ] ] #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
plt . ion ( ) #NEWLINE#
d = pd . merge ( a , c , on = 'node' ) #NEWLINE#
cb = colorbar ( label = 'a#SPACE#label' ) #NEWLINE#
df [ 'Col#SPACE#2' ] . loc [ '1' , 'b' ] #NEWLINE#
return np . sin ( y * x ) #NEWLINE#
df [ 'end' ] = pd . to_datetime ( df [ 'end' ] ) #NEWLINE#
audio . save ( ) #NEWLINE#
cbar = fig . colorbar ( cax , ticks = [ 0 , 5 , 10 ] ) #NEWLINE#
return session . execute ( sql_string ) . fetchall ( ) #NEWLINE#
timer = pygame . time . Clock ( ) #NEWLINE#
sl . clear ( ) #NEWLINE#
d += timedelta ( days = 6 - d . weekday ( ) ) #NEWLINE#
print ( df_Quota ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
print ( get_dict_attr ( foo , 'bar' ) ) #NEWLINE#
print ( get_dict_attr ( foo , 'baz' ) ) #NEWLINE#
propnames = [ name for name , value in inspect . getmembers ( SomeClass , isprop ) ] #NEWLINE#
app . run ( ) #NEWLINE#
[ [ '(' , '2' , '.' , 'x' , '.' , '(' , '3' , '-' , '1' , ')' ] , [ '4' , ')' , '/' , '3' , #NEWLINE# '.' , 'x' , '^' , '2' ] ] #NEWLINE#
B = A [ : ] #NEWLINE#
office . grid ( row = 3 , column = 0 , sticky = tk . E ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
__tablename__ = 'node_2' #NEWLINE#
getattr ( obj , 'attr1' ) #NEWLINE#
requests . get ( 'http://127.0.0.1' ) . elapsed . total_seconds ( ) #NEWLINE#
p1 = subprocess . Popen ( [ 'hg' , 'cat' , file ] , stdout = subprocess . PIPE ) #NEWLINE#
random . choice ( 'abcde' ) #NEWLINE#
Foo ( arg1 = 1 , arg2 = 2 , arg3 = 3 ) #NEWLINE#
print ( s . find ( s2 ) ) #NEWLINE#
min ( darr ) #NEWLINE#
fields = 'url' , 'wine' , 'user' , 'date_rated' , 'rating' , 'comment' , 'get_more' #NEWLINE#
grouped = df . groupby ( [ 'desk_id' , 'shift_id' , 'shift_hour' , 'name' ] ) . size ( ) #NEWLINE#
window . show ( ) #NEWLINE#
1e-200 * np . log ( 1e-200 ) #NEWLINE#
self . hlayout . addWidget ( self . b ) #NEWLINE#
line = re . sub ( '\\(+as#SPACE#[a-zA-Z]*\\)' , '' , line ) #NEWLINE#
import lxml . etree as et #NEWLINE#
raise ValueError ( 'Can#SPACE#only#SPACE#compute#SPACE#the#SPACE#factorial#SPACE#of#SPACE#positive#SPACE#ints' ) #NEWLINE#
menubar . add_cascade ( label = 'View' , menu = view_menu ) #NEWLINE#
Encoders . encode_base64 ( eml_atch ) #NEWLINE#
sys . path . append ( '/path/to/directory/containing/views.py' ) #NEWLINE#
vocab = val [ 'text' ] . decode ( 'utf-8' ) #NEWLINE#
my_dict [ 1 ] #NEWLINE#
dialog . exec_ ( ) #NEWLINE#
mylist = [ 'c' , 'a' , 'a' , 'b' , 'a' , 'b' , 'c' ] #NEWLINE# sorted ( set ( mylist ) , key = lambda x : mylist . index ( x ) ) #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
self . foo . wait ( ) #NEWLINE#
df . rename ( columns = '' . join ) #NEWLINE#
line = line . replace ( 'car' , 'truck' ) #NEWLINE#
ax . set_xticklabels ( categories ) #NEWLINE#
np . bincount ( np . array ( A ) . view ( 'uint8' ) - 97 ) #NEWLINE#
super ( Vote , self ) . save ( * args , ** kwargs ) #NEWLINE#
df [ 'block' ] = ( df . A . shift ( 1 ) != df . A ) . astype ( int ) . cumsum ( ) #NEWLINE# df #NEWLINE#
g . set_axis_labels ( 'day' , 'tip' ) #NEWLINE#
return 'blocking' #NEWLINE#
ax . fill_between ( theta , r2 , color = 'blue' , alpha = 0.5 ) #NEWLINE#
ij = np . random . multivariate_normal ( ( 100 , 100 ) , cov , int ( 100000.0 ) ) #NEWLINE#
df [ 'C' ] = df [ 'C' ] . str . split ( '\n' ) . str [ - 1 ] #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
[ '30000#SPACE##SPACE##SPACE#' , '#SPACE##SPACE##SPACE#4,5#SPACE##SPACE#' , '1#SPACE##SPACE#' , '#SPACE##SPACE##SPACE#' ] #NEWLINE#
df [ 'New_Col' ] = 'Start' #NEWLINE#
pilImage . save ( 'outfile.png' ) #NEWLINE#
with open ( 'large_text_file' ) as fd : #NEWLINE# #INDENT# input = [ x . strip ( '|' ) . split ( '|' ) for x in fd . readlines ( ) ] #NEWLINE# to_search = { x [ 0 ] : x for x in input } #NEWLINE#
result = '' . join ( no_digits ) #NEWLINE#
hasattr ( FooChild , 'echo_bar_more' ) #NEWLINE#
curses . echo ( ) #NEWLINE#
show ( ) #NEWLINE#
print ( next ( a ) ) #NEWLINE#
df . drop_duplicates ( inplace = True ) #NEWLINE#
a = numpy . array ( [ 0 , 3 , 0 , 1 , 0 , 1 , 2 , 1 , 0 , 0 , 0 , 0 , 1 , 3 , 4 ] ) #NEWLINE#
find_matches ( list ( a ) , list ( b ) ) #NEWLINE#
layout = QtGui . QVBoxLayout ( self ) #NEWLINE#
plt . figure ( 2 ) #NEWLINE#
[ chr ( x ) for x in [ 66 , 53 , 0 , 94 ] ] #NEWLINE#
s = '#SPACE#' . join ( lst ) #NEWLINE#
numpydata = np . fromstring ( data , dtype = np . int16 ) #NEWLINE#
return '#SPACE#' . join ( [ str ( x ) for x in args ] ) #NEWLINE#
my_string = 'Hello#SPACE#{name},#SPACE#my#SPACE#name#SPACE#is#SPACE#{{my_name}}!' #NEWLINE# my_string . format ( name = 'minerz029' ) #NEWLINE#
response = br . submit ( ) #NEWLINE#
del sys . modules [ 'socket' ] #NEWLINE#
print ( 'Yes#SPACE#:D#SPACE#That#SPACE#is#SPACE#his#SPACE#age...' ) #NEWLINE#
cv2 . imshow ( 'img' , im ) #NEWLINE#
window . Maximize ( ) #NEWLINE#
self . ax . figure . canvas . mpl_connect ( 'button_release_event' , self . on_release ) #NEWLINE#
data = numpy . array ( [ [ 1 , 2 , 3 ] , [ 55 , 56 , 57 ] , [ 1 , 2 , 3 ] ] ) #NEWLINE#
list ( str ( 12345 ) ) #NEWLINE#
print ( i , line ) #NEWLINE#
super ( Subclass1 , self ) . __init__ ( ) #NEWLINE#
threading . Timer ( 1 , greeting , args = ( oh_hi , ) ) . start ( ) #NEWLINE#
matches . extend ( [ os . path . join ( root , fn ) for fn in filenames ] ) #NEWLINE#
args = parser . parse_args ( shlex . split ( argString ) ) #NEWLINE#
np . linspace ( 0 , 1 , 11 ) #NEWLINE#
self . data . grid ( row = 0 , column = 0 , rowspan = 4 , columnspan = 2 , sticky = N + E + S + W ) #NEWLINE#
env . key_filename = './private_openssh.key' #NEWLINE#
objs = map ( get_object , random . sample ( list ( range ( length ) ) , 0.001 * length ) ) #NEWLINE#
[ ( 1000 , 'C' , 'py' ) , ( 200 , 'C' , 'foo' ) ] #NEWLINE#
self . _conn . return_to_pool ( ) #NEWLINE#
plt . plot ( x , y , 'bo' ) #NEWLINE#
json_docs . append ( json_doc ) #NEWLINE#
search_for = re . compile ( '|' . join ( words ) ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
df . stack ( ) . str . extract ( '(\\d+)' ) . unstack ( ) #NEWLINE#
plt . subplot ( 2 , 1 , 1 ) #NEWLINE#
c . font . color . rgb = 'FF000000' #NEWLINE#
import numpy as np #NEWLINE#
ax2 . set_zlim3d ( zlm [ 0 ] , zlm [ 1 ] ) #NEWLINE#
ax . get_xaxis ( ) . set_visible ( False ) #NEWLINE#
return theclass . run #NEWLINE#
y = data [ : , ( 0 ) ] #NEWLINE#
"select#SPACE#*#SPACE#from#SPACE#Throughput#SPACE#where#SPACE#DeviceName='%s'" % data [ 'DeviceName' ] #NEWLINE#
tasks . join ( ) #NEWLINE#
return s if len ( s ) <= l else s [ 0 : l - 3 ] + '...' #NEWLINE#
f . writelines ( lines ) #NEWLINE#
setenv ( 'PYTHONPATH' , '.' , 1 ) #NEWLINE#
u [ np . argmax ( np . bincount ( indices ) ) ] #NEWLINE#
self . fields [ 'field_being_added' ] . initial = 'Corresponding#SPACE#result#SPACE#queryset' #NEWLINE#
ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
x = tf . placeholder ( tf . float32 , shape = [ None , 2 ] ) #NEWLINE#
driver = webdriver . Firefox ( proxy = proxy_config , firefox_profile = prof ) #NEWLINE#
print ( '\n' . join ( label + '\n' + '---' . join ( vals ) for label , vals in zipped ) ) #NEWLINE#
next ( ( i for i , ch in enumerate ( s ) if ch in a ) , None ) #NEWLINE#
print ( 'Sleep#SPACE#for#SPACE#1#SPACE#second...' ) #NEWLINE#
re . sub ( '(?<=<)(\\w+)(?=>)' , lambda m : d . get ( m . group ( ) , m . group ( ) ) , s ) #NEWLINE#
re . sub ( '<(\\w+)>' , lambda m : d . get ( m . group ( ) , m . group ( ) ) , s ) #NEWLINE#
s = '\x05' #NEWLINE# sys . getsizeof ( s ) #NEWLINE#
print ( out . upper ( ) ) #NEWLINE#
__init__ . py #NEWLINE#
cs = a , b , c , d #NEWLINE#
fp = open ( 'file.txt' ) #NEWLINE# s = fp . read ( ) #NEWLINE# u = s . decode ( 'utf-8-sig' ) #NEWLINE#
setup_django_env ( '/path/to/django/project/' ) #NEWLINE#
plt . plot ( g [ abs ( g - i ) < 1 ] , p [ abs ( g - i ) < 1 ] , ls = '' , marker = '.' ) #NEWLINE#
keys , values = list ( dict . keys ( ) ) , list ( dict . values ( ) ) #NEWLINE#
mydriver . maximize_window ( ) #NEWLINE#
cursor . execute ( query ) #NEWLINE#
termf . pack ( fill = BOTH , expand = YES ) #NEWLINE#
ET . XMLTreeBuilder . __init__ ( self ) #NEWLINE#
prath [ 0 : 1 ] [ [ 'r' , 'g' , 'b' ] ] = 4 , 5 , 6 #NEWLINE#
print ( parser . parse_args ( '--foo#SPACE#B#SPACE#cmd#SPACE#--arg1#SPACE#XX#SPACE#ZZ' . split ( ) ) ) #NEWLINE#
plt . yscale ( 'log' ) #NEWLINE#
raise Exception ( 'Some#SPACE#exception#SPACE#occurs!!' ) #NEWLINE#
x . replace ( [ 1 , 2 , 3 , 4 ] , [ - 1 , - 2 , - 3 , - 4 ] ) #NEWLINE#
response [ 'X-Sendfile' ] = smart_str ( path_to_file ) #NEWLINE#
s = s . encode ( 'utf-8' ) . translate ( None , string . punctuation ) #NEWLINE#
return str ( self ) #NEWLINE#
next ( reader , None ) #NEWLINE#
return { 'request' : self . request , 'format' : self . format_kwarg , 'view' : self } #NEWLINE#
window_after = driver . window_handles [ 1 ] #NEWLINE#
i += 1 #NEWLINE#
foo . stop ( ) #NEWLINE#
ttk . Radiobutton ( self . mainframe , value = 2 ) . grid ( column = 3 , row = 2 ) #NEWLINE#
center = ( max ( x ) + min ( x ) ) / 2.0 , ( max ( y ) + min ( y ) ) / 2.0 #NEWLINE#
print ( user [ 'name' ] ) #NEWLINE#
words . append ( '' . join ( word ) ) #NEWLINE#
dct = { k : sum ( 1 for _ in g ) for k , g in groupby ( words ) } #NEWLINE#
[ ( 'Hello' , 2.5 , 3 ) ( 'World' , 3.5999999046325684 , 2 ) ] #NEWLINE#
print ( '\n' . join ( blurb ) ) #NEWLINE#
python - - version #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
self . assertEqual ( ng . name , 'Bob' ) #NEWLINE#
sns . set_palette ( flatui ) #NEWLINE#
csvout . write ( '\n' ) #NEWLINE#
df . loc [ df [ df [ 'b' ] == 0 ] . index . tolist ( ) [ 0 ] , 'a' ] = 0 #NEWLINE#
assert diff_month ( datetime ( 2010 , 10 , 1 ) , datetime ( 2010 , 9 , 1 ) ) == 1 #NEWLINE#
logger2 . info ( 'this#SPACE#will#SPACE#be#SPACE#logged#SPACE#to#SPACE#file_2#SPACE#' ) #NEWLINE#
ContestResults . objects . filter ( contest = instance ) . delete ( ) #NEWLINE#
foo = Foo ( ) #NEWLINE#
ax1 = plt . subplot ( gs1 [ i ] ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
lambda v : tryconvert ( v , 0 , int ) #NEWLINE#
sys . path . append ( 'd:/projects/mysite' ) #NEWLINE#
return super ( Factory , cls ) . __new__ ( cls ) #NEWLINE#
return subj . translate ( None , '' . join ( chars ) ) #NEWLINE#
lower_keys ( { 'NESTED' : { 'ANSWER' : 42 } } ) #NEWLINE#
db . session . commit ( ) #NEWLINE#
User . objects . raw ( sql , [ q ] ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
print ( e . getAttribute ( 'myatt' ) ) #NEWLINE#
x . loc [ ( x . A >= 3.3 ) & ( x . A <= 6.6 ) ] #NEWLINE#
new_list . append ( data [ index ] [ current_index ] ) #NEWLINE#
driver . close ( ) #NEWLINE#
zf . seek ( 0 ) #NEWLINE#
self . assertFileExists ( 'any/file/path' ) #NEWLINE#
df [ df . ge ( 0 ) ] . fillna ( - 9999 ) #NEWLINE#
SOCIAL_AUTH_PIPELINE += '<application>.pipelines.update_avatar' , #NEWLINE#
( '12392' , 'some#SPACE#new#SPACE#string' , 'some#SPACE#other#SPACE#string' ) , #NEWLINE#
unicodedata . numeric ( '⅕' ) #NEWLINE#
myPixmap = QtGui . QPixmap ( _fromUtf8 ( 'image.jpg' ) ) #NEWLINE#
ax . plot ( x , 0.5 * ( 3 * x ** 2 - 1 ) , color = 'green' , ls = '--' , label = '$P_2(x)$' ) #NEWLINE#
ax2 . set_ylabel ( 'Price' ) #NEWLINE#
raise Exception ( 'lala' ) #NEWLINE#
slice ( 8 , None ) . indices ( len ( s ) ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
ax . xaxis . set_major_locator ( days ) #NEWLINE#
{ { narratives . narrative_text } } #NEWLINE#
fout . close ( ) #NEWLINE#
axclust . set_yticks ( [ ] ) #NEWLINE#
axcltwo . set_yticks ( [ ] ) #NEWLINE#
var_name = 'my_useful_string' #NEWLINE#
f . close ( ) #NEWLINE#
plt . legend ( loc = 'upper#SPACE#left' , bbox_to_anchor = ( 1 , 1 ) ) #NEWLINE#
frame . columnconfigure ( 1 , weight = 1 ) #NEWLINE#
return open ( os . path . join ( MEDIA_DIR , 'network.html' ) ) #NEWLINE#
doc . doctype #NEWLINE#
legend_fig . savefig ( 'legend_original.png' ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
chars_to_remove = [ 'Î´' , 'Î\x93' , 'Ð¶' ] #NEWLINE#
get_value ( dic , 3 ) #NEWLINE#
map ( lambda row : map ( int , row ) , inputVals ) #NEWLINE#
pl . figure ( ) #NEWLINE#
A [ [ 0 , 1 , 1 , 4 , 4 ] , [ 0 , 3 , 5 , 1 , 5 ] ] = 1.08 #NEWLINE#
a + list ( repeat ( 0 , 6 ) ) #NEWLINE#
plt . imshow ( a , cmap = plt . gray ( ) ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
arr [ 0 , 0 ] #NEWLINE#
self . assertEqual ( my_module . my_function_with_global_var ( ) , 'First#SPACE#result' ) #NEWLINE#
print ( repr ( string ) ) #NEWLINE#
names . remove ( name ) #NEWLINE#
print ( map ( str , rr [ : : 2 ] ) ) #NEWLINE#
plt . savefig ( 'mixture.pdf' ) #NEWLINE#
'Best#SPACE#phonemes:#SPACE#' , [ 'SIL' , 'G' , 'OW' , 'F' , 'AO' , 'R' , 'W' , 'ER' , 'D' , 'T' , #NEWLINE# 'AE' , 'N' , 'NG' , 'IY' , 'IH' , 'ZH' , 'ER' , 'Z' , 'S' , 'V' , 'SIL' ] #NEWLINE#
print ( 'No#SPACE#exception:#SPACE#' + str ( result ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( 'co_varnames#SPACE#=#SPACE#' , test . __code__ . co_varnames ) #NEWLINE#
import networkx as nx #NEWLINE#
from bs4 import BeautifulSoup #NEWLINE# soup = BeautifulSoup ( html ) #NEWLINE# print ( soup . get_text ( ) ) #NEWLINE#
result [ k ] += myDict [ k ] #NEWLINE#
pd . concat ( [ df ] * 3 , ignore_index = True ) #NEWLINE#
ax = fig . add_subplot ( gs [ 0 ] ) #NEWLINE#
HTMLParser . __init__ ( self ) #NEWLINE#
self . assertEqual ( response . status_code , 301 ) #NEWLINE#
[ 1 , 2 , 3 ] [ 1 ] #NEWLINE#
val , weight = zip ( * [ ( k , v ) for k , v in list ( counted_data . items ( ) ) ] ) #NEWLINE# plt . hist ( val , weights = weight ) #NEWLINE#
result = { k : d1 [ k ] for k in keys } #NEWLINE#
int ( - 1 / 3 ) == - 1 // 3 #NEWLINE#
plt . imshow ( img_a ) #NEWLINE#
my_exec ( '1+1\nbork' ) #NEWLINE#
s . login ( 'xyz@gmail.com' , 'xyzpassword' ) #NEWLINE#
OrderedDict . __init__ ( self , * args , ** kwds ) #NEWLINE#
globals ( ) [ key ] = value #NEWLINE#
Timer ( '"%s"%x' , 'x=100000' ) . timeit ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
_log = logging . getLogger ( 'package.module' ) #NEWLINE#
ax . set_yticklabels ( names ) #NEWLINE#
worksheet4 = workbook . add_worksheet ( ) #NEWLINE#
table . reset_index ( ) #NEWLINE#
y = x [ : ] #NEWLINE#
fig . set_facecolor ( 'w' ) #NEWLINE#
print ( prev . tb_frame . f_locals ) #NEWLINE#
self . cursor . commit ( ) #NEWLINE#
raise MyException ( 'Something#SPACE#Happened...' ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
a = 3 #NEWLINE#
sys . _getframe ( number ) #NEWLINE#
axes [ 1 ] . set_aspect ( 1 ) #NEWLINE#
fd . write ( data ) #NEWLINE#
plt . legend ( loc = 'lower#SPACE#right' ) #NEWLINE#
result = json . loads ( output ) #NEWLINE# print ( result ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
if sys . platform == 'win32' : #NEWLINE# #INDENT# os . startfile ( d ) #NEWLINE#
{ 'A' : 0 , 'B' : 0 } #NEWLINE#
i = np . array ( [ [ 0 , 1 , 2 , 4 , 3 ] , [ 0 , 1 , 2 , 3 , 4 ] ] ) #NEWLINE#
b = a + b #NEWLINE#
pprint ( Matrix ( [ [ 1 / ( 4 * pi ) , 1 ] , [ 1 , f ( x ) ] ] ) ) #NEWLINE#
img = ndimage . imread ( 'image.png' ) #NEWLINE#
step_1 . drop ( [ 'dummy' , 'c' ] , inplace = True , axis = 1 ) #NEWLINE#
print ( ( 'z=' , z , 'func3' ) ) #NEWLINE#
A . todense ( ) #NEWLINE#
{ ( 2 ) : 2 , ( 3 ) : 1 , ( 4 ) : 1 } #NEWLINE#
return pd . concat ( subs ) #NEWLINE#
class B ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
del sys . modules [ 'module1' ] #NEWLINE#
next ( i for i , v in enumerate ( list ) if v . lower ( ) == 'mg' ) #NEWLINE#
searchB . config ( state = 'normal' ) #NEWLINE#
app = Flask ( __name__ , static_folder = 'static' , static_url_path = '' ) #NEWLINE#
return [ '' . join ( it . chain . from_iterable ( x ) ) for x in zipped ] #NEWLINE#
self . canvas . configure ( yscrollcommand = self . ysb . set , xscrollcommand = self . xsb . set ) #NEWLINE#
re . sub ( '([A-Z])\\1' , replacement , 'start#SPACE#TT#SPACE#end' ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPHandler , handler ) #NEWLINE#
s = '355879ACB6' #NEWLINE# s [ 4 : 4 ] = '-' #NEWLINE#
setting2 = config2 #NEWLINE#
set ( [ 5 , 6 ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . show ( ) #NEWLINE#
p . start ( ) #NEWLINE#
d = { 'Color' : [ 'Red' , 'Yellow' ] , 'Size' : [ 'Small' , 'Medium' , 'Large' ] } #NEWLINE#
newpath = 'C:\\Program#SPACE#Files\\arbitrary' #NEWLINE# if not os . path . exists ( newpath ) : #NEWLINE# #INDENT# os . makedirs ( newpath ) #NEWLINE#
self . name = name #NEWLINE#
list1 . sort ( key = lambda x : ( int ( x . split ( ) [ 0 ] ) , x . split ( '#SPACE#' , 1 ) ) ) #NEWLINE#
b = np . array ( [ [ 'h' , 'e' , 'l' , 'l' , 'o' ] , [ 's' , 'n' , 'a' , 'k' , 'e' ] , [ 'p' , #NEWLINE# 'l' , 'a' , 't' , 'e' ] ] ) #NEWLINE#
gtk . main ( ) #NEWLINE#
db . backup . insert ( list ( cursor ) ) #NEWLINE#
django . setup ( ) #NEWLINE#
my_logger . setLevel ( logging . DEBUG ) #NEWLINE#
view . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
main . py #NEWLINE#
paired_sorted = sorted ( zip ( List2 , List3 , List1 ) , key = lambda x : ( x [ 0 ] , - x [ 1 ] ) ) #NEWLINE#
d . append ( ',#SPACE#' . join ( g ) ) #NEWLINE#
print ( df . head ( ) ) #NEWLINE#
a . set_title ( 'Before' ) #NEWLINE#
a . set_title ( 'After' ) #NEWLINE#
mpl . use ( 'Agg' ) #NEWLINE#
print ( find_str ( 'Happy#SPACE#birthday' , 'rth' ) ) #NEWLINE#
df . append ( pd . DataFrame . from_records ( [ mydict , mydict2 ] , [ 'SRT' , 'SRT1' ] ) ) #NEWLINE#
cursor . execute ( "SELECT#SPACE#name#SPACE#FROM#SPACE#sqlite_master#SPACE#WHERE#SPACE#type='table';" ) #NEWLINE#
lst . append ( [ 'another' , 'list' ] ) #NEWLINE#
km = KMeans ( ) #NEWLINE#
proc = subprocess . Popen ( [ 'mkdir' , '/usr/share/sounds/blues' ] ) #NEWLINE#
applylast ( f , ( 1 , 2 ) , 3 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
screen = pygame . display . set_mode ( ( 640 , 480 ) ) #NEWLINE#
[ a , b ] #NEWLINE#
index = np . array ( [ 0 , 1 ] ) #NEWLINE#
client . options . transport . last_headers #NEWLINE#
sys . exit ( rc ) #NEWLINE#
super ( C , self ) . __init__ ( ) #NEWLINE#
data = np . genfromtxt ( path_to_csv , dtype = None , delimiter = ',' , names = True ) #NEWLINE#
plt . ylabel ( 'count' ) #NEWLINE#
sys . stdout . write ( 'aaaa' ) #NEWLINE#
date = datetime . datetime . fromtimestamp ( timestamp ) #NEWLINE#
if x not in my_queue : #NEWLINE# #INDENT# my_queue . put ( x ) #NEWLINE#
output = subprocess . check_output ( [ 'python' , 'manage.py' , 'syncdb' ] ) #NEWLINE#
pd . merge ( df1 , df2 , left_index = True , right_index = True ) #NEWLINE#
plt . draw ( ) #NEWLINE#
parser = etree . XMLParser ( recover = True ) #NEWLINE#
PROJECT_ROOT = os . path . dirname ( __file__ ) #NEWLINE#
today = date . today ( ) #NEWLINE#
arr [ 0 , 1 ] = 'abc' #NEWLINE#
cfg . readfp ( codecs . open ( 'myconfig' , 'r' , 'utf8' ) ) #NEWLINE#
"""35#SPACE#of#SPACE#Jon#SPACE#2013#SPACE#trans.#SPACE#(P)#SPACE#31#SPACE#of#SPACE#Sansa#SPACE#2014#SPACE#filled#SPACE#3232#SPACE#of#SPACE#Arya#SPACE#2014#SPACE#empty#SPACE#345#SPACE#of#SPACE#Bran#SPACE#2011#SPACE#sealed,#SPACE#(P)""" #NEWLINE#
df = df . rename ( columns = { 'oldName1' : 'newName1' , 'oldName2' : 'newName2' } ) #NEWLINE# df . rename ( columns = { 'oldName1' : 'newName1' , 'oldName2' : 'newName2' } , inplace #NEWLINE# = True ) #NEWLINE#
o . subscribe ( my_callback_func ) #NEWLINE#
a = 'test' #NEWLINE# print ( '#SPACE#' . join ( format ( ord ( x ) , 'b' ) for x in a ) ) #NEWLINE#
d [ 'a' ] #NEWLINE#
self . pname = 'mypipe' #NEWLINE#
print ( [ x for x in range ( 1 , 1000 ) if pred ( x ) ] ) #NEWLINE#
fout . writelines ( itertools . takewhile ( lambda line : line . strip ( ) != 'End' , it ) ) #NEWLINE#
return upstreamfunction ( int ( value ) ) #NEWLINE#
raise SystemExit ( 1 ) #NEWLINE#
Animal = Enum ( 'Animal' , [ ( a , a ) for a in ( 'horse' , 'dog' ) ] , type = str ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""Prints#SPACE#both""" #NEWLINE#
"""dog""" . center ( 5 , 'x' ) #NEWLINE#
conn . close ( ) #NEWLINE#
df = pd . DataFrame ( ) #NEWLINE#
b = [ 40 , 20 , 70 , 10 , 20 , 50 , 30 , 40 , 20 ] #NEWLINE#
plt . tick_params ( axis = 'y' , which = 'minor' , labelsize = 35 , pad = 15 ) #NEWLINE#
s . write ( 'foo' ) #NEWLINE#
print ( '×©×¨×ª' . encode ( 'latin-1' ) . decode ( 'utf-8' ) ) #NEWLINE#
return text . translate ( { ord ( i ) : None for i in 'aeiouAEIOU' } ) #NEWLINE#
super ( FooAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
import imp #NEWLINE# imp . reload ( sys . modules [ 'myModule.subModule' ] ) #NEWLINE#
process = subprocess . Popen ( [ 'yourcommand' ] , stdout = subprocess . PIPE ) #NEWLINE#
model_to_dict ( instance , fields = [ field . name for field in instance . _meta . fields ] ) #NEWLINE#
df2 = df . set_index ( 'timestamp' , sorted = True ) #NEWLINE#
plt . savefig ( 'seaborn-on.png' ) #NEWLINE#
df . groupby ( [ 'Group' , 'Size' ] ) . size ( ) #NEWLINE#
return 'This#SPACE#gets#SPACE#passed#SPACE#to#SPACE#rv' #NEWLINE#
db_proxy . connect ( ) #NEWLINE#
os . chdir ( path_dir ) #NEWLINE#
data . add ( 'interests' , 'basketball' ) #NEWLINE#
return np . corrcoef ( signal [ : - 1 ] , signal [ 1 : ] ) [ 0 ] [ 1 ] #NEWLINE#
[ [ 1 ] , [ 3 , 7 , 8 ] , [ 9 ] ] #NEWLINE#
[ 'hello' , '-' , '' , '+=' , '' , '==' , '' , '=' , '' , None , '' , '=' , '' , '+' , '' , #NEWLINE# None , 'there' ] #NEWLINE#
combine_csvs ( dict ( files = [ 'file1.csv' , 'file2.csv' , 'file3.csv' ] ) , 'output.csv' ) #NEWLINE#
B . append ( [ None ] * n ) #NEWLINE#
cookie = { 'Cookie' : 'my_cookie=heyhey' } #NEWLINE#
self . top_right . grid ( row = 0 , column = 2 , sticky = 'e' ) #NEWLINE#
req = mechanize . Request ( 'https://www.site.com/path/' + url , '#SPACE#' ) #NEWLINE#
z = np . array ( [ 1 , 2 ] ) #NEWLINE# v = np . array ( [ [ 3 ] , [ 4 ] , [ 5 ] ] ) #NEWLINE#
print ( dt - datetime . fromtimestamp ( s * factor ) ) #NEWLINE#
Decimal ( ( 0 , a , - len ( a ) + 1 ) ) #NEWLINE#
print ( get_color_name ( 'faeb11' ) ) #NEWLINE#
print ( 'OVERRIDE#SPACE#ONE' ) #NEWLINE#
mimetypes . add_type ( 'image/svg+xml' , '.svg' ) #NEWLINE#
df = df [ df . end_date . notnull ( ) ] #NEWLINE#
metadata . create_all ( ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
total_loss = tf . add_n ( losses ) #NEWLINE#
plt . ylabel ( 'True#SPACE#Positive#SPACE#Rate' ) #NEWLINE#
gzip_file_handle = gzip . GzipFile ( fileobj = url_file_handle ) #NEWLINE#
{ 'Name' : 'Cat' , 'Priority' : '1' , 'Row' : '1' , 'Year' : '1998' } #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
textfile . write ( artigo ) #NEWLINE#
whos #NEWLINE#
print ( [ f for f in glob . glob ( '/tmp/*' ) if os . path . isfile ( f ) ] ) #NEWLINE# print ( sum ( os . path . isfile ( f ) for f in glob . glob ( '/tmp/*' ) ) ) #NEWLINE#
django . utils . simplejson . loads ( someJson ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( threaded = True ) #NEWLINE#
df . columns #NEWLINE#
self . show_progress ( 100 ) #NEWLINE#
response = view ( request ) #NEWLINE#
text_file = open ( 'read_it.txt' , 'r' ) #NEWLINE#
print ( zdd1 . join ( zdd2 ) . collect ( ) ) #NEWLINE#
p [ i ] += 1 #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
p2 = Process ( target = func2 ) #NEWLINE#
Class . method ( instance , argument ) #NEWLINE#
subprocess . call ( 'ConvertXLS.EXE#SPACE#' + str ( f ) + '#SPACE#--arguments' , shell = True ) #NEWLINE#
for row in reversed ( list ( csv . reader ( textfile ) ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
pyximport . install ( ) #NEWLINE#
ax . plot ( x , y , color = uniqueish_color ( ) ) #NEWLINE# plt . show ( ) #NEWLINE#
return gen1 , gen2 #NEWLINE#
np . add . outer ( a , a ) #NEWLINE#
r = requests . post ( url , data = form_data , headers = user_agent ) #NEWLINE#
hash ( tuple ( ) ) #NEWLINE#
pickle . dump ( orig , open ( 'simple.pickle' , 'w' ) ) #NEWLINE#
s = s . rstrip ( '_' ) #NEWLINE#
mlab . start ( ) #NEWLINE#
print ( '{}#SPACE#:#SPACE#{}' . format ( attribute , value ) ) #NEWLINE#
importlib . import_module ( 'driver.optiups' ) #NEWLINE#
urllib . parse . quote ( s ) #NEWLINE#
proc . communicate ( 'password' ) #NEWLINE#
bool ( BeautifulSoup ( html , 'html.parser' ) . find ( ) ) #NEWLINE#
DataFrame ( foo , index = df . index ) #NEWLINE#
process ( line ) #NEWLINE#
np . random . seed ( 31 ) #NEWLINE#
logging . warning ( 'test' , extra = { 'foo' : 'bar' } ) #NEWLINE#
d . setdefault ( 3 , [ ] ) . append ( 100 ) #NEWLINE#
fields = [ 'name' ] #NEWLINE#
"""\"""" #NEWLINE#
"""'""" #NEWLINE#
import lxml . html as lh #NEWLINE#
np . array ( [ x for x in aset & bset ] ) #NEWLINE#
return self . __dict__ == other . __dict__ #NEWLINE#
driver . find_element_by_id ( 'kw' ) . send_keys ( 'python' ) #NEWLINE#
frames . append ( df ) #NEWLINE#
pd . to_datetime ( s ) #NEWLINE#
c . setopt ( c . WRITEFUNCTION , retrieved_body . store ) #NEWLINE#
geonames_url = 'http://download.geonames.org/export/dump/' #NEWLINE#
[ [ - 2 ] , [ 9 , 5 ] , [ 3 , - 6 , 3 ] , [ - 1 , 2 , 5 , 2 ] , [ 8 , 7 , 1 ] , [ - 4 , 3 ] , [ 8 ] , [ 2 ] , [ 3 , #NEWLINE# 1 ] , [ 5 , 5 , 3 ] , [ - 2 , - 6 , 7 , 8 ] , [ 9 , 2 , - 4 ] , [ 3 , 8 ] , [ - 1 ] ] #NEWLINE#
persons_by_jobs [ person [ 'job' ] ] . append ( person [ 'person' ] ) #NEWLINE#
x = sympy . symbols ( 'x' ) #NEWLINE#
match = re . search ( '\\(([^()]*)\\)(\\d|s)' , s ) #NEWLINE#
nltk . download ( 'maxent_treebank_pos_tagger' ) #NEWLINE#
w , h = 8 , 5 #NEWLINE# Matrix = [ [ ( 0 ) for x in range ( w ) ] for y in range ( h ) ] #NEWLINE#
plt . subplot ( 131 ) #NEWLINE#
plt . show ( ) #NEWLINE#
yield list ( list ( row ) for row in itertools . islice ( iterator , size ) ) #NEWLINE#
s . connect ( ( ip , port ) ) #NEWLINE#
print ( 'Hello#SPACE#world!' ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
m . bluemarble ( ) #NEWLINE#
draw = ImageDraw . Draw ( mask ) #NEWLINE#
list1 = [ [ 10 , 13 , 17 ] , [ 3 , 5 , 1 ] , [ 13 , 11 , 12 ] ] #NEWLINE#
df [ 'a' ] = df [ 'a' ] . map ( lambda a : x / 2 ) #NEWLINE#
template = cv2 . GaussianBlur ( template , ( 3 , 3 ) , 2 ) #NEWLINE#
n % 232792560 == 0 #NEWLINE#
axcb . set_label ( 'cota#SPACE#(m)' ) #NEWLINE#
[ 'a@b.com' , 'c@d.com' , 'e@f.com' , 'g@h.com' ] #NEWLINE#
app . register_blueprint ( filters . blueprint ) #NEWLINE#
print ( response . request . headers [ 'User-Agent' ] ) #NEWLINE#
print ( ( 'syncarr#SPACE#set:' , str ( syncarr_tmp ) ) ) #NEWLINE#
return b [ : len ( a ) ] == a or is_sublist ( a , b [ 1 : ] ) #NEWLINE#
wx . NO_BORDER ^ wx . SYSTEM_MENU ^ wx . MINIMIZE_BOX ^ wx . MAXIMIZE_BOX ^ wx . CLOSE_BOX #NEWLINE#
assert find_max ( [ - 5 , 1 , 4 , - 2 , 2 , - 1 , 2 , - 3 , 1 , - 3 , 4 ] ) == 6 #NEWLINE#
pd . read_csv ( s , index_col = 0 , parse_dates = True , dayfirst = True ) #NEWLINE#
parser . add_argument ( '--sample-objects' , nargs = '*' , action = 'append' ) #NEWLINE#
pl . xticks ( [ ] ) #NEWLINE#
print ( "Could#SPACE#not#SPACE#parse#SPACE#'{0}'" . format ( line ) ) #NEWLINE#
resp . headers [ 'Access-Control-Allow-Origin' ] = '*' #NEWLINE#
self . navigate ( - 1 ) #NEWLINE#
exec ( a , globals ( ) ) #NEWLINE#
from PySide import QtGui #NEWLINE#
print ( list ( igroups ( [ 8 , 9 , 10 , 11 , 7 , 1 , 2 , 3 , 4 , 5 , 6 ] ) ) ) #NEWLINE#
main ( ) #NEWLINE#
{ ( 2 ) : 1 , ( 3 ) : 1 , ( 4 ) : 1 , ( 5 ) : 1 } #NEWLINE#
np . loadtxt ( 'cov.csv' ) #NEWLINE# np . loadtxt ( 'cov.csv' , delimiter = ',' ) #NEWLINE#
log . info ( 'sent#SPACE#to#SPACE#journal' ) #NEWLINE#
self . last_name = last_name #NEWLINE#
L = [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 1 , 2 , 3 ] ] #NEWLINE#
print ( bs1 . find ( 'a' ) . contents ) #NEWLINE#
a = np . array ( [ [ 5 , 7 ] , [ 12 , 18 ] , [ 20 , 29 ] ] ) #NEWLINE#
AaBbCcDdEeFfGgHhIiJjKkLlMNOPQRSTUVWXYZ #NEWLINE#
print ( p . groupby ( p . ne ( p . shift ( ) ) . cumsum ( ) ) . cumcount ( ) ) #NEWLINE#
def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# super ( UsuarioForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# self . fields . pop ( 'is_staff' ) #NEWLINE#
ax = plt . figure ( ) . gca ( ) #NEWLINE# ax . xaxis . set_major_locator ( MaxNLocator ( integer = True ) ) #NEWLINE#
df #NEWLINE#
main ( ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
fig , ax = plt . subplots ( figsize = a4_dims ) #NEWLINE#
blurred = gaussian_filter ( a , sigma = 7 ) #NEWLINE#
d = dict ( zip ( m [ : : 2 ] , m [ 1 : : 2 ] ) ) #NEWLINE#
np . sort ( np . partition ( x , - 10 ) [ - 10 : ] ) #NEWLINE#
bot . polling ( ) #NEWLINE#
"""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAENxBRpFYmctaKCfwrBSCrRLuL3iEW6+EEUG8XvIVjYWNgJdhFjIXrz6pKtPB5e5rmq7tmxk+hqO34e1or0yXTGrj9sXGs1Ib73efh1AAAABJRU5ErkJggg==""" #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
self . response . headers . add_header ( * jar . output ( ) . split ( ':#SPACE#' , 1 ) ) #NEWLINE#
d = dict ( map ( tabsplit , list1 ) ) #NEWLINE#
answers = relationship ( 'Answer' , backref = 'profile' ) #NEWLINE#
pandas . tslib . TimestampTimestamp ( '2013-01-01#SPACE#00:00:00' , tz = None ) #NEWLINE#
Obj1 . grid_forget ( ) #NEWLINE#
window . show ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
process . stdin . close ( ) #NEWLINE#
plt . setp ( ax . get_xticklines ( ) [ - 2 : ] , visible = False ) #NEWLINE#
print ( 'Hey' , fruit , '!' ) #NEWLINE#
subprocess . call ( ( 'open' , filepath ) ) #NEWLINE#
print ( max ( path . nodes , key = operator . attrgetter ( 'y' ) ) ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
re . findall ( '\\[([^]]*)\\]' , sample ) #NEWLINE#
regex2 = '[-+]?\\d*\\.?\\d+' #NEWLINE#
return z . sum ( axis = 1 ) #NEWLINE#
f . write ( line ) #NEWLINE#
print ( median ( [ 5 , 2 , 4 , 3 , 1 ] ) ) #NEWLINE#
[ 3 , 1 , 0 , 2 ] #NEWLINE#
for i in range ( 101 ) : #NEWLINE# #INDENT# rgb = colorsys . hsv_to_rgb ( i / 300.0 , 1.0 , 1.0 ) #NEWLINE# print ( ( i , [ round ( 255 * x ) for x in rgb ] ) ) #NEWLINE#
map ( convert , a ) #NEWLINE#
all_links = soup . findAll ( 'a' ) #NEWLINE#
super ( ) . __init__ ( 'Child' ) #NEWLINE#
array ( [ 5.33 ] ) #NEWLINE#
print ( d . foo ( ) ) #NEWLINE#
ans = np . logical_and ( np . logical_and ( array1 != 0 , array2 != 0 ) , array1 == array2 #NEWLINE# ) #NEWLINE#
urllib . request . urlopen ( URL ) . read ( ) #NEWLINE#
print ( '"%s"#SPACE#cannot#SPACE#be#SPACE#converted#SPACE#to#SPACE#an#SPACE#int:#SPACE#%s' % ( value , ex ) ) #NEWLINE#
print ( my_hex ) #NEWLINE#
numpy . isfinite ( myarray ) . all ( ) #NEWLINE#
self . _sock . sendall ( data ) #NEWLINE#
printf ( 'done' ) #NEWLINE#
paramdata . to_csv ( sys . stdout ) #NEWLINE#
EMAIL_HOST_PASSWORD = 'my_emails_password' #NEWLINE#
func ( 1 , 2 , 3 , kw = 4 ) #NEWLINE#
set ( [ 'bacon' , 'cake' , 'milk' ] ) #NEWLINE# set ( [ 'cheese' , 'tomato' ] ) #NEWLINE#
ser . readline ( ) #NEWLINE#
p1 . stdout . close ( ) #NEWLINE#
df [ df . apply ( lambda x : x . A in x . B , axis = 1 ) ] #NEWLINE#
ttk . Radiobutton ( self . mainframe , value = 3 ) . grid ( column = 4 , row = 2 ) #NEWLINE#
sum ( x is 0 for x in arr ) #NEWLINE#
df . groupby ( 'Country' ) . size ( ) . sort_values ( ascending = False ) . reset_index ( name = #NEWLINE# 'Sum#SPACE#of#SPACE#Accidents' ) #NEWLINE#
OPENID_SSO_SERVER_URL = 'https://www.google.com/accounts/o8/id' #NEWLINE#
file_bytes . seek ( 0 , 0 ) #NEWLINE#
main ( ) #NEWLINE#
df [ weird ] #NEWLINE#
self . client = paramiko . SSHClient ( ) #NEWLINE#
x = numpy . array ( [ 0 , 1 , 1 , 2 , 2 , 2 ] ) #NEWLINE#
f = open ( filename , 'r' ) #NEWLINE# f . seek ( 55 ) #NEWLINE#
np . random . shuffle ( curr_data ) #NEWLINE#
d . suggest ( 'Helo' ) #NEWLINE#
return '' . join ( self . _lines ) #NEWLINE#
tn . write ( 'command2' ) #NEWLINE#
tn . write ( 'command3' ) #NEWLINE#
tn . write ( 'command4' ) #NEWLINE#
tn . write ( 'exit\n' ) #NEWLINE#
axes [ 1 , 1 ] . set_title ( 'Gaussian#SPACE#KDE' ) #NEWLINE#
ax [ 1 ] . set_xlabel ( '$x$' ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 'a' , 'b' , 'c' , 'a' ] } ) #NEWLINE# df [ 'B' ] = df [ 'A' ] . astype ( 'category' ) #NEWLINE# df #NEWLINE#
print ( user [ 'username' ] ) #NEWLINE#
self . layout . addWidget ( self . button1 ) #NEWLINE#
second = [ y for x , y in data ] #NEWLINE#
df = df . merge ( windows , on = [ 'company' , 'date' ] , how = 'outer' ) #NEWLINE#
conn . commit ( ) #NEWLINE#
st . ttest_ind ( A [ mask ] , B [ mask ] ) #NEWLINE#
buf . seek ( 0 ) #NEWLINE#
p = re . compile ( '\\([^()]*\\)' ) #NEWLINE#
complete_path = os . path . abspath ( complete_path ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
os . play ( ) #NEWLINE#
lowcut = 500.0 #NEWLINE#
"""((?<=[\\s:~])(\\w+)\\s*\\(([\\w\\s,<>\\[\\].=&':/*]*?)\\)\\s*(const)?\\s*(?={))""" #NEWLINE#
run ( ) #NEWLINE#
result = a [ np . argsort ( a ) [ : k ] ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
PWD = os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE# df #NEWLINE#
class Test ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , somevalue ) : #NEWLINE# #INDENT# #INDENT# self . somevalue = somevalue #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# @ memoize #NEWLINE# def get_test_from_value ( somevalue ) : #NEWLINE# #INDENT# return Test ( somevalue ) #NEWLINE#
int2bytes ( 50308 ) . decode ( 'utf-8' ) #NEWLINE#
sizes = [ display . GetGeometry ( ) . GetSize ( ) for display in displays ] #NEWLINE#
re . findall ( p , 'abbbcppq' ) #NEWLINE#
test . py #NEWLINE#
url_search ( 'this#SPACE#is#SPACE#a#SPACE#<a#SPACE#href="test">' , 'test' ) #NEWLINE#
[ 0 , 1 , 2 ] #NEWLINE#
df = pd . DataFrame ( array , columns = ( 'Test1' , 'toto' , 'test2' , 'riri' ) ) #NEWLINE#
matches = re . finditer ( '(?=(\\d{10}))' , s ) #NEWLINE#
print ( 'here#SPACE#is#SPACE#a#SPACE#number:#SPACE#' + 2 ) #NEWLINE#
self . value = self . left . value + self . right . value #NEWLINE#
print ( str ( lst ) . translate ( None , "'" ) ) #NEWLINE#
xx = np . arange ( - 0.5 , 5.5 , 0.01 ) #NEWLINE#
lines . append ( text ) #NEWLINE#
"""{0}#SPACE#{1}""" . format ( 'Hey' , 'Hey' ) #NEWLINE#
sys . stdout . write ( '-' ) #NEWLINE#
sys . stdout . write ( '|#SPACE##SPACE#' ) #NEWLINE#
sys . stdout . write ( '#SPACE##SPACE##SPACE#' ) #NEWLINE#
sys . stdout . write ( '#SPACE#' ) #NEWLINE#
[ match . group ( 0 ) for match in regex . finditer ( #NEWLINE# '1#SPACE#1.1#SPACE#.1#SPACE#1.#SPACE#1e1#SPACE#1.04E-1#SPACE#-.1#SPACE#-1.#SPACE#e1#SPACE#.1e1' ) ] #NEWLINE#
time_start = time . time ( ) #NEWLINE#
self . cputime += time . time ( ) - start #NEWLINE#
func ( ) #NEWLINE#
chapter = form . save ( ) #NEWLINE#
f , axarr = plt . subplots ( 2 , 1 ) #NEWLINE#
"""{0:.6g}""" . format ( 5.5657188485 ) #NEWLINE# """{0:.6g}""" . format ( 3.539 ) #NEWLINE#
print ( 'bye' ) #NEWLINE#
return render_template ( 'login.html' , title = 'Sign#SPACE#In' ) #NEWLINE#
return pd . DataFrame ( array ( [ [ 1 , 2 ] ] ) , columns = [ 'x1' , 'x2' ] ) #NEWLINE#
return datetime . datetime ( d . year , d . month , d . day ) #NEWLINE#
len ( np . unique ( arr ) ) == 1 #NEWLINE#
print ( [ x for x in a if x not in b ] + [ x for x in b if x not in a ] ) #NEWLINE#
prompts += expect ( 'Where#SPACE#do#SPACE#you#SPACE#live?' , 'New#SPACE#York' ) #NEWLINE#
locale . format ( '%f' , 23231300.0 , 1 ) #NEWLINE#
s . set_debuglevel ( 0 ) #NEWLINE#
print ( 'Finished#SPACE#processing#SPACE#GET#SPACE#request' ) #NEWLINE#
parser . parse ( f ) #NEWLINE#
sc = '1Û1Éâ\x80¦' #NEWLINE#
A = np . empty ( ( len ( x ) , 2 ) ) #NEWLINE#
parser . add_argument ( '--sample' , type = int , action = 'append' ) #NEWLINE#
col_idx = np . array ( [ 0 , 2 ] ) #NEWLINE#
"""<table#SPACE#border="1"#SPACE#cellpadding="3"#SPACE#cellspacing="0"#SPACE##SPACE#style="border:1px#SPACE#solid#SPACE#black;border-collapse:collapse;"><tr><td#SPACE##SPACE#style="background-color:hsla(225,#SPACE#80%,#SPACE#94%,#SPACE#1);width:100px;"><b>a</b></td><td#SPACE##SPACE#style="width:100px;">2</td></tr><tr><td#SPACE##SPACE#style="background-color:hsla(225,#SPACE#80%,#SPACE#94%,#SPACE#1);width:100px;"><b>b</b></td><td#SPACE##SPACE#style="width:100px;">3</td></tr></table>""" #NEWLINE#
x = np . arange ( 1000 ) #NEWLINE#
sum ( list ( dict . items ( ) ) , ( ) ) #NEWLINE#
strings = [ ( '%.2f' % number ) for number in numbers ] #NEWLINE#
bar = foo ( x = 3 ) ( bar ) #NEWLINE#
func ( ** r . _asdict ( ) ) #NEWLINE#
dict ( re . findall ( '(\\w+)=(\\w+)' , '' . join ( lis ) ) ) #NEWLINE#
plt . imshow ( np . asarray ( im ) , origin = 'lower' ) #NEWLINE#
arr . reshape ( k , 2 , k , 2 ) . swapaxes ( 1 , 2 ) . reshape ( k , k , 4 ) . max ( axis = - 1 ) #NEWLINE#
return SequenceMatcher ( None , a , b ) . ratio ( ) #NEWLINE#
df [ 'dists' ] = dists #NEWLINE#
session . add ( foo ) #NEWLINE#
ax . get_yaxis ( ) . set_tick_params ( which = 'both' , direction = 'out' ) #NEWLINE#
return Extension ( name = modname , sources = [ pyxfilename ] , language = 'c++' ) #NEWLINE#
( 54.5 , 17.083333 , 31.911 ) , #NEWLINE#
pairs = tuple ( combinations ( list ( range ( len ( A [ 0 ] ) ) ) , 2 ) ) #NEWLINE#
g = int ( input ( 'Your#SPACE#number#SPACE#was#SPACE#too#SPACE#high,#SPACE#pick#SPACE#a#SPACE#lower#SPACE#one:#SPACE#' ) ) #NEWLINE#
g = int ( input ( 'Your#SPACE#number#SPACE#was#SPACE#too#SPACE#low,#SPACE#pick#SPACE#a#SPACE#higher#SPACE#one:#SPACE#' ) ) #NEWLINE#
answer = [ line . strip ( ) . split ( ',' ) for line in infile ] #NEWLINE#
heapq . heappush ( heap , ( a + b , a , b ) ) #NEWLINE#
plt . clf ( ) #NEWLINE#
from math import sqrt #NEWLINE#
plot ( x , y2s ) #NEWLINE#
scipy . stats . poisson . cdf ( [ 4 , 17 ] , 10 ) #NEWLINE#
ax . set_xlim ( 0 , 1 ) #NEWLINE#
list ( map ( lambda x : x . __setitem__ ( 1 , - 2 ) , lol ) ) #NEWLINE#
a = np . array ( [ np . array ( [ 1 , 2 , 3 ] ) , np . array ( [ 2 , 3 , 4 ] ) , np . array ( [ 6 , 7 , 8 ] ) ] ) #NEWLINE#
print ( slept ) #NEWLINE#
TEMPLATE_LOADERS = ( 'django.template.loaders.filesystem.Loader' , #NEWLINE# 'django.template.loaders.app_directories.Loader' ) #NEWLINE#
file . write ( 'second#SPACE#line\n' ) #NEWLINE# file . close ( ) #NEWLINE#
del sys . modules [ 'UpperFolder.ModNeedToBeDel' ] #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
pl = pl [ : 5 ] #NEWLINE#
root = Tk ( ) #NEWLINE#
np . diff ( array1 ) - lens [ : - 1 ] + 1 #NEWLINE#
x . append ( np . nonzero ( np . in1d ( a , c ) ) [ 0 ] ) #NEWLINE#
key = lambda x : x [ 1 ] [ 0 ] #NEWLINE#
a [ : , ( 1 ) ] . toarray ( ) #NEWLINE#
int ( 'af' , 16 ) #NEWLINE#
print ( 'Please#SPACE#enter#SPACE#an#SPACE#integer' ) #NEWLINE#
'/' , '//' , '\\%' , '\\*\\*' , '\\+=' , '-=' , '\\*=' , '/=' , '\\%=' #NEWLINE#
return getattr ( self , cb ) ( * args , ** kwargs ) #NEWLINE#
data = sys . stdin . read ( ) #NEWLINE#
plt . xlabel ( 'Hours' ) #NEWLINE# plt . show ( ) #NEWLINE#
a = [ [ '1' , '2' , '3' ] , [ '4' , '5' , '6' ] , [ '7' , '8' , '9' ] ] #NEWLINE# [ [ int ( j ) for j in i ] for i in a ] #NEWLINE#
print ( new_list ) #NEWLINE#
print ( eval ( BuildType . __name__ + '.debug' ) ) #NEWLINE#
x = numpy . array ( [ ( 1 , 2 ) , ( 3 , 4 ) ] , dtype = [ ( 'a' , '<f4' ) , ( 'b' , '<f4' ) ] ) #NEWLINE#
SudsObject . __init__ ( self ) #NEWLINE#
task . revoke ( terminate = True ) #NEWLINE#
label_Image . setPixmap ( QtGui . QPixmap . fromImage ( image_profile ) ) #NEWLINE#
upgrade = getattr ( newclass , '_upgrade' , None ) #NEWLINE#
data . reshape ( 2 , - 1 ) #NEWLINE#
pdDF = pd . DataFrame ( [ ( 'foo' , 1 ) , ( 'bar' , 2 ) ] , columns = ( 'k' , 'v' ) ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 8 , 4 ) , columns = [ 'A' , 'B' , 'C' , 'D' ] ) #NEWLINE#
'watch/589851/' , 'supernatural-dub-hollywood-babylon/watch/2342/fdsaafsdf' #NEWLINE#
s . str . ljust ( m , '_' ) #NEWLINE#
stars ( '1234' ) #NEWLINE#
return ResultSerializer ( results , many = True ) . data #NEWLINE#
QWidget . __init__ ( self , parent ) #NEWLINE#
g . wa . transform ( 'sum' ) #NEWLINE#
plt . show ( ) #NEWLINE#
thread . start ( ) #NEWLINE#
np . random . seed ( 2015 ) #NEWLINE#
"""{0:+.03f}""" . format ( 1.23456 ) #NEWLINE#
print ( 'yeeey!#SPACE#printing#SPACE#from#SPACE#"foo"#SPACE#function' ) #NEWLINE#
format ( 14 , '#010b' ) #NEWLINE#
df = pd . DataFrame ( [ [ 100 , 200 , 300 ] , [ 400 , 500 , 600 ] ] ) #NEWLINE#
l = [ [ 'a1' , 'b1' , 'c1' , 'd1' , 'e1' , 'f1' , 'g1' , 'h1' , 'i1' ] , [ 'a2' , 'b2' , #NEWLINE# 'c2' , 'd2' , 'e2' , 'f2' , 'g2' , 'h2' , 'i2' ] , [ 'a3' , 'b3' , 'c3' , 'd3' , #NEWLINE# 'e3' , 'f3' , 'g3' , 'h3' , 'i3' ] , [ 'a4' , 'b4' , 'c4' , 'd4' , 'e4' , 'f4' , #NEWLINE# 'g4' , 'h4' , 'i4' ] , [ 'a5' , 'b5' , 'c5' , 'd5' , 'e5' , 'f5' , 'g5' , 'h5' , #NEWLINE# 'i5' ] , [ 'a6' , 'b6' , 'c6' , 'd6' , 'e6' , 'f6' , 'g6' , 'h6' , 'i6' ] , [ 'a7' , #NEWLINE# 'b7' , 'c7' , 'd7' , 'e7' , 'f7' , 'g7' , 'h7' , 'i7' ] , [ 'a8' , 'b8' , 'c8' , #NEWLINE# 'd8' , 'e8' , 'f8' , 'g8' , 'h8' , 'i8' ] , [ 'a9' , 'b9' , 'c9' , 'd9' , 'e9' , #NEWLINE# 'f9' , 'g9' , 'h9' , 'i9' ] ] #NEWLINE# res = [ ] #NEWLINE# for line in l : #NEWLINE# #INDENT# res . append ( dict ( ( k , None ) for k in line ) ) #NEWLINE#
"""""" . join ( i [ 0 ] for i in takewhile ( lambda x_y : x_y [ 1 ] , zip ( r , d ) ) ) [ - 1 : : - 1 ] #NEWLINE#
os . listdir ( '.' ) #NEWLINE#
QApplication . setOverrideCursor ( QCursor ( QtCore . Qt . WaitCursor ) ) #NEWLINE#
def getodds ( lst ) : #NEWLINE# #INDENT# return lst [ 1 : : 2 ] #NEWLINE#
print ( sys . _getframe ( ) . f_code . co_name ) #NEWLINE#
pygame . init ( ) #NEWLINE#
print ( link . url , link . text ) #NEWLINE#
subplot ( 2 , 2 , 3 ) #NEWLINE#
mapping = [ ( 'A' , '1' ) , ( 'B' , '2' ) , ( 'C' , '3' ) , ( 'D' , '4' ) , ( 'E' , '5' ) ] #NEWLINE# for k , v in mapping : #NEWLINE# #INDENT# my_string = my_string . replace ( k , v ) #NEWLINE#
out , err = proc . communicate ( ) #NEWLINE#
print ( "we#SPACE#got#SPACE#user's#SPACE#real#SPACE#IP#SPACE#address#SPACE#from#SPACE#a#SPACE#known#SPACE#proxy" ) #NEWLINE#
main2 ( ) #NEWLINE#
hex ( ord ( '"' ) ) #NEWLINE#
wait = WebDriverWait ( driver , 10 ) #NEWLINE#
6 , 1 , 7601 , 2 , 'Service#SPACE#Pack#SPACE#1' #NEWLINE#
result . sampleannotations . write ( 'sampleInfo.tsv' ) #NEWLINE#
self . text . see ( 'end' ) #NEWLINE#
break #NEWLINE#
return os . path . exists ( os . path . join ( root , d , '__init__.py' ) ) #NEWLINE#
help ( module ) #NEWLINE#
axes [ 0 ] . imshow ( data , interpolation = 'none' ) #NEWLINE#
my_list = [ int ( i ) for line in f for i in line . split ( ) if i . isdigit ( ) ] #NEWLINE#
answer . append ( ( alo , blo ) ) #NEWLINE#
x = numpy . zeros ( ( i , j , k ) ) #NEWLINE#
profiler . start ( ) #NEWLINE#
symbols ( 'a0:3' ) #NEWLINE#
print ( 'Argument#SPACE#not#SPACE#provided' ) #NEWLINE#
out = cv2 . blur ( a . astype ( float ) , ( 3 , 3 ) ) #NEWLINE#
new_arr = arr . reshape ( - 1 , arr . shape [ - 1 ] ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
form . find_control ( 'foo' ) . readonly = False #NEWLINE#
response = opener . open ( req ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
ax1 . bar ( x , y ) #NEWLINE#
length = len ( string ) #NEWLINE#
[ 132.0 , 123.25 , 129.75 , 132.5 , 133.5 ] , #NEWLINE#
[ 132.75 , 119.5 , 132.0 , 124.75 , 130.5 ] , #NEWLINE#
os . _exit ( 0 ) #NEWLINE#
yield os . path . join ( path , name ) #NEWLINE#
X = [ [ 0 , 1 , 3 ] , [ 2 ] , [ 3 , 1 ] ] #NEWLINE#
f . write ( m . group ( 'export' ) + '\n' ) #NEWLINE#
int ( hashlib . sha1 ( s ) . hexdigest ( ) , 16 ) % 10 ** 8 #NEWLINE#
matches = re . findall ( '\\"(.+?)\\"' , text ) #NEWLINE#
stdscr . addstr ( 'Question:#SPACE#' ) #NEWLINE#
b = np . array ( [ [ 2 , 2 ] , [ 3 , 1 ] , [ 4 , 0 ] , [ 5 , 3 ] ] ) #NEWLINE#
result , data = mail . search ( None , 'ALL' ) #NEWLINE#
self . set_text ( new_text ) #NEWLINE#
server . start ( ) #NEWLINE#
print ( self . __class__ . __name__ + '.__init__' ) #NEWLINE#
print ( self . __class__ . __name__ + '.wrapper' ) #NEWLINE#
mlab . path ( mlab . path ( ) , 'C:\x0cunction\\directory' ) #NEWLINE#
req . add_header ( 'Accept' , 'application/json' ) #NEWLINE#
return np . fromstring ( b . tostring ( ) , dtype = 'S' + str ( end - start ) ) #NEWLINE#
my_process = subprocess . Popen ( [ 'ls' , '-l' ] ) #NEWLINE#
assert hash ( a ) == hash ( b ) #NEWLINE#
window . show ( ) #NEWLINE#
temp += float ( eval ( input ( 'Enter#SPACE#a#SPACE#number' ) ) ) #NEWLINE#
list1_indices = { item : i for i , item in enumerate ( list1 ) } #NEWLINE#
print ( x [ : 10 ] ) #NEWLINE#
text . pack ( ) #NEWLINE#
axes [ 0 , 1 ] . set_title ( 'Hexbin#SPACE#plot' ) #NEWLINE#
cursor . execute ( SQL ) #NEWLINE#
b [ 0 ] [ 'addr' ] #NEWLINE#
clf . fit ( X , y ) #NEWLINE#
return n if n - 1 < x <= n else n + 1 #NEWLINE#
fw . write ( '</body></html>' ) #NEWLINE#
self . writer . write ( s . encode ( 'utf-8' ) ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
print ( data ) #NEWLINE#
return HttpResponse ( ) #NEWLINE#
df = df . groupby ( [ 'type' , 'group' ] ) . sum ( ) . transpose ( ) . stack ( 0 ) . reset_index ( ) #NEWLINE#
def get_today ( ) : #NEWLINE# #INDENT# return datetime . date . today ( ) #NEWLINE#
out . send ( data ) #NEWLINE#
req . add_header ( ( 'Content-Type' , 'application/json' ) ) #NEWLINE#
x_str = ',' . join ( x_arrstr ) #NEWLINE#
df [ 'uld' ] = ( df [ 'uld' ] > 0 ) . astype ( int ) #NEWLINE#
make_interleave ( 'ab' , 'cde' , [ 1 , 0 , 0 , 1 , 1 ] ) #NEWLINE#
return chain ( * map ( lambda x : combinations ( ss , x ) , list ( range ( 0 , len ( ss ) + 1 ) ) ) ) #NEWLINE#
reactor . do ( thing3 ) #NEWLINE#
reactor . do ( thing1 ) #NEWLINE#
return a * np . exp ( - b * x ) + offset #NEWLINE#
"""SELECT#SPACE#*#SPACE#FROM#SPACE#table#SPACE#WHERE#SPACE#column#SPACE#IN#SPACE#(1,2,3);""" #NEWLINE#
a1 = a1 + str ( ':' ) + str ( challenge [ 'nonce' ] ) + str ( ':' ) + str ( cnonce ) #NEWLINE#
print ( ( array [ 'x' ] < 3 ) . sum ( ) ) #NEWLINE#
self . run ( ) #NEWLINE#
datastream . seek ( 0 ) #NEWLINE#
l [ : x ] + l [ - y : ] #NEWLINE#
img = Image . new ( 'RGBA' , ( 100 , 100 ) ) #NEWLINE#
df [ 'B' ] . cumsum ( ) - x + 2 * df [ 'A' ] #NEWLINE#
print ( callF ( cback ( lambda x , y : x * y ) , 3 , 7 ) ) #NEWLINE#
sys . path . append ( '.' ) #NEWLINE#
time . sleep ( duration ) #NEWLINE#
c . execute ( 'select#SPACE#*#SPACE#from#SPACE#stocks' ) #NEWLINE#
quote . save ( ) #NEWLINE#
getsize ( { 'foo' : 'bar' , 'baz' : 'bar' } ) #NEWLINE#
do_something_based_on_the_request_endpoint ( request ) #NEWLINE#
plt . xlabel ( 'time#SPACE#(seconds)' ) #NEWLINE#
with open ( 'file.to.create' , 'w' ) as file : #NEWLINE# #INDENT# file . truncate ( 10 ** 10 ) #NEWLINE#
app = web . application ( urls , globals ( ) ) #NEWLINE#
df = pd . DataFrame ( { 'foo' : [ 1 , 2 , 3 , 4 ] } ) #NEWLINE#
ssh . connect ( 'meerkat2' , username = 'llmps' , password = '..' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE# app . debug = True #NEWLINE#
set_query_parameter ( '/scr.cgi?q=1&ln=0' , 'SOMESTRING' , 1 ) #NEWLINE#
print ( '{}' . format ( '#SPACE#' . join ( temp [ 7 : ] ) ) ) #NEWLINE#
x , y = foo ( 50 ) #NEWLINE#
app . config . from_object ( __name__ ) #NEWLINE#
libtest = ctypes . cdll . LoadLibrary ( 'libtest.dylib' ) #NEWLINE#
x = [ ] #NEWLINE# for i in range ( n ) : #NEWLINE# #INDENT# x . append ( [ ] ) #NEWLINE#
p . terminate ( ) #NEWLINE#
set_cookie ( '1d_cookie' , 'only-one-day' , datetime . timedelta ( minutes = 1440 ) ) #NEWLINE#
env . roledefs = { 'apache' : [ 'xxx.xxx.com' ] , 'APE' : [ 'yyy.xxx.com' ] } #NEWLINE#
print ( 'blablabla' ) #NEWLINE#
x = 136 #NEWLINE#
print ( repr ( a ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
locale . setlocale ( locale . LC_COLLATE , old_locale ) #NEWLINE#
print ( requests . get ( url , proxies = proxies ) . text ) #NEWLINE#
foo . __code__ . co_consts [ 1 ] . co_consts [ 2 ] . co_cellvars #NEWLINE#
logger . info ( 'unique#SPACE#thing#SPACE#%s#SPACE#%s#SPACE#%s' , arg1 , arg2 , arg3 ) #NEWLINE#
numpy . isnan ( a ) . any ( ) #NEWLINE#
os . kill ( os . getpid ( ) , signal . SIGUSR1 ) #NEWLINE#
"""Delete#SPACE#character#SPACE#before#SPACE#an#SPACE#occurence#SPACE#of#SPACE#"token"#SPACE#in#SPACE#a#SPACE#string.""" #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
elapsed = time . time ( ) - t #NEWLINE#
level1 , level2 , level3 = { } , { } , { } #NEWLINE#
print ( 'Component#SPACE#%s#SPACE#found#SPACE#in#SPACE#%s#SPACE#row(s)' % ( name , data ) ) #NEWLINE#
profile . save ( ) #NEWLINE#
total += int ( row [ 1 ] ) #NEWLINE#
results = query . all ( ) #NEWLINE#
call_command ( 'runserver' ) #NEWLINE#
ax . legend ( ) #NEWLINE#
dfrand = pd . DataFrame ( data = np . random . randn ( data . shape [ 0 ] , data . shape [ 1 ] ) ) #NEWLINE#
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 0 ] , reverse = True ) #NEWLINE# sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v1 : k_v1 [ 1 ] [ 2 ] , reverse = True ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
DB = pymssql . connect ( host = 'DB' , user = 'youruser' , password = 'yourpwd' , #NEWLINE# database = 'yourDBname' ) #NEWLINE#
[ 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] #NEWLINE#
os . system ( bashCommand ) #NEWLINE#
print ( list ( grouper ( alist , 3 ) ) ) #NEWLINE#
return [ tuple ( getattr ( obj , field ) for field in fields ) for obj in listobj ] #NEWLINE#
a [ np . abs ( a ) < eps ] = 0 #NEWLINE#
numpy . maximum . accumulate ( numpy . array ( [ 11 , 12 , 13 , 20 , 19 , 18 , 17 , 18 , 23 , 21 ] ) ) #NEWLINE#
main ( ) #NEWLINE#
functools . reduce ( operator . mul , [ 1 , 2 , 3 , 4 , 5 , 6 ] , 1 ) #NEWLINE#
plt . xlim ( [ - 0.5 , len ( values ) - 0.5 ] ) #NEWLINE#
{ 'A' : 5 , '#SPACE#b' : 7 } #NEWLINE#
pd . DataFrame ( coef , columns = [ 'PC-1' , 'PC-2' ] , index = df . columns ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
plt . show ( block = False ) #NEWLINE#
print ( '#SPACE#' . join ( cols ) ) #NEWLINE#
assertEquals ( 'pears' , before ( set , 'pi' ) ) #NEWLINE#
stations = [ ] #NEWLINE#
return dist ( site1 [ 0 ] , site1 [ 1 ] , site2 [ 0 ] , site2 [ 1 ] ) #NEWLINE#
print ( 'variable' ) #NEWLINE#
cursor . execute ( 'USE#SPACE#mydatabase' ) #NEWLINE# cursor . execute ( 'SHOW#SPACE#TABLES' ) #NEWLINE#
with open ( 'Output.csv' , 'w' ) as output : #NEWLINE# #INDENT# writer = csv . writer ( output , delimiter = '\n' ) #NEWLINE#
float_to_str ( 4.2e+17 ) #NEWLINE#
states . split ( 'Ari' ) #NEWLINE#
df [ 'min' ] = df . groupby ( [ 'ID' , 'cumsum' ] ) [ 'DATE' ] . transform ( 'min' ) #NEWLINE#
url ( '^admin/' , admin . site . urls ) , #NEWLINE#
print ( arreq_in_list ( myarr1 , mylistarr ) ) #NEWLINE#
diags . extend ( matrix . diagonal ( i ) for i in range ( 3 , - 4 , - 1 ) ) #NEWLINE#
round ( float ( x ) / 500 ) * 500 #NEWLINE#
os . popen ( 'pwd' ) . read ( ) #NEWLINE#
p . start ( ) #NEWLINE#
time . mktime ( time . strptime ( 'Mon#SPACE#Jul#SPACE#09#SPACE#09:20:28#SPACE#+0000#SPACE#2012' , #NEWLINE# '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#+0000#SPACE#%Y' ) ) #NEWLINE#
raise ValueError ( 'Cannot#SPACE#remove#SPACE#a#SPACE#pending#SPACE#Future' ) #NEWLINE#
def get_divs ( n ) : #NEWLINE# #INDENT# return [ i for i in range ( 1 , n ) if n % i == 0 ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def classify ( num ) : #NEWLINE# #INDENT# divs_sum = sum ( get_divs ( num ) ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# if divs_sum > num : #NEWLINE# #INDENT# print ( '{}#SPACE#is#SPACE#abundant#SPACE#number' . format ( num ) ) #NEWLINE# elif divs_sum < num : #NEWLINE# #INDENT# print ( '{}#SPACE#is#SPACE#deficient#SPACE#number' . format ( num ) ) #NEWLINE# elif divs_sum == num : #NEWLINE# #INDENT# pass #NEWLINE#
ao [ : - 1 , : - 1 ] += ai [ 1 : , 1 : ] #NEWLINE#
self . button . append ( Button ( frame , text = name , command = callback ) ) #NEWLINE#
engine = sqlalchemy . create_engine ( #NEWLINE# 'mssql://*server_name*\\SQLEXPRESS/*database_name*?trusted_connection=yes' ) #NEWLINE#
display_axes . set_axis_off ( ) #NEWLINE#
del cityIndex [ item [ 'city' ] ] [ i ] #NEWLINE#
plt . plot ( z , f ( z , tval ) ) #NEWLINE#
time . sleep ( 120.0 ) #NEWLINE#
"""Function#SPACE#%s#SPACE#executed#SPACE#on#SPACE#input#SPACE#of#SPACE#size#SPACE#%d#SPACE##SPACE#with#SPACE#maximum#SPACE#parallelism#SPACE#of#SPACE#%d""" #NEWLINE#
[ [ 'a' ] , [ 'b' ] , [ 'c' ] ] #NEWLINE#
f . __class__ #NEWLINE#
print ( median ( [ 5 , 2 , 4 , 3 , 1 , 6 ] ) ) #NEWLINE#
struct . unpack ( '>h' , p0 + p1 ) [ 0 ] #NEWLINE#
a = np . load ( '/tmp/model.npz' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
args = [ 'hello' , 'bobbity#SPACE#bob' , 'bye' ] #NEWLINE#
l = [ 'a' , 'b' , 'a' , 'c' ] #NEWLINE# k = [ ( ord ( x ) - 96 ) for x in l ] #NEWLINE#
print ( dt + datetime . timedelta ( days = d + 1 ) ) #NEWLINE#
e = 0.081819191 #NEWLINE#
s . listen ( 1 ) #NEWLINE#
replace = [ ( y , z + 1 ) , ( x , y + z ) , ( z , a ) ] #NEWLINE#
return any ( w . <STR0> ( word_fragment ) for w in wordlist ) #NEWLINE#
df . sw ( 4 , 2 , 3 , 4 ) #NEWLINE#
s . replace ( [ 'a' , 'l' ] , 'p' , regex = True ) #NEWLINE#
f . writelines ( lines ) #NEWLINE#
print ( 'abc' . translate ( table ) ) #NEWLINE#
ax . add_collection ( collection , autolim = True ) #NEWLINE#
ax . imshow ( img , extent = [ min ( xi ) , max ( xi ) , min ( yi ) , max ( yi ) ] ) #NEWLINE#
parser . add_option ( '-t' , '--test' , dest = 'test' , action = 'store' , type = 'string' ) #NEWLINE#
t . start ( ) #NEWLINE#
im = Image . open ( 'Flower-sRGB.jpg' ) . convert ( 'sRGB' ) #NEWLINE#
prefix = models . CharField ( max_length = 3 ) #NEWLINE#
setattr ( self , method , wrapped_method ) #NEWLINE#
print ( stdout . read ( ) ) #NEWLINE#
b . byteswap ( ) #NEWLINE#
return all ( x != y for x , y in zip ( s [ : - 1 ] , s [ 1 : ] ) ) #NEWLINE#
ax . w_xaxis . _axinfo . update ( { 'grid' : { 'color' : ( 0 , 0 , 0 , 1 ) } } ) #NEWLINE#
next ( reader ) #NEWLINE#
print ( d . get ( 'a' ) ) #NEWLINE#
VDATA . flush ( ) #NEWLINE#
return mydict . setdefault ( mykey , myfunc ( ) ) #NEWLINE#
g = df . groupby ( 'a' ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( operator . mul , [ segment_scores [ segment ] for segment in segments ] ) #NEWLINE#
a [ np . lexsort ( np . transpose ( a ) [ : : - 1 ] ) ] #NEWLINE#
out = mat [ 0 ] * ( len ( ixs ) - np . count_nonzero ( nzmask ) ) + nzsum #NEWLINE#
"""i""" #NEWLINE#
np . logical_and ( A < 3 , A > 1 ) #NEWLINE#
df = DataFrame ( [ [ 0 , 1 , 1 ] , [ 1 , 1 , 0 ] , [ 1 , 0 , 1 ] ] , columns = [ 'a' , 'b' , 'c' ] ) #NEWLINE#
do_something ( ) #NEWLINE#
response = request . execute ( ) #NEWLINE#
Thread ( target = callback ) . start ( ) #NEWLINE#
return _trace ( args [ 0 ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
newID = db . insert_id ( ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
pivoted . ix [ 'one' ] #NEWLINE#
splitparts = re . compile ( '\\s*,\\s*' ) #NEWLINE#
server . login ( 'MrDoe' , 'PASSWORD' ) #NEWLINE#
element . remove ( subelement ) #NEWLINE#
conn . close ( ) #NEWLINE#
mydict = dict ( enumerate ( map ( itemgetter ( 'name' ) , iterload ( f ) ) , start = 1 ) ) #NEWLINE#
self . func_options = { 'function1' : self . function1 , 'function2' : self . function2 } #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
a . sort ( key = len , reverse = True ) #NEWLINE#
ret = subprocess . call ( [ 'ssh' , 'user@host' , 'program' ] ) #NEWLINE#
figborder . canvas . set_window_title ( 'Trees#SPACE#with#SPACE#Borders' ) #NEWLINE#
x = df . loc [ : , ( attr ) ] < df . attr . mean ( ) + df . attr . std ( ) * 3 #NEWLINE#
logging . debug ( 'This#SPACE#is#SPACE#a#SPACE#debug#SPACE#message' ) #NEWLINE#
print ( str ( '{0:<' + str ( maxLen ) + '}#SPACE#${1:.2f}' ) . format ( t , v ) ) #NEWLINE#
regex = re . compile ( '\\d+(.*?)[\\u263a-\\U0001f645]' ) #NEWLINE# regex . findall ( s ) #NEWLINE#
test . py #NEWLINE#
parser . add_argument ( '-f' ) #NEWLINE#
[ '111' , '222,#SPACE#333' , 'XXX' , 'YYY,#SPACE#ZZZ' ] #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
signal . signal ( signal . SIGTERM , lambda signum , stack_frame : sys . exit ( 1 ) ) #NEWLINE#
pattern . sub ( repl , 'Foooooooooootball' ) #NEWLINE#
print ( '{:{}s}#SPACE#{:{}d}#SPACE#{:{}f}' . format ( * flat_pairs ( res , args ) ) ) #NEWLINE#
c = np . tile ( a , ( b . shape [ 0 ] , 1 ) ) #NEWLINE#
A . __init__ ( self ) #NEWLINE#
driver . save_screenshot ( 'screen.png' ) #NEWLINE#
pythoncom . PumpMessages ( ) #NEWLINE#
return int ( x * 10 ** ( 1 + a ) + y ) #NEWLINE#
ax2 . set_xlabel ( 'Wavelength#SPACE#(mm)' ) #NEWLINE#
label = np . random . random ( ( 100 , 100 ) ) #NEWLINE#
plt . bar ( [ 1 , 2 ] , [ 5 , 4 ] ) #NEWLINE#
from matplotlib . patches import Rectangle #NEWLINE#
print ( [ ( c . rate ( ) , c . accrualPeriod ( ) ) for c in coupons ] ) #NEWLINE#
db . create_all ( ) #NEWLINE#
print ( '#3#SPACE#Backend:' , plt . get_backend ( ) ) #NEWLINE#
fileHandler . setLevel ( logging . DEBUG ) #NEWLINE#
writer . writerow ( codecs . BOM_UTF16_LE ) #NEWLINE#
result = np . average ( _array , axis = 1 ) #NEWLINE#
app = tornado . web . Application ( [ ( '/cook' , CookHandler ) ] ) #NEWLINE#
signal . signal ( signal . SIGINT , my_signal_handler ) #NEWLINE#
return lesser + [ pivot ] + greater #NEWLINE#
list ( a ) #NEWLINE#
print ( ) #NEWLINE#
print ( ( 11 + 7 ) % 12 ) #NEWLINE#
conn . setopt ( pycurl . FOLLOWLOCATION , True ) #NEWLINE#
lats = np . array ( [ 43.2 , 43.2 , 43.2 , 45.5 , 45.5 , 45.5 , 65.3 , 65.3 , 65.3 ] ) #NEWLINE#
p . map ( f , [ 1 , 2 , 3 ] ) #NEWLINE#
return np . array ( [ np . asarray ( Image . open ( 'face.png' ) . convert ( 'RGB' ) ) ] * 12 ) #NEWLINE#
file = models . FileField ( upload_to = 'file' , storage = UniqueFileStorage ( ) ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
list ( Project . __table__ . columns . keys ( ) ) #NEWLINE#
channel . start_consuming ( ) #NEWLINE#
mylist . pop ( 0 ) #NEWLINE#
unittest . main ( failfast = True ) #NEWLINE#
s . send ( 'echo#SPACE#bye#SPACE#bye\n' ) #NEWLINE#
s . send ( 'XCLOCK_PID=$!\n' ) #NEWLINE#
s . send ( 'echo#SPACE#"killing#SPACE#$XCLOCK_PID"\n' ) #NEWLINE#
s . send ( 'kill#SPACE#$XCLOCK_PID\n\n' ) #NEWLINE#
item . active = not item . active #NEWLINE#
parser . add_argument ( 'revs' , metavar = 'N' , type = int , nargs = '+' , help = 'revisions' ) #NEWLINE#
df [ ( df > 0 ) . all ( 1 ) ] #NEWLINE#
assert rdd . squares ( ) . collect ( ) == [ 1 , 4 , 9 ] #NEWLINE#
myl2 = [ chr ( random . randint ( 65 , 90 ) ) for i in range ( 0 , 10000 ) ] #NEWLINE#
self . canvas . bind ( '<ButtonPress-1>' , self . scroll_start ) #NEWLINE#
return tuple ( list ( zip ( * G ) ) [ 0 ] ) #NEWLINE#
result . setdefault ( widget_type , [ ] ) . append ( app ) #NEWLINE#
plt . subplots_adjust ( hspace = 0.0 ) #NEWLINE#
'foo' * 5 #NEWLINE#
ext = os . path . splitext ( path ) [ 1 ] #NEWLINE#
from datetime import datetime , timedelta #NEWLINE#
self . _window . connect ( 'destroy' , self . _destroy ) #NEWLINE#
v = np . array ( [ 0 , 1 , 2 ] ) #NEWLINE#
[ id ( x ) for x in a ] #NEWLINE#
TLabels = np . array ( [ - 1 , 1 , 1 , 1 , 1 , - 1 , - 1 , 1 , - 1 , - 1 ] ) #NEWLINE#
df1 . rename ( columns = { 'Adj#SPACE#Close' : 'ibm' } , inplace = True ) #NEWLINE#
a = np . array ( [ [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 2 ] , [ 2 , 3 ] , [ 2 , 1 ] ] ) #NEWLINE#
self . __class__ . num += 1 #NEWLINE#
FlaskApplication ( ) . run ( ) #NEWLINE#
return json . JSONEncoder . default ( self , o ) #NEWLINE#
list_of_tuples = [ ( 1 , 2 ) , ( 4 , 5 ) ] #NEWLINE#
raise argparse . ArgumentTypeError ( '%s#SPACE#is#SPACE#an#SPACE#invalid#SPACE#positive#SPACE#int#SPACE#value' % value ) #NEWLINE#
return False #NEWLINE#
app . run ( debug = True ) #NEWLINE#
with open ( 'test.csv' , 'rb' ) as f : #NEWLINE# #INDENT# reader = csv . reader ( f , delimiter = '\t' ) #NEWLINE#
c . set ( 'joe' , 'color_scheme' , "that's#SPACE#'color',#SPACE#silly!" ) #NEWLINE#
g . user = current_user . username #NEWLINE#
plt . gca ( ) . yaxis . set_minor_locator ( mpl . ticker . NullLocator ( ) ) #NEWLINE#
print ( ( 'syncarr#SPACE#initial:' , syncarr_tmp . __str__ ( ) ) ) #NEWLINE#
return '3' #NEWLINE#
app . MainLoop ( ) #NEWLINE#
val = rtpinterpolator ( xyz2rtp ( x , y , z ) ) #NEWLINE#
sorted ( my_set , key = natural_sortkey ) #NEWLINE#
return sum ( args ) == 1 #NEWLINE#
text = 'funny#SPACE#cheese#SPACE#shop' #NEWLINE# print ( text . partition ( '#SPACE#' ) [ 2 ] ) #NEWLINE#
m [ 'foo' ] #NEWLINE#
g = nx . Graph ( ) #NEWLINE#
db . session . add ( p ) #NEWLINE#
conn . request ( 'HEAD' , '/thevideofile.mp4' ) #NEWLINE#
[ word for word , pos in test . pos ( ) if pos == 'NN' ] #NEWLINE#
l = [ 1 , 2 , 3 , 4 ] #NEWLINE#
df . iloc [ 0 ] . replace ( '' , np . nan ) . dropna ( ) . index #NEWLINE#
aic . append ( x ) #NEWLINE#
matplotlib . use ( 'cairo' ) #NEWLINE#
df [ 'C' ] = df [ [ 'A' , 'B' ] ] . max ( axis = 1 ) #NEWLINE#
{ 'A' : 1 , 'C' : 1 , 'T' : 2 } #NEWLINE#
super ( Foo , self ) . __init__ ( ** kwds ) #NEWLINE#
glob . glob ( '/proc/[0-9]*/' ) #NEWLINE#
comments = soup . findAll ( text = lambda text : isinstance ( text , Comment ) ) #NEWLINE#
plt . plot ( x , y , 'yo' , x , fit_fn ( x ) , '--k' ) #NEWLINE#
g = a + b + np . sqrt ( d * d + e * e + f * f ) #NEWLINE#
L = [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 12 , 13 , 19 , 20 , 22 , 23 , 40 , 44 ] #NEWLINE#
return self . list [ key ] #NEWLINE#
os . system ( 'read#SPACE#-p#SPACE#"Press#SPACE#any#SPACE#key#SPACE#to#SPACE#continue"' ) #NEWLINE#
func ( ) #NEWLINE#
nx . draw_networkx_edges ( G , pos , edgelist = black_edges , arrows = False ) #NEWLINE# plt . show ( ) #NEWLINE#
id ( func . __code__ . co_consts [ 1 ] ) == id ( func . __code__ . co_consts [ 1 ] ) #NEWLINE#
l = [ 'a' , 'b' , 'a' , 'c' ] #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US' ) #NEWLINE#
eggs = package . name #NEWLINE#
a . put ( ( 4 , 'b' ) ) #NEWLINE#
print ( pool . map ( count_it , [ 'a' , 'b' , 's' , 'd' ] ) ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
col_names = sorted ( list ( col_dict . items ( ) ) , key = lambda x : x [ 0 ] ) #NEWLINE#
plt . ylabel ( 'Imaginary' ) #NEWLINE#
savefig ( 'test.png' , bbox_inches = 'tight' ) #NEWLINE#
del d [ key ] #NEWLINE#
print ( do_something ( ) ) #NEWLINE#
object . __setattr__ ( o , 'a' , 1 ) #NEWLINE#
print ( 'List#SPACE#is#SPACE#empty' ) #NEWLINE#
window . show ( ) #NEWLINE#
print ( int ( str ( random . choice ( list ( range ( 1 , 10 ) ) ) ) + '' . join ( x [ : 3 ] ) ) ) #NEWLINE#
sc . textFile ( ',' . join ( files ) ) #NEWLINE#
interleave ( lst [ : len ( lst ) / 2 ] , lst [ len ( lst ) / 2 : ] ) #NEWLINE#
f = open ( 'test.txt' , 'w' ) #NEWLINE# mylist = [ 'a' , 'b' , 'c' ] #NEWLINE# f . writelines ( mylist ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
x = np . arange ( 100 ) . reshape ( 10 , 10 ) #NEWLINE#
dest . close ( ) #NEWLINE#
super ( FooAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
np . kron ( a . reshape ( - 1 , 2 ) , np . ones ( ( 2 , 2 ) , dtype = int ) ) #NEWLINE#
hash ( 'asdf' ) #NEWLINE#
class Person ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( '\x1b[1A\x1b[4CO!' ) #NEWLINE#
print ( 'attribute#SPACE#%s#SPACE#=#SPACE#%s' % ( attrName , attrValue ) ) #NEWLINE#
b = [ 'z' ] + b #NEWLINE#
k = reverse_d [ 30 ] #NEWLINE#
np . trim_zeros ( a ) #NEWLINE#
my_array = np . clip ( my_array , minN , maxN ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
graph = GraphAPI ( oauth_access_token ) #NEWLINE#
fg . canvas . draw ( ) #NEWLINE#
print ( df ) #NEWLINE#
print ( response_data ) #NEWLINE#
return '' . join ( result ) #NEWLINE#
self . _s . sendto ( 'confirm' , self . _server ) #NEWLINE#
root . after ( 0 , add_letter ) #NEWLINE#
ax . plot_date ( x , y , linestyle = '--' ) #NEWLINE#
sa , sb , sc = [ str ( e ) for e in [ a , b , c ] ] #NEWLINE#
sc . parallelize ( [ ] , n ) . count ( ) #NEWLINE#
self . rebuild_index ( ) #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
lst . append ( i ) #NEWLINE#
for index , row in df . iterrows ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( ( dt_naive - timedelta ( days = 1 ) ) . date ( ) ) #NEWLINE#
globals ( ) [ string1 + string2 ] ( ) #NEWLINE#
plt . plot ( data ) #NEWLINE#
ax . set_ylim3d ( 0.2 , 0.5 ) #NEWLINE#
result = func ( * args , ** kwargs ) #NEWLINE#
plt . plot ( x [ idx ] , f [ idx ] , 'ro' ) #NEWLINE#
d [ 'S' ] [ 'H0' ] . append ( ( row . loc [ 'condition' , 'H0' ] , row . loc [ 'S' , 'H0' ] ) ) #NEWLINE#
d [ 'M' ] [ 'H1' ] . append ( ( row . loc [ 'condition' , 'H1' ] , row . loc [ 'M' , 'H1' ] ) ) #NEWLINE#
d [ 'S' ] [ 'H1' ] . append ( ( row . loc [ 'condition' , 'H1' ] , row . loc [ 'S' , 'H1' ] ) ) #NEWLINE#
builder . add_from_file ( 'losefocus.glade' ) #NEWLINE#
s . write ( line ) #NEWLINE#
print ( re . findall ( '\\blocal\\b' , 'Hello,#SPACE#locally#SPACE#local#SPACE#test#SPACE#local.' ) ) #NEWLINE#
logging . basicConfig ( level = logging . DEBUG , format = FORMAT ) #NEWLINE#
a . sum ( axis = 1 ) #NEWLINE#
entities = MyEntity . query . order_by ( desc ( MyEntity . time ) ) . limit ( 3 ) . all ( ) #NEWLINE#
ax . legend ( proxies , [ 'Line#SPACE#1' , 'Line#SPACE#2' , 'Line#SPACE#3' , 'Line#SPACE#4' ] ) #NEWLINE#
df . loc [ df [ 'Ip' ] == '127.0.0.2' , 'Sites' ] = 30 #NEWLINE#
l = ax . legend ( [ ( p1 , p2 ) ] , [ 'points' ] , scatterpoints = 2 ) #NEWLINE#
A = array ( [ [ 0 , 1 , 2 ] , [ 0 , 2 , 0 ] ] ) #NEWLINE# X = array ( [ [ 0 , 1 , 2 ] , [ 1 , 2 , 0 ] , [ 2 , 1 , 2 ] , [ 3 , 2 , 0 ] ] ) #NEWLINE#
l . pop ( ) #NEWLINE#
return '' . join ( chr ( b ) for b in arr ) #NEWLINE#
result = [ ] #NEWLINE#
[ [ 0 , 1 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 ] ] #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
items . sort ( key = lambda obj : ( obj . firstname , [ ( - ord ( c ) for c in obj . lastname ) ] ) ) #NEWLINE#
setp ( ax . get_yticklabels ( ) , fontsize = 8 ) #NEWLINE#
li = [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 ] #NEWLINE#
json . loads ( json . dumps ( [ dict1 , dict2 ] ) ) #NEWLINE#
print ( np . where ( ~ np . isfinite ( dep_3 ) ) ) #NEWLINE#
return decorator #NEWLINE#
plt . scatter ( x1 , y1 , marker = 'o' , label = 'first' , s = 20.0 , c = 'b' ) #NEWLINE#
req . add_header ( 'Authorization' , 'Client-ID#SPACE#' + clientID ) #NEWLINE#
help ( foo ) #NEWLINE#
print ( '#SPACE#' . join ( add . __code__ . co_varnames [ : 2 ] ) + '#SPACE#' + str ( z ) ) #NEWLINE#
print ( resp_json_payload [ 'results' ] [ 0 ] [ 'geometry' ] [ 'location' ] ) #NEWLINE#
list_list . append ( list1 ) #NEWLINE#
self . response . out . write ( repr ( e ) + '\n' ) #NEWLINE#
self . ProgressBar . SetValue ( event . count ) #NEWLINE#
ax . plot ( lims , lims , 'k-' , alpha = 0.75 , zorder = 0 ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
- min ( ( x , - i ) for i , x in enumerate ( values ) ) [ 1 ] #NEWLINE#
plt . subplot ( 6 , 1 , 2 ) #NEWLINE#
stock_data . rename ( columns = { 'Adj#SPACE#Close' : 'Close' } , inplace = True ) #NEWLINE#
plt . plot ( x1 , y1 , 'o' , label = 'first' , markersize = np . sqrt ( 20.0 ) , c = 'b' ) #NEWLINE#
print ( bytes . encode ( 'utf-8' ) ) #NEWLINE#
yum = hxs . select ( '//img' ) #NEWLINE#
dic = { 'name' : 'Mike' , 'thing' : 'Plains' } #NEWLINE#
value = open ( 'thefile' , 'rt' ) . read ( ) #NEWLINE#
self . setCentralWidget ( widget ) #NEWLINE#
headers = { 'content-type' : 'application/x-www-form-urlencoded' } #NEWLINE#
df2 = pd . DataFrame ( { 'fruit_name' : [ 'strawberry' , 'apple' ] } ) #NEWLINE#
( 'BlockLength' , ctypes . c_ubyte ) , #NEWLINE#
print ( 'Enter' ) #NEWLINE#
plt . show ( ) #NEWLINE#
allowed_domains = [ 'epgd.biosino.org' ] #NEWLINE#
sleep ( 1 ) #NEWLINE#
names = [ 'a' , 'b' , 'c' ] #NEWLINE#
name = models . CharField ( max_length = 255 ) #NEWLINE#
print ( row . rstrip ( ) ) #NEWLINE#
{ 'menu' : 'a' } #NEWLINE#
return str ( int ( match . group ( 0 ) ) - 1 ) #NEWLINE#
print ( remove_abnormalities ( [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' ] , [ 1 , 3 , 5 ] ) #NEWLINE# ) #NEWLINE#
print ( '%05d' % i ) #NEWLINE#
s = struct . pack ( '>L' , i ) #NEWLINE#
"""key1=[subKey1=[val1,val2=[k1,k2]],val3,val4,subKey2=[aaa,bbb]],key2=val5,key3,key4=[1,2,3]""" #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#table_name#SPACE#LIMIT#SPACE#0' ) #NEWLINE#
file . close ( ) #NEWLINE#
canvas . setFont ( 'Times-Roman' , 9 ) #NEWLINE#
[ 13331731 , 13331732 , 13331733 ] #NEWLINE#
self . assertRedirects ( response , '/next-url/' , status_code = 301 ) #NEWLINE#
obj_list = [ x . obj for x in set ( HashMyAttr ( obj ) for obj in obj_list ) ] #NEWLINE#
per_row . append ( line . split ( '\t' ) ) #NEWLINE#
baz = models . ManyToManyField ( Child , related_name = 'baz' ) #NEWLINE#
def func1 ( a = 1 , b = 2 , c = 3 ) : #NEWLINE# #INDENT# func2 ( ** locals ( ) ) #NEWLINE#
int ( '0b100' , base = 0 ) #NEWLINE#
"""Название#SPACE#сайта#SPACE#по-русски""" #NEWLINE#
d . strftime ( '%I:%M#SPACE#%p' ) #NEWLINE#
self . fd . close ( ) #NEWLINE#
m . fit ( X , y ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
a = [ 1 , 3 , 4 ] #NEWLINE#
private_key = open ( '/path/to/your-key.p12' , 'rb' ) . read ( ) #NEWLINE#
with open_atomic ( 'test.txt' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( 'huzza' ) #NEWLINE#
s . between ( 0 , 1 ) #NEWLINE#
plt . plot ( x_val , y_int , linestyle = ':' , linewidth = 0.25 , color = 'black' ) #NEWLINE#
e2 . pack ( ) #NEWLINE#
betterdata = numpy . concatenate ( ( maybeinliers , alsoinliers ) ) #NEWLINE#
df [ <STR0> ] = pd . to_datetime ( df [ <STR0> ] ) #NEWLINE#
print ( 'quitting#SPACE#...' ) #NEWLINE#
print ( 'quit' ) #NEWLINE#
dict ( ( f , getattr ( self , f ) ) for f , _ in self . _fields_ ) #NEWLINE#
printf ( 'Python#SPACE#stack#SPACE#trace:\n' ) #NEWLINE#
solve ( [ eq1 - 1 , eq2 - 3 ] , ( x , y , z ) ) #NEWLINE#
os . unlink ( file ) #NEWLINE#
package_dir = { 'cops_and_robots' : 'src/cops_and_robots' } , #NEWLINE#
result_dict [ k ] = v #NEWLINE#
plt . title ( '$\\cos(\\frac{2*\\sqrt{x^2#SPACE#+#SPACE#y^2}}{\\pi})$' , size = 20 ) #NEWLINE#
df . to_html ( 'table.html' ) #NEWLINE#
points . extend ( bezier ( ts ) ) #NEWLINE#
wjoykhsapcmvjmar #NEWLINE#
from functools import reduce #NEWLINE# #NEWLINE# #NEWLINE# def rgetattr ( obj , attr ) : #NEWLINE# #INDENT# return reduce ( getattr , attr . split ( '.' ) , obj ) #NEWLINE#
reader . SetFileName ( filename ) #NEWLINE#
self . num += 1 #NEWLINE#
print ( line ) #NEWLINE#
mycursor . execute ( 'SELECT#SPACE#name#SPACE#FROM#SPACE#sqlite_master#SPACE#where#SPACE#(name#SPACE#=#SPACE#?)' , [ table ] ) #NEWLINE#
l = [ ( 'a' , 1 ) , ( 'b' , 2 ) ] #NEWLINE# d = dict ( l ) #NEWLINE# d [ 'a' ] #NEWLINE#
reactor . run ( ) #NEWLINE#
dir ( __builtin__ ) #NEWLINE#
return time . time ( ) - start #NEWLINE#
flatten_to_strings ( list_of_menuitems ) #NEWLINE#
warnings . warn ( 'deprecated' , DeprecationWarning ) #NEWLINE#
break #NEWLINE#
axes [ 1 , 0 ] . set_title ( '2D#SPACE#Histogram' ) #NEWLINE#
os . killpg ( p . pid , signal . SIGKILL ) #NEWLINE#
FIN = gzip . open ( filename , 'rb' ) #NEWLINE#
FOUT = gzip . open ( filename , 'wb' ) #NEWLINE#
print ( [ ( x , y ) for x in range ( 5 ) for y in [ f ( x ) ] if y != 2 ] ) #NEWLINE#
setattr ( cls , name , new_value ) #NEWLINE#
ys = lowess ( y , x ) [ : , ( 1 ) ] #NEWLINE#
from django . contrib . contenttypes . models import ContentType #NEWLINE#
shutil . chown ( path , user = None , group = None ) #NEWLINE#
return HttpResponse ( 'email_one' ) #NEWLINE#
plt . xlim ( x [ 0 ] - 0.5 * width , x [ - 1 ] + 1.5 * width ) #NEWLINE#
dict = json . loads ( json_string ) #NEWLINE#
print ( df . duplicated ( 'Date' , keep = False ) ) #NEWLINE#
P = expm ( A ) #NEWLINE#
a . append ( { mykeys [ n ] : values [ n ] for n in range ( 0 , len ( mykeys ) ) } ) #NEWLINE#
r = func ( * args , ** kwargs ) #NEWLINE#
self . transport . write ( self . name , ( self . host , self . port ) ) #NEWLINE#
m . put ( k , m . get ( k ) + 1 ) #NEWLINE#
eval ( 'import#SPACE#os;...' , { 'os' : None } ) #NEWLINE#
os . chmod ( name , 384 ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
ax . yaxis . set_visible ( False ) #NEWLINE# ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE# l . pop ( 0 ) #NEWLINE# l #NEWLINE#
print ( di ( id ( b ) ) ) #NEWLINE#
def save ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# my_value = kwargs . pop ( 'my_value' , None ) #NEWLINE#
window = QtGui . QMainWindow ( ) #NEWLINE#
print ( ( letter , count [ letter ] ) ) #NEWLINE#
widget . show ( ) #NEWLINE#
self . setSceneRect ( 0 , 0 , width , height ) #NEWLINE#
OPTIONS = { 'argv_emulation' : True , 'packages' : [ 'certifi' ] } #NEWLINE#
datetime . time ( * values ) #NEWLINE#
schedule ( [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' ] ) #NEWLINE#
return '' . join ( stripped ) #NEWLINE#
FooModel . objects . get ( pk = 1 ) . children . all ( ) #NEWLINE#
test = array ( [ [ 0 , 1 , 2 ] , [ 1 , 1 , 6 ] , [ 2 , 0 , 4 ] ] ) #NEWLINE#
data = [ [ td . findChildren ( text = True ) for td in tr . findAll ( 'td' ) ] for tr in rows ] #NEWLINE#
background . paste ( top , ( 0 , 0 ) ) #NEWLINE#
testRust ( ) #NEWLINE#
cleaned = re . sub ( REGEX , '' , s ) . split ( ) #NEWLINE#
text . tag_add ( 'start' , '1.8' , '1.13' ) #NEWLINE#
[ x for x , y in pairwise ( xs ) if x != y ] #NEWLINE#
log . debug ( 'IOError#SPACE#closing#SPACE#connection' ) #NEWLINE#
def remove_adjacent ( nums ) : #NEWLINE# #INDENT# return [ a for a , b in zip ( nums , nums [ 1 : ] + [ not nums [ - 1 ] ] ) if a != b ] #NEWLINE#
foo = 2 * 3 #NEWLINE#
print ( str ( MyClass ) ) #NEWLINE#
lis = [ [ 'name' , 'address' , 'phone#SPACE#number' ] ] #NEWLINE#
self . ax . set_xlim ( self . min_x , self . max_x ) #NEWLINE#
self . file . flush ( ) #NEWLINE#
df1 . groupby ( 'ID' ) . sum ( ) . loc [ df2 . ID ] . fillna ( 0 ) . astype ( int ) #NEWLINE#
print ( '\rhel#SPACE#' , end = '#SPACE#' ) #NEWLINE#
w . loc [ w . female == 'female' , 'female' ] = 1 #NEWLINE#
from string import maketrans #NEWLINE# """Abc""" . translate ( maketrans ( 'abcABC' , 'defDEF' ) ) #NEWLINE#
a = np . array ( [ 1 + 2.0j , 5 + 7.0j ] ) #NEWLINE# a = np . insert ( a , 0 , 0 ) #NEWLINE#
print ( 'Illogical,#SPACE#captain' ) #NEWLINE#
df [ df . line_race != 0 ] #NEWLINE#
dict . __setitem__ ( self , key , value ) #NEWLINE#
PyQt4 . QtCore . QPoint ( 1674 , 382 ) #NEWLINE#
PyQt4 . QtCore . QPoint ( 1867 , 416 ) #NEWLINE#
PyQt4 . QtCore . QPoint ( 605 , 391 ) #NEWLINE#
PyQt4 . QtCore . QPoint ( 439 , 372 ) #NEWLINE#
PyQt4 . QtCore . QPoint ( 1971 , 391 ) #NEWLINE#
s = 'python#SPACE#is#SPACE#pretty#SPACE#fun#SPACE#to#SPACE#use' #NEWLINE# [ len ( x ) for x in s . split ( ) ] #NEWLINE#
picture . putpixel ( ( x , y ) , new_color ) #NEWLINE#
clean . v . plot ( kind = 'kde' , ax = ax , secondary_y = True ) #NEWLINE#
pylab . savefig ( 'interests.png' ) #NEWLINE#
list ( mkimap ( ) ) #NEWLINE#
return gradients #NEWLINE#
cvs = df . columns . values #NEWLINE#
NUMBER_OF_EXCEPTIONS += 1 #NEWLINE#
print ( np . sum ( mylist ) ) #NEWLINE#
copy + copy_to_depth ( item , depth - 1 ) #NEWLINE#
z = [ int ( i == j ) for i , j in zip ( x , y ) ] #NEWLINE#
__ [ 'f1' ] #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
soup . find_all ( 'table' , { 'class' : [ 'class1' , 'class7' ] } ) #NEWLINE#
cursor . execute ( query ) #NEWLINE#
all_labels . sort ( ) #NEWLINE#
content . send ( { 'hello' : 'world' } ) #NEWLINE#
self . assertEqual ( self . seq , list ( range ( 10 ) ) ) #NEWLINE#
f . write ( bitbufstr ) #NEWLINE#
list ( compress ( listOfTuples , bool_array ) ) #NEWLINE#
cache . set ( 'data' , data ) #NEWLINE#
pygame . draw . rect ( screen , Color ( 'darkred' ) , Rect ( 210 , 210 , 400 , 400 ) , width = 0 ) #NEWLINE#
conn . execute ( 'show#SPACE#version' ) #NEWLINE#
print ( f . read ( ) ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE# print ( 'exiting' ) #NEWLINE#
newstr = newstr . replace ( x , '' ) #NEWLINE#
img_gray = cv2 . cvtColor ( img , cv2 . COLOR_RGB2GRAY ) #NEWLINE#
hs . write ( name + '\n' ) #NEWLINE#
( values . cumsum ( ) - ALLOWANCE ) . clip_lower ( 0 ) . diff ( ) . fillna ( 0 ) #NEWLINE#
fig . savefig ( '{}/graph.png' . format ( output_dir ) ) #NEWLINE#
f = open ( os . path . expanduser ( '~/Desktop/somedir/somefile.txt' ) ) #NEWLINE#
zin . close ( ) #NEWLINE#
p = Pool ( 5 ) #NEWLINE# p . map ( f , [ 1 , 2 , 3 ] ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
gray2b = cv2 . warpAffine ( gray2 , Minv , shape ( gray2 . T ) ) #NEWLINE#
return HttpResponse ( escape ( some_string ) ) #NEWLINE#
p . stdin . write ( 'Hello#SPACE#Child\n' . encode ( ) ) #NEWLINE#
return ( '%.2f' % x ) . rstrip ( '0' ) . rstrip ( '.' ) #NEWLINE#
f ( 1 , 2 , 3 ) #NEWLINE#
self . newargument = myarg #NEWLINE#
csv_input = pd . read_csv ( 'input.csv' ) #NEWLINE#
sortid = request . POST . get ( 'sortid' ) #NEWLINE#
myfile2 . write ( text ) #NEWLINE#
plt . show ( ) #NEWLINE#
df = pd . DataFrame ( { 'AB' : [ 'A1-B1' , 'A2-B2' ] } ) #NEWLINE#
graceful = argparse . ArgumentParser ( add_help = False ) #NEWLINE#
new_dict [ '@interval' ] = sub_dict [ '@interval' ] #NEWLINE#
print ( s ) #NEWLINE#
with open ( filename , 'wb' ) as f : #NEWLINE# #INDENT# f . seek ( 999999 ) #NEWLINE# f . write ( '\x00' ) #NEWLINE#
a [ 0 ] [ 'tuple' ] = 1 , 2 #NEWLINE#
regex = re . compile ( '[%s]' % re . escape ( string . punctuation ) ) #NEWLINE#
soup . find ( 'li' , { 'class' : 'test' } , recursive = False ) #NEWLINE# soup . find_all ( 'li' , { 'class' : 'test' } , recursive = False ) #NEWLINE#
a = concat ( a , b ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'my_project.settings' ) #NEWLINE#
labels = [ 'morning' , 'afternoon' , 'evening' , 'night' ] #NEWLINE#
requests . post ( 'http://localhost:8888' , data = { 'post' : 'André#SPACE#Téchiné' } ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
l = ( 'aa' , 'bb' , 'cc' ) , 'dd' #NEWLINE# l = l [ 0 ] + ( l [ 1 ] , ) #NEWLINE#
map ( itemgetter ( 1 ) , rows ) #NEWLINE#
traceback . extract_stack ( ) #NEWLINE#
plt . ylabel ( 'My#SPACE#long#SPACE#label#SPACE#with#SPACE#$\\Sigma_{C}$#SPACE#math' + '\n' + 'continues#SPACE#here' ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
test = Image . open ( 'test.png' ) #NEWLINE#
list ( trimmer ( [ 1 , 2 , 3 , 4 , 5 ] , 4 ) ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE# now_plus_10 = now + datetime . timedelta ( minutes = 10 ) #NEWLINE#
bisect . bisect == bisect . bisect_left #NEWLINE#
raise SystemExit ( 'Sorry,#SPACE#this#SPACE#code#SPACE#need#SPACE#Python#SPACE#2.6#SPACE#or#SPACE#higher' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
plt . title ( title ) #NEWLINE#
"""Get#SPACE#the#SPACE#fully-qualified#SPACE#name#SPACE#of#SPACE#an#SPACE#object#SPACE#(including#SPACE#module).""" #NEWLINE#
"""Actual#SPACE#visitor#SPACE#method#SPACE#implementation.""" #NEWLINE#
browser . set_value ( 'Page$Next' , name = 'pagenumber' ) #NEWLINE#
ax . tick_params ( axis = 'x' , which = 'minor' , length = 0 , labelsize = 14 ) #NEWLINE#
MY_SETTING = 'value' #NEWLINE#
print ( now3 . strftime ( fmt ) ) #NEWLINE#
wb . SaveAs ( 'D:\\output_fit.xlsx' ) #NEWLINE#
now . replace ( minute = now . minute - now . minute % 15 , second = 0 , microsecond = 0 ) #NEWLINE#
floored_data = data . apply ( np . floor ) #NEWLINE#
x = numpy . array ( [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) #NEWLINE#
Script1 . py #NEWLINE#
A . objects . filter ( id = some_a . id ) . update ( hidden = False ) #NEWLINE#
print ( sys . stdin . read ( ) ) #NEWLINE#
DATABASE_NAME = 'C:/users/you/myproject/my.db' #NEWLINE#
array ( [ 0.0 , 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 ] , dtype = float32 ) #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'de_DE' ) #NEWLINE#
script = os . path . abspath ( sys . argv [ 1 ] ) #NEWLINE#
pairs = tuple ( combinations ( list ( range ( len ( A [ 0 ] ) ) ) , n ) ) #NEWLINE#
plt . imshow ( my_image1 , vmin = 0 , vmax = 10 , cmap = 'jet' , aspect = 'auto' ) #NEWLINE#
df . loc [ new_index ] = pd . Series ( [ 99 ] , df . columns ) #NEWLINE#
df = pd . read_csv ( 'file_path' , sep = '\t' ) #NEWLINE#
plt . figure ( ) #NEWLINE#
df . loc [ df . cherry == 'bad' , [ 'apple' , 'banana' ] ] = np . nan #NEWLINE#
good = [ x for x in mylist if x in goodvals ] #NEWLINE#
id ( Point ( 1 , 2 ) ) == id ( Point ( 1 , 2 ) ) #NEWLINE#
loop . run_until_complete ( asyncio . wait_for ( asyncio . sleep ( 60 ) , 5 ) ) #NEWLINE#
print ( html2text . html2text ( html ) ) #NEWLINE#
link . click ( ) #NEWLINE#
app . config [ 'flat_pages.db' ] = setup_default_flat_pages_db ( db ) #NEWLINE#
print ( 'Running.#SPACE#Your#SPACE#euid#SPACE#is' , euid ) #NEWLINE#
ax . plot ( local_theta , local_r , color = 'k' , marker = '' ) #NEWLINE#
words = string1 . split ( ) #NEWLINE# print ( '#SPACE#' . join ( sorted ( set ( words ) , key = words . index ) ) ) #NEWLINE#
[ ( 1 , 1 , 1 ) , ( 1 , 1 , 2 ) , ( 1 , 2 , 1 ) , ( 1 , 2 , 2 ) , ( 2 , 1 , 1 ) , ( 2 , 1 , 2 ) , ( 2 , 2 , 1 #NEWLINE# ) , ( 2 , 2 , 2 ) ] #NEWLINE#
clientsocket . send ( r . encode ( ) ) #NEWLINE#
plt . yticks ( [ ] ) #NEWLINE#
image . show ( ) #NEWLINE#
root = etree . fromstring ( xml ) #NEWLINE#
"""#NEWLINE#""" . join ( '#SPACE#' . join ( x ) for x in zip ( a , b ) ) #NEWLINE#
print ( hex3 ( - 1 ) ) #NEWLINE#
b = np . array ( [ 'john' , 'bill' , 'greg' ] ) #NEWLINE#
df . set_value ( 1 , 'Sites' , 30 ) #NEWLINE#
cv2 . imshow ( 'Thresholded#SPACE#Result' , Ithresh ) #NEWLINE#
cv2 . imshow ( 'Opened#SPACE#Result' , Iopen ) #NEWLINE#
server . ehlo ( ) #NEWLINE#
SequenceMatcher ( lambda x : x in 'abcd' , '#SPACE#abcd' , 'abcd#SPACE#abcd' ) . ratio ( ) #NEWLINE#
output_file . write ( ablob [ 0 ] ) #NEWLINE#
warning . setLevel ( logging . WARNING ) #NEWLINE#
greet ( dummy . func1 , 'Bala' ) #NEWLINE#
q . T . reshape ( - 1 , 2 , 2 ) . swapaxes ( 1 , 2 ) . reshape ( - 1 , 2 ) #NEWLINE# array ( [ [ 1 , 2 ] , [ 7 , 8 ] , [ 3 , 4 ] , [ 9 , 10 ] , [ 5 , 6 ] , [ 11 , 12 ] ] ) #NEWLINE#
L = [ [ 'x' , 'y' ] ] * 10 #NEWLINE#
fd . write ( '\xa0' ) #NEWLINE#
f . write ( 'there\n' ) #NEWLINE#
self . ser = serial . Serial ( 'COM3' , 9600 , timeout = 0 ) #NEWLINE#
print ( args . file . readlines ( ) ) #NEWLINE#
return module #NEWLINE#
conn = S3Connection ( '<aws#SPACE#access#SPACE#key>' , '<aws#SPACE#secret#SPACE#key>' ) #NEWLINE#
df [ 'tfidf_sorted' ] = df [ 'tfidf' ] . apply ( lambda y : sorted ( list ( y . items ( ) ) , #NEWLINE# key = lambda x : x [ 1 ] , reverse = True ) [ : 10 ] ) #NEWLINE#
files = [ open ( f ) for f in glob . glob ( '*.txt' ) ] #NEWLINE#
my_dict = kwargs . get ( 'my_dict' ) #NEWLINE#
sorted ( set ( a ) . intersection ( xyz ) ) #NEWLINE#
fixedser . dropna ( ) . plot ( ax = axes [ 1 ] ) #NEWLINE#
newser . dropna ( ) . plot ( ax = axes [ 1 ] ) #NEWLINE#
figure . canvas . draw ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
getting_text ( input ( 'Enter#SPACE#the#SPACE#text#SPACE#or#SPACE#write#SPACE#done#SPACE#to#SPACE#finish#SPACE#entering#SPACE#' ) ) #NEWLINE#
func_a ( s ) #NEWLINE#
driver . get ( url ) #NEWLINE#
nzsum = np . take ( mat , ixs [ nzmask ] , axis = 0 ) . sum ( axis = 0 ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
l . append ( x [ : k ] ) #NEWLINE#
print ( 'Path#SPACE#of#SPACE#the#SPACE#file#SPACE#is#SPACE#Invalid' ) #NEWLINE#
table [ 0 ] [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] = 6 #NEWLINE#
list ( pairs ( board ) ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
dtf2 . plot ( ) #NEWLINE#
m . close ( ) #NEWLINE#
print ( randomDate ( '1/1/2008#SPACE#1:30#SPACE#PM' , '1/1/2009#SPACE#4:50#SPACE#AM' , random . random ( ) ) ) #NEWLINE#
numpy . set_printoptions ( precision = 15 ) #NEWLINE#
raise Exception ( "Unable#SPACE#to#SPACE#close#SPACE#standard#SPACE#output.#SPACE#Try#SPACE#running#SPACE#with#SPACE#'nodaemon'" ) #NEWLINE#
layout . addWidget ( QtGui . QPushButton ( 'Button' ) ) #NEWLINE#
sorted_data = sorted ( data , key = itemgetter ( 0 ) ) #NEWLINE#
print ( xpath_ns ( tree , '/root/other:elem' ) ) #NEWLINE#
answerlist . extend ( templist [ : lengthmodified ] ) #NEWLINE#
df . groupby ( [ df [ 'Year' ] . str [ : 4 ] , 'Bread' ] ) . sum ( ) #NEWLINE#
se = pd . Series ( mylist ) #NEWLINE#
return _finditem ( v , key ) #NEWLINE#
print ( 'Not#SPACE#Found' ) #NEWLINE#
workList . sort ( key = len , reverse = True ) #NEWLINE#
foo . x = 0 #NEWLINE#
main ( ) #NEWLINE#
return [ ( double ( x ) if isinstance ( x , list ) else x * 2 ) for x in numberlist ] #NEWLINE#
fig = pyplot . figure ( ) #NEWLINE#
ax . set_xticks ( bins ) #NEWLINE#
with open ( 'file' ) as f : #NEWLINE# #INDENT# w , h = [ int ( x ) for x in next ( f ) . split ( ) ] #NEWLINE# array = [ [ int ( x ) for x in line . split ( ) ] for line in f ] #NEWLINE#
cookies = browser . get_cookies ( ) #NEWLINE#
pg . draw . rect ( surf , STIMCOL , ( 60 , 70 , 80 , 90 ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
print ( re . findall ( p , test_str ) ) #NEWLINE#
lst = [ 1 , 2 , 3 , 4 , 4 , 4 , 4 , 4 ] #NEWLINE# print ( list ( remove_n_dupes ( lst , 4 , 3 ) ) ) #NEWLINE#
l [ : 2 ] + l [ 3 : ] #NEWLINE#
inputElement = driver . find_element_by_id ( 'a1' ) #NEWLINE#
return jsonify ( username = g . user . username , email = g . user . email , id = g . user . id ) #NEWLINE#
image = Image . open ( image_in_path ) #NEWLINE#
return x if x < y else y #NEWLINE#
something ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
dt_m . groupby ( [ 'device_id' , 'category' ] ) . apply ( group_function ) #NEWLINE#
req . add_header ( 'Accept' , 'application/json' ) #NEWLINE#
new_list . append ( tmp_list ) #NEWLINE#
sheet . write_merge ( 0 , 0 , 0 , 1 , 'Long#SPACE#Cell' ) #NEWLINE# sheet . write ( 1 , 0 , 1 ) #NEWLINE# sheet . write ( 1 , 1 , 2 ) #NEWLINE#
classifier . classify ( 'This#SPACE#is#SPACE#an#SPACE#amazing#SPACE#library!' ) #NEWLINE#
ax1 . set_yscale ( 'log' ) #NEWLINE#
fig = plt . figure ( figsize = ( 5 , 10 ) ) #NEWLINE#
rx . findall ( 'current#SPACE#level:#SPACE#-2.03e+99db' ) #NEWLINE#
list ( dill . detect . badtypes ( f , depth = 1 ) . keys ( ) ) #NEWLINE#
admin . site . register ( User , UserAdmin ) #NEWLINE#
Session = scoped_session ( sessionmaker ( ) , scopefunc = get_current_tornado_request ) #NEWLINE#
logger . info ( 'knights:{}' , 'shrubbery' , style = '{' ) #NEWLINE#
text = models . TextField ( ) #NEWLINE#
pool = Pool ( ) #NEWLINE#
sns . lmplot ( 'x' , 'y' , hue = 'g' , data = data , fit_reg = False ) #NEWLINE#
print ( format ( i , '02d' ) ) #NEWLINE#
pickle . dump ( obj , f , pickle . HIGHEST_PROTOCOL ) #NEWLINE#
scipy . linalg . solve ( X , Y ) #NEWLINE#
insert_sort ( descend_list , i , lambda x , y : x [ 1 : ] < y [ 1 : ] ) #NEWLINE#
filter_df ( df , [ 'A' , 'B' ] , 1 ) #NEWLINE#
display ( fig ) #NEWLINE#
[ '<s>' , 'noun' , 'verb' , 'Adj' , '<end>' ] #NEWLINE#
for x in sorted ( mylist ) : #NEWLINE# #INDENT# pass #NEWLINE#
self . Refresh ( ) #NEWLINE#
model . compile ( loss = customized_loss , optimizer = 'sgd' ) #NEWLINE#
print ( link [ 'href' ] ) #NEWLINE#
pd . DataFrame ( list ( ds1 . difference ( ds2 ) ) ) #NEWLINE#
df #NEWLINE#
"""section_category_name#SPACE#=#SPACE#'computer#SPACE#and#SPACE#equipment#SPACE#expense'#SPACE#and#SPACE#date#SPACE#>=#SPACE#2015-01-01#SPACE#and#SPACE#date#SPACE#<=#SPACE#2015-03-31""" #NEWLINE#
print ( '%s:#SPACE#%s' % ( k , v ) ) #NEWLINE#
fts . Rules [ 1 ] . create_filter ( 'name_1' , comparator , value ) #NEWLINE#
df #NEWLINE#
test ( 1 , 2 ) #NEWLINE#
msg . add_header ( 'Content-Disposition' , 'attachment' , filename = the_file + '.zip' ) #NEWLINE#
s . connect ( ( host , port ) ) #NEWLINE#
sys . path . append ( os . path . join ( here , '../vendored' ) ) #NEWLINE#
print ( i . get_attribute ( 'innerHTML' ) ) #NEWLINE#
arrays = [ np . array ( map ( int , line . split ( ) ) ) for line in open ( #NEWLINE# 'scienceVertices.txt' ) ] #NEWLINE#
np . issubdtype ( np . int32 , int ) #NEWLINE#
plain_string_again = compressed_value . decode ( 'zlib' ) #NEWLINE#
'%#4x' % ( - 1 & 4294967295 ) #NEWLINE#
np . count_nonzero ( ( viewW ( A , B . shape ) == B ) . all ( ( 2 , 3 ) ) ) #NEWLINE#
[ 1 , 0 , 1 ] , #NEWLINE#
re . findall ( '\\d+' , ver ) #NEWLINE#
pickle . load ( f ) #NEWLINE#
print ( 'oops' ) #NEWLINE#
resp = urllib . request . urlopen ( request ) #NEWLINE#
date ( 2011 , 1 , 18 ) - date . today ( ) < timedelta ( days = 3 ) #NEWLINE#
wave . open ( file_in_memory , 'rb' ) #NEWLINE#
pwr = quad ( f , 1e-09 , 3.8317 ) [ 0 ] / fullpower #NEWLINE#
self . driver = webdriver . Firefox ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , polar = True ) #NEWLINE#
print ( map ( lambda x : dict ( zip ( reader [ 0 ] , x ) ) , reader ) ) #NEWLINE#
[ [ 1 , 3 , 7 , 8 ] , [ 9 ] ] #NEWLINE#
print ( os . getpid ( ) ) #NEWLINE#
create_log_file ( '/temp/log1.log' , logging . DEBUG ) #NEWLINE#
s3 = boto3 . client ( 's3' ) #NEWLINE#
resp . set_data ( soup . prettify ( ) ) #NEWLINE#
fig . multi_line ( y_err_x , y_err_y , color = color , ** error_kwargs ) #NEWLINE#
c += initval2 #NEWLINE#
pwr = quad ( f , 1e-09 , 13.33 ) #NEWLINE#
print ( 'Timed#SPACE#out#SPACE#while#SPACE#resolving#SPACE#%s' % args . host ) #NEWLINE#
return np . array ( b ) #NEWLINE#
a = b = c = d = e = f = g = h = '' #NEWLINE#
value = open ( 'thefile' , 'rb' ) . read ( ) #NEWLINE# p . communicate ( value ) #NEWLINE#
return permutate ( n , k ) // permutate ( k , k ) #NEWLINE#
g . add_argument ( '-a' , action = 'store_true' , default = False ) #NEWLINE#
print ( 'it#SPACE#took' , time . time ( ) - start , 'seconds.' ) #NEWLINE#
other_file . py #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
Result = np . empty ( arrivals . sum ( ) , dtype = 'i' ) #NEWLINE#
sorted ( list ( y . items ( ) ) , cmp = reverse_comparison ) #NEWLINE#
print ( word [ 1 ] , word [ 0 ] ) #NEWLINE#
output , output_err = p . communicate ( myfile . read ( ) ) #NEWLINE#
all ( c in string . printable for c in bell ) #NEWLINE#
msg = MIMEMultipart ( 'alternative' ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
sum ( ele [ 1 ] == 1 for ele in a ) #NEWLINE#
root . title ( 'Crop#SPACE#Test' ) #NEWLINE#
ax . set_position ( [ 0.1 , 0.1 , 0.5 , 0.8 ] ) #NEWLINE#
list ( skip ( list ( range ( 10 ) ) , at_start = 2 , at_end = 2 ) ) #NEWLINE#
f1 . close ( ) #NEWLINE#
super ( HiddenSlideForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
df . loc [ df [ 'distance' ] > 0.5 , 'label' ] = 3 #NEWLINE#
WSGIScriptAlias / myapp / code / wsgi / wsgi . py #NEWLINE#
corelog = logging . getLogger ( 'stumbler.core' ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
test . postmodel_set . all ( ) #NEWLINE#
print ( max ( node . y for node in path . nodes ) ) #NEWLINE#
super ( Bar , self ) . save ( * args , ** kwargs ) #NEWLINE#
return type ( s ) , s #NEWLINE#
self . assertTrue ( self . is_element_present ( <STR0> . ID , 'the#SPACE#id#SPACE#of#SPACE#your#SPACE#image' ) ) #NEWLINE#
data = pd . read_csv ( 'output_list.txt' , sep = '#SPACE#' , header = None ) #NEWLINE#
self . setCentralWidget ( self . view ) #NEWLINE#
math . ceil ( float ( 177 ) / 10 ) #NEWLINE#
1 / 0 #NEWLINE#
matches = re . findall ( '&#\\d+;' , s ) #NEWLINE#
matches = re . findall ( '&#[xX][0-9a-fA-F]+;' , s ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
"""C:\\Users\\Myname\\Dropbox\\Foldes\\image.png""" #NEWLINE#
module = importlib . import_module ( module_name , package = None ) #NEWLINE#
self . assertEqual ( ob . msg , 'SOME#SPACE#STRING' ) #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
d1 . x1 - d2 . x2 . values #NEWLINE#
numpy . array ( [ Register ( ) for i in range ( 4 ) ] ) #NEWLINE#
arr = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE# arr . tolist ( ) #NEWLINE#
application = QtGui . QApplication ( sys . argv ) #NEWLINE#
print ( i , list ( csv . reader ( source ) ) ) #NEWLINE#
int ( '0b1011000' , 2 ) #NEWLINE#
setattr ( e , key , val ) #NEWLINE#
Roman ( '1' ) #NEWLINE#
ax . plot ( x , y , 'ro' ) #NEWLINE#
sys . path . insert ( 0 , '/sites/flaskfirst' ) #NEWLINE#
result = np . empty_like ( zeta ) #NEWLINE#
chars . append ( c ) #NEWLINE#
n = random . randint ( 1 , 1000 ) #NEWLINE#
s = 'abc\\u20ac\\U00010302\\U0010fffd' #NEWLINE#
b = [ indicies [ elements == i ] for i in range ( 1 , N ) ] #NEWLINE#
f = open ( 'data.txt' , 'r' ) . read ( ) #NEWLINE#
do_something_else ( array [ - 1 ] ) #NEWLINE#
url = 'http://jigsaw.w3.org/css-validator/validator' #NEWLINE# files = { 'file' : open ( 'style.css' ) } #NEWLINE# response = requests . post ( url , files = files ) #NEWLINE#
self . thread = threading . Thread ( target = self . run_command ) #NEWLINE#
( s [ 0 ] if len ( s ) % 2 else '' ) + '' . join ( next ( it ) + x for x in it ) #NEWLINE#
p . stdin . write ( answer ) #NEWLINE#
print ( df . groupby ( by = 'class' ) . sum ( ) ) #NEWLINE#
sys . argv [ 1 ] #NEWLINE# sys . argv [ 2 ] #NEWLINE#
response . headers [ 'Cache-Control' ] = 'public,#SPACE#max-age=600' #NEWLINE#
response . headers [ 'Cache-Control' ] = 'no-cache,#SPACE#no-store,#SPACE#must-revalidate' #NEWLINE#
response . headers [ 'Pragma' ] = 'no-cache' #NEWLINE#
self . setStrokeColorRGB ( 0 , 0 , 0 ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
df . columns = [ [ 'odd' , 'even' , 'odd' ] , df . columns ] #NEWLINE#
codecs . open ( 'x.txt' , 'r' , 'utf-8-sig' ) . read ( ) #NEWLINE#
unpack ( '>d' , '' . join ( value ) ) [ 0 ] #NEWLINE#
set ( a ) . intersection ( b ) #NEWLINE#
Image . open ( filepath ) #NEWLINE#
raise IOError ( "Couldn't#SPACE#open#SPACE#device!" ) #NEWLINE#
df_verses = pd . read_sql ( verses_sql , con , index_col = 'id' ) #NEWLINE#
s [ - 1 ] #NEWLINE#
self . top_left_label . grid ( row = 0 , column = 0 , sticky = 'w' ) #NEWLINE#
name = name . replace ( 'k' , 'ck' ) #NEWLINE#
0.0 , - 64.0 , 208.0 , 0.0 , - 90.0 , 0.0 , - 80.0 , 0.0 , 0.0 , - 80.0 , - 48.0 #NEWLINE#
plot ( [ 4 , 5 , 6 ] ) #NEWLINE#
ax . plot ( x , k [ : , ( 0 ) ] , 'k-' ) #NEWLINE#
print ( 'Zero#SPACE#norm:' , n_0 , '/#SPACE#per#SPACE#pixel:' , n_0 * 1.0 / img1 . size ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
requests . post ( url , data = { } , headers = { } , files = { } , cookies = None , auth = None ) #NEWLINE#
main ( ) #NEWLINE#

y = { 'y1' : 1 , 'y2' : 2 , 'y3' : 3 } #NEWLINE#
plt . plot ( x , y , '.' , xp , pxp , 'g-' , linewidth = 1 ) #NEWLINE#
print ( '\n' . join ( pkgs ) ) #NEWLINE#
proc = subprocess . Popen ( 'echo#SPACE#"to#SPACE#stdout"' , shell = True , stdout = subprocess . PIPE ) #NEWLINE#
ax = fig . add_subplot ( nrows , ncols , k , projection = '3d' ) #NEWLINE#
df [ 'colFromIndex' ] = df . index #NEWLINE# df = df . sort ( [ 'count' , 'colFromIndex' ] ) #NEWLINE#
b = OrderedDict ( sorted ( a . items ( ) ) ) #NEWLINE#
return super ( IndexableDict , self ) . __getitem__ ( key ) #NEWLINE#
np . set_printoptions ( ** original ) #NEWLINE#
Article . objects . all ( ) . search ( document = 'three' ) #NEWLINE#
h = [ [ 0 , 0 , 1 ] [ 0 , 0 , 0 ] [ - 1 , 0 , 0 ] ] #NEWLINE#
print ( elem . get ( 'dateTime' ) , elem . text ) #NEWLINE#
super ( A , self ) . __init__ ( ) #NEWLINE#
serializer = UserSerializer ( data = request . DATA ) #NEWLINE#
neurons . append ( neuron ) #NEWLINE#
d = { 'one' : 1 , 'three' : 3 , 'two' : 2 , 'four' : 4 } #NEWLINE# set ( d . keys ( ) ) #NEWLINE#
print ( new_dict [ 'Racing#SPACE#Bike' ] ) #NEWLINE#
cv2 . imshow ( 'Eroded#SPACE#image' , eroded_img ) #NEWLINE#
b = numpy . arange ( 5 ) #NEWLINE#
sat = im . cumsum ( 1 ) . cumsum ( 0 ) #NEWLINE#
ax . w_zaxis . gridlines . set_lw ( 3.0 ) #NEWLINE#
df . groupby ( ( df . foo != df . foo . shift ( ) ) . cumsum ( ) ) . foo . transform ( 'size' ) . tail ( 1 ) #NEWLINE#
l = sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE# l #NEWLINE#
a . tolist ( ) [ : , ( [ 1 , 2 , 3 ] ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
main ( ) #NEWLINE#
b = np . ones ( ( 5 , 4 , 3 ) ) #NEWLINE#
list1 = [ 10 , 20 , 30 , 40 , 50 , 60 , 70 ] #NEWLINE#
data = NP . random . randint ( 0 , 10 , 40 ) . reshape ( 8 , 5 ) #NEWLINE#
list . append ( '%s=%s' % ( a [ i ] , b [ i ] ) ) #NEWLINE#
self . toolbar . update ( ) #NEWLINE#
numpy . random . seed ( 123 ) #NEWLINE#
"""hello#SPACE#john,#SPACE#how#SPACE#are#SPACE#you#SPACE#john,#SPACE#welcome#SPACE#john""" #NEWLINE#
ax . set_xticklabels ( month_series . index . strftime ( '%Y-%m' ) ) #NEWLINE#
hash ( { } ) #NEWLINE#
'en_NZ.utf8' , 'en_PH.utf8' , 'en_SG.utf8' , 'en_US.utf8' , 'en_ZA.utf8' #NEWLINE#
strat0 . execute ( ) #NEWLINE#
msg . attach ( attachment ) #NEWLINE#
latex_float ( 1000000000.0 ) #NEWLINE#
bisect . bisect ( l , 55 ) #NEWLINE#
print ( socket . gethostname ( ) ) #NEWLINE#
A [ np . where ( ~ np . isnan ( A ) ) [ 0 ] [ 0 ] : ] #NEWLINE#
return self . cleaned_data [ 'tags' ] . strip ( ) . split ( ) #NEWLINE#
df . stack ( ) . str . split ( ) . str [ - 1 ] . unstack ( ) #NEWLINE#
hobj . suggest ( 'spookie' ) #NEWLINE#
d = dict ( foo = 'foo' , bar = 'bar' , baz = 'baz' ) #NEWLINE#
img = Image . new ( 'RGB' , ( 255 , 255 ) , 'black' ) #NEWLINE#
server . serve_forever ( ) #NEWLINE#
sys . stderr = os . devnull #NEWLINE#
ocb = ctypes . windll . user32 . OpenClipboard #NEWLINE#
Path ( __file__ ) . parent . parent #NEWLINE#
return collections . OrderedDict ( ) #NEWLINE#
column = Column ( 'new#SPACE#column' , String ( 100 ) , primary_key = True ) #NEWLINE#
x = 'buffalo' #NEWLINE# exec ( '%s#SPACE#=#SPACE#%d' % ( x , 2 ) ) #NEWLINE#
random . sample ( word_drills , 3 ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( get_last_non_zero_index ( [ ] ) ) #NEWLINE#
sns . set_palette ( reversed ( sns . color_palette ( 'Blues_d' , n_plots ) ) , n_plots ) #NEWLINE#
'䷿' < '一' #NEWLINE#
list ( chain ( * map ( lambda x : x . split ( ',' ) if ',' in x else x , lis ) ) ) #NEWLINE#
team_id = db . Column ( db . Integer , db . ForeignKey ( 'team.id' ) , primary_key = True ) #NEWLINE#
form . find_control ( 'foo' ) . readonly = False #NEWLINE# form . set_all_readonly ( False ) #NEWLINE#
plot ( x , y , 'o' ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
ax . set_xticks ( xticks [ 1 : - 1 ] ) #NEWLINE#
print ( ii . get_attribute ( 'id' ) ) #NEWLINE#
img = cv2 . merge ( ( b , g , r ) ) #NEWLINE#
t = datetime . datetime . strptime ( s , '%H:%M:%S' ) #NEWLINE#
some_form . fields [ 'some_field' ] . widget . data_filter = data_filter #NEWLINE#
val = hex ( val ) #NEWLINE#
indices_nonzero = numpy . arange ( len ( array ) ) [ ~ bindices_zero ] #NEWLINE#
return super ( MyListView , self ) . get_context_data ( ** kwargs ) #NEWLINE#
widgets = { 'color' : TextInput ( attrs = { 'type' : 'color' } ) } #NEWLINE#
theta_edges , r_edges = CartesianToPolar ( xedges [ : - 1 ] , yedges [ : - 1 ] ) #NEWLINE#
history . append ( item ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
print ( 'Oops,#SPACE#{}#SPACE#not#SPACE#valid#SPACE#in#SPACE#a#SPACE#zipcode!' . format ( char ) ) #NEWLINE#
self . label . pack ( padx = 10 , pady = 10 ) #NEWLINE#
text = 'Larry#SPACE#Wall#SPACE#is#SPACE#the#SPACE#creator#SPACE#of#SPACE#Perl' #NEWLINE#
response_doc = etree . fromstring ( body , parser ) #NEWLINE#
fout . write ( str ( chunk ) + '\n\n' ) #NEWLINE#
chardet_detector . close ( ) #NEWLINE#
super ( MainWindow , self ) . __init__ ( ) #NEWLINE#
numrows = len ( input ) #NEWLINE# numcols = len ( input [ 0 ] ) #NEWLINE#
now = utc . localize ( datetime . datetime . utcnow ( ) ) #NEWLINE#
value = super ( CallablesDict , self ) . __getitem__ ( key ) #NEWLINE#
numbers . append ( map ( int , line . split ( ) ) ) #NEWLINE#
return dt + datetime . timedelta ( seconds = delta ) #NEWLINE#
pass #NEWLINE#
sf . add_columns ( sf [ 'Date' ] . split_datetime ( column_name_prefix = '' ) ) #NEWLINE#
pl . dump ( fig_handle , file ( 'sinus.pickle' , 'wb' ) ) #NEWLINE#
411 , 'Obama' , 'Ghandi' #NEWLINE#
f = open ( 'file.txt' , 'r' ) #NEWLINE#
os . environ [ 'PYTHONPATH' ] . split ( os . pathsep ) #NEWLINE#
pickle . dump ( requests . utils . dict_from_cookiejar ( session . cookies ) , f ) #NEWLINE#
list ( L [ 0 ] . f . items ( ) ) <= list ( a3 . f . items ( ) ) #NEWLINE#
test = '8743-12083-15' #NEWLINE# lst_int = [ int ( x ) for x in test . split ( '-' ) ] #NEWLINE#
self . assertEqual ( response . status_code , 301 ) #NEWLINE#
list1 = [ 1 , 1 , 1 , 0 , 0 ] #NEWLINE#
merged = list ( joinz ( 0 , zusers . iter ( ) , 0 , zratings . iter ( ) ) ) #NEWLINE#
f ( 1 , np . pi ) #NEWLINE#
{ { video . pub_date | naturaltime } } #NEWLINE#
Z = itp ( X , Y , grid = False ) #NEWLINE#
soup = BeautifulSoup ( totstring ) #NEWLINE#
d = collections . defaultdict ( list ) #NEWLINE# for k , v in s : #NEWLINE# #INDENT# if v not in d [ k ] : #NEWLINE# #INDENT# #INDENT# d [ k ] . append ( v ) #NEWLINE#
df . B . plot ( ax = ax2 , style = 'r-' , secondary_y = True ) #NEWLINE#
images = [ image for seq in images for image in seq ] #NEWLINE#
mod . __file__ #NEWLINE#
print ( [ c for c in cumsum ( [ 'a' , 'b' , 'c' ] ) ] ) #NEWLINE#
b = np . array ( [ [ 1 , 2 ] , [ 2 , 3 ] , [ 3 , 4 ] ] ) #NEWLINE#
self . stopped = True #NEWLINE#
df = pd . DataFrame ( [ [ 74.09 , 74.14399999999999 , 74.089 , 74.13600000000001 , #NEWLINE# 1.2e-05 ] , [ 74.11 , 74.143 , 74.009 , 74.072 , 0.00041900000000000005 ] , [ #NEWLINE# 74.074 , 74.19 , 74.063 , 74.081 , 0.000223 ] , [ 74.1 , 74.244 , 74.085 , 74.182 , #NEWLINE# 0.000429 ] , [ 74.194 , 74.222 , 74.164 , 74.199 , 9e-05 ] , [ 74.19800000000001 , #NEWLINE# 74.265 , 74.181 , 74.21300000000001 , 7.099999999999999e-05 ] , [ 74.223 , #NEWLINE# 74.244 , 74.12 , 74.17399999999999 , 0.000124 ] , [ 74.181 , 74.229 , 74.132 , #NEWLINE# 74.161 , 8.7e-05 ] , [ 74.164 , 74.337 , 74.126 , 74.324 , 0.000299 ] , [ 74.303 , #NEWLINE# 74.407 , 74.30199999999999 , 74.4 , 0.000185 ] , [ 74.408 , 74.44 , 74.373 , #NEWLINE# 74.40899999999999 , 0.00016299999999999998 ] , [ 74.437 , 74.438 , 74.399 , #NEWLINE# 74.418 , 0.00020800000000000001 ] , [ 74.428 , 74.464 , 74.385 , 74.385 , #NEWLINE# 0.000231 ] ] , columns = [ 'open' , 'high' , 'low' , 'close' , 'volume' ] ) #NEWLINE#
points . append ( ( x , y ) ) #NEWLINE#
from django . db . models import Q #NEWLINE#
ax . xaxis . set_ticks_position ( 'top' ) #NEWLINE#
print ( etree . tostring ( doc ) ) #NEWLINE#
"""Linda#SPACE#Lost#SPACE#(Secret#SPACE#Icecone#SPACE#Incorporated)#SPACE#lost#SPACE#their#SPACE#Kronos#SPACE#in#SPACE#Osmon#SPACE#(The#SPACE#Forge).#SPACE#Final#SPACE#Blow#SPACE#by#SPACE#Liberty#SPACE#Prime#SPACE#(Exit-Strategy)#SPACE#flying#SPACE#in#SPACE#a#SPACE#Arbitrator.#SPACE#""" #NEWLINE#
plt . scatter ( data1 , data2 , c = colors , cmap = my_cmap ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
data = conn . recv ( 4096 ) #NEWLINE#
board . append ( [ 'O' ] * 5 ) #NEWLINE#
timeparse ( '2h32m' ) #NEWLINE#
timeparse ( '4:13' ) #NEWLINE#
timeparse ( '5hr34m56s' ) #NEWLINE#
if var == 'stringone' or var == 'stringtwo' : #NEWLINE# #INDENT# dosomething ( ) #NEWLINE#
word = word . replace ( letter , '!' ) #NEWLINE#
self . connect ( self . tcpServer , SIGNAL ( 'newConnection()' ) , self . addConnection ) #NEWLINE#
zip ( ( 1 , 3 , 5 ) , ( 2 , 4 , 6 ) ) #NEWLINE#
self . setWindowFlags ( self . windowFlags ( ) | QtCore . Qt . FramelessWindowHint ) #NEWLINE#
cursor . executemany ( 'INSERT#SPACE#INTO#SPACE#my_table#SPACE#VALUES#SPACE#(?,#SPACE#?)' , my_iter ( 100 ) ) #NEWLINE#
ser = pd . Series ( np . random . normal ( size = 100 ) ) #NEWLINE#
unicodedata . normalize ( 'NFKD' , somestring ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
hex ( ord ( 'c' ) ) #NEWLINE#
pix = im . load ( ) #NEWLINE#
return options [ 0 ] #NEWLINE#
plt . yticks ( rotation = 0 ) #NEWLINE#
colors = hsv ( np . linspace ( 0 , 1.0 , len ( kinds ) ) ) #NEWLINE#
norm . ppf ( 0.5 ) #NEWLINE#
pp . figure ( figsize = ( 7 , 7 ) , edgecolor = 'k' , facecolor = 'w' ) #NEWLINE#
child_name = models . CharField ( max_length = 80 ) #NEWLINE#
sine_list . append ( math . sin ( 2 * math . pi * freq * ( x / frate ) ) ) #NEWLINE#
print ( child . tag , child . attrib , child . text ) #NEWLINE#
a . func ( ) #NEWLINE#
self . _tk . globalunsetvar ( self . _name ) #NEWLINE#
assert simplejson . __version__ == '2.1.2' #NEWLINE#
df . groupby ( 'clienthostid' ) #NEWLINE#
x = lst . pop ( ) #NEWLINE#
print ( ridge . coef_ ) #NEWLINE#
[ a for a in s if len ( a ) > 0 ] #NEWLINE#
app . exec_ ( ) #NEWLINE#
return hex ( n & 4294967295 ) [ : - 1 ] #NEWLINE#
d . update ( dict ( d ) ) #NEWLINE#
hbar . config ( command = canvas . xview ) #NEWLINE#
B_p . to_csv ( sys . stdout ) #NEWLINE#
M . iloc [ index ] [ col ] #NEWLINE#
Signal . send_robust ( sender , ** kwargs ) #NEWLINE#
rows = table . findAll ( 'tr' ) #NEWLINE#
query = 'SELECT#SPACE#table1,#SPACE#table2,#SPACE#table3#SPACE#FROM#SPACE#`db`-tables;' #NEWLINE#
self . response . out . write ( output . getvalue ( ) ) #NEWLINE#
shapesMatch ( [ ( 0 , 0 ) , ( 1 , 1 ) , ( 0 , 2 ) , ( - 1 , 1 ) ] , l_shape ) #NEWLINE#
existing = p [ 'd' ] [ 'a' ] #NEWLINE#
a = myobject . id if myobject is not None else None #NEWLINE#
print ( 'lcm_seq():' , solution ) #NEWLINE#
{ expr1 : expr2 , expr3 : expr4 } #NEWLINE#
X , Y = np . meshgrid ( X , Y ) #NEWLINE#
sorted ( randlist2 ( 2000000000 , 10000000 , 1900000000 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
unplugged ( ) #NEWLINE#
data = [ '3' , '7.4' , '8.2' ] #NEWLINE# new_data = [ float ( n ) for n in data ] #NEWLINE#
m = Basemap ( projection = 'robin' , resolution = 'c' , lat_0 = 0 , lon_0 = 0 ) #NEWLINE#
pid = proc . pid #NEWLINE#
print ( get_range ( { 'a' : 'b' , 'c' : 'd' , 'e' : 'f' } , 0 , 1 ) ) #NEWLINE#
print ( 'str' ) #NEWLINE#
child . sendline ( 'password' ) #NEWLINE#
entretien_send_email . send_mail ( self . id ) #NEWLINE#
printout ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( 'error:#SPACE#message#SPACE#timeout' ) #NEWLINE#
print ( '\rpart#SPACE#2' ) #NEWLINE#
signal . signal ( signal . SIGINT , lambda number , frame : sys . exit ( ) ) #NEWLINE#
plt . plot ( [ 0.5 , 2 , 3.5 ] , 'b-' , label = 'Sample#SPACE#Label#SPACE#Blue' ) #NEWLINE#
im = im . convert ( 'L' ) #NEWLINE#
def randomword ( length ) : #NEWLINE# #INDENT# return '' . join ( random . choice ( string . lowercase ) for i in range ( length ) ) #NEWLINE#
pprint . pprint ( tup , depth = 6 ) #NEWLINE#
L = list ( itertools . repeat ( [ 'x' , 'y' ] , 20 ) ) #NEWLINE#
np . split ( sorted_a , np . unique ( sorted_a [ : , ( 1 ) ] , return_index = True ) [ 1 ] [ 1 : ] ) #NEWLINE#
( 'G' , 'green' ) , ( 'H' , 'yellow' ) , ( 'I' , 'white' ) #NEWLINE#
return c , b #NEWLINE#
sys . stdout . write ( '#' * ( x - progress_x ) ) #NEWLINE#
self . grid ( ) #NEWLINE#
{ 'both1' : 11 , 'both2' : 22 , 'only_x' : 100 , 'only_y' : 200 } #NEWLINE#
db . init_app ( current_app ) #NEWLINE#
list ( zip ( lst [ : - 1 ] , lst [ 1 : ] ) ) #NEWLINE#
def ignoringarg ( f ) : #NEWLINE# #INDENT# return lambda _ : f ( ) #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
input = '1#SPACE#3.0#SPACE#false#SPACE#hello' #NEWLINE#
tree = ElementTree . parse ( StringIO . StringIO ( output ) ) #NEWLINE#
Framebuffer , XOrigin , YOrigin = display . getFrameBuffer ( ScreenId ) #NEWLINE#
hl , = plt . plot ( [ ] , [ ] ) #NEWLINE#
{ { formset } } #NEWLINE#
plt . axis ( [ xmin , xmax , ymin , ymax ] ) #NEWLINE#
"""|19,301|14,856|18,554""" #NEWLINE#
"""19,301|14,856|18,554""" #NEWLINE#
dtf . plot ( ) #NEWLINE#
p = Process ( target = f , args = ( arr , ) ) #NEWLINE#
__init__ . py #NEWLINE#
a , b , c #NEWLINE#
profile . runctx ( 'self.baz()' , globals ( ) , locals ( ) ) #NEWLINE#
print ( ( 'bar' , a ) ) #NEWLINE#
from file1 import * #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
print ( df . to_latex ( ) ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
dill . pickles ( Foo . x ) #NEWLINE#
ax = df . plot ( ) #NEWLINE#
plt . axvspan ( 0 , 4 , color = 'y' , alpha = 0.2 ) #NEWLINE#
oneone #NEWLINE#
b_idx = np . searchsorted ( out_id , b [ : , ( 0 ) ] , side = 'left' ) #NEWLINE#
from django . contrib . auth . models import Permission #NEWLINE#
s . fillna ( 0 ) . plot ( ) #NEWLINE#
plt . scatter ( x3 , y3 , label = str ( pointset3 ) ) #NEWLINE#
all ( a == b for a , b in zip_longest ( gen_1 , gen_2 , fillvalue = sentinel ) ) #NEWLINE#
ax . add_artist ( ell ) #NEWLINE#
flt = float ( random . randint ( 0 , 100 ) ) #NEWLINE#
print ( ( 'As#SPACE#currency#SPACE#:' , c , ':' , v . encode ( 'utf-8' ) ) ) #NEWLINE#
"""this#SPACE#is#SPACE#{.a}""" . format ( self ) #NEWLINE#
self . itemChanged . connect ( self . on_item_changed ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_IGN ) #NEWLINE#
case ( re . search ( pattern , st ) ) #NEWLINE#
idx = np . arange ( n ) #NEWLINE#
print ( "we#SPACE#don't#SPACE#have#SPACE#an#SPACE#IP#SPACE#address#SPACE#for#SPACE#user" ) #NEWLINE#
out . close ( ) #NEWLINE#
imagem = canvas . ImageReader ( StringIO . StringIO ( open ( 'file.jpg' , 'rb' ) . read ( ) ) ) #NEWLINE#
python / Users / luca / Documents / python / gameover . py #NEWLINE#
f = open ( 'masters.txt' ) #NEWLINE#
a [ indices ] #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
cv2 . imshow ( 'Output' , filtered ) #NEWLINE#
print ( '' . ljust ( line_width ) + 'RIGHT' * 3 ) #NEWLINE#
s . map ( methodcaller ( 'strftime' , '%d-%m-%Y' ) ) #NEWLINE#
ax1 . set_xlabel ( 'redshift' ) #NEWLINE#
'a#SPACE#squared#SPACE#is#SPACE#%s' % ( a * a ) #NEWLINE#
max ( lis ) #NEWLINE#
averaged = { k : ( v / len ( folds ) ) for k , v in list ( summed . items ( ) ) } #NEWLINE#
db . test . remove ( doc_id ) #NEWLINE#
logging . info ( 'this#SPACE#is#SPACE#an#SPACE#info#SPACE#message' ) #NEWLINE#
"""<certificate#SPACE#encrypted>""" #NEWLINE#
list_ = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
send_email ( ) #NEWLINE#
game . update ( ) #NEWLINE#
( X [ : , ( None ) , : ] * X ) . T #NEWLINE#
soup = bs . BeautifulSoup ( content , 'xml' ) #NEWLINE#
( rollingcor . sum ( skipna = 0 ) . sum ( skipna = 0 ) - n ) / 2 / n #NEWLINE#
super ( MyMainWindow , self ) . __init__ ( parent ) #NEWLINE#
re = ':(?=..(?<!\\d:\\d\\d))|[^a-zA-Z0-9#SPACE#](?<!:)' #NEWLINE#
pickle . dump ( dict2 , fp ) #NEWLINE#
self . file_saving . input_queue . put ( None ) #NEWLINE#
ax . legend ( years , loc = 'best' ) #NEWLINE#
print ( 'Child#SPACE#checked,#SPACE#and#SPACE#is#SPACE#done#SPACE#playing' ) #NEWLINE#
print ( 'Endless#SPACE#child#SPACE#done' ) #NEWLINE#
print ( 'Child#SPACE#started' ) #NEWLINE#
my_objects = [ ] #NEWLINE#
set ( l1 ) | set ( l2 ) #NEWLINE#
app = Flask ( __name__ , static_url_path = 'tmp' , static_folder = 'tmp' ) #NEWLINE#
sys . getsizeof ( '' ) #NEWLINE#
print ( [ x for x in Records if x [ 'Price' ] != 0 ] ) #NEWLINE#
s . astype ( '|S3' ) #NEWLINE#
for _ in range ( n ) : #NEWLINE# #INDENT# do_something ( ) #NEWLINE#
im . set_clip_path ( clip_path ) #NEWLINE#
print ( line ) #NEWLINE#
return time . mktime ( datetime . datetime . fromtimestamp ( x ) . timetuple ( ) ) #NEWLINE#
thetds = soup . findAll ( 'td' , attrs = { 'class' : 'author' } ) #NEWLINE#
a = numpy . ones ( ( 1024 , 1024 , 5 ) , order = 'f' ) #NEWLINE#
( 0 < x ) & ( x < 1 ) #NEWLINE#
constr = [ ] #NEWLINE#
tree = xml . parse ( 'data.xml' ) #NEWLINE#
_sock . send ( 'a' ) #NEWLINE#
sock . send ( 'a' ) #NEWLINE#
datetime . datetime . max #NEWLINE#
self . _points = [ ] #NEWLINE#
local_tz = tzlocal . get_localzone ( ) #NEWLINE#
raise KeyError ( key ) #NEWLINE#
fh . setLevel ( logging . DEBUG ) #NEWLINE#
id . send ( chr ( 3 ) ) #NEWLINE#
int ( '' . join ( map ( str , x ) ) , 2 ) #NEWLINE#
newlist . append ( d ) #NEWLINE#
trainer = deepbelief . DeepBeliefTrainer ( net , dataset = ds ) #NEWLINE#
resp = requests . post ( 'http://yourserver.de/test.php' , params = userdata ) #NEWLINE#
plt . fill_betweenx ( y1 , x1 , x2 , color = 'g' ) #NEWLINE#
print ( dict [ 'Alice' ] == '2341' ) #NEWLINE#
func ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
self . setColumnWidth ( 0 , event . size ( ) . width ( ) ) #NEWLINE#
pickle . dump ( score , file ) #NEWLINE#
df . ix [ : , ( 2 ) ] #NEWLINE#
plt . plot ( x , x ) #NEWLINE#
image . save ( self . get_thumbnail_path ( ) ) #NEWLINE#
s = [ 1 , 4 , 2 , 3 , 5 , 4 , 5 , 6 , 7 , 8 , 1 , 3 , 4 , 5 , 9 , 10 , 11 , 42 ] #NEWLINE#
f . write ( something ) #NEWLINE#
ax . set_xlim ( 0 , X ) #NEWLINE#
mock_tmp . return_value . __enter__ . return_value . name = mytmpname #NEWLINE#
sum ( i == word for word in str1 . split ( ) ) #NEWLINE#
plt . subplot ( 133 ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 , 3 ] , [ 4 , None , None ] , [ None , None , 9 ] ] ) #NEWLINE# df . fillna ( method = 'ffill' ) #NEWLINE#
self . canvas = tk . Canvas ( self , width = 400 , height = 400 , background = 'bisque' ) #NEWLINE#
mylist = [ ( 1 , 'hello' ) , ( 2 , 'world' ) ] #NEWLINE#
replace_element ( appl , 'a' , 2 , '#SPACE#' ) #NEWLINE#
imresize ( np . ones ( ( 1000 , 1000 ) ) , ( 100 , 100 ) ) . shape #NEWLINE#
a = [ 1 , 1 , 2 , 1 , 2 , 2 , 3 ] #NEWLINE#
myfoo ( 3 ) #NEWLINE#
len1 = math . hypot ( x1 , y1 ) #NEWLINE#
win . addstr ( 1 , 1 , 'Progress#SPACE#' ) #NEWLINE#
a . set_xlim ( 0 , 4 * pi ) #NEWLINE#
print ( 'key:#SPACE#{},#SPACE#val:#SPACE#{}' . format ( k , v ) ) #NEWLINE#
[ x [ i : i + step ] for i in range ( 0 , len ( x ) , step ) ] #NEWLINE#
print ( [ list ( b ) for b in zip ( l , inner ) ] ) #NEWLINE#
from functools import reduce #NEWLINE# return reduce ( lambda x , y : x + y , [ len ( x ) for x in myList ] , 0 ) #NEWLINE#
df . resample ( '5min' , how = pyfun ) #NEWLINE#
g = ( x + y for x , y in zip ( g1 , g2 ) ) #NEWLINE#
{ 'username' : 'saltuser' , 'password' : 'saltuser' , 'eauth' : 'auto' } #NEWLINE#
x , y = win32api . GetCursorPos ( ) #NEWLINE#
ax . yaxis . set_major_formatter ( ticker . FuncFormatter ( myLogFormat ) ) #NEWLINE#
ser = serial . Serial ( 'COM5' , 9600 ) #NEWLINE#
df . columns = [ 'ANO' , 'MNO' , 'Time' , 'Unit' ] #NEWLINE#
struct . pack ( 'h' , - 32767 ) #NEWLINE#
print ( ( 'new#SPACE#connection#SPACE#from#SPACE#' , addr ) ) #NEWLINE#
tpool = ThreadPool ( processes = 4 ) #NEWLINE#
def f ( i = 10 ) : #NEWLINE# #INDENT# return i #NEWLINE#
df . info ( ) #NEWLINE#
df . drop ( [ 'product' ] , inplace = True , axis = 1 ) #NEWLINE#
ax . plot_surface ( X2 , Y2 , Z2 , color = 'blue' , alpha = 0.5 , linewidth = 0 , zorder = 3 ) #NEWLINE#
whom = models . ForeignKey ( Tweeter , related_name = 'whom' ) #NEWLINE#
self . crawler . engine . crawl ( self . create_request ( ) , spider ) #NEWLINE#
data [ 'FreeSec' ] [ data [ 'Brand' ] . isin ( group_clients ) ] = True #NEWLINE#
smtp . sendmail ( send_from , send_to , msg . as_string ( ) ) #NEWLINE#
httplib . HTTPConnection . connect ( self ) #NEWLINE#
sorted ( numbers ) [ - 2 ] #NEWLINE#
print ( same_direction ( [ - 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ) ) #NEWLINE#
df1 = df [ df [ 'Sales' ] >= s ] #NEWLINE#
plt . figure ( figsize = ( 4.5 , 2.5 ) ) #NEWLINE#
'%.3f' % round ( 1324343032.3243253 * 1000 / 1000 , 3 ) #NEWLINE#
print ( D . x . value ) #NEWLINE#
{ { object . tag . name } } #NEWLINE#
np . tile ( z , ( 3 , 1 ) ) #NEWLINE#
""",#SPACE#""" . join ( str ( s ) for s in set_4 ) #NEWLINE#
a = [ 'hello' , 'world' , '1' , '2' ] #NEWLINE#
themsg . attach ( msg ) #NEWLINE#
a [ 0 ] . append ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
return item #NEWLINE#
xml . write ( '</%s>' % sub [ - 1 ] ) #NEWLINE#
df [ 'col_3' ] = df . col_1 . combine ( df . col_2 , func = get_sublist ) #NEWLINE#
parse ( '2009-JAN-5' ) . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
return reverse ( 'my_named_url' , kwargs = { 'pk' : self . pk } ) #NEWLINE#
profile . set_preference ( 'browser.download.manager.showWhenStarting' , False ) #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( len ( s ) + 1 ) ) #NEWLINE#
print ( data . groupby ( [ 'Date_of_Death' , 'Area' ] ) . size ( ) ) #NEWLINE#
pass #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
file . write ( 'Testing#SPACE#streams' ) #NEWLINE#
urllib . request . urlopen ( request ) #NEWLINE#
token . redirect_uri = 'urn:ietf:wg:oauth:2.0:oob' #NEWLINE#
AB = np . einsum ( 'ijm,imk->ijk' , A , B ) #NEWLINE#
return re . sub ( '(.)(.)(.)' , '\\g<3>\\g<2>\\g<1>' , txt ) #NEWLINE#
"""A#SPACE#single#SPACE#'#SPACE#char""" . translate ( str . maketrans ( { "'" : None } ) ) #NEWLINE#
idx3 = pd . date_range ( '1/1/1980' , periods = 10000000 , freq = 'Min' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
step = datetime . timedelta ( days = 1 ) #NEWLINE#
lst = [ ( 'name' , 'value' ) , ( 'name2' , 'value2' ) ] #NEWLINE#
p . start ( ) #NEWLINE#
start_date = start_date . replace ( tzinfo = local_tz ) #NEWLINE#
pylab . show ( ) #NEWLINE#
'WBD36EM6QL' , 'DEIODVQU46' , 'KWSJA5WDKQ' , 'WX9SVRFO0G' , '6UN63WU64G' #NEWLINE#
os . remove ( path ) #NEWLINE#
parser . add_argument ( '-h' , '--hi' , action = 'store_true' , dest = 'hi' ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
f = open ( 'example' , 'w' ) #NEWLINE#
df2 . groupby ( 'a' ) . transform ( 'count' ) #NEWLINE#
img = np . uint8 ( np . random . random ( ( 720 , 1280 ) ) * 256 ) #NEWLINE#
win . set_decorated ( False ) #NEWLINE#
test = [ A ( ) for _ in range ( 3 ) ] #NEWLINE#
array ( [ 1.0 , 0.0 , - 1.0 , nan , nan ] , dtype = float32 ) #NEWLINE#
array ( [ [ 0.11 , 0.22 , 0.33 ] , [ 0.88 , 1.1 , 1.32 ] ] ) #NEWLINE#
texts = [ textOf ( n ) for n in soup . findAll ( 'a' , href = re . compile ( #NEWLINE# '^notizia.php\\?idn=\\d+' ) ) ] #NEWLINE#
df1 = DataFrame ( { 'key' : [ 1 , 1 ] , 'col1' : [ 1 , 2 ] , 'col2' : [ 3 , 4 ] } ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
matches = regex . findall ( my_str ) #NEWLINE#
sess . run ( apply_transform_op ) #NEWLINE#
return itertools . chain ( iter ( self . items . values ( ) ) , iter ( self . people . values ( ) ) ) #NEWLINE#
ax . plot ( list ( range ( 10 ) ) ) #NEWLINE#
arr = np . vstack ( ( arr , np . array ( [ 4 , 5 , 6 ] ) ) ) #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
soup = BeautifulSoup ( html_page ) #NEWLINE#
sum ( 1 if int ( line ) % k == 0 else 0 for line in sys . stdin ) #NEWLINE#
pythoncom . CoInitialize ( ) #NEWLINE#
all_data . shape #NEWLINE#
root . withdraw ( ) #NEWLINE#
plt . plot ( y ) #NEWLINE#
ax = plt . subplot ( gs [ i , j ] ) #NEWLINE#
def float_to_hex ( f ) : #NEWLINE# #INDENT# return hex ( struct . unpack ( '<I' , struct . pack ( '<f' , f ) ) [ 0 ] ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# float_to_hex ( 17.5 ) #NEWLINE#
my_logger . info ( 'barbaz' ) #NEWLINE#
my_logger . info ( 'foobaz' ) #NEWLINE#
db . delete ( q . fetch ( 200 ) ) #NEWLINE#
file . write ( 'Multiple#SPACE#of#SPACE#1000!\r\n' * sum ( [ i for i in a2 if i % 1000 == 0 ] ) ) #NEWLINE#
print ( np . allclose ( res1 , res2 ) ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'settings.production' #NEWLINE#
os . environ [ 'DJANGO_CONF' ] = 'settings.production' #NEWLINE#
plt . figure ( ) #NEWLINE#
letters = 'asdfHRbySFss' #NEWLINE# uppers = [ l for l in letters if l . isupper ( ) ] #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
[ s [ a : b ] for a , b in pairwise ( accumulate ( chain ( [ 0 ] , keys ) ) ) ] #NEWLINE#
print ( ',#SPACE#' . join ( actorsByMovies ( ) ) ) #NEWLINE#
return getattr ( self . cp , attr ) #NEWLINE#
[ '/test/fruit/banana' , '/test/animal/penguin' ] #NEWLINE#
jsonfile . write ( '\n' ) #NEWLINE#
code . interact ( local = locals ( ) ) #NEWLINE#
sock . sendall ( 'GOT#SPACE#SIZE' ) #NEWLINE#
alltests = unittest . TestSuite ( [ fast , slow ] ) #NEWLINE#
engines . append ( engine ) #NEWLINE#
self . finish ( ) #NEWLINE#
self . tk . config ( menu = self . menu ) #NEWLINE#
new_list = copy . copy ( old_list ) #NEWLINE#
elem = next ( ( s for s in selectionsFromTable if data [ 'elements' ] in s ) , None ) #NEWLINE#
df [ 'dist' ] = abs ( df [ 'count' ] - df [ 'count' ] . median ( ) ) #NEWLINE#
print ( firstMatch . group ( ) ) #NEWLINE#
with open ( 'C:\\path\\to\\logons.txt' , 'r' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# data = line . split ( ) #NEWLINE# print ( '{0[0]:<15}{0[1]:<15}{0[2]:<5}{0[3]:<15}{0[4]:>15}' . format ( data ) ) #NEWLINE#
log ( 'File#SPACE#{file}#SPACE#had#SPACE#error#SPACE#{error}' , '{file}' , file , '{error}' , err ) #NEWLINE#
BW = imread ( 'http://i.stack.imgur.com/oXKep.jpg' ) #NEWLINE#
s . setsockopt ( socket . IPPROTO_IP , socket . IP_HDRINCL , 1 ) #NEWLINE#
mycode . py #NEWLINE#
password = request . form [ 'password' ] #NEWLINE#
csvout . close ( ) #NEWLINE#
print ( json . load ( open ( 'file' ) , cls = ConcatJSONDecoder ) ) #NEWLINE#
set ( product ( s1 , repeat = 3 ) ) #NEWLINE#
print ( '456' ) #NEWLINE#
w . configure ( state = 'disabled' ) #NEWLINE#
self . br [ 'somefieldname' ] = 'Bar' #NEWLINE#
lst = [ 'aaa' , 'bbb' , 'ccc' ] #NEWLINE# map ( str , lst ) #NEWLINE#
[ 2 , 1 , 3 ] #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return type ( s ) #NEWLINE#
df [ df . groupby ( 'A' ) [ 'B' ] . rank ( ) == 1 ] #NEWLINE#
a . max ( axis = 0 ) #NEWLINE#
raise ImportError ( 'No#SPACE#module#SPACE#named#SPACE#' + fullname ) #NEWLINE#
self . setCentralWidget ( self . web_view ) #NEWLINE#
writer . writeheader ( ) #NEWLINE#
sess . run ( tf . initialize_all_variables ( ) ) #NEWLINE#
raise Exception ( 'Can#SPACE#not#SPACE#determine#SPACE#number#SPACE#of#SPACE#CPUs#SPACE#on#SPACE#this#SPACE#system' ) #NEWLINE#
ast . parse ( expr , filename = '<unknown>' , mode = 'exec' ) #NEWLINE#
fig2 = matplotlib . pyplot . figure ( figsize = ( 8.0 , 5.0 ) ) #NEWLINE#
a = [ [ 1 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] , [ 5 , 2 ] ] #NEWLINE# plt . plot ( * zip ( * a ) ) #NEWLINE#
url = 'http://xxx.abcdef.com/fdfdf/' #NEWLINE# print ( url . split ( '/' ) [ 2 ] ) #NEWLINE#
fig . subplots_adjust ( wspace = 0.05 ) #NEWLINE#
fs . noteoff ( 0 , 67 ) #NEWLINE#
x = 2 #NEWLINE#
plt . show ( ) #NEWLINE#
d1 = { 'a' : 1 , 'b' : 2 , 'c' : 3 } #NEWLINE#
f . write ( '\n' . join ( inbuff ) . encode ( 'utf-8' ) ) #NEWLINE#
element . set ( 'value' , 'newvalue' ) #NEWLINE#
myQuery . Availability #NEWLINE#
raise Exception ( 'Invalid#SPACE#move#SPACE#type' ) #NEWLINE#
tar . extractall ( path , get_members ( tar , args [ 1 ] ) ) #NEWLINE#
atexit . register ( lambda : json . dump ( cache , open ( file_name , 'w' ) ) ) #NEWLINE#
0.22080219 , 0.4807312 , 0.9288989 , 0.10956681 , 0.73215416 , 0.33184318 #NEWLINE#
df [ 'col3' ] = df . loc [ df . col1 == 34 , 'col2' ] #NEWLINE#
plt . axvspan ( 6 , 14 , color = 'y' , alpha = 0.2 ) #NEWLINE#
assert len ( yields1 ) == len ( list_of_yields ) #NEWLINE#
A [ : ] = ( sub for sub in A if st . issubset ( sub ) ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
open ( 'test.txt' , 'w' ) . write ( open ( 'test.txt' , 'r' ) . read ( ) . replace ( 'hola' , #NEWLINE# 'hello' ) ) #NEWLINE#
print ( self . get_cookie ( 'scheme' ) ) #NEWLINE#
punto . set_srid ( 900913 ) #NEWLINE#
velcro . right ( 180 ) #NEWLINE#
ax . set_xlim ( 0 , 7 ) #NEWLINE# ax . set_ylim ( 0 , 5 ) #NEWLINE#
do_something ( val ) #NEWLINE#
print ( 'His#SPACE#health#SPACE#is' , enemy1 - punch ) #NEWLINE#
def rps ( ) : #NEWLINE# #INDENT# return True #NEWLINE#
word_list . sort ( key = lambda i : i [ 0 ] . lower ( ) ) #NEWLINE#
lowdiag = [ 0.5 ] * ( n - 1 ) + [ 0 ] * 2 #NEWLINE#
print ( 'Process#SPACE#id:' , os . getpid ( ) ) #NEWLINE#
finalMap . update ( d ) #NEWLINE#
return "No,#SPACE#I'm#SPACE#...#SPACE#doesn't!" #NEWLINE#
date = datetime . date . today ( ) #NEWLINE#
print ( '{},#SPACE#{},#SPACE#{}' . format ( * islice ( tup ( 1 , 2 ) , 3 ) ) ) #NEWLINE#
async . get ( 'http://google.com' ) #NEWLINE#
odeint ( func , y0 , t , * list1 ) #NEWLINE#
print ( Second_row_first_column . strip ( ) + Second_row_second_column . strip ( ) ) #NEWLINE#
l = sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
raise NotImplementedError ( 'You#SPACE#must#SPACE#implement#SPACE#my_redefinable()#SPACE#' ) #NEWLINE#
p . start ( ) #NEWLINE#
first_input = eval ( input ( 'enter#SPACE#first#SPACE#input:#SPACE#' ) ) #NEWLINE#
array ( [ 0 , 4 , 2 , 6 , 1 , 5 , 3 , 7 ] ) #NEWLINE#
print ( re . sub ( '.(?<!\\0)' , '(\\g<0>)' , test ) ) #NEWLINE#
a . append ( line . strip ( ) ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#?#SPACE#FROM#SPACE#Data#SPACE#where#SPACE#?=?' , ( column , goal , constrain ) ) #NEWLINE#
super ( Widget , self ) . delete ( ) #NEWLINE#
df #NEWLINE#
"""C:/Users/expoperialed/Desktop/Python""" #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
return np . sin ( y * x ) + z #NEWLINE#
points = np . random . randint ( 0 , 5 , ( 10 , 2 ) ) #NEWLINE#
pd . PeriodIndex ( x . columns , freq = 'Q' ) #NEWLINE#
print ( "That#SPACE#does't#SPACE#make#SPACE#any#SPACE#sort#SPACE#triangle...#SPACE#>:[" ) #NEWLINE#
list ( chain . from_iterable ( pattern . split ( w ) for w in input_list ) ) #NEWLINE#
print ( f . text ) #NEWLINE#
driver . save_screenshot ( 'face_1.png' ) #NEWLINE#
s . setsockopt ( SOL_SOCKET , SO_BROADCAST , 1 ) #NEWLINE#
curs = conn . cursor ( ) #NEWLINE#
np . savetxt ( 'data' , np . sort ( l ) , fmt = '%d' ) #NEWLINE#
pygame . event . pump ( ) #NEWLINE#
pass #NEWLINE#
f . close ( ) #NEWLINE#
ax [ 0 ] . set_xlabel ( '$x$' ) #NEWLINE#
shows = [ { 'id' : 1 , 'name' : 'Sesaeme#SPACE#Street' } , { 'id' : 2 , 'name' : #NEWLINE# 'Dora#SPACE#The#SPACE#Explorer' } ] #NEWLINE#
SubClass = type ( 'SubClass' , ( EntityResource , ) , { 'A' : 1 , 'B' : 2 } ) #NEWLINE#
s [ ~ s . index . duplicated ( ) ] #NEWLINE#
t = Thread ( target = get_input , args = ( sys . <STR0> , ) ) #NEWLINE#
plt . axis ( [ 0 , 10 , 0 , 10 ] ) #NEWLINE#
a . add ( ( 'f' , 'g' ) ) #NEWLINE#
super ( ) . close ( ) #NEWLINE#
[ '1' , '1' , '1' , '1' , '0' ] #NEWLINE#
slice ( None , None , None ) , slice ( None , 2 , None ) , slice ( None , None , None ) , slice ( #NEWLINE# None , 540 , None ) #NEWLINE#
compressor . close ( ) #NEWLINE#
axes . spines [ 'left' ] . set_position ( ( 'axes' , - 0.05 ) ) #NEWLINE#
n = a . shape [ 0 ] #NEWLINE#
[ ( k1 [ 0 ] , k1 [ 1 ] , k2 ) for k1 , k2 in zip ( chain . from_iterable ( dge ) , nde ) ] #NEWLINE#
cv . Rectangle ( color_image , pt1 , pt2 , cv . CV_RGB ( 255 , 0 , 0 ) , 1 ) #NEWLINE#
ski . view_as_blocks ( a , ( 2 , 2 ) ) . mean ( axis = ( 2 , 3 ) ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
max ( zip ( ( x . count ( item ) for item in set ( x ) ) , set ( x ) ) ) #NEWLINE#
return list ( range ( int ( toks [ 0 ] ) , int ( toks [ 1 ] ) + 1 ) ) #NEWLINE#
x , y , z = sp . symbols ( 'x#SPACE#y#SPACE#z' ) #NEWLINE#
f . close ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
print ( parser . parse_args ( ) ) #NEWLINE#
"""project#SPACE#directory:#SPACE#""" #NEWLINE#
np . random . seed ( 1234 ) #NEWLINE#
is_valid_code ( 'if#SPACE#x#SPACE#==' ) #NEWLINE#
"""{dt.year}/{dt.month}/{dt.day}""" . format ( dt = datetime . datetime . now ( ) ) #NEWLINE#
element2 = driver . find_element_by_xpath ( "//div[@title='div2']" ) #NEWLINE# element2 . find_element_by_xpath ( ".//p[@class='test']" ) . text #NEWLINE#
"""https://www.cnn.com/1.js!!#SPACE#http://www.cnn.com/2.php;#SPACE#//some.site.com/3.js,""" #NEWLINE#
headers = { 'projectName' : 'zhikovapp' , 'Authorization' : 'Bearer#SPACE#HZCdsf=' } #NEWLINE#
print ( name , value ) #NEWLINE#
self . foo ( ) #NEWLINE#
<STR0> . pop ( 'b' ) #NEWLINE#
datetime . now ( ) #NEWLINE# datetime ( 1970 , 1 , 1 ) #NEWLINE#
pylab . draw ( ) #NEWLINE#
from xml . dom . minidom import parse #NEWLINE#
print ( fn . __name__ , np . sum ( fn ( img1 , img2 ) . astype ( 'int64' ) ) , end = '#SPACE#' ) #NEWLINE#
'раз' == 'раз' #NEWLINE#
transport . connect ( hostkey = None , username = user , password = password , pkey = None ) #NEWLINE#
self . _worker_handler . start ( ) #NEWLINE#
all ( any ( f ( v ) for f in functions ) for v in values ) #NEWLINE#
shortword . sub ( '' , anytext ) #NEWLINE#
open ( 'spam.txt' ) #NEWLINE#
vbox . add ( label ) #NEWLINE#
lambda a , b : ( a + 1 , b * 1 ) #NEWLINE#
return demangled [ : - 1 ] #NEWLINE#
model . train_on_batch ( state_action_vector , target ) #NEWLINE#
ax1 . set_xlim ( 0 , 60 ) #NEWLINE#
pd . Timedelta ( days = 5 ) / pd . Timedelta ( '1S' ) / 2 #NEWLINE#
clr . AddReference ( 'Microsoft.PowerBI.AdomdClient' ) #NEWLINE#
self . assertEqual ( a , b ) #NEWLINE#
[ [ 'Ip' , 'Sites' ] , [ '127.0.0.1' , '10' ] , [ '127.0.0.2' , '23' ] , [ '127.0.0.3' , '50' ] #NEWLINE# ] #NEWLINE#
[ '1' , '2' ] #NEWLINE#
print ( model . stats ( ) [ 'mean' ] [ 'mean' ] ) #NEWLINE#
print ( '%3d#SPACE#->#SPACE#(%.3f,#SPACE#%.3f,#SPACE#%.3f)' % ( ( val , ) + pseudocolor ( val , 0 , 100 ) ) ) #NEWLINE#
target_file = open ( 'file.txt' , 'w' ) #NEWLINE#
numpy . finfo ( numpy . longdouble ) #NEWLINE#
screen = pygame . display . set_mode ( ( 500 , 500 ) ) #NEWLINE#
int ( round ( 5678 , - 1 ) ) #NEWLINE#
print ( df . eq ( df . iloc [ 0 ] ) ) #NEWLINE#
[ 1 , 'something' ] < [ 2 , 'something' ] #NEWLINE#
url = 'http://bar.com' #NEWLINE#
print ( 'my_test#SPACE#=#SPACE#%r' % ( my_test , ) ) #NEWLINE#
fig . savefig ( 'withFigText.png' ) #NEWLINE#
return a [ c ] #NEWLINE#
return sorted ( set ( range ( start , end + 1 ) ) . difference ( L ) ) #NEWLINE#
print ( combinedRDD . collect ( ) ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
self . _breakpoints = breakpoints #NEWLINE#
data += proc . stdout . read ( ) #NEWLINE#
print ( 'Changing#SPACE#[0]' ) #NEWLINE#
server . start ( ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
surfc = ax . plot_trisurf ( Xc , Yc , Zc , cmap = cm . jet , linewidth = 0.2 ) #NEWLINE#
driver . quit ( ) #NEWLINE#
html = urlopen ( url ) . read ( ) #NEWLINE#
words = [ '' . join ( random . sample ( word , len ( word ) ) ) for word in words ] #NEWLINE#
smtp . sendmail ( send_from , send_to , msg . as_string ( ) ) #NEWLINE# smtp . close ( ) #NEWLINE#
keys . insert ( i , k ) #NEWLINE#
np . floor ( series ) #NEWLINE#
answer = [ [ int ( i ) for i in line . strip ( ) . split ( ',' ) ] for line in infile ] #NEWLINE#
gray_image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
return [ [ l [ x ] for l in lists ] for x in range ( len ( lists [ 0 ] ) ) ] #NEWLINE#
regex = compile ( '(%s)' % '|' . join ( map ( escape , list ( dict . keys ( ) ) ) ) ) #NEWLINE#
ax . set_title ( 'Azim,#SPACE#elev#SPACE#=#SPACE#{}°,#SPACE#{}°' . format ( * azel ) ) #NEWLINE#
mainloop ( ) #NEWLINE#
from file1 import * #NEWLINE#
tst . main ( globals ( ) ) #NEWLINE#
os . system ( 'which#SPACE#gcc' ) #NEWLINE#
a = [ 'AGT' , 'AGT' , 'ACG' ] #NEWLINE#
contains_digits ( 'sh#SPACE#asdjlh' ) #NEWLINE#
frozenset ( [ '136' ] ) <= frozenset ( [ '136' , '139' , '24' ] ) #NEWLINE#
{ k : [ da . get ( k , [ ] ) , db . get ( k , [ ] ) ] for k in set ( listanum + listbnum ) } #NEWLINE#
widget . connect ( 'button-release-event' , button_release_event ) #NEWLINE#
s . setsockopt ( socket . SOL_TCP , socket . TCP_KEEPCNT , 5 ) #NEWLINE#
print ( re . findall ( pattern , line ) ) #NEWLINE#
pbar . finish ( ) #NEWLINE#
print ( 'As#SPACE#a#SPACE#function#SPACE#pointer' ) #NEWLINE#
return image . swapaxes ( 0 , 1 ) , out #NEWLINE#
print ( nums . mean ( axis = 1 ) ) #NEWLINE#
return get_value ( d [ l [ 0 ] ] , l [ 1 : ] ) #NEWLINE#
y = np . random . rand ( m , n ) #NEWLINE#
out . close ( ) #NEWLINE#
print ( 'Hello!' ) #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
MyModel = apps . get_model ( 'app_label' , 'MyModel' ) #NEWLINE#
print ( new_pressures ) #NEWLINE#
print ( f ( ) ) #NEWLINE#
nosetests - v #NEWLINE#
remove_even ( [ 4 , 5 , 4 , 7 , 9 , 11 ] ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
cursor . execute ( stmt , { 'user' : 'bob' } ) #NEWLINE#
df = df . drop ( 'negative_action' , 1 ) #NEWLINE#
df = df . drop ( 'volume_x' , 1 ) #NEWLINE#
df = df . drop ( 'volume_y' , 1 ) #NEWLINE#
Label . __init__ ( self , master , image = self . frames [ 0 ] ) #NEWLINE#
return midpoint_bytes . decode ( 'utf-8' ) #NEWLINE#
pass #NEWLINE#
d [ a ] . append ( b ) #NEWLINE#
s = 'Todayâ\x80\x99s#SPACE#date#SPACE#is#SPACE#09/01/2014' #NEWLINE# sum ( int ( x ) for x in s if x . isdigit ( ) ) #NEWLINE#
sqlite3 . sqlite_version_info #NEWLINE#
proc = subprocess . Popen ( [ 'ps' , '-eo' , 'pid,etime' ] , stdout = subprocess . PIPE ) #NEWLINE#
x [ 0 : : 2 ] #NEWLINE#
textA = 'stackoverflow#SPACE#is#SPACE#cool' #NEWLINE# textb = 'so#SPACE#is#SPACE#very#SPACE#cool' #NEWLINE#
self . n += 1 #NEWLINE#
commonprefix ( 'interspecies#SPACE#interstelar#SPACE#interstate' . split ( ) ) #NEWLINE#
wr . writerows ( [ k ] + v for k , v in list ( od . items ( ) ) ) #NEWLINE#
window . show_all ( ) #NEWLINE#
df . mean ( ) #NEWLINE#
super ( ChoiceType , self ) . __init__ ( ** kw ) #NEWLINE#
final_list = sorted ( pos_list ) + sorted ( neg_list ) #NEWLINE#
pickle . dump ( saved_data , outfile , protocol = pickle . HIGHEST_PROTOCOL ) #NEWLINE#
my_dict = { 'a' : 500 , 'abc' : 100 , 'foobar' : 1 } #NEWLINE#
return datetime . datetime ( * dtuple [ : 6 ] ) #NEWLINE#
list_1 = [ item for item in list_1 if item [ 2 ] >= 5 or item [ 3 ] >= 0.3 ] #NEWLINE#
for i in range ( 101 ) : #NEWLINE# #INDENT# rgb = colorsys . hsv_to_rgb ( i / 300.0 , 1.0 , 1.0 ) #NEWLINE#
groups [ key ] [ 'blog' ] = key #NEWLINE#
s . compute ( ) #NEWLINE#
return self . user #NEWLINE#
list_1 = [ i for n , i in enumerate ( list_1 ) if n not in index_list ] #NEWLINE#
win32api . MessageBox ( 0 , 'ok#SPACE#cancel?' , 'title' , 1 ) #NEWLINE#
print ( 'on#SPACE#the#SPACE#same#SPACE#line' ) #NEWLINE#
wb = open_workbook ( 'Book2.xls' ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE#
your_csv_file . close ( ) #NEWLINE#
ax . set_zlim ( [ - 1 , 1 ] ) #NEWLINE#
my_list = np . array ( [ [ 1 , 2 , 3 , 4 ] , [ 2 , 4 , 5 , 6 ] ] ) #NEWLINE#
book = xlwt . Workbook ( ) #NEWLINE#
df . groupby ( np . arange ( len ( df ) ) // 2 ) . mean ( ) #NEWLINE#
ax . add_line ( line ) #NEWLINE#
var_1 = type ( var_2 ) ( ) #NEWLINE#
str = str . lstrip ( ':' ) #NEWLINE#
return data . sum ( ) #NEWLINE#
Gh . add_edge ( 'Bike' , 'Apple' , weight = 0.9 ) #NEWLINE#
d [ key ] = value #NEWLINE#
MySQLdb . escape_string ( MySQLdb . escape_string ( "That's#SPACE#all#SPACE#folks" ) ) #NEWLINE#
a = [ 1 , 2 , 3 , 1 , 1 , 3 , 4 , 3 , 2 ] #NEWLINE# index_sets = [ np . argwhere ( i == a ) for i in np . unique ( a ) ] #NEWLINE#
button . pack ( ) #NEWLINE#
[ '*random#SPACE#words*' , '*random#SPACE#words*' ] #NEWLINE# [ '*random#SPACE#words*' , '*random#SPACE#words*' ] #NEWLINE#
p = Pool ( 5 ) #NEWLINE#
field4price = '' #NEWLINE#
testdataframe1 . plot ( style = styles1 , ax = ax ) #NEWLINE#
return list ( set ( a ) - set ( b ) ) [ : 100 ] #NEWLINE#
sys . exit ( 'bye#SPACE#Bye' ) #NEWLINE#
keys = [ 'key1' , 'key2' , 'key3' ] #NEWLINE#
plt . figure ( ) #NEWLINE#
print ( 'odd' ) #NEWLINE#
print ( 'negative' ) #NEWLINE#
density = scipy . stats . gaussian_kde ( scatterpoints ) #NEWLINE#
ax . set_ylim ( - 0.5 , 4.5 ) #NEWLINE#
max ( len ( str ( x ) ) for x in [ 0 , 33 , 4444522 ] ) #NEWLINE#
b [ : , ( [ True , True , True , False , False ] ) ] #NEWLINE#
return pd . concat ( [ df [ col ] . apply ( pd . Series ) for col in cols ] , axis = 1 , keys = cols ) #NEWLINE#
print ( np . percentile ( a , 95 ) ) #NEWLINE#
cleantext = re . sub ( cleanr , '' , raw_html ) #NEWLINE#
super ( Person , self ) . __init__ ( familyName ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
my_dict = dict . fromkeys ( [ 'a' , 'b' , 'c' ] , 10 ) #NEWLINE# my_dict . update ( dict . fromkeys ( [ 'b' , 'e' ] , 20 ) ) #NEWLINE#
print ( ctypes . CDLL ( 'library.so' ) . square ( 4 ) ) #NEWLINE#
return '[' + ',#SPACE#' . join ( str ( x ) for x in list_or_iterator ) + ']' #NEWLINE#
list_2 = [ i for n , i in enumerate ( list_2 ) if n not in index_list ] #NEWLINE#
events . append ( [ ] ) #NEWLINE#
e . findall ( data ) #NEWLINE#
add_patch ( axes [ 0 ] , alpha = 0.2 , rasterized = False ) #NEWLINE#
zk . start ( ) #NEWLINE#
ax . add_patch ( polygon ) #NEWLINE#
raise Exception ( "Function#SPACE#{}#SPACE#hasn't#SPACE#been#SPACE#found" . format ( function ) ) #NEWLINE#
df = pd . read_csv ( StringIO ( text ) , parse_dates = [ 0 ] ) #NEWLINE#
some_object = class_lookup [ 'class_name' ] ( ) #NEWLINE#
app . config [ 'SQLALCHEMY_DATABASE_URI' ] = 'sqlite:///path/database.db' #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
results . append ( pool . apply_async ( foo , args = ( words [ i ] , numbers [ i ] ) ) ) #NEWLINE#
plt . xlabel ( 'Real' ) #NEWLINE#
return list ( range ( item . start or 0 , item . stop or len ( self ) , item . step or 1 ) ) #NEWLINE#
x [ 1 ] [ 3 ] [ 0 ] = 'test' #NEWLINE#
window . show ( ) #NEWLINE#
np . all ( x == [ 0 , 1 ] , axis = 1 ) #NEWLINE#
string . ascii_letters [ : random . randint ( 1 , 50 ) ] . title ( ) #NEWLINE#
print ( os . path . commonprefix ( [ '/usr/var/log' , '/usr/var/security' ] ) ) #NEWLINE#
{ 'count' : '848' , 'year' : '1592' } , { 'count' : '841' , 'year' : '1590' } #NEWLINE#
{ { instance . key ( ) . name ( ) } } #NEWLINE#
app . mainloop ( ) #NEWLINE#
time . sleep ( 0.25 ) #NEWLINE#
g . set ( ylim = ( 0 , None ) ) #NEWLINE#
Base . metadata . create_all ( ) #NEWLINE#
processed_images = tf . map_fn ( process_fn , images ) #NEWLINE#
sorted ( results ) #NEWLINE#
parent_id = Column ( Integer , ForeignKey ( 'tag.id' ) ) #NEWLINE#
df = df . unstack ( ) #NEWLINE#
sorted ( [ 2 , - 1 , 3 ] , None , lambda x : x ** 2 , True ) #NEWLINE#
is_private = 'is_private' in request . POST #NEWLINE#
print ( t [ 'a' ] [ 'b' ] [ 'c' ] ) #NEWLINE#
Tkinter . Label ( root , image = imgtk ) . pack ( ) #NEWLINE#
self . show ( ) #NEWLINE#
Person . create ( name = 'Bob4' , birthday = dt . date ( 1980 , 3 , 13 ) ) #NEWLINE#
Person . create ( name = 'Bob5' , birthday = dt . date ( 1990 , 3 , 13 ) ) #NEWLINE#
DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'OPTIONS' : { #NEWLINE# 'read_default_file' : '/path/to/my.cnf' } } } #NEWLINE#
if file_out [ - 1 ] [ - 1 ] == '\n' : #NEWLINE# #INDENT# file_out [ - 1 ] = file_out [ - 1 ] [ : - 1 ] #NEWLINE#
print ( literal_eval ( "'%s'" % s ) ) #NEWLINE#
data = np . random . normal ( - 3 , 1 , size = 1000 ) #NEWLINE#
arr = np . array ( [ [ 4 , 3 , 5 , 1 ] , [ 2 , 6 , 5 , 1 ] , [ 8 , 3 , 2 , 4 ] ] ) #NEWLINE#
return '\n' . join ( x . strip ( ) for x in _extract_text ( t ) . split ( '\n' ) ) #NEWLINE#
res . extend ( [ entry [ 1 : ] , entry [ : 1 ] ] ) #NEWLINE#
[ 'a' , 'b' , 'a' , 'b' , 'b' , 'b' , 'b' , 'b' , 'a' ] #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE# sys . stderr = sys . __stderr__ #NEWLINE#
f = open ( 'a.p' , 'rb' ) #NEWLINE#
np . array ( a ) - np . array ( b ) #NEWLINE#
user . save ( ) #NEWLINE#
np . isnan ( np . nan ) #NEWLINE#
plot_selected . yaxis . set_ticks ( np . arange ( 0 , 1.1 , 0.2 ) ) #NEWLINE#
self . wb . save ( self . dest ) #NEWLINE#
proc . join ( ) #NEWLINE#
sorted_dist_idcs = dist . argsort ( kind = 'mergesort' , axis = None ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
L = [ ( 2 , 3 ) , ( 2 , 3 ) , ( 4 , 8 ) ] #NEWLINE#
fig . subplots_adjust ( right = 0.75 ) #NEWLINE#
print ( dict ( token . split ( '=' ) for token in shlex . split ( s ) ) ) #NEWLINE#
templates_dir = os . path . join ( os . path . dirname ( mypackage . __file__ ) , 'templates' ) #NEWLINE#
set ( perms ) #NEWLINE#
int ( round ( 5678 , - 2 ) ) #NEWLINE#
list ( 'abc' ) #NEWLINE#
x = numpy . random . uniform ( 1.5 ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 5 , 10 , 20 , 25 ] ) #NEWLINE# b = np . array ( [ 1 , 5 , 20 , 25 ] ) #NEWLINE# a . searchsorted ( b ) #NEWLINE#
pylab . plot ( x , y1 , '-b' , label = 'sine' ) #NEWLINE#
print ( 'LT' , self . __class__ , other . __class__ ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_UP , self . OnClick ) #NEWLINE#
orig_stdout = sys . stdout #NEWLINE#
points = np . random . randint ( 0 , 5 , ( N , 2 ) ) #NEWLINE#
np . float64 ( 1 ) . itemsize * np . prod ( [ 3 , 5 , 2 ] ) #NEWLINE#
collection = db [ 'chain' ] #NEWLINE#
parser . add_section ( 'test' ) #NEWLINE#
im . save ( d , 'JPEG' , icc_profile = icc_profile ) #NEWLINE#
s . index ( '"' ) #NEWLINE#
return self . thisptr . calculate ( ) #NEWLINE#
ax . set_xlim ( [ - 400 , - 380 ] ) #NEWLINE#
self . spinbox . valueChanged . connect ( self . worker . update_value ) #NEWLINE#
d = dict ( ( an_object . name , an_object ) for an_object in object_list ) #NEWLINE#
url = 'http://www.python.org' #NEWLINE#
autosummary_gerenerate = True #NEWLINE#
'0' * ( 7 - len ( bin ( i ) [ 2 : ] ) ) + bin ( i ) [ 2 : ] #NEWLINE#
mypad = curses . newpad ( 40 , 60 ) #NEWLINE#
filename = sys . argv [ 1 ] #NEWLINE#
msgBox . setText ( 'What#SPACE#to#SPACE#do?' ) #NEWLINE#
f . close ( ) #NEWLINE#
[ ( 1 if any ( full . endswith ( last ) for last in B ) else 0 ) for full in A ] #NEWLINE#
i = importlib . import_module ( 'matplotlib.text' ) #NEWLINE#
m . remove ( 'k' ) #NEWLINE#
np . allclose ( [ np . where ( a <= x ) [ 0 ] [ 0 ] for x in b ] , np . digitize ( b , a ) ) #NEWLINE#
ax . set_xlim ( 0 , 1 ) #NEWLINE#
n = n % len ( strg ) #NEWLINE#
out = np . where ( mask , np . nan , a ) #NEWLINE#
ax = fig . add_subplot ( 111 , aspect = 'equal' ) #NEWLINE#
web . show ( ) #NEWLINE# sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( i , chr ( i ) ) #NEWLINE#
session . commit ( ) #NEWLINE#
open ( 'function-%s-end' % f . __name__ , 'r' ) #NEWLINE#
setattr ( response , 'peer' , sock . getpeername ( ) ) #NEWLINE#
gzip_obj . read ( ) #NEWLINE#
env . hosts = [ 'frodo@middleearth.com' ] #NEWLINE#
conn . request ( 'POST' , 'ppod-web' , params , headers ) #NEWLINE#
output = open ( 'data.pkl' , 'wb' ) #NEWLINE#
result = timedelta1 + timedelta2 #NEWLINE#
first_name = models . CharField ( max_length = 50 ) #NEWLINE#
print ( 'size:#SPACE#{}' . format ( sys . getsizeof ( x ) ) ) #NEWLINE#
x [ index ] #NEWLINE#
widget . pack ( anchor = 'w' , padx = 10 ) #NEWLINE#
y = pd . DataFrame ( np . random . random ( ( 36 , 36 ) ) ) #NEWLINE#
sys . exit ( ) #NEWLINE#
mask = ( indices < start [ : , ( None ) ] ) | ( indices >= end [ : , ( None ) ] ) #NEWLINE#
QGraphicsTextItem . mouseMoveEvent ( self , event ) #NEWLINE#
user . groups . add ( group ) #NEWLINE#
i . getpixel ( ( 2 , 2 ) ) #NEWLINE#
'/users/john/foo.txt' , 'foo/bar/baz/loop' , 'foo/bar/baz/' #NEWLINE#
self . searchqueryset . exclude ( group = Raw ( '[*#SPACE#TO#SPACE#*]' ) ) #NEWLINE#
fd . write ( '%d.#SPACE#%s\n' % ( i + 1 , names [ i ] ) ) #NEWLINE#
res = min ( l , key = lambda d : d . get ( 'id' , float ( 'inf' ) ) ) [ 'id' ] #NEWLINE#
t . start ( ) #NEWLINE#
return x ** 2 + y ** 2 + z ** 2 < radius ** 2 #NEWLINE#
yield heapq . heappop ( heap ) [ 1 : ] #NEWLINE#
R_mean1 . append ( R ) #NEWLINE#
df = DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 1 , 4 , 7 ] } ) #NEWLINE#
s = s . lower ( ) #NEWLINE#
pylab . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
df = DataFrame ( np . random . randn ( 5 , 2 ) , columns = list ( 'AB' ) ) #NEWLINE#
r = csv . reader ( open ( '/tmp/test.csv' ) ) #NEWLINE# lines = [ l for l in r ] #NEWLINE#
output = np . array ( [ 1 , 1 , 5 ] ) #NEWLINE#
output . writeframes ( data [ 1 ] [ 1 ] ) #NEWLINE#
sys . getsizeof ( foo3 ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
crypt . put_CryptAlgorithm ( 'des' ) #NEWLINE#
ax = plt . subplot ( gs [ : , : ] ) #NEWLINE#
[ ( 'a' , 1 ) , ( 'b' , 1 ) , ( 'c' , 2 ) ] #NEWLINE#
class UserProfile ( models . Model ) : #NEWLINE# #INDENT# user = models . ForeignKey ( User , unique = True ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# middle_name = models . CharField ( max_length = 30 , null = True , blank = True ) #NEWLINE#
yield Request ( link , callback = lambda r , i = i : self . parse2 ( r , i ) ) #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
qt . QWidget . __init__ ( self , parent = None ) #NEWLINE#
ax . tick_params ( labelsize = 8 ) #NEWLINE#
print ( x ) #NEWLINE#
object . __getattribute__ ( self , name ) #NEWLINE#
wx . version ( ) #NEWLINE#
self . text . config ( font = ( 'courier' , 12 , 'normal' ) ) #NEWLINE#
any ( i ( ) < 3 for i in f ) #NEWLINE#
c = f . read ( 1 ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( color ) #NEWLINE#
print ( fig . axes [ 0 ] ) #NEWLINE#
x = multiprocessing . Process ( target = smile_detection , args = ( 'Thread1' , count ) ) #NEWLINE#
r = urllib . request . urlopen ( 'https://paypal.com/' ) #NEWLINE# print ( r . read ( ) ) #NEWLINE#
print ( soup . find ( 'h2' , text = pattern ) == soup . find ( 'h2' ) . text ) #NEWLINE#
test . py #NEWLINE#
self . __dict__ . update ( d ) #NEWLINE#
self . q . join ( ) #NEWLINE#
print ( foo [ 1 : 5 , ( 1 ) , ( 2 ) ] ) #NEWLINE#
display ( HTML ( '<h1>Hello,#SPACE#world!</h1>' ) ) #NEWLINE#
A = np . cov ( np . random . randn ( 3 , 100 ) ) #NEWLINE#
[ person ( 'Cheryl' , 20 ) , person ( 'Kimbala' , 25 ) ] #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 5 , 10 , 20 , 25 ] ) #NEWLINE#
return self . wsgi_app ( environ , start_response ) #NEWLINE#
client . connect ( hostname , username = 'testuser' ) #NEWLINE#
sub_cmd . cmdloop ( ) #NEWLINE#
test ( ) #NEWLINE#
df [ idx ] #NEWLINE#
nosetests - - all - modules #NEWLINE#
res = dict ( [ ( t , nt ( * t ) ) for t in pairs ] ) #NEWLINE#
data . sort ( key = get_score , reverse = True ) #NEWLINE#
s = 'Gagaâ\x80\x99s' #NEWLINE# s . encode ( 'latin-1' ) . decode ( 'utf8' ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
crsr . execute ( "INSERT#SPACE#INTO#SPACE#pytest#SPACE#(firstname)#SPACE#VALUES#SPACE#('Gord')" ) #NEWLINE#
crsr . execute ( "INSERT#SPACE#INTO#SPACE#pytest#SPACE#(firstname)#SPACE#VALUES#SPACE#('Anne')" ) #NEWLINE#
crsr . execute ( 'SELECT#SPACE#firstname#SPACE#FROM#SPACE#pytest' ) #NEWLINE#
df [ df . b . isnull ( ) ] #NEWLINE#
convolve2d ( a , np . ones ( ( 3 , 3 ) , dtype = int ) , 'same' ) - a #NEWLINE#
return [ int ( line ) for line in f ] #NEWLINE#
d = { 'VENEZUELA' : 'CARACAS' , 'CANADA' : 'OTTAWA' } #NEWLINE#
next ( i for i , x in enumerate ( a ) if 3 in x ) #NEWLINE#
return datetime . datetime . strptime ( MmmYyyy , '%b-%Y' ) . date ( ) #NEWLINE#
note . show ( ) #NEWLINE#
s = '543tf' #NEWLINE# sum ( int ( x ) for x in s if x . isdigit ( ) ) #NEWLINE#
im2 . set_xdata ( np . arange ( n ) ) #NEWLINE#
return dynamic ( name , bases , attrs ) #NEWLINE#
return bool ( re . search ( 'xen' , platform . platform ( ) ) ) #NEWLINE#
Value2 = Baz #NEWLINE#
return render_template ( 'companies.html' , companies = companies ) #NEWLINE#
query = query . filter ( and_ ( * filter_group ) ) #NEWLINE#
self . response . write ( '#SPACE#->#SPACE#%s#SPACE#%s\n' % ( e . __class__ . __name__ , e . message ) ) #NEWLINE#
savefig ( 'test.png' ) #NEWLINE#
fulldict = { i : i for i in range ( 1000 ) } #NEWLINE#
ax . plot ( 'You#SPACE#plot#SPACE#argument' ) #NEWLINE#
[ '0' , 'B' , '10' , '20' , '21' , '29' , '2D' , '2A6' , '8C5AD' ] #NEWLINE#
indices [ field ] [ key ] . add ( i ) #NEWLINE#
plt . show ( ) #NEWLINE#
new . setdefault ( i , [ ] ) . extend ( j ) #NEWLINE#
rows = table . xpath ( 'table:table-row' , namespaces = nsmap ) #NEWLINE#
my_array = [ '1' , '2' , '3' , '4' ] #NEWLINE#
print ( list ( [ x for x in words if len ( x ) > average ] ) ) #NEWLINE#
self . data = self . data . map ( model . transformation_function ( self ) ) #NEWLINE#
ax . axis ( 'equal' ) #NEWLINE#
self . write ( data ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE#' . join ( map ( str , list ( range ( 1 , N + 1 ) ) ) ) ) #NEWLINE#
print ( var , sys . getsizeof ( obj ) ) #NEWLINE#
pass #NEWLINE#
outeropt = outer_result . get ( ) #NEWLINE#
time . sleep ( 1.0 - elapsed ) #NEWLINE#
self . mainframe . rowconfigure ( 1 , weight = 1 ) #NEWLINE#
li = [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] #NEWLINE#
browser . open ( 'https://www.example.com/' ) #NEWLINE#
all_pairs += [ ( ( nA , 0 ) , ( nB , 1 ) ) for nA , nB in itertools . product ( listA , listB ) ] #NEWLINE#
df . columns = ts_clip . iloc [ : len ( df . columns ) ] . index . time #NEWLINE#
int ( 'ah' , 16 ) #NEWLINE#
return value #NEWLINE#
cursor . execute ( "SELECT#SPACE#name#SPACE#FROM#SPACE#sqlite_master#SPACE#WHERE#SPACE#type='table'" ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 3 , 4 ] ] #NEWLINE#
float ( 'inf' ) #NEWLINE#
return item , value #NEWLINE#
csv_w . writerow ( map ( lambda x : i_r . get ( x , '' ) , columns ) ) #NEWLINE#
plt . plot ( x , n , marker = next ( marker ) , linestyle = '' ) #NEWLINE#
t = threading . Thread ( target = run ) #NEWLINE#
text . pack ( expand = 1 , fill = BOTH ) #NEWLINE#
print ( settings . BASE_DIR ) #NEWLINE#
subprocess . check_call ( cmd ) #NEWLINE#
layout . itemAt ( i ) . widget ( ) . deleteLater ( ) #NEWLINE#
areas . apply ( foo ) #NEWLINE#
subprocess . call ( [ 'espeak' , '-w' + file_name + '.wav' , text ] ) #NEWLINE#
os . chdir ( os . environ [ 'PROGRAMFILES' ] + '\\mediainfo' ) #NEWLINE#
links = soup . find_all ( 'a' , href = '/customer-menu/1/accounts/1/update' ) #NEWLINE#
ax2 . patch . set_facecolor ( 'gray' ) #NEWLINE#
colon1 = colon1 . encode ( 'utf8' ) #NEWLINE#
print ( obj3 ) #NEWLINE#
sum ( l ) + 0.529964086141668 #NEWLINE#
averaged = { k : ( sum ( d [ k ] for d in folds ) / len ( folds ) ) for k in folds [ 0 ] } #NEWLINE#
ax . plot ( theta , r , color = 'black' , ls = '-' , linewidth = 1 ) #NEWLINE#
np . seterr ( invalid = 'ignore' ) #NEWLINE#
df2 . drop ( '-' ) #NEWLINE#
scipy . misc . factorial ( temp ) #NEWLINE#
a . set_title ( 'All#SPACE#regions' ) #NEWLINE#
with h5py . File ( '/tmp/test.h5' , 'r' ) as f : #NEWLINE# #INDENT# pass #NEWLINE#
print ( int ( tt . strftime ( '%s' ) ) ) #NEWLINE#
plt . bar ( indexes , values , width ) #NEWLINE#
struct . pack ( '>d' , try_signaling_nan ) . encode ( 'hex_codec' ) #NEWLINE#
print ( json . loads ( s ) [ '2' ] ) #NEWLINE#
map ( lambda x : setitem ( x , 1 , - 2 ) , lol ) #NEWLINE#
print ( data [ 'ip' ] ) #NEWLINE#
cpu_intensive_function ( some , args ) #NEWLINE#
list1 = [ '1' , '100A' , '342B' , '2C' , '132' , '36' , '302F' ] #NEWLINE# list1 . sort ( key = natural_sort_key ) #NEWLINE# list1 #NEWLINE#
subp = subprocess . Popen ( [ 'progname' ] ) #NEWLINE#
f_out . write ( '\n' ) #NEWLINE#
import lxml . etree #NEWLINE#
a = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
lambda a , b : ( a + 1 , b * 1 ) #NEWLINE#
print ( 'delete#SPACE#key' , key , 'response' , r . status_code ) #NEWLINE#
df = df . drop ( [ 'x' , 'y' ] , axis = 1 ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
"""value_column1""" #NEWLINE#
test_var = model . the_field #NEWLINE#
b = wx . BitmapButton ( pane , - 1 , wx . Bitmap ( 'buttons/my_beautiful_button.png' ) ) #NEWLINE#
w . GetWindowText ( w . GetForegroundWindow ( ) ) #NEWLINE#
raise ValueError ( '"%s"#SPACE#is#SPACE#longer#SPACE#than#SPACE#32#SPACE#characters' ) #NEWLINE#
sys . exit ( - 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#

print ( ',' . join ( str ( a - b ) for a , b in pairs ( iter ( data ) ) ) ) #NEWLINE#
result = [ 'abc' , 'bac' , 'bca' , 'acb' , 'cab' , 'cba' ] #NEWLINE#
a [ '0' ] . size #NEWLINE#
from vardata import * #NEWLINE#
chromosome = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
0.0054 is 0.0054 #NEWLINE#
self . output ( 0.1 , Op . setlinewidth ) #NEWLINE#
return { 'hello' : 'world' } #NEWLINE#
self . _mainFrame . addToJavaScriptWindowObject ( 'api' , self . _webapi ) #NEWLINE#
pd . get_dummies ( df . Knownvalue // 10 ) #NEWLINE#
func ( ) #NEWLINE#
return dd . min ( axis = 1 ) #NEWLINE#
logging . getLogger ( '' ) . addHandler ( console ) #NEWLINE#
foo . sort ( ) #NEWLINE#
workbook = xlrd . open_workbook ( 'book.xls' ) #NEWLINE#
print ( s . getsockname ( ) [ 0 ] ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
dict ( { 'one' : 1 , 'two' : 2 } ) #NEWLINE#
plt . axvline ( median , color = 'g' , linestyle = '--' ) #NEWLINE#
select . select_by_visible_text ( 'Banana' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
im = A2 . shape [ 1 ] - 1 - np . argmax ( A2 [ : , : : - 1 ] < 0 , axis = 1 ) #NEWLINE#
df [ 'StateInitial' ] = df [ 'state' ] . str [ : 2 ] #NEWLINE#
resp . raise_for_status ( ) #NEWLINE#
df = pd . DataFrame ( a , columns = [ 'one' , 'two' , 'three' ] ) #NEWLINE#
im = Image . new ( 'RGB' , ( 200 , 200 ) ) #NEWLINE#
df . groupby ( 'id' , as_index = False ) . agg ( lambda x : x . tolist ( ) ) #NEWLINE#
preincrement ( i ) #NEWLINE#
p . add_argument ( '--foo' ) #NEWLINE#
type ( s . decode ( 'utf-8' ) ) #NEWLINE#
self . setLayout ( self . layout ) #NEWLINE#
"""Overlapped#SPACE#I/O#SPACE#named#SPACE#pipe#SPACE#class""" #NEWLINE#
cur . execute ( "INSERT#SPACE#INTO#SPACE#DATEN#SPACE#VALUES('X33',#SPACE#'X20',#SPACE#0.014)" ) #NEWLINE#
cur . execute ( "INSERT#SPACE#INTO#SPACE#DATEN#SPACE#VALUES('X32',#SPACE#'X20',#SPACE#0.024)" ) #NEWLINE#
cur . execute ( "INSERT#SPACE#INTO#SPACE#DATEN#SPACE#VALUES('X23',#SPACE#'X20',#SPACE#0.167)" ) #NEWLINE#
cur . execute ( "INSERT#SPACE#INTO#SPACE#DATEN#SPACE#VALUES('X23',#SPACE#'X32',#SPACE#0.015)" ) #NEWLINE#
cur . execute ( "INSERT#SPACE#INTO#SPACE#DATEN#SPACE#VALUES('X32',#SPACE#'X33',#SPACE#0.003)" ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#Source,#SPACE#Target,#SPACE#Weight#SPACE#FROM#SPACE#DATEN' ) #NEWLINE#
1.0j * numpy . inf * 1 #NEWLINE#
intersection = queryset1 & queryset2 #NEWLINE#
user_input = user_input . strip ( ) . lower ( ) #NEWLINE#
ax0b . get_yaxis ( ) . get_offset_text ( ) . set_size ( 10 ) #NEWLINE#
ax0c . get_yaxis ( ) . get_offset_text ( ) . set_size ( 10 ) #NEWLINE#
df = pd . DataFrame ( data ) #NEWLINE#
timeit . timeit ( 'str(s)' , 's#SPACE#=#SPACE#None' ) #NEWLINE#
timeit . timeit ( 's#SPACE#if#SPACE#type(s)#SPACE#is#SPACE#str#SPACE#else#SPACE#str(s)' , 's#SPACE#=#SPACE#None' ) #NEWLINE#
timeit . timeit ( 'str(s)' , "s#SPACE#=#SPACE#''" ) #NEWLINE#
return potential ( abs ( b [ np . triu_indices_from ( b , 1 ) ] ) ) . sum ( ) #NEWLINE#
return '{{{%s}}}' % self . msg #NEWLINE#
df . loc [ matches , 'column_2' ] = df . loc [ matches , 'column_1' ] #NEWLINE#
print ( '</%s>' % e . tag ) #NEWLINE#
array ( [ 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 1.0 , 5.0 , 2.0 , 6.0 ] ) #NEWLINE#
linesamples . add ( int ( 4 * i + 1 ) ) #NEWLINE#
main ( ) #NEWLINE#
"""Hello#SPACE#Markus""" #NEWLINE#
s . bind ( ( HOST , PORT ) ) #NEWLINE#
link . allow_tags = True #NEWLINE#
return arg1 , arg2 , arg3 , args , kwarg1 , kwarg2 , kwarg3 #NEWLINE#
my_array = my_array . reshape ( nrows , ncols ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
w . close ( ) #NEWLINE#
ax . plot_date ( x , times , 'ro' ) #NEWLINE#
isinstance ( d , dict ) #NEWLINE#
dic [ mygroup ] . append ( entry ) #NEWLINE#
conj = rdflib . ConjunctiveGraph ( ) #NEWLINE#
L = [ '1' , '1' , '1' , '1' , '2' , '2' , '2' ] #NEWLINE# L [ : 4 ] #NEWLINE#
print ( np . dtype ( '|S10' ) . itemsize ) #NEWLINE#
r = s . post ( url , data = data ) #NEWLINE#
a4 . append ( int ( data [ 3 ] ) ) #NEWLINE#
return nat == np . datetime64 ( 'NaT' ) #NEWLINE#
152 , 154 , 156 , 158 , 160 , 162 , 164 , 166 , 168 , 170 , 172 , 174 , 176 #NEWLINE#
HypotheticalBranch ( 0 , 0 , 0 ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
pool = Pool ( ) #NEWLINE#
lines = [ x for x in open ( 'names.txt' , 'r' ) if x [ 0 : - 1 ] != 'tom' ] #NEWLINE# open ( 'names.txt' , 'w' ) . write ( '' . join ( lines ) ) #NEWLINE#
pl . imshow ( im_data , cmap = 'bone' ) #NEWLINE#
omnicloud_app_user #NEWLINE#
my_list = [ 'this\n' , 'is\n' , 'a\n' , 'list\n' , 'of\n' , 'words\n' ] #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
G = nx . Graph ( ) #NEWLINE#
x = np . array ( [ 821 , 576 , 473 , 377 , 326 ] , dtype = 'float' ) #NEWLINE#
print ( etree . tostring ( document_root , encoding = 'unicode' , pretty_print = True ) ) #NEWLINE#
p . stdin . writelines ( iter ( lambda : f . read ( 8192 ) , '' ) ) #NEWLINE#
str ( longest ) . join ( [ '{:^' , '}|{:^' , '}|{:^' , '}' ] ) . format ( col1 , col2 , col3 ) #NEWLINE#
super ( RuleType , self ) . __init__ ( name , bases , attrs ) #NEWLINE#
open ( 'test_newlines.txt' ) . readlines ( ) #NEWLINE#
return [ u for u in self . custom_fields if self . cleaned_data [ str ( u . id ) ] ] #NEWLINE#
row . insert ( 0 , a ) #NEWLINE#
"""Gauß""" . translate ( { ( 223 ) : 'ss' } ) #NEWLINE#
lines = [ ( 'B' , 'C' ) , ( 'D' , 'A' ) , ( 'D' , 'C' ) , ( 'A' , 'B' ) , ( 'D' , 'B' ) ] #NEWLINE#
G . add_node ( 1 ) #NEWLINE#
df . swaplevel ( 0 , 1 ) . ix [ 'c' ] #NEWLINE#
"""Fetch#SPACE#the#SPACE#contents#SPACE#of#SPACE#urls""" #NEWLINE#
[ x for y in l if len ( y ) < 4 for x in y if isinstance ( x , int ) ] #NEWLINE#
seperator = re . compile ( '^--#SPACE#-.*' , re . M ) #NEWLINE#
random . shuffle ( order ) #NEWLINE#
df . withColumn ( 'some_array' , typedLit ( Seq ( 1 , 2 , 3 ) ) ) #NEWLINE#
a [ 'errors' ] . sort ( ) #NEWLINE#
widget . show ( ) #NEWLINE#
obj . __class__ = cls #NEWLINE#
self . send_my_headers ( ) #NEWLINE#
frame . set_linewidth ( 0 ) #NEWLINE#
return 'lalala' #NEWLINE#
dir ( obj ) #NEWLINE#
( - np . array ( avgDists ) ) . argsort ( ) [ : n ] #NEWLINE#
toc2 ( ) #NEWLINE#
sys . stdout = open ( 'c:\\temp\\gimpstdout.txt' , 'w' ) #NEWLINE#
print ( 'The#SPACE#function#SPACE#was#SPACE#executed#SPACE#%s#SPACE#times' % a [ 0 ] ) #NEWLINE#
data_source_format = 'org.apache.spark.sql.execution.datasources.hbase' #NEWLINE#
print ( '%2d#SPACE#%s#SPACE#%s' % ( int ( sys . argv [ 1 ] ) , os . getpid ( ) , i ) ) #NEWLINE#
row . pop ( ) #NEWLINE#
print ( repr ( s ) ) #NEWLINE#
re . match ( '%s$' % ( c , ) , cc ) #NEWLINE#
extra_logger . debug ( 'Now#SPACE#you#SPACE#should#SPACE#be#SPACE#seeing#SPACE#it!' ) #NEWLINE#
print ( df1 . columns . unique ( ) ) #NEWLINE#
a , b , c , d , e , f = flatten ( v ) #NEWLINE#
conn . send ( reply ) #NEWLINE#
i . close ( ) #NEWLINE#
print ( subprocess . check_output ( 'git#SPACE#commit#SPACE#-m#SPACE#"a#SPACE#commit"' , shell = True ) ) #NEWLINE#
ax . fill_between ( theta , r1 , color = 'green' , alpha = 0.5 ) #NEWLINE#
line = file . readline ( ) #NEWLINE#
hasmethod ( bstr , 'decode' ) #NEWLINE#
pp ( list ( map ( list , zip ( * grid ) ) ) ) #NEWLINE#
main ( ) #NEWLINE#
this_row . append ( s . cell_value ( row , col ) ) #NEWLINE#
plt . ylim ( - 20 , 60 ) #NEWLINE#
your_csv_file . close ( ) #NEWLINE#
df [ 'newcol1' ] = ( df [ 'Time' ] . shift ( ) - df [ 'Time' ] ) . abs ( ) > 1 #NEWLINE#
df #NEWLINE#
self . set_positions ( ( xs [ 0 ] , ys [ 0 ] ) , ( xs [ 1 ] , ys [ 1 ] ) ) #NEWLINE#
list ( intersect ( * postings ) ) #NEWLINE#
plt . plot ( [ i , j ] , [ xs [ i ] , xs [ j ] ] , 'o' , color = 'Red' , markersize = 10 ) #NEWLINE#
G . add_node ( 'ROOT' ) #NEWLINE#
x = np . array ( x ) #NEWLINE#
Base . Foo ( self ) #NEWLINE#
db . session . add ( entry ) #NEWLINE#
serializers . serialize ( 'json_no_pk' , [ obj ] , indent = 4 , use_natural_keys = True ) #NEWLINE#
html_use_index = True #NEWLINE#
x = np . array ( [ 0.1 , 0.2 , np . nan , 0.4 , 0.5 ] ) #NEWLINE#
ax1 . plot ( np . array ( [ 1 , 5 ] ) * i , label = i ) #NEWLINE#
ynew = csc_matrix ( ( data , ( rows , cols ) ) , shape = ( N , M ) , dtype = dtype ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
q , r = divmod ( x , y ) #NEWLINE#
s . connect ( ( HOST , PORT ) ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = cols ) #NEWLINE#
a = np . matrix ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
matplotlib . pyplot . close ( f ) #NEWLINE#
po ( 'bug.cmd' ) . wait ( ) #NEWLINE#
sc = SparkContext ( ) #NEWLINE#
print ( match ( [ 'A' , 'B' , '*' , 'D' ] , [ 'A' , 'B' , 'C' , 'C' , 'C' , 'D' ] ) ) #NEWLINE#
filename = os . path . join ( dir , 'relative' , 'path' , 'to' , 'file' , 'you' , 'want' ) #NEWLINE#
allkey = set ( ) . union ( * alldict ) #NEWLINE#
[ int ( c ) for c in s if c . isdigit ( ) ] #NEWLINE#
screen = pygame . display . set_mode ( ( 640 , 480 ) ) #NEWLINE#
df #NEWLINE# df . drop ( df . index [ [ 1 , 3 ] ] ) #NEWLINE#
os . mkfifo ( path ) #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
b = dt . strptime ( '10/15/13' , '%m/%d/%y' ) #NEWLINE#
ax1 . plot ( x , y ) #NEWLINE#
labels = [ '' for item in ax . get_xticklabels ( ) ] #NEWLINE#
"""2:33""" . zfill ( 5 ) #NEWLINE#
app . route ( '/my_url' , methods = [ POST ] ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
d = { x : i for i , x in enumerate ( lis ) } #NEWLINE#
foo . py #NEWLINE#
print ( len ( list1 ) ) #NEWLINE#
puts ( 'Called#SPACE#function#SPACE#2' ) #NEWLINE#
data = np . genfromtxt ( urllib . request . urlopen ( url ) , skip_header = 1 , skip_footer = 4 ) #NEWLINE#
( i * i for i in range ( 5 ) ) #NEWLINE#
asyncio . get_event_loop ( ) . run_until_complete ( start_server ) #NEWLINE#
def __init__ ( self , name ) : #NEWLINE# #INDENT# self . name = name #NEWLINE#
Logger . logr . info ( 'Hello' ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
super ( Room , self ) . save ( * args , ** kwargs ) #NEWLINE#
return [ '' . join ( words ) for words in sixgrams ] #NEWLINE#
kwargs . setdefault ( 'id' , field . id ) #NEWLINE#
x = tab . query ( ) #NEWLINE#
path = os . path . expanduser ( '~' ) #NEWLINE#
y_pred = pipe_lrSVC . predict ( X_test ) #NEWLINE#
plt . title ( 'descending' ) #NEWLINE#
plt . title ( 'fake#SPACE#data' ) #NEWLINE#
plt . title ( 'Three#SPACE#Clusters' ) #NEWLINE#
plt . plot ( x [ i ] , y [ i ] + 100 , 'k+' , markersize = 12 , markeredgewidth = 2 ) #NEWLINE#
print ( function ( ) ) #NEWLINE#
s . write ( '#SPACE#and#SPACE#spameggs' ) #NEWLINE#
writes = csv . writer ( sys . stdout , delimiter = '#SPACE#' , quoting = csv . QUOTE_ALL ) #NEWLINE#
np . maximum . accumulate ( idx , axis = 1 , out = idx ) #NEWLINE#
celery . start ( ) #NEWLINE#
return np . array ( tmp ) . reshape ( ( len ( longlist ) , len ( longlist [ 0 ] ) ) ) #NEWLINE#
QtGui . QItemDelegate . __init__ ( self , parent ) #NEWLINE#
rdd . map ( lambda x : ( float ( x ) , ) ) . toDF ( [ 'x' ] ) . registerTempTable ( 'df' ) #NEWLINE#
re . findall ( '(<?=(foo))>asdas#SPACE#s[^asd]' ) #NEWLINE#
m2 [ np . asarray ( m2 [ : , ( 1 ) ] > 10 ) . flatten ( ) ] #NEWLINE#
strncpy ( addr . sun_path , UD_SOCKET_PATH , sizeof ( addr . sun_path ) - 1 ) #NEWLINE#
r . close ( ) #NEWLINE#
print ( json . dumps ( 23.67 ) ) #NEWLINE#
soup = BeautifulSoup ( data ) #NEWLINE#
"""Pulp#SPACE#Fiction""" . split ( ) #NEWLINE#
mylist . remove ( max ( mylist ) ) #NEWLINE#
p . parse_args ( [ ] ) #NEWLINE#
reader = csv . DictReader ( f ) #NEWLINE#
pprint . pprint ( combs ) #NEWLINE#
parser . add_argument ( '-n' ) #NEWLINE#
yield '' . join ( itertools . chain . from_iterable ( zip ( s , t ) ) ) + s [ - 1 ] #NEWLINE#
add_cols ( * x . T ) #NEWLINE#
painter . rotate ( - angle ) #NEWLINE#
list ( d . items ( ) ) [ 1 ] #NEWLINE#
def close_window ( ) : #NEWLINE# #INDENT# window . destroy ( ) #NEWLINE#
self . canvas . config ( scrollregion = self . canvas . bbox ( ALL ) ) #NEWLINE#
ax . xaxis . get_minorticklines ( ) #NEWLINE#
s = pd . Series ( [ 'a' , 'b' , 'c' , 'a' ] , dtype = 'category' ) #NEWLINE# s #NEWLINE#
x = [ 1 , 2 , 3 , 2 , 2 , 2 , 3 , 4 ] #NEWLINE# list ( [ a for a in x if a != 2 ] ) #NEWLINE#
lists_of_lists = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE# [ sum ( x ) for x in zip ( * lists_of_lists ) ] #NEWLINE#
modinv ( exp , ( p - 1 ) * ( q - 1 ) ) #NEWLINE#
df5 = pn5 . to_frame ( ) #NEWLINE#
fig = plt . figure ( 1 , figsize = ( 8 , 4 ) ) #NEWLINE#
team2 . name = 'Fred' #NEWLINE#
ind2 = s . rfind ( '\n' ) #NEWLINE#
Photo . objects . filter ( Q ( tags__name = 'holiday' ) & Q ( tags__name = 'summer' ) ) #NEWLINE#
csv_row = line . split ( ) #NEWLINE#
response = urllib . request . urlopen ( url , data , headers ) #NEWLINE#
sns . kdeplot ( x , ax = ax2 ) #NEWLINE#
f . seek ( - len ( os . linesep ) , os . SEEK_END ) #NEWLINE#
plt . savefig ( 'boxcompare.png' ) #NEWLINE#
dicto [ 'a' ] #NEWLINE#
d [ 'abc' ] #NEWLINE#
{ 'A' : 1 , 'T' : 2 , 'G' : 1 } #NEWLINE#
self . changeLayout ( QtCore . Qt . Vertical ) #NEWLINE#
nodes . dot ( x ** np . array ( [ 2 , 1 , 0 ] ) [ : , ( None ) ] ) #NEWLINE#
web . load ( QUrl ( 'http://www.stackoverflow.com' ) ) #NEWLINE#
list ( set ( x ) & set ( y ) ) #NEWLINE#
print ( format_float ( 1500000.0 ) ) #NEWLINE#
A = A [ np . ix_ ( L ) ] #NEWLINE#
response = self . app . get ( '/login' , base_url = 'https://localhost' ) #NEWLINE# assert response . status_code == 200 #NEWLINE#
self . assertTrue ( mock_bar . called ) #NEWLINE#
p . start ( ) #NEWLINE#
img = cv2 . imread ( 'messi4.jpg' ) #NEWLINE#
pkg_resources . require ( 'simplejson==2.1.2' ) #NEWLINE#
driver . get ( 'http://www.latax.state.la.us/Menu_ParishTaxRolls/TaxRolls.aspx' ) #NEWLINE#
wav_file . close ( ) #NEWLINE#
return sum ( is_monotonic ( num , reverse ) for num in range ( start , end ) ) #NEWLINE#
len ( set ( a ) - set ( b ) ) #NEWLINE#
random . sample ( a , len ( a ) + 1 ) #NEWLINE#
l . append ( row [ i ] ) #NEWLINE#
df = pd . DataFrame ( [ ( 1 , 2 , 3 ) , ( 'foo' , 'bar' , 'baz' ) , ( 4 , 5 , 6 ) ] ) #NEWLINE# df #NEWLINE#
A = np . array ( [ 0.1 , 3.5 , 6.5 , 7.9 , 11.4 , 12.0 , 22.3 , 24.5 , 26.7 , 29.9 ] ) #NEWLINE#
self . setWindowTitle ( 'iPython#SPACE#in#SPACE#PyQt5#SPACE#app#SPACE#example' ) #NEWLINE#
connection . putheader ( 'Content-Length' , str ( len ( request_body ) ) ) #NEWLINE#
sum ( cased ( chr ( i ) ) for i in range ( 65536 ) ) #NEWLINE#
matplotlib . use ( 'TkAgg' ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
12.1 , 12.2 , 13.0 , 0.2 , 3.6 , 7.4 , 4.6 , 4.5 , 4.3 , 4.0 , 9.4 , 9.6 , 9.7 , 5.8 #NEWLINE#
if isinstance ( obj , MyClass ) : #NEWLINE# #INDENT# do_foo ( obj ) #NEWLINE#
result = [ Decimal ( x . strip ( '#SPACE#"' ) ) for x in A1 ] #NEWLINE#
data = open ( 'googlel.csv' , 'rb' ) #NEWLINE#
thread . start ( ) #NEWLINE#
label . set_horizontalalignment ( 'left' ) #NEWLINE#
self . lb2 . insert ( 'end' , 'item#SPACE#%s' % i ) #NEWLINE#
keys = A . keys ( ) & B . keys ( ) #NEWLINE# the_sum = sum ( a [ k ] * b [ k ] for k in keys ) #NEWLINE#
return locals ( ) [ 'f_make_fun' ] #NEWLINE#
return int ( ceil ( x / 10.0 ) ) * 10 #NEWLINE#
Book . create_table ( ) #NEWLINE#
print ( ( a , b , c , d ) ) #NEWLINE#
struct . unpack ( 'H' , a ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
normX = np . sqrt ( ssX ) #NEWLINE#
sess . run ( init_op ) #NEWLINE#
print ( '{}#SPACE#found!' . format ( file_path ) ) #NEWLINE#
logging . basicConfig ( stream = sys . stdout , level = logging . DEBUG ) #NEWLINE#
my_array . compress ( [ ( x in job_set ) for x in my_array [ 'job' ] ] ) #NEWLINE#
cursor = connection . cursor ( ) #NEWLINE#
np . random . seed ( 12345 ) #NEWLINE#
inverted_image . save ( 'new_name.png' ) #NEWLINE#
df . sum ( ) #NEWLINE#
yield self . make_requests_from_url ( row [ 0 ] ) #NEWLINE#
f . write ( content ) #NEWLINE# f . close ( ) #NEWLINE#
my_module . __file__ #NEWLINE#
boardsize == 3 #NEWLINE#
SOCIAL_AUTH_FACEBOOK_SCOPE = [ 'email' ] #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
file . save ( ) #NEWLINE#
self . _thread . start ( ) #NEWLINE#
p = argparse . ArgumentParser ( ) #NEWLINE#
button . pack ( ) #NEWLINE#
df = sqlContext . createDataFrame ( rdd , [ 'count' , 'word' ] ) #NEWLINE#
ax2 . spines [ 'left' ] . set_visible ( False ) #NEWLINE#
nss3 . NSS_GetVersion ( ) #NEWLINE#
cat_index = np . searchsorted ( categories , A [ 0 ] ) #NEWLINE# B [ A [ 1 ] , cat_index ] = A [ 2 ] #NEWLINE#
dumps ( { 'numbers' : n , 'strings' : s , 'x' : x , 'y' : y } , file , indent = 4 ) #NEWLINE#
return [ int ( line ) for line in f ] #NEWLINE#
formats . append ( '%%-%ds' % lens [ i ] ) #NEWLINE#
df #NEWLINE#
check_call ( [ 'mkdir' , expanduser ( '~/mnt/data_dir' ) ] ) #NEWLINE#
return iter ( List ) #NEWLINE#
updater . rename ( columns = { 'D' : 'snp' , 'CHR' : 'chr' , 'STOP' : 'pos' } , inplace = True ) #NEWLINE#
df = df . drop ( [ 'Date[G]' , 'Time[G]' ] , 1 ) #NEWLINE#
channel . queueDeclarePassive ( queueName ) . getMessageCount ( ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
ax . set_yticks ( [ 0 , 0.5 , 1 ] ) #NEWLINE#
x = np . array ( [ 0 , 2 , 0 ] ) #NEWLINE#
data . append ( fileData ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
round ( 40.355435 , 4 ) #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
k . metadata . update ( { 'myKey' : 'myValue' } ) #NEWLINE#
xlApp = win32com . client . Dispatch ( 'Excel.Application' ) #NEWLINE#
data = np . random . uniform ( - 1 , 1 , fs ) #NEWLINE#
print ( ( 'Y#SPACE#on#SPACE#Bar' , hasattr ( Bar , 'Y' ) ) ) #NEWLINE#
print ( browser . title ) #NEWLINE#
max ( - 15 , 0 ) #NEWLINE#
blank_image . paste ( image64 , ( 0 , 0 ) ) #NEWLINE#
df2 = pd . DataFrame ( columns = [ 'A' , 'B' , 'C' ] , index = index ) #NEWLINE#
return int ( time . mktime ( d . timetuple ( ) ) ) #NEWLINE#
p . start ( ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( your_data ) #NEWLINE#
foo . start ( ) #NEWLINE#
yaml . load ( s ) #NEWLINE#
self . response . out . write ( '<a#SPACE#href="yoururl?cursor=%s">Next#SPACE#Page</a>' % cursor ) #NEWLINE#
super ( DB1Router , self ) . __init__ ( 'db1' ) #NEWLINE#
a = '1,000,000' #NEWLINE# int ( a . replace ( ',' , '' ) ) #NEWLINE#
super ( Subclass , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
for i in ( 'apple' , 'banana' , 'carrot' ) : #NEWLINE# #INDENT# fruitdict [ i ] = locals ( ) [ i ] #NEWLINE#
self . process . stdin . write ( command + '\n' ) #NEWLINE#
x = [ 'a1sd' , '23df' , 'aaa' , 'ccc' , 'rrrr' , 'ssss' , 'e' , '' ] #NEWLINE# [ ( x [ i ] + x [ i + 1 ] ) for i in range ( 0 , len ( x ) , 2 ) ] #NEWLINE#
[ 5 , 6 , 10 ] #NEWLINE#
print ( '#SPACE#%-45s#SPACE#%-15s#SPACE#%15s' % ( filename , status , file_type ) ) #NEWLINE#
vc . release ( ) #NEWLINE#
text = open ( filename ) . read ( ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return np . array ( [ float ( sym . subs ( all_dict ) ) for sym in syms ] ) #NEWLINE#
ax2 . set_ylabel ( 'kilovolt' ) #NEWLINE#
some_fun ( ) #NEWLINE#
rdd1 . union ( rdd2 ) . groupByKey ( ) . mapValues ( tuple ) . collect ( ) #NEWLINE#
return x . encode ( 'ascii' , 'asciify' ) #NEWLINE#
return list ( reversed ( path ) ) #NEWLINE#
print ( jiskya ( 2 , 3 ) ) #NEWLINE#
logger . removeHandler ( stream_handler ) #NEWLINE#
img3 = plt . imshow ( zvals2 , interpolation = 'nearest' , cmap = cmap2 , origin = 'lower' ) #NEWLINE#
meta . py #NEWLINE#
sys . stdout . write ( '\r{0}>' . format ( '=' * i ) ) #NEWLINE#
section_sums = mask . reshape ( - 1 , 20 ) . sum ( 1 ) #NEWLINE#
cursor = db . cursor ( ) #NEWLINE#
find_chamber_discard2 ( locals ( ) ) #NEWLINE#
return dict ( const1 = const1 , const2 = const2 ) #NEWLINE#
users = User . objects . all ( ) #NEWLINE#
o = own . unstack ( ) . reset_index ( name = 'value' ) #NEWLINE#
return '.' . join ( url_elements [ i - 1 : ] ) #NEWLINE#
writer . writerow ( next ( reader ) ) #NEWLINE#
counts = df . groupby ( [ 'day' , 'col_name' ] ) . agg ( len ) #NEWLINE#
self . ui . gridLayout . update ( ) #NEWLINE#
readFileObject . close ( ) #NEWLINE#
myString = f . read ( ) . decode ( 'latin-1' ) #NEWLINE#
app . jinja_env . filters [ 'filter_name2' ] = jinja_filters . filter_name2 #NEWLINE#
bin ( - 4 ) #NEWLINE#
return win32api . GetKeyState ( win32con . VK_CAPITAL ) #NEWLINE#
print ( sum ( s ) / len ( s ) ) #NEWLINE#
set ( l1 ) . intersection ( l2 ) #NEWLINE#
raise web . seeother ( '/static/index.html' ) #NEWLINE#
sys . setdefaultencoding ( 'UTF8' ) #NEWLINE#
a_string . encode ( encoding ) #NEWLINE#
result = df . set_index ( [ 'Z' , 'A' , 'pos' ] ) . unstack ( 'pos' ) #NEWLINE#
np . all ( numexpr . evaluate ( '(a==b)|((a!=a)&(b!=b))' ) ) #NEWLINE#
super ( model_class , self ) . save ( using = 'database_1' ) #NEWLINE#
unidecode ( 'Ã¦,#SPACE#Ã¶#SPACE#or#SPACE#Ã§' ) #NEWLINE#
ranges . append ( ( 4 , 10 ) ) #NEWLINE#
array = [ 'the' , 'fox' , 'jumped' , 'over' , 'the' , 'lazy' , 'dog' ] #NEWLINE#
x = re . findall ( 'alpha(.*?)bravo' , data , re . DOTALL ) #NEWLINE#
return dot ( Phi , R ) #NEWLINE#
with open ( path ) as f : #NEWLINE# #INDENT# myList = list ( f ) #NEWLINE#
"""ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ""" #NEWLINE#
df = pd . DataFrame ( columns = [ 'a' , 'Unnamed:#SPACE#1' , 'Unnamed:#SPACE#1' , 'foo' ] ) #NEWLINE#
regex . sub ( '' , url , 1 ) #NEWLINE#
pcol . set_edgecolor ( 'face' ) #NEWLINE#
return str ( self . data [ row ] [ column ] ) #NEWLINE#
[ sublist for sublist in list_ if sublist [ 1 ] != 1 ] #NEWLINE#
my_data . append ( line ) #NEWLINE#
np . sign ( df [ 'A' ] ) #NEWLINE#
main ( 'Oops' ) #NEWLINE#
file . seek ( 0 ) #NEWLINE#
a [ 0 ] [ 0 ] = 'x' #NEWLINE#
a , b , c = map ( int , f . readline ( ) . split ( ',' ) ) #NEWLINE#
pygame . sprite . spritecollide ( hook , fish , False , pygame . sprite . collide_circle ) #NEWLINE#
clb . ax . set_title ( 'This#SPACE#is#SPACE#a#SPACE#title' ) #NEWLINE#
textbox . tag_add ( SEL , '1.0' , END ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
super ( MyAdAdminForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
d += timedelta ( days = inc ) #NEWLINE#
bases = Foo . mro ( ) #NEWLINE#
textA = 'the#SPACE#cat#SPACE#in#SPACE#the#SPACE#red#SPACE#hat' #NEWLINE#
thread . start ( ) #NEWLINE#
ITEM_PIPELINES = { 'scrapy_quotes.pipelines.ScrapyQuotesPipeline' : 300 } #NEWLINE#
"""{0:0{width}}""" . format ( 5 , width = 3 ) #NEWLINE#
self . ax . set_autoscaley_on ( True ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
print ( msg . get_payload ( ) ) #NEWLINE#
a , b = [ ] , [ ] #NEWLINE#
np . vstack ( [ a , b ] ) #NEWLINE#
a [ 0 : 1 ] [ 0 ] = 4 #NEWLINE#
{ { sec . books_set . count } } #NEWLINE#
tuples = [ ( freq , word ) for word , freq in D . items ( ) ] #NEWLINE#
return x + 1 #NEWLINE#
builder . add_from_file ( 'GUI.xml' ) #NEWLINE#
a = df . groupby ( [ 'userid' , 'week' ] ) [ 'quiz_score' ] . agg ( ( 'sum' , 'count' ) ) #NEWLINE#
a [ : , ( 1 ) ] = - 1 #NEWLINE#
return '__getattribute__#SPACE#has#SPACE#the#SPACE#highest#SPACE#priority#SPACE#for#SPACE#{}' . format ( name ) #NEWLINE#
plt . plot ( x , 3 * x ) #NEWLINE#
print ( numpy . array_equal ( new_data , output ) ) #NEWLINE#
client . connect ( server , port , user , password ) #NEWLINE#
canvas . itemconfigure ( cwid , width = wi , height = hi ) #NEWLINE#
[ ( 1 , 10 ) , ( 1 , 20 ) , ( 1 , 30 ) , ( 2 , 10 ) , ( 2 , 20 ) , ( 2 , 30 ) , ( 3 , 10 ) , ( 3 , 20 ) , ( 3 , #NEWLINE# 30 ) ] #NEWLINE#
for line in f . read ( ) . split ( '\x00' ) : #NEWLINE# #INDENT# pass #NEWLINE#
self . button . grid ( row = 1 , column = 0 , sticky = W ) #NEWLINE#
u8 = v . decode ( 'iso-8859-1' ) . encode ( 'utf-8' ) #NEWLINE#
sys . stdin = sys . __stdin__ #NEWLINE#
rdd . groupByKey ( ) . mapValues ( lambda x : sum ( x ) / len ( x ) ) . collect ( ) #NEWLINE#
print ( scipy . optimize . brentq ( f , 0.0 , 100.0 , args = ( 77.0 / 27.0 , 1.0 , 1.0 , 10.0 ) ) ) #NEWLINE#
a , b = int ( a ) , int ( b ) #NEWLINE#
df = pd . DataFrame ( delimit ) #NEWLINE#
print ( '%02d' % mydate . month ) #NEWLINE#
t = datetime . timedelta ( seconds = 1 ) #NEWLINE#
y = [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' ] #NEWLINE#
print ( [ '' . join ( x ) for x in combinations ] ) #NEWLINE#
queens = [ ( i , random . randint ( 1 , 8 ) ) for i in range ( 1 , 9 ) ] #NEWLINE#
return - d [ 'downloads' ] , d [ 'date' ] #NEWLINE#
cv . SetCaptureProperty ( camcapture , cv . CV_CAP_PROP_FRAME_HEIGHT , 720 ) #NEWLINE#
a . newMethod = newMethod . __get__ ( a , A ) #NEWLINE#
ops = { '+' : lambda x , y : x + y , '-' : lambda x , y : x - y } #NEWLINE#
thread . start ( ) #NEWLINE#
file . readline ( ) #NEWLINE#
"""""" . join ( merged ) #NEWLINE#
settings . configure ( TEMPLATE_DIRS = ( '.' , ) ) #NEWLINE#
df . iat [ 0 , 0 ] #NEWLINE#
map ( lambda xy : '' . join ( xy ) , zip ( repeat ( x ) , y ) ) #NEWLINE#
widget . setLayout ( layout ) #NEWLINE#
Thread ( target = recv ) . start ( ) #NEWLINE#
( ) #NEWLINE#
func ( ) #NEWLINE#
df . set_index ( [ 'Symbol' , 'TimeStamp' ] ) #NEWLINE# df . set_index ( [ 'Symbol' , 'TimeStamp' ] ) . sortlevel ( 0 ) #NEWLINE#
y = [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 ] ] #NEWLINE#
raise forms . ValidationError ( _ ( 'A#SPACE#user#SPACE#with#SPACE#that#SPACE#username#SPACE#already#SPACE#exists.' ) ) #NEWLINE#
len ( max ( tup , key = len ) ) #NEWLINE#
140350 , 143500 , 145314 , 146137 , 146952 #NEWLINE#
"""#!#SPACE#/bin/sh#NEWLINE##NEWLINE#####SPACE#BEGIN#SPACE#INIT#SPACE#INFO#NEWLINE##......""" #NEWLINE#
[ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 2 ) ] #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ) #NEWLINE#
'social.pipeline.social_auth.associate_by_email' , #NEWLINE#
logger . setLevel ( level ) #NEWLINE#
df . plot ( ax = axs , alpha = 0.7 ) #NEWLINE#
extra_logger = logging . getLogger ( 'extra_logger' ) #NEWLINE#
next_num = cur . fetchone ( ) [ 0 ] #NEWLINE#
session_id = hismgr . get_last_session_id ( ) #NEWLINE#
filename = filename . replace ( '\\' , '/' ) #NEWLINE#
main ( ** vars ( args ) ) #NEWLINE#
plt . barh ( pos , data . sort_index ( ) , align = 'center' , height = 0.25 ) #NEWLINE#
data = cursor . fetchone ( ) #NEWLINE#
return [ gu ( i ) for i in range ( len ( uo ) ) ] #NEWLINE#
return template . render ( context ) #NEWLINE#
a = numpy . load ( memfile ) #NEWLINE#
dir ( __builtins__ ) #NEWLINE#
ax . legend ( ) #NEWLINE# plt . show ( ) #NEWLINE#
result . extend ( literal_eval ( line . strip ( ) ) ) #NEWLINE#
b [ sort_indices , static_indices [ 1 ] , static_indices [ 2 ] ] #NEWLINE#
sample . save ( ) #NEWLINE#
print ( '#SPACE#' . join ( '{}' . format ( k ) for k in lsta + lstb + lstc ) ) #NEWLINE#
"""sdf344asfasf天地方益3権sdfsdf""" #NEWLINE#
divisibleBySeven = [ num for num in inputList if meetsCondition ( num ) ] #NEWLINE#
frame [ frame . duplicated ( [ 'key1' , 'key2' ] , take_last = True ) | frame . duplicated #NEWLINE# ( [ 'key1' , 'key2' ] ) ] . groupby ( ( 'key1' , 'key2' ) ) . min ( ) #NEWLINE#
wx . Frame . __init__ ( self , None , wx . ID_ANY , 'Global#SPACE#Keypress' ) #NEWLINE#
print ( d [ keyList [ i - 1 ] ] ) #NEWLINE#
fooarray = numpy . zeros ( ( N , M ) ) #NEWLINE#
del p_list [ idx ] #NEWLINE#
line = proc . stdout . readline ( ) #NEWLINE#
category = SelectField ( 'category' ) #NEWLINE#
zlib . decompress ( inf , 16 + zlib . MAX_WBITS ) #NEWLINE#
ecb ( ) #NEWLINE#
df . iloc [ last - 2 : last + 1 ] #NEWLINE#
ax . xaxis . grid ( True , 'minor' ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
raise ValueError ( 'Response#SPACE#too#SPACE#large' ) #NEWLINE#
s = '#SPACE##SPACE##SPACE#xyz' #NEWLINE# len ( s ) - len ( s . lstrip ( ) ) #NEWLINE#
os . system ( 'hwclock#SPACE#--set#SPACE#%s' % date_str ) #NEWLINE#
os . system ( 'date#SPACE#-s#SPACE#%s' % date_str ) #NEWLINE#
print ( fmax , pinf , ninf , fnan ) #NEWLINE#
fout . write ( f . getvalue ( ) ) #NEWLINE#
print ( np . einsum ( 'iji->ij' , a ) ) #NEWLINE#
chromosome2 = [ 1 , 1 , 2 , 1 , 0 ] #NEWLINE#
[ 'a' , 'b' , '{#SPACE#{#SPACE#c#SPACE#}#SPACE#}' ] #NEWLINE#
print ( cyan ( '[%(host)s]#SPACE#Executing#SPACE#on#SPACE#%(host)s#SPACE#as#SPACE#%(user)s' % env ) ) #NEWLINE#
f [ i ] += 1 #NEWLINE#
print ( 'Test#SPACE#teardown' ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
ax [ 1 ] . set_ylabel ( '$z$' ) #NEWLINE#
l [ 1 ] = 5 #NEWLINE#
print ( osgeo . gdal . __version__ ) #NEWLINE#
RIGHT = Direction ( 1 , 0 , 'right' ) #NEWLINE#
G . add_nodes_from ( L4 ) #NEWLINE#
pass #NEWLINE#
sock . send ( '\n' + end_str + '\n' ) #NEWLINE#
return df1 . merge ( df2 , on = 'name' ) #NEWLINE#
my_new_list = list ( my_set ) #NEWLINE#
m2 [ : , ( 1 ) ] > 10 #NEWLINE#
data = np . vstack ( ( data , ( np . ones ( data . shape [ 0 ] ) * num ) . reshape ( - 1 , 1 ) ) ) #NEWLINE#
print ( ( name , 'is#SPACE#a' , adjective , noun , 'that' , verb ) ) #NEWLINE#
from lasagne . nonlinearities import softmax #NEWLINE#
round ( 123 , - 2 ) #NEWLINE#
df_two . show ( ) #NEWLINE#
main ( ) #NEWLINE#
[ 'B' , 'C' , 'D' , 'A' , 'C' , 'A' , 'D' , 'B' ] #NEWLINE#
def ilen ( it ) : #NEWLINE# #INDENT# return len ( list ( it ) ) #NEWLINE#
foo . save ( ) #NEWLINE#
hops . insert ( 0 , response . geturl ( ) ) #NEWLINE#
d1 [ numpy . searchsorted ( t1 , t2 , side = 'right' ) - 1 ] #NEWLINE#
plt . title ( 'Periodic#SPACE#basis#SPACE#splines' ) #NEWLINE#
plt . title ( 'Splined#SPACE#y(t)' ) #NEWLINE#
plt . title ( 'Basis#SPACE#splines' ) #NEWLINE#
pygame . mixer . music . load ( soundfile ) #NEWLINE#
c = compile ( 'u"\\N{DEGREE#SPACE#SIGN}-\\N{EMPTY#SPACE#SET}"' , '' , 'eval' ) #NEWLINE#
int_from_ipv6 ( 'fe80::fbd6:7860' ) #NEWLINE#
self . canvas . bind ( '<B1-Motion>' , self . scroll_move ) #NEWLINE#
my_nasty_tactic ( 'exists#SPACE#z2.(owner(fido,#SPACE#z2)#SPACE#&#SPACE#(z0#SPACE#=#SPACE#z2))' ) #NEWLINE#
driver = webdriver . Chrome ( ) #NEWLINE#
print ( binascii . hexlify ( x ) ) #NEWLINE#
librt = ctypes . CDLL ( 'librt.so.1' , use_errno = True ) #NEWLINE#
user . save ( ) #NEWLINE#
exec ( '\n' . join ( sys . argv [ 1 : ] ) ) #NEWLINE#
text_re = re . sub ( '(\\d+)/(\\d+)/(\\d+)' , '\\3-\\1-\\2' , text2 ) #NEWLINE#
token = request . session [ 'token' ] #NEWLINE#
MEDIA_ROOT = '<your_path>/media' #NEWLINE#
et = xml . etree . ElementTree . parse ( 'file.xml' ) #NEWLINE#
dates = [ dt . datetime ( 1970 , 1 , 2 ) , dt . datetime ( 1970 , 1 , 3 ) ] #NEWLINE#
c . drawString ( 1 , 1 , 'test#SPACE#data#SPACE#here' ) #NEWLINE#
list_one . insert ( 2 , list_two ) #NEWLINE#
sizer . Add ( self . grid , 1 , wx . EXPAND ) #NEWLINE#
assert os . path . exists ( GTK_RUNTIME_DIR ) , 'Cannot#SPACE#find#SPACE#GTK#SPACE#runtime#SPACE#data' #NEWLINE#
logging . debug ( 'SIGINT#SPACE#received.#SPACE#Delaying#SPACE#KeyboardInterrupt.' ) #NEWLINE#
return no_vow ( seq , index + 1 ) #NEWLINE#
errors . append ( ( srcname , dstname , str ( why ) ) ) #NEWLINE#
image = cv2 . imread ( imagepath ) #NEWLINE#
dirname1 = os . path . basename ( dir ) #NEWLINE#
r = re . compile ( '[{}]' . format ( punctuation ) ) #NEWLINE#
writer . commit ( ) #NEWLINE#
unittest . TextTestRunner ( verbosity = 2 ) . run ( suite ) #NEWLINE#
return points [ index ] #NEWLINE#
loop = asyncio . get_event_loop ( ) #NEWLINE#
return os . fdopen ( fd , * args , ** kwargs ) #NEWLINE#
__tablename__ = 'follow' #NEWLINE#
__tablename__ = 'user' #NEWLINE#
a = [ 'big' , 'apple' , '42nd#SPACE#street' , '25th#SPACE#of#SPACE#May' , 'subway' ] #NEWLINE# sorted ( a , key = lambda x : ( x [ 0 ] . isdigit ( ) , x ) ) #NEWLINE#
return [ x for x in pattern . split ( s ) if x ] #NEWLINE#
os . environ [ 'SPARK_HOME' ] = 'E:\\Work\\spark\\installtion\\spark' #NEWLINE#
plt . show ( ) #NEWLINE#
df = pd . DataFrame ( list ( cursor ) ) #NEWLINE#
sizer = wx . BoxSizer ( wx . VERTICAL ) #NEWLINE#
plot ( f . subs ( 'b' , b ) ) #NEWLINE#
hsv = cv2 . cvtColor ( img , cv2 . COLOR_BGR2HSV ) #NEWLINE#
ax . set_zlabel ( 'Z' ) #NEWLINE# plot . show ( ) #NEWLINE#
allowed_domains = [ 'example.com' ] #NEWLINE#
self . root . after ( 1000 , self . circle ) #NEWLINE#
file . write ( line + '\n' ) #NEWLINE#
sorted_d = OrderedDict ( zip ( sorted_keys , [ d [ k ] for k in sorted_keys ] ) ) #NEWLINE#
obj . _meta . concrete_model . _meta . model_name #NEWLINE#
parser . add_argument ( 'input_file' , type = argparse . FileType ( 'r' ) ) #NEWLINE#
mask = np . isnan ( arr ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
maxes ( [ 'a' , 'ab' , 'a' , 'cd' ] , key = len ) #NEWLINE#
context . update ( { 'show_save_and_copy' : True } ) #NEWLINE#
data = browser . open ( image [ 'src' ] ) . read ( ) #NEWLINE#
z . close ( ) #NEWLINE#
window . setGeometry ( 0 , 0 , 400 , 200 ) #NEWLINE#
print ( min ( ( f ( i , j ) , i , j ) for i in l for j in l ) ) #NEWLINE#
df1 . info ( ) #NEWLINE#
b . append ( [ begin , end ] ) #NEWLINE#
conn . connect ( '192.168.221.235' ) #NEWLINE#
server . shutdown ( ) #NEWLINE#
return sys . exit ( app . exec_ ( ) ) #NEWLINE#
out = df . index [ np . in1d ( df [ 'Col4' ] , target_array ) ] #NEWLINE#
A . T [ ... , None ] * B [ : , ( None ) ] #NEWLINE#
act . triggered . connect ( self . on_triggered ) #NEWLINE#
somemonth = models . TextField ( max_length = 3 , choices = zip ( MONTHS , MONTHS ) ) #NEWLINE#
ax . plot_surface ( x_surf , y_surf , z_surf , cmap = cm . hot , alpha = 0.2 ) #NEWLINE#
L . sort ( lambda x , y : cmp ( x . name , y . name ) or - cmp ( x . year , y . year ) ) #NEWLINE#
driver . get ( 'http://www.google.com' ) #NEWLINE#
graph . plot ( x , y , 'r-o' ) #NEWLINE#
del dct [ 'b' ] #NEWLINE#
print ( ainfo . get_caps ( ) . to_string ( ) . replace ( ',#SPACE#' , '\n\t' ) ) #NEWLINE#
x . c ( 'c#SPACE#will#SPACE#only#SPACE#recieve#SPACE#this#SPACE#string' ) #NEWLINE#
arrows ( 0 , 0 , 1 , 1 ) #NEWLINE#
lines = ( line for line in f if line . strip ( ) ) #NEWLINE#
ax . imshow ( image , cmap = 'gray' , interpolation = 'nearest' ) #NEWLINE#
print ( ( 'calculating#SPACE#md5#SPACE#of' , obj ) ) #NEWLINE#
[ y for x in lst for y in ( x if isinstance ( x , tuple ) else ( x , ) ) ] #NEWLINE#
sys . exit ( ) #NEWLINE#
dt = datetime . fromtimestamp ( ts , tz ) #NEWLINE#
function . __code__ . co_cellvars #NEWLINE#
X [ np . ix_ ( np . where ( mask1 ) [ 0 ] , np . where ( mask2 ) [ 0 ] ) ] #NEWLINE#
ax . tick_params ( axis = 'x' , direction = 'out' , length = 6 , width = 2 , colors = 'r' ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE# """#SPACE#""" . join ( map ( str , a ) ) #NEWLINE#
ax . set_xticks ( list ( range ( len ( g ) ) ) ) #NEWLINE#
ansi_escape = re . compile ( '\\x1b[^m]*m' ) #NEWLINE#
process . terminate ( ) #NEWLINE#
selfdisgust = Node ( 'selfdisgust' , shame ) #NEWLINE#
embarrassment = Node ( 'embarrassment' , shame ) #NEWLINE#
selfconsciousness = Node ( 'selfconsciousness' , embarrassment ) #NEWLINE#
shamefacedness = Node ( 'shamefacedness' , embarrassment ) #NEWLINE#
chagrin = Node ( 'chagrin' , embarrassment ) #NEWLINE#
discomfiture = Node ( 'discomfiture' , embarrassment ) #NEWLINE#
abashment = Node ( 'abashment' , embarrassment ) #NEWLINE#
aapl . plot ( title = 'AAPL#SPACE#Adj#SPACE#Close' ) #NEWLINE#
self . x [ 'state' ] = 'normal' #NEWLINE#
self . manprefix = 'DEFAULT#SPACE#MAN#SPACE#PREFIX#SPACE#PATH#SPACE#IF#SPACE#THE#SPACE#OPTION#SPACE#IS#SPACE#NOT#SPACE#SET' #NEWLINE#
values ( 'tag2' , 'blue' , '2014-03-12T23:59:59' , '2014-03-13T00:00:29' , 2978 ) #NEWLINE#
values ( 'tag3' , 'red' , '2016-01-01T11:35:01' , '2016-01-01T12:00:00' , 13000 ) #NEWLINE#
shutil . copyfile ( src , dest ) #NEWLINE#
"""172.23.1.99""" #NEWLINE#
return datetime . timedelta ( seconds = seconds ) #NEWLINE#
argv . Add ( 'bar' ) #NEWLINE#
l = [ x . split ( '_' ) [ 1 ] for x in s . split ( ',#SPACE#' ) if x ] #NEWLINE#
files = { 'file' : open ( 'image.jpg' , 'rb' ) , 'account_id' : 12345 } #NEWLINE#
print ( '\n' . join ( etree . XPath ( '//text()' ) ( document ) ) ) #NEWLINE#
win . configure ( x = 123 , y = 345 , width = 678 , height = 910 ) #NEWLINE#
p . add_argument ( 'foo' ) #NEWLINE#
p . add_argument ( 'pos' ) #NEWLINE#
l_without_num = l [ : k ] + l [ k + 1 : ] #NEWLINE#
dstdir = [ 'The#SPACE#Big#SPACE#Bang#SPACE#Theory' , 'Dexter' , 'Spawn' ] #NEWLINE#
print ( ( '\n' , jsondatabytes , '\n' ) ) #NEWLINE#
out . write ( '%s#SPACE#%s:#SPACE#%s\n' % ( i , '#SPACE#' * ( 12 - width ( i ) ) , j ) ) #NEWLINE#
data [ np . isnan ( data ) ] = dfrand [ np . isnan ( data ) ] #NEWLINE#
c . sort ( axis = 1 ) #NEWLINE#
sys . stdout = open ( 'test.txt' , 'w' ) #NEWLINE#
func2 ( innerfunc ) #NEWLINE#
print ( '<pre>' ) #NEWLINE#
matplotlib . use ( 'GTKAgg' ) #NEWLINE#
pd . to_numeric ( df [ 'A' ] , 'coerce' ) #NEWLINE#
print ( f ( 3 ) ) #NEWLINE#
return h / 3 * ( f ( a ) + f ( b ) + k ) #NEWLINE#
parts = splitparts . split ( match . group ( 2 ) ) #NEWLINE#
print ( '\t' . join ( map ( str , numbers ) ) ) #NEWLINE#
config . read ( 'config.ini' ) #NEWLINE#
foo ( ) #NEWLINE#
socket . inet_pton ( socket . AF_INET , address ) #NEWLINE#
p [ pair [ 1 ] ] += 1 #NEWLINE#
raw = input ( 'Please#SPACE#input#SPACE#some#SPACE#funny#SPACE#characters:#SPACE#' ) #NEWLINE# decoded = raw . decode ( 'utf-8' ) #NEWLINE#
my_list = [ 1 , 2 , 3 ] #NEWLINE# dict . fromkeys ( my_list , 0 ) #NEWLINE#
print ( fd , os . readlink ( '/proc/self/fd/%d' % fd ) ) #NEWLINE#
s [ : s . find ( 'fd' ) ] #NEWLINE#
np . append ( 0 , a ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE# ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
y . shape . eval ( ) #NEWLINE#
my_file . write ( '\n' . join ( output_lines ) ) #NEWLINE#
handles , labels = ax1 . get_legend_handles_labels ( ) #NEWLINE#
gen ( ) . __name__ = 'foo' #NEWLINE#
self . setLayout ( hbox ) #NEWLINE#
df1 . values / df2 [ df1 . columns ] . values #NEWLINE#
ax . plot ( [ 2 , 2 , 2 ] ) #NEWLINE#
log . setLevel ( logging . INFO ) #NEWLINE#
parse ( '2009.01.05' ) . strftime ( '%B#SPACE#%d,#SPACE#%Y' ) #NEWLINE#
first = next ( ( lambda set_y : a for a in x if a in set_y ) ( set ( y ) ) , None ) #NEWLINE#
client = boto3 . client ( 's3' ) #NEWLINE#
12860386 , - 22.0 , - 42.9 , 2 , 2 #NEWLINE#
for i in range ( len ( meds ) ) : #NEWLINE# #INDENT# if len ( re . findall ( '[a-zA-Z\\d]+#SPACE#\\d+#SPACE#Cap\\(s\\)' , meds [ i ] ) ) == 0 : #NEWLINE# #INDENT# #INDENT# meds [ i ] = meds [ i ] . replace ( '#SPACE#Cap(s)' , '#SPACE#1#SPACE#Cap(s)' ) #NEWLINE#
[ ( 'Abel' , 3 ) , ( 'Al' , 2 ) , ( 'Carol' , 2 ) , ( 'Zeke' , 2 ) , ( 'Bill' , 1 ) , ( 'Chris' , 1 ) ] #NEWLINE#
column ( A , 1 ) #NEWLINE#
url ( '^$' , recipes_views . index ) , #NEWLINE#
X = np . zeros ( ( 100 , 100 , 100 ) ) #NEWLINE#
setup2 = dict ( setup1 , param1 = val10 , param2 = val20 ) #NEWLINE#
m = numpy . matrix ( [ [ 1 , 2 , 3 ] , [ 4 , '5' , 6 ] ] , dtype = numpy . object ) #NEWLINE#
xlabel ( 'foo' ) #NEWLINE#
a2 . ravel ( ) [ : ] = np . array ( ll ) #NEWLINE#
show_svg ( ) #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
colors = replace ( colors , { 'red' : 'pink' , 'blue' : 'light#SPACE#blue' } ) #NEWLINE#
return pd . Series ( { 'C' : b , 'B' : c } ) #NEWLINE#
sizer . Add ( self . ultimateList , 1 , flag = wx . EXPAND ) #NEWLINE#
ids = Employee . objects . filter ( company = 'Private' ) . values_list ( 'id' , flat = True ) #NEWLINE# Person . objects . filter ( id__in = ids ) . values ( 'name' , 'age' ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
[ n ] = set ( sum ( sl ) for sl in L ) #NEWLINE#
return [ l [ 0 ] [ : : - 1 ] ] + reve ( l [ 1 : ] ) if l else [ ] #NEWLINE#
heapq . heappush ( heap , ( - prod , n , n ) ) #NEWLINE#
ax1 = fig . add_subplot ( 211 ) #NEWLINE#
print ( 'Total#SPACE#number#SPACE#of#SPACE#tcp#SPACE#packets:#SPACE#' , tcpcounter ) #NEWLINE#
super ( c , self ) . __init__ ( val ) #NEWLINE#
time . sleep ( 1.0 ) #NEWLINE#
line = line . rstrip ( '\n' ) #NEWLINE#
ax [ 0 ] . set_ylabel ( '$y$' ) #NEWLINE#
window2 . geometry ( '195x135' ) #NEWLINE#
colon2 = colon2 . encode ( 'utf8' ) #NEWLINE#
regex = re . compile ( '%s-\\d*' % user ) #NEWLINE#
Decimal ( 0.5 ) #NEWLINE#
req . add_header ( key , value ) #NEWLINE#
print ( x . name , x . hometown . name , x . hometown . id ) #NEWLINE#
sys . getdefaultencoding ( ) #NEWLINE#
df1 = pd . DataFrame ( { 'a' : [ 100 , 200 , 300 ] } ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
self . widget . see ( 'end' ) #NEWLINE#
next ( v for k , v in list ( my_dict . items ( ) ) if k . startswith ( 'Date' ) ) #NEWLINE#
return sum ( f ( x ) for f in funcs ) #NEWLINE#
return self . modules #NEWLINE#
with open ( 'test.json' ) as f : #NEWLINE# #INDENT# data = pd . DataFrame ( json . loads ( line ) for line in f ) #NEWLINE#
A = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
search_for_orig ( spam , 'spam' ) #NEWLINE#
p = re . compile ( '([-+]?)(?:0?x)([0-9A-Fa-f]+)' ) #NEWLINE#
driver . get ( url2 ) #NEWLINE#
z [ 'time' ] = pd . to_datetime ( z [ 'time' ] ) #NEWLINE#
a [ a < 0 ] += 1 #NEWLINE#
re . sub ( p , '-' , a ) #NEWLINE#
text += '\n' #NEWLINE#
hist , bin_edges = np . histogram ( a , bins = bins ) #NEWLINE#
print ( 'Module#SPACE#%s#SPACE#not#SPACE#found.' % module_name ) #NEWLINE#
timeit ( hugeequal1 , hugeequal2 , 10000 ) #NEWLINE#
output = p . communicate ( input ) [ 0 ] #NEWLINE#
df . where ( array_equal ( col ( 'a' ) , [ 'list' , 'of' , 'stuff' ] ) ) . show ( ) #NEWLINE#
b [ i ] = a [ i ] #NEWLINE#
super ( MyMixinCharField , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
solve ( M * x + N * y , x ) #NEWLINE#
_kurtosis . kurt ( K , X , scratch , w ) #NEWLINE#
df2 . plot ( 'type_of_plot' , ax = b ) #NEWLINE#
stemmer . stem ( 'کتاب\u200cها' ) #NEWLINE#
del mylist [ : 2 ] #NEWLINE#
tree = ET . ElementTree ( root ) #NEWLINE# tree . write ( 'filename.xml' ) #NEWLINE#
plt . show ( ) #NEWLINE#
csv_writer = csv . DictWriter ( csv_file , headers ) #NEWLINE#
return itertools . islice ( it , n , None ) #NEWLINE#
name = dom . getElementsByTagName ( 'name' ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
pprint . pprint ( result ) #NEWLINE#
d . setdefault ( 'd' , [ ] ) . append ( 3 ) #NEWLINE#
[ 'MOR125-1' , 'MOR129-3' , '0.598' ] #NEWLINE#
from selenium import webdriver #NEWLINE#
self . learning_rate = tf . placeholder ( tf . float32 , ( ) , 'learning_rate' ) #NEWLINE#
df . min ( 1 ) #NEWLINE#
resp = br . open ( url ) #NEWLINE#
df . loc [ ( df [ 0 ] == 101 ) & ( df [ 1 ] == 3 ) ] = [ [ 200 , 10 ] ] #NEWLINE#
output = open ( 'output.txt' , 'ab+' ) #NEWLINE#
configpath = os . path . join ( confighome , 'programname' ) #NEWLINE#
pw = getpass . getpass ( ) #NEWLINE#
root . rowconfigure ( 0 , weight = 1 ) #NEWLINE#
s . connect ( ( HOST , PORT ) ) #NEWLINE#
lst = [ 0 , 1 ] , [ 0 , 4 ] , [ 1 , 0 ] , [ 1 , 4 ] , [ 4 , 0 ] , [ 4 , 1 ] #NEWLINE# data = { tuple ( item ) for item in map ( sorted , lst ) } #NEWLINE#
print ( ascii ( 'auszuschlieÃ\x9fenâ\x80¦' ) ) #NEWLINE#
converted = data . decode ( 'latin1' ) . encode ( 'utf-8' ) #NEWLINE#
s = '#SPACE#' . join ( map ( lambda x : '%s,' % x , l ) ) #NEWLINE#
Gh . add_edge ( 'Me' , 'Bike' , weight = 1.1 ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
inspect . getgeneratorstate ( gen ) #NEWLINE#
data = np . arange ( 4 * 3 * 2 , dtype = float ) . reshape ( 4 , 3 , 2 ) #NEWLINE#
locals ( ) . update ( mydict ) #NEWLINE#
sql = 'INSERT#SPACE#INTO#SPACE#TABLE_A#SPACE#(COL_A,COL_B)#SPACE#VALUES#SPACE#(%s,#SPACE#%s)' #NEWLINE#
avg = tot / ( ( data . shape [ 0 ] - 1 ) * data . shape [ 0 ] / 2.0 ) #NEWLINE#
A2 = [ float ( x . strip ( '"' ) ) for x in A1 ] #NEWLINE#
setattr ( f . __class__ , '__eq__' , lambda x , y : True ) #NEWLINE#
np . dot ( b , a ) #NEWLINE#
yield unicodedata . lookup ( name . replace ( '#SPACE#FINAL' , '' ) ) #NEWLINE#
nums = [ int ( x ) for x in num_str . split ( ',' ) ] #NEWLINE#
from xml . etree . ElementTree import ElementTree #NEWLINE#
connection . connection . text_factory = lambda x : str ( x , 'utf-8' , 'ignore' ) #NEWLINE#
df . drop ( cols , inplace = True , axis = 1 ) #NEWLINE#
ax . plot ( np . random . rand ( 20 ) , '-o' , ms = 20 , lw = 2 , alpha = 1.0 , mfc = 'orange' ) #NEWLINE#
text . split ( a ) [ - 1 ] . split ( b ) [ 0 ] #NEWLINE#
string . Formatter ( ) . vformat ( '{0}#SPACE#{1}#SPACE#{2}' , DefaultList ( [ 0 , 1 ] ) , { } ) #NEWLINE#
pool . join ( ) #NEWLINE#
r . setdefault ( 'a' , 'e' ) #NEWLINE#
df [ 'c' ] = df . groupby ( 'a' ) [ 'b' ] . shift ( ) #NEWLINE# df #NEWLINE#
return [ ( s , s1 . index ( s ) , s2 . index ( s ) ) for s in maximal ] #NEWLINE#
self . stop_button . configure ( state = 'active' ) #NEWLINE#
[ p for p in itertools . product ( x , repeat = 2 ) ] #NEWLINE#
pdb . Pdb . __init__ ( self , nosigint = True ) #NEWLINE#
G . add_node ( 'abc' , dob = 1185 , pob = 'usa' , dayob = 'monday' ) #NEWLINE#
p2 . communicate ( ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
print ( f ( * [ 1 , 2 , 3 ] , a = 3 , b = 5 ) ) #NEWLINE#
p = subprocess . Popen ( [ sys . executable , 'thescript.py' ] , stdin = subprocess . PIPE ) #NEWLINE#
print ( '' ) #NEWLINE#
print ( 'After:' ) #NEWLINE#
list = [ i for i in stuff ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
from django . contrib . auth . models import Permission #NEWLINE#
newlst . append ( int ( i ) ) #NEWLINE#
a = np . array ( [ [ 8.0 , 9 , 7 , 0 ] , [ 0 , 0 , 5 , 6 ] ] ) #NEWLINE# a . sum ( 1 ) / ( a != 0 ) . sum ( 1 ) #NEWLINE#
return fmt . format ( ** d ) #NEWLINE#
dis . dis ( 'i/3' ) #NEWLINE#
list_one . extend ( list_two ) #NEWLINE#
ds_dt = np . sqrt ( dx_dt * dx_dt + dy_dt * dy_dt ) #NEWLINE#
earth . circle ( 150 , 2 ) #NEWLINE#
from functools import reduce #NEWLINE# val = hex ( reduce ( lambda total , wall : total << 1 | wall , walls , 0 ) ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
os . symlink ( os . path . realpath ( sys . argv [ 0 ] ) , exe_install_path ) #NEWLINE#
ax . xaxis . grid ( True , 'major' , linewidth = 2 ) #NEWLINE#
locale . format ( '%.4f' , 12345.678912 , grouping = True ) #NEWLINE#
output [ 0 ] #NEWLINE#
print ( '\\N{BLACK#SPACE#DIAMOND#SPACE#SUIT}' ) #NEWLINE# print ( chr ( 4 ) ) #NEWLINE#
s = pd . Series ( list ( 'abc' ) ) #NEWLINE#
page = request . args . get ( 'page' ) #NEWLINE#
mybar [ 1 ] . set_linewidth ( 4 ) #NEWLINE#
url = token . generate_authorize_url ( redirect_uri = 'urn:ietf:wg:oauth:2.0:oob' ) #NEWLINE#
return '(' + str ( self . exp ) + ')' #NEWLINE#
return self . _list [ i ] [ 1 ] #NEWLINE#
plt . savefig ( 'world.png' , dpi = 75 ) #NEWLINE#
self . set_picture ( picture ) #NEWLINE#
data = bytearray ( f . read ( ) ) #NEWLINE#
type . __init__ ( cls , name , bases , d ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
nums = list ( range ( 1000000 ) ) #NEWLINE#
f3 . close ( ) #NEWLINE#
eval ( 'foo(4)' , { 'foo' : foo } ) #NEWLINE#
app . logger . debug ( 'hello#SPACE#world' ) #NEWLINE#
b = { 'foo' , 'bar' } #NEWLINE# b #NEWLINE#
with gzip . open ( filename ) as f : #NEWLINE# #INDENT# reader = csv . reader ( f ) #NEWLINE#
url_for ( 'static' , filename = 'service_status.json' ) #NEWLINE#
print ( 'info2:' ) #NEWLINE#
image = image . resize ( ( width_new , height_new ) ) #NEWLINE#
parser . parse ( '10-09-03' , yearfirst = True ) #NEWLINE#
result = [ item for sublist in l for item in sublist ] #NEWLINE#
new_dict = defaultdict ( dict ) #NEWLINE#
subprocess . call ( [ 'less' , tmp_file . name ] ) #NEWLINE#
b = tf . add ( a , a ) . eval ( ) #NEWLINE#
ax . set_ylim ( [ - 2 , 2 ] ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
newcameramtx , roi = cv2 . getOptimalNewCameraMatrix ( mtx , dist , ( w , h ) , 1 , ( w , h ) ) #NEWLINE#
lst = [ 'perfect' , 'data1' , 'queryda873' , 'server187' , 'tuplip91' , 'time' ] #NEWLINE#
df = pd . DataFrame ( { 'Year' : [ '2014' , '2015' ] , 'quarter' : [ 'q1' , 'q2' ] } ) #NEWLINE# df [ 'period' ] = df [ [ 'Year' , 'quarter' ] ] . apply ( lambda x : '' . join ( x ) , axis = 1 ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
re . match ( 'hello' , testString ) #NEWLINE#
"""#SPACE#""" . join ( [ j for j , m in zip ( john . split ( ) , mary . split ( ) ) if j == m ] ) #NEWLINE#
return scipy . stats . hypergeom . sf ( 0 , N , M , Q ) #NEWLINE#
df2 = df [ df [ 'Sales' ] < s ] #NEWLINE#
lists = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] ] #NEWLINE#
s . prompt ( ) #NEWLINE#
info . setLevel ( logging . INFO ) #NEWLINE#
btn . grid ( column = 1 , row = 1 ) #NEWLINE#
func ( ) #NEWLINE#
0.0036635292592592595 , 0.0037034897788415424 , 0.007576672222222223 #NEWLINE#
fake_datetime = flexmock ( now = lambda : datetime ( year = 2012 , month = 12 , day = 12 ) ) #NEWLINE#
l = [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] ] #NEWLINE#
f . seek ( 55 ) #NEWLINE#
data #NEWLINE# data . set_index ( 'Date' ) . diff ( ) #NEWLINE#
found = word in file . read ( ) . split ( ) #NEWLINE#
isinstance ( x , X ) #NEWLINE#
plt . figure ( i ) #NEWLINE#
t = Timer ( 20 * 60 , args = [ 'something' ] , kwargs = dict ( bar = [ 'else' ] ) ) #NEWLINE#
data = np . loadtxt ( 'data.dat' ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
timer2 . start ( ) #NEWLINE#
main ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( root . winfo_geometry ( ) ) #NEWLINE#
gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) #NEWLINE#
ax . set_extent ( [ 4 , 16 , 47 , 56 ] , ccrs . PlateCarree ( ) ) #NEWLINE#
self [ key ] . append ( value ) #NEWLINE#
ax2 . set_xlabel ( 'nanometers' ) #NEWLINE#
yield locale . setlocale ( locale . LC_ALL , name ) #NEWLINE#
print ( '{0:.15f}' . format ( 1.6 ) ) #NEWLINE#
result = sudo ( 'ls#SPACE#/tmp/' ) #NEWLINE#
df2 [ 'NumOfWinsInThePast30days' ] = df2 [ 'rollsum' ] - df2 [ 'WIN1' ] #NEWLINE#
ax . set_yticks ( np . linspace ( 0 , np . pi , 3 ) ) #NEWLINE#
draw . text ( ( 10 , 10 ) , unicode_text , font = unicode_font , fill = font_color ) #NEWLINE#
bool ( re . match ( pattern , '00000' ) ) #NEWLINE#
os . kill ( int ( processId ) , signal . SIGTERM ) #NEWLINE#
df #NEWLINE#
[ ( 'INTEGER' , '45' ) , ( 'IDENTIFIER' , 'pigeons' ) , ( 'PUNCTUATION' , ',' ) , ( #NEWLINE# 'INTEGER' , '23' ) , ( 'IDENTIFIER' , 'cows' ) , ( 'PUNCTUATION' , ',' ) , ( #NEWLINE# 'INTEGER' , '11' ) , ( 'IDENTIFIER' , 'spiders' ) , ( 'PUNCTUATION' , '.' ) ] #NEWLINE#
tmp . append ( chr ( d ) ) #NEWLINE#
xedges , yedges = np . meshgrid ( xedges [ : - 1 ] , yedges [ : - 1 ] ) #NEWLINE#
reader = csv . reader ( csvfile , delimiter = ',' ) #NEWLINE#
app . config [ 'MAIL_PASSWORD' ] = os . environ . get ( 'MAIL_PASSWORD' ) #NEWLINE#
payload = { 'format' : 'json' , 'key' : 'site:dummy+type:example+group:wheel' } #NEWLINE#
mylist [ : ] = [ ] #NEWLINE#
chararray ( [ 'RL5' , 'RL5' , 'RL5' , 'RL5' , 'RL5' , 'RL5' ] , dtype = '|S3' ) #NEWLINE#
im . rotate ( 45 ) . show ( ) #NEWLINE#
print ( priv . private_decrypt ( ctxt , RSA . pkcs1_oaep_padding ) ) #NEWLINE#
sns . set_style ( 'white' ) #NEWLINE#
timestamp = datetime . strptime ( date_string , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
sns . set ( style = 'darkgrid' ) #NEWLINE#
get_ip_address ( 'eth0' ) #NEWLINE#
f = open ( 'bigfile.txt' , 'w' ) #NEWLINE#
'void' , 'ubyte' , 'moveaxis' , 'ERR_RAISE' , 'void0' , 'tri' #NEWLINE#
'diag_indices' , 'array_equal' , 'fmod' , 'True_' , 'indices' , 'loads' #NEWLINE#
'nanargmax' , 'hstack' , 'typename' , 'diag' , 'rollaxis' , 'ERR_WARN' #NEWLINE#
'polyfit' , 'version' , 'memmap' , 'nan_to_num' , 'complex64' , 'fmax' #NEWLINE#
'spacing' , 'sinh' , '__git_revision__' , 'unicode_' , 'sinc' , 'trunc' #NEWLINE#
'vstack' , 'ERR_PRINT' , 'asscalar' , 'copysign' , 'less_equal' , 'BUFSIZE' #NEWLINE#
'nditer' , 'eye' , 'kron' , 'newbuffer' , 'negative' , 'busday_offset' #NEWLINE#
'mintypecode' , 'MAXDIMS' , 'sort' , 'einsum' , 'uint0' , 'zeros_like' #NEWLINE#
if set ( [ 'A' , 'C' ] ) . issubset ( df . columns ) : #NEWLINE# #INDENT# df [ 'sum' ] = df [ 'A' ] + df [ 'C' ] #NEWLINE#
print ( numpy . random . multivariate_normal ( [ 1 , 1 ] , [ [ 0.3 , 0.2 ] , [ 0.2 , 0.2 ] ] , 100 ) ) #NEWLINE#
outer_list = [ 'one' , 'two' , 'three' ] #NEWLINE#
df = pd . read_csv ( 'test.csv' , sep = ',' ) #NEWLINE#
return Person . query ( ) . filter ( Person . guilds == self . key ) #NEWLINE#
ax1 . set_xlabel ( 'Scaleable#SPACE#axis' ) #NEWLINE#
print ( twitter . get_followers_ids ( ) [ 'ids' ] ) #NEWLINE#
regex = re . compile ( 'A' ) #NEWLINE#
return [ ( s [ 0 ] , s [ 1 ] ) for s in ( s . split ( ) for s in strings ) ] #NEWLINE#
an_int = config . getint ( 'main' , 'an_int' ) #NEWLINE#
path_list [ 0 ] = path_list [ 0 ] [ 0 ] #NEWLINE#
print ( i , j , k , v ) #NEWLINE#
np . ma . MaskedArray ( x , mask ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
plt . ylabel ( 'axis#SPACE#1' ) #NEWLINE#
r . status_code #NEWLINE#
r = re . compile ( '^\\s+' , re . MULTILINE ) #NEWLINE#
li = [ 'I#SPACE#own#SPACE#1/2#SPACE#bottle' , 'Give#SPACE#me#SPACE#3/4#SPACE#of#SPACE#the#SPACE#profit' ] #NEWLINE#
[ i . value for i in d ] #NEWLINE#
exec ( 'nohup#SPACE#/path/to/script/post_content.php#SPACE#>#SPACE#/dev/null#SPACE#2>&1#SPACE#&' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
result = df . set_index ( [ 'Z' , 'A' , 'pos' ] ) . unstack ( 'pos' ) #NEWLINE# result . rename ( columns = lambda x : '%s[%d]' % ( x [ 0 ] , x [ 1 ] + 1 ) ) . reset_index ( ) #NEWLINE#

b = do_something ( a , b ) #NEWLINE#
[ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 1 ) ] #NEWLINE#
( '^IPTV' , '/file' ) , #NEWLINE#
( '^box' , '/file' ) , #NEWLINE#
( '^QAM' , '/qam' ) , #NEWLINE#
( '.*opentv.*' , '/qam' ) , #NEWLINE#
print ( df [ [ 'Price' , 'City' , 'Quantity' ] ] [ df [ 'sale_flag' ] != 0 ] ) #NEWLINE#
x = [ True , True , True , True ] #NEWLINE#
T2 = np . einsum ( 'nij,#SPACE#il,#SPACE#kln#SPACE#->jk' , A , B , A . T ) #NEWLINE#
self . window . clear ( ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
my_list = [ 'Steve' , 'Steve' , 'Alex' , 'Ben' , 'Ben' , 'Johnny' , 'Mark' ] #NEWLINE#
match = re . search ( '1.3' , 'abc123xyz' ) #NEWLINE#
print ( root , dirs , files ) #NEWLINE#
self . f . writeframes ( output ) #NEWLINE#
{ 'password' : 'passwd' , 'user' : 'username' } #NEWLINE#
logging . getLogger ( ) . addHandler ( handler ) #NEWLINE#
print ( key , sum ( d [ key ] ) / len ( d [ key ] ) ) #NEWLINE#
s1 . encode ( 'utf-8' ) #NEWLINE#
df = combine_csvs ( dict ( files = [ 'file1.csv' , 'file2.csv' ] ) , 'output.csv' ) #NEWLINE#
process . start ( ) #NEWLINE#
zip_safe = False #NEWLINE#
return mean ( arr [ k + 1 : n - k ] ) #NEWLINE#
self . send_header ( 'Location' , 'http://www.example.com' ) #NEWLINE#
hax2 . set_position ( [ 0.1 , 0.1 , 0.8 , 0.8 ] ) #NEWLINE#
plt . legend ( ) #NEWLINE#
a = np . array ( [ 1.0 , 2 , 6 , 2 , 1 , 7 ] ) #NEWLINE#
model . add ( TimeDistributed ( Dense ( 1 , activation = 'sigmoid' ) ) ) #NEWLINE#
help ( sys . displayhook ) #NEWLINE#
do_the_stuff ( key , value ) #NEWLINE#
print ( ( 'set' , self . varname , self . index ) ) #NEWLINE#
if '' in ( a , b ) : #NEWLINE# #INDENT# pass #NEWLINE#
inv_map = { v : k for k , v in list ( my_map . items ( ) ) } #NEWLINE#
df . AVG_MINUTES = df [ [ 'HOUR' , 'AVG_MINUTES' ] ] . values . tolist ( ) #NEWLINE#
sheet1 . write ( i , 1 , e ) #NEWLINE#
print ( 'covered_list=1' ) #NEWLINE#
print ( 'covered_list#SPACE#not#SPACE#0#SPACE#or#SPACE#1' ) #NEWLINE#
g = open ( 'test1.txt' , 'w' ) #NEWLINE#
wn . synsets ( 'small' ) #NEWLINE#
f . seek ( - 4 , 2 ) #NEWLINE#
logging . warn ( 'Something#SPACE#happened!' ) #NEWLINE#
os . setsid ( ) #NEWLINE#
client . sendMessage ( message . encode ( 'utf8' ) ) #NEWLINE#
return ( np . matrix ( '1#SPACE#1;#SPACE#1#SPACE#0' , dtype = np . object ) ** n ) . item ( 1 ) #NEWLINE#
pd . DataFrame ( df [ 'categories' ] . tolist ( ) ) . stack ( ) . value_counts ( ) #NEWLINE#
model = model . fit ( X_train , y_train ) #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
todos = Todo . all ( ) . filter ( 'author#SPACE#=#SPACE#' , users . get_current_user ( ) . nickname ( ) ) #NEWLINE#
child . sendline ( 'ls\r' ) #NEWLINE#
dis . dis ( function . __code__ . co_consts [ 1 ] ) #NEWLINE#
print ( "Today's#SPACE#date#SPACE#is#SPACE#%r#SPACE#..." % x ) #NEWLINE#
log . info ( 'whatever' ) #NEWLINE#
bisect . insort ( my_list , 'query#SPACE#for#SPACE#%s#SPACE#data' % item ) #NEWLINE#
a = numpy . array ( [ 'apples' , 'foobar' , 'cowboy' ] ) #NEWLINE#
for line in file : #NEWLINE# #INDENT# result = re . finditer ( regex , line ) #NEWLINE#
output . write ( ';' . join ( list ( res [ 0 ] . keys ( ) ) ) + '\n' ) #NEWLINE#
Example ( root ) . pack ( fill = 'both' , expand = True ) #NEWLINE#
logger = logging . getLogger ( 'BBProposalGenerator' ) #NEWLINE# logger . setLevel ( logging . INFO ) #NEWLINE#
pb . save ( 'path.png' ) #NEWLINE#
check_range ( '/api_vod_asset/v0/assets/5' , [ 0 , 3 ] ) #NEWLINE#
request . session [ 'token' ] = token #NEWLINE#
import lxml . etree as ET #NEWLINE#
return self . __dict__ [ '_odict' ] [ value ] #NEWLINE#
f = open ( 'filename.txt' , 'r' ) #NEWLINE#
br . load ( url ) #NEWLINE#
min ( allowedList , key = sortedList . index ) #NEWLINE#
varargMethod ( 'Hello' , 'World' , '!' ) #NEWLINE#
tekstboks = tk . Entry ( root , textvariable = ordinn ) #NEWLINE#
tekstboks2 = tk . Entry ( root , textvariable = bokstinn ) #NEWLINE#
data [ i [ 'name' ] ] . append ( i [ 'score' ] ) #NEWLINE#
"""3.0.3""" #NEWLINE#
fig , axes = plt . subplots ( nrows = 4 , sharex = True ) #NEWLINE#
all ( x . isalpha ( ) for x in [ 'abc' , 'def' ] ) #NEWLINE# all ( x . isalpha ( ) for x in [ 'ab1' , 'def' ] ) #NEWLINE#
[ '36.1200000' , '37.1500000' , '39.3100000' , '38.1000000' ] , #NEWLINE#
[ '82.1000000' , '82.0900000' , '76.0200000' , '77.7000000' ] , #NEWLINE#
print ( isEnglish ( 'English' ) ) #NEWLINE#
print ( isEnglish ( 'how#SPACE#about#SPACE#this#SPACE#one#SPACE#:#SPACE#é\x80\x9a#SPACE#asfÞ¦' ) ) #NEWLINE#
ax . set_xlabel ( 'Hour' , fontsize = 12 ) #NEWLINE#
return [ '/usr/lib/libpython3.4.dll.a' , '/usr/include/python3.4' ] #NEWLINE#
find_nearest_above ( np . array ( [ 0.0 , 1 , 1.4 , 2 ] ) , 3 ) #NEWLINE#
ax . imshow ( data , interpolation = 'none' , extent = [ 0 , 1.5 * np . pi , 0 , np . pi ] ) #NEWLINE#
m = re . match ( regex , line ) #NEWLINE#
y = dict ( list ( x . items ( ) ) + list ( { ( 2 ) : 3 } . items ( ) ) ) #NEWLINE#
s . bind ( ( host , port ) ) #NEWLINE#
if not myList : #NEWLINE# #INDENT# pass #NEWLINE#
r = requests . get ( 'https://www.python.org/' ) #NEWLINE#
ax1 = plt . subplot2grid ( ( 1 , 1 ) , ( 0 , 0 ) ) #NEWLINE#
compressed = dict ( [ ( x [ 'url' ] , int ( x [ 'rank' ] . replace ( ',' , '' ) ) ) for x in ranks ] ) #NEWLINE#
return [ element for element in people if element [ 'name' ] == name ] #NEWLINE#
data = [ ] #NEWLINE#
p = Popen ( [ 'xsel' , '-pi' ] , stdin = PIPE ) #NEWLINE#
from datetime import datetime #NEWLINE#
myFile = open ( 'today' , 'r' ) #NEWLINE#
worksheet . write ( row , col + 1 , item ) #NEWLINE#
my_date = date . today ( ) - timedelta ( days = days_to_substract ) #NEWLINE#
print ( '\\N{COPYRIGHT#SPACE#SIGN}' ) #NEWLINE#
super ( admin . ModelAdmin , self ) . __init__ ( model , admin_site ) #NEWLINE#
nx . draw ( graph , pos = nx . get_node_attributes ( graph , 'Position' ) ) #NEWLINE#
"""Midpoint#SPACE#of#SPACE#start#SPACE#and#SPACE#end#SPACE#strings""" #NEWLINE#
datetime . datetime ( t . year , t . month , t . day ) #NEWLINE#
a [ 3 ] = 4.9 #NEWLINE#
struct . pack ( '<L' , addr_long ) #NEWLINE#
df . interpolate ( method = 'nearest' , xis = 0 , inplace = True ) #NEWLINE#
return pd . Series ( b [ 1 ] , df . columns [ 1 : ] , name = 'Beta' ) #NEWLINE#
jQuery ( '#list' ) . jqGrid ( 'navGrid' , '#pager' ) #NEWLINE#
print ( '{0:%m}' . format ( a ) ) #NEWLINE#
np . arange ( 10 ) [ 10 : : - 1 ] #NEWLINE#
soup = bs4 . BeautifulSoup ( YOUR_CONTENT ) #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
print ( int ( '8' + str ( x ) ) == 8 * int ( str ( x ) + '8' ) ) #NEWLINE#
logger . debug ( 'this#SPACE#is#SPACE#a#SPACE#DEBUG#SPACE#message' ) #NEWLINE#
return int ( '' . join ( octets [ 0 : 2 ] ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
import csv #NEWLINE#
get_tags = soup . findAll ( re . compile ( '(hr|strong)' ) ) #NEWLINE#
host . set_xlim ( 0 , 2 ) #NEWLINE#
r = re . compile ( 'some[pattern]' ) #NEWLINE#
raise argparse . ArgumentTypeError ( 'Duplicate#SPACE#OuterIPs#SPACE#found' ) #NEWLINE#
window . setAttribute ( QtCore . Qt . WA_DeleteOnClose ) #NEWLINE#
INTERNAL_IPS = '127.0.0.1' , #NEWLINE#
df = df . drop ( 'TimeStamp' , axis = 1 ) #NEWLINE# split = pd . concat ( [ df , TScolumns ] , axis = 1 ) #NEWLINE#
plt . setp ( labels , rotation = 0 ) #NEWLINE#
file2 . write ( 'bbb' ) #NEWLINE#
self . root . mainloop ( ) #NEWLINE#
with open ( 'file.txt' , 'r' ) as fin : #NEWLINE# #INDENT# data = fin . read ( ) . splitlines ( True ) #NEWLINE# with open ( 'file.txt' , 'w' ) as fout : #NEWLINE# #INDENT# fout . writelines ( data [ 1 : ] ) #NEWLINE#
s . decode ( 'utf-8' ) #NEWLINE#
foo = bar ( foo ) #NEWLINE#
'y' , 'yes' , 't' , 'true' , 'on' , '1' #NEWLINE# 'n' , 'no' , 'f' , 'false' , 'off' , '0' #NEWLINE#
browser = mechanize . Browser ( ) #NEWLINE#
return 'You#SPACE#got#SPACE#it#SPACE#right' #NEWLINE#
gb1 . assign_to_a ( [ 1 , 2 ] ) #NEWLINE#
plt . close ( fig ) #NEWLINE#
df2 = pd . concat ( [ df ] * 10000 ) #NEWLINE#
plt . figure ( figsize = ( 3 , 3 ) ) #NEWLINE#
print ( [ x . encode ( 'ascii' ) for x in my_list ] ) #NEWLINE#
df . groupby ( level = 0 ) . cumcount ( ) #NEWLINE#
np . bitwise_and ( df [ 'data' ] , mask ) #NEWLINE#
print ( os . ttyname ( sys . stdin . fileno ( ) ) ) #NEWLINE#
list_two = [ 'A' , 'B' , 'C' , 'D' , 'A' , 'E' , 'F' , 'G' , 'H' , 'Word1' , 'Word2' ] #NEWLINE#
bins . append ( int ( df . val1 . max ( ) + 1 ) ) #NEWLINE#
a = array . array ( 'L' ) #NEWLINE#
y = np . concatenate ( ( firstvals , y , lastvals ) ) #NEWLINE#
output , err = p . communicate ( ) #NEWLINE#
a = [ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) ] #NEWLINE#
df [ i ] = df [ i ] . map ( '${:,.2f}' . format ) #NEWLINE#
cur . execute ( 'select#SPACE#order_no,#SPACE#amount#SPACE#from#SPACE#orders#SPACE#where#SPACE#cust_id=123' ) #NEWLINE#
ax . set_yticklabels ( [ '$0$' , '$\\frac{\\pi}{2}$' , '$\\pi$' ] , fontsize = 'x-large' ) #NEWLINE#
np . genfromtxt ( csv_file , dtype = '|S12' , delimiter = ',' ) #NEWLINE#
unicodedata . normalize ( 'NFD' , myfoo ) . encode ( 'ascii' , 'ignore' ) #NEWLINE#
self . __class__ . __name__ = '' #NEWLINE#
plt . quiver ( X , Y , Z2 , width = 0.01 , linewidth = 1 ) #NEWLINE#
return v . iloc [ - 1 ] #NEWLINE#
parser = etree . XMLParser ( schema = oaischema ) #NEWLINE#
[ 2 , 3 , 1 ] #NEWLINE#
plot_events ( x , y ) #NEWLINE#
np . random . seed ( 314 ) #NEWLINE#
sys . exit ( ) #NEWLINE#
b = a . tolist ( ) #NEWLINE#
mytext = self . textEdit . toPlainText ( ) #NEWLINE#
plt . axes ( ) . set_aspect ( 'auto' ) #NEWLINE#
info [ 0 ] [ 0 ] == 1 #NEWLINE#
sortedlist ( [ 'a' , 'b' , 'c' , 'e' , 'f' ] ) #NEWLINE#
log . setLevel ( logging . ERROR ) #NEWLINE#
driver . get ( url ) #NEWLINE#
sessionmaker ( bind = self . engine , autocommit = True ) #NEWLINE#
parser . add_argument ( '--default' ) #NEWLINE#
"""(?=\\n(?:ADDITIONAL|Additional)\\n)[\\s\\S]+?(?<=\\n(?:Languages|LANGUAGES)\\b)""" #NEWLINE#
return all ( recursively_empty ( c ) for c in e . getchildren ( ) ) #NEWLINE#
group . add_argument ( '--arg1' ) #NEWLINE#
df = pd . concat ( [ df ] * 1000 , axis = 1 ) #NEWLINE#
a = data [ data [ 'cond' ] == 1 ] . shape [ 0 ] #NEWLINE#
link . retrbinary ( 'RETR#SPACE#' + filename , downloaded . write , downloaded . tell ( ) ) #NEWLINE#
p1 = Popen ( [ 'dmesg' ] , stdout = PIPE ) #NEWLINE#
capitals_dict = { 'USA' : 'Washington' , 'Russia' : 'Moscow' , 'Japan' : 'Tokyo' } #NEWLINE#
from companynamespace . projectpackage import somemodule as module_shortname #NEWLINE#
form = MyModelForm ( instance = my_record ) #NEWLINE#
assert np . all ( a == b ) #NEWLINE#
req = urllib . request . Request ( url , data ) #NEWLINE#
( data . T - vector ) . T #NEWLINE#
raise Exception ( 'Failed#SPACE#to#SPACE#create#SPACE#RDF.Parser#SPACE#raptor' ) #NEWLINE#
re . sub ( '0x([0-9a-f]+)' , lambda match : '0x' + match . group ( 1 ) . upper ( ) , '0xfa' ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) #NEWLINE# s . bind ( ( ADDR , PORT ) ) #NEWLINE#
df . query ( 'Col1#SPACE#in#SPACE#@search_list#SPACE#and#SPACE#Col4#SPACE#>#SPACE#40' ) #NEWLINE#
s3 = boto . connect_s3 ( ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
axes . tick_params ( axis = 'y' , direction = 'out' ) #NEWLINE#
super ( A_2 , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ts = pd . Series ( zip ( * my_list ) ) #NEWLINE#
h . funcB ( ) #NEWLINE#
h . funcC ( ) #NEWLINE#
if any ( s . lower ( ) == 'foo' for s in list ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( 'The#SPACE#problem#SPACE#is#SPACE#%s' % problem [ 1 ] ) #NEWLINE#
self . log . info ( 'Enqueued#SPACE#message:#SPACE#%s' , message ) #NEWLINE#
self . log . info ( 'Received#SPACE#message:#SPACE#%s' , message ) #NEWLINE#
distance [ 0 ] [ 0 ] [ 0 ] = 1 #NEWLINE#
self . fields [ 'field5_text' ] . initial = text #NEWLINE#
df [ 2 ] . plot ( ax = axes [ 1 , 0 ] ) #NEWLINE#
the_table . set_fontsize ( 24 ) #NEWLINE#
image . thumbnail ( maxsize , PIL . Image . ANTIALIAS ) #NEWLINE#
comp = np . dstack ( complist ) . sum ( - 1 ) #NEWLINE#
data = self . request . recv ( ) #NEWLINE#
print ( my_string . format ( ** d ) ) #NEWLINE#
map ( str . lower , [ 'A' , 'B' , 'C' ] ) #NEWLINE#
from django . db import models #NEWLINE#
"""hello""" . translate ( char_incrementer ) #NEWLINE#
pd . read_csv ( 'whitespace.csv' , header = None , delimiter = '\\s+' ) #NEWLINE#
return { 'domain' : { 'block_area' : domain } } #NEWLINE#
printf ( '%f' , f ( i ) ) #NEWLINE#
matched = [ c for c in cmds if c . startswith ( s ) ] #NEWLINE#
np . unravel_index ( np . ravel_multi_index ( ( 10 , 52 ) , arr2 . shape ) , arr1 . shape ) #NEWLINE#
print ( hb . norm . vmin , hb . norm . vmax ) #NEWLINE#
np . split ( lst , np . cumsum ( sec ) ) #NEWLINE#
self . get_user_from_cookie ( ) #NEWLINE#
time . sleep ( 0.01 ) #NEWLINE#
ranges . append ( ( 2 , 10 ) ) #NEWLINE#
return { <STR0> : <STR0> } #NEWLINE#
np . prod ( B , axis = 1 ) [ : , ( None ) ] / ( B + np . where ( B == 0 , 1 , 0 ) ) #NEWLINE#
r = requests . get ( url ) #NEWLINE#
self . redirect ( '/main/new' ) #NEWLINE#
parser . add_argument ( 'logs-dir' , help = 'Directory#SPACE#with#SPACE#.log#SPACE#and#SPACE#.log.gz#SPACE#files' ) #NEWLINE#
array1 = itertools . chain ( array1 [ : - 1 ] , array2 ) #NEWLINE#
r . json ( ) #NEWLINE#
cursor . execute ( "INSERT#SPACE#INTO#SPACE#table_name#SPACE#('column1',#SPACE#'column2')#SPACE#VALUES#SPACE#(?,#SPACE#?)" , #NEWLINE# ( 'value1' , 'value2' ) ) #NEWLINE#
assert get_words ( [ 'o' , 'c' , 'a' , 't' ] ) == [ 'cat' , 'coat' ] #NEWLINE#
pool = Pool ( ) #NEWLINE#
self . num = self . num + 1 #NEWLINE#
o . append ( m . group ( 1 ) ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , list ( range ( 10 ) ) , 'o' ) #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
django . setup ( ) #NEWLINE#
finalimage = ImageChops . lighter ( finalimage , currentimage ) #NEWLINE#
print ( 'Checking#SPACE#the#SPACE#hour...' ) #NEWLINE#
print ( 'twitter#SPACE#process#SPACE#has#SPACE#benn#SPACE#terminated...' ) #NEWLINE#
[ ( 5 , 0 ) , ( 8 , 2 ) ] #NEWLINE#
mask = np . isnan ( data ) #NEWLINE#
my_div = x . xpath ( './/div[@id=%s]' % div_name ) [ 0 ] #NEWLINE#
set ( [ 1 , 2 , 3 , 45 , 46 , 77 , 48 , 49 , 50 , 51 ] ) #NEWLINE#
plt . plot ( xp , yp , 'b--' ) #NEWLINE#
print ( '%s-%s-%s' % ( year , m , i ) ) #NEWLINE#
stdin , stdout , stderr = client . exec_command ( 'ls#SPACE#-l' ) #NEWLINE#
plt . xlabel ( 'xlabel' ) #NEWLINE#
plt . show ( ) #NEWLINE#
loop . close ( ) #NEWLINE#
plt . subplot ( 2 , 1 , 2 ) #NEWLINE#
logging . getLogger ( 'twisted' ) . setLevel ( logging . CRITICAL ) #NEWLINE#
df_test . reindex ( idx ) #NEWLINE#
list ( itertools . islice ( fib ( ) , 10 ) ) #NEWLINE#
print ( np . trapz ( counts , bins ) ) #NEWLINE#
print ( df . groupby ( [ 'A' , 'B' ] , as_index = False ) [ 'count' ] . sum ( ) ) #NEWLINE#
gtk . main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
tuple_list = [ ( 1 , 'a' ) , ( 2 , 'b' ) , ( 3 , 'c' ) ] #NEWLINE# [ x [ 0 ] for x in tuple_list ] #NEWLINE#
conn . request ( 'GET' , '/' ) #NEWLINE#
[ k for k , v in sorted ( list ( dct . items ( ) ) , key = lambda p : p [ 1 ] , reverse = True ) ] #NEWLINE#
pd . read_json ( jsonfile , lines = True ) #NEWLINE#
test . Cleanup ( p ) #NEWLINE#
self . fig . savefig ( 'myplot.png' , dpi = 300 ) #NEWLINE#
print ( '[' + mail [ 'From' ] + ']#SPACE#:' + mail [ 'Subject' ] ) #NEWLINE#
main ( ) #NEWLINE#
match = re . search ( 'href=[\\\'"]?([^\\\'"#SPACE#>]+)' , s ) #NEWLINE#
words = [ 'hand' , 'marvelous' , 'supercalifragilisticexpialidocious' ] #NEWLINE#
module2 = __import__ ( 'module' ) #NEWLINE#
self . socket . sendall ( image_data ) #NEWLINE#
'django.contrib.auth.context_processors.auth' , 'django.core.context_processors.debug' , 'django.core.context_processors.i18n' , 'django.core.context_processors.media' , 'django.core.context_processors.static' , 'django.contrib.messages.context_processors.messages' #NEWLINE#
self . response . write ( current . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S#SPACE#%z' ) ) #NEWLINE#
return line == '\n' #NEWLINE#
print ( np . allclose ( r [ 0 ] , k ) ) #NEWLINE#
re . split ( '[aeiou]+' , 'concertation' , flags = re . I ) #NEWLINE#
print ( a [ i : j ] ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
return HttpResponse ( something ) #NEWLINE#
print ( '|' . join ( data ) ) #NEWLINE#
Doc . docimage_set . all ( ) #NEWLINE#
labels . append ( line . strip ( '\n' ) . split ( '@' ) [ 1 ] + '<br>\n' ) #NEWLINE#
df . columns = pd . to_datetime ( df . columns ) #NEWLINE#
L = [ int ( '%d%d%d' % ( x , y , x ) ) for x in range ( 1 , 10 ) for y in range ( 10 ) ] #NEWLINE# L #NEWLINE#
r = float ( s ) #NEWLINE#
request . POST . dict ( ) #NEWLINE#
return '' . join ( [ chr ( int ( p , 2 ) ) for p in wrap ( binary , 8 ) ] ) #NEWLINE#
print ( pretty_markup ) #NEWLINE#
sheet = book . sheet_by_index ( index ) #NEWLINE#
print_all ( x [ 'uid' ] for x in users ) #NEWLINE#
return HttpResponse ( return_str ) #NEWLINE#
np . split ( a , [ int ( 0.8 * len ( a ) ) , int ( 0.9 * len ( a ) ) ] ) #NEWLINE#
index2 = np . array ( [ [ 0 , 1 ] , [ 0 , 1 ] ] ) #NEWLINE#
sys . modules [ 'm' ] = m #NEWLINE# sys . modules [ 'm' ] #NEWLINE#
h5file . close ( ) #NEWLINE#
df = pd . DataFrame ( { 'isfixed' : [ True , False , True ] } ) #NEWLINE#
ax . xaxis . set_major_formatter ( matplotlib . dates . DateFormatter ( '%y%b\n%d' ) ) #NEWLINE#
print ( i , '==>' , min ( list_2 , key = lambda j : levenshtein ( i , j ) ) ) #NEWLINE#
pd . read_csv ( StringIO ( s ) , skiprows = 1 , header = None ) #NEWLINE#
t = datetime . time ( 13 , 5 ) #NEWLINE#
from mpl_toolkits . mplot3d import axes3d #NEWLINE#
socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
'#%02x%02x%02x' % ( 0 , - 1 , 9999 ) #NEWLINE#
newcols = df . apply ( lambdafunc , axis = 1 ) #NEWLINE#
return time . mktime ( time . strptime ( my_str , '%m/%d#SPACE#%I:%M#SPACE#%p' ) ) #NEWLINE#
cur . execute ( 'select#SPACE#timecol#SPACE#from#SPACE#test#SPACE#where#SPACE#timecol#SPACE#<#SPACE#?' , [ DT . time ( 8 , 0 , 0 ) ] ) #NEWLINE#
array_of_list_of_tuples = array ( list_of_tuples ) #NEWLINE#
names = [ 'll' , 'll' , 'hl' , 'hl' , 'hl' , 'LL' , 'LL' , 'll' , 'LL' , 'HL' , 'HL' , #NEWLINE# 'HL' , 'll' ] #NEWLINE#
self . update_clock ( ) #NEWLINE#
return np . where ( a < b * 10 , a * 2 , - a ) #NEWLINE#
ax . contour ( xi , yi , zi , 15 , colors = 'grey' , zorder = 2 ) #NEWLINE#
B = np . array ( A ) #NEWLINE# B #NEWLINE#
html = """#SPACE##SPACE##SPACE##SPACE#<li><span#SPACE#class="plaincharacterwrap#SPACE#break">#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#Zazzafooky#SPACE#but#SPACE#one#SPACE#two#SPACE#three!#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#</span></li>#NEWLINE#<li><span#SPACE#class="plaincharacterwrap#SPACE#break">#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#Zazzafooky2#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#</span></li>#NEWLINE#<li><span#SPACE#class="plaincharacterwrap#SPACE#break">#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#Zazzafooky3#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#</span></li>#NEWLINE#""" #NEWLINE# html = '' . join ( line . strip ( ) for line in html . split ( '\n' ) ) #NEWLINE# html #NEWLINE#
csv_df = csv_df . groupby ( csv_df . columns , axis = 1 ) . mean ( ) #NEWLINE#
baz ( ( 3 , 1 ) ) #NEWLINE#
module = sys . modules [ func . __module__ ] #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE# [ 1 , 2 , 3 , 4 ] #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
return self . parent_model . objects . get ( pk = resolved . args [ 0 ] ) #NEWLINE#
module_3 . py #NEWLINE#
imgplot = plt . pcolormesh ( lum_img , cmap = cmaps . viridis ) #NEWLINE#
a = create_matrix ( 8 , 8 ) #NEWLINE#
array ( [ [ 'y' , 'o' , 'u' ] ] , dtype = '<U1' ) #NEWLINE#
np . array ( [ [ [ 1 , 2 ] , [ 3 ] ] , [ 1 , 2 ] ] , dtype = object ) #NEWLINE# _ . shape #NEWLINE#
print ( settings . CONSTANT2 ) #NEWLINE#
pygame . mixer . music . play ( ) #NEWLINE#
return '' . join ( '' . join ( y for y in x if y is not None ) for x in r ) #NEWLINE#
h . Do ( ) #NEWLINE#
jpgtxt = open ( 'in.jpg' , 'rb' ) . read ( ) . encode ( 'base64' ) . replace ( '\n' , '' ) #NEWLINE#
file . write ( line ) #NEWLINE#
a . mainloop ( ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
plt . ylabel ( 'Y-Axis' ) #NEWLINE#
mydict . update ( myitem ) #NEWLINE#
df . loc [ '2015-04-25' : ] #NEWLINE#
return np . tensordot ( gggg , T , axes ) #NEWLINE#
chars . append ( chr ( int ( '' . join ( [ str ( bit ) for bit in byte ] ) , 2 ) ) ) #NEWLINE#
self . setWindowTitle ( 'Child#SPACE#Window!' ) #NEWLINE#
Py_INCREF ( v ) #NEWLINE#
return send_file ( file_name , as_attachment = True ) #NEWLINE#
f . __defaults__ #NEWLINE#
result = np . clip ( arr , 0 , 255 ) #NEWLINE#
return True #NEWLINE#
ax . axis ( [ - 0.2 , 1.2 , - 0.2 , 1.2 ] ) #NEWLINE#
render_to_response ( template , context ) #NEWLINE#
activate_this = '/path/to/env/bin/activate_this.py' #NEWLINE# exec ( compile ( open ( activate_this ) . read ( ) , activate_this , 'exec' ) , dict ( #NEWLINE# __file__ = activate_this ) ) #NEWLINE#
from functools import reduce #NEWLINE# unique_values = list ( reduce ( lambda i , j : set ( i ) | set ( j ) , array ) ) #NEWLINE#
my_anim = animation . ArtistAnimation ( fig , myimages , interval = 100 ) #NEWLINE#
return ctypes . string_at ( self . _buffer , self . size ) #NEWLINE#
- autobus #NEWLINE#
query . filter ( Cls . field . in_ ( terms ) ) #NEWLINE#
"""{}#SPACE#{:{w}.{p}f}#SPACE#{:{w}.{p}f}#SPACE#{:{w}.{p}f}""" . format ( a , x , y , z , w = 13 , p = 6 ) #NEWLINE#
b . grid ( row = 1 , column = 3 ) #NEWLINE#
print ( response . url ) #NEWLINE#
a = 'hello' #NEWLINE# a = a [ : 2 ] + 'm' + a [ 3 : ] #NEWLINE#
ax . scatter ( xflat , y , z ) #NEWLINE#
[ 'cccc' , 'aaa' , 'ss' ] #NEWLINE#
s = 'This#SPACE#string#SPACE#has#SPACE#\\n\\r#SPACE#whitespace' #NEWLINE#
z = np . array ( [ complex ( c . m_x , c . m_y ) for c in cells ] ) #NEWLINE#
arr [ 1 , 0 ] #NEWLINE#
setup ( cmdclass = { 'my_command' : MyCommand } ) #NEWLINE#
s . groupby ( s . shift ( ) . notnull ( ) . cumsum ( ) ) . transform ( lambda g : g [ - 1 ] / g . size ) #NEWLINE#
canvas . create_oval ( randint ( 0 , 399 ) , randint ( 0 , 299 ) , 15 , 15 , fill = 'red' ) #NEWLINE#
logging . debug ( line ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
print ( '©' ) #NEWLINE# print ( '©' ) #NEWLINE#
print ( '\\u00a9' ) #NEWLINE# print ( '\\N{COPYRIGHT#SPACE#SIGN}' ) #NEWLINE#
tree . write ( 'example.xml' , encoding = 'utf-8' , xml_declaration = True ) #NEWLINE#
plt . xlabel ( 'False#SPACE#Positive#SPACE#Rate' ) #NEWLINE#
pprint ( ddiff , indent = 2 ) #NEWLINE#
a = 'hello' #NEWLINE#
PLT . show ( ) #NEWLINE#
df . query ( qry ) #NEWLINE#
s = 'The#SPACE#dog#SPACE#ran' #NEWLINE# """#SPACE#""" . join ( w [ : : - 1 ] for w in s . split ( ) ) #NEWLINE#
series = pd . Series ( [ 1 , 2 ] , index = [ 'a' , 'b' ] ) #NEWLINE# df = pd . DataFrame ( [ series ] ) #NEWLINE#
loop . run_forever ( ) #NEWLINE#
np . random . shuffle ( ones ) #NEWLINE#
print ( '%05d' % number ) #NEWLINE#
df . index . values #NEWLINE#
self . hide ( ) #NEWLINE#
a += 'mom' #NEWLINE#
foo [ 1 , 2 ] #NEWLINE#
print ( '' . join ( replaced ) ) #NEWLINE#
print ( 'doing' ) #NEWLINE#
im = Image . open ( 'dead_parrot.jpg' ) #NEWLINE#
plt . imshow ( a , cmap = 'hot' , interpolation = 'nearest' ) #NEWLINE# plt . show ( ) #NEWLINE#
fig = plt . figure ( figsize = ( 4 , 4 ) ) #NEWLINE#
[ 'foo' , 'foo' ] #NEWLINE#
c . execute ( 'INSERT#SPACE#INTO#SPACE#distro#SPACE#(name)#SPACE#VALUES#SPACE#(?)' , ( name , ) ) #NEWLINE#
browser . runjs ( 'AgreeClick();' ) #NEWLINE#
{ 'Hello' : 1 , 'world' : 2 } #NEWLINE#
print ( 'Muxing' ) #NEWLINE#
print ( '..' ) #NEWLINE#
while True : #NEWLINE# #INDENT# pass #NEWLINE#
df [ 'closest' ] = idx . index . map ( lambda x : df . ix [ x ] [ idx . ix [ x ] ] ) #NEWLINE#
p1 . add_argument ( 'foo' , action = QuitAction , nargs = '?' , help = argparse . SUPPRESS ) #NEWLINE#
a = a [ : : - 1 ] #NEWLINE#
round_down ( 10 , 10 ) #NEWLINE#
return [ j for i in lst for j in ( replace_with if i == to_replace else [ i ] ) ] #NEWLINE#
d = { 'A' : [ 1 , 5 ] , 'B' : [ 6 , 7 ] } #NEWLINE#
[ sublist for sublist in list_ if not ( sublist [ 1 ] == 1 and sublist [ 3 ] != 1 ) ] #NEWLINE#
plt . gca ( ) . add_artist ( leg2 ) #NEWLINE#
plt . gca ( ) . add_artist ( leg3 ) #NEWLINE#
'Float:#SPACE#%f.#SPACE#Repr:#SPACE#%r#SPACE#Str:#SPACE#%s' % ( num , num , num ) #NEWLINE#
self . fig . canvas . draw ( ) #NEWLINE#
print ( response . url ) #NEWLINE#
def distance ( p1 , p2 ) : #NEWLINE# #INDENT# return math . sqrt ( ( p1 [ 0 ] - p2 [ 0 ] ) ** 2 + ( p1 [ 1 ] - p2 [ 1 ] ) ** 2 ) #NEWLINE#
np . array ( [ [ 1.0 , 2 , 3 , 4 , 5 ] , [ 5 , 6 , 7 , 8 , 9 ] , [ - 0.5 , 2.5 , - 2 , 100 , 2 ] ] ) , #NEWLINE#
print ( sum ( itgt ( * list ( range ( 0 , len ( l ) , 2 ) ) ) ( l ) ) - sum ( itgt ( * list ( range ( 1 , #NEWLINE# len ( l ) , 2 ) ) ) ( l ) ) ) #NEWLINE#
print ( 'fun3' ) #NEWLINE#
plt . gcf ( ) . set_dpi ( FIGDPI ) #NEWLINE#
print ( 'You#SPACE#exist!' ) #NEWLINE#
print ( '%s#SPACE#=#SPACE#%s' % ( k , v ) ) #NEWLINE#
cutoffs . searchsorted ( 0.9723114393023948 ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
locate ( 'datetime.date' ) #NEWLINE#
merger . append ( PdfFileReader ( file ( filename , 'rb' ) ) ) #NEWLINE#
a [ ... , 0 ] . flatten ( ) #NEWLINE#
a [ 2 , 0 ] + a [ 2 , 1 ] + a [ 2 , 3 ] + a [ 2 , 4 ] #NEWLINE#
( a + 1 ) % 2 #NEWLINE#
child . expect ( '.*assword:' ) #NEWLINE#
[ '#SPACE#' . join ( i ) for i in product ( list1 , list2 , list3 ) ] #NEWLINE#
[ sum ( x ) for x in zip ( ( 1 , 2 , 3 ) , ( 10 , 20 , 30 ) , ( 100 , 200 , 300 ) ) ] #NEWLINE#
df = pd . read_sql ( querystring , cnxn , params = orders ) #NEWLINE#
auth_base64 = auth_base64 . decode ( 'utf-8' ) . replace ( '\n' , '' ) #NEWLINE#
print ( time . localtime ( ) ) #NEWLINE#
print ( tostring ( root ) ) #NEWLINE#
numberB = input ( 'Enter#SPACE#your#SPACE#second#SPACE#number:#SPACE#' ) #NEWLINE#
ax . set_title ( title ) #NEWLINE#
def way5 ( theList , theDict ) : #NEWLINE# #INDENT# return list ( set ( theList ) . intersection ( theDict ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 100 , 1000 ] , 'b' : [ 200 , 2000 ] , 'c' : [ 300 , 3000 ] } ) #NEWLINE# df #NEWLINE#
self . glade . connect_signals ( self ) #NEWLINE#
return np . linalg . norm ( x - y ) < np . linalg . norm ( sx + sy ) #NEWLINE#
ax1 . plot ( t , s ) #NEWLINE#
a = df . iloc [ : , 1 : ] #NEWLINE#
ax = plt . subplot ( 111 , polar = True ) #NEWLINE#
data = render_template ( path , ** context ) #NEWLINE#
arr = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) [ : , ( None ) ] #NEWLINE#
print ( 'bar' ) #NEWLINE#
wordcount = Counter ( file . read ( ) . split ( ) ) #NEWLINE#
img1 . save ( '/tmp/img1.png' ) #NEWLINE#
transport = ssh . get_transport ( ) #NEWLINE#
from google . appengine . ext import webapp #NEWLINE#
[ j for j in range ( 10 ) if 3 < j < 8 ] #NEWLINE#
s . get ( url ) #NEWLINE#
table . set_fontsize ( 14 ) #NEWLINE#
totalist [ ( totalist [ : , : 2 ] == [ 'A' , 'B' ] ) . all ( axis = 1 ) ] #NEWLINE#
writer . save ( ) #NEWLINE#
for j in range ( 0 , 400 ) : #NEWLINE# #INDENT# transmission_array . append ( 0 ) #NEWLINE#
print ( [ l [ 0 ] . strip ( ) for l in re_data_fields . findall ( line ) ] ) #NEWLINE#
retcode = p . wait ( ) #NEWLINE#
ZipFile . namelist ( ) #NEWLINE#
m = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] #NEWLINE# d = { x : y for x , y in zip ( m [ : : 2 ] , m [ 1 : : 2 ] ) } #NEWLINE#
data . view ( 'S2' ) . ravel ( ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
x = [ 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 ] #NEWLINE#
files = glob . glob ( '*.bak' ) #NEWLINE#
A = csr_matrix ( ( data , ( row , col ) ) ) #NEWLINE#
self . _socket . sendto ( message , self . _dest ) #NEWLINE#
call_command ( 'syncdb' ) #NEWLINE#
print ( ( x , '#SPACE#is#SPACE#less#SPACE#than#SPACE#equal#SPACE#to#SPACE#2' ) ) #NEWLINE#
print ( child . tag , child . text ) #NEWLINE#
self . render_template ( [ template ] , ** context ) #NEWLINE#
TestApp ( ) . run ( ) #NEWLINE#
im . crop ( ( 0 , 0 , width , l_start_y + 2 ) ) . save ( sys . argv [ 1 ] ) #NEWLINE#
"""#SPACE#{c}{x}{o}{o}""" . format ( o = '{' , c = '}' , x = 3 ) #NEWLINE#
assert isinstance ( variable , type ) #NEWLINE#
my_method_name ( ) #NEWLINE#
msg . attach ( img ) #NEWLINE#
main ( ) #NEWLINE#
a = 'Тест' #NEWLINE# a . encode ( 'utf-8' ) #NEWLINE#
self . assertRaises ( AttributeError , eval , 'myA.myattribute#SPACE#=#SPACE#9' , locals ( ) ) #NEWLINE#
( 'Abewardhana#SPACE#Balasuriya' , 'abewardhana.html' ) , #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
self . submitButton . grid ( ) #NEWLINE#
print ( 'test_3' ) #NEWLINE#
im2 . show ( ) #NEWLINE#
float_formatter ( 1234.567 ) #NEWLINE#
1 , 'foo' , 3.5 , { 'hello' : 'bye' } #NEWLINE#
print ( np . transpose ( data ) ) #NEWLINE#
dummy = list ( map ( int , map ( set ( data ) . __contains__ , variables ) ) ) #NEWLINE#
temp ( ) #NEWLINE#
header = '' . join ( [ str ( t ) . strip ( ) for t in headercell . findAll ( text = True ) ] ) #NEWLINE#
ax [ 1 ] . axis ( 'off' ) #NEWLINE#
sentence . count ( 'a' ) #NEWLINE#
xvals = np . arange ( beginx , endx + 1 ) #NEWLINE#
yvals = np . arange ( beginy , endy + 1 ) #NEWLINE#
a = numpy . random . rand ( N ) #NEWLINE#
raise StopIteration ( 'end#SPACE#of#SPACE#enumeration#SPACE#reached' ) #NEWLINE#
df . loc [ df . cherry == 'bad' , [ 'apple' , 'banana' ] ] = np . nan #NEWLINE# df #NEWLINE#
opener . addheaders = [ ( 'User-agent' , 'MyUserAgent' ) ] #NEWLINE#
return foo ( a ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
it = chain . from_iterable ( zip ( repeat ( 'a' ) , stuff ) ) #NEWLINE#
L = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ] #NEWLINE#
MyModel2 . mymodel1 #NEWLINE#
print ( '|#SPACE##SPACE##SPACE#{}#SPACE##SPACE##SPACE#|' . format ( chr ( self . suit + 2 ) ) ) #NEWLINE#
xmin , xmax = min ( [ i . min ( ) for i in xs ] ) , max ( [ i . max ( ) for i in xs ] ) #NEWLINE#
ax . plot ( x , i * x , label = '$y#SPACE#=#SPACE#%ix$' % i ) #NEWLINE#
setattr ( request , '_messages' , messages ) #NEWLINE#
l = sorted ( d . keys ( ) ) #NEWLINE#
df . head ( ) #NEWLINE#
df2 = pd . read_csv ( 'test.csv' , tupleize_cols = True ) #NEWLINE# df2 . columns = pd . MultiIndex . from_tuples ( eval ( ',' . join ( df2 . columns ) ) ) #NEWLINE#
l1 = [ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } , { 'a' : 5 , 'b' : 6 , 'c' : 7 , 'd' : 8 } ] #NEWLINE#
self . showMaximized ( ) #NEWLINE#
with open ( filename ) as file : #NEWLINE# #INDENT# found = any ( word == line . strip ( ) for line in file ) #NEWLINE#
plt . show ( ) #NEWLINE#
style . configure ( 'My.Horizontal.TScrollbar' , troughcolor = 'red' ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
root . lift ( ) #NEWLINE#
index = MyModel . objects . filter ( sortField__lt = myObject . sortField ) . count ( ) #NEWLINE#
l . remove ( i ) #NEWLINE#
self . put ( ) #NEWLINE#
people . groupby ( mapping ) . sum ( ) #NEWLINE#
print ( 'Success:' , value ) #NEWLINE#
data = json . loads ( response_data ) #NEWLINE#
import numpy as np #NEWLINE#
writer = csv . writer ( fout , delimiter = '\t' ) #NEWLINE#
row = cursor . fetchone ( ) #NEWLINE#
for k , v in d . items ( ) : #NEWLINE# #INDENT# d [ k ] = round ( v ) #NEWLINE#
print ( x ) #NEWLINE#
df . query ( 'a#SPACE#==#SPACE#4#SPACE#&#SPACE#b#SPACE#!=#SPACE#2' ) #NEWLINE#
return instance . field1 + '/' + instance . field2 #NEWLINE#
finder1 . score_ngrams ( bigram_measures . pmi ) #NEWLINE#
parser . add_argument ( 'start_date' , type = mkdate ) #NEWLINE#
Thread . __init__ ( self ) #NEWLINE#
pd . set_option ( 'display.max_columns' , None ) #NEWLINE#
book = xlrd . open_workbook ( filename ) #NEWLINE#
super ( Window , self ) . __init__ ( parent ) #NEWLINE#
ranges . append ( ( 5 , 10 ) ) #NEWLINE#
ax . scatter ( xs , ys , zs ) #NEWLINE#
frame . pack ( ) #NEWLINE#
print ( case_sensitive_replace ( 'abc#SPACE#Abc#SPACE#aBc#SPACE#abC#SPACE#ABC' , 'abc' , 'def' ) ) #NEWLINE#
unicode_list = [ chr ( i ) for i in range ( sys . maxunicode ) ] #NEWLINE#
dsn = cx_Oracle . makedsn ( ip , port , SID ) #NEWLINE#
buf [ i : i + 2 ] = struct . pack ( '!h' , t ) #NEWLINE#
a = [ ( 0 , 1 , 2 ) , ( 3 , 4 , 5 ) , ( 6 , 7 , 8 ) ] #NEWLINE#
print ( user . columns . name . type . length ) #NEWLINE#
print ( numbers , sum ( numbers ) ) #NEWLINE#
df . columns . tolist ( ) #NEWLINE#
result = table . select ( ) . with_hint ( table , 'ONLY' , 'postgresql' ) #NEWLINE#
data = [ ( 1 , 2 ) , ( 40 , 2 ) , ( 9 , 80 ) ] #NEWLINE# zip ( * data ) #NEWLINE#
image_url = serializers . SerializerMethodField ( 'get_image_url' ) #NEWLINE#
doc_tfidf = vect . transform ( [ doc ] ) #NEWLINE#
sns . pairplot ( df ) #NEWLINE#
ax [ 0 ] . set_zlabel ( '$z$' ) #NEWLINE#
profile . set_preference ( 'browser.download.panel.shown' , False ) #NEWLINE#
return decimal . Decimal ( x ) . to_eng_string ( ) #NEWLINE#
print ( ( 'set#SPACE#to' , the_string ) ) #NEWLINE#
json . dumps ( d . isoformat ( ) ) #NEWLINE#
print ( ( 'got' , the_string ) ) #NEWLINE#
[ ( x , y ) for x in range ( 3 , 0 , - 1 ) for y in range ( 3 , x - 1 , - 1 ) ] #NEWLINE#
aw2 . redraw_plot ( ) #NEWLINE#
'cancelled' , { 'position' : 2 , 'status_for' : 'all' } #NEWLINE#
if type ( arg ) is not datetime . date : #NEWLINE# #INDENT# raise TypeError ( 'arg#SPACE#must#SPACE#be#SPACE#a#SPACE#datetime.date,#SPACE#not#SPACE#a#SPACE#%s' % type ( arg ) ) #NEWLINE#
[ 1 , 2 , '/' ] #NEWLINE#
numpy . __version__ #NEWLINE#
aapl_200ma . plot ( legend = True ) #NEWLINE#
site . close ( ) #NEWLINE#
return HttpResponseRedirect ( 'LOGIN_PAGE_URL' ) #NEWLINE#
bool ( 'foo' ) #NEWLINE#
query = urllib . parse . urlencode ( { 'q' : q } ) #NEWLINE#
md [ 1 ] . append ( 'b' ) #NEWLINE#
weapons [ 'fists' ] = weapons [ 'fists' ] . _replace ( owned = False ) #NEWLINE#
dtree = defaultdict ( lambda : defaultdict ( lambda : defaultdict ( list ) ) ) #NEWLINE#
logging . debug ( 'This#SPACE#message#SPACE#should#SPACE#go#SPACE#to#SPACE#the#SPACE#log#SPACE#file' ) #NEWLINE#
print ( resp . read ( ) ) #NEWLINE#
foo = imp . load_source ( 'module.name' , '/path/to/file.py' ) #NEWLINE#
fp = webdriver . FirefoxProfile ( ) #NEWLINE#
pd . isnull ( np . array ( [ np . nan , 0 ] , dtype = float ) ) #NEWLINE#
dlg . Destroy ( ) #NEWLINE#
request . add_header ( 'User-agent' , 'Chrome#SPACE#XXX' ) #NEWLINE#
this_year = "'" + str ( this_year ) + "'" #NEWLINE#
a = pd . read_csv ( 'a.csv' , sep = '|' ) #NEWLINE#
parser . add_argument ( '-q' , '--quiet' , action = 'count' ) #NEWLINE#
ax . text ( m [ 0 ] , m [ 1 ] , m [ 2 ] , '$\\theta$' , ** text_options ) #NEWLINE#
ax . text ( m [ 0 ] , m [ 1 ] , m [ 2 ] , '$\\phi$' , ** text_options ) #NEWLINE#
locals ( ) [ 'y' ] = 1 #NEWLINE# y #NEWLINE#
var [ a ] . append ( b ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
i , j = np . meshgrid ( np . arange ( N ) , np . arange ( N ) ) #NEWLINE#
[ 'abc' , 'ab#SPACE#c' , 'a#SPACE#bc' , 'a#SPACE#b#SPACE#c' ] #NEWLINE#
accum0 . append ( cc0 ) #NEWLINE#
num = np . sum ( np . abs ( diffs ) < some_value ) #NEWLINE#
d . update ( t ( ) ) #NEWLINE#
print ( pd . DataFrame ( result , df . index , df . columns ) ) #NEWLINE#
odds . append ( i ) #NEWLINE#
logger . info ( 'info' ) #NEWLINE#
scale , goodargs = goodargs [ - 1 ] , goodargs [ : - 1 ] #NEWLINE#
np . kron ( a , np . ones ( ( blockSize , blockSize ) ) ) [ : rows , : cols ] #NEWLINE#
myparts = mystr . split ( '&' ) #NEWLINE#
time . sleep ( random . randint ( 1 , 4 ) ) #NEWLINE#
pcode [ i ] = pcode [ i ] . replace ( '#SPACE#' , '' ) #NEWLINE#
class CustomBarModelForm ( forms . ModelForm ) : #NEWLINE# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# #INDENT# model = Bar #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# super ( CustomBarModelForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# self . fields [ 'foo' ] . queryset = Foo . objects . filter ( title__isnull = False ) #NEWLINE# #NEWLINE# #NEWLINE# class BarAdmin ( admin . ModelAdmin ) : #NEWLINE# #INDENT# form = CustomBarModelForm #NEWLINE#
letter_count = dict ( zip ( string . ascii_lowercase , [ 0 ] * 26 ) ) #NEWLINE#
s . diff ( ) #NEWLINE#
return render_template ( template_name , var1 = var2 , var2 = var2 ) #NEWLINE#
server . close ( ) #NEWLINE#
data = np . random . randint ( 25 , size = ( 4 , 4 ) ) #NEWLINE#
a [ : , ( i ) ] #NEWLINE#
calendar . setdefault ( date , [ ] ) . append ( event ) #NEWLINE#
print ( 'stdin#SPACE#is#SPACE#redirected' ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
im = numpy . array ( img ) #NEWLINE#
ITEM_PIPELINES = { 'your_bot_name.pipelines.DuplicatesPipeline' : 100 } #NEWLINE#
super ( Foo , self ) . __init__ ( ** kwargs ) #NEWLINE#
bananas = [ fruit for fruit in fruits if fruit . name == 'banana' ] #NEWLINE#
data [ 'key' ] = 'value' #NEWLINE#
print ( find_supersets ( strings ) ) #NEWLINE#
f . seek ( 0 , 0 ) #NEWLINE#
logging . info ( 'Finite#SPACE#result' ) #NEWLINE#
__import__ ( module ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
count ( 'input.txt' , 'chars' ) #NEWLINE#
plt . set_cmap ( cmaps . viridis ) #NEWLINE#
[ ( 0 , 3 ) , ( 1 , 7 ) , ( 2 , 19 ) ] #NEWLINE#
"""__author__""" #NEWLINE#
"""__bases__""" #NEWLINE#
"""__builtin__""" #NEWLINE#
"""__builtins__""" #NEWLINE#
"""__cached__""" #NEWLINE#
"""__call__""" #NEWLINE#
"""__class__""" #NEWLINE#
"""__copy__""" #NEWLINE#
"""__credits__""" #NEWLINE#
"""__date__""" #NEWLINE#
"""__decimal_context__""" #NEWLINE#
"""__deepcopy__""" #NEWLINE#
"""__dict__""" #NEWLINE#
"""__doc__""" #NEWLINE#
"""__exception__""" #NEWLINE#
"""__file__""" #NEWLINE#
"""__flags__""" #NEWLINE#
"""__ge__""" #NEWLINE#
"""__getinitargs__""" #NEWLINE#
df = pd . DataFrame ( { 'year' : [ '2012' , '2012' ] , 'month' : [ '01' , '02' ] } ) #NEWLINE#
my_dict [ k ] . append ( dict2 [ k ] ) #NEWLINE#
'^grappelli/' , include ( 'grappelli.urls' ) #NEWLINE#
A ( ) #NEWLINE#
print ( 'Value!' ) #NEWLINE#
pool = multithreading . Pool ( 1 ) #NEWLINE#
plt . gca ( ) . add_patch ( cir ) #NEWLINE#
SettableRLSD = TRUE #NEWLINE#
MKTYPE2 ( Stitcher ) #NEWLINE#
sys . stdout . write ( char ) #NEWLINE#
self . emit ( SIGNAL ( 'clicked()' ) ) #NEWLINE#
df #NEWLINE#
enc . transform ( [ [ 0 , 1 , 1 ] ] ) . toarray ( ) #NEWLINE#
{ ( 2 ) : { 'Mary' : [ 5 , 1 ] } , ( 3 ) : { 'Bob' : [ 3 , 4 , 2 ] , 'Jim' : [ 6 , 17 , 4 ] , 'Kim' : [ #NEWLINE# 21 , 54 , 35 ] } , ( 4 ) : { 'Bill' : [ 1 , 2 , 3 , 4 ] } } #NEWLINE#
print ( 'Accept#SPACE#NULL#SPACE#hypothesis#SPACE#-#SPACE#No#SPACE#significant#SPACE#difference#SPACE#between#SPACE#groups.' ) #NEWLINE#
L = [ 'A' , 'B' , 'C' ] #NEWLINE#
newNums = ( i for i , x in enumerate ( nums ) if x == 12 ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
"""{0:#SPACE#<5}""" . format ( 'sss' ) #NEWLINE#
'avg' , lambda r : sum ( r ) / float ( len ( r ) ) #NEWLINE#
screen . blit ( newGameButton , ( button_x , button_y ) ) #NEWLINE#
data = f . read ( ) #NEWLINE#
head , tail = ( lambda x : ( x [ 0 ] , x [ 1 : ] ) ) ( my_func ( ) ) #NEWLINE#
datetime . datetime . fromtimestamp ( 1004260000 ) #NEWLINE#
"""S""" #NEWLINE#
plt . subplot ( 313 ) #NEWLINE#
match = re . search ( '\\<(?P<brackets>.*)\\>' , text ) #NEWLINE#
print ( ( 'Clients:#SPACE#' , clients ) ) #NEWLINE#
ts . resample ( rule = '24H' , how = 'sum' , closed = 'left' , label = 'left' , base = 17 ) #NEWLINE#
show_graph_with_labels ( adjacency , make_label_dict ( get_labels ( 'mycsv.csv' ) ) ) #NEWLINE#
arity = len ( args ) #NEWLINE#
res . append ( l ) #NEWLINE#
s . cookies . set_policy ( BlockAll ( ) ) #NEWLINE#
t . timeit ( 5 ) #NEWLINE#
gibberish ( 10 ) #NEWLINE#
return np . mean ( self . predictions_ , axis = 0 ) #NEWLINE#
nk -= 1 #NEWLINE#
return data [ 'something' ] #NEWLINE#
zipped_file . seek ( 0 ) #NEWLINE#
time . sleep ( 0.3 ) #NEWLINE#
output [ - 1 ] . append ( item ) #NEWLINE#
r . headers [ 'Content-Length' ] #NEWLINE#
value = str ( re . sub ( '[-\\s]+' , '-' , value ) ) #NEWLINE#
[ [ 9 , 10 , 11 ] , [ 12 , 13 , 14 ] , [ 15 , 16 , 17 ] ] , #NEWLINE#
m . group ( ) #NEWLINE#
len ( 'hello' ) #NEWLINE#
ax . set_ylabel ( ',#SPACE#' . join ( y ) ) #NEWLINE#
print ( result ) #NEWLINE#
os . kill ( - self . proc . pid , signal . SIGKILL ) #NEWLINE#
"""""" . join ( c for c in s if not c . isspace ( ) ) #NEWLINE#
print ( 'Data#SPACE#received#SPACE#correctly' ) #NEWLINE#
tk . iconbitmap ( default = 'transparent.ico' ) #NEWLINE#
layout . itemAt ( i ) . widget ( ) . setParent ( None ) #NEWLINE#
a = list ( range ( 10000 , 20000 ) ) #NEWLINE#
readonly_fields = [ 'link' ] #NEWLINE#
help ( 'SEQUENCEMETHODS2' ) #NEWLINE#
print ( sys . path ) #NEWLINE#
the_file . close ( ) #NEWLINE#
x . argmin ( axis = 1 ) #NEWLINE#
return False #NEWLINE#
result = solve ( ( x + I * y ) ** 2 - z , ( x , y ) ) #NEWLINE#
flags . update ( dict . fromkeys ( [ 'd' , 'e' ] , False ) ) #NEWLINE#
d . update ( makedict ( elem ) ) #NEWLINE#
fig = pylab . figure ( ) #NEWLINE#
return sum ( v [ idx ] for k , v in stats . items ( ) if k [ ikey ] == keyv ) #NEWLINE#
type ( s1 [ 0 ] ) #NEWLINE#
"""{lorem:>10}""" . format ( lorem = 'Lorem#SPACE#Ipsum' ) #NEWLINE#
mu = np . mean ( array ) #NEWLINE#
ax = fig . add_subplot ( 211 ) #NEWLINE#
pipeB . send ( 20 ) #NEWLINE#
x . digest ( ) . decode ( 'hex' ) #NEWLINE#
s = Switcher ( { 'a' : 10 , 'b' : 20 } ) #NEWLINE#
sub ( '(&[a-zA-Z])' , dictsub , mystr ) #NEWLINE#
f . write ( '{}\n' . format ( os . path . join ( dirpath , x ) ) ) #NEWLINE#
return sp . coo_matrix ( ( C , coords ) , ( a . shape [ 0 ] , b . shape [ 1 ] ) ) #NEWLINE#
return redis . StrictRedis ( connection_pool = connection_pool ) #NEWLINE#
print ( test . encode ( 'ascii' , 'asciify' ) ) #NEWLINE#
self . results = pandas . concat ( frames ) #NEWLINE#
print ( 'Hi' ) #NEWLINE#
self . log ( 'Login#SPACE#failed' ) #NEWLINE#
s = '23989800000' #NEWLINE# len ( s ) - len ( s . rstrip ( '0' ) ) #NEWLINE#
ax . set_xlim ( 0 , n_pts ) #NEWLINE#
c_float_p = ctypes . POINTER ( ctypes . c_float ) #NEWLINE#
parser . add_argument ( '--optional2' ) #NEWLINE#
print ( isstr ( '3.14' ) ) #NEWLINE#
return getattr ( self . _obj , attr ) #NEWLINE#
ax . set_xlim ( 0 , 255 ) #NEWLINE#
plt . contourf ( X , Y , Z ) #NEWLINE#
[ 1 , 2 , 0 , 0 , 0 ] #NEWLINE#
a = 'abc' #NEWLINE# a , result = a [ : - 1 ] , a [ - 1 ] #NEWLINE#
return response #NEWLINE#
engine . execute ( 'ALTER#SPACE#TABLE#SPACE#sanity_check_test#SPACE#DROP#SPACE#COLUMN#SPACE#id' ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
engine . start ( ) #NEWLINE#
new_tag = soup . new_tag ( 'a' , href = 'http://www.example.com' ) #NEWLINE#
self . fields [ 'receive_newsletter' ] . initial = True #NEWLINE#
sns . despine ( ) #NEWLINE#
( - 171.1114 , - 11.00379 ) , ( - 171.09488 , - 10.9978 ) , ( - 171.08485 , - 10.9975 ) #NEWLINE#
s = [ 'spam' , 'eggs' , 'ham' ] #NEWLINE#
pkt = Ether ( ) / IP ( ) / TCP ( ) / payload #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
print ( df ) #NEWLINE#
sys . stdin = Peeker ( sys . stdin ) #NEWLINE#
Clock . schedule_once ( self . create_webview , 0 ) #NEWLINE#
string_list = re . findall ( '"([^"]*"' , text ) #NEWLINE#
m , n = map ( int , input ( ) . split ( ) ) #NEWLINE#
db . session . add ( region ) #NEWLINE#
matplotlib . rc ( 'font' , serif = 'Helvetica#SPACE#Neue' ) #NEWLINE#
string_to_delta ( '20#SPACE#hours#SPACE#ago' ) #NEWLINE#
data . seek ( 0 ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
float ( str ) #NEWLINE#
df [ 'Test' ] = df . apply ( lambda row : max ( row [ 'Open' ] , row [ 'Close' ] ) , axis = 1 ) #NEWLINE#
myvar = 'the#SPACE#answer#SPACE#is#SPACE#%s' % answer #NEWLINE#
data_dict [ 'auth' ] [ 'tenantName' ] #NEWLINE#
a [ i ] += 1 #NEWLINE#
M = np . arange ( 27 ) . reshape ( ( 3 , 3 , 3 ) ) #NEWLINE#
print ( td2 . text ) #NEWLINE#
print ( df [ 'ford#SPACE#weight' ] . min ( ) ) #NEWLINE#
server . starttls ( ) #NEWLINE#
print ( 'f3' , a , s , m ) #NEWLINE#
os . kill ( - self . proc . pid , signal . SIGTERM ) #NEWLINE#
clean = [ x for x in lis if x is not None ] #NEWLINE#
list = [ { 'a' : 1 , 'b' : 2 } , { 'c' : 3 , 'd' : 4 } ] #NEWLINE#
ssh . close ( ) #NEWLINE#
time . sleep ( 4 ) #NEWLINE#
array ( [ [ 23 , 34 , 36 ] , [ 36 , 34 , 45 ] ] ) #NEWLINE#
df_c . ix [ df_b . index ] = df_b #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
urllib . parse . quote ( '#SPACE#' ) #NEWLINE#
ax [ 0 ] . legend ( ) #NEWLINE#
main_function ( ) #NEWLINE#
mystring = '[Bacon],#SPACE#[eggs],#SPACE#and#SPACE#[spam].' #NEWLINE# re . findall ( '\\[(.*?)\\]' , mystring ) #NEWLINE#
return self . render_to_response ( context ) #NEWLINE#
bucket = conn . get_bucket ( '<bucket#SPACE#name>' ) #NEWLINE#
findCommonPairs ( [ { 'a' : [ 1 , 2 ] , 'b' : [ 2 , 3 ] } , { 'a' : [ 1 , 2 ] } ] ) #NEWLINE#
assert not self . broken #NEWLINE#
w = csv . DictWriter ( f , list ( my_dict . keys ( ) ) ) #NEWLINE#
return tag . name == 'a' and 'Edit' in tag . get_text ( ) #NEWLINE#
df1 [ 'Column#SPACE#A' ] . apply ( crawl ) #NEWLINE#
now_epoch = time . time ( ) #NEWLINE#
coo = [ ( 0 , 0 ) , ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 0 ) , ( 1 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] #NEWLINE#
tn . read_until ( 'login:#SPACE#' ) #NEWLINE#
my_func ( * [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
notifier . loop ( ) #NEWLINE#
some_list = [ 'abc-123' , 'def-456' , 'ghi-789' , 'abc-456' ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
ids_list = [ item [ 0 ] for item in cursor . fetchall ( ) ] #NEWLINE#
args = [ 'test.exe' , '-f' ] #NEWLINE# subprocess . call ( args ) #NEWLINE#
points . append ( ( x , y ) ) #NEWLINE#
url ( '^blog/$' , 'www.views.blog' , name = 'blog-index' ) , #NEWLINE#
fig . canvas . mpl_connect ( 'key_press_event' , clipboard_handler ) #NEWLINE#
print ( set ( chain ( * array ) ) ) #NEWLINE#
mydate = datetime . strptime ( 'Thu,#SPACE#Jun' , '%a,#SPACE#%b' ) #NEWLINE#
data = [ ( 'smith,#SPACE#bob' , 2 ) , ( 'carol' , 3 ) , ( 'ted' , 4 ) , ( 'alice' , 5 ) ] #NEWLINE#
numbers = zip ( * data ) #NEWLINE#
w . show ( ) #NEWLINE#
self . assertIn ( 'bcd' , 'abcde' ) #NEWLINE#
def required ( value ) : #NEWLINE# #INDENT# if value is None : #NEWLINE# #INDENT# #INDENT# raise serializers . ValidationError ( 'This#SPACE#field#SPACE#is#SPACE#required' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class GameRecord ( serializers . ModelSerializer ) : #NEWLINE# #INDENT# score = IntegerField ( validators = [ required ] ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# model = Game #NEWLINE#
def rchop ( thestring , ending ) : #NEWLINE# #INDENT# if thestring . endswith ( ending ) : #NEWLINE# #INDENT# #INDENT# return thestring [ : - len ( ending ) ] #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# return thestring #NEWLINE# somestring = rchop ( somestring , '#SPACE#rec' ) #NEWLINE#
return 'http://' + request . host + '/' #NEWLINE#
ax = fig . add_subplot ( '111' ) #NEWLINE#
a = [ a . ix [ i ] for i in a . index if sorted1 [ i ] < sorted2 [ i ] ] #NEWLINE#
z2 [ i , list ( range ( z2 . shape [ 1 ] ) ) ] #NEWLINE#
p . search ( 'miniseries.part#SPACE#VII.720p.avi' ) . groups ( ) #NEWLINE#
time = datetime . datetime . strptime ( time , '#SPACE#%H:%M:%S.%f' ) #NEWLINE#
l = [ '1' , '2' , '3' , '4' ] #NEWLINE# s = ',#SPACE#' . join ( l ) + ',' #NEWLINE#
return sorted ( map ( sorted , sets ) , key = lambda x : ( len ( x ) , x ) ) #NEWLINE#
o . close ( ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( sys . argv [ 1 : ] ) #NEWLINE#
smtp . quit ( ) #NEWLINE#
print ( allergies [ 1 ] [ 'reaction' ] ) #NEWLINE#
"""This#SPACE#is#SPACE#a#SPACE#function#SPACE#that#SPACE#does#SPACE#a#SPACE#thing.#NEWLINE#Pretty#SPACE#cool,#SPACE#right?""" #NEWLINE#
self . grid ( ) #NEWLINE#
print ( cons_n ( cin , ( 'i' , 's' ) ) ) #NEWLINE#
data . rename ( columns = str . lower ) #NEWLINE#
os . stat ( 'test.txt' ) [ ST_MODE ] #NEWLINE#
self . hello ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
assert os . path . isdir ( root_dirname ) #NEWLINE#
super ( Worker , self ) . __init__ ( ) #NEWLINE#
stream . flush ( ) #NEWLINE#
spamreader = csv . reader ( csvfile , delimiter = ',' ) #NEWLINE#
pieces = [ p for p in re . split ( '(#SPACE#|\\".*?\\"|\'.*?\')' , test ) if p . strip ( ) ] #NEWLINE#
df . ix [ df [ 'A' ] > df [ 'B' ] , 'C' ] == 1 #NEWLINE#
my_list . append ( map ( int , ints ) ) #NEWLINE#
csv_out . writerow ( row ) #NEWLINE#
setattr ( user , key , value ) #NEWLINE#
np . where ( np . array ( [ 0 , 0 ] ) ) #NEWLINE#
A [ [ 0 , 1 ] ] . shape #NEWLINE#
mergedgroupdict ( '(?P<b>.b.)|(?P<i>.i.)' , 'abcdefghijk' ) #NEWLINE# mergedgroupdict ( '(?P<b>.b.)|(?P<i>.i.)' , 'abcdefghijk' [ : : - 1 ] ) #NEWLINE#
response = urllib . request . urlopen ( url ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE# [ 'hello{0}' . format ( i ) for i in a ] #NEWLINE#
[ [ 'luka#SPACE#90/91' ] , [ 'luka#SPACE#onthe' ] ] #NEWLINE#
p . start ( ) #NEWLINE#
return np . arange ( N ) . reshape ( shp ) . transpose ( np . arange ( len ( shp ) ) [ : : - 1 ] ) . ravel ( ) #NEWLINE#
'%g' % float ( 10 ) #NEWLINE#
pickle . dump ( [ 'hello' , 'world' ] , f ) #NEWLINE#
print ( most_common_words ) #NEWLINE#
ax . clabel ( terr , fontsize = 9 , inline = 1 ) #NEWLINE#
session . add ( my_model ) #NEWLINE#
return render_template ( 'showjson.jade' , data = data ) #NEWLINE#
demand = pd . DataFrame ( { 'Water' : [ 4 , 3 ] , 'Elec' : [ 8 , 9 ] } , index = [ 'Com' , 'Ind' ] ) #NEWLINE#
d1 - d2 . values #NEWLINE#
context . driver . switch_to . alert . accept ( ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
return type . __dict__ [ '__bases__' ] . __set__ ( cls , value ) #NEWLINE#
earth . circle ( 150 , 1 ) #NEWLINE#
assert np . allclose ( results [ 1 ] , results [ 2 ] ) #NEWLINE#
from xlwt import Workbook #NEWLINE#
ax . set_xticks ( ind + width ) #NEWLINE#
self . fileobj . close ( ) #NEWLINE#
__main__ = sys . modules [ 'bar' ] #NEWLINE#
scatter ( X , Y , c = numpy . random . rand ( 3 , 1 ) ) #NEWLINE#
db . commit ( ) #NEWLINE#
guess = input ( 'What#SPACE#is#SPACE#the#SPACE#capital#SPACE#of#SPACE#{}?' . format ( country ) ) #NEWLINE#
my_list = pickle . load ( f ) #NEWLINE#
[ x for x in the_list if the_list . count ( x ) == 1 ] #NEWLINE#
df #NEWLINE#
array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
QDialog . __init__ ( parent ) #NEWLINE#
self . Show ( ) #NEWLINE#
rx = '\\b(?=\\w){0}\\b(?!\\w)' . format ( TEXTO ) #NEWLINE#
return '<{0}>' . format ( match [ 1 ] ) #NEWLINE#
return '</{0}>' . format ( match [ 1 ] ) #NEWLINE#
res = t . render ( items = items ) #NEWLINE#
df . replace ( replacements , regex = True , inplace = True ) #NEWLINE#
f . writelines ( ( 'EDF#SPACE#' , x . replace ( '\n' , '\nEDF#SPACE#' ) ) ) #NEWLINE#
s = [ [ 'A' , 'B' , 'C' , 'D' ] , [ 'B' , 'E' , 'F' ] , [ 'C' , 'A' , 'B' , 'D' ] , [ 'D' ] ] #NEWLINE# { t [ 0 ] : t [ 1 : ] for t in s } #NEWLINE#
btn4 = Button ( text = 'btn4' , font = helv36 ) #NEWLINE#
btn5 = Button ( text = 'btn5' , font = helv36 ) #NEWLINE#
plt . figure ( ) #NEWLINE#
frame . grid ( row = 0 , column = 0 , sticky = N + S + E + W ) #NEWLINE#
[ 'alpha\n' , 'beta\n' , 'gamma\n' ] #NEWLINE#
defaultdict . __init__ ( self , list ) #NEWLINE#
dfs [ 'right_only' ] #NEWLINE#
dfs [ 'both' ] #NEWLINE#
writer . save ( ) #NEWLINE#
return chr ( int ( match . group ( 1 ) , 16 ) ) #NEWLINE#
self . children . append ( obj ) #NEWLINE#
tar . getmembers ( ) #NEWLINE#
lists = [ [ 'hello' ] , [ 'world' , 'foo' , 'bar' ] ] #NEWLINE# combined = list ( itertools . chain . from_iterable ( lists ) ) #NEWLINE#
"""The#SPACE#following#SPACE#are#SPACE#IP#SPACE#addresses:#SPACE#192.168.1.1,#SPACE#8.8.8.8,#SPACE#101.099.098.000.#SPACE#These#SPACE#can#SPACE#also#SPACE#appear#SPACE#as#SPACE#192.168.1[.]1#SPACE#or#SPACE#192.168.1(.)1#SPACE#or#SPACE#192.168.1[dot]1#SPACE#or#SPACE#192.168.1(dot)1#SPACE#or#SPACE#192#SPACE#.168#SPACE#.1#SPACE#.1#SPACE#or#SPACE#192.#SPACE#168.#SPACE#1.#SPACE#1.#SPACE#""" #NEWLINE#
log = logging . getLogger ( '' ) #NEWLINE#
cherrypy . config . update ( server_config ) #NEWLINE#
test ( 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 ) #NEWLINE#
np . zeros ( ( N , 2 , 3 , N , 2 , 3 ) , dtype = A . dtype ) #NEWLINE#
pygame . mixer . music . play ( ) #NEWLINE#
all ( x > 0 for x in [ 3 , - 1 , 5 ] ) #NEWLINE#
logging . exception ( 'foo' ) #NEWLINE#
sum ( atuple ) #NEWLINE#
parent . kill ( ) #NEWLINE#
datetime . date ( 2016 , 6 , 9 ) , #NEWLINE#
r . headers [ 'Content-Type' ] #NEWLINE#
block . append ( map ( float , line . split ( '#SPACE#' ) ) ) #NEWLINE#
cv2 . imwrite ( 'houghlines5.jpg' , img ) #NEWLINE#
df . groupby ( [ df . index . year , df . index . month , df . index . day ] ) . transform ( np . cumsum #NEWLINE# ) . resample ( 'B' , how = 'ohlc' ) #NEWLINE#
return map ( int , list ( bin ( n ) [ 2 : ] ) ) #NEWLINE#
obj . update ( add_obj ) #NEWLINE#
okay_items = [ x for x in all_items if not regex . match ( x ) ] #NEWLINE#
print ( 'Error:#SPACE#unexpected#SPACE#level:' , s ) #NEWLINE#
my_list = [ 1 , 2 , [ 3 , 4 , 5 ] ] #NEWLINE#
re . match ( pattern , '4e4' ) #NEWLINE#
D = { 'a' : [ 2 , 2 , 3 , 4 , 5 ] , 'b' : [ 5 , 6 , 7 , 8 , 9 ] } #NEWLINE#
yield abs ( nums [ i ] - nums [ j ] ) #NEWLINE#
print ( text_re ) #NEWLINE#
logging . basicConfig ( format = FORMAT , level = logging . INFO ) #NEWLINE#
return self . __add__ ( - other ) #NEWLINE#
print ( s . replace ( '"' , '\\"' ) ) #NEWLINE#
self . assertEqual ( response . status_code , 200 ) #NEWLINE#
columns . remove ( 'regime' ) #NEWLINE#
import numpy as np #NEWLINE#
result = '{0:.3g}' . format ( num ) #NEWLINE#
m . transpose ( 1 , 2 , 0 ) [ 0 , 1 ] #NEWLINE#
sys . path . insert ( 0 , '/usr/share/yum-cli' ) #NEWLINE#
admin . site . register ( question , QuestionAdmin ) #NEWLINE#
"""é""" . encode ( 'latin-1' ) #NEWLINE#
df_new = df . groupby ( 'date' ) . ts . apply ( lambda x : pd . DataFrame ( [ item for #NEWLINE# sublist in x . values for item in sublist ] ) ) #NEWLINE#
df [ 'time' ] . iloc [ 0 ] #NEWLINE#
self . transport . write ( msg , ( '224.0.0.9' , 1520 ) ) #NEWLINE#
Potato ( ** validated_data ) #NEWLINE#
ctypes . c_size_t ( hash ( 'asdf' ) ) . value #NEWLINE#
df [ 'Test' ] = np . maximum ( df [ 'Open' ] , df [ 'Close' ] ) #NEWLINE# df #NEWLINE#
print ( pd . read_hdf ( '/tmp/out.h5' , 'results_table' , where = 'A#SPACE#in#SPACE#[1,3,4]' ) ) #NEWLINE#
print ( "Sorry,#SPACE#I#SPACE#couldn't#SPACE#find#SPACE#any#SPACE#newly#SPACE#mounted#SPACE#drives." ) #NEWLINE#
print ( json . dumps ( d , indent = 4 ) ) #NEWLINE#
self . assertEqual ( ret , 'Mocked#SPACE#This#SPACE#Silly' ) #NEWLINE#
culled_list = [ item for item in unculledlist if str ( item ) [ - 1 ] in [ '0' , '2' , #NEWLINE# '4' ] ] #NEWLINE#
t1 = threading . Thread ( target = foo ) #NEWLINE#
return super ( IntegerRangeField , self ) . formfield ( ** defaults ) #NEWLINE#
print ( config . get ( 'test' , 'xxx' ) ) #NEWLINE#
ranges . append ( ( 3 , 10 ) ) #NEWLINE#
tn . read_until ( 'Password:#SPACE#' ) #NEWLINE#
arr = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
fs . write ( path , content , 'w' ) #NEWLINE#
tz = pytz . timezone ( 'America/New_York' ) #NEWLINE#
[ ( [ _ ] + list ( itertools . takewhile ( lambda x : x != 2 , a ) ) ) for _ in a ] #NEWLINE#
fig . subplots_adjust ( right = 0.55 ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#foo' ) #NEWLINE#
plt . show ( ) #NEWLINE#
string = 'this#SPACE#is#SPACE#an#SPACE#implicitly#SPACE#joined#SPACE#string' #NEWLINE#
process . kill ( ) #NEWLINE#
d = dict ( ( ( 'john' , 1 ) , ( 'paul' , 2 ) , ( 'mary' , 3 ) ) ) #NEWLINE#
print ( foofile . read ( ) ) #NEWLINE#
value = '' . join ( [ str ( t ) . strip ( ) for t in valuecell . findAll ( text = True ) ] ) #NEWLINE#
root . config ( menu = menubar ) #NEWLINE#
getattr ( object , 'property' , default ) #NEWLINE#
plt . ylim ( max ( y ) + 0.5 , min ( y ) - 0.5 ) #NEWLINE#
points = np . random . rand ( 30 , 2 ) #NEWLINE#
type ( 1 ) #NEWLINE#
[ 0.0 , 19523.3211203121 , 19738.4276377355 , 19654.8478302742 , 119.63673757136 , #NEWLINE# 19712.432943781 , 0.0 , 20052.3645613346 , 19846.4815936009 , #NEWLINE# 20041.8676619438 , 19921.8126944154 , 0.0 , 20030.5073635719 ] #NEWLINE#
m_date = datetime . datetime ( Yr , Mo , Day ) #NEWLINE#
s . count ( s [ 0 ] ) == len ( s ) #NEWLINE#
p . stdin . write ( 'user\n' + str ( n ) + '\n' ) #NEWLINE#
move_to_root_folder ( root_path , os . path . join ( cur_path , filename ) ) #NEWLINE#
logging . debug ( 'hello' ) #NEWLINE#
callee ( ) #NEWLINE#
app . logger . addHandler ( handler ) #NEWLINE#
writer . writerows ( data ) #NEWLINE#
count_2 . most_common ( 2 ) #NEWLINE#
plt . show ( ) #NEWLINE#
element = ElementTree . fromstring ( line ) #NEWLINE#
def digits ( n ) : #NEWLINE# #INDENT# return max ( 0 , - n . as_tuple ( ) . exponent ) #NEWLINE#
nums = [ int ( line ) for line in open ( 'numbers.txt' , 'r' ) ] #NEWLINE#
df = pd . read_csv ( '/path/to/sample.csv' ) #NEWLINE#
user_id = Column ( Integer , ForeignKey ( User . id ) , primary_key = True ) #NEWLINE#
df [ df . User_ID . isin ( counts [ counts > 1 ] . index ) ] #NEWLINE#
sns . plt . show ( ) #NEWLINE#
ax1 . xaxis . set_major_locator ( mticker . MaxNLocator ( 10 ) ) #NEWLINE#
f = wave . open ( '/usr/share/sounds/alsa/Rear_Center.wav' , 'rb' ) #NEWLINE#
from email . mime . text import MIMEText #NEWLINE#
y = x . ravel ( ) . view ( dtype = [ ( 'x' , x . dtype ) , ( 'y' , x . dtype ) ] ) #NEWLINE#
print ( 'Whats#SPACE#your#SPACE#favorite#SPACE#animal\n' ) #NEWLINE#
print ( neighbors ( A , 1 , 0 ) ) #NEWLINE#
x = np . linspace ( 0 , 3 , 100 ) #NEWLINE#
text . set_transform ( fig . transFigure ) #NEWLINE#
'☃' == '☃' #NEWLINE#
payload . set_verdict ( nfqueue . NF_DROP ) #NEWLINE#
browser . retrieve ( image [ 'src' ] , filename ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE#
arr [ idx [ : , ( None ) ] <= np . arange ( n ) ] = np . nan #NEWLINE#
[ 'veniam' , ',' , 'quis' , 'nostrud' , 'exercitation' , 'ullamco' , 'laboris' , #NEWLINE# 'nisi' , 'ut' ] #NEWLINE#
answer . append ( ( apos , bpos ) ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
dt + timedelta ( days = 7 - dt . weekday ( ) ) #NEWLINE#
sympy . sympify ( r ) #NEWLINE#
[ max ( islice ( map ( abs , array ) , i , i + 4 ) ) for i in range ( 0 , len ( array ) , 4 ) ] #NEWLINE#
class DocImage ( models . Model ) : #NEWLINE# #INDENT# property = models . ForeignKey ( Doc , related_name = 'images' ) #NEWLINE#
us . encode ( 'utf8' ) == 'MyString' #NEWLINE#
self . _on_change ( ) #NEWLINE#
form [ 'from' ] = 'herpderp@gmail.com' #NEWLINE#
form [ 'subject' ] = 'Yellow' #NEWLINE#
form [ 'message' ] = 'Hello,#SPACE#World!' #NEWLINE#
np . where ( a == a . max ( ) ) #NEWLINE#
plt . title ( 'Page#SPACE#One' ) #NEWLINE#
plt . xlim ( ( 1e-12 , 1 ) ) #NEWLINE#
soup = BeautifulSoup ( html , 'html5lib' ) #NEWLINE#
df . select ( '*' , lag ( 'num' ) . over ( w ) . alias ( 'new_col' ) ) . na . drop ( ) . show ( ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
print ( 'Unhandled#SPACE#exception' ) #NEWLINE#
urlpatterns = patterns ( '' , ( '^media/(?P<path>.*)$' , #NEWLINE# 'django.views.static.serve' , { 'document_root' : settings . MEDIA_ROOT } ) ) #NEWLINE#
list ( it . starmap ( op . sub , it . izip ( a [ 1 : ] , a ) ) ) #NEWLINE#
class DataAdmin ( admin . ModelAdmin ) : #NEWLINE# #INDENT# pass #NEWLINE#
courses [ 'CS#SPACE#2316' ] . append ( ( int ( '1405' ) , int ( '1455' ) ) ) #NEWLINE#
courses [ 'CS#SPACE#2316' ] . append ( ( int ( '1305' ) , int ( '1355' ) ) ) #NEWLINE#
courses [ 'CS#SPACE#4400' ] . append ( ( int ( '1405' ) , int ( '1455' ) ) ) #NEWLINE#
len ( pytz . all_timezones ) #NEWLINE#
L == [ None ] * len ( L ) #NEWLINE#
var = var . decode ( '<encoding>' ) #NEWLINE#
plt . plot ( grp [ 'D' ] , label = 'rolling#SPACE#({k})' . format ( k = key ) ) #NEWLINE#
0.5495 , 0.628 , 0.7065 , 0.785 , 0.8635 , 0.942 , 1.0205 #NEWLINE#
handler . setLevel ( logging . DEBUG ) #NEWLINE#
axes . spines [ 'left' ] . set_position ( ( 'axes' , - 0.05 ) ) #NEWLINE#
return self [ key ] #NEWLINE#
print ( ',#SPACE#' . join ( replace_all ( my_replacements , x ) for x in strings ) ) #NEWLINE#
copy_files ( '123*.xml' , 'out_folder' ) #NEWLINE#
raise AssertionError ( 'Input#SPACE#variables#SPACE#should#SPACE#be#SPACE#strings' ) #NEWLINE#
return ( dt - epoch ) . total_seconds ( ) * 1000.0 #NEWLINE#
myadd = lambda xs , ys : tuple ( x + y for x , y in zip ( xs , ys ) ) #NEWLINE#
return narr #NEWLINE#
name = os . path . realpath ( os . path . join ( root , name ) ) #NEWLINE#
'__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' #NEWLINE#
'__str__' , '__subclasshook__' , 'findall' , 'finditer' , 'flags' #NEWLINE#
assert isidentifier ( 'foo' ) #NEWLINE#
plt . xlim ( 0 , 5 ) #NEWLINE#
d = lisp ( d [ 0 ] ) #NEWLINE#
pixbuf = gtk . gdk . pixbuf_new_from_file ( 'your_image.png' ) #NEWLINE#
print ( ( first_num , first_arrangement ) ) #NEWLINE#
self . ax . grid ( ) #NEWLINE#
gplus_id = credentials . id_token [ 'sub' ] #NEWLINE#
df [ 'AB' ] . str [ 0 ] #NEWLINE#
b = '#SPACE###SPACE#' . join ( b_elements ) #NEWLINE#
[ 'p' , 'e' , 't' , 'pe' , 'pt' , 'ep' , 'et' , 'tp' , 'te' , 'pet' , 'pte' , 'ept' , #NEWLINE# 'etp' , 'tpe' , 'tep' ] #NEWLINE#
x . append ( y ) #NEWLINE#
self . ssh . close ( ) #NEWLINE#
assert chessboard ( ) [ : 3 ] == [ ( 'a' , '1' ) , ( 'a' , '2' ) , ( 'a' , '3' ) ] #NEWLINE#
current_time = datetime . datetime . now ( ) #NEWLINE#
def ceildiv ( a , b ) : #NEWLINE# #INDENT# return - ( - a // b ) #NEWLINE#
super ( TestForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
format ( 1.2345 , '.2f' ) #NEWLINE#
return f ( a , b ) #NEWLINE#
n = int ( line ) #NEWLINE#
"""a#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#b""" . split ( ) #NEWLINE#
from flask import current_app #NEWLINE#
df . apply ( lambda S : S . append ( dm ) ) #NEWLINE#
client . connect ( server = ( 'talk.google.com' , 5223 ) ) #NEWLINE#
train_op = tf . train . GradientDescentOptimizer ( 0.01 ) . minimize ( cost ) #NEWLINE#
add_to_index ( index , 'computing' , 'http://acm.org' ) #NEWLINE#
add_to_index ( index , 'google' , 'http://gmail.com' ) #NEWLINE#
package . __init__ ( * args , ** kwargs ) #NEWLINE#
f . write ( str ( m ) + '\n' ) #NEWLINE#
dirList = [ name for name in sorted ( os . listdir ( path ) ) if name . endswith ( '.mp3' ) ] #NEWLINE#
self . comboBox_2 . addItem ( QIcon ( pixmap ) , text ) #NEWLINE#
plt . yticks ( [ 0 , 1 ] , [ '0' , '1' ] ) #NEWLINE#
OrderedDict ( [ ( 'He' , True ) , ( 'will' , True ) , ( 'be' , True ) , ( 'the' , True ) , ( #NEWLINE# 'winner' , True ) ] ) #NEWLINE#
lis = [ 'A:1' , 'B:2' , 'C:3' , 'D:4' ] #NEWLINE#
return HttpResponseNotAllowed ( 'Only#SPACE#POST#SPACE#here' ) #NEWLINE#
cursorclass = MySQLdb . cursors . DictCursor #NEWLINE#
exec ( "%s#SPACE#=#SPACE#var_load['%s']" % ( files [ i ] , files [ i ] ) ) #NEWLINE#
ModelAdmin . changelist_view ( self , request , extra_context = None ) #NEWLINE#
cprint ( 'colorful#SPACE#output,#SPACE#wohoo' , 'red' , 'black' ) #NEWLINE#
server . starttls ( ) #NEWLINE#
data = np . genfromtxt ( 'rangir_test.csv' , delimiter = ',' ) #NEWLINE#
files = [ stack . enter_context ( open ( fname ) ) for fname in filenames ] #NEWLINE#
result = list ( set ( s for s in stringlist if len ( s ) == ml ) ) #NEWLINE#
words = [ 'aba' , 'xyz' , 'xgx' , 'dssd' , 'sdjh' ] #NEWLINE#
x = [ 1 , 2 , 3 , 2 , 2 , 2 , 3 , 4 ] #NEWLINE# [ a for a in x if a != 2 ] #NEWLINE#
return view_func ( request , * args , ** kwargs ) #NEWLINE#
np . asmatrix ( convolve2d ( a , kernel , 'same' ) ) #NEWLINE#
key . get_contents_to_file ( f , headers ) #NEWLINE#
print ( rf . predict ( testdataset [ - 1 : ] ) ) #NEWLINE#
newdate = datetime . datetime ( * values ) #NEWLINE#
return f ( f , * args , ** kwds ) #NEWLINE#
pprinttable ( [ data , data ] ) #NEWLINE#
list ( combinations ( [ 1 , 2 , 3 , 4 ] , 3 ) ) #NEWLINE#
os . write ( sys . stdout . fileno ( ) , data ) #NEWLINE#
GridSearchCV ( clf , param_grid , cv = cv , scoring = 'accuracy' , verbose = 10 ) #NEWLINE#
return [ dict ( zip ( list_of_keys , row ) ) for row in spamreader ] #NEWLINE#
array . pop ( 0 ) #NEWLINE#
print ( paramiko . __version__ ) #NEWLINE#
surface = cairo . ImageSurface ( cairo . FORMAT_ARGB32 , 0 , 0 ) #NEWLINE#
df = df [ ~ df [ 'str_name' ] . str . contains ( 'c' ) ] #NEWLINE#
self . conn . commit ( ) #NEWLINE#
raise ThreadError ( "This#SPACE#lock#SPACE#isn't#SPACE#owned#SPACE#by#SPACE#this#SPACE#thread." ) #NEWLINE#
eval ( input ( 'Press#SPACE#enter#SPACE#to#SPACE#exit#SPACE#;)' ) ) #NEWLINE#
print ( df_concat . median ( ) ) #NEWLINE#
"""['first',#SPACE#'sec',#SPACE#'third']""" . split ( "'" ) [ 1 : : 2 ] #NEWLINE#
principals = Principal ( app ) #NEWLINE#
print ( soup ) #NEWLINE#
file . writelines ( input_lines ) #NEWLINE#
my_copy = copy . deepcopy ( my_dict ) #NEWLINE#
combine_date_time ( df , 'MEETING#SPACE#DATE' , 'MEETING#SPACE#TIME' ) #NEWLINE#
assert f ( [ [ 0 , 100 ] , [ 9 , 10 ] , [ 12 , 90 ] ] ) == [ [ 9 , 10 ] , [ 12 , 90 ] ] #NEWLINE#
ax . set_title ( 'a=%d' % key ) #NEWLINE#
axes [ 0 ] . set_title ( 'Unlogged' ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , columns = list ( 'ab' ) ) #NEWLINE#
df = pd . read_csv ( 'data.csv' , header = None , names = [ 'Name' , 'DATE' ] ) #NEWLINE#
self . mplvl . setLayout ( self . vLayout ) #NEWLINE#
plt . plot ( kalman_x , kalman_y , 'g-' ) #NEWLINE#
pl . show ( ) #NEWLINE#
x = conn . cursor ( ) #NEWLINE#
return borderseg , X , labels , Xslice #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
row_result . append ( row_separator ) #NEWLINE#
session . add_all ( [ Foo ( 'test' ) , Foo ( 'nips' ) ] ) #NEWLINE#
cv2 . imshow ( 'Keypoints2' , im_with_keypoints2 ) #NEWLINE#
nrows = con . execute ( 'SELECT#SPACE#count(*)#SPACE#FROM#SPACE#users' ) . fetchone ( ) [ 0 ] #NEWLINE#
sum_list3 = max ( array3 . sum ( ) , 1e-06 ) #NEWLINE#
sys . exit ( e ) #NEWLINE#
np . random . seed ( 12345 ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
np . transpose ( arr , [ 2 , 0 , 1 ] ) . shape #NEWLINE#
from functools import reduce #NEWLINE# assert reduce ( dict . get , list_address [ : - 1 ] , dict_nested ) == list_address [ - 1 ] #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
- 47.5 , - 10.4 , 19.1 , 25.9 , 18.9 , - 10.4 , - 2.1 , - 47.6 , 41.8 , - 12.1 , - 15.7 , 12.1 , - 11.0 , - 0.6 #NEWLINE#
only_roman_chars ( 'hôtel#SPACE#lœwe' ) #NEWLINE#
only_roman_chars ( 'frappé' ) #NEWLINE#
is_absolute ( '/some/path' ) #NEWLINE#
any ( '#SPACE#' in b for b in board [ 1 : ] ) #NEWLINE#
window . show ( ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
( df == 0 ) . all ( ) #NEWLINE#
from django . core . files . uploadedfile import SimpleUploadedFile #NEWLINE#
loop . run_until_complete ( task ) #NEWLINE#
{ 'id' : '3456' , 'name' : 'Art' , 'pw' : '' } , #NEWLINE#
a [ : , ( 0 ) ] . max ( ) #NEWLINE#
output . close ( ) #NEWLINE#
print ( 'Stopped#SPACE#by#SPACE#user.' ) #NEWLINE#
print ( im . max ( ) ) #NEWLINE#
L = [ ( 1 , 2 ) , ( 1 , 3 ) , ( 1 , 4 ) , ( 1 , 5 ) , ( 1 , 6 ) ] #NEWLINE#
os . chdir ( folder ) #NEWLINE#
L . grid ( row = i , column = j ) #NEWLINE#
val = getattr ( obj , 'attr_to_check' , default_value ) #NEWLINE#
return np . sqrt ( ( q * q . T ) . sum ( ) ) #NEWLINE#
words = l . split ( ) #NEWLINE#
doc = lxml . etree . parse ( xml ) #NEWLINE# count = doc . xpath ( 'count(//author)' ) #NEWLINE#
'INFO' , 'LogRecord' , 'Logger' , 'LoggerAdapter' , 'Manager' , 'NOTSET' #NEWLINE#
'cStringIO' , 'codecs' , 'critical' , 'currentframe' , 'debug' , 'disable' #NEWLINE#
instance . set_password ( attrs . get ( 'password' ) ) #NEWLINE#
return str ( theint ) #NEWLINE#
s3 = boto . connect_s3 ( ) #NEWLINE#
return [ i for i , j in takewhile ( lambda i_j : i_j [ 0 ] == i_j [ 1 ] , zip ( list1 , #NEWLINE# list2 ) ) ] #NEWLINE#
window . _master = tk . Frame ( window ) #NEWLINE#
handle = Entrez . efetch ( 'pubmed' , id = '19304878,14630660' , retmode = 'xml' ) #NEWLINE#
headers = { 'content-type' : 'multipart/form-data' } #NEWLINE#
data = list ( map ( float , line . strip ( '#SPACE#[]\n' ) . split ( ) ) ) #NEWLINE#
nums = re . compile ( '[+-]?\\d+(?:\\.\\d+)?' ) #NEWLINE#
s . add ( val ) #NEWLINE#
os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) ) #NEWLINE#
print ( 'Original#SPACE#execution' ) #NEWLINE#
set_broder ( ws , 'C3:H10' ) #NEWLINE#
ax . axis ( 'tight' ) #NEWLINE#
d . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S' ) #NEWLINE#
data = mysocket . recv ( 4096 ) #NEWLINE#
my_function ( test , this , out , like , so , something , indent ) #NEWLINE#
insert_spaces ( 'abcdefghijklmnopqrstuvwxyz' , list ( range ( 0 , 16 , 5 ) ) ) #NEWLINE#
print ( driver . title ) #NEWLINE#
fo = urllib . request . urlopen ( 'http://www.python.org' ) #NEWLINE#
list ( partition ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] , 3 ) ) #NEWLINE#
x [ 2 : ] . sort ( ) #NEWLINE#
ax . set_title ( 'Simple#SPACE#XY#SPACE#point#SPACE#plot' ) #NEWLINE#
df = pd . DataFrame ( np . random . rand ( 10000000 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE#
print ( Foo . objects . in_a_number_order ( id__in = [ 5 , 4 , 3 ] ) ) #NEWLINE#
ch = logging . StreamHandler ( ) #NEWLINE#
parser . add_argument ( 'records' , type = str ) #NEWLINE#
parser . add_argument ( 'rating' , type = str ) #NEWLINE#
parser . add_argument ( 'notes' , type = str ) #NEWLINE#
parser . error ( 'Custom#SPACE#mapping#SPACE#strategy#SPACE#requires#SPACE#a#SPACE#path' ) #NEWLINE#
headers = { 'content-type' : 'application/x-www-form-urlencoded' } #NEWLINE#
Base . metadata . create_all ( e ) #NEWLINE#
print ( 'test1' ) #NEWLINE#
next ( reader ) #NEWLINE#
plt . colorbar ( heatmap ) #NEWLINE#
c . writerow ( sh . row_values ( r ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
json . dump ( jsonData , outfile , sort_keys = True , indent = 4 , ensure_ascii = False ) #NEWLINE#
model3 . py #NEWLINE#
model1 . py #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
plt . clf ( ) #NEWLINE#
fd . close ( ) #NEWLINE#
urlobj = urllib . request . urlopen ( url ) #NEWLINE#
yaml . add_constructor ( 'tag:yaml.org,2002:opencv-matrix' , opencv_matrix ) #NEWLINE#
A . __init__ ( self , * a , ** k ) #NEWLINE#
parser . parse_args ( [ 'command_1' , 'wellness' , '-b#SPACE#x' ] ) #NEWLINE#
res . append ( value ) #NEWLINE#
window = pygame . display . set_mode ( ( WIDTH , HEIGHT ) ) #NEWLINE#
c = [ ( a [ x ] [ 0 ] , a [ x + 1 ] [ 0 ] , a [ x + 2 ] [ 0 ] ) for x , _ in enumerate ( a ) if a [ x ] [ 1 #NEWLINE# ] == b [ 0 ] and a [ x + 1 ] [ 1 ] == b [ 1 ] and a [ x + 2 ] [ 1 ] == b [ 2 ] ] #NEWLINE#
fig . canvas . mpl_connect ( 'draw_event' , print_pixel_coords ) #NEWLINE#
map ( pow , [ 2 , 3 ] , [ 4 , 2 ] ) #NEWLINE#
session . add ( marten ) #NEWLINE#
session . add ( shrew ) #NEWLINE#
session . add ( loris ) #NEWLINE#
fb . append ( 'Fizz' ) #NEWLINE#
fb . append ( 'Buzz' ) #NEWLINE#
Newlist . append ( x ) #NEWLINE#
matplotlib . rcParams [ 'backend.qt4' ] = 'PySide' #NEWLINE#
d . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
loop . run ( ) #NEWLINE#
base64 . urlsafe_b64decode ( enc ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
return a , b #NEWLINE#
mock_boo_obj = mock . Mock ( ) #NEWLINE#
return ',#SPACE#' . join ( self . data ) #NEWLINE#
np . ones ( 10 , dtype = bool ) #NEWLINE#
print ( root . find ( 'b' ) ) #NEWLINE#
print ( as_list ) #NEWLINE#
CoverageACol [ 0 , 0 ] = 'Hello' #NEWLINE#
np . random . seed ( 42 ) #NEWLINE#
value_sums = np . bincount ( idx , value . ravel ( ) ) #NEWLINE#
yaml . load ( s ) #NEWLINE#
return random . choice ( [ left , right ] ) , random . choice ( [ top , bottom ] ) #NEWLINE#
f . quit ( ) #NEWLINE#
layout . addWidget ( self . list ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
( 'A' , 'B' ) + tuple ( l ) + ( 'C' , ) #NEWLINE#
parent = node [ 'parent' ] #NEWLINE#
os . system ( 'clear' ) #NEWLINE#
pd . Series ( date_rng . format ( ) ) #NEWLINE#
z = pd . read_csv ( io . StringIO ( x ) ) #NEWLINE#
obj . __class__ = newclass #NEWLINE#
ax . set_yticks ( list ( range ( 1 , 5 ) ) ) #NEWLINE#
df3 . columns = [ 'fruit' , 'rating' , 'count' ] #NEWLINE#
d1 = { 'UID' : 'A12B4' , 'name' : 'John' , 'email' : 'hi@example.com' } #NEWLINE#
return datetime . now ( ) . strfmtime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
filemenu . add_command ( label = 'Exit' , command = root . destroy ) #NEWLINE#
self . panel . SetFocus ( ) #NEWLINE#
df . columns = df . columns . map ( '' . join ) #NEWLINE#
df . iloc [ df [ [ 'A' ] ] . convert_objects ( convert_numeric = True ) . dropna ( ) . index ] #NEWLINE#
sock . close ( ) #NEWLINE#
nax . set_yticks ( tcks ) #NEWLINE#
{ ( 1 ) : 2 , ( 2 ) : 1 } #NEWLINE#
request . add_header ( 'Accept' , 'text/html' ) #NEWLINE#
print ( ( df . Status == 'FAIL' ) . astype ( int ) . cumsum ( ) ) #NEWLINE#
r = re . compile ( '[ab]' ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
mydf = df1 . groupby ( [ 'key' , 'year' ] ) . size ( ) . reset_index ( ) #NEWLINE#
pylab . plot ( 0 , 0 , 'ro' , label = 'one#SPACE#point' ) #NEWLINE#
df . POINTS = ( df . POINTS * ( df . POINTS == df . DATA ) ) . fillna ( 0 ) #NEWLINE#
print ( 'Content:' , post . xpath ( 'Content' ) [ 0 ] . text ) #NEWLINE#
datetime . datetime . now ( pytz . timezone ( 'US/Central' ) ) . strftime ( #NEWLINE# '%Y-%m-%dT%H:%M:%S.%f%z' ) #NEWLINE#
return '%d,#SPACE#%d,#SPACE#%d' % ( self . x , self . y , self . z ) #NEWLINE#
tree = et . fromstring ( xml ) #NEWLINE#
df [ 3 ] . plot ( ax = axes [ 1 , 1 ] ) #NEWLINE#
username = db . Column ( db . String ( 20 ) , unique = True ) #NEWLINE#
print ( sys . path ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( 'Go' ) #NEWLINE#
np . where ( np . isnan ( a ) , ma . array ( a , mask = np . isnan ( a ) ) . mean ( axis = 1 ) , a ) #NEWLINE#
return np . asarray ( listOfEmb , dtype = float ) . mean ( ) #NEWLINE#
GTK_WIMP_DLL = 'libwimp.dll' #NEWLINE#
do_something ( ) #NEWLINE#
return self . generator . __len__ ( ) #NEWLINE#
os . system ( 'python#SPACE#..//..//script1.py#SPACE#%s' % data ) #NEWLINE#
yield Request ( item [ 'link' ] , meta = { 'dont_redirect' : True , #NEWLINE# 'handle_httpstatus_list' : [ 302 ] } , callback = self . your_callback ) #NEWLINE#
json . dump ( row , jsonfile ) #NEWLINE#
days / np . timedelta64 ( 1 , 'D' ) #NEWLINE#
zip ( L , L [ 1 : ] + L [ : 1 ] ) #NEWLINE#
stdscr . addstr ( 1 , 0 , 'hello' ) #NEWLINE#
members = models . ManyToManyField ( User , through = 'Role' ) #NEWLINE#
pickle . dump ( favorite_color , open ( 'save.p' , 'wb' ) ) #NEWLINE#
plt . ion ( ) #NEWLINE#
con . execute ( 'VACUUM' ) #NEWLINE#
print ( ws [ 'A4' ] . font . color ) #NEWLINE#
sum ( l ) #NEWLINE#
store . select ( 'df_cols' , [ Term ( 'columns' , '=' , 'A' ) ] ) #NEWLINE#
Session . key = '' #NEWLINE#
ax . right_ax . set_ylabel ( 'Average#SPACE#age' ) #NEWLINE#
dest . close ( ) #NEWLINE#
self . initial [ 'material' ] = 'Test' #NEWLINE#
mydll = ctypes . cdll . LoadLibrary ( 'test.dll' ) #NEWLINE#
fig = pl . figure ( figsize = ( 6 , 6 ) ) #NEWLINE#
120249.0 , 126360.0 , 133881.0 , 141891.0 , 151993.0 , 160876.0 , 165350.0 #NEWLINE#
165730.0 , 169207.0 , 183625.0 , 197346.0 , 212152.0 , 226402.0 , 267298.0 #NEWLINE#
277366.0 , 276022.0 , 288324.0 , 299201.0 , 322104.0 , 347048.0 , 372535.0 #NEWLINE#
mystring = "Time_to_fire_up_Kowalski's_Nuclear_reactor." #NEWLINE# mystring . split ( '_' ) [ 4 ] #NEWLINE#
pass #NEWLINE#
def get_new_failures ( list1 , list2 ) : #NEWLINE# #INDENT# check = set ( [ ( d [ 'classname' ] , d [ 'testname' ] ) for d in list2 ] ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# return [ d for d in list1 if ( d [ 'classname' ] , d [ 'testname' ] ) not in check ] #NEWLINE#
list = [ i . rstrip ( '0' ) for i in listOfNum ] #NEWLINE#
all ( [ ] ) #NEWLINE#
sorted ( list ( range ( len ( L ) ) ) , key = lambda i : L [ i ] ) #NEWLINE#
plt . plot ( x , y_n , 'o' , label = 'noisy#SPACE#data' ) #NEWLINE#
hist2d ( xval , yval , bins = 1000 , range = np . array ( [ ( - 6 , 6 ) , ( - 4.5 , 4.5 ) ] ) ) #NEWLINE#
res = next ( ( idx for idx , ( x , y ) in coupled_idx if x != y ) , None ) #NEWLINE#
next ( i for i in range ( 100000 ) if i == 1000 ) #NEWLINE#
print ( ( 'set' , self . name ) ) #NEWLINE#
self . command ( ) #NEWLINE#
'xa' in 'xdasds' #NEWLINE#
evens = ( i for i in range ( limit ) if i % 2 == 0 ) #NEWLINE#
print ( '' . join ( my_dashes ) ) #NEWLINE#
text_widget . index ( Tkinter . INSERT ) #NEWLINE#
ax . figure . canvas . mpl_connect ( 'draw_event' , _wrap ) #NEWLINE#
nbrs . kneighbors ( X ) #NEWLINE#
sns . swarmplot ( x = 'one' , y = 'two' , data = df , hue = 'key1' , size = 10 ) #NEWLINE#
fruits . sort ( ) #NEWLINE#
model . compile ( loss = 'binary_crossentropy' , optimizer = sgd ) #NEWLINE#
print ( list ( indices ( '-5,#SPACE#1:3,#SPACE#6,#SPACE#8:15:2,#SPACE#20-25,#SPACE#18' ) ) ) #NEWLINE#
f = open ( 'foo.pck' , 'rb' ) #NEWLINE#
print ( df [ '2016-1-1#SPACE#09:00:00' : '2016-1-1#SPACE#17:00:00' ] ) #NEWLINE#
print ( tensor [ 0 ] . eval ( ) ) #NEWLINE#
print ( 'sigma:#SPACE#' , mean_params [ 1 ] , '#SPACE#+/-#SPACE#' , std_params [ 1 ] * 1.95996 ) #NEWLINE#
idx . append ( df [ df [ 'fruitname' ] == fruit ] . last_valid_index ( ) ) #NEWLINE#
df = pd . DataFrame ( { 'alpha' : [ 'a' , 'a' , 'b' , 'b' , 'c' , 'e' , 'f' , 'g' ] } ) #NEWLINE# pd . get_dummies ( df . replace ( { '[^a-c]' : None } , regex = True ) ) #NEWLINE#
self . frame . focus_set ( ) #NEWLINE#
foundtext = soup . find ( 'p' , text = searchtext ) #NEWLINE#
if 'limit' in user_data : #NEWLINE# #INDENT# limit = int ( user_data [ 'limit' ] ) #NEWLINE#
set ( [ l [ 0 ] for l in a_list ] ) #NEWLINE#
im . seek ( im . tell ( ) + 1 ) #NEWLINE#
my_input . ask ( ) #NEWLINE#
p . stdout . close ( ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
inverted_image = PIL . ImageOps . invert ( image ) #NEWLINE#
100 * ( ( 0.3 - 0.8 ) / 0.8 + ( 4 - 0.6 ) / 0.6 ) #NEWLINE#
pass #NEWLINE#
writer . writerow ( row ) #NEWLINE#
np . tile ( a , ( 6 , 1 ) ) #NEWLINE#
merged_dict = { k : [ d . get ( k , np . nan ) for d in all_dicts ] for k in keys } #NEWLINE#
list ( takewhile ( lambda i_j : i_j [ 0 ] == i_j [ 1 ] , zip ( list1 , list2 ) ) ) #NEWLINE#
raise argparse . ArgumentTypeError ( msg ) #NEWLINE#
X_train , X_test , y_train , y_test = ttsplit ( X , y , test_size = 0.1 , random_state = 0 ) #NEWLINE#
f = open ( 'generic.png' , 'r' ) #NEWLINE# f . name #NEWLINE#
out = np . dot ( arr_one , arr_two . T ) #NEWLINE#
msg . attach ( img ) #NEWLINE#
f . writelines ( line + '\n' for line in my_list ) #NEWLINE#
print ( '#SPACE##SPACE#not#SPACE#mounted' ) #NEWLINE#
sys . path . insert ( 0 , os . path . abspath ( '.' ) ) #NEWLINE#
txttime = os . path . getmtime ( os . path . join ( root , txt ) ) #NEWLINE#
rx = re . compile ( '^TEMPLATES#SPACE#=#SPACE#\\(.+\\)' ) #NEWLINE#
return f [ : : - 1 ] #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
ioloop . IOLoop . instance ( ) . run_sync ( main ) #NEWLINE#
_ranks . append ( { } ) #NEWLINE#
print ( list ( dedupe_adjacent ( data ) ) ) #NEWLINE#
print ( 'LMS#SPACE#yest#SPACE#-#SPACE#y:' , averr ) #NEWLINE#
del x #NEWLINE#
print ( ( '\t' , m . group ( 2 ) ) ) #NEWLINE#
axes [ 0 ] . set ( ylabel = 'Original#SPACE#Data' ) #NEWLINE#
log . info ( 'Filter#SPACE#me!' ) #NEWLINE#
print ( argparse . __dict__ ) #NEWLINE#
request . session . set_test_cookie ( ) #NEWLINE#
d [ 'key' ] = 'value' #NEWLINE#
first_list = [ 1 , 2 , 3 , 4 ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
ax . set_zlim3d ( 0 , N ) #NEWLINE#
somethingThread . start ( ) #NEWLINE#
new += line + '\n' #NEWLINE#
item . set_rotation ( 45 ) #NEWLINE#
[ hex ( 305419896 >> i & 255 ) for i in ( 24 , 16 , 8 , 0 ) ] #NEWLINE#
return a * np . exp ( - b * x ) + c #NEWLINE#
Client ( * sys . argv [ 1 : ] ) . run ( ) #NEWLINE#
b = np . array ( [ 2 , 4 , 6 ] ) #NEWLINE#
l = [ 'some' , 'here' , 'tags' , 'some' , 'created' , 'here' , 'tags' ] #NEWLINE#
def my_imports ( module_name ) : #NEWLINE# #INDENT# globals ( ) [ module_name ] = __import__ ( module_name ) #NEWLINE#
all ( t_df . columns == df . columns ) #NEWLINE#
binary_f ( lambda v : v >= '1' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
binary_f ( lambda v : v >= '1.13' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
binary_f ( lambda v : v >= '2.4' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
binary_f ( lambda v : v >= '3' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
binary_f ( lambda v : v >= '3.2' , [ '1.0' , '1.14' , '2.3' , '3.1' , '4' ] ) #NEWLINE#
plt . imshow ( my_image2 , vmin = 0 , vmax = 10 , cmap = 'jet' , aspect = 'auto' ) #NEWLINE#
bodytext = body . text #NEWLINE#
df [ x + '_ratio' ] = df [ x + '_us' ] / df [ x + '_ww' ] #NEWLINE#
Timestamp ( '17:10' ) - Timestamp ( '9:45' ) #NEWLINE#
fig . savefig ( 'figure.png' , dpi = 1 ) #NEWLINE#
gray = cv . CreateMat ( img . height , img . width , cv . CV_8UC1 ) #NEWLINE# cv . CvtColor ( img , gray , cv . CV_BGR2GRAY ) #NEWLINE#
Session . remove ( ) #NEWLINE#
screen = pygame . display . set_mode ( ( 800 , 800 ) ) #NEWLINE#
[ DisplayName ( 'Text' ) , Browsable ( true ) , Category ( 'Design' ) ] #NEWLINE#
fig . savefig ( imgdata , format = 'png' ) #NEWLINE#
inner_qs = table2 . objects . all ( ) #NEWLINE# results = table1 . objects . exclude ( field1__in = inner_qs ) #NEWLINE#
out = np . count_nonzero ( ( viewW ( A , B . shape ) == B ) . all ( ( 2 , 3 ) ) ) #NEWLINE#
my_args = [ 'foo' , 'bar' , 42 ] #NEWLINE# 'Hello#SPACE#%s' % ',#SPACE#' . join ( [ str ( e ) for e in my_args ] ) #NEWLINE#
dlopen ( 'plugin.so' , RTLD_NOW | RTLD_GLOBAL ) #NEWLINE#
print ( str ( a [ 1 ] ) ) #NEWLINE#
for d in my_dicts : #NEWLINE# #INDENT# d . update ( ( k , 'value3' ) for k , v in d . items ( ) if v == 'value2' ) #NEWLINE#
a [ ( np . arange ( new [ 0 ] ) % old [ 0 ] ) [ : , ( None ) ] , np . arange ( new [ 1 ] ) % old [ 1 ] ] #NEWLINE#
book_author . save ( ) #NEWLINE#
session . add ( stoat ) #NEWLINE#
'\\\\?\\' + file_name #NEWLINE#
startupinfo = subprocess . STARTUPINFO ( ) #NEWLINE#
df . shift ( 2 ) . iloc [ : , 4 : ] #NEWLINE#
dt = datetime . datetime . strptime ( s , fmt ) #NEWLINE#
df . sort ( 'A' ) #NEWLINE#
df . index = df . index . str . split ( '_' , expand = True ) #NEWLINE#
a . shape #NEWLINE#
self . response . headers [ 'WWW-Authenticate' ] = 'Basic#SPACE#realm="MYREALM"' #NEWLINE#

s = SomeClass ( bar = 1 , foo = 0 ) #NEWLINE#
people = Person . objects . filter ( employee__in = employee_query ) #NEWLINE#
df . groupby ( [ pd . Grouper ( key = 'date' , freq = 'D' ) ] ) [ 'crime' ] . value_counts ( ) #NEWLINE#
df [ 'Test' ] = df . apply ( lambda row : max ( row [ 'Open' ] , row [ 'Close' ] ) , axis = 1 ) #NEWLINE# df #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
newUserRef . set ( { 'name' : 'fred' , 'age' : '32' } ) #NEWLINE#
p = np . append ( p , [ 7 , 8 , 9 ] , 1 ) #NEWLINE#
list ( filter ( pred , A ) ) #NEWLINE#
print ( f . readlines ( ) ) #NEWLINE#
self . itemSelectionChanged . connect ( self . print_row ) #NEWLINE#
newcols . columns = [ 'hour' , 'weekday' , 'weeknum' ] #NEWLINE#
a , b = test ( ) #NEWLINE#
token . get_access_token ( code ) #NEWLINE#
my_array = np . array ( [ [ 100 , 200 ] , [ 300 , 400 ] ] , np . uint16 ) #NEWLINE#
tmp . append ( float ( line ) ) #NEWLINE#
df #NEWLINE#
open ( path , 'w' ) . close ( ) #NEWLINE#
re . predict_proba ( X_test ) #NEWLINE#
env [ 'SQLITE3COMSTR' ] = 'Generating#SPACE#$TARGET#SPACE#from#SPACE#$SOURCES#SPACE#with#SPACE#sqlite3' #NEWLINE#
new_list = [ fruit for fruit in a if fruit not in b ] #NEWLINE#
log = logging . getLogger ( __name__ ) #NEWLINE#
return datetime . date ( year , month , day ) #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 1 , 2 ] ] ) #NEWLINE#
cookie = { 'enwiki_session' : '17ab96bd8ffbe8ca58a78657a918558' } #NEWLINE# r = requests . post ( 'http://wikipedia.org' , cookies = cookie ) #NEWLINE#
df . eq ( 0 ) . apply ( lambda x : list ( df . columns [ x ] ) , 1 ) #NEWLINE#
m . groups ( 1 ) #NEWLINE#
a = A ( 123 , '123' , [ 1 , 2 , 3 ] ) #NEWLINE#
ax . axvline ( linewidth = 2 , color = 'blue' ) #NEWLINE#
y = random . randrange ( 0 , maxy ) #NEWLINE#
setattr ( self . obj , self . property_names [ item ] , value ) #NEWLINE#
os . path . abspath ( sys . modules [ LocationArtifact . __module__ ] . __file__ ) #NEWLINE#
upload_files = self . get_uploads ( 'file' ) #NEWLINE#
p . x , p . y , p [ 0 ] , p [ 1 ] #NEWLINE#
c . nonzero ( ) #NEWLINE#
xs . append ( x ) #NEWLINE#
return len ( s ) - len ( s . rstrip ( '0' ) ) #NEWLINE#
( - 4 ) ** 2 #NEWLINE#
ax . yaxis . set_ticks ( np . arange ( 0 , 100 , 10 ) ) #NEWLINE#
str ( Decimal ( '10' ) ) #NEWLINE#
s = smtplib . SMTP ( 'localhost' ) #NEWLINE#
team2 . name = 'Joe' #NEWLINE#
- rtest - requirements . txt #NEWLINE#
mylist . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
[ [ 1 , 4 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 7 , 11 ] , [ 8 , None ] , [ 9 , None ] , [ 10 , None ] ] #NEWLINE#
soup . find ( name = 'table' , class_ = 'hadith_reference' ) . tr . text #NEWLINE#
os . popen ( """#NEWLINE#perl#SPACE#-mPOSIX#SPACE#-e#SPACE#"print#SPACE#POSIX::asctime(localtime)\"#NEWLINE#""" ) . read ( ) #NEWLINE#
p = p [ ( np . arange ( p . shape [ 0 ] ) != r ) , : ] [ : , ( np . arange ( p . shape [ 1 ] ) != c ) ] #NEWLINE#
logger = logging . getLogger ( 'example' ) #NEWLINE#
print ( request . headers [ 'Host' ] ) #NEWLINE#
hasattr ( 'abc' , '__iter__' ) #NEWLINE#
self . button . clicked . connect ( self . dialog . show ) #NEWLINE#
[ 'food' , 'drink' ] #NEWLINE#
smax . on_changed ( update ) #NEWLINE#
ax . set_xticklabels ( xlabels ) #NEWLINE#
a = numpy . array ( list ( range ( 10 ) ) ) #NEWLINE# a [ : : - 1 ] #NEWLINE#
love_ctx . add ( ( alice , loves , charlie ) ) #NEWLINE#
ax . set_yticks ( np . arange ( len ( df . index ) ) + 0.5 ) #NEWLINE#
super ( Window , self ) . __init__ ( ) #NEWLINE#
print ( 'code:' + str ( response . status_code ) ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
x = x - int ( x ) #NEWLINE#
myset . add ( item ) #NEWLINE#
raise ValueError ( 'points#SPACE#do#SPACE#not#SPACE#form#SPACE#a#SPACE#rectangle' ) #NEWLINE#
b = p . map ( func , a ) #NEWLINE#
inlist = [ - 1 , - 2 , - 3 ] #NEWLINE#
regex . match ( 'a++ab' , 'aaaaaaaaaab' ) #NEWLINE#
b = '' . join ( [ hex ( int ( value ) ) [ 2 : ] . zfill ( 2 ) for value in a ] ) #NEWLINE#
f2 = wx . Frame ( None , title = 'Frame#SPACE#1#SPACE#(for#SPACE#feedback)' , size = ( 400 , 350 ) ) #NEWLINE#
time . strptime ( d1 , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
a = numpy . array ( [ [ 2.0 , 0.0 , 0.0 ] , [ 0.0 , 2.0 , 0.0 ] , [ 0.0 , 0.0 , 4.0 ] ] ) #NEWLINE# numpy . savetxt ( sys . stdout , a , fmt = '%.4f' ) #NEWLINE#
globals ( ) #NEWLINE#
pprint ( { x : list ( range ( x ) ) for x in range ( 10 ) } ) #NEWLINE#
time . sleep ( 0.001 ) #NEWLINE#
a . add_child ( b ) #NEWLINE#
print ( ToSI ( d ) ) #NEWLINE#
ax1 . plot ( xv , yv , color = 'blue' , lw = 1 , linestyle = 'dashed' ) #NEWLINE#
np . einsum ( '...j,...j->...' , vf , vf , dtype = np . int64 ) [ - 1 , - 1 , - 1 ] #NEWLINE#
x . bar ( ) #NEWLINE#
redis_instance . rpush ( 'process#SPACE#log' , message ) #NEWLINE#
d [ 'Baltimore#SPACE#Ravens' ] [ 0 ] += 1 #NEWLINE#
t . pack ( side = 'left' , fill = 'both' , expand = True ) #NEWLINE#
def rawstr ( s ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( ET . tostring ( root ) ) #NEWLINE#
class BaseClass ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class ChildClass ( BaseClass ) : #NEWLINE# #NEWLINE# def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# #INDENT# super ( ChildClass , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
sys . path . append ( os . getcwd ( ) ) #NEWLINE#
print ( '\t' . join ( map ( str , x ) ) ) #NEWLINE#
df . drop ( to_drop , axis = 1 , inplace = True ) #NEWLINE#
print ( 'You#SPACE#rolled#SPACE#a#SPACE#' + str ( R ) + '.' ) #NEWLINE#
print ( "Error#SPACE#when#SPACE#processing#SPACE#file#SPACE#'{}'" . format ( name ) ) #NEWLINE#
print ( ',' . join ( matches ) ) #NEWLINE#
ax . set_ylabel ( 'time(s)' , fontsize = 12 ) #NEWLINE#
print ( 'Salaam' ) #NEWLINE#
df . loc [ df [ 'date2' ] . notnull ( ) , 'date1' ] = df [ 'date2' ] #NEWLINE#
elevations = json . dumps ( data ) #NEWLINE#
format_timedelta ( lasted , '{hours_total}:{minutes2}:{seconds2}' ) #NEWLINE#
plt . show ( ) #NEWLINE#
matplotlib . pyplot . scatter ( x , y ) #NEWLINE# matplotlib . pyplot . show ( ) #NEWLINE#
fig . colorbar ( cf , cax = cax ) #NEWLINE#
print ( 'Sent' ) #NEWLINE#
print ( 'Reeiving...' ) #NEWLINE#
print ( '####SPACE#closed#SPACE####' ) #NEWLINE#
print ( 'thread#SPACE#terminating...' ) #NEWLINE#
print ( 'a#SPACE#:' , a ) #NEWLINE#
print ( dpkt . ethernet . Ethernet ( packet ) ) #NEWLINE#
df [ 'newcol' ] = arr . toarray ( ) . tolist ( ) #NEWLINE#
ax . set_xlabel ( 'AVG' ) #NEWLINE#
import scipy . ndimage as ndimage #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( cj ) ) #NEWLINE#
config . add_route ( 'site_users' , '/user' ) #NEWLINE#
config . add_route ( 'site_items' , '/item' ) #NEWLINE#
l . append ( s [ i : i + 10 ] ) #NEWLINE#
ax2 . set_xticklabels ( X2tick_location ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
a2 = np . array ( [ [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
y = x . dot ( w ) #NEWLINE#
root [ 0 ] . tail #NEWLINE#
search ( myDict , 'Mary' ) #NEWLINE#
plt . xlabel ( 'Value' ) #NEWLINE#
do_something_useful ( ) #NEWLINE#
X_max = np . max ( X [ idx ] ) #NEWLINE#
df = df . swaplevel ( 0 , 1 , 1 ) #NEWLINE#
a = Dimarray ( values , 'lat' , lat , 'lon' , lon ) #NEWLINE#
dfile . write ( sfile . read ( ) ) #NEWLINE#
print ( 'end' ) #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
hermes . __loader__ #NEWLINE#
y . append ( int ( i ) ) #NEWLINE#
print ( parseval_1 - parseval_2_2 ) #NEWLINE#
self . frame . pack ( ) #NEWLINE#
print ( glob . glob ( 'temp/*' ) ) #NEWLINE#
return { k : map_nested_dicts ( v , func ) for k , v in ob . items ( ) } #NEWLINE#
list_of_ints = [ int ( i ) for i in str ( ISBN ) ] #NEWLINE#
solve ( fprime , x ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
imarray = numpy . array ( im ) #NEWLINE#
time . sleep ( 0.25 ) #NEWLINE#
a = '%he#llo,#SPACE#my#SPACE#website#SPACE#is:#SPACE#http://www.url.com/abcdef123' #NEWLINE# re . findall ( '(http://\\S+|\\S*[^\\w\\s]\\S*)' , a ) #NEWLINE#
random . shuffle ( count_list ) #NEWLINE#
for key in bucket . list ( prefix = 'your/directory/' ) : #NEWLINE# #INDENT# key . delete ( ) #NEWLINE#
"""gsettings#SPACE#set#SPACE#org.gnome.desktop.screensaver#SPACE#idle-activation-enabled#SPACE#false""" #NEWLINE#
"""resume#SPACE#linux#SPACE#screensaver""" #NEWLINE#
"""gsettings#SPACE#set#SPACE#org.gnome.desktop.screensaver#SPACE#idle-activation-enabled#SPACE#true""" #NEWLINE#
multiprocessing . Process . __init__ ( self ) #NEWLINE#
function_to_decorate ( * args , ** kwargs ) #NEWLINE#
self . onThread ( self . _doSomething ) #NEWLINE#
"""[0,#SPACE#1,#SPACE#2,#SPACE#3,#SPACE#4,#SPACE#5,#SPACE#6,#SPACE#7,#SPACE#8,#SPACE#9,#SPACE#10]""" #NEWLINE#
threading . Timer ( 10 , foo ) . start ( ) #NEWLINE#
cur . execute ( query ) #NEWLINE#
plt . show ( ) #NEWLINE#
i_take_strings ( * s . split ( ) ) #NEWLINE#
mp . rcParams [ 'patch.linewidth' ] = 0.5 #NEWLINE#
ax2 . set_ylabel ( 'Temperature#SPACE#($^\\circ$C)' ) #NEWLINE#
max_idx = l . index ( max_val ) #NEWLINE#
raise Exception ( 'Invalid#SPACE#whence' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 3 , 4 , 5 ] , 'b' : [ 6 , 7 , 6 ] , 'c' : [ 9 , 10 , 11 ] } ) #NEWLINE#
ax1 . legend ( bbox_to_anchor = ( 1.2 , 1 ) ) #NEWLINE#
colormap_r = ListedColormap ( colormap . colors [ : : - 1 ] ) #NEWLINE#
name = models . CharField ( max_length = 50 ) #NEWLINE#
glColor3f ( 1.0 , 1.0 , 1.0 ) #NEWLINE#
self . setCentralWidget ( self . central ) #NEWLINE#
[ ( [ x ] + p ) for x in seqs [ 0 ] for p in [ [ ] ] ] #NEWLINE#
sys . stdout . write ( str ( result ) ) #NEWLINE#
os . chdir ( '/mydir/' ) #NEWLINE#
print ( int ( b , 2 ) ) #NEWLINE#
dict . __setitem__ ( self , key , value ) #NEWLINE#
fig . savefig ( 'test_transpa.png' , dpi = 300 ) #NEWLINE#
df2 = df2 . set_index ( [ 'id' , 'location' ] ) #NEWLINE#
df [ 'streak' ] = df [ 'streak2' ] - df [ 'cumsum' ] #NEWLINE#
min_value = min ( d . values ( ) ) #NEWLINE# min_keys = [ k for k in d if d [ k ] == min_value ] #NEWLINE#
sys . exit ( main ( sys . argv [ 1 : ] ) ) #NEWLINE#
to_search = { x [ 0 ] : x for x in input } #NEWLINE#
ax1 . tick_params ( axis = 'y' , colors = plot_ax1 . get_color ( ) , ** tkw ) #NEWLINE#
r = requests . get ( url , stream = True ) #NEWLINE#
sched . unschedule_job ( job_function . job ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
print ( m . groups ( ) ) #NEWLINE#
fcntl . fcntl ( thePipe , fcntl . F_SETFL , os . O_NONBLOCK ) #NEWLINE#
a . shape #NEWLINE#
self . data = np . array ( [ ] ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
a = 5 #NEWLINE# globals ( ) [ 'a' ] #NEWLINE#
d [ 'k1' ] = 'k1#SPACE#value' #NEWLINE#
return min ( x for x in lst if x is not None ) #NEWLINE#
'\x00' , '\x07' , 't' , 'I' , 'M' , 'E' , '\x07' , 'à' , '\x05' #NEWLINE#
'\x89' , '\x00' , '\x00' , '\x00' , '\x0c' , 'I' , 'D' , 'A' , 'T' #NEWLINE#
smtpserver . starttls ( ) #NEWLINE#
draw = ImageDraw . Draw ( im ) #NEWLINE#
parsed = rdd . map ( json . loads ) #NEWLINE#
response not in ( 'y' , 'n' , 'yes' , 'no' ) #NEWLINE#
return os . path . join ( os . path . split ( __file__ ) [ 0 ] , fname ) #NEWLINE#
c . add ( o ) #NEWLINE#
df = pd . DataFrame ( [ [ 'A' , 2 ] , [ 'A' , 4 ] , [ 'B' , 6 ] ] ) #NEWLINE#
json . dump ( data , fp ) #NEWLINE#
rdd = sc . parallelize ( np . random . randint ( 1000000 , size = 700000 ) ) #NEWLINE#
pyplot . locator_params ( axis = 'x' , nticks = 10 ) #NEWLINE#
name = models . CharField ( max_length = 10 ) #NEWLINE#
print ( rna [ i : i + 3 ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
Foo . bar ( ) #NEWLINE#
form . fields [ 'Polygon' ] . widget . params [ 'map_options' ] [ 'buffer' ] = 0 #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
print ( my_bytes . decode ( 'string_escape' ) ) #NEWLINE#
[ ( 10 , 'a' ) ] #NEWLINE#
df [ 'que' ] = df [ 'que' ] . fillna ( 0 ) #NEWLINE#
return len ( np . unique ( array ) ) > 1 #NEWLINE#
log = logging . getLogger ( 'name' ) #NEWLINE#
df = pd . DataFrame ( { 'cat1' : [ 0 , 3 , 1 ] , 'cat2' : [ 2 , 0 , 1 ] , 'cat3' : [ 2 , 1 , 0 ] } ) #NEWLINE#
super ( BetterTagListField , self ) . __init__ ( label , validators , ** kwargs ) #NEWLINE#
func ( * args ) #NEWLINE#
logging . getLogger ( 'modulename' ) . addHandler ( logging . NullHandler ( ) ) #NEWLINE#
select . select ( [ A ] , [ ] , [ ] ) #NEWLINE#
connection = redis . Connection ( ** kwargs ) #NEWLINE#
b = np . array ( [ [ [ 1 , 2 ] , [ 2 , 3 ] ] , [ [ 3 , 4 ] , [ 5 , 6 ] ] ] ) #NEWLINE#
_location . gsm_location ( ) #NEWLINE#
print ( 'getcwd#SPACE#before:' , os . getcwd ( ) ) #NEWLINE#
print ( ( 'input#SPACE#1:' , inputarr [ 0 ] ) ) #NEWLINE#
root = lxml . etree . fromstring ( xmlstr ) #NEWLINE#
data [ 'new_parameter' ] = [ new_par1 , new_par2 ] #NEWLINE#
ax . ticklabel_format ( useOffset = False ) #NEWLINE#
print ( 'Needle#SPACE#found.' ) #NEWLINE#
super ( Ticker , self ) . __init__ ( ) #NEWLINE#
self . response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=test.zip' #NEWLINE#
return intvals [ i - 1 : i + 1 ] #NEWLINE#
fh . seek ( offset ) #NEWLINE#
get_indices ( a , b ) #NEWLINE#
return True #NEWLINE#
ax . set_ylabel ( 'V' , fontsize = 12 ) #NEWLINE#
print ( '"t5"#SPACE#was#SPACE#created#SPACE#at#SPACE#"%s"' % t5 . get_file_of_object_creation ( ) ) #NEWLINE#
db . execute ( 'Create#SPACE#table#SPACE#Users#SPACE#(Name,#SPACE#Location,#SPACE#Type)' ) #NEWLINE#
c . set_dashes ( [ ( 0 , ( 2.0 , 2.0 ) ) ] ) #NEWLINE#
sorted ( dictionary . values ( ) ) [ 0 ] #NEWLINE#
"""""" . join ( item for pair in swapped_pairs for item in pair ) #NEWLINE#
lower_blue = np . array ( [ 110 , 50 , 50 ] , dtype = np . uint8 ) #NEWLINE# upper_blue = np . array ( [ 130 , 255 , 255 ] , dtype = np . uint8 ) #NEWLINE#
include ( 'myfile.py' ) #NEWLINE#
print ( eformat ( 100008.70927939437 , 14 , 3 ) ) #NEWLINE#
( df == 0 ) . astype ( int ) #NEWLINE#
m . match ( 'a' ) #NEWLINE#
get_key ( d , 22 ) #NEWLINE#
ni . ifaddresses ( 'eth0' ) [ 2 ] [ 0 ] [ 'addr' ] #NEWLINE#
cdll . LoadLibrary ( 'libdl.so' ) . dlclose ( file . _handle ) #NEWLINE#
data . to_hdf ( 'test_store.hdf' , 'test' , mode = 'w' ) #NEWLINE#
locale . atoi ( '1,000,000' ) #NEWLINE#
np . bincount ( A , B ) #NEWLINE#
result = random . sample ( coo , 2 ) #NEWLINE#
sorted ( my_function ( ) . items ( ) ) #NEWLINE#
pylab . plot ( 0 , 0 , 'ro' , label = 'one#SPACE#point' ) #NEWLINE#
print ( 'B' , os . read ( f . fileno ( ) , 50 ) ) #NEWLINE#
test_Dict [ hash ( str ( 'abc' ) ) ] . name #NEWLINE#
s = struct . pack ( '>l' , b ) #NEWLINE#
( M == a [ : , ( None ) ] ) . argmax ( 1 ) #NEWLINE#
legend = DraggableLegend ( ax . legend ( ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
service = get_vision_service ( ) #NEWLINE#
start_response ( status , [ ( 'Content-type' , 'text/plain' ) ] ) #NEWLINE#
[ 1 , 2 , 3 , 4 ] #NEWLINE#
print ( df [ column ] ) #NEWLINE#
process . crawl ( MySpider ) #NEWLINE#
pass #NEWLINE#
self . x1 += self . speed * math . cos ( self . bearing ) #NEWLINE#
print ( 'I#SPACE#really#SPACE#am#SPACE#bar' ) #NEWLINE#
dict . __setitem__ ( d , new_key , v ) #NEWLINE#
doc = subprocess . Popen ( [ 'start' , '/WAIT' , 'file.pdf' ] , shell = True ) #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 , 10 ] ] #NEWLINE#
print ( timedelta ( minutes = 6 * 60 ) ) #NEWLINE#
logconsole = logging . getLogger ( 'console' ) #NEWLINE#
l = l [ : 1 ] + x + l [ 2 : ] #NEWLINE#
pool . terminate ( ) #NEWLINE#
img = Image . open ( 'image.png' ) #NEWLINE#
[ 10 , 200 , 30 , 400 , 500 ] #NEWLINE#
rotated = numpy . rot90 ( orignumpyarray , 3 ) #NEWLINE#
return f . seek ( 0 , whence = 2 ) #NEWLINE#
list2 . append ( dict2 . get ( key ) ) #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( url ) . read ( ) ) #NEWLINE#
return np . bincount ( ixs , minlength = mat . shape [ 0 ] ) . dot ( mat ) #NEWLINE#
d . pop ( 'inside' ) #NEWLINE#
df [ 'test1' ] = [ ( spaces [ - len ( i ) : ] + i ) for i in df [ 'test1' ] ] #NEWLINE#
root . geometry ( '%dx%d+%d+%d' % ( width , height , x , y ) ) #NEWLINE#
return struct . unpack ( 'I' , f . read ( 4 ) ) [ 0 ] #NEWLINE#
tabulka = soup . find ( 'table' , { 'class' : 'detail-char' } ) #NEWLINE#
return min ( k for k in d if k > key ) #NEWLINE#
draw ( ) #NEWLINE#
self . add_node ( destination ) #NEWLINE#
list ( grouper ( 2 , my_list ) ) #NEWLINE#
arcpy . RefreshTOC ( ) #NEWLINE#
int ( '' . join ( reversed ( str ( 12345 ) ) ) ) #NEWLINE#
super ( GalleryForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
with open ( fname , 'w' ) as f : #NEWLINE# #INDENT# f . writelines ( ',' . join ( str ( j ) for j in i ) + '\n' for i in matrix ) #NEWLINE#
gb1 . copy_to_a ( [ 1 , 2 ] ) #NEWLINE#
[ 17 , 40 , 235 ] #NEWLINE#
writer . writerow ( [ str ( s ) . encode ( 'utf-8' ) for s in row ] ) #NEWLINE#
print ( 'Most#SPACE#recent#SPACE#file#SPACE#=#SPACE#%s' % ( logfiles [ - 1 ] , ) ) #NEWLINE#
add . apply_async ( ( 1 , 4 ) , task_id = i ) #NEWLINE#
sequence = list ( zip ( * [ '123' , '134' , '234' , '214' , '223' ] ) ) #NEWLINE#
grid_sizer_1 . Add ( self . window_1 , 1 , wx . EXPAND , 0 ) #NEWLINE#
list ( iterateFinitely ( lambda x : [ x / 2 ] if x else [ ] , 20 ) ) #NEWLINE#
urllib . parse . unquote ( url ) . decode ( 'utf8' ) #NEWLINE# print ( urllib . parse . unquote ( url ) . decode ( 'utf8' ) ) #NEWLINE#
raise NotImplementedError #NEWLINE#
"""(\\d\\d?/\\d\\d?/\\d\\d\\d?\\d?\\s*\\d\\d?:\\d\\d[a|p|A|P][m|M])""" #NEWLINE#
for row in nlist : #NEWLINE# #INDENT# row . insert ( 0 , a ) #NEWLINE#
ax . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
p . start ( ) #NEWLINE#
my_list . append ( str ( key ) + '_' + str ( item ) ) #NEWLINE#
btn . bind ( '<Button-1>' , hide_me ) #NEWLINE#
narr [ : - 2 ] + narr [ 2 : ] #NEWLINE#
print ( 'Dry#SPACE#run:' ) #NEWLINE#
yz = NNN . mean ( axis = 0 ) #NEWLINE#
"""""" . split ( ',' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( audio . info . length ) #NEWLINE#
print ( s . rfind ( 'other' ) ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
q = db . GqlQuery ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#Foo' ) #NEWLINE#
ao [ 1 : , : ] += ai [ : - 1 , : ] #NEWLINE#
query . filter ( 'user_id' , user_id ) #NEWLINE#
df . groupby ( [ 'node' , 'lang' ] ) [ 'lang' ] . count ( ) #NEWLINE#
arr = np . array ( [ 1 , 1 , 2 , 3 , 3 , 3 ] ) #NEWLINE#
plt . savefig ( 'crosses.png' ) #NEWLINE#
DataFrame ( dict ( s1 = s1 , s2 = s2 ) ) . reset_index ( ) #NEWLINE#
print ( [ elt for elt , count in x . most_common ( 3 ) ] ) #NEWLINE#
[ '--opt1' , 'opt1value' , 'req1value' , 'r1' , 'r2' ] #NEWLINE#
numbers . append ( i ) #NEWLINE#
"""""" . join ( [ '' if t . text is None else t . text ] + [ xml . tostring ( e ) for e in #NEWLINE# t . getchildren ( ) ] ) #NEWLINE#
[ ( 5 , ) , ( 2 , 2 , 1 ) , ( 2 , 1 , 1 , 1 ) , ( 1 , 1 , 1 , 1 , 1 ) ] #NEWLINE#
logging . basicConfig ( level = logging . INFO ) #NEWLINE#
0.58256 , 0.58391 , 0.62924 , 0.68509 , 0.7616 , 0.78481 , 0.79229 , 0.81161 #NEWLINE#
pd . merge ( frame_1 , frame_2 , how = 'left' , left_on = 'county_ID' , right_on = 'countyid' #NEWLINE# ) #NEWLINE#
form . save ( ) #NEWLINE#
print ( 'Dog#SPACE#is#SPACE#more#SPACE#of#SPACE#a#SPACE#human#SPACE#than#SPACE#animal' ) #NEWLINE#
list2 = [ 'h1' , 'h2' , 'h1' , 'h3' , 'h1' , 'h2' , 'h4' ] #NEWLINE#
MONGO_DBNAME = 'apitest' #NEWLINE#
fields = 'id' , 'url' , 'color' , 'country' , 'region' , 'appellation' #NEWLINE#
fullname = os . path . join ( path , filename ) #NEWLINE#
myline = random . choice ( lines ) #NEWLINE#
data = gevent . with_timeout ( 5 , sock . recv , timeout_value = '' ) #NEWLINE#
return [ seq [ i : i + n ] for i in range ( 0 , len ( seq ) , n ) ] #NEWLINE#
sum ( 1 for _ in it ) #NEWLINE#
s = re . sub ( '^[^a-zA-Z_]+' , '' , s ) #NEWLINE#
kwargs_new = { k : v for k , v in list ( d . items ( ) ) if isinstance ( k , str ) } #NEWLINE#
tmp = df [ [ 'A' , 'B' , 'nume1' , 'nume2' ] ] . query ( 'A#SPACE#>#SPACE#0.5' ) . groupby ( 'B' ) . sum ( #NEWLINE# ) . reset_index ( ) [ [ 'B' , 'nume1' , 'nume2' ] ] #NEWLINE#
print ( [ [ item . p1 , item . p2 ] for item in uniq ] ) #NEWLINE#
im2 = ax2 . plot ( image [ 0 : time , ( 5 ) , ( 5 ) ] ) #NEWLINE#
HypotheticalBranch ( 1 , 2 , 1 ) , HypotheticalBranch ( 1 , 3 , 2 ) #NEWLINE#
mx = pow ( 2 , 24 ) - 1 #NEWLINE#
return super ( JSONField , self ) . get_db_prep_save ( value , * args , ** kwargs ) #NEWLINE#
hdr_cells [ 0 ] . paragraphs [ 0 ] . add_run ( 'Name' ) . bold = True #NEWLINE#
map ( id , b ) #NEWLINE#
result . extend ( changecoins ) #NEWLINE#
req . add_header ( 'Content-type' , 'application/x-www-form-urlencoded' ) #NEWLINE#
return super ( UserViewSet , self ) . get_object ( ) #NEWLINE#
Retry ( total = 3 , method_whitelist = frozenset ( [ 'GET' , 'POST' ] ) ) #NEWLINE#
t . cancel ( ) #NEWLINE#
df . set_index ( 'time' , inplace = True ) #NEWLINE#
symptoms = reason . split ( '#SPACE#and#SPACE#' ) [ 0 ] . split ( 'He#SPACE#got#SPACE#' ) [ 1 ] #NEWLINE#
sum ( p [ 0 ] for p in datapoints [ 0 : 5 ] ) / 5.0 #NEWLINE#
remove_common ( 'hi' , 'ho' ) #NEWLINE#
textToWav ( 'hello#SPACE#world' , 'hello' ) #NEWLINE#
table = soup . find ( 'table' , { 'class' : 'lineItemsTable' } ) #NEWLINE#
return abort ( 405 ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
mainwin . show_all ( ) #NEWLINE#
model . compile ( loss = 'mean_squared_error' , optimizer = 'sgd' , metrics = [ 'accuracy' ] ) #NEWLINE#
ftp = ftplib . FTP ( 'Server#SPACE#IP' ) #NEWLINE#
return self . _base . all ( ) [ 0 ] #NEWLINE#
id ( x ) == foo ( x ) #NEWLINE#
roundGrade ( np . array ( [ - 2.1 , 6.3 , 8.9 , 9 ] ) ) #NEWLINE#
print ( 'Hello,#SPACE#World!' ) #NEWLINE#
df . apply ( pd . to_numeric , errors = 'coerce' ) . fillna ( 0 ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# self . y = [ self . x for i in range ( 1 ) ] #NEWLINE#
text += '\n' #NEWLINE#
ax4 = plt . subplot2grid ( ( 3 , 2 ) , ( 1 , 1 ) ) #NEWLINE#
result = [ x [ 0 ] , x [ - 1 ] ] #NEWLINE#
timedelta ( seconds = 6928727.56235 ) #NEWLINE#
{ { a } } #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] , [ 13 , 14 , 15 ] , [ 16 , 17 ] , [ 18 ] ] #NEWLINE#
tseries . order ( ) #NEWLINE#
return math . sqrt ( point [ 0 ] ** 2 + point [ 1 ] ** 2 ) #NEWLINE#
re . match ( '[’]' , 'â' , re . U ) #NEWLINE#
f = a ** 2 + x * b ** 2 + y * a * b * np . cos ( c ) + z * a * b * np . sin ( c ) #NEWLINE#
heapsort2 ( [ 'foo' , 'bar' , 'foobar' , 'baz' ] ) #NEWLINE#
out . save ( output_path ) #NEWLINE#
input1 = PdfFileReader ( file ( 'in.pdf' , 'rb' ) ) #NEWLINE#
L [ : 4 ] #NEWLINE#
from google . appengine . ext . appstats import recording #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'djangosettings' #NEWLINE#
b = Matrix ( [ [ 2 , 2 ] , [ 2 , 2 ] ] ) #NEWLINE#
x = pd . DataFrame ( np . random . randn ( 20 , 5 ) ) #NEWLINE#
MyClass . _MyClass__protectedVariable = '...but#SPACE#it#SPACE#is#SPACE#not' #NEWLINE#
self . send_header ( 'Access-Control-Allow-Methods' , 'POST,#SPACE#OPTIONS' ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
heapq . nlargest ( 3 , zip ( a , itertools . count ( ) ) ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#' + ',#SPACE#' . join ( [ 'quote(?)' for i in args ] ) , args ) #NEWLINE#
axes . plot ( xs , ys ) #NEWLINE#
return { 'get_news' : get_news } #NEWLINE#
Book . objects . annotate ( count = Count ( 'author' ) ) . filter ( author__id = 1 ) . filter ( #NEWLINE# author__id = 13 ) . filter ( count = 2 ) #NEWLINE#
self . dict = func . __dict__ . copy ( ) #NEWLINE#
image = cv2 . imread ( 'test.jpg' , 0 ) #NEWLINE#
op = choice ( [ '+' , '-' , '*' , '/' ] ) #NEWLINE#
return view_func ( request , * args , ** kwargs ) #NEWLINE#
plt . scatter ( x , y , c = x , s = 100 , cmap = reds ) #NEWLINE#
set ( l1 ) & set ( l2 ) #NEWLINE#
re . compile ( 'jpg|png|gif' ) . search ( 'testpg.txt' ) #NEWLINE#
nsmallest ( 4 , list ( range ( len ( values ) ) ) , key = lambda i : values [ i ] ) #NEWLINE#
firefox_profile . set_preference ( 'permissions.default.image' , 2 ) #NEWLINE#
container . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE#
dis . dis ( func ) #NEWLINE#
print ( os . path . join ( root , pathname ) ) #NEWLINE#
eut . parsedate ( 'Wed,#SPACE#23#SPACE#Sep#SPACE#2009#SPACE#22:15:29#SPACE#GMT' ) #NEWLINE#
def split ( str , num ) : #NEWLINE# #INDENT# return [ str [ start : start + num ] for start in range ( 0 , len ( str ) , num ) ] #NEWLINE#
return self . get_time ( ) #NEWLINE#
file_count = len ( files ) #NEWLINE#
self . sock . connect ( ( 'localhost' , 32000 ) ) #NEWLINE#
return current_app . login_manager . unauthorized ( ) #NEWLINE#
new_list = [ ] #NEWLINE#
[ item for item in data if item == 'number1' ] #NEWLINE#
print ( '{0:-^70}' . format ( 'quoted#SPACE#data' ) ) #NEWLINE#
print ( '{0:-^70}' . format ( 'data#SPACE#frame' ) ) #NEWLINE#
print ( node . text ) #NEWLINE#
courses [ 'CS#SPACE#4400' ] . append ( ( int ( '1605' ) , int ( '1655' ) ) ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
a = input ( ) #NEWLINE#
root = objectify . fromstring ( xml_string ) #NEWLINE#
with open ( 'yop' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( s . encode ( 'UTF-8' ) ) #NEWLINE#
d = timedelta ( hours = 36 ) #NEWLINE#
req . add_header ( 'Authorization' , auth ) #NEWLINE#
Post . objects . filter ( tags__contains = [ 'django' ] ) #NEWLINE#
foo . append ( 'bar' ) #NEWLINE#
years = [ x . year for x in your_list ] #NEWLINE#
self . configure ( width = imagesize [ 0 ] , height = imagesize [ 1 ] ) #NEWLINE#
return HttpResponse ( status = 200 ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
engine = create_engine ( 'postgresql://scott:tiger@localhost:5432/mydatabase' ) #NEWLINE#
l = num_str . split ( ',' ) #NEWLINE# [ l [ i : i + 2 ] for i in range ( 0 , len ( l ) , 2 ) ] #NEWLINE# [ l [ i : i + 7 ] for i in range ( 0 , len ( l ) , 7 ) ] #NEWLINE#
print ( 'Usage:#SPACE#%s#SPACE#<rpm1>#SPACE#<rpm2>' ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 2 , 3 , 4 ] ] ) #NEWLINE#
a . set_aspect ( 'equal' ) #NEWLINE#
df_final = pd . concat ( pieces , ignore_index = True ) #NEWLINE#
print ( ( datetime . date ( year , month , day ) - datetime . timedelta ( 1 ) ) . isoformat ( ) ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
conn . request ( 'HEAD' , '/index.html' ) #NEWLINE#
df #NEWLINE#
a = [ 'b1' , 'x' , 'b2' , 'y' , 'b3' ] #NEWLINE#
a = [ 'b3' , 'x' , 'b1' , 'y' , 'b2' ] #NEWLINE#
print ( file_content ) #NEWLINE#
print ( df [ 'ford#SPACE#weight' ] . max ( ) ) #NEWLINE#
run ( 'hostname#SPACE#-f' ) #NEWLINE#
conn , addr = s . accept ( ) #NEWLINE#
keys = list ( dictionary . keys ( ) ) #NEWLINE# values = list ( dictionary . values ( ) ) #NEWLINE#
{ 10 } . issubset ( chain . from_iterable ( x ) ) #NEWLINE#
round_to_1 ( 1234243 ) #NEWLINE#
self . worker . beep . connect ( self . update ) #NEWLINE#
self . clients . append ( client ) #NEWLINE#
return '{}{:03.0f}' . format ( dt . strftime ( '%Y-%m-%dT%H:%M:%S.%f' ) , nanos % 1000.0 ) #NEWLINE#
print ( df . drop_duplicates ( 'AC' ) ) #NEWLINE#
np . put ( arr , list ( range ( len ( arr ) + num , len ( arr ) ) ) , np . nan ) #NEWLINE#
A = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
result . fillna ( df1 , inplace = True ) #NEWLINE#
req = urllib . request . Request ( 'http://www.example.com/' ) #NEWLINE#
fig , ax = plt . subplots ( nrows = 1 , ncols = 1 ) #NEWLINE#
return getattr ( obj , pname ) #NEWLINE#
rx . findall ( '' ) #NEWLINE#
bytes ( [ 1 , 65 , 2 , 255 ] ) #NEWLINE#
re . sub ( '<(\\w+)>' , lambda m : '<{}>' . format ( d . get ( m . group ( 1 ) , m . group ( 1 ) ) ) , s ) #NEWLINE#
curses . nocbreak ( ) #NEWLINE#
conn , addr = s . accept ( ) #NEWLINE#
self . SetSizer ( sizer ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( ',' . join ( "'{0}'" . format ( n ) for n in numbers ) ) #NEWLINE#
return np . dot ( rgb [ ( ... ) , : 3 ] , [ 0.299 , 0.587 , 0.114 ] ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
B = copy . deepcopy ( A [ 0 ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
e . pack ( ) #NEWLINE#
widget . show ( ) #NEWLINE#
time . sleep ( 2.0 ) #NEWLINE#
res = df . sort_values ( 'date' ) . groupby ( df . date . dt . month ) . agg ( [ 'first' , 'last' ] ) #NEWLINE#
df [ 'que' ] = df [ 'que' ] . fillna ( 0 ) #NEWLINE# df #NEWLINE#
print ( p . stdout . read ( ) ) #NEWLINE#
df . loc [ df [ : - 1 ] [ df . index . month [ : - 1 ] != df . index . month [ 1 : ] ] . index ] #NEWLINE#
int ( repr ( i [ 1 ] ) . replace ( ',' , '' ) ) #NEWLINE#
array ( [ [ 6.363 , 6.363 , 6.363 , 2.828 ] , [ 3.535 , 3.535 , 3.535 , 1.414 ] , [ 6.363 , #NEWLINE# 6.363 , 6.363 , 2.828 ] , [ 3.535 , 3.535 , 3.535 , 1.414 ] ] ) #NEWLINE#
loadProperties = { 'Hidden' : True } #NEWLINE#
print ( zap ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '#SPACE#' . join ( result ) ) #NEWLINE#
np . random . shuffle ( a . flat ) #NEWLINE#
df = df . set_index ( 'concatenated' ) #NEWLINE#
f . write ( 'done\n' ) #NEWLINE#
f . write ( 'output#SPACE#is#SPACE#' ) #NEWLINE#
show ( ) #NEWLINE#
"""{0:.2f}""" . format ( 150 ) #NEWLINE#
tn . read_until ( 'login:#SPACE#' ) #NEWLINE#
listbox = Listbox ( master , selectmode = tk . SINGLE ) #NEWLINE#
app = Flask ( __name__ , static_url_path = '/foo/bar/zoo/' ) #NEWLINE#
{ ( 1 ) : 3 } < { ( 1 ) : 3 } #NEWLINE#
blit_text ( screen , text , ( 20 , 20 ) , font ) #NEWLINE#
ani = animation . FuncAnimation ( fig , animate , frames = 10 ) #NEWLINE#
id = [ item [ 'uri' ] for item in playlists [ 'items' ] ] #NEWLINE#
list_of_pixels = list ( im . getdata ( ) ) #NEWLINE# im2 = Image . new ( im . mode , im . size ) #NEWLINE# im2 . putdata ( list_of_pixels ) #NEWLINE#
def debug ( variable ) : #NEWLINE# #INDENT# print ( variable , '=' , repr ( eval ( variable ) ) ) #NEWLINE#
d = np . repeat ( b , a . shape [ 0 ] , axis = 0 ) #NEWLINE#
config . add_route ( 'site_overview' , '' ) #NEWLINE#
g . add_edge ( 1 , 3 ) #NEWLINE#
f . write ( ( s + '\n' ) . encode ( 'unicode-escape' ) ) #NEWLINE#
proc . communicate ( ) #NEWLINE#
raise RuntimeError ( 'Whoops,#SPACE#something#SPACE#went#SPACE#wrong!' ) #NEWLINE#
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend' #NEWLINE#
sys . path . insert ( 0 , 'nltkandyaml.mod' ) #NEWLINE#
d [ 'baz' ] #NEWLINE#
print ( os . getcwd ( ) ) #NEWLINE#
[ 111 , 101 , 98 , 110 , 135 , 73 , 76 , 66 , 51 ] #NEWLINE#
sip . setapi ( 'QString' , 2 ) #NEWLINE#
pre_in ( read_from ( tok ( '(+#SPACE#(square#SPACE#x)#SPACE#(square#SPACE#y))' ) ) ) #NEWLINE#
self . btnOpen = Gtk . Button ( None , image = Gtk . Image ( stock = Gtk . STOCK_OPEN ) ) #NEWLINE#
cal_window . set_type_hint ( gtk . gdk . WINDOW_TYPE_HINT_DOCK ) #NEWLINE#
int ( 10 * math . ceil ( x / 10.0 ) ) #NEWLINE#
print ( response . content ) #NEWLINE#
bits = [ int ( x ) for x in bits [ : : - 1 ] ] #NEWLINE#
entries = dict ( [ ( x , y ) for x , y in zip ( out [ : : 2 ] , out [ 1 : : 2 ] ) ] ) #NEWLINE#
a . wut #NEWLINE#
Rule ( LinkExtractor ( restrict_xpaths = "//a[@class='next_page']" ) , follow = True ) , #NEWLINE#
rdd1 . join ( rdd2 ) #NEWLINE#
return fn ( * args , ** kwargs ) #NEWLINE#
msg . attach ( MIMEText ( message ) ) #NEWLINE#
wx . App . __init__ ( self , False ) #NEWLINE#
print ( 'Relay:#SPACE#%s' % gpio . __name__ ) #NEWLINE#
driver . find_element_by_id ( 'modelnumber' ) . send_keys ( '7383AC1' ) #NEWLINE#
result . extend ( pat . findall ( text ) ) #NEWLINE#
x = [ ] #NEWLINE# for i in range ( 10 ) : #NEWLINE# #INDENT# x . append ( i ) #NEWLINE#
maxLen = max ( len ( p ) for p in props ) #NEWLINE#
data = text_area . get ( '1.0' , END ) #NEWLINE#
env . filters [ 'env_override' ] = env_override #NEWLINE#
np . array ( [ 1 , 2 ] ) . size #NEWLINE#
super ( MainWindow , self ) . __init__ ( ) #NEWLINE#
self . setLayout ( layout ) #NEWLINE#
sys . exit ( subprocess . call ( sys . argv [ i : ] ) ) #NEWLINE#
htmlDoc . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
f . close ( ) #NEWLINE#
s = [ 2 , 3 , 1 , 4 , 5 ] #NEWLINE# sorted ( list ( range ( len ( s ) ) ) , key = lambda k : s [ k ] ) #NEWLINE#
array ( [ '1/2/2014' , 'a' , '3' , 'z1' , '1/3/2014' , 'c' , '1' , 'x3' ] , dtype = object ) #NEWLINE#
frame [ frame . duplicated ( [ 'key1' , 'key2' ] , keep = False ) ] #NEWLINE#
con . close ( ) #NEWLINE#
get_mediainfo_from ( 'C:\\Users\\Nick\\Desktop\\test\\' ) #NEWLINE#
identity = lambda x : [ [ int ( i == j ) for i in range ( x ) ] for j in range ( x ) ] #NEWLINE#
print ( 'upper' if any ( map ( str . isupper , test ) ) else 'lower' ) #NEWLINE#
return [ p [ 0 ] for p in deck ] #NEWLINE#
print ( a . headlines . all ( ) ) #NEWLINE#
sorted ( list ( kwargs . items ( ) ) , key = lambda i : i [ 0 ] ) #NEWLINE#
getattr ( obj , 'name' ) ( args ) #NEWLINE#
[ 3.0 , 7.4 , 8.2 ] #NEWLINE#
"""https:\\/\\/si0.twimg.com\\/profile_background_images\\/365782739\\/doof.jpg""" #NEWLINE#
"""http:\\/\\/a3.twimg.com\\/profile_background_images\\/365782739\\/doof.jpg""" #NEWLINE#
"""https:\\/\\/si0.twimg.com\\/profile_images\\/1540298033\\/phatkicks_normal.jpg""" #NEWLINE#
pipe = subprocess . Popen ( [ './x.pl' , var ] , stdout = subprocess . PIPE ) #NEWLINE#
G [ 1 ] [ 2 ] [ 'betweenness' ] #NEWLINE#
figure ( 1 , figsize = ( 6 , 6 ) ) #NEWLINE#
return render ( request , 'user/login.html' , { 'next' : next } ) #NEWLINE#
self . appExeCB . addItems ( list ( self . items . keys ( ) ) ) #NEWLINE#
username = driver . find_element_by_name ( 'user_id' ) #NEWLINE#
b_thread . start ( ) #NEWLINE#
words = [ 'noun' , 'verb' , 'vrb' , 'adj' , 'adv' ] #NEWLINE#
{ ( x * x ) for x in range ( 10 ) } #NEWLINE#
punto . wkt #NEWLINE#
count = sum ( 1 for _ in emoticons ) #NEWLINE#
groups . append ( [ x [ 1 ] for x in g ] ) #NEWLINE#
r . match ( '#SPACE#2011#SPACE#' ) #NEWLINE#
res = cv2 . bitwise_and ( img , img , mask = mask ) #NEWLINE#
{ { post } } #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
yield scrapy . Request ( next_page , callback = self . parse ) #NEWLINE#
new_items = [ item for item in items if not item . isdigit ( ) ] #NEWLINE#
del dic [ k ] #NEWLINE#
"""Check#SPACE#if#SPACE#the#SPACE#script#SPACE#is#SPACE#running.""" #NEWLINE#
xbook = xlsxwriter . Workbook ( 'Test.xlsx' ) #NEWLINE#
d = defaultdict ( lambda : 1 ) #NEWLINE#
self . window . run_command ( 'show_panel' , { 'panel' : 'output.progess_bar' } ) #NEWLINE#
app . run ( ) #NEWLINE#
plt . savefig ( 'Test.eps' , bbox_inches = 'tight' , format = 'eps' ) #NEWLINE#
result [ key ] += 1 #NEWLINE#
np . datetime64 ( dt . isoformat ( ) ) #NEWLINE#
ax . set_xlabel ( 'Log#SPACE#Frequency#SPACE#(Hz)' ) #NEWLINE#
sys . stdout . write ( str ( tuple [ 0 ] ) ) #NEWLINE#
df [ 'a' ] [ 0 ] , type ( df [ 'a' ] [ 0 ] ) #NEWLINE#
plt . scatter ( * zip ( * new_points ) ) #NEWLINE#
headers . setContextMenuPolicy ( Qt . CustomContextMenu ) #NEWLINE#
network . draw ( ) #NEWLINE#
pass #NEWLINE#
zk . stop ( ) #NEWLINE#
sys . stderr = stderr #NEWLINE#
df #NEWLINE#
print ( not not r . search ( s ) ) #NEWLINE#
a = defaultdict ( dict ) #NEWLINE#
f ( ) #NEWLINE#
plt . figure ( figsize = ( 8 , 6 ) ) #NEWLINE#
zip ( l , l [ 1 : ] , l [ 2 : ] ) #NEWLINE#
pyplot . savefig ( 'f.png' ) #NEWLINE#
draw = ImageDraw . Draw ( image ) #NEWLINE#
gettext . textdomain ( 'argparse' ) #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
print ( 'Prob#SPACE#for#SPACE#{}#SPACE#is#SPACE#{}' . format ( k , v ) ) #NEWLINE#
self . header = header #NEWLINE#
return e . returncode , t . read ( ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
ax . patch . set_visible ( False ) #NEWLINE#
pd . concat ( df . xs ( d , axis = 1 ) for d in dupes ) . groupby ( level = 0 , axis = 1 ) . mean ( ) #NEWLINE#
C [ k ] = np . dot ( A [ k ] , B [ k ] ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
self . canvas . scan_dragto ( event . x , event . y , gain = 1 ) #NEWLINE#
cur . close ( ) #NEWLINE#
stream . write ( data ) #NEWLINE#
np . fromiter ( test , dtype = np . int ) #NEWLINE#
url ( '^get_my_zip/(\\d+)$' , 'zippyApp.views.get_zip' ) #NEWLINE#
id ( lines ) , id ( ax . lines ) #NEWLINE#
facebook_graph = facebook . GraphAPI ( oauth_access_token ) #NEWLINE#
p = subprocess . Popen ( [ sys . executable , '/path/to/script.py' ] , stdout = #NEWLINE# subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
print ( x , y ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
os . environ [ 'MY_DATA' ] = 'my_export' #NEWLINE#
return False #NEWLINE#
time . sleep ( 3600 ) #NEWLINE#
os . path . join ( path , 'filename' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
now3 = datetime . now ( ) #NEWLINE#
creatures [ 'birds' ] [ 'eagle' ] [ 'female' ] = 0 #NEWLINE#
with open ( '/tmp/metadata.pdf' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( response . content ) #NEWLINE#
data . columns = data . iloc [ 0 ] #NEWLINE#
ax2 . set_xlim ( datetime . datetime ( 2013 , 3 , 1 ) , datetime . datetime ( 2013 , 3 , 31 ) ) #NEWLINE#
soup = BeautifulSoup ( page ) #NEWLINE#
df . sort_values ( 'age' ) . drop_duplicates ( 'name' , keep = 'last' ) #NEWLINE#
app . config . from_object ( 'config' ) #NEWLINE#
PY_MAJOR , PY_MINOR = sys . version_info [ 0 : 2 ] #NEWLINE#
cv2 . drawContours ( mask , [ largest_area ] , 0 , ( 255 , 255 , 255 , 255 ) , - 1 ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
f ( 'one' ) #NEWLINE#
url ( '^' , include ( internal_apis , namespace = 'internal_apis' ) ) , #NEWLINE#
r = requests . get ( 'https://github.com/timeline.json' ) #NEWLINE#
run ( 'rsync#SPACE#--daemon#SPACE#--config#SPACE#/tmp/rsync-ad-hoc.conf' ) #NEWLINE#
pythoncom . PumpWaitingMessages ( ) #NEWLINE#
sys . exit ( 2 ) #NEWLINE#
df [ df . Group == 'A' ] . Age . hist ( ) #NEWLINE#
show ( ) #NEWLINE#
print ( index , key , value ) #NEWLINE#
z = zipfile . ZipFile ( 'myzip.zip' , 'a' , zipfile . ZIP_DEFLATED ) #NEWLINE#
z = zipfile . ZipFile ( 'myzip.zip' , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
file . close ( ) #NEWLINE#
images = soup . findAll ( 'img' ) #NEWLINE#
df #NEWLINE#
return random . randint ( 0 , int ( ( stop - start ) / step ) ) * step + start #NEWLINE#
self . x0 += self . speed * math . cos ( self . bearing ) #NEWLINE#
i = np . array ( [ [ 0 , 0 ] , [ 1 , 1 ] ] ) #NEWLINE# j = B #NEWLINE#
return { 'x' : self . x , 'y' : self . y } #NEWLINE#
smtpserver . starttls ( ) #NEWLINE#
sys . stdout . write ( s ) #NEWLINE#
foo = '{"My_string":#SPACE#"Foo#SPACE#bar.\\t#SPACE#Bar#SPACE#foo."}' #NEWLINE#
( np . arange ( n ) >= m ) . astype ( int ) #NEWLINE#
url ( '^login/$' , 'django.contrib.auth.views.login' , { 'template_name' : #NEWLINE# '/login.html' } ) , #NEWLINE#
cause = e . args [ 0 ] #NEWLINE#
map ( lambda x , y : x [ 0 ] + y [ 0 ] , g1 , g2 ) #NEWLINE#
mpl . rcParams [ 'legend.fontsize' ] = 10 #NEWLINE#
myseries [ myseries == 7 ] . index [ 0 ] #NEWLINE#
zip . writestr ( info , bytes ) #NEWLINE#
self . delete ( 'all' ) #NEWLINE#
print ( ( i , has_more ) ) #NEWLINE#
pd . set_option ( 'display.max_rows' , 500 ) #NEWLINE#
fig . canvas . mpl_connect ( 'draw_event' , on_draw ) #NEWLINE#
pd . show_versions ( as_json = False ) #NEWLINE#
return np . dot ( copy , onevec ) #NEWLINE#
assert list ( a . keys ( ) ) == list ( b . keys ( ) ) #NEWLINE#
self . panel . Bind ( wx . EVT_KEY_UP , self . OnKeyDown ) #NEWLINE#
print ( '%5s' % 'aaaaa' ) #NEWLINE#
df [ 'foo' ] = df [ 'cost' ] #NEWLINE#
len ( list ( flatten ( mylist ) ) ) #NEWLINE#
return getattr ( f , '__func__' , f ) #NEWLINE#
df . hist ( layout = ( 3 , 2 ) ) #NEWLINE#
"""בְּרֵאשִׁית,#SPACE#בָּרָא#SPACE#אֱלֹהִים,#SPACE#אֵת#SPACE#הַשָּׁמַיִם,#SPACE#וְאֵת#SPACE#הָאָרֶץ""" #NEWLINE#
[ 1450 , 1370 , 1420 , 1230 ] #NEWLINE#
pdb . Pdb ( stdout = sys . __stdout__ ) . set_trace ( ) #NEWLINE#
print ( div . find ( 'a' ) [ 'href' ] ) #NEWLINE#
print ( sys . modules [ '__main__' ] ) #NEWLINE#
data = response . read ( ) #NEWLINE#
func ( "Here's#SPACE#b#SPACE#and#SPACE#c" , b = True , c = 'c' ) #NEWLINE#
a . add ( 1 ) #NEWLINE#
data = line . split ( ) #NEWLINE#
print ( cardsdiscarded ) #NEWLINE#
epics . sort ( key = lambda x : datetime . strptime ( x [ 'start' ] , date_format ) ) #NEWLINE#
a + [ a < 0 ] #NEWLINE#
sock . close ( ) #NEWLINE#
iph . show2 ( ) #NEWLINE#
ax . legend ( loc = 'upper#SPACE#left' ) #NEWLINE# plt . show ( ) #NEWLINE#
super ( Worker , self ) . __init__ ( ) #NEWLINE#
s = [ '1' , '2' , '3.4' , '5.6' , '7.8' , '1e2' ] #NEWLINE# [ ( float ( i ) if '.' in i or 'e' in i else int ( i ) ) for i in s ] #NEWLINE#
QObject . __init__ ( self , parent ) #NEWLINE#
test = Image . open ( 'test.png' ) #NEWLINE# test . close ( ) #NEWLINE#
self . updateUi ( 'Error:#SPACE#{}' . format ( self . socket . errorString ( ) ) ) #NEWLINE#
frame . append ( 4 ) #NEWLINE#
r [ 'amount' ] = format ( r [ 'amount' ] , '%.2f' ) #NEWLINE#
contest = models . ForeignKey ( Contest ) #NEWLINE#
return sign * 2.0 ** ( expo - 25 ) * prec #NEWLINE#
print ( tupl . a , tupl . b ) #NEWLINE#
pprint ( d ) #NEWLINE#
table . resizeColumnsToContents ( ) #NEWLINE#
p = Popen ( [ 'xte' ] , stdin = PIPE ) #NEWLINE#
__tablename__ = 'child' #NEWLINE#
response = HttpResponse ( data ( ) , mimetype = 'text/csv' ) #NEWLINE#
df . replace ( 'N/A' , np . NaN ) #NEWLINE#
13.12881 , 12.76455 , 12.40606 , 12.00294 , 11.96379 , 11.96272 #NEWLINE#
11.96143 , 11.9601 , 11.95882 , 12.26925 , 12.67549 , 13.08159 #NEWLINE#
16.5498 , 16.78362 , 16.90331 , 17.02299 , 17.12194 , 17.09449 #NEWLINE#
df . loc [ start : end ] #NEWLINE#
numbers = [ random . randint ( 1 , 1000 ) for x in range ( SOMEVERYLARGENUMBER ) ] #NEWLINE#
x = Counter ( [ - 1 , - 1 , - 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ) #NEWLINE#
import scipy . stats #NEWLINE#
np . issubdtype ( np . int32 , float ) #NEWLINE#
resulting_list . extend ( x for x in second_list if x not in resulting_list ) #NEWLINE#
plt . plot ( data_fit , label = 'after#SPACE#fitting' ) #NEWLINE#
return [ sorted ( sub ) for sub in result ] #NEWLINE#
print ( root . find ( 'a' ) . tag ) #NEWLINE#
""",""" . join ( s ) #NEWLINE#
x = np . arange ( X ) #NEWLINE#
print ( n , elapsed1 , elapsed2 , elapsed3 , total1 , total2 , total3 ) #NEWLINE#
print ( 'The#SPACE#rest#SPACE#of#SPACE#the#SPACE#process#SPACE#will#SPACE#continue' ) #NEWLINE#
subprocess . Popen ( 'C:\\...\\Desktop\\script2.py' , shell = True ) #NEWLINE#
'C' , 'B' , 'A' #NEWLINE#
ax2 = fig . add_subplot ( 212 ) #NEWLINE#
exec ( compile ( s , '<str>' , 'exec' ) . co_consts [ 0 ] , { } , { } ) #NEWLINE#
print ( unanimous ( list ( dd . values ( ) ) ) ) #NEWLINE#
model . save ( [ spark_context ] , [ file_path ] ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
re . sub ( '(.)' , repl , 'Nissim' ) #NEWLINE#
[ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 ] #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] , columns = [ 'a' , 'a' ] ) #NEWLINE#
proc . stdin . write ( 'input' ) #NEWLINE#
db = SQLAlchemy ( ) #NEWLINE#
urlfetch . set_default_fetch_deadline ( 10 ) #NEWLINE#
f . close ( ) #NEWLINE#
eventLoopThread . start ( ) #NEWLINE#
seen_models = connection . introspection . installed_models ( tables ) #NEWLINE#
print ( df ) #NEWLINE#
import py_file #NEWLINE#
choice = eval ( input ( 'Press#SPACE#Q#SPACE#to#SPACE#Quit' ) ) #NEWLINE#
myList . append ( myList ) #NEWLINE#
test . py #NEWLINE#
r = requests . get ( url , stream = True ) #NEWLINE#
ax = figure . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
DATABASES [ 'default' ] [ 'NAME' ] = '/tmp/myweb.db' #NEWLINE#
{ 'a' : 2 , 'b' : 3 , 'c' : { 'e' : 7 , 'd' : 5 } } #NEWLINE#
label . grid_remove ( ) #NEWLINE#
print ( lines [ i ] ) #NEWLINE#
foo = dom . getElementsByTagName ( 'foo' ) #NEWLINE#
cb . ax . yaxis . set_tick_params ( pad = 45 ) #NEWLINE#
user = database . get ( session [ 'user_id' ] ) #NEWLINE#
print ( 'in#SPACE#the#SPACE#range#SPACE#' + str ( min ( signal ) ) + '#SPACE#to#SPACE#' + str ( min ( signal ) ) ) #NEWLINE#
do_something ( ) #NEWLINE#
return render ( request , 'test_dropzone/index.html' , context ) #NEWLINE#
mosaic ( df , [ 'direction' , 'colour' ] ) #NEWLINE#
list3 = map ( lambda x , y : str ( x ) + str ( y ) , list1 , list2 ) #NEWLINE#
a in ( b + c , b - c , c - b ) #NEWLINE#
set ( tuple2 ) . issuperset ( tuple1 ) #NEWLINE#
print ( 'Exception:#SPACE#' + str ( e ) ) #NEWLINE#
arr = np . array ( [ nbLamps , nbDays ] , dtype = np . bool ) #NEWLINE#
items = [ ( - value , key ) for key , value in list ( the_dict . items ( ) ) ] #NEWLINE#
s = pd . Series ( [ 'a' , 'b' , 'c' , 'a' ] , dtype = 'category' ) #NEWLINE#
fd . close ( ) #NEWLINE#
__init__ . py #NEWLINE#
print ( 'left#SPACE#arrow#SPACE#pressed' ) #NEWLINE#
print ( time . ctime ( cdate ) , os . path . basename ( path ) ) #NEWLINE#
models . py #NEWLINE#
B = csr_matrix ( ( data , indices , indptr ) ) #NEWLINE#
a [ a < 1e+308 ] #NEWLINE#
EMAIL_USE_SSL = True #NEWLINE#
plt . title ( '' ) #NEWLINE#
print ( fdist1 . most_common ( 10 ) ) #NEWLINE#
opa = pd . concat ( [ pirmas_m , antras_m , trecias_m , ketvirtas_m ] , axis = 1 ) #NEWLINE#
d = { 'key1' : [ 1 , 2 , 3 ] , 'key2' : [ 4 , 5 , 6 ] , 'key3' : [ 7 , 8 , 9 ] } #NEWLINE# with open ( 'test.csv' , 'wb' ) as outfile : #NEWLINE# #INDENT# writer = csv . writer ( outfile ) #NEWLINE# writer . writerow ( list ( d . keys ( ) ) ) #NEWLINE# writer . writerows ( zip ( * list ( d . values ( ) ) ) ) #NEWLINE#
print ( bin ( 123 ) ) #NEWLINE#
engine = cherrypy . engine #NEWLINE#
mainarea = tk . Frame ( root , bg = '#CCC' , width = 500 , height = 500 ) #NEWLINE#
clf2 . predict ( X [ 0 ] ) #NEWLINE#
plt . plot ( x_new , ffit ) #NEWLINE#
i = iter ( a ) #NEWLINE# b = dict ( zip ( i , i ) ) #NEWLINE#
ax1 = fig . add_subplot ( 2 , 1 , 1 ) #NEWLINE#
print ( p . match ( s ) . groups ( ) ) #NEWLINE#
a [ 0 ] [ 'tuple' ] [ : ] = 1 , 2 #NEWLINE#
input_date . astimezone ( current_tz ) #NEWLINE#
d = defaultdict ( int ) #NEWLINE# for lst in lists : #NEWLINE# #INDENT# d [ len ( lst ) ] += 1 #NEWLINE#
attr = { } #NEWLINE#
the_table . set_fontsize ( 24 ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
def diff_letters ( a , b ) : #NEWLINE# #INDENT# return sum ( a [ i ] != b [ i ] for i in range ( len ( a ) ) ) #NEWLINE#
dt_str = datetime . datetime . <STR0> ( dt_obj , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 2 , 0 , 0 ) ] #NEWLINE#
getattr ( o , name ) ( ) #NEWLINE#
pad = curses . newpad ( PAD_LENGTH , curses . COLS - 1 ) #NEWLINE#
POOL = redis . ConnectionPool ( host = '10.0.0.1' , port = 6379 , db = 0 ) #NEWLINE#
print ( 'MOCK#SPACE#getData#SPACE#called' ) #NEWLINE#
sys . path #NEWLINE#
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } #NEWLINE#
[ ( 5 * n ) for n in range ( 1 , 10 + 1 ) ] #NEWLINE#
self . data = { 'a' : 'v1' , 'b' : 'v2' } #NEWLINE#
d = { } #NEWLINE#
A = [ ( A [ i ] + ( 0 if i % 2 == 0 else 0.1 ) ) for i in range ( len ( A ) ) ] #NEWLINE#
response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=image.jpg' #NEWLINE#
return itertools . chain ( iter ( self . items . items ( ) ) , iter ( self . people . items ( ) ) ) #NEWLINE#
[ '/' , 1 , 2 ] #NEWLINE#
"""That#SPACE#is#SPACE#%i%%""" #NEWLINE#
s1 = pd . Series ( [ 1 , 2 ] , index = [ 'A' , 'B' ] , name = 's1' ) #NEWLINE#
infile = open ( os . path . expanduser ( '~/folder2/test.txt' ) , 'r+' ) #NEWLINE#
print ( '%d#SPACE#%d' % ( 1 , 2 ) ) #NEWLINE#
print ( json . dumps ( mydata , indent = 4 ) ) #NEWLINE#
super ( PurchaseSerializer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
f . flush ( ) #NEWLINE#
return map ( int , numbers . strip ( ) . split ( ) ) #NEWLINE#
df = pd . read_csv ( csv_file ) #NEWLINE#
list ( fileinput . FileInput ( 'test.txt' ) ) #NEWLINE#
result = df . a . sort_values ( ) . apply ( lambda x : sorted ( x ) ) #NEWLINE#
print ( thisRDD . toDebugString ( ) ) #NEWLINE#
test ( a = 1 , b = 4 , c = 'blah-blah' ) #NEWLINE#
subprocess . Popen ( winCMD , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
try : #NEWLINE# #INDENT# thevariable #NEWLINE# except NameError : #NEWLINE# #INDENT# print ( "well,#SPACE#it#SPACE#WASN'T#SPACE#defined#SPACE#after#SPACE#all!" ) #NEWLINE# else : #NEWLINE# #INDENT# print ( 'sure,#SPACE#it#SPACE#was#SPACE#defined.' ) #NEWLINE#
ax . set_xlim3d ( xmin , xmax ) #NEWLINE#
"""select#SPACE#*#SPACE#from#SPACE#t#SPACE#order#SPACE#by#SPACE#some_column,#SPACE#another#SPACE#column#SPACE#desc""" #NEWLINE#
session [ 'username' ] = username #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
sum ( [ v1 , v2 , v3 ] ) #NEWLINE#
assert f ( [ [ 0 , 100 ] , [ 0 , 10 ] , [ 11 , 20 ] , [ 15 , 40 ] ] ) == [ [ 0 , 10 ] , [ 11 , 20 ] ] #NEWLINE#
logger1 = logging . getLogger ( '1' ) #NEWLINE#
ax . grid ( 'off' ) #NEWLINE#
BEATS = { 'rock' : [ 'scissors' ] , 'paper' : [ 'rock' ] , 'scissors' : [ 'paper' ] } #NEWLINE#
desired_list = map ( lambda x__ : x__ [ 0 ] , tuple_list ) #NEWLINE#
result . append ( line ) #NEWLINE#
cell_value = int ( cell_value ) #NEWLINE#
lst2 . append ( [ x [ 0 ] for x in lst ] ) #NEWLINE#
return super ( DefaultsClass , cls ) . __init__ ( name , bases , dct ) #NEWLINE#
pil_img . save ( img_io , 'JPEG' , quality = 70 ) #NEWLINE#
request . some_new_attr = 'some_new_value' #NEWLINE#
browser . close ( ) #NEWLINE#
self . outfp . write ( '\n' ) #NEWLINE#
s . close ( ) #NEWLINE#
dict ( map ( winnumber , open ( filename , 'r' ) ) ) #NEWLINE#
min ( foo , key = float ) #NEWLINE#
cell = self . cell ( '%s%d' % ( col , row ) ) #NEWLINE#
del df . index . name #NEWLINE#
bokeh . io . show ( page ) #NEWLINE#
char_stream = codecs . getreader ( 'utf-8' ) ( sys . stdin ) #NEWLINE#
ax . set_ylim ( [ - 400 , - 380 ] ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
output = open ( 'output.txt' , 'rb' ) #NEWLINE#
print ( ( t , 'does#SPACE#not#SPACE#exist' ) ) #NEWLINE#
print ( '' . join ( row ) ) #NEWLINE#
super ( FooForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
1 , + ( 2 , 3 ) * 4 #NEWLINE#
s = s . replace ( '#SPACE#' , '' ) #NEWLINE#
pd . get_dummies ( s ) #NEWLINE#
client . get ( URL ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
fig = plt . figure ( figsize = ( 10 , 8 ) ) #NEWLINE#
pd . concat ( [ df1 , df2 ] ) . groupby ( [ 'id' , 'action' , 'date' ] ) . sum ( ) . reset_index ( ) #NEWLINE#
revision . revert ( delete = True ) #NEWLINE#
f . close ( ) #NEWLINE#
np . tensordot ( A , Combinations , [ 2 , 1 ] ) . transpose ( 2 , 0 , 1 ) #NEWLINE#
f . axes [ 2 ] . set_position ( [ 0.45 , 0.05 , 0.05 , 0.4 ] ) #NEWLINE#
appended_data = pd . concat ( appended_data , axis = 1 ) #NEWLINE#
"""""" . join ( next ( it , '' ) + c for c in it ) #NEWLINE#
connection = urllib . request . urlopen ( url ) #NEWLINE#
app . run ( '0.0.0.0' , 9010 ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# unittest . main ( ) #NEWLINE#
df [ 'g' ] = df . groupby ( 'Col1' ) [ 'Col1' ] . cumcount ( ) #NEWLINE#
Session . commit ( ) #NEWLINE#
np . put ( arr , list ( range ( len ( arr ) + num , len ( arr ) ) ) , np . nan ) #NEWLINE#
os . rename ( f . name , 'C:\\foo.txt' ) #NEWLINE#
cv . Circle ( output , ( x , y ) , 1 , cv . CV_RGB ( 0 , 255 , 0 ) , - 1 , 8 , 0 ) #NEWLINE#
any ( [ False , False , False ] ) #NEWLINE#
pdf_file = open ( 'sample.pdf' , 'rb' ) #NEWLINE#
print ( 'on#SPACE#the#SPACE#other' ) #NEWLINE#
def most_common ( lst ) : #NEWLINE# #INDENT# return max ( set ( lst ) , key = lst . count ) #NEWLINE#
IPython . embed ( banner1 = '' ) #NEWLINE#
initcaller ( ) #NEWLINE#
rdd_malformed . flatMap ( lambda x : seq_try ( json . loads , x ) ) . collect ( ) #NEWLINE#
dict_writer . writerows ( toCSV ) #NEWLINE#
sys . stdout . write ( '\x1b7\x1b[%d;%df%s\x1b8' % ( x , y , text ) ) #NEWLINE#
self . send_header ( 'Expires' , '0' ) #NEWLINE#
self . end_headers ( ) #NEWLINE#
app . config . from_object ( config_obj ) #NEWLINE#
out , err = proc . communicate ( open ( fn ) . read ( ) ) #NEWLINE#
fig , ax = plt . subplots ( figsize = ( 6 , 1 ) ) #NEWLINE# ax . scatter ( X , [ 1 ] * len ( X ) , c = values , marker = 's' , s = 100 ) #NEWLINE# fig . autofmt_xdate ( ) #NEWLINE# ax . yaxis . set_visible ( False ) #NEWLINE# ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE# ax . spines [ 'left' ] . set_visible ( False ) #NEWLINE# ax . spines [ 'top' ] . set_visible ( False ) #NEWLINE# ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE# ax . get_yaxis ( ) . set_ticklabels ( [ ] ) #NEWLINE# day = pd . to_timedelta ( '1' , unit = 'D' ) #NEWLINE# plt . xlim ( X [ 0 ] - day , X [ - 1 ] + day ) #NEWLINE# plt . show ( ) #NEWLINE#
def bitfield ( n ) : #NEWLINE# #INDENT# return [ ( 1 if digit == '1' else 0 ) for digit in bin ( n ) [ 2 : ] ] #NEWLINE#
log . info ( 'An#SPACE#informational#SPACE#message.' ) #NEWLINE#
plt . imshow ( np . random . randn ( 10 , 10 ) ) #NEWLINE#
ax . add_patch ( circ ) #NEWLINE#
print ( turkey . do_something ( ) ) #NEWLINE#
print ( data ) #NEWLINE#
data = [ '|' . join ( d ) for d in data ] #NEWLINE#
z = append_fields ( x , 'p' , y ) #NEWLINE#
document . update ( ** conv_dict_to_update ( data ) ) #NEWLINE#
result = regex . sub ( '[^\\p{Latin}]' , '' , text ) #NEWLINE#
df . index = df . index . droplevel ( 1 ) #NEWLINE#
string = 'Hello#SPACE#There' #NEWLINE# print ( '#SPACE#' . join ( [ string [ : 5 ] ] * 2 ) ) #NEWLINE#
b = [ '11' , '22' , '33' , '44' ] #NEWLINE#
return Maemo4Spec ( ) #NEWLINE#
[ [ 3 , 6 , 9 ] , [ 4 , 8 , 12 ] , [ 5 , 10 , 15 ] ] , #NEWLINE#
fig = plt . figure ( figsize = ( 8 , 4 ) ) #NEWLINE#
table . sort ( reverse = True , key = Team . getName ) #NEWLINE#
prob = clf . predict_proba ( X_test ) [ : , ( 1 ) ] #NEWLINE#
shutil . move ( os . path . join ( pdfpath , old ) , os . path . join ( pdfpath , new ) ) #NEWLINE#
output = subprocess . check_output ( [ 'awk' , '/f89e7000/#SPACE#{print#SPACE#$2}' , #NEWLINE# 'syscall_list.txt' ] ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
im . save ( outfile , 'JPEG' ) #NEWLINE#
parser = argparse . ArgumentParser ( prog = 'mydaemon' ) #NEWLINE#
r , g , b = map ( lambda x : x / 255.0 , [ r , g , b ] ) #NEWLINE#
{ 'c' : 3 } #NEWLINE#
average_timedelta = sum ( timedeltas , datetime . timedelta ( 0 ) ) / len ( timedeltas ) #NEWLINE#
imarray . shape #NEWLINE#
print ( 'After#SPACE#Month:' , date_after_month . strftime ( '%d/%m/%Y' ) ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
self . message . save ( ) #NEWLINE#
return target . update ( request , * args , ** kwargs ) #NEWLINE#
cv2 . rectangle ( img , top_left , bottom_right , 255 , 5 ) #NEWLINE#
screen . blit ( my_image , another_position ) #NEWLINE#
[ ( x + y ) for x , y in zip ( a , b ) ] #NEWLINE#
full_list = [ [ 1 , 1 , 3 , 4 ] , [ 3 , 99 , 5 , 2 ] , [ 2 , 4 , 4 ] , [ 3 , 4 , 5 , 2 , 60 ] ] #NEWLINE#
lines = f . readlines ( ) #NEWLINE#
br . show ( ) #NEWLINE#
a = numpy . array ( [ 1 , 3 , 2 , 4 , 5 ] ) #NEWLINE#
processes . append ( Popen ( command , stdout = pipe , close_fds = True ) ) #NEWLINE#
ax2 = fig . add_subplot ( 2 , 1 , 2 ) #NEWLINE#
sys . path . append ( 'C:\\Program#SPACE#Files\\DIgSILENT\\...' ) #NEWLINE#
super ( TableModel , self ) . __init__ ( ) #NEWLINE#
logger . setLevel ( logging . NOTSET ) #NEWLINE#
a = np . random . rand ( size ) #NEWLINE#
self . layoutChanged . emit ( ) #NEWLINE#
list_x = [ ( 1 , 1 ) , ( 1 , 2 ) , ( 2 , 3 ) , ( 2 , 5 ) , ( 4 , 6 ) ] #NEWLINE#
rreplace ( s , '2' , '#SPACE#' , 4 ) #NEWLINE#
path . path ( mypath ) . splitall ( ) [ 0 ] #NEWLINE#
b in l [ l . index ( a ) + 1 : ] #NEWLINE#
a [ i1 , i2 ] #NEWLINE#
layout . addWidget ( self . table ) #NEWLINE#
self . widget . config ( text = content ) #NEWLINE#
im = Image . open ( 'tiger.jpg' ) #NEWLINE#
category = models . CharField ( max_length = 3 , choices = CATEGORIES ) #NEWLINE#
chunk = np . genfromtxt ( f , * args , max_rows = chunksize , ** kwargs ) #NEWLINE#
del dict_ [ key ] #NEWLINE#
print ( 'Anything' ) #NEWLINE#
server . bind ( sockfile ) #NEWLINE#
urllib3_logger . setLevel ( logging . CRITICAL ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
dis . dis ( "f'X#SPACE#is#SPACE#{x}'" ) #NEWLINE#
dict ( list ( d . items ( ) ) [ 0 ] for d in res [ 0 ] [ 'webmachine' ] ) #NEWLINE#
client . GET ( '/admin' , auth = 'admin' ) . responds_html ( ) #NEWLINE#
client . GET ( '/artikel/?q=Ratzfratz' , auth = 'user' ) . responds_html ( ) #NEWLINE#
client . GET ( '/kunden/SC50313/o/SO1194829/' , auth = 'user' ) . responds_html ( ) #NEWLINE#
[ i [ 1 ] for i in Formatter ( ) . parse ( 'Hello#SPACE#{1}#SPACE#{foo}' ) ] #NEWLINE#
numpy . seterr ( invalid = 'ignore' ) #NEWLINE#
time . gmtime ( 1346114717972 / 1000.0 ) #NEWLINE#
list ( map ( add , [ 2 , 2 ] ) ) #NEWLINE#
',b' , '=' #NEWLINE#
for index , row in df . iterrows ( ) : #NEWLINE# #INDENT# df . loc [ index , 'A' ] = 'I#SPACE#am#SPACE#working!#SPACE#{}' . format ( row [ 'B' ] ) #NEWLINE# df #NEWLINE#
cls . method_two ( ) #NEWLINE#
palette_img = Image . new ( 'P' , ( 1 , 1 ) , 0 ) #NEWLINE#
yield self . assertFailure ( self . o . failure ( ) , ConnectionRefusedError ) #NEWLINE#
fs . noteoff ( 0 , 76 ) #NEWLINE#
p . stdin . close ( ) #NEWLINE#
self . resize ( 630 , 50 ) #NEWLINE#
s = requests . Session ( ) #NEWLINE#
ax1 . plot ( [ x1 , x2 ] , [ y1 , y2 ] ) #NEWLINE#
a . fromfile ( f , 3 ) #NEWLINE#
mpl . rcParams [ 'font.size' ] = 9.0 #NEWLINE#
return function ( * args , ** kwargs ) #NEWLINE#
print ( re . sub ( '(1+)' , fixer , my_string ) ) #NEWLINE#
x = np . linspace ( 0 , 20 , 1000 ) #NEWLINE#
s = re . sub ( 'foo' , 'replaced' , s ) #NEWLINE#
print ( 'Layer#SPACE#is#SPACE#a#SPACE#data-only#SPACE#layer' ) #NEWLINE#
outgrid = griddata ( points , values , gridcoords , method = 'nearest' ) #NEWLINE#
setup . py #NEWLINE#
b = np . array ( [ [ 2 , 4 ] , [ 8 , 11 ] , [ 33 , 35 ] ] ) #NEWLINE#
print ( str ( a [ 2 ] ) ) #NEWLINE#
print ( '{0:<12}#SPACE#:#SPACE#{1}' . format ( dirname , '#SPACE#' . join ( content ) ) ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
print ( df ) #NEWLINE#
return super ( MyInlineModelAdmin , self ) . get_formset ( request , obj , ** kwargs ) #NEWLINE#
[ 'ABB' , 'AbA' , 'aBa' , 'abb' ] #NEWLINE#
return x , y #NEWLINE#
print ( 'Content-Type:#SPACE#text/plain;charset=utf-8' ) #NEWLINE#
'octillion' , 'nonillion' , 'decillion' , 'undecillion' #NEWLINE#
'duodecillion' , 'tredecillion' , 'quattuordecillion' , 'sexdecillion' #NEWLINE#
return np . where ( a > b * 10 , a * 2 , - a ) #NEWLINE#
[ '+' , 1 , 2 ] #NEWLINE#
driver . get ( 'https://google.com/' ) #NEWLINE#
rec . array ( [ [ 40.0 , 140.0 ] , [ 50.0 , 150.0 ] , [ 60.0 , 160.0 ] ] , dtype = float64 ) #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) #NEWLINE#
top . rowconfigure ( 0 , weight = 1 ) #NEWLINE#
rs = ( grequests . get ( u , stream = False ) for u in urls ) #NEWLINE#
gca ( ) . get_lines ( ) [ n ] . get_xydata ( ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
df #NEWLINE#
f . flush ( ) #NEWLINE#
cb = fig . colorbar ( im , ticks = LogLocator ( subs = list ( range ( 10 ) ) ) ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
logging . warn ( 'a#SPACE#warning' ) #NEWLINE# logging . error ( 'some#SPACE#error' ) #NEWLINE# logging . info ( 'some#SPACE#info' ) #NEWLINE#
my_svr . fit ( x_training , y_trainr ) #NEWLINE#
msg . get_payload ( ) #NEWLINE#
a = [ 6 , 3 , 0 , 0 , 1 , 0 ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( ET . tostring ( newroot ) ) #NEWLINE#
root . columnconfigure ( 1 , weight = 1 ) #NEWLINE#
file . close ( ) #NEWLINE#
data = json . loads ( response ) #NEWLINE# myList = [ item for item in data if item == 'number1' ] #NEWLINE#
[ [ 'google' , [ 'http://google.com' , 'http://gmail.com' ] ] , [ 'computing' , [ #NEWLINE# 'http://acm.org' ] ] ] #NEWLINE#
sum ( 1 for ch in '\u200c' if unicodedata . combining ( ch ) == 0 ) #NEWLINE#
parse ( 'Wed,#SPACE#Nov#SPACE#12' ) #NEWLINE#
print ( bool ( pattern . search ( byte ) ) ) #NEWLINE#
return sps . coo_matrix ( ( data , ( rows , cols ) ) , shape = ( x . shape [ 0 ] , theta . shape [ 0 ] ) ) #NEWLINE#
plt . axis ( 'normal' ) #NEWLINE#
d = OrderedDict ( [ ( 1 , 1 ) , ( 2 , 10 ) , ( 3 , 27 ) , ( 4 , 10 ) , ( 5 , 7 ) , ( 6 , 10 ) ] ) #NEWLINE#
ax1 . set_xlim ( 1 , 6 ) #NEWLINE#
mail . starttls ( ) #NEWLINE#
df . idxmin ( 1 ) #NEWLINE#
good_html = tree . prettify ( ) #NEWLINE#
DATETIME_FORMAT = '%Y-%m-%d#SPACE#%H:%M:%S' #NEWLINE#
return str ( unichar ) #NEWLINE#
a = [ 'apple' , 'orange' ] #NEWLINE#
result = [ [ k , da [ k ] + db [ k ] ] for k in set ( da . keys ( ) ) . intersection ( list ( db . #NEWLINE# keys ( ) ) ) ] #NEWLINE#
result . append ( key ) #NEWLINE#
mylist = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' ] #NEWLINE#
self . panel_sizer . Add ( self . tin2 , 0 , wx . EXPAND ) #NEWLINE#
threading . Thread . __init__ ( ) #NEWLINE#
frame . append ( 2 ) #NEWLINE#
a , b , c , d = var . split ( ':' ) #NEWLINE#
def inner ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# return fn ( self , * args , ** dict ( self . gen_args , ** kwargs ) ) #NEWLINE#
a = numpy . array ( [ 0 , 1 , 3 , 2 ] , dtype = numpy . int ) #NEWLINE# a . sort ( ) #NEWLINE# a #NEWLINE#
self . bind ( '<ButtonRelease-1>' , self . _on_release ) #NEWLINE#
print ( function . _original ( ) ) #NEWLINE#
griddata . addSample ( [ X . ravel ( ) [ i ] , Y . ravel ( ) [ i ] ] , [ 0 ] ) #NEWLINE#
spec = inspect . getargspec ( myFunction ) #NEWLINE#
arr = np . array ( [ 5 , 4 , - 2 , 1 , - 2 , 0 , 4 , 4 , - 6 , - 1 ] ) #NEWLINE#
df [ 'date' ] = [ x . split ( '|' ) [ 1 ] for x in df . index ] #NEWLINE#
h , w = img . shape #NEWLINE#
settings . py #NEWLINE#
lelist = [ 'Text' , 'foo' , 'bar' ] #NEWLINE#
super ( ) . __setitem__ ( key , [ value ] ) #NEWLINE#
root . resizable ( width = False , height = False ) #NEWLINE#
[ ( 1 , 3 , 5 ) , ( 1 , 3 , 6 ) , ( 1 , 4 , 6 ) , ( 2 , 4 , 6 ) ] #NEWLINE#
time = datetime . now ( ) #NEWLINE#
[ i for i in B if i in A ] + [ i for i in A if i not in B ] #NEWLINE#
( 2 , 1 , 3 ) , #NEWLINE#
baz2 ( ) #NEWLINE#
print ( ( 'LCM#SPACE#=' , lcm20 ) ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#people#SPACE#WHERE#SPACE#id#SPACE#=#SPACE#:id' , { 'id' : 1123 } ) #NEWLINE#
df [ 'cost' ] = df [ 'cost' ] . map ( '${:,.2f}' . format ) #NEWLINE#
frame . append ( 3 ) #NEWLINE#
[ d [ item ] for item in a ] #NEWLINE#
pickle . dump ( dict1 , fp ) #NEWLINE#
return str ( d ) #NEWLINE#
im = im . convert ( 'RGBA' ) #NEWLINE#
plot . append ( axF ) #NEWLINE#
[ { 'node_id' : next ( ii ) , 'left' : x [ 0 ] , 'right' : x [ 1 ] } for x in model . children_ ] #NEWLINE#
data = urllib . parse . urlencode ( values ) #NEWLINE#
arr = np . array ( list ( it ) ) #NEWLINE#
list2 = [ foo ( i ) for i in list1 ] #NEWLINE#
a = '[[a#SPACE#b]#SPACE#[c#SPACE#d]#SPACE#[e#SPACE#g]]' #NEWLINE# [ i . split ( ) for i in re . findall ( '\\[([^\\[\\]]+)\\]' , a ) ] #NEWLINE#
return self . __dict__ [ 'x' ] ( self ) #NEWLINE#
print ( 'Opening#SPACE#{}' . format ( filename ) ) #NEWLINE#
im . putalpha ( 256 ) #NEWLINE#
line = line . strip ( ) #NEWLINE#
p . pattern #NEWLINE#
QGraphicsTextItem . __init__ ( self ) #NEWLINE#
11.073788414382639 , 23.24847977054601 , 32.12046230136718 #NEWLINE#
44.036117671229206 , 54.009003143831116 , 102.7077685684846 #NEWLINE#
splitmaptime / parsetime #NEWLINE#
summaptime / parsetime #NEWLINE#
strp / parsetime #NEWLINE#
df2 = df2 [ map ( str , list ( range ( 1 , last_column ) ) ) + [ 'first' , 'offset' ] ] #NEWLINE#
plt . show ( ) #NEWLINE#
sum ( a * b for a , b in zip ( A , B ) ) #NEWLINE#
df = df . drop ( [ 'StartTime' , 'EndTime' ] , axis = 1 ) #NEWLINE#
df1 . groupby ( [ 'A' , 'B' ] ) . size ( ) . reset_index ( ) . rename ( columns = { ( 0 ) : 'count' } ) #NEWLINE#
print ( get_last_non_zero_index ( [ - 2 , - 2 , 0 , 0 , 0 , 0 , 0 ] ) ) #NEWLINE#
[ 1 , 3 , 2 ] #NEWLINE#
self . _tw . connect ( 'size-allocate' , self . _autoscroll ) #NEWLINE#
max ( b ) #NEWLINE#
self . cl . hlist . add ( 'CL1' , text = 'checklist1' ) #NEWLINE#
np . savetxt ( f , data , newline = '\n' ) #NEWLINE#
print ( random_with_N_digits ( 4 ) ) #NEWLINE#
df = pd . DataFrame ( np . random . rand ( 4 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE#
f = urllib . request . urlopen ( 'https://graph.facebook.com/arjun/feed' , params ) #NEWLINE#
IOLoop . instance ( ) . start ( ) #NEWLINE#
bin ( strint ( 'abc' [ : : - 1 ] ) << 8 ) #NEWLINE#
return int ( self . opt . stdout . readline ( ) . strip ( ) ) #NEWLINE#
my_dict = { ( 'a' , 'c' , 'd' ) : 10 , ( 'b' , 'e' ) : 20 } #NEWLINE#
5 < [ 1 , 2 ] #NEWLINE#
plt . show ( ) #NEWLINE#
msg . attach ( part1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ re . findall ( pattern , clause ) for clause in clauses . split ( '\n' ) ] #NEWLINE#
self . panel . Bind ( wx . EVT_LEFT_DOWN , self . OnMouseDown ) #NEWLINE#
Decimal ( '1.63' ) . quantize ( Decimal ( '0.5' ) , rounding = ROUND_HALF_DOWN ) #NEWLINE#
ax . plot_surface ( X , Y , heights , cmap = plt . get_cmap ( 'jet' ) ) #NEWLINE#
sstd = Slider ( axstd , 'Std' , 0.1 , 10.0 , valinit = std0 ) #NEWLINE#
'%x' % ord ( chars [ 0 ] ) #NEWLINE#
print ( [ ( k , v ) for k , v in list ( self . items ( ) ) ] ) #NEWLINE#
pickle . dump ( parameters , out_file ) #NEWLINE#
env . hosts = [ 'myhost' ] #NEWLINE#
tavnit += '#SPACE#%-' + '%ss#SPACE#|' % ( w , ) #NEWLINE#
ax . autoscale_view ( ) #NEWLINE#
return [ random . randrange ( 10000 ) for _ in range ( length ) ] #NEWLINE#
yield line , '' . join ( seq ) #NEWLINE#
return redirect ( request . url . replace ( 'http' , 'https' , 1 ) ) #NEWLINE#
fill_node ( root ) #NEWLINE#
m = urllib . request . urlopen ( url ) #NEWLINE#
a . write ( s [ : 3 ] + 'xxx' + s [ 3 : ] ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
a . put ( ( 10 , 'a' ) ) #NEWLINE#
"""uploads#SPACE#to#SPACE#'mybucket/media/',#SPACE#serves#SPACE#from#SPACE#'cloudfront.net/media/'""" #NEWLINE#
oct_num = oct ( dec_num ) #NEWLINE#
appscript . app ( 'Terminal' ) . do_script ( 'python#SPACE#bb.py' ) #NEWLINE#
a [ 0 ] . append ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
Br = [ x , x , x , x , 0 , y ] #NEWLINE#
sizer . Add ( widget1 , 0 , wx . EXPAND ) #NEWLINE#
new_t = t + np . hstack ( ( t [ 1 : ] , [ t [ 0 ] ] ) ) #NEWLINE#
return min ( collection , key = lambda x : abs ( x - num ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
ax2 . set_title ( 'Title#SPACE#of#SPACE#ax2' ) #NEWLINE#
D = [ [ i , j , k ] for i in A for j in B for k in C if i + j - k == 3 ] #NEWLINE#
import lxml . etree #NEWLINE#
yield Request ( url , callback = self . parse_page ) #NEWLINE#
df . columns = [ 'Date' , 'userid' , 'value1' , 'value2' ] #NEWLINE#
today = datetime . datetime . now ( ) #NEWLINE#
'%s:%s.%s' % ( a . hour , a . minute , a . microsecond ) #NEWLINE#
req = urllib . request . Request ( url = 'http://google.com' ) #NEWLINE#
print ( p . findall ( '[hello#SPACE#[world]]#SPACE#abc#SPACE#[123]#SPACE#[xyz#SPACE#jkl]' ) ) #NEWLINE#
vobject . contents #NEWLINE#
np . where ( a == a . min ( ) ) #NEWLINE#
print ( etree . tostring ( xml , encoding = 'unicode' , pretty_print = True ) ) #NEWLINE#
return datetime . strptime ( s , f ) #NEWLINE#
len ( dict_test ) + sum ( len ( v ) for v in dict_test . values ( ) if isinstance ( v , dict ) ) #NEWLINE#
file . seek ( 0 , 2 ) #NEWLINE#
w . setPalette ( p ) #NEWLINE#
return globals ( ) [ 'a' ] #NEWLINE#
plt . plot ( t , s ) #NEWLINE#
return '#SPACE#' . join ( word for word in text . split ( ) if len ( word ) > 3 ) #NEWLINE#
d2 = [ k for k , v in list ( d . items ( ) ) for _ in range ( v ) ] #NEWLINE#
l = [ 1 , 3 , 7 , 2 , 6 , 8 , 10 ] #NEWLINE#
from scapy . all import * #NEWLINE#
super ( RequiredIf , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
trimmed [ k [ 0 ] , k [ - 1 ] ] += v #NEWLINE#
numbers = [ 1 , 1 , 1 , 0 , 2 , 2 , 0 , 2 , 2 , 0 , 0 , 3 , 3 , 0 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 ] #NEWLINE#
print ( template . render ( name = 'Jonnie#SPACE#Doe' ) ) #NEWLINE#
final_image . save ( 'all_averaged.jpg' , 'JPEG' ) #NEWLINE#
print ( '\n' . join ( str ( p ) for p in pairs ( master_board_state ) ) ) #NEWLINE#
import unittest #NEWLINE#
data [ ~ data [ 'ContactID' ] . isin ( to_drop ) ] #NEWLINE#
super ( tweepy . StreamListener , self ) . __init__ ( ) #NEWLINE#
len ( x ) #NEWLINE#
password = db . StringProperty ( ) #NEWLINE#
plt . plot ( seg [ : , ( 0 ) ] , seg [ : , ( 1 ) ] , color = 'white' ) #NEWLINE#
site . getsitepackages ( ) #NEWLINE#
config . set_string ( '-hmm' , path . join ( MODELDIR , 'en-us/en-us' ) ) #NEWLINE#
tmpdata = { } #NEWLINE#
f = open ( 'tests.py' , 'r' ) #NEWLINE#
req . add_header ( 'Content-Type' , 'application/json' ) #NEWLINE#
out = regex . sub ( '#SPACE#' , 'This#SPACE#is,#SPACE#fortunately.#SPACE#A#SPACE#Test!#SPACE#string' ) #NEWLINE#
os . access ( 'C:\\Programme' , os . R_OK ) #NEWLINE#
list ( range ( 10 ) ) #NEWLINE#
sys . path . insert ( 1 , parent_dir ) #NEWLINE#
a = np . arange ( 24 ) . reshape ( ( 2 , 3 , 4 ) ) #NEWLINE#
f . open ( 'bonnie.txt' , 'r+b' ) #NEWLINE#
with open ( 'spam.bmp' , 'rb' ) as f : #NEWLINE# #INDENT# data = bytearray ( f . read ( ) ) #NEWLINE#
printAll ( 'foo' , 'bar' , 'baz' ) #NEWLINE#
l . set_option ( ldap . OPT_X_TLS , ldap . OPT_X_TLS_DEMAND ) #NEWLINE#
print ( [ ( sum ( nums [ : count ] ) / count ) for count in range ( 1 , len ( nums ) + 1 ) ] ) #NEWLINE#
print ( 'foo' ) #NEWLINE#
cmd . command ( 'exit' ) #NEWLINE#
self . con . commit ( ) #NEWLINE#
D0 = np . array ( [ ( A [ i ] * B [ ( i ) , : ] ) for i in range ( len ( A ) ) ] ) #NEWLINE#
self . append ( item ) #NEWLINE#
soup = BeautifulSoup ( file ( 'playlist.html' ) . read ( ) ) #NEWLINE#
engine = create_engine ( 'connection_uri' , pool_size = 1 , max_overflow = 0 ) #NEWLINE# DBSession = scoped_session ( sessionmaker ( bind = engine ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
ax . axvline ( x = xc , color = 'k' , linestyle = '-' ) #NEWLINE#
wtr . writerows ( [ [ 1 , 2 ] , [ 2 , 3 ] , [ 4 , 5 ] ] ) #NEWLINE#
return str ( response [ 'data' ] [ 'link' ] ) #NEWLINE#
contents = codecs . open ( 'foo.txt' , encoding = 'utf-8' ) . read ( ) #NEWLINE#
with open ( 'one.txt' ) as f1 : #NEWLINE# #INDENT# with open ( 'two.txt' , 'a' ) as f2 : #NEWLINE# #INDENT# #INDENT# f1 . write ( 'foo' ) #NEWLINE# f2 . write ( 'bar' ) #NEWLINE#
driver = webdriver . Chrome ( chrome_options = chrome_options ) #NEWLINE#
xticks ( list ( range ( 1 , 6 ) ) ) #NEWLINE#
parser = argparse . ArgumentParser ( prog = 'PROG' ) #NEWLINE#
y . sort ( key = lambda l : grp ( '%\\w' , l ) ) #NEWLINE#
gca ( ) . yaxis . set_major_locator ( NullLocator ( ) ) #NEWLINE#
numpy . exp ( numpy . sum ( numpy . log ( a ) ) ) #NEWLINE#
ctypes . windll . kernel32 . TerminateProcess ( handle , - 1 ) #NEWLINE#
lookup = sqlContext . createDataFrame ( [ ( 1 , 'foo' ) , ( 2 , 'bar' ) ] , ( 'k' , 'v' ) ) #NEWLINE#
server = SimpleXMLRPCServer ( ( 'localhost' , 8000 ) ) #NEWLINE#
with open ( 'somefile' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( the_bytearray ) #NEWLINE#
combination [ r - 1 ] += 1 #NEWLINE#
'global' , 'if' , 'import' , 'in' , 'is' , 'lambda' , 'not' , 'or' , 'pass' #NEWLINE#
np . random . seed ( None ) #NEWLINE#
root . wm_title ( 'This#SPACE#is#SPACE#my#SPACE#title' ) #NEWLINE#
make_cyclic ( [ 1 , 2 , 3 ] ) #NEWLINE#
reader = csv . reader ( f , delimiter = ',' ) #NEWLINE#
f1 . write ( line ) #NEWLINE#
text = json . loads ( jsonurl . read ( ) ) #NEWLINE#
print ( [ val [ 1 ] for val in enumerate ( a ) if val [ 0 ] != i ] ) #NEWLINE#
y1 = ( x - x0 ) * sin ( theta ) + ( h - y - y0 ) * cos ( theta ) #NEWLINE#
- 24.6 , 14.0 , - 30.2 , - 26.5 , - 29.0 , 15.7 , 6.0 , 36.3 , 44.3 , 13.5 , - 27.6 , 33.7 , 13.4 , - 43.9 #NEWLINE#
print ( str2seconds ( '255' ) ) #NEWLINE#
req = urllib . request . Request ( 'http://www.example.com/' ) #NEWLINE#
shallow_copy_of_x = type ( x ) ( x ) #NEWLINE#
{ { url_for ( 'download_file' , filename = 'dogs.jpg' ) } } #NEWLINE#
poly = Polygon ( [ ( 0 , 0 ) , ( 0 , 2 ) , ( 2 , 2 ) , ( 2 , 0 ) ] ) #NEWLINE#
template = """mkdir#SPACE#/root/.ssh#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#&&#SPACE#chmod#SPACE#go-rwx#SPACE#/root/.ssh#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#&&#SPACE#apt-get#SPACE#install#SPACE#-y#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#gcc#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#libssl-dev#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#python-pip#SPACE#\\#NEWLINE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#openssh-server#SPACE#\\#NEWLINE#PATH=/usr/local/jdk1.8.0/bin:$PATH#SPACE##NEWLINE#""" #NEWLINE# with open ( 'config' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( template ) #NEWLINE#
{ 'kw2' : 'def' } #NEWLINE#
document . getElementById ( 'one' ) #NEWLINE#
np . dot ( X , A ) #NEWLINE#
img = ImageTk . PhotoImage ( Image . open ( path ) ) #NEWLINE#
s . bind ( ( HOST , PORT ) ) #NEWLINE#
reader = csv . reader ( open ( 'junk.txt' , 'r' ) , dialect = 'excel-tab' ) #NEWLINE#
lists = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] ] #NEWLINE# [ x for t in zip ( * lists ) for x in t ] #NEWLINE#
[ 2 , 3 , 4 ] #NEWLINE#
os . chmod ( 'file' , int ( '2777' , 8 ) ) #NEWLINE#
lostTotal = out . split ( 'Lost#SPACE#=#SPACE#' ) [ 1 ] . split ( '#SPACE#' ) [ 0 ] #NEWLINE#
self . log . write ( message ) #NEWLINE#
conn . login ( 'user' , 'password' ) #NEWLINE#
for line in s : #NEWLINE# #INDENT# do_something_with ( line ) #NEWLINE#
endrec . append ( '' ) #NEWLINE#
ax . plot ( x , np . sin ( x ) , label = 'Sine' ) #NEWLINE#
return len ( s ) == len ( set ( s ) ) #NEWLINE#
untranslated = some_text #NEWLINE#
pts = plt . scatter ( x_data , y_data , marker = 's' , c = data [ x_data , y_data ] ) #NEWLINE#
input_wb = open_workbook ( 'input.xls' , formatting_info = True ) #NEWLINE#
do_some_stuff ( i ) #NEWLINE#
driver . find_element_by_css_selector ( 'input[type="file"]' ) . clear ( ) #NEWLINE#
A = np . array ( [ [ 4 , 2 ] , [ 3 , 5 ] , [ 8 , 6 ] ] ) #NEWLINE#
pool . join ( ) #NEWLINE#
return [ 0 , 0 , 0 ] #NEWLINE#
parser . add_argument ( 'square' , help = 'display#SPACE#a#SPACE#square#SPACE#of#SPACE#a#SPACE#given#SPACE#number' ) #NEWLINE#
settings . development . py #NEWLINE#
output = re . findall ( '\\b\\d{5}\\b' , text ) #NEWLINE#
return a , b , c , d #NEWLINE#
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] #NEWLINE#
Test ( ) . run ( ) #NEWLINE#
tk . Label ( self , text = 'Hey' , font = ( 'Arial' , 16 ) ) . pack ( ) #NEWLINE#
return a , b #NEWLINE#
b . sort ( ) #NEWLINE#
cv2 . line ( h , ( x , 0 ) , ( x , y ) , ( 255 , 255 , 255 ) ) #NEWLINE#
nums = [ 1 , 2 , 3 ] #NEWLINE#
[ x for x in [ 1 , 2 , <STR0> ] if x != <STR0> ] #NEWLINE#
pyplot . show ( ) #NEWLINE#
e . pack ( ) #NEWLINE#
return lfilter ( b , a , data ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
json . loads ( json_repr , object_hook = _decode_dict ) #NEWLINE#
list . append ( values [ i ] ) #NEWLINE#
connection = opener . open ( request ) #NEWLINE#
hl . set_ydata ( numpy . append ( hl . get_ydata ( ) , new_data ) ) #NEWLINE#
weed . save ( ) #NEWLINE#
felix . save ( ) #NEWLINE#
fixedser . plot ( ax = axes [ 0 ] ) #NEWLINE#
pickle . dumps ( test ) #NEWLINE#
ax1 . bar ( i , 3 , color = 'red' , edgecolor = 'black' , hatch = patterns [ i ] ) #NEWLINE#
self . b = a #NEWLINE#
clean = [ x for x in usertext if x not in stop_words ] #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
root . wm_geometry ( '400x400' ) #NEWLINE#
a . wibble = 1234567 #NEWLINE#
lastDigit = x [ - 1 ] #NEWLINE#
yield Request ( link_url ) #NEWLINE#
np . fmin ( np . digitize ( A , hist [ 1 ] ) , bin_count ) #NEWLINE#
engine = sa . create_engine ( 'mysql+pymysql://user:pwd@localhost' ) #NEWLINE#
[ gu ( i ) for i in range ( len ( uo ) ) ] #NEWLINE#
return True #NEWLINE#
ax . yaxis . set_ticks_position ( 'none' ) #NEWLINE#
minutes = int ( time . split ( ':' ) [ 1 ] ) #NEWLINE#
super ( Bar , self ) . clean ( ) #NEWLINE#
pil_image = PIL . Image . open ( 'Image.jpg' ) . convert ( 'RGB' ) #NEWLINE#
print ( animals [ 'CAT' ] [ 'number_of_legs' ] ) #NEWLINE#
print ( mystring [ - 1 ] ) #NEWLINE#
array ( [ [ 32 , 8 ] , [ 16 , 8 ] ] ) #NEWLINE#
p . start ( ) #NEWLINE#
print ( np . trace ( a , x ) ) #NEWLINE#
top . geometry ( '200x100' ) #NEWLINE#
ax . plot ( x , y , mfc = 'orange' , mec = 'orange' , marker = '.' ) #NEWLINE#
menu_item . show ( ) #NEWLINE#
out_file = open ( 'd:/out.csv' , 'wb' ) #NEWLINE#
plt . show ( ) #NEWLINE#
XB = np . linspace ( - 1 , 1 , 20 ) #NEWLINE#
ax . set_ylim ( 0 , Y ) #NEWLINE#
( a != b ) . nonzero ( ) #NEWLINE#
self . socket . write ( self . request ) #NEWLINE#
print ( ']}' ) #NEWLINE#
root / home / alistair / anaconda #NEWLINE#
nums = [ int ( x ) for x in data [ 1 ] . split ( '/' ) ] #NEWLINE#
psutil . virtual_memory ( ) #NEWLINE#
a_game . run ( ) #NEWLINE#
second_list . append ( ls [ 1 ] ) #NEWLINE#
self . Show ( ) #NEWLINE#
a = [ 1 , 2 , 3 , 1 , 3 , 2 , 1 , 1 ] #NEWLINE# [ ( 4 if x == 1 else x ) for x in a ] #NEWLINE#
timeit ( lambda : lensorting ( [ 1 , 2 , 3 ] , [ 3 , 2 , 1 ] ) ) #NEWLINE#
root = et . fromstring ( text ) #NEWLINE#
plt . subplot ( 132 ) #NEWLINE#
x . Bar ( ) #NEWLINE#

f = open ( 'output.txt' , 'r' , encoding = 'utf-8' ) #NEWLINE#
logging . getLogger ( 'sqlalchemy' ) . setLevel ( logging . INFO ) #NEWLINE#
"""...[t]he#SPACE#sender#SPACE#of#SPACE#the#SPACE#signal.#SPACE#Either#SPACE#a#SPACE#specific#SPACE#object#SPACE#or#SPACE#None.""" #NEWLINE#
( a * prior_reci + ( 1 - a ) * prior_reci / 10 ) . sum ( axis = 1 ) #NEWLINE#
file . save ( '%s.png' % model_instance . pk , file , save = False ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
df = df . groupby ( [ 'code' , 'colour' ] ) . apply ( lambda x : x . set_index ( 'id' ) . #NEWLINE# to_dict ( 'dict' ) [ 'amount' ] ) #NEWLINE#
np . vstack ( np . triu_indices_from ( a , k = 1 ) ) . T #NEWLINE#
bcut . label . set_visible ( False ) #NEWLINE#
print ( 'Orphans:#SPACE#%s' % len ( data ) ) #NEWLINE#
print ( 'found#SPACE#"%s"#SPACE#link#SPACE#to#SPACE#href#SPACE#"%s"' % ( a . text , a . get ( 'href' ) ) ) #NEWLINE#
return self . s . lower ( ) == other . s . lower ( ) #NEWLINE#
print ( 'Revision#SPACE#is' , output ) #NEWLINE#
data = [ 0 , 1 , 2 , 1 , 2 , 5 , 6 , 3 , 4 , 9 , 10 , 11 , 12 ] #NEWLINE# parse ( data ) #NEWLINE#
query = query . replace ( '%%(%s)s' % k , v ) #NEWLINE#
dic . get ( 100 , 'not#SPACE#found' ) #NEWLINE#
subplot ( 2 , 2 , 4 ) #NEWLINE#
s , loc , scale = stats . lognorm . fit ( data , floc = 0 ) #NEWLINE#
z = dict ( list ( x . items ( ) ) + list ( y . items ( ) ) ) #NEWLINE#
mylist = [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 3 , 2 , 2 , 2 , 2 , 3 , 3 , 4 , 5 , 5 , 5 , 5 ] * 10 #NEWLINE#
json_normalize ( data [ 'results' ] ) #NEWLINE#
cnt1 = np . concatenate ( ( [ 0 ] , np . cumsum ( cnt ) [ : - 1 ] ) ) #NEWLINE#
plt . ylim ( 0 , 2.5 ) #NEWLINE#
prompts += expect ( 'What#SPACE#is#SPACE#your#SPACE#name?' , 'John' ) #NEWLINE#
print ( s . translate ( ascii_map ( ) ) ) #NEWLINE#
s = pd . Series ( [ 1 , 2 , 3 , 4 , np . NaN , 5 , np . NaN ] ) #NEWLINE# s [ ~ s . isnull ( ) ] #NEWLINE#
print ( list ( result ) ) #NEWLINE#
yourstring = 'L%sLL' % yourstring #NEWLINE#
wx . Frame . __init__ ( self , parent , - 1 , title , size = ( 600 , 400 ) ) #NEWLINE#
print ( sublist ( [ 12 , 1 , 3 ] , [ 25 , 1 , 30 , 12 , 3 , 40 ] ) ) #NEWLINE#
aList . append ( [ element . strip ( ) for element in row ] ) #NEWLINE#
import scipy . io #NEWLINE#
f = [ foo , boo , doo ] #NEWLINE#
points . intersects ( poly . unary_union ) #NEWLINE#
row . extend ( [ 'x' , 'y' , 'x' , 'y' , 'x' , 'y' ] ) #NEWLINE#
def myview ( request ) : #NEWLINE# #INDENT# return HttpResponse ( 'return#SPACE#this#SPACE#string' ) #NEWLINE#
print ( cwd . getcwd ( ) ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
frame . pack ( ) #NEWLINE#
self . connection . close ( ) #NEWLINE#
a , b = 2 , 3 #NEWLINE#
list_2_sorted = [ x [ 1 ] for x in sorted_together ] #NEWLINE#
sum_chunk ( a , 2 , axis = 0 ) #NEWLINE#
print ( lines [ 0 ] [ 0 ] . shape ) #NEWLINE#
k = db . Key ( 'agNiYXpyDAsSA2ZvbyIDYmFyDA' ) #NEWLINE#
button = Tk . Button ( master = frame , text = 'press' , command = lambda : action ( #NEWLINE# someNumber ) ) #NEWLINE#
confusion_matrix ( y_actu , y_pred ) #NEWLINE#
x = x . set_value ( i , i ** 2 ) #NEWLINE#
intersect_range ( [ 1 , 2 , 3 , 7 , 8 , 10 , 15 ] , 0 , 1 ) #NEWLINE#
rate , data = scipy . io . wavfile . read ( 'xenencounter_23.wav' ) #NEWLINE#
id = Column ( Integer , primary_key = True , nullable = False ) #NEWLINE#
return obj . strftime ( '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
"""C:/Server/Projects/project_name/static/css/style.css""" #NEWLINE#
result . append ( list_to_html ( item ) ) #NEWLINE#
"""http://whatever.com/somepage?utm_one=3&something=4&utm_two=5&utm_blank&something_else""" #NEWLINE#
parser . add_argument ( '-v' , '--vebose' , action = 'count' ) #NEWLINE#
item . setCheckState ( QtCore . Qt . Checked ) #NEWLINE#
pyplot . plot ( mat1 [ : , ( 0 ) ] , mat1 [ : , ( 1 ) ] , label = 'data1' ) #NEWLINE#
math . sqrt ( 2 ) #NEWLINE#
signal . signal ( signal . SIGPIPE , signal . SIG_DFL ) #NEWLINE#
im = Image . open ( 'zGjE6.png' ) #NEWLINE#
sort_indices = numpy . argsort ( a , axis = 0 ) #NEWLINE#
cherrypy . tree . mount ( Root ( ) ) #NEWLINE#
frozenset ( chain . from_iterable ( L ) ) #NEWLINE#
func ( 'file1' ) #NEWLINE#
z = [ int ( i == j ) for i , j in zip ( x , y ) ] #NEWLINE# z #NEWLINE#
numpy . __version__ #NEWLINE#
pattern = re . compile ( '([A-Z]+)([0-9]+)' ) #NEWLINE#
data = [ line . strip ( ) . split ( ) for line in f . readlines ( ) ] #NEWLINE#
self . fig . canvas . mpl_connect ( 'pick_event' , self . on_pick ) #NEWLINE#
mimetypes . guess_type ( 'something.jpg' ) #NEWLINE#
[ [ 1 ] , [ 3 , 7 , 8 , 9 ] ] #NEWLINE#
m = re . findall ( '^(?=.*Tim).*stupid' , str , re . MULTILINE ) #NEWLINE#
df . T #NEWLINE#
print ( tmpl . render ( v = Myobj ( ) ) ) #NEWLINE#
f_list [ 0 ] ( 'hi' ) #NEWLINE#
regex = re . compile ( ',(?![^<>]*>)' ) #NEWLINE#
ax . set_ylabel ( 'DIFF' ) #NEWLINE#
copyofL = remove_column ( L , 1 ) #NEWLINE#
s = '000000000000484240FA063DE5D0B744ADBED63A81FAEA390000C8428640A43D5005BD44' #NEWLINE# s . decode ( 'hex' ) #NEWLINE#
parent . mainloop ( ) #NEWLINE#
print ( list ( traverse ( data ) ) ) #NEWLINE#
conn . commit ( ) #NEWLINE#
super ( ) . __bases__ = value #NEWLINE#
dcounts = Counter ( d [ 0 ] for d in defectdetails ) #NEWLINE#
logging . warning ( 'warning' ) #NEWLINE#
p = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE#
user . set_password ( '666monkeysAndDogs777' ) #NEWLINE#
create_user_profile ( user ) #NEWLINE#
_fields_ = [ ( '_buffer' , ctypes . c_byte * BUFSIZE ) , ( 'size' , ctypes . c_int ) ] #NEWLINE#
sys . stdin = open ( tty_path , 'r' ) #NEWLINE#
np . all ( A == B ) #NEWLINE#
transform = { 'type_id' : 'type' , 'type_name' : 'name' } #NEWLINE# new_list = [ { transform [ k ] : v for k , v in list ( d . items ( ) ) } for d in old_list ] #NEWLINE#
pool = Pool ( processes = 4 ) #NEWLINE#
super ( CompanyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( re . findall ( '[+-]?#SPACE#*(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?' , s ) ) #NEWLINE#
fullurl = quote ( fullurl , safe = "%/:=&?~#+!$,;'@()*[]" ) #NEWLINE#
item . append ( item [ 0 ] ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$9.00' ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$12.00' ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$8.00' ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$15.00' ) #NEWLINE#
d = json . loads ( json_acceptable_string ) #NEWLINE#
[ i for i in range ( 100000 ) if i == 1000 ] [ 0 ] #NEWLINE#
ax . axhline ( y = ymaj , ls = '-' ) #NEWLINE#
print ( ( current_item , next_item ) ) #NEWLINE#
doc = minidom . parse ( 'test.xml' ) #NEWLINE#
def countHashedLines ( lines ) : #NEWLINE# #INDENT# return len ( [ line for line in lines if line . startswith ( '#' ) ] ) #NEWLINE#
r = requests . get ( 'someurl' ) #NEWLINE#
f . close ( ) #NEWLINE#
from nolearn . lasagne import NeuralNet #NEWLINE#
a . f ( ) #NEWLINE#
pdf = pyPdf . PdfFileReader ( f ) #NEWLINE#
g . mean ( ) #NEWLINE#
plt . plot ( list ( range ( 5 ) ) ) #NEWLINE#
df [ 'freq' ] = df . groupby ( 'a' ) [ 'a' ] . transform ( 'count' ) #NEWLINE#
print ( ax . lines [ 0 ] ) #NEWLINE#
raise KeyboardInterrupt #NEWLINE#
os . dup2 ( oldstdout_fno , 1 ) #NEWLINE#
tmp = np . concatenate ( ( GRZVV , np . ones ( ( 16309 , 1 ) , dtype = np . double ) ) , axis = 1 ) #NEWLINE#
print ( sum ( int ( x ) * 60 ** i for i , x in enumerate ( reversed ( t . split ( ':' ) ) ) ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
array = list ( csv . reader ( open ( './urls-eu.csv' ) ) ) #NEWLINE#
return int ( random . randrange ( 0 , 255 ) ) #NEWLINE#
MyButton1 . grid ( row = 0 , column = 0 ) #NEWLINE#
ax . lines [ - 1 ] . set_linewidth ( 8 ) #NEWLINE#
from flask import Markup #NEWLINE#
plt . ylabel ( '$y$' , labelpad = 6 ) #NEWLINE#
super ( Worker , self ) . __init__ ( ) #NEWLINE#
9144 , 5866 , 6742 , 588 , 6918 , 7802 , 8229 , 7947 , 8992 , 1339 , 2119 , 846 #NEWLINE#
self . root . title ( 'Tkinter#SPACE#Auto-Scrolling#SPACE#Test' ) #NEWLINE#
shlex . split ( teststring ) #NEWLINE#
button1 = Button ( master , text = 'Search' ) #NEWLINE#
user = User . objects . get ( pk = 1 ) #NEWLINE#
z = [ [ y for y in row if y ] for row in x . T ] #NEWLINE#
a = [ 1 , 2 , 3 , 1 , 1 , 3 , 4 , 3 , 2 ] #NEWLINE#
con = cx_Oracle . connect ( 'pythonhol/welcome@127.0.0.1/orcl' ) #NEWLINE#
help ( subprocess . list2cmdline ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( 'selecting#SPACE#%d#SPACE#lines#SPACE#from#SPACE#a#SPACE#file#SPACE#of#SPACE#%d' % ( nsamp , len ( linepos ) ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
return f ( x , y ) #NEWLINE#
'b' , 'a' , 'c' #NEWLINE#
'b' , 'c' , 'a' #NEWLINE#
'c' , 'a' , 'b' #NEWLINE#
"""//.*?$|/\\*.*?\\*/|\\'(?:\\\\.|[^\\\\\\'])*\\'|"(?:\\\\.|[^\\\\"])*\"""" #NEWLINE#
my_dict [ key ] = 1 #NEWLINE#
return jsonify ( d ) #NEWLINE#
tableWidget . setImage ( 0 , 1 , '<your#SPACE#image#SPACE#path#SPACE#here>' ) #NEWLINE#
print ( '' ) #NEWLINE#
df . loc [ ( idx [ : , ( 'H' ) ] ) , : ] #NEWLINE#
df [ 'rank' ] = df . groupby ( 'group_ID' ) [ 'value' ] . rank ( 'dense' , ascending = False ) #NEWLINE# df #NEWLINE#
return decorator ( method ) #NEWLINE#
both = np . hstack ( ( img1 , img2 ) ) #NEWLINE#
rreplace ( s , '2' , '#SPACE#' , 3 ) #NEWLINE#
sys . stdout = old_target #NEWLINE#
console_handler = logging . StreamHandler ( ) #NEWLINE#
df2 = df . groupby ( [ 'stock' , 'same1' , 'same2' ] ) [ [ 'positions' ] ] . sum ( ) #NEWLINE#
result . append ( item ) #NEWLINE#
integer = int ( eval ( input ( 'something:#SPACE#' ) ) ) #NEWLINE#
print ( formatter . format ( fmt , ** data ) ) #NEWLINE#
f . write ( df . to_html ( ) ) #NEWLINE#
def randvector2 ( n ) : #NEWLINE# #INDENT# return np . exp ( 2.0j * np . pi * np . random . rand ( n , 1 ) ) . view ( dtype = np . float64 ) #NEWLINE#
c . executemany ( 'insert#SPACE#into#SPACE#kv#SPACE#values#SPACE#(?,?);' , iter ( d . items ( ) ) ) #NEWLINE#
next ( filter ( my_criteria , mylist ) , None ) #NEWLINE#
im += np . array ( currentimage , dtype = np . float32 ) #NEWLINE#
first_column = row . findAll ( 'th' ) [ 0 ] . contents #NEWLINE#
subplot ( 4 , 1 , 1 ) #NEWLINE#
self . update_status ( ) #NEWLINE#
a = np . arange ( 16 ) . reshape ( ( 8 , 2 ) ) #NEWLINE# b = [ 2 , 6 ] #NEWLINE# print ( np . split ( a , b , axis = 0 ) ) #NEWLINE#
print ( df ) #NEWLINE#
[ [ 1 , 2 , 3 ] , 'F' ] #NEWLINE#
eval ( x ) #NEWLINE#
url_fix ( 'http://de.wikipedia.org/wiki/Elf#SPACE#(Begriffsklärung)' ) #NEWLINE#
[ 1 , 9 , 36 , 84 , 126 , 126 , 84 , 36 , 9 , 1 ] #NEWLINE#
result = [ ] #NEWLINE#
stext . insert ( END , 'Hello' , 'font' ) #NEWLINE#
my_new_list = [ i for i in myList if i . count ( None ) < 4 ] #NEWLINE#
[ 0 ] + list ( accumulate ( sum ( 1 for _ in g ) for _ , g in groupby ( bool_array ) ) ) #NEWLINE#
return wrapper #NEWLINE#
my_field = models . CharField ( max_length = 100 ) #NEWLINE#
now = time . time ( ) #NEWLINE#
pass #NEWLINE#
label . set_horizontalalignment ( 'right' ) #NEWLINE#
os . environ [ 'ORACLE_HOME' ] = '/usr/lib/oracle/XX.Y/client64' #NEWLINE#
cursor . close ( ) #NEWLINE#
return regex . sub ( _replacer , string ) #NEWLINE#
raise ValueError ( 'array#SPACE#has#SPACE#wrong#SPACE#format' ) #NEWLINE#
[ 'bax' , 'quux' , 'ketchup' , 'mustard' ] , #NEWLINE#
session . run ( tf . initialize_variables ( uninitialized_variables ) ) #NEWLINE#
dictionary = { 'my_age' : [ '23' ] , 'my_girlfriend_age' : [ '25' , '27' ] } #NEWLINE#
assertion_raiser ( ) #NEWLINE#
res = np . array ( sorted ( a , key = lambda x : ( - x ) . tolist ( ) ) ) #NEWLINE#
scrapyd . schedule ( 'project_name' , 'spider_name' ) #NEWLINE#
sql = 'INSERT#SPACE#INTO#SPACE#TABLE_A#SPACE#(COL_A,COL_B)#SPACE#VALUES#SPACE#(%s,#SPACE#%s)' % ( val1 , val2 ) #NEWLINE# cursor . execute ( sql ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
[ 2 , 3 , 4 ] [ 1 , 2 , 3 ] #NEWLINE#
self . comboBox_2 . addItems ( list1 ) #NEWLINE#
jenny [ 'name' ] = 'Jenny' #NEWLINE#
unicode_somedir = somedir . decode ( encoding ) #NEWLINE#
time . sleep ( 0.001 ) #NEWLINE#
ax . axis ( 'auto' ) #NEWLINE#
dask . set_options ( get = dask . multiprocessing . get ) #NEWLINE#
browser . set_cookie ( 'sid=abcdef;#SPACE#expires=Wednesday,#SPACE#09-Nov-06#SPACE#23:12:40#SPACE#GMT' ) #NEWLINE#
last_name = forms . CharField ( max_length = 256 ) #NEWLINE#
return Py_BuildValue ( 'c' , 'A' ) #NEWLINE#
writer = csv . writer ( csvfile ) #NEWLINE#
def encrypt ( string , length ) : #NEWLINE# #INDENT# return '#SPACE#' . join ( string [ i : i + length ] for i in range ( 0 , len ( string ) , length ) #NEWLINE# ) #NEWLINE#
for row in reversed ( list ( csv . reader ( textfile ) ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
del L [ idel : ] #NEWLINE#
'2a00:1450:4009:809::1017' , 80 , 0 , 0 #NEWLINE#
np . matrix ( m ) #NEWLINE#
USER_AGENT = 'whatever#SPACE#the#SPACE#user#SPACE#agent#SPACE#string#SPACE#was' #NEWLINE#
text = text . replace ( vowel , '' ) #NEWLINE#
db [ 'foo' ] = 'bar' #NEWLINE#
def oddonly ( lst ) : #NEWLINE# #INDENT# return [ x for x in lst if x % 2 ] #NEWLINE#
data = pickle . load ( dataFile ) #NEWLINE#
self . label . pack ( padx = 10 , pady = 10 ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'mysite.settings' #NEWLINE#
time . sleep ( 3 * random . random ( ) ) #NEWLINE#
y = multiprocessing . Process ( target = smile_detection , args = ( 'Thread2' , count ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
soup = bs4 . BeautifulSoup ( thehtml ) #NEWLINE#
def save_obj ( obj , name ) : #NEWLINE# #INDENT# with open ( 'obj/' + name + '.pkl' , 'wb' ) as f : #NEWLINE# #INDENT# #INDENT# pickle . dump ( obj , f , pickle . HIGHEST_PROTOCOL ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def load_obj ( name ) : #NEWLINE# #INDENT# with open ( 'obj/' + name + '.pkl' , 'rb' ) as f : #NEWLINE# #INDENT# #INDENT# return pickle . load ( f ) #NEWLINE#
qs = User . objects . filter ( groups__name = 'foo' ) #NEWLINE#
root . title ( 'how#SPACE#to#SPACE#get#SPACE#text#SPACE#from#SPACE#textbox' ) #NEWLINE#
l1 = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] , [ 5 , 9 ] ] #NEWLINE#
df . categories . map ( lambda x : 'restaurant' in x ) #NEWLINE#
lst = [ 1 , 2 , 3 ] #NEWLINE#
arr = arr . flatten ( ) #NEWLINE#
s . setsockopt ( socket . SOL_SOCKET , socket . SO_KEEPALIVE , 1 ) #NEWLINE#
hxs = HtmlXPathSelector ( response ) #NEWLINE#
for k , v in list ( mydict . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
db = cx_Oracle . connect ( '****' , '****' , '****' ) #NEWLINE#
print ( 'No#SPACE#foobar#SPACE#module' ) #NEWLINE#
ax . text ( i , v . umpires + 0.2 , v . umpires , color = 'red' ) #NEWLINE#
self . _timer . cancel ( ) #NEWLINE#
raise ValueError ( 'invalid#SPACE#truth#SPACE#value#SPACE#%r' % ( val , ) ) #NEWLINE#
a = np . array ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) #NEWLINE#
new_db = sqlite3 . connect ( ':memory:' ) #NEWLINE#
[ 2.0640320777893066 , 2.08760404586792 , 2.052021026611328 ] #NEWLINE#
driver = ChromeDriver ( options ) #NEWLINE#
print ( [ x for x in pattern . split ( string ) if x ] ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
my_objects = MyModel . objects . all ( ) . order_by ( '-field' , 'parent__field' ) #NEWLINE#
eventq . put ( ( 'Got#SPACE#data' , data ) ) #NEWLINE#
__tablename__ = 'question' #NEWLINE#
print ( '<br><B>hello#SPACE#python</B>' ) #NEWLINE#
ax . add_artist ( ab ) #NEWLINE#
foo . read ( ) #NEWLINE#
np . array ( [ 1 , 2 , 3 ] , ndmin = 2 ) . T #NEWLINE#
set ( d [ 0 ] ) . intersection ( * d ) #NEWLINE#
unittest . main ( ) #NEWLINE#
print ( '/' . join ( 'pictures\\12761_1.jpg' . split ( '\\' ) ) ) #NEWLINE#
( np . random . rand ( 40 , 40 , 9 , 1 , 9 , 1 , 8 ) + np . random . rand ( 1 , 9 , 1 , 9 , 8 ) ) . shape #NEWLINE#
for i in c : #NEWLINE# #INDENT# del i #NEWLINE#
self . scrollbar . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
print ( 'done' ) #NEWLINE#
mail . uid ( 'search' , None , '(X-GM-RAW#SPACE#"subject:\\"New#SPACE#Order\\"")' ) #NEWLINE#
len ( aString ) == 8 and set ( aString ) <= { '0' , '1' } #NEWLINE#
upload . save ( file_path ) #NEWLINE#
r = requests . get ( url , stream = True ) #NEWLINE#
from sympy import * #NEWLINE#
df . Mathscore . map ( d ) #NEWLINE#
np . char . isnumeric ( x . astype ( 'unicode' ) ) #NEWLINE#
foo ( noniterable , isiterable = False ) #NEWLINE#
arr = numpy . zeros ( ( 50 , 100 , 25 ) ) #NEWLINE#
prefix = '####SPACE#%s->%s' % ( module_name , func_name ) #NEWLINE#
plt . subplot ( 6 , 1 , 3 ) #NEWLINE#
print ( 'found#SPACE#%s#SPACE#words' % n ) #NEWLINE#
sd . SetSecurityDescriptorDacl ( 1 , dacl , 0 ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( "At#SPACE#least,#SPACE#that's#SPACE#what#SPACE#%s#SPACE#told#SPACE#me." % pronouns [ gender ] ) #NEWLINE#
tree = ElementTree . parse ( StringIO ( text ) ) #NEWLINE#
reader = csv . DictReader ( csvfile , delimiter = '#SPACE#' ) #NEWLINE#
[ 'I' , "won't" , 'answer' , 'this' , 'question' ] #NEWLINE#
win32gui . GetCursorPos ( point ) #NEWLINE#
return x / y #NEWLINE#
def sum_numbers ( s ) : #NEWLINE# #INDENT# return sum ( map ( float , s . split ( ) ) ) #NEWLINE#
df . groupby ( 'categories' ) . agg ( f ) #NEWLINE#
both_removed = [ s . strip ( '0' ) for s in listOfNum ] #NEWLINE#
start_date + timedelta ( days = days_in_month ) #NEWLINE#
dis . dis ( compile ( a , '' , 'eval' ) ) #NEWLINE#
app = QtGui . QApplication ( [ ] ) #NEWLINE#
( df == 38.15 ) . iloc [ 0 ] #NEWLINE#
np . cumsum ( v ) #NEWLINE#
print ( '\n' . join ( thelist ) ) #NEWLINE#
nsmallest ( 3 , s , key = lambda x : abs ( x - 6.5 ) ) #NEWLINE#
paired_sorted = sorted ( zip ( List2 , List3 , List1 ) , key = lambda x : ( x [ 0 ] , - x [ 1 ] ) ) #NEWLINE# l2 , l3 , l1 = zip ( * paired_sorted ) #NEWLINE#
df . drop ( [ 'A' ] , axis = 1 , inplace = True ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
plt . xlabel ( 'x' ) #NEWLINE#
return redirect ( url_for ( 'foo' ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
c . methodA ( ) #NEWLINE#
x . close ( ) #NEWLINE#
x += c #NEWLINE#
moving_average ( a ) #NEWLINE#
regex . sub ( 'url(#[0-9]+)?' , 'new_url\\1' , test1 ) #NEWLINE#
return n + Decimal ( '10' ) ** n . as_tuple ( ) . exponent #NEWLINE#
cf . body [ 0 ] . names [ 0 ] . name #NEWLINE#
some_dict [ '7812' ] == 798 #NEWLINE#
return np . sqrt ( np . einsum ( 'ijk,ijk->ij' , subs , subs ) ) #NEWLINE#
lst = [ 1 , 1 , 1 , 1 , 2 , 3 , 4 , 4 , 4 , 4 , 4 ] #NEWLINE# print ( list ( keep_n_dupes ( lst , 2 ) ) ) #NEWLINE#
collection . insert ( data ) #NEWLINE#
views . py #NEWLINE#
pass #NEWLINE#
import lxml . html as lh #NEWLINE#
greet ( ) #NEWLINE#
l = [ sublist [ : ] for sublist in l ] #NEWLINE#
mytest . start ( ) #NEWLINE#
pd . Timestamp ( 0 ) #NEWLINE#
return min ( S ) #NEWLINE#
pd . concat ( [ df , df_ ] , axis = 1 ) . drop ( 'Value' , 1 ) . fillna ( '' ) #NEWLINE#
value = sheet . cell ( row , col ) . value #NEWLINE#
plt . plot ( t , y , '-og' ) #NEWLINE#
query = query . filter ( ~ table_a . id . in_ ( subquery ) ) #NEWLINE#
req . add_header ( 'foo' , 'bar' ) #NEWLINE#
tuple ( { name : score } for name , score in max_scores . items ( ) ) #NEWLINE#
main ( ) #NEWLINE#
ax . set_zlabel ( 'Shannon#SPACE#Index' ) #NEWLINE#
dt = datetime . datetime . strptime ( myDate , '%Y-%m-%d#SPACE#%H:%M:%S,%f' ) #NEWLINE# time . mktime ( dt . timetuple ( ) ) + dt . microsecond / 1000000.0 #NEWLINE#
l = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE# del l [ 0 ] #NEWLINE# l #NEWLINE#
ent . put ( ) #NEWLINE#
s = 'foo#SPACE#bar#SPACE#foo#SPACE#bar#SPACE#foo#SPACE#bar' #NEWLINE# re . sub ( '\\b(.+)\\s+\\1\\b' , '\\1' , s ) #NEWLINE#
print ( '2.#SPACE#Process#SPACE#id:#SPACE#' , os . getpid ( ) ) #NEWLINE#
dis . dis ( test ) #NEWLINE#
postData = soup . find_all ( 'dd' ) #NEWLINE#
fig . add_axes ( ax ) #NEWLINE#
num_overlap = sum ( map ( all , zip ( list1 , list2 ) ) ) #NEWLINE#
return dt . strftime ( '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
ast . literal_eval ( '["a",#SPACE#"b",#SPACE#"c"]' ) #NEWLINE#
print ( Kerma ( ) ) #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
p = subprocess . Popen ( inputcommand , stdout = subprocess . PIPE , shell = True ) #NEWLINE#
offset = now . strftime ( '%z' ) #NEWLINE#
dy = RK4 ( lambda t , y : t * sqrt ( y ) ) #NEWLINE#
qstring = webapp2 . request . query_string #NEWLINE#
return '' . join ( random . choice ( letters ) for i in range ( int ( length ) ) ) #NEWLINE#
ax2 . plot ( list ( range ( 10 ) ) ) #NEWLINE#
[ [ 1 , 2 , 3 ] ] #NEWLINE#
point_buffer = np . array ( point_list ) #NEWLINE#
return other ( self . function ( * args , ** kwargs ) ) #NEWLINE#
print ( f ( [ 1 , 2 , 3 ] , 4 ) ) #NEWLINE#
user_id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
print ( list ( range ( math . floor ( min ( y ) ) , math . ceil ( max ( y ) ) + 1 ) ) ) #NEWLINE#
df #NEWLINE#
print ( map ( lambda x : x [ : - 1 ] , test ) ) #NEWLINE#
max ( d , key = lambda k : d [ k ] [ 'c' ] + d [ k ] [ 'h' ] ) #NEWLINE#
l = [ 'f' , 'g' ] #NEWLINE#
ax . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
file_handle = open ( 'filename.xml' , 'wb' ) #NEWLINE#
dict . __setitem__ ( self , key , value ) #NEWLINE#
g [ 1 ] . nunique ( ) #NEWLINE#
q = mp . Queue ( ) #NEWLINE#
HttpResponseRedirect ( request . path ) #NEWLINE#
df1 = df . ix [ : , 0 : 12 ] #NEWLINE#
'2012-06-23#SPACE#03:09:13.23' , 4323584 , - 1.911224 , - 0.4657288 , - 0.1166382 , - 0.24823 , 0.256485 , 'NAN' , - 0.3489428 , - 0.130449 , - 0.2440527 , - 0.2942413 , 0.04944348 , 0.4337797 , - 1.105218 , - 1.201882 , - 0.5962594 , - 0.586636 #NEWLINE#
print ( m . group ( 1 ) , '*' , m . group ( 0 ) ) #NEWLINE#
return True #NEWLINE#
Config . set ( 'mysql' , 'user' , 'root' ) #NEWLINE#
Config . set ( 'mysql' , 'passwd' , 'my#SPACE#secret#SPACE#password' ) #NEWLINE#
Config . set ( 'mysql' , 'db' , 'write-math' ) #NEWLINE#
ws . cell ( '%s%s' % ( col , row ) ) . value = '%s%s' % ( col , row ) #NEWLINE#
url = 'no.scheme.com/math/12345.png' #NEWLINE#
STATICFILES_DIRS = 'static' , #NEWLINE#
foo ( [ 1 , 2 , 3 ] ) #NEWLINE#
repo . stage ( [ 'other1.txt' , 'other2.txt' ] ) #NEWLINE#
from mysite . polls . models import Poll , Choice #NEWLINE#
plt . fill_between ( X , Y1 , Y3 , color = 'y' , alpha = 0.5 ) #NEWLINE#
print ( [ i for i in re . split ( '(?:\\|[^:]*:.*?\\|(?:[\\s;]+|$))+' , x ) if i ] ) #NEWLINE#
os . fstat ( f . fileno ( ) ) . st_nlink #NEWLINE#
logger . addHandler ( handler ) #NEWLINE#
foo . __dict__ [ 'a' ] = a #NEWLINE#
le . setStyleSheet ( 'border:#SPACE#1px#SPACE#solid#SPACE#red;' ) #NEWLINE#
thumb = ImageOps . fit ( image , size , Image . ANTIALIAS ) #NEWLINE#
df . sort_values ( [ 'col1' , 'col2' ] , inplace = True ) #NEWLINE#
people . update ( { '_id' : doc [ id ] } , { '$pull' : { 'info' : None } } ) #NEWLINE#
m = [ [ 1.1 , 2.1 , 3.1 ] , [ 4.1 , 5.1 , 6.1 ] , [ 7.1 , 8.1 , 9.1 ] ] #NEWLINE# file . write ( str ( m ) ) #NEWLINE#
s [ 'a' : 'c' ] #NEWLINE#
sheet . write ( 1 , 0 , 1 ) #NEWLINE# sheet . write ( 1 , 1 , 2 ) #NEWLINE#
set ( frozenset ( ts ) for ts in x ) #NEWLINE#
first_set = set ( map ( tuple , first_list ) ) #NEWLINE#
data = [ map ( int , line . split ( ) ) for line in f ] #NEWLINE#
[ ( a , b , c ) for a in range ( 10 ) for b in range ( a , 10 ) for c in range ( b , 10 ) ] #NEWLINE#
'a' in s . unique ( ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( my_list ) #NEWLINE#
return json . dumps ( lst ) #NEWLINE#
from django . http import HttpResponse #NEWLINE#
print ( ( filename , oct ( mode ) ) ) #NEWLINE#
df . index = df . index . values + df . RecordID . map ( str ) #NEWLINE#
reader = csv . reader ( csvfile , delimiter = ',' ) #NEWLINE#
main ( ) #NEWLINE#
root . remove ( child ) #NEWLINE#
btn_1 . focus_set ( ) #NEWLINE#
ordered = sorted ( Foo . objects . all ( ) , key = lambda n : ( n [ 0 ] , int ( n [ 1 : ] ) ) ) #NEWLINE#
a [ a > 2 ] #NEWLINE#
line_3 = Line2D ( [ 0 , 7 ] , [ 0 , 1 ] , linewidth = 1 , linestyle = '-' , color = 'brown' ) #NEWLINE#
return float ( str ( x ) [ : i ] ) #NEWLINE#
a [ slice ( 1 , None ) ] = [ 4 , 5 ] #NEWLINE#
plt . figure ( 2 ) #NEWLINE#
msgunfmt [ path_to_file . mo ] > [ path_to_file . po ] #NEWLINE#
extruded = np . zeros ( ( N , 10 , 10 ) ) #NEWLINE#
left_df . merge ( right_df , on = 'join' , suffixes = ( '_l' , '_r' ) ) #NEWLINE#
cv2 . convertScaleAbs ( image , result , alpha , beta ) #NEWLINE#
alice . toys . append ( 'lego#SPACE#bricks' ) #NEWLINE#
df1 = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
Base2 . query = db_session . query_property ( ) #NEWLINE#
A . foo ( a ) #NEWLINE#
rx = re . compile ( '(\\d[\\d,]{2,})#SPACE#lbs' ) #NEWLINE#
return self . retrieve ( request , * args , ** kwargs ) #NEWLINE#
ax . quiver ( X , Y , Z , U , V , W ) #NEWLINE#
c . executemany ( 'insert#SPACE#into#SPACE#stocks#SPACE#values#SPACE#(?,?,?,?,?)' , rows ) #NEWLINE#
luckynumbers . append ( item ) #NEWLINE#
x /= np . sqrt ( ( x ** 2 ) . mean ( ) ) #NEWLINE#
print ( unicode_row ) #NEWLINE#
return Py_BuildValue ( 'c' , 'B' ) #NEWLINE#
print ( 'Exiting.....' ) #NEWLINE#
soapaction = 'http://web.cbr.ru/GetCursOnDate' #NEWLINE#
y = [ p [ 1 ] for p in points ] #NEWLINE#
root . update ( ) #NEWLINE#
urllib . request . urlretrieve ( file , 'test.xlsx' ) #NEWLINE#
t . close ( ) #NEWLINE#
fig = plt . figure ( figsize = ( 8 , 8 ) ) #NEWLINE#
ind = np . indices ( ( len ( arr ) , ) ) . reshape ( ( len ( arr ) , 1 ) ) #NEWLINE#
print ( map ( str , rr ) ) #NEWLINE#
df . groupby ( 'col1' ) [ 'col2' ] . apply ( lambda x : x . tolist ( ) ) . to_dict ( ) #NEWLINE# { 'A' : [ 0 , 1 ] , 'B' : [ 2 ] , 'C' : [ 3 ] } #NEWLINE#
super ( B , cls ) . do_your_stuff ( ) #NEWLINE#
yourFile . write ( raw_data ) #NEWLINE#
( a [ 1 ] , b [ 1 ] ) , #NEWLINE#
print ( '{}#SPACE#{}#SPACE#{}' . format ( string [ 1 ] , dictionary [ string [ 0 ] ] , string [ 2 ] ) ) #NEWLINE#
__acl__ = [ ( Deny , Everyone , 'view' ) , ( Allow , 'group:admin' , 'view' ) ] #NEWLINE#
f ( 2 ) #NEWLINE#
user = models . OneToOneField ( User ) #NEWLINE#
plt . title ( 'title' ) #NEWLINE#
plt . style . use ( 'ggplot' ) #NEWLINE#
array [ 0 ] , #NEWLINE#
print ( xyz . __doc__ ) #NEWLINE#
plt . colorbar ( pc , ax = axes ) #NEWLINE#
plt . xticks ( x , labels ) #NEWLINE#
d . setdefault ( a , [ ] ) . append ( b ) #NEWLINE#
e / e . sum ( axis = 1 ) [ : , ( None ) ] #NEWLINE#
clf . tree_ . apply ( np . asfortranarray ( X . astype ( sklearn . tree . _tree . DTYPE ) ) ) #NEWLINE#
pythoncom . CoInitialize ( ) #NEWLINE#
sys . path . append ( '/var/www/cloudloon/horizon' ) #NEWLINE#
ax . plot ( x , 0.5 * ( 5 * x ** 3 - 3 * x ) , color = 'blue' , ls = ':' , label = '$P_3(x)$' ) #NEWLINE#
form . category . data = post . category . id if page . category else 0 #NEWLINE#
np . diff ( np . array ( s ) ) #NEWLINE#
print ( is_html ( '<p>Hello#SPACE#World!</p>' ) ) #NEWLINE#
df . set_index ( [ 'user' , cc ] ) [ 'value' ] . unstack ( ) #NEWLINE#
np . allclose ( a . indices , b . indices ) #NEWLINE#
weightedAvg ( ( ( a1 , 0.3 ) , ( bb , 0.7 ) ) ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
print ( sp . solvers . solve ( ( f1 , f2 , f3 , f4 ) , ( x , y , z , w ) ) ) #NEWLINE#
self . conn . close ( ) #NEWLINE#
bp . output_notebook ( ) #NEWLINE#
imgplot = plt . pcolormesh ( lum_img ) #NEWLINE#
model . add ( Dense ( 2 , init = 'uniform' ) ) #NEWLINE#
df . set_index ( [ 'TimeStamp' , 'Symbol' ] ) . sortlevel ( 0 ) . to_panel ( ) #NEWLINE#
proc . append ( p ) #NEWLINE#
return render ( request , 'types.html' , { 'types' : 'types' } ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
print ( ( 'Game' , str ( count ) ) ) #NEWLINE#
ax . bar ( dates , values , width = 100 ) #NEWLINE#
data = 'UTF-8#SPACE#DATA' #NEWLINE# udata = data . decode ( 'utf-8' ) #NEWLINE# asciidata = udata . encode ( 'ascii' , 'ignore' ) #NEWLINE#
app . config [ 'REDIS_URL' ] = 'redis://localhost' #NEWLINE#
ui . WebDriverWait ( browser , 10 ) . until ( waiter ) #NEWLINE#
logger = logging . getLogger ( '__name__' ) #NEWLINE#
df . to_records ( ) #NEWLINE#
show ( ) #NEWLINE#
contestant = models . ForeignKey ( Contestant ) #NEWLINE#
container . pack ( fill = 'both' , expand = True ) #NEWLINE#
link . retrbinary ( 'RETR#SPACE#' + filename , downloaded . write ) #NEWLINE#
print ( solve ( eqn ) ) #NEWLINE#
pd . Series ( list ( df [ 'sales' ] ) ) . iloc [ sort_by_last_digit ( df [ 'sales' ] ) ] #NEWLINE#
collection . find ( { } , limit = 10 ) . sort ( sort ) #NEWLINE#
c = a * b [ : , ( None ) ] #NEWLINE#
a = np . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE#
win . setWindowFlags ( win . windowFlags ( ) & ~ QtCore . Qt . WindowMaximizeButtonHint ) #NEWLINE#
init_new_vars_op = tf . initialize_variables ( uninitialized_vars ) #NEWLINE#
user = OneToOneField ( User , related_name = 'profile' ) #NEWLINE#
__import__ ( moduleName , globals ( ) , locals ( ) , [ '*' ] ) #NEWLINE#
os . makedirs ( myTemp ) #NEWLINE#
opener = urllib . request . build_opener ( authhandler ) #NEWLINE#
df = df [ ~ df [ 'str_name' ] . str . contains ( 'c' ) ] #NEWLINE# df #NEWLINE#
f . bar ( ) #NEWLINE#
logging . getLogger ( ) . setLevel ( logging . DEBUG ) #NEWLINE#
print ( list ( Squares ( 20 , 90 ) ) ) #NEWLINE#
int . from_bytes ( 'ÿ\x00' , 'big' ) #NEWLINE#
print ( 'You#SPACE#Won!' ) #NEWLINE#
print ( profile [ 'ranking' ] , profile [ 'rankingText' ] ) #NEWLINE#
{ ( 1 ) : '111' , '2' : 6 } #NEWLINE#
self . ax . autoscale_view ( ) #NEWLINE#
conn = psycopg2 . connect ( 'host=localhost4#SPACE#port=5432#SPACE#dbname=cpn' ) #NEWLINE#
frame = wx . Frame ( None , wx . ID_ANY , title = 'Hover#SPACE#effect' ) #NEWLINE#
( 1 , 2 , 3 , 4 ) , #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
a = [ 1 , 2 , 7 ] #NEWLINE#
numpy . array ( ( 1 , 2 ) ) + numpy . array ( ( 3 , 4 ) ) #NEWLINE#
increment = int ( input ( 'Increase#SPACE#>#SPACE#' ) ) #NEWLINE#
lst = [ 'A' , '1' , '2' , 'B' , '1' , 'C' , 'D' , '4' , '1' , '4' , '5' , 'Z' , 'D' ] #NEWLINE#
y = tf . slice ( x , i , [ 1 ] ) #NEWLINE#
signal . alarm ( 0 ) #NEWLINE#
authorization = authorization . Authorization ( ) #NEWLINE#
ax . legend ( handles , labels , loc = 2 , ncol = 4 ) #NEWLINE#
inset . yaxis . set_tick_params ( labelsize = INSET_TICK_FONTSIZE ) #NEWLINE#
print ( s . strip ( punctuation ) ) #NEWLINE#
P = multiprocessing . Pool ( ) #NEWLINE#
self . draw_grid ( ) #NEWLINE#
[ '1' , '2' ] #NEWLINE#
pygame . init ( ) #NEWLINE#
print ( str ( item ) + '<br>' ) #NEWLINE#
divide ( 2 , 7 , 1000 ) #NEWLINE#
ind2 = pd . Index ( [ 3 , 4 , 5 ] ) #NEWLINE#
plt . imshow ( im , cmap = cm . gray ) #NEWLINE#
run_thread . start ( ) #NEWLINE#
sess = tf . Session ( config = config ) #NEWLINE#
all ( x == s [ 0 ] for x in s ) #NEWLINE#
tag . replaceWith ( '' ) #NEWLINE#
from flask import request #NEWLINE#
np . count_nonzero ( df . isnull ( ) . values ) #NEWLINE#
print ( 'How#SPACE#old#SPACE#do#SPACE#you#SPACE#thing#SPACE#Fred#SPACE#the#SPACE#Chicken#SPACE#is?' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
np . array ( sorted ( a , cmp = lambda x , y : list ( x ) . index ( 1 ) - list ( y ) . index ( 1 ) ) ) #NEWLINE#
zip ( zip ( * a ) , zip ( * b ) ) [ 0 ] #NEWLINE#
repr ( any ( item . startswith ( 'Derived:' ) for item in para ) ) #NEWLINE#
meg . add_argument ( '-n' , '--name' , nargs = '+' ) #NEWLINE#
cs = plt . contourf ( x , y , z , levels = [ 2 , 3 , 4 , 6 ] ) #NEWLINE#
return "%s({'a':1,#SPACE#'b':2#SPACE#})" % _GET_PARAMS ( 'callback' ) #NEWLINE#
datetime . strptime ( '2008-09-26T01:51:42.000Z' , date_format ) #NEWLINE#
wx . Menu . __init__ ( self ) #NEWLINE#
im = cv2 . imread ( filename ) #NEWLINE#
value = test [ 2 ] #NEWLINE#
strs = 'C:\\Users\\Josh\\Desktop\\20130216' #NEWLINE#
b = copy . deepcopy ( a ) #NEWLINE#
print ( 'out#SPACE#=#SPACE#%s' % out_file ) #NEWLINE#
return '%02Xh' % n #NEWLINE#
c . append ( list ( el ) ) #NEWLINE#
lst . append ( ')' ) #NEWLINE#
toggle_btn = tk . Button ( text = 'Toggle' , width = 12 , relief = 'raised' ) #NEWLINE#
globals ( ) [ tupleofnames [ i ] ] = data [ i ] #NEWLINE#
i = int ( input ( '>>#SPACE#' ) ) #NEWLINE# print ( 'Okay#SPACE#the#SPACE#numbers#SPACE#set#SPACE#is#SPACE#now:#SPACE#' , numbers ) #NEWLINE#
session . sendmail ( sender , recipient , headers + '\r\n\r\n' + body ) #NEWLINE#
f ( ) #NEWLINE#
im = Image . open ( 'myImageFile.jpg' ) #NEWLINE#
print ( df . groupby ( df [ 'date' ] . values . astype ( '<M8[h]' ) ) . Item . unique ( ) ) #NEWLINE#
date += datetime . timedelta ( days = 2 ) #NEWLINE#
message . send ( ) #NEWLINE#
Py_DECREF ( name ) #NEWLINE#
print ( 'Usage:#SPACE#twistd#SPACE#-y#SPACE#%s' % sys . argv [ 0 ] ) #NEWLINE#
axes [ 0 , 0 ] . plot ( x , y , 'ko' ) #NEWLINE#
rows . append ( row ) #NEWLINE#
print ( w . cget ( item ) ) #NEWLINE#
return render_to_response ( 'results.html' , { 'data' : sorted ( results_dict . #NEWLINE# items ( ) ) } ) #NEWLINE#
for filename in os . listdir ( directory ) : #NEWLINE# #INDENT# if filename . endswith ( '.asm' ) or filename . endswith ( '.py' ) : #NEWLINE# #INDENT# #INDENT# continue #NEWLINE# else : #NEWLINE# #INDENT# continue #NEWLINE#
( 'hammer' , 2 ) , ( 'screwdriver' , 4 ) , ( 'pillow' , 5 ) #NEWLINE#
file_list . append ( ( os . stat ( filename ) [ stat . ST_MTIME ] , filename ) ) #NEWLINE#
self . driver . get ( response . url ) #NEWLINE#
print ( ( 'Prediction#SPACE#=#SPACE#' , clf . predict ( predict_ ) ) ) #NEWLINE#
rpar = Literal ( ')' ) #NEWLINE#
gdb . execute ( 'file#SPACE#/bin/cat' ) #NEWLINE#
self . pot . Boil ( ) #NEWLINE#
ax . update_datalim ( np . column_stack ( [ x , y ] ) ) #NEWLINE#
print ( icon_info . get_filename ( ) ) #NEWLINE#
my_rhs = [ 1.0 , 1.0 , 0.0 , 0.0 , 0.0 , - 1.0 , - 1.0 , - 1.0 , 0.0 , 0.0 , 0.0 ] #NEWLINE#
r = re . compile ( '(a?[^a]+)' ) #NEWLINE#
content = urllib . request . urlopen ( some_url ) . read ( ) #NEWLINE#
window . activateWindow ( ) #NEWLINE#
sys . stdout = stdout #NEWLINE#
"""wE9mg9pu2KSmp5lh""" #NEWLINE#
round ( 2.99999999999 ) #NEWLINE#
list_of_tuples = [ ( 1 , 2 ) , ( 4 , 5 ) ] #NEWLINE# map ( list , list_of_tuples ) #NEWLINE#
ax . set_ylim ( 0 , 2 ) #NEWLINE#
draw . text ( ( 10 , 10 ) , 'hello' , font = font ) #NEWLINE#
qmgr . connectTCPClient ( queue_manager , pymqi . cd ( ) , channel , conn_info ) #NEWLINE#
assert np . allclose ( results [ 2 ] , results [ 0 ] ) #NEWLINE#
pickle . dump ( dict3 , fp ) #NEWLINE#
np . count_nonzero ( ( abcd <= data2a ) & ( abcd >= data2b ) ) #NEWLINE#
response . read ( ) #NEWLINE#
return Response ( body , status = status , headers = headers ) #NEWLINE#
f . readline ( ) #NEWLINE#
conn . retrbinary ( 'stuff' , myfile ) #NEWLINE#
big_df [ ~ big_df [ 'User#SPACE#Name' ] . str . endswith ( ( 'DA' , 'PL' ) ) ] #NEWLINE#
datetime . now ( ) - datetime . combine ( bday , time ( ) ) #NEWLINE#
cv . fit ( X , y ) #NEWLINE#
output = re . sub ( 'a{3,}' , 'aa' , input ) #NEWLINE#
print ( glob . glob ( '*.csv' ) ) #NEWLINE#
Index = next ( i for i , _ in enumerate ( a ) if np . isclose ( _ , val , tol ) ) #NEWLINE#
df = df . reindex ( pd . date_range ( '2011-01-01' , '2011-10-31' ) , fill_value = 'NaN' ) #NEWLINE# df . to_csv ( 'test.csv' ) #NEWLINE#
np . random . seed ( 1977 ) #NEWLINE#
a = [ '123' , '456' ] [ b == True ] #NEWLINE#
test3filehandle . write ( 'Line#SPACE#Number:' + str ( k ) + '#SPACE#' ) #NEWLINE#
return ser . sum ( ) #NEWLINE#
im . save ( fp , 'JPEG' ) #NEWLINE#
p . sprintf ( '%TCP.flags%' ) #NEWLINE#
regexString = '(?<=#SPACE#=#SPACE#")' + re . escape ( original ) + '(?=")' #NEWLINE#
plt . close ( fig ) #NEWLINE#
max ( a , b ) #NEWLINE#
print ( [ x for x in groups if a not in x ] ) #NEWLINE#
elements . append ( q . get_nowait ( ) ) #NEWLINE#
set_breakpoint ( 'mycode0' ) #NEWLINE#
pass #NEWLINE#
{ { field } } #NEWLINE#
print ( '\n' . join ( textwrap . wrap ( 'This#SPACE#is#SPACE#my#SPACE#sooo#SPACE#long#SPACE#title' , 10 ) ) ) #NEWLINE#
msg = email . message_from_string ( data [ 0 ] [ 1 ] ) #NEWLINE#
{ 'd' : [ 3 , 2 ] } #NEWLINE#
p . stdin . write ( input ) #NEWLINE#
assert f ( [ [ 0 , 100 ] , [ 4 , 20 ] , [ 30 , 35 ] , [ 30 , 78 ] ] ) == [ [ 4 , 20 ] , [ 30 , 35 ] ] #NEWLINE#
queue . get_messages ( attributes = [ 'All' ] ) #NEWLINE#
f . seek ( o + 1 ) #NEWLINE#
super ( MyApp , self ) . __init__ ( args ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
ctx . pop ( ) #NEWLINE#
print ( b [ : , : , ( 2 ) ] ) #NEWLINE#
subprocess . check_call ( [ 'scp' , 'server:file' , 'file' ] ) #NEWLINE#
a = a . __iand__ ( b ) #NEWLINE#
df . A . combine_first ( df . B ) #NEWLINE#
print ( '__del__()#SPACE#called.' ) #NEWLINE#
print ( '__enter__()#SPACE#called.' ) #NEWLINE#
print ( '__exit__()#SPACE#called.' ) #NEWLINE#
print ( 'close()#SPACE#called.' ) #NEWLINE#
print ( 'test()#SPACE#called.' ) #NEWLINE#
print ( 'with#SPACE#block#SPACE#begin???' ) #NEWLINE#
print ( 'with#SPACE#block#SPACE#end???' ) #NEWLINE#
df . loc [ df [ 1 : ] [ df . index . month [ : - 1 ] != df . index . month [ 1 : ] ] . index ] #NEWLINE#
elem = driver . find_element_by_name ( 'ctl00$ContentPlaceHolderMain$ddYear' ) #NEWLINE#
elem = driver . find_element_by_name ( 'ctl00$ContentPlaceHolderMain$txtSearch' ) #NEWLINE#
return m . swapaxes ( 0 , 2 ) [ : : - 1 , : , : ] #NEWLINE#
np . argsort ( p ) #NEWLINE#
func ( 'All#SPACE#defaults' , a = None , b = False , c = '' , d = 0 ) #NEWLINE#
d [ 'P' ] #NEWLINE#
p . add_argument ( 'd' ) #NEWLINE#
stream_handler . setFormatter ( formatter ) #NEWLINE#
words = input_string . split ( ) #NEWLINE#
df . apply ( lambda x : len ( set ( x ) ) == 1 , axis = 1 ) #NEWLINE#
seq . sort ( key = itemgetter ( 1 ) ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
'This' , 'is' , 'a' , 'quote' , 'from' , 'JFK' , 'who' , 'is' , 'a' , 'former' #NEWLINE#
response = requests . get ( url , data = data ) #NEWLINE#
plt . fill_between ( [ 0 , 1 ] , [ 0 , 1 ] , hatch = 'X' , linewidth = 0.0 , alpha = 0.0 ) #NEWLINE#
f = float ( '3.14159' ) #NEWLINE#
return False #NEWLINE#
return render_to_response ( 'image.html' , variables ) #NEWLINE#
json_data_string = simplejson . dumps ( your_data ) #NEWLINE#
print ( 'no#SPACE#other#SPACE#instance#SPACE#is#SPACE#running' ) #NEWLINE#
return GEN_CLOSED #NEWLINE#
counts_df = pd . DataFrame ( df . groupby ( 'col1' ) . size ( ) . rename ( 'counts' ) ) #NEWLINE#
_async_raise ( self . _get_my_tid ( ) , exctype ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
pd . isnull ( df ) . sum ( ) > 0 #NEWLINE#
os . chdir ( cwd_path [ 0 ] ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
fig1 . savefig ( 'fig1.png' , dpi = 300 ) #NEWLINE#
fillmylist ( l , 5 ) #NEWLINE#
pass #NEWLINE#
dv . fit_transform ( df . to_dict ( orient = 'records' ) ) #NEWLINE#
frame . Show ( ) #NEWLINE#
self . admin_model_path = self . model . __name__ . lower ( ) #NEWLINE#
natural_sort_key ( '100A' ) #NEWLINE#
self . video_cap . release ( ) #NEWLINE#
plt . title ( 'Random#SPACE#Figure' ) #NEWLINE#
print ( device_props . Get ( 'org.freedesktop.UDisks.Device' , 'DeviceMountPaths' ) ) #NEWLINE#
print ( device_props . Get ( 'org.freedesktop.UDisks.Device' , 'DriveSerial' ) ) #NEWLINE#
result_dict = { k : list ( g ) for k , g in it . groupby ( mylist , keyfunc ) } #NEWLINE#
req . content_type = 'text/html' #NEWLINE#
dict ( [ x for x in list ( data . items ( ) ) if x [ 0 ] > 5 ] ) #NEWLINE#
df [ list ( 'ABCD' ) ] = df [ list ( 'ABCD' ) ] . astype ( int ) #NEWLINE#
print ( f ( 2 ) ) #NEWLINE#
self . response . out . write ( row [ 2 ] ) #NEWLINE#
def get_name ( ) : #NEWLINE# #INDENT# return 'world' #NEWLINE#
aapl . sign . iloc [ ( aapl . sign . diff ( ) != 0 ) . cumsum ( ) . drop_duplicates ( ) . index ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( ( 'Closing#SPACE#connection#SPACE#to#SPACE#' , s . getpeername ( ) ) ) #NEWLINE#
df [ 'block' ] = ( df . A . shift ( 1 ) != df . A ) . astype ( int ) . cumsum ( ) #NEWLINE#
writer . writerow ( [ 'foo' , 'foo,bar' , 'bar' ] ) #NEWLINE#
print ( 'helloooooo' ) #NEWLINE#
xyzzy . schedule ( 'd4:30pm' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
gettext . install ( '' ) #NEWLINE#
a [ np . meshgrid ( n1 , n2 , sparse = True , indexing = 'ij' ) ] #NEWLINE#
im . save ( memf , 'JPEG' ) #NEWLINE#
chars_to_remove = [ '.' , '!' , '?' ] #NEWLINE#
d [ x ] . append ( foo ) #NEWLINE#
f . close ( ) #NEWLINE#
nofrag_dt = datetime . datetime . strptime ( nofrag , '%Y-%m-%dT%H:%M:%S' ) #NEWLINE#
undoicon = QIcon . fromTheme ( 'edit-undo' ) #NEWLINE#
ax1 . scatter ( theta . flatten ( ) , r . flatten ( ) , c = z . flatten ( ) ) #NEWLINE#
l = [ 'perfect' , 'data1' , 'queryda873' , 'server187' , 'tuplip91' , 'time' ] #NEWLINE#
myarray [ 0 ] [ - 1 ] #NEWLINE#
mlab . plot3d ( [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 1500 ] , color = black , tube_radius = 10.0 ) #NEWLINE#
self . pack ( ) #NEWLINE#
msg . append ( model . __class__ . __name__ + '.<db.put>' ) #NEWLINE#
ax . set_ylim ( 0 , np . pi ) #NEWLINE#
return '#SPACE#' . join ( [ word [ : : - 1 ] for word in shifted_words ] ) #NEWLINE#
ax . tick_params ( axis = 'x' , which = 'minor' , direction = 'out' , length = 30 ) #NEWLINE#
setattr ( self , field . attname , getattr ( db_instance , field . attname ) ) #NEWLINE#
df . columns = [ c . replace ( '##SPACE#' , '' ) for c in df . columns ] #NEWLINE#
d = defaultdict ( list ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) ) #NEWLINE#
df . sort ( [ 'SectionStart' , 'SectionStop' ] , ascending = True , inplace = True ) #NEWLINE#
property_list = [ 'one' , 'one' , 'two' ] #NEWLINE#
- bottleneck . partsort ( - a , 10 ) [ : 10 ] #NEWLINE#
from rk4 import rk4 #NEWLINE#
np . cov ( np . nan_to_num ( data . T ) ) #NEWLINE#
return self . filter ( id__in = ids ) #NEWLINE#
ridx = sorted ( range ( len ( U ) ) , key = idx . __getitem__ ) #NEWLINE#
d = pd . DataFrame ( ) #NEWLINE#
settings [ 'libraries' ] . append ( 'iodbc' ) #NEWLINE#
current_time = start_time = time . time ( ) #NEWLINE#
plt . plot ( x2 , y2 , 'o' , label = 'second' , markersize = np . sqrt ( 35.0 ) , c = 'r' ) #NEWLINE#
matchOCR ( 'Ro?co?er' , '?flc?pt?' ) #NEWLINE#
print ( 'At#SPACE#least#SPACE#one#SPACE#thread#SPACE#is#SPACE#done' ) #NEWLINE#
f . close ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return '%0.*f' % ( Precision , FloatNumber ) #NEWLINE#
path = 'projectname.common.credential.CredentialCache.mymethodname' #NEWLINE#
subprocess . call ( 'net#SPACE#use#SPACE#Y:#SPACE#\\\\live.sysinternals.com\\tools' ) #NEWLINE# print ( get_connection ( 'Y:' ) ) #NEWLINE#
print ( ( 'Object' , obj . name , 'custom#SPACE#properties:' ) ) #NEWLINE#
testfile . retrieve ( 'http://exmaple.com/file.txt' , 'file.txt' ) #NEWLINE#
my_exec ( '1+1' ) #NEWLINE#
item = relationship ( Items , backref = 'attributes' ) #NEWLINE#
super ( ExampleForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
logger = logging . getLogger ( 'myLog' ) #NEWLINE#
lots ( ) #NEWLINE#
return '\n' . join ( all_read_text . splitlines ( ) [ - total_lines_wanted : ] ) #NEWLINE#
df3 = df3 [ ~ df3 . index . duplicated ( keep = 'first' ) ] #NEWLINE#
raise ImportError ( 'requires#SPACE#ternary#SPACE#support' ) #NEWLINE#
r_pixels = np . zeros ( image_size , dtype = np . uint8 ) #NEWLINE#
df = DataFrame ( randn ( 10 , 2 ) , columns = list ( 'ab' ) ) #NEWLINE# df #NEWLINE#
canvas . draw ( ) #NEWLINE#
clean_table_grouped = clean_table_grouped . drop ( [ 'FOR' ] , axis = 1 , level = 0 ) #NEWLINE#
x = np . fromiter ( record [ 'feature1' ] ) #NEWLINE#
LOGIN_REDIRECT_URL = 'user_profile' #NEWLINE#
"""""" . join ( takewhile ( str . isdigit , input ) ) #NEWLINE#
with_id . where ( col ( '_id' ) == i ) . drop ( '_id' ) #NEWLINE#
[ rect . set_visible ( False ) for rect in rects ] #NEWLINE#
irc = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
"""find#SPACE#all#SPACE#rows#SPACE#that#SPACE#are#SPACE#purely#SPACE#white""" #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
df [ df [ 'A' ] . astype ( str ) . str . isdigit ( ) ] #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
parser = argparse . ArgumentParser ( description = func . __doc__ ) #NEWLINE#
a [ 0 ] , a [ 1 ] = [ 4 , 5 ] #NEWLINE#
plt . colorbar ( cax = cax ) #NEWLINE#
datetime . datetime ( 2001 , 11 , 12 , 0 , 0 ) #NEWLINE#
print ( 'Incorrect!' ) #NEWLINE#
signal . pause ( ) #NEWLINE#
numpy . zeros ( ( 2 , 20 ) ) #NEWLINE#
print ( self . myVar ) #NEWLINE#
in_file . close ( ) #NEWLINE#
files = [ file for file in glob . glob ( PATH + '/*/**/*.txt' , recursive = True ) ] #NEWLINE#
inithello ( ) #NEWLINE#
print ( data ) #NEWLINE#
windowSurface . blit ( s , ( 0 , 0 ) ) #NEWLINE#
cv2 . imshow ( 'Matched#SPACE#Features' , out ) #NEWLINE#
GST_VERSION_MINOR , #NEWLINE#
self . log_message ( '"%s"#SPACE#%s#SPACE#%s' , self . requestline , str ( code ) , str ( size ) ) #NEWLINE#
return self . _data [ key ] #NEWLINE#
array ( [ [ 0 , 2 , 8 ] , [ 2 , 0 , 2 ] , [ 8 , 2 , 0 ] ] , dtype = int32 ) #NEWLINE#
with open ( 'input.txt' ) as infile : #NEWLINE# #INDENT# matrix = [ line . rstrip ( ) for line in infile ] #NEWLINE#
result = np . cumsum ( np . random . uniform ( size = 100 ) ) #NEWLINE#
nx . shortest_path_length ( W , '394.1' , '341.33' , weight = 'rel' ) #NEWLINE#
page = urllib . request . urlopen ( 'your#SPACE#path#SPACE#' ) . read ( ) #NEWLINE#
c = boto . connect_s3 ( ) #NEWLINE#
ds = gdal . Open ( 'path/to/file' ) #NEWLINE#
level1 , level2 , level3 = { } , { } , { } #NEWLINE#
[ memoized ( x ) for x in l if memoized ( x ) ] #NEWLINE#
for key , value in sorted ( list ( d . items ( ) ) , key = lambda x : random . random ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
random_obj = Model . objects . all ( ) [ random_idx ] #NEWLINE#
self . d [ key ] = max ( self . d [ key ] , n ) #NEWLINE#
pd . Series ( y_ax , index = x_ax ) . plot ( kind = 'bar' , ax = axs [ i ] ) #NEWLINE#
Decimal ( '0.0000000000' ) #NEWLINE#
ax . set_rasterization_zorder ( 0 ) #NEWLINE#
result = eval ( myString ) #NEWLINE#
py . CallMethod ( 'somemethod' ) #NEWLINE#
len ( set ( str_ . split ( ) ) . intersection ( list ( dict_1 . values ( ) ) ) ) #NEWLINE#
tag . findNextSibling ( text = None ) #NEWLINE#
client . GET ( '/' , auth = 'user' ) . responds_html ( ) #NEWLINE#
l = [ [ 0 , 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 , 9 ] , [ 10 , 11 , 12 , 13 , 14 ] ] #NEWLINE#
today = datetime . datetime . now ( ) #NEWLINE#
self . assertIn ( '<html>' , response . content ) #NEWLINE#
m . click ( x , y , 1 ) #NEWLINE#
date = dateutil . parser . parse ( text ) #NEWLINE#
( arr * area_cell ) . reshape ( m // 2 , 2 , n // 2 , 2 ) . mean ( axis = ( 1 , 3 ) ) #NEWLINE#
dc . SetBackground ( wx . Brush ( wx . Colour ( 255 , 0 , 255 ) ) ) #NEWLINE#
open ( 'hello.dot' , 'w' ) . write ( 'digraph#SPACE#G#SPACE#{Hello->World}' ) #NEWLINE#
print ( ( 'c:' , c ) ) #NEWLINE#
myapp . db . create_all ( ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ] , #NEWLINE#
headers = { 'Content-Type' : 'application/xml' } #NEWLINE#
bar = p [ 0 ] #NEWLINE#
data = np . random . randint ( 0 , 100 , ( 400000.0 , 206 ) ) #NEWLINE#
sort_order = [ 'red' , 'blue' , 'green' , 'alpha' ] #NEWLINE#
b . grab_set ( ) #NEWLINE#
layout . addWidget ( self . view ) #NEWLINE#
MB_HELP = 16384 #NEWLINE#
frame . a . str . contains ( pattern ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
df . applymap ( atof ) #NEWLINE#
n = a . shape [ 1 ] #NEWLINE#
ax . scatter ( [ x_ ] , [ y_ ] , label = label , picker = 3 ) #NEWLINE#
info [ 0 ] [ 1 ] == 2 #NEWLINE#
ax1 . patch . set_alpha ( 0.0 ) #NEWLINE#
db . add_son_manipulator ( Transform ( ) ) #NEWLINE#
req . add_header ( 'User-agent' , 'MyUserAgent' ) #NEWLINE#
return ( coord [ 0 ] - x ) ** 2 + ( coord [ 1 ] - y ) ** 2 - r ** 2 #NEWLINE#
windll . kernel32 . CloseHandle ( process_handle ) #NEWLINE#
wnd . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
w . show_all ( ) #NEWLINE# Gtk . main ( ) #NEWLINE#
dicts = [ { k : v . lower ( ) for k , v in list ( d . items ( ) ) } for d in messages ] #NEWLINE# print ( dicts ) #NEWLINE#
form . jobs [ 0 ] . company . choices = company_list #NEWLINE#
ftp . cwd ( 'pub/pmc' ) #NEWLINE#
cameraL . SetFocalPoint ( 0 , 0 , 0 ) #NEWLINE#
( 'this' , int ) , ( 'that' , int ) #NEWLINE#
return HttpResponseRedirect ( '/accounts/invalid' ) #NEWLINE#
data = self . cleaned_data [ 'nameofdata' ] #NEWLINE#
pipe = subprocess . Popen ( [ 'perl' , './uireplace.pl' , var ] , stdin = subprocess . PIPE ) #NEWLINE#
"""WAGCenter-04190517953516060503-20160605124857-4190-5""" #NEWLINE#
ax . set_ylim ( - 0.5 , 1.7 ) #NEWLINE#
print ( res . cluster . value_counts ( ) ) #NEWLINE#
print ( t . astimezone ( EST ) ) #NEWLINE#
dir ( settings ) #NEWLINE#
A . view ( dtype = np . complex128 ) #NEWLINE#
plt . plot ( dates , values , '.r-' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
items . append ( '***' ) #NEWLINE#
'0' * '8' #NEWLINE#
dt_start = dt_start + datetime . timedelta ( days = 21 ) #NEWLINE#
parseaddr ( 'Full#SPACE#Name#SPACE#<full@example.com>' ) #NEWLINE#
print ( x [ 'derivative_col1' ] ) #NEWLINE#
log . debug ( 'logout#SPACE#user:#SPACE#{user}#SPACE#via#SPACE#ip:#SPACE#{ip}' . format ( user = user , ip = ip ) ) #NEWLINE#
try : #NEWLINE# #INDENT# item = list [ 2 ] [ 2 ] #NEWLINE# except IndexError : #NEWLINE# #INDENT# print ( 'There#SPACE#is#SPACE#no#SPACE#value#SPACE#at#SPACE#list[2][2]' ) #NEWLINE# else : #NEWLINE# #INDENT# print ( '{}#SPACE#is#SPACE#at#SPACE#list[2][2]' . format ( item ) ) #NEWLINE#
now_time = now . time ( ) #NEWLINE#
df2 = pd . DataFrame ( np . random . randn ( 3 ) , ind2 , [ 'b' ] ) #NEWLINE#
o = [ int ( idx == i ) for idx , l in enumerate ( input_seq ) for _ in l ] #NEWLINE#
print ( 'Parsed:' , p . parse ( StringIO ( item ) ) ) #NEWLINE#
doc = ET . fromstring ( content ) #NEWLINE#
[ ( x , sum ( map ( itemgetter ( 1 ) , y ) ) ) for x , y in groupby ( L , itemgetter ( 0 ) ) ] #NEWLINE#
df . dtypes #NEWLINE#
browser = webdriver . Firefox ( firefox_binary = binary ) #NEWLINE#
return ',' . join ( map ( str , lst ) ) , [ ] #NEWLINE#
L1 = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] #NEWLINE#
print ( case_sensitive_replace ( 'abc#SPACE#Abc#SPACE#aBc#SPACE#abC#SPACE#ABC' , 'abc' , 'de' ) ) #NEWLINE#
help ( modulename ) #NEWLINE#
np . issubdtype ( np . uint8 , np . integer ) #NEWLINE#
return app #NEWLINE#
self . text . delete ( '1.0' , 'end' ) #NEWLINE#
element . remove ( subelement ) #NEWLINE#
a [ 1 : ] [ : : 2 ] #NEWLINE#
pd . DataFrame ( df . apply ( lambda s : dict ( zip ( pd . Series ( s ) , pd . Series ( s ) . index ) ) , #NEWLINE# 1 ) . tolist ( ) ) #NEWLINE#
win32api . GetLastInputInfo ( ) #NEWLINE#
str_a = str_a . replace ( ',' , '@' ) #NEWLINE#
lists = [ [ 'hello' ] , [ 'world' , 'foo' , 'bar' ] ] #NEWLINE#
ast . dump ( node ) #NEWLINE#
bytes = bitarray ( bin ( my_long ) ) . tostring ( ) #NEWLINE#
self . zipper . flush ( ) #NEWLINE#
d = eval ( 'Image.objects.filter(' + f + ')' ) #NEWLINE#
hashlib . sha256 ( str ( random . getrandbits ( 256 ) ) . encode ( 'utf-8' ) ) . hexdigest ( ) #NEWLINE#
q . all ( ) #NEWLINE#
print ( ( group . id , group . last_response ) ) #NEWLINE#
friday = day - timedelta ( days = day . weekday ( ) + 3 ) #NEWLINE#
"""юу#SPACE#со#SPACE#беутифул""" #NEWLINE#
vals = redis . zrange ( key , 0 , - 1 ) #NEWLINE#
screen_width = root . winfo_screenwidth ( ) #NEWLINE#
print ( sess . run ( tf . shape ( parsed ) , feed_dict = { raw : my_data } ) ) #NEWLINE#
items = [ dicttolatex ( dic ) for dic in items_to_clean ] #NEWLINE#
gens = [ select_kth ( v ) for v in range ( 13 ) ] #NEWLINE#
function ( ) #NEWLINE#
print ( [ x for x in list ( globals ( ) . keys ( ) ) if isinstance ( globals ( ) [ x ] , #NEWLINE# FunctionType ) ] ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#old,#SPACE#{}' . format ( myName ) ) #NEWLINE#
local_namespace . clear ( ) #NEWLINE#
text_file = open ( 'Output.txt' , 'w' ) #NEWLINE# text_file . write ( 'Purchase#SPACE#Amount:#SPACE#%s' % TotalAmount ) #NEWLINE# text_file . close ( ) #NEWLINE#
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage' #NEWLINE#
arr [ 97 ] [ 99 ] [ 99 ] #NEWLINE#
d = dict ( zip ( ( o . name for o in object_list ) , object_list ) ) #NEWLINE#
s = socket . socket ( ) #NEWLINE#
"""r#SPACE#=#SPACE#re.search(r'(\\d{1,3}\\.\\d{1,3}.\\d{1,3}.\\d{1,3})',#SPACE#'192.168.1.1#SPACE#999.999.999.999')""" #NEWLINE#
grouped . size ( ) . idxmax ( ) #NEWLINE#
r = requests . get ( 'https://enjoy.eni.com/it/milano/map/' , headers = headers ) #NEWLINE#
zipfile = ZipFile ( StringIO ( result . read ( ) ) ) #NEWLINE#
df [ 'RegionName' ] = df [ 'RegionName' ] . str . replace ( '#SPACE#\\[.+$' , '' ) #NEWLINE#
[ i for i in np . argsort ( a [ : , ( 0 ) ] ) if a [ i , 1 ] == - 1 ] [ 0 ] #NEWLINE#
return list ( merged . values ( ) ) #NEWLINE#
sf [ 'datetime' ] = sf [ 'datestring' ] . str_to_datetime ( '%Y-%d-%m' ) #NEWLINE#
parser . add_argument ( * option , ** config ) #NEWLINE#
len ( cv2 . imread ( 'abalone.jpg' , cv2 . IMREAD_COLOR ) . shape ) #NEWLINE#
from functools import reduce #NEWLINE# #NEWLINE# #NEWLINE# def factorial ( n ) : #NEWLINE# #INDENT# return reduce ( lambda x , y : x * y , [ 1 ] + list ( range ( 1 , n + 1 ) ) ) #NEWLINE#
di [ 'children' ] . remove ( el ) #NEWLINE#
foo ( ) #NEWLINE#
print ( integrate . quad ( lambda x : 1 + np . sin ( x ) , - 1 , 1 , weight = 'cauchy' , wvar = 0 ) ) #NEWLINE#
random . choice ( list ( i ) ) #NEWLINE#
t_points = t_image [ t_pos [ : , ( 1 ) ] , t_pos [ : , ( 0 ) ] ] #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
with open ( 'urls.txt' , 'rt' ) as f : #NEWLINE# #INDENT# start_urls = [ url . strip ( ) for url in f . readlines ( ) ] #NEWLINE#
output_signal = scipy . signal . filtfilt ( b , a , input_signal ) #NEWLINE#
pg . AxisItem . __init__ ( self , * args , ** kwargs ) #NEWLINE#
os . system ( command ) #NEWLINE#
e = driver . find_element_by_xpath ( '//someXpath' ) #NEWLINE#
bin_array . append ( int ( '010' , 2 ) ) #NEWLINE#
bin_array . append ( int ( '110' , 2 ) ) #NEWLINE#
app_label = 'myapp' #NEWLINE#
print ( d [ 'AD' ] ) #NEWLINE#
fout = open ( 'test.dat' , 'wb' ) #NEWLINE#
print ( Func ( 'word1' , 'word2' ) ) #NEWLINE#
return db . run_in_transaction ( _get_numbers_helper , query . fetch ( 5 ) , needed ) #NEWLINE#
eiffel_tower_5k = Location . objects . nearby ( 48.8582 , 2.2945 , 5 ) #NEWLINE#
s = 'please#SPACE#answer#SPACE#my#SPACE#question' #NEWLINE#
filename = os . path . abspath ( os . path . realpath ( filename ) ) #NEWLINE#
list ( flatten ( remove ( l , 1 ) ) ) #NEWLINE#
div = soup . find ( 'div' , class_ = 'crBlock#SPACE#' ) #NEWLINE# print ( div . find_all ( text = 'foobar' ) ) #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
plt . text ( 0.53 , - 0.08 , 'N' , fontsize = 20 ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
requests . get ( 'https://httpbin.org/' , verify = 'path/to/your/bundle' ) #NEWLINE#
app . config [ 'APPLICATION_ROOT' ] = '/abc/123' #NEWLINE#
mpld3 . enable_notebook ( ) #NEWLINE#
print ( br . title ( ) ) #NEWLINE#
print ( f . strftime ( '%m/%d/%Y#SPACE#%H:%M:%S' ) ) #NEWLINE#
print ( m . group ( 1 ) ) #NEWLINE#
dom = xml . dom . minidom . parseString ( document ) #NEWLINE#
super ( Task , self ) . save ( force_insert , force_update ) #NEWLINE#
return '' . join ( str ( chr ( b ) ) for b in reversed ( ba ) ) . encode ( 'latin1' ) #NEWLINE#
os . system ( 'vim' ) #NEWLINE#
main ( ) #NEWLINE#
return render_template ( 'base.html' , name = app . name ) #NEWLINE#
result = subprocess . check_output ( [ 'pwd' ] ) #NEWLINE# print ( result ) #NEWLINE#
return - ( - a // b ) #NEWLINE#
plt . plot ( dates , values ) #NEWLINE#
from . . import settings #NEWLINE#
D . ix [ idx ] #NEWLINE#
print ( Decimal ( x ) ) #NEWLINE#
pythoncom . PumpWaitingMessages ( ) #NEWLINE#
dateForm . set_index ( pd . DatetimeIndex ( poorList ) , inplace = True ) #NEWLINE#
super ( ) . __init__ ( model , color , mpg ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
set_trace ( ) #NEWLINE#
os . mkdir ( '文件夹' ) #NEWLINE#
df #NEWLINE#
import numpy #NEWLINE#
self . configure ( background = 'white' ) #NEWLINE#
pass #NEWLINE#
canada . plot ( 'myvalues' , cmap = 'OrRd' ) #NEWLINE#
[ 1 , 17 , 1 , 0 , 2 , 0 ] #NEWLINE#
browser . select_form ( nr = 0 ) #NEWLINE#
sapi . filter ( locations = [ - 6.38 , 49.87 , 1.77 , 55.81 ] ) #NEWLINE#
yield os . path . join ( root , folder ) #NEWLINE#
print ( '#SPACE#' . join ( map ( str , fib ( ) ) ) ) #NEWLINE#
norm = mpl . colors . Normalize ( vmin = - 20 , vmax = 10 ) #NEWLINE#
return chain . from_iterable ( [ x ] if isinstance ( x , str ) else x for x in lst ) #NEWLINE#
plt . show ( ) #NEWLINE#
writer = csv . writer ( open ( 'some.csv' , 'wb' ) ) #NEWLINE#
line_2 = Line2D ( [ 0 , 4.5 ] , [ 0 , 3 ] , linewidth = 1 , linestyle = '-' , color = 'red' ) #NEWLINE#
fileconcord . close ( ) #NEWLINE#
b = [ ( sl + [ 0 ] * ( maxlen - len ( sl ) ) ) for sl in a ] #NEWLINE#
( bad , good ) [ x in goodvals ] . append ( x ) #NEWLINE#
return arg2value #NEWLINE#
connection . put_record ( stream_name , data , partition_key ) #NEWLINE#
[ sum ( q [ i : i + 2 ] ) for i in range ( 0 , len ( q ) , 2 ) ] #NEWLINE#
v1 = max ( 0 , A ) #NEWLINE#
return webdriver . Firefox ( firefox_profile = fp ) #NEWLINE#
_sock . recv ( 1 ) #NEWLINE#
stats . normaltest ( x ) #NEWLINE#
seen_add ( k ) #NEWLINE#
print ( 'motion#SPACE#event:' , event . m_x , event . m_y ) #NEWLINE#
sys . stderr . write ( 'stderr:#SPACE#' + read ) #NEWLINE#
self . on_finish ( ) #NEWLINE#
_test ( ) #NEWLINE#
doc = lxml . html . parse ( 'tables.html' ) #NEWLINE#
cv2 . imshow ( 'opencv' , img ) #NEWLINE#
admin . site . register ( model ) #NEWLINE#
super ( UserProfile , self ) . delete ( * args , ** kwargs ) #NEWLINE#
_quicksort ( array , left , stop ) #NEWLINE#
process = subprocess . Popen ( [ <STR0> , 'pull' ] , stdout = subprocess . PIPE ) #NEWLINE#
foo ( 'bar' ) #NEWLINE#
writer . writeheader ( ) #NEWLINE#
sys . stdin . readline ( ) #NEWLINE#
t . start ( ) #NEWLINE#
print ( 'Current#SPACE#time#SPACE#in#SPACE#%s#SPACE#is#SPACE#%s' % ( city , now . strftime ( fmt ) ) ) #NEWLINE#
import lxml . etree #NEWLINE#
root . mainloop ( ) #NEWLINE#
window . set_icon ( windowicon ) #NEWLINE#
print ( curve_fit ( func , ( x , y ) , z , p0 ) ) #NEWLINE#
sorted ( mydict ) #NEWLINE#
LOGGER . info ( 'pyspark#SPACE#script#SPACE#logger#SPACE#initialized' ) #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
A = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) #NEWLINE#
4 , ( 0 , 5 , 0 , 0 ) #NEWLINE#
self . textLayout . addWidget ( text ) #NEWLINE#
output . append ( 'person#SPACE#not#SPACE#found' ) #NEWLINE#
output . append ( 'mother#SPACE#not#SPACE#known' ) #NEWLINE#
output . append ( 'No#SPACE#known#SPACE#ancestors' ) #NEWLINE#
o . do ( ) #NEWLINE#
foo . __setitem__ ( slice ( x , y , None ) , bar ) #NEWLINE#
sys . stdout . write ( '1' ) #NEWLINE# sys . stdout . write ( '\r2' ) #NEWLINE#
csv_writer . writerows ( mylist ) #NEWLINE#
return 'myWord' in r . text #NEWLINE#
print ( my_dict ) #NEWLINE#
return df [ df . col . str . contains ( '^[^tc]' ) ] #NEWLINE#
PROJECT_PATH = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE# LOCALE_PATHS = os . path . join ( PROJECT_PATH , 'conf/locale' ) , #NEWLINE#
( lambda x : x + 2 ) ( 3 ) #NEWLINE#
s . post ( 'url' ) #NEWLINE#
matches = re . findall ( '&\\w+;' , s ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
em1 . add_ip ( '192.168.0.1/24' ) #NEWLINE#
types = [ elem [ 1 ] for elem in res . cursor . description ] #NEWLINE#
assert isinstance ( o . someattribute , str ) #NEWLINE#
print ( foo ( ** d ) ) #NEWLINE#
version , type , length = struct . unpack ( 'cch' , packed [ : 4 ] ) #NEWLINE# content , = struct . unpack ( '%ds' % length , packed [ 4 : ] ) #NEWLINE#
print ( 'fail#SPACE#to#SPACE#open#SPACE#%s' % image_name ) #NEWLINE#
ws = wb . get_sheet_by_name ( 'Sheet1' ) #NEWLINE#
print ( pool . map ( f , list ( range ( 10 ) ) ) ) #NEWLINE#
a [ i ] . append ( x ) #NEWLINE#
os . makedirs ( 'C:\\Users\\PREM\\Desktop\\pyftp#SPACE#download\\ftp' ) #NEWLINE#
filter_fields = 'distribuidor' , #NEWLINE#
val = val [ : - 1 ] #NEWLINE#
y = lambda sym : { False : 'X' , True : 'Y' } . get ( sym , '#SPACE#' ) #NEWLINE#
B [ : , : ] = np . dot ( B [ : , : ] , np . array ( [ [ 0 , 1 ] , [ 1 , 0 ] ] ) ) #NEWLINE#
sorted_files . append ( open ( 'temp' + str ( i ) + '-sorted.txt' , 'r' ) ) #NEWLINE#
self . gzfile . close ( ) #NEWLINE#
return db . Column ( * args , ** kwargs ) #NEWLINE#
config = configparser . ConfigParser ( defaults = myDefaults ) #NEWLINE#
dst = cv2 . cv . CreateMat ( height , width , cv2 . IMREAD_COLOR ) #NEWLINE#
total = sum ( marks . values ( ) ) #NEWLINE#
"""simple#SPACE#index#SPACE#page#SPACE#which#SPACE#uses#SPACE#jquery#SPACE#to#SPACE#make#SPACE#a#SPACE#single#SPACE#get#SPACE#request#SPACE#to#SPACE#/ajax,#SPACE#alerting#SPACE#the#SPACE#value#SPACE#of#SPACE#foo""" #NEWLINE#
sys . getsizeof ( 10 ** 10 ** 6 ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
browser . set_handle_redirect ( True ) #NEWLINE#
c . sort ( order = 'position' ) #NEWLINE#
msgBox . exec_ ( ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
return max ( set ( words ) , key = words . count ) #NEWLINE#
s = [ 0 ] + [ i for i in range ( 1 , len ( x ) ) if x [ i ] != x [ i - 1 ] + 1 ] + [ len ( x ) ] #NEWLINE#
d = dateutil . parser . parse ( '2008-09-26T01:51:42.000Z' ) #NEWLINE#
return [ '' . join ( letters [ : i ] + letters [ i : : - 1 ] ) for i in range ( last_letter - 97 ) ] #NEWLINE#
ax . plot ( dataX , dataY , linewidth = 0.5 ) #NEWLINE#
response = urllib . request . urlopen ( req2 ) #NEWLINE#
myArray = [ 1 , 2 , 3 ] #NEWLINE# len ( myArray ) #NEWLINE#
model . fit ( X = X_train , y = y_train , batch_size = 32 , show_accuracy = True ) #NEWLINE#
axes . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
f . write ( header ) #NEWLINE#
draw ( ) #NEWLINE#
ax . set_ylim ( ax . get_ylim ( ) [ : : - 1 ] ) #NEWLINE#
{ { day } } #NEWLINE#
return p . stdout . read ( ) . strip ( ) #NEWLINE#
print ( 'Selected#SPACE#time:#SPACE#{0}:{1}:{2}' . format ( tOut . hour , tOut . minute , tOut . second ) ) #NEWLINE#
draw . text ( ( 5 , 5 ) , char , ( 0 , 0 , 0 ) , font = font ) #NEWLINE#
output = subprocess . check_output ( [ 'echo' , '640x360' ] ) #NEWLINE#
des = np . array ( des , np . float32 ) . reshape ( 1 , len ( des ) ) #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE# ( a > 1 ) . all ( ) and ( a < 5 ) . all ( ) #NEWLINE#
import itertools #NEWLINE# itertools . permutations ( [ 1 , 2 , 3 ] ) #NEWLINE#
return tuple ( map ( itemgetter ( 0 ) , G ) ) #NEWLINE#
formatter = logging . Formatter ( '%(name)-12s:#SPACE#%(levelname)-8s#SPACE#%(message)s' ) #NEWLINE#
Process . __init__ ( self ) #NEWLINE#
transsurface = pygame . display . set_mode ( screen . get_size ( ) ) #NEWLINE#
db . session . add ( u ) #NEWLINE#
libfoo . dll #NEWLINE#
val = ast . literal_eval ( val ) #NEWLINE#
p . join ( ) #NEWLINE#
wb = xlrd . open_workbook ( 'YOUR_FILE.xls' ) #NEWLINE#
def quit ( ) : #NEWLINE# #INDENT# root . quit ( ) #NEWLINE#
t . write ( line . rstrip ( ) + 'No' + '\n' ) #NEWLINE#
s = pd . Series ( [ 10 , 10 , 10 , 14 , 10 , 10 , 10 , 14 , 100 , 14 , 10 ] ) #NEWLINE#
return http . HttpResponseRedirect ( url_with_get ) #NEWLINE#
subplot ( 1 , 2 , 1 ) #NEWLINE#
db . session . add ( entry ) #NEWLINE#
add ( * arg ) #NEWLINE#
s = input ( ) #NEWLINE#
print ( self . _applecount ) #NEWLINE#
[ n for d , n in sorted ( ( abs ( x - myNumber ) , x ) for x in myList ) [ : k ] ] #NEWLINE#
result . append ( a ) #NEWLINE#
daycells = row . select ( '>#SPACE#td' ) [ 1 : ] #NEWLINE#
s = pd . Panel ( dict ( zip ( idx , [ df1 , df2 , df3 ] ) ) ) #NEWLINE#
ws = wb . get_sheet_by_name ( 'sheet1' ) #NEWLINE#
axes [ 0 ] . scatter ( x , y , marker = '.' ) #NEWLINE#
[ dct for dct in listA if dct . items ( ) >= dictA . items ( ) ] #NEWLINE#
p . start ( ) #NEWLINE#
gunicorn_django - c / path / to / website_gunicorn . conf . py #NEWLINE#
match = re . match ( '(\\w+\\s\\w+)' , test ) #NEWLINE#
self . values . add ( item [ 1 ] ) #NEWLINE#
np . split ( a - b , np . cumsum ( y ) ) #NEWLINE#
plt . style . use ( 'ggplot' ) #NEWLINE#
max ( zip ( map ( sum , a ) , a ) ) [ 1 ] #NEWLINE#
g . serialize ( 'test.rdf' , format = 'rdf/xml' ) #NEWLINE#
return { ( x + 1 ) for x in l } #NEWLINE#
print ( foo ) #NEWLINE#
print ( 'Unable#SPACE#to#SPACE#set#SPACE#vsync#SPACE#mode,#SPACE#using#SPACE#driver#SPACE#defaults:#SPACE#{}' . format ( e ) ) #NEWLINE#
Parallel ( n_jobs = 2 ) ( delayed ( foo ) ( parameters ) for x in range ( i , j ) ) #NEWLINE#
uuid . uuid4 ( ) . hex #NEWLINE#
df . replace ( 'n/a' , 0 ) . astype ( float ) #NEWLINE#
super ( MyModel , self ) . clean ( * args , ** kwargs ) #NEWLINE#
d [ 'a' ] #NEWLINE#
yaml . dump ( data , outfile , default_flow_style = False ) #NEWLINE#
suits = [ 'h' , 'c' , 'd' , 's' ] #NEWLINE#
self . pack ( ) #NEWLINE#
words = [ 'hello' , 'world' , 'you' , 'look' , 'nice' ] #NEWLINE# """,#SPACE#""" . join ( '"{0}"' . format ( w ) for w in words ) #NEWLINE#
d . cards . remove ( Card ( 1 , 1 ) ) #NEWLINE#
'%10s' % '*' * x #NEWLINE#
array2 = [ 'G' , 'H' , 'I' ] #NEWLINE#
return tree . xpath ( expr , namespaces = nsmap ) #NEWLINE#
form . save ( ) #NEWLINE#
print ( line ) #NEWLINE#
do_something_else ( ) #NEWLINE#
logger = logging . getLogger ( name ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( htmldoc ) #NEWLINE#
button = Button ( window , text = 'Count' , command = cipher ) #NEWLINE#
contents = '' . join ( [ str ( item ) for item in notices . contents ] ) #NEWLINE#
return self . filter ( id__in = ids ) #NEWLINE#
plt . close ( ) #NEWLINE#
s = '5+6' #NEWLINE# list ( s ) #NEWLINE#
df . combine_first ( s . T ) #NEWLINE#
curs . execute ( 'select#SPACE#first_name#SPACE#from#SPACE#people' ) #NEWLINE# names = [ row [ 0 ] for row in curs . fetchall ( ) ] #NEWLINE#
pylab . plot ( x , y2 , '-r' , label = 'cosine' ) #NEWLINE#
board = [ ( [ 0 ] * 3 ) for _ in range ( 3 ) ] #NEWLINE#
sys . getsizeof ( t1 ) #NEWLINE#
total_price += item [ 'price' ] * item [ 'quantity' ] #NEWLINE#
result = [ list ( map ( player , group ) ) for level , group in groups ] #NEWLINE#
df = pd . DataFrame ( np . random . rand ( n , 3 ) , columns = list ( 'abc' ) ) #NEWLINE#
x . digest ( ) #NEWLINE#
out = [ ( x , y , z , c ) for ( x , y , z ) , c in zip ( a , h ) ] #NEWLINE#
1 / 3 #NEWLINE#
velocity = np . array ( [ [ dx_dt [ i ] , dy_dt [ i ] ] for i in range ( dx_dt . size ) ] ) #NEWLINE#
print ( len ( form . find_all ( 'div' , 'listEntry#SPACE#' ) ) ) #NEWLINE#
my_logger . setLevel ( logging . DEBUG ) #NEWLINE#
args = sys . argv [ 2 : ] #NEWLINE#
result = [ ] #NEWLINE# for item in a : #NEWLINE# #INDENT# if condition : #NEWLINE# #INDENT# #INDENT# result . append ( item ) #NEWLINE# a = result #NEWLINE#
open ( 'new' , 'w' ) . writelines ( header + list_of_lines ) #NEWLINE#
vv . plot ( x , y , z , lw = 10 ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 10 , size = ( 10 , 10 ) ) ) #NEWLINE#
t . daemon = True #NEWLINE#
return render_template ( 'login.html' , next = request . endpoint ) #NEWLINE#
return demand . ix [ series . name ] . apply ( lambda x : x * series ) . stack ( ) #NEWLINE#
l = sys . stdin . readline ( ) #NEWLINE#
feed = 'http://stackoverflow.com/feeds/tag?tagnames=python&sort=newest' #NEWLINE#
d = defaultdict ( list ) #NEWLINE#
all ( i . isalpha ( ) or i == '#SPACE#' for i in 'test#SPACE##SPACE##SPACE##SPACE#string' ) #NEWLINE#
ax . plot ( x , np . cos ( x ) , label = 'Cosine' ) #NEWLINE#
tag . insert ( 1 , subtag2 ) #NEWLINE#
tornado . autoreload . watch ( 'myfile' ) #NEWLINE#
plt . scatter ( x2 , y2 , label = str ( pointset2 ) ) #NEWLINE#
reader = csv . reader ( csvinput ) #NEWLINE#
l = [ x . split ( '\t' ) [ - 1 ] for x in l ] #NEWLINE# [ '0238.94' , '2.3904' , '0139847' , '' ] #NEWLINE#
new_func_name ( ) #NEWLINE#
text = input ( 'Type#SPACE#something:' ) #NEWLINE#
name [ 0 ] [ 0 ] [ - 1 ] #NEWLINE#
c . popup ( ) . setStyleSheet ( 'background-color:#SPACE#yellow' ) #NEWLINE#
data = json . load ( jsonFile ) #NEWLINE#
x_file . write ( '{}#SPACE#TotalAmount' . format ( data ) ) #NEWLINE#
a = [ x [ : ] for x in repeat ( [ 0 ] * cols , rows ) ] #NEWLINE#
lis = [ ] #NEWLINE#
Profile . objects . filter ( full_name__iregex = regex ) #NEWLINE#
df . astype ( float ) . sum ( ) . astype ( int ) . astype ( str ) #NEWLINE#
return [ atoi ( c ) for c in re . split ( '(\\d+)' , text ) ] #NEWLINE#
num_df [ num_df [ data_columns ] . notnull ( ) . all ( axis = 1 ) ] #NEWLINE#
conn . close ( ) #NEWLINE#
print ( g . user_set . all ( ) ) #NEWLINE#
pic = QtGui . QPixmap ( imagePath ) #NEWLINE#
f . close ( ) #NEWLINE#
ax . get_children ( ) #NEWLINE#
return [ vector . index ( x ) for x in sorted ( list ( range ( n ) ) , key = vector . __getitem__ ) #NEWLINE# ] #NEWLINE#
print ( ( 'delta:' , Eucl ) ) #NEWLINE#
print ( list ( od . values ( ) ) ) #NEWLINE#
parse ( '2003-09-25' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
result . setdefault ( idx , [ ] ) . append ( ( c1 , c2 , c3 ) ) #NEWLINE#
mylist = [ { 'a' : 1 , 'b' : 2 } , { 'c' : 3 , 'd' : 4 } , { 'e' : 5 , 'f' : 6 } ] #NEWLINE#
df . set_index ( 'idn' , inplace = True ) #NEWLINE#
dic = { 'a' : 1 , 'b' : 2 } #NEWLINE#
a . remove ( item ) #NEWLINE#
buffer = h5file . createEArray ( '/detector' , 'arr' , datatype , ( 0 , ) , '' ) #NEWLINE#
y . sort ( key = sort_key ) #NEWLINE#
bucket . configure_lifecycle ( lifecycle ) #NEWLINE#
__all__ = [ 'SomeModel' , 'SomeOtherModel' ] #NEWLINE#
map ( cls . my_func , items ) #NEWLINE#
[ 'Ld#SPACE#Zeppelin' , 'Led#SPACE#Zepelin' ] #NEWLINE#
instance . save ( ) #NEWLINE#
mylist = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
key = bytearray . fromhex ( hexs ) #NEWLINE#
"""President#SPACE#[P]#SPACE#Barack#SPACE#Obama#SPACE#[/P]#SPACE#met#SPACE#Microsoft#SPACE#founder#SPACE#[P]#SPACE#Bill#SPACE#Gates#SPACE#[/P],#SPACE#yesterday.""" #NEWLINE#
app . config [ 'DEBUG' ] = True #NEWLINE#
sys . modules [ __name__ ] = WrapMod ( sys . modules [ __name__ ] , deprecated = [ 'oldVal' ] ) #NEWLINE#
for i in list_of_stats : #NEWLINE# #INDENT# getattr ( pageprocs , i , lambda : None ) ( ) #NEWLINE#
ax . xaxis . set_major_formatter ( ticker . NullFormatter ( ) ) #NEWLINE#
print ( ( 'cmdlineargs:' , cmdlineargs ) ) #NEWLINE#
pb = gtk . gdk . Pixbuf ( gtk . gdk . COLORSPACE_RGB , False , 8 , sz [ 0 ] , sz [ 1 ] ) #NEWLINE#
movie_tuples = [ tuple ( map ( d . get , fields ) ) for d in movie_dicts ] #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ] , #NEWLINE#
response = requests . post ( 'http://httpbin.org/post' , files = dict ( foo = 'bar' ) ) #NEWLINE#
self . button = QtGui . QPushButton ( 'Test' ) #NEWLINE#
{ { super ( ) } } #NEWLINE#
os . environ [ 'PYTHONPATH' ] . split ( os . pathsep ) #NEWLINE#
latex ( sympify ( '1+2**(x+y)' ) ) #NEWLINE#
clocknumber = models . CharField ( max_length = 16 ) #NEWLINE#
L = [ np . arange ( start [ i ] , stop [ i ] ) for i in range ( ndims ) ] #NEWLINE#
self . x = '5' #NEWLINE#
p = subprocess . Popen ( [ 'python' ] , stdout = subprocess . PIPE , stdin = subprocess . PIPE ) #NEWLINE#
app . debug = True #NEWLINE#
print ( file . readline ( ) ) #NEWLINE#
print ( 'module1.Relay:' , gpio . get_value ( ) ) #NEWLINE#
max ( arg1 , arg2 , arg3 ) #NEWLINE#
res = [ f . name for f in message . DESCRIPTOR . fields ] #NEWLINE#
driver = webdriver . PhantomJS ( executable_path = 'phantomjs.exe' ) #NEWLINE#
super ( ) . __init__ ( * args , ** kwargs ) #NEWLINE#
print ( '' . join ( rl ) ) #NEWLINE#
Trot = np . einsum ( 'ai,bj,ck,dl,abcd->ijkl' , g , g , g , g , T ) #NEWLINE#
g . add_argument ( '--foo' ) #NEWLINE#
sys . path . insert ( 0 , os . path . abspath ( __file__ ) . rsplit ( os . sep , 2 ) [ 0 ] ) #NEWLINE#
print ( os . path . join ( top , nm ) [ len ( std_lib ) + 1 : - 3 ] . replace ( '\\' , '.' ) ) #NEWLINE#
fields = [ 'id' , 'date' , 'hour' , 'minute' , 'interval' ] #NEWLINE#
s = '\n\t' #NEWLINE# s . encode ( 'unicode-escape' ) #NEWLINE#
return [ x for x in iter if is_even ( x ) ] #NEWLINE#
locals ( ) #NEWLINE#
build_tree_recursive ( tree , None , nodes ) #NEWLINE#
return result . get ( ) #NEWLINE#
print ( isinstance ( obj , BaseClass ) ) #NEWLINE#
ax . plot ( x , y ) #NEWLINE#
self . wm_geometry ( '400x400' ) #NEWLINE#
matches = regex . findall ( 'N[^P][ST][^P]' , protein , overlapped = True ) #NEWLINE#
print ( ',#SPACE#' . join ( [ ( str ( n ) + '-' + str ( next ( iranges ) ) ) for n in iranges ] ) ) #NEWLINE#
wb = xlrd . open_workbook ( 'datasheet.xls' ) #NEWLINE#
queryset . filter ( created_at__range = ( first_date , last_date ) ) #NEWLINE#
arr [ 1 , 1 ] #NEWLINE#
df_masked = df [ ( df . date > '2012-04-01' ) & ( df . date < '2012-04-04' ) ] #NEWLINE#
win = gtk . Window ( ) #NEWLINE#
from email . mime . multipart import MIMEMultipart #NEWLINE#
"""asd#SPACE#zxc""" #NEWLINE#
"""rty""" #NEWLINE#
"""hello""" #NEWLINE#
"""line#SPACE#2""" #NEWLINE#
"""line#SPACE#3#SPACE#""" #NEWLINE#
"""line#SPACE#4""" #NEWLINE#
"""line#SPACE#5""" #NEWLINE#
"""line#SPACE#6""" #NEWLINE#
"""line#SPACE#7""" #NEWLINE#
"""line#SPACE#??""" #NEWLINE#
background_label = tk . Label ( parent , image = background_image ) #NEWLINE#
import imp #NEWLINE# imp . reload ( module ) #NEWLINE#
pylab . plot ( x , p ( x ) , 'r--' ) #NEWLINE#
root = tkinter . Tk ( ) #NEWLINE#
return a . reshape ( sh ) . mean ( - 1 ) . mean ( 1 ) #NEWLINE#
plt . plot ( list ( range ( 10 , 20 ) ) ) #NEWLINE#
df . groupby ( 'A' ) . transform ( lambda x : x . sum ( ) / len ( x ) ) #NEWLINE#
print ( 'Content-type:#SPACE#image/jpg' ) #NEWLINE#
x [ 'streak' ] = x . groupby ( 'c' ) . cumcount ( ) + x [ 'a' ] #NEWLINE#
signal . signal ( signal . SIGALRM , nothing ) #NEWLINE#
print ( float ( 2 ) ) #NEWLINE#
full_time = timedelta ( seconds = multiplier * passed_time . total_seconds ( ) ) #NEWLINE#
raise ValueError ( "Could#SPACE#not#SPACE#find#SPACE#'%s'#SPACE#in#SPACE#the#SPACE#index#SPACE#(%s)" % self . index ) #NEWLINE#
s = set ( [ 1 , 2 , 3 ] ) #NEWLINE# list ( s ) #NEWLINE#
cv2 . imshow ( 'cropped' , crop_img ) #NEWLINE# cv2 . waitKey ( 0 ) #NEWLINE#
import tkinter #NEWLINE#
index = np . ogrid [ : z2 . shape [ 0 ] , : z2 . shape [ 1 ] , : z2 . shape [ 2 ] ] #NEWLINE#
return None #NEWLINE#
return func ( * args ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
l . sort ( cmp = lcmp ) #NEWLINE#
tests2 = models . ManyToManyField ( 'Test2' , blank = True ) #NEWLINE#
cherrypy . quickstart ( CServer ( ) , config = conf ) #NEWLINE#
self . audio . terminate ( ) #NEWLINE#
cb = plt . colorbar ( ) #NEWLINE#
wb = openpyxl . load_workbook ( 'test.xlsx' ) #NEWLINE#
escaped = '' #NEWLINE#
text = f . read ( ) . decode ( encoding = 'utf-8' ) #NEWLINE#
tree . predict ( iris . data ) #NEWLINE#
super ( webView , self ) . __init__ ( parent ) #NEWLINE#
return str ( self . client_address [ 0 ] ) #NEWLINE#
print ( distutils . sysconfig . get_config_var ( 'CONFIG_ARGS' ) ) #NEWLINE#
return tmp [ 'cls' ] . mangle . __code__ . co_varnames [ 0 ] #NEWLINE#
CREDENTIALS_PROPERTY_NAME = 'credentials' #NEWLINE#
reactor . run ( ) #NEWLINE#
data = numpy . fromfile ( my_file , dtype = numpy . uint8 ) . reshape ( - 1 , N ) #NEWLINE# streams = [ data [ : , ( stream_index == i ) ] . ravel ( ) for i in range ( k ) ] #NEWLINE#
output . append ( [ item ] ) #NEWLINE#
df . values #NEWLINE#
np . einsum ( 'ij,ji->i' , np . dot ( a , b ) , a . T ) #NEWLINE#
label . set_verticalalignment ( 'top' ) #NEWLINE#
m = re . match ( '(.*?)/(.*?)/$' , data ) #NEWLINE#
m = re . match ( '@(\\w+)@' , data ) #NEWLINE#
y [ np . isnan ( y ) | np . isinf ( y ) ] = 0 #NEWLINE#
return log_file #NEWLINE#
def hello ( request ) : #NEWLINE# #INDENT# return HttpResponse ( 'Hello#SPACE#World!' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def home ( request ) : #NEWLINE# #INDENT# return render_to_response ( 'index.html' , { 'variable' : 'world' } ) #NEWLINE#
l . extend ( ( 1 , 2 , 3 ) ) #NEWLINE#
sys . getsizeof ( 'this' ) #NEWLINE#
srcs = [ src [ 2 ] for src in list_of_all ] #NEWLINE#
writer = csv . writer ( out ) #NEWLINE#
map ( mydict . get , [ k for k in list ( mydict . keys ( ) ) if k >= 6 ] ) #NEWLINE#
if not isinstance ( x , list ) : #NEWLINE# #INDENT# x = list ( x ) #NEWLINE#
data_cols . remove ( 'End' ) #NEWLINE#
p . stdin . write ( 'Some#SPACE#data' ) #NEWLINE#
print ( client_split [ 1 ] . decode ( 'zlib' ) ) #NEWLINE#
return ( x - x . min ( ) ) * ( b - a ) / ( x . max ( ) - x . min ( ) ) + a #NEWLINE#
merger . append ( PdfFileReader ( file ( filename1 , 'rb' ) ) ) #NEWLINE#
"""юу#SPACE#со#SPACE#беутифул""" #NEWLINE#
julie . save ( ) #NEWLINE#
anode . save ( ) #NEWLINE#
fig . subplots_adjust ( ) #NEWLINE#
x ( os . path . join ( dirpath , f ) ) #NEWLINE#
session . exec_command ( 'sudo#SPACE#-k#SPACE#dmesg' ) #NEWLINE#
self . y -= STEP #NEWLINE#
return scipy . sparse . coo_matrix ( ( data , ij ) , shape = ( nrows , ncols ) ) #NEWLINE#
curs . execute ( sql ) #NEWLINE#
mutate_dict ( lambda x : x + 1 , my_dictionary ) #NEWLINE#
print ( json . dumps ( data , indent = 4 , separators = ( ',' , ':#SPACE#' ) ) ) #NEWLINE#
df_casted . where ( datediff ( current_date ( ) , col ( 'dt' ) ) < 7 ) #NEWLINE#
group . add_argument ( '-c' , '--csv' , action = 'store_const' , dest = 'type' , const = 'c' ) #NEWLINE#
assert np . allclose ( s , [ r . sum ( ) for r in results ] ) #NEWLINE#
maxlength = max ( len ( s ) for s in stringlist ) #NEWLINE#
textobj . set_text ( wrapped_text ) #NEWLINE#
return super ( PartialFormatter , self ) . format_field ( value , spec ) #NEWLINE#
textarea = driver . find_element_by_tag_name ( 'textarea' ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
self . send_header ( 'Access-Control-Allow-Methods' , 'GET,#SPACE#POST,#SPACE#OPTIONS' ) #NEWLINE#
self . send_header ( 'Access-Control-Allow-Headers' , 'X-Requested-With' ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
radar . plot ( [ 1 , 3 , 2 , 5 , 4 ] , '-' , lw = 2 , color = 'b' , alpha = 0.4 , label = 'first' ) #NEWLINE#
return max ( list ( d1 . items ( ) ) , key = operator . itemgetter ( 1 ) ) [ 0 ] #NEWLINE#
numsum = sum ( numbers ) #NEWLINE#
( x << 32 ) + y #NEWLINE#
super ( MyFormSet , self ) . add_fields ( form , index ) #NEWLINE#
__all__ = [ 'script1' , 'script2' , 'script3' ] #NEWLINE#
l1 = [ 'apple' , 'pear' , 'grapes' , 'banana' ] #NEWLINE#
a = [ { 'a' : 1 } , { 'b' : 2 } , { 'c' : 1 } , { 'd' : 2 } ] #NEWLINE#
result_dict = OrderedDict ( ) #NEWLINE#
ET . register_namespace ( 'xlink' , 'http://www.w3.org/1999/xlink' ) #NEWLINE#
ET . register_namespace ( 'xsi' , 'http://www.w3.org/2001/XMLSchema-instance' ) #NEWLINE#
userdata [ 'data' ] = [ gen_user ( ) for i in range ( 0 , 5 ) ] #NEWLINE#
s = pd . Series ( [ 1 , 2 , 3 , np . nan , np . nan ] ) #NEWLINE# s . isnull ( ) . sum ( ) #NEWLINE#
matplotlib . hatch . _hatch_types . append ( CustomHorizontalHatch ) #NEWLINE#
plt . show ( ) #NEWLINE#
plt . ion ( ) #NEWLINE#
p . start ( ) #NEWLINE#
diffed [ 'total' ] . sum ( ) #NEWLINE#
libz . gzopen64 ( 'foo.gz' , 'rb' ) #NEWLINE#
return data [ s < m ] #NEWLINE#
for i in a [ : ] : #NEWLINE# #INDENT# if i in b : #NEWLINE# #INDENT# #INDENT# a . remove ( i ) #NEWLINE# b . remove ( i ) #NEWLINE#
access_token = params [ 'access_token' ] #NEWLINE#
result [ i ] = func1d ( x , y ) #NEWLINE#
textwrap . fill ( s , width = 10 ) #NEWLINE#
return sorted ( list ( range ( len ( a ) ) ) , key = lambda i : positions [ i ] ) #NEWLINE#
convert ( 'test.py' , 'test.ipynb' ) #NEWLINE#
return [ [ ( e - d ) for d in l ] for e in l ] #NEWLINE#
groups . rds | select ( 'match' , '.*production.*' ) | first #NEWLINE#
ax . xaxis . set_major_formatter ( ticker . FixedFormatter ( name_list ) ) #NEWLINE#
s . Popen ( 'taskkill#SPACE#/F#SPACE#/PID#SPACE#{0}' . format ( pid ) , shell = True ) #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
[ 'a/b/c/d' , 'a/b/e/f' , 'a/b/g/h' , 'a/b/i/j/k/l' , 'a/b/i/j/m/n' , #NEWLINE# 'a/b/o/p/q/r' , 'a/b/o/p/q/s' , 'a/b/o/p/t/u' ] #NEWLINE#
'minimum_dollar_commitment' , 'commercial_terms' #NEWLINE#
'my_delivery_type' , 'my_survey_method' #NEWLINE#
'number_of_unique_contacts' , 'availability_start' #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ] , #NEWLINE#
docx . write ( os . path . join ( tmp_dir , filename ) , filename ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 10 ] #NEWLINE#
wx . EndBusyCursor ( ) #NEWLINE#
df . groupby ( [ 'A' , 'B' ] ) . C . mean ( ) . unstack ( fill_value = 0 ) #NEWLINE#
gtk . main ( ) #NEWLINE#
mod = importlib . import_module ( name ) #NEWLINE#
print ( 'bHello' ) #NEWLINE#
print ( 'cHello' ) #NEWLINE#
d . add ( 2 ) #NEWLINE#
print ( etree . tostring ( doc , pretty_print = True ) ) #NEWLINE#
[ ( 'H' , 4 ) , ( 'T' , 5 ) ] #NEWLINE#
return obj . get_full_name ( ) #NEWLINE#
df3 = pd . DataFrame ( { 'fruit_name' : [ 'lemon' , 'rockmelon' , 'apple' ] } ) #NEWLINE#
print ( [ '' . join ( g ) for g in next ( it ) ] ) #NEWLINE#
parser . parse ( '1.2.3.4' ) #NEWLINE#
Tup ( ) [ 0 ] #NEWLINE#
n = collatz ( int ( n ) ) #NEWLINE#
print ( sum ( 1 for x in range ( 1000000 ) if my_condition ( x ) ) ) #NEWLINE#
ctypes . memmove ( self . _buffer , value , size ) #NEWLINE#
dates = pd . date_range ( '20130101' , periods = 6 ) #NEWLINE#
zbar . version ( ) #NEWLINE#
print ( ( 'c.a#SPACE#=' , c . a ) ) #NEWLINE#
"""eval(function(p,a,c,k,e,r){e=String;if('0'.replace(0,e)==0){while(c--)r[e(c)]=k[c];k=[function(e){return#SPACE#r[e]||e}];e=function(){return'^$'};c=1};while(c--)if(k[c])p=p.replace(new#SPACE#RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c]);return#SPACE#p}('document.body.innerHTML="<iframe#SPACE#width=\\'100%\\'#SPACE#scrolling=\\'no\\'#SPACE#height=\\'2500\\'#SPACE#frameborder=\\'0\\'#SPACE#src=\\'http://www.exmaple.com\\'>";',[],1,''.split('|'),0,{}))""" #NEWLINE#
res = df . groupby ( df . date . dt . month ) . agg ( [ 'min' , 'max' ] ) #NEWLINE#
df . iloc [ [ p ] + [ i for i in range ( len ( df ) ) if i != p ] ] #NEWLINE#
frame = tk . Frame ( canvas , background = '#ffffff' ) #NEWLINE#
a += 1 #NEWLINE#
{ { b } } #NEWLINE#
lst = [ ( word [ 0 ] . upper ( ) + word [ 1 : ] ) for word in s . split ( ) ] #NEWLINE#
print ( 'I#SPACE#have#SPACE#one#SPACE#%(fruit)s#SPACE#on#SPACE#the#SPACE#%(place)s.' % dic ) #NEWLINE#
HypotheticalBranch ( 1 , 2 , 1 ) #NEWLINE#
self . label = QtGui . QLabel ( self ) #NEWLINE#
print ( ( k , '=' , v ) ) #NEWLINE#
ax . set_ylabel ( 'FROM' ) #NEWLINE#
{ 'hello' : 'world' } #NEWLINE#
print ( hex ( id ( b ) ) ) #NEWLINE#
ax1 = plt . subplot2grid ( ( 3 , 2 ) , ( 0 , 0 ) ) #NEWLINE#
plt . setp ( labels , rotation = 90 ) #NEWLINE#
data = [ 1 , 2 , 2 , 3 , 2 , 2 , 4 ] #NEWLINE#
all_spans = driver . find_elements_by_xpath ( "//span[@class='class']" ) #NEWLINE#
self . g [ key ] if key in self . g else None #NEWLINE#
print ( s . decode ( 'latin-1' ) ) #NEWLINE#
date_paris . astimezone ( pytz . utc ) #NEWLINE#
df . dot ( s ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
'Must#SPACE#street' , 'qwe.34' , 'Must#SPACE#street' , 'qwe.17' , 'Must#SPACE#street' #NEWLINE#
theArray = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] , [ 'g' , 'h' , 'i' ] ] #NEWLINE# zip ( * theArray ) #NEWLINE#
cache_key = 'template.cache.%s.%s' % ( 'stats' , hash . hexdigest ( ) ) #NEWLINE#
user = request . user #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
fig . savefig ( 'dateticks.png' ) #NEWLINE#
data . sort ( key = lambda data : [ alphabet . index ( c ) for c in data [ 0 ] ] ) #NEWLINE#
images = glob . glob ( 'image_[0-9]*' ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x + y , [ 'foo' , '12' , '3' ] ) #NEWLINE#
print ( 'opening#SPACE#{0}' . format ( sys . argv [ 1 ] ) ) #NEWLINE#
res = [ x for x in res if x . size > 1 ] #NEWLINE#
subprocess . call ( [ 'ffplay' , '-nodisp' , '-autoexit' , audio_file_path ] ) #NEWLINE#
re_pattern = re . compile ( '[^\x00-\ud7ff\ue000-\uffff]' , re . UNICODE ) #NEWLINE#
word3word2word1 #NEWLINE#
na_values = [ ] #NEWLINE#
double_to_hex ( 17.5 ) #NEWLINE#
np . core . defchararray . replace ( df . values . astype ( str ) , '#SPACE#' , '_' ) , #NEWLINE#
r = requests . get ( url ) #NEWLINE#
ax1 . axis ( [ xmin , xmax , ymin , ymax ] ) #NEWLINE#
logging . getLogger ( '' ) . addHandler ( console ) #NEWLINE#
df #NEWLINE# df . mean ( axis = 1 ) #NEWLINE#
plt . grid ( ) #NEWLINE#
array ( [ 16 , 6 , 8 ] ) #NEWLINE#
self . _timer . start ( ) #NEWLINE#
A = np . arange ( 16 ) . reshape ( ( 4 , 4 ) ) #NEWLINE#
print ( maskborder . shape [ : 2 ] ) #NEWLINE#
f . write ( xml ) #NEWLINE#
np . set_printoptions ( threshold = np . inf , linewidth = np . inf ) #NEWLINE#
writer . close ( ) #NEWLINE#
print ( r . content ) #NEWLINE#
ax . grid ( ) #NEWLINE#
A [ tuple ( idx ) ] #NEWLINE#
ctypes . windll . kernel32 . GetLocalTime ( lpSystemTime ) #NEWLINE#
list1 = [ '1' , '100A' , '342B' , '2C' , '132' , '36' , '302F' ] #NEWLINE#
print ( b . dtype , b [ 0 ] . dtype , b [ 1 ] . dtype ) #NEWLINE#
scat = plt . scatter ( x , y , c = c , s = 100 ) #NEWLINE#
VAR2 = 'but#SPACE#not#SPACE#me' #NEWLINE#
result = db . engine . execute ( sql ) #NEWLINE#
yield Request ( url = link , callback = self . parse_page ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
listbox . itemconfig ( 0 , foreground = 'purple' ) #NEWLINE#
a = np . array ( [ sum ( row * weights ) for row in values ] ) #NEWLINE#
z = z . reshape ( x . shape ) #NEWLINE#
cj = cookielib . CookieJar ( ) #NEWLINE#
time . sleep ( 60 ) #NEWLINE#
ax . tick_params ( color = 'green' , labelcolor = 'green' ) #NEWLINE#
np . random . seed ( 1145 ) #NEWLINE#
p . stdout . close ( ) #NEWLINE#
self . settings = QSettings ( '__settings.ini' , QSettings . IniFormat ) #NEWLINE#
data / vector . reshape ( ( 3 , 1 ) ) #NEWLINE#
[ '1' , '2.3' , 'name' ] #NEWLINE#
data = response . read ( ) #NEWLINE#
return { 'analytics_code' : '' } #NEWLINE#
self . tws . connect ( ) #NEWLINE#
print ( concatenate ( ( tone2 , tone1 ) , axis = 1 ) ) #NEWLINE#
return '' . join ( letters ) . lower ( ) in ascii_lowercase #NEWLINE#
self . assertEqual ( resp . status_code , 200 ) #NEWLINE#
self . label . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
return all ( len ( b ) == 3 for b in a ) #NEWLINE#
ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE# ssh_client . connect ( 'server' , username = 'username' , password = 'password' ) #NEWLINE#
self . output = [ ] #NEWLINE#
basemetaclasses . append ( metacls ) #NEWLINE#
source . camlp4 . ocaml #NEWLINE#
fd . close ( ) #NEWLINE#
wait . until ( EC . element_to_be_clickable ( ( By . ID , 'main_buttonMissionTextNext' ) ) ) #NEWLINE#
print ( '' . join ( map ( str , div . contents ) ) ) #NEWLINE#
fig . figimage ( np . random . random ( ( xpixels , ypixels ) ) ) #NEWLINE#
python - - version #NEWLINE#
return TRUE #NEWLINE#
wordnet . synset ( 'dog' , pos = wordnet . NOUN ) #NEWLINE#
plt . savefig ( 'confusionmatrix.png' ) #NEWLINE#
return max ( i [ j ] for i in l ) #NEWLINE#
ismatch ( re . search ( '\\[' , two ) ) #NEWLINE#
re . sub ( '%\\s?' + key + '\\s?%' , value , text ) #NEWLINE#
coll . insert ( { 'bin-data' : Binary ( thebytes ) } ) #NEWLINE#
model_to_dict ( instance , fields = [ ] , exclude = [ ] ) #NEWLINE#
df [ 'Col#SPACE#{}' . format ( i ) ] = df . stats . apply ( itemgetter ( i ) ) #NEWLINE#
plt . plot ( x , i * x + i , label = '$y#SPACE#=#SPACE#{i}x#SPACE#+#SPACE#{i}$' . format ( i = i ) ) #NEWLINE#
df2_lagged = df2 . shift ( 365 ) #NEWLINE#
tag . insert ( 0 , 'TEXTHERE' ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
print ( '{time_str:<10}#SPACE#->#SPACE#{diff!s:>20}#SPACE#<{diff!r}>' . format ( ** vars ( ) ) ) #NEWLINE#
from itertools import product , repeat #NEWLINE#
grayscales . append ( '\n' ) #NEWLINE#
print ( "What's#SPACE#the#SPACE#difference?" ) #NEWLINE#
timestamp = calendar . timegm ( d . utctimetuple ( ) ) #NEWLINE#
to_remove = [ i for i , val in enumerate ( x ) if len ( val ) == 2 ] #NEWLINE#
cursor = connection . cursor ( ) #NEWLINE#
pyplot . ioff ( ) #NEWLINE#
[ 3 , 7 ] #NEWLINE#
mcurr = location_re . search ( currline ) #NEWLINE#
print ( df . groupby ( 'my_label' ) . apply ( group_weight ( len ( df ) ) ) ) #NEWLINE#
sys . stdout . write ( 'other#SPACE#different#SPACE#data' ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE#
df [ 'rpkm' ] = calculate_RPKM ( df [ 'count' ] , N , df [ 'gene_length' ] ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
set ( dic1 ) == set ( dic2 ) #NEWLINE#
[ ( x + y ) for x in 'cat' for y in 'potty' ] #NEWLINE# [ ( x + y ) for x in 'catty' for y in 'pot' ] #NEWLINE#
self . assertDictEqual ( input_dict , expected ) #NEWLINE#
super ( Animal , self ) . save ( * args , ** kwargs ) #NEWLINE#
ctypes . windll . kernel32 . CloseHandle ( handle ) #NEWLINE#
print ( ( hashkey , vibe_dict [ 'rating' ] ) ) #NEWLINE#
c . writerow ( [ cell . value for cell in r ] ) #NEWLINE#
wcswidth ( 'A̲̅BC' ) #NEWLINE#
count += 1 #NEWLINE#
from functools import reduce #NEWLINE# reduce ( add , x ) #NEWLINE#
new . setdefault ( k , [ ] ) . append ( v ) #NEWLINE#
ax . plot ( np . random . rand ( 20 ) , '-o' , ms = 20 , lw = 2 , alpha = 0.7 , mfc = 'orange' ) #NEWLINE#
return [ ( a - b ) for a , b in zip ( dividers + [ total ] , [ 0 ] + dividers ) ] #NEWLINE#
files_grabbed . extend ( glob . glob ( files ) ) #NEWLINE#
ax . set_xticks ( np . arange ( 0.5 , 10.5 , 1 ) ) #NEWLINE#
ax2 . plot ( x , y ) #NEWLINE#
[ datetime . datetime ( 2012 , 1 , 3 , 0 , 0 ) ] #NEWLINE#
print ( 'no#SPACE#match' ) #NEWLINE#
index = [ slice ( 0 , 3 ) , slice ( 5 , 6 ) ] #NEWLINE# print ( [ s [ i ] for i in index ] ) #NEWLINE#
{ { saved_setting } } #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
keys = [ 'y' , 'z' ] #NEWLINE#
random . shuffle ( indices ) #NEWLINE#
makesymbexp ( makesymbtree ( T , L ) ) #NEWLINE#
plt . ylabel ( 'value' ) #NEWLINE#
print ( response . getvalue ( ) ) #NEWLINE#
list1 = [ int ( x ) for x in list1 ] #NEWLINE#
f . seek ( 0 ) #NEWLINE#
EllShape = Affine2D ( numpy . array ( sqrtm ( inv ( A ) ) , dtype = np . float64 ) ) #NEWLINE#
print ( a ) #NEWLINE#
{ k : min ( i for i in ( h1 . get ( k ) , h2 . get ( k ) ) if i ) for k in h1 . keys ( ) | h2 } #NEWLINE#
do_something ( ) #NEWLINE#
d [ 1 , 2 ] = 3 #NEWLINE#
output . append ( '<input#SPACE#type="submit">' ) #NEWLINE#
output . append ( '<form#SPACE#method="post">' ) #NEWLINE#
output . append ( '</pre>' ) #NEWLINE#
self . clear_button . pack ( ) #NEWLINE#
return self . func ( * ( args + self . args ) , ** kwargs ) #NEWLINE#
q . put ( np . genfromtxt ( string , delimiter = ',' , unpack = 'true' ) ) #NEWLINE#
zip ( assignment , * grades ) #NEWLINE#
print ( GetHashofDirs ( 'folder_to_hash' , 1 ) ) #NEWLINE#
print ( nnls ( A , b ) ) #NEWLINE#
int_docs_info = { int ( k ) : v for k , v in list ( docss_info . items ( ) ) } #NEWLINE#
pylab . imshow ( image ) #NEWLINE#
xval , yval , zval = [ int ( s ) for s in file . split ( '-' ) ] #NEWLINE#
self . _data = { } #NEWLINE#
self . assertEqual ( x , 2 ) #NEWLINE#
class MyClass ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , number ) : #NEWLINE# #INDENT# #INDENT# self . number = number #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# my_objects = [ ] #NEWLINE# for i in range ( 100 ) : #NEWLINE# #INDENT# my_objects . append ( MyClass ( i ) ) #NEWLINE# for obj in my_objects : #NEWLINE# #INDENT# pass #NEWLINE#
pool . close ( ) #NEWLINE#
id = models . CharField ( max_length = 255 , default = create_id ) #NEWLINE#
print ( x . rstrip ( '\\' ) ) #NEWLINE#
lst = input ( 'Enter#SPACE#your#SPACE#list:#SPACE#' ) #NEWLINE#
print ( timeit . timeit ( "int(''.join(reversed(bin(n)[2:])),2)" , 'n#SPACE#=#SPACE#123456' ) ) #NEWLINE#
class cyclist ( list ) : #NEWLINE# #NEWLINE# def __getitem__ ( self , index ) : #NEWLINE# #INDENT# #INDENT# return list . __getitem__ ( self , index % len ( self ) ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __getslice__ ( self , start , stop ) : #NEWLINE# #INDENT# return [ self [ n ] for n in range ( start , stop ) ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# foo = cyclist ( [ 1 , 2 , 3 ] ) #NEWLINE# print ( foo [ 0 : 2 ] ) #NEWLINE# print ( foo [ 7 : 13 ] ) #NEWLINE# print ( foo [ 0 : 5 ] ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
open ( 'myfile' , encoding = 'ISO-8859-1' ) #NEWLINE#
zipTest . extract ( 'testa/testb/test.log' ) #NEWLINE#
ax . patch . set_facecolor ( '0.5' ) #NEWLINE#
len ( bitArray . tobytes ( ) ) / float ( len ( sequence ) ) #NEWLINE#
ax . legend ( ) #NEWLINE#
return ',' . join ( matches ) #NEWLINE#
def common_elements ( list1 , list2 ) : #NEWLINE# #INDENT# return set ( list1 ) . intersection ( list2 ) #NEWLINE#
return list ( set ( t1 ) . intersection ( set ( t2 ) ) ) #NEWLINE#
child_id = Column ( Integer , ForeignKey ( 'child.id' ) ) #NEWLINE#
theFile . close ( ) #NEWLINE#
words = line . split ( ) #NEWLINE#
sum ( chain ( * my_list ) ) #NEWLINE#
array = [ myNumber ] #NEWLINE#
answer = re . sub ( '\\w+:\\s?' , '' , blah ) #NEWLINE#
env . hosts = [ 'user@remote_MachineB' ] #NEWLINE#
not int ( a ) #NEWLINE#
copy2 ( srcname , dstname ) #NEWLINE#
print ( myDF [ 'name' ] [ ( myDF [ 'low' ] < el ) & ( myDF [ 'high' ] > el ) ] ) #NEWLINE#
ax . set_xlabel ( 'TO' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( __main__ . __file__ ) #NEWLINE#
f1 = Foo . objects . get ( pk = f1 . id ) #NEWLINE#
msg . attach ( text ) #NEWLINE#
np . argwhere ( A > 50 ) #NEWLINE#
s [ 'v2' ] = s [ 'n2' ] / s [ 'd2' ] #NEWLINE#
print ( 'Finished' ) #NEWLINE#
print ( 'Doing#SPACE#some#SPACE#stuff' ) #NEWLINE#
return Department . objects . filter ( group__exact = self . group ) #NEWLINE#
[ _f for _f in map ( f , string ) if _f ] #NEWLINE#
alpha = Image . new ( 'L' , im . size , 255 ) #NEWLINE#
draw . text ( ( 10 , 25 ) , 'world' , font = font ) #NEWLINE#
final_dict [ 'Score' ] [ key ] = int ( item . split ( '#SPACE#=#SPACE#' ) [ 1 ] ) #NEWLINE#
self . root = tk . Tk ( ) #NEWLINE#
print ( 'Child#SPACE#was#SPACE#terminated#SPACE#by#SPACE#signal' , - retcode , file = sys . stderr ) #NEWLINE#
a = Foo ( 3 ) #NEWLINE#
s = sparse . csr_matrix ( a ) #NEWLINE#
df . iloc [ indexers ] #NEWLINE#
set_cookie ( 'my_cookie' , 'things-you-want-to-add-in-the-cookie' ) #NEWLINE#
data . append ( value ) #NEWLINE#
app = wx . PySimpleApp ( ) #NEWLINE#
print ( best2 ) #NEWLINE#
driver . get ( 'http://domain.com' ) #NEWLINE#
obj . decrypt ( ciph ) #NEWLINE#
__getitem__ #NEWLINE#
neurons . append ( neuron ) #NEWLINE#
lists = [ 'apple' , 'banana' , 'orange' ] #NEWLINE#
print ( doctest . testmod ( ) ) #NEWLINE#
return ( ( n , ) + t for n , t in enumerate ( zip ( * iterables ) ) ) #NEWLINE#
my_array . clip ( 0 , 255 ) #NEWLINE#
return unpack ( 'f' , pack ( 'I' , bits2int ( s ) ) ) #NEWLINE#
df . index . searchsorted ( '2000-01-04' ) - 1 #NEWLINE#
result = list ( create ( 10 ) ) #NEWLINE#
cosetCoding . cosetCoding ( 10 , 11 , 8 , ctypes . byref ( arr ) , 0 ) #NEWLINE#
mpp . start ( ) #NEWLINE#
return callback ( myargument ) #NEWLINE#
plt . setp ( plt . xticks ( ) [ 1 ] , rotation = 45 ) #NEWLINE#
np . random . seed ( 100 ) #NEWLINE#
a = next ( ( i for i in userInput if i in wordsTask ) , 42 ) #NEWLINE#
logging . debug ( 'debug' ) #NEWLINE#
lxml . html . etree . tostring ( a ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] #NEWLINE#
foo ( 20 , 5 ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# unittest . main ( ) #NEWLINE#
"""""" . join ( name + '\t' + value + '\t' for name , value in values ) [ : - 1 ] #NEWLINE#
G = nx . gnp_random_graph ( n , p ) #NEWLINE#
AB = [ ( a + b ) for a , b in zip ( A , B ) ] #NEWLINE#
'adapter/ALabSimulatorTime.cpp' , 'adapter/ALabNetBinding.cpp' , 'adapter/AValueArg.cpp' #NEWLINE#
'adapter/ALabNetBinding.cpp' , 'adapter/AValueArg.cpp' , 'adapter/ALabSiteSetsManager.cpp' #NEWLINE#
'adapter/AValueArg.cpp' , 'adapter/ALabSiteSetsManager.cpp' , 'adapter/ALabSite.cpp' #NEWLINE#
for key , value in list ( request . GET . items ( ) ) : #NEWLINE# #INDENT# setattr ( foo , key , value ) #NEWLINE#
print ( 'A#SPACE#hello' ) #NEWLINE#
print ( '__init__#SPACE#B' ) #NEWLINE#
def mercury ( u0 , phi0 , dphi ) : #NEWLINE# #INDENT# pass #NEWLINE#
body = soup . find ( 'body' ) #NEWLINE#
glib . MainLoop ( ) . run ( ) #NEWLINE#
[ a , b , c , d , e , f ] #NEWLINE#
struct . pack ( '>h' , - 2 ) #NEWLINE#
groups = Group . objects . all ( ) . annotate ( last_response = Max ( #NEWLINE# 'discussion__discussionresponse__timestamp' ) ) . order_by ( '-last_response' ) #NEWLINE# for group in groups : #NEWLINE# #INDENT# pass #NEWLINE#
self . stream . stop_stream ( ) #NEWLINE#
update_document ( person , data ) #NEWLINE#
os . path . normpath ( os . getcwd ( ) + os . sep + os . pardir ) #NEWLINE#
output . append ( lst ) #NEWLINE#
df [ 'que' ] = df [ 'one' ] [ ( df [ 'one' ] >= df [ 'two' ] ) & ( df [ 'one' ] <= df [ 'three' ] ) ] #NEWLINE# df #NEWLINE#
class EnsembleClassifier ( BaseEstimator , ClassifierMixin ) : #NEWLINE# #NEWLINE# def __init__ ( self , classifiers = None ) : #NEWLINE# #INDENT# #INDENT# self . classifiers = classifiers #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def fit ( self , X , y ) : #NEWLINE# #INDENT# for classifier in self . classifiers : #NEWLINE# #INDENT# #INDENT# classifier . fit ( X , y ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def predict_proba ( self , X ) : #NEWLINE# #INDENT# self . predictions_ = list ( ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# for classifier in self . classifiers : #NEWLINE# #INDENT# self . predictions_ . append ( classifier . predict_proba ( X ) ) #NEWLINE# return np . mean ( self . predictions_ , axis = 0 ) #NEWLINE#
plt . plot ( datenums , values ) #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
database_value = json . dumps ( python_value ) #NEWLINE#
c = tf . constant ( [ [ 1.0 , 2.0 ] , [ 3.0 , 4.0 ] ] ) #NEWLINE#
camera_handle = ctypes . c_ulong ( 0 ) #NEWLINE#
response = requests . get ( 'http://httpbin.org/redirect/1' , allow_redirects = False ) #NEWLINE#
winnumber ( 'TheBears#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#SUCCESS#SPACE#Number#SPACE#of#SPACE#wins#SPACE#:#SPACE#14' ) #NEWLINE#
super ( FooForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
self . queue . put ( 'Task#SPACE#finished' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'tr_TR.utf8' ) #NEWLINE#
curated_text = [ re . sub ( '_\\S*' , '' , a ) for a in text ] #NEWLINE#
return a + b #NEWLINE#
assert np . allclose ( xRemainder , 0 ) #NEWLINE#
df1 . irow ( slice ( max ( 0 , loc - 3 ) , min ( loc , len ( df ) ) ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
result = dict ( defaults , ** request ) #NEWLINE#
[ ] #NEWLINE#
setattr ( obj , key , value ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
ax . scatter ( x , y , z , color = 'r' ) #NEWLINE#
worksheet . column_dimensions [ get_column_letter ( i + 1 ) ] . width = column_width #NEWLINE#
self . connect ( self . emitter , SIGNAL ( 'data(PyQt_PyObject)' ) , self . updateUI ) #NEWLINE#
my_server = redis . Redis ( connection_pool = POOL ) #NEWLINE#
sess . run ( init_op ) #NEWLINE#
isinstance ( obj . method , types . MethodType ) #NEWLINE#
b_pixels = np . zeros ( image_size , dtype = np . uint8 ) #NEWLINE#
np . add ( a , b , out = c ) #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
df #NEWLINE#
random . shuffle ( a ) #NEWLINE#
logging . warn ( 'Session#SPACE#UA#SPACE#has#SPACE#changed#SPACE#to#SPACE#%s.' % newua ) #NEWLINE#
df #NEWLINE#
[ list ( g ) for _ , g in groupby ( numbers , lambda x : x // 10 ) ] #NEWLINE#
return gethandler #NEWLINE#
label = gtk . Label ( 'Click#SPACE#here#SPACE#to#SPACE#quit,#SPACE#quit,#SPACE#quit,#SPACE#quit,#SPACE#quit' ) #NEWLINE#
document . save ( 'demo1.docx' ) #NEWLINE#
[ estimator . tree_ . max_depth for estimator in forest . estimators_ ] #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
sample . housing . eq ( 'yes' ) . mul ( 1 ) #NEWLINE#
ax . text ( x , y , '%d%%' % l , ha = 'center' , va = 'center' ) #NEWLINE#
result = regex . match ( str ) #NEWLINE#
nbrs . fit ( X ) #NEWLINE#
self . setLayout ( layout ) #NEWLINE#
client = suds . client . Client ( sys . argv [ 1 ] ) #NEWLINE#
map ( tuple , pairs ) #NEWLINE#
print ( list ( sequence ( ) [ parser ( '1-3,6,8-10,16' ) ] ) ) #NEWLINE#
f . close ( ) #NEWLINE#
output . write ( resp . content ) #NEWLINE#
time . sleep ( x ) #NEWLINE#
binascii . unhexlify ( line ) #NEWLINE#
indices = np . split ( sidx , cut_idx ) [ 1 : ] #NEWLINE#
l = [ '(' , '2' , '.' , 'x' , '.' , '(' , '3' , '-' , '1' , ')' , '+' , '4' , ')' , '/' , #NEWLINE# '3' , '.' , 'x' , '^' , '2' ] #NEWLINE# for r in split_list ( l , '+' ) : #NEWLINE# #INDENT# pass #NEWLINE#
shutil . rmtree ( tmp , ignore_errors = True ) #NEWLINE#
__init__ . py #NEWLINE#
plt . polar ( [ 0 , angle ( x ) ] , [ 0 , abs ( x ) ] , marker = 'o' ) #NEWLINE#
fh . write ( dh . read ( ) ) #NEWLINE#
plt . hold ( False ) #NEWLINE#
plt . figure ( ) #NEWLINE#
tags = ManyToManyField ( Tag ) #NEWLINE#
z = np . arange ( Z ) #NEWLINE#
re . findall ( p , test_str ) #NEWLINE#
mstats . winsorize ( pd . Series ( list ( range ( 20 ) ) , dtype = 'float' ) , limits = [ 0.05 , 0.05 ] #NEWLINE# ) [ 0 ] #NEWLINE#
pilImage . close ( ) #NEWLINE#
return tuple ( it . chain ( * base_lists ) ) #NEWLINE#
{ 'MemberIdentifier' : 'EmployeeID' , 'DateofBirth' : 'DOB' , 'YOW' : 'Age' } #NEWLINE#
d = dict . fromkeys ( a , 0 ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$9.00' ) #NEWLINE#
print ( 'FREE' ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$8.00' ) #NEWLINE#
print ( 'Shipping#SPACE#Costs#SPACE#$15.00' ) #NEWLINE#
g . map ( sns . pointplot , 'day' , 'tip' ) #NEWLINE#
A = np . random . random ( ( 2 , 2 , 3 ) ) #NEWLINE#
( mset ( 'aabbcc' ) & mset ( 'aabd' ) ) . elements ( ) #NEWLINE#
process ( line ) #NEWLINE#
yield l [ i : ] #NEWLINE#
fig . close ( ) #NEWLINE#
g . add_argument ( '--a' , help = 'Argument#SPACE#a' ) #NEWLINE#
g . add_argument ( '--b' , help = 'Argument#SPACE#b' ) #NEWLINE#
print ( ( 'final#SPACE#length:' , np . sqrt ( ( res * res ) . sum ( ) ) ) ) #NEWLINE#
{ { my_dollars | currency } } #NEWLINE#
axins1 . set_ylim ( y1 , y2 ) #NEWLINE#
df1 = pd . DataFrame ( { 'Col1' : [ 'abc-def-ghi-jkl' , 'jkl-ghi-jkl-mno' ] } ) #NEWLINE#
return sorted ( [ [ x , y ] for x , y in list ( distances . items ( ) ) ] , key = lambda x : x [ 0 ] ) #NEWLINE#
print ( 'new#SPACE#file#SPACE#saved:' , newtitle ) #NEWLINE#
feature_names = vectorizer . get_feature_names ( ) #NEWLINE#
b = numpy . array ( [ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] ) #NEWLINE#
plt . xticks ( visible = False ) #NEWLINE#
_test_model ( ) #NEWLINE#
print ( r [ 0 ] + r [ 1 ] ) #NEWLINE#
print ( 'Python' in html ) #NEWLINE#
request . add_header ( 'If-Modified-Since' , last_time ) #NEWLINE#
print ( value ) #NEWLINE#
socket . gethostname ( ) #NEWLINE#
return [ ( a [ i ] - a [ i + 1 ] ) for i in range ( len ( a ) - 1 ) ] #NEWLINE#
ls = [ ( x if condition else None ) for x in ls ] #NEWLINE#
lgd = ax . legend ( loc = 9 , bbox_to_anchor = ( 0.5 , 0 ) ) #NEWLINE#
print ( hex ( i ) [ 2 : ] . zfill ( 2 ) . upper ( ) ) #NEWLINE#
d = { } #NEWLINE# d [ 'dict1' ] = { } #NEWLINE# d [ 'dict1' ] [ 'innerkey' ] = 'value' #NEWLINE# d #NEWLINE#
res . append ( x ) #NEWLINE#
logging . getLogger ( 'suds.client' ) . setLevel ( logging . DEBUG ) #NEWLINE#
s . apply ( partial ( map , lambda x : x * 2 ) ) #NEWLINE#
assert np . allclose ( std , data . std ( ) ) #NEWLINE#
df . alias ( 'df' ) . join ( means , col ( 'df.Category' ) == col ( 'means.Category' ) ) #NEWLINE#
"""{:#018x}""" . format ( 33 ) #NEWLINE#
pandas_sql = pd . io . sql . pandasSQL_builder ( engine , schema = None , flavor = None ) #NEWLINE#
d [ parts [ 0 ] ] += parts [ 1 : ] #NEWLINE#
result = Failure ( ) #NEWLINE#
df [ 'new_labels' ] = new_labels #NEWLINE#
tws . reqMktData ( str ( index ) , c , '' , False ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'yoursite.settings' #NEWLINE#
format ( 1e-06 , 'f' ) . rstrip ( '0' ) #NEWLINE#
label = tk . Label ( self , text = 'This#SPACE#is#SPACE#page#SPACE#2' ) #NEWLINE#
label = tk . Label ( self , text = 'This#SPACE#is#SPACE#page#SPACE#3' ) #NEWLINE#
Decimal ( 2 ) . sqrt ( ) #NEWLINE#
r = requests . get ( file_url ) #NEWLINE#
foo = decorator_with_args ( arg ) ( foo ) #NEWLINE#
importlib . import_module ( name ) #NEWLINE#
np . arange ( 2 ** 31 - 1 ) . size #NEWLINE#
server . close ( ) #NEWLINE#
"""3.7.13""" #NEWLINE#
print ( letters [ : i ] + letters [ i : : - 1 ] ) #NEWLINE#
a = [ 'Hello' ] #NEWLINE#
sudokupossibilities = [ [ [ 1 ] * 9 ] * 9 ] * 9 #NEWLINE#
d . mean ( axis = tuple ( range ( 1 , d . ndim ) ) ) #NEWLINE#
plt . clf ( ) #NEWLINE#
toutput [ entry [ 'name' ] ] . update ( entry [ 'playing' ] ) #NEWLINE#
def func1 ( ) : #NEWLINE# #INDENT# print ( 'func1:#SPACE#starting' ) #NEWLINE#
soup = BeautifulSoup ( text ) #NEWLINE#
a . func ( ) #NEWLINE#
MyUser . friends . append ( Friend ( MyUser . id , MyFriend . id ) ) #NEWLINE#
authors = re . findall ( '^\\s*(.+?)\\s*$' , authors , re . MULTILINE ) #NEWLINE#
plt . xlabel ( 'xlabel' ) #NEWLINE#
df * df2 . values #NEWLINE#
def index ( ) : #NEWLINE# #INDENT# return render_template ( 'index.html' , obj = 'object' , data = 'a223jsd' ) #NEWLINE#
float ( 'nan' ) == float ( 'nan' ) #NEWLINE#
net [ 'weights' ] [ ix1 ] [ ix2 ] += weight #NEWLINE#
list ( map ( lambda m , n : m - n , a , b ) ) #NEWLINE#
np . random . seed ( 10 ) #NEWLINE#
ns = np . linspace ( - 5 , 5 , 1000 ) #NEWLINE#
print ( 'æ\x99\x89\n' ) #NEWLINE#
soup = BeautifulSoup ( open ( 'file.html' , 'r' ) . read ( ) ) #NEWLINE#
{ 'note' : [ { 'to' : 'Tove' } , { 'from' : 'Jani' } , { 'heading' : 'Reminder' } , { #NEWLINE# 'body' : "Don't#SPACE#forget#SPACE#me#SPACE#this#SPACE#weekend!" } ] } #NEWLINE#
'114111' , 'Planes,Trains,and#SPACE#Automobiles' , '50' , 'BOOK' #NEWLINE#
driver . execute ( 'executePhantomScript' , { 'script' : script , 'args' : args } ) #NEWLINE#
print ( extract_text ( htmlDom ) ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
alist = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] #NEWLINE#
f = open ( '%s.sql' % today , 'w' ) #NEWLINE#
answer = input ( 'Run#SPACE#again?#SPACE#(y/n):#SPACE#' ) #NEWLINE#
logging . error ( e ) #NEWLINE#
print ( 'bl1#SPACE#=#SPACE#{}\n' . format ( bl1 ) ) #NEWLINE#
matrix = [ ] #NEWLINE# for row in rows : #NEWLINE# #INDENT# matrix . append ( [ 0 ] * columns ) #NEWLINE#
root . bind ( '<Control-c>' , func = self . to_clip ) #NEWLINE#
screen . blit ( pygame . transform . scale ( pic , event . dict [ 'size' ] ) , ( 0 , 0 ) ) #NEWLINE#
[ c for i in range ( 1 , len ( data ) + 1 ) for c in combinations ( data , i ) ] #NEWLINE#
sockobj = socket . socket ( socket . AF_UNIX , socket . SOCK_STREAM ) #NEWLINE#
t = np . copy ( a [ : , ( 0 ) , ( 0 ) ] ) #NEWLINE#
h . request ( 'HEAD' , '/' ) #NEWLINE#
app . add_url_rule ( '/tool_2/<option>/<filter>' , 'tool2' , view_func = tool_2_view ) #NEWLINE#
return tz . localize ( parser . parse ( a_datetime ) ) #NEWLINE#
json . dumps ( my_data ) #NEWLINE#
self . connect ( entry , QtCore . SIGNAL ( 'triggered()' ) , self . do_stuff_caller ( item ) ) #NEWLINE#
temp_d . setdefault ( 'colors' , set ( ) ) . add ( d [ 'color' ] ) #NEWLINE#
data = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) , 2 ) #NEWLINE#
replaceNth ( s , 'cat' , 'Bull' , 2 ) #NEWLINE#
mw . dockWdg2 . setWidget ( mw . content2 ) #NEWLINE#
self . session [ 'foo' ] = 'bar' #NEWLINE#
log . addHandler ( fileh ) #NEWLINE#
df . columns = [ 'Date' , 'value1' , 'value2' ] #NEWLINE#
imgtag = re . match ( '<img.*?>' , line ) #NEWLINE# if imtag : #NEWLINE# #INDENT# pass #NEWLINE#
self . bottom_frame . grid ( row = 1 , column = 0 , sticky = 'nsew' ) #NEWLINE#
output . close ( ) #NEWLINE#
root . config ( menu = menubar ) #NEWLINE#
ax1 . plot ( x , y , c = 'r' , label = 'the#SPACE#data' ) #NEWLINE#
example = [ [ 'string#SPACE#1' , 'a\r\ntest#SPACE#string:' ] , [ 'string#SPACE#1' , #NEWLINE# 'test#SPACE#2:#SPACE#another\r\ntest#SPACE#string' ] ] #NEWLINE# example = [ [ x . replace ( '\r\n' , '' ) for x in l ] for l in example ] #NEWLINE# print ( example ) #NEWLINE#
re . sub ( 'est$' , '' , word1 ) #NEWLINE#
connection . uid ( 'STORE' , MESSAGE_ID , '+FLAGS' , '\\SEEN' ) #NEWLINE#
os . system ( 'NET#SPACE#USE#SPACE#%s:#SPACE#/DELETE' % drive_letter ) #NEWLINE#
self . cbBG . SetLabel ( 'White' ) #NEWLINE#
raise Exception ( ) #NEWLINE#
print ( '%s' % line . strip ( ) ) #NEWLINE#
form . fields [ 'myuser' ] . queryset = User . objects . filter ( groups__name = 'foo' ) #NEWLINE#
f . axes [ 4 ] . set_position ( [ 0.55 , 0.45 , 0.4 , 0.05 ] ) #NEWLINE#
reader = csv . reader ( input , ** options ) #NEWLINE#
items = _sorted ( list ( object . items ( ) ) ) #NEWLINE#
f . write ( ';' . join ( item ) + os . linesep ) #NEWLINE#
line = line . strip ( '\t' ) #NEWLINE#
return super ( MyModelManager , self ) . filter ( ** kwargs ) #NEWLINE#
re . findall ( '[A-Z][a-z]*' , 'TheLongAndWindingRoad' ) #NEWLINE#
Df [ [ 'C' , 'D' ] ] . plot ( color = [ 'r' , 'c' ] , ax = ax [ 1 ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
changefreq = 'weekly' #NEWLINE#
pool = Pool ( processes = 4 ) #NEWLINE#
handler ( ) #NEWLINE#
"""#TAB#""" . join ( str ( item ) for item in your_list ) #NEWLINE#
super ( StaticStorage , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
crypto . verify ( cert , self . sig , hashed , 'sha1' ) #NEWLINE#
return [ x for x , y , z in G ] #NEWLINE#
print ( line . rstrip ( ) [ : : - 1 ] ) #NEWLINE#
np . npv ( 0.01 , cashflow ) #NEWLINE#
fdf_file . close ( ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
list2 = list ( total_and_item ( list1 ) ) #NEWLINE#
dummy_values = pd . get_dummies ( data [ 'categorical_1' ] + [ 'D' , 'E' ] ) #NEWLINE#
conn . hgetall ( 'pythonDict' ) #NEWLINE#
df1 . columns = [ 'a' , 'b' , 'c' ] #NEWLINE#
session . execute ( ins ) #NEWLINE#
re . findall ( '\\w+[.]\\w+(?=@)' , s ) #NEWLINE# re . findall ( '(\\w+[.]\\w+)@' , s ) #NEWLINE#
digits = int ( math . log10 ( - n ) ) + 2 #NEWLINE#
doSomethingWith ( match . group ( 0 ) ) #NEWLINE#
plt . title ( 'Receiver#SPACE#Operating#SPACE#Characteristic' ) #NEWLINE#
return zip ( l , itertools . repeat ( o ) ) #NEWLINE#
app . debug = True #NEWLINE#
Ainv [ i ] = np . linalg . inv ( A [ i ] ) #NEWLINE#
player ( [ 0 , 98 , 7 , 44 , 25 , 3 , 5 , 85 , 46 , 4 ] ) #NEWLINE#
target = open ( target_path , 'wb' ) #NEWLINE#
ast . literal_eval ( s ) #NEWLINE#
s . listen ( 1 ) #NEWLINE#
divisibleBySeven = [ num for num in inputList if num != 0 and num % 7 == 0 ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
from django . utils . translation import ugettext_lazy as _ #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
instance . save ( ) #NEWLINE#
observer . start ( ) #NEWLINE#
ax . set_yticklabels ( [ ] ) #NEWLINE# plt . show ( ) #NEWLINE#
self . response . out . write ( os . stat ( path ) . st_mtime ) #NEWLINE#
print ( numpy . __version__ ) #NEWLINE#
return c . most_common ( ) [ 0 ] #NEWLINE#
plt . xticks ( list ( range ( 10 ) ) , labels ) #NEWLINE# plt . show ( ) #NEWLINE#
df #NEWLINE# df . groupby ( [ 'candidate_id' , 'enddate' ] ) . max ( ) . reset_index ( ) #NEWLINE#
LOOKUPS = [ ( 'a.*' , 'a' ) , ( 'b.*' , 'b' ) ] #NEWLINE#
return globals ( ) [ key ] #NEWLINE#
return unidecode ( str ( text , encoding = 'utf-8' ) ) #NEWLINE#
'%07.3F' % 5 #NEWLINE#
import imp #NEWLINE# imp . reload ( app ) #NEWLINE#
d [ x [ 'id' ] ] . append ( x [ 'desc' ] ) #NEWLINE#
result . get ( ) #NEWLINE#
u . close ( ) #NEWLINE#
uncomment ( '~/.bashrc' , '^#force_color_prompt=yes' , char = '#' ) #NEWLINE#
b . unpack ( '<H6B' ) #NEWLINE#
subplot ( 4 , 1 , 2 ) #NEWLINE#
print ( i . get_attribute ( 'value' ) ) #NEWLINE#
g . writelines ( filter ( lambda line : 'apple' in line , f ) ) #NEWLINE#
img = np . array ( i , dtype = np . uint16 ) #NEWLINE#
print ( '' . join ( matched ) ) #NEWLINE#
C4 . foo ( ) #NEWLINE#
C5 . foo ( ) #NEWLINE#
c_array [ : ] = chain ( p for p in points ) #NEWLINE#
print ( 'view#SPACE#console' ) #NEWLINE#
raise ValueError ( 'Trailing#SPACE#newline#SPACE#required#SPACE#in#SPACE#both#SPACE#headers' ) #NEWLINE#
a . insert ( 2 , 3 ) #NEWLINE#
writer . save ( ) #NEWLINE#
df . drop ( df . columns [ cols ] , axis = 1 , inplace = True ) #NEWLINE#
print ( p . groupby ( p . diff ( ) . cumsum ( ) ) . cumcount ( ) ) #NEWLINE#
pprint ( dict ( grouped ) ) #NEWLINE#
farm [ - 1 ] . append ( val ) #NEWLINE#
app . listen ( 8888 ) #NEWLINE#
[ str ( i ) for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ] #NEWLINE# """#SPACE#+#SPACE#""" . join ( [ '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' ] ) #NEWLINE#
return { 'user' : self . request . user } #NEWLINE#
parser = argparse . ArgumentParser ( add_help = False ) #NEWLINE#
re . search ( p , 'aaaa' ) #NEWLINE#
re . search ( p , 'bbbb' ) #NEWLINE#
root . bind ( '<Motion>' , motion ) #NEWLINE# root . mainloop ( ) #NEWLINE#
nopreds . add ( u ) #NEWLINE#
print ( MA . array ( x , mask = np . equal ( x , None ) ) ) #NEWLINE#
np . maximum . reduceat ( given_sort , first_idx ) #NEWLINE#
migration = models . ForeignKey ( 'Migration' ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'application/csv' #NEWLINE# writer = csv . writer ( self . response . out ) #NEWLINE# writer . writerow ( [ 'foo' , 'foo,bar' , 'bar' ] ) #NEWLINE#
STATIC_ROOT = 'assets' #NEWLINE#
b = np . ravel ( a ) . reshape ( tuple ( reversed ( a . shape ) ) , order = 'F' ) #NEWLINE#
T3 = np . tensordot ( A , np . tensordot ( A , B , axes = ( 1 , 1 ) ) , axes = ( ( 0 , 1 ) , ( 0 , 2 ) ) ) #NEWLINE#
mod = __import__ ( 'my_package.my_module' , fromlist = [ 'my_class' ] ) #NEWLINE# klass = getattr ( mod , 'my_class' ) #NEWLINE#
tree = etree . parse ( StringIO ( data ) , magical_parser ) #NEWLINE#
im . set_clim ( [ frame . min ( ) , frame . max ( ) ] ) #NEWLINE#
df [ 'e' ] = df . applymap ( lambda x : str ( x ) . isdigit ( ) ) . T . all ( ) . astype ( int ) #NEWLINE#
return '#SPACE#' . join ( L ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
image /= image . max ( ) / 255.0 #NEWLINE#
builder . add_from_file ( 'gui/main.ui' ) #NEWLINE#
signal . alarm ( 0 ) #NEWLINE#
sys . path . insert ( 0 , '/ruby/$HOST$/www/$HOST$/django-projects/project' ) #NEWLINE#
sys . path . insert ( 0 , '/ruby/$HOST$/www/$HOST$/django-projects' ) #NEWLINE#
p = Popen ( [ 'sort' ] , bufsize = - 1 , stdin = PIPE , stdout = PIPE ) #NEWLINE#
w . tk . mainloop ( ) #NEWLINE#
return int ( s ) #NEWLINE#
process ( 0 ) #NEWLINE#
plt . scatter ( xs [ i ] , ys [ i ] , marker = m [ i ] ) #NEWLINE#
signal . signal ( signal . SIGALRM , self . handle_timeout ) #NEWLINE#
child . expect ( 'Password:' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( is_perfect_cube ( 2146689000 ) ) #NEWLINE#
with open ( 'C:\\Users\\...site_1.html' , 'r' ) as f : #NEWLINE# #INDENT# page = f . read ( ) #NEWLINE# tree = html . fromstring ( page ) #NEWLINE#
screen = pygame . display . set_mode ( DISPLAY , FLAGS , DEPTH ) #NEWLINE#
alphabetDict = { char : ( 0 ) for char in alphabet } #NEWLINE#
print ( x ) #NEWLINE#
auth_token = request . GET . get ( 'auth_token' , '' ) #NEWLINE#
os . environ [ 'USER_EMAIL' ] = '' #NEWLINE#
fig . autofmt_xdate ( ) #NEWLINE#
s = s [ : - 1 ] if s . endswith ( '\\' ) else s #NEWLINE#
users . c . id . alter ( name = 'user_id' ) #NEWLINE#
story = db . get ( story_key ) #NEWLINE# author_id = Story . author . get_value_for_datastore ( story ) . id ( ) #NEWLINE#
keyName = myMember . key ( ) . name ( ) #NEWLINE#
print ( 'bz2#SPACE#compressed#SPACE#length:' , len ( bz2 . compress ( s ) ) ) #NEWLINE#
s = '{0}#SPACE#{1}' . format ( 'foo' , 'bar' ) #NEWLINE#
return int ( time . mktime ( value . timetuple ( ) ) ) #NEWLINE#
tempfile . mkdtemp ( dir = 'footest' , prefix = 'fixpre' ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_DOWN , self . on_left_down ) #NEWLINE#
m2 = np . zeros ( ( 50 , 50 ) ) #NEWLINE#
sum ( map ( lambda x : map ( lambda f : f ( x ) , ListArg ) , listFunc ) , [ ] ) #NEWLINE#
user = fields . ForeignKey ( UserResource , 'user' , full = True ) #NEWLINE#
""":((""" #NEWLINE#
email = self . request . POST . get ( 'email' ) #NEWLINE#
im2 = io . imread ( 'test_16bit.png' ) #NEWLINE#
plt . rc ( 'text' , usetex = True ) #NEWLINE#
sys . getsizeof ( Bar ( ) ) #NEWLINE#
self . out , self . err = self . proc . communicate ( ) #NEWLINE#
return math . ceil ( f / 2.0 ) * 2 #NEWLINE#
raise ValidationError ( 'This#SPACE#user#SPACE#cannot#SPACE#be#SPACE#activated' ) #NEWLINE#
print ( json . dumps ( categories , indent = 4 ) ) #NEWLINE#
m = [ [ ( row - col ) for row in l ] for col in l ] #NEWLINE#
vis = np . zeros ( ( 384 , 836 ) , np . float32 ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 8 , 9 ) ] #NEWLINE# zip ( * l ) #NEWLINE#
abs ( 1 ) #NEWLINE#
url_get = self . request . GET #NEWLINE#
f . bar ( 1 , 2 ) #NEWLINE#
main ( ) #NEWLINE#
subprocess . call ( subprocess_cmd ) #NEWLINE#
self . text_box . grid ( row = 0 , column = 0 , sticky = 'nsew' ) #NEWLINE#
transpose . sort ( key = itemgetter ( 0 ) ) #NEWLINE#
hash ( round ( 6.75 , 1 ) ) #NEWLINE#
pd . DataFrame ( nvalues , columns = ( 'y1' , 'y2' ) ) #NEWLINE#
p . stdin . close ( ) #NEWLINE#
df [ 'StateInitial' ] = df [ 'state' ] . str [ : 2 ] #NEWLINE# df #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
files = os . listdir ( 'myfolder' ) #NEWLINE#
setup ( name = 'mypackage' , cmdclass = { 'install' : MyInstallCommand } ) #NEWLINE#
loop . run_until_complete ( main ( ) ) #NEWLINE#
filename . decode ( 'utf-8' ) #NEWLINE#
df2 [ cols ] #NEWLINE#
content = file [ 'content' ] #NEWLINE#
[ 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
dict . __setitem__ ( self , frozenset ( idx ) , value ) #NEWLINE#
"""""" . join ( reversed ( hex_repr ) ) #NEWLINE#
seen = set ( ) #NEWLINE# result = [ ] #NEWLINE# for item in a : #NEWLINE# #INDENT# if item not in seen : #NEWLINE# #INDENT# #INDENT# seen . add ( item ) #NEWLINE# result . append ( item ) #NEWLINE#
return x + y #NEWLINE#
fulltxt = open ( mifilepath , 'rb' ) . read ( ) #NEWLINE#
return text [ ( value + step ) % len ( text ) ] #NEWLINE#
gevent . joinall ( jobs ) #NEWLINE#
plt . legend ( numpoints = 1 , loc = 'lower#SPACE#right' ) #NEWLINE#
def meh ( self ) : #NEWLINE# #INDENT# print ( "I'm#SPACE#a#SPACE#function" ) #NEWLINE#
print ( requests . get ( url ) . text ) #NEWLINE#
header = { 'Content-type' : 'application/x-www-form-urlencoded' , #NEWLINE# 'Authorization' : 'GoogleLogin#SPACE#auth=YOUR_AUTH_TOKEN' } #NEWLINE#
outfile . write ( self . archive . getmember ( name ) . read ( ) ) #NEWLINE#
[ item . strip ( '"' ) for item in reclist . split ( ',' ) ] #NEWLINE#
mechanize . _sockettimeout . _GLOBAL_DEFAULT_TIMEOUT = 100 #NEWLINE#
print ( 'Leeches:' + str ( ret [ 'leeches' ] ) ) #NEWLINE#
print ( 'Seeds:' + str ( ret [ 'seeds' ] ) ) #NEWLINE#
ax . set_xticklabels ( mons ) #NEWLINE#
G2 . add_node ( 'special' , { 'label' : 'special' } ) #NEWLINE#
f . close ( ) #NEWLINE#
doctest . testmod ( optionflags = doctest . NORMALIZE_WHITESPACE ) #NEWLINE#
proc = subprocess . Popen ( 'git#SPACE#status' , env = os . environ , stdout = subprocess . PIPE ) #NEWLINE#
return n % 2 == 0 #NEWLINE#
t . join ( ) #NEWLINE#
{ k : { k_ : v [ k_ ] for k_ in common_keys } for k , v in d . items ( ) } #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( ( x , y , z ) ) #NEWLINE#
mylist . append ( item ) #NEWLINE#
list ( dict . keys ( ) ) [ 0 ] #NEWLINE#
k . set_contents_from_string ( 'This#SPACE#is#SPACE#a#SPACE#test#SPACE#of#SPACE#S3' ) #NEWLINE#
tn . close ( ) #NEWLINE#
tree = ET . parse ( StringIO ( text ) , parser ) #NEWLINE#
return render ( request , 'home-visitor.html' , { } ) #NEWLINE#
return super ( CustomManager , self ) . get_queryset ( ) . filter ( canceled = False ) #NEWLINE#
dict_writer . writerows ( rows ) #NEWLINE#
MyModel . objects . filter ( complexQuery ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
df . ix [ start : end ] #NEWLINE#
o . call ( ) #NEWLINE#
url = Column ( String ) #NEWLINE#
return '' . join ( random . choice ( string . ascii_lowercase ) for _ in range ( chars ) ) #NEWLINE#
url = 'http://search.cpsa.ca/PhysicianSearch' #NEWLINE#
np . random . shuffle ( zeros ) #NEWLINE#
a2 [ : , ( 1 ) ] > 10 #NEWLINE#
a = bitarray ( 2 ** 20 ) #NEWLINE#
url_match ( '<a#SPACE#href="test">' , 'te' ) #NEWLINE#
memoize = functools . lru_cache ( maxsize = None ) #NEWLINE#
average = sum ( float ( eval ( input ( 'Enter#SPACE#a#SPACE#number' ) ) ) for i in range ( n ) ) / n #NEWLINE#
pool . join ( ) #NEWLINE#
[ del_zeros ( L , i ) for i in range ( 5 ) ] #NEWLINE#
d [ t . tag ] . update ( ( '@' + k , v ) for k , v in list ( t . attrib . items ( ) ) ) #NEWLINE#
print ( 'myfunc' ) #NEWLINE#
print ( 'back' ) #NEWLINE#
return nll #NEWLINE#
result . add ( elements [ 0 ] ) #NEWLINE#
df #NEWLINE#
queue = taskqueue . Queue ( 'process-documents' ) #NEWLINE#
rconsole . spawn_server ( ) #NEWLINE#
sys . stdout . write ( '\r%d%%' % i ) #NEWLINE#
f ( ** locals ( ) ) #NEWLINE#
XXX #NEWLINE#
from django . http import HttpResponse #NEWLINE#
"""Of#SPACE#course,#SPACE#in#SPACE#your#SPACE#position#SPACE#of#SPACE#unofficial#SPACE#adviser#SPACE#and#SPACE#helper#SPACE#to#SPACE#everybody#SPACE#who#SPACE#is#SPACE#absolutely#SPACE#puzzled,#SPACE#throughout#SPACE#three#SPACE#continents,#SPACE#you#SPACE#are#SPACE#brought#SPACE#in#SPACE#contact#SPACE#with#SPACE#all#SPACE#that#SPACE#is#SPACE#strange#SPACE#and#SPACE#bizarre.#SPACE#But#SPACE#here""" #NEWLINE#
my_list = [ 'Steve' , 'Steve' , 'Ben' , 'Ben' , 'Johnny' ] #NEWLINE#
accuracy1 = tf . reduce_mean ( tf . cast ( correct_prediction , tf . float32 ) ) #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
now - timedelta ( seconds = 15 ) #NEWLINE#
"""#SPACE#""" . join ( list ( set ( john . split ( ) ) & set ( mary . split ( ) ) ) ) #NEWLINE#
os . chdir ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) #NEWLINE#
print ( reduce ( distance , [ ( 3 , 4 ) , ( 1 , 8 ) ] , ( ( 1 , 2 ) , 0.0 ) ) [ 1 ] ) #NEWLINE#
x , y , z , w = sp . symbols ( 'x,#SPACE#y,#SPACE#z,#SPACE#w' ) #NEWLINE#
reload_urlconf ( ) #NEWLINE#
list ( slicer ( list ( range ( 40 ) ) , ( 2 , 8 ) , ( 10 , 16 ) , ( 30 , 38 ) ) ) #NEWLINE#
x = int ( str ( x ) [ : : - 1 ] ) #NEWLINE#
pylab . draw ( ) #NEWLINE#
qry = DBSession . query ( User ) . filter ( User . birthday . between ( '1985-01-17' , #NEWLINE# '1988-01-17' ) ) #NEWLINE#
win32api . MessageBox ( 0 , 'abort#SPACE#retry#SPACE#ignore?' , 'title' , 2 ) #NEWLINE#
b = np . matrix ( np . array ( a ) ) #NEWLINE#
xvfb . terminate ( ) #NEWLINE# xvfb . wait ( ) #NEWLINE#
return a [ 0 ] * b [ 1 ] - a [ 1 ] * b [ 0 ] #NEWLINE#
self . text . configure ( state = 'disabled' ) #NEWLINE#
writer = csv . DictWriter ( csvfile , fieldnames = fieldnames ) #NEWLINE#
wx . Frame . __init__ ( self , parent , id , title , pos , size , style , name ) #NEWLINE#
__main__ . py #NEWLINE#
doctest . testmod ( ) #NEWLINE#
df . index [ 0 ] #NEWLINE#
print ( list ( igroups ( [ 0 , 0 , 0 ] ) ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
r = boxplot ( data ) #NEWLINE#
socket . gethostbyname ( 'www.google.com' ) #NEWLINE#
{ ( 0 ) : 3 , ( 1 ) : 3 , ( 2 ) : 4 , ( 3 ) : 6 , ( 4 ) : 6 , ( 5 ) : 6 , ( 6 ) : None } #NEWLINE#
nx . draw ( G , pos ) #NEWLINE#
groups . apply ( existedBefore ) #NEWLINE#
a = np . delete ( a , b , 0 ) #NEWLINE#
return numpy . ma . masked #NEWLINE#
savefig ( 'demo.png' , transparent = True ) #NEWLINE#
socket . setdefaulttimeout ( 10 ) #NEWLINE#
print ( list ( unzipped [ 0 ] ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , rasterized = True ) #NEWLINE# ax . plot ( ts [ 0 ] , ys . T , color = 'r' , lw = 0.5 , alpha = 0.5 ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
parent . remove ( elem ) #NEWLINE#
df . drop ( [ 'MasterIdx' , 'Counts' , 'RandRank' , 'RandScore' ] , axis = 1 ) #NEWLINE#
return datetime . strptime ( date_str , '%a#SPACE#%b#SPACE#%d#SPACE#%H:%M:%S#SPACE#+0000#SPACE#%Y' ) #NEWLINE#
a = line_parts [ 0 ] or '0' #NEWLINE#
options = webdriver . ChromeOptions ( ) #NEWLINE#
Package - 2 / namespace / module2 / __init__ . py #NEWLINE#
def foo ( ) : #NEWLINE# #INDENT# funcstr = """def#SPACE#func(x,#SPACE#{p}):#NEWLINE##SPACE##SPACE##SPACE##SPACE#return#SPACE#x#SPACE#*#SPACE#2*a#SPACE#+#SPACE#4*b#SPACE#-#SPACE#5*c""" #NEWLINE#
print ( '' . join ( buf [ j + 1 : j + N + 1 ] ) ) #NEWLINE#
ax . plot_date ( TB , B , 'g:' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
"""|#SPACE#'TOMATOES_FLICKED'#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE#32914#SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#1123#SPACE#|""" #NEWLINE#
"""|#SPACE#'TOMATOES_RIGGED'#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#14#SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#1343#SPACE#|""" #NEWLINE#
"""|#SPACE#'TOMATOES_PICKELED'#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#4#SPACE#|#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#23#SPACE#|""" #NEWLINE#
self . _note . flush ( ) #NEWLINE#
scatter_date ( data , x = 'date' , y = [ 'col1' , 'col2' ] , datetimeformat = '%Y-%m-%d' ) #NEWLINE#
canvas . bind ( '<Button#SPACE#1>' , printcoords ) #NEWLINE#
entryFrame . columnconfigure ( 0 , weight = 10 ) #NEWLINE#
func_name = sys . _getframe ( ) . f_code . co_name #NEWLINE#
list ( itertools . zip_longest ( a , b , fillvalue = '-' ) ) #NEWLINE#
print ( 'Trying#SPACE#next#SPACE#proxy#SPACE#in#SPACE#5#SPACE#seconds' ) #NEWLINE#
d [ k ] = tuple ( d [ k ] for d in ds ) #NEWLINE#
p . join ( ) #NEWLINE#
plt . hist2d ( a , b , ( 50 , 50 ) , cmap = plt . cm . jet ) #NEWLINE#
assert codepoint_count ( 'hello#SPACE#\ud83d\udc4d' ) == 7 #NEWLINE#
fix ( "DOUG'S" ) #NEWLINE#
b = word in ( w for i , w in enumerate ( wordList ) if i not in ignore ) #NEWLINE#
print ( 'Caught#SPACE#KeyboardInterrupt,#SPACE#terminating#SPACE#workers' ) #NEWLINE#
return getattr ( instance , '__class__' , None ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
g = sns . lmplot ( 'X' , 'Y' , df , col = 'Z' , sharex = False , sharey = False ) #NEWLINE# g . set ( ylim = ( 0 , None ) ) #NEWLINE#
obj . load_from_filename ( filename ) #NEWLINE#
PROJECT_DIR = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
df2 = pd . read_table ( 'dummy.csv' ) #NEWLINE# df2 . T . drop_duplicates ( ) . T #NEWLINE#
return all ( isinstance ( i , int ) for i in l ) #NEWLINE#
"""/makeanerror500""" #NEWLINE#
"""Prints#SPACE#heads#SPACE#to#SPACE#stdout""" #NEWLINE#
image = cv2 . imread ( '1_tree.jpg' ) #NEWLINE#
parser . add_argument ( '--myarg' , help = 'my#SPACE#arg#SPACE#description' , type = postprocess ) #NEWLINE#
plt . xlabel ( 'Position#SPACE#[m]' ) #NEWLINE#
foo_vars = { id ( instance ) : instance . foo for instance in A . instances } #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 ) #NEWLINE#
g . set ( xticklabels = [ ] ) #NEWLINE#
ax . scatter ( X , [ 1 ] * len ( X ) , c = values , marker = 's' , s = 100 ) #NEWLINE# fig . autofmt_xdate ( ) #NEWLINE# ax . yaxis . set_visible ( False ) #NEWLINE# ax . spines [ 'right' ] . set_visible ( False ) #NEWLINE# ax . spines [ 'left' ] . set_visible ( False ) #NEWLINE# ax . spines [ 'top' ] . set_visible ( False ) #NEWLINE# ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE# ax . get_yaxis ( ) . set_ticklabels ( [ ] ) #NEWLINE# day = pd . to_timedelta ( '1' , unit = 'D' ) #NEWLINE# plt . xlim ( X [ 0 ] - day , X [ - 1 ] + day ) #NEWLINE# plt . show ( ) #NEWLINE#
t = np . linspace ( 0 , T , nsamples , endpoint = False ) #NEWLINE#
ET . SubElement ( doc , 'field2' , name = 'asdfasd' ) . text = 'some#SPACE#vlaue2' #NEWLINE#
ax . scatter ( x , y ) #NEWLINE#
ast = np . lib . stride_tricks . as_strided ( a , a . shape * 2 , a . strides * 2 ) #NEWLINE#
print ( '\n' . join ( '#SPACE#' . join ( map ( str , t ) ) for t in tuples ) ) #NEWLINE#
print ( '=========' ) #NEWLINE#
recarr = np . zeros ( ( 4 , ) , dtype = 'i4,f4,a10' ) #NEWLINE#
ax . set_ylabel ( 'FROM' ) #NEWLINE#
random . seed ( 1 ) #NEWLINE#
stocks = [ x . rstrip ( ) for x in stocks ] #NEWLINE#
[ digit_sum ( n ) for n in [ 1 , 3 , 999 , 10 , 234 , 1234132341 ] ] #NEWLINE#
name = models . CharField ( max_length = 100 ) #NEWLINE#
raise OSError ( p . stderr . read ( ) . rstrip ( ) ) #NEWLINE#
array ( [ [ 0 , 4 , 8 ] , [ 1 , 5 , 21 ] , [ 2 , 6 , 10 ] , [ 3 , 7 , 11 ] ] ) #NEWLINE#
'\x00' , '\x00' , 'ù' , 'C' , '»' , '\x7f' , '\x00' , '\x00' #NEWLINE#
'?' , '\x00' , '\x05' , 'þ' , '\x02' , 'þ' , 'Ü' , 'Ì' #NEWLINE#
z = [ [ 'i' ] , [ 'j' ] , [ 'k' ] , [ 'l' ] ] #NEWLINE# df = pd . DataFrame ( { 'col1' : x , 'col2' : y , 'col3' : z } ) #NEWLINE#
pip . main ( [ 'install' , 'setuptools' ] ) #NEWLINE#
print ( response . read ( ) ) #NEWLINE#
add_keys ( d [ l [ 0 ] ] , l [ 1 : ] , c ) #NEWLINE#
image = cv2 . imread ( 'Large.png' ) #NEWLINE#
X [ : , ( np . where ( mask1 ) [ 0 ] ) ] [ np . where ( mask2 ) [ 0 ] ] #NEWLINE#
df . groupby ( df . columns , axis = 1 ) . apply ( lambda x : x . info ( ) ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
REVERSE = '\x1b[;7m' #NEWLINE#
self . common1 ( ) #NEWLINE#
l = [ 1 , 2 , 3 ] #NEWLINE#
url ( '^subfeature/' , views . a ) , #NEWLINE#
"""^(?:http|ftp)s?://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:/?|[/?]\\S+)$""" #NEWLINE#
root . tag #NEWLINE#
dynprop = 'Very#SPACE#important#SPACE#meta#SPACE#attribute,#SPACE#do#SPACE#not#SPACE#override' #NEWLINE#
ret = libc . printf ( 'Test\n' ) #NEWLINE#
setattr ( self , key , [ company ] ) #NEWLINE#
cv . NamedWindow ( 'Camera#SPACE#1' ) #NEWLINE#
new_lines = [ ( line . strip ( ) if line == '\n' else line ) for line in lines ] #NEWLINE#
root = Tkinter . Tk ( ) #NEWLINE# root . withdraw ( ) #NEWLINE#
with open ( 'test_file.txt' , 'r' ) as in_file : #NEWLINE# #INDENT# text = in_file . read ( ) #NEWLINE# with open ( 'output_test_file.txt' , 'w' ) as out_file : #NEWLINE# #INDENT# out_file . write ( replace_all ( text , spelling_dict ) ) #NEWLINE#
files = { 'upload_file' : open ( 'file.txt' , 'rb' ) } #NEWLINE# values = { 'DB' : 'photcat' , 'OUT' : 'csv' , 'SHORT' : 'short' } #NEWLINE# r = requests . post ( url , files = files , data = values ) #NEWLINE#
int ( mylist [ 0 ] [ 0 ] or '0' ) #NEWLINE#
locale . atof ( '12.3' ) #NEWLINE#
merged = list ( joinz ( 1 , zdf1 . iter ( ) , 0 , zdf2 . iter ( ) ) ) #NEWLINE#
pal_image = Image . new ( 'P' , ( 1 , 1 ) ) #NEWLINE#
pass #NEWLINE#
layout . addWidget ( QtGui . QLabel ( 'this#SPACE#is#SPACE#a#SPACE#label' ) ) #NEWLINE#
bitmap = np . array ( bitmap , np . uint8 ) #NEWLINE#
shell . write ( 'OPTIONS' , 'STRING' ) #NEWLINE#
shell . write ( 'Wanna#SPACE#go#SPACE#explore?#SPACE#' , 'KEYWORD' ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
print ( 'Bye!' ) #NEWLINE#
jpeg . read ( int ( struct . unpack ( '>H' , jpeg . read ( 2 ) ) [ 0 ] ) - 2 ) #NEWLINE#
pd . concat ( [ group for _ , group in grouped if len ( group ) > 1 ] ) #NEWLINE#
pylab . bar ( centers , arr [ 'f0' ] , color = colors , align = 'center' ) #NEWLINE#
print ( message [ 'subject' ] ) #NEWLINE#
plt . draw ( ) #NEWLINE#
print ( match . groupdict ( ) ) #NEWLINE#
x = 281473900746245 #NEWLINE# decoded_x = hex ( x ) [ 2 : ] . decode ( 'hex' ) #NEWLINE#
print ( string ) #NEWLINE#
nx . draw_networkx_labels ( GG , pos , label_pos = 10.3 ) #NEWLINE#
scheduler . run ( ) #NEWLINE#
df = pd . concat ( [ df ] * 1000 ) . reset_index ( drop = True ) #NEWLINE#
toggle_btn . pack ( pady = 5 ) #NEWLINE#
write . writeheader ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
t , dt = np . linspace ( 0 , 1 , num_t , endpoint = False , retstep = True ) #NEWLINE#
im = Image . open ( 'image.jpg' ) #NEWLINE#
self . __dict__ = self . _dict #NEWLINE#
urlparse ( 'http://google.com' ) #NEWLINE#
a = [ 1 , 2 , 1 , 4 , 1 , 1 , 1 , 1 ] #NEWLINE#
client . select ( 'INBOX' ) #NEWLINE#
ln . set_xdata ( list ( range ( len ( data ) ) ) ) #NEWLINE#
title = soup . find ( 'title' ) . text #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
s = input ( 'Enter#SPACE#the#SPACE#matrix:' ) #NEWLINE#
Q ( question__startswith = 'Who' ) | ~ Q ( pub_date__year = 2005 ) #NEWLINE#
proc = subprocess . Popen ( cmd , stdin = subprocess . PIPE ) #NEWLINE# proc . stdin . write ( 'here,#SPACE#have#SPACE#some#SPACE#data\n' ) #NEWLINE#
x . reshape ( - 1 , x . shape [ - 1 ] ) . shape #NEWLINE#
signal . signal ( signal . SIGINT , _forward_to_django_shutdown_signal ) #NEWLINE#
pixmap5 = pixmap . scaled ( 64 , 64 ) #NEWLINE#
sys . path . insert ( 0 , '/must/be/full/path/to/code/yoursite' ) #NEWLINE#
self . Bind ( wx . EVT_WINDOW_CREATE , self . SetWindowShape ) #NEWLINE#
ax . get_xgridlines ( ) [ idx ] . set_color ( 'g' ) #NEWLINE#
ax . get_xgridlines ( ) [ idx ] . set_color ( 'b' ) #NEWLINE#
np . isfinite ( b_0 ) . all ( ) #NEWLINE#
newer_method_string = '{:.9f}' . format ( numvar ) #NEWLINE#
int ( string [ : : 2 ] , 2 ) #NEWLINE#
atexit . register ( myfunction ) #NEWLINE#
xscroll . grid ( row = 1 , column = 0 , sticky = E + W ) #NEWLINE#
df [ 'Month' ] = df [ 'Date' ] . dt . month #NEWLINE#
ax . set_xticks ( x_labels_pos ) #NEWLINE#
from urllib . parse import urlparse #NEWLINE#
roster . append ( dayroster ) #NEWLINE#
tableWidget . setItem ( i , j , item ) #NEWLINE#
subproc = Popen ( 'cat' , stdin = PIPE , stdout = PIPE ) #NEWLINE#
tic2 ( ) #NEWLINE#
return '{}#SPACE#hours#SPACE#{}#SPACE#min' . format ( hours , minutes ) #NEWLINE#
pil_image . save ( 'frame5sec.jpeg' ) #NEWLINE#
f = lambda x : x * np . cos ( x - 4 ) #NEWLINE#
print ( 'Before#SPACE#the#SPACE#function#SPACE#runs' ) #NEWLINE#
print ( 'After#SPACE#the#SPACE#function#SPACE#runs' ) #NEWLINE#
System . out . println ( 'value#SPACE#is#SPACE#:#SPACE#' + ret ) #NEWLINE#
flags = np . arange ( 1 , n + 1 ) . reshape ( 1 , - 1 ) #NEWLINE#
plot ( x , y , 'ro-' ) #NEWLINE#
cursor = cnxn . cursor ( ) #NEWLINE#
accumulationList . extend ( doSomething ( x ) ) #NEWLINE#
{ { item_forms . empty_form } } #NEWLINE#
your_matrix . dump ( 'output.mat' ) #NEWLINE#
re . sub ( '\\bfoo\\b' , cased_replacer ( 'bar' ) , 'this#SPACE#is#SPACE#foo' , flags = re . I ) #NEWLINE# re . sub ( '\\bfoo\\b' , cased_replacer ( 'bar' ) , 'this#SPACE#is#SPACE#Foo' , flags = re . I ) #NEWLINE#
_stack . append ( self . kwargs ) #NEWLINE#
[ [ f ( v ) for v , f in zip ( x , funcs ) ] for x in a ] #NEWLINE#
global Var1 , Var2 #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
def cutit ( s , n ) : #NEWLINE# #INDENT# return s [ n : ] #NEWLINE#
mod = __import__ ( module_name ) #NEWLINE#
os . path . join ( * choices ) #NEWLINE#
plt . savefig ( 'seaborn-offagain.png' ) #NEWLINE#
'2:6601' , 2.24527453887999e-27 , 0.999999999952706 , 2.24527453887999e-27 , 0.999999999952706 #NEWLINE#
unicodedata . category ( character ) #NEWLINE#
code_country . append ( [ key , countries [ key ] ] ) #NEWLINE#
with open ( 'test.json' ) as f : #NEWLINE# #INDENT# data = json . load ( f ) #NEWLINE#
proc = subprocess . Popen ( 'python#SPACE#Slave.py' , stdout = subprocess . PIPE ) #NEWLINE#
self . window . set_default_size ( 100 , gtk . gdk . screen_height ( ) ) #NEWLINE#
ax . set_title ( 'Function#SPACE#performance' , fontsize = 14 ) #NEWLINE#
w = Gtk . Window ( ) #NEWLINE#
l2 = [ { 'index' : 1 , 'c' : 4 } , { 'index' : 2 , 'c' : 5 } ] #NEWLINE#
e . msgbox ( 'An#SPACE#error#SPACE#has#SPACE#occured!#SPACE#:(' , 'Error' ) #NEWLINE#
a = pd . Series ( data = [ 1 , 2 , 3 ] ) #NEWLINE#
formatter = logging . Formatter ( '%(message)s' ) #NEWLINE#
A = np . array ( [ 1 , 3 , 5 , 7 ] ) #NEWLINE#
return collections . defaultdict ( recursive_dict ) #NEWLINE#
ttk . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
parse ( data ) #NEWLINE#
i . write ( 'line1#SPACE#qwer\n' ) #NEWLINE#
data = json . loads ( json_content ) #NEWLINE#
result = my_range [ : - 1 ] #NEWLINE#
print_var ( 'local_var' ) #NEWLINE#
print_var ( 'some_func' ) #NEWLINE#
self . exit ( 0 ) #NEWLINE#
def dispatch ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# pass #NEWLINE#
max ( sentence ) #NEWLINE#
return self ( other ( * args , ** kwargs ) ) #NEWLINE#
resp = flask . Response ( 'Foo#SPACE#bar#SPACE#baz' ) #NEWLINE#
w . writerow ( list ( somedict . values ( ) ) ) #NEWLINE#
pass #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
[ 'cm1' , 'cm1' , 'cm2' ] #NEWLINE#
re . sub ( '([a-zA-Z0-9])\\s+(?=[a-zA-Z0-9])' , '\\1*' , '3#SPACE#a#SPACE#5#SPACE#b' ) #NEWLINE# re . sub ( '([a-zA-Z0-9])\\s+(?=[a-zA-Z0-9])' , '\\1*' , '3#SPACE#/a#SPACE#5!#SPACE#b' ) #NEWLINE#
DEVNULL . close ( ) #NEWLINE#
self . session . get ( url ) #NEWLINE#
ax . set_zlim ( - 100 , 100 ) #NEWLINE#
data = { 'amount' : '316.08' , 'currency' : 'USD' } #NEWLINE#
nltk . set_proxy ( 'http://proxy.example.com:3128' , 'USERNAME' , 'PASSWORD' ) #NEWLINE#
textdata . set_index ( mergecols , inplace = True , drop = False ) #NEWLINE#
return 'Error' #NEWLINE#
User . _default_manager . get ( username__iexact = username ) #NEWLINE#
form = UploadForm ( request . POST , request . FILES ) #NEWLINE#
while not line . startswith ( '#' ) : #NEWLINE# #INDENT# line = f . readline ( ) #NEWLINE#
canvas . grid ( row = 1 , column = 1 , sticky = Tkconstants . NSEW ) #NEWLINE#
return ( x + y ) / 2 #NEWLINE#
super ( MyWindow , self ) . __init__ ( parent ) #NEWLINE#
assert a . average ( ) == 10 #NEWLINE#
print ( next ( islice ( list ( ordered_dict . items ( ) ) , 2 , None ) ) ) #NEWLINE#
super ( SomeForm , self ) . clean ( ) #NEWLINE#
x = ast . literal_eval ( '0,1,2' ) #NEWLINE#
list ( map ( sub , a , b ) ) #NEWLINE#
self . winfo_toplevel ( ) . wm_geometry ( '' ) #NEWLINE#
raise CsrfException ( 'Missing#SPACE#or#SPACE#invalid#SPACE#CSRF#SPACE#token.' ) #NEWLINE#
[ x for x in b for b in a ] #NEWLINE#
d = dict ( s . split ( '=' ) for s in a ) #NEWLINE#
df . plot ( kind = 'bar' , legend = False , width = 0.8 , figsize = ( 2 , 5 ) ) #NEWLINE#
Base . metadata . reflect ( bind = engine ) #NEWLINE#
index = pd . MultiIndex . from_tuples ( [ item . split ( '_' ) for item in df . index ] ) #NEWLINE#
idx = np . arange ( A . shape [ 0 ] ) #NEWLINE#
lst = [ 'hey' , 'what' , 0 , False , <VAR0> , 14 ] #NEWLINE# print ( sum ( x is not <VAR0> for x in lst ) ) #NEWLINE#
csvwriter . writerow ( [ i , 'a' , 'b' , 'c' ] ) #NEWLINE#
list ( product ( [ ] ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
re . match ( makere ( len ( inp ) ) , '' . join ( inp ) ) . groups ( ) #NEWLINE#
df = pd . DataFrame ( { 'p1' : p1 , 'p2' : p2 } , index = dtrange ) #NEWLINE#
"""""" . join ( map ( str . __add__ , s [ - 2 : : - 2 ] , s [ - 1 : : - 2 ] ) ) #NEWLINE#
return 'Hello,#SPACE#cross-origin-world!' #NEWLINE#
list ( totals . items ( ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
my_list = json . load ( f ) #NEWLINE#
test = defaultdict ( defaultdict ( list ) ) #NEWLINE#
return '{}-{}-{}' . format ( s [ : 4 ] , s [ 4 : 6 ] , s [ 6 : ] ) #NEWLINE#
print ( ( 'You#SPACE#pressed' , x ) ) #NEWLINE#
return list ( set ( chain ( * x ) ) ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE# b = [ 4 , 5 , 6 ] #NEWLINE# sum ( x * y for x , y in zip ( a , b ) ) #NEWLINE#
CORS_ORIGIN_WHITELIST = 'google.com' , 'hostname.example.com' #NEWLINE#
rreplace ( s , '2' , '#SPACE#' , 2 ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
d . update ( extra ) #NEWLINE#
f . close ( ) #NEWLINE#
msg . send ( ) #NEWLINE#
result . append ( list ( range ( last , last + v ) ) ) #NEWLINE#
app . register_blueprint ( simple_page ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 8 , 0 , 0 , 0 , 8 , 0 , 0 , 0 ] , #NEWLINE#
{ 'joe' : [ 32 , 422 ] , 'bob' : [ 24 ] , 'jack' : [ 0 , 3 , 222 ] } #NEWLINE#
l = [ [ 'a' , 'b' ] , 'c' , [ 'd' , 'e' ] , [ 'f' , 'g' ] , 'h' ] #NEWLINE#
1 , 2 , 3 #NEWLINE#
results = Queue . Queue ( ) #NEWLINE#
ax . set_yscale ( 'log' ) #NEWLINE#
"""\\b""" #NEWLINE#
chi2 . ppf ( 0.8 , df = 2 ) #NEWLINE#
ax . set_xlabel ( 'TO' ) #NEWLINE#
df1 . reindex ( fruit_x_veg , fill_value = 'UNKNOWN' ) #NEWLINE#
path = os . path . realpath ( path ) #NEWLINE#
plt . plot ( x , y , '.' ) #NEWLINE# plt . plot ( x , m * x + b , '-' ) #NEWLINE#
return inner ( x ) #NEWLINE#
print ( avg ( arr ) ) #NEWLINE#
print ( df . iloc [ : , ( 0 ) ] . values . flatten ( ) ) #NEWLINE#
C5 . bar ( ) #NEWLINE#
r = requests . post ( finalURL , data = payload ) #NEWLINE#
data = numpy . array ( [ [ 0.1 , 0.1 ] , [ 0.2 , 0.2 ] , [ 0.3 , 0.3 ] ] ) #NEWLINE#
dtype = numpy . dtype ( [ ( 'x' , float ) , ( 'y' , float ) , ( 'colour' , float ) ] ) #NEWLINE#
print ( 'after' ) #NEWLINE#
unittest . TextTestRunner ( verbosity = 1 ) . run ( testsuite ) #NEWLINE#
f . readline ( ) #NEWLINE#
from BeautifulSoup import BeautifulSoup #NEWLINE#
os . system ( image ) #NEWLINE#
{ { my_floatvar | unlocalize } } #NEWLINE#
len ( [ ( 1 ) for _ in takewhile ( lambda x : x == a [ 0 ] , a ) ] ) #NEWLINE#
output_file . writelines ( merge ( * files ) ) #NEWLINE#
del new_list [ 0 ] [ 0 ] , new_list [ 1 ] [ 0 ] #NEWLINE#
L = [ ( 1 , 2 , 3 ) , ( 2 , 4 ) ] #NEWLINE#
scr . addstr ( 0 , 0 , 'あ' . encode ( 'utf-8' ) ) #NEWLINE#
fn = lambda x : x if True else lambda x : x * x #NEWLINE#
db . session . commit ( ) #NEWLINE#
"""^(?:(?:[a-z\\d\\-]{1,100}\\~)?(?:(?!\\-)[a-z\\d\\-\\.]{1,100}:)?(?!-)[a-z\\d\\-]{0,99}[a-z\\d])$""" #NEWLINE#
socket . bind ( ( HOST , PORT ) ) #NEWLINE#
ax . set_xlim ( [ - 0.1 , 1.1 ] ) #NEWLINE#
stdout , stderr = Popen ( [ 'cat' , 'foo.txt' ] , stdout = PIPE ) . communicate ( ) #NEWLINE#
df2 = df . groupby ( 'letter' ) . filter ( lambda g : g . x . sum ( ) > 200 ) #NEWLINE#
return True #NEWLINE#
self . subplot . scatter ( [ 1 , 2 , 3 ] , [ 3 , 1 , 2 ] ) #NEWLINE#
audio = MP3 ( 'filename.mp3' ) #NEWLINE#
def do_stuff ( data ) : #NEWLINE# #INDENT# print ( 'bob#SPACE#does#SPACE#stuff#SPACE#with#SPACE#%s' % data ) #NEWLINE#
buf = lines [ - 1 ] #NEWLINE#
sys . path . insert ( 0 , 'zipimport_example.zip' ) #NEWLINE#
return '{:.0f}{}' . format ( n / 10 ** ( 3 * millidx ) , millnames [ millidx ] ) #NEWLINE#
foo . foo ( ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
return now_date . replace ( day = 1 ) #NEWLINE#
env . Lint ( + '.lint' , s ) #NEWLINE#
m = re . match ( '^/by_tag/(?P<tag>\\w+)/(?P<filename>(\\w|[.,!#%{}()@])+)$' , #NEWLINE# '/by_tag/pÃ¥ske/Ã¸yfjell.jpg' , re . UNICODE ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
return all ( x == first for x in it ) #NEWLINE#
y = lambda : ( _ for _ in ( ) ) . throw ( Exception ( 'foobar' ) ) #NEWLINE#
m = cv2 . moments ( c ) #NEWLINE#
r = requests . post ( URL , data = payload ) #NEWLINE# print ( r . cookies ) #NEWLINE#
Mylist . append ( 'd' ) #NEWLINE#
Mylist . append ( 'e' ) #NEWLINE#

array3 = [ array3 , [ array4 , array5 ] ] #NEWLINE#
func ( 'file1' , 'file2' , 'file3' ) #NEWLINE#
self . level ( sys . stderr ) #NEWLINE#
s . ioctl ( socket . SIO_RCVALL , socket . RCVALL_OFF ) #NEWLINE#
reader = csv . reader ( csvfile ) #NEWLINE#
a = np . array ( [ 0 , 0 , 0 , 0 , 0 , 0 ] ) #NEWLINE#
l = [ ] #NEWLINE# x = [ ] #NEWLINE# for i in range ( n ) : #NEWLINE# #INDENT# x . append ( l ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
self . response . out . write ( template . render ( template_values ) ) #NEWLINE#
re . compile ( '\\s+' , re . U ) . split ( x ) #NEWLINE#
fill_between ( x , y1 , y2s , color = 'red' ) #NEWLINE#
[ { 'pk' : '1' , 'name' : 'John' , 'size' : '1/4"#SPACE#' } , { } , { } , etc ] #NEWLINE#
super ( DataModel , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
solve ( z ** 2 + ( 1 + I ) * z + ( 6 + 18 * I ) , ( x , y ) ) #NEWLINE#
df = DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 2 , 3 , 4 ] } ) #NEWLINE#
hist ( [ t . hour for t in ts ] , bins = 24 ) #NEWLINE#
any ( s in l for l in lines2 for s in search_strings ) #NEWLINE#
family . remove ( i ) #NEWLINE#
suffixes = set ( s [ - 5 : ] for s in x ) #NEWLINE#
del v [ 'password' ] #NEWLINE#
model . feature_importances_ #NEWLINE#
print ( pool . map ( f , list ( range ( 10 ) ) ) ) #NEWLINE#
len ( list ( flatten ( mylist [ 1 : 3 ] ) ) ) #NEWLINE#
h = plt . plot ( [ 1 , 2 , 3 ] ) #NEWLINE# h . set_color ( 'r' ) #NEWLINE#
f . close ( ) #NEWLINE#
os . path . join ( getcwd ( ) , 'foo.txt' ) #NEWLINE#
main ( ) #NEWLINE#
f_out . write ( line [ 1 ] + '\n' ) #NEWLINE#
sort_idx = np . argsort ( a ) #NEWLINE#
wx . Frame . __init__ ( self , parent , title = title , size = ( 200 , 100 ) ) #NEWLINE#
guess_lexer_for_filename ( 'test.py' , 'print#SPACE#"Hello#SPACE#World!"' ) #NEWLINE#
leadingzerocounts [ i ] += 4 #NEWLINE#
pylab . show ( ) #NEWLINE#
print ( '%r' % sefmtr . format ( fmt , * ( ) , ** data ) ) #NEWLINE#
r = datetime . datetime . strptime ( d + '-0' , '%Y-W%W-%w' ) #NEWLINE#
fork_and_input ( input_iterator , subproc . stdin ) #NEWLINE#
lst = json . loads ( string ) #NEWLINE#
self . parent . title ( 'Simple#SPACE#Prog' ) #NEWLINE#
return np . split ( np . concatenate ( ( a , np . zeros ( padding ) ) ) , n ) #NEWLINE#
color_d = { ( 1 ) : 'k' , ( 2 ) : 'b' , ( 3 ) : 'r' } #NEWLINE#
return round ( number * 20 ) / 20 #NEWLINE#
ax . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
tar . close ( ) #NEWLINE#
typ , data = M . uid ( 'search' , '(SINCE#SPACE#01-Jan-2010)' ) #NEWLINE#
max_df = df . groupby ( by = [ 'FirstName' , 'LastName' ] ) . max ( ) #NEWLINE#
savefig ( 'path/to/figure.pdf' ) #NEWLINE#
with open ( 'replayScript.json' , 'r' ) as jsonFile : #NEWLINE# #INDENT# data = json . load ( jsonFile ) #NEWLINE# tmp = data [ 'location' ] #NEWLINE# data [ 'location' ] = 'NewPath' #NEWLINE# with open ( 'replayScript.json' , 'w' ) as jsonFile : #NEWLINE# #INDENT# json . dump ( data , jsonFile ) #NEWLINE#
compiler = icc #NEWLINE#
f = open ( 'output.txt' , 'r' ) #NEWLINE#
conn = MySQLdb . connect ( host = 'localhost' ) #NEWLINE#
top . rowconfigure ( 1 , weight = 1 ) #NEWLINE#
obj . save ( ) #NEWLINE#
logconsole . debug ( 'Debug#SPACE#CONSOLE' ) #NEWLINE#
dict . fromkeys ( 'abc' ) #NEWLINE#
data = json . loads ( '...' ) #NEWLINE# metros = [ Metro ( ** k ) for k in data [ 'metros' ] ] #NEWLINE#
ser . close ( ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
signal . signal ( signal . SIGINT , self . _signal_handler ) #NEWLINE#
max ( a ) #NEWLINE#
b = Finalizable ( ) #NEWLINE#
ax . yaxis . grid ( True , 'major' , linewidth = 2 ) #NEWLINE#
x = pd . DataFrame ( np . random . random ( ( 1062 , 36 ) ) , columns = columns ) #NEWLINE#
ax . plot ( [ 3 , 3 , 3 ] ) #NEWLINE#
axes . set_xlabel ( 'Exceedance#SPACE#Probability' ) #NEWLINE#
return next ( i for i in x if i [ 'id' ] == 20 ) #NEWLINE#
parser . add_argument ( '--no-foo' , action = 'store_false' ) #NEWLINE#
super ( GetTitleThread , self ) . __init__ ( ) #NEWLINE#
return np . all ( np . linalg . eigvals ( x ) > 0 ) #NEWLINE#
cv2 . circle ( img , ( x , y ) , 4 , ( 0 , 255 , 0 ) , - 1 ) #NEWLINE#
foo . baz ( ) #NEWLINE#
for line in bent_lines : #NEWLINE# #INDENT# plt . plot ( line [ 0 ] , line [ 1 ] , linewidth = 0.5 , color = 'k' ) #NEWLINE# plt . show ( ) #NEWLINE#
print ( '<img#SPACE#src="data:image/png;base64,{0}">' . format ( data ) ) #NEWLINE#
"""416d76b8811b0ddae2fdad8f4721ddbe|d4f656ee006e248f2f3a8a93a8aec5868788b927|12a5f648928f8e0b5376d2cc07de8e4cbf9f7ccbadb97d898373f85f0a75c47f""" #NEWLINE#
key = lambda x : x [ 0 ] #NEWLINE#
list ( combinations ( list ( range ( 4 ) ) ) ) #NEWLINE#
return result #NEWLINE#
print ( df1 . groupby ( [ 'Name' , 'City' ] , as_index = False ) . count ( ) ) #NEWLINE#
df [ : - 1 ] #NEWLINE#
LABEL = 'device_rules_end' #NEWLINE#
print ( 'You#SPACE#pressed#SPACE#Ctrl+C!' ) #NEWLINE#
[ { 'c' : 185 , 'dow' : 0.0 } , { 'c' : 178 , 'dow' : 5.0 } ] #NEWLINE#
l = [ 1 , 2 , 3 ] #NEWLINE#
self . frame . SetFocus ( ) #NEWLINE#
"""this#SPACE#is#SPACE#{0.a}""" . format ( self ) #NEWLINE#
return super ( DictWithDefault , self ) . __getitem__ ( key ) #NEWLINE#
np . sum ( np . where ( m , 1.0 / p , 0.1 / p ) , axis = 1 ) #NEWLINE#
axes . xaxis . set_ticks_position ( 'bottom' ) #NEWLINE#
s = '\x00\x00\x00\x01\x00\x00\x00ÿÿ\x00\x00' #NEWLINE# struct . unpack ( '11B' , s ) #NEWLINE#
subprocess . call ( [ 'useradd' , '-m' , '-g' , _primarygroup , '-G' , #NEWLINE# _secondarygroup , '-u' , _userid , _username ] ) #NEWLINE#
"""KEY_xK""" . lstrip ( 'KEY_' ) #NEWLINE#
res [ ( i ) , ( j ) , : ] = [ C , X , 0 ] #NEWLINE#
shutil . rmtree ( path ) #NEWLINE#
df [ idx ] #NEWLINE#
df #NEWLINE#
self . device . open ( ) #NEWLINE#
math . factorial ( 10 ) #NEWLINE#
super ( SubclassTracker , cls ) . __init__ ( name , bases , dct ) #NEWLINE#
application = django . core . handlers . wsgi . WSGIHandler ( ) #NEWLINE#
def update_list ( lst , data ) : #NEWLINE# #INDENT# lst . extend ( data ) #NEWLINE#
mlab . plot3d ( [ 0 , 0 ] , [ 0 , 1500 ] , [ 0 , 0 ] , color = black , tube_radius = 10.0 ) #NEWLINE#
print ( ctxt . encode ( 'base64' ) ) #NEWLINE#
return getattr ( obj , self . attr ) #NEWLINE#
fig = plt . figure ( figsize = ( 15 , 5 ) , facecolor = 'w' ) #NEWLINE#
print ( 'finally#SPACE#will#SPACE#still#SPACE#run' ) #NEWLINE#
blog_list = Blog . objects . filter ( town__country__country_name = 'Canada' ) . order_by ( #NEWLINE# '-id' ) #NEWLINE#
p = Popen ( cmd , shell = True , cwd = newpath ) #NEWLINE# p . wait ( ) #NEWLINE#
[ x for x in a_list if x [ 0 ] == 1 ] #NEWLINE#
print ( list ( multilpy_string ( l ) ) ) #NEWLINE#
num_lists = int ( input ( 'How#SPACE#many#SPACE#lists#SPACE#do#SPACE#you#SPACE#want?#SPACE#' ) ) #NEWLINE# lists = [ [ ] for i in range ( num_lists ) ] #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return panel . to_frame ( ) . unstack ( ) . T . groupby ( level = 0 ) #NEWLINE#
data = requests . get ( url ) . json #NEWLINE#
json . loads ( json_data ) #NEWLINE#
time . sleep ( 0.05 ) #NEWLINE#
G . graph . setdefault ( 'graph' , { } ) [ 'rankdir' ] = 'LR' #NEWLINE#
zip ( l , l [ 1 : ] ) [ : : 2 ] #NEWLINE#
self . conditions [ : ] = [ helper ( c , type , params ) for c in self . conditions ] #NEWLINE#
sorted ( [ 'height' , 'id' ] , key = ordering . get ) #NEWLINE#
dbconf . readfp ( open ( 'environment.ini' ) ) #NEWLINE#
cg4 = [ ( 0 , 1 ) , ( 0 , 2 ) , ( 0 , 3 ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 2 , 3 ) ] #NEWLINE# find_eulerian_tour ( cg4 ) #NEWLINE#
print ( mystring [ : 100 ] ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 8 , 3 ) , index = index , columns = list ( 'ABC' ) ) #NEWLINE#
print ( 'Got#SPACE#URL#SPACE#using#SPACE#proxy#SPACE#%s' % proxy ) #NEWLINE#
print ( 'Hello,#SPACE#IPython' ) #NEWLINE#
ax . bar ( x - 0.2 , y , width = 0.2 , color = 'b' , align = 'center' ) #NEWLINE#
psutil . pid_exists ( os . getpid ( ) ) #NEWLINE#
df1 . index = [ '_' . join ( x ) for x in df1 . index ] #NEWLINE#
x = list ( d . keys ( ) ) #NEWLINE#
print ( 'result#SPACE#pass' ) #NEWLINE#
cmat2 = scipy . sparse . csc_matrix ( mat2 ) #NEWLINE#
print ( proc . communicate ( ) ) #NEWLINE#
def do_some_work ( ) : #NEWLINE# #INDENT# plt . pause ( 3 ) #NEWLINE#
print ( repr ( test ) , repr ( is_valid_name ( test ) ) ) #NEWLINE#
return '' . join ( [ a [ x : x + 2 ] for x in range ( 0 , len ( a ) , 2 ) ] [ : : - 1 ] ) #NEWLINE#
df = pd . DataFrame ( [ 1 , 7 , 9 , 5 ] , columns = [ 'A' ] ) #NEWLINE# df #NEWLINE#
settings_value = getattr ( obj , 'CommonSettings' ) #NEWLINE#
os . chmod ( path , stat . S_IWRITE ) #NEWLINE#
return [ parser . parse ( x ) for x in _split ( s ) ] #NEWLINE#
print ( 'and#SPACE#it#SPACE#sums#SPACE#up#SPACE#to#SPACE#%d' % sum ( new_arr ) ) #NEWLINE#
[ './list_argv.py' , 'hi' ] #NEWLINE#
for line in file : #NEWLINE# #INDENT# line = line . strip ( ) #NEWLINE# llist = line . split ( ) #NEWLINE# if llist and llist [ 0 ] == 'NUMS' : #NEWLINE# #INDENT# for line in file : #NEWLINE# #INDENT# #INDENT# line = line . strip ( ) #NEWLINE# if line == 'END' : #NEWLINE# #INDENT# break #NEWLINE# else : #NEWLINE# #INDENT# print ( line , end = '#SPACE#' ) #NEWLINE# print ( ) #NEWLINE#
ax . plot ( xs , ys , * args , ** kwargs ) #NEWLINE#
y [ : ] #NEWLINE#
df1 . columns = [ '_' . join ( ( x [ 1 ] , x [ 0 ] ) ) for x in df1 . columns ] #NEWLINE#
assert os . __name__ == 'os' #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
radar . plot ( [ 3 , 4 , 3 , 4 , 2 ] , '-' , lw = 2 , color = 'g' , alpha = 0.4 , label = 'third' ) #NEWLINE#
array ( [ 27 , 27 , 27 , 26 , 26 , 26 , 26 , 26 , 26 , 26 ] ) #NEWLINE#
frame = Frame ( root , width = 300 , height = 300 ) #NEWLINE#
pandas . set_printoptions ( max_colwidth = 100 ) #NEWLINE#
palindromes = [ ( x + x [ : : - 1 ] ) for x in permutations ( digits , k // 2 ) ] #NEWLINE#
[ 'A' , 'car' , 'has' , 'a' , 'door' ] #NEWLINE#
doing_fd . seek ( 0 ) #NEWLINE#
batch . add_indexed_node ( index , 'key' , 'value' , new_node ) #NEWLINE#
{ { value } } #NEWLINE#
fout . write ( '\n' ) #NEWLINE#
client . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#r' ) #NEWLINE#
f . write ( x . encode ( ) + '\n' ) #NEWLINE#
return abs ( x ) % abs ( y ) * ( 1 if x > 0 else - 1 ) #NEWLINE#
config . readfp ( buf ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
dict . __init__ ( self , * args , ** kwargs ) #NEWLINE#
a = numpy . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE#
app . exec_ ( ) #NEWLINE#
ontrue ( ) #NEWLINE#
print ( interestingelts [ 0 ] ) #NEWLINE#
return [ dict ( pairs ) for pairs in unique ] #NEWLINE#
p5 = axScatter . plot ( ( 0 , 1 ) , 'r--' ) #NEWLINE#
p = Popen ( [ 'myapp' ] , stdout = PIPE , stdin = PIPE , stderr = PIPE ) #NEWLINE#
d = [ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 4 ] , [ 3 , 4 , 5 , 6 , 7 ] ] #NEWLINE#
data_entry . save ( ) #NEWLINE#
print ( url_string ) #NEWLINE#
dict1 = { 'a' : 1 , 'b' : 2 , 'c' : 3 } #NEWLINE#
codecs . escape_decode ( '\\xc3\\x85lesund' . encode ( 'utf-8' ) ) [ 0 ] #NEWLINE#
self . panel . Bind ( wx . EVT_PAINT , self . OnPaint ) #NEWLINE#
writer . writerows ( changes ) #NEWLINE#
img = numpy . zeros ( [ 5 , 5 , 3 ] ) #NEWLINE#
billing_system = db . relationship ( 'BillingSystem' , backref = 'subscriptions' ) #NEWLINE#
frame . Show ( ) #NEWLINE#
ftp_two . storbinary ( 'STOR#SPACE#magnafoto.jpg' , myfile ) #NEWLINE#
return d [ l [ 0 ] ] #NEWLINE#
mpl_is_inline = 'inline' in matplotlib . get_backend ( ) #NEWLINE#
serve_on_port ( 2222 ) #NEWLINE#
spamWriter . writerow ( [ 'Spam' , 'Lovely#SPACE#Spam' , 'Wonderful#SPACE#Spam' ] ) #NEWLINE#
df . drop ( [ 'v1' , 'v2' ] , axis = 1 ) #NEWLINE#
plt . close ( ) #NEWLINE#
name = input ( 'What#SPACE#is#SPACE#your#SPACE#name:#SPACE#' ) #NEWLINE#
cov = np . array ( [ [ 200 , 100 ] , [ 100 , 200 ] ] ) #NEWLINE#
box3 = 2 #NEWLINE#
time . tzset ( ) #NEWLINE#
self . PauseButton . SetLabel ( 'Resume' ) #NEWLINE#
plt . contourf ( Yi , Xi , Z , alpha = 0.7 , cmap = plt . cm . jet ) #NEWLINE#
os . chdir ( 'relative#SPACE#path#SPACE#to#SPACE#the#SPACE#src#SPACE#dir' ) #NEWLINE#
print ( ( 'modified#SPACE#tfc:\n' , tfc . eval ( ) ) ) #NEWLINE#
return lambda x : int ( float ( x ) ) #NEWLINE#
groups = np . array ( [ 1 , 1 , 1 , 2 , 3 , 3 ] ) #NEWLINE#
a = [ 1 , 2 , 3 , 7 , 8 ] #NEWLINE#
INSTDIR = os . path . dirname ( os . path . realpath ( __file__ ) ) #NEWLINE#
f . write ( '#SPACE#' . join ( map ( str , a ) ) ) #NEWLINE#
- 0.5567679522645598 #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
return 2 * np . arcsin ( np . minimum ( 1 , np . sqrt ( a ) ) ) * radius #NEWLINE#
el = driver . find_element_by_id ( 'someid' ) #NEWLINE# webdriver . ActionChains ( driver ) . move_to_element ( el ) . click ( el ) . perform ( ) #NEWLINE#
do_something ( ) #NEWLINE#
mlb . focus_set ( ) #NEWLINE#
plt . subplot ( 211 ) #NEWLINE#
print ( 'These#SPACE#are#SPACE#equal' ) #NEWLINE#
form . is_valid ( ) #NEWLINE#
plt . ylim ( 0 , 10 ) #NEWLINE#
any ( e for e in test_list if e . startswith ( 'three' ) or e . endswith ( 'four' ) ) #NEWLINE#
auth_login ( request , user ) #NEWLINE#
wx . Frame . __init__ ( self , parent , - 1 , 'Custom#SPACE#Panel#SPACE#Grid#SPACE#Demo' ) #NEWLINE#
mydict2 [ 'b' ] #NEWLINE#
self . parent . title ( 'Tree' ) #NEWLINE#
DO_SOMETHING ( ) #NEWLINE#
{ 'name' : 'restricted' , 'reasonCode' : 'limitedSyndication' } #NEWLINE#
print ( r . sub ( '<a#SPACE#href="\\1">\\1</a>' , myString ) ) #NEWLINE#
ax . set_xlim ( * lims [ 0 ] ) #NEWLINE#
print ( '123' + '456' ) #NEWLINE#
log ( ) #NEWLINE#
inverse_dict [ v ] . append ( k ) #NEWLINE#
points = [ [ 0 , 0 ] , [ 0 , 2 ] , [ 2 , 3 ] , [ 4 , 0 ] , [ 6 , 3 ] , [ 8 , 2 ] , [ 8 , 0 ] ] #NEWLINE#
url ( '^subfeature/' , views . a ) , #NEWLINE#
618228923380 #NEWLINE#
br . set_cookiejar ( cj ) #NEWLINE#
ax . axis ( [ 0 , 10 , 0 , 255 ] ) #NEWLINE#
t . colname == getattr ( t , Table . colname . property . key ) #NEWLINE#
ax . axis ( [ 0 , max_dim , 0 , max_dim ] ) #NEWLINE#
import imp #NEWLINE# imp . reload ( __import__ ( d [ 'module' ] ) ) #NEWLINE#
plt . scatter ( x , y ) #NEWLINE# plt . show ( ) #NEWLINE#
return map ( joiner , sixgrams ) #NEWLINE#
f = open ( 'bar.text' , 'w' ) #NEWLINE# f . write ( unicode_object . encode ( 'utf8' ) ) #NEWLINE#
fp . set_preference ( 'general.useragent.override' , 'whater_useragent' ) #NEWLINE#
plt . stem ( x , y ) #NEWLINE#
settings . py #NEWLINE#
print ( format ( a [ 0 ] / a [ 1 ] , '.65f' ) ) #NEWLINE#
print ( newList ) #NEWLINE#
self . frames . append ( ImageTk . PhotoImage ( frame ) ) #NEWLINE#
a = np . matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
print ( ( a , b , c ) ) #NEWLINE#
sys . path . append ( './Lib' ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""Collect#SPACE#data#SPACE#into#SPACE#fixed-length#SPACE#chunks#SPACE#or#SPACE#blocks""" #NEWLINE#
frame . axes . get_xaxis ( ) . set_ticks ( [ ] ) #NEWLINE#
f = open ( '/tmp/test.txt' , 'w' ) #NEWLINE#
app = web . application ( urls , globals ( ) ) #NEWLINE#
app . connect ( 'doctree-resolved' , do_something ) #NEWLINE#
G . add_edge ( 1 , 2 ) #NEWLINE#
name = values . get ( 'name' , 'Guido' ) #NEWLINE#
print ( ( 'path#SPACE#=' , path ) ) #NEWLINE#
print ( neighborhood ( G , 'v1' , 2 ) ) #NEWLINE#
appdata = path . join ( environ [ 'APPDATA' ] , APPNAME ) #NEWLINE#
print ( '#SPACE#' . join ( '{}' . format ( k ) for k in lst ) ) #NEWLINE#
time . sleep ( random . random ( ) * 5 ) #NEWLINE#
child . expect ( 'Enter#SPACE#password:' ) #NEWLINE#
random . seed ( 0 ) #NEWLINE#
arrow . utcnow ( ) . isoformat ( ) #NEWLINE#
super ( MyListView , self ) . get_context_data ( ** context ) #NEWLINE#
object . __setattr__ ( self , '_paramOrder' , [ ] ) #NEWLINE#
os . read ( sys . stdin . fileno ( ) , 4096 ) #NEWLINE#
arr = [ [ ] for _ in range ( 5 ) ] #NEWLINE# arr #NEWLINE#
print ( '-----------#SPACE#Martijn#SPACE#----------------------' ) #NEWLINE#
print ( '-----------#SPACE#Martijn#SPACE#2#SPACE#------------' ) #NEWLINE#
print ( '-----------#SPACE#eyquem#SPACE#2#SPACE#------------' ) #NEWLINE#
print ( np . apply_along_axis ( myfunction , axis = 1 , arr = mymatrix ) ) #NEWLINE#
ringo = Author . objects . create ( name = 'Ringo' ) #NEWLINE#
a = [ None , None , None ] #NEWLINE#
formattedline = '#SPACE#' . join ( '%10.6f' % F for F in aa [ ( ii ) , : ] ) #NEWLINE#
s = s . replace ( 'blah' , x , 1 ) #NEWLINE#
return len ( line ) == 9 and sum ( line ) == sum ( set ( line ) ) #NEWLINE#
format ( 7.7 , '.0f' ) #NEWLINE#
writer . writerow ( [ row [ 0 ] . year , row [ 0 ] . month , row [ 0 ] . day , row [ 1 ] , row [ 2 ] , row [ 3 ] ] #NEWLINE# ) #NEWLINE#
rgetattr ( f , 'bar.baz.quux' ) #NEWLINE#
m = re . search ( pattern , text ) #NEWLINE#
useful = l [ match [ 0 ] + 4 : match [ 0 ] + 8 ] #NEWLINE#
local_p . kill ( ) #NEWLINE#
parser . add_argument ( 'key2' , type = str ) #NEWLINE#
saveglobals ( savepath ) #NEWLINE#
idx = pd . date_range ( '1/1/2010' , periods = 4000000 , freq = 'T' ) #NEWLINE#
c . setdefault ( d [ 'id' ] , [ ] ) . append ( d [ 'desc' ] ) #NEWLINE#
print ( response . info ( ) ) #NEWLINE#
self . driver . implicitly_wait ( 30 ) #NEWLINE#
for f in os . listdir ( folder ) : #NEWLINE# #INDENT# process ( f ) #NEWLINE#
df [ 'dates' ] = df [ 'dates' ] . apply ( lambda x : str ( x ) ) #NEWLINE# print ( df . types ) #NEWLINE#
print ( type ( my_date ) ) #NEWLINE#
widgets = { 'gender' : forms . RadioInput } #NEWLINE#
self . instream . close ( ) #NEWLINE#
subprocess . Popen ( [ sys . executable , SCRIPT_NAME ] ) #NEWLINE#
injected_var = injected_var #NEWLINE#
pipdeptree #NEWLINE#
Popen ( [ executable , 'script.py' ] , creationflags = CREATE_NEW_CONSOLE ) #NEWLINE#
ax . collections [ 0 ] . colorbar . set_label ( 'Hello' ) #NEWLINE#
yield b [ 0 ] [ 1 ] , b [ - 1 ] [ 1 ] #NEWLINE#
return zip ( * grid ) #NEWLINE#
with codecs . open ( filename , 'w' , encoding = 'utf8' ) as f : #NEWLINE# #INDENT# f . write ( text ) #NEWLINE#
a = [ [ i ] for i in range ( 5 ) ] #NEWLINE#
os . chdir ( directorypath ) #NEWLINE#
cv2 . VideoCapture ( 'input_video.mp4' ) #NEWLINE#
df . index [ : - 1 ] . union ( [ df . index [ - 1 ] + pd . offsets . MonthEnd ( 0 ) ] ) #NEWLINE#
ax . autoscale ( ) #NEWLINE#
foo [ index ] = foo [ index ] [ 0 ] , new_value #NEWLINE#
setattr ( c , a , getattr ( cls , a ) ) #NEWLINE#
df [ 'Age_Group' ] [ df [ 'Age' ] > 40 ] = '>40' #NEWLINE#
print ( value [ 0 ] ) #NEWLINE#
print ( row ) #NEWLINE#
rdst = requests . post ( urldst , files = { 'file' : rsrc . content } ) #NEWLINE#
do_something_with_i ( i ) #NEWLINE#
self . fields [ 'long_desc' ] . widget . attrs [ 'style' ] = 'width:800px;#SPACE#height:80px;' #NEWLINE#
df = df [ [ 'user' , 'item' , 'value' ] ] . reset_index ( drop = True ) #NEWLINE# df #NEWLINE#
mock_output . reset_mock #NEWLINE#
c . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#last_names' ) #NEWLINE#
for infile in sorted ( glob . glob ( '*.txt' ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 10 , 5 ) , columns = list ( 'abcde' ) ) #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
return str ( self . num ) #NEWLINE#
ax1 . set_ylabel ( 'Scaleable#SPACE#axis' ) #NEWLINE#
cur . execute ( 'drop#SPACE#table#SPACE#if#SPACE#exists#SPACE#test;' ) #NEWLINE#
cur . execute ( 'CREATE#SPACE#TABLE#SPACE#foo(bar#SPACE#DATE)' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#foo' ) #NEWLINE#
return redirect ( '/' ) #NEWLINE#
silvermoon [ 'population' ] #NEWLINE#
mailServer = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
Entry . objects . filter ( name = request . POST [ 'name' ] , title = request . POST [ 'title' ] #NEWLINE# ) . exists ( ) #NEWLINE#
hashed_password = hashlib . sha512 ( password + salt ) . hexdigest ( ) #NEWLINE#
print ( np . swapaxes ( im . reshape ( 3 , 3 , 3 , - 1 ) , 1 , 2 ) ) #NEWLINE#
mypads . border ( 0 ) #NEWLINE#
'Four' in Constants . __members__ #NEWLINE#
unsorted_list = [ '3D' , '2C' , '6D' , '4D' , '2D' ] #NEWLINE# sorted ( unsorted_list , key = lambda x : order . get ( x , float ( 'inf' ) ) ) #NEWLINE#
dpkg - buildpackage - rfakeroot #NEWLINE#
le . transform ( [ 'tokyo' , 'tokyo' , 'paris' ] ) #NEWLINE#
print ( reg . sub ( '\\1Ia#SPACE#orana' , ss ) ) #NEWLINE#
socket . connect ( 'tcp://127.0.0.1:5555' ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 8 ] #NEWLINE#
foo_parser . add_argument ( '-c' , '--count' ) #NEWLINE#
print ( 'Default#SPACE#name' ) #NEWLINE#
conditions = [ df [ 'one' ] < df [ 'two' ] , df [ 'one' ] <= df [ 'three' ] ] #NEWLINE# choices = [ df [ 'two' ] , df [ 'one' ] ] #NEWLINE#
_style . fill . start_color . index #NEWLINE#
response = urllib . request . urlopen ( 'WHEREEVER' ) #NEWLINE#
cnct . to_csv ( 'TotalAvg.csv' ) #NEWLINE#
root . bind ( '<<TimeChanged>>' , timeChanged ) #NEWLINE#
[ ( b - a ) for a , b in pairwise ( L ) ] #NEWLINE#
sys . stdout . write ( '\n' ) #NEWLINE#
print ( 'Content-Type:#SPACE#text/html' ) #NEWLINE#
obj . some_method ( ) #NEWLINE#
array ( [ 0 , 2 , 3 , 4 , 6 ] ) , #NEWLINE#
Button ( win1 , text = 'Exit1' , command = close ) . pack ( ) #NEWLINE#
print ( '%f' % x ) #NEWLINE#
ax . invert_yaxis ( ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE# a [ - 1 : ] + a [ : - 1 ] #NEWLINE#
img = cv2 . rectangle ( img , ( x , y ) , ( x + w , y + h ) , ( 255 , 0 , 0 ) , 2 ) #NEWLINE#
s = match . group ( 0 ) #NEWLINE#
print ( 'No#SPACE#results#SPACE#found.' ) #NEWLINE#
System . out . println ( str . toString ( ) ) #NEWLINE#
return self . x == other . x #NEWLINE#
config . add_section ( 'section_b' ) #NEWLINE#
df = df . append ( data ) #NEWLINE#
list_of_lists = [ [ 1 , 2 ] , [ 2 , 3 ] ] #NEWLINE#
self . mock_requests . get . assert_called_with ( url ) #NEWLINE#
return p . i , p . fitness #NEWLINE#
file1 . write ( '111' ) #NEWLINE#
unicodedata . normalize ( 'NFKC' , foo ) #NEWLINE#
subprocess . call ( [ 'open' , '-W' , '-a' , 'Terminal.app' , 'python' , '--args' , #NEWLINE# 'bb.py' ] ) #NEWLINE#
func ( "I'm#SPACE#only#SPACE#passing#SPACE#a" , a = 'a' ) #NEWLINE#
x = np . array ( [ [ 'a.' , 'cd' ] , [ 'ef' , 'g.' ] ] ) #NEWLINE#
full_arr . view ( 'f8,#SPACE#f8,#SPACE#f8' ) . sort ( order = [ 'f0' ] , axis = 0 ) #NEWLINE#
d [ number ] . append ( line ) #NEWLINE#
plt . plot ( x , y , '+' ) #NEWLINE#
index = pd . MultiIndex . from_product ( [ pairs , [ 1 , 2 ] ] , names = [ 'pair' , 'cond' ] ) #NEWLINE#
screen . show ( ) #NEWLINE#
print ( '_iteritems_start' , mp . current_process ( ) ) #NEWLINE#
print ( 'iteritems#SPACE#proxy' , mp . current_process ( ) ) #NEWLINE#
print ( 'iteritems2#SPACE#proxy' , mp . current_process ( ) ) #NEWLINE#
p . stdout . read #NEWLINE#
list ( '123' . iterbytes ( ) ) #NEWLINE#
new_dict #NEWLINE#
return str ( value ) #NEWLINE#
request . add_header ( 'Accept-encoding' , 'gzip' ) #NEWLINE#
elems . click ( ) #NEWLINE#
instance . delete ( ) #NEWLINE#
aDict = dict ( zip ( string . ascii_lowercase , list ( range ( 1 , 27 ) ) ) ) #NEWLINE#
for link in soup . findAll ( 'div' , { 'class' : 'listEntry#SPACE#' } ) : #NEWLINE# #INDENT# pass #NEWLINE#
return HttpResponse ( folders ) #NEWLINE#
next . function ( ) #NEWLINE#
return [ random . randint ( low , high ) for _ in range ( count ) ] #NEWLINE#
headers = { 'Content-Type' : 'application/soap+xml;#SPACE#charset=utf-8' } #NEWLINE#
for idx , item in enumerate ( li ) : #NEWLINE# #INDENT# li [ idx ] = 'foo' #NEWLINE#
print ( my_func . __doc__ ) #NEWLINE#
QGraphicsTextItem . mouseReleaseEvent ( self , event ) #NEWLINE#
axes . spines [ 'right' ] . set_color ( 'none' ) #NEWLINE#
df [ 'A' ] , df [ 'B' ] = df [ 'AB' ] . str . split ( '-' , 1 ) . str #NEWLINE#
request . add_header ( 'Content-Type' , 'application/zip' ) #NEWLINE#
results = [ x for x in json_object [ 'results' ] if 'year' in x ] #NEWLINE# sorted ( results , key = lambda x : x [ 'year' ] ) #NEWLINE#
ind = [ i [ 0 ] for i in sorted ( enumerate ( b ) , key = lambda x : x [ 1 ] ) ] #NEWLINE#
subprocess . call ( 'net#SPACE#time#SPACE#\\\\172.21.5.135' ) #NEWLINE#
suspect [ k ] = v #NEWLINE#
layout . addWidget ( QLabel ( 'click#SPACE#on#SPACE#the#SPACE#picture' ) ) #NEWLINE#
db . delete ( d ) #NEWLINE#
req . send ( data ) #NEWLINE#
deactivate #NEWLINE#
foo . blah = 'bar' #NEWLINE#
plt . yticks ( np . arange ( 0 , 70000 , 3000 ) ) #NEWLINE#
a [ 1 , 2 , 3 , 4 ] #NEWLINE#
print ( r . url ) #NEWLINE#
driver . get ( 'https://finance.yahoo.com/quote/CSX/analysts?p=CSX' ) #NEWLINE#
for i in menu . get_children ( ) : #NEWLINE# #INDENT# menu . remove ( i ) #NEWLINE#
MAYBECHOICE = ( 0 , 'Yes' ) , ( 1 , 'No' ) , ( 2 , 'Unknown' ) #NEWLINE#
filelike . seek ( 0 ) #NEWLINE#
my_book = Book . objects . get ( pk = 1 ) #NEWLINE#
d = { 'your' : 'DATA' , 'FROM' : 'above' } #NEWLINE#
new_im_vec = ravel ( rollaxis ( im , 2 ) ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
main . mainfunction ( lib . fn1 ) #NEWLINE#
v . seek ( 0 ) #NEWLINE#
self . _handle ( * args , ** options ) #NEWLINE#
pool . join ( ) #NEWLINE#
print ( get_max_count ( l = l , num = 7 ) ) #NEWLINE#
fxn ( ) #NEWLINE#
merged . L . fillna ( merged . pop ( 'L_y' ) , inplace = True ) #NEWLINE#
myfunctions . py #NEWLINE#
list . activites . all ( ) #NEWLINE#
print ( df . reset_index ( ) . to_json ( orient = 'records' ) ) #NEWLINE#
letters = [ ( 'a' , 'A' ) , ( 'b' , 'B' ) ] #NEWLINE#
df [ 'Z' ] = pd . to_numeric ( df [ 'Z' ] , errors = 'coerce' ) #NEWLINE#
sys . stdout . write ( 'stdout:#SPACE#' + read ) #NEWLINE#
a [ : : 2 ] = [ - 1 , - 2 ] #NEWLINE#
[ list ( filter ( str . isalpha , word ) ) for word in s . lower ( ) . split ( ) if word [ 0 ] . #NEWLINE# isalpha ( ) ] #NEWLINE#
close . setIcon ( QtGui . QIcon ( 'img/close.png' ) ) #NEWLINE#
cpp_args = [ '-Wall' , '-pedantic' ] #NEWLINE#
parser . error ( 'custom#SPACE#error#SPACE#message' ) #NEWLINE#
plt3d . set_ylim ( - 10 , 10 ) #NEWLINE#
return [ double ( x ) for x in li ] #NEWLINE#
dict [ 'key3' ] = [ 7 , 8 , 9 ] #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
f_out . writelines ( word + '\n' for word in bases ( words ) ) #NEWLINE#
return result . group ( ) , result . span ( ) [ 0 ] #NEWLINE#
super ( LockedSet , self ) . __contains__ ( elem ) #NEWLINE#
self . file = self . sock . makefile ( 'rb' ) #NEWLINE#
plt . title ( 'Original' ) #NEWLINE#
b [ 0 ] *= - 1 #NEWLINE#
for i in range ( 1 , n + 1 ) : #NEWLINE# #INDENT# r *= i #NEWLINE# return r #NEWLINE#
print ( f ( 2 ) ) #NEWLINE#
Maybe ( None , TypeError ( "can't#SPACE#multiply#SPACE#sequence#SPACE#by#SPACE#non-int#SPACE#of#SPACE#type#SPACE#'str'" ) ) #NEWLINE#
contourf ( x , y , H , levels , cmap = cmap_lin ) #NEWLINE#
contourf ( x , y , H , levels , cmap = cmap_nonlin ) #NEWLINE#
body = urllib . parse . urlencode ( post_data ) #NEWLINE#
map ( lambda s : s [ 0 : 3 ] , lines ) #NEWLINE#
result = fn ( x , y ) #NEWLINE#
return Response ( post_serializer . data ) #NEWLINE#
lock . acquire ( ) #NEWLINE#
t [ 0 ] . __sizeof__ ( ) #NEWLINE#
conn . search ( query = Search ( s ) , indexes = [ 'test' ] , sort = '_score,price' ) #NEWLINE#
self . connectToMUC ( ) #NEWLINE#
return 'a:%s,#SPACE#b:%s,#SPACE#c:%s#SPACE#' % ( a , b , c ) #NEWLINE#
Br = [ x , x , x , x , x , 0 ] #NEWLINE#
urlparse ( url ) . query #NEWLINE#
list ( map ( add , [ 1 , 2 , 3 ] , repeat ( 4 ) ) ) #NEWLINE#
ax . set_zlabel ( '$s^2$' ) #NEWLINE#
im . show ( ) #NEWLINE#
G . add_edges_from ( [ ( 1 , 2 ) , ( 1 , 2 ) , ( 1 , 3 ) , ( 2 , 3 ) , ( 2 , 3 ) ] ) #NEWLINE#
img = cairo . ImageSurface ( cairo . FORMAT_ARGB32 , 640 , 480 ) #NEWLINE#
df . to_hdf ( 'test.h5' , 'df' , mode = 'w' , format = 'table' , data_columns = [ 'A' , 'B' ] ) #NEWLINE#
plt . yscale ( 'log' ) #NEWLINE#
t5 = threading . Thread ( target = task5 ) #NEWLINE#
json_string = json . dumps ( d ) #NEWLINE#
stdscr . addstr ( 'Continue#SPACE#(Y/N)?[Y]:' ) #NEWLINE#
stdscr . addstr ( '\n' ) #NEWLINE#
stdscr . addstr ( 'Exiting.....\n' ) #NEWLINE#
request . add_header ( 'Content-Type' , 'application/json' ) #NEWLINE#
T2 ( ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
print ( 'Arg:' , arg ) #NEWLINE#
p . wait ( ) #NEWLINE#
del self . d [ k ] #NEWLINE#
plt . imshow ( normalized ) #NEWLINE#
c = a [ : : 2 ] #NEWLINE#
[ 1 , 2 , 3 ] . index ( 2 ) #NEWLINE#
row = [ 1 , [ 0.1 , 0.2 ] , [ [ 1234 , 1 ] , [ 134 , 2 ] ] ] #NEWLINE#
href = tag . get ( 'href' ) #NEWLINE#
width = int ( self . cget ( 'width' ) ) #NEWLINE#
return chain . from_iterable ( combinations ( s , r ) for r in range ( len ( s ) + 1 ) ) #NEWLINE#
print ( ( '%-30s' % 'Peter#SPACE#fixed#SPACE#dict' , time ( ) - t ) ) #NEWLINE#
print ( ( '%-30s' % 'Claudio#SPACE#fixed#SPACE#dict' , time ( ) - t ) ) #NEWLINE#
print ( ( '%-30s' % 'Andrew#SPACE#Y#SPACE#variable#SPACE#dict' , time ( ) - t ) ) #NEWLINE#
print ( ( '%-30s' % 'Andrew#SPACE#Y#SPACE#variable#SPACE#dict#SPACE#2' , time ( ) - t ) ) #NEWLINE#
print ( ( '%-30s' % 'Andrew#SPACE#Y#SPACE#fixed#SPACE#dict' , time ( ) - t ) ) #NEWLINE#
base64 . decodestring ( 'foo' ) #NEWLINE#
name = 'Spongebob#SPACE#Squarepants' #NEWLINE# print ( 'Who#SPACE#lives#SPACE#in#SPACE#a#SPACE#Pineapple#SPACE#under#SPACE#the#SPACE#sea?#SPACE#{name!s}.' . format ( ** locals ( ) ) ) #NEWLINE#
pool = ThreadPool ( processes = 1 ) #NEWLINE#
compare ( mylist [ i ] , mylist [ j ] ) #NEWLINE#
df3 . set_index ( 'day' , inplace = True ) #NEWLINE#
wx . Frame . __init__ ( self , parent , wx . NewId ( ) , 'Logging' ) #NEWLINE#
sp = subprocess . Popen ( command , shell = True , stdin = sys . stdin ) #NEWLINE#
y = np . array ( [ 0 , 0 , 2 ] ) #NEWLINE#
registry . register ( self . get_model ( 'Car' ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( "Uh#SPACE#oh,#SPACE#I#SPACE#don't#SPACE#know#SPACE#about#SPACE#that#SPACE#item" ) #NEWLINE#
[ 0.0 , 0.4 , 0.6 , 0.0 , 0.0 ] #NEWLINE#
d [ 'first' ] = 1 #NEWLINE#
recursive_render ( 'Hello#SPACE#{{X}}!' , dict ( X = '{{name}}' , name = 'world' ) ) #NEWLINE#
array ( [ [ 9 , 12 , 15 ] , [ 36 , 39 , 42 ] , [ 63 , 66 , 69 ] ] ) , #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return FALSE #NEWLINE#
G . add_node ( 0 , s = '^' , b = 1 ) #NEWLINE#
main ( ) #NEWLINE#
df . groupby ( 'A' ) . transform ( lambda x : x [ 'C' ] - x [ 'D' ] ) #NEWLINE#
a = np . array ( [ 1 , 3 , 4 ] ) #NEWLINE#
df . amount . plot ( kind = 'bar' , color = 'red' , ax = ax , width = width , position = 1 ) #NEWLINE#
np . inner ( a , b ) #NEWLINE#
ax2 . spines [ 'left' ] . set_visible ( False ) #NEWLINE#
print ( permutenew ( l ) ) #NEWLINE#
print ( cv2 . __version__ ) #NEWLINE#
fin . close ( ) #NEWLINE#
File . create ( collection = collection , name = '/secret/password' ) #NEWLINE#
u = np . unique ( arr ) #NEWLINE#
return time . localtime ( ) . tm_isdst > 0 #NEWLINE#
return self . vaue if isinstance ( self , Just ) else default #NEWLINE#
self . assertEqual ( 'foo' , self . resource ) #NEWLINE#
foo2 = partial ( foo , my_string = 'my_string_example' ) #NEWLINE#
DEBUG = True #NEWLINE#
list ( it . product ( x , mit . flatten ( y ) ) ) #NEWLINE#
set ( x for x in hello if hello . count ( x ) == m ) #NEWLINE#
f = open ( filepath , 'a' ) #NEWLINE#
plt . gca ( ) . cla ( ) #NEWLINE#
self . assertEqual ( self . pubsub . punsubscribe ( 'fo*' ) , [ 'punsubscribe' , 'fo*' , 0 ] ) #NEWLINE#
session . commit ( ) #NEWLINE#
a = '2(3.4)' #NEWLINE# a [ a . index ( '(' ) + 1 : a . rindex ( ')' ) ] #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
[ ( 'a' , 1 ) , ( 'b' , 1 ) , ( 'c' , 1 ) ] #NEWLINE#
return lambda x : p ( i , x ) #NEWLINE#
func2 ( ) #NEWLINE#
p . start ( ) #NEWLINE#
toss2 = toss . copy ( ) #NEWLINE#
self . assertEqual ( self . driver . get_title ( ) , 'Sample#SPACE#Test#SPACE#Page' ) #NEWLINE#
raise OSError ( "Couldn't#SPACE#stat#SPACE#file#SPACE#%r" % path ) #NEWLINE#
func ( sympy . Symbol ( 'y' ) ) #NEWLINE#
a [ 8 ] = 'B' #NEWLINE#
datetime . utcfromtimestamp ( dt64 . astype ( int ) ) #NEWLINE#
config = yaml . safe_load ( open ( 'path/to/config.yml' ) ) #NEWLINE#
"""τoρνoς""" . decode ( 'utf-16' ) #NEWLINE# """τoρνoς""" . decode ( 'utf-8' ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
db . create_all ( ) #NEWLINE#
axes [ 0 ] . plot ( [ x0 , x1 ] , [ y0 , y1 ] , 'ro-' ) #NEWLINE#
ax = fig . add_subplot ( 221 ) #NEWLINE#
df . ix [ : , ( df . columns . isin ( col_list ) ) ] #NEWLINE#
self . _lines . append ( d ) #NEWLINE#
a = np . arange ( 11 ) #NEWLINE#
graph = GraphAPI ( oauth_access_token ) #NEWLINE# graph . post ( path = 'me/photos' , source = open ( 'parrot.jpg' ) ) #NEWLINE#
plt . figure ( ) #NEWLINE#
a = np . array ( [ 1 + 2.0j , 5 + 7.0j ] ) #NEWLINE#
return df [ ~ df . col . str . get ( 0 ) . isin ( [ 't' , 'c' ] ) ] #NEWLINE#
binimg = np . zeros ( ( rgbimg . shape [ 0 ] , rgbimg . shape [ 1 ] ) ) #NEWLINE#
{ { item . date | localtime } } #NEWLINE#
o5 . method #NEWLINE#
plt . show ( ) #NEWLINE#
raise ValueError ( 'bad#SPACE#float:#SPACE#%s' % s [ pos : ] ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
path , tail = os . path . split ( path ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
raise NotImplementedError #NEWLINE#
DataCaptured = csv . reader ( DataFile , delimiter = ',' , skipinitialspace = True ) #NEWLINE#
list . __init__ ( self ) #NEWLINE#
ax1 . bar ( x , y1 , 1 , alpha = 0.9 , edgecolor = 'black' , facecolor = 'blue' , zorder = 1 ) #NEWLINE#
l = [ 1 , 2 , 3 , 7 ] #NEWLINE# print ( '' . join ( [ str ( x ) for x in l ] ) ) #NEWLINE#
f1 ( ) #NEWLINE#
re . findall ( p , test_str ) #NEWLINE#
return list ( set ( result ) ) #NEWLINE#
print ( next ( islice ( f , i , None ) ) ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
cv2 . imshow ( 'mapped_image' , im_color ) #NEWLINE#
Counter ( ( type ( x ) , x ) for x in arr ) #NEWLINE#
re . sub ( '\\ba\\+\\s' , 'aplus#SPACE#' , 'I#SPACE#passed#SPACE#my#SPACE#a+#SPACE#exam.' ) #NEWLINE#
wkt . dumps ( point ) #NEWLINE#
sample = [ [ 1 , [ 1 , 0 ] ] , [ 1 , 1 ] ] #NEWLINE#
writer = open ( 'junk.txt' , 'wb' ) #NEWLINE#
return math . floor ( numpy . nextafter ( x , - numpy . inf ) ) #NEWLINE#
print ( error . __class__ . __name__ , error ) #NEWLINE#
plt . scatter ( x [ i ] , y [ i ] , marker = mapping [ m [ i ] ] ) #NEWLINE#
plt . gca ( ) . set_position ( [ 0 , 0 , 1 , 1 ] ) #NEWLINE# plt . savefig ( 'test.svg' ) #NEWLINE#
url ( '^api/' , include ( router . urls ) ) , #NEWLINE#
b = { name : a [ name ] for name in a . dtype . names } #NEWLINE#
kwargs [ 'help_text' ] = '' #NEWLINE#
signal . signal ( signal . SIGINT , signal_handler ) #NEWLINE#
np . random . shuffle ( lst ) #NEWLINE#
ret = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
conn . request ( 'POST' , '/socket.io/1/' ) #NEWLINE#
pytest . exit ( 'decided#SPACE#to#SPACE#stop#SPACE#the#SPACE#test#SPACE#run' ) #NEWLINE#
assert False , 'I#SPACE#mean#SPACE#for#SPACE#this#SPACE#to#SPACE#fail' #NEWLINE#
print ( request . form [ 'projectFilepath' ] ) #NEWLINE#
pd . set_option ( 'display.max_columns' , 500 ) #NEWLINE#
msg . attach ( part ) #NEWLINE#
print ( pd . get_dummies ( values [ mask ] ) ) #NEWLINE#
surface . write_to_png ( ofile ) #NEWLINE#
f = open ( '/Users/USERNAME/Desktop/somedir/somefile.txt' ) #NEWLINE#
root . bind ( '<Return>' , onclick ) #NEWLINE#
cbar = plt . colorbar ( CF , ticks = lvls , format = l_f ) #NEWLINE#
match . group ( 0 ) #NEWLINE#
1 << np . arange ( m ) #NEWLINE#
( - 1.07 + 0.0j ) ** 1.3 #NEWLINE#
t . set_ha ( 'right' ) #NEWLINE#
print ( ( letter , 'is#SPACE#one#SPACE#of#SPACE#the#SPACE#most#SPACE#common#SPACE#letters!' ) ) #NEWLINE#
return '-${:,.2f}' . format ( abs ( value ) ) #NEWLINE#
ax . imshow ( X , interpolation = 'nearest' ) #NEWLINE#
sum ( alist ) #NEWLINE#
checkBox = QtGui . QCheckBox ( ) #NEWLINE#
cax = fig . add_subplot ( 122 ) #NEWLINE#
df1 . iloc [ 1 : 5 , 2 : 4 ] #NEWLINE#
self . bind ( '<Configure>' , self . on_resize ) #NEWLINE#
printf ( '*' ) #NEWLINE#
printf ( '\n' ) #NEWLINE#
new_df . index . set_levels ( group_names , level = 0 , inplace = True ) #NEWLINE#
pandas . DataFrame ( { 'a' : a , 'Zscore' : z } ) #NEWLINE#
photoImg = ImageTk . PhotoImage ( img ) #NEWLINE#
n = [ x for x in n if x in string . whitespace or x not in string . printable ] #NEWLINE#
return [ ] #NEWLINE#
curses . cbreak ( ) #NEWLINE#
rows = table . findAll ( 'th' ) #NEWLINE#
send_from_directory ( cache_timeout = 0 ) #NEWLINE#
df [ 'one' ] = 'foo' #NEWLINE#
key , value = dict . popitem ( ) #NEWLINE#
preprocessed , _ = p . communicate ( ) #NEWLINE#
log_file . close ( ) #NEWLINE#
titanic = sns . load_dataset ( 'titanic' ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( '<alan#SPACE#x="y"#SPACE#/><anne>hello</anne>' ) #NEWLINE# print ( soup . prettify ( ) ) #NEWLINE#
conn = S3Connection ( 'KEY' , 'SECRET' ) #NEWLINE#
dfm_summary = pd . concat ( dfs , axis = 1 ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( cj ) ) #NEWLINE#
B = np . split ( A , np . argwhere ( A [ : , ( 0 ) ] == 0.0 ) . flatten ( ) [ 1 : ] ) #NEWLINE#
dict_tokzr = { 'WORD' : tokzr_WORD , 'SENTENCE' : tokzr_SENT , 'QA' : tokzr_QA } #NEWLINE#
g = g . map ( sns . distplot , 'variable' ) #NEWLINE#
listView = next ( c for c in controls if c . name == 'ListView' ) #NEWLINE#
slice_coords_by_x ( arr , xmin = 1 , xmax = 5 ) #NEWLINE#
[ counts [ w ] for w in word_list ] #NEWLINE#
f = open ( 'a.p' , 'wb' ) #NEWLINE#
list ( gen ( ) ) #NEWLINE#
def func ( num , start , end ) : #NEWLINE# #INDENT# return num if start < num < end else start if num <= start else end #NEWLINE#
unittest . main ( ) #NEWLINE#
df = pd . read_csv ( open ( 'mydata.csv' , 'rb' ) , delimiter = '\t' ) #NEWLINE#
tel = entrie [ 'extensions' ] . get ( 'telephone' , '' ) #NEWLINE#
popen . wait ( ) #NEWLINE#
return f ( * args ) #NEWLINE#
AC_SUBST ( [ PYTHON_LIBS ] ) #NEWLINE#
[ 6.49 , 48.9995 ] #NEWLINE#
[ 5.22 , 39.410999999999994 ] #NEWLINE#
return sorted ( matches , key = len , reverse = True ) [ 0 ] #NEWLINE#
soup = BS ( urllib . request . urlopen ( './test.html' ) . read ( ) ) #NEWLINE#
print ( line ) #NEWLINE#
spamWriter . writerow ( [ 'Spam' , 'Lovely,#SPACE#Spam' ] ) #NEWLINE#
gtk . main ( ) #NEWLINE#
table [ table . column_name == some_value ] #NEWLINE#
config = { 'key1' : 'value1' , 'key2' : 'value2' } #NEWLINE#
data = [ td . text for td in row . find_all ( 'td' ) if td . text ] #NEWLINE#
graph = nx . Graph ( ) #NEWLINE#
return Test ( somevalue ) #NEWLINE#
nifty_thing ( 'foo' , 'bar' , 'baz' ) #NEWLINE#
os . chdir ( curdir ) #NEWLINE#
return [ e for e in l if e % 2 == 0 ] #NEWLINE#
processed_files_file = os . path . join ( path , 'processed_files.txt' ) #NEWLINE#
pool = multiprocessing . Pool ( processes ) #NEWLINE#
valves = CheckValve . objects . all ( ) #NEWLINE#
myusers = db . session . query ( User ) . all ( ) #NEWLINE#
ax . set_ylim3d ( 0 , 1000 ) #NEWLINE#
WINEVENT_OUTOFCONTEXT = 0 #NEWLINE#
print ( next ( [ x for x in lst if x % 3 == 0 ] ) ) #NEWLINE#
print ( 'bad#SPACE#request#SPACE#or#SPACE#error' ) #NEWLINE#
href_tags = soup . find_all ( href = True ) #NEWLINE#
img . show ( ) #NEWLINE#
img = Image . open ( 'Chess_Board.bmp' ) #NEWLINE#
img . execute_transforms ( output_encoding = images . JPEG , quality = 1 ) #NEWLINE#
all_challenges = session . query ( Challenge ) . filter ( Challenge . id . in_ ( session . #NEWLINE# query ( UserAttempt . challenge_id ) ) ) . all ( ) #NEWLINE#
Clojure #NEWLINE#
eval ( v + '*2' ) #NEWLINE#
return Response ( ) #NEWLINE#
button2 = tk . Button ( self , text = 'Click#SPACE#to#SPACE#show#SPACE#label' , command = self . show_label ) #NEWLINE#
s . bind ( ( ADDR , PORT ) ) #NEWLINE#
print ( G . neighbors ( 1 ) ) #NEWLINE#
print ( sess . run ( output ) ) #NEWLINE#
return [ x for x , y in list ( collections . Counter ( l ) . items ( ) ) if y > 1 ] #NEWLINE#
func ( ** literal_eval ( params ) ) #NEWLINE#
hiv4grej = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
hiv4gneg = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
hivmpos = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
hivmsneg = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
hivmsind = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
possibles = globals ( ) . copy ( ) #NEWLINE#
a . changeX ( ) #NEWLINE#
d = dirname ( dirname ( abspath ( __file__ ) ) ) #NEWLINE#
any ( [ ( i in fruit_dict1 ) for i in fruits ] ) #NEWLINE#
print ( elem . get_attribute ( 'outerHTML' ) ) #NEWLINE#
output = [ ( x , y ) for x , y , label in L ] #NEWLINE#
x = [ 'R1' , 'G1' , 'B1' , 'a1' , 'R2' , 'G2' , 'B2' , 'a2' , 'R3' , 'G3' , 'B3' , 'a3' , #NEWLINE# 'R4' , 'G4' , 'B4' , 'a4' ] #NEWLINE# np . array ( x ) . reshape ( 2 , 2 , 4 ) #NEWLINE#
def read_words ( words_file ) : #NEWLINE# #INDENT# return [ word for line in open ( words_file , 'r' ) for word in line . split ( ) ] #NEWLINE#
return psycopg2 . connect ( database = database_name ) #NEWLINE#
tweets . append ( tweet [ 'text' ] ) #NEWLINE#
parser . add_argument ( '-o' , '--outfile' , nargs = '?' , type = argparse . FileType ( #NEWLINE# 'w' ) , default = 'out.json' , help = 'output#SPACE#file,#SPACE#in#SPACE#JSON#SPACE#format' ) #NEWLINE#
tuple ( my_str . split ( ';' ) [ : - 1 ] ) #NEWLINE#
os . chdir ( WORKDIR ) #NEWLINE#
sys . getsizeof ( x ) #NEWLINE#
df #NEWLINE#
sys . stdout . write ( 'hi#SPACE#there' ) #NEWLINE#
print ( r . read ( ) ) #NEWLINE#
set_value ( d , 'b' , 'a' , 2 ) #NEWLINE#
[ [ 'dog' ] , [ 'duck' , 'duck' , 'duck' , 'duck' ] , [ 'goose' , 'goose' , 'goose' ] ] #NEWLINE#
print ( deco2 . __name__ ) #NEWLINE#
index_variables [ 'title' ] = myvar . decode ( 'utf-8' ) #NEWLINE#
model = Sequential ( ) #NEWLINE#
lst = lst [ 0 ] . split ( ) #NEWLINE#
s = pygame . Surface ( ( 1000 , 750 ) ) #NEWLINE#
var1 , var2 , var3 = ll + [ None ] * ( 3 - len ( ll ) ) #NEWLINE#
result . append ( '' . join ( map ( str , [ a , b , c , d , e , f ] ) ) ) #NEWLINE#
print ( time . mktime ( t1 ) ) #NEWLINE#
fill_between ( x , 0 , l [ 0 ] , color = colors [ 0 ] , alpha = alpha ) #NEWLINE#
df2 . to_csv ( 'output.csv' , header = None , mode = 'a' ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
return [ ( item * 2 ) for item in x ] #NEWLINE#
open ( 'file2' , 'wc' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
return self . queue . pop ( ) #NEWLINE#
self . log_window . Show ( ) #NEWLINE#
input = map ( lambda x : flattenjson ( x , '__' ) , input ) #NEWLINE#
file = models . FileField ( upload_to = 'files' ) #NEWLINE#
stocks = [ x . replace ( '\r\n' , '' ) for x in stocks ] #NEWLINE#
print ( 'path#SPACE#to#SPACE#map#SPACE#only#SPACE#used#SPACE#by#SPACE#Custom#SPACE#mapping#SPACE#strategy' ) #NEWLINE#
im . show ( ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
raise forms . ValidationError ( '...' ) #NEWLINE#
list ( od . values ( ) ) #NEWLINE#
object . __setattr__ ( o , 'c' , 1 ) #NEWLINE#
plt . plot ( data [ 'x' ] , data [ 'y' ] ) #NEWLINE#
pprint . pprint ( recur_dictify ( df ) ) #NEWLINE#
merged_df = snp_df . merge ( gene_df , on = [ 'chromosome' ] , how = 'inner' ) #NEWLINE#
z = 'abc' . strip ( x + y ) if x != y else None #NEWLINE#
help ( x ) #NEWLINE#
l = [ 1.565888 , 2.073744 , 2.962492 , 4.52838 , 5.417127 , 7.025337 ] #NEWLINE# [ ( a % 1 ) for a in l ] #NEWLINE#
map ( sum , zip ( a , b , c , d , e ) ) #NEWLINE#
print ( ord ( sys . stdin . read ( 1 ) ) ) #NEWLINE#
return result #NEWLINE#
sorted ( set ( ) . union ( * list ( results [ env ] . values ( ) ) ) , key = str . lower ) #NEWLINE#
newstdin = os . fdopen ( os . dup ( sys . <STR0> . fileno ( ) ) ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 1 , 10 , ( 5 , 3 ) ) ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
return obj . strftime ( '%Y-%m-%d' ) #NEWLINE#
self . queue . put ( item , block = True ) #NEWLINE#
[ x for x in fileList if x [ 'fileName' ] == 'filename2.typ' ] [ 0 ] [ 'fileMod' ] #NEWLINE#
values = [ '2014' , '08' , '17' , '18' , '01' , '05' ] #NEWLINE# newdate = datetime . datetime ( * map ( int , values ) ) #NEWLINE#
hgsave ( gcf , 'c' , '-v7' ) #NEWLINE#
path = '/tmp/f.txt' #NEWLINE#
df = df . reindex ( pd . DatetimeIndex ( df . index ) , fill_value = NaN ) #NEWLINE#
[ 3 , 4 , 5 , 6 , 7 ] #NEWLINE#
r = requests . get ( url ) #NEWLINE#
print ( e . message ) #NEWLINE#
logger . debug ( 'Hello,#SPACE#world!' ) #NEWLINE#
crsr . execute ( 'DROP#SPACE#TABLE#SPACE#IF#SPACE#EXISTS#SPACE#pytest' ) #NEWLINE#
user = User . objects . get ( pk = 1 ) #NEWLINE#
data = json . loads ( response . read ( ) ) #NEWLINE#
print ( mechanize . urlopen ( form . click ( ) ) . read ( ) ) #NEWLINE#
print ( name + ',#SPACE#you#SPACE#won.' ) #NEWLINE#
self . assertEqual ( obj . val , 2 ) #NEWLINE#
a = { 'foo' : 1 , 'bar' : 2 } #NEWLINE#
im . seek ( im . tell ( ) + 1 ) #NEWLINE#
abc = lambda * args , ** kwargs : myFunction ( * args , ** kwargs ) #NEWLINE#
Z = X [ : , ( None ) , : ] - X [ : , : , ( None ) ] #NEWLINE#
plt . show ( ) #NEWLINE#
parallelismPool . close ( ) #NEWLINE#
ax . cla ( ) #NEWLINE#
big_np_array = np . array ( big_array ) #NEWLINE#
ax1 = fig1 . add_subplot ( 111 ) #NEWLINE#
type = lambda s : str ( s , 'utf8' ) #NEWLINE#
'kø**e' in [ 'kø**e' ] #NEWLINE#
self . main_container . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
fields = [ 'model_to_filter' , 'field1' , 'field2' ] #NEWLINE#
print ( line . rsplit ( None , 1 ) [ 1 ] ) #NEWLINE#
writer . writerow ( record ) #NEWLINE#
def removeNonAscii ( s ) : #NEWLINE# #INDENT# return '' . join ( i for i in s if ord ( i ) < 128 ) #NEWLINE#
VVg = np . einsum ( 'ij,kj->k' , GinvVV [ : , : - 1 ] , GRZVV ) * VV #NEWLINE#
- javascript #NEWLINE#
pl . ylim ( 0.0 , 1.0 ) #NEWLINE#
lst = [ ( 0 , 1 ) , ( 2 , 3 ) , ( 7 , - 1 ) , ( 1 , 2 ) , ( 4 , 5 ) ] #NEWLINE#
cp / usr / bin / pdb / path / to / virtual / env / bin #NEWLINE#
cf . insert ( uuid . uuid1 ( ) , { 'column1' : 'val1' } ) #NEWLINE#
print ( sys . path ) #NEWLINE#
int ( '00480065006C006C006F00200077006F0072006C00640021' , 16 ) #NEWLINE#
m = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
print ( 'The#SPACE#username#SPACE#and#SPACE#password#SPACE#were#SPACE#incorrect.' ) #NEWLINE#
super ( Extension , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
pass #NEWLINE#
logger2 = logging . getLogger ( 'extensive' ) #NEWLINE#
src_dt = src_tz . localize ( dt ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
df [ 'Test' ] = np . maximum ( df [ 'Open' ] , df [ 'Close' ] ) #NEWLINE#
return [ '' . join ( i ) for i in permutations ( letters ) ] #NEWLINE#
f = open ( 'test.json' , 'r' ) #NEWLINE#
fro = open ( filename , 'rb' ) #NEWLINE#
b . extend ( [ i , i ] ) #NEWLINE#
a [ '0' ] #NEWLINE#
mask = np . in1d ( A , B ) #NEWLINE#
candlestick ( ax , data2 , width = 0.5 , colorup = 'g' , colordown = 'r' ) #NEWLINE#
MEDIA_URL = '/media/' #NEWLINE# MEDIA_ROOT = os . path . join ( os . path . dirname ( BASE_DIR ) , 'media_cdn' ) #NEWLINE#
print ( ftp . sendcmd ( 'SITE#SPACE#CHMOD#SPACE#644#SPACE#' + filename ) ) #NEWLINE#
[ 'hari' , 'aradhana' ] , #NEWLINE#
cv2 . circle ( mask , ( i [ 0 ] , i [ 1 ] ) , i [ 2 ] , ( 255 , 255 , 255 ) , - 1 ) #NEWLINE#
name = models . CharField ( max_length = 32 ) #NEWLINE#
return getattr ( self . file , attr ) #NEWLINE#
data -= NP . mean ( data , axis = 0 ) #NEWLINE#
self . client . subscribe ( 'some_channel' ) #NEWLINE#
return img . ConvertToBitmap ( ) #NEWLINE#
sorted ( data , reverse = True ) [ : 3 ] #NEWLINE#
( x + 3 for x in mylist ) #NEWLINE#
line = f . stdout . readline ( ) #NEWLINE#
print ( bisect ( b , a ) ) #NEWLINE#
fb . append ( str ( n ) ) #NEWLINE#
os . write ( 1 , a . tostring ( ) ) #NEWLINE#
buf [ i : i + 2 ] = struct . pack ( '!h' , portshort ) #NEWLINE#
model = Sequential ( ) #NEWLINE#
d . get ( 'b' ) #NEWLINE#
filenames . put ( 'STOP' ) #NEWLINE#
super ( Images , self ) . save ( ) #NEWLINE#
root . withdraw ( ) #NEWLINE#
plot_confusion_matrix ( df_conf_norm ) #NEWLINE#
new_list . index ( to_find . lower ( ) ) #NEWLINE#
myString = 'Čečensko' #NEWLINE#
pcap_lookupnet ( dev , ctypes . byref ( net ) , ctypes . byref ( mask ) , errbuf ) #NEWLINE#
conn = sqlite3 . connect ( '/path/to/your/sqlite_file.db' ) #NEWLINE#
try : #NEWLINE# #INDENT# myfile = open ( 'myfile.csv' , 'r+' ) #NEWLINE# except IOError : #NEWLINE# #INDENT# print ( 'Could#SPACE#not#SPACE#open#SPACE#file!#SPACE#Please#SPACE#close#SPACE#Excel!' ) #NEWLINE# with myfile : #NEWLINE# #INDENT# do_stuff ( ) #NEWLINE#
bs1 . find ( 'a' ) . string #NEWLINE#
bs2 . find ( 'a' ) . string #NEWLINE#
return lambda * args , ** kwargs : when . __match ( func , * args , ** kwargs ) #NEWLINE#
window . connect ( 'delete_event' , lambda wid , we : gtk . main_quit ( ) ) #NEWLINE#
new2 = np . array ( [ block . T for block in blocks ] ) . T #NEWLINE#
parser_lan . add_argument ( '--foo' ) #NEWLINE#
text = '\n' . join ( lines ) #NEWLINE#
self . button . resize ( 100 , 30 ) #NEWLINE#
button . pack ( ) #NEWLINE#
type ( a ) #NEWLINE#
mystring = 'collapse#SPACE##SPACE##SPACE##SPACE#these#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#spaces' #NEWLINE# mycollapsedstring = '#SPACE#' . join ( mystring . split ( ) ) #NEWLINE# print ( mycollapsedstring . split ( '#SPACE#' ) ) #NEWLINE#
r = sqrt ( 2 * random . uniform ( 0 , 1 ) / A + r_min * r_min ) #NEWLINE#
type ( img_str ) #NEWLINE#
plt . ylabel ( 'y' , fontname = 'Times#SPACE#New#SPACE#Roman' ) #NEWLINE#
signal . signal ( signal . SIGALRM , old_handler ) #NEWLINE#
worksheet . write ( row , col , text ) #NEWLINE#
creatures = dict ( ) #NEWLINE# creatures [ 'birds' ] = dict ( ) #NEWLINE# creatures [ 'birds' ] [ 'eagle' ] = dict ( ) #NEWLINE# creatures [ 'birds' ] [ 'eagle' ] [ 'female' ] = 0 #NEWLINE# creatures [ 'birds' ] [ 'eagle' ] [ 'female' ] += 1 #NEWLINE#
pairs = [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) ] #NEWLINE#
print ( 'Stream#SPACE#title:#SPACE#' + attrs . get ( 'StreamTitle' , '(none)' ) ) #NEWLINE#
with open ( 'text' , 'w' ) as outfile : #NEWLINE# #INDENT# json . dump ( { 'numbers' : n , 'strings' : s , 'x' : x , 'y' : y } , outfile , indent = 4 ) #NEWLINE#
namespaces = { 'owl' : 'http://www.w3.org/2002/07/owl#' } #NEWLINE# root . findall ( 'owl:Class' , namespaces ) #NEWLINE#
os . getenv ( 'PWD' ) #NEWLINE#
fieldsets = ( None , { 'fields' : ( ( 'name' , 'letter' ) , 'questions' , 'color' ) } ) , #NEWLINE#
super ( B , self ) . foo ( ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_RAW , socket . IPPROTO_IP ) #NEWLINE#
print ( 'Do#SPACE#you#SPACE#speak#SPACE#German?' ) #NEWLINE#
[ 'Fri,#SPACE#14#SPACE#Jun#SPACE#2013#SPACE#01:00:00#SPACE#+0000' , 27.4950008392 , '2#SPACE#sold' ] , #NEWLINE#
[ 'Tue,#SPACE#18#SPACE#Jun#SPACE#2013#SPACE#01:00:00#SPACE#+0000' , 17.25 , '1#SPACE#sold' ] , #NEWLINE#
print ( settings . SIMPLE_CONF ) #NEWLINE#
[ k for k in paragraphs3 if 'Derived:' in k [ 2 ] ] #NEWLINE#
print ( root . node . attrs [ 'value' ] ) #NEWLINE#
print ( x ) #NEWLINE#
return '' . join ( self . fed ) #NEWLINE#
circle_img = np . zeros ( ( height , width ) , np . uint8 ) #NEWLINE#
gen_move ( list ( range ( 10 ) ) [ : : - 1 ] ) #NEWLINE#
assert np . allclose ( expected , result ) #NEWLINE#
browser . find_elements_by_css_selector ( '.morered' ) [ - 1 ] . click ( ) #NEWLINE#
2 , 3 , 3 , 4 , 3 , 4 , 4 , 5 , 2 , 3 , 3 , 4 , 3 , 4 , 4 , 5 , 3 , 4 , 4 , 5 , 4 , 5 , 5 #NEWLINE#
[ ( 1 , 3 , 65 ) , ( 2 , 4 , 11 ) ] #NEWLINE#
x = [ 'cbaba' , 'ababa' , 'bbaa' ] #NEWLINE#
d = { } #NEWLINE#
print ( 'AP#SPACE#not#SPACE#found#SPACE#:(' ) #NEWLINE#
print ( #NEWLINE# 'Waiting#SPACE#for#SPACE#connection#SPACE#to#SPACE#reach#SPACE#NM_ACTIVE_CONNECTION_STATE_ACTIVATED#SPACE#state#SPACE#...' #NEWLINE# ) #NEWLINE#
print ( 'Sleeping#SPACE#for#SPACE#5#SPACE#seconds#SPACE#...' ) #NEWLINE#
print ( 'Disconnecting#SPACE#...' ) #NEWLINE#
print ( 'DONE!' ) #NEWLINE#
self . sizer . Add ( self . inner_sizer , 1 , wx . ALL | wx . EXPAND , 20 ) #NEWLINE#
( '/i/(\\d+)\\.jpg' , DownloadImage ) , #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
result = namedtuple ( 'Result' , [ 'x' , 'y' , 'z' ] ) #NEWLINE#
for e in soup . findAll ( 'br' ) : #NEWLINE# #INDENT# e . extract ( ) #NEWLINE#
im . show ( ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
label . set_fontproperties ( ticks_font ) #NEWLINE#
from functools import reduce #NEWLINE# s = reduce ( lambda x , y : x + str ( y ) , numList , '' ) #NEWLINE#
LOGOUT_URL = '/gallery/accounts/logout/' #NEWLINE#
s . soundex ( 'Umash#SPACE#Gupte' ) #NEWLINE#
"""{hello}#SPACE#{0}""" . format ( d [ 'with:colon' ] , ** d ) #NEWLINE#
df . ix [ df . var4 . isnull ( ) , 'var1' ] #NEWLINE#
g . kill ( ) #NEWLINE#
x = multiprocessing . Process ( target = smile_detection , args = ( 'Thread1' , ) ) #NEWLINE#
mapping = dict ( zip ( a , b ) ) #NEWLINE#
data = ctypes . POINTER ( ctypes . c_char ) ( ) #NEWLINE#
df = df . groupby ( 'loser' , sort = False ) . apply ( f ) #NEWLINE#
class FooAdmin ( admin . ModelAdmin ) : #NEWLINE# #INDENT# form = FooForm #NEWLINE#
save_file . write ( str ( tweet ) ) #NEWLINE#
ax . plot ( dates , zaxisvalues2 , upperLimits , color = 'r' ) #NEWLINE#
pass #NEWLINE#
main ( ) #NEWLINE#
return nil #NEWLINE#
ii = df [ pd . notnull ( df . C ) ] . index #NEWLINE#
self . timeout = timeout #NEWLINE#
balloon_tip ( 'Title#SPACE#for#SPACE#popup' , "This#SPACE#is#SPACE#the#SPACE#popup's#SPACE#message" ) #NEWLINE#
ax . set_zlim ( - 10 , 0 ) #NEWLINE# plt . show ( ) #NEWLINE#
np . setdiff1d ( a1_rows , a2_rows ) . view ( a1 . dtype ) . reshape ( - 1 , a1 . shape [ 1 ] ) #NEWLINE#
df [ 'Index' ] = df [ 'Index' ] . astype ( int ) #NEWLINE#
pos = f . tell ( ) #NEWLINE#
ids = [ d [ 'id' ] for d in lst if 'id' in d ] #NEWLINE#
with open ( 'my_very_large_text_file' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# process ( line ) #NEWLINE#
print ( ( 'In#SPACE#second#SPACE#loop' , x ) ) #NEWLINE#
subprocess . call ( 'mkdir#SPACE#/foo2' , shell = True ) #NEWLINE#
return 'Success' #NEWLINE#
return 'Failure' #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
res = next ( idx for idx , ( x , y ) in coupled_idx if x != y ) #NEWLINE#
parentdir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) #NEWLINE#
response = opener . open ( 'http://localhost:8000' , json . dumps ( { 'a' : 'b' } ) ) #NEWLINE#
cv . NamedWindow ( 'w1' , cv . CV_WINDOW_AUTOSIZE ) #NEWLINE#
raise ValueError ( 'sorry,#SPACE#you#SPACE#lose' ) #NEWLINE#
now = date ( * map ( int , date_string . split ( '-' ) ) ) #NEWLINE#
class C ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
y_pred = [ 0 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 0 , 2 , 2 ] #NEWLINE#
sum2 = sum ( ( row1 * row2 . T ) . data ) #NEWLINE#
fork ( ) #NEWLINE#
clf = joblib . load ( 'filename.pkl' ) #NEWLINE#
df = pd . DataFrame ( a , columns = [ 'index' , 'value' ] ) #NEWLINE#
Label ( None , text = 'label' , fg = 'green' , bg = 'black' ) . pack ( ) #NEWLINE#
file2 . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
c3 = [ list ( [ x for x in sublist if x in c1 ] ) for sublist in c2 ] #NEWLINE#
os . system ( 'cls' ) #NEWLINE#
test ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
ax . plot ( dates , data ) #NEWLINE#
return f ( u ( n - 1 ) ) #NEWLINE#
new_stdout . seek ( 0 ) #NEWLINE#
def f ( a , b ) : #NEWLINE# #INDENT# return b - b . multiply ( a ) #NEWLINE#
logging . getLoggerClass ( ) . root . handlers [ 0 ] . baseFilename #NEWLINE#
cols = df . columns . values . tolist ( ) #NEWLINE#
irc . send ( bytes ( 'quit\r\n' , 'utf-8' ) ) #NEWLINE#
zipped . writestr ( 'archive_name' , default_storage_object . read ( ) ) #NEWLINE#
vals = [ g ( i ) for i in range ( 100 ) ] #NEWLINE#
a = np . array ( [ 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 ] ) #NEWLINE#
data = [ 5 , [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] , [ 13 , 14 , 15 , 16 ] , 5 , #NEWLINE# [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] , [ 9 , 10 , 11 , 12 ] , [ 13 , 14 , 15 , 16 ] ] #NEWLINE#
u = set . intersection ( s1 , s2 , s3 ) #NEWLINE#
g . writePDFfile ( 'so-xcorr-pyx' ) #NEWLINE#
a . index ( a . lstrip ( ) [ 0 ] ) #NEWLINE#
filename = 'temp.file' #NEWLINE#
for line in open ( 'myfile' ) : #NEWLINE# #INDENT# doSomething ( line ) #NEWLINE#
string [ i : i + len ( keyword ) + 5 + 1 ] #NEWLINE#
ax . pbaspect = [ 2.0 , 0.6 , 0.25 ] #NEWLINE#
c . setopt ( c . HEADERFUNCTION , retrieved_headers . store ) #NEWLINE#
"""1234@""" . isdigit ( ) #NEWLINE#
UNIQUE ( 'CSID' , 'CID' , 'UUID' ) #NEWLINE#
parser . add_argument ( '-t' , '--time' ) #NEWLINE#
app = flask . Flask ( __name__ ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
output_file = open ( '/desired/path/to/final/file' , 'w' ) #NEWLINE#
both . reset_index ( inplace = True ) #NEWLINE#
output . close ( ) #NEWLINE#
d . setdefault ( a , { } ) . setdefault ( b , { } ) . setdefault ( c , [ ] ) . append ( value ) #NEWLINE#
self . response . set_status ( 404 ) #NEWLINE#
assert identifier == c . execute ( 'SELECT#SPACE#name#SPACE#FROM#SPACE#SQLITE_MASTER' ) . fetchone ( ) [ 0 ] #NEWLINE#
print ( var_name ) #NEWLINE#
self . lb2 . bind ( '<MouseWheel>' , self . OnMouseWheel ) #NEWLINE#
f = open ( 'cmd_fileoutput.txt' , 'w' ) #NEWLINE# subprocess . Popen ( cmd , shell = True , stdout = f , stderr = f ) #NEWLINE#
ticks = ax . set_xticklabels ( [ d . strftime ( '%a' ) for d in data . index ] ) #NEWLINE#
"""Rate#SPACE#limiters#SPACE#with#SPACE#shared#SPACE#token#SPACE#bucket.""" #NEWLINE#
return environ [ 'REMOTE_ADDR' ] #NEWLINE#
vt [ : , ( 0 ) ] #NEWLINE#
return hey ( ) #NEWLINE#
group . save ( ) #NEWLINE#
new_b = '#SPACE###SPACE#' . join ( filtered_b_elements ) #NEWLINE#
[ ( 3 , 6 ) , ( 8 , 9 ) , ( 11 , 13 ) ] #NEWLINE#
v = [ 1 , 2 , 3 , 4 , 3 , 1 , 2 ] #NEWLINE# any ( [ 2 , 3 ] == v [ i : i + 2 ] for i in range ( len ( v ) - 1 ) ) #NEWLINE#
element . strip ( '"\'' ) #NEWLINE#
ds . addSample ( ( 1 , 1 ) , ( 0 , ) ) #NEWLINE#
print ( 'it#SPACE#is#SPACE#letters' ) #NEWLINE#
my_list . lower ( ) . index ( 'fouR' . lower ( ) ) #NEWLINE#
np . linalg . solve ( a , b ) #NEWLINE#
{ 'a' : 'A' , 'b' : 'B' } #NEWLINE#
result = collections . defaultdict ( list ) #NEWLINE#
total = sum ( c . values ( ) ) #NEWLINE#
threading . Thread ( target = listen_to_audio ) . start ( ) #NEWLINE#
ax . imshow ( imshow_data , interpolation = 'nearest' ) #NEWLINE#
console = logging . StreamHandler ( ) #NEWLINE#
[ 'a1' , 'a2' , 'a3' , 'a4' , 'a5' ] #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , rasterized = True ) #NEWLINE#
numbers = [ aux [ x ] for x in row ] #NEWLINE#
( '#SPACE#' in w ) == True #NEWLINE#
plt . yticks ( positions , labels ) #NEWLINE#
super ( BuyerInlineFormSet , self ) . clean ( ) #NEWLINE#
df = df . groupby ( 'A' ) [ 'B' ] . apply ( ',' . join ) . reset_index ( ) #NEWLINE#
ax . xaxis . set_minor_locator ( hours ) #NEWLINE#
substrings . sort ( key = len ) #NEWLINE#
data = '437c2123' #NEWLINE# """""" . join ( chr ( int ( data [ i : i + 2 ] , 16 ) ) for i in range ( 0 , len ( data ) , 2 ) ) #NEWLINE#
python - i #NEWLINE#
async . get ( ) #NEWLINE#
qPlg . append ( QPointF ( * p ) ) #NEWLINE#
today = datetime . date . today ( ) #NEWLINE#
test_utf8 = test_unicode . encode ( 'utf-8' ) #NEWLINE#
return jsonify ( { 'method' : 'UNKNOWN' } ) #NEWLINE#
return jsonify ( { 'method' : 'DELETE' } ) #NEWLINE#
return jsonify ( { 'method' : 'CREATE' } ) #NEWLINE#
ax . set_ylabel ( 'radius#SPACE#of#SPACE#biopsy' ) #NEWLINE#
np . asarray ( 0 for i in range ( 10 ) ) #NEWLINE#
import lxml #NEWLINE#
plt . subplots_adjust ( hspace = 0.5 , wspace = 0.001 ) #NEWLINE#
for i in range ( len ( alphs ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
a [ - 1 ] . append ( 5 ) #NEWLINE#
print ( df ) #NEWLINE#
out . write ( largedata ) #NEWLINE#
round ( VALUE * 2.0 , 1 ) / 2.0 #NEWLINE#
with open ( file , 'w' ) as outfile : #NEWLINE# #INDENT# outfile . writelines ( lines ) #NEWLINE#
os . close ( wpipe ) #NEWLINE#
main ( ) #NEWLINE#
t . start ( ) #NEWLINE#
del self . __dict__ [ key ] #NEWLINE#
result = template . render ( ** export_dict ) #NEWLINE#
test ( ) #NEWLINE#
for k , v in dct . items ( ) : #NEWLINE# #INDENT# string . replace ( 'd' , dct [ d ] ) #NEWLINE#
conn . close ( ) #NEWLINE#
s = a . sum ( axis = ( 0 , 1 , 2 ) ) #NEWLINE#
msg . attach ( part ) #NEWLINE#
marker_type = db . relationship ( 'MarkerType' ) #NEWLINE#
sys . path . insert ( 1 , 'YourTclLocation' ) #NEWLINE#
return [ [ i for i in sublist if i < n ] [ : 5 ] for sublist in ls ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
ElementTree ( root ) . write ( sys . stdout , encoding = 'utf-8' ) #NEWLINE#
return numpy . sin ( x ) #NEWLINE#
re . findall ( '[a-zA-Z#SPACE#]' , b ) == list ( b ) #NEWLINE#
res [ 'nets' ] [ 0 ] [ 'country' ] #NEWLINE#
df = df . astype ( object ) #NEWLINE#
'getbands' , 'getbbox' , 'getcolors' , 'getdata' , 'getextrema' , 'getim' #NEWLINE#
'getpalette' , 'getpixel' , 'getprojection' , 'histogram' , 'im' , 'info' #NEWLINE#
'load' , 'load_end' , 'load_prepare' , 'load_read' , 'map' , 'mode' #NEWLINE#
'putpalette' , 'putpixel' , 'quantize' , 'readonly' , 'resize' , 'rotate' #NEWLINE#
'tile' , 'tobitmap' , 'tobytes' , 'tostring' , 'transform' , 'transpose' #NEWLINE#
eml_atch . add_header ( 'Content-Transfer-Encoding' , '' ) #NEWLINE#
window . show_all ( ) #NEWLINE#
template = env . get_template ( 'mytemplate.html' ) #NEWLINE#
user_model = get_model ( 'auth' , 'user' ) #NEWLINE#
plt . xlabel ( 'x' ) #NEWLINE#
for field in Model . _meta . fields : #NEWLINE# #INDENT# field . get_attname_column ( ) #NEWLINE#
app = wx . PySimpleApp ( ) #NEWLINE#
return scipy . sparse . linalg . spsolve ( coeff_mat , np . ones ( 2 * ( n - 1 ) ) * n ) #NEWLINE#
string . replace ( 'd' , dct [ d ] ) #NEWLINE#
median ( [ 1 , 3 , 5 ] ) #NEWLINE#
predictions = sess . run ( y_hat , feed_dict = { x : batch_x } ) #NEWLINE#
self . name = 'test' #NEWLINE#
plt . yscale ( 'log' , nonposy = 'clip' ) #NEWLINE#
dictonary [ k ] . append ( file ) #NEWLINE#
f = lambda x : 2 * x #NEWLINE#
parser . add_argument ( '-v' , '--verbose' , action = 'store_true' ) #NEWLINE#
np . arange ( 10 ) [ 10 : - 1 : - 1 ] #NEWLINE#
mygconf [ '/path/to/key' ] #NEWLINE#
from functools import reduce #NEWLINE# items [ 3 : 6 ] = [ reduce ( lambda x , y : x + y , items [ 3 : 6 ] ) ] #NEWLINE#
s . add ( x ) #NEWLINE#
substrings . sort ( key = lambda s : len ( s ) ) #NEWLINE#
'%0*d' % ( width , number ) #NEWLINE#
db . execute ( 'INSERT#SPACE#INTO#SPACE#t#SPACE#VALUES(?)' , [ buffer ( ablob ) ] ) #NEWLINE#
first_record = next ( all_records ) #NEWLINE#
np . corrcoef ( df_example . iloc [ 1 : 3 , : - 1 ] ) #NEWLINE#
sh . write ( n , 1 , v ) #NEWLINE#
'sips:support@voip.example.com' , 'sip:22444032@voip.example.com:6000' #NEWLINE#
fig2 . add_subplot ( 111 ) . set_xticks ( arange ( 1 , 3 , 0.5 ) ) #NEWLINE#
d [ a ] [ b ] = c #NEWLINE#
contents . sort ( key = itemgetter ( 2 ) ) #NEWLINE#
sqlContext . sql ( 'SELECT#SPACE#NULL#SPACE#=#SPACE#NULL' ) . show ( ) #NEWLINE#
date = datetime . datetime . fromtimestamp ( seconds + sub_seconds ) #NEWLINE#
print ( 'ID\tName' ) #NEWLINE#
func ( cpy ) #NEWLINE#
mapping = { 'A' : [ 3 , 4 ] , 'B' : [ 1 , 5 ] , 'C' : [ 2 , 6 ] } #NEWLINE# list ( ordered_merge ( mapping , [ 'B' , 'C' , 'A' , 'A' , 'B' , 'C' ] ) ) #NEWLINE#
return 'world' #NEWLINE#
mail = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
handler . setFormatter ( formatter ) #NEWLINE#
p2 = subprocess . Popen ( [ 'tail' , '-1' ] , stdin = p1 . stdout , stdout = subprocess . PIPE ) #NEWLINE#
f . write ( imgdata ) #NEWLINE#
print ( ( 'Until#SPACE#blah' , list ( takewhile_including ( l1 , 'blah' ) ) ) ) #NEWLINE#
document = parser . parse ( f ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
for i , v in enumerate ( y ) : #NEWLINE# #INDENT# ax . text ( v + 3 , i + 0.25 , str ( v ) , color = 'blue' , fontweight = 'bold' ) #NEWLINE#
arr = np . array ( [ [ 'one' , [ 1 , 2 , 3 ] ] , [ 'two' , [ 4 , 5 , 6 ] ] ] , dtype = np . object ) #NEWLINE# arr #NEWLINE#
devnull = open ( os . devnull , 'wb' ) #NEWLINE#
activate ( 'pl' ) #NEWLINE#
len ( df [ ~ pd . to_datetime ( df . index ) . isin ( dropThis ) ] ) #NEWLINE#
pylab . plot ( t ) #NEWLINE#
return peasant . badly_hurt ( ) #NEWLINE#
print ( colored ( 'hello#SPACE#red#SPACE#world' , 'red' ) ) #NEWLINE#
ax . plot ( list1 ) #NEWLINE#
{ request . route_url ( 'idea' , idea = 'great' , _query = ( ( 'sort' , 'asc' ) , ) ) } #NEWLINE#
logger2 = logging . getLogger ( 'myapp.area2' ) #NEWLINE#
serializer = UserSerializer ( request . user ) #NEWLINE#
ax2 . plot ( x , np . sin ( x + 1 ) , 'r' ) #NEWLINE#
l1 = [ 1 , 2 , 3 , 4 ] #NEWLINE# l2 = [ 5 , 6 , 7 , 8 ] #NEWLINE# l3 = [ l1 , l2 ] #NEWLINE# l3 #NEWLINE#
del ordered_dict [ k ] #NEWLINE#
socket . connect ( 'tcp://127.0.0.1:5000' ) #NEWLINE#
cursor . execute ( 'select#SPACE#*#SPACE#from#SPACE#mytable' ) #NEWLINE#
BASE_DIR = os . path . dirname ( os . path . dirname ( __file__ ) ) #NEWLINE#
application = webapp . WSGIApplication ( [ ( '/myapp(/.*)*?' , MainPage ) ] , debug = True ) #NEWLINE#
from PyQt4 . QtCore import * #NEWLINE#
for i in range ( 10 ) : #NEWLINE# #INDENT# myList . append ( i ) #NEWLINE#
return [ c . __name__ for c in cls . __subclasses__ ( ) ] #NEWLINE#
raise Exception ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
print ( a [ : 10 ] ) #NEWLINE#
zip ( a , b ) #NEWLINE#
print ( 'initialized#SPACE#mananger' ) #NEWLINE#
print ( 'Keyboard#SPACE#interrupt#SPACE#in#SPACE#main' ) #NEWLINE#
os . startfile ( 'C:/Users/TestFile.txt' , 'print' ) #NEWLINE#
cv2 . rectangle ( im , ( x , y ) , ( x + w , y + h ) , ( 0 , 255 , 255 ) , 2 ) #NEWLINE#
d [ i ] = np . sum ( a [ ( i ) , b [ i ] : c [ i ] ] ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
{ 'name' : 'NWIS#SPACE#Time#SPACE#Series#SPACE#Instantaneous#SPACE#Values' } #NEWLINE#
glVertex2i ( 10 , 110 ) #NEWLINE#
thirdlist = [ listName . index ( x [ : x . find ( '_' ) ] ) for x in listNameAge ] #NEWLINE#
result . append ( list [ index ] ) #NEWLINE#
pd . concat ( [ s , s . apply ( lambda x : pd . Series ( x ) . value_counts ( ) ) . fillna ( 0 ) ] , axis = 1 #NEWLINE# ) #NEWLINE#
img . save ( 'image.png' ) #NEWLINE#
"""Counter(string)""" #NEWLINE#
"""dict((c,#SPACE#string.count(c))#SPACE#for#SPACE#c#SPACE#in#SPACE#string)""" #NEWLINE#
return max ( result , key = len ) #NEWLINE#
list ( map ( ord , list ( L ) ) ) #NEWLINE#
print ( ( 'elapsed:#SPACE#' , t . elapsed ) ) #NEWLINE#
df [ df . duplicated ( subset = [ 'A' ] ) ] . reset_index ( drop = True ) #NEWLINE#
return sorted ( s ) == sorted ( t ) #NEWLINE#
import imp #NEWLINE# imp . reload ( myapp ) #NEWLINE#
mlab . pipeline . iso_surface ( src , contours = [ s . max ( ) - 0.1 * s . ptp ( ) ] ) #NEWLINE#
plot ( x , y ) #NEWLINE#
lst = [ ( 0 , 4738 ) , ( 0 , 36 ) , ( 0 , 6376 ) , ( 0 , 0 ) ] #NEWLINE#
tk . Frame . __init__ ( self , parent , * args , ** kwargs ) #NEWLINE#
pyplot . pie ( [ 1 , 2 , 3 ] ) #NEWLINE#
gevent . sleep ( r ) #NEWLINE#
r . db_drop ( 'test' ) . run ( ) #NEWLINE#
print ( data [ 'my_field' ] ) #NEWLINE#
sys . stdout . write ( '\x1b[1;31m' ) #NEWLINE# print ( 'All#SPACE#following#SPACE#prints#SPACE#will#SPACE#be#SPACE#red#SPACE#...' ) #NEWLINE#
return wrapper1 #NEWLINE#
ftp . retrlines ( 'LIST' , callback ) #NEWLINE#
x += a * np . cos ( 2 * np . pi * f0 * t + 0.11 ) #NEWLINE#
img = img . resize ( ( 160 , 240 ) , Image . ANTIALIAS ) #NEWLINE#
time . strftime ( '%Y.%m.%d' , time . gmtime ( t . astype ( int ) / 1000000000 ) ) #NEWLINE#
web . load ( QUrl ( 'http://www.yahoo.com' ) ) #NEWLINE#
conn . accept ( ) #NEWLINE#
[ 3 , 6 ] #NEWLINE#
SYMBOLIC_LINK = 'symbolic' #NEWLINE#
print ( 'Day#SPACE#not#SPACE#found.' ) #NEWLINE#
pprint ( { k : getattr ( creator . __code__ , k ) for k in dir ( creator . __code__ ) } ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 , projection = '3d' ) #NEWLINE#
logger . debug ( 'Waiting#SPACE#for#SPACE#connection' ) #NEWLINE#
logger . debug ( 'Done' ) #NEWLINE#
logger . debug ( 'Waiting#SPACE#for#SPACE#server#SPACE#address' ) #NEWLINE#
logger . debug ( 'Connected' ) #NEWLINE#
logger . debug ( 'Handshake#SPACE#failed#SPACE#-#SPACE#no#SPACE#more#SPACE#ciphers#SPACE#to#SPACE#try' ) #NEWLINE#
counter . save ( ) #NEWLINE#
response = urllib . request . urlopen ( 'http://example.com' ) #NEWLINE# response_encoding = response . headers . getparam ( 'charset' ) #NEWLINE#
cursor . execute ( "SET#SPACE#NAMES#SPACE#'utf8mb4'#SPACE#COLLATE#SPACE#'utf8mb4_unicode_ci'" ) #NEWLINE#
a = "I#SPACE#don't#SPACE#know#SPACE#why#SPACE#I#SPACE#don't#SPACE#have#SPACE#the#SPACE#right#SPACE#answer" #NEWLINE# b = a . strip ( '/' ) #NEWLINE# print ( b ) #NEWLINE#
return ( d [ i ] for i in k ) #NEWLINE#
a = np . zeros ( ( 2 , 2 , 3 ) , dtype = int ) #NEWLINE#
download_ftp_tree ( ftp , remote_dir , local_dir ) #NEWLINE#
random . sample ( [ 'some' , 'provider' , 'can' , 'be' , 'null' ] , 3 ) #NEWLINE# random . sample ( [ 'some' , 'provider' , 'can' , 'be' , 'null' ] , 3 ) #NEWLINE# random . sample ( [ 'some' , 'provider' , 'can' , 'be' , 'null' ] , 3 ) #NEWLINE#
filename = request . FILES [ 'file' ] #NEWLINE#
shutil . rmtree ( target ) #NEWLINE#
df = df . append ( r ) #NEWLINE#
concat ( [ A , B ] , keys = [ 'A' , 'B' ] , axis = 1 ) #NEWLINE#
print ( 'Error#SPACE#changing#SPACE#password#SPACE#for#SPACE#' + login ) #NEWLINE#
os . unlink ( f_path ) #NEWLINE#
all ( x in dct for x in ( 'foo' , 'bar' , 'baz' ) ) #NEWLINE#
print ( record . xpath ( './@tag' ) [ 0 ] ) #NEWLINE#
_string = 'años#SPACE#luz#SPACE#detrás' #NEWLINE# print ( _string . encode ( 'utf-8' ) ) #NEWLINE#
list ( map ( pow , list ( range ( 10 ) ) , repeat ( 2 ) ) ) #NEWLINE#
ax1 . plot ( x , np . sin ( x ) , 'b' ) #NEWLINE#
mylist [ n // 10 ] . append ( n ) #NEWLINE#
df . convert_objects ( convert_numeric = True ) #NEWLINE#
x = tf . placeholder ( tf . float32 , shape = [ None ] ) #NEWLINE#
df = pd . Panel . from_dict ( d ) . to_frame ( ) #NEWLINE#
{ 'errors' : { 'name' : 'This#SPACE#field#SPACE#is#SPACE#required' , 'age' : #NEWLINE# 'Enter#SPACE#a#SPACE#numeric#SPACE#value#SPACE#between#SPACE#0#SPACE#and#SPACE#99' } } #NEWLINE#
cv . Circle ( color_image , center_point , 20 , cv . CV_RGB ( 255 , 255 , 255 ) , 1 ) #NEWLINE#
r = re . compile ( '(ab|a|1|2)' ) #NEWLINE#
print ( countOccurencesAtTheEndOfTheList ( [ 1 , 2 , 1 , 1 , 1 , 1 , 1 , 1 ] ) ) #NEWLINE#
subprocess . Popen ( [ 'pythonX.Y' , SCRIPT_NAME ] ) #NEWLINE#
for bid in bids : #NEWLINE# #INDENT# bid = int ( bid ) #NEWLINE#
plt . clf ( ) #NEWLINE#
auth . login ( request , user ) #NEWLINE#
ax . plot ( x , y , '-k' , lw = 2.0 ) #NEWLINE#
lda = gensim . models . ldamodel . LdaModel ( corpus = mm , num_topics = 100 ) #NEWLINE#
canvas . create_window ( ( 4 , 4 ) , window = frame , anchor = 'nw' ) #NEWLINE#
{ { form . as_p } } #NEWLINE#
project . some_func ( ) #NEWLINE#
[ x for t in zip ( a , reversed ( a ) ) for x in t ] [ : len ( a ) ] #NEWLINE#
print ( 'done' ) #NEWLINE#
m = re . match ( '(((\\d+)?\\s+)?(\\w+)?\\s+)?(\\d{3,})' , data ) #NEWLINE#
event . Skip ( ) #NEWLINE#
OrderedDict . __init__ ( self , * a , ** kw ) #NEWLINE#
df . words . str . contains ( 'he|wo' ) . sum ( ) #NEWLINE# df . words . str . contains ( 'he' ) . sum ( ) #NEWLINE#
print ( resp [ 'origin' ] ) #NEWLINE#
round ( 65.53 , 4 ) #NEWLINE#
df . iloc [ 7 : 9 , ( 5 ) ] = np . nan #NEWLINE#
M = imaplib . IMAP4_SSL ( 'imap.gmail.com' ) #NEWLINE#
chardet_detector = UniversalDetector ( ) #NEWLINE#
lines = ax . plot ( np . arange ( 1000 ) ) #NEWLINE#
super ( BetterTagListField , self ) . process_formdata ( valuelist ) #NEWLINE#
session . commit ( ) #NEWLINE#
"""Returns#SPACE#the#SPACE#number#SPACE#of#SPACE#printed#SPACE#characters#SPACE#in#SPACE#a#SPACE#Unicode#SPACE#string.""" #NEWLINE#
rcParams [ 'text.usetex' ] = True #NEWLINE#
chardet_detector . reset ( ) #NEWLINE#
root . wm_attributes ( '-topmost' , True ) #NEWLINE#
mailserver . sendmail ( 'me@gmail.com' , 'you@gmail.com' , msg . as_string ( ) ) #NEWLINE#
grouped = df . groupby ( 'A' ) #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE# cv2 . destroyAllWindows ( ) #NEWLINE#
print ( '\n\n' + string ) #NEWLINE#
set . intersection ( * sets ) #NEWLINE#
data = request . files . get ( 'data' ) #NEWLINE#
return np . where ( x ** 2 + y ** 2 > 1e-10 , x * y / ( x ** 2 + y ** 2 ) , 0.5 ) #NEWLINE#
mail_body = str ( self . request . POST . get ( 'body' ) ) #NEWLINE#
"""""" . join ( vbmap . get ( c , c ) for c in s if c not in volString ) #NEWLINE#
sys . path . append ( egg_path ) #NEWLINE#
hzfile . printdir ( ) #NEWLINE#
print ( words == sorted ( words , key = str . lower ) ) #NEWLINE#
dict ( CharCounter ( text ) ) #NEWLINE#
return ( Convert ( i , base ) for i in range ( start , end , step ) ) #NEWLINE#
assert type ( session . query ( Foo ) . first ( ) ) is ReadonlyFoo #NEWLINE#
print ( recursive ( 2678 ) ) #NEWLINE#
ds [ [ ( 'wiki' in s ) for s in ds . index ] ] #NEWLINE#
Doc . save ( ) #NEWLINE#
df = DataFrame ( randn ( 5 , 2 ) , columns = [ 'a' , 'b' ] ) #NEWLINE# df #NEWLINE# formulas = [ ( 'c' , 'a+b' ) , ( 'd' , 'a*c' ) ] #NEWLINE#
self . layout_content . bind ( minimum_height = self . layout_content . setter ( 'height' ) ) #NEWLINE#
help ( cherrypy . engine . exit ) #NEWLINE#
picture . getpixel ( ( x , y ) ) #NEWLINE#
stoppool . start ( ) #NEWLINE#
mpmath . besseli ( 0 , 1714 ) #NEWLINE#
self . traceback = traceback . extract_stack ( ) [ - 2 ] #NEWLINE#
os . remove ( str ( filename ) ) #NEWLINE#
insert_sort ( ascend_list , i , lambda x , y : x [ 1 : ] >= y [ 1 : ] ) #NEWLINE#
rpy2 . robjects . numpy2ri . activate ( ) #NEWLINE#
df = pd . concat ( [ s1 , s2 ] , axis = 1 ) . ffill ( ) . dropna ( ) #NEWLINE#
self . value += 1 #NEWLINE#
logger = logging . getLogger ( 'test' ) #NEWLINE#
sock . bind ( ( 'localhost' , 5000 ) ) #NEWLINE#
out [ : , : , ( mask ) ] = B [ : , : , : , : : - 1 ] [ : , : , ( mask [ : , : : - 1 ] ) ] #NEWLINE#
return int ( '' . join ( re . findall ( '\\d*' , str ) ) ) #NEWLINE#
print ( 'func' ) #NEWLINE#
f = open ( '/path/to/file' , 'r+' ) #NEWLINE#
return dict ( ( k , v [ v < 0 ] . to_dict ( ) ) for k , v in compat . iteritems ( data ) ) #NEWLINE#
return pruned #NEWLINE#
Frame . __init__ ( self , master ) #NEWLINE#
self . _window . show ( ) #NEWLINE#
d = { 'hello' : 'world' , 'with:colon' : 'moo' } #NEWLINE#
f ( 1 , 2 ) #NEWLINE#
from os . path import expanduser #NEWLINE#
first = [ x for x , y in data ] #NEWLINE# second = [ y for x , y in data ] #NEWLINE#
d = OrderedDict ( [ ( 3 , 'c' ) , ( 2 , 'b' ) , ( 1 , 'a' ) ] ) #NEWLINE#
parent_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) #NEWLINE#
panel . SetSizer ( sizer ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( etree . tostring ( child ) ) #NEWLINE#
df [ 'B2' ] = df [ 'B' ] * ( df [ 'C' ] >= 0 ) . astype ( int ) #NEWLINE#
df [ 'C2' ] = df [ 'C' ] * ( df [ 'B' ] >= 0 ) . astype ( int ) #NEWLINE#
driver . find_element_by_xpath ( ".//input[contains(@onclick,#SPACE#'1#SPACE#Bedroom#SPACE#Deluxe')]" #NEWLINE# ) #NEWLINE# driver . find_element_by_css_selector ( "input[onclick*='1#SPACE#Bedroom#SPACE#Deluxe']" ) #NEWLINE#
input_file = open ( filename , 'a' ) #NEWLINE#
run ( reloader = True ) #NEWLINE#
img = Image . open ( FNAME ) . convert ( 'RGBA' ) #NEWLINE#
f = open ( filename , 'w' ) #NEWLINE#
f = urllib . request . urlopen ( req ) #NEWLINE#
df1 = df1 . loc [ df1 [ 'length' ] < 4 ] #NEWLINE#
cbar . set_clim ( - 2.0 , 2.0 ) #NEWLINE#
current . append ( item ) #NEWLINE#
nonzero ( t == 8 ) [ 0 ] [ 0 ] #NEWLINE#
print ( f . split ( d ) [ 0 ] + d [ 0 ] ) #NEWLINE#
print ( 'out:' , s . getvalue ( ) ) #NEWLINE#
print ( stealth_check [ key ] ) #NEWLINE#
self . textWritten . emit ( str ( text ) ) #NEWLINE#
s . close ( ) #NEWLINE#
content_type in list ( package_disseminators . keys ( ) ) #NEWLINE#
re . search ( 'a{1,65535}' , 'aaa' ) #NEWLINE# re . search ( 'a{1,65536}' , 'aaa' ) #NEWLINE#
form . save ( ) #NEWLINE#
df #NEWLINE#
allowed_domains = [ 'craigslist.org' ] #NEWLINE#
horoscope . check_all ( ) #NEWLINE#
figure ( ) #NEWLINE#
show ( ) #NEWLINE#
"""which#SPACE#will#SPACE#be#SPACE#joined#SPACE#to#SPACE#a#SPACE#second.""" #NEWLINE#
cursor = db . execute ( sql % params ) #NEWLINE#
q . write ( str ) #NEWLINE#
session . rollback ( ) #NEWLINE#
ax . imshow ( field1 , cmap = plt . cm . YlGn , vmin = _min , vmax = _max ) #NEWLINE#
d1 = datetime . strptime ( d1 , '%Y-%m-%d' ) #NEWLINE#
fields = list ( addresses_table . columns . keys ( ) ) #NEWLINE#
words = string1 . split ( ) #NEWLINE#
print ( '100%#SPACE#Completed' ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#FROM_UNIXTIME(%s)' , ( 1268811665 , ) ) #NEWLINE#
argsdict = { 'name' : 'Joe' , 'family' : 'Brand' } #NEWLINE# globals ( ) [ 'fullName' ] ( ** argsdict ) #NEWLINE#
print ( submission . url ) #NEWLINE#
nsmallest ( 4 , list ( range ( len ( values ) ) ) , key = values . __getitem__ ) #NEWLINE#
0.08400000000000002 , 0.9999999882280098 #NEWLINE#
'seven' , 'eight' , 'nine' , 'ten' , 'eleven' , 'twelve' , 'thirteen' #NEWLINE#
shapesMatch ( [ ( 0 , 0 ) , ( 1 , 1 ) , ( 0 , 2 ) , ( - 1 , 1 ) ] , rectangle ) #NEWLINE#
unittest . main ( ) #NEWLINE#
self . session . run ( self . init_vars ) #NEWLINE#
yscale ( 'log' ) #NEWLINE#
textA = 'stackoverflow#SPACE#is#SPACE#cool' #NEWLINE#
ged . close ( ) #NEWLINE#
r = requests . get ( my_url , cookies = cookies ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
out = np . mod ( c , 2 ) #NEWLINE#
print ( 'Access#SPACE#Token\n' ) #NEWLINE#
return collections . namedtuple ( 'Point' , 'x,#SPACE#y' ) ( x , y ) #NEWLINE#
cursor = db . cursor ( ) #NEWLINE#
return getattr ( self . base , name ) #NEWLINE#
newList = np . clip ( oldList , 0 , 255 ) #NEWLINE#
sys . stdout . write ( c ) #NEWLINE#
exit . __str__ ( ) #NEWLINE#
gy , gx = np . gradient ( Z , 0.05 , 0.05 ) #NEWLINE#
sess = tf . InteractiveSession ( ) #NEWLINE# print ( type ( tf . constant ( [ 1 , 2 , 3 ] ) . eval ( ) ) ) #NEWLINE#
[ 2 , 1 , 0 , 1 , 2 , 3 , 2 , 1 ] , #NEWLINE#
p = subprocess . Popen ( [ 'wc' , '-l' ] , stdin = subprocess . PIPE ) #NEWLINE#
ssh . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
url ( '^logout/$' , views . logout , name = 'logout' ) , #NEWLINE#
DD = datetime . timedelta ( days = 90 ) #NEWLINE#
self . edges . setdefault ( n2 , [ ] ) . append ( ( n1 , w ) ) #NEWLINE#
a [ numpy . where ( a > 2 ) ] #NEWLINE#
from scrapy . http import Request #NEWLINE#
s . unique ( ) #NEWLINE#
for atype in e . findall ( 'type' ) : #NEWLINE# #INDENT# pass #NEWLINE#
len ( hashlib . md5 ( 'thecakeisalie' ) . digest ( ) ) #NEWLINE#
s . send ( 'GET#SPACE#/#SPACE#HTTP/1.1\r\nHost:#SPACE#google.com\r\n\r\n' ) #NEWLINE#
a = np . array ( [ 0 , 0.1 , 0.5 , 1 ] ) #NEWLINE#
return min ( ( x for x in seq if x is not None ) , default = None ) #NEWLINE#
d = defaultdict ( list ) #NEWLINE#
Object . keys ( object ) #NEWLINE#
parser . exit ( message = 'QUITTING\n' ) #NEWLINE#
print ( check_column_equals_index ( 3 ) ) #NEWLINE#
print ( dict [ 'value' ] ) #NEWLINE#
re . findall ( '\\d+\\.*\\d*' , 'some#SPACE#12#SPACE#12.3#SPACE#0#SPACE#any#SPACE#text#SPACE#0.8' ) #NEWLINE#
{ 'foo' : 'a' , 'bar' : 1 } #NEWLINE#
r = Ribbon ( root ) #NEWLINE#
myOjbect . doStuf ( ) . doMoreStuf ( ) . goRed ( ) . goBlue ( ) . die ( ) #NEWLINE#
print ( '\r' , root , end = '#SPACE#' ) #NEWLINE#
ip = info [ 'ip' ] #NEWLINE#
print ( 'Hello#SPACE#World!' ) #NEWLINE#
l . reshape ( 3 , 3 ) #NEWLINE#
plt . grid ( ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'right' ) #NEWLINE#
raise Exception ( 'Smelly#SPACE#socks' ) . with_traceback ( e . __traceback__ ) #NEWLINE#
set_proc_name ( 'testing#SPACE#yeah' ) #NEWLINE#
theIP = re . findall ( '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.\\d{1,3}' , request ) [ 0 ] #NEWLINE#
post2 = Post ( title = 'Loving#SPACE#Mongo' , tags = [ 'mongodb' ] ) . save ( ) #NEWLINE#
self . __dict__ [ 'paramOrder' ] = [ ] #NEWLINE#
return np . diag ( d - 4 ) + 4 #NEWLINE#
return response #NEWLINE#
return render_to_response ( 'results.html' , { 'data' : sorted ( results_dict . #NEWLINE# items ( ) ) } ) #NEWLINE#
mapping = map ( chr , list ( range ( 256 ) ) ) #NEWLINE#
[ [ x0 , y0 ] for x0 in x for y0 in y ] #NEWLINE#
super ( MyMainWindow , self ) . __init__ ( parent ) #NEWLINE#
forms = [ f for f in br . forms ( ) ] #NEWLINE#
isinstance ( [ ] , ( tuple , list , set ) ) #NEWLINE#
raise ValueError ( 'Incorrect#SPACE#data#SPACE#format,#SPACE#should#SPACE#be#SPACE#YYYY-MM-DD' ) #NEWLINE#
evensList = [ x for x in myList if x % 2 == 0 ] #NEWLINE#
group_ordered ( [ 1 , 2 , 3 , 4 , 5 , 6 , 1 ] ) #NEWLINE#
print ( 'HTH#SPACE#:' , numberOfTrials , HTH , float ( HTH ) / numberOfTrials ) #NEWLINE#
new_row [ - 1 ] = new_row [ - 1 ] . replace ( 'or#SPACE#' , '' ) #NEWLINE#
fig . canvas . mpl_disconnect ( cid ) #NEWLINE#
pts = plt . scatter ( x_data , y_data , marker = 's' , color = data ) #NEWLINE#
survival_by_age . plot . bar ( title = 'Survival#SPACE#by#SPACE#Age' ) #NEWLINE#
sys . path . append ( '/usr/local/lib/python2.7/site-packages' ) #NEWLINE#
plt . figure ( figsize = ( 20 , 8 ) ) #NEWLINE#
return build ( 'analytics' , 'v3' , http = http ) #NEWLINE#
ax . add_artist ( bbox_image ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
myA = array ( [ 7 , 4 , 5 , 8 , 3 , 10 ] ) #NEWLINE#
os . environ [ 'SCRAPY_SETTINGS_MODULE' ] = 'scrapy_project.settings' #NEWLINE#
foo . bar ( ) #NEWLINE#
print ( idlink . get_attribute ( 'src' ) ) #NEWLINE#
CTS , DSR , XXX , YYY , ZZZ = list ( range ( 5 ) ) #NEWLINE#
{ 'f' : { 'x' : [ { 'a' : 5 } , { 'a' : 4 } ] } , 'a' : 2 , 'e' : 7 } #NEWLINE#
parser . parse_args ( [ 'foo' , 'bar' , 'baz' ] ) #NEWLINE#
x , y = Symbol ( 'x#SPACE#y' ) #NEWLINE#
files . extend ( glob ( '*.jpg' ) ) #NEWLINE#
print ( 'kill#SPACE#the#SPACE#%s' % st ) #NEWLINE#
print ( 'pick-up#SPACE#the#SPACE#%s' % st ) #NEWLINE#
print ( 'wear#SPACE#the#SPACE#%s' % st ) #NEWLINE#
print ( 'dispose#SPACE#of#SPACE#the#SPACE#%s' % st ) #NEWLINE#
print ( '%s#SPACE#not#SPACE#found' % st ) #NEWLINE#
text ( x , y , s , fontsize = 12 ) #NEWLINE#
df . drop ( 'Tm_Rank' , 1 , inplace = True ) #NEWLINE#
profile . set_preference ( 'browser.download.folderList' , 2 ) #NEWLINE#
nums = [ int ( line ) for line in open ( 'numbers.txt' , 'r' ) ] #NEWLINE# min_num , max_num = min ( nums ) , max ( nums ) #NEWLINE#
s . close ( ) #NEWLINE#
queries &= Q ( ** { key : options [ key ] } ) #NEWLINE#
output . append ( 'nonsync' ) #NEWLINE#
from nltk . corpus import wordnet as wn #NEWLINE#
G2 . add_nodes_from ( nodes ) #NEWLINE#
+ cscope + lispindent + python3 + wildignore #NEWLINE#
self . paths = [ ] #NEWLINE#
def isgenerator ( iterable ) : #NEWLINE# #INDENT# return hasattr ( iterable , '__iter__' ) and not hasattr ( iterable , '__len__' ) #NEWLINE#
g = Github ( token ) #NEWLINE# user = g . get_user ( ) #NEWLINE# repo = user . create_repo ( full_name ) #NEWLINE#
class WeddingInviteResponseSerializer ( serializers . Serializer ) : #NEWLINE# #INDENT# response = serializers . BooleanField ( required = True ) #NEWLINE#
distances = numpy . linalg . norm ( np_cell [ 1 ] - srcPos ) #NEWLINE#
[ ] #NEWLINE#
yfq . get_historical_prices ( 'YHOO' , '20120301' , '20120303' ) #NEWLINE#
child . setText ( 0 , '[list]' ) #NEWLINE#
yield f . read ( 1 ) #NEWLINE#
compiler = msvc #NEWLINE#
mvv_list = mvv_list . selectExpr ( 'mvv#SPACE#as#SPACE#mvv' , 'count#SPACE#as#SPACE#_count' ) #NEWLINE#
metadata . create_all ( ) #NEWLINE#
string . ascii_lowercase #NEWLINE#
list ( filter ( os . path . isfile , os . listdir ( os . curdir ) ) ) #NEWLINE#
dis . dis ( myfunc ) #NEWLINE#
player_id = Column ( Integer , ForeignKey ( 'chats.id' ) , nullable = False ) #NEWLINE#
context . update ( { 'instance' : instance } ) #NEWLINE#
print ( 'num#SPACE#active#SPACE#children:' , multiprocessing . active_children ( ) ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
cw . writerow ( [ 'title1' , 'title2' , 'title3' ] ) #NEWLINE#
l = [ ( 'AAAA' , 1.11 ) , ( 'BBB' , 2.22 ) , ( 'CCCC' , 3.33 ) ] #NEWLINE#
print ( 'Numbers#SPACE#now:#SPACE#' , numbers ) #NEWLINE#
j = re . sub ( '(\\w):' , '\\1":' , j ) #NEWLINE#
return f ( * args , ** kwargs ) #NEWLINE#
image_to_ansi = __import__ ( 'image-to-ansi' ) #NEWLINE#
"""Prints#SPACE#foo""" #NEWLINE#
"""Prints#SPACE#hello#SPACE#world""" #NEWLINE#
d = { 'a' : 10 , 'b' : 20 , 'c' : 30 } #NEWLINE#
print ( sum ( len ( mystr ) for mystr in strings ) ) #NEWLINE#
list ( d . keys ( ) ) #NEWLINE#
ax . figure . canvas . draw ( ) #NEWLINE#
with open ( 'A.txt' ) as file_a : #NEWLINE# #INDENT# words = { line . strip ( ) for line in file_a } #NEWLINE#
f . write ( '' . join ( sublist ) ) #NEWLINE#
url ( '^testws/\\?wsdl$' , 'testmo.views.ws_test' ) , #NEWLINE#
fh . seek ( 0 ) #NEWLINE#
super ( Alpha , self ) . __init__ ( s ) #NEWLINE#
ll = list ( itertools . chain . from_iterable ( ( e , e ) for e in l ) ) #NEWLINE#
a = numpy . array ( [ 'apples' , 'foobar' , 'cowboy' ] , dtype = object ) #NEWLINE#
screen = pygame . display . set_mode ( ( 500 , 500 ) , HWSURFACE | DOUBLEBUF | RESIZABLE ) #NEWLINE#
x = input ( 'text1:' ) #NEWLINE#
alist , blist , clist , dlist , elist = [ [ ] ] * 5 #NEWLINE#
queryset = Town . objects . all ( ) #NEWLINE#
super ( WorkerManager , self ) . __init__ ( ) #NEWLINE#
y = myodeint ( lambda y , t : func ( y , t , alpha ) , [ 1 , 0 , 0 ] , t ) #NEWLINE#
s = pickle . dumps ( { 'username' : 'admin' , 'password' : '123' } ) #NEWLINE#
f . write ( 'My#SPACE#Bonnie#SPACE#lies#SPACE#over#SPACE#the#SPACE#ocean.' ) #NEWLINE#
json . dumps ( { 'price' : 'â\x82¬10' } , ensure_ascii = False ) #NEWLINE#
title = models . CharField ( max_length = 100 ) #NEWLINE#
{ { super ( ) } } #NEWLINE#
lst . append ( ( 70 , 'some#SPACE#data#SPACE#value' ) ) #NEWLINE#
allTrue = all ( somePredicate ( elem ) for elem in someIterable ) #NEWLINE# anyTrue = any ( somePredicate ( elem ) for elem in someIterable ) #NEWLINE#
xl = win32com . client . Dispatch ( 'Excel.Application' ) #NEWLINE#
a = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE# print ( a . index ( 'c' ) ) #NEWLINE#
a = [ [ 1 , 100313 ] , [ 2 , 100313 ] , [ 1 , 100314 ] , [ 3 , 100315 ] ] #NEWLINE#
plt . sunplot ( 111 ) #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#foo(bar)#SPACE#VALUES#SPACE#(?)' , ( '25/06/2003' , ) ) #NEWLINE#
arrow . now ( ) . format ( 'YYYY-MM-DD' ) #NEWLINE#
printf ( 'bind()#SPACE#failed\n' ) #NEWLINE#
method = 'whatever' #NEWLINE# getattr ( test , method ) #NEWLINE#
super ( CustomThread , self ) . __init__ ( ) #NEWLINE#
ax [ 1 ] . add_collection ( collection ) #NEWLINE#
randint ( 100 , 999 ) #NEWLINE#
dictpsl [ key ] . append ( pslrc ) #NEWLINE#
print ( urlparse . parse_qs ( parsed . query ) [ 'def' ] ) #NEWLINE#
myList = [ ] #NEWLINE# for i in range ( 10 ) : #NEWLINE# #INDENT# if i % 2 == 0 : #NEWLINE# #INDENT# #INDENT# myList . append ( i ) #NEWLINE#
li = list ( filter ( condition , li ) ) #NEWLINE#
guess = int ( eval ( input ( 'Enter#SPACE#What#SPACE#You#SPACE#Think#SPACE#His#SPACE#Age#SPACE#Is....t' ) ) ) #NEWLINE#
"""℃""" #NEWLINE#
csv2 = open ( 'csv2' , 'r' ) #NEWLINE#
print ( s , type ( s ) ) #NEWLINE#
my_array = list ( filter ( lambda x : x != value_to_remove , my_array ) ) #NEWLINE#
matrix [ 0 ] [ 2 ] #NEWLINE#
[ 0.4 , 0.09 , 0.002 , 1.5 , 0.007 , 0.08 , 0.3 ] #NEWLINE#
initial_array += increments [ : : - 1 ] . cumsum ( ) [ : : - 1 ] #NEWLINE#
s2 . reset_index ( inplace = True , drop = True ) #NEWLINE#
t = np . linspace ( 0 , 1 , 6 ) #NEWLINE#
l1 = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] , [ 5 , 9 ] ] #NEWLINE# l2 = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] , [ 5 , 6 ] , [ 1 , 2 ] ] #NEWLINE# [ list ( x ) for x in set ( tuple ( x ) for x in l1 ) . intersection ( set ( tuple ( x ) for x in #NEWLINE# l2 ) ) ] #NEWLINE#
from xml . dom import minidom #NEWLINE#
entry_list = [ entry . title . text for entry in feed . entry ] #NEWLINE#
print ( [ 1 , 0 ] in chain ( * sample ) ) #NEWLINE#
module . workflow_set . filter ( trigger_roles__id__exact = self . role . id , allowed = True ) #NEWLINE#
def remove_control_characters ( s ) : #NEWLINE# #INDENT# return '' . join ( ch for ch in s if unicodedata . category ( ch ) [ 0 ] != 'C' ) #NEWLINE#
goal = np . zeros ( array2 . max ( ) + 1 , dtype = 'i1' ) #NEWLINE#
df [ 'rank' ] = df . groupby ( 'group_ID' ) [ 'value' ] . rank ( 'dense' , ascending = False ) #NEWLINE#
bisect . bisect_left ( [ 100 , 300 , 500 , 800 , 1000 ] , p ) #NEWLINE#
df #NEWLINE#
return sorted ( data ) == sorted ( data2 ) #NEWLINE#
self . lbl . after ( 1000 , self . updateGUI ) #NEWLINE#
sorted ( list ( range ( len ( vals ) ) ) , key = vals . __getitem__ ) #NEWLINE#
def changeWord ( word ) : #NEWLINE# #INDENT# for letter in word : #NEWLINE# #INDENT# #INDENT# if letter != 'i' : #NEWLINE# #INDENT# #INDENT# #INDENT# word = word . replace ( letter , '!' ) #NEWLINE# #INDENT# #INDENT# #INDENT# #NEWLINE# #NEWLINE# return word #NEWLINE#
df2 = pd . DataFrame ( index = arange ( 0 , 50 ) , columns = [ 'a' , 'b' ] ) #NEWLINE#
self . values . append ( value ) #NEWLINE#
ctypes . windll . kernel32 . SetConsoleTextAttribute ( std_out_handle , code ) #NEWLINE#
session . put ( ) #NEWLINE#
fig = plt . figure ( 1 ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
rankdata ( b ) #NEWLINE#
struct . pack ( '>d' , float ( 'nan' ) ) . encode ( 'hex_codec' ) #NEWLINE#
new_button = Button ( root , text = '#SPACE#' ) #NEWLINE#
fig = plt . figure ( figsize = ( 3 * wcell + wpad , nrows * hcell + hpad ) ) #NEWLINE#
eval ( strab ) #NEWLINE#
start_urls = [ 'http://www.example.com/feed.xml' ] #NEWLINE#
simplejson . load ( f ) #NEWLINE#
window . show ( ) #NEWLINE# sys . exit ( app . exec_ ( ) ) #NEWLINE#
rgx . search ( '+a+b+' ) is None #NEWLINE#
item , = singlet_list #NEWLINE#
self . rfile . close ( ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 ] , [ 2 , 3 , 4 ] , 'ro' ) #NEWLINE#
[ [ 11 , 12 ] , [ 21 , 21 ] ] #NEWLINE#
ax . set_ylabel ( 'Log#SPACE#Frequency#SPACE#(Hz)' ) #NEWLINE#
class Document ( models . Model ) : #NEWLINE# #INDENT# file = models . FileField ( upload_to = 'documents' , blank = True , null = True ) #NEWLINE#
'{:5d}#SPACE#' * 5 #NEWLINE#
return things . filter ( category = category ) #NEWLINE#
plt . imshow ( x , cmap = mpl . cm . bone ) #NEWLINE#
s . remove ( 1 ) #NEWLINE#
win . idlok ( True ) #NEWLINE#
win . leaveok ( True ) #NEWLINE#
data = pd . read_sql_query ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#YOUR#SPACE#TABLE' , conn = con ) #NEWLINE#
payload = { 'inUserName' : 'username' , 'inUserPass' : 'password' } #NEWLINE#
print ( '#SPACE#' . join ( map ( str , table ) ) ) #NEWLINE#
yield [ seq [ a : b ] for a , b in zip ( indices , indices [ 1 : ] ) ] #NEWLINE#
ax . hist ( x , bins = 50 , histtype = 'step' , fill = None ) #NEWLINE#
app . run ( ) #NEWLINE#
output , err = process . communicate ( ) #NEWLINE#
a = 1 #NEWLINE#
f = open ( 'contactlist.csv' ) #NEWLINE# csv_f = csv . reader ( f ) #NEWLINE# for row in csv_f : #NEWLINE# #INDENT# pass #NEWLINE#
reactor . connectTCP ( host , port , factory ) #NEWLINE#
hiv4gind = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
hiv4gpos = models . CharField ( max_length = 100 , null = True , blank = True ) #NEWLINE#
pdf . getNumPages ( ) #NEWLINE#
'7659Ae' , '1450sp_rev_2_1_abNC_woof' #NEWLINE#
plt . draw ( ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSADRAIN , old_settings ) #NEWLINE#
print ( d [ 'b' ] ) #NEWLINE#
irc . send ( bytes ( 'part' + line [ 5 : ] + '\r\n' , 'utf-8' ) ) #NEWLINE#
request . add_header ( 'Authorization' , credentialBing ) #NEWLINE#
item . save ( ) #NEWLINE#
tkMessageBox . showerror ( 'error#SPACE#title' , 'error#SPACE#message' ) #NEWLINE#
df [ 'year' ] = np . where ( source_years , source_years , df [ 'year' ] ) #NEWLINE#
cur = conn . cursor ( ) #NEWLINE#
print ( np . random . dirichlet ( np . ones ( 10 ) * 1000.0 , size = 1 ) ) #NEWLINE#
Row ( x = 33 , y = 'blue' ) #NEWLINE#
options . append ( '-v' ) #NEWLINE#
self . assertEqual ( string , 'message#SPACE#was#SPACE#passed#SPACE#on' ) #NEWLINE#
m . __repr__ ( ) #NEWLINE#
str = 'h3110#SPACE#23#SPACE#cat#SPACE#444.4#SPACE#rabbit#SPACE#11#SPACE#2#SPACE#dog' #NEWLINE# [ int ( s ) for s in str . split ( ) if s . isdigit ( ) ] #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
unpack ( 'hhl' , '\x00\x01\x00\x02\x00\x00\x00\x03' ) #NEWLINE#
return symmetric_dec ( body , session_key ) #NEWLINE#
print ( df . head ( ) ) #NEWLINE#
screen . refresh ( ) #NEWLINE#
random . shuffle ( tmp ) #NEWLINE#
paragraph . replace ( 'oldtext2' , 'Somethingelse' ) #NEWLINE#
with open ( 'wxdata' , 'w' ) as file : #NEWLINE# #INDENT# pass #NEWLINE#
text = Tkinter . Label ( parent , text = 'Hello#SPACE#Text' ) #NEWLINE#
sys . argv = [ 'arg1' , 'arg2' ] #NEWLINE#
child1 ( ) #NEWLINE#
child2 ( ) #NEWLINE#
sess . run ( outputs , feed_dict = feed ) #NEWLINE#
Y = Y + Z [ : : - 1 ] - Z [ - 1 ] #NEWLINE#
l = [ 'a' , 'c' , 'e' , 'b' ] #NEWLINE#
rgb = rgb . astype ( 'float' ) #NEWLINE#
window . clear ( ) #NEWLINE#
arr = [ [ 2 , 0 , 3 ] , [ 4 , 2 , 3 ] , [ 1 , 0 , 3 ] ] #NEWLINE# any ( x [ 1 : ] == x [ : - 1 ] for x in zip ( * arr ) ) #NEWLINE#
with open ( 'filename.txt' , 'r' ) as f : #NEWLINE# #INDENT# lines = set ( f ) #NEWLINE#
self . crawler . stop ( ) #NEWLINE#
myunicode = 'işğüı' #NEWLINE# print ( 'length#SPACE#of#SPACE#{0}#SPACE#is#SPACE#{1}' . format ( repr ( myunicode ) , len ( myunicode ) ) ) #NEWLINE#
out , err = p . communicate ( 'user\n{}\n' . format ( n ) ) #NEWLINE#
return HttpResponse ( data , content_type = 'application/json' , status = 200 ) #NEWLINE#
np . roll ( a , 2 ) #NEWLINE#
return sorted ( list ( totals ) ) #NEWLINE#
source = d . get_by_name ( 'source' ) #NEWLINE#
g = ( i for i in a + b ) #NEWLINE#
return new_df #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
my_array [ i ] = el #NEWLINE#
_string = '%s%s' % ( Foo ( 'text' ) , 'string' ) #NEWLINE#
print ( 'numbers#SPACE#is#SPACE#now:#SPACE#' , numbers ) #NEWLINE#
myList = [ '*#SPACE#*' , '*' , '*#SPACE#*#SPACE#*' , '*#SPACE#*#SPACE#*#SPACE#*#SPACE#*' , '*#SPACE#*#SPACE#*#SPACE#*#SPACE#*#SPACE#*' , '*#SPACE#*#SPACE#*#SPACE#*' ] #NEWLINE#
buffer . wr1 ( 1311768468603649775 ) #NEWLINE#
class Book ( models . Model ) : #NEWLINE# #INDENT# section = models . ForeignKey ( Section , related_name = 'books' ) #NEWLINE#
array = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
return '' . join ( result ) #NEWLINE#
ax . set_yticks ( np . arange ( 0 , 9 , 2 ) ** 2 ) #NEWLINE#
self . glade . add_from_file ( self . gladefile ) #NEWLINE#
ax . set_rlim ( [ 0 , 5 ] ) #NEWLINE# ax2 . set_rlim ( [ 0 , 1 ] ) #NEWLINE#
list ( 10 ** pos * val for pos , val in enumerate ( reversed ( test ) ) ) #NEWLINE#
self . layout . addWidget ( self . widget2 ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
main ( ) #NEWLINE#
print ( 'Relay:#SPACE#%s' % GPIO . __name__ ) #NEWLINE#
new_file . write ( line . replace ( pattern , subst ) ) #NEWLINE#
app . yaml #NEWLINE#
import subprocess #NEWLINE#
return part . get_payload ( ) #NEWLINE#
chat2 . insert ( '' , 'end' , iid = ( idmensajeactual , ) , values = mensaje , tags = messageid ) #NEWLINE#
my_keys = list ( my_dict . keys ( ) ) #NEWLINE#
result . append ( row ) #NEWLINE#
Wire . write ( number ) #NEWLINE#
ax . figure . canvas . draw ( ) #NEWLINE#
tree . delete ( i ) #NEWLINE#
params = dom . getElementsByTagName ( 'Parameter' ) #NEWLINE#
first_sensor = os . path . normpath ( os . path . join ( path_names [ 0 ] , 'w1_slave' ) ) #NEWLINE#
pl . xlim ( 0.0 , 100.0 ) #NEWLINE#
print ( form . is_valid ( ) ) #NEWLINE#
feeder_lock_object . release ( ) #NEWLINE#
ao [ : - 1 , 1 : ] += ai [ 1 : , : - 1 ] #NEWLINE#
map ( tryEval , [ 'hello' , '3' , '3.64' , '-1' ] ) #NEWLINE#
self . dictset = { } #NEWLINE#
__tablename__ = 'right' #NEWLINE#
__tablename__ = 'students' #NEWLINE#
__tablename__ = 'classes' #NEWLINE#
( A != 0 ) . cumsum ( 1 ) . argmax ( 1 ) #NEWLINE#
return int ( text . strip ( '"#SPACE#' ) ) #NEWLINE#
list ( results ) #NEWLINE#
return jsonify ( { 'uuid' : uuid } ) #NEWLINE#
print ( s . query ( A ) . filter ( A . boolean ) . all ( ) ) #NEWLINE#
return self . _callfunc ( self , * args , ** kwargs ) #NEWLINE#
df . groupby ( [ df [ 'Year' ] . str [ : 4 ] , 'Bread' ] , as_index = False ) . sum ( ) #NEWLINE#
parser . add_argument ( 'infiles' , nargs = '+' , type = str , help = 'Input#SPACE#text#SPACE#files' ) #NEWLINE#
print ( ET . tostring ( dict_to_etree ( d ) ) ) #NEWLINE#
slice1 . append ( a , b ) #NEWLINE#
server . package_urls ( 'roundup' , '1.1.2' ) #NEWLINE#
ws = wb . active #NEWLINE#
return 'application/x-www-form-urlencoded' #NEWLINE#
outdict [ k . lower ( ) ] = v . lower ( ) #NEWLINE#
new_rec = rec . astype ( [ ( 'a' , 'i4' ) , ( 'b' , 'f8' ) ] ) #NEWLINE#
g . add_edge ( 2 , 4 ) #NEWLINE#
np . in1d ( test , states ) #NEWLINE#
print ( 'Found' ) #NEWLINE#
list ( res ) #NEWLINE#
parser_foo . add_argument ( '--wacky' , default = argparse . SUPPRESS ) #NEWLINE#
wordCount = Counter ( words ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
lgd = ax . legend ( loc = 9 , bbox_to_anchor = ( 0.5 , - 0.02 ) ) #NEWLINE#
tty . tcsetattr ( stdin_fileno , tty . TCSANOW , old_ttyattr ) #NEWLINE#
b = Bits ( int = - 1 , length = 12 ) #NEWLINE#
value = input ( 'Please#SPACE#enter#SPACE#a#SPACE#value#SPACE#between#SPACE#10#SPACE#and' + str ( max ) + #NEWLINE# 'for#SPACE#percentage' ) #NEWLINE#
test . main ( ) #NEWLINE#
widgets = { 'field_one' : forms . RadioSelect ( ) } #NEWLINE#
C . reshape ( [ 4 , 2 , 2 ] ) #NEWLINE#
type ( data [ 'realms' ] ) #NEWLINE#
qjup #NEWLINE#
with open ( 'some.csv' , newline = '' ) as f : #NEWLINE# #INDENT# reader = csv . reader ( f ) #NEWLINE# row1 = next ( reader ) #NEWLINE#
self . popitem ( last = False ) #NEWLINE#
lst = [ 1 , 2 , 3 , 4 ] #NEWLINE#
setattr ( cls , name , decorator ( fn ) ) #NEWLINE#
print ( r . json ( ) ) #NEWLINE#
signal . alarm ( 0 ) #NEWLINE#
np . sum ( np . array ( s1 ) . reshape ( len ( s1 ) / 3 , 3 ) , axis = 1 ) #NEWLINE#
ax = df . groupby ( [ 'condition' , 'date' ] ) . mean ( ) . unstack ( 'condition' ) . plot ( ) #NEWLINE#
[ { 'node_id' : next ( ii ) , 'left' : x [ 0 ] , 'right' : x [ 1 ] } for x in w [ 0 ] ] #NEWLINE#
d = { k : [ ] for k in range ( 10 ) } #NEWLINE#
df = pd . DataFrame ( out_arr . T , columns = K1 , index = d [ 'Date' ] ) #NEWLINE#
if os . path . exists ( path ) : #NEWLINE# #INDENT# os . unlink ( path ) #NEWLINE#
setup ( name = 'test' , cmdclass = { 'build_ext' : build_ext } , ext_modules = ext_modules ) #NEWLINE#
result . append ( L . pop ( ) ) #NEWLINE#
print ( '{num:02d}' . format ( num = i ) ) #NEWLINE#
newMenu . add_command ( label = '{0}' . format ( i ) , command = partial ( function1 , i ) ) #NEWLINE#
[ 2 , 2 , 3 ] #NEWLINE#
WSGIScriptAlias / test / tc - test / var / www / stage / hello / tc - test / django . wsgi #NEWLINE#
mypadn . idlok ( 1 ) #NEWLINE#
mypads . idlok ( 1 ) #NEWLINE#
df [ '20130419' : '20130422' ] #NEWLINE#
a . remove ( e ) #NEWLINE#
plt . show ( f ) #NEWLINE#
sys . stdout . write ( '\rChecked#SPACE#' + fc ) #NEWLINE#
ax . add_artist ( p ) #NEWLINE#
proc . join ( ) #NEWLINE#
ts = ( dt_with_tz - datetime ( 1970 , 1 , 1 , tzinfo = pytz . utc ) ) . total_seconds ( ) #NEWLINE#
self . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
_digits = re . compile ( '\\d' ) #NEWLINE#
[ my_function ( line ) for line in f ] #NEWLINE#
ShowAppsView . as_view ( ) ( self . request ) #NEWLINE#
random . shuffle ( keysShuffled ) #NEWLINE#
ax . xaxis . set_major_formatter ( mdates . DateFormatter ( '%d.%m.%y' ) ) #NEWLINE# plt . show ( ) #NEWLINE#
List . index ( 'A' , 1 ) #NEWLINE#
chr ( 97 ) #NEWLINE#
s . send ( '[+]#SPACE#Hello' ) #NEWLINE#
regex2 = re . compile ( '(?i)%s' % '|' . join ( booleans ) ) #NEWLINE#
list1 . append ( word ) #NEWLINE#
print ( distutils . sysconfig . get_config_vars ( ) ) #NEWLINE#
os . getcwd ( ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
unconverged = np . ones ( shape = arr . shape , dtype = bool ) #NEWLINE#
'' , '{a}' , 'text' , '{b}' , 'test' #NEWLINE#
[ '1' ] #NEWLINE#
return self . data [ k ] #NEWLINE#
log . setLevel ( logging . DEBUG ) #NEWLINE#
A = A [ 0 ] #NEWLINE#
print ( 'Compare#SPACE#to:#SPACE##SPACE##SPACE##SPACE#' , np . sort ( full , axis = None ) [ - num_largest : ] ) #NEWLINE#
c = { v : k for k , v in list ( a . items ( ) ) } #NEWLINE#
console . setLevel ( logging . INFO ) #NEWLINE#
[ 'MOR125-1' , 'MOR129-1' , '0.587' ] #NEWLINE#
all ( k in dic2 for k in dic1 ) and all ( k in dic1 for k in dic2 ) #NEWLINE#
type ( f ) #NEWLINE#
df #NEWLINE# df [ 'str_name' ] . str . contains ( 'c' ) #NEWLINE#
df = df . mul ( df . columns . to_series ( ) , axis = 1 ) #NEWLINE#
s = re . sub ( 'DE' , '--' , s ) #NEWLINE#
print ( parser . parse ( [ '1' , '/' , '1' , '0' , '/' , '1' , '9' , '8' , '7' ] ) ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE# a [ np . arange ( len ( a ) ) , [ 1 , 0 , 2 ] ] #NEWLINE#
MCAST_GRP = '224.1.1.1' #NEWLINE#
q = request . GET . get ( 'q' ) #NEWLINE# if q : #NEWLINE# #INDENT# pass #NEWLINE#
quantized = img . convert ( 'P' , palette = Image . ADAPTIVE , colors = 4 ) #NEWLINE#
with open ( f , 'rb' ) as infile : #NEWLINE# #INDENT# outfile . write ( infile . read ( ) ) #NEWLINE#
child . sendline ( 'ls' ) #NEWLINE#
self . finished . emit ( ) #NEWLINE#
decoded = struct . unpack ( '<I' , magic ) [ 0 ] #NEWLINE#
plt . figure ( figsize = ( width , height ) ) #NEWLINE#
IedConnection_getServerDirectory . restype = c_void_p #NEWLINE#
print ( fib ( i ) ) #NEWLINE#
p = re . compile ( '-(?!(?:aa|bb)-)([^-]+)(?=-)' ) #NEWLINE#
raise UnpicklingError ( 'Invalid#SPACE#persistent#SPACE#id' ) #NEWLINE#
[ 0 , 1 , 2 , 3 ] #NEWLINE#
time . sleep ( poll_seconds ) #NEWLINE#
df = pd . DataFrame ( array , columns = columns ) #NEWLINE#
arr [ 0 ] . append ( 'aa1' ) #NEWLINE#
nums . append ( ( item , n - item ) ) #NEWLINE#
line_list = [ line for line in filtered_soup ] #NEWLINE#
i += 1 #NEWLINE#
df [ subset [ subset . isin ( myList ) ] . stack ( ) . duplicated ( ) . unstack ( ) . any ( 1 ) ] #NEWLINE#
platform . release ( ) #NEWLINE#
test . main ( ) #NEWLINE#
print ( res . queryString ( ) ) #NEWLINE#
ax . set_xlabel ( 'code#SPACE#executions' , fontsize = 12 ) #NEWLINE#
numpy . add ( c [ : - 1 ] , c [ 1 : ] , c [ 1 : ] ) #NEWLINE#
os . environ [ 'LD_LIBRARY_PATH' ] = '/usr/lib/oracle/XX.Y/client64/lib' #NEWLINE#
[ d [ : 4 ] for d in MyArray ] #NEWLINE#
return render ( request , 'registration/step3.html' ) #NEWLINE#
json . loads ( page_detail_string ) #NEWLINE#
parser . add_argument ( '-d' , nargs = 1 ) #NEWLINE#
reg . findall ( 'VALUE#SPACE#100#SPACE#234#SPACE#568#SPACE#9233#SPACE#119' ) #NEWLINE#
return { a [ d ] : todict ( [ x for x in X if x [ d ] == a [ d ] ] , d + 1 ) for a in lst } #NEWLINE#
print ( self . recv ( 8192 ) ) #NEWLINE#
self . connect ( 'insert_text' , self . entryInsert ) #NEWLINE#
sorted ( s , key = lambda c : ( - s . count ( c ) , s . index ( c ) ) ) [ 0 ] #NEWLINE#
request . FILES . update ( files ) #NEWLINE#
print ( '<%s>' % name ) #NEWLINE#
surf2 = pygame . Surface ( ( 200 , 200 ) ) #NEWLINE#
xticks [ - 1 ] . label1 . set_visible ( False ) #NEWLINE#
list ( pkgutil . iter_modules ( ) ) #NEWLINE#
print ( '{}:#SPACE#{}' . format ( n , t / 30 ) ) #NEWLINE#
groups = itertools . groupby ( a , key = lambda x : x [ 1 ] ) #NEWLINE#
result = pd . DataFrame ( ) #NEWLINE#
return '-' . join ( ( s [ : 4 ] , s [ 4 : 6 ] , s [ 6 : ] ) ) #NEWLINE#
m = imaplib . IMAP4_SSL ( 'imap.gmail.com' ) #NEWLINE#
arr = np . array ( [ 1 , 3 , 2 , 4 , 5 ] ) #NEWLINE#
if string . isalpha ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
S [ int ( line [ 0 ] ) , int ( line [ 1 ] ) ] = True #NEWLINE#
gg = df . groupby ( 'subid' , sort = True ) . sum ( ) #NEWLINE#
print ( ',#SPACE#' . join ( '%s:#SPACE#%s' % item for item in list ( attrs . items ( ) ) ) ) #NEWLINE#
screen . blit ( img , ( 0 , 0 ) ) #NEWLINE# pygame . display . flip ( ) #NEWLINE#
df . B . plot ( ax = plt . gca ( ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
imgfile . close ( ) #NEWLINE#
fig , axes = plt . subplots ( nrows = 2 , ncols = 4 , figsize = ( 12 , 5 ) ) #NEWLINE#
hashlib . sha512 ( 'salt' + 'sensitive#SPACE#data' ) . hexdigest ( ) #NEWLINE#
db . session . add ( g ) #NEWLINE#
list = set ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
now = datetime . now ( ) #NEWLINE#
float ( 'fish' ) #NEWLINE#
__all__ = [ '__all__' ] + _import_package_files ( ) #NEWLINE#
ssh . connect ( hostname , username = username , password = password ) #NEWLINE#
pl . gca ( ) . set_aspect ( 'equal' ) #NEWLINE#
[ { item . tag : item . text for item in ch } for ch in tree . findall ( 'file' ) ] #NEWLINE#
time . sleep ( 0.2 ) #NEWLINE#
m = scipy . sparse . coo_matrix ( ( data , ( r , c ) ) , shape = ( 100000 , 40000 ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
[ 'bacon' , 'eggs' ] , #NEWLINE#
sys . path . insert ( 0 , root_path ) #NEWLINE#
server . ping ( ) #NEWLINE#
df [ 'e-mail' ] = [ x . split ( '|' ) [ 0 ] for x in df . index ] #NEWLINE#
y = list ( set ( itertools . combinations ( x , 3 ) ) ) #NEWLINE#
f = open ( 'myfile.txt' , 'r' ) #NEWLINE# for line in f : #NEWLINE# #INDENT# pass #NEWLINE#
test_maybe_recursive ( ) #NEWLINE#
to_select = numpy . array ( [ 1 , 2 , 3 ] * 3 ) . reshape ( 3 , 3 ) #NEWLINE#
s . reindex ( index , method = 'ffill' ) #NEWLINE#
<STR0> ( 1 ) . __name__ #NEWLINE#
req . add_data ( "{'some':'data'}" ) #NEWLINE#
def func1 ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
lla . sort ( order = 'f1' ) #NEWLINE#
fl . close ( ) #NEWLINE#
pilImage = Image . open ( StringIO ( rawImage ) ) #NEWLINE#
sorted_data = sorted ( list ( data . items ( ) ) , key = operator . itemgetter ( 1 ) ) #NEWLINE#
plt . figure ( figsize = ( 8 , 8 ) ) #NEWLINE# plt . axis ( 'off' ) #NEWLINE#
print ( 'Sub#SPACE#wants#SPACE#input' ) #NEWLINE#
print ( 'Proto#SPACE#gave#SPACE#input#SPACE#to#SPACE#prg' ) #NEWLINE#
print ( 'Connected' ) #NEWLINE#
print ( 'Procces#SPACE#spawned!' ) #NEWLINE#
print ( 'About#SPACE#to#SPACE#do#SPACE#stuff' ) #NEWLINE#
print ( 'Runing' ) #NEWLINE#
dict_writer = csv . DictWriter ( f , fieldnames = [ 'longitude' , 'latitude' ] ) #NEWLINE#
df . groupby ( groups ) [ 'values' ] . apply ( np . prod ) #NEWLINE#
st = datetime . strptime ( st , '%A#SPACE#%d#SPACE#%B#SPACE#%H#SPACE#%M' ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'application/json' #NEWLINE#
os . getcwd ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
parser = argparse . ArgumentParser ( description = 'some#SPACE#description' ) #NEWLINE#
app . logger . warning ( 'A#SPACE#value#SPACE#for#SPACE#warning' ) #NEWLINE#
[ c for c in foo if c not in temp and ( temp . add ( c ) or True ) ] #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
from numpy import * #NEWLINE#
out . putpixel ( ( x , y ) , color ) #NEWLINE#
INSTALLED_APPS = ( ) #NEWLINE#
with open ( 'test.csv' , 'r' ) as textfile : #NEWLINE# #INDENT# pass #NEWLINE#
frame . thumbnail ( ( 100 , 100 ) , Image . ANTIALIAS ) #NEWLINE#
print ( '%d:#SPACE#%s' % ( fileinput . filelineno ( ) , line ) , end = '#SPACE#' ) #NEWLINE#
jqXHR . setRequestHeader ( 'X-CSRF-Token' , csrf_token ) #NEWLINE#
return numpy . array ( imc ) #NEWLINE#
print ( resp . status_code , resp . text , resp . headers ) #NEWLINE#
print ( 'Syntax:#SPACE#%s#SPACE#rate#SPACE#url1#SPACE#url2#SPACE#...' % sys . argv [ 0 ] ) #NEWLINE#
category = SelectField ( 'category' , choices = [ ( 1 , 'one' ) , ( 2 , 'two' ) ] ) #NEWLINE#
ax . set_xlabel ( LabelX ) #NEWLINE#
x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
super ( DirectorInlineForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
response = requests . get ( url ) #NEWLINE#
sys . path . insert ( 0 , virtual_site ) #NEWLINE#
print ( '%s:#SPACE#I#SPACE#was#SPACE#imported#SPACE#from#SPACE#%s' % ( __name__ , __file__ ) ) #NEWLINE#
polycube = numpy . transpose ( polycube , ( 1 , 2 , 0 ) ) #NEWLINE#
[ '0xaa' , '0x0' , '0xff' , '0x78' ] #NEWLINE#
instance . save ( ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( cj ) ) #NEWLINE#
raise ValueError ( 'Wrong#SPACE#length#SPACE#given#SPACE#for#SPACE#list' ) #NEWLINE#
wb = xlrd . open_workbook ( 'cell_formula_test.xlsx' ) #NEWLINE#
f . write ( '}\n' ) #NEWLINE#
for i in range ( df . shape [ 0 ] ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( 'Number#SPACE#of#SPACE#instances#SPACE#of#SPACE#%r#SPACE#in#SPACE#%r#SPACE#is#SPACE#%d' % ( key , target_string , count ) ) #NEWLINE#
test ( 0 , 1 , 3 , 4 , 6 , 7 , 9 , 10 ) #NEWLINE#
b_set = set ( map ( tuple , a ) ) #NEWLINE# b = map ( list , b_set ) #NEWLINE#
sys . exit ( 9009 ) #NEWLINE#
pylab . scatter ( [ p [ 0 ] for p in pp ] , [ p [ 1 ] for p in pp ] ) #NEWLINE#
value , = int ( ) . chained ( ) . expression ( ) . that ( ) . returns ( ) . tuple ( ) #NEWLINE#
raise TypeError ( 'RoundToSigFigs:#SPACE#all#SPACE#x#SPACE#must#SPACE#be#SPACE#real.' ) #NEWLINE#
p . plot ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( element_count ( [ 1 , [ ] , 3 ] ) ) #NEWLINE#
1 , 2 , 3 , ( 5 , ) , 4 , 'BAR' , 'BAZ' #NEWLINE#
nx . draw ( G ) #NEWLINE# plt . show ( ) #NEWLINE#
app = create_app ( 'config.py' ) #NEWLINE# app . run ( ) #NEWLINE#
return np . histogram ( sampling , bins = np . arange ( len ( A ) + 1 ) ) [ 0 ] #NEWLINE#
ao [ : - 1 , : ] += ai [ 1 : , : ] #NEWLINE#
server_sock . listen ( 1 ) #NEWLINE#
main ( 'hello' , 'world' ) #NEWLINE#
<VAR0> ( MyClass ( ) ) #NEWLINE#
suite . addTest ( MyTestCase ( 'testBar' ) ) #NEWLINE#
suite . addTest ( MyTestCase ( 'testBaz' ) ) #NEWLINE#
video_length = lambda video : re . compile ( 'length_seconds=(.*?)\\\\' , re . S #NEWLINE# ) . search ( urllib . request . urlopen ( video ) . read ( ) ) . group ( 1 ) . strip ( ) #NEWLINE#
p . kill ( ) #NEWLINE#
text_widget . index ( 'end' ) #NEWLINE# int ( text_widget . index ( 'end' ) . split ( '.' ) [ 0 ] ) - 1 #NEWLINE#
print ( json . dumps ( doc . identity . addr . reprJSON ( ) , cls = ComplexEncoder ) ) #NEWLINE#
flat_index = coo [ : , ( 0 ) ] * np . max ( coo [ : , ( 1 ) ] ) + coo [ : , ( 1 ) ] #NEWLINE#
print ( occs [ 'l' ] ) #NEWLINE#
triplets = [ set ( x ) for x in triplets ] #NEWLINE#
npi . group_by ( a [ : , : 2 ] ) . split ( a ) #NEWLINE#
ax . set_title ( 'Tk#SPACE#embedding' ) #NEWLINE#
temp . sort ( ) #NEWLINE#
s2 = s . split ( '&' ) [ 0 ] #NEWLINE# print ( s2 ) #NEWLINE#
print ( np . ma . masked_invalid ( a ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
Z = np . array ( mean_data ) [ : , ( 2 ) ] #NEWLINE#
e1 = np . array ( [ 1 , 0 , 0 ] ) #NEWLINE#
assert get_current_session ( ) #NEWLINE#
Z = f ( np . dstack ( np . meshgrid ( x , y ) ) ) #NEWLINE#
aapl = aapl . asfreq ( 'D' , method = 'ffill' ) #NEWLINE#
print ( e . gmm ( ) ) #NEWLINE#
PageModel . all ( ) . filter ( '__key__#SPACE#IN#SPACE#' , [ key ] ) #NEWLINE#
x = np . random . rand ( 10 ) #NEWLINE#
flatten ( Cards ) #NEWLINE#
r = [ int ( a ) for a in r . split ( ':' ) ] #NEWLINE#
pts = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) , ( 7 , 8 ) , ( 9 , 10 ) , ( 11 , 12 ) ] #NEWLINE#
self . edges . setdefault ( n1 , [ ] ) . append ( ( n2 , w ) ) #NEWLINE#
plt . ylabel ( 'y' ) #NEWLINE#
content = browser . page_source #NEWLINE#
l1 = [ 'test1' , 'test2' , 'test3' , 'test4' , 'test5' ] #NEWLINE# l2 = set ( [ 't1' , 't4' ] ) #NEWLINE#
from distutils . core import setup #NEWLINE#
axes [ 1 ] . set_title ( 'Logged' ) #NEWLINE#
ylab . set_style ( 'italic' ) #NEWLINE#
xlab . set_style ( 'italic' ) #NEWLINE#
gca ( ) . set_autoscale_on ( False ) #NEWLINE#
def do_something ( self ) : #NEWLINE# #INDENT# print ( "I#SPACE#don't#SPACE#know#SPACE#what#SPACE#I#SPACE#am#SPACE#doing" ) #NEWLINE#
return [ i for i , ltr in enumerate ( s ) if ltr == ch ] #NEWLINE#
ax . add_patch ( patches . Rectangle ( pos , w , h , color = c ) ) #NEWLINE#
print ( '{}#SPACE#hrs#SPACE#{}#SPACE#mins#SPACE#{}#SPACE#secs' . format ( hours , minutes , seconds ) ) #NEWLINE#
b . grab_release ( ) #NEWLINE#
np . where ( np . all ( x == [ 0 , 1 ] , axis = 1 ) ) #NEWLINE#
text = '42#SPACE#0' #NEWLINE# nums = [ int ( n ) for n in text . split ( ) ] #NEWLINE#
df = pd . read_csv ( io . StringIO ( temp ) , delimiter = '\\s+' , usecols = [ 'text' ] ) #NEWLINE#
opencvImage = cv2 . cvtColor ( numpy . array ( pil_image ) , cv2 . COLOR_RGB2BGR ) #NEWLINE#
response = HttpResponse ( mimetype = 'application/force-download' ) #NEWLINE#
password = db . Column ( db . String ( 30 ) ) #NEWLINE#
f . write ( '\n' . join ( [ str ( n ) for n in args ] ) + '\n' ) #NEWLINE#
add5 ( 3 ) #NEWLINE#
dict ( MyDict . lists ( ) ) #NEWLINE#
conn . close ( ) #NEWLINE#
sys . getsizeof ( b ) #NEWLINE#
client . get ( 'Any_Linkedin_URL' ) #NEWLINE#
writer = csv . writer ( output ) #NEWLINE#
( abs ( arr_f - a ) < t ) . any ( ) #NEWLINE#
from django . contrib . auth . models import User , Permission #NEWLINE#
df . replace ( { 'col1' : di } ) #NEWLINE#
browser . get ( 'http://yahoo.com' ) #NEWLINE#
sum_over_n [ ( - 1 ) ** n * x ** ( 2 * n ) / math . factorial ( 2 * n ) ] #NEWLINE#
x . flat [ i ] #NEWLINE#
dataFrame . pow ( timeSeries , axis = 0 ) #NEWLINE#
self . conf . update ( params = { 'sort' : 'created' } ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
writer = csv . writer ( outfile ) #NEWLINE#
show ( 0 ) #NEWLINE#
pickle . dump ( mydict , open ( '/tmp/test.pkl' , 'wb' ) ) #NEWLINE# pickle . load ( open ( '/tmp/test.pkl' , 'rb' ) ) #NEWLINE#
f = urllib . request . urlopen ( req ) #NEWLINE#
x = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
turtle . Screen ( ) . exitonclick ( ) #NEWLINE#
circle1 = matplotlib . patches . Circle ( ( - 200 , - 250 ) , radius = 90 , color = '#EB70AA' ) #NEWLINE#
return Resources . objects . filter ( user = self . request . user . username ) #NEWLINE#
self . finished . emit ( ) #NEWLINE#
sys . exit ( ) #NEWLINE#
getattr ( __import__ ( 'os' ) , 'write' ) ( 1 , 'Hello#SPACE#world!\n' ) #NEWLINE#
link = Label ( root , text = 'Google#SPACE#Hyperlink' , fg = 'blue' , cursor = 'hand2' ) #NEWLINE#
data = np . array ( imc ) #NEWLINE#
del a [ : ] #NEWLINE#
reactor . run ( ) #NEWLINE#
dc . SetFont ( self . GetFont ( ) ) #NEWLINE#
df = pd . read_csv ( 'in.csv' , delimiter = '\\s+' ) #NEWLINE#
eval ( '5*a+6*b' ) + eval ( '2*a+3*b+9*c' ) #NEWLINE#
shops = [ 'A' , 'B' , 'C' , 'D' ] #NEWLINE#
signal . signal ( signal . SIGINT , self . exit_gracefully ) #NEWLINE#
com . convert_robj ( rdf ) #NEWLINE#
[ 1 , 4 , 6 , 4 , 1 ] #NEWLINE#
[ '8/21/13#SPACE#11:30:33:557#SPACE#PDF' ] #NEWLINE#
InitializeComponent ( ) #NEWLINE#
return max ( groups , key = _auxfun ) [ 0 ] #NEWLINE#
df = pd . DataFrame ( data_as_2d_ndarray ) #NEWLINE#
with open ( 'my_words.txt' ) as infile : #NEWLINE# #INDENT# lines = 0 #NEWLINE# words = 0 #NEWLINE# characters = 0 #NEWLINE# for line in infile : #NEWLINE# #INDENT# wordslist = line . split ( ) #NEWLINE# lines = lines + 1 #NEWLINE# words = words + len ( wordslist ) #NEWLINE# characters += sum ( len ( word ) for word in wordslist ) #NEWLINE# print ( lines ) #NEWLINE# print ( words ) #NEWLINE# print ( characters ) #NEWLINE#
[ '12,523' , '3.46' ] #NEWLINE#
block_reduce ( arr * area_cell , block_size = ( 2 , 2 ) , func = np . ma . mean ) #NEWLINE#
t = np . random . randint ( 0 , 50 , 500 ) #NEWLINE#
print ( 'mic:\t\t' , mic . hexdigest ( ) , '\n' ) #NEWLINE#
s . write ( '2' ) #NEWLINE#
any ( i in '<string>' for i in '123' ) #NEWLINE# any ( i in '<string>' for i in ( '11' , '22' , '33' ) ) #NEWLINE#
rel_path . split ( os . path . sep ) #NEWLINE#
l . check ( ( 'root' , 'INFO' , 'a#SPACE#message' ) , ( 'root' , 'ERROR' , 'an#SPACE#error' ) ) #NEWLINE#
sort_order = [ 'site' , 'A1' , 'A5' , 'A10' ] #NEWLINE#
print ( match ) #NEWLINE#
a = Finalizable ( ) #NEWLINE#
print ( '' . join ( getAllTheLetters ( ) ) == string . lowercase ) #NEWLINE#
super ( Preview , self ) . __init__ ( ) #NEWLINE#
print ( is_third_friday ( 'Jun#SPACE#21,#SPACE#2013' ) ) #NEWLINE#
[ x for x in s if not x in rm ] #NEWLINE#
import numpy as np #NEWLINE#
class Unhashable ( object ) : #NEWLINE# #INDENT# __hash__ = None #NEWLINE#
ax . plot_trisurf ( triang , z_refi , cmap = cm . jet , lw = 0.0 ) #NEWLINE# plt . show ( ) #NEWLINE#
self . response . out . write ( 'done' ) #NEWLINE#
a [ subset_a ] += 1 #NEWLINE#
g_pixels = np . zeros ( image_size , dtype = np . uint8 ) #NEWLINE#
print ( delta . total_seconds ( ) ) #NEWLINE#
call ( 'g++#SPACE#-shared#SPACE#-o#SPACE#test.dll#SPACE#test.o#SPACE#-Wl,--out-implib,test.a' ) #NEWLINE#
setattr ( None , 'somefield' , 'somevalue' ) #NEWLINE#
ax . set_title ( 'Points#SPACE#on#SPACE#grid,#SPACE#tricontour' ) #NEWLINE#
ax . set_title ( 'Points#SPACE#on#SPACE#transformed#SPACE#grid,#SPACE#contour' ) #NEWLINE#
ax . set_title ( 'Points#SPACE#on#SPACE#transformed#SPACE#grid,#SPACE#tricontour' ) #NEWLINE#
ax . set_title ( 'Points#SPACE#random,#SPACE#tricontour' ) #NEWLINE#
ax . set_title ( 'Points#SPACE#random#SPACE#transformed,#SPACE#tricontour' ) #NEWLINE#
print ( copen ( 'nosuchfile' , 0 ) ) #NEWLINE#
x = [ '1' , '2' , '3' ] #NEWLINE#
"""Ensures#SPACE#that#SPACE#the#SPACE#sessions#SPACE#object#SPACE#(if#SPACE#it#SPACE#exists)#SPACE#is#SPACE#attached#SPACE#to#SPACE#the#SPACE#request.""" #NEWLINE#
"""When#SPACE#a#SPACE#known#SPACE#user#SPACE#is#SPACE#logged#SPACE#in#SPACE#redirect#SPACE#them#SPACE#to#SPACE#their#SPACE#home#SPACE#page""" #NEWLINE#
ei = np . where ( em . flat ) [ 0 ] #NEWLINE#
graph = pydot . Dot ( graph_type = 'graph' ) #NEWLINE#
wx . Panel . __init__ ( self , parent ) #NEWLINE#
plt . close ( ) #NEWLINE#
time . sleep ( min ( self . next_yield - t , self . interval ) ) #NEWLINE#
mayavi . mlab . points3d ( x , y , z , s , colormap = 'copper' , scale_factor = 0.25 ) #NEWLINE#
ndimage . zoom ( dtest , 2 / 3 , prefilter = False ) #NEWLINE#
from django . conf import settings #NEWLINE#
np . array ( 12345678901234 ) #NEWLINE#
raise NotImplementedError #NEWLINE#
random . shuffle ( keys ) #NEWLINE#
env . forward_agent = True #NEWLINE#
os . path . splitext ( f ) #NEWLINE#
print ( '\n' , end = '#SPACE#' ) #NEWLINE#
pytest . main ( '-x#SPACE#{0}' . format ( argument ) ) #NEWLINE#
plt . close ( ) #NEWLINE#
list ( sequence ( ) [ 1 : 3 , ( 6 ) , 8 : 20 : 2 ] ) #NEWLINE#
print ( list ( zip_with_scalar ( [ 1 , 2 , 3 , 4 ] , 'a' ) ) ) #NEWLINE#
checkIP . __file__ #NEWLINE#
df . sort_index ( ) #NEWLINE#
return hash ( ( self . i , self . k , self . j ) ) #NEWLINE#
self . cardsdiscarded += 1 #NEWLINE#
- - nologcapture #NEWLINE#
leg . set_zorder ( 1 ) #NEWLINE#
urls = super ( MenuOrderAdmin , self ) . get_urls ( ) #NEWLINE#
[ { 'count' : '995' , 'year' : '1600' } , { 'count' : '942' , 'year' : '1607' } , { #NEWLINE# 'count' : '937' , 'year' : '1599' } , { 'count' : '894' , 'year' : '1598' } , { #NEWLINE# 'count' : '848' , 'year' : '1592' } , { 'count' : '841' , 'year' : '1590' } , { #NEWLINE# 'count' : '786' , 'year' : '1603' } , { 'count' : '779' , 'year' : '1609' } , { #NEWLINE# 'count' : '762' , 'year' : '1597' } , { 'count' : '753' , 'year' : '1594' } , { #NEWLINE# 'count' : '740' , 'year' : '1596' } , { 'count' : '738' , 'year' : '1612' } , { #NEWLINE# 'count' : '718' , 'year' : '1590' } , { 'count' : '717' , 'year' : '1610' } , { #NEWLINE# 'count' : '715' , 'year' : '1602' } , { 'count' : '680' , 'year' : '1606' } , { #NEWLINE# 'count' : '674' , 'year' : '1603' } , { 'count' : '639' , 'year' : '1603' } , { #NEWLINE# 'count' : '637' , 'year' : '1603' } , { 'count' : '634' , 'year' : '1590' } , { #NEWLINE# 'count' : '633' , 'year' : '1599' } , { 'count' : '616' , 'year' : '1596' } , { #NEWLINE# 'count' : '614' , 'year' : '1596' } , { 'count' : '612' , 'year' : '1595' } , { #NEWLINE# 'count' : '607' , 'year' : '1603' } , { 'count' : '579' , 'year' : '1593' } , { #NEWLINE# 'count' : '570' , 'year' : '1600' } , { 'count' : '541' , 'year' : '1599' } , { #NEWLINE# 'count' : '525' , 'year' : '1608' } , { 'count' : '520' , 'year' : '1599' } , { #NEWLINE# 'count' : '518' , 'year' : '1602' } , { 'count' : '486' , 'year' : '1595' } , { #NEWLINE# 'count' : '470' , 'year' : '1593' } , { 'count' : '433' , 'year' : '1609' } , { #NEWLINE# 'count' : '429' , 'year' : '1607' } , { 'count' : '421' , 'year' : '1611' } , { #NEWLINE# 'count' : '399' , 'year' : '1592' } , { 'count' : '363' , 'year' : '0' } , { #NEWLINE# 'count' : '353' , 'year' : '1594' } , { 'count' : '287' , 'year' : '1609' } , { #NEWLINE# 'count' : '106' , 'year' : '0' } , { 'count' : '57' , 'year' : '1609' } ] #NEWLINE#
img = Image . open ( file ) #NEWLINE#
model . add ( Dropout ( 0.2 , input_shape = ( 33 , ) ) ) #NEWLINE#
outfile . write ( text ) #NEWLINE#
def countnonoverlappingrematches ( pattern , thestring ) : #NEWLINE# #INDENT# return re . subn ( pattern , '' , thestring ) [ 1 ] #NEWLINE#
df = pd . DataFrame ( dict ( [ ( k , pd . Series ( v ) ) for k , v in list ( sample . items ( ) ) ] ) ) #NEWLINE#
setattr ( s , name , value ) #NEWLINE#
br . select_form ( 'searchform' ) #NEWLINE#
plt . xticks ( list ( xMap . values ( ) ) , list ( xMap . keys ( ) ) ) #NEWLINE#
df = df1 . append ( df2 ) #NEWLINE#
return [ [ my_sum ] ] #NEWLINE#
split_list = [ listo [ i : i + n ] for i in range ( 0 , len ( listo ) , n ) ] #NEWLINE#
list ( mro_merge ( ( 'G' , 'O' ) , ( 'H' , 'O' ) ) ) #NEWLINE#
data [ 'Time' ] #NEWLINE#
matplotlib . rc ( 'font' , family = 'sans-serif' ) #NEWLINE#
t . start ( ) #NEWLINE#
example . split ( ) #NEWLINE#
my_dict = { 'a' : [ 1 , 2 , 3 , 4 , 5 ] , 'b' : [ 1 , 2 , 3 ] } #NEWLINE# df = pd . DataFrame . from_dict ( my_dict , orient = 'index' ) . T #NEWLINE#
layout = QtGui . QHBoxLayout ( ) #NEWLINE#
x = np . zeros ( ( 10 , 20 , 30 ) ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE# plt . show ( ) #NEWLINE#
assert isinstance ( d , dict ) and len ( d ) == 1 #NEWLINE#
df . loc [ df [ 'Age' ] < 40 , 'Age_Group' ] = '<40' #NEWLINE#
plt . xlabel ( '$\\mathrm{This#SPACE#is#SPACE#the#SPACE#}x\\mathrm{-axis}$' . replace ( '#SPACE#' , '\\:#SPACE#' ) ) #NEWLINE#
def someview ( request ) : #NEWLINE# #INDENT# if request . method == 'POST' : #NEWLINE# #INDENT# #INDENT# form = UserForm ( request . POST , user = request . user ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# if form . is_valid ( ) : #NEWLINE# #INDENT# pass #NEWLINE# else : #NEWLINE# #INDENT# form = UserForm ( user = request . user ) #NEWLINE#
variable = int ( stringToInt ) if stringToInt else None #NEWLINE#
stream_index = numpy . array ( stream_index ) . repeat ( repeat_count ) #NEWLINE#
app . run ( True , False ) #NEWLINE#
np . may_share_memory ( a , a [ : , ( [ 1 , 3 ] ) ] ) #NEWLINE#
print ( df . loc [ name ] ) #NEWLINE#
return data #NEWLINE#
foo ( ) #NEWLINE#
output_df . dropna ( subset = [ 'left_dt' ] , inplace = True ) #NEWLINE#
im = plt . imshow ( data , cmap = 'gist_gray_r' , vmin = 0 , vmax = 1 ) #NEWLINE#
print ( matchobj . group ( 1 ) ) #NEWLINE#
b [ np . arange ( b . shape [ 0 ] ) [ : , ( None ) ] , b . argsort ( 1 ) [ : , : M ] ] . sum ( 1 ) #NEWLINE#
button . Bind ( wx . EVT_BUTTON , on_button ) #NEWLINE#
l . setLevel ( logging . INFO ) #NEWLINE#
r = requests . get ( 'https://github.com/timeline.json' ) #NEWLINE#
numpy . linalg . matrix_rank ( A ) #NEWLINE#
np . random . seed ( ) #NEWLINE#
df2 [ 'ID' ] = df [ 'ID' ] #NEWLINE#
mythread = threading . Thread ( target = get_user_input , args = ( user_input , ) ) #NEWLINE#
line = f . readline ( ) #NEWLINE#
setenv ( 'PYTHONPATH' , '.' , 1 ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
my_subprocess = subprocess . Popen ( args ) #NEWLINE#
B = np . array ( [ 2 , 4 , 6 , 8 ] ) #NEWLINE#
B . __init__ ( self , 3 ) #NEWLINE#
paragraphs = re . split ( '\\n\\n' , DATA ) #NEWLINE#
list ( range ( 0 , len ( list1 ) , 2 ) ) #NEWLINE#
areas . apply ( multiply_by_demand ) #NEWLINE#
dateparse = lambda x : pd . datetime . strptime ( x , '%m/%d/%Y' ) #NEWLINE#
curses . echo ( ) #NEWLINE#
con . close ( ) #NEWLINE#
tk . Frame . __init__ ( self , master ) #NEWLINE#
return decorator #NEWLINE#
command = '\x89EV' #NEWLINE#
df . Stake [ i ] = 2 * df . Stake [ i - 1 ] #NEWLINE#
my_worker . start . emit ( 'hello' ) #NEWLINE#
X . sum ( axis = 1 ) . sum ( axis = 0 ) #NEWLINE#
repr ( test . make_fptr ( ) ) #NEWLINE#
[ unicodedata . name ( s_ ) . split ( '#SPACE#' ) [ - 1 ] for s_ in s ] #NEWLINE#
self . assertEqual ( 1 , 1 ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
word [ 0 ] . isupper ( ) #NEWLINE#
s . send ( 'GET#SPACE#/#SPACE#HTTP/1.0%s' % CRLF ) #NEWLINE#
ax2 . yaxis . set_offset_position ( 'right' ) #NEWLINE#
mylist = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE# print ( [ mylist [ i : i + 4 ] for i in range ( 0 , len ( mylist ) , 4 ) ] ) #NEWLINE#
print ( '\\u0e4f\\u032f\\u0361\\u0e4f' . decode ( 'unicode-escape' ) ) #NEWLINE#
d = { 'apple' : [ 2 , 4 ] , 'carrot' : [ 44 , 33 ] , 'orange' : [ 345 , 667 ] } #NEWLINE#
func ( ) #NEWLINE#
var2 = cPickle . load ( open ( '/tmp/dump2' ) ) #NEWLINE#
img_gaus = ndimage . filters . gaussian_filter ( img , 2 , mode = 'nearest' ) #NEWLINE#
for key , value in list ( data . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
layout2 . addWidget ( frame2 ) #NEWLINE#
final_ensemble . estimators_ = [ ] #NEWLINE#
final_dict = { 'Hole' : 0 , 'Par' : 0 , 'Index' : 0 , 'Distance' : 0 , 'Score' : { } } #NEWLINE#
plt . scatter ( a , b ) #NEWLINE#
matplotlib . rc ( 'font' , serif = 'Helvetica#SPACE#Neue' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
frame . pack ( side = 'top' ) #NEWLINE#
decoded = imap_utf7 . decode ( '&BdAF6QXkBdQ-' ) #NEWLINE#
plt . show ( ) #NEWLINE#
map ( list , combinations ( A , 2 ) ) #NEWLINE#
{ 'a' : 10 , 'b' : 20 } #NEWLINE#
print ( '{}#SPACE#{}' . format ( v [ 0 ] , list ( v [ 1 : ] ) ) ) #NEWLINE#
socket . inet_pton ( socket . AF_INET6 , address ) #NEWLINE#
plt . colorbar ( ) #NEWLINE# plt . show ( ) #NEWLINE#
x_normed = ( x - x . min ( 0 ) ) / x . ptp ( 0 ) #NEWLINE#
root = tkinter . Tk ( ) #NEWLINE#
psutil . Process ( ) . parent ( ) #NEWLINE#
unicodedata . name ( 'a' ) #NEWLINE#
image32bit = image . reshape ( - 1 ) . view ( np . uint32 ) . reshape ( height , width ) #NEWLINE#
( - 1.07 ) ** ( 1.3 + 0.0j ) #NEWLINE#
mydict2 [ 'a' ] #NEWLINE#
photo . close ( ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
min ( min ( l_one ) , min ( l_two ) ) #NEWLINE#
f = opener . open ( 'http://example.com/' ) #NEWLINE#
new_list = [ ] #NEWLINE# while condition : #NEWLINE# #INDENT# new_list . append ( f ( x ) ) #NEWLINE#
( '^avplay' , '/file' ) , #NEWLINE#
from TorCtl import TorCtl #NEWLINE#
db . rename_table ( 'myapp_bar' , 'myapp_foo' ) #NEWLINE#
response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=result.csv' #NEWLINE#
self . fail ( msg ) #NEWLINE#
lines . append ( inf . readline ( ) ) #NEWLINE#
s = eval ( input ( ) ) #NEWLINE# numbers = list ( map ( int , s . split ( ) ) ) #NEWLINE#
main ( ) #NEWLINE#
dict ( ) #NEWLINE#
logger . info ( 'My#SPACE#test#SPACE#info#SPACE#statement' ) #NEWLINE#
np . ones ( 4 , dtype = int ) #NEWLINE#
print ( '-' * 10 ) #NEWLINE#
handler . setFormatter ( formatter ) #NEWLINE#
c . most_common ( ) #NEWLINE#
719163 #NEWLINE#
return sol [ 0 ] [ 0 ] + sol [ 0 ] [ 1 ] * I #NEWLINE#
s3 = boto3 . client ( 's3' ) #NEWLINE#
1 , 1 , 'value' #NEWLINE#
stdscr . addstr ( str ( type ( mypadn ) ) + '#SPACE#' + str ( type ( mypads ) ) + '\n' ) #NEWLINE#
exit ( mgr , None , None , None ) #NEWLINE#
ax . imshow ( data , interpolation = 'nearest' ) #NEWLINE#
print ( np . all ( insample == insample_mp ) ) #NEWLINE#
return '{0}({1})' . format ( callback , { 'a' : 1 , 'b' : 2 } ) #NEWLINE#
tagger = nltk . tag . UnigramTagger ( model = model , backoff = default_tagger ) #NEWLINE#
print ( sum ( takewhile ( lambda x : x < p90 , a ) ) ) #NEWLINE#
ax . yaxis . set_major_formatter ( matplotlib . ticker . FormatStrFormatter ( format ) ) #NEWLINE#
var = '/some/file/path/' #NEWLINE# pipe = subprocess . Popen ( [ 'perl' , 'uireplace.pl' , var ] ) #NEWLINE#
matches . extend ( os . path . join ( dirpath , x ) for x in dirnames + filenames ) #NEWLINE#
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler' #NEWLINE#
x = sum ( similarity ( i , j ) for i in a for j in b ) #NEWLINE#
df = df . apply ( lambda x : np . random . shuffle ( x ) or x , axis = 1 ) #NEWLINE#
l . extend ( t2 ) #NEWLINE#
A = np . array ( [ [ 0 , 1 , 0 , 0 , 1 ] , [ 0 , 0 , 1 , 1 , 1 ] , [ 1 , 1 , 0 , 1 , 0 ] ] ) #NEWLINE#
SearchQuerySet . filter ( content = term , django_ct = 'app.Model' ) #NEWLINE#
self . lock . acquire ( ) #NEWLINE#
response = requests . post ( 'http://example.com' , data = post_data ) #NEWLINE#
dirs = [ entry . path for entry in os . scandir ( 'Tools' ) if entry . is_dir ( ) ] #NEWLINE#
len ( list_of_ids ) #NEWLINE#
pool . join ( ) #NEWLINE#
list ( flatten ( lis ) ) #NEWLINE#
s = s . lower ( ) #NEWLINE#
x , y , z = sympy . symbols ( 'x#SPACE#y#SPACE#z' ) #NEWLINE#
a = array ( your_list ) #NEWLINE#
A = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
[ ] #NEWLINE#
queryset = MyModel . objects . all ( ) #NEWLINE#
ax . add_artist ( a ) #NEWLINE#
list ( zip ( a , b , grouper ( c , 2 ) , d ) ) #NEWLINE#
with io . open ( 'data.txt' , 'w' , encoding = 'utf-8' ) as f : #NEWLINE# #INDENT# f . write ( json . dumps ( data , ensure_ascii = False ) ) #NEWLINE#
re . match ( '^[a-zA-Z0-9_.-]+$' , '#SPACE##SPACE##SPACE##SPACE#' ) #NEWLINE#
startfile ( os . getcwd ( ) ) #NEWLINE#
print ( url ) #NEWLINE#
form = ContactForm ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
text = file . read ( ) #NEWLINE#
return math . sqrt ( ( self . x - x ) ** 2 + ( self . y - y ) ** 2 + ( self . z - z ) ** 2 ) #NEWLINE#
for i , item in enumerate ( mylist ) : #NEWLINE# #INDENT# mylist [ i ] = item ** 2 #NEWLINE#
r = random . sample ( 'abcde' , 5 ) #NEWLINE#
np . flatnonzero ( goal ) #NEWLINE#
print ( 'leaving#SPACE#the#SPACE#try#SPACE#block' ) #NEWLINE#
button = tk . Button ( root , text = 'submit' ) #NEWLINE#
self . toolbar . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
rollaxis ( im , 2 ) #NEWLINE#
plugin_name = models . CharField ( max_length = 32 , choices = [ ] ) #NEWLINE#
myfunc ( 'foo' ) #NEWLINE#
x = datetime . now ( ) + timedelta ( seconds = 3 ) #NEWLINE#
p1 = Popen ( [ 'dmesg' ] , stdout = PIPE ) #NEWLINE# p2 = Popen ( [ 'grep' , 'hda' ] , stdin = p1 . stdout , stdout = PIPE ) #NEWLINE# output = p2 . communicate ( ) [ 0 ] #NEWLINE#
strc = np . zeros ( 3 , dtype = [ ( 'x' , int ) , ( 'y' , float ) , ( 'z' , int ) , ( 't' , 'i8' ) ] ) #NEWLINE#
assert excinfo . value . message == 'some#SPACE#info' #NEWLINE#
np . fill_diagonal ( coocc . values , 0 ) #NEWLINE#
print ( ( subject . text , subject . head . text , numbers [ 0 ] . text ) ) #NEWLINE#
self . raise_ ( ) #NEWLINE#
ax . add_patch ( circ ) #NEWLINE# plt . show ( ) #NEWLINE#
{ 'End#SPACE#Date' : 'f' , 'Start#SPACE#Date' : 'e' , 'Event' : 'd' } #NEWLINE#
map ( winnumber , open ( filename , 'r' ) ) #NEWLINE#
Bar . objects . filter ( pk = foo . id ) . update ( a_id = bar . id ) #NEWLINE#
self . geometry ( '500x300+500+200' ) #NEWLINE#
QtCore . QObject . connect ( a , QtCore . SIGNAL ( 'QtSig()' ) , pyFunction ) #NEWLINE# QtCore . QObject . connect ( a , QtCore . SIGNAL ( 'QtSig()' ) , pyClass . pyMethod ) #NEWLINE#
os . getcwd ( ) #NEWLINE#
'\x00' + os . urandom ( 4 ) + '\x00' #NEWLINE#
'/(foo\\.json)' , tornado . web . StaticFileHandler , { 'path' : '/path/to/' } #NEWLINE#
df = pd . DataFrame ( df , columns = [ 'hscode' , 'tariff' , 'country' ] ) #NEWLINE#
set ( second_list ) - set ( x [ 0 ] for x in first_list ) #NEWLINE#
map ( ord , letters ) #NEWLINE#
return time . time ( ) - startTime #NEWLINE#
g . add_edge ( 3 , 4 ) #NEWLINE#
[ 0.362522566007101 ] #NEWLINE#
return list ( set ( x ) - set ( y ) ) #NEWLINE#
parser . add_argument ( '-a' , nargs = '+' , action = MyAction ) #NEWLINE#
execlist [ index ] [ 4 ] = mydelay #NEWLINE#
mlen = ctypes . c_ulonglong ( len ( message ) ) #NEWLINE#
return 10 * np . cos ( np . hypot ( x , y ) / np . sqrt ( 2 ) * 2 * np . pi * cycle ) #NEWLINE#
sys . stdout = open ( 'Output.txt' , 'w' ) #NEWLINE#
request . add_header ( 'Cookie' , cookies ) #NEWLINE#
[ e ] * 4 #NEWLINE#
return np . rot90 ( m , 1 ) #NEWLINE#
uuid . uuid4 ( ) #NEWLINE#
model . add ( Dropout ( 0.2 , input_shape = ( 60 , ) ) ) #NEWLINE#
id = Column ( 'id' , Integer , primary_key = True ) #NEWLINE#
a = [ list ( item ) for item in a ] #NEWLINE#
array [ : ] = t #NEWLINE#
self . agg_log . setLevel ( logging . DEBUG ) #NEWLINE#
self . setPixmap ( image ) #NEWLINE#
xl . Visible = True #NEWLINE#
my_dict = { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } #NEWLINE#
plt . legend ( loc = 'upper#SPACE#left' ) #NEWLINE#
response = HttpResponseRedirect ( '/url/to_your_login' ) #NEWLINE#
pd . set_option ( 'display.height' , 1000 ) #NEWLINE#
ax . set_xlim ( xlim ) #NEWLINE#
G = nx . MultiGraph ( ) #NEWLINE#
l1 = [ 'test1' , 'test2' , 'test3' , 'test4' , 'test5' ] #NEWLINE#
p . some_method ( ) #NEWLINE#
output = np . column_stack ( ( arrA . flatten ( ) , arrB . flatten ( ) , arrC . flatten ( ) ) ) #NEWLINE# np . savetxt ( 'output.dat' , output , delimiter = ',' ) #NEWLINE#
p = subprocess . Popen ( my_cmd , shell = True ) #NEWLINE#
self . _stop . set ( ) #NEWLINE#
m = re . search ( '(?<=Ingredients:#SPACE#).+?(?=\\.)' , text , re . DOTALL ) #NEWLINE#
self . map . plot ( xx , yy , linewidth = 1.5 , color = 'green' , alpha = 0.75 ) #NEWLINE#
print ( 'File#SPACE#' + last_file + "#SPACE#hasn't#SPACE#changed,#SPACE#doin#SPACE#nothin" ) #NEWLINE#
df = pd . read_csv ( io . StringIO ( t ) , header = None ) #NEWLINE#
DEBUG = socket . gethostname ( ) . find ( 'example.com' ) == - 1 #NEWLINE#
A = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE# A = np . array ( A ) #NEWLINE#
pat . findall ( s ) #NEWLINE#
df2 = df . groupby ( [ 'stock' , 'same1' , 'same2' ] ) [ [ 'positions' ] ] . sum ( ) #NEWLINE# df2 #NEWLINE#
b . append ( 'SEPARATOR' ) #NEWLINE#
sizer . Add ( self . panel , 1 , wx . EXPAND ) #NEWLINE#
len ( x ) * ( len ( x ) - 1 ) * 2 #NEWLINE#
time . sleep ( 0.2 ) #NEWLINE#
new_list = [ ] #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
example = [ [ x . replace ( '\r\n' , '' ) for x in l ] for l in example ] #NEWLINE# print ( example ) #NEWLINE#
mock_sgc_obj = mock . Mock ( ) #NEWLINE#
allmenus = [ AMENUS ( ) for i in range ( 0 , 3 ) ] + [ BMENUS ( ) for i in range ( 0 , 4 ) ] #NEWLINE#
print ( ( search , '=' , eval ( search ) ) ) #NEWLINE#
mlab . save ( 'pure_beauty.png' ) #NEWLINE#
A . columns = pd . MultiIndex . from_product ( [ [ 'A' ] , A . columns ] ) #NEWLINE#
time . sleep ( interval ) #NEWLINE#
ast . literal_eval ( 'True' ) #NEWLINE#
my_lib . py #NEWLINE#
self . log . info ( 'Verification#SPACE#failed#SPACE#::#SPACE#' + resultMessage ) #NEWLINE#
y = [ 1 , 2 , 0 , 1 , 1 , 2 ] #NEWLINE#
data = [ '32' , '22' , '12' , '32' , '22' , '12' , '31' , '21' , '11' ] #NEWLINE#
df [ 'date' ] = df [ 'date' ] . astype ( int ) #NEWLINE# df [ 'date' ] = pd . to_datetime ( df [ 'date' ] , unit = 's' ) #NEWLINE#
png ( file = 'map.png' ) #NEWLINE#
print ( paths [ min_index ] , path_distances [ min_index ] ) #NEWLINE#
jsonFile = open ( 'replayScript.json' , 'w+' ) #NEWLINE#
jsonFile = open ( 'replayScript.json' , 'r' ) #NEWLINE#
maxkey = minkey if maxkey is None else maxkey #NEWLINE#
"""Trip'le#SPACE#qu"oted""" #NEWLINE#
is_linear ( eq1 , [ a , c ] ) #NEWLINE#
self . assertEqual ( 'sucess' , to_unicode ( response . body ) ) #NEWLINE#
[ item . group ( 0 ) for item in re . finditer ( '([a-z])\\1' , s , re . I ) ] #NEWLINE#
self . __setattr__ ( attr , value ) #NEWLINE#
a . fromfile ( open ( fn , 'rb' ) , os . path . getsize ( fn ) / a . itemsize ) #NEWLINE#
i = 0 #NEWLINE# while i < len ( text ) : #NEWLINE# #INDENT# print ( text [ i ] ) #NEWLINE# i += 1 #NEWLINE#
psutil . cpu_count ( ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
type ( Foo . __init__ ) #NEWLINE#
mdata = data [ None , ... ] . repeat ( masks . shape [ 0 ] , 0 ) [ ( masks ) , : ] #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
fig . show ( ) #NEWLINE#
pool . terminate ( ) #NEWLINE#
q = Queue . Queue ( ) #NEWLINE# q . queue . clear ( ) #NEWLINE#
sys . stdout = os . fdopen ( sys . stdout . fileno ( ) , 'w' , 1 ) #NEWLINE#
intvals [ bisect . bisect ( intvals , 42000 ) ] #NEWLINE#
def get_digits ( text ) : #NEWLINE# #INDENT# return list ( filter ( str . isdigit , text ) ) #NEWLINE#
df . set_index ( 'id' , inplace = True ) #NEWLINE#
( 2 ) [ ( customer , 0.0171786268847 ) , ( footfall , 0.012 ) ] #NEWLINE#
print ( data [ 0 ] [ 'last_updated' ] ) #NEWLINE#
colors = [ 'r' , 'b' , 'g' ] #NEWLINE#
parser . parse_args ( [ ] ) #NEWLINE#
array ( [ [ 0.0 , 1.206 , 1.58 ] ] ) #NEWLINE#
super ( MyResource , self ) . obj_update ( bundle , ** kwargs ) #NEWLINE#
r = requests . get ( 'https://example.com/image.jpg' ) #NEWLINE#
print ( xy_to_index ( x , y ) ) #NEWLINE#
cmd = subprocess . Popen ( [ 'c:/flow/flow.exe' ] , stdout = subprocess . PIPE ) #NEWLINE#
__tablename__ = 'question' #NEWLINE#
toggle_btn = tk . Button ( text = 'Toggle' , width = 12 , relief = 'raised' , command = toggle #NEWLINE# ) #NEWLINE#
length = len ( list ( g ) ) #NEWLINE#
from django . contrib . contenttypes . models import ContentType #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
aware_utc_dt = utc_dt . replace ( tzinfo = pytz . utc ) #NEWLINE#
grouped . plot ( kind = 'bar' ) #NEWLINE#
np . split ( lst , np . where ( np . diff ( lst ) < 0 ) [ 0 ] + 1 ) #NEWLINE#
p = subprocess . Popen ( cd , stdout = subprocess . PIPE , stderr = subprocess . PIPE , #NEWLINE# stdin = subprocess . PIPE ) #NEWLINE#
path_names = [ os . path . basename ( path ) for path in paths ] #NEWLINE#
s . sendmail ( msg [ 'From' ] , msg [ 'To' ] , msg . as_string ( ) ) #NEWLINE#
return np . array ( [ row [ : num_cols ] for row in arr [ : num_rows ] ] ) #NEWLINE#
ssh_client . connect ( host ) #NEWLINE#
user . save ( ) #NEWLINE#
class Group ( models . Model ) : #NEWLINE# #INDENT# myuser = models . ForeignKey ( User , related_name = 'groups' ) #NEWLINE#
new_class . _ordered_items . sort ( key = lambda item : item [ 1 ] . creation_counter ) #NEWLINE#
from dateutil . parser import parse #NEWLINE#
'ask' , 'what' , 'you' , 'can' , 'do' , 'for' , 'your' , 'country!' , 'This' #NEWLINE#
br . select_form ( nr = 0 ) #NEWLINE#
rms_2 = np . sqrt ( np . average ( np . einsum ( 'ij,kj->ik' , nhat , m ) ** 2 , axis = - 1 ) ) #NEWLINE#
fread = open ( 'input.csv' , 'rb' ) . read ( ) #NEWLINE#
df . set_index ( 'key' , inplace = True ) #NEWLINE# return df #NEWLINE#
def __unicode__ ( self ) : #NEWLINE# #INDENT# return str ( self . person ) #NEWLINE#
os . popen ( 'tail#SPACE#-n#SPACE#1000#SPACE#filepath' ) . read ( ) #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
f1 . close ( ) #NEWLINE#
sat = pyproj . Proj ( '+proj=geos#SPACE#+lon_0#SPACE#+h=035785831.0#SPACE#+x_0=0#SPACE#+y_0=0' ) #NEWLINE#
any ( t in k for k in df [ self . target ] ) #NEWLINE#
pl . savefig ( 'voronoi.png' ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
def findOccurences ( s , ch ) : #NEWLINE# #INDENT# return [ i for i , letter in enumerate ( s ) if letter == ch ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# findOccurrences ( yourString , '|' ) #NEWLINE#
child = SubElement ( root , 'child' ) #NEWLINE#
map ( str . lower , l ) #NEWLINE#
striphtml ( '<a#SPACE#href="foo.com"#SPACE#class="bar">I#SPACE#Want#SPACE#This#SPACE#<b>text!</b></a>' ) #NEWLINE#
words [ w ] += 1 #NEWLINE#
print ( Geocoder . geocode ( 'Montreal,#SPACE#Canada' ) [ 0 ] . coordinates ) #NEWLINE#
return a [ 0 ] + a [ 1 ] + a [ 2 ] #NEWLINE#
print ( bin ( int ( ipaddress . IPv4Address ( '192.168.1.1' ) ) ) ) #NEWLINE#
self . show ( ) #NEWLINE#
root . tk . eval ( 'package#SPACE#require#SPACE#Tix' ) #NEWLINE#
f ( 'HI' ) #NEWLINE#
return ContentType . objects . get_for_model ( obj ) #NEWLINE#
list1 = [ '1' , '10' , '3' , '22' , '23' , '4' , '2' , '200' ] #NEWLINE# list1 . sort ( key = int ) #NEWLINE#
p = re . compile ( '(.+?)\\1+' ) #NEWLINE#
np . shape ( x ) #NEWLINE#
first_points = [ int ( i ) for i in first_points . split ( ',' ) ] #NEWLINE#
print ( '--#SPACE#{}' . format ( field ) ) #NEWLINE#
settings . py #NEWLINE#
bubble_sort_2nd_value ( tuples_list ) #NEWLINE#
termios . tcsetattr ( fd , termios . TCSANOW , newattr ) #NEWLINE#
print ( '%s#SPACE#occurs#SPACE#%i#SPACE#times' % ( item , count [ item ] ) ) #NEWLINE#
myFile . write ( '<tr><td>%04d</td>' % ( i + 1 ) ) #NEWLINE#
item = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
print ( hash ( frozenset ( lines ) ) ) #NEWLINE#
table = soup . find ( id = 'statsTable' ) #NEWLINE#
rb . untrain ( 'bad' , 'fear#SPACE#death#SPACE#horror#SPACE#government#SPACE#zombie#SPACE#god' ) #NEWLINE#
YS = np . asarray ( YS ) #NEWLINE#
ZS = np . asarray ( ZS ) #NEWLINE#
class Node : #NEWLINE# #INDENT# pass #NEWLINE#
print ( 'Call#SPACE#finished,#SPACE#resuming#SPACE#spotify' ) #NEWLINE#
min ( mywords , key = len ) #NEWLINE#
yaml . dump ( [ 'abc' ] ) #NEWLINE#
del request . GET [ 'var_name' ] #NEWLINE#
data = [ row . split ( '\t' ) for row in inputs ] #NEWLINE# data = np . array ( data , dtype = 'float' ) #NEWLINE#
temp . write ( 'hi#SPACE#mom\n' ) #NEWLINE#
new_list = [ ] #NEWLINE#
ax2 . set_ylabel ( 'Average#SPACE#age' ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE# l [ : ] = [ ( x * 5 ) for x in l ] #NEWLINE#
return json . load ( f ) #NEWLINE#
r = requests . get ( url , auth = ( 'usrname' , 'password' ) , verify = False , stream = True ) #NEWLINE#
numpy . set_printoptions ( precision = 16 ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
""",#SPACE#""" . join ( '=' . join ( _ ) for _ in list ( mydict . items ( ) ) ) #NEWLINE#
grouped = df . groupby ( [ 'X' , 'Y' ] ) #NEWLINE#
repo = hg . repository ( ui . ui ( ) , '/path/to/repo/root' ) #NEWLINE#
df = pd . DataFrame ( [ [ 'a' , 'b' ] ] , columns = [ '12#SPACE#Mar' , '12#SPACE#Jun' ] ) #NEWLINE#
print ( 0.0 <= x <= 0.5 ) #NEWLINE#
array ( [ [ 106 , 140 ] , [ 178 , 220 ] ] ) #NEWLINE#
arg_text = '(%s)' % re . sub ( '\\.\\d+' , '<tuple>' , '9.0' ) #NEWLINE#
elem . clear ( ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'uskovtask.settings' ) #NEWLINE#
bars = ax . bar ( x , y , color = 'grey' ) #NEWLINE#
win32api . MessageBox ( 0 , 'msgbox' , 'title' ) #NEWLINE#
tag . attrs . append ( ( attr , val ) ) #NEWLINE#
a . toxml ( encoding = 'utf-8' ) #NEWLINE#
a2 . append ( decimal . Decimal ( s ) ) #NEWLINE#
s . close ( ) #NEWLINE#
print ( ( a , b , c , d , e ) ) #NEWLINE#
outF . close ( ) #NEWLINE#
suite = unittest . TestSuite ( ) #NEWLINE#
conn = psycopg2 . connect ( conn_string ) #NEWLINE#
xml = ET . fromstring ( xmlData ) #NEWLINE#
r = [ ( a , b ) for a , b in zip ( l , l [ 1 : ] + l [ : 1 ] ) ] #NEWLINE#
any ( x is False for x in [ a , b , c , d ] ) #NEWLINE#
print ( df . apply ( lambda x : x - a . ix [ x . index , 'a' ] , axis = 1 ) ) #NEWLINE#
newSingle . getHeader ( ) . setField ( fix . SendingTime ( 1 ) ) #NEWLINE#
return map ( lambda a : a [ 0 ] , takewhile ( len , iterate ( lambda y : f ( y [ 0 ] ) , [ x ] ) ) ) #NEWLINE#
lst = [ 'a' , 'b' , 'c' ] #NEWLINE#
self . redraw ( event . x , event . y ) #NEWLINE#
all ( isinstance ( e , int ) and e > 0 for e in [ 1 , 0 , 1 ] ) #NEWLINE#
ax2 . xaxis . set_major_locator ( MultipleLocator ( 2 ) ) #NEWLINE#
df [ zscore ( df [ 'count' ] ) . abs ( ) . le ( 2 ) ] #NEWLINE#
dicts = [ { k : v . lower ( ) for k , v in list ( d . items ( ) ) } for d in messages ] #NEWLINE#
raise ValueError ( 'Invalid#SPACE#Idx' ) #NEWLINE#
logging . getLevelName ( 'DEBUG' ) #NEWLINE#
{ k : sum ( d [ k ] for d in dict1 ) for k in dict1 [ 0 ] } #NEWLINE#
super ( B , self ) . __init__ ( 5 ) #NEWLINE#
print ( args . benchmark ) #NEWLINE#
my_cmap = LinearSegmentedColormap ( 'my_cmap' , cdict ) #NEWLINE#
my_cmap = LinearSegmentedColormap ( 'name' , cdict ) #NEWLINE#
ax2 . set_xticks ( new_tick_locations ) #NEWLINE#
bla = globals ( ) [ name ] #NEWLINE#
df [ [ 'two' , 'three' ] ] = df [ [ 'two' , 'three' ] ] . astype ( float ) #NEWLINE#
root . destroy ( ) #NEWLINE#
for line in lines : #NEWLINE# #INDENT# id , nm , lat , lon , code = line . split ( ) #NEWLINE#
parser . add_argument ( 'pos' , nargs = '+' ) #NEWLINE#
a . append ( k ) #NEWLINE#
raise ValueError ( 'huh?' ) #NEWLINE#
file_name = file_name + 1 #NEWLINE#
sys . path . append ( plugin_path ) #NEWLINE#
del a [ 100 : 99999 ] #NEWLINE#
return super ( ) . __getitem__ ( item ) #NEWLINE#
print ( list ( multimap ( 'a' , { 'a' : 'b' , 'b' : 'c' , 'c' : 'd' , 'd' : 'a' } , 4 ) ) ) #NEWLINE#
button3 = Tk . Button ( mainWin , text = 'press#SPACE#3' , command = fce ( 9 , 8 ) ) #NEWLINE#
return re . compile ( '\\b({0})\\b' . format ( w ) , flags = re . IGNORECASE ) . search #NEWLINE#
G . add_node ( 'Grandchild_%i' % i ) #NEWLINE#
G . add_node ( 'Greatgrandchild_%i' % i ) #NEWLINE#
scipy . stats . norm ( 0 , 1 ) . cdf ( 0 ) #NEWLINE#
svr . fit ( X [ : train_size ] , y [ : train_size ] ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#stuff' ) #NEWLINE#
print ( 'hi' ) #NEWLINE#
for k , v in dict . items ( ) : #NEWLINE# #INDENT# setattr ( self , k , v ) #NEWLINE#
print ( 'Multi-byte#SPACE#tests...' ) #NEWLINE#
plt . show ( ) #NEWLINE#
aView = np . ascontiguousarray ( arr ) . flatten ( ) . view ( mydtype ) #NEWLINE#
cv2 . imshow ( 'masked' , masked_data ) #NEWLINE# cv2 . waitKey ( 0 ) #NEWLINE#
regex = re . compile ( pat ) #NEWLINE#
l = [ [ 'a' , 'b' , 'c' ] , [ 'a' , 'b' ] , [ 'g' , 'h' , 'r' , 'w' ] ] #NEWLINE#
print ( df . groupby ( df . index ) . applyParallel ( tmpFunc ) ) #NEWLINE#
self . label . setText ( 'Hello#SPACE#World' ) #NEWLINE#
div . xpath ( 'normalize-space(.//p[@class="class-name"])' ) . extract ( ) #NEWLINE#
return dt . microsecond / 1000 #NEWLINE#
struct . unpack ( '!L' , socket . inet_aton ( ipstr ) ) [ 0 ] #NEWLINE#
ax_lst = [ ax1 , ax2 , ax3 , ax4 , ax5 , ax6 , ax7 ] #NEWLINE#
print ( [ ( [ k ] + v ) for k , v in list ( dic . items ( ) ) ] ) #NEWLINE#
list2 = [ 1 , 2 , 4 , 3 , 5 , 6 ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 2 ] * 10 , 'field' : list ( range ( 10 ) ) } ) #NEWLINE#
self . assertNotEqual ( text_found , None ) #NEWLINE#
self . run_command ( 'compile_translations' ) #NEWLINE#
print ( map ( f , [ 100 , 50 , 1000 , 150 ] ) ) #NEWLINE#
ax . set_xticklabels ( ( ) ) #NEWLINE#
new_d . append ( x ) #NEWLINE#
zratings = bcolz . ctable . fromdataframe ( ratings ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
print ( df [ [ 'VAR1' ] ] . unstack ( 'ID' ) . resample ( 'W-THU' ) . stack ( 'ID' ) ) #NEWLINE#
print ( t . find ( './/title' ) . text ) #NEWLINE#
nltk . word_tokenize ( "I've#SPACE#found#SPACE#a#SPACE#medicine#SPACE#for#SPACE#my#SPACE#disease." ) #NEWLINE#
foo_list . append ( lambda : bar . func1 ( 100 ) ) #NEWLINE#
indexed . where ( 'index#SPACE#in#SPACE#({0})' . format ( ',' . join ( str ( x ) for x in indexes ) ) ) #NEWLINE#
a [ [ 0 , 1 ] , 1 , 2 ] #NEWLINE#
[ 'c' , 'h' ] #NEWLINE#
print ( 'Found!' ) #NEWLINE#
x . __exit__ ( ) #NEWLINE#
s3_client . upload_file ( '/tmp/data.gz' , bucket , key + '.gz' ) #NEWLINE#
t = pd . Timestamp ( '2013-02-27#SPACE#00:00:00+00:00' ) #NEWLINE#
print ( zip ( rlist1 , rlist2 ) ) #NEWLINE#
remote_client . exec_command ( 'pwd' ) #NEWLINE#
hex ( ord ( s ) ) #NEWLINE#
result = namedtuple ( 'Result' , [ 'x' , 'y' ] ) #NEWLINE#
{ { adminform . form . non_field_errors } } #NEWLINE#
[ [ 'a' , 'b' ] , [ 'v' , 'c' ] , [ 'g,g' ] ] #NEWLINE#
return f ( * args , ** kargs ) #NEWLINE#
df2 = sqlContext . sql ( 'SELECT#SPACE#Name#SPACE#AS#SPACE#name,#SPACE#askdaosdka#SPACE#as#SPACE#age#SPACE#from#SPACE#myTable' ) #NEWLINE# df2 . show ( ) #NEWLINE#
"""3#SPACE#4,#SPACE#5#SPACE#6""" #NEWLINE#
pygame . display . set_caption ( 'Python#SPACE#numbers' ) #NEWLINE#
print ( str ( q . statement . compile ( dialect = postgresql . dialect ( ) ) ) ) #NEWLINE#
MEDIA_URL = '/media/' #NEWLINE# MEDIA_ROOT = os . path . join ( os . path . dirname ( PROJECT_ROOT ) , 'media_cdn' ) #NEWLINE#
print ( countit ( 'banana' , 'ana' ) ) #NEWLINE#
keyname = int ( keyname ) #NEWLINE#
x = np . arange ( 1 , 10 ) . reshape ( 3 , 3 ) #NEWLINE#
print ( np . random . rand ( ) ) #NEWLINE#
f . close ( ) #NEWLINE#
w . writeheader ( ) #NEWLINE#
entity = MyModel . all ( ) . order ( 'rand_num' ) . filter ( 'rand_num#SPACE#>=' , rand_num ) . get ( ) #NEWLINE#
return s [ : - 1 ] if s . endswith ( '\n' ) else s #NEWLINE#
writeln ( 'Calling#SPACE#internal#SPACE#foo' ) #NEWLINE#
pass #NEWLINE#
for word in text . split ( '#SPACE#' ) : #NEWLINE# #INDENT# PorterStemmer ( ) . stem_word ( word ) #NEWLINE#
return '' . join ( sorted ( comb_ ) ) #NEWLINE#
df [ 'cat' ] = np . array ( list ( prob_dict . values ( ) ) ) [ indi ] #NEWLINE#
result . append ( a ) #NEWLINE#
dates_dict = collections . defaultdict ( list ) #NEWLINE#
MyModel . save ( my_val = 'fooooo' ) #NEWLINE#
plt . plot ( xs , density ( xs ) ) #NEWLINE# plt . show ( ) #NEWLINE#
obj = self . pool . <STR0> ( 'purchase.order' ) #NEWLINE#
image = Image . open ( 'test.jpg' ) #NEWLINE#
x = property ( getx , setx , delx , "I'm#SPACE#the#SPACE#'x'#SPACE#property." ) #NEWLINE#
A ( ) . my_dir ( ) #NEWLINE#
os . path . isdir ( d ) #NEWLINE#
print ( '\\' . __repr__ ( ) ) #NEWLINE#
l . set_option ( ldap . OPT_REFERRALS , 0 ) #NEWLINE#
memberships = db . relationship ( 'Membership' , backref = 'person' ) #NEWLINE#
MyKlass ( ) . func1 ( ) #NEWLINE#
setstyle ( color = 'red' , bold = False ) #NEWLINE#
df2 = pd . DataFrame ( { 'val' : { 'a' : 1 , 'b' : 2 , 'd' : 3 } } ) #NEWLINE#
tool = subprocess . Popen ( [ 'path_to_tool' , '-option1' , 'option2' ] , stdout = #NEWLINE# subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
parser . add_option ( '-v' , action = 'store_true' , dest = 'verbose' ) #NEWLINE#
instance = form . save ( commit = False ) #NEWLINE#
myfun ( 'testing' ) #NEWLINE#
db . session . add ( user ) #NEWLINE#
plt . xticks ( rotation = 25 ) #NEWLINE#
queue . append ( ( child , depth + 1 ) ) #NEWLINE#
app . config . update ( dict ( PREFERRED_URL_SCHEME = 'https' ) ) #NEWLINE#
input = input ( 'Enter#SPACE#three#SPACE#numbers#SPACE#separated#SPACE#by#SPACE#commas:#SPACE#' ) #NEWLINE#
today = date . today ( ) #NEWLINE#
df . groupby ( [ 'id' , 'min_max' ] ) [ 'value' ] . apply ( lambda g : getattr ( g , g . name [ 1 ] #NEWLINE# [ : 3 ] ) ( ) ) . unstack ( ) #NEWLINE#
self . context . leave ( ) #NEWLINE#
print ( sum ( li [ : i + 1 ] ) ) #NEWLINE#
x [ - 1 : 0 : - 1 ] #NEWLINE#
n = [ 20 , 15 , 27 , 30 ] #NEWLINE# n . index ( min ( n ) ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'settings' ) #NEWLINE#
print ( s . recvfrom ( 65565 ) ) #NEWLINE#
output = subprocess . Popen ( [ 'awk' , '/f89e7000/#SPACE#{print#SPACE#$2}' , #NEWLINE# 'syscall_list.txt' ] , stdout = subprocess . PIPE ) . communicate ( ) [ 0 ] #NEWLINE#
code . interact ( ) #NEWLINE#
ax1 . set_xlabel ( 'test' ) #NEWLINE#
print ( 'title:#SPACE#%s;#SPACE#content:#SPACE#%s' % ( title , content ) ) #NEWLINE#
req = urllib . request . Request ( url , urllib . parse . urlencode ( params ) , http_header ) #NEWLINE#
match ( 'R?lcopter' , 'Roflcop?er' ) #NEWLINE#
d = OrderedDict ( sorted ( list ( data . items ( ) ) , key = itemgetter ( 1 ) ) ) #NEWLINE#
sidebar . pack ( expand = True , fill = 'both' , side = 'left' , anchor = 'nw' ) #NEWLINE#
bytes = ( ord ( b ) for b in f . read ( ) ) #NEWLINE#
raise KeyError ( key ) #NEWLINE#
x = df . ix [ : , 5 : ] . sort_values ( by = 0 , ascending = False , axis = 1 ) #NEWLINE#
frame = pd . concat ( list_ ) #NEWLINE#
cv2 . imshow ( 'Homomorphic#SPACE#Filtered#SPACE#Result' , Ihmf2 ) #NEWLINE#
print ( list ( grp ) ) #NEWLINE#
ax1 . xaxis . set_major_formatter ( xticks ) #NEWLINE#
[ 'apple' , 'carrot' , 'dietcoke' ] , #NEWLINE#
print ( loc_dt . strftime ( fmt ) ) #NEWLINE#
array = numpy . array ( ( ( 2 , 2 ) , ( 2 , - 2 ) ) ) #NEWLINE#
return 1 / sqrt ( 2 * pi ) * exp ( - x ** 2 / 2 ) #NEWLINE#
return self . context [ 'coords' ] #NEWLINE#
np . allclose ( pi [ 1 , 2 , 3 ] , np . linalg . pinv ( b [ 1 , 2 , 3 ] ) ) #NEWLINE#
32.4683285321 , 83.9794307564 , 23.578346756 , 30.2128827937 , 82.5804959193 , 0.0 #NEWLINE#
value_regex . sub ( 'six' , strJunk ) #NEWLINE#
df [ ~ ( np . abs ( df . Data - df . Data . mean ( ) ) > 3 * df . Data . std ( ) ) ] #NEWLINE#
pool . close ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
FullName = LastName + ( ',#SPACE#' + FirstName if FirstName else '' ) #NEWLINE#
np . arange ( 10 ) [ 10 : - 5 : - 1 ] #NEWLINE#
print ( next ( second_it ) ) #NEWLINE#
return inner_func #NEWLINE#
df . isin ( [ 1 , 2 ] ) #NEWLINE#
print ( list ( roundrobin ( list ( range ( 5 ) ) , 'hello' ) ) ) #NEWLINE#
return zip ( * ( [ iter ( iterable ) ] * n ) ) #NEWLINE#
md5 ( 'foo@bar.com' ) . digest ( ) . encode ( 'base64' ) . strip ( ) #NEWLINE#
obj . foo . __func__ #NEWLINE#
return [ ( scores , sum ( scores ) ) for scores in combos ] #NEWLINE#
data = [ ( 'abc' , 121 ) , ( 'abc' , 231 ) , ( 'abc' , 148 ) , ( 'abc' , 221 ) ] #NEWLINE#
c . execute ( 'CREATE#SPACE#TABLE#SPACE#' + quote_identifier ( identifier ) + '#SPACE#(foo)' ) #NEWLINE#
cv . create_line ( [ 0 , center , width , center ] , fill = 'green' ) #NEWLINE#
print ( doc . getvalue ( ) ) #NEWLINE#
myVariable = request . POST . get ( 'query' , 'No#SPACE#Query' ) #NEWLINE#
print ( bookmark . text ) #NEWLINE#
print ( 'result#SPACE#fail' ) #NEWLINE#
ast . parse ( '(1+2)*3' , '' , 'eval' ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#cool_stuff#SPACE#FROM#SPACE#hive_table' ) #NEWLINE#
self . opt . stdin . write ( self . toString ( x ) + '\n' ) #NEWLINE#
Aggregator . _output ( ) #NEWLINE#
content_type = models . ForeignKey ( ContentType ) #NEWLINE#
print ( [ r [ 'Name' ] for r in where ( 'Location="Boston"#SPACE#or#SPACE#Type="Primary"' ) ] ) #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ) #NEWLINE#
df [ 'year' ] = pd . DatetimeIndex ( df [ 'datestart' ] ) . year #NEWLINE#
d [ k ] . append ( v ) #NEWLINE#
user . save ( ) #NEWLINE#
self . pictureClicked . emit ( 'emit#SPACE#the#SPACE#signal' ) #NEWLINE#
ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
"""{0:#SPACE#<5}""" . format ( 'ss' ) #NEWLINE#
im . set_data ( data ) #NEWLINE#
print ( 'bar' + '→' ) #NEWLINE#
print ( dur . total_seconds ( ) ) #NEWLINE#
return round ( number / roundto ) * roundto #NEWLINE#
return n > 1 and all ( n % i for i in islice ( count ( 2 ) , int ( sqrt ( n ) - 1 ) ) ) #NEWLINE#
key = bytes ( [ 19 , 0 , 0 , 0 , 8 , 0 ] ) #NEWLINE# key = '' . join ( chr ( x ) for x in [ 19 , 0 , 0 , 0 , 8 , 0 ] ) #NEWLINE#
utils . fastprint ( 'Turned#SPACE#off#SPACE#maintenance#SPACE#mode.' ) #NEWLINE#
arrays = [ item [ 1 : ] for item in arrays if len ( item ) > 1 ] #NEWLINE#
df . loc [ : , ( 'quantity' ) ] = df [ 'quantity' ] * - 1 #NEWLINE#
return local_tz . normalize ( local_dt ) #NEWLINE#
Py_DECREF ( n_ptr ) #NEWLINE#
glutInitDisplayMode ( GLUT_RGBA | GLUT_DOUBLE ) #NEWLINE#
print ( hello ( ) ) #NEWLINE#
print ( 'Absolute' , Node ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
val = val . rstrip ( '0' ) #NEWLINE#
np . nextafter ( 0 , 1 ) #NEWLINE#
print ( 'Unknown#SPACE#command' ) #NEWLINE#
f_set = f [ f . year . between ( 2002 , 2009 ) ] #NEWLINE#
f . write ( lzma . compress ( 'hello' , format = lzma . FORMAT_XZ ) ) #NEWLINE#
print ( [ mylist [ i : i + 4 ] for i in range ( 0 , len ( mylist ) , 4 ) ] ) #NEWLINE#
print ( CAT . number_of_legs ) #NEWLINE#
selected_option = driver . find_element_by_xpath ( '//option[@selected="selected"]' #NEWLINE# ) #NEWLINE#
r , g , b = colorsys . hsv_to_rgb ( hue , 1 , 1 ) #NEWLINE#
return '<i>' + str ( fn ( ) ) + '</i>' #NEWLINE#
markdown_below ( ) #NEWLINE#
return cls . __new__ ( cls ) #NEWLINE#
word = quote . strip ( '"' ) #NEWLINE#
log . setLevel ( logging . INFO ) #NEWLINE#
a = np . random . rand ( 128 , 128 , 3 ) #NEWLINE#
regex . match ( 'heinz-1' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
df2 = df . groupby ( 'letter' ) . filter ( lambda g : g . x . sum ( ) > 200 ) #NEWLINE# df2 . letter . unique ( ) #NEWLINE#
print ( ( day_of_year , julian_day ) ) #NEWLINE#
plt . savefig ( '/PATH/OF/IMAGE.png' ) #NEWLINE#
print ( 'Here' ) #NEWLINE#
data = pd . DataFrame ( [ [ 1 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 0 , 1 ] ] , columns = [ 'sex' , 'split' ] ) #NEWLINE# data [ 'sex' ] . replace ( [ 0 , 1 ] , [ 'Female' , 'Male' ] , inplace = True ) #NEWLINE# data #NEWLINE#
dict_x [ key ] . append ( value ) #NEWLINE#
self . saved = sys . stdin , sys . stderr , sys . stdout #NEWLINE#
[ ( i * j * k ) for i , j , k in product ( a , b , c ) ] #NEWLINE#
parser . add_argument ( '-p' , action = Password , nargs = '?' , dest = 'password' ) #NEWLINE#
df #NEWLINE#
from PyQt4 . QtGui import * #NEWLINE#
conn . close ( ) #NEWLINE#
print ( args [ 'whatever' ] ) #NEWLINE#
os . abort ( ) #NEWLINE#
logging . disable ( logging . CRITICAL ) #NEWLINE#
utc_offset = datetime . fromtimestamp ( ts ) - datetime . utcfromtimestamp ( ts ) #NEWLINE#
self . csrf_token = self . request . cookies . get ( 'c' ) #NEWLINE#
b2 . insert ( END , item ) #NEWLINE#
binascii . b2a_hex ( data . rstrip ( '\x00' ) ) #NEWLINE#
l = [ 'element1\t0238.94' , 'element2\t2.3904' , 'element3\t0139847' , '' ] #NEWLINE#
HypotheticalBranch ( 1 , 3 , 2 ) #NEWLINE#
def clone ( self ) : #NEWLINE# #INDENT# return self . thisptr . clone ( ) #NEWLINE#
module_add . py #NEWLINE#
datetime . fromtimestamp ( unix_timestamp ) #NEWLINE#
re . compile ( "[^\\w']|_" ) . sub ( '#SPACE#' , #NEWLINE# "doesn't#SPACE#this#SPACE#_technically_#SPACE#means#SPACE#it#SPACE#works?#SPACE#naÃ¯ve#SPACE#I#SPACE#am#SPACE#..." ) #NEWLINE#
s . bind ( ( host , port ) ) #NEWLINE#
[ development ] #NEWLINE#
return ( item for pair in zip_longest ( x , y , default ) for item in pair ) #NEWLINE#
fileout . write ( user_id + ',' + '#SPACE#' . join ( tweets ) + ',' + sentiment + '\n' ) #NEWLINE#
p . text ( ':#SPACE#' ) #NEWLINE#
root = ET . fromstring ( xml_string ) #NEWLINE#
cv . SetData ( foo_cv , foo_np_view . data , foo_np_view . strides [ 0 ] ) #NEWLINE#
print ( '#SPACE#MENU#SPACE#' . center ( 80 , '*' ) ) #NEWLINE#
Person . __init__ ( self , name , phone ) #NEWLINE#
writer = csv . writer ( out_file ) #NEWLINE#
ax . yaxis . grid ( True , 'minor' ) #NEWLINE#
textB = 'the#SPACE#feline#SPACE#in#SPACE#the#SPACE#blue#SPACE#hat' #NEWLINE#
[ distance ( * combo ) for combo in combinations ( list_of_coords , 2 ) ] #NEWLINE#
super ( AnotherSubClass , self ) . __init__ ( x , y , ** kwdefaults ) #NEWLINE#
duration = models . DurationField ( ) #NEWLINE#
x = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE# print ( max ( x , key = sum ) ) #NEWLINE#
b = np . zeros_like ( a ) #NEWLINE#
max ( arg1 , arg2 , arg3 , key = lambda x : - x ) #NEWLINE#
@ app . route ( '/' ) #NEWLINE# def index ( ) : #NEWLINE# #INDENT# content = '\n#SPACE##SPACE##SPACE##SPACE##SPACE#teste\n#SPACE##SPACE##SPACE#' #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# user = 'Hero' #NEWLINE# return render_template ( 'index.html' , ** locals ( ) ) #NEWLINE#
layout = QtGui . QVBoxLayout ( self ) #NEWLINE#
s3a = 'strin' #NEWLINE#
IOLoop . instance ( ) . run_sync ( test_it ) #NEWLINE#
Foo ( ) [ : 42 ] #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
print ( m . group ( 0 ) ) #NEWLINE#
imgStr = base64 . b64encode ( jpeg_image_buffer . getvalue ( ) ) #NEWLINE#
assert session . query ( Project . name ) . all ( ) == [ ( 'b' , ) ] #NEWLINE#
data = [ 1 , 2 , 3 ] #NEWLINE#
df = df . groupby ( [ 'type' , 'group' ] ) . sum ( ) . transpose ( ) . stack ( 0 ) . reset_index ( ) #NEWLINE# df #NEWLINE#
file_parser . add_argument ( '-D' , action = 'store_true' ) #NEWLINE#
model . add ( Reshape ( ( 6 , 2 ) ) ) #NEWLINE#
index [ count ] [ 1 ] . append ( url ) #NEWLINE#
return self . cobj . some_var #NEWLINE#
log3 ( 'File#SPACE#{file}#SPACE#had#SPACE#error#SPACE#{error}' , 'file' , file , 'error' , err ) #NEWLINE#
self . cl . autosetmode ( ) #NEWLINE#
df [ 'count' ] = df1 . groupby ( [ 'ID' , 'DATE' , 'WIN1' ] ) [ 'WIN1' ] . transform ( 'count' ) #NEWLINE#
l1 = [ 1 , 2 , 3 ] #NEWLINE#
delta = datetime . timedelta ( hours = 4 ) #NEWLINE#
xmlns = 'http://www.topografix.com/GPX/1/1' #NEWLINE#
conn = S3Connection ( AWS_ACCESS_KEY , AWS_SECERET_KEY ) #NEWLINE#
response = HttpResponse ( fsock , mimetype = 'audio/mpeg' ) #NEWLINE#
con . close ( ) #NEWLINE#
return 'Hello,#SPACE#world!#SPACE#running#SPACE#on#SPACE#{}' . format ( request . host ) #NEWLINE#
value . append ( [ x for x in getdatas ] ) #NEWLINE#
A = np . random . random ( ( N , 3 ) ) - 0.5 #NEWLINE#
artifact = Artifact . objects . select_related ( ) . get ( pk = pk ) #NEWLINE#
x = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE# np . linalg . norm ( x ) #NEWLINE#
of . write ( '</table></html>' ) #NEWLINE#
print ( __doc__ ) #NEWLINE#
df #NEWLINE#
[ 2 , 2 , 3 ] #NEWLINE#
df . pivot_table ( index = [ 'values' ] , columns = [ 'age_col' , 'convert_me' ] , aggfunc = len #NEWLINE# ) . fillna ( 0 ) #NEWLINE#
output . write ( resp . content ) #NEWLINE#
list1 = [ 'apple' , 'egg' , 'apple' , 'banana' , 'egg' , 'apple' ] #NEWLINE#
self . _s = dict ( ( k . lower ( ) , k ) for k in d ) #NEWLINE#
suba = a [ indeces ] #NEWLINE#
x = [ 1 , 2 ] #NEWLINE#
aux = copy . deepcopy ( matriz ) #NEWLINE#
df [ ( df [ 'name' ] . shift ( 1 ) == df [ 'name' ] ) | ( df [ 'name' ] . shift ( - 1 ) == df [ 'name' ] ) ] #NEWLINE#
np . fill_diagonal ( dists , 1.0 ) #NEWLINE#
a = np . arange ( 1 , 10 ) . reshape ( ( 3 , 3 ) ) #NEWLINE#
plt . ticklabel_format ( style = 'sci' , axis = 'x' , scilimits = ( 0 , 0 ) ) #NEWLINE#
result = lengths . nonzero ( ) [ 0 ] [ 0 ] + 1 #NEWLINE#
matches = [ m . group ( ) . split ( '=' , 1 ) for m in matches ] #NEWLINE#
someList . sort ( key = mixed_order ) #NEWLINE#
y = np . zeros ( ( 10 , 10 ) ) #NEWLINE#
Counter ( { '1' : 3 , '2' : 3 , '10' : 1 , '5' : 1 , '7' : 1 , '6' : 1 } ) #NEWLINE#
sc = SparkContext ( 'local' , 'App#SPACE#Name' ) #NEWLINE#
f = open ( file , 'r' ) #NEWLINE#
funct1b ( 'user@remote_machineA:22022' ) #NEWLINE#
C0 = np . array ( [ ( A [ i ] * B [ ( i ) , : , : ] ) for i in range ( len ( A ) ) ] ) #NEWLINE#
from Crypto . PublicKey import RSA #NEWLINE#
start = time . time ( ) #NEWLINE#
self . file . write ( msg ) #NEWLINE#
return dict ( word . split ( value_sep , maxsplit = 1 ) for word in lexer ) #NEWLINE#
return a . repeat ( 2 ) . reshape ( 2 , 2 * len ( a [ 0 ] ) ) #NEWLINE#
fig , axes = plt . subplots ( nrows = 2 , ncols = 2 ) #NEWLINE#
conn . close ( ) #NEWLINE#
return APIResponse ( status = status . HTTP_200_OK , data = data ) #NEWLINE#
print ( func ( a , '..dd$' ) ) #NEWLINE#
app . sendMessage ( '#SPACE#' . join ( sys . argv [ 1 : ] ) ) #NEWLINE#
a_id = Column ( Integer , primary_key = True ) #NEWLINE#
ax . set_xlim ( * nx ) #NEWLINE#
print ( chr ( ord ( 'அ' ) ) ) #NEWLINE# print ( chr ( 1 + ord ( 'அ' ) ) ) #NEWLINE#
output = list ( { 'name' : n , 'playing' : list ( l ) } for n , l in list ( toutput . items ( ) ) #NEWLINE# ) #NEWLINE#
s . isdigit ( ) #NEWLINE#
g [ 'value' ] . apply ( lambda x : x . ffill ( ) . shift ( 1 ) ) #NEWLINE#
answer . append ( [ ( each - x ) for x in l ] ) #NEWLINE#
print ( quote_identifier ( 'Fo\x00o!' , 'ignore' ) ) #NEWLINE#
[ '((' , '(C(H3))3))' ] #NEWLINE#
super ( binary_expression , self ) . __init__ ( ) #NEWLINE#
os . environ [ 'ATESTVARIABLE' ] = 'value' #NEWLINE#
psutil . disk_usage ( '/' ) #NEWLINE#
'%0.17f' % 0.24 #NEWLINE#
zoomin . pack ( side = 'left' ) #NEWLINE#
print ( in_nested_list ( x , 2 ) ) #NEWLINE#
print ( a ) #NEWLINE#
print ( response . status_code , response . url ) #NEWLINE#
r = csv . reader ( open ( '/tmp/test.csv' ) ) #NEWLINE#
property_asel = list ( itertools . compress ( good_objects , property_a ) ) #NEWLINE#
f = open ( 'tracks.txt' , 'r' ) #NEWLINE# lines = [ line for line in f if line . strip ( ) ] #NEWLINE# f . close ( ) #NEWLINE# lines . sort ( ) #NEWLINE#
[ [ 'a' , 'c' ] , [ 'b' , 'd' ] , [ 'a' , 'c' ] , [ 'b' , 'd' ] ] #NEWLINE#
os . environ [ 'TZ' ] = ':Pacific/Auckland' #NEWLINE#
strings = [ 'some' , 'example' , 'words' , 'that' , 'i' , 'am' , 'fond' , 'of' ] #NEWLINE#
final_vector = ( start_matrix . T * weights ) . sum ( axis = 1 ) #NEWLINE#
print ( len ( args ) + len ( kwargs ) ) #NEWLINE#
df2 = pd . DataFrame ( { 'C' : [ 100 , 200 , 300 ] } ) #NEWLINE#
CMD [ '/run-cron.py' ] #NEWLINE#
self . label . setText ( 'Minimize#SPACE#me!' ) #NEWLINE#
df . c_contofficeID . str [ - 4 : ] #NEWLINE#
print ( ( 'I#SPACE#will#SPACE#be#SPACE#' , b . age , '#SPACE#on#SPACE#' , b . month , '#SPACE#' , b . day ) ) #NEWLINE#
'__file__' , '__name__' , '__package__' , '__path__' , '__status__' #NEWLINE#
'_handlers' , '_levelNames' , '_lock' , '_loggerClass' , '_releaseLock' #NEWLINE#
'_srcfile' , '_startTime' , 'addLevelName' , 'atexit' , 'basicConfig' #NEWLINE#
'getLoggerClass' , 'info' , 'log' , 'logProcesses' , 'logThreads' #NEWLINE#
axes [ 0 , 0 ] . legend ( bbox_to_anchor = ( 0 , 0.5 ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
socks . setdefaultproxy ( socks . PROXY_TYPE_SOCKS5 , '127.0.0.1' , 9050 ) #NEWLINE#
fpid . write ( str ( pid ) ) #NEWLINE#
datetime . datetime ( 2012 , 1 , 1 , 1 , 0 , 0 ) , #NEWLINE#
install_requires = 'useful.package==1.9dev-r1234' #NEWLINE#
ax . bar ( xs , ys , zs = z , zdir = 'y' , color = c , alpha = 0.8 , width = 8 ) #NEWLINE#
print ( 'Get#SPACE#back#SPACE#to#SPACE#work,#SPACE#%s!' % other . name ) #NEWLINE#
super ( MyServer , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
c = a [ b [ np . searchsorted ( b , a [ : , ( 0 ) ] ) - len ( b ) ] == a [ : , ( 0 ) ] ] #NEWLINE#
a [ numpy . lexsort ( a . T ) ] #NEWLINE#
return self . x + other . x #NEWLINE#
my_list = my_string . split ( ',' ) #NEWLINE# print ( my_list ) #NEWLINE#
next_page = response . xpath ( '//a[@title="next#SPACE#page"]/@href' ) . extract_first ( ) #NEWLINE#
server = smtplib . SMTP ( 'gmail-smtp-in.l.google.com:25' ) #NEWLINE#
np . random . shuffle ( indices ) #NEWLINE#
traceit ( False ) #NEWLINE#
import __main__ #NEWLINE#
vel1_tang = vel1 [ 0 ] * tang_vect [ 0 ] + vel1 [ 1 ] * tang_vect [ 1 ] #NEWLINE#
vel2_tang = vel2 [ 0 ] * tang_vect [ 0 ] + vel2 [ 1 ] * tang_vect [ 1 ] #NEWLINE#
return json . JSONEncoder . default ( self , o ) #NEWLINE#
table . insert ( chunksize ) #NEWLINE#
result = [ ( x + y ) for x , y in product ( mylist , mysuffixes ) ] #NEWLINE#
25.08597327423496 , 4.8346447416999636e-05 , 4 , array ( [ [ 66.77631579 , #NEWLINE# 93.10526316 , 72.11842105 ] , [ 145.35361842 , 202.66447368 , 156.98190789 ] , #NEWLINE# [ 137.87006579 , 192.23026316 , 148.89967105 ] ] ) #NEWLINE#
asciiList = [ n . encode ( 'ascii' , 'ignore' ) for n in strList ] #NEWLINE# h5File . create_dataset ( 'xxx' , ( len ( asciiList ) , 1 ) , 'S10' , asciiList ) #NEWLINE#
return a . shape [ 0 ] == a . shape [ 1 ] and np . linalg . matrix_rank ( a ) == a . shape [ 0 ] #NEWLINE#
opener = urllib . request . build_opener ( MyHTTPHandler ) #NEWLINE# response = opener . open ( 'http://www.google.com/' ) #NEWLINE#
del elem . getparent ( ) [ 0 ] #NEWLINE#
x . tobytes ( ) #NEWLINE#
plt . imshow ( result , cmap = 'Paired' , vmin = 0 , vmax = n_regions ) #NEWLINE#
i += 1 #NEWLINE#
sleep ( 0.05 ) #NEWLINE#
Js = np . random . randint ( 0 , n - 1 , 4 ) #NEWLINE#
indptr = np . where ( mask . ravel ( ) ) [ 0 ] #NEWLINE#
self . Show ( ) #NEWLINE#
df = xl . parse ( 'Sheet1' ) #NEWLINE#
for k , v in dictionary . items ( ) : #NEWLINE# #INDENT# x = [ k ] * len ( v ) #NEWLINE# y = v #NEWLINE# pyplot . plot ( x , y ) #NEWLINE#
pylab . show ( ) #NEWLINE#
return int ( x , 0 ) #NEWLINE#
from nltk . corpus import wordnet as wn #NEWLINE#
plt . legend ( fontsize = 13 , loc = 1 ) #NEWLINE#
self . runButton = QtGui . QPushButton ( 'Run' ) #NEWLINE#
warnings . simplefilter ( 'error' , category = MySQLdb . Warning ) #NEWLINE#
Base = 'string' #NEWLINE#
r = requests . get ( url % params_json ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , { 'a' : 2 } ] , [ 2 , { 'a' : 1 , 'b' : 3 } ] ] ) #NEWLINE#
[ tuple ( int ( j ) for j in list ( '{0:03b}' . format ( x ) ) ) for x in range ( 8 ) ] #NEWLINE#
difflib . get_close_matches ( 'LUMB' , [ 'JIBM' , 'NUNE' , 'NUMB' ] , 1 ) #NEWLINE#
"""\\$[0-9]+(?:\\.[0-9]{2})?""" #NEWLINE#
df . ix [ : , ( df . columns != 'b' ) ] #NEWLINE#
return self . n #NEWLINE#
return subprocess . Popen ( [ command ] + args , startupinfo = startupinfo ) . wait ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
tn . write ( password + '\n' ) #NEWLINE#
fs . writeFile ( 'people.json' , JSON . stringify ( m ) ) #NEWLINE#
engine = create_engine ( dsn , listeners = [ SearchPathSetter ( ) ] ) #NEWLINE#
print ( 'said:' , a ) #NEWLINE#
p . run ( ) #NEWLINE#
sortedLetters = sorted ( iter ( d . items ( ) ) , key = lambda k_v : ( k_v [ 1 ] , k_v [ 0 ] ) ) #NEWLINE#
44.6 , 19.7 , 17.9 , - 41.3 , 24.6 , 37.0 , 43.9 , 14.5 , 23.8 , 19.6 , - 4.2 , - 40.5 , 32.0 , 17.2 #NEWLINE#
np . hstack ( [ a , lookup [ ( a [ : , ( 0 ) ] - 1 ) , : ] ] ) #NEWLINE#
ax . grid ( True ) #NEWLINE#
shlex . split ( 'This#SPACE#is#SPACE#"a#SPACE#test"' ) #NEWLINE#
ax . set_yticks ( np . arange ( AUC . shape [ 0 ] ) + 0.5 , minor = False ) #NEWLINE#
[ 'hello' , 'foo' ] #NEWLINE#
numpy . linspace ( 10 , 20 , 5 ) #NEWLINE#
screen_height = root . winfo_screenheight ( ) #NEWLINE#
riak_bucket . delete ( key ) #NEWLINE#
with open ( 'test.csv' , 'r' ) as textfile : #NEWLINE# #INDENT# for row in reversed ( list ( csv . reader ( textfile ) ) ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
n = 6 #NEWLINE# ar = map ( int , input ( ) . split ( None , n ) [ : n ] ) #NEWLINE#
class Entry ( models . Model ) : #NEWLINE# #INDENT# id = models . CharField ( max_length = 10 ) #NEWLINE#
type ( d ) #NEWLINE#
app . config_from_object ( 'django.conf:settings' ) #NEWLINE#
left_df [ 'Helper' ] = left_df . groupby ( [ 'amount' , 'date' ] ) . cumcount ( ) #NEWLINE# right_df [ 'RHelper' ] = right_df . groupby ( [ 'amount' , 'date' ] ) . cumcount ( ) #NEWLINE#
root = etree . Element ( 'root' ) #NEWLINE#
[ 'value1' , 'value2' , 'value3' ] #NEWLINE#
list ( filter ( f , list ( range ( 2 , 25 ) ) ) ) #NEWLINE#
a [ 4 ] . append ( 10 ) #NEWLINE#
print ( expr . parseString ( 'x#SPACE#>#SPACE#7#SPACE#AND#SPACE#x#SPACE#<#SPACE#8#SPACE#OR#SPACE#x#SPACE#=#SPACE#4' ) ) #NEWLINE#
v . fit_transform ( [ 'an#SPACE#apple#SPACE#a#SPACE#day#SPACE#keeps#SPACE#the#SPACE#doctor#SPACE#away' ] ) . toarray ( ) #NEWLINE#
os . rename ( 'new_' + csvfile , csvfile ) #NEWLINE#
pass #NEWLINE#
width += ( len ( string ) - 1 ) * charspace #NEWLINE#
raise ValueError ( 'value#SPACE#out#SPACE#of#SPACE#range' ) #NEWLINE#
jvm = sc . _jvm #NEWLINE#
return json . dumps ( data ) #NEWLINE#
BaseDocTemplate . __init__ ( self , * args , ** kwargs ) #NEWLINE#
a = list ( range ( 10 ) ) #NEWLINE# b = sum ( a ) #NEWLINE# print ( b ) #NEWLINE#
alt . close ( ) #NEWLINE#
upgrade ( obj ) #NEWLINE#
f . write ( '\n' . join ( [ ',' . join ( h ) for h in zip ( * df . columns ) ] ) + '\n' ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
msg [ 'To' ] = 'you@example.com' #NEWLINE#
msg [ 'Subject' ] = 'This#SPACE#is#SPACE#the#SPACE#subject.' #NEWLINE#
return list ( self . __dict__ . items ( ) ) #NEWLINE#
imageio . imsave ( 'default.tiff' , rgb ) #NEWLINE#
print ( delta . seconds ) #NEWLINE#
df = pd . read_csv ( 'data.csv' , index_col = 'Date' ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
header = request . headers . get ( 'Accept-Language' , '' ) #NEWLINE#
self . device . close ( ) #NEWLINE#
print ( "'%s'#SPACE#is#SPACE#not#SPACE#a#SPACE#SQLite3#SPACE#database#SPACE#file" % file ) #NEWLINE#
main . quit ( ) #NEWLINE#
tree . add ( 4 ) #NEWLINE#
self . assertEqual ( self . nums , self . nu_nums ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
gb . get_group ( your_key ) #NEWLINE#
if libitem . startswith ( '__MACOSX/' ) : #NEWLINE# #INDENT# continue #NEWLINE#
set_value ( d , 'a' , 'b' , 3 ) #NEWLINE#
print ( DF . drop ( 'tmp' , axis = 1 ) ) #NEWLINE#
"""An#SPACE#easy#SPACE#way#SPACE#to#SPACE#break#SPACE#out#SPACE#of#SPACE#a#SPACE#generator""" #NEWLINE#
float ( 0 ) <STR0> float ( 0 ) #NEWLINE#
response = self . client . post ( '/' , { 'file' : myfile } ) #NEWLINE#
start_response ( '200#SPACE#OK' , [ ( 'Content-Type' , 'text/plain' ) ] ) #NEWLINE#
raise error #NEWLINE#
print ( res [ 'dylankid' ] ) #NEWLINE#
lattice [ : , : ] = site ( 3 ) #NEWLINE#
handle . close ( ) #NEWLINE#
im . save ( path + value + '.' + lower ( extension ) , upper ( extension ) ) #NEWLINE#
printf ( 'finalize\n' ) #NEWLINE#
links = soup . find ( 'span' , { 'class' : 'hsmall' } ) . findNextSiblings ( 'a' ) #NEWLINE#
data = json . load ( contactFile ) #NEWLINE#
return list ( itertools . chain ( * [ list_ [ s [ 0 ] : s [ 1 ] ] for s in slices ] ) ) #NEWLINE#
cmap = matplotlib . cm . get_cmap ( 'Spectral' ) #NEWLINE#
context [ 'cart' ] . append ( cart ) #NEWLINE#
self . _choices . append ( ( index , val ) ) #NEWLINE#
return [ [ int ( x == y ) for x in range ( 0 , n ) ] for y in range ( 0 , n ) ] #NEWLINE#
print ( key , value ) #NEWLINE#
"""datetime.datetime(2014,5,18,0,0)""" #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
probability = quad ( lambda x : np . exp ( kd . score_samples ( x ) ) , start , end ) [ 0 ] #NEWLINE#
tup [ 0 ] = x #NEWLINE#
e3 . insert ( 0 , '3' ) #NEWLINE#
np . random . seed ( 2 ) #NEWLINE#
print ( unit . objects . all ( ) ) #NEWLINE#
df #NEWLINE#
write_line ( * lines . pop ( 0 ) . rstrip ( ) . split ( '\t' ) ) #NEWLINE#
print ( locals ( ) ) #NEWLINE#
virEventLoopNativeStart ( ) #NEWLINE#
valid = set ( valid_char_sequence ) . issuperset ( myfilename ) #NEWLINE#
np . reshape ( df . values , ( 1 , df . shape [ 0 ] * df . shape [ 1 ] ) ) #NEWLINE#
pairs = IT . combinations ( idx , 2 ) #NEWLINE#
b = np . array ( [ [ 5 , 6 ] , [ 7 , 8 ] ] ) #NEWLINE#
'print' , 'raise' , 'return' , 'try' , 'while' , 'yield' , 'None' , 'True' #NEWLINE#
plt . xticks ( list ( range ( 2 ) ) , [ 'one' , 'two' ] , size = 'small' ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
instance . save ( ) #NEWLINE#
self . stdin_sock . close ( ) #NEWLINE#
for i in range ( x , y ) : #NEWLINE# #INDENT# b [ i ] = 1 #NEWLINE#
df [ 'cluster' ] = labels #NEWLINE#
sleep ( float ( 'inf' ) ) #NEWLINE#
s = ':dfa:sif:e' #NEWLINE# fixed = '' . join ( s . split ( ':' , 1 ) ) #NEWLINE#
main ( ) #NEWLINE#
moduleY . py #NEWLINE#
p . close ( ) #NEWLINE#
obj . samplesheet = self . request . FILES . get ( 'file' ) #NEWLINE#
out [ mask ] = A [ mask ] #NEWLINE#
plt . show ( ) #NEWLINE#
print ( collections . Counter ( y for x in listOfLists for y in set ( x ) ) ) #NEWLINE#
b = map ( list , b_set ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
[ '<a#SPACE#href="http://url.com/the">the</a>' , #NEWLINE# '<a#SPACE#href="http://url.com/quick">quick</a>' , #NEWLINE# '<a#SPACE#href="http://url.com/fox">fox</a>' , #NEWLINE# '<a#SPACE#href="http://url.com/the">the</a>' , #NEWLINE# '<a#SPACE#href="http://url.com/the">the</a>' , #NEWLINE# '<a#SPACE#href="http://url.com/quick">quick</a>' ] #NEWLINE#
self . delete ( self . position , Tkinter . END ) #NEWLINE#
results . append ( '#SPACE#' . join ( words ) ) #NEWLINE#
data . tofile ( 'temp' ) #NEWLINE#
f = open ( 'cs-testing.csv' , 'w' ) #NEWLINE#
[ list ( t ) for t in zip ( * ( [ iter ( num_str . split ( ',' ) ) ] * 4 ) ) ] #NEWLINE#
df [ df . apply ( lambda x : np . abs ( x - x . mean ( ) ) / x . std ( ) < 3 ) . all ( axis = 1 ) ] #NEWLINE#
super ( Spam ) . bar #NEWLINE#
list ( b ) #NEWLINE#
[ ( 365 , 179 ) , ( 96 , - 90 ) , ( 48 , - 138 ) , ( 12 , - 174 ) , ( 30 , - 156 ) ] #NEWLINE#
return [ OrderedDict ( zip ( list_of_keys , row ) ) for row in spamreader ] #NEWLINE#
nx . draw_networkx_edges ( G , pos , width = 2 , edge_color = 'r' ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE# l2 = l [ : : 2 ] #NEWLINE#
req = requests . get ( 'https://httpbin.org' ) #NEWLINE#
print ( 'Nothing#SPACE#here' ) #NEWLINE#
r = requests . get ( 'https://www.google.co.jp/' , proxies = proxies , auth = auth ) #NEWLINE#
xx = np . linspace ( - 0.5 , 3.1 , 100 ) #NEWLINE#
[ x [ 'name' ] for x in temp [ 0 ] [ 'trends' ] if x [ 'name' ] . startswith ( '#' ) ] #NEWLINE#
style . configure ( 'TFrame' , background = 'white' ) #NEWLINE#
class ItemPersistencePipeline ( object ) : #NEWLINE# #NEWLINE# def process_item ( self , item , spider ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
return hash ( frozenset ( iter ( self . items ( ) ) ) ) #NEWLINE#
print ( 'Unable#SPACE#to#SPACE#get#SPACE#the#SPACE#screenshot.' ) #NEWLINE#
ts . plot ( kind = 'bar' , figsize = ( 15 , 5 ) ) #NEWLINE#
pass #NEWLINE#
conn = boto . connect_dynamodb ( ) #NEWLINE#
random . choice ( tuple ( bigset ) ) #NEWLINE#
foo [ 0 ] . append ( 'x' ) #NEWLINE#
print ( 'Invalid#SPACE#email' ) #NEWLINE#
model3 . py #NEWLINE#
raise Exception ( 'Factory#SPACE#reuse#SPACE#not#SPACE#allowed' ) #NEWLINE#
all ( [ ] ) #NEWLINE#
print ( 'Turning#SPACE#off#SPACE#GPIO#SPACE#4' ) #NEWLINE#
[ 23.67 , 23.97 , 23.87 ] #NEWLINE#
del sys . modules [ mtr ] #NEWLINE#
if '\n' in foo : #NEWLINE# #INDENT# pass #NEWLINE#
"""product""" #NEWLINE#
build_tree_recursive ( tree [ child . name ] , child , nodes ) #NEWLINE#
print ( '#SPACE##SPACE#Serial#SPACE#Number:#SPACE#%s' % serial_no ) #NEWLINE#
clf = clf . fit ( X_train_pca , y_train ) #NEWLINE#
np . arange ( 10 ) [ 10 : - 2 : - 1 ] #NEWLINE#
conn = hive . Connection ( host = 'YOUR_HIVE_HOST' , port = PORT , username = 'YOU' ) #NEWLINE#
return [ [ ( 0 ) for _ in range ( length ) ] ] #NEWLINE#
print ( app . select ( 'url' , 'Books' ) ) #NEWLINE#
a [ 1 : 2 ] #NEWLINE#
pass #NEWLINE#
"""section_category_name#SPACE#=#SPACE#'computer#SPACE#and#SPACE#equipment#SPACE#expense'#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#and#SPACE#date#SPACE#>=#SPACE#2015-01-01#SPACE#and#SPACE#date#SPACE#<=#SPACE#2015-03-31#SPACE#and#SPACE#blah#SPACE#=#SPACE#'ooops'""" #NEWLINE#
fortnight . iloc [ 0 ] [ 'data' ] #NEWLINE#
ls = [ 1 , 2 , 3 ] #NEWLINE#
{ 'a' : 97 , 'b' : 98 } #NEWLINE#
cv2 . waitKey ( 0 ) #NEWLINE#
name = models . CharField ( max_length = 50 ) #NEWLINE#
my_div = x . xpath ( './/div[@id=$name]' , name = div_name ) [ 0 ] #NEWLINE#
foo ( ) #NEWLINE#
print ( trend [ 'name' ] ) #NEWLINE#
server . login ( gmail_user , gmail_pwd ) #NEWLINE#
self . logger . info ( 'Skipping#SPACE#entry' ) #NEWLINE#
df [ 'count' ] = df . groupby ( 'digits' ) [ 'fsq' ] . transform ( len ) #NEWLINE# df #NEWLINE#
idx = np . argsort ( a [ 1 ] ) #NEWLINE#
np . sqrt ( sqrDiff . sum ( axis = 1 ) ) #NEWLINE#
locale . getdefaultlocale ( ) #NEWLINE#
print ( ',#SPACE#' . join ( row ) ) #NEWLINE#
from django . core . urlresolvers import resolve #NEWLINE#
app = create_app ( ) #NEWLINE#
from functools import reduce #NEWLINE# l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# reduce ( lambda x , y : x + list ( y ) , l , [ ] ) #NEWLINE#
return HttpResponse ( serializers . serialize ( 'xml' , result ) , mimetype = 'text/xml' ) #NEWLINE#
b_logits = tf . Variable ( tf . zeros ( [ 2 ] ) ) #NEWLINE#
subprocess . call ( [ 'rsync' , '-Ccavz' , '--delete' , 'DJStatic' , 'username@website' ] #NEWLINE# ) #NEWLINE#
X , Y = np . meshgrid ( X , Y ) #NEWLINE#
if len ( x ) != len ( set ( x ) ) : #NEWLINE# #INDENT# raise Exception ( 'throw#SPACE#to#SPACE#caller' ) #NEWLINE#
type ( unicodecontent . encode ( 'utf-8' ) ) #NEWLINE#
print ( '\n' ) #NEWLINE#
print ( 'Received#SPACE#value#SPACE#from#SPACE#c2' ) #NEWLINE#
print ( 'Received#SPACE#value#SPACE#from#SPACE#quit' ) #NEWLINE#
df = df [ ( df . date >= df . beg_date ) & ( df . date <= df . end_date ) ] #NEWLINE#
super ( B , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
result . append ( ( a , b ) ) #NEWLINE#
day = time . strftime ( '%d' ) #NEWLINE#
modList . append ( len ( self . _myList ) ) #NEWLINE#
dict1 = { x . split ( ) [ 0 ] : x . split ( ) [ 1 ] for x in list1 } #NEWLINE#
json . dumps ( A ( ) , default = default ) #NEWLINE#
diff ( sin ( x ( t ) ) , t , 2 ) . subs ( f , sin ( x ( t ) ) ) #NEWLINE#
sys . exit ( p . wait ( ) ) #NEWLINE#
engine = create_engine ( 'sqlite://' ) #NEWLINE#
"""#vote_tally""" . load ( '/vote_up/3452/' ) #NEWLINE#
ET . tostring ( root ) #NEWLINE#
a = input ( 'What#SPACE#a:#SPACE#' ) #NEWLINE#
process . join ( ) #NEWLINE#
fout . write ( f . readline ( ) . strip ( ) . split ( '#SPACE#' ) [ 5 ] ) #NEWLINE#
assert isinstance ( obj [ 'b' ] , FilteredObject ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
subprocess . call ( [ '/home/myuser/run.sh' , '/tmp/ad_xml' , '/tmp/video_xml' ] , #NEWLINE# stdout = f ) #NEWLINE#
B [ 0 , 0 , 0 ] #NEWLINE#
pylab . plot ( data ) #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
print ( '{:-^60}' . format ( '#SPACE#parsed#SPACE#DF#SPACE#' ) ) #NEWLINE#
print ( re . match ( regex , line ) . groups ( ) ) #NEWLINE#
plt . setp ( ax1 . get_yticklines ( ) [ 1 : : 2 ] , visible = False ) #NEWLINE#
task ( ) #NEWLINE#
schedule . every ( ) . day . at ( '12:49' ) . do ( stopit ) #NEWLINE#
dict2 = dict ( ( item [ 0 ] , item [ 1 : ] ) for item in table2 ) #NEWLINE#
df = pd . DataFrame ( { 'DATA' : s , 'POINTS' : 0 } ) #NEWLINE#
alist = list ( get_all_substrings ( 'abcde' ) ) #NEWLINE#
psycopg2 . __version__ #NEWLINE#
nodes = [ node ( ) for _ in range ( 100 ) ] #NEWLINE#
ax . bar ( x - w , y , width = w , color = 'b' , align = 'center' ) #NEWLINE#
p = re . compile ( '<img.*?/>' ) #NEWLINE#
return decorator_maker #NEWLINE#
rows = np . random . random ( ( 100000 , 8 ) ) #NEWLINE#
app = Flask ( 'yourapp' ) #NEWLINE#
print ( etree . tostring ( tree , xml_declaration = True , encoding = docinfo . encoding ) ) #NEWLINE#
p = re . compile ( '^(.*(?={a})|.*?)({a})?(.*(?={b})|.*)({b})?(.*?)$' ) #NEWLINE#
list ( map ( '' . join , combinations_with_replacement ( [ 'a' , 'b' , 'c' ] , 3 ) ) ) #NEWLINE#
logger . debug ( 'message' ) #NEWLINE#
return _trace #NEWLINE#
print ( a [ : , : , ( np . newaxis ) ] . shape ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ - 2 , 8 , 1 ] } ) #NEWLINE#
{ 'a' : 3 , 'c' : 6 , 'b' : 5 } #NEWLINE#
"""I#SPACE#can#SPACE#quite#SPACE#understand#SPACE#your#SPACE#thinking#SPACE#so.""" #NEWLINE#
worksheet . set_column ( 0 , len ( data ) , 15 , formater ) #NEWLINE#
driver = webdriver . PhantomJS ( 'phantomjs' ) #NEWLINE#
[ time . strftime ( '%b' , time . strptime ( str ( i ) , '%m' ) ) for i in range ( 1 , 13 ) ] #NEWLINE#
plt . colorbar ( ) #NEWLINE#
sql . append ( ',#SPACE#' . join ( values ) ) #NEWLINE#
end_date = date . today ( ) . toordinal ( ) #NEWLINE#
print ( map ( int , line . split ( ) ) ) #NEWLINE#
print ( '===#SPACE#XMLParser' ) #NEWLINE#
print ( '===#SPACE#Expat' ) #NEWLINE#
soup . get_text ( separator = '\n' ) #NEWLINE#
s [ - 7 ] #NEWLINE#
do_sth ( ) #NEWLINE#
sample_object . users . add ( 1 , 2 ) #NEWLINE#
users = db . session . query ( User ) . filter ( User . numLogins == max_logins ) . all ( ) #NEWLINE#
in_file . seek ( 0 , os . SEEK_END ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
enc . transform ( [ [ 0 , 1 , 1 ] ] ) . toarray ( ) #NEWLINE#
return match . group ( 1 ) . lower ( ) #NEWLINE#
df = pd . DataFrame ( { 'A' : L } ) #NEWLINE#
newcontents = contents . translate ( string . maketrans ( 'aes' , 'ea3' ) ) #NEWLINE#
find_max ( d ) #NEWLINE#
plot . set_ylabel ( 'Num' ) #NEWLINE#
req . add_data ( urllib . parse . urlencode ( data ) ) #NEWLINE#
df2 - df2 . shift ( ) #NEWLINE#
return sum ( x for x , c in list ( Counter ( args ) . items ( ) ) if c == 1 ) #NEWLINE#
d = dict ( ( k , v ) for k , v in list ( d . items ( ) ) if v >= 10 ) #NEWLINE#
for key , value in list ( names . items ( ) ) : #NEWLINE# #INDENT# posX , posY , posZ = value #NEWLINE#
l . sort ( key = lambda t : t [ 0 ] ) #NEWLINE#
html = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
df [ 'Full#SPACE#Name' ] = df . apply ( combine_names , axis = 1 ) #NEWLINE#
me . save ( ) #NEWLINE#

order_insertion_by = [ 'name' ] #NEWLINE#
sorted_arr2 = arr2 [ arr1inds [ : : - 1 ] ] #NEWLINE#
x [ 1 ] [ 2 ] #NEWLINE#
self . tree . pack ( side = LEFT , fill = BOTH , expand = 1 , padx = 2 , pady = 2 ) #NEWLINE#
process . start ( ) #NEWLINE#
print ( [ key ] + map ( sum , zip ( * value ) [ 1 : ] ) ) #NEWLINE#
'x' , 'y' #NEWLINE#
print ( bool ( 'a' ) ) #NEWLINE#
mask = 255 * np . ones ( img . shape , dtype = 'uint8' ) #NEWLINE#
print ( shlex . split ( '5.6#SPACE##SPACE#4.5#SPACE##SPACE#6.8#SPACE##SPACE#"6.5"' ) ) #NEWLINE#
x = [ 1 , 2 , 3 , 4 , 3 , 4 ] #NEWLINE#
class Player ( models . Model ) : #NEWLINE# #INDENT# name = models . CharField ( max_length = 200 ) #NEWLINE#
sheet1 . write ( i % 24 , i / 24 , 'Test#SPACE#text' , st ) #NEWLINE#
p . start ( ) #NEWLINE#
ban_status = models . BooleanField ( default = False ) #NEWLINE#
user . set_password ( password ) #NEWLINE#
t . close ( ) #NEWLINE#
urllib . parse . quote_plus ( json . dumps ( { 'title' : 'hello#SPACE#worldï¼\x81' , #NEWLINE# 'anonymous' : False , 'needautocategory' : True } ) ) #NEWLINE#
x = dict ( [ ( k , list ( l ) ) for k in range ( 1000 ) ] ) #NEWLINE#
p = [ [ 1 , 2 , 3 ] , [ 1 , 9 , 9 ] , [ 1 , 2 , 4 ] ] #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
len ( l ) #NEWLINE#
s = socket . socket ( ) #NEWLINE#
r = s . get ( 'http://facebook.net' ) #NEWLINE#
d3 = pickle . load ( fp ) #NEWLINE#
channel . exec_command ( 'tail#SPACE#-f#SPACE#/var/log/everything/current' ) #NEWLINE#
setattr ( fn , 'marked' , 1 ) #NEWLINE#
list1 . pop ( 2 ) #NEWLINE#
im . thumbnail ( size ) #NEWLINE#
plot ( ar ) #NEWLINE#
metadata = MetaData ( ) #NEWLINE#
f ( 1 ) #NEWLINE#
plt . xlim ( [ start - width , end + width ] ) #NEWLINE#
handler . setFormatter ( fmt ) #NEWLINE#
return OrderedDict ( ) #NEWLINE#
p_regression = my_svr . predict ( x_test ) #NEWLINE#
tree . xpath ( '//input[@id="createFolderCreateBtn"]' ) #NEWLINE#
res [ k1 ] [ k2 ] [ k3 ] . append ( l [ 3 : ] ) #NEWLINE#
txtfiles = find_files ( '*.txt' , '.' ) #NEWLINE#
return l [ 1 ] #NEWLINE#
session = win32com . client . Dispatch ( 'blpapicom.Session' ) #NEWLINE#
a_t = np . vstack ( ( a , np . zeros_like ( a ) ) ) #NEWLINE# b_t = np . vstack ( ( b , np . ones_like ( b ) ) ) #NEWLINE#
s = s [ : - 1 ] #NEWLINE#
file = open ( '/usr/data/application/json-dump.json' , 'r' ) #NEWLINE#
d = { } #NEWLINE# for i in 'a=b,a=c,a=d,b=e' . split ( ',' ) : #NEWLINE# #INDENT# k , v = i . split ( '=' ) #NEWLINE# d . setdefault ( k , [ ] ) . append ( v ) #NEWLINE# print ( d ) #NEWLINE#
def union2 ( dict1 , dict2 ) : #NEWLINE# #INDENT# return dict ( list ( dict1 . items ( ) ) + list ( dict2 . items ( ) ) ) #NEWLINE#
x [ : 5 ] + x [ 5 : ] . strip ( ) #NEWLINE#
fig . subplots_adjust ( bottom = 0.1 * df . index . nlevels ) #NEWLINE#
imshow ( wally ) #NEWLINE#
scaled_features_df . head ( 3 ) #NEWLINE#
reader = csv . DictReader ( f , fieldnames = h ) #NEWLINE#
print ( '\n' . join ( get_requirements ( * sys . argv [ 1 : ] ) ) ) #NEWLINE#
return 2 * x + 6 #NEWLINE#
counts = collections . Counter ( l [ 1 ] for l in a ) #NEWLINE#
ax1 . scatter ( x [ 40 : ] , y [ 40 : ] , s = 10 , c = 'r' , marker = 'o' , label = 'second' ) #NEWLINE#
l += [ 'X' , 'X' ] #NEWLINE#
print ( '{:<15}#SPACE##SPACE#{:<15}#SPACE##SPACE#{:<20}#SPACE#{:<25}' . format ( * row ) ) #NEWLINE#
node = data [ 'properties' ] [ 'stock' ] [ 'properties' ] [ 'warehouse' ] #NEWLINE#
os . remove ( './lib.dll' ) #NEWLINE#
return str ( self . __dict__ ) #NEWLINE#
set ( second_list ) - set ( map ( f , first_list ) ) #NEWLINE#
p1 = np . power ( np . power ( np . pi * 2 , k ) , - 0.5 ) #NEWLINE#
workbook = xlrd . open_workbook ( 'test.xlsx' ) #NEWLINE#
a = tf . Variable ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , dtype = tf . int32 ) #NEWLINE#
sum ( some_counter . values ( ) ) #NEWLINE#
xor_ ( b . begin ( ) , b . end ( ) , a . begin ( ) , b . begin ( ) ) #NEWLINE#
show_firm_url . short_description = 'Firm#SPACE#URL' #NEWLINE#
{ '' : [ 'Root' ] , 'AB' : [ 'ABC' , 'CBA' ] , 'Root' : [ 'AB' , 'CD' ] , 'CD' : [ 'CDE' , 'FGH' ] #NEWLINE# } #NEWLINE#
my_cmap = matplotlib . cm . get_cmap ( 'rainbow' ) #NEWLINE#
main ( ) #NEWLINE#
foolist . hml #NEWLINE#
evil = "__import__('os').remove('important#SPACE#file')" #NEWLINE#
xml = ET . fromstring ( xmlData ) #NEWLINE#
t = datetime . datetime ( 2012 , 2 , 23 , 0 , 0 ) #NEWLINE# t . strftime ( '%m/%d/%Y' ) #NEWLINE#
cursor . execute ( 'SHOW#SPACE#columns#SPACE#FROM#SPACE#table_name' ) #NEWLINE# print ( [ columns [ 0 ] for column in cursor . fetchall ( ) ] ) #NEWLINE#
axes [ 0 ] . pcolormesh ( x , y , z , cmap = 'gist_earth' ) #NEWLINE#
print ( [ r . match ( string ) . groups ( ) for string in strings ] ) #NEWLINE#
samplesheet = FileField ( blank = True , default = '' ) #NEWLINE#
return 2 * A * sin ( distance / ( 2 * B ) ) #NEWLINE#
parser . error ( 'No#SPACE#action#SPACE#requested,#SPACE#add#SPACE#-process#SPACE#or#SPACE#-upload' ) #NEWLINE#
self . canvas . delete ( self . img_id ) #NEWLINE#
"""KEY_F(3)""" #NEWLINE#
"""KEY_LEFT""" #NEWLINE#
"""KEY_RIGHT""" #NEWLINE#
"""KEY_F(1)""" #NEWLINE#
"""KEY_F(4)""" #NEWLINE#
"""KEY_F(5)""" #NEWLINE#
"""KEY_DOWN""" #NEWLINE#
"""KEY_UP""" #NEWLINE#
"""KEY_NPAGE""" #NEWLINE#
axes = plt . gca ( ) #NEWLINE#
cg = sns . clustermap ( df , metric = 'correlation' ) #NEWLINE# plt . setp ( cg . ax_heatmap . yaxis . get_majorticklabels ( ) , rotation = 0 ) #NEWLINE#
gps2utc ( 0 , 1092121243.0 ) #NEWLINE#
rcParams [ 'xtick.major.pad' ] = 6 #NEWLINE#
np . eye ( 3 , k = 1 ) #NEWLINE#
cdf2 = cdf2 . set_index ( [ 'Class' , 'Location' , 'Name' ] ) #NEWLINE#
print ( 'Found#SPACE#%d#SPACE#records#SPACE#in#SPACE#the#SPACE#file.' % len ( records ) ) #NEWLINE#
im = Image . open ( file_path ) #NEWLINE#
orm . YourModel . objects . update ( field_name = DEFAULT_VALUE ) #NEWLINE#
s = re . sub ( '((?<=,)|^)(?=,|$)' , '0' , s ) #NEWLINE#
return Category . query . all ( ) #NEWLINE#
myShelvedDict [ 'myDict' ] = myDict #NEWLINE#
plot_selected . yaxis . set_ticks ( np . arange ( 0.2 , 1.1 , 0.2 ) ) #NEWLINE#
[ x for x in values if x % 2 == 1 ] + [ x for x in values if x % 2 == 0 ] == values #NEWLINE#
ax . set_xlim ( [ 0 , 2 ] ) #NEWLINE#
p . start ( ) #NEWLINE#
matrix_b [ 0 , 0 ] = [ 0 , 0 , 1 ] #NEWLINE#
worker . start ( ) #NEWLINE#
groups . union_set ( a , b ) #NEWLINE#
print ( ( 'Last#SPACE#line#SPACE#was' , line_len , 'chars#SPACE#long.' ) ) #NEWLINE#
print ( 'Filtered#SPACE#data-set' ) #NEWLINE#
setattr ( self , key , value ) #NEWLINE#
os . chdir ( cd ) #NEWLINE#
( 'time' , np . float64 ) , #NEWLINE#
a_test . __class__ #NEWLINE#
x = [ 1 , 3 , [ 1 , 2 , 3 ] , [ 2 , 3 , 4 ] , [ 3 , 4 , [ ] , [ 2 , 3 , 'a' ] ] ] #NEWLINE#
ax . axis ( 'equal' ) #NEWLINE#
now = datetime . datetime . utcnow ( ) . replace ( tzinfo = utc ) #NEWLINE#
x = numpy . arange ( 0 , 2 * numpy . pi , numpy . pi / 1000 ) #NEWLINE#
matplotlib . __version__ #NEWLINE#
book = load_workbook ( 'output.xlsx' ) #NEWLINE#
self . set_icon_from_file ( get_resource_path ( 'icon.png' ) ) #NEWLINE#
field . setStyleSheet ( 'background-color:#SPACE#yellow' ) #NEWLINE#
foo ( ) #NEWLINE#
myseries = pd . Series ( [ 1 , 7 , 0 , 7 , 5 ] , index = [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
df . ix [ rows ] #NEWLINE#
n += 1 #NEWLINE#
d [ k ] . append ( v ) #NEWLINE#
axColor . yaxis . set_label_position ( 'left' ) #NEWLINE#
return round ( x , - int ( floor ( log10 ( abs ( x ) ) ) ) ) #NEWLINE#
df1 = df . groupby ( [ 'col1' , 'col2' ] ) #NEWLINE#
pass #NEWLINE#
h [ 'hello' ] = 2 #NEWLINE#
sudo ( 'supervisorctl#SPACE#reload' , pty = True ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
solve ( [ 5 , 10 ] , [ 1 , 5 ] ) #NEWLINE#
main ( list ( range ( 1 , 10 ) ) ) #NEWLINE#
return 'g' #NEWLINE#
axes . set_ylabel ( 'Discharge#SPACE#in#SPACE#CFS' ) #NEWLINE#
df . price . plot ( kind = 'bar' , color = 'blue' , ax = ax2 , width = width , position = 0 ) #NEWLINE#
parking_rows . append ( ParkingLotRow ( ( 1 , 286 ) , ( 462 , 304 ) , 22 ) ) #NEWLINE#
np . identity ( 2 ) [ Ellipsis ] #NEWLINE#
self . response . out . write ( 'OK.' ) #NEWLINE#
return False #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
d += datetime . timedelta ( days = 1 ) #NEWLINE#
pi . source_image . save ( image_name , ContentFile ( image_file . read ( ) ) ) #NEWLINE#
main ( ) #NEWLINE#
return str ( self . __dict__ ) [ 1 : - 1 ] #NEWLINE#
s = "foobar['infoNeededHere']ddd[andHere]#SPACE#[andOverHereToo[]" #NEWLINE#
start_response ( '200#SPACE#OK' , [ ( 'Content-Type' , 'text/html;charset=utf-8' ) ] ) #NEWLINE#
doc = etree . parse ( open ( 'doc.xml' ) ) #NEWLINE#
scipy . misc . imsave ( 's.png' , s ) #NEWLINE#
new_nums . append ( nums [ - 1 ] ) #NEWLINE#
account_num = params [ 'params' ] [ 'account_num' ] #NEWLINE#
itertools . dropwhile ( it , makepred ( 5 ) ) #NEWLINE#
formattedline = '%10.6f#SPACE##SPACE#%10.6f#SPACE##SPACE#%10.6f' % tuple ( aa [ ( ii ) , : ] ) #NEWLINE#
arr . sum ( axis = ( 0 , 1 ) ) #NEWLINE# arr . sum ( axis = ( 0 , 1 ) ) . shape #NEWLINE#
return '0x%s' % ( '00000000%s' % hex ( n & 4294967295 ) [ 2 : - 1 ] ) [ - 8 : ] #NEWLINE#
min ( alist ) [ 0 ] , max ( alist ) [ 0 ] #NEWLINE#
print ( solve ( eqs , x , y , dict = True ) ) #NEWLINE#
list3 = [ item for item in list1 if item not in list2 ] #NEWLINE#
plt . subplot ( 121 ) #NEWLINE#
if not os . path . exists ( newpath ) : #NEWLINE# #INDENT# os . makedirs ( newpath ) #NEWLINE#
img = cv2 . imread ( 'C:/Temp/person.jpg' ) #NEWLINE#
result = img . copy ( ) #NEWLINE#
sys . stdout . write ( '.' ) #NEWLINE#
sys . stdout . write ( '\nFinished.\n' ) #NEWLINE#
plt . show ( ) #NEWLINE#
get_color ( 0 ) #NEWLINE#
pygame . init ( ) #NEWLINE#
sys . stdout = flushfile ( sys . stdout ) #NEWLINE#
g . vs [ 0 ] [ 'color' ] = cl_red #NEWLINE#
return a [ np . arange ( a . shape [ 0 ] ) , I ] #NEWLINE#
inspect . getargspec ( members [ 3 ] [ 1 ] ) #NEWLINE#
min ( l_one + l_two ) #NEWLINE#
test . print_array ( a ) #NEWLINE#
sel . click ( "//div[@id='signInControl']/form/input[@type='submit']" ) #NEWLINE#
data = open ( path , 'rb' ) . read ( ) #NEWLINE#
process = subprocess . Popen ( [ 'sudo' , 'chpasswd' ] , stdout = subprocess . PIPE , #NEWLINE# stdin = subprocess . PIPE , stderr = subprocess . PIPE ) #NEWLINE#
df #NEWLINE# df . iloc [ df . index . get_level_values ( 'A' ) == 1 ] #NEWLINE#
[ date for date in dates if dates . count ( date ) > 1 ] #NEWLINE#
s1 = pd . Series ( [ 'a' , 'b' , 'a' , 'c' , 'a' , 'b' ] ) #NEWLINE#
_st += timedelta ( days = 7 ) #NEWLINE#
threading . Thread ( target = play1 ) . start ( ) #NEWLINE# threading . Thread ( target = play2 ) . start ( ) #NEWLINE#
pattern . match ( '#SPACE#' . join ( [ '0f' ] * 49 ) ) #NEWLINE#
return '+' . join ( 'chr(%d)' % ord ( c ) for c in text ) #NEWLINE#
friday = today + datetime . timedelta ( ( 4 - today . weekday ( ) ) % 7 ) #NEWLINE#
res . append ( ( a , b , c , d ) ) #NEWLINE#
return zip ( a , a ) #NEWLINE#
[ ( np . bincount ( i ) > 0 ) . sum ( ) for i in data ] #NEWLINE#
return 'INT_{}' . format ( len ( chunks [ 0 ] ) ) #NEWLINE#
x_sorted , y_sorted = zip ( * sorted ( zip ( x , y ) , key = lambda a : a [ 0 ] ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
return hash ( self . normalized ) #NEWLINE#
b = a . split ( ',#SPACE#' ) #NEWLINE#
return x , y #NEWLINE#
img3 = Image . alpha_composite ( img1 , img2 ) #NEWLINE#
res . append ( ( toktype , tokval ) ) #NEWLINE#
"""#SPACE#""" . join ( stem for stem in stems if stem not in words ) #NEWLINE#
b = input ( 'What#SPACE#b:#SPACE#' ) #NEWLINE#
plt . imshow ( img , interpolation = 'nearest' ) #NEWLINE#
hiddenimports = [ 'Tkinter' , 'FileDialog' ] , #NEWLINE#
[ item . strip ( '#SPACE#<>' ) for item in _ ] #NEWLINE#
print ( [ max ( v ) for _ , v in itertools . groupby ( l , lambda x : x [ 0 ] ) ] ) #NEWLINE#
w . setWindowFlags ( QtCore . Qt . FramelessWindowHint ) #NEWLINE#
for key , value in list ( d . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
df [ 'D' ] [ ( df [ 'A' ] == 0 ) & ( ( df [ 'B' ] > 0 ) | ( df [ 'C' ] > 0 ) ) ] = 'c2' #NEWLINE#
raise InterruptedException ( 'process#SPACE#interrupted.' ) #NEWLINE#
raw_print ( 'ERROR\n' ) #NEWLINE#
raw_print ( 'PASSED\n\n' ) #NEWLINE#
self . package_obj . cleanup ( ) #NEWLINE#
lines = file . readlines ( ) #NEWLINE# lines = lines [ : - 1 ] #NEWLINE#
idx = np . where ( classes == var ) #NEWLINE#
flag . groupby ( level = [ 0 , 1 ] ) . max ( ) . reset_index ( ) #NEWLINE#
[ { 'content' : "i'm#SPACE#glad#SPACE#i#SPACE#know#SPACE#sign#SPACE#language,#SPACE#it's#SPACE#pretty#SPACE#handy." } , { #NEWLINE# 'content' : 'i#SPACE#am#SPACE#on#SPACE#a#SPACE#seafood#SPACE#diet.#SPACE#every#SPACE#time#SPACE#i#SPACE#see#SPACE#food,#SPACE#i#SPACE#eat#SPACE#it.' } , #NEWLINE# { 'content' : 'labyrinths#SPACE#are#SPACE#amazing.' } ] #NEWLINE#
jdata = json . dumps ( { 'username' : '...' , 'password' : '...' } ) #NEWLINE#
print ( ( 'NAME:#SPACE#' , i ) ) #NEWLINE#
print ( '' . join ( re . split ( '([A-Z])' , t , maxsplit = 4 ) [ 7 : ] ) ) #NEWLINE#
l #NEWLINE# sorted ( l , key = lambda x : int ( re . search ( '\\d+' , x ) . group ( 0 ) ) ) #NEWLINE#
print ( df . join ( s ) ) #NEWLINE#
self . text . insert ( 'end' , 'one\ntwo\nthree\n' ) #NEWLINE#
datfiles [ 0 ] . seek ( 0 ) #NEWLINE#
s3 = boto3 . resource ( 's3' ) #NEWLINE#
ax2 . set_xlabel ( 'age' ) #NEWLINE#
canvas = numpy . zeros ( ( n , n ) , dtype = int ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
mock_last_transaction . assert_called_once_with ( ) #NEWLINE#
p . parse_args ( 'script#SPACE#--foo#SPACE#sst' . split ( ) ) #NEWLINE#
ImageDraw . Draw ( blurred_halo ) . text ( position , text , font = font , fill = col ) #NEWLINE#
cbar_ax . set_yticklabels ( [ 'B' , 'A' , 'C' ] ) #NEWLINE#
new_dict = dict ( ( v , [ k for k in ks if old_dict [ k ] == v ] ) for v in set ( vs ) ) #NEWLINE#
s = 'ab@cde@@fghi@jk@lmno@@@p@qrs@tuvwxy@z' #NEWLINE#
print ( 'File#SPACE#on#SPACE#disk:' , len ( f . read ( ) ) ) #NEWLINE#
serialization . registry . _decoders . pop ( 'application/x-python-serialize' ) #NEWLINE#
return self . __dict [ name ] #NEWLINE#
list ( iter ( lambda : t . read ( 3 ) , '' ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
d . f ( ) #NEWLINE#
sess . commit ( ) #NEWLINE#
find_intersection ( lst ) #NEWLINE#
new_list . append ( my_array + [ e ] ) #NEWLINE#
lmn = long_module_name #NEWLINE#
import imp #NEWLINE# imp . reload ( sys ) #NEWLINE#
B [ : , ( None ) ] . shape #NEWLINE#
newR . mean ( ) #NEWLINE#
run ( 'hostname' ) #NEWLINE#
doc = xml . dom . minidom . Document ( ) #NEWLINE#
self . assertEqual ( mocked_handler . call_count , 1 ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
group . Remove ( 'LDAP://CN=username,OU=Users,DC=blah,DC=local' ) #NEWLINE#
"""\\u0e4f\\u032f\\u0361\\u0e4f""" . decode ( 'unicode-escape' ) #NEWLINE# print ( '\\u0e4f\\u032f\\u0361\\u0e4f' . decode ( 'unicode-escape' ) ) #NEWLINE#
[ ( x + L2 [ i ] ) for i , x in enumerate ( L1 ) ] #NEWLINE#
self . pack ( fill = BOTH , expand = 1 ) #NEWLINE#
users = Users . objects . filter ( pk__in = [ 1 , 2 ] ) #NEWLINE#
print ( '+++' , x , y ) #NEWLINE#
df [ df [ 'b' ] . map ( set ) & { 4 } ] #NEWLINE#
[ 'ROOT' , 'Node1' ] #NEWLINE#
if all ( i in a for i in b ) : #NEWLINE# #INDENT# print ( 'PASS' ) #NEWLINE# else : #NEWLINE# #INDENT# print ( 'FAIL' ) #NEWLINE# if all ( i in a for i in c ) : #NEWLINE# #INDENT# print ( 'PASS' ) #NEWLINE# else : #NEWLINE# #INDENT# print ( 'FAIL' ) #NEWLINE#
a = k + a #NEWLINE#
parent_node . setdefault ( 'children' , [ ] ) . append ( child_node ) #NEWLINE#
print ( [ item for sublist in out for item in sublist ] ) #NEWLINE#
setter . append ( '_args["%s"]#SPACE#=#SPACE#%s' % ( k , k ) ) #NEWLINE#
df . groupby ( 'A' ) . B . sum ( ) . reindex ( list ( 'abcdef' ) , fill_value = 0 ) #NEWLINE#
plt . plot ( ( 1 , n ) , ( thresh , thresh ) , c = 'r' ) #NEWLINE#
return ( 1 / np . sqrt ( ( A [ : , ( None ) ] - B ) ** 2 + d ** 2 ) ) . sum ( 1 ) #NEWLINE#
func ( ) #NEWLINE#
fig . savefig ( 'dendrogram.png' ) #NEWLINE#
socket . setdefaulttimeout ( 0.5 ) #NEWLINE#
print ( request . headers ) #NEWLINE#
for x in range ( 8 ) : #NEWLINE# #INDENT# multiprocessing . Process ( target = foo , args = ( x , ) ) . start ( ) #NEWLINE#
the_message = big_regex . sub ( 'repl-string' , str ( word [ 1 ] ) ) #NEWLINE#
pcmdata = wave . struct . unpack ( '%dh' % wavedatalength , wavedata ) #NEWLINE#
pp_json ( your_json_string ) #NEWLINE#
self . __block = _allocate_lock ( ) #NEWLINE#
qux = staticmethod ( lambda x : x + '_quux' ) #NEWLINE#
gtk . CellRendererPixbuf . __init__ ( self ) #NEWLINE#
parser . parse ( 'January#SPACE#11,#SPACE#2010' ) . strftime ( '%A' ) #NEWLINE#
ax1 . spines [ 'top' ] . set_visible ( False ) #NEWLINE#
for label in ax . get_xticklabels ( ) : #NEWLINE# #INDENT# label . set_fontproperties ( ticks_font ) #NEWLINE#
print ( '\r' + str ( cnt ) ) #NEWLINE#
filename , size = read_gzip_info ( gzipfileobj ) #NEWLINE#
cur . execute ( 'EXECUTE#SPACE#prepared_select(%s,#SPACE#%s)' , ( name , rowid ) ) #NEWLINE#
check_value ( 'checkpoint#SPACE#after#SPACE#definition#SPACE#of#SPACE#b' ) #NEWLINE#
import numpy as np #NEWLINE#
ax . add_patch ( circle ) #NEWLINE#
logging . basicConfig ( filename = LOG , filemode = 'w' , level = logging . DEBUG ) #NEWLINE#
list_of_arrays = map ( lambda x : x * np . ones ( M ) , list ( range ( k ) ) ) #NEWLINE#
axcltwo . set_xlim ( 0 , binimg . shape [ 1 ] - 1 ) #NEWLINE#
df2 = df . iloc [ [ 0 , - 1 ] ] #NEWLINE#
self . canvas . create_rectangle ( x0 , y0 , x1 , y1 , outline = 'black' , fill = color ) #NEWLINE#
print ( self . get_cookie ( 'netloc' ) ) #NEWLINE#
print ( self . get_cookie ( 'urlpath' ) ) #NEWLINE#
print ( '\n#SPACE##SPACE##SPACE##SPACE#' . join ( s . split ( '\n' ) ) ) #NEWLINE#
"""ERROR""" #NEWLINE#
return tuple ( x for sublist in base_lists for x in sublist ) #NEWLINE#
return '' . join ( itertools . chain ( * zip ( str1 , str2 ) ) ) #NEWLINE#
df . insert ( 0 , 'Mid' , mid ) #NEWLINE#
Atomic . register ( str ) #NEWLINE#
soup = BeautifulSoup ( test_html ) #NEWLINE#
traceback . print_tb ( tb ) #NEWLINE#
{ { form . content ( ) } } #NEWLINE#
s2 . strip ( '"' ) #NEWLINE#
[ ( '/' , MainPage ) , ( '/sign' , Guestbook ) ] , #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
s . connect ( ( 'hostname' , 22 ) ) #NEWLINE#
np . power . outer ( [ 1 , 2 ] , [ 3 , 4 ] ) #NEWLINE#
L1 = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] #NEWLINE# L2 = [ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'e' , 'f' ] ] #NEWLINE# [ ( x + y ) for x , y in zip ( L1 , L2 ) ] #NEWLINE#
Counter ( { 'f' : 3 , 'a' : 2 , 'd' : 2 , 's' : 1 } ) #NEWLINE# 2 #NEWLINE#
regx = re . compile ( '[-/]' ) #NEWLINE#
[ ( [ item ] if not isinstance ( item , list ) else item ) for item in l ] #NEWLINE#
if name in files : #NEWLINE# #INDENT# return os . path . join ( root , name ) #NEWLINE#
STATICFILES_DIRS = os . path . join ( PROJECT_DIR , 'static' ) , #NEWLINE#
my_dict = request . query . decode ( ) #NEWLINE#
class A ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# print ( 'world' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class B ( A ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# print ( 'hello' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# super ( ) . __init__ ( ) #NEWLINE#
print ( ( k + 1 ) * lcm ) #NEWLINE#
root . withdraw ( ) #NEWLINE#
listener . setsockopt ( SOL_SOCKET , SO_REUSEADDR , 1 ) #NEWLINE#
arr [ 2 , 1 ] == arr [ 2 , 1 ] #NEWLINE#
sess = tf . Session ( config = config ) #NEWLINE#
"""\\test1.html""" #NEWLINE#
return rdbms . connect ( instance = _INSTANCE_NAME , database = 'guestbook' ) #NEWLINE#
window . add ( entry ) #NEWLINE#
plt . imshow ( y , cmap = mpl . cm . jet_r , interpolation = 'nearest' ) #NEWLINE#
1045 , 1106 , 1218 , 1285 , 1356 , 1454 , 1624 , 1782 , 1942 , 2057 , 2179 , 2271 #NEWLINE#
mask = np . concatenate ( ( [ False ] , np . isnan ( a ) , [ False ] ) ) #NEWLINE#
self . mainListContent [ : ] = [ new , list , of , widgets ] #NEWLINE#
text = re . sub ( '(,\\s)' , '#SPACE#\\1' , text ) #NEWLINE#
text = re . sub ( "('\\s)" , '#SPACE#\\1' , text ) #NEWLINE#
text = re . sub ( '\\.#SPACE#*(\n|$)' , '#SPACE#.#SPACE#' , text ) #NEWLINE#
d = datetime . strptime ( '22:30' , '%H:%M' ) #NEWLINE#
if any ( item in 'cat' for item in [ 'a' , 'd' ] ) : #NEWLINE# #INDENT# win ( ) #NEWLINE#
val = datetime . datetime . strptime ( val , '%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S' ) #NEWLINE#
sys . path . append ( 'yourpathstring' ) #NEWLINE#
tar . extractall ( ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
p1 = plt . plot ( x , y1 , 'b-' , linewidth = 1.0 ) #NEWLINE#
arr = np . arange ( 729 ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
any ( is_subset ( d , d1 ) for d1 in my_list if d1 != d ) #NEWLINE#
frame1 = tk . Frame ( root , width = 100 , height = 100 , background = 'bisque' ) #NEWLINE#
result . get ( ) #NEWLINE#
conn . request ( 'PUT' , '/myurl' , body ) #NEWLINE#
builder . connect_signals ( self ) #NEWLINE#
self . stdout , self . stderr = p . communicate ( ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
return self . _global_wealth #NEWLINE#
session . commit ( ) #NEWLINE#
ax . set_xlim3d ( 0.55 , 0.8 ) #NEWLINE#
foo ( ) #NEWLINE#
exceptionvar = sys . exc_info ( ) [ 1 ] #NEWLINE#
raise ValueError ( 'First#SPACE#argument#SPACE#should#SPACE#be#SPACE#...' ) #NEWLINE#
c = pycurl . Curl ( ) #NEWLINE#
Foo . run_static_method ( ) #NEWLINE#
{ { your_python_data } } #NEWLINE#
path = os . path . join ( '/home' , 'dir1' , 'dir2' ) #NEWLINE#
<STR0> ( n , ) + tuple ( map ( next , iterators ) ) #NEWLINE#
self . logger . removeHandler ( ch ) #NEWLINE#
l [ : n ] #NEWLINE#
app = flask . Flask ( __name__ ) #NEWLINE#
isinstance ( result , collections . Iterable ) #NEWLINE#
text . append ( Paragraph ( 'This#SPACE#is#SPACE#line#SPACE#%d.' % i , styleN ) ) #NEWLINE#
print ( 'length#SPACE#of#SPACE#{0}#SPACE#is#SPACE#{1}' . format ( repr ( mystring ) , len ( mystring ) ) ) #NEWLINE#
l = [ 'b' , 'a' , 'c' , 'e' ] #NEWLINE#
format_e ( Decimal ( '40812300000.00000000000000' ) ) #NEWLINE#
cv . pack ( ) #NEWLINE#
package_name = os . path . basename ( package_path ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
ax . axis ( 'equal' ) #NEWLINE#
widget1 . grid ( row = 0 , column = 0 ) #NEWLINE#
df = pd . read_csv ( path , skiprows = rest ) #NEWLINE#
return os . environ [ 'PROCESSOR_ARCHITECTURE' ] . endswith ( '64' ) #NEWLINE#
pygame . init ( ) #NEWLINE#
db = SQLAlchemy ( app ) #NEWLINE#
english_words = set ( word . strip ( ) . lower ( ) for word in word_file ) #NEWLINE#
random . seed ( 45432 ) #NEWLINE#
df2 = df2 [ ~ df2 [ 'A' ] . isin ( df12 [ 'A' ] ) ] #NEWLINE#
STATIC_URL = '/static/' #NEWLINE#
client . service . method ( string_array ) #NEWLINE#
getattr ( object , 'field' ) #NEWLINE#
print ( ( current_item , next_item ) ) #NEWLINE#
print ( [ '' . join ( g ) for g in c ] ) #NEWLINE#
G . add_edge ( 'A' , 'B' ) #NEWLINE#
G . add_edge ( 'C' , 'D' ) #NEWLINE#
while True : #NEWLINE# #INDENT# some_list . remove ( thing ) #NEWLINE#
0.5 * ceil ( 2.0 * x ) #NEWLINE#
metadata . create_all ( engine ) #NEWLINE#
pass #NEWLINE#
print ( '%d#SPACE#%d#SPACE#%s' % x ) #NEWLINE#
out . clear ( ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
epoll . register ( p . stdout . fileno ( ) , select . EPOLLHUP ) #NEWLINE#
print ( 'Doing#SPACE#things#SPACE#with#SPACE#%s' % some_var ) #NEWLINE#
data2 = data2 . groupby ( data2 . index ) . sum ( ) #NEWLINE#
return now . astimezone ( tz ) . dst ( ) != timedelta ( 0 ) #NEWLINE#
destdevice = '2248_1' #NEWLINE# deviceparent = fexdata [ destdevice ] [ 'parent' ] #NEWLINE#
body = self . driver . find_element_by_tag_name ( 'body' ) #NEWLINE#
return mark_safe ( "<a#SPACE#href='%s'>edit</a>" % url ) #NEWLINE#
ax . add_patch ( rect ) #NEWLINE#
return object . __getattribute__ ( self . base , name ) #NEWLINE#
PROJECT_ROOT = os . path . abspath ( os . path . dirname ( settings_dir ) ) #NEWLINE#
followers_df . reindex ( index = list ( range ( 0 , 20 ) ) ) #NEWLINE#
with open ( filename , 'r' ) as file : #NEWLINE# #INDENT# in_memory_file = file . read ( ) #NEWLINE#
proc . stdin . write ( 'quit\n' ) #NEWLINE#
connection . send_command ( command , * args ) #NEWLINE#
callable_method ( user = user , ** { option_name : user_defaults [ option_name ] } ) #NEWLINE#
list [ 0 : 10 ] #NEWLINE#
conn = sqlite3 . connect ( 'mydb' ) #NEWLINE#
json . dump ( lst , f ) #NEWLINE#
nlines = sum ( 1 for ln in gzip . open ( '/path/to/file/myfile.gz' ) ) #NEWLINE#
self . _applecount += 1 #NEWLINE#
"""http://stackoverflow.com/questions/2165943/removing-html-tags-from-a-text-using-regular-expression-in-python""" #NEWLINE#
np . array ( m [ : , ( 0 ) ] ) #NEWLINE#
parser . parse ( "There's#SPACE#a#SPACE#date#SPACE#09-21#SPACE#in#SPACE#here" , fuzzy = True ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
l [ 0 : : 10 ] #NEWLINE#
print ( '\n#SPACE#Goodbye' ) #NEWLINE#
return buffer ( self ) [ : ] #NEWLINE#
network . draw ( ) #NEWLINE#
t1 . start ( ) #NEWLINE#
"""#SPACE##SPACE##SPACE#s#SPACE#->#SPACE#(s0,s1,...s[n-1]),#SPACE#(s1,s2,...,sn),#SPACE#...#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#""" #NEWLINE#
self . worker . moveToThread ( self . mthread ) #NEWLINE#
List . append ( Item ) #NEWLINE#
f . write ( pat . sub ( jojo , content ) ) #NEWLINE#
print ( tempfile . gettempdir ( ) ) #NEWLINE#
groups = np . array ( [ 0 , 0 , 1 , 2 , 2 , 1 ] ) #NEWLINE#
line = next ( f ) #NEWLINE#
function ( * params ) #NEWLINE#
users . get_current_user ( ) #NEWLINE#
all_data = np . append ( my_data , new_col , 1 ) #NEWLINE#
a = 2 #NEWLINE#
p . wait ( ) #NEWLINE#
print ( ip ) #NEWLINE#
tickers = [ 'AUD#SPACE#Curncy' ] #NEWLINE#
printf ( 'Hello,#SPACE#I#SPACE#will#SPACE#be#SPACE#placed#SPACE#at#SPACE#(x,y)\n' ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
print ( subdict [ 'data3' ] ) #NEWLINE#
etree . tostring ( nodes [ 0 ] ) #NEWLINE#
self . connectButton . clicked . connect ( self . connectToServer ) #NEWLINE#
asyncio . async ( loop . run_in_executor ( None , lambda : MyClass ( ) ) ) #NEWLINE#
super ( C , self ) . __init__ ( ) #NEWLINE#
the_input = list ( open ( 'input.txt' ) ) #NEWLINE#
print ( make_str_unicode ( { 'blah' : [ 'the' , 'quick' , 'brown' , 124 ] } ) ) #NEWLINE#
xfiltered = np . interp ( xi , xi [ mask ] , x [ mask ] ) #NEWLINE#
"""{}#SPACE#{}#SPACE#{}#SPACE#{}""" . format ( * bounds ) #NEWLINE#
contents = f . read ( ) #NEWLINE#
print ( "I'm#SPACE#colorful#SPACE#and#SPACE#exciting!" ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
[ 2 , 3 ] #NEWLINE#
class UserSerializer ( serializers . ModelSerializer ) : #NEWLINE# #INDENT# city = serializers . CharField ( source = 'myuser.city' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# model = User #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# fields = ( 'id' , 'username' , 'password' , 'first_name' , 'last_name' , 'email' , #NEWLINE# 'city' ) #NEWLINE#
list = [ [ 'vegas' , 'London' ] , [ 'US' , 'UK' ] ] #NEWLINE#
plt . scatter ( X , Y ) #NEWLINE#
ax . hold ( True ) #NEWLINE#
from google . appengine . ext . webapp import template #NEWLINE#
name = models . CharField ( max_length = 20 ) #NEWLINE#
[ comment . extract ( ) for comment in comments ] #NEWLINE#
np . issubdtype ( float , np . inexact ) #NEWLINE#
new_dict = { k : d1 [ k ] for k in list ( d1 . keys ( ) ) & wanted_keys } #NEWLINE#
setattr ( sys . modules [ package_name ] , k , getattr ( constants , k ) ) #NEWLINE#
"""path:#SPACE#{path}#SPACE#curr:#SPACE#{curr}#SPACE#prev:#SPACE#{prev}""" . format ( ** mydict ) #NEWLINE#
[ v for k , v in list ( mydict . items ( ) ) if k >= 6 ] #NEWLINE#
print ( self . arrayvar . get ( ) ) #NEWLINE#
raise os . rename ( 'nonexisting_file' , 'def' ) #NEWLINE#
with open ( 'Path/to/file' , 'r' ) as f : #NEWLINE# #INDENT# content = f . read ( ) #NEWLINE# print ( content . index ( 'test' ) ) #NEWLINE#
return self . bulkwalk_index ( ) . get ( index , '<unknown>' ) #NEWLINE#
logging . getLogger ( ) #NEWLINE# logging . getLogger ( 'foo' ) #NEWLINE#
thedata = open ( 'thefile' , 'rb' ) . read ( ) #NEWLINE# sql = 'INSERT#SPACE#INTO#SPACE#sometable#SPACE#(theblobcolumn)#SPACE#VALUES#SPACE#(%s)' #NEWLINE# cursor . execute ( sql , ( thedata , ) ) #NEWLINE#
print ( 'For#SPACE#order#SPACE#2:#SPACE#%.2f#SPACE#seconds' % time_order2 ) #NEWLINE#
plt . plot ( list1 ) #NEWLINE#
print ( etree . tostring ( tree , pretty_print = True ) ) #NEWLINE#
coo = [ ( 0 , 0 ) , ( 0 , 1 ) , ( 0 , 2 ) , ( 1 , 0 ) , ( 1 , 1 ) , ( 1 , 2 ) , ( 2 , 0 ) ] #NEWLINE# get_items ( coo , 2 , 5 ) #NEWLINE#
dir = os . path . dirname ( os . path . dirname ( file ) ) #NEWLINE# dirname1 = os . path . basename ( dir ) #NEWLINE# dirname2 = os . path . split ( dir ) [ 1 ] #NEWLINE#
self . root . overrideredirect ( 1 ) #NEWLINE#
print ( 'return:#SPACE#event.widget#SPACE#is' , event . widget ) #NEWLINE#
m = re . search ( regex , text ) #NEWLINE#
axes . spines [ 'left' ] . set_smart_bounds ( True ) #NEWLINE#
text = text . replace ( '&' , '&' ) #NEWLINE#
print ( 'Found#SPACE#{}' . format ( files_found ) ) #NEWLINE#
cipher = AES . new ( key , AES . MODE_ECB ) #NEWLINE#
conn . close ( ) #NEWLINE#
draw . text ( ( x + extra , l_start_y ) , letter , font = font , fill = 'black' ) #NEWLINE#
return gen . gi_frame is not None and gen . gi_frame . f_lasti == - 1 #NEWLINE#
break #NEWLINE#
return int ( '' . join ( sorted ( str ( n ) , reverse = True ) ) ) #NEWLINE#
old_f . write ( x . replace ( '\n' , '#SPACE#[%s]\n' % str ( datetime . now ( ) ) ) ) #NEWLINE#
plt . gca ( ) . xaxis . set_major_locator ( dates . HourLocator ( ) ) #NEWLINE#
palindrome . is_palindrome ( 'abba' ) #NEWLINE#
x = [ 0 ] * 10 #NEWLINE#
plt . show ( ) #NEWLINE#
parser . print_help ( ) #NEWLINE#
folder = '/home/scorpil' , '/media/sda5/' , '/media/sdb5/' #NEWLINE#
s . strip ( '"' ) #NEWLINE#
plt . switch_backend ( 'wxAgg' ) #NEWLINE#
plt . switch_backend ( 'QT4Agg' ) #NEWLINE#
print ( bool ( each in halum for halum in mainseq ) ) #NEWLINE#
cv2 . imshow ( 'image' , img ) #NEWLINE# cv2 . waitKey ( ) #NEWLINE#
img = Image . open ( 'testimage.jpg' ) #NEWLINE#
def compare ( A , B ) : #NEWLINE# #INDENT# return list ( set ( A ) . intersection ( B ) ) #NEWLINE#
map ( '' . join , product ( a , b , c ) ) #NEWLINE#
m = matrix ( [ [ 1 , 1 ] , [ 1 , 2 ] ] ) #NEWLINE#
cv2 . waitKey ( ) #NEWLINE#
return '#SPACE#' . join ( [ word_reverse ( w ) for w in re . split ( '\\s+' , s ) ] ) #NEWLINE#
Y_pred = model . predict_on_batch ( X_test ) #NEWLINE#
axes [ 1 ] . plot ( [ - 0.5 , 2.5 ] , [ - 0.5 , 4.5 ] ) #NEWLINE#
self . function_count += 1 #NEWLINE#
return redirect ( url_for ( 'index' ) ) #NEWLINE#
smtp . starttls ( ) #NEWLINE#
dt = datetime . datetime . now ( ) #NEWLINE#
os . mkdir ( 'test' ) #NEWLINE#
a = [ 1 , 2 , 3 , 1 , 2 , 1 , 1 , 1 , 3 , 2 , 2 , 1 ] #NEWLINE#
return there . sub ( '' , text ) #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
df [ 'ad_requests' ] [ index ] = df [ 'ad_requests' ] [ index - 1 ] - df [ 'impressions' ] [ #NEWLINE# index - 1 ] #NEWLINE#
axes . spines [ 'top' ] . set_color ( 'none' ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
df #NEWLINE#
print ( [ str ( b ) for b in repo . heads ] ) #NEWLINE#
self . NEWTAGS . append ( tag ) #NEWLINE#
a [ 1 : , 1 : ] #NEWLINE#
df = pd . DataFrame ( np . random . choice ( [ ( 1 , 2 ) , ( 3 , 4 ) , np . nan ] , ( 10 , 10 ) ) ) #NEWLINE#
dictionary = { ( 1 ) : 'one' , ( 2 ) : 'two' , ( 3 ) : 'three' } #NEWLINE#
s = socket ( AF_NETLINK , SOCK_DGRAM ) #NEWLINE#
class A ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# print ( 'world' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class B ( A ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# print ( 'hello' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# super ( B , self ) . __init__ ( ) #NEWLINE#
parser . add_argument ( '--seconds' , type = float , default = 0 ) #NEWLINE#
s = '' . join ( x for x in r if x . isdigit ( ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
repo = Repo ( repo_dir ) #NEWLINE#
[ ( [ ( [ 'a' , '+' , 'b' ] , { } ) , '+' , 'c' ] , { } ) ] , { } #NEWLINE#
list ( dic1 . keys ( ) ) == list ( dic2 . keys ( ) ) #NEWLINE#
return X_train , y_train , X_val , y_val #NEWLINE#
ax . get_xaxis ( ) . set_tick_params ( which = 'both' , direction = 'out' ) #NEWLINE#
chr ( 97 ) #NEWLINE#
e . get_attribute ( 'value' ) #NEWLINE#
object_list = Content . objects . filter ( subset__lte = no_of_subsets ) #NEWLINE#
Channel ( message . reply_channel ) . send ( { 'content' : str ( provider ) } ) #NEWLINE#
a = np . ones ( ( 3 , 3 , 2 ) ) #NEWLINE# np . einsum ( 'i,#SPACE#jki' , v , a ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# server ( ) #NEWLINE#
os . dup2 ( self . _oldstdout_fno , 1 ) #NEWLINE#
print ( ) #NEWLINE#
return list ( itertools . chain ( * lst ) ) #NEWLINE#
pylab . plot ( abs ( fft ) ) #NEWLINE#
return dbkind [ db_type ] ( rest ) #NEWLINE#
return '$10^{{+{:.0f}}}$' . format ( logx ) #NEWLINE#
last = len ( s ) - i - 1 #NEWLINE#
s = 'UserID/ContactNumber' #NEWLINE# re . sub ( '(?<=[a-z])([A-Z])' , '-\\1' , s ) . lower ( ) #NEWLINE#
a [ a == 1 ] += - epsilon #NEWLINE#
a [ np . where ( ~ a [ : , ( - 1 ) ] . astype ( bool ) ) ] #NEWLINE#
dfrand = pd . DataFrame ( data = np . random . randn ( rows , cols ) ) #NEWLINE#
c . setopt ( pycurl . URL , 'http://www.google.com/' ) #NEWLINE#
print ( '>#SPACE#{}' . format ( msg ) ) #NEWLINE#
[ a [ l [ 0 ] + 1 : l [ 1 ] + 1 ] for l in zip ( e , e [ 1 : ] ) ] #NEWLINE#
elements = driver . find_elements_by_class_name ( 'bar' ) #NEWLINE#
my_dict = { ( 'a' , 'c' , 'd' ) : 10 , ( 'b' , 'e' ) : 20 } #NEWLINE# next ( v for k , v in list ( my_dict . items ( ) ) if 'c' in k ) #NEWLINE#
time . tzset ( ) #NEWLINE#
root = lxml . html . parse ( 'train-fix.xml' ) . getroot ( ) #NEWLINE#
foo ( ** d ) #NEWLINE#
G . add_node ( 2 , s = 'o' , b = 3 ) #NEWLINE#
D = { 'a' : 'b' , 'b' : 'd' , 'c' : 'd' , 'd' : 'f' } #NEWLINE#
threading . Timer ( 1.25 , lambda : webbrowser . open ( url ) ) . start ( ) #NEWLINE#
self . hide ( ) #NEWLINE#
return authlogin ( request , * args , ** kwargs ) #NEWLINE#
im . show ( ) #NEWLINE#
__tablename__ = 'Asset_Analysis' #NEWLINE#
y = flatten ( x ) #NEWLINE#
func = make_model ( a = 3 , b = 1 ) #NEWLINE#
user = authenticate ( username = username , password = password ) #NEWLINE#
m2 [ m2 [ : , ( 1 ) ] > 10 ] #NEWLINE#
min ( n for n in a if n > 0.7 ) #NEWLINE#
hfile . seek ( 0 , os . SEEK_END ) #NEWLINE#
df [ 'Adj#SPACE#Close' ] = df [ 'Adj#SPACE#Close' ] . interpolate ( ) #NEWLINE# df #NEWLINE#
X [ : , ( n ) ] += np . dot ( A , colb ) #NEWLINE#
with open ( 'Jfile.txt' , 'w' ) as myfile : #NEWLINE# #INDENT# json . dump ( LoL , myfile ) #NEWLINE#
return super ( ) . __new__ ( cls ) #NEWLINE#
test_points3d ( ) #NEWLINE#
rand_var_2 = tf . Variable ( rand_t ) #NEWLINE#
df [ 'C' ] = pd . to_datetime ( df [ 'C' ] ) #NEWLINE#
sc . close ( ) #NEWLINE#
myDict = dict ( ) . reduceto ( lambda t : t [ 1 ] , lambda o , t : o + t , myTupleList , 0 ) #NEWLINE#
parser . add_argument ( '-o' , action = AssociateAction , dest = argparse . SUPPRESS ) #NEWLINE#
return max ( [ a for a in yourlist if a [ 2 ] >= 100 ] , key = itemgetter ( 1 ) ) #NEWLINE#
points = np . array ( list ( product ( x_p , y_p , z_p ) ) ) #NEWLINE#
print ( 'new#SPACE#connection' ) #NEWLINE#
self [ key ] . extend ( value ) #NEWLINE#
nn . activate ( [ 1 , 1 ] ) #NEWLINE#
call_all ( Test ( ) , 'my#SPACE#input' ) #NEWLINE#
Spam ( ) . foo ( ) #NEWLINE#
return max ( min ( maxn , n ) , minn ) #NEWLINE#
df = pd . DataFrame ( ) #NEWLINE#
a , b , c , d , e , f = sympy . symbols ( 'abcdef' ) #NEWLINE#
timestamp = ( midnight - datetime ( 1970 , 1 , 1 , tzinfo = pytz . utc ) ) . total_seconds ( ) #NEWLINE#
client . server_info ( ) #NEWLINE#
return object . __new__ ( cls ) #NEWLINE#
with open ( 'tree.yaml' , 'r' ) as f : #NEWLINE# #INDENT# doc = yaml . load ( f ) #NEWLINE#
func ( * [ 'file1' , 'file2' , 'file3' ] ) #NEWLINE#
a , b = b , a #NEWLINE#
pd . set_option ( 'display.max_rows' , 500 ) #NEWLINE#
columns = dict ( [ ( x [ 0 ] , x [ 1 : ] ) for x in zip ( * allrows ) ] ) #NEWLINE#
python - virtualenv #NEWLINE#
count += 1 #NEWLINE#
session . commit ( ) #NEWLINE#
def get ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# return self . post ( * args , ** kwargs ) #NEWLINE#
print ( M . shape ) #NEWLINE#
print ( self . cursor . fetchall ( ) ) #NEWLINE#
plt . setp ( ax2 . get_yticklabels ( ) , color = 'darkgreen' ) #NEWLINE# plt . setp ( ax . get_yticklabels ( ) , color = 'darkblue' ) #NEWLINE#
raise ValueError ( 'Cannot#SPACE#create#SPACE#a#SPACE#saved#SPACE#form' ) #NEWLINE#
ax . plot ( [ 6 , 6 ] , [ 1 , 2 ] , label = 'One#SPACE#cm?' ) #NEWLINE#
print ( '\n' . join ( s ) ) #NEWLINE#
result = yaml . load ( fin . read ( ) ) #NEWLINE#
self . set_header ( 'Content-type' , headers [ 'content-type' ] ) #NEWLINE#
r . sub ( 'bar' , s , 1 ) #NEWLINE#
np . array ( [ A2 [ i , slices [ j ] ] for i , j in zip ( [ 0 , 1 , 2 ] , [ 0 , 1 , 0 ] ) ] ) #NEWLINE#
one = df . xs ( 'one' , level = 1 , axis = 1 ) #NEWLINE#
return sorted ( somelist , key = key ) #NEWLINE#
len ( result [ 0 ] ) #NEWLINE#
logging . info ( 'Creating#SPACE#host' ) #NEWLINE#
print ( convertPinyin ( 'Ni3#SPACE#hao3#SPACE#ma0?' ) ) #NEWLINE#
pac = pytz . timezone ( 'US/Pacific' ) #NEWLINE#
t . start ( ) #NEWLINE#
Password = db . Column ( db . String ( 40 ) ) #NEWLINE#
ax . yaxis . set_ticks_position ( 'right' ) #NEWLINE#
toolbox = base . Toolbox ( ) #NEWLINE#
g . add_edge ( 4 , 5 ) #NEWLINE#
f = open ( 'file.py' , 'w' ) #NEWLINE# f . write ( 'dict#SPACE#=#SPACE#' + repr ( dict ) + '\n' ) #NEWLINE# f . close ( ) #NEWLINE#
"""Translate#SPACE#the#SPACE#received#SPACE#message""" #NEWLINE#
"""Change#SPACE#the#SPACE#state#SPACE#of#SPACE#the#SPACE#pipe#SPACE#depending#SPACE#on#SPACE#current#SPACE#state""" #NEWLINE#
w . setLayout ( lay ) #NEWLINE#
doc = BeautifulSoup ( xml ) #NEWLINE#
yield scrapy . Request ( phone_url , callback = self . parse_phone ) #NEWLINE#
find_element_by_css_selector ( "select#numReturnSelect#SPACE#>#SPACE#option[value='15000']" #NEWLINE# ) . click ( ) #NEWLINE#
enumerate ( j for j in range ( 10 ) if 3 < j and j < 8 ) #NEWLINE#
r . cookies . get_dict ( ) #NEWLINE#
s #NEWLINE# print ( s . decode ( 'unicode_escape' ) . encode ( 'ascii' , 'ignore' ) ) #NEWLINE#
z = numpy . array ( [ ( 1 , 2 ) , ( 3 , 4 ) ] ) #NEWLINE#
L = [ '1' , '1' , '1' , '1' , '2' , '2' , '2' ] #NEWLINE#
label = tk . Label ( image = image ) #NEWLINE#
print ( 'Contents#SPACE#of#SPACE#our#SPACE#stdout#SPACE#pipe:' ) #NEWLINE#
im = cv2 . imread ( '../media/basketball.jpg' ) #NEWLINE#
expr1 , expr2 , expr3 , expr4 #NEWLINE#
c . showPage ( ) #NEWLINE#
proc = subprocess . Popen ( [ 'cdrecord' , '--help' ] , stderr = subprocess . PIPE ) #NEWLINE#
df [ 'date1' ] = df1 . groupby ( [ 'ID' ] ) [ 'DATE' ] . apply ( lambda d : d . shift ( ) ) #NEWLINE#
plt . figure ( 1 , figsize = ( 6 , 5 ) ) #NEWLINE#
cur . execute ( sql , data ) #NEWLINE#
a [ 'a' ] [ 'b' ] [ 'c' ] = 1 #NEWLINE#
frames . append ( numpy . fromstring ( data , dtype = numpy . int16 ) ) #NEWLINE#
return np . max ( x , axis = axis ) - np . min ( x , axis = axis ) #NEWLINE#
min ( _ , key = lambda pair : pair [ 0 ] / pair [ 1 ] ) #NEWLINE#
rows = page . xpath ( 'body/table' ) [ 0 ] . findall ( 'tr' ) #NEWLINE#
return new_list #NEWLINE#
x [ 1 : 3 , 3 : 6 ] #NEWLINE#
main ( ) #NEWLINE#
"""{:>20}""" . format ( dt ) #NEWLINE#
[ unique . append ( item ) for item in sequence if item not in unique ] #NEWLINE#
server . ehlo ( ) #NEWLINE#
pd . DataFrame ( df . values [ a ] , df . index . values [ a ] , df . columns ) #NEWLINE#
return datetime . fromtimestamp ( time . mktime ( timestamp ) ) #NEWLINE#
self . window . run_command ( 'move_to_group' , { 'group' : 1 } ) #NEWLINE#
sandwich ( ) #NEWLINE#
driver . get ( 'http://google.com' ) #NEWLINE#
f . write ( response . read ( ) ) #NEWLINE#
sys . path . append ( os . path . normpath ( os . path . join ( foo_dir , '..' , '..' ) ) ) #NEWLINE#
documents = [ '#SPACE#' . join ( [ stem ( word ) for word in sentence . split ( '#SPACE#' ) ] ) for #NEWLINE# sentence in documents ] #NEWLINE#
( 2 , 7 ) , ( 3 , 6 ) , ( 3 , 7 ) , ( 4 , 5 ) , ( 4 , 6 ) , ( 5 , 4 ) , ( 5 , 5 ) , ( 6 , 3 ) , ( 6 , 4 ) , ( 7 , 2 #NEWLINE# ) , ( 7 , 3 ) #NEWLINE#
sock . bind ( ( '127.0.0.1' , 12346 ) ) #NEWLINE#
print ( a . base ) #NEWLINE#
accidentals = '(?:#|##|b|bb)?' #NEWLINE# chords = '(?:maj|min|m|sus|aug|dim)?' #NEWLINE#
lambda x : x == i or x % i != 0 #NEWLINE#
s . rsplit ( None , 1 ) [ 0 ] #NEWLINE#
super ( programmers , self ) . __init__ ( fName , lName , salary ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE# ax . yaxis . set_visible ( False ) #NEWLINE#
html_page . save ( 'test_page.html' ) #NEWLINE#
heapq . _siftdown ( h , 0 , i ) #NEWLINE#
ixs = np . array ( [ 2 , 1 , 1 ] ) #NEWLINE#
raise Exception ( 'Exceptions#SPACE#in#SPACE#other#SPACE#threads:#SPACE#%s' % tracebacks ) #NEWLINE#
anim . save ( 'path.mp4' , writer = mywriter ) #NEWLINE#
draw . line ( ( ( x1 , y1 ) , ( x2 , y2 ) ) , fill = color , width = 1 ) #NEWLINE#
df #NEWLINE#
from bs4 import BeautifulSoup #NEWLINE#
print ( list ( zip_longest ( a , b , fillvalue = '' ) ) ) #NEWLINE# [ ( '1' , '11' ) , ( '2' , '22' ) , ( '' , '33' ) , ( '' , '44' ) ] #NEWLINE#
z = np . array ( [ 1 , 2 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
A = np . array ( [ [ 0 , 1 , 0 ] , [ 0 , 2 , 0 ] , [ 0 , 0 , 3 ] ] ) #NEWLINE#
return - ( - x ) ** ( 1 / 3 ) #NEWLINE#
app . run ( threaded = True ) #NEWLINE# app . run ( processes = 2 ) #NEWLINE#
body = StringField ( 'Text' , widget = TextArea ( ) ) #NEWLINE#
return '' . join ( c for c in s . lower ( ) if c in letter_set ) #NEWLINE#
return pd . DataFrame ( d ) #NEWLINE#
fig = PLT . figure ( ) #NEWLINE#
[ a for a , b in [ ( 2 , 3 ) , ( 4 , 5 ) ] ] #NEWLINE#
return fn ( * args , ** kwargs ) #NEWLINE#
r [ numpy . isreal ( r ) ] #NEWLINE#
logger . addHandler ( SysLogHandler ( '/dev/log' ) ) #NEWLINE#
bucket = s3 . get_bucket ( 'boto-lifecycle-test' ) #NEWLINE#
newcmap = matplotlib . colors . LinearSegmentedColormap ( name , cdict ) #NEWLINE#
print ( json . dumps ( dict ( rh ) ) ) #NEWLINE#
cherrypy . config . update ( config ) #NEWLINE#
self . assertEqual ( r . status_code , 200 ) #NEWLINE#
super ( A_1 , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
lxml . html . document_fromstring ( '' ) #NEWLINE#
hello . ff ( x , y ) #NEWLINE#
return sum ( np . asarray ( listOfEmb , dtype = float ) ) / float ( len ( listOfEmb ) ) #NEWLINE#
df [ 'A' ] = pd . to_datetime ( df [ 'A' ] ) #NEWLINE#
pattern = re . compile ( 'A\\*(.*?)(\\*.*?B\\*)(.*?)\\*' ) #NEWLINE# pattern . sub ( 'A*\\3\\2\\1*' , s ) #NEWLINE#
self . is_staff = None #NEWLINE#
self . process = subprocess . Popen ( args , shell = True ) #NEWLINE#
unittest . main ( ) #NEWLINE#
addition . extend ( array ) #NEWLINE#
ax3 = plt . subplot2grid ( ( 3 , 2 ) , ( 1 , 0 ) ) #NEWLINE#
eval ( 's#SPACE#+#SPACE#1' ) #NEWLINE#
eval ( 's' ) #NEWLINE#
return func ( * a , ** kwargs ) #NEWLINE#
s = s . encode ( 'unicode-escape' ) . decode ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
device . close ( ) #NEWLINE#
return dict ( ( k , rank_a [ k ] - i ) for i , k in rank_b ) #NEWLINE#
df [ 'A' ] . duplicated ( ) #NEWLINE#
nx . draw ( G , pos ) #NEWLINE#
CV_rfc . fit ( X , y ) #NEWLINE#
exitstatus = ( status & 65280 ) >> 8 #NEWLINE#
x . reset_index ( ) #NEWLINE#
fig . colorbar ( surf , shrink = 0.5 , aspect = 5 ) #NEWLINE#
a [ - 4 : ] #NEWLINE#
init = tf . initialize_all_variables ( ) #NEWLINE#
pass #NEWLINE#
'\x00' , '\t' , 'p' , 'H' , 'Y' , 's' , '\x00' #NEWLINE#
'\x00' , '\x0e' , 'Ã' , '\x00' , '\x00' , '\x0e' , 'Ã' #NEWLINE#
'\x01' , 'Ç' , 'o' , '¨' , 'd' , '\x00' , '\x00' #NEWLINE#
'\r' , '\x08' , '%' , '/' , '\xad' , '+' , 'Z' #NEWLINE#
matplotlib . use ( 'AGG' ) #NEWLINE#
markers = [ 'configure.in' , 'configure.ac' , 'makefile.am' ] #NEWLINE#
isinstance ( Caps ( 'foo' ) , str ) #NEWLINE#
newPic . save ( ) #NEWLINE#
words = s . split ( '/' ) #NEWLINE#
with open ( 'some.csv' , newline = '' ) as f : #NEWLINE# #INDENT# reader = csv . reader ( f ) #NEWLINE# for row in reader : #NEWLINE# #INDENT# break #NEWLINE#
unittest . main ( ) #NEWLINE#
[ ( a if c else b ) for item in list ] #NEWLINE#
g = df . groupby ( [ 'col1' , 'col2' ] ) #NEWLINE#
from kivy . uix . button import Button #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
entities = MyEntity . query . order_by ( MyEntity . my_date . desc ( ) ) . limit ( 3 ) . all ( ) #NEWLINE#
file . seek ( 4 ) #NEWLINE#
from pymongo import MongoClient #NEWLINE#
return eval ( '1+2+a' , locals ( ) ) #NEWLINE#
"""┌───────┐""" #NEWLINE#
ftp . cwd ( directory ) #NEWLINE#
self . data . append ( item ) #NEWLINE#
{ 'b' : 'bee' , 'c' : { 'cats' : [ 'blacky' , 'tiger' ] , 'dogs' : [ 'rex' , 'king' ] } , #NEWLINE# 'd' : { 'more_c' : { 'cats' : [ 'blacky' , 'tiger' ] , 'dogs' : [ 'rex' , 'king' ] } } } #NEWLINE#
def __init__ ( self , ** kwargs ) : #NEWLINE# #INDENT# super ( Child , self ) . __init__ ( ** kwargs ) #NEWLINE#
bins = numpy . linspace ( 0 , 1 , 10 ) #NEWLINE#
return list . __getitem__ ( self , index % len ( self ) ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
print ( ( 'UDP#SPACE#target#SPACE#port:' , UDP_PORT ) ) #NEWLINE#
open ( None ) #NEWLINE#
plt . grid ( True , ls = '-' , linewidth = 0.4 , color = '#ffffff' , alpha = 0.5 ) #NEWLINE#
res . ready ( ) #NEWLINE#
button . clicked . connect ( self . onStart ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
class B ( A ) : #NEWLINE# #INDENT# x = None #NEWLINE#
db = MySQLdb . connect ( '****' , '****' , '****' , '****' ) #NEWLINE#
neuron . draw ( ) #NEWLINE#
lst = [ [ 1 , 2 ] , [ 4 , 5 , 6 ] , [ ] , None , [ 7 , 12 , 14 , 16 ] ] #NEWLINE#
pl . yticks ( [ ] ) #NEWLINE#
re . split ( '\\s+and\\s+|,(?!\\s*Ph\\.D\\.)\\s*' , #NEWLINE# 'Joe,#SPACE#Dave,#SPACE#Professional,#SPACE#Ph.D.#SPACE#and#SPACE#Someone#SPACE#else' ) #NEWLINE#
ax1 . plot ( list ( range ( 10 ) ) ) #NEWLINE#
table . show ( ) #NEWLINE#
hash ( 1 ) #NEWLINE#
w . writerows ( list ( somedict . items ( ) ) ) #NEWLINE#
a = zeros ( ( 2 , 5 ) ) #NEWLINE# a . shape #NEWLINE#
sc . stop ( ) #NEWLINE#
import numpy as np #NEWLINE#
web_app = webapp2 . WSGIApplication ( [ ( '/' , HelloWorld ) ] ) #NEWLINE#
raise ValueError ( 'Cannot#SPACE#call#SPACE#weak#SPACE#method#SPACE#with#SPACE#dead#SPACE#instance' ) #NEWLINE#
image_output . write ( data . decode ( 'base64' ) ) #NEWLINE#
print ( row [ 0 ] , row [ 1 ] ) #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
print ( metrics . accuracy_score ( y [ 100 : ] , clf . predict ( X [ 100 : ] ) ) ) #NEWLINE#
tuple_list = [ ( 1 , 'a' ) , ( 2 , 'b' ) , ( 3 , 'c' ) ] #NEWLINE#
pass #NEWLINE#
def reverse ( sentence ) : #NEWLINE# #INDENT# return '#SPACE#' . join ( [ word [ : : - 1 ] for word in sentence . split ( ) ] ) #NEWLINE#
"""([0-9]+)\\s*[xX*]\\s*(?=[0-9]+)""" #NEWLINE#
db . session . add_all ( users ) #NEWLINE#
return obj [ 'name' ] #NEWLINE#
app . register_blueprint ( dashboard , url_prefix = '/dashboard' ) #NEWLINE#
__init__ . py #NEWLINE#
def way6 ( theList , theDict ) : #NEWLINE# #INDENT# return [ item for item in theList if item in theDict ] #NEWLINE#
data = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
do_print ( 'redirected' ) #NEWLINE#
pow2 ( a , out = a , num_threads = 4 ) #NEWLINE#
return datetime . timedelta ( seconds = result ) #NEWLINE#
cv . Smooth ( color_image , color_image , cv . CV_GAUSSIAN , 3 , 0 ) #NEWLINE#
print ( config . getboolean ( 'example' , 'is_real' ) ) #NEWLINE#
b [ : , : - 1 ] = a #NEWLINE#
for key in list ( maindict . keys ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
axes . plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
norm = mpl . colors . Normalize ( vmin = 0 , vmax = 1 ) #NEWLINE#
sun . compute ( '2011/05/04' , '2011/05/04' ) #NEWLINE#
matrix ( [ [ 0.0 , - 1.0 , - 1.0 , 0.0 ] , [ 0.0 , 0.0 , 1.0 , 1.0 ] ] ) #NEWLINE#
do_stuff ( ) #NEWLINE#
self . buf . write ( contents ) #NEWLINE#
print ( ( r , '#SPACE#:#SPACE#' , s ) ) #NEWLINE#
print ( [ item for item in flatten ( option ) if item != '#SPACE#' ] ) #NEWLINE#
sys . stdout . write ( '#' * ( 40 - progress_x ) + ']\n' ) #NEWLINE#
item [ 'desc2' ] = 'test2' #NEWLINE#
item [ 'desc3' ] = 'test3' #NEWLINE#
df . iloc [ np . random . permutation ( len ( df ) ) ] #NEWLINE#
cleanedList = [ x for x in countries if x != 'nan' ] #NEWLINE#
plt . figure ( ) #NEWLINE#
[ 1 , 1 , 0 , 0 , 0 , 0 , 0 ] #NEWLINE#
minPricedItem = min ( lst , key = lambda x : x [ 'price' ] ) #NEWLINE#
mylist = sorted ( mylist , key = itemgetter ( 'name' , 'age' ) ) #NEWLINE#
self . fields [ 'winner' ] . queryset = my_category . category . all ( ) #NEWLINE#
keys_to_delete = [ k for k , v in d . items ( ) if v == val_to_delete ] #NEWLINE#
[ '1' , '2' ] #NEWLINE#
count += 1 #NEWLINE#
self . socket . shutdown ( SHUT_WR ) #NEWLINE#
order = models . PositiveIntegerField ( blank = True , null = True ) #NEWLINE#
process ( line ) #NEWLINE#
return myFunction ( * args , ** kwargs ) #NEWLINE#
help ( bytes ) #NEWLINE#
any ( c in badChars for c in yourString ) #NEWLINE#
ax1 = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
setattr ( request , 'session' , 'session' ) #NEWLINE#
print ( 'I#SPACE#did#SPACE#not#SPACE#understand#SPACE#your#SPACE#question.#SPACE#Please#SPACE#rephrase#SPACE#it.' ) #NEWLINE#
field . get_attname_column ( ) #NEWLINE#
reason = json . loads ( e . content ) . reason #NEWLINE#
soup = BeautifulSoup ( urllib . request . urlopen ( address ) . read ( ) ) #NEWLINE#
d1 . move_to_end ( 'c' , last = False ) #NEWLINE#
struct . unpack ( '>Q' , '\x00' * ( 8 - len ( s ) ) + s ) #NEWLINE#
pass #NEWLINE#
a = open ( 'output.txt' , 'w' ) #NEWLINE#
[ '*.txt' ] #NEWLINE#
win32gui . SendMessage ( trayArea , win32con . WM_SETFOCUS , 0 , 0 ) #NEWLINE#
myre = re . compile ( '(.*?):([^-]*)-(.*)' ) #NEWLINE#
dictionary = { 'C1' : [ 10 , 20 , 30 ] , 'C2' : [ 20 , 30 , 40 ] } #NEWLINE#
b [ 1 ] . set_linewidth ( 3 ) #NEWLINE#
type ( _ ) #NEWLINE#
thingy = list ( map ( str , [ 'accelerate' , 'acute' , 'bear' , 'big' ] ) ) #NEWLINE#
entry1 . grid ( row = 1 , column = 1 ) #NEWLINE#
DirectClass . __init__ ( self ) #NEWLINE#
headers . put ( 'x-delay' , 5000 ) #NEWLINE#
lists = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
"""(?P<permissions>[d-][rwx-]{9})\\s{1,20}(?P<links>\\d{1,8})\\s{1,20}(?P<owner>[\\w-]{1,16})\\s{1,20}(?P<group>[\\w-]{1,16})\\s{1,20}(?P<size>\\d{1,16})\\s{1,20}(?P<month>[A-Za-z]{0,3})\\s{1,20}(?P<date>\\d{1,2})\\s{1,20}(?P<timeyear>[\\d:]{4,5})\\s{1,20}(?P<filename>[\\s\\w.-]+?)(?=[drwx-]{10}|$)""" #NEWLINE#
return datetime . strptime ( date_string , '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
return datetime . strptime ( date_string , '%Y-%m-%dT%H:%MZ' ) #NEWLINE#
names = [ 'aet2000' , 'ppt2000' , 'aet2001' , 'ppt2001' ] #NEWLINE#
sys . path . insert ( 0 , my_site ) #NEWLINE#
x = [ [ int ( float ( j ) ) for j in i ] for i in x ] #NEWLINE#
self . poles . set_text ( '4' ) #NEWLINE#
print ( get_all_substrings ( 'abcde' ) ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE# ax . pbaspect = [ 2.0 , 0.6 , 0.25 ] #NEWLINE#
count = len ( re . findall ( '\\w+' , line ) ) #NEWLINE#
re . sub ( '[^-\\w]' , '#SPACE#' , 'black-white' ) #NEWLINE# re . sub ( '[^-\\w]' , '#SPACE#' , 'black#white' ) #NEWLINE#
isinstance ( d , ( dict , collections . MutableMapping ) ) #NEWLINE#
return list ( set ( newIntersections ) ) #NEWLINE#
"""""" . join ( i ) #NEWLINE#
raise TypeError ( 'aaaaaaaaaaaaaaaa' + 'aaaaaaaaaaaaaaaa' + 'aaaaaaaaaaaaaaaa' ) #NEWLINE#
f = open ( 'anadict.txt' , 'r' ) #NEWLINE#
print ( now_berlin . strftime ( fmt ) ) #NEWLINE#
print ( sys . path ) #NEWLINE#
s = 'aaaaa' #NEWLINE#
d . tzinfo is not None and d . tzinfo . utcoffset ( d ) is not None #NEWLINE#
1 - 1.0023 #NEWLINE#
writer . writerow ( [ subject , itemID , bias1Answer ] ) #NEWLINE#
print ( getsizeof ( 'Ð¹Ñ\x86Ñ\x8b' . decode ( 'utf8' ) ) ) #NEWLINE#
mydict [ index ( 1 , 2 , max ) ] = 'xxx' #NEWLINE#
m = regex . sub ( '(?<=#SPACE#|^)(\\S+)(?:#SPACE#\\1){2,}(?=#SPACE#|$)' , '\\1#SPACE#\\1' , s ) #NEWLINE#
from boto3 import Session #NEWLINE#
sh = wb . sheet_by_index ( 0 ) #NEWLINE#
user = User . objects . create_user ( 'foo' , password = 'bar' ) #NEWLINE#
now = datetime . utcnow ( ) #NEWLINE#
list ( islice ( iter ( preresult . items ( ) ) , 100 ) ) [ - 10 : ] #NEWLINE#
new_d = [ ] #NEWLINE# for x in d : #NEWLINE# #INDENT# if x not in new_d : #NEWLINE# #INDENT# #INDENT# new_d . append ( x ) #NEWLINE#
data = int ( eval ( input ( 'Enter#SPACE#a#SPACE#number:#SPACE#' ) ) , 16 ) #NEWLINE#
a = 10 #NEWLINE# globals ( ) [ 'a' ] #NEWLINE#
pass #NEWLINE#
conn . send ( data ) #NEWLINE#
file_handler . setLevel ( logging . DEBUG ) #NEWLINE#
g = df . groupby ( [ 'unique_id' , 'period_id' ] , as_index = False ) #NEWLINE#
l = [ 'element1\t0238.94' , 'element2\t2.3904' , 'element3\t0139847' ] #NEWLINE#
s = re . sub ( '\\s+' , '' , s ) #NEWLINE#
'TOK' , '<MY_TOKEN>' #NEWLINE#
now = datetime . now ( pytz . timezone ( tzname ) ) #NEWLINE#
s . capture ( 'http://webscraping.com/blog' , 'blog.png' ) #NEWLINE#
self . frame . pack ( ) #NEWLINE#
r . connect ( 'localhost' , 28015 ) . repl ( ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE# plt . show ( ) #NEWLINE#
return reverse ( 'target_view' , args = ( self . request . GET [ 'id' ] , ) ) #NEWLINE#
self . entryPopup . place ( x = 0 , y = y + pady , anchor = W , relwidth = 1 ) #NEWLINE#
print ( date_conv . strftime ( '%d-%m-%Y' ) ) #NEWLINE#
cherrypy . config . update ( config ) #NEWLINE#
log . warn ( '1234567:#SPACE#exception#SPACE#-#SPACE#' + str ( e ) ) #NEWLINE#
print ( C [ np . searchsorted ( C [ : , ( 0 ) ] , I ) ] ) #NEWLINE#
t . daemon = True #NEWLINE#
self . canvas = tk . Canvas ( root , borderwidth = 0 , background = '#ffffff' ) #NEWLINE#
request = urllib . request . Request ( 'http://example.org' , data = 'your_put_data' ) #NEWLINE#
metadata . bind = create_engine ( 'sqlite:///:memory:' , echo = True ) #NEWLINE#
df = pd . DataFrame ( data = d ) #NEWLINE#
my_instance . save ( ) #NEWLINE#
df1 . columns = pd . MultiIndex . from_tuples ( [ ( c , '' , '' ) for c in df1 ] ) #NEWLINE# pd . concat ( [ df2 , df1 ] , axis = 1 ) #NEWLINE#
map ( functools . partial ( myFunc , some_arg = additionalArgument ) , pages ) #NEWLINE#
supersets . append ( s ) #NEWLINE#
rdf . groupby ( pd . TimeGrouper ( freq = freq , closed = 'right' , label = 'right' ) ) . sum ( ) #NEWLINE#
plt . figure ( ) #NEWLINE#
plt . title ( 'Digital#SPACE#filter#SPACE#frequency#SPACE#response' ) #NEWLINE#
print ( ( 'Started:' , datetime . datetime . now ( ) , self . max_number ) ) #NEWLINE#
print ( 'ERROR!#SPACE#Enter#SPACE#a#SPACE#valid#SPACE#minute#SPACE#in#SPACE#the#SPACE#future.' ) #NEWLINE#
self . response . write ( '-#SPACE#email#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#=#SPACE#%s\n' % user . email ( ) ) #NEWLINE#
return seq [ : : 2 ] , seq [ 1 : : 2 ] #NEWLINE#
os . remove ( thefifo ) #NEWLINE#
self . redraw ( ) #NEWLINE#
response = self . app . do_something ( '/item/1234567890' ) #NEWLINE# assert response . status_code == 200 #NEWLINE#
json . dumps ( fb . _asdict ( ) ) #NEWLINE#
pool . close ( ) #NEWLINE#
nx . draw ( G , edgelist = edges , edge_color = colors , width = 10 ) #NEWLINE#
train_op = tf . group ( train_op1 , train_op2 ) #NEWLINE#
self . redraw ( ) #NEWLINE#
timeit . Timer ( timewrapper ) #NEWLINE#
text = str ( text ) . decode ( 'utf-8' ) #NEWLINE#
process . start ( ) #NEWLINE#
df . memory_usage ( index = True ) . sum ( ) #NEWLINE#
s = set ( [ 1 , 2 , 3 ] ) #NEWLINE# list ( s ) [ 0 ] #NEWLINE#
df . loc [ df [ col ] > 360 , col ] -= 360 #NEWLINE#
df2 = pd . DataFrame ( { 'A' : [ a ] , 'B' : [ b ] } ) #NEWLINE#
setattr ( A , name , _method ) #NEWLINE#
float ( Fraction ( '1/2' ) ) #NEWLINE#
return c . max ( ) #NEWLINE#
process_exists ( 'powershell.exe' ) #NEWLINE#
frame . ix [ frame . index [ i ] ] #NEWLINE#
d = manager . dict ( ) #NEWLINE# d [ 1 ] = '1' #NEWLINE# d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
df = pd . read_csv ( 'data.csv' , header = None ) #NEWLINE#
self . _calendar . bind ( '<ButtonPress-1>' , self . _pressed ) #NEWLINE#
dt = datetime . datetime . now ( ) #NEWLINE#
df . columns = pd . MultiIndex . from_tuples ( df . columns ) #NEWLINE#
self . assertEqual ( auth_result , attempted_auth_result ) #NEWLINE#
url = 'http://stackoverflow.com/search?q=question' #NEWLINE#
raise ValueError ( 'must#SPACE#supply#SPACE#a#SPACE#finite#SPACE#list#SPACE#for#SPACE#paranoid' ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
self . tree . pack ( ) #NEWLINE#
shutil . rmtree ( dir ) #NEWLINE#
cpplib = cdll . LoadLibrary ( 'call_callback.so' ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_RAW , socket . IPPROTO_IP ) #NEWLINE#
protocol = TBinaryProtocol . TBinaryProtocol ( transport ) #NEWLINE#
ser . hist ( cumulative = True , normed = 1 , bins = 100 ) #NEWLINE#
pat = re . compile ( '(foo|bar)\\.trailingString' ) #NEWLINE#
pat = re . compile ( 'foo|bar' ) #NEWLINE#
df = pd . DataFrame ( df , columns = sorted ( custom_dict , key = custom_dict . get ) ) #NEWLINE#
for a in listofobs : #NEWLINE# #INDENT# pass #NEWLINE#
re . sub ( pattern , '\\1#SPACE#xby#SPACE#' , '2x4' ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
emit ( 'doingSomething' , 'checking#SPACE#is#SPACE#started' ) #NEWLINE#
print ( res . json ( ) ) #NEWLINE#
clf . fit ( np_training , np_labels ) #NEWLINE#
file_content = gzf . read ( ) #NEWLINE#
df2 = DataFrame ( 0 , index = list ( 'afg' ) , columns = [ 1 , 2 ] ) #NEWLINE#
pool = multiprocessing . Pool ( 4 , maxtasksperchild = 1 ) #NEWLINE#
wave_file . writeframes ( frame_data ) #NEWLINE#
root . update_idletasks ( ) #NEWLINE#
col . set_title ( 'Title' ) #NEWLINE#
pylab . ion ( ) #NEWLINE#
np . zeros ( a . shape , bool ) | ( a [ : , ( 0 ) ] == 1 ) [ : , ( None ) ] #NEWLINE#
open ( '/tmp/log' , 'a' ) . write ( s ) #NEWLINE#
print ( [ list ( words ) for key , words in itertools . groupby ( data , init ) ] ) #NEWLINE#
p = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
def __iter__ ( self ) : #NEWLINE# #INDENT# return iter ( self . books . values ( ) ) #NEWLINE#
print ( response . body ) #NEWLINE#
f = lambda : i #NEWLINE#
pd . isnull ( np . datetime64 ( 'NaT' ) ) #NEWLINE#
sizer . Add ( hsizer , 0 , wx . EXPAND ) #NEWLINE#
array ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , #NEWLINE# 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 ] ) #NEWLINE#
response = self . app . post ( '/test_function' , data = json . dumps ( dict ( foo = 'bar' ) ) , #NEWLINE# content_type = 'application/json' ) #NEWLINE#
self . crawler . engine . crawl ( self . create_request ( ) , self ) #NEWLINE#
return datetime . combine ( d , datetime . min . time ( ) ) #NEWLINE#
fuzz . partial_ratio ( 'this#SPACE#is#SPACE#a#SPACE#test' , 'this#SPACE#is#SPACE#a#SPACE#test!' ) #NEWLINE#
df = pandas . read_excel ( 'sample.xls' ) #NEWLINE#
some_func ( * params ) #NEWLINE#
return str ( lst [ 0 ] ) , lst [ 1 : ] #NEWLINE#
stringList = Permute ( 'abc' ) #NEWLINE#
my_dictionary . len ( ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
{ { label } } #NEWLINE#
print ( 'Found#SPACE#all#SPACE#of#SPACE#them' ) #NEWLINE#
h2 . setLevel ( logging . WARNING ) #NEWLINE#
df1 = pd . DataFrame ( { 'fruit_name' : [ 'banana' , 'lemon' ] } ) #NEWLINE#
print ( [ item for sublist in [ ( rep * [ i ] ) for i in a ] for item in sublist ] ) #NEWLINE#
test = set ( numpy . random . randint ( 0 , 10 , 5 ) ) #NEWLINE#
m . start ( ) #NEWLINE#
message += 'Subject:#SPACE#' + mail [ 'Subject' ] + '\n' #NEWLINE#
message += 'Date:#SPACE#' + mail [ 'Date' ] + '\n' #NEWLINE#
def test ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
delfile . seek ( 0 ) #NEWLINE#
"""naïveté""" . encode ( 'string_escape' ) #NEWLINE#
filteres_primes = ( p for p in primes if '0' not in str ( p ) ) #NEWLINE#
del str #NEWLINE#
a = [ 3 , 5 , 6 ] #NEWLINE#
author = models . ForeignKey ( User ) #NEWLINE#
HypotheticalBranch ( 1 , 4 , 2 ) #NEWLINE#
a . __class__ . __name__ #NEWLINE#
bop . pack ( side = tk . LEFT ) #NEWLINE#
print ( contains ( 'bababa' , 'k' ) ) #NEWLINE#
[ tuple ( x for y in i for x in y ) for i in list ( d . items ( ) ) ] #NEWLINE#
ax . set_xticklabels ( [ ] ) #NEWLINE#
atags = soup . find_all ( 'a' , { 'class' : 'add_to_compare' } ) #NEWLINE#
l . append ( i ) #NEWLINE#
urllib . request . urlopen ( 'http://127.0.0.1:8000' , data = '' ) #NEWLINE#
print ( 'closing#SPACE#the#SPACE#bar' ) #NEWLINE#
print ( 'before' ) #NEWLINE#
print ( 'after#SPACE#gc' ) #NEWLINE#
float_formatter = lambda x : '%.2f' % x #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
print ( 'replaced!' ) #NEWLINE#
data = urllib . parse . urlencode ( params ) #NEWLINE#
def IntersectDicts ( d1 , d2 ) : #NEWLINE# #INDENT# return dict ( [ k_v for k_v in list ( d1 . items ( ) ) if k_v [ 0 ] in d2 and d2 [ k_v #NEWLINE# [ 0 ] ] == k_v [ 1 ] ] ) #NEWLINE#
plt . figure ( figsize = ( 3.841 , 7.195 ) , dpi = 100 ) #NEWLINE#
workbook . close ( ) #NEWLINE#
b = df . iloc [ : , 1 : ] . values #NEWLINE#
print ( '\n' + '' . join ( traceback . format_exception ( type , value , tb ) ) . strip ( '\n' ) ) #NEWLINE#
np . apply_along_axis ( lambda x : ( x - np . mean ( x ) ) / np . std ( x ) , 0 , Mat ) #NEWLINE#
next ( value ) #NEWLINE#
resp , content = h . request ( 'http://127.0.0.1:5000/' ) #NEWLINE#
s . readline ( ) #NEWLINE#
K [ np . ix_ ( np . arange ( K . shape [ 0 ] ) , train , train ) ] #NEWLINE#
container . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE#
d . update ( { str ( i * 2 ) : '1' for i in range ( n ) } ) #NEWLINE#
y_interp = scipy . interpolate . interp1d ( x , y ) #NEWLINE#
self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
raise TypeError ( 'Argument#SPACE#%s#SPACE#is#SPACE#required' % arg ) #NEWLINE#
return datetime . date ( date . year , date . month , date . day ) #NEWLINE#
LOGIN_REQUIRED_URLS = '/private_stuff/(.*)$' , '/login_required/(.*)$' #NEWLINE#
_myql . __version__ #NEWLINE#
G . add_node ( 1 , s = '^' , b = 2 ) #NEWLINE#
logging . basicConfig ( filename = log_name ) #NEWLINE#
stdout . flush ( ) #NEWLINE#
B . IMC = IMC #NEWLINE#
"""Return#SPACE#val*self""" #NEWLINE#
"""Evaluate#SPACE#at#SPACE#X==val""" #NEWLINE#
"""Test#SPACE#self==val""" #NEWLINE#
"""Return#SPACE#-self""" #NEWLINE#
"""Return#SPACE#val+self""" #NEWLINE#
"""Return#SPACE#val-self""" #NEWLINE#
"""Return#SPACE#string#SPACE#formatted#SPACE#as#SPACE#aX^3#SPACE#+#SPACE#bX^2#SPACE#+#SPACE#c^X#SPACE#+#SPACE#d""" #NEWLINE#
"""Return#SPACE#self-val""" #NEWLINE#
"""Remove#SPACE#trailing#SPACE#0-coefficients""" #NEWLINE#
isBlank = all ( band . getextrema ( ) == ( 255 , 255 ) for band in bands ) #NEWLINE#
ax . set_xticks ( [ 0.15 , 0.68 , 0.97 ] ) #NEWLINE#
( labels == 0 ) . astype ( np . float32 ) #NEWLINE#
doSomething ( a , b , c ) #NEWLINE#
sys . setrecursionlimit ( 10000 ) #NEWLINE#
gp2 . append ( float ( i ) ) #NEWLINE#
logger = logging . getLogger ( 'request_logger' ) #NEWLINE#
soup = BeautifulSoup ( response . text ) #NEWLINE#
print ( [ d . b [ i ] for i in range ( 5 ) ] ) #NEWLINE#
raise Exception ( 'inner' ) #NEWLINE#
raise Exception ( 'stuff' ) #NEWLINE#
s . find ( '$' ) == - 1 #NEWLINE#
PLT . show ( ) #NEWLINE#
print ( 'original#SPACE#length:' , len ( s ) ) #NEWLINE#
return i + 1 #NEWLINE#
self . axes = self . figure . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
df . to_sql ( name = 'test_table' , if_exists = 'append' , con = conn ) #NEWLINE#
lambda num : num % 2 != 0 #NEWLINE#
els [ - 1 ] #NEWLINE#
author = models . ForeignKey ( Author ) #NEWLINE#
avg_array = ( data_array [ : : 2 ] + data_array [ 1 : : 2 ] ) / 2 #NEWLINE#
data = 'Please#SPACE#encrypt#SPACE#my#SPACE#data' #NEWLINE#
print ( ( ss . name ( ) , ss . lemma_names ( ) ) ) #NEWLINE#
df = DataFrame ( { 'A' : [ 5 , 6 , 3 , 4 ] , 'B' : [ 1 , 2 , 3 , 5 ] } ) #NEWLINE# df #NEWLINE# df [ df [ 'A' ] . isin ( [ 3 , 6 ] ) ] #NEWLINE#
sns . regplot ( x , y , ax = ax1 ) #NEWLINE#
my_array = [ 'abc' , 'def' , 'xyz' , 'abc' , 'pop' , 'abc' ] #NEWLINE# [ a for a in my_array if a != 'abc' ] #NEWLINE#
axes . set_yticks ( [ ] ) #NEWLINE#
scatter = ax . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) ) #NEWLINE#
not sum ( [ ( not i in A ) for i in C ] ) #NEWLINE#
print ( 'Digit#SPACE#found#SPACE#at#SPACE#position#SPACE#%d' % m . start ( ) ) #NEWLINE#
np . array ( df [ 'A' ] ) #NEWLINE#
self . updater . start ( ) #NEWLINE#
return np . mean ( arr . reshape ( - 1 , stride ) , axis = 1 ) #NEWLINE#
config [ 'name' ] #NEWLINE#
'abc' + 'xyz' #NEWLINE#
ziph . write ( os . path . join ( root , file ) ) #NEWLINE#
PATH = os . path . abspath ( os . path . dirname ( __file__ ) ) #NEWLINE#
ax1 . set_position ( [ 0.1 , 0.1 , 0.5 , 0.5 ] ) #NEWLINE#
l = [ [ 'a' , 'b' ] , [ 'c' , 'd' ] , [ 'e' , 'f' ] ] #NEWLINE#
x . add_row ( [ 'Brisbane' , 5905 , 1857594 , 1146.4 ] ) #NEWLINE#
x . add_row ( [ 'Hobart' , 1357 , 205556 , 619.5 ] ) #NEWLINE#
x . add_row ( [ 'Sydney' , 2058 , 4336374 , 1214.8 ] ) #NEWLINE#
x . add_row ( [ 'Melbourne' , 1566 , 3806092 , 646.9 ] ) #NEWLINE#
x . add_row ( [ 'Perth' , 5386 , 1554769 , 869.4 ] ) #NEWLINE#
output_1 = np . bincount ( input_1 [ input_2 ] ) [ input_1 ] #NEWLINE#
l3 [ 1 ] . append ( 7 ) #NEWLINE#
db . delete ( results ) #NEWLINE#
h5file . close ( ) #NEWLINE#
new_strs . split ( ) #NEWLINE#
classifier . fit ( X_train , Y ) #NEWLINE#
df #NEWLINE#
__init__ . py #NEWLINE#
somecell . fill . start_color . index #NEWLINE#
assert file . read ( ) == 'Hello\n' #NEWLINE#
ax . set_zlabel ( 'z' ) #NEWLINE#
print ( list ( split_by_n ( '1234567890' , 2 ) ) ) #NEWLINE#
return NULL #NEWLINE#
screen . refresh ( ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 2 , 3 , 4 ] } ) #NEWLINE# df #NEWLINE# df [ 'C' ] = '' #NEWLINE# df [ 'D' ] = np . nan #NEWLINE# df #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
{ 'x' : 10 , 'y' : 20 , 'z' : 30 , 'content' : '10x20x30' } , #NEWLINE#
b [ : 2 ] + ( 8 , ) + b [ 3 : ] #NEWLINE#
"""Mozilla/5.0#SPACE#(Windows#SPACE#NT#SPACE#6.1;#SPACE#WOW64)#SPACE#AppleWebKit/537.36#SPACE#(KHTML,#SPACE#like#SPACE#Gecko)#SPACE#Chrome/29.0.1547.76#SPACE#Safari/537.36""" #NEWLINE#
print ( div . find_all ( text = 'foobar' ) ) #NEWLINE#
print ( 'Error#SPACE#importing#SPACE#RPi.GPIO!!' ) #NEWLINE#
args . append ( arg ) #NEWLINE#
[ 'foo.aa' , 'foo.bars' , 'foo.fighters' , 'foo.fox' , 'foo.manchu' ] #NEWLINE#
cv2 . rectangle ( base , ( 0 , 0 ) , ( w + 20 , h + 20 ) , ( 255 , 255 , 255 ) , 30 ) #NEWLINE#
setattr ( self , name , attr ) #NEWLINE#
plt . switch_backend ( 'TkAgg' ) #NEWLINE#
return None #NEWLINE#
input = self . myText_Box . get ( '1.0' , END ) #NEWLINE#
A = scipy . sparse . csc_matrix ( ( size , size ) ) #NEWLINE#
from os import open #NEWLINE#
m . p #NEWLINE#
if a in b : #NEWLINE# #INDENT# pass #NEWLINE#
df2 . groupby ( 'a' ) [ 'a' ] . transform ( 'count' ) #NEWLINE#
sys . path . insert ( 0 , '/home/PycharmProject/scrap/DjangoProject' ) #NEWLINE#
self . Bind ( wx . EVT_LEFT_DCLICK , self . on_left_dclick ) #NEWLINE#
arr = np . arange ( 0 , 30 ) . reshape ( 2 , 3 , 5 ) #NEWLINE# arr . sum ( axis = 0 , keepdims = True ) #NEWLINE#
win1 . destroy ( ) #NEWLINE#
parser = etree . XMLParser ( schema = schema ) #NEWLINE#
plt . draw ( ) #NEWLINE#
d = set ( ) #NEWLINE#
main ( ) #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
logger . info ( 'something#SPACE#happened' ) #NEWLINE#
print ( 'Goodbye' ) #NEWLINE#
b . shape #NEWLINE#
list . __init__ ( self , * args , ** kwargs ) #NEWLINE#
button . pack ( ) #NEWLINE#
image_data = im . load ( ) #NEWLINE#
from django . contrib . contenttypes . models import ContentType #NEWLINE#
ind = bisect . bisect_left ( list ( a . keys ( ) ) , 45.3 ) #NEWLINE#
html . title . text #NEWLINE#
datetime . strptime ( key . last_modified , '%Y-%m-%dT%H:%M:%S.%fZ' ) #NEWLINE#
data [ ( data > upper_threshold ) | ( data < lower_threshold ) ] = default_value #NEWLINE#
text . set_color ( line . get_color ( ) ) #NEWLINE#
G . add_edges_from ( [ [ 0 , 3 ] , [ 1 , 0 ] , [ 3 , 1 ] ] ) #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
data = urlfetch . fetch ( feedUrl ) #NEWLINE#
plt . close ( fig ) #NEWLINE#
msg . set_payload ( zf . read ( ) ) #NEWLINE#
print ( '' . join ( [ '_' , '_' , '_' , '_' ] ) ) #NEWLINE# ____ #NEWLINE#
root . minsize ( 300 , 300 ) #NEWLINE#
temp . write ( line . rstrip ( ) + '#SPACE#{}\n' . format ( arg ) ) #NEWLINE#
print ( [ name for _ , name , _ in pkgutil . iter_modules ( [ pkgpath ] ) ] ) #NEWLINE#
return sum ( l [ - n : ] ) / float ( observations ) #NEWLINE#
cursor = conn . cursor ( ) #NEWLINE#
profile . set_preference ( 'browser.download.dir' , 'PATH#SPACE#TO#SPACE#DESKTOP' ) #NEWLINE#
inv = pygame . Surface ( img . get_rect ( ) . size , pygame . SRCALPHA ) #NEWLINE#
d = { } #NEWLINE# for t in l : #NEWLINE# #INDENT# d . setdefault ( t [ 0 ] , { } ) [ t [ 1 ] ] = t [ 2 ] #NEWLINE#
print ( 'Stored#SPACE#Data:' ) #NEWLINE#
x = numpy . array ( [ [ 0 , 1 ] , [ 3 , 2 ] ] ) #NEWLINE#
print ( d [ 7 ] ) #NEWLINE#
list ( iterateUntilFalsy ( lambda x : x [ 1 : ] , [ 1 , 2 , 3 , 4 ] ) ) #NEWLINE#
ax . set_xticks ( x ) #NEWLINE#
profs = session . query ( UserProfile ) . all ( ) #NEWLINE#
[ { 'name' : 'kishore' , 'playing' : [ 'cricket' , 'basket#SPACE#ball' , 'volley#SPACE#ball' , #NEWLINE# 'hockey' ] } , { 'name' : 'xyz' , 'playing' : [ 'cricket' ] } ] #NEWLINE#
a += b #NEWLINE#
df . convert_objects ( convert_numeric = True ) . dtypes #NEWLINE#
dict ( ) #NEWLINE#
legline . set_linewidth ( 10 ) #NEWLINE#
is_staff = True #NEWLINE#
pd . value_counts ( s ) . plot ( kind = 'bar' ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
db . execute ( 'CREATE#SPACE#INDEX#SPACE#id_idx#SPACE#ON#SPACE#data#SPACE#(id)' ) #NEWLINE#
self . fig . canvas . mpl_connect ( 'key_press_event' , self . key ) #NEWLINE#
headers . update ( { 'User-Agent' : 'My#SPACE#User#SPACE#Agent#SPACE#1.0' } ) #NEWLINE#
self . connect ( ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
sel_cur . close ( ) #NEWLINE#
__import__ ( app . __name__ ) #NEWLINE#
root . wait_window ( ) #NEWLINE#
f = open ( infname , 'rb' ) #NEWLINE#
np . savetxt ( out_f , a , delimiter = ',' ) #NEWLINE#
cookieprocessor = urllib . request . HTTPCookieProcessor ( ) #NEWLINE#
os . write ( fd , data ) #NEWLINE#
def add_win ( people_list , name ) : #NEWLINE# #INDENT# person = find_person ( people_list , name ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# person [ 'wins' ] += 1 #NEWLINE# #NEWLINE# #NEWLINE# def find_person ( people_list , name ) : #NEWLINE# #INDENT# for person in people_list : #NEWLINE# #INDENT# #INDENT# if person [ 'name' ] == name : #NEWLINE# #INDENT# #INDENT# #INDENT# return person #NEWLINE# #INDENT# #INDENT# #INDENT# #NEWLINE# #NEWLINE# person = { 'name' : name , 'wins' : 0 } #NEWLINE# people_list . append ( person ) #NEWLINE# return person #NEWLINE#
s . bind ( ( '127.0.0.1' , PORT ) ) #NEWLINE#
self . assertEqual ( self . client . publish ( 'foo' , 'hello#SPACE#foo' ) , 1 ) #NEWLINE#
EU = mpatches . Patch ( color = 'green' , label = 'Europe' ) #NEWLINE#
int ( ip_address ( '172.23.1.99' ) ) #NEWLINE#
{ 'gtm' : 3 , 't' : 1 , 'tid' : 2 , 'c2' : 5 , 'c1' : 4 , 'id' : '333' } #NEWLINE#
canvas . create_image ( 0 , 0 , image = img , anchor = 'nw' ) #NEWLINE#
raise Exception ( 'Retrying!' ) #NEWLINE#
print ( locals ( ) ) #NEWLINE#
d = dict ( ) #NEWLINE#
new_json = json . loads ( data , object_hook = remove_dot_key ) #NEWLINE#
for i in range ( 10 ) : #NEWLINE# #INDENT# x . append ( i ) #NEWLINE#
lst = [ 'a' , 'ab' , 'abc' , 'bac' ] #NEWLINE#
fig . subplots_adjust ( left = 0.15 , top = 0.95 ) #NEWLINE#
ax . scatter ( x , y , z , c = 'b' , s = 20 ) #NEWLINE#
super ( DecoratorLockedSet , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
desks = Desk . objects . filter ( room__in = rooms ) #NEWLINE#
x = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] , [ 'g' , 'h' , 'i' , 'j' ] ] #NEWLINE# [ j for i in x for j in i ] #NEWLINE#
widget2 . grid ( row = 1 ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 6 , 4 ) , columns = [ 'ddd' , 'fff' , 'aaa' , 'ppp' ] ) #NEWLINE# df #NEWLINE#
audio = models . FileField ( upload_to = aud_get_file_path ) #NEWLINE#
curl . perform ( ) #NEWLINE#
ssh . connect ( 'hostname' , username = 'user' , password = p ) #NEWLINE#
self . response . out . write ( template . render ( 'template.html' , values ) ) #NEWLINE#
for word in header : #NEWLINE# #INDENT# writer . writerow ( [ word ] ) #NEWLINE#
print ( pd . factorize ( pd . lib . fast_zip ( [ df . x , df . y ] ) ) [ 0 ] ) #NEWLINE#
Session . execute ( 'set#SPACE#transaction#SPACE#isolation#SPACE#level#SPACE#serializable' ) #NEWLINE#
print ( tag . name ) #NEWLINE#
date = parser . parse ( ds ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
2 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 20160224 , 20160226 #NEWLINE#
e . intersection ( Ellipse ( Point ( - 1 , 0 ) , 3 , 4 ) ) #NEWLINE#
df = df . join ( split_names ) #NEWLINE#
f . write ( 'echo#SPACE#"hello#SPACE#world"\n' ) #NEWLINE#
a = [ 0 ] * K #NEWLINE#
self . client . close ( ) #NEWLINE#
nbsumeq ( A , B ) #NEWLINE#
plot_data [ 0 ] . append ( 1 ) #NEWLINE#
driver . quit ( ) #NEWLINE#
colors . from_array ( np . random . randint ( 256 , size = ( 100 , 3 ) ) ) #NEWLINE#
self . scat . set_array ( data [ 3 ] ) #NEWLINE#
cv . Circle ( color_image , center_point , 40 , cv . CV_RGB ( 255 , 255 , 255 ) , 1 ) #NEWLINE#
from datetime import datetime #NEWLINE# datetime . strptime ( '2010-11-13#SPACE#10:33:54.227806' , '%Y-%m-%d#SPACE#%H:%M:%S.%f' ) #NEWLINE#
self . stream . close ( ) #NEWLINE#
self . count += 1 #NEWLINE#
H = sps . coo_matrix ( ( data , ( rows , cols ) ) , shape = ( num , num ) ) . tolil ( ) #NEWLINE#
self . setCentralWidget ( _widget ) #NEWLINE#
L = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
url = 'http://domain.com/somepage/?' #NEWLINE#
author_count = serializers . IntegerField ( source = 'author_set.count' , #NEWLINE# read_only = True ) #NEWLINE#
mask = np . isfinite ( x ) #NEWLINE#
url = 'http://something.com?blah=1&x=2' #NEWLINE#
M [ 'x' ] #NEWLINE#
conn . send ( data ) #NEWLINE#
s = 'mystring' #NEWLINE# l = list ( s ) #NEWLINE# print ( l ) #NEWLINE#
[ ( x + 3 ) for x in my_list ] #NEWLINE#
re . match ( pattern , '4.4' ) #NEWLINE#
re . match ( pattern , '.4' ) #NEWLINE#
return list ( set ( theList ) . intersection ( set ( theDict . keys ( ) ) ) ) #NEWLINE#
[ 'abc' , 'acb' , 'bac' , 'bca' , 'cab' , 'cba' ] #NEWLINE#
print ( string ) #NEWLINE#
im = Image . new ( 'RGBA' , ( 400 , 400 ) , ( 0 , 255 , 0 , 0 ) ) #NEWLINE#
for file in files : #NEWLINE# #INDENT# os . rename ( file , 'year_{}' . format ( file . split ( '_' ) [ 1 ] ) ) #NEWLINE#
ax . plot ( dates , zaxisvalues2 , upperLimits , color = 'r' ) #NEWLINE#
with io . open ( file_name , 'wt' , encoding = 'utf8' ) as fd : #NEWLINE# #INDENT# fd . write ( data ) #NEWLINE#
re . match ( '(.*)#SPACE#\\((.*)#SPACE#(\\d+/\\d+)' , s ) . groups ( ) #NEWLINE#
return '' . join ( DICO_INVERTED [ p ] for p in grouper ( 8 , binary , '' ) ) #NEWLINE#
f = np . poly1d ( [ 1 , 0 , 0 , - 1 ] ) #NEWLINE#
session . close ( ) #NEWLINE#
p . start ( ) #NEWLINE#
return module #NEWLINE#
df [ 'last' ] = splits . str [ 1 ] #NEWLINE#
[ 3 , 2 , 1 ] #NEWLINE#
return 'this#SPACE#is#SPACE#{self.a}' . format ( self = self ) #NEWLINE#
hex ( buffer . rd ( 1 ) ) #NEWLINE#
rows = ( a != 0 ) . sum ( 1 ) #NEWLINE#
qs = super ( ) . get_queryset ( ) #NEWLINE#
headers = { 'projectName' : 'zhikovapp' , 'Authorization' : 'Bearer#SPACE#HZCdsf=' } #NEWLINE# response = requests . get ( bl_url , headers = headers ) #NEWLINE#
lines = [ l . split ( ) for l in f . readlines ( ) ] #NEWLINE#
names = names . append ( frame , ignore_index = True ) #NEWLINE#
file_handler . setLevel ( logging . ERROR ) #NEWLINE#
np . set_printoptions ( precision = 5 ) #NEWLINE#
matplotlib . style . use ( 'ggplot' ) #NEWLINE#
"""Worker#SPACE#name#SPACE#is#SPACE#%s#SPACE#and#SPACE#id#SPACE#is#SPACE#%d""" #NEWLINE#
path = path . strip ( ) #NEWLINE#
ax . plot ( theta , [ ( 1.23 ) for t in theta ] , color = '#AA5555' , linewidth = 10 ) #NEWLINE#
t = ( 1 , 'a' ) , ( 2 , 'b' ) #NEWLINE# dict ( ( y , x ) for x , y in t ) #NEWLINE#
nowdt = datetime . datetime . now ( ) #NEWLINE#
data = numpy . array ( curs . fetchall ( ) , dtype = float ) #NEWLINE#
data = "var1#SPACE#=#SPACE#{'id':#SPACE#'12345',#SPACE#'name':#SPACE#'John#SPACE#White'}" #NEWLINE#
combs = [ [ x for i , x in enumerate ( data ) if mask [ i ] ] for mask in masks ] #NEWLINE#
print ( '%02d' % a ) #NEWLINE#
self . application . exec_ ( ) #NEWLINE#
plt . plot ( dates , values ) #NEWLINE#
ftps . close ( ) #NEWLINE#
print ( 'Y.radd' ) #NEWLINE#
re_float = re . compile ( '\\d*\\.?\\d+' ) #NEWLINE#
super ( A , self ) . foo ( ) #NEWLINE#
mod . __dict__ [ new_class . __name__ ] = new_class #NEWLINE#
gtk_dlls . append ( os . path . join ( include_dll_path , dll ) ) #NEWLINE#
df = df . set_index ( cols ) . apply ( f , axis = 1 ) . reset_index ( ) #NEWLINE#
second_largest ( [ 1 , 1 , 1 , 1 , 1 , 1 ] ) #NEWLINE#
Something . objects . filter ( data = { 'a' : '1' , 'b' : '2' } ) #NEWLINE#
raise DomainException ( 'bad#SPACE#news' ) #NEWLINE#
k = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
self . matrix . append ( [ 0 ] * len ( list ( adjacencyList . keys ( ) ) ) ) #NEWLINE#
points = [ random ( ) for _ in range ( 1000 * 2 ) ] #NEWLINE#
set_trace ( ) #NEWLINE#
cv2 . waitKey ( 5 ) #NEWLINE#
[ x for x in lst if x % 2 == 0 ] [ 0 ] #NEWLINE#
np . apply_along_axis ( v . dot , 2 , A ) #NEWLINE#
frame = driver . find_element_by_id ( 'this_is_your_frame_name' ) #NEWLINE#
l = [ 'John#SPACE#Fine' , 'Doug#SPACE#Biro' , 'Jo#SPACE#Ann#SPACE#Alfred' ] #NEWLINE# sorted ( l , key = lambda x : x . rsplit ( None , 1 ) [ - 1 ] ) #NEWLINE#
class A ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# self . _x = 23 #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# self . _y = 45 #NEWLINE# #NEWLINE# #NEWLINE# def f ( self ) : #NEWLINE# #INDENT# print ( 'in#SPACE#f,' , self . _x ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def h ( self ) : #NEWLINE# #INDENT# print ( 'in#SPACE#h,' , self . _y ) #NEWLINE#
s . theme_use ( 'default' ) #NEWLINE#
df . ix [ df . var4 . isnull ( ) ] #NEWLINE#
server_sock . listen ( 1 ) #NEWLINE#
from xlrd import open_workbook #NEWLINE#
str . contains ( 'pandas' , case = False ) #NEWLINE#
changeX = a . changeX #NEWLINE#
cv2 . drawContours ( filledI , cs , i , color = 255 , thickness = - 1 ) #NEWLINE#
os . close ( fd ) #NEWLINE#
pylab . legend ( ) #NEWLINE#
pool . join ( ) #NEWLINE#
df . groupby ( 'bin' ) . count ( ) . plot . bar ( ) #NEWLINE#
super ( TagForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
l = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE# [ ( x + y ) for x , y in l ] #NEWLINE#
cv2 . namedWindow ( 'image' , cv2 . WINDOW_NORMAL ) #NEWLINE#
print ( '\n' . join ( '' . join ( str ( cell ) for cell in row ) for row in a ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
from win32com . client import Dispatch #NEWLINE#
systemtest_n . py #NEWLINE#
savemat ( 'p.mat' , { 'myrec' : myrec } ) #NEWLINE#
f = open ( filename , 'rb' ) #NEWLINE#
logging . getLogger ( '' ) . addHandler ( console ) #NEWLINE#
reduce ( dict . __getitem__ , path , aDict ) . update ( aSecondDict ) #NEWLINE#
a [ '0' ] [ 'A' ] #NEWLINE#
print ( heapq . nlargest ( n = 3 , iterable = y , key = y . get ) ) #NEWLINE#
plt . plot ( tt . circumcenters [ : , ( 0 ) ] , tt . circumcenters [ : , ( 1 ) ] , 'r.' ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
a = [ [ 'John' , 'Sergeant#SPACE#' ] , [ 'Jack' , 'Commander#SPACE#' ] , [ 'Jill' , 'Captain#SPACE#' ] ] #NEWLINE#
im = Image . open ( 'test.bmp' ) #NEWLINE#
events = service . events ( ) . list ( calendarId = '<your_email_here>' ) . execute ( ) #NEWLINE# print ( events ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #NEWLINE# def foo ( self ) : #NEWLINE# #INDENT# #INDENT# print ( self . a ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class Bar ( object ) : #NEWLINE# #INDENT# foo = Foo . __dict__ [ 'foo' ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# b = Bar ( ) #NEWLINE# b . a = 1 #NEWLINE# b . foo ( ) #NEWLINE#
store . append ( 'df_cols' , df , axes = 'columns' ) #NEWLINE#
QWidget . __init__ ( self , * args , ** kwargs ) #NEWLINE#
user = Session . query ( User ) . first ( ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
{ 'key2' : [ 2 , 'A' ] , 'key1' : 1 , 'key4' : 4 } #NEWLINE#
print ( np . sum ( data , axis = 0 ) ) #NEWLINE#
from django . db . models import CharField #NEWLINE#
def test_patch_datetime ( patch_datetime_now ) : #NEWLINE# #INDENT# assert datetime . datetime . now ( ) == FAKE_TIME #NEWLINE#
Quota = celltext ( columns [ 1 ] ) #NEWLINE#
arr [ rs : re , cs : ce ] = np . rot90 ( np . copy ( arr [ rs : re , cs : ce ] ) ) #NEWLINE#
ccb ( ) #NEWLINE#
self . panel = wx . Panel ( self ) #NEWLINE#
writer . writerows ( zip ( bins , frequencies ) ) #NEWLINE#
sort ( data , key = cmp_to_key ( your_old_comparison_function ) ) #NEWLINE#
pprint . pprint ( d ) #NEWLINE#
plt . plot ( x , y , 'bo' ) #NEWLINE#
data [ row ] [ set_col ] = val #NEWLINE#
raise Exception ( 'Could#SPACE#not#SPACE#find#SPACE#open#SPACE#port' ) #NEWLINE#
"""123""" #NEWLINE#
r . close ( ) #NEWLINE#
print ( ( 'Converted#SPACE#Images:' , s_jpg_files . collect ( ) ) ) #NEWLINE#
l = np . random . randint ( 3 , 5 ) #NEWLINE#
print ( 'Failed#SPACE#to#SPACE#create#SPACE#{}' . format ( dirmk ) ) #NEWLINE#
unittest . main ( ) #NEWLINE#
new_df = old_df . loc [ : , ( list_of_columns_names ) ] #NEWLINE#
print ( 'Removing#SPACE#%s' % os . path . join ( r , files ) ) #NEWLINE#
it = itertools . groupby ( [ 1 , 2 , 2 , 3 ] ) #NEWLINE#
thismodule . foo = 'baz' #NEWLINE#
print ( 'Decompressing#SPACE#' + filename + '#SPACE#on#SPACE#' + dirname ) #NEWLINE#
s [ 4 : 10 ] #NEWLINE#
fd = sys . stdin . fileno ( ) #NEWLINE#
list ( items . keys ( ) ) #NEWLINE#
frame2 = tk . Frame ( root , width = 50 , height = 50 , background = '#b22222' ) #NEWLINE#
print ( ( key , value ) ) #NEWLINE#
plt . plot ( x , f , '-' ) #NEWLINE#
return re . match ( '[a-zA-Z0-9\\-]' , string ) #NEWLINE#
button . config ( state = 'disabled' ) #NEWLINE#
out = a [ sidx [ idx ] ] #NEWLINE#
return timezone . localize ( localdt ) . astimezone ( utc ) #NEWLINE#
dialog . ui . setupUi ( dialog ) #NEWLINE#
print ( '' . join ( text_list ) ) #NEWLINE#
{ { request . GET . __next__ | urlencode } } #NEWLINE#
sqlContext . sql ( query ) #NEWLINE#
image_t = tf . py_func ( preprocess , [ image_t ] , [ tf . float32 ] ) #NEWLINE#
LOGIN_URL = reverse_lazy ( 'my_app.views.sign_in' ) #NEWLINE#
one , four , ten = lst [ 1 ] , lst [ 4 ] , lst [ 10 ] #NEWLINE#
"""a\\nb""" . decode ( 'string_escape' ) #NEWLINE#
print ( repr ( vocab ) ) #NEWLINE#
data = re . sub ( '<.*?>' , '' , data ) #NEWLINE# print ( data ) #NEWLINE#
country_reverse = dict ( ( v , k ) for k , v in COUNTRY_CHOICES ) #NEWLINE# Country . objects . filter ( code = country_reverse [ 'france' ] ) #NEWLINE#
plt . yticks ( np . arange ( 0 ) ) #NEWLINE#
add ( ** x ) #NEWLINE#
zip ( * A ) #NEWLINE#
crawler . crawl ( spider ) #NEWLINE#
result . setdefault ( idx , [ ] ) . append ( ( int ( c1 ) , int ( c2 ) , int ( c3 ) ) ) #NEWLINE#
df2 = pd . DataFrame ( np . random . rand ( 4 , 2 ) ) #NEWLINE#
return self . opn [ op ] ( op1 , op2 ) #NEWLINE#
super ( MyForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
ax = plt . subplot ( '212' ) #NEWLINE#
return obj . __dict__ [ attr ] #NEWLINE#
from bs4 import BeautifulSoup #NEWLINE#
pd . read_hdf ( 'test.h5' , 'df' , where = 'date=20140722' ) #NEWLINE#
"""{0:.{1}f}""" . format ( p , n ) #NEWLINE#
a = np . array ( [ 0 , 0 , 15 , 17 , 16 , 17 , 16 , 12 , 18 , 18 ] ) #NEWLINE#
data = [ [ 1 , 2 , 3 ] , [ 1 , 3 , 4 ] , [ 2 , 4 , 5 ] ] #NEWLINE# [ sum ( e ) for e in zip ( * data ) ] #NEWLINE#
print ( html2text ( html ) ) #NEWLINE#
dir ( modulename ) #NEWLINE#
Base . prepare ( engine ) #NEWLINE#
G . edges ( data = True , keys = True ) #NEWLINE#
return do_stuff ( ) #NEWLINE#
df = df . drop ( 'group' , axis = 1 ) #NEWLINE#
def trailing ( s ) : #NEWLINE# #INDENT# return len ( s ) - len ( s . rstrip ( '0' ) ) #NEWLINE#
return '/%d/%d/%d/' % ( int ( l [ 0 : 4 ] ) , int ( l [ 4 : 8 ] ) , int ( l [ 8 : 12 ] ) ) #NEWLINE#
server_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
data = data [ pd . isnull ( data [ 'opinion' ] ) ] #NEWLINE#
w . start ( ) #NEWLINE#
cov = np . zeros ( ( num_vars , num_vars ) , dtype = float ) #NEWLINE#
print ( 'meow' ) #NEWLINE#
cur = conn . cursor ( ) #NEWLINE#
self . instance . olddrivers = instance . drivers . all ( ) #NEWLINE#
ax . xaxis . set_minor_formatter ( ticker . FuncFormatter ( ticks_format ) ) #NEWLINE#
conn = boto . ec2 . connect_to_region ( 'eu-west-1' ) #NEWLINE#
cmap = plt . get_cmap ( 'jet' ) #NEWLINE#
def test_func1 ( self ) : #NEWLINE# #INDENT# module1 . func1 ( 'arg1' ) #NEWLINE#
self . assertEqual ( expected_url , kwargs . get ( 'url' ) ) #NEWLINE#
humansize ( 58812 ) #NEWLINE#
humansize ( 68819826 ) #NEWLINE#
humansize ( 39756861649 ) #NEWLINE#
df . index [ 1 ] #NEWLINE#
print ( '{0}:#SPACE#{1}' . format ( x , inspect . stack ( ) [ 1 ] [ 0 ] . f_locals [ x ] ) ) #NEWLINE#
listx = [ item [ 0 ] for item in data ] #NEWLINE#
print ( 'Exiting' ) #NEWLINE#
from django . contrib import admin #NEWLINE#
dst . write ( src_text . replace ( 'hola' , 'hello' ) ) #NEWLINE#
do_foo ( obj ) #NEWLINE#
print ( list [ i ] [ j ] ) #NEWLINE#
[ elem [ 0 ] for elem in most_common ] #NEWLINE#
return '' #NEWLINE#
layout . addWidget ( self . button ) #NEWLINE#
e . set_color ( 'k' ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
function ( element ) #NEWLINE#
with open ( 'test.csv' , 'rb' ) as f : #NEWLINE# #INDENT# reader = csv . reader ( f ) #NEWLINE# for row in reader : #NEWLINE# #INDENT# pass #NEWLINE#
data_file = open ( '/var/log/secure' , 'r' ) #NEWLINE#
os . rename ( pathAndFilename , os . path . join ( dir , titlePattern % title + ext ) ) #NEWLINE#
self . myVar = 'bar' #NEWLINE#
d = numpy . random . randint ( 0 , 2 , size = ( 3 , 3 , 3 ) ) #NEWLINE#
hist , xedges , yedges = np . histogram2d ( x , y , bins = 4 ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
'Michael#SPACE#Schenker#SPACE#Group#SPACE#' , 'House#SPACE#of#SPACE#Blues#SPACE#Dallas#SPACE#' , '3/26' #NEWLINE#
df2 = df2 . groupby ( 'ID' ) . resample ( 'D' , how = 'count' ) #NEWLINE# df2 = df2 . reset_index ( ) #NEWLINE#
merged [ item [ key ] ] . update ( item ) #NEWLINE#
debug ( lambda : 'Working#SPACE#on#SPACE#{0}' . format ( currentItem ) ) #NEWLINE#
return any ( match ( str1 , str2 ) for str1 in set1 for str2 in set2 ) #NEWLINE#
print ( next ( first_it ) ) #NEWLINE#
array ( [ [ 0 , 0 ] , [ 3 , 4 ] , [ 7 , 10 ] , [ 20 , 22 ] , [ 70 , 70 ] ] ) #NEWLINE#
data . sort ( key = getitems ) #NEWLINE#
{ 'text' : { 'record.articleTitle' : 'farmers' } } #NEWLINE#
print ( '{}#SPACE#{}' . format ( k , v ) ) #NEWLINE#
totaldict [ tuple ( x [ : 2 ] ) ] . append ( x ) #NEWLINE#
y = multiprocessing . Process ( target = smile_detection , args = ( 'Thread2' , ) ) #NEWLINE#
con . close ( ) #NEWLINE#
ax . legend ( loc = 1 ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
print ( set ( string . ascii_lowercase ) . difference ( set ( ( str1 + str2 ) . lower ( ) ) ) ) #NEWLINE#
print ( line , end = '#SPACE#' ) #NEWLINE#
with open ( 'one.txt' ) as f1 : #NEWLINE# #INDENT# with open ( 'two.txt' ) as f2 : #NEWLINE# #INDENT# #INDENT# f1 . write ( 'foo' ) #NEWLINE# f2 . write ( 'bar' ) #NEWLINE#
print ( match . group ( 0 ) ) #NEWLINE#
df . drop ( df . query ( 'amount#SPACE#==#SPACE#0' ) . sample ( frac = 0.5 ) . index , inplace = True ) #NEWLINE#
password = models . CharField ( max_length = 50 ) #NEWLINE#
x = np . array ( [ [ 0 , 3 ] , [ 5 , 1 ] , [ 2 , 1 ] , [ 4 , 5 ] ] ) #NEWLINE#
call ( [ 'gpsctl' , '-c' , inverse ] ) #NEWLINE#
f = open ( 'out.txt' , 'w' ) #NEWLINE# <STR0> ( 'Filename:' , filename , file = f ) #NEWLINE# f . close ( ) #NEWLINE#
process = multiprocessing . Process ( target = do_expat , args = ( q , ) ) #NEWLINE#
print ( ( month , 'is#SPACE#not#SPACE#found' ) ) #NEWLINE#
p . join ( ) #NEWLINE#
from os . path import isdir , join #NEWLINE#
series1 = [ float ( i ) for i in range ( 10 ) ] #NEWLINE#
print ( adapt ( "Hello#SPACE#World';#SPACE#DROP#SPACE#DATABASE#SPACE#World;" ) ) #NEWLINE#
master . wm_title ( 'Image#SPACE#examples' ) #NEWLINE#
self . assertEqual ( target . str ( ) , b62 ) #NEWLINE#
__tablename__ = 'sexy_party' #NEWLINE#
return None #NEWLINE#
out = np . einsum ( 'ijk,ijk->ij' , ab , ab ) #NEWLINE#
print ( '#SPACE##SPACE##SPACE##SPACE#args:' , args , kwargs ) #NEWLINE#
ax . xaxis . set_major_formatter ( copy . copy ( Formatter ) ) #NEWLINE#
self . flush ( ) #NEWLINE#
print ( 'Usage:#SPACE#%s#SPACE#<input_file>' % sys . argv [ 0 ] ) #NEWLINE#
self . assertAlmostEqual ( tr ( 1 , 1 ) , 0.9337 , 4 ) #NEWLINE#
__acl__ = [ ( Allow , 'group:admin' , 'view' ) , ( Deny , Everyone , 'view' ) ] #NEWLINE#
return np . arccos ( np . clip ( np . dot ( v1_u , v2_u ) , - 1.0 , 1.0 ) ) #NEWLINE#
np . allclose ( m [ slc ] , target ) #NEWLINE#
parser . add_argument ( '-f' , '--fields' , help = 'field#SPACE#names' , required = False ) #NEWLINE#
raise ValueError ( 'Invaild#SPACE#card#SPACE#ID' ) #NEWLINE#
int ( b [ : - 1 ] ) + unicodedata . numeric ( b [ - 1 ] ) #NEWLINE#
pythons_tasklist . append ( p ) #NEWLINE#
Loader . add_constructor ( 'tag:yaml.org,2002:str' , construct_yaml_str ) #NEWLINE#
df [ 'b' ] . map ( set ) #NEWLINE#
1 / 0 #NEWLINE#
myset . add ( x ) #NEWLINE#
nums = [ 1883.95 , 1878.33 , 1869.43 , 1863.4 ] #NEWLINE# [ '{:.2f}' . format ( x ) for x in nums ] #NEWLINE#
df . ix [ List ] #NEWLINE#
s = '\n' #NEWLINE#
s = '\\n' #NEWLINE#
M [ : , ( colnumber ) ] *= scalar #NEWLINE#
cur . execute ( 'select#SPACE#*#SPACE#from#SPACE#table' ) #NEWLINE#
self . scrollbar . pack ( side = RIGHT , fill = Y ) #NEWLINE#
self . _stack = [ ] #NEWLINE#
module = importlib . import_module ( 'my_package.my_module' ) #NEWLINE#
heapq . heappush ( heap , Neg ( item ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
ax . get_xaxis ( ) . set_major_formatter ( mf ) #NEWLINE#
urllib . request . urlopen ( r ) #NEWLINE#
s . send ( q ) #NEWLINE#
os . fstat ( f . fileno ( ) ) . st_size #NEWLINE#
alert ( '{{name}}' ) #NEWLINE#
cv2 . destroyAllWindows ( ) #NEWLINE#
print ( 'delete:#SPACE#%s' % self . name ) #NEWLINE#
prepend_env_pathext ( [ '.lnk' , '.exe.lnk' , '.py' ] ) #NEWLINE#
profile . set_preference ( 'general.useragent.override' , 'whatever#SPACE#you#SPACE#want' ) #NEWLINE#
visited = { p : False for p in l } #NEWLINE#
df = pd . DataFrame ( [ ] ) #NEWLINE#
fp . write ( '[%s]\n' % section ) #NEWLINE#
nodes . mlab_source . dataset . point_data . scalars = np . random . random ( ( 5000 , ) ) #NEWLINE#
name = models . CharField ( max_length = 30 ) #NEWLINE#
discoverer . connect ( 'discovered' , on_discovered , sys . argv [ 1 ] ) #NEWLINE#
self . layout . addWidget ( self . button2 ) #NEWLINE#
print ( the_table . properties ( ) ) #NEWLINE#
connections = [ ( 3 , 7 ) , ( 6 , 5 ) , ( 4 , 6 ) , ( 5 , 3 ) , ( 7 , 8 ) , ( 1 , 2 ) , ( 2 , 1 ) ] #NEWLINE#
h , s , v = hsv [ : , : , ( 0 ) ] , hsv [ : , : , ( 1 ) ] , hsv [ : , : , ( 2 ) ] #NEWLINE#
{ 'a' : [ 1 , 2 , 4 , 92 ] , 'c' : [ 6 , 7 , 46 , 43 ] , 'b' : [ 4 , 5 , 56 , 65 ] } #NEWLINE#
im = Image . open ( 'input.tif' ) #NEWLINE#
warnings . simplefilter ( 'ignore' , category = DeprecationWarning ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
print ( poisson . rvs ( 1 , 2 , size = 30 ) ) #NEWLINE#
sys . stderr . write ( '\n' ) #NEWLINE#
print ( str ( name ) . lower ( ) ) #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
defdict [ 'one' ] [ 'two' ] [ 'three' ] [ 'four' ] = 5 #NEWLINE#
ax . grid ( ) #NEWLINE#
t / np . timedelta64 ( 1 , 'us' ) #NEWLINE#
z = np . einsum ( '...ij,...jk->...ik' , a , b ) #NEWLINE#
A = np . diag ( 1.0 / np . arange ( 1 , 10000 ) ) #NEWLINE#
print ( cursor . fetchall ( ) ) #NEWLINE# db . close ( ) #NEWLINE#
self . _stream . write ( text ) #NEWLINE#
dct = { 'x' : 1 , 'y' : 2 , 'z' : 3 } #NEWLINE#
print ( arith . parseString ( 'A+B+C*D+E' ) [ 0 ] ) #NEWLINE#
r . join ( df ) #NEWLINE#
sc . textFile ( 'dir/*/*/*.txt' ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
os . path . normpath ( path1 ) #NEWLINE#
logger = logging . getLogger ( 'my_module_name' ) #NEWLINE#
data = [ '32' , '22' , '12' , '32' , '22' , '12' , '31' , '21' , '11' ] #NEWLINE# dict ( ( x , data . count ( x ) ) for x in data ) #NEWLINE#
cv . SaveImage ( 'result.png' , out_2 ) #NEWLINE#
d2 = { key : value for i , ( key , value ) in enumerate ( d . items ( ) ) if i % 2 == 1 } #NEWLINE#
mail . login ( 'username' , 'password' ) #NEWLINE#
dest . blit ( tmp , destpos , dest . get_rect ( ) . clip ( maskrect ) ) #NEWLINE#
t1 . start ( ) #NEWLINE#
list ( [ l for l in process_list if re . search ( pattern , l ) == None ] ) #NEWLINE#
arr = np . array ( [ 4 , 4 , 1 , np . nan , np . nan , np . nan , - 5 , - 4 ] ) #NEWLINE#
entry . set_text ( new_text ) #NEWLINE#
caketaste ( ) #NEWLINE#
set ( box ( df . genres . tolist ( ) ) . ravel ( ) . tolist ( ) ) #NEWLINE#
self . result . SetLabel ( self . editname . GetValue ( ) ) #NEWLINE#
{ { title } } #NEWLINE#
main ( ) #NEWLINE#
yield d [ 'id' ] #NEWLINE#
return pd . Series ( * _outliers ( s . values . astype ( 'float' ) ) ) #NEWLINE#
ftp . retrbinary ( 'RETR#SPACE#%s' % f , filef . write ) #NEWLINE#
print ( '*' ) #NEWLINE#
{ 'id' : 1 , 'reference1' : 1 , 'reference2' : [ 1 ] , 'value' : 1 } #NEWLINE#
get_type_hints ( Starship ) #NEWLINE#
doc . setDefaultStyleSheet ( 'a#SPACE#{text-decoration:#SPACE#none}' ) #NEWLINE#
richard = Person ( 'Richard' , 'Strauss' ) #NEWLINE#
res = df . merge ( lookup , how = 'left' ) #NEWLINE#
redirect ( request . path , code = 303 ) #NEWLINE#
record2 . put ( ) #NEWLINE#
function ( 1 ) #NEWLINE#
strf ( 123456789.12345 ) #NEWLINE#
expr1 ( expr2 , expr3 , * expr4 , ** expr5 ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
PETSc . Mat ( ) . createAIJ ( size = ( nrows , ncols ) , csr = ( ai , aj , aa ) ) #NEWLINE#
plt . fill_between ( df . index , df . lwr , df . upr , facecolor = 'blue' , alpha = 0.2 ) #NEWLINE#
print ( 'In#SPACE#Call#SPACE#with#SPACE#node#SPACE#{}\n' . format ( node . func ) ) #NEWLINE#
l . append ( float ( t ) ) #NEWLINE#
"""Hello,#SPACE#my#SPACE#name#SPACE#is#SPACE#<b>Jane<b>.""" #NEWLINE#
document_first_row = [ doc [ 0 ] for doc in documents ] #NEWLINE#
s . apply ( enumerate ) #NEWLINE#
print ( coc . x ) #NEWLINE#
format ( 150 , '.2f' ) #NEWLINE#
arg_text = '(%s)' % re . sub ( '\\.\\d+' , '<tuple>' , arg_text ) #NEWLINE#
print ( json . dumps ( test_json , cls = MyEncoder ) ) #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
print ( 'Sum#SPACE#after#SPACE#map#SPACE#square#SPACE#operation:#SPACE#{}' . format ( datetime . now ( ) - start_time ) ) #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , fl | os . O_NONBLOCK ) #NEWLINE#
[ i for i in range ( 3 ) ] #NEWLINE#
print ( re . findall ( '\\w+' , test , re . UNICODE ) ) #NEWLINE#
main ( ) #NEWLINE#
column_map = { 'a' : 1 , 'b' : 2 , 'c' : 4 , 'd' : 6 } #NEWLINE#
[ 0 , 0 , 0 , 0 ] , #NEWLINE#
fig , axs = plt . subplots ( ncols = 2 , figsize = ( 10 , 4 ) ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE#
return np . dot ( np . array ( L1 ) . sum ( 0 ) , np . array ( L2 ) . sum ( 0 ) ) #NEWLINE#
cursor = conn . cursor ( ) #NEWLINE#
post [ 'date' ] . split ( ) [ 0 ] #NEWLINE#
t . join ( ) #NEWLINE#
return pickle . dumps ( self . _cookies ) #NEWLINE#
form = MyModelForm ( hide_condition = True ) #NEWLINE#
"""I#SPACE#like#SPACE#peas#SPACE#on#SPACE#2011-04-23,#SPACE#and#SPACE#I#SPACE#also#SPACE#like#SPACE#them#SPACE#on#SPACE#easter#SPACE#and#SPACE#my#SPACE#birthday,#SPACE#the#SPACE#29th#SPACE#of#SPACE#July,#SPACE#1928""" #NEWLINE#
df [ 'col1' ] . rolling ( min_periods = 1 , window = 3 ) . corr ( other = g [ 'col2' ] ) #NEWLINE#
opener = urllib . request . build_opener ( ) #NEWLINE#
zf . close ( ) #NEWLINE#
dic2 = { 'b' : 'a' , 'a' : 'c' , 'c' : 'd' } #NEWLINE#
mpl . use ( 'Agg' ) #NEWLINE#
model . train ( sentences ) #NEWLINE#
assert f ( [ [ 30 , 70 ] , [ 25 , 40 ] ] ) == [ [ 25 , 40 ] ] #NEWLINE#
columns = [ column [ 0 ] for column in cursor . description ] #NEWLINE#
ctypes . windll . shell32 . ShellExecuteW ( None , 'runas' , sys . executable , '' , None , 1 ) #NEWLINE#
G = bipartite . projected_graph ( B , inmates ) #NEWLINE#
"""bob=whatever,king=kong,banana=herb,good,yellow,thorn=hurts""" #NEWLINE#
logger . info ( 'entering#SPACE#logging#SPACE#loop' ) #NEWLINE#
[ a [ i + 1 : j ] for i , j in zip ( zeros , zeros [ 1 : ] ) if len ( a [ i + 1 : j ] ) > 0 ] #NEWLINE#
print ( 'key#SPACE#=#SPACE#{}' . format ( strr ) ) #NEWLINE#
df . loc [ : , ( 'vega' ) ] . replace ( [ inf , - inf ] , nan , inplace = True ) #NEWLINE#
lst = [ 1 , 2 , 3 ] #NEWLINE#
[ 'name' ] #NEWLINE#
a [ : , ( 3 ) ] . toarray ( ) #NEWLINE#
dtest = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] , dtype = np . uint8 ) #NEWLINE# out = imresize ( dtest , 1.0 ) #NEWLINE# out #NEWLINE#
print ( 'BINGO#SPACE#!#SPACE#:#SPACE#%s#SPACE#,#SPACE#%s' % re . match ( 'OK\\s+(\\w+)\\s+(\\w+)' , ch ) . groups ( ) ) #NEWLINE#
break #NEWLINE#
( 'jamy' , 'k' ) , ( 'Park' , 'h' ) , ( 'kick' , 'p' ) , ( 'an' , 'o' ) , ( 'an' , 'o' ) #NEWLINE#
timer_thread . start ( ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
def murmur ( data , seed ) : #NEWLINE# #INDENT# pass #NEWLINE#
x . append ( 'd' ) #NEWLINE#
ax . figure . show ( ) #NEWLINE#
result = json . dumps ( d , ensure_ascii = False ) #NEWLINE# print ( result ) #NEWLINE#
datetime . datetime ( 2012 , 1 , 1 , 0 , 0 , 0 ) , #NEWLINE#
df . groupby ( 'ID' ) . agg ( [ 'std' , 'mean' ] ) #NEWLINE# df . groupby ( 'ID' ) [ '<colname>' ] . agg ( [ 'std' , 'mean' ] ) #NEWLINE#
total_quantity , total_price = ( sum ( x ) for x in zip ( * ( ( item [ 'quantity' ] , #NEWLINE# item [ 'price' ] * item [ 'quantity' ] ) for item in l ) ) ) #NEWLINE#
ax1 . set_xticks ( numpy . arange ( x1 - 1 , x2 + 1 , 0.5 ) ) #NEWLINE#
with open ( 'infile.txt' , 'r+' ) as fopen : #NEWLINE# #INDENT# for line in fopen : #NEWLINE# #INDENT# #INDENT# for word in line . split ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# pass #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
system ( '/etc/init.d/postifx#SPACE#reload' ) #NEWLINE#
l2 = list ( zip ( * l1 ) ) #NEWLINE#
output_rs = tf . transpose ( output , [ 1 , 0 , 2 ] ) #NEWLINE#
df = pd . DataFrame ( np . random . rand ( 3 , 4 ) , columns = list ( 'ABCD' ) ) #NEWLINE#
WebDriverWait ( self , timeout ) . until ( staleness_of ( old_page ) ) #NEWLINE#
x . append ( [ 4 , 5 ] ) #NEWLINE#
return namedtuple ( 'X' , list ( d . keys ( ) ) ) ( * list ( d . values ( ) ) ) #NEWLINE#
unicode_snowman = 'â\x98\x83' . decode ( 'utf8' ) #NEWLINE#
my_list [ i ] = item #NEWLINE#
json . dumps ( remap_keys ( { ( 1 , 2 ) : 'foo' } ) ) #NEWLINE#
"""x""" . join ( [ '' ] + lis + [ '' ] ) #NEWLINE#
p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
time . sleep ( refreshrate ) #NEWLINE#
self . mthread . finished . connect ( self . worker . deleteLater ) #NEWLINE#
f . write ( fileobj . read ( ) ) #NEWLINE#
QtCore . QObject . __init__ ( self ) #NEWLINE#
list ( open ( 'test_newlines.txt' ) ) #NEWLINE#
logging . set_up_done = False #NEWLINE#
[ i for j in ( list ( range ( 10 ) ) , list ( range ( 15 , 20 ) ) ) for i in j ] #NEWLINE#
[ 'brown' , 'log' , 'jumped' , 'over' , 'fox' , 'quick' , 'the' ] #NEWLINE#
self . goButton . clicked . connect ( self . simulThread . start ) #NEWLINE#
s = s [ : begin ] + s [ end + 1 : ] #NEWLINE#
this_module = sys . modules [ __name__ ] #NEWLINE#
app . MainLoop ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
out = np . zeros_like ( array ) #NEWLINE#
super ( Tab5 , self ) . __init__ ( parent ) #NEWLINE#
x = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 2 , 2 , 0 ] ] #NEWLINE# max ( x , key = sum ) #NEWLINE#
array = np . array ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE# 1.0 / array #NEWLINE#
mystr = 'This#SPACE#string#SPACE#is:#SPACE#%s' % ( int ( page ) + 1 ) #NEWLINE#
libc . prctl ( 15 , 'My#SPACE#Simple#SPACE#App' , 0 , 0 , 0 ) #NEWLINE#
logger . info ( 'Jackdaws#SPACE#love#SPACE#my#SPACE#big#SPACE#%s#SPACE#of#SPACE#%s' , 'sphinx' , 'quartz' ) #NEWLINE#
arr = [ [ 2 , 0 , 3 ] , [ 4 , 2 , 3 ] , [ 1 , 0 , 3 ] ] #NEWLINE# any ( [ ( x [ 1 : ] == x [ : - 1 ] ) for x in zip ( * arr ) ] ) #NEWLINE#
print ( 'Strategy#SPACE#1' ) #NEWLINE#
print ( 'Strategy#SPACE#2' ) #NEWLINE#
os . uname ( ) #NEWLINE#
lol = [ ( setitem ( x , 1 , - 2 ) or x ) for x in lol ] #NEWLINE#
stdin . flush ( ) #NEWLINE#
print ( 'Done.' ) #NEWLINE#
( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) , ( 7 , 8 , 9 ) #NEWLINE#
ax2 . pcolormesh ( theta , r , z ) #NEWLINE#
plt . xlim ( - 20 , 60 ) #NEWLINE#
print ( cleaned . split ( ',' ) ) #NEWLINE#
length = len ( data ) #NEWLINE#
traceback . print_stack ( ) #NEWLINE#
new_rows . append ( new_row ) #NEWLINE#
plt . ion ( ) #NEWLINE#
print ( '' . join ( lines ) ) #NEWLINE#
len ( clean ( map ( chr , list ( range ( 1114112 ) ) ) ) ) #NEWLINE#
rows = input . filter ( lambda line : line != header ) #NEWLINE#
data = cursor . fetchall ( ) #NEWLINE#
a = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
return render ( 'my_template' , context ) #NEWLINE#
mylist = [ '12:01' , '12:02' ] #NEWLINE#
corpus = nltk . Text ( corpus0 . words ( ) ) #NEWLINE#
plt . xticks ( list ( range ( 0 , 30 , 2 ) ) , list ( range ( 1 , 31 , 2 ) ) ) #NEWLINE#
return int ( revbin , 2 ) #NEWLINE#
writeline ( 'writetest.txt' , 4 , 'This#SPACE#is#SPACE#the#SPACE#fourth#SPACE#line' ) #NEWLINE#
polA . set_transform ( tA ) #NEWLINE#
wx . Frame . __init__ ( self , None , wx . ID_ANY , 'Colored#SPACE#text' ) #NEWLINE#
index_of_maximum = scipy . argmax ( R . getrow ( i ) . data ) #NEWLINE#
return coo_matrix ( ( vals , ( i , j ) ) , shape = ( m , n ) ) . asformat ( format ) #NEWLINE#
hi ( ) #NEWLINE#
self . release ( ) #NEWLINE#
parser . add_argument ( 'a' , nargs = '?' , default = 'check_string_for_empty' ) #NEWLINE#
self . add_trait ( label , trait ) #NEWLINE#
entity2 = relationship ( 'Entity2' ) #NEWLINE#
self . session = win32com . client . gencache . EnsureDispatch ( 'Redemption.RDOSession' ) #NEWLINE#
ax1 . set_title ( 'Source' ) #NEWLINE#
f . close ( ) #NEWLINE#
fcntl . ioctl ( sock , SIOCSIFADDR , ifreq ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return [ seq [ 0 ] ] + noVow ( seq [ 1 : ] ) #NEWLINE#
k = [ [ 1 , 2 ] , [ 4 ] , [ 5 , 6 , 2 ] , [ 1 , 2 ] , [ 3 ] , [ 4 ] ] #NEWLINE#
print ( tz_to_timedelta ( tz ) ) #NEWLINE#
writer = pd . ExcelWriter ( 'test.xlsx' , engine = 'xlsxwriter' ) #NEWLINE#
clf2 . fit ( X , y ) #NEWLINE#
driver . get ( 'https://cacert.org/' ) #NEWLINE# driver . close ( ) #NEWLINE#
ax . xaxis . tick_top ( ) #NEWLINE#
plt . rc ( 'text' , usetex = True ) #NEWLINE#
j = json . loads ( '{"one"#SPACE#:#SPACE#"1",#SPACE#"two"#SPACE#:#SPACE#"2",#SPACE#"three"#SPACE#:#SPACE#"3"}' ) #NEWLINE# print ( j [ 'two' ] ) #NEWLINE#
gp5 = [ 1 , 4 , 7 , 9 ] #NEWLINE# boxes = [ ( 0 , gp1 ) , ( 0 , gp2 ) , ( 1 , gp3 ) , ( 1 , gp4 ) , ( 0 , gp5 ) ] #NEWLINE#
print ( list ( product ( list ( range ( 2 ) ) , repeat = k ) ) ) #NEWLINE#
return getattr ( self . wrapee , attr ) #NEWLINE#
dist = numpy . sqrt ( numpy . dot ( temp , temp ) ) #NEWLINE#
np . linalg . inv ( a ) #NEWLINE#
print ( testmodule . __doc__ ) #NEWLINE#
return 'Rectangle({0},#SPACE#{1})' . format ( self . width , self . height ) #NEWLINE#
ax . plot_surface ( xim , yim , zi ) #NEWLINE#
print ( 'multiprocessing#SPACE#filter/sample:#SPACE#' , time . time ( ) - tik ) #NEWLINE#
total = sum ( int ( i ) for i in line ) #NEWLINE#
f2 ( ** d ) #NEWLINE#
newstr = str [ - 4 : ] #NEWLINE#
plt . scatter ( x , y , marker = '.' ) #NEWLINE#
c . execute ( 'CREATE#SPACE#TABLE#SPACE#data#SPACE#(a,#SPACE#b,#SPACE#c)' ) #NEWLINE#
r = tree . xpath ( 'bar' ) #NEWLINE#
plt . plot ( t , s ) #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
klass = getattr ( some_module , 'class_name' ) #NEWLINE#
return list ( chain ( * [ item [ 0 ] for item in groupby ( lst ) ] ) ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
return render ( request , 'venue-detail.html' , { 'venue' : venue } ) #NEWLINE#
linmax ( [ [ - 1 , - 2 ] , [ 3 , 4 ] ] ) #NEWLINE#
set ( a . items ( ) ) - set ( b . items ( ) ) #NEWLINE#
text = 'ownload' #NEWLINE#
cols = df . columns . values . tolist ( ) #NEWLINE# pd . concat ( [ df [ col ] . apply ( pd . Series ) for col in cols ] , axis = 1 , keys = cols ) #NEWLINE#
br . set_cookiejar ( cj ) #NEWLINE#
re . sub ( '0(?=[.])' , '' , '%0.4f' % - k ) #NEWLINE#
ax2 . scatter ( x , y , c = t , cmap = 'viridis_r' ) #NEWLINE#
dep_list . append ( opcodes [ i ] ) #NEWLINE#
my_list = [ 1 , 2 , 3 , 1 , 3 ] #NEWLINE#
FOUT . write ( line ( 'a' , 2 ) ) #NEWLINE#
'http://www.bing.com/' , 'http://www.altavista.com/' , 'http://achewood.com/' #NEWLINE#
layout = QtGui . QVBoxLayout ( self ) #NEWLINE#
print ( map ( str , EmployeeList ) ) #NEWLINE#
print ( 'pass' ) #NEWLINE#
author_id = Story . author . get_value_for_datastore ( story ) . id ( ) #NEWLINE#
lambda d = d : self . root . change_directory ( d ) #NEWLINE#
print ( "I'm#SPACE#function#SPACE#b" ) #NEWLINE#
a . update ( { 'a' : [ 4 ] , 'b' : [ 56 ] , 'c' : [ 46 ] } ) #NEWLINE#
print ( fn ( 10 ) ) #NEWLINE#
d = datetime . date ( year = 1940 , month = 1 , day = 1 ) #NEWLINE#
df = df [ [ 'AB' ] ] #NEWLINE#
ax2 . semilogx ( data [ 3 : 8 , ( 1 ) ] , data [ 3 : 8 , ( 2 ) ] ) #NEWLINE#
canvas = tk . Canvas ( root , borderwidth = 0 , background = '#ffffff' ) #NEWLINE#
EMAIL_HOST = 'smtp.gmail.com' #NEWLINE#
return a [ : 2 , : 2 ] #NEWLINE#
g = sns . FacetGrid ( data = df , col = 'group' ) #NEWLINE#
pass #NEWLINE#
tree = ElementTree . parse ( 'your_file.xml' ) #NEWLINE#
print ( i . text ) #NEWLINE#
tree . find ( '//BODY' ) #NEWLINE# tree . find ( '//BODY' ) . text #NEWLINE#
getattr ( foo , string1 + string2 ) ( ) #NEWLINE#
engine = create_engine ( 'sqlite:///' ) #NEWLINE#
print ( ( '\n' . join ( para ) , '\n' ) ) #NEWLINE#
raise TypeError ( 'invalid#SPACE#type:#SPACE#' + str ( type ( d ) ) ) #NEWLINE#
df [ ( np . abs ( stats . zscore ( df ) ) < 3 ) . all ( axis = 1 ) ] #NEWLINE#
list ( get_stuff ( d ) ) #NEWLINE#
return not any ( i in seen or seen . add ( i ) for i in x ) #NEWLINE#
print ( mtcars . head ( ) ) #NEWLINE#
lst = [ 'abc-123' , 'def-456' , 'ghi-789' , 'abc-456' ] #NEWLINE# print ( [ x for x in lst if 'abc' in x ] ) #NEWLINE#
request = requests . get ( image_url , stream = True ) #NEWLINE#
4 , 7 , 2 , 3 , 0 , 9 , 1 , 5 , 6 , 8 #NEWLINE#
print ( solve ( array1 , 1 , 5 ) ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
plt . yscale ( 'log' ) #NEWLINE#
p . search ( s ) . group ( 1 ) #NEWLINE#
any ( map ( eval , my_list ) ) #NEWLINE#
print ( 'Iteration#SPACE#Count:#SPACE#{0}' . format ( count ) ) #NEWLINE#
atexit . register ( report ) #NEWLINE#
"""\\b{}\\b""" . format ( re . escape ( 'foo.bar+' ) ) #NEWLINE#
from functools import reduce #NEWLINE# return ( data [ index ] for index in reduce ( set . union , sets ) ) #NEWLINE#
socket . gethostbyaddr ( 'IP' ) #NEWLINE#
df2 = df . groupby ( [ 'wholesaler' , 'product' ] ) [ 'sales' ] . apply ( pd . expanding_mean ) #NEWLINE#
s = 'Hello!' #NEWLINE#
eastern = pytz . timezone ( 'US/Eastern' ) #NEWLINE#
list ( map ( '' . join , combinations_with_replacement ( [ 'a' , 'b' , 'c' ] , 2 ) ) ) #NEWLINE#
rows = [ line . strip ( ) . split ( '#SPACE#' ) for line in data . split ( '\n' ) ] #NEWLINE#
ld . append ( { l [ 0 ] : int ( l [ col ] ) for l in ll } ) #NEWLINE#
serializers = PostSerializer ( PostObjects , context = { 'request' : request } ) #NEWLINE#
stopwaitsecs = 10 #NEWLINE#
x . wrong #NEWLINE#
test = 'éáé123456tgreáé@€' #NEWLINE#
df . fillna ( '' , inplace = True ) #NEWLINE#
[ 'cube' ] #NEWLINE#
request . user . pretty_username ( ) #NEWLINE#
lists . append ( [ ] ) #NEWLINE#
yield open ( name , 'r' , encoding = 'utf-8' ) #NEWLINE#
rows = hxs . select ( '//form[@name="DATA"]/table/tbody/tr[2]/td/table/tr' ) #NEWLINE#
df [ 'que' ] = df [ 'one' ] [ ( df [ 'one' ] >= df [ 'two' ] ) & ( df [ 'one' ] <= df [ 'three' ] ) ] #NEWLINE#
childobject . parprint ( ) #NEWLINE#
exec ( compile ( open ( '/home/el/foo2/mylib.py' ) . read ( ) , #NEWLINE# '/home/el/foo2/mylib.py' , 'exec' ) ) #NEWLINE#
print ( titlenode [ 0 ] . firstChild . nodeValue ) #NEWLINE#
episodes . append ( { 'season' : 1 , 'episode' : 2 , 'name' : 'Something' } ) #NEWLINE#
sys . stdout . write ( 'hello' ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE# for _ in range ( 5 ) : #NEWLINE# #INDENT# time . sleep ( 1 ) #NEWLINE# sys . stdout . write ( '\x1b[D#SPACE#\x1b[D' ) #NEWLINE# sys . stdout . flush ( ) #NEWLINE#
return super ( FactoryMeta , cls ) . __init__ ( name , bases , dict ) #NEWLINE#
[ x for _ , x in zip ( list ( range ( n ) ) , generator ) ] #NEWLINE#
x if a > b else y #NEWLINE#
y = np . array ( [ 4 , - 9 , 1 ] ) #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 2 , 3 , 4 ] } ) #NEWLINE#
warnings . simplefilter ( 'ignore' ) #NEWLINE#
pub_date = models . DateTimeField ( auto_now_add = True ) #NEWLINE#
print ( line ) #NEWLINE#
_dict [ 'bar' ] = _dict [ 'foo' ] + 1 #NEWLINE#
return self . create_response ( request , { 'success' : True } ) #NEWLINE#
mvprintw ( COLS - length ( 'msg' ) , 1 , 'msg' ) #NEWLINE#
ax . set_aspect ( 1 ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
print ( strfdelta ( delta_obj , '%H#SPACE#hours#SPACE#and#SPACE#%M#SPACE#to#SPACE#go' ) ) #NEWLINE#
fn ( * args , ** kwargs ) #NEWLINE#
msg [ 'From' ] = 'xyz@gmail.com' #NEWLINE#
msg [ 'To' ] = 'abc@gmail.com' #NEWLINE#
console_handler . setLevel ( logging . DEBUG ) #NEWLINE#
a , b = c . imag , c . real #NEWLINE#
idx4 = pd . date_range ( '1/1/2020' , periods = 10000000 , freq = 'Min' ) #NEWLINE#
file . write ( '\n' . join ( '%-15s#SPACE#%s' % ( i , j ) for i , j in data ) ) #NEWLINE#
startupinfo = subprocess . STARTUPINFO ( ) #NEWLINE#
first_mask [ first_mask ] = second_mask #NEWLINE#
"""how#SPACE#now#SPACE#brown#SPACE#cow""" . title ( ) #NEWLINE#
backward = lambda t : t [ - 1 ] + backward ( t [ : - 1 ] ) if t else t #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
courses = { } #NEWLINE#
self . archive = py7zlib . Archive7z ( fp ) #NEWLINE#
xticks [ 0 ] . label1 . set_visible ( False ) #NEWLINE#
conn . close ( ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
l = [ map ( int , line . split ( ',' ) ) for line in f ] #NEWLINE#
ax2 . set_ylim ( 0 , 10 ) #NEWLINE# plt . show ( ) #NEWLINE#
google . load ( 'jquery' , '1.3.2' ) #NEWLINE#
pdf = matplotlib . backends . backend_pdf . PdfPages ( 'output.pdf' ) #NEWLINE#
return calendar . timegm ( d . timetuple ( ) ) #NEWLINE#
irn += repr ( num ) #NEWLINE#
url = urllib . request . urlopen ( 'http://www.stackoverflow.com/' ) #NEWLINE#
client = paramiko . SSHClient ( ) #NEWLINE#
fig . set_size_inches ( 10 , 15 ) #NEWLINE#
user . save ( ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
[ 2 , 4 ] #NEWLINE#
mystr . split ( '\n' ) #NEWLINE#
ax . xaxis_date ( ) #NEWLINE#
i2 = [ [ [ 0 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] ] , [ [ 0 , 0 , 0 , 0 ] , [ 1 , 1 , 1 , #NEWLINE# 1 ] , [ 2 , 2 , 2 , 2 ] ] ] #NEWLINE#
mvprintw ( 0 , LINES - 1 , 'message#SPACE#number#SPACE#2' ) #NEWLINE#
func ( * [ 'abc' , '123' ] ) #NEWLINE#
y = [ [ 1 , 0 ] , [ 2 , 0 ] , [ 3 , 0 ] , [ 4 ] ] #NEWLINE# dict ( zip ( x , y ) ) #NEWLINE#
screen . refresh ( ) #NEWLINE#
[ { 'site' : 'example1.com' , 'A1' : 'G' , 'A5' : 'G' , 'A10' : 'G' } , { 'site' : #NEWLINE# 'example2.com' , 'A1' : 'G' , 'A5' : 'R' , 'A10' : 'Y' } ] #NEWLINE#
globals ( ) . update ( vars ( module . libname ) ) #NEWLINE#
f = open ( '/path/to/file' ) #NEWLINE#
l = [ '1' , '2' , '3' , '4' ] #NEWLINE# s = '%s,' % ',#SPACE#' . join ( l ) #NEWLINE#
df = frame_from_dict ( d , names = [ 'Subcase' , 'Step' , 'ID' ] ) . T #NEWLINE#
url_dict [ 'a' ] . append ( 'x' ) #NEWLINE#
a = [ 'Tests#SPACE#run:#SPACE#1' , '#SPACE#Failures:#SPACE#0' , '#SPACE#Errors:#SPACE#0' ] #NEWLINE# d = { } #NEWLINE# for b in a : #NEWLINE# #INDENT# i = b . split ( ':#SPACE#' ) #NEWLINE# d [ i [ 0 ] ] = i [ 1 ] #NEWLINE# print ( d ) #NEWLINE#
c [ 5 : 6 , ( 7 ) ] #NEWLINE#
print ( stdout . read ( ) ) #NEWLINE#
a = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 ] #NEWLINE#
print ( opener . open ( 'http://stackoverflow.com/q/13656757' ) . read ( ) [ : 100 ] ) #NEWLINE#
print ( 'Kruskal#SPACE#Wallis#SPACE#H-test#SPACE#test:' ) #NEWLINE#
class Neg : #NEWLINE# #NEWLINE# def __init__ ( self , x ) : #NEWLINE# #INDENT# #INDENT# self . x = x #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __cmp__ ( self , other ) : #NEWLINE# #INDENT# return - cmp ( self . x , other . x ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def maxheappush ( heap , item ) : #NEWLINE# #INDENT# heapq . heappush ( heap , Neg ( item ) ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def maxheappop ( heap ) : #NEWLINE# #INDENT# return heapq . heappop ( heap ) . x #NEWLINE#
ax . add_patch ( polygon ) #NEWLINE#
print ( '"%s","%s","%s"' % ( info . group ( 1 ) , info . group ( 2 ) , info . group ( 3 ) ) ) #NEWLINE#
print ( model . predict ( np . array ( [ [ 1 , 0 ] ] ) ) ) #NEWLINE#
serializer_class = TownSerializer #NEWLINE#
_quicksort ( array , 0 , len ( array ) - 1 ) #NEWLINE#
print ( '%10s' % ( '*' * x ) ) #NEWLINE#
print ( 'Today:#SPACE#' , datetime . now ( ) . strftime ( '%d/%m/%Y#SPACE#%H:%M:%S' ) ) #NEWLINE#
from pyPdf import PdfFileWriter , PdfFileReader #NEWLINE#
value = soup . find ( 'input' , { 'id' : 'xyz' } ) . get ( 'value' ) #NEWLINE#
x = np . linspace ( - 1 , 1 , 201 ) #NEWLINE#
c = Counter ( [ values [ 1 ] for values in d . values ( ) ] ) #NEWLINE#
df2 = pd . DataFrame ( { 'a' : [ 1 , 2 ] , 'b' : [ np . nan , 4.0 ] } ) #NEWLINE#
print ( ( 'dims:' , obj . value ) ) #NEWLINE#
"""{0:#SPACE#<{1}}""" . format ( 'sss' , width ) #NEWLINE#
ax . axis [ direction ] . set_visible ( False ) #NEWLINE#
a1 . destroyCallback . add ( b ) #NEWLINE#
pygame . mixer . music . play ( ) #NEWLINE#
tk . Frame . __init__ ( self , master ) #NEWLINE#
A = calX ( A , B , 'multiply' ) #NEWLINE#
data = bytearray ( open ( 'myfile.bin' , 'rb' ) . read ( ) ) #NEWLINE#
X , Y = np . meshgrid ( x , y ) #NEWLINE#
l = [ [ x [ 0 ] for x in s if x [ 0 ] is not None ] for s in l ] #NEWLINE#
print ( ops [ op ] ( True , False ) ) #NEWLINE#
time . sleep ( timeout ) #NEWLINE#
f . __code__ . co_name #NEWLINE#
add ( ** arg ) #NEWLINE#
print ( traceback . format_exception_only ( e . __class__ , e ) ) #NEWLINE#
list ( filter_data ( test_data , lambda k , v : k == 'key1' and v == 'value1' ) ) #NEWLINE#
z [ 'c' ] = z . apply ( lambda row : 0 if row [ 'b' ] in ( 0 , 1 ) else row [ 'a' ] / math . #NEWLINE# log ( row [ 'b' ] ) , axis = 1 ) #NEWLINE#
G . add_edge ( 1 , 2 ) #NEWLINE#
cell_values = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] #NEWLINE#
x += timedelta ( seconds = 3 ) #NEWLINE#
dice = [ random . randint ( 1 , 6 ) for x in range ( 4 ) ] #NEWLINE#
np . digitize ( date_bins_i8 , date_bins_i8 ) #NEWLINE#
SWAGGER_SETTINGS = { 'exclude_namespaces' : [ 'internal_apis' ] } #NEWLINE#
print ( tcpdump ) #NEWLINE#
print ( 'post#SPACE#transaction' ) #NEWLINE#
print ( 'instantiating' ) #NEWLINE#
print ( 'doing#SPACE#foo' ) #NEWLINE#
print ( 'hello' ) #NEWLINE#
print ( 'init' ) #NEWLINE#
print ( convert ( arr , - 2 , 2 , - 1 , 3 ) ) #NEWLINE#
stateB ( ) #NEWLINE#
stateC ( ) #NEWLINE#
subprocess . call ( [ BINARY , '<' , 'nul' ] ) #NEWLINE#
A = [ 1 , 2 , 3 ] #NEWLINE#
b = np . arange ( 2 * 3 ) . reshape ( 2 , 3 ) #NEWLINE#
print ( goodness ( 'I#SPACE#eat' ) ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
node = data [ 'properties' ] [ 'stock' ] [ 'properties' ] [ 'warehouse' ] #NEWLINE# print ( str ( node ) ) #NEWLINE#
img = Image . open ( 'tweeter.png' ) . convert ( 'RGBA' ) #NEWLINE# arr = np . array ( img ) #NEWLINE#
days = ( a - b ) . days #NEWLINE#
plt . scatter ( colorjh [ idx ] , hmag [ idx ] , c = 'g' , s = 1 , alpha = 0.05 ) #NEWLINE#
pip . main ( [ 'show' , package ] ) #NEWLINE#
plt . imshow ( norm2d , origin = 'lower' ) #NEWLINE#
sum ( [ x ] * 10 ) #NEWLINE#
pl . plot ( pl . randn ( 100 ) ) #NEWLINE#
raise ValueError ( 'Invalid#SPACE#card#SPACE#ID' ) #NEWLINE#
print ( unidecode ( '北亰' ) ) #NEWLINE#
[ 'G' , 'H' ] #NEWLINE#
os . environ [ 'A' ] = '1' #NEWLINE#
sys . path . append ( '/home/myusername/myproject' ) #NEWLINE#
Foo . bar . __func__ is foo #NEWLINE#
self . assertAlmostEqual ( tr ( 2 , 3 ) , 0.0632 , 4 ) #NEWLINE#
np . concatenate ( ( x [ : , ( i ) , ( i ) ] , x [ : , ( i ) , ( j ) ] ) , axis = 1 ) #NEWLINE#
print ( type ( data ) ) #NEWLINE#
canv = Canvas ( root , width = 100 , height = 100 ) #NEWLINE#
user = models . ForeignKey ( get_user_model_fk_ref ( ) ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
print ( '(done)' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 100 , 1000 ] , 'b' : [ 200 , 2000 ] , 'c' : [ 300 , 3000 ] } ) #NEWLINE#
return self . extracting ( random . uniform ( 0 , self . weight ) ) #NEWLINE#
return self . sampling ( random . uniform ( 0 , self . weight ) ) #NEWLINE#
bm = b . reshape ( ( 10 , 10 , 2 ) ) #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
matches . append ( item ) #NEWLINE#
limit = serializers . IntegerField ( default = 10 , help_text = 'query#SPACE#limit' ) #NEWLINE#
X , Y = numpy . meshgrid ( x , y ) #NEWLINE#
return int ( '{:08b}' . format ( x ) [ : : - 1 ] , 2 ) #NEWLINE#
df . groupby ( group_hours ) . apply ( insert_missing_hours ) . reset_index ( drop = 1 ) #NEWLINE#
phone = models . CharField ( max_length = 250 , blank = True , null = True ) #NEWLINE#
dic [ 'b' ] #NEWLINE#
l = [ 'a' , 'a' , 'b' , 'c' , 'c' , 'c' ] #NEWLINE#
lv1 ( { 'zap' : 23 } ) #NEWLINE#
A . shape #NEWLINE#
df = df . groupby ( [ df [ 'Date_Time' ] . dt . date ] ) [ 'B' ] . mean ( ) #NEWLINE#
admin . site . register ( Log , LogAdmin ) #NEWLINE#
fileOutput . write ( request . args [ 'datafile' ] [ 0 ] ) #NEWLINE#
ftp = FTP ( 'ftp.ncbi.nlm.nih.gov' ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE# plt . show ( ) #NEWLINE#
pdf = df . toPandas ( ) #NEWLINE#
my_functions . append ( fn ) #NEWLINE#
spinbox . grid ( row = 2 , column = 0 ) #NEWLINE#
subprocess . Popen ( runString [ ext ] % { 'file' : path } , shell = True ) #NEWLINE#
output , err = p2 . communicate ( ) #NEWLINE#
gulp . watch ( 'website/**/*.py' ) #NEWLINE#
print ( 'Stop,#SPACE#now!' ) #NEWLINE#
[ 42 , 1 ] in a . tolist ( ) #NEWLINE#
data = loadtxt ( 'myfile.txt' , delimiter = ';' ) #NEWLINE#
def wrapper ( * args , ** kwargs ) : #NEWLINE# #INDENT# pass #NEWLINE#
'/etc/apache2/mime.types' , '/usr/local/etc/httpd/conf/mime.types' #NEWLINE#
searchbox = driver . find_element_by_name ( 'searchbox' ) #NEWLINE#
fig . suptitle ( 'Simple#SPACE#Scatterplot#SPACE#Matrix' ) #NEWLINE#
df = df . dropna ( ) . reset_index ( drop = True ) #NEWLINE#
f . read ( ) #NEWLINE#
ax . plot ( plotlist [ tracenum ] ) #NEWLINE#
set ( q ) . intersection ( w ) #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , - 4 , 5 ] ) #NEWLINE#
__import__ ( 'm' ) #NEWLINE#
headers = { 'User-Agent' : 'Mozilla/4.0#SPACE#(compatible;#SPACE#MSIE#SPACE#5.5;#SPACE#Windows#SPACE#NT)' } #NEWLINE#
with open ( 'myfile' , 'w' , encoding = 'utf-8' ) as f : #NEWLINE# #INDENT# f . write ( '平成15' ) #NEWLINE#
assert max_product ( [ - 5 ] ) == 1 #NEWLINE#
APP_DEFAULT_GCS_BUCKET_NAME = 'app_default_bucket' #NEWLINE#
os . makedirs ( target_path ) #NEWLINE#
result . append ( ( '#%d' % i , deref ( value [ 'valtab' ] [ i ] [ 'pseq' ] ) ) ) #NEWLINE#
result . append ( ( '#%d' % i , deref ( value [ 'valtab' ] [ i ] [ 'pstr' ] ) ) ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 0 , 3 ) , ( 2 , 3 , 4 ) , ( 3 , 4 , 1 ) , ( 4 , 2 , 0 ) #NEWLINE#
return query . path . split ( '/' ) [ 2 ] #NEWLINE#
data = [ 1 , 2 , 3 , 4 ] #NEWLINE#
table = '\t' . join ( [ '{}\t{}' . format ( d . get ( k ) , k ) for k in sorted ( d ) ] ) #NEWLINE#
for key , value in list ( mydic . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
return super ( JSONField , self ) . get_db_prep_save ( value , ** kwargs ) #NEWLINE#
sock . sendto ( dns . pack ( ) , ( MCAST_GRP , UDP_PORT ) ) #NEWLINE#
app = webapp2 . WSGIApplication ( [ ( '/' , 'handlers.main.MainPage' ) , ( '/sign' , #NEWLINE# 'handlers.guestbook.Guestbook' ) ] , debug = True ) #NEWLINE#
self . myproc = Popen ( 'dir#SPACE#/s' , shell = True , stdout = PIPE , stderr = PIPE ) #NEWLINE#
df4 . plot ( kind = 'hist' , alpha = 0.5 ) #NEWLINE#
traceback . print_exc ( ) #NEWLINE#
L = 'abc' #NEWLINE# [ L [ i ] for i in [ 2 , 1 , 0 ] ] #NEWLINE#
magic_map ( f , [ 'a' , 'b' , 'c' ] , '1' ) #NEWLINE#
data = data . ix [ data [ cols ] > 0 ] #NEWLINE#
my_dict = json . loads ( input ) #NEWLINE#
stats . norm . interval ( 0.68 , loc = mu , scale = sigma ) #NEWLINE#
ax = df [ [ 'V1' , 'V2' ] ] . plot ( kind = 'bar' , title = 'V#SPACE#comp' , figsize = ( 15 , 10 ) , #NEWLINE# legend = True , fontsize = 12 ) #NEWLINE#
self . browser . quit ( ) #NEWLINE#
dc . SetPen ( wx . Pen ( 'BLUE' , 4 ) ) #NEWLINE#
dc . SetPen ( wx . Pen ( 'GREEN' , 4 ) ) #NEWLINE#
sys . stdout . buffer . write ( 'auszuschlieÃ\x9fenâ\x80¦' . encode ( 'ascii' , #NEWLINE# 'xmlcharrefreplace' ) ) #NEWLINE#
self . transport . loseConnection ( ) #NEWLINE#
use_library ( 'django' , '1.1' ) #NEWLINE#
new_a = a . reshape ( new_shape ) #NEWLINE#
s . issuperset ( t ) #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
Point . ORIGIN = Point ( ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
msg . attach ( att ) #NEWLINE#
diff = difflib . ndiff ( file1 . readlines ( ) , file2 . readlines ( ) ) #NEWLINE#
array2 = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
compressed_table . append ( ( istart , iend , table [ i - 1 ] ) ) #NEWLINE#
pygtk . require ( '2.0' ) #NEWLINE#
self . response . write ( '-#SPACE#auth_domain#SPACE#=#SPACE#%s\n' % user . auth_domain ( ) ) #NEWLINE#
mylist = [ mylist [ i ] for i in myorder ] #NEWLINE# print ( mylist ) #NEWLINE#
sample = lognorm . rvs ( sigma , 0 , scale , size = 1000000 ) #NEWLINE#
type = models . CharField ( max_length = 5 , choices = MEDIA_TYPES ) #NEWLINE#
l2 , l3 , l1 = zip ( * paired_sorted ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
l = np . asarray ( l ) #NEWLINE#
d = array ( [ 0 , 1 ] ) #NEWLINE#
[ ( ord ( x ) % 32 ) for x in [ string . letters ] [ 0 ] ] #NEWLINE#
p ( ) #NEWLINE#
__init__ . py #NEWLINE#
random . shuffle ( list_of_questions ) #NEWLINE#
plt . imshow ( image , extent = [ x . min ( ) , x . max ( ) , y . min ( ) , y . max ( ) ] ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE# [ l [ i : : 3 ] for i in range ( 3 ) ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
return '/etc' #NEWLINE#
letters = ( c . lower ( ) for c in text if c . isalpha ( ) ) #NEWLINE#

dis . dis ( lambda x : '%s' % x ) #NEWLINE#
G . add_edges_from ( edges ) #NEWLINE#
self . window . setLayout ( self . layout ) #NEWLINE#
colorbar . set_ticks ( np . linspace ( 0 , ncolors , ncolors ) ) #NEWLINE#
setup_test_environment ( ) #NEWLINE#
ord ( s ) #NEWLINE#
Process ( target = worker , args = ( task_queue , done_queue ) ) . start ( ) #NEWLINE#
[ True , True , False , True , True , False , True ] , #NEWLINE#
ln2 . set_solid_capstyle ( 'round' ) #NEWLINE#
if something : #NEWLINE# #INDENT# raise Exception ( 'My#SPACE#error!' ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
arr = np . array ( [ [ 'one' , [ 1 , 2 , 3 ] ] , [ 'two' , [ 4 , 5 , 6 ] ] ] , dtype = np . object ) #NEWLINE#
r . sub ( '[\\1]' , name ) #NEWLINE#
mycounter = Counter ( txt . split ( ) ) #NEWLINE#
cv2 . waitKey ( 1 ) #NEWLINE#
m . save ( ) #NEWLINE#
"""Return#SPACE#bitness#SPACE#of#SPACE#operating#SPACE#system,#SPACE#or#SPACE#None#SPACE#if#SPACE#unknown.""" #NEWLINE#
return { e . attrib [ 'name' ] : e . attrib . get ( 'value' , '' ) for e in fields } #NEWLINE#
ingredients = IngredientSerializer ( many = True ) #NEWLINE#
t = np . array ( [ 4 , 5 , 0 , 7 , 1 , 6 , 8 , 3 , 2 , 9 ] ) #NEWLINE#
( b . cumsum ( ) - b . cumsum ( ) . where ( ~ b ) . fillna ( method = 'pad' ) . fillna ( 0 ) ) . astype ( int ) #NEWLINE#
i = Image . open ( 'image.png' ) #NEWLINE#
from BeautifulSoup import BeautifulSoup #NEWLINE#
return cythonize ( * args , ** kwargs ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
value = myVariant . toString ( ) #NEWLINE#
return cmp ( len ( a ) , len ( b ) ) #NEWLINE#
changedTypedf = joindf . withColumn ( 'show' , joindf [ 'show' ] . cast ( DoubleType ( ) ) ) #NEWLINE#
xvalues = np . tile ( np . arange ( im . shape [ 1 ] ) , ( 1 , 2 ) ) #NEWLINE#
"""http://www.example.com/action?c=1&v=3&c=4&d=%3A%24%23%40%3D%3F%25%5EQ%5E%24""" #NEWLINE#
getattr ( f , 'a' ) #NEWLINE#
prev . append ( line ) #NEWLINE#
query . filter ( User . name != None ) #NEWLINE#
data [ 'sex' ] . replace ( 0 , 'Female' , inplace = True ) #NEWLINE# data [ 'sex' ] . replace ( 1 , 'Male' , inplace = True ) #NEWLINE#
subject = forms . CharField ( max_length = 100 , required = True ) #NEWLINE#
temp [ mask2 ] = 2 #NEWLINE#
l . sort ( key = lambda t : t [ 1 ] , reverse = True ) #NEWLINE#
equals = [ ( x [ 1 : ] == x [ : - 1 ] ) for x in transposed ] #NEWLINE#
print ( a [ np . sort ( idx ) ] ) #NEWLINE#
st = { '2' , '4' , '17' , '21' , '22' , '24' , '27' , '28' , '29' , '33' , '39' } #NEWLINE# filtered_dict = { k : v for k , v in my_dict . items ( ) if any ( val in st for val in #NEWLINE# v ) } #NEWLINE#
w . set_linewidth ( 2 ) #NEWLINE#
df2 = pd . DataFrame ( df1 ) #NEWLINE#
import lxml . etree as et #NEWLINE#
print ( 'Invalid#SPACE#input' ) #NEWLINE#
def foo ( str1 , str2 ) : #NEWLINE# #INDENT# return str1 . replace ( str2 , str2 . upper ( ) ) #NEWLINE#
dis . dis ( compile ( 'x#SPACE#in#SPACE#{1,#SPACE#2,#SPACE#3}' , '<file>' , 'exec' ) ) #NEWLINE#
main ( ) #NEWLINE#
t . start ( ) #NEWLINE#
y = np . hstack ( [ y , y [ - 1 ] ] ) #NEWLINE#
data . plot ( ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# pygame . sprite . Sprite . __init__ ( self , self . groups ) #NEWLINE#
logging . getLogger ( __name__ ) . setFormatter ( log_format ) #NEWLINE#
print ( 'running#SPACE#some#SPACE#module#SPACE#with#SPACE#5#SPACE#raw_input#SPACE#requests' ) #NEWLINE#
sess . run ( embedding_init , feed_dict = { embedding_placeholder : embedding } ) #NEWLINE#
df1 [ 'idx' ] = df1 . groupby ( 'val1' ) [ 'idx' ] . cumsum ( ) - 1 #NEWLINE#
layout = QVBoxLayout ( ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# f = open ( 'test.txt' , 'r' ) #NEWLINE#
xi = np . array ( [ x1 , x2 , x3 ] , dtype = np . float ) #NEWLINE#
return sum ( conf_matrix [ i ] [ i ] for i in range ( len ( conf_matrix ) ) ) / t #NEWLINE#
y = tf . placeholder ( tf . float32 , shape = [ batch_size , y_dim ] ) #NEWLINE#
print ( a [ 1 , 5 ] ) #NEWLINE#
Data [ ... , 0 ] + 1.0j * Data [ ... , 1 ] #NEWLINE#
print ( 4 * math . atan ( 1 ) ) #NEWLINE#
index = [ ( i + 1 ) for i in range ( 10 ) ] #NEWLINE#
array ( [ 1 , 1 , 1 , 1 ] ) #NEWLINE#
dbc . close ( ) #NEWLINE#
self . _stop = threading . Event ( ) #NEWLINE#
self . redirect ( '/serve/%s' % blob_info . key ( ) ) #NEWLINE#
pool = multiprocessing . Pool ( ) #NEWLINE#
b [ 'errors' ] . sort ( ) #NEWLINE#

A = [ 1 , 3 , 2 , 6 , 5 , 7 ] #NEWLINE#
predicted = classifier . predict ( X_test ) #NEWLINE#
students = Students . objects . get . all ( ) #NEWLINE#
table = pd . pivot_table ( df , index = [ 'item_id' , 'hour' , 'date' ] , columns = #NEWLINE# 'when' , values = 'quantity' ) #NEWLINE#
p = re . compile ( '^(.)\\1*$' ) #NEWLINE#
layout . addWidget ( QLabel ( 'this#SPACE#is#SPACE#the#SPACE#main#SPACE#frame' ) ) #NEWLINE#
[ '323' , '232.02' , '02.03' , '03.23' , '23.99' , '87' , '0.111111' ] #NEWLINE#
subplot ( 3 , 1 , 1 ) #NEWLINE#
df . columns = [ '' . join ( col ) for col in df . columns ] #NEWLINE#
in_memory_file = file . read ( ) #NEWLINE#
response = self . client . get ( url_for ( 'api.my-service' , ** data ) ) #NEWLINE#
for k , v in list ( subscript . items ( ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , index = list ( 'ab' ) ) #NEWLINE#
print ( s . encode ( 'utf-8' ) ) #NEWLINE#
print ( 'In#SPACE#FunctionDef#SPACE##SPACE#with#SPACE#funcion#SPACE#{}' . format ( node . name ) ) #NEWLINE#
f = input ( ) #NEWLINE#
sock . setsockopt ( socket . IPPROTO_IP , socket . IP_ADD_MEMBERSHIP , mreq ) #NEWLINE#
x = 0.1 * np . sin ( 2 * np . pi * 1.2 * np . sqrt ( t ) ) #NEWLINE#
out = twos_comp ( int ( binary_string , 2 ) , len ( binary_string ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
dirs = [ d for d in os . listdir ( 'Tools' ) if os . path . isdir ( os . path . join ( #NEWLINE# 'Tools' , d ) ) ] #NEWLINE#
urllib . request . urlretrieve ( 'http://google.com/index.html' , filename = #NEWLINE# 'local/index.html' ) #NEWLINE#
np . mean ( arr , axis = 1 ) #NEWLINE#
plt . xticks ( new_xticks , new_xticks ) #NEWLINE#
print ( ( 'Interrupted#SPACE#at' , i ) ) #NEWLINE#
file = open ( sys . argv [ 1 ] , 'r+' , encoding = 'utf-8' ) #NEWLINE#
tk . Button ( root , text = 'Click#SPACE#me' , command = onClick ) . pack ( ) #NEWLINE#
a = zipfile . ZipFile ( archive , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
urllib . request . urlopen ( 'http://location/app/myroute/?' + jdata ) #NEWLINE#
print ( 'Set#SPACE#riak_host#SPACE#and#SPACE#bucket_name#SPACE#appropriately#SPACE#for#SPACE#your#SPACE#Riak#SPACE#cluster.' ) #NEWLINE#
config [ 'key3' ] = 'value3' #NEWLINE#
print ( soup . title . string ) #NEWLINE#
help ( '' . encode ) #NEWLINE#
help ( module . interesting_function ) #NEWLINE#
print ( div . find ( 'a' ) . contents [ 0 ] ) #NEWLINE#
urllib . parse . urlencode ( params ) #NEWLINE#
[ '2015-08-29T22:04:39.000Z' ] #NEWLINE#
cursor = db . execute ( 'SELECT#SPACE#*#SPACE#FROM#SPACE#Customer#SPACE#WHERE#SPACE#CustomerID#SPACE#=#SPACE#%s' , [ #NEWLINE# customer_id ] ) #NEWLINE#
re . sub ( '#SPACE#' , '-' , a ) #NEWLINE#
s = pxssh . pxssh ( ) #NEWLINE#
super ( ProductForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
lis [ 0 ] ( ) #NEWLINE#
set ( item ) - set ( z ) #NEWLINE#
p . join ( ) #NEWLINE#
res = { } #NEWLINE# for item in l : #NEWLINE# #INDENT# res . setdefault ( item [ 'a' ] , [ ] ) . append ( item ) #NEWLINE#
y . append ( sublist [ 1 ] ) #NEWLINE#
self . measure_msg . emit ( 'phase2' ) #NEWLINE#
return redirect ( login_url ) #NEWLINE#
input = sys . stdin . readline ( ) #NEWLINE#
frame . grid ( column = 0 , row = 0 , sticky = ( N , S , E , W ) ) #NEWLINE#
rdb . set_trace ( ) #NEWLINE#
0 , 42 , - 1 , 0 , 45 , 1 #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
app = QApplication ( sys . argv ) #NEWLINE#
do_something_6 ( ) #NEWLINE#
jmag = np . array ( jmah ) #NEWLINE#
hdf5 = h5py . File ( 'test-p.h5' , 'w' ) #NEWLINE#
my_dict = dict ( foo = 'bar' , num = 42 ) #NEWLINE#
return np . interp ( np . linspace ( 0 , npt , nbin + 1 ) , np . arange ( npt ) , np . sort ( x ) ) #NEWLINE#
sys . stdout . write ( term . BOL + term . CLEAR_EOL ) #NEWLINE#
count += 1 #NEWLINE#
os . utime ( path_to_file , ( access_time , modification_time ) ) #NEWLINE#
app . config [ 'SESSION_TYPE' ] = 'filesystem' #NEWLINE#
"""""" . join ( c for c in filename if c . isalnum ( ) or c in keepcharacters ) . rstrip ( ) #NEWLINE#
array = np . random . randn ( 5 , 3 ) #NEWLINE#
np . vstack ( ( a , b , c ) ) . T #NEWLINE#
df #NEWLINE#
img . add_header ( 'Content-Id' , '<testimage>' ) #NEWLINE#
y = np . random . rand ( n ) #NEWLINE#
print ( Counter ( n1 ) - Counter ( n2 ) ) #NEWLINE#
G . add_edge ( 1 , 2 , key = 'abc' , weight = 1 ) #NEWLINE#
out . write ( '\n' ) #NEWLINE#
h = httplib . HTTPConnection ( 'www.example.com' ) #NEWLINE#
logger . debug ( 'Pack#SPACE#my#SPACE#%s#SPACE#with#SPACE#five#SPACE#dozen#SPACE#%s' , 'box' , 'liquor#SPACE#jugs' ) #NEWLINE#
word_list = re . findall ( "[\\w']+" , string ) #NEWLINE# print ( { word : word_list . count ( word ) for word in word_list } ) #NEWLINE#
plt . legend ( ) #NEWLINE#
print ( response . headers ) #NEWLINE#
ax0b . get_yaxis ( ) . get_offset_text ( ) . set_x ( - 0.075 ) #NEWLINE#
ax0c . get_yaxis ( ) . get_offset_text ( ) . set_x ( - 0.075 ) #NEWLINE#
a = np . arange ( 100 ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
""",""" . join ( alist ) . split ( ',' ) #NEWLINE#
return self . __add__ ( other ) #NEWLINE#
r . match ( 'foo' ) . groupdict ( ) #NEWLINE#
repr ( s ) #NEWLINE#
d = { 'one' : 1 , 'three' : 3 , 'two' : 2 , 'four' : 4 } #NEWLINE#
user_datastore . create_user ( email = 'test2' , password = 'test2' ) #NEWLINE#
numpy . where ( a > 2 ) #NEWLINE#
print ( 'UNFIXED' ) #NEWLINE#
print ( 'name#SPACE#:' , name , 'age#SPACE#:' , age ) #NEWLINE#
batch . add ( service . farmers ( ) . list ( ) , callback = list_farmers ) #NEWLINE#
delta = timedelta ( hours = t . hour , minutes = t . minute , seconds = t . second ) #NEWLINE#
"""^(?:http|ftp)s?://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|localhost|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\[?[A-F0-9]*:[A-F0-9:]+\\]?)(?::\\d+)?(?:/?|[/?]\\S+)$""" #NEWLINE#
self . assertAlmostEqual ( tr ( 2 , 1 ) , 0.0718 , 4 ) #NEWLINE#
ax . plot_date ( TA , A , 'b--' ) #NEWLINE#
[ x [ x != 0 ] for x in np . split ( a , np . where ( a == 0 ) [ 0 ] ) if len ( x [ x != 0 ] ) ] #NEWLINE#
"""foobar""" #NEWLINE#
A = ( C * mask ) . sum ( axis = - 1 ) #NEWLINE#
plt . ion ( ) #NEWLINE#
reader = csv . reader ( fin ) #NEWLINE#
randomSample = [ ( random ( ) - 0.5 , random ( ) - 0.5 ) for _ in range ( count ) ] #NEWLINE#
self . view . setColumnWidth ( 0 , 800 ) #NEWLINE#
globals ( ) [ function ] ( ) #NEWLINE#
a [ [ [ 0 ] , [ 1 ] ] , i ] #NEWLINE#
x += ( 0 , 0 ) , #NEWLINE#
do_something_with_filtered_url ( filtered_url ) #NEWLINE#
len ( net . params ) #NEWLINE#
dt = os . path . getmtime ( '/home/me/.bashrc' ) #NEWLINE#
text = textract . process ( 'path/to/file.extension' ) #NEWLINE#
ser . dropna ( ) . plot ( ax = axes [ 1 ] ) #NEWLINE#
[ 0 , 0 , 0 , 0 ] #NEWLINE#
plt . xlim ( 0 , 10 ) #NEWLINE#
display . popen . terminate ( ) #NEWLINE#
os . environ [ 'PYTHONPATH' ] . split ( os . pathsep ) #NEWLINE#
print ( device_props . Get ( 'org.freedesktop.UDisks.Device' , 'DriveVendor' ) ) #NEWLINE#
print ( df . iloc [ new_index ] ) #NEWLINE#
role_id = db . Column ( db . Integer , db . ForeignKey ( 'role.id' ) , primary_key = True ) #NEWLINE#
d = { 'a' : [ [ 1 , 2 , 3 ] , [ 1 , 2 , 3 ] ] , 'b' : [ [ 2 , 4 , 1 ] , [ 1 , 6 , 1 ] ] } #NEWLINE# { k : map ( sum , zip ( * v ) ) for k , v in list ( d . items ( ) ) } #NEWLINE#
print ( sline ) #NEWLINE#
x [ 'hgS_070000' ] [ 0 , 0 ] . children [ 0 , 0 ] . children [ 0 , 0 ] . properties [ 0 , 0 ] . XData #NEWLINE#
n += 1 #NEWLINE#
print ( 'Here\'s#SPACE#a#SPACE#backslash:#SPACE#\\.#SPACE#Here\'s#SPACE#a#SPACE#double#SPACE#quote:#SPACE#".' ) #NEWLINE#
title_words = set ( title . lower ( ) . split ( ) ) #NEWLINE#
app . run ( port = 7080 , ** kwargs ) #NEWLINE#
plt . figure ( ) #NEWLINE#
"""(Decimal('11.66985'),#SPACE#Decimal('1e-8'),(1,),#SPACE#(1,2,3),#SPACE#1.2,#SPACE#[1,2,3],#SPACE#{1:2})""" #NEWLINE#
ax1 . fill_between ( x , 0 , y_stack [ ( 0 ) , : ] , facecolor = '#CC6666' , alpha = 0.7 ) #NEWLINE#
d2 = { k : f ( v ) for k , v in list ( d . items ( ) ) } #NEWLINE#
C = [ ',' . join ( pair ) for pair in zip ( A , B ) ] #NEWLINE#
l = [ [ 1 , 3 ] , [ 23 , 4 ] , [ 13 , 45 , 6 ] , [ 8 , 3 ] , [ 44 , 33 , 12 ] ] #NEWLINE# list ( dict ( ( len ( i ) , i ) for i in l ) . values ( ) ) #NEWLINE#
tuple ( zip ( MONTHS , MONTHS ) ) #NEWLINE#
print ( 'written#SPACE#to#SPACE#file' ) #NEWLINE#
plt . show ( ) #NEWLINE#
globals ( ) [ 'z' ] = oldZ [ 0 ] #NEWLINE#
return parity ( [ perm0 [ i ] for i in perm1 ] ) #NEWLINE#
pipeline . named_steps [ 'pca' ] #NEWLINE# pipeline . steps [ 1 ] [ 1 ] #NEWLINE#
for i in range ( 20 , len ( arr ) ) : #NEWLINE# #INDENT# arr [ i ] = 0 #NEWLINE#
sys . stdout = progA . stdin #NEWLINE#
phone_format ( '5555555555' ) #NEWLINE#
df . loc [ g . groups . get ( 2 , [ ] ) ] #NEWLINE#
f ( 1 , 2 , param = 3 ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
table_rows = [ e for e in eps_table . iter ( ) if e . tag == 'tr' ] #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
user = super ( UserSerializer , self ) . update ( instance , validated_data ) #NEWLINE#
whoops ( ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 7 , 7 , 7 , 8 , 8 ] #NEWLINE#
data = np . random . rand ( 5 , 20 ) #NEWLINE#
mylist . sort ( ) #NEWLINE#
page = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
s . set_debuglevel ( 1 ) #NEWLINE#
system ( 'mode#SPACE#con#SPACE#cols=%s#SPACE#lines=%s' % ( len1 , hgt ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE# subprocess . call ( [ 'curl' , 'http://localhost:2222' ] ) #NEWLINE#
urllib . request . Request ( url , data , header ) #NEWLINE#
json . dumps ( your_variable ) #NEWLINE#
console . setLevel ( logging . INFO ) #NEWLINE#
return any ( x . startswith ( '%s/' % name . rstrip ( '/' ) ) for x in z . namelist ( ) ) #NEWLINE#
f . close ( ) #NEWLINE#
print ( dict ( y [ 'k1' ] ) ) #NEWLINE#
new_list = [ dd for dd in my_list if not dd is new_dict ] #NEWLINE#
list1 = [ line . strip ( ) . split ( '#' ) [ 0 ] . split ( ) for line in f ] #NEWLINE#
print ( k , Dictionary [ k ] ) #NEWLINE#
ax . scatter ( x , yflat , z ) #NEWLINE#
data = json . loads ( '{"lat":444,#SPACE#"lon":555}' ) #NEWLINE#
img_temp . write ( opener . open ( url ) . read ( ) ) #NEWLINE#
return [ i for i in l1 if not any ( j in i for j in l2 ) ] #NEWLINE#
ax = plt . axes ( ) #NEWLINE#
line = f . readlines ( ) [ 7 ] #NEWLINE#
self . result_queue . put ( answer ) #NEWLINE#
print ( tree . find ( './{0}parent/{0}version' . format ( namespace ) ) . text ) #NEWLINE#
return np . take ( arr , inds ) #NEWLINE#
t = np . arctan2 ( y , x ) #NEWLINE#
x = np . array ( [ [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , np . nan , 5 ] , [ np . nan , 5 , 2 , 3 ] ] ) #NEWLINE#
current_line += 1 #NEWLINE#
np . loadtxt ( 'cov.csv' ) #NEWLINE#
raise RedirectException ( '/main/new' ) #NEWLINE#
super ( OrderedDict , self ) . __setitem__ ( key , value ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
return name , age #NEWLINE#
self . __dict__ . update ( locals ( ) ) #NEWLINE#
ax . add_patch ( patch ) #NEWLINE#
parser . add_argument ( '-a' , '--aggregation' , help = 'aggregation' , required = False ) #NEWLINE#
[ 'group9' , 'class23' ] #NEWLINE#
self . button . menu ( ) . addAction ( action ) #NEWLINE#
triplets = [ ( 1 , 6 , 6 ) , ( 2 , 5 , 3 ) , ( 2 , 4 , 9 ) , ( 7 , 5 , 6 ) ] #NEWLINE#
print ( os . path . isdir ( '/home/el' ) ) #NEWLINE# print ( os . path . exists ( '/home/el/myfile.txt' ) ) #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( html ) #NEWLINE#
res . get ( ) #NEWLINE#
print ( model . predict ( np . array ( [ [ 0 , 0 ] ] ) ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
record1 = { 'name' : 'Bob' , 'email' : 'bob@email.com' } #NEWLINE#
invcovar . shape #NEWLINE#
import multiprocessing #NEWLINE#
data = client . get_spot_price ( ) #NEWLINE#
return [ ( i + i * weight ) for i in v ] + [ n ] #NEWLINE#
im . wcs [ : : 1 / 128 , : : 1 / 128 ] #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
root . bind ( '<Control-r>' , hello ) #NEWLINE#
return hasattr ( self , name ) #NEWLINE#
print ( 'Executing#SPACE#block#SPACE#of#SPACE#code#SPACE#...#SPACE#' ) #NEWLINE#
self . listbox . select_set ( 0 ) #NEWLINE#
ax = fig . add_axes ( [ 0 , 0 , 1 , 1 ] , frameon = False ) #NEWLINE#
fieldsets = ( None , { 'fields' : ( 'title' , ) } ) , ( 'Extra' , { 'fields' : ( 'content' #NEWLINE# , ) , 'classes' : ( 'collapse' , ) } ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
return { 'value1' : 'foo' , 'value2' : 'bar' } #NEWLINE#
urls = re . findall ( 'href=[\\\'"]?([^\\\'"#SPACE#>]+)' , s ) #NEWLINE#
ip . close ( ) #NEWLINE#
d . setdefault ( i , set ( ) ) . add ( j ) #NEWLINE#
ax . set_zlim ( 0 , 100 ) #NEWLINE# plt . show ( ) #NEWLINE#
[ 1 , 2 , 3 , 4 , 5 , 13 ] #NEWLINE#
worksheet3 = workbook . add_worksheet ( ) #NEWLINE#
CACHES = { 'default' : { 'BACKEND' : 'django.core.cache.backends.dummy.DummyCache' } #NEWLINE# } #NEWLINE#
a . save ( ) #NEWLINE#
response . close ( ) #NEWLINE#
decorator2 ( f ) #NEWLINE#
l = [ 'william' , 'short' , '\x80' , 'twitter' , 'ª' , 'â' , 'video' , 'guy' , 'ray' ] #NEWLINE# [ word for word in l if word . isalnum ( ) ] #NEWLINE#
print ( 'Column#SPACE#names:#SPACE#{}\n' . format ( column_names ) ) #NEWLINE#
sys . stdout . write ( '\x08%s' % sym ) #NEWLINE#
last_updated = db . Column ( db . DateTime , default = datetime . datetime . now ( ) ) #NEWLINE#
temp_list . append ( 'one' ) #NEWLINE#
s = sys . stdin . read ( ) #NEWLINE#
response = request . get_response ( main . app ) #NEWLINE#
plt . show ( ) #NEWLINE#
words . append ( 'hundred' ) #NEWLINE#
tags = Tag . objects . filter ( field_name = 'string_or_field' ) #NEWLINE# posts = Post . objects . filter ( tags__in = tags ) #NEWLINE#
return [ os . getpid ( param ) for param in params ] #NEWLINE#
gtk . TextBuffer . __init__ ( self ) #NEWLINE#
self . SetSizer ( s ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# YourApp ( ) . run ( ) #NEWLINE#
self . _window . destroy ( ) #NEWLINE#
cdict = { c . name : c . value for c in cj } #NEWLINE#
return func ( * args , ** kwargs ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
a == a #NEWLINE#
pl . imshow ( x , cmap = 'Blues' , interpolation = 'nearest' ) #NEWLINE#
worksheet . set_column ( i , i , width ) #NEWLINE#
from . import * #NEWLINE#
d = dict ( d ) #NEWLINE#
return map ( np . float32 , result ) #NEWLINE#
root = Tk ( ) #NEWLINE#
print ( ( 'The#SPACE#total#SPACE#number#SPACE#is' , total ) ) #NEWLINE#
L [ i ] = L [ i ] [ : : - 1 ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
time . gmtime ( ts / 1000 ) #NEWLINE#
b . append ( [ 0 , 1 , 0 ] ) #NEWLINE#
print ( '%s=%s' % ( k , getattr ( X , k ) ) ) #NEWLINE#
def filter_list ( L ) : #NEWLINE# #INDENT# return [ x for x in L if not any ( set ( x ) <= set ( y ) for y in L if x is not y ) ] #NEWLINE#
f = pd . DataFrame ( dict ( year = list ( range ( 2000 , 2011 ) ) , A = np . random . rand ( 11 ) ) ) #NEWLINE#
out = str2num . dot ( de2bi_convarr ) #NEWLINE#
print ( not any ( dict2 . values ( ) ) ) #NEWLINE#
writer . writerows ( grouped ) #NEWLINE#
print ( df [ df . Name . isin ( val ) ] ) #NEWLINE#
my_thread . start ( ) #NEWLINE#
self . layout . addWidget ( self . statusBar ) #NEWLINE#
label = tk . Label ( root , text = 'Hello,#SPACE#world' ) #NEWLINE#
df1 . update ( df2 ) #NEWLINE#
thread . start ( ) #NEWLINE#
win . show_all ( ) #NEWLINE#
result = subprocess . check_output ( [ 'pwd' ] ) #NEWLINE#
plt . legend ( handles = handles , loc = 'best' ) #NEWLINE#
proxy . ProxyClient . __init__ ( self , * args , ** kwargs ) #NEWLINE#
excel_app = client . Dispatch ( 'Excel.Application' ) #NEWLINE#
elem_list . append ( i ) #NEWLINE#
img = Image . open ( 'sample_in.jpg' ) #NEWLINE#
self . transport . write ( self . factory . quote + '\r\n' ) #NEWLINE#
fig = plt . figure ( figsize = ( 10 , 5 ) ) #NEWLINE#
ast . literal_eval ( raw ) #NEWLINE#
print ( a [ - 9 : ] ) #NEWLINE#
a = np . random . randint ( 0 , 10 , ( 3 , 3 ) ) #NEWLINE#
fig . subplots_adjust ( left = 0 , right = 1 , top = 1 , bottom = 0 , hspace = 0 , wspace = 0 ) #NEWLINE#
self . assertAlmostEqual ( tr ( 1 , 2 ) , 0.0663 , 4 ) #NEWLINE#
ser = serial . Serial ( 'COM3' , 9600 ) #NEWLINE#
db . engine . execute ( schema ) #NEWLINE#
r . destroy ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , 'en_US.UTF-8' ) #NEWLINE#
print ( C . sum ( - 1 ) ) #NEWLINE#
[ OrderedDict ( [ ( 'type' , 'integer' ) , ( 'number' , [ '1' , '2' , '3' , '4' ] ) ] ) , #NEWLINE# OrderedDict ( [ ( 'type' , 'character' ) , ( 'letter' , [ 'a' , 'b' , 'c' , 'd' ] ) ] ) ] #NEWLINE#
f = open ( 'test.txt' , 'r' ) #NEWLINE#
CORBA . __file__ #NEWLINE#
d . setdefault ( j , [ ] ) . append ( i ) #NEWLINE#
group ( 5 , list ( range ( 5 ) ) ) #NEWLINE#
print ( [ map ( int , list ( '{:0{w}b}' . format ( x , w = r ) ) ) for x in range ( 2 ** r ) ] ) #NEWLINE#
return int ( round ( n [ 0 ] ) ) #NEWLINE#
return self . parser . parse_args ( sys . argv [ 1 : ] , ns ) #NEWLINE#
line = open ( 'ints.txt' ) . read ( ) . split ( ',' ) #NEWLINE# total = sum ( int ( i ) for i in line ) #NEWLINE#
len ( s ) #NEWLINE#
return word . encode ( 'ascii' ) . isalpha ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
from collections import OrderedDict #NEWLINE#
CEO . append ( 'right#SPACE#child' , CFO ) #NEWLINE#
M . diagonal ( ) #NEWLINE#
term = urllib . parse . quote ( "'%s'" % ( term , ) ) #NEWLINE#
root . quit ( ) #NEWLINE#
logging . basicConfig ( level = logging . INFO , format = '%(process)d#SPACE#%(message)s' ) #NEWLINE#
a = np . arange ( 24 ) . reshape ( ( 4 , 6 ) ) #NEWLINE#
new_period = PERIOD . replace ( hour = 23 , minute = 30 ) #NEWLINE#
pd . rolling_apply ( tmp [ 'A' ] + tmp [ 'B' ] + 1 , 50 , lambda x : gm ( x , 5 ) ) #NEWLINE#
return render_template ( 'test.html' , args = args ) #NEWLINE#
ax [ 0 ] . set_title ( 'Original#SPACE#data' ) #NEWLINE#
ax2 = ax1 . twinx ( ) #NEWLINE#
os . setpgrp ( ) #NEWLINE#
start = time . time ( ) #NEWLINE#
for i in range ( 10 ) : #NEWLINE# #INDENT# a . replace ( str ( i ) , '' ) #NEWLINE#
print ( 'Some#SPACE#thing' ) #NEWLINE#
yield np . random . random ( ) , str ( i ) #NEWLINE#
child . expect ( 'User.*:' ) #NEWLINE#
layout . addWidget ( self . table ) #NEWLINE#
wait = WebDriverWait ( driver , 5 ) #NEWLINE#
cv . ShowImage ( 'test' , out_2 ) #NEWLINE#
pylab . figure ( ) #NEWLINE#
return response #NEWLINE#
matplotlib . use ( 'TkAgg' ) #NEWLINE#
[ '0123456789' ] #NEWLINE#
plt . axvline ( mean , color = 'r' , linestyle = '--' ) #NEWLINE#
utc_to_local_datetime ( datetime . datetime ( 2010 , 12 , 6 , 17 , 29 , 7 , 730000 ) ) #NEWLINE#
X [ np . ix_ ( a , b ) ] #NEWLINE#
x = 1 , 3 , 7 #NEWLINE# int ( '' . join ( map ( str , x ) ) ) #NEWLINE#
L = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 , 7 ] ] #NEWLINE#
d = [ '09-2012' , '04-2007' , '11-2012' , '05-2013' , '12-2006' , '05-2006' , #NEWLINE# '08-2007' ] #NEWLINE# sorted ( d , key = lambda x : datetime . datetime . strptime ( x , '%m-%Y' ) ) #NEWLINE#
tk . Frame . __init__ ( self , master ) #NEWLINE#
print ( avg ) #NEWLINE#
tqdm_pandas ( tqdm_notebook , * args , ** kwargs ) #NEWLINE#
arr = np . hstack ( [ ind , arr ] ) #NEWLINE#
list1 = [ ( 'a' , 1 ) , ( 'c' , 3 ) ] #NEWLINE# list2 = [ ( 'a' , 1 ) ] #NEWLINE# set ( list2 ) . issubset ( list1 ) #NEWLINE#
"""#SPACE#""" . join ( output ) #NEWLINE#
text_widget . index ( 'end' ) #NEWLINE#
b = dict ( zip ( i , i ) ) #NEWLINE#
zip ( s , s [ 1 : ] ) #NEWLINE#
self . pic = QtGui . QPixmap ( imagePath ) #NEWLINE#
data = output . getvalue ( ) [ 14 : ] #NEWLINE#
changecolor ( rect ) #NEWLINE#
instance = ModelClass . objects . create ( ** validated_data ) #NEWLINE#
matches . append ( m . group ( 0 ) ) #NEWLINE#
a , b = select_choice ( ) #NEWLINE#
print ( 'cls.initialized#SPACE#=#SPACE#' + str ( cls . initialized ) ) #NEWLINE#
return a [ : : 2 ] #NEWLINE#
reader = csv . reader ( fin ) #NEWLINE#
array = np . random . random ( 10 ) #NEWLINE#
return dict . __setitem__ ( self , key , value ) #NEWLINE#
struct . unpack ( '<I' , bytes + '\x00' ) [ 0 ] #NEWLINE#
self . out_file . write ( x + '/n' ) #NEWLINE#
rows = table . findAll ( 'tr' ) #NEWLINE#
ax . set_yticklabels ( [ '' ] + labels ) #NEWLINE#
time . strftime ( '%Y#SPACE#%m#SPACE#%d' , y ) . replace ( '#SPACE#0' , '#SPACE#' ) #NEWLINE#
self . _result_handler . start ( ) #NEWLINE#
count += 1 #NEWLINE#
qualname = str ( obj ) . split ( '#SPACE#' ) [ 1 ] #NEWLINE#
print ( ( numC , 'More' ) ) #NEWLINE#
pass #NEWLINE#
print ( 'FILE#SPACE#WAS#SPACE#MODIFED' ) #NEWLINE#
super ( B , cls ) . do_something ( ) #NEWLINE#
plt . ylim ( 0 - 0.5 , data . shape [ 0 ] - 0.5 ) #NEWLINE#
curses . ACS_ULCORNER #NEWLINE#
plt . title ( 'pcolor' ) #NEWLINE#
return '{0:.{1}f}e{2:+d}' . format ( mantissa , prec , exponent ) #NEWLINE#
manager . ioloop . IOLoop . instance ( ) #NEWLINE#
lst . sort ( key = lambda x : x [ 1 ] ) #NEWLINE#
req . add_header ( header [ 0 ] , header [ 1 ] ) #NEWLINE#
items = relationship ( 'Item' , secondary = ItemDetail , backref = 'Detail' ) #NEWLINE#
return int ( base * round ( float ( x ) / base ) ) #NEWLINE#
ax1 . yaxis . tick_left ( ) #NEWLINE#
main ( ) #NEWLINE#
A = numpy . concatenate ( ( A , newrow ) ) #NEWLINE#
return g . user . is_authenticated ( ) #NEWLINE#
app = wx . PySimpleApp ( ) #NEWLINE#
plt . hold ( True ) #NEWLINE#
self . expunge ( record ) #NEWLINE#
print ( df . sub ( a , axis = 0 ) ) #NEWLINE#
np . bincount ( sum ( np . indices ( A . shape ) ) . flat , A . flat ) #NEWLINE#
df = pd . DataFrame ( data , columns = [ 'a' , 'b' , 'c' , 'd' ] ) #NEWLINE#
signal . signal ( signal . SIGUSR1 , signal_handler ) #NEWLINE#
[ ( ( 'date_a' , '1a' ) , ( 'date_b' , '1b' ) ) , ( ( 'date_a' , '2a' ) , ( 'date_b' , '2b' ) ) , #NEWLINE# ( ( 'date_a' , '3a' ) , ( 'date_b' , '3b' ) ) ] #NEWLINE#
"""{.bar}""" . format ( Foo ( ) ) #NEWLINE#
kernel = np . ones ( ( 10 , 10 ) , np . uint8 ) #NEWLINE#
ax . set_ylim ( 0 , 255 ) #NEWLINE#
return 2 * x #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
response = requests . get ( 'http://www.google.com' ) #NEWLINE#
parser . add_argument ( 'file' , type = argparse . FileType ( 'r' ) ) #NEWLINE#
np . putmask ( a , a >= m , m - 1 ) #NEWLINE#
ax1 . scatter ( xx [ cut ] , y1 [ cut ] , c = 'red' , zorder = 2 ) #NEWLINE#
data [ 'bob' ] #NEWLINE#
easygui . msgbox ( 'This#SPACE#is#SPACE#a#SPACE#message!' , title = 'simple#SPACE#gui' ) #NEWLINE#
ax2 . semilogx ( t [ 3 : 8 ] , s [ 3 : 8 ] ) #NEWLINE#
self . glade . get_object ( 'MainWindow' ) . show_all ( ) #NEWLINE#
func = getattr ( obj , 'dostuff' ) #NEWLINE#
exec ( 'print#SPACE#"hi#SPACE#from#SPACE#test2"' , globals ( ) , locals ( ) ) #NEWLINE#
super ( Bar ) . __get__ ( cls , None ) . hello ( ) #NEWLINE#
log ( 'unable#SPACE#to#SPACE#authorize#SPACE#with#SPACE#server.' ) #NEWLINE#
df [ ( df [ 'Delivery#SPACE#Date' ] . dt . year == 1970 ) | ( df [ 'Delivery#SPACE#Date' ] >= sixmonthago ) #NEWLINE# ] #NEWLINE#
g_list = list ( filter ( not_subtle_condition , g_list ) ) #NEWLINE#
doc . appendChild ( el ) #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
name = models . CharField ( max_length = 128 ) #NEWLINE#
x = [ [ 'a' ] , [ 'b' ] , [ 'c' ] , [ 'd' ] ] #NEWLINE#
print ( 'ahhhg' ) #NEWLINE#
print ( 'ahhg' ) #NEWLINE#
print ( #NEWLINE# 'success!!!#SPACE#Generated#SPACE#2000#SPACE#random#SPACE#words,#SPACE#compiled#SPACE#re,#SPACE#and#SPACE#was#SPACE#able#SPACE#to#SPACE#perform#SPACE#matches.' #NEWLINE# ) #NEWLINE#
profile . SetPreference ( 'browser.helperApps.alwaysAsk.force' , false ) #NEWLINE#
boto3 . __version__ >= '1.4.0' #NEWLINE#
client . close ( ) #NEWLINE#
regex = '|' . join ( '\\b' + str ( state ) + '\\b' for state in states ) #NEWLINE#
os . makedirs ( os . path . dirname ( dst ) ) #NEWLINE#
window2 . destroy ( ) #NEWLINE#
timer2 . stop ( ) #NEWLINE#
serializer = VenueSerializer ( venues , many = True ) #NEWLINE#
class X ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# self . i = 1 #NEWLINE#
mark_inset ( ax , axins1 , loc1 = 2 , loc2 = 4 , fc = 'none' , ec = '0.5' ) #NEWLINE#
mark_inset ( ax , axins , loc1 = 2 , loc2 = 4 , fc = 'none' , ec = '0.5' ) #NEWLINE#
gleason . setParseAction ( diceGleasonParseAction ) #NEWLINE#
numpy . dot ( c , a ) #NEWLINE#
end = string . index ( end_marker , start + 1 ) #NEWLINE#
tex_data [ tex_data == 0 ] = np . nan #NEWLINE#
hxs = HtmlXPathSelector ( response ) #NEWLINE#
print ( '{}#SPACE#This#SPACE#is#SPACE#a#SPACE#test' . format ( datetime . datetime . now ( ) ) ) #NEWLINE#
print ( '{}#SPACE#Now#SPACE#the#SPACE#system#SPACE#will#SPACE#exit#SPACE#' . format ( datetime . datetime . now ( ) ) ) #NEWLINE#
User_id = db . Column ( db . Integer , db . ForeignKey ( 'User.ID' ) ) #NEWLINE#
os . write ( fh , zf . read ( name ) ) #NEWLINE#
e = { v : k for k , v in a . items ( ) } #NEWLINE#
axes = plt . subplot2grid ( ( 4 , 2 ) , ( 0 , 1 ) , rowspan = 3 ) #NEWLINE# plt . colorbar ( pc , cax = axes ) #NEWLINE#
isinstance ( { ( 1 ) : 2 , ( 3 ) : 3 } , collections . Sequence ) #NEWLINE#
"""-27.5916,-086.5640""" #NEWLINE#
x = np . array ( [ 18 , 30 , 31 , 31 , 15 ] , dtype = np . float64 ) #NEWLINE#
reversed ( it . islice ( it . chain . from_iterable ( reversed ( a ) ) , 5 ) ) #NEWLINE#
os . environ [ 'probe1' ] = probe1 #NEWLINE#
print ( 'Bar' ) #NEWLINE#
def square ( list ) : #NEWLINE# #INDENT# for i in list : #NEWLINE# #INDENT# #INDENT# yield i ** 2 #NEWLINE#
print ( 'Sent#SPACE#new#SPACE#username#SPACE#to#SPACE#everyone' ) #NEWLINE#
print ( 'Begining#SPACE#Wait#SPACE#for#SPACE#connections' ) #NEWLINE#
print ( 'Got#SPACE#ONE!' ) #NEWLINE#
print ( 'An#SPACE#exception#SPACE#with#SPACE#a#SPACE#connected#SPACE#user#SPACE#occured' ) #NEWLINE#
print ( 'Aw#SPACE#no#SPACE#man' ) #NEWLINE#
print ( 'Waiting#SPACE#to#SPACE#Recieve#SPACE#Data' ) #NEWLINE#
dict . update ( { item [ 0 ] : item [ 1 ] } ) #NEWLINE#
random . shuffle ( l ) #NEWLINE#
cv . Circle ( color_image , center_point , 10 , cv . CV_RGB ( 255 , 100 , 0 ) , 1 ) #NEWLINE#
dictish . update ( { 'def' : 234 } ) #NEWLINE#
result = db . table . filter ( db . table . column . ilike ( looking_for ) ) #NEWLINE#
e . extract ( ) #NEWLINE#
dict ( zip ( l2 , map ( len , list ( list ( g [ 1 ] ) for g in groups ) ) ) ) #NEWLINE#
dayDict = { d : [ ] for d in weekList } #NEWLINE#
d . keys ( ) >= set ( 'abc' ) #NEWLINE#
current_date += datetime . timedelta ( days = 1 ) #NEWLINE#
df . columns = [ 'keyword' , 'frequency' , 'avg#SPACE#weight' , 'sum#SPACE#other#SPACE#keywords' ] #NEWLINE#
this = self . browse ( cr , uid , ids , context = context ) [ 0 ] #NEWLINE#
classifier . fit ( train_features , train_labels ) #NEWLINE#
return super ( Meta , cls ) . __new__ ( cls , name , bases , attrs ) #NEWLINE#
b = numpy . array ( [ 3 , 5 ] ) #NEWLINE#
[ '32#SPACE#Silly' , '400#SPACE#McHilly' , '23#SPACE#Looped#SPACE#St.' ] #NEWLINE#
k . sort ( ) #NEWLINE#
client . create_video ( ** kwargs ) #NEWLINE#
time . sleep ( sleeptime ) #NEWLINE#
assert np . allclose ( expected , result2 ) #NEWLINE#
[ 1 , 1 , 1 , 2 , 2 , 2 ] , #NEWLINE#
ax . set_yticks ( [ ] ) #NEWLINE#
Serial . println ( number ) #NEWLINE#
return self . build_response_from_file ( request ) #NEWLINE#
ax21 = fig1 . add_subplot ( 211 , projection = '3d' ) #NEWLINE#
super ( Widget , self ) . __init__ ( ) #NEWLINE#
URL_REGEX = re . compile ( '((?:mailto:|ftp://|http://)[^#SPACE#<>\'"{}|\\\\^`[\\]]*)' ) #NEWLINE#
bytes ( key ) #NEWLINE#
x = time . strptime ( '00:01:00,000' . split ( ',' ) [ 0 ] , '%H:%M:%S' ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
mymatrix = [ [ 1 , 2 , 9 ] , [ 4 , 9 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
sys . stdout . write ( '#SPACE#\x08' ) #NEWLINE#
do_stuff ( ) #NEWLINE#
return urlopen ( req ) . read ( ) #NEWLINE#
equivalent ( 'MNU' , 'Not#SPACE#a#SPACE#name' ) #NEWLINE#
print ( 'using#SPACE#byte#SPACE#strings...' ) #NEWLINE#
print ( 'running#SPACE#ascii#SPACE#punctuation#SPACE#test...' ) #NEWLINE#
print ( list ( get_positions ( xs , '1' ) ) ) #NEWLINE#
exit ( ) #NEWLINE#
sys . path . insert ( 0 , 'foo' ) #NEWLINE#
getType ( '2010' ) #NEWLINE#
for line in my_string . split ( '\n' ) : #NEWLINE# #INDENT# pass #NEWLINE#
for key in exclusion : #NEWLINE# #INDENT# a . pop ( key , None ) #NEWLINE#
p . terminate ( ) #NEWLINE#
list ( filter ( str . strip , code . splitlines ( ) ) ) #NEWLINE#
return hash ( frozenset ( self . __dict__ . items ( ) ) ) #NEWLINE#
s += '#SPACE#+#SPACE#' . join ( [ ( 'x[' + str ( i ) + ']' ) for i in range ( 0 , 3 ) ] ) #NEWLINE#
fd_out . write ( '{}\n' . format ( line ) ) #NEWLINE#
theother ( ) #NEWLINE#
N += 1 #NEWLINE#
subprocess . call ( [ 'convert' , outname , '-trim' , cropname ] ) #NEWLINE#
mylamfxn = lambda a : mylib . myfxn ( a , b , c , d ) #NEWLINE#
writer . writerow ( line ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , bar ) : #NEWLINE# #INDENT# #INDENT# self . bar = bar #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __nonzero__ ( self ) : #NEWLINE# #INDENT# return self . bar % 2 == 0 #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# if __name__ == '__main__' : #NEWLINE# #INDENT# if Foo ( 2 ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
driver . get ( url ) #NEWLINE#
parser . add_argument ( 'servername' , nargs = '?' , action = ServernameAction ) #NEWLINE#
keyList1 = [ 'Person' , 'Male' , 'Boy' , 'Student' , 'id_123' , 'Name' ] #NEWLINE#
data_with_zeros [ 'a' ] . div ( data_with_zeros [ 'b' ] , fill_value = 0 ) . where ( ~ mask , 0 ) #NEWLINE#
root = Element ( 'root' ) #NEWLINE#
x = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
{ 'Name' : 'Dog' , 'Priority' : '1' , 'Row' : '3' , 'Year' : '1999' } , #NEWLINE#
email = request . form . get ( 'email' ) #NEWLINE# password = request . form . get ( 'password' ) #NEWLINE#
logging . root . addHandler ( file_handler ) #NEWLINE#
excel . Application . Quit ( ) #NEWLINE#
next ( b ) #NEWLINE#
special_match ( 'az09.X' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
seconds = int ( cur . fetchone ( ) [ 0 ] ) #NEWLINE#
example = etree . Element ( 'example' ) #NEWLINE#
a . insert ( 0 , x ) #NEWLINE#
workbook . close ( ) #NEWLINE#
matplotlib . pyplot . scatter ( n . predict ( nfeatures ) . tolist ( ) , targets . tolist ( ) ) #NEWLINE#
numpy . bincount ( x , weights = w ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
sum ( c . values ( ) ) #NEWLINE#
b . comments [ 0 ] . content #NEWLINE#
draw_networkx_edges ( G , pos ) #NEWLINE#
painter . setBrush ( QBrush ( Qt . white ) ) #NEWLINE#
H [ 0 , 1 ] = 0 #NEWLINE#
print ( A . __dict__ [ 'f' ] ) #NEWLINE#
[ '0' , '1' , '2.0' , '2.1' , '3' , '4.0.0' , '4.0.1' , '5' , '10' , '11.0' , '11.1' , #NEWLINE# '12.0' , '12.1.0' , '12.1.1' ] #NEWLINE#
pdb . set_trace ( ) #NEWLINE#
x [ 0 ] [ 3 ] [ 0 ] = 5 #NEWLINE#
url ( '^add$' , ContactAdd . as_view ( ) , name = 'contact_add' ) , #NEWLINE#
os . rename ( infilename , newname ) #NEWLINE#
book = load_workbook ( 'foo.xlsx' ) #NEWLINE#
print ( '{{asd}}#SPACE#{0}' . format ( 'foo' ) ) #NEWLINE#
__tablename__ = 'users' #NEWLINE#
a = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
ip = re . sub ( 'dot' , '.' , ip ) #NEWLINE#
[ 1 , 1 , 1 , 1 ] #NEWLINE#
pd . get_dummies ( df . replace ( { '[^a-c]' : None } , regex = True ) ) #NEWLINE#
fig , ax1 = plt . subplots ( ) #NEWLINE#
return sys . _getframe ( ) . f_back . f_code . co_name #NEWLINE#
text = msg . as_string ( ) #NEWLINE#
df . iloc [ pd . np . r_ [ 10 : 12 , 25 : 28 ] ] #NEWLINE#
data = loadtxt ( 'myfile.txt' ) #NEWLINE#
session . add ( model ) #NEWLINE#
data = { 'val1' : 'this#SPACE#is#SPACE#x' , 'val2' : True } #NEWLINE#
inp = int ( inputbox . ask ( screen , 'Message' ) ) #NEWLINE#
ax4 . set_ylim ( 0 , 1.2 ) #NEWLINE#
parser . add_argument ( '-f' , '--foo' , type = float ) #NEWLINE#
a , b , c = [ 1 , 2 , 3 ] #NEWLINE#
self . fields [ 'bars' ] . initial . update ( foo = None ) #NEWLINE#
self . clear_canvas ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( '' . join ( [ str ( t [ 0 ] , t [ 1 ] or default_charset ) for t in dh ] ) ) #NEWLINE#
new_dict [ length ] = { mykey : name_num [ mykey ] } #NEWLINE#
self . Show ( ) #NEWLINE#
yield tuple ( pool [ i ] for i in indices ) #NEWLINE#
print ( digits_plus ( 3 ) ) #NEWLINE#
from sklearn . linear_model import LogisticRegression #NEWLINE#
"""#id""" . attr ( 'readonly' , true ) #NEWLINE#
dir = os . path . join ( root , i ) #NEWLINE#
main ( ) #NEWLINE#
last_name = forms . CharField ( max_length = 30 , required = False ) #NEWLINE#
pd . to_numeric ( corr_data1 [ 'A' ] , errors = 'coerce' ) #NEWLINE#
t #NEWLINE# [ ( j - i ) for i , j in zip ( t [ : - 1 ] , t [ 1 : ] ) ] #NEWLINE#
lst . sort ( key = lambda x : x [ 0 ] ) #NEWLINE#
s = 'Bubble#SPACE#Bobble' #NEWLINE# """""" . join ( sorted ( s ) ) #NEWLINE#
'app/js/intro.js' , 'app/js/jquery-extras.js' , 'app/js/settings.js' #NEWLINE#
Select ( driver . find_element_by_css_selector ( 'select#numReturnSelect' ) #NEWLINE# ) . select_by_value ( 15000 ) . click ( ) #NEWLINE#
[ { 'type' : k , 'items' : [ x [ 0 ] for x in v ] } for k , v in groups ] #NEWLINE#
"""#SPACE#""" . join ( li ) #NEWLINE#
_complain ( '%s.writelines:#SPACE#%r' % ( self . name , e ) ) #NEWLINE#
other = { 'A' : 'B' , 'B' : 'A' } #NEWLINE#
screensize = user32 . GetSystemMetrics ( 0 ) , user32 . GetSystemMetrics ( 1 ) #NEWLINE#
merged [ k ] . add ( d2 [ k ] ) #NEWLINE#
{ buildout : eggs } #NEWLINE#
binary_search ( [ 1 , 5 , 8 , 10 ] , 15 ) #NEWLINE#
print ( 'Upper#SPACE#Hex#SPACE#Num#SPACE#=#SPACE#' , hexNum ) #NEWLINE#
f = lambda r : r * ( sp . j1 ( r ) / r ) ** 2 #NEWLINE#
l = [ ( 0 , 1 , 0 ) , ( 1 , 1 , 0 ) ] #NEWLINE#
reader = csv . reader ( f ) #NEWLINE#
A = [ 1 , 2 , 3 ] #NEWLINE#
a = np . arange ( 9 ) . reshape ( 3 , 3 ) #NEWLINE#
self . add_node ( origin ) #NEWLINE#
pylab . show ( ) #NEWLINE#
pass #NEWLINE#
self . layout . addWidget ( self . spinBox ) #NEWLINE#
subset [ subset . isin ( myList ) ] . stack ( ) . duplicated ( ) . unstack ( ) . any ( 1 ) #NEWLINE#
print ( str ( a [ 0 ] ) ) #NEWLINE#
lbl . pack ( ) #NEWLINE#
assert len ( a ) == len ( b ) #NEWLINE#
[ m . start ( ) for m in pattern . finditer ( sentence ) ] #NEWLINE#
print ( like [ 'likes' ] [ 0 ] ) #NEWLINE#
print ( my_list ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
kwargs . pop ( 'to' , None ) #NEWLINE#
any ( map ( lambda c : c . isdigit ( ) , value ) ) #NEWLINE#
print ( list_duplicates_of ( source , 'B' ) ) #NEWLINE#
print ( mylist ) #NEWLINE#
ax2 . fill_between ( theta , r1 , color = 'green' , alpha = 0.5 ) #NEWLINE#
traceback . print_exception ( type_ , value , tb ) #NEWLINE#
df . applymap ( onlynumbers ) #NEWLINE#
app = flask . Flask ( __name__ ) #NEWLINE#
query . filter ( '__key__#SPACE#=#SPACE#' , key ) #NEWLINE#
df_array = np . array ( list ( upsample ( person ) ) ) #NEWLINE#
output = list ( { 'name' : n , 'playing' : l } for n , l in list ( toutput . items ( ) ) ) #NEWLINE#
fclose ( filePtr ) #NEWLINE#
print ( CreateTable ( Model . __table__ ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
[ 1 , 2 , 3 ] #NEWLINE#
ebar = plt . errorbar ( x , y , yerr = err ) #NEWLINE#
pylab . plot ( data [ : , ( 0 ) ] , data [ : , ( 1 ) ] , label = label ) #NEWLINE#
minheap . add ( maxheap . poll ( ) ) #NEWLINE#
ax2 . set_adjustable ( 'box-forced' ) #NEWLINE#
plt . autoscale ( ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# self . ham = dict ( ) #NEWLINE#
c . execute ( 'ALTER#SPACE#TABLE#SPACE#mytable#SPACE#ADD#SPACE#COLUMN#SPACE#newcolumn;' ) #NEWLINE#
print ( loc , d . strftime ( '%c#SPACE#--#SPACE#%x#SPACE#--#SPACE#%X#SPACE#--#SPACE#%B#SPACE#--#SPACE#%A' ) ) #NEWLINE#
user = db . ReferenceProperty ( User , collection_name = 'groupMembers' ) #NEWLINE#
l . append ( '"' + val + '"' ) #NEWLINE#
df_filtered . to_csv ( 'new_file.txt' ) #NEWLINE#
group3 = [ 'Dan' , 'Phil' ] #NEWLINE#
return list ( itertools . chain ( * list_ ) ) #NEWLINE#
assert type ( exception ) . __name__ == 'NameError' #NEWLINE#
TEMPLATE_DIRS = os . path . join ( BASE_DIR , 'templates' ) , os . path . join ( BASE_DIR , #NEWLINE# 'templates' , 'allauth' ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
groups = ec2 . get_all_security_groups ( filters = { 'group-name' : [ sgn ] } ) #NEWLINE#
break #NEWLINE#
df [ 'column' ] . hist ( ) #NEWLINE#
img = cv2 . imread ( 'c:/data/floor.jpg' ) #NEWLINE#
painter . save ( ) #NEWLINE#
dateForm . set_index ( np . array ( poorList , dtype = 'datetime64' ) , inplace = True ) #NEWLINE#
str_object1 = open ( 'compressed_file' , 'rb' ) . read ( ) #NEWLINE#
alert ( 'successfully#SPACE#submitted' ) #NEWLINE#
_ . translate ( None , '.' ) #NEWLINE#
plt . plot ( x , y , fmt , label = label ) #NEWLINE#
bins = np . bincount ( np . searchsorted ( dcs , np . random . rand ( N ) , 'right' ) ) #NEWLINE#
print ( '{:{}s}#SPACE#{:{}d}#SPACE#{:{}f}' . format ( * fmt ) ) #NEWLINE#
result . append ( [ k , ms [ k ] + mb [ k ] ] ) #NEWLINE#
print ( '{:8.2f}#SPACE##SPACE#{:8.2f}' . format ( v1 , v2 ) ) #NEWLINE#
class A ( object ) : #NEWLINE# #NEWLINE# def __init__ ( self , s = '' ) : #NEWLINE# #INDENT# #INDENT# self . s = s #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __eq__ ( self , other ) : #NEWLINE# #INDENT# return self . s . lower ( ) == other . s . lower ( ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# a = A ( 'aaaa' ) #NEWLINE# b = A ( 'AAAA' ) #NEWLINE# print ( a == b ) #NEWLINE# b = A ( 'bbbb' ) #NEWLINE# print ( a == b ) #NEWLINE#
ax . plot ( ) #NEWLINE#
print ( ( p . returncode , stdout , stderr ) ) #NEWLINE#
main ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
home . grid ( row = 3 , column = 0 , sticky = tk . W ) #NEWLINE#
df3 = df2 . pivot ( index = 'x' , columns = 'y' , values = 'Counts' ) #NEWLINE#
plt . subplot ( 2 , 2 , n + 1 ) #NEWLINE#
files = { 'a_movie.mkv' , 'an_image.png' , 'a_movie_without_extension' , #NEWLINE# 'an_image_without_extension' } #NEWLINE#
return input . encode ( 'utf-8' ) #NEWLINE#
row = { name_map [ name ] : val for name , val in list ( row . items ( ) ) } #NEWLINE#
bounds = np . repeat ( [ ( 0 , 1 ) ] , D , axis = 0 ) #NEWLINE#
ax . set_ylim ( * lims [ 1 ] ) #NEWLINE#
yolk #NEWLINE#
tables = soup . findAll ( 'table' ) #NEWLINE#
from bs4 import BeautifulSoup , Comment #NEWLINE#
xs , ys = [ ] , [ ] #NEWLINE#
print ( #NEWLINE# 'Yay!#SPACE#I#SPACE#still#SPACE#got#SPACE#executed,#SPACE#even#SPACE#though#SPACE#my#SPACE#function#SPACE#has#SPACE#already#SPACE#returned!' ) #NEWLINE#
tmp = pd . DataFrame ( np . random . randn ( 2000 , 2 ) / 10000 , columns = [ 'A' , 'B' ] ) #NEWLINE#
id = Column ( Integer , ForeignKey ( 'forum_post.id' ) ) #NEWLINE#
z = zipfile . ZipFile ( 'file.zip' ) #NEWLINE#
plt . savefig ( '/tmp/test.png' ) #NEWLINE#
return [ iterable [ i : i + length ] for i in range ( len ( iterable ) - length + 1 ) ] #NEWLINE#
print ( p . sub ( lambda m : "'{}'" . format ( m . group ( 1 ) . replace ( "''" , '&' ) ) , test_str ) ) #NEWLINE#
os . chdir ( directory ) #NEWLINE#
A = np . empty ( ( 2 , 3 , 3 ) ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
return json . JSONEncoder . default ( self , obj ) #NEWLINE#
form . fields [ 'Polygon' ] . widget . params [ 'modifiable' ] = True #NEWLINE#
mean1 = np . array ( [ 5.028 , 3.48 , 1.46 , 0.248 ] ) #NEWLINE#
sorted ( list1 ) [ : 2 ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
[ i for i in range ( 1 , len ( x ) ) if x [ i ] != x [ i - 1 ] ] #NEWLINE#
super ( ClassedWidgetMixin , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
SPIDER_MIDDLEWARES = { 'project.middlewares.ignore.IgnoreVisitedItems' : 560 } #NEWLINE#
B = np . interp ( xx , x , A ) #NEWLINE#
return time . strptime ( tup [ 4 ] , '%a#SPACE#%b#SPACE#%d#SPACE#%X#SPACE#PDT#SPACE#%Y' ) #NEWLINE#
with open ( '/path/to/my_file.json' , 'r' ) as f : #NEWLINE# #INDENT# pass #NEWLINE#
with open ( '/path/to/my_file.json' , 'w' ) as f : #NEWLINE# #INDENT# pass #NEWLINE#
cv2 . imwrite ( 'cropped.jpg' , crop ) #NEWLINE#
df [ df . groupby ( 'A' ) . cumcount ( ascending = False ) >= 2 ] #NEWLINE#
df = df . groupby ( [ 'doctor#SPACE#name' , 'gender' ] ) . size ( ) #NEWLINE#
print ( '%s#SPACE#got#SPACE#it#SPACE#done#SPACE#better' % self . name ) #NEWLINE#
tree . write ( file , encoding = 'unicode' ) #NEWLINE#
key , value = map ( str . strip , line . split ( ':' , 1 ) ) #NEWLINE#
sys . stdout . write ( '\x1b[F' ) #NEWLINE#
__tablename__ = 'user' #NEWLINE#
pd . to_numeric ( s , errors = 'coerce' ) . count ( ) #NEWLINE#
s = df . ix [ : , ( 0 ) ] #NEWLINE#
d = dict ( ( x , __main__ . __dict__ [ x ] ) for x in list_of_variable_names ) #NEWLINE#
ftpobj . retrlines ( 'MLSD' , self . addline ) #NEWLINE#
rs = client . CreateObject ( 'ADODB.Recordset' ) #NEWLINE#
b . a . filter ( a = a1 ) #NEWLINE#
df = df . sort_values ( by = 'date_of_last_hoorah_given' , ascending = False ) #NEWLINE#
r . headers . get ( 'location' ) #NEWLINE#
[ 0 , 1 , 0 , 0 , 1 , 29 ] #NEWLINE#
frame . grid ( column = 1 , row = 1 , sticky = Tkconstants . NSEW ) #NEWLINE#
polycube = numpy . rot90 ( polycube ) #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
for e in self . emitter : #NEWLINE# #INDENT# e . update ( ) #NEWLINE#
cursor = connection . cursor ( ) #NEWLINE#
[ y for x in data for y in x ] #NEWLINE# [ y for y in x for x in data ] #NEWLINE#
( ( 0 < x ) & ( x < 1 ) ) . any ( ) #NEWLINE#
mywidget . pack ( ) #NEWLINE#
a = np . array ( literal_eval ( a ) ) #NEWLINE#
a = [ 'AGT' , 'AGT' , 'ACG' ] #NEWLINE# set ( a ) #NEWLINE# len ( set ( a ) ) #NEWLINE#
[ x . lower ( ) for x in [ 'A' , 'B' , 'C' ] ] #NEWLINE# [ x . upper ( ) for x in [ 'a' , 'b' , 'c' ] ] #NEWLINE#
print ( data . decode ( 'shift-jis' ) ) #NEWLINE#
sum ( map ( len , list ( d . values ( ) ) ) ) #NEWLINE#
d [ v ] . append ( i ) #NEWLINE#
parser . add_argument ( '-m' , '--mapping_strategy' , help = 'mapping#SPACE#strategy' , #NEWLINE# nargs = '+' ) #NEWLINE#
locale . getpreferredencoding = getpreferredencoding #NEWLINE#
image . save ( b . image . path , quality = 20 , optimize = True ) #NEWLINE#
inds = np . cumsum ( tmp_range [ 1 : ] [ : : - 1 ] + 1 ) #NEWLINE#
stream_handler . setLevel ( logging . INFO ) #NEWLINE#
act . pyqtConfigure ( triggered = self . on_triggered ) #NEWLINE#
redirect ( '/count' ) #NEWLINE#
calendar . day_name [ dayoftheweek ] #NEWLINE#
MyUser . objects . filter ( tags__in = id_list ) #NEWLINE#
"""Z:\\""" #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
user = User . objects . create_user ( username = 'john' , email = #NEWLINE# 'jlennon@beatles.com' , password = 'glass#SPACE#onion' ) #NEWLINE#
print ( f ( input ( 'Please#SPACE#enter#SPACE#your#SPACE#age:#SPACE#' ) ) ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
pyplot . show ( ) #NEWLINE#
print ( ( idx , val ) ) #NEWLINE#
df = DataFrame ( data ) #NEWLINE#
self . assertAlmostEqual ( tr ( 2 , 2 ) , 0.865 , 4 ) #NEWLINE#
print ( info . group ( 1 ) ) #NEWLINE#
sys . exit ( unittest . main ( ) ) #NEWLINE#
is_separately_linear ( eq1 , [ a , c ] ) #NEWLINE#
new_df = old_df [ list_of_columns_names ] . copy ( ) #NEWLINE#
sc = ax . scatter ( x , y , z ) #NEWLINE#
self . fcall = fcall #NEWLINE#
super ( b , self ) . __init__ ( ) #NEWLINE#
super ( MyException , self ) . __init__ ( arg1 , arg2 ) #NEWLINE#
w . writerow ( [ row [ 0 ] , colname , colval ] ) #NEWLINE#
print ( soup ) #NEWLINE#
print ( [ pos for pos , char in enumerate ( s ) if char == c ] ) #NEWLINE#
self . _stream . write ( ',\n' ) #NEWLINE#
df . groupby ( [ 'Group' , 'Size' ] ) . size ( ) #NEWLINE# df . groupby ( [ 'Group' , 'Size' ] ) . size ( ) . reset_index ( name = 'Time' ) #NEWLINE#
plt . subplots_adjust ( top = 0.9 ) #NEWLINE# g . fig . suptitle ( 'THIS#SPACE#IS#SPACE#A#SPACE#TITLE,#SPACE#YOU#SPACE#BET' ) #NEWLINE#
unique_id = models . ForeignKey ( MyUUIDModel , unique = True ) #NEWLINE#
return np . random . uniform ( 0 , 1 , ( 500 , 2000 ) ) #NEWLINE#
print ( y . round ( 2 ) ) #NEWLINE#
self . _compile_rules ( ) #NEWLINE#
raise ValueError ( 'Expected#SPACE#a#SPACE#file#SPACE#(`.fileno()`)#SPACE#or#SPACE#a#SPACE#file#SPACE#descriptor' ) #NEWLINE#
log_file . write ( 'ERROR:#SPACE#failed#SPACE#to#SPACE#read#SPACE#file' ) #NEWLINE#
log_file . write ( 'INFO:#SPACE#closing#SPACE#file' ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
df [ 'c' ] = df . apply ( tuple , axis = 1 ) #NEWLINE#
Person . create ( name = 'Bob1' , birthday = dt . date ( 1950 , 5 , 13 ) ) #NEWLINE#
MySQLdb . escape_string ( SQL ) #NEWLINE#
super ( IconThread , self ) . __init__ ( ) #NEWLINE#
self . result . append ( word [ : - 1 ] ) #NEWLINE#
o . A ( 1 ) #NEWLINE#
plt . show ( ) #NEWLINE#
idx = np . where ( ~ mask , np . arange ( mask . shape [ 1 ] ) , 0 ) #NEWLINE#
midlen = len ( oldstr ) / 2 #NEWLINE# newstr = oldstr [ : midlen ] + oldstr [ midlen + 1 : ] #NEWLINE#
lst [ 0 ] = '300' #NEWLINE#
[ x for b in a for x in b ] #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( m . group ( 2 ) ) #NEWLINE#
f1 . close ( ) #NEWLINE#
print ( kwargs [ 'a' ] ) #NEWLINE#
from scrapy . http import Request #NEWLINE#
top_line , bottom_line = top . get_line ( ) , bottom . get_line ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
tifCounter = len ( glob . glob1 ( myPath , '*.tif' ) ) #NEWLINE#
result = subprocess . check_output ( [ 'dir' , 'c:\\temp' ] , shell = True ) #NEWLINE#
self . timer = Timer ( self . timeout , self . handler ) #NEWLINE#
check_call ( 'mkdir#SPACE#~/mnt/data_dir' , shell = True ) #NEWLINE#
copy_a -= copy_a [ 0 ] . copy ( ) #NEWLINE#
self . __dict__ . update ( ** attrs ) #NEWLINE#
file . close ( ) #NEWLINE#
f . write ( etree . tostring ( root , pretty_print = True ) ) #NEWLINE#
_dict = { 'a' : 'bar' , 'b' : 'blah' , 'c' : 'abc' , 'd' : 'nada' } #NEWLINE#
print ( pd . concat ( [ df . iloc [ ( 0 ) , : ] , df . iloc [ ( - 1 ) , : ] ] , axis = 1 ) ) #NEWLINE#
rng . randint ( 0 , sys . maxsize ) #NEWLINE#
alarm1 = int ( input ( 'How#SPACE#many#SPACE#minutes#SPACE#(alarm1)?#SPACE#' ) ) #NEWLINE#
dict [ 'age' ] . append ( age ) #NEWLINE#
filterN = kwargs [ 'filterN' ] #NEWLINE#
button . clicked . connect ( partial ( self . action_selected , action = action [ 'name' ] ) ) #NEWLINE#
os . rename ( outfilename , in_filename ) #NEWLINE#
sys . path . append ( '/usr/local/Cellar/apache-spark/1.6.1/libexec/python' ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
platform . system ( ) #NEWLINE#
mail . ehlo ( ) #NEWLINE#
L = [ int ( '%d%d%d' % ( x , y , x ) ) for x in range ( 1 , 10 ) for y in range ( 10 ) ] #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
pickle . dumps ( value ) #NEWLINE#
data = sys . stdin . readline ( ) #NEWLINE#
self . crawler . start ( ) #NEWLINE#
a = np . array ( [ 'hello' , 'how' , 'are' , 'you' ] ) #NEWLINE# slicer_vectorized ( a , 1 , 3 ) #NEWLINE# slicer_vectorized ( a , 0 , 3 ) #NEWLINE#
result . insert ( 1 , row_separator ) #NEWLINE#
dt = datetime . datetime . now ( ) #NEWLINE#
print ( '%5s' % 'aaaa' ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
enemies = [ ] #NEWLINE#
cj = cookielib . CookieJar ( ) #NEWLINE#
i = foo . index ( 'password2' ) #NEWLINE#
pd . options . display . max_colwidth #NEWLINE#
somelist [ : ] = [ tup for tup in somelist if determine ( tup ) ] #NEWLINE#
"""A""" #NEWLINE#
time . sleep ( 0.5 ) #NEWLINE#
plt . plot ( [ pc [ i ] [ 0 ] , pc [ i + 1 ] [ 0 ] ] , [ pc [ i ] [ 1 ] , pc [ i + 1 ] [ 1 ] ] , color = c ) #NEWLINE#
return '' . join ( sout ) #NEWLINE#
l = [ 'a' , 'b' , 'X' , 'X' , 'c' , 'd' , 'X' , 'X' , 'f' , 'X' , 'g' ] #NEWLINE#
f_obj = open ( 'file.gz' , 'r' ) #NEWLINE#
ax . barh ( ind , df [ 'EndUse_91_nan' ] , color = '#FFFF00' , left = lefts ) #NEWLINE#
ax . barh ( ind , df [ 'EndUse_80_1.0' ] , color = '#0070C0' , left = lefts ) #NEWLINE#
page = resp . read ( ) #NEWLINE#
asking = '' . join ( [ c for c in asking if c not in ( '!' , '?' ) ] ) #NEWLINE#
l2 = [ 'c' , 'd' , 'e' ] #NEWLINE#
data = sin ( 2 * pi * 1000 * t ) #NEWLINE#
[ 1 , 2 , '?' ] #NEWLINE#
clean ( '#SPACE#32v2#SPACE#g#SPACE##Gmw845h$W#SPACE#b53wi#SPACE#' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
del sys . modules [ 'pandas' ] #NEWLINE#
event . set ( ) #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
r = requests . get ( 'http://google.com/' ) #NEWLINE#
plt . show ( ) #NEWLINE#
circular . append ( p ) #NEWLINE#
p4 . readarray ( x ) #NEWLINE#
np . in1d ( A [ : , 3 : ] , B ) #NEWLINE#
settings = relationship ( 'AssetSetting' , backref = backref ( 'asset_settings' ) ) #NEWLINE#
self . lb2 . yview ( * args ) #NEWLINE#
TrueXor ( True , False , False ) #NEWLINE#
solve ( a * x ** 2 + b * x + c , x ) #NEWLINE#
[ max ( s . index ( max ( s ) ) - s . index ( min ( s ) ) , 0 ) for s in lst ] #NEWLINE#
merged [ k ] . append ( d1 [ k ] ) #NEWLINE#
out = sys . stdout . getvalue ( ) #NEWLINE#
all_examples = [ 'A,1,1' , 'B,2,1' , 'C,4,4' , 'D,4,5' ] #NEWLINE#
list ( map ( f , [ 'a' , 'b' , 'c' ] , itertools . repeat ( '1' ) ) ) #NEWLINE#
print ( ET . tostring ( root ) ) #NEWLINE#
f = plt . figure ( figsize = ( 10 , 6 ) ) #NEWLINE#
return getattr ( self . myobj , attr ) #NEWLINE#
totalList = [ [ [ 0 , 1 ] , [ 2 , 7 ] , [ 6 , 3 ] ] , [ [ 2 , 3 ] , [ 6 , 1 ] , [ 4 , 1 ] ] ] #NEWLINE#
data = [ '3' , '7.4' , '8.2' ] #NEWLINE#
return np . vstack ( l ) #NEWLINE#
int ( float ( '1.9' ) ) #NEWLINE#
func . __code__ . co_argcount #NEWLINE#
from datetime import datetime , timedelta #NEWLINE#
del s [ i ] #NEWLINE#
4 / 3 * math . pi * 5 ** 3 #NEWLINE#
trace = traceback . format_exc ( ) #NEWLINE#
d = collections . defaultdict ( set ) #NEWLINE# for k , v in s : #NEWLINE# #INDENT# d [ k ] . add ( v ) #NEWLINE#
print ( ( 'loading#SPACE#file#SPACE#with#SPACE#md5#SPACE#of' , md5 ) ) #NEWLINE#
getattr ( obj , function_name ) ( * args , ** kwargs ) #NEWLINE#
log = logging . getLogger ( 'root' ) #NEWLINE#
urllib . request . HTTPSHandler . __init__ ( self ) #NEWLINE#
plt . show ( ) #NEWLINE#
return '<a#SPACE#href="%s">%s</a>' % ( obj . firm_url , obj . firm_url ) #NEWLINE#
c . execute ( 'select#SPACE#*#SPACE#from#SPACE#stocks#SPACE#where#SPACE#symbol=?' , t ) #NEWLINE#
self . entry . pack ( pady = 4 ) #NEWLINE#
print ( ( a , b ) ) #NEWLINE#
class Apples : #NEWLINE# #NEWLINE# def __init__ ( self ) : #NEWLINE# #INDENT# #INDENT# self . _applecount = 0 #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def apples ( self ) : #NEWLINE# #INDENT# print ( self . _applecount ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# self . _applecount += 1 #NEWLINE# a = Apples ( ) #NEWLINE# a . apples ( ) #NEWLINE# a . apples ( ) #NEWLINE#
return render_template ( 'user/profile.html' , user = user ) #NEWLINE#
ax = fig . add_subplot ( 111 , title = 'Test#SPACE#scatter' ) #NEWLINE#
return kwargs [ 'func' ] #NEWLINE#
raise ValueError ( 'Parentheses#SPACE#do#SPACE#not#SPACE#match' ) #NEWLINE#
random . choice ( my_list ) ( ) #NEWLINE#
a = np . array ( [ [ 1 , 1 ] , [ 2 , 3 ] , [ 1 , 1 ] , [ 5 , 4 ] , [ 2 , 3 ] ] ) #NEWLINE#
ws . cell ( coordinate = 'C3' ) . value = 3 #NEWLINE#
p = np . array ( [ ( 0 , 0 ) , ( 1 , 0 ) , ( 0 , 1 ) , ( 1 , 1 ) , ( 2 , 2 ) ] , dtype = np . float ) #NEWLINE#
parent = model . ForeignKey ( B , related_name = 'D' ) #NEWLINE#
print ( 'Found#SPACE#%s!' % dir ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
tkinter . Label ( root , text = displaytext1 , font = 'Courier' ) . pack ( ) #NEWLINE#
A [ [ 'f0' , 'f1' ] ] #NEWLINE#
main ( ) #NEWLINE#
number_of_players = int ( eval ( input ( 'Enter#SPACE#number#SPACE#of#SPACE#players:#SPACE#' ) ) ) #NEWLINE#
plt . ylim ( - 1.1 , 1.1 ) #NEWLINE#
__init__ . py #NEWLINE#
fh . close ( ) #NEWLINE#
print ( random . choice ( value ) , key ) #NEWLINE#
printstuff ( * ( mytuple [ 0 : 2 ] + ( '#SPACE#how#SPACE#are#SPACE#you' , ) ) ) #NEWLINE#
print ( 'Decorated#SPACE#job' ) #NEWLINE#
bert . decode ( bert . encode ( { 'x' : [ 'x' , 'x' ] } ) ) #NEWLINE#
p2 . start ( ) #NEWLINE#
m . update ( '0123456789' ) #NEWLINE#
log . error ( 'Unable#SPACE#to#SPACE#create#SPACE#new#SPACE#channel#SPACE#for#SPACE#MQ#SPACE#connection.' , ioe ) #NEWLINE#
log . error ( 'Unable#SPACE#to#SPACE#declare#SPACE#queue#SPACE#for#SPACE#MQ#SPACE#channel.' , ioe ) #NEWLINE#
log . error ( 'Unable#SPACE#to#SPACE#declare#SPACE#exchange#SPACE#for#SPACE#MQ#SPACE#channel.' , ioe ) #NEWLINE#
log . error ( 'Unable#SPACE#to#SPACE#bind#SPACE#queue#SPACE#for#SPACE#channel.' , ioe ) #NEWLINE#
log . error ( 'IOException#SPACE#encountered#SPACE#while#SPACE#trying#SPACE#to#SPACE#publish#SPACE#task#SPACE#via#SPACE#MQ.' , ioe ) #NEWLINE#
br . set_handle_robots ( False ) #NEWLINE#
frw = open ( filename , 'r+b' ) #NEWLINE#
print ( data ) #NEWLINE#
ch = logging . StreamHandler ( ) #NEWLINE#
env . hosts = [ 'localhost' ] #NEWLINE#
df1 = pd . DataFrame ( [ mydict , mydict2 ] , index = [ 'SRT' , 'SRT2' ] ) #NEWLINE#
plt . plot ( [ ] , label = 'infected' , color = 'red' , alpha = 0.02 ) #NEWLINE#
soup . prettify ( ) #NEWLINE#
super ( UsersInfoFilter , self ) . __init__ ( ) #NEWLINE#
df2 = df2 . reset_index ( ) #NEWLINE#
plt . plot ( x , np . sin ( x ) , 'b-' ) #NEWLINE#
labels = ax . get_xticklabels ( ) #NEWLINE#
a . __class__ . __dict__ [ 'func' ] . __get__ ( a , a . __class__ ) #NEWLINE#
plt . setp ( ax2 . get_yticklabels ( ) , visible = False ) #NEWLINE#
x . split ( '#SPACE#' , 2 ) #NEWLINE#
cDC . DeleteDC ( ) #NEWLINE#
return cur . fetchone ( ) #NEWLINE#
self . mainframe . columnconfigure ( 0 , weight = 1 ) #NEWLINE#
f = open ( 'file' ) #NEWLINE#
"""ijkl""" #NEWLINE#
do_something_with ( obj ) #NEWLINE#
hist ( date2num ( list_of_dates ) , cumulative = True ) #NEWLINE#
a [ 0 ] [ 1 ] = '1' #NEWLINE#
plt . setp ( ax . get_xticklabels ( ) , rotation = 'vertical' , fontsize = 12 ) #NEWLINE#
my_list . sort ( ) #NEWLINE# return my_list #NEWLINE#
wx . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
rows = [ row for row in reader if row [ 'Total_Depth' ] != '0' ] #NEWLINE#
some_string = '12345' #NEWLINE# [ some_string [ i : i + 2 ] for i in range ( 0 , len ( some_string ) , 2 ) ] #NEWLINE#
return a * exp ( - ( x - x0 ) ** 2 / ( 2 * sigma ** 2 ) ) #NEWLINE#
reader = csv . DictReader ( fp ) #NEWLINE#
"""(\\d)(?=(\\d)\\1)""" #NEWLINE#
[ 'sentence#SPACE#one.' , 'sentence#SPACE#two.' , 'sentence#SPACE#three.' , 'sentence#SPACE#four.' ] #NEWLINE#
ssh_client = paramiko . SSHClient ( ) #NEWLINE# ssh_client . set_missing_host_key_policy ( paramiko . AutoAddPolicy ( ) ) #NEWLINE#
sys . exit ( main ( ) ) #NEWLINE#
sys . exit ( application . exec_ ( ) ) #NEWLINE#
logging . basicConfig ( level = logging . DEBUG ) #NEWLINE#
pw = rps ( ) #NEWLINE#
f = lambda x , y : x + y #NEWLINE# f ( 1 , 2 ) #NEWLINE#
df . set_index ( date_col_name , drop = True , inplace = True ) #NEWLINE#
"""<title[^>]*>([^<]+)</title>""" #NEWLINE#
bar ( x , y , width = [ ( x [ j + 1 ] - x [ j ] ) . days for j in range ( len ( x ) - 1 ) ] + [ 30 ] ) #NEWLINE#
session . sendmail ( 'youremail@gmail.com' , 'contactemail@gmail.com' , content ) #NEWLINE#
pygame . init ( ) #NEWLINE#
self . task . cancel ( ) #NEWLINE#
logger = logging . getLogger ( 'myapp' ) #NEWLINE#
result = np . empty_like ( X ) #NEWLINE# for i , ( x , y ) in enumerate ( zip ( X , Y ) ) : #NEWLINE# #INDENT# result [ i ] = func1d ( x , y ) #NEWLINE#
main ( ) #NEWLINE#
return struct . unpack_from ( '>I' , bits ) [ 0 ] #NEWLINE#
print ( pd . merge ( df_subset , df ) . equals ( df_subset ) ) #NEWLINE#
subprocess . Popen ( my_command , env = dict ( os . environ , PATH = 'path' ) ) #NEWLINE#
{ 'type' : 'single' , 'elegible' : [ 'IP_1' , '???' ] , 'msg' : 'your_message' } #NEWLINE#
math . sqrt ( - 1 ) / 0 #NEWLINE#
super ( MyUpdateDict , self ) . __init__ ( ) #NEWLINE#
list ( solve ( 5 ) ) #NEWLINE#
import os #NEWLINE# os . system ( 'my_pdf.pdf' ) #NEWLINE#
my_list . append ( item ) #NEWLINE#
json . dumps ( obj , default = method_name ) #NEWLINE#
namespace [ 'bar' ] ( ) #NEWLINE#
arr2 = np . array ( [ [ 0.5 , 0.0 ] , [ 0.0 , 0.0 ] , [ 0.0 , 0.5 ] , [ 1.0 , 0.0 ] , [ 0.5 , 0.5 ] , #NEWLINE# [ 1.0 , 0.5 ] , [ 0.0 , 1.0 ] , [ 1.0 , 1.0 ] , [ 0.5 , 1.0 ] ] ) #NEWLINE#
[ 'script.py' , '--argument' , 'blah' ] #NEWLINE#
raise RuntimeError ( 'Oops,#SPACE#probably#SPACE#hosed#SPACE#the#SPACE#interpreter' ) #NEWLINE#
@ app . route ( '/test' , methods = [ 'POST' ] ) #NEWLINE# def test ( ) : #NEWLINE# #INDENT# return _test ( request . form [ 'test' ] ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# @ app . route ( '/index' ) #NEWLINE# def index ( ) : #NEWLINE# #INDENT# return _test ( 'My#SPACE#Test#SPACE#Data' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def _test ( argument ) : #NEWLINE# #INDENT# return 'TEST:#SPACE#%s' % argument #NEWLINE#
raise StopIteration ( 'beginning#SPACE#of#SPACE#enumeration#SPACE#reached' ) #NEWLINE#
f = open ( 'temp.png' , 'w' ) #NEWLINE# f . write ( png_recovered ) #NEWLINE# f . close ( ) #NEWLINE#
return s . getvalue ( ) #NEWLINE#
a = [ 'er' , 'IS' , 'you' , 'Is' , 'is' , 'er' , 'IS' ] #NEWLINE#
smtpserver = smtplib . SMTP ( 'smtp.gmail.com' , 587 ) #NEWLINE#
self . data = np . zeros ( ( 100 , ) ) #NEWLINE#
all ( i . isalpha ( ) or i == '#SPACE#' for i in 'test#SPACE#string' ) #NEWLINE#
import lxml . etree #NEWLINE#
subs = re . compile ( '|' . join ( subs ) ) #NEWLINE#
ax = fig . gca ( ) #NEWLINE#
s = 'UserID/ContactNumber' #NEWLINE#
base64 . urlsafe_b64decode ( s + '=' * ( 4 - len ( s ) % 4 ) ) #NEWLINE#
plt . plot ( x , y , linestyle = '' , markeredgecolor = 'none' , marker = next ( marker ) ) #NEWLINE#
setattr ( f , 'b' , 2 ) #NEWLINE#
app = QApplication ( sys . argv ) #NEWLINE#
sys . modules [ name ] = mod #NEWLINE#
return struct . unpack_from ( 'i' , self . recv_buf , self . recv_buf_i - 4 ) [ 0 ] #NEWLINE#
series = pd . Series ( [ 1 , 2 ] , index = [ 'a' , 'b' ] ) #NEWLINE#
func ( 'something#SPACE#else' , a = A , b = B ) #NEWLINE#
win . set_size_request ( 100 , 100 ) #NEWLINE#
ax . clear ( ) #NEWLINE#
assert not f ( 'var#SPACE#is#SPACE#$var#SPACE#and#SPACE#foo#SPACE#is#SPACE#${foo#SPACE#and#SPACE#${baz}' , var = 1 ) #NEWLINE#
cv2 . circle ( img , corner , 7 , ( 255 , 255 , 0 ) , - 1 ) #NEWLINE#
file_name = image_url . split ( '/' ) [ - 1 ] #NEWLINE#
print ( 'I#SPACE#have' , card . price ) #NEWLINE#
np . set_printoptions ( threshold = np . inf , linewidth = np . inf ) #NEWLINE# with open ( path , 'w' ) as f : #NEWLINE# #INDENT# f . write ( np . array2string ( x , separator = ',#SPACE#' ) ) #NEWLINE#
old_stdout = sys . stdout #NEWLINE#
numpy . finfo ( float ) . max #NEWLINE#
return kurt #NEWLINE#
image = Image . open ( image_string ) #NEWLINE#
print ( format ( value , ',d' ) ) #NEWLINE#
ET . register_namespace ( '' , 'http://www.topografix.com/GPX/1/0' ) #NEWLINE#
cursor . execute ( sql , var1 , var2 , var3 ) #NEWLINE#
seed2 = df [ ~ msk ] . mean ( ) #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'application/json' #NEWLINE#
glob . glob ( './' + '[0-9]' * 14 ) #NEWLINE#
ipaddress . ip_address ( '192.168.0.1' ) in ipaddress . ip_network ( '192.168.0.0/24' ) #NEWLINE#
df . groupby ( level = 0 ) . agg ( { 'A' : [ 'sum' , 'std' ] , 'B' : { 'my_function' : lambda x : #NEWLINE# x . sum ( ) ** 2 } } ) #NEWLINE#
num . append ( input ( 'Enter#SPACE#the#SPACE#%s#SPACE#number:#SPACE#' ) ) #NEWLINE#
print ( ( 'Should#SPACE#be:' , 278.546 , 'km' ) ) #NEWLINE#
p = subprocess . Popen ( [ 'ls' , '-al' ] , stdout = subprocess . PIPE ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#axis' ) #NEWLINE# plt . show ( ) #NEWLINE#
return sorted ( set ( chain ( * sequences ) ) ) #NEWLINE#
ax . axes . get_xaxis ( ) . set_visible ( False ) #NEWLINE# ax . axes . get_yaxis ( ) . set_visible ( False ) #NEWLINE#
w . save ( 'images.xls' ) #NEWLINE#
self . panel . SetSizer ( sizer ) #NEWLINE#
ax . axis ( 'equal' ) #NEWLINE#
s = 'foo#SPACE#foo#SPACE#bar#SPACE#bar' #NEWLINE# re . sub ( '\\b(.+)\\s+\\1\\b' , '\\1' , s ) #NEWLINE# s = 'foo#SPACE#bar#SPACE#foo#SPACE#bar#SPACE#foo#SPACE#bar' #NEWLINE# re . sub ( '\\b(.+)\\s+\\1\\b' , '\\1' , s ) #NEWLINE#
queryset = Workout . objects . none ( ) #NEWLINE#
sns . set_style ( 'whitegrid' ) #NEWLINE#
plt . figure ( figsize = ( 10 , 10 ) ) #NEWLINE#
raise StopIteration ( ) #NEWLINE#
MOUNTPOINT = 'mountpoint' #NEWLINE#
ax . text ( x , y , label , gid = 'foo' ) #NEWLINE#
reply = socket . recv ( ) #NEWLINE#
response = requests . get ( url , stream = True ) #NEWLINE#
def __repr__ ( self ) : #NEWLINE# #INDENT# return 'Bottle(%r)' % self . msg #NEWLINE#
tree [ 'children' ] . append ( dict ( name = name ) ) #NEWLINE#
do_something_in_mechanize ( ) #NEWLINE#
my_logger . addHandler ( handler ) #NEWLINE#
{ { '%04d' % 42 } } #NEWLINE#
pylab . plot ( list ( range ( 11 ) ) , list ( range ( 11 ) ) ) #NEWLINE#
def all_same ( L ) : #NEWLINE# #INDENT# return all ( x == L [ 0 ] for x in L ) #NEWLINE#
reader = csv . reader ( open ( filename ) ) #NEWLINE#
engine = sqlalchemy . create_engine ( 'mysql://user:password@server' ) #NEWLINE#
root . bind ( '<space>' , draw ) #NEWLINE#
return '0x%x' % ( n & 4294967295 ) #NEWLINE#
x = foo ( arg1 = whatever , arg2 = something , arg3 = blatzimuffin ) #NEWLINE#
timezone . activate ( pytz . timezone ( 'Asia/Kolkata' ) ) #NEWLINE#
print ( book . getElementsByTagName ( 'title' ) [ 0 ] . firstChild . data ) #NEWLINE#
q . put ( 'kill' ) #NEWLINE#
scrollbar . pack ( side = 'right' , fill = 'y' ) #NEWLINE#
print ( myhtml . text_content ( ) ) #NEWLINE#
print ( json . dumps ( test_json , default = json_debug_handler ) ) #NEWLINE#
return 'list#SPACE#of#SPACE#accounts' #NEWLINE#
fixedser . dropna ( ) . plot ( ax = axes [ 1 ] , marker = '.' , linewidth = 0 ) #NEWLINE#
loop = asyncio . get_event_loop ( ) #NEWLINE#
p = subprocess . Popen ( [ 'tail' , '-f' , fn ] , stdout = subprocess . PIPE ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
id . sendcontrol ( 'j' ) #NEWLINE#
driver . close ( ) #NEWLINE#
sieve . primerange ( a , b ) #NEWLINE#
s = '%s\t%s\t%s\n' % tuple ( w ) #NEWLINE#
axes . append ( ax . twinx ( ) ) #NEWLINE#
scounttext = soup . find ( 'div' , id = 'resultStats' ) #NEWLINE#
l = [ '1' , '2' , '3' , '4' ] #NEWLINE# s = ',#SPACE#' . join ( l + [ '' ] ) . rstrip ( '#SPACE#' ) #NEWLINE#
pygame . display . set_caption ( 'Hello#SPACE#World!' ) #NEWLINE#
main ( ) #NEWLINE#
f = open ( 'file.txt' , 'r' ) #NEWLINE#
df = pd . concat ( [ df ] * 1000 ) . reset_index ( drop = True ) #NEWLINE#
return len ( line ) #NEWLINE#
color = [ ( 255 , 0 , 0 ) , ( 0 , 255 , 0 ) , ( 0 , 0 , 255 ) ] #NEWLINE#
results = root . findall ( 'result' ) #NEWLINE#
oFid . close ( ) #NEWLINE#
self . callback ( fail ) #NEWLINE#
sys . stdout = stdout #NEWLINE#
comp += numpy . min ( first + second , axis = 2 ) #NEWLINE#
bin_means = [ data [ digitized == i ] . mean ( ) for i in range ( 1 , len ( bins ) ) ] #NEWLINE#
ax3 . set_ylim ( 0 , 1.2 ) #NEWLINE#
from xml . dom import minidom #NEWLINE#
print ( lookup . get_template ( 'index.haml' ) . render ( ) ) #NEWLINE#
print ( i , j ) #NEWLINE#
non_decimal . sub ( '' , '12.34fe4e' ) #NEWLINE#
file = models . FileField ( upload_to = 'documents' , blank = True , null = True ) #NEWLINE#
plt . plot ( Time , signal ) #NEWLINE#
mywidget . update_idletasks ( ) #NEWLINE#
logger . setLevel ( logging . DEBUG ) #NEWLINE#
arr = np . array ( [ 2 , 4 , 3 , 7 , 6 , 1 , 9 , 4 , 6 , 5 ] ) #NEWLINE#
self . sizer . Add ( self . list , proportion = 1 , flag = wx . EXPAND | wx . ALL , border = 5 ) #NEWLINE#
QtGui . QWidget . __init__ ( self , * args , ** kwargs ) #NEWLINE#
payload = msg . get_payload ( ) #NEWLINE#
gevent . sleep ( 1 ) #NEWLINE#
data [ 'col7' ] = np . random . randint ( 0 , 2 , num ) . astype ( np . bool ) #NEWLINE#
zdf1 = bcolz . ctable . fromdataframe ( df1 ) #NEWLINE#
s . close ( ) #NEWLINE#
plt . plot ( data , '.' ) #NEWLINE#
addopts = - - pylint #NEWLINE#
cythonize ( 'delaunay/sphere.pyx' ) #NEWLINE#
return np . count_nonzero ( a & r != b & r ) #NEWLINE#
np . array ( [ d [ x ] for x in u ] ) [ inv ] . reshape ( a . shape ) #NEWLINE#
self . active = self . end_date > datetime . datetime . utcnow ( ) #NEWLINE#
current_file = os . path . abspath ( os . path . dirname ( __file__ ) ) #NEWLINE#
data = [ [ 'C' ] , [ 'B' ] , [ 'A' ] , [ 'C' , 'B' ] , [ 'B' , 'A' ] , [ 'A' , 'C' ] ] #NEWLINE#
result = [ s for s in data if len ( s ) == maxlen ] #NEWLINE#
csvFile = csv . reader ( open ( 'myfile.csv' , 'rb' ) ) #NEWLINE#
for child in infoFrame . winfo_children ( ) : #NEWLINE# #INDENT# child . destroy ( ) #NEWLINE#
df = df . dropna ( ) #NEWLINE#
process ( line ) #NEWLINE#
self . _stream . flush ( ) #NEWLINE#
xy = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE# x , y = zip ( * xy ) #NEWLINE#
r = requests . post ( url , data = values ) #NEWLINE#
print ( os . environ . get ( 'SUDO_UID' ) ) #NEWLINE#
result . append ( ( int ( k ) , c ) ) #NEWLINE#
curses . noecho ( ) #NEWLINE#
cols = df . columns . tolist ( ) #NEWLINE#
ax4 . plot ( data , data , data , data ** 2 / 10 , data , np . sin ( data ) ) #NEWLINE#
print ( 'error#SPACE#opening#SPACE#file#SPACE#::#SPACE#' + os . path . join ( dirname , filename ) ) #NEWLINE#
self . bind_class ( 'mytag' , '<Leave>' , self . on_leave ) #NEWLINE#
411 , 'Ghandi' , 'Obama' #NEWLINE#
[ A [ b ] for b in range ( 9 , - 1 , - 1 ) ] #NEWLINE#
d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
pl . imshow ( RGB , origin = 'lower' , extent = [ 0 , 360 , 0 , 1 ] , aspect = 150 ) #NEWLINE#
beta2 = np . linalg . solve ( a , b . T ) #NEWLINE#
print ( df ) #NEWLINE#
[ ( B . pop ( 0 ) if x else A . pop ( 0 ) ) for x in selector ] #NEWLINE#
run ( 'df#SPACE#-h#SPACE#|#SPACE#grep#SPACE#sda1' ) #NEWLINE#
[ 'car' , 'car' , 'car' , 'car' , 'cable_car' ] #NEWLINE#
C = np . swapaxes ( B , 1 , 2 ) #NEWLINE#
all . append ( row ) #NEWLINE#
app . register_blueprint ( api_v1 , url_prefix = '/v1' ) #NEWLINE#
self . write ( login_response ) #NEWLINE#
imageA = wx . Image ( 'b.gif' , wx . BITMAP_TYPE_ANY ) . ConvertToBitmap ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
r . reduceByKey ( lambda x , y : x + y ) . collect ( ) #NEWLINE#
style = xlwt . easyxf ( 'pattern:#SPACE#pattern#SPACE#solid,#SPACE#fore_colour#SPACE#custom_colour' ) #NEWLINE#
print ( "broadcasting#SPACE#prepared#SPACE#message#SPACE#'{}'#SPACE#.." . format ( msg ) ) #NEWLINE#
x = list ( sum ( list ( dict . items ( ) ) , ( ) ) ) #NEWLINE#
user = active_directory . find_user ( 'jimboface' ) #NEWLINE#
shutil . copy2 ( path , temp_path ) #NEWLINE#
lst [ i ] = lst [ i ] * 2 #NEWLINE#
for d in dictionaries : #NEWLINE# #INDENT# for k , v in list ( d . items ( ) ) : #NEWLINE# #INDENT# #INDENT# result [ k ] . append ( v ) #NEWLINE#
jsonpath = collection_name + '.json' #NEWLINE#
"""Merge#SPACE#dictionaries#SPACE#using#SPACE#value#SPACE#from#SPACE#right-hand-side#SPACE#on#SPACE#conflict.""" #NEWLINE#
"""Returns#SPACE#copy#SPACE#of#SPACE#dict#SPACE#`x`#SPACE#with#SPACE#key#SPACE#`k`#SPACE#set#SPACE#to#SPACE#`v`.""" #NEWLINE#
"""Returns#SPACE#copy#SPACE#of#SPACE#dict#SPACE#`x`#SPACE#without#SPACE#key#SPACE#`k`.""" #NEWLINE#
add_patch ( axes [ 1 ] , alpha = 0.2 , rasterized = True ) #NEWLINE#
pattern = re . compile ( '\\d\\$,' ) #NEWLINE#
engine = sqlalchemy . create_engine ( 'my#SPACE#connection#SPACE#string' ) #NEWLINE#
def post ( self , request , * args , ** kwargs ) : #NEWLINE# #INDENT# return self . create ( request , * args , ** kwargs ) #NEWLINE#
myB . foo ( ) #NEWLINE#
plt . plot ( X , Y3 , lw = 4 ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 0 , 4 ) , ( 3 , 4 , 1 ) , ( 4 , 3 , 0 ) #NEWLINE#
input ( 'Press#SPACE#return#SPACE#to#SPACE#update#SPACE#the#SPACE#notification' ) #NEWLINE#
axcltwo . set_ylim ( binimg . shape [ 0 ] , - 1 ) #NEWLINE#
self . seek ( 0 , 2 ) #NEWLINE#
f . seek ( findex [ n ] + 1 ) #NEWLINE#
print ( max ( len ( i [ j ] ) for i in x ) ) #NEWLINE#
s = '-ab-cde-fghi-jkl-mn' #NEWLINE# re . findall ( '[a-z]+' , s ) #NEWLINE#
fig = pyplot . figure ( ) #NEWLINE#
func ( ) #NEWLINE#
fp . close ( ) #NEWLINE#
user . user_permissions . add ( perm ) #NEWLINE#
{ NULL , NULL , 0 , NULL } #NEWLINE#
{ 'A' : [ 0 , 1 ] , 'B' : [ 2 ] , 'C' : [ 3 ] } #NEWLINE#
df [ 'A' ] = pd . to_datetime ( df [ 'A' ] ) #NEWLINE# df #NEWLINE#
return sio . getvalue ( ) #NEWLINE#
from mpl_toolkits . mplot3d import Axes3D #NEWLINE#
termios . tcsetattr ( fd , termios . TCSANOW , old_tc ) #NEWLINE#
pipe_lrSVC . fit ( X_train , y_train ) #NEWLINE#
indices = sp_matrix . nonzero ( ) #NEWLINE#
res2 = pd . Series ( res_arr , index = express_df . index ) #NEWLINE#
return 'My#SPACE#Error#SPACE#Format#SPACE#from#SPACE#the#SPACE#record#SPACE#dict' #NEWLINE#
p = sns . regplot ( x = dat . x , y = ydat , data = dat , ax = ax ) #NEWLINE#
form = UserprofileForm ( request . POST ) #NEWLINE#
pygame . quit ( ) #NEWLINE#
d [ 'dict4' ] [ 'king' ] = 7 #NEWLINE#
o4 = O4 ( ) #NEWLINE#
o5 = O5 ( ) #NEWLINE#
Child ( ) . on_start ( ) #NEWLINE#
data = conn . recv ( 1024 ) #NEWLINE#
ax . set_xlabel ( 'biopsies' ) #NEWLINE#
coords = uleft [ 0 ] + x / size [ 0 ] * xwidth , uleft [ 1 ] - y / size [ 1 ] * ywidth #NEWLINE#
plt . show ( ) #NEWLINE#
[ '#SPACE##SPACE#200,21' , '#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' , '0,3' , '2#SPACE##SPACE#' ] #NEWLINE#
user = models . ForeignKey ( User ) #NEWLINE#
raise WindowsError ( ) #NEWLINE#
A01 = A [ : , 0 : 2 ] . astype ( int ) #NEWLINE#
self . Show ( True ) #NEWLINE#
{ 'y' : 10 , 'x' : 5 } #NEWLINE#
plt . show ( ) #NEWLINE#
text . delete ( 1.0 , END ) #NEWLINE#
ax . set_xticklabels ( columns_my_order ) #NEWLINE#
Fraction ( 0.185 ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#0)' ) #NEWLINE#
peaker ( Y ) #NEWLINE#
print ( BASE_DIR ) #NEWLINE#
logits = faultnet . inference ( images ) #NEWLINE#
X [ : , ( 0 ) ] - a #NEWLINE#
return np . prod ( matrix1 , axis = 1 ) [ : , ( None ) ] * np . prod ( matrix2 , axis = 0 ) #NEWLINE#
self . assertTrue ( 'Hello,#SPACE#Bob!' in response ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
x , chopped = int ( x ) , x - int ( x ) #NEWLINE#
remove_while ( [ 'a1' , '' , 'c1' , '' , '' ] ) #NEWLINE#
test ( '(9#SPACE#+#SPACE#3)#SPACE#*#SPACE#(4#SPACE#/#SPACE#5)' ) #NEWLINE#
return df #NEWLINE#
return '2^{0}' . format ( x ) #NEWLINE#
ax . w_xaxis . set_pane_color ( ( 1.0 , 1.0 , 1.0 , 1.0 ) ) #NEWLINE#
m . group ( 1 ) . split ( ',#SPACE#' ) #NEWLINE#
print ( cur . fetchone ( ) ) #NEWLINE#
s = '[' #NEWLINE#
s = '}' #NEWLINE#
d = { 'key2' : [ 3 , 4 , 5 , 6 ] , 'key1' : [ 1 , 2 ] } #NEWLINE# map ( lambda a : dict ( [ _f for _f in a if _f ] ) , map ( None , * [ [ ( k , v ) for v in #NEWLINE# value ] for k , value in list ( d . items ( ) ) ] ) ) #NEWLINE#
fixpath = filepath + '/Contents/MacOS/ErrorScatter' #NEWLINE#
root [ 'bg' ] = 'black' #NEWLINE#
l . append ( v ) #NEWLINE#
print ( line ) #NEWLINE#
pts = [ ( 1 , 1 ) , ( 1 , 10 ) , ( 10 , 10 ) , ( 10 , 1 ) ] #NEWLINE# pts = [ ( 1 , 1 ) , ( 10 , 1 ) , ( 10 , 10 ) , ( 1 , 10 ) ] #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return re . compile ( RE , re . UNICODE ) #NEWLINE#
b = [ 0 , 1 , 2 , 3 ] #NEWLINE#
sum ( 1 for i in a . flat if i ) #NEWLINE#
plt . plot ( list ( range ( 10 ) ) , [ math . sin ( x ) for x in range ( 10 ) ] ) #NEWLINE#
"""({0:.2f}#SPACE#{1}#SPACE#{2:.2f}i)""" . format ( n . real , '+-' [ n . imag < 0 ] , abs ( n . imag ) ) #NEWLINE#
primes = [ p for p in primes if p not in removable_set ] #NEWLINE#
multiples . update ( list ( range ( i * i , n + 1 , i ) ) ) #NEWLINE#
text . insert ( 'end' , 'Some#SPACE#Text' ) #NEWLINE#
return date . replace ( tzinfo = timezone . utc ) #NEWLINE#
listo = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
print ( x ) #NEWLINE#
return fapp ( request . environ , self . start_response ) #NEWLINE#
return list ( islice ( gen ( ) , n ) ) #NEWLINE#
break #NEWLINE#
ax . patch . set_visible ( False ) #NEWLINE#
return 'Git#SPACE#says:#SPACE#{}' . format ( text ) #NEWLINE#
mean = all . mean ( axis = - 1 ) #NEWLINE#
stream . write ( '...#SPACE#' ) #NEWLINE#
payload = { 'name' : 'hello' , 'data' : 'hello' } #NEWLINE# r = requests . get ( 'http://example.com/api/params' , params = payload ) #NEWLINE#
print ( df . TIMESTAMP . dt . hour ) #NEWLINE#
def __init__ ( self , ** kwargs ) : #NEWLINE# #INDENT# self . args = kwargs #NEWLINE#
messages = [ 'Dog' , 'Cat' , 'Duck' , 'Wolf' ] #NEWLINE#
button . pack ( ) #NEWLINE#
match = re . search ( '(\\d+/\\d+/\\d+)' , 'The#SPACE#date#SPACE#is#SPACE#11/12/98' ) #NEWLINE# match . group ( 1 ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
func ( "Nothin'" ) #NEWLINE#
print ( np . unravel_index ( np . argmax ( x ) , x . shape ) ) #NEWLINE#
array ( [ [ NaN , NaN , NaN , NaN ] , [ NaN , NaN , NaN , NaN ] , [ NaN , NaN , NaN , NaN ] ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
print ( n . zfill ( 3 ) ) #NEWLINE#
newdate = datetime . datetime ( * map ( int , values ) ) #NEWLINE#
- math . pow ( 3 , float ( 1 ) / 3 ) #NEWLINE#
index , value = max ( data , key = lambda item : item [ 1 ] ) #NEWLINE#
df2 = pd . DataFrame ( columns = cols , index = list ( range ( 2 ) ) ) #NEWLINE#
map . drawcoastlines ( ) #NEWLINE#
f . readline ( ) #NEWLINE#
ast = compiler . parse ( eq ) #NEWLINE#
a = np . empty ( ( 2 , 3 , 4 , 5 ) ) #NEWLINE#
class ColoredFormatter ( logging . Formatter ) : #NEWLINE# #INDENT# pass #NEWLINE#
noformattingstr ( 'hello#SPACE#world:#SPACE#%d' ) % 10 #NEWLINE#
"""Given#SPACE#a#SPACE#date,#SPACE#calculates#SPACE#n#SPACE#next#SPACE#third#SPACE#fridays""" #NEWLINE#
outfile . close ( ) #NEWLINE#
annotation ( name , value ) #NEWLINE#
del sublist [ index ] #NEWLINE#
print ( ( numC , 'Computer#SPACE#guessed#SPACE#your#SPACE#number#SPACE#with' , tries , 'tries' ) ) #NEWLINE#
System . out . println ( answer . toString ( ) ) #NEWLINE#
from wand . image import Image #NEWLINE#
numpy . dstack ( ( x , y ) ) #NEWLINE#
mydict = { key : value for key , value in zip ( x , y ) } #NEWLINE#
a = [ [ 'John' , 'Sergeant#SPACE#' ] , [ 'Jack' , 'Commander#SPACE#' ] , [ 'Jill' , 'Captain#SPACE#' ] ] #NEWLINE# b = [ '800' , '854' , '453' ] #NEWLINE# c = [ ( x + [ y ] ) for x , y in zip ( a , b ) ] #NEWLINE# print ( c ) #NEWLINE#
fileID = fs . put ( open ( 'owl.jpg' , 'r' ) ) #NEWLINE#
width , height = win . get_size ( ) #NEWLINE#
return pd . concat ( [ df . iloc [ - shift : ] , df . iloc [ : - shift ] ] ) #NEWLINE#
models . Model . save ( self , force_insert , force_update ) #NEWLINE#
print ( ( a , b , c ) ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( host = '0.0.0.0' , port = 80 ) #NEWLINE#
{ { sec . books . count } } #NEWLINE#
plt . show ( ) #NEWLINE#
return ZipExtFile ( cStringIO . StringIO ( data ) , 'r' , zinfo ) #NEWLINE#
app . mainloop ( ) #NEWLINE#
cube = numpy . array ( list ( itertools . product ( ( 0 , 1 ) , ( 0 , 1 ) , ( 0 , 1 ) ) ) ) #NEWLINE# print ( cube ) #NEWLINE# array ( [ [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] , [ 0 , 1 , 0 ] , [ 0 , 1 , 1 ] , [ 1 , 0 , 0 ] , [ 1 , 0 , 1 ] , [ 1 , #NEWLINE# 1 , 0 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
webbrowser . open ( 'http://www.example.com/' ) #NEWLINE#
map ( np . random . shuffle , arr2d ) #NEWLINE#
df . pivot ( index = 0 , columns = 1 , values = 2 ) #NEWLINE#
ma . min ( ) #NEWLINE#
self . saver = tf . train . Saver ( self . variables ) #NEWLINE#
print ( float ( line ) ) #NEWLINE#
f . write ( str ( i ) + ',' + str ( j ) ) #NEWLINE#
index += 1 #NEWLINE#
self . nums = { 'n1' : 10 , 'n2' : 20 , 'n3' : 30 } #NEWLINE#
d = dict ( zip ( list ( range ( 1 , 10 ) ) , list ( range ( 50 , 61 ) ) ) ) #NEWLINE#
im = Image . open ( '%03i.png' % i ) #NEWLINE#
homedir = '{}/' . format ( os . path . expanduser ( '~' ) ) #NEWLINE#
print ( [ ( x if x else y ) for x , y in p . findall ( s ) ] ) #NEWLINE#
[ 0.001 , 0.25 , 0.5 , 0.75 , 0.99 , 0.999 ] #NEWLINE#
print ( 'Client#SPACE#connected' ) #NEWLINE#
d = datetime . strptime ( s , '%d/%m/%Y#SPACE#%H:%M:%S' ) #NEWLINE#
f = open ( 'myTextFile.txt' , 'r' ) #NEWLINE# lines = f . readlines ( ) #NEWLINE# for line in lines : #NEWLINE# #INDENT# words = line . split ( '-' ) #NEWLINE#
w . setsampwidth ( 3 ) #NEWLINE#
f = foo ( ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
mydict = { 'one' : 1 , 'two' : 2 , 'three' : 3 , 'four' : 4 } #NEWLINE#
hets = [ ] #NEWLINE#
canvas . Canvas . __init__ ( self , * args , ** kwargs ) #NEWLINE#
b_id = Column ( Integer , primary_key = True ) #NEWLINE#
return bool ( re . search ( '.*' . join ( s1 ) , s2 ) ) #NEWLINE#
conn = urllib . request . urlopen ( url ) #NEWLINE#
"""𝐟𝐨𝐨""" #NEWLINE#
print ( '#SPACE#' . join ( itemgetter ( 1 , 3 ) ( bleah ) ) ) #NEWLINE#
if all ( x in list2 for x in list1 ) : #NEWLINE# #INDENT# doStuff ( ) #NEWLINE#
next ( csv . reader ( '\x00' ) ) #NEWLINE#
__tablename__ = 'addresses' #NEWLINE#
return json . dumps ( recursive_asdict ( data ) ) #NEWLINE#
os . path . join ( os . path . normpath ( directory ) , filename ) #NEWLINE#
parser . add_argument ( '--foo' ) #NEWLINE#
result = None if obj is None else obj . method ( ) #NEWLINE#
random . uniform ( - 1 , 1 ) #NEWLINE# random . uniform ( - 1 , 1 ) #NEWLINE#
print ( data . encode ( 'base64' ) ) #NEWLINE#
f . __closure__ [ 0 ] . cell_contents #NEWLINE#
file_list . sort ( key = lambda a : a [ 0 ] ) #NEWLINE#
wordorder = dict ( zip ( list2 , list ( range ( len ( list2 ) ) ) ) ) #NEWLINE#
self . emit ( QtCore . SIGNAL ( 'linkClicked(const#SPACE#QUrl&)' ) ) #NEWLINE#
win32api . SetCursorPos ( ( x , y ) ) #NEWLINE#
s = pd . Series ( l ) #NEWLINE#
con . execute ( 'INSERT#SPACE#OR#SPACE#IGNORE#SPACE#INTO#SPACE#ABCD#SPACE#VALUES#SPACE#(?,#SPACE#?,#SPACE#?,#SPACE#?)' , ( a , b , c , d ) ) #NEWLINE#
"""\\s""" #NEWLINE#
self . response . headers [ 'Content-Type' ] = 'text/plain' #NEWLINE#
from google . appengine . ext import webapp #NEWLINE#
pass #NEWLINE#
l1 = [ ( 'a' , 2 ) , ( 'b' , 3 ) , ( 'z' , 5 ) ] #NEWLINE# l2 = [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) ] #NEWLINE# [ x [ 0 ] for x , y in zip ( l1 , l2 ) if x [ 0 ] == y [ 0 ] ] #NEWLINE#
ax1 . plot ( pd . Series ( np . random . uniform ( 0 , 1 , size = 10 ) ) , color = 'g' ) #NEWLINE#
print ( ( x , next ( it ) ) ) #NEWLINE#
f = open ( '/Users/.../Desktop/Name_Python.txt' , 'w' ) #NEWLINE#
self . a , self . b , self . c = 0 , 1 , 2 #NEWLINE#
x [ 1 , 2 ] #NEWLINE#
imap . select ( 'INBOX' ) #NEWLINE#
r = re . compile ( '^org/(?P<company_name>\\w+)' ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 3 , 4 ) , ( 3 , 4 , 0 ) , ( 4 , 0 , 1 ) #NEWLINE#
np . random . shuffle ( arr ) #NEWLINE#
f = gzip . open ( fname , 'rb' ) #NEWLINE#
out = np . zeros ( ( N , 3 , 3 ) ) #NEWLINE#
float_arr = np . vstack ( arr [ : , ( 1 ) ] ) . astype ( np . float ) #NEWLINE#
app . route ( '/<major>/' ) #NEWLINE#
app . route ( '/test/' ) #NEWLINE#
sys . path . append ( vendor_dir ) #NEWLINE#
yaml . add_path_resolver ( 'tag:yaml.org,2002:str' , [ 'version' ] , yaml . ScalarNode ) #NEWLINE#
df . col = df . col . dropna ( ) . apply ( lambda x : str ( int ( x ) ) ) #NEWLINE#
os . chmod ( path , current_permissions & NO_WRITING ) #NEWLINE#
posts . append ( BeautifulSoup ( str ( post ) ) . get_text ( ) . encode ( 'utf-8' ) . strip ( ) ) #NEWLINE#
ydata = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] , [ 7 , 8 ] ] , dtype = float ) #NEWLINE#
score = sum ( i * w ( i ) for i in x if i in y ) / sum ( i * w ( i ) for i in x ) #NEWLINE#
answer1 [ i ] += 1 #NEWLINE#
self . meth ( ) #NEWLINE#
dff . fillna ( method = 'bfill' ) . fillna ( len ( breaks ) ) #NEWLINE#
"""CREATE#SPACE#USER#SPACE#someuser#SPACE#PASSWORD#SPACE#somepassword""" #NEWLINE#
input_3D = np . array ( [ input [ i : i + nb_timesteps ] for i in range ( nb_sequences ) ] ) #NEWLINE#
subprocess . Popen ( '..\\abc.py#SPACE#' + cmd , shell = True , cwd = newpath ) #NEWLINE#
print ( matches [ 1 ] ) #NEWLINE#
response . body = '{"message":#SPACE#"POST#SPACE#method#SPACE#is#SPACE#not#SPACE#supported"}' #NEWLINE#
response . body = '{"message":#SPACE#"HTTP#SPACE#DELETE#SPACE#method#SPACE#used"}' #NEWLINE#
cursor . execute ( 'SELECT#SPACE#currency#SPACE#FROM#SPACE#exchange_rates#SPACE#WHERE#SPACE#date=?' , self . date ) #NEWLINE#
dict . __init__ ( self , * args , ** kwargs ) #NEWLINE#
mtime = os . path . getmtime ( file_name ) #NEWLINE#
found = bsObj . findAll ( 'div' , id = lambda x : x and x . endswith ( '_answer' ) ) #NEWLINE#
key = parts [ - 1 ] #NEWLINE#
url = 'https://play.google.com/store/getreviews' #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'B' : [ 'a' , 'b' , 'f' ] } ) #NEWLINE#
self . obtainingparams ( df , tau_1 , tau_2 , residuals ) . called #NEWLINE#
invalid_xml = re . compile ( '[\x00-\x08\x0b-\x0c\x0e-\x1f\x7f]' ) #NEWLINE#
categories . setdefault ( i [ 1 ] , [ ] ) . append ( i [ 0 ] ) #NEWLINE#
pwd . getpwuid ( os . getuid ( ) ) . pw_name #NEWLINE#
db . session . add_all ( items ) #NEWLINE# db . session . commit ( ) #NEWLINE#
dc = wx . PaintDC ( self ) #NEWLINE#
print ( 'Could#SPACE#not#SPACE#check#SPACE#screen#SPACE#Title' ) #NEWLINE#
L = [ OrderedDict ( ( k , d [ k ] ( v ) ) for k , v in l . items ( ) ) for l in L ] #NEWLINE#
column_header . set_focus_on_click ( False ) #NEWLINE#
return [ ( [ x ] + p ) for x in seqs [ 0 ] for p in product ( * seqs [ 1 : ] ) ] #NEWLINE#
list_2 = [ '1' , 'e' , '1' , 'e' ] #NEWLINE#
min ( x ) #NEWLINE#
ax . legend ( ( rects1 [ 0 ] , rects2 [ 0 ] ) , ( 'Men' , 'Women' ) ) #NEWLINE#
lst = [ ( 1.0 , 1.0 ) , ( 3.0 , 3.0 ) , ( 5.0 , 5.0 ) ] #NEWLINE#
df . registerTempTable ( 'df' ) #NEWLINE#
driver . get ( 'http://' + x ) #NEWLINE#
megawarc . main ( ) #NEWLINE#
Grandparent . my_method ( self ) #NEWLINE#
return re . fullmatch ( '^[0-9a-fA-F]$' , s or '' ) is not None #NEWLINE#
return zip ( * ntup ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
print ( a , b ) #NEWLINE#
a . show ( ) #NEWLINE#
server_socket . listen ( 10 ) #NEWLINE#
self . frame . Show ( True ) #NEWLINE#
ax = fig . add_subplot ( gs [ n ] ) #NEWLINE#
s = SMTP_SSL ( 'smtp.gmail.com' , 465 , timeout = 10 ) #NEWLINE#
print ( r . url ) #NEWLINE#
im . seek ( i ) #NEWLINE#
class Customer ( models . Model ) : #NEWLINE# #INDENT# pizzas_bought = models . ManyToManyField ( Pizza ) #NEWLINE#
thread . start ( ) #NEWLINE#
key , value = min ( list ( dict . items ( ) ) , key = lambda __v : abs ( __v [ 1 ] - target ) ) #NEWLINE#
f . save ( ) #NEWLINE#
toolbox . register ( 'update' , updateParticle , phi1 = 2.0 , phi2 = 2.0 ) #NEWLINE#
print ( f ( ) ) #NEWLINE#
df [ 'Gmean' ] = gmean ( df . iloc [ : , : 3 ] , axis = 1 ) #NEWLINE#
form_as_div = form_as_div . replace ( '<li' , '<div' ) . replace ( '</li' , '</div' ) #NEWLINE#
NP . insert ( T , 2 , r , axis = 0 ) #NEWLINE#
fd . write ( ',' . join ( map ( quote , row ) ) + '\r\n' ) #NEWLINE#
directory = os . path . realpath ( directory ) #NEWLINE#
i += 1 #NEWLINE#
[ 0.010305631072943869 , 0.0009846628084654808 , 0.05003345028665011 ] #NEWLINE#
b . sort ( reverse = True ) #NEWLINE#
dir = os . path . dirname ( __file__ ) #NEWLINE#
main ( ) #NEWLINE#
r , g , b = im . getpixel ( ( 0 , 0 ) ) #NEWLINE#
print ( re . findall ( '(.(foo))' , 'Xfoo' ) ) #NEWLINE#
doc = parse ( 'test.xml' ) #NEWLINE# element = doc . xpath ( '//text' ) [ 0 ] #NEWLINE#
s . close ( ) #NEWLINE#
x = '2342.34' #NEWLINE# float ( x ) #NEWLINE#
self . btn1 . setGeometry ( QRect ( 0 , 0 , 100 , 30 ) ) #NEWLINE#
def murmur ( data , seed ) : #NEWLINE# #INDENT# m = 14313749767032793493 #NEWLINE#
print ( 'abcç' ) #NEWLINE#
getattr ( exit , '__str__' ) ( ) #NEWLINE#
{ k : [ v for _ , v in g ] for k , g in groupby ( arr , lambda x : x [ 0 ] ) } #NEWLINE#
make_unicorns_from ( f ) #NEWLINE#
codecs . register_error ( 'specials' , specials ) #NEWLINE#
a_pet . say ( ) #NEWLINE#
return redirect ( url_for ( 'new_hotness' ) ) #NEWLINE#
d1 = datetime . datetime . now ( ) #NEWLINE#
def __init__ ( self , model , view ) : #NEWLINE# #INDENT# super ( CompanyPresenter , self ) . __init__ ( ) #NEWLINE#
shutil . rmtree ( dirpath ) #NEWLINE#
return 'Hello#SPACE#%s!#SPACE#You#SPACE#uploaded#SPACE#%s#SPACE#(%d#SPACE#bytes).' % ( name , filename , len ( raw ) ) #NEWLINE#
s = f . readframes ( 300000 ) #NEWLINE#
register . inclusion_tag ( 'main-navigation.html' ) ( cms_navigation ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
form . fieldname . choices = choice_list #NEWLINE#
p2 = subprocess . Popen ( args , stdout = subprocess . PIPE ) #NEWLINE#
button . connect ( 'clicked' , callback ) #NEWLINE#
server = Process ( target = app . run ) #NEWLINE#
print ( fmt . format ( phrase , 'JeffJeffJeff' , name = 'Larry#SPACE#Bob' ) ) #NEWLINE#
c = sys . stdin . read ( 1 ) #NEWLINE#
"""Mozilla/5.0#SPACE#(X11;#SPACE#Linux#SPACE#x86_64;#SPACE#rv:7.0.1)#SPACE#Gecko/20100101#SPACE#Firefox/7.0.1""" #NEWLINE#
itertools . product ( * ( [ list ( C . items ( ) ) ] * 2 ) ) #NEWLINE#
s = 'UserID/ContactNumber' #NEWLINE#
a [ 1 ] = 'a' #NEWLINE#
logging . exception ( e ) #NEWLINE#
print ( x ) #NEWLINE#
r . sub ( functools . partial ( function , y = arg ) , string ) #NEWLINE#
C3 = ( A * B . T ) . T #NEWLINE# np . allclose ( C0 , C3 ) #NEWLINE#
main ( ) #NEWLINE#
print ( 'current#SPACE#temperatureï¼\x9a' , t , '#SPACE##SPACE#' , float ( t / 100.0 ) ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
'%.*f' % ( 1 , number ) #NEWLINE#
sys . exit ( ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
print ( 'I#SPACE#can#SPACE#call#SPACE#multiple#SPACE#functions' ) #NEWLINE#
data = pd . Series ( df , name = 'dums' ) #NEWLINE#
host . set_ylabel ( 'Density' ) #NEWLINE#
np . random . shuffle ( arr ) #NEWLINE#
print ( prettyformat ( obj ) ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 3 ) , ind , [ 'a' ] ) #NEWLINE#
print ( dict ( match . groups ( ) for match in re . finditer ( '([^(]+)\\(([^)]+)\\)' , s ) ) ) #NEWLINE#
frw . seek ( seekpoint , 0 ) #NEWLINE#
env . hosts = [ 'prod.server.com' ] #NEWLINE#
df . columns = [ col_dict . get ( x , x ) for x in df . columns ] #NEWLINE#
q = Queue . Queue ( maxsize = 0 ) #NEWLINE#
f = wave . open ( 'YOUR#SPACE#FILE#SPACE#NAME' , 'rb' ) #NEWLINE#
self . fields [ 'foo' ] . queryset = Foo . objects . filter ( title__isnull = False ) #NEWLINE#
list . remove ( s ) #NEWLINE#
print ( 'sys.argv:#SPACE#%s' % sys . argv [ 0 ] ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 0 ) , ( 2 , 3 , 4 ) , ( 3 , 4 , 1 ) , ( 4 , 0 , 3 ) #NEWLINE#
self . text . config ( yscrollcommand = self . scroller . set ) #NEWLINE#
maxrep = reduce ( f , l , ( 0 , 0 , 0 ) ) [ 2 ] #NEWLINE#
df . append ( df2 ) #NEWLINE#
fp . set_preference ( 'dom.max_script_run_time' , 5 ) #NEWLINE#
definitions . py #NEWLINE#
main ( ) #NEWLINE#
open_cv_image = open_cv_image [ : , : , : : - 1 ] . copy ( ) #NEWLINE#
print ( ElementTree . tostring ( tree ) ) #NEWLINE#
l . set_option ( ldap . OPT_REFERRALS , 0 ) #NEWLINE#
Result = namedtuple ( 'Result' , [ 'x' , 'y' ] ) #NEWLINE#
is_palindrome ( letters ) #NEWLINE#
df . stack ( ) . values #NEWLINE#
new_contact . save ( ) #NEWLINE#
ax1 . yaxis . label . set_color ( plot_ax1 . get_color ( ) ) #NEWLINE#
mylist = sorted ( mylist , key = itemgetter ( 'name' , 'age' ) ) #NEWLINE# mylist = sorted ( mylist , key = lambda k : ( k [ 'name' ] . lower ( ) , k [ 'age' ] ) ) #NEWLINE# mylist = sorted ( mylist , key = lambda k : ( k [ 'name' ] . lower ( ) , - k [ 'age' ] ) ) #NEWLINE#
self . geometry ( '300x100' ) #NEWLINE#
a = A ( ) #NEWLINE#
def dispatch ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# return super ( MyModelViewSet , self ) . dispatch ( * args , ** kwargs ) #NEWLINE#
return logging . Formatter . format ( self , record ) #NEWLINE#
dt = datetime . strptime ( '2012.11.07' , '%Y.%m.%d' ) #NEWLINE#
argv . Add ( 'foo' ) #NEWLINE#
br . set_handle_redirect ( True ) #NEWLINE#
list ( zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) #NEWLINE#
soup = BeautifulSoup ( xml_string ) #NEWLINE#
for k , v in list ( my_dict . items ( ) ) : #NEWLINE# #INDENT# if v < threshold_value : #NEWLINE# #INDENT# #INDENT# del my_dict [ k ] #NEWLINE#
B = A #NEWLINE#
print ( 'a#SPACE#process#SPACE#with#SPACE#pid#SPACE#%d#SPACE#does#SPACE#not#SPACE#exist' % pid ) #NEWLINE#
p . start ( ) #NEWLINE#
df [ 'datetime' ] = df . index #NEWLINE#
print ( 'running#SPACE#on#SPACE#debug#SPACE#interpreter' ) #NEWLINE#
fig , ax = plt . subplots ( 1 , 1 ) #NEWLINE#
return np . dot ( rot_matrices , p ) #NEWLINE#
pycharm [ path_to_your_file ] #NEWLINE#
f2 . write ( data ) #NEWLINE#
super ( B , self ) . __init__ ( ) #NEWLINE#
logging . root . addHandler ( console_handler ) #NEWLINE#
print ( '</pre>' ) #NEWLINE#
print ( sys . version ) #NEWLINE#
xml_data ( ) #NEWLINE#
print ( 'Got#SPACE#%s#SPACE#from#SPACE#worker' % item ) #NEWLINE#
my_django_file = ContentFile ( f . read ( ) ) #NEWLINE#
return orig ( repo , remote , * args , ** kwargs ) #NEWLINE#
adjective = re . sub ( 'est$' , '' , word1 ) #NEWLINE#
names = list ( a . dtype . names ) #NEWLINE#
ind . append ( arr . index ( list ( df . iloc [ i ] ) ) ) #NEWLINE#
for pair in [ val . split ( '=' ) for val in s . split ( '\r\n' ) [ 1 : - 1 ] ] : #NEWLINE# #INDENT# d [ pair [ 0 ] ] = int ( pair [ 1 ] ) #NEWLINE#
Person . create ( name = 'Bob0' , birthday = dt . date ( 1940 , 4 , 13 ) ) #NEWLINE#
parser . dispatch ( ) #NEWLINE#
totuple ( array ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
plt . rcParams [ 'legend.numpoints' ] = 1 #NEWLINE#
return check_substitution ( tem . replace ( '$#SPACE#' , '$$#SPACE#' ) , m ) #NEWLINE#
print ( format ( tree ) ) #NEWLINE#
create_modeladmin ( MyPostAdmin , name = 'my-posts' , model = Post ) #NEWLINE#
df [ 'index_col' ] = df . index #NEWLINE# df [ 'Delta' ] = df [ 'index_col' ] . diff ( ) #NEWLINE#
logging . error ( e , exc_info = True ) #NEWLINE#
setup ( ext_modules = [ Extension ( 'example' , [ 'example.c' ] ) ] ) #NEWLINE#
import imp #NEWLINE# imp . <STR0> ( module ) #NEWLINE#
a [ 0 ] ( 1 ) #NEWLINE#
parser . add_argument ( '-p' , dpass_1 , help = 'Pass#SPACE#me#SPACE#on' ) #NEWLINE#
from PyQt4 . QtGui import * #NEWLINE#
""",""" . join ( repr ( str ( n ) ) for n in numbers ) #NEWLINE#
main ( ) #NEWLINE#
return list ( ) #NEWLINE#
super ( ProfileForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
p . join ( ) #NEWLINE#
"""""" . join ( c for c , unused in groupby ( s ) ) #NEWLINE#
msg . attach ( MIMEText ( text ) ) #NEWLINE#
lst . sort ( ) #NEWLINE#
form = EditEventForm ( instance = event ) #NEWLINE#
return min ( ( angular_distance ( theta , L [ i ] , mod ) , i , L [ i ] ) for i in [ i1 , i2 ] ) #NEWLINE#
my_list = my_list . insert ( 0 , my_string ) #NEWLINE# my_tuple = tuple ( my_list ) #NEWLINE#
results . sort ( key = lambda x : ( int ( x [ 0 ] ) , x [ 1 ] ) , reverse = True ) #NEWLINE#
data = urllib . request . urlopen ( url ) . read ( ) #NEWLINE#
data_list = [ ( [ key ] + value ) for key , value in list ( data . items ( ) ) ] #NEWLINE#
pickle . dump ( data1 , output ) #NEWLINE#
super ( PersonChangeListForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
l . set_option ( ldap . OPT_X_TLS_DEMAND , True ) #NEWLINE#
self . fig . canvas . mpl_connect ( 'key_press_event' , self . on_key ) #NEWLINE#
setup ( ) #NEWLINE#
f ( * args ) #NEWLINE#
return match_obj . group ( 1 ) . replace ( '"' , '"' ) #NEWLINE#
your_list = [ 'one' , 'two' , 'one' ] #NEWLINE# len ( your_list ) != len ( set ( your_list ) ) #NEWLINE#
return Guild . query ( ) . filter ( Guild . members == self . key ) #NEWLINE#
ax . set_xlim ( - 51 , 51 ) #NEWLINE#
results_list = pool_results . get ( ) #NEWLINE#
pd . rolling_apply ( df , window = 5 , func = lambda x : x . argmin ( ) , min_periods = 1 ) #NEWLINE#
print ( ( 'Action#SPACE#received:' , repr ( action ) ) ) #NEWLINE#
print ( soup . find ( 'h2' , text = pattern ) == soup . find ( 'h2' ) ) #NEWLINE#
sorted ( sentence ) [ - 1 ] #NEWLINE#
pass #NEWLINE#
formated_dates = [ datetime . datetime . strptime ( str ( i ) , '%Y%m%d' ) for i in dates ] #NEWLINE#
a [ : , ( [ 1 , 2 , 3 ] ) ] #NEWLINE#
print ( np . allclose ( dets ( M ) , dets_fast ( M . copy ( ) ) ) ) #NEWLINE#
block_start = np . concatenate ( ( [ 0 ] , np . cumsum ( block_count ) [ : - 1 ] ) ) #NEWLINE#
data += np . random . normal ( size = data . shape ) * 0.4 #NEWLINE#
plt . ylim ( - 2 , 2 ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
df = pd . DataFrame ( { 'col1' : np . random . randn ( 100 ) , 'col2' : np . random . randn ( 100 ) } ) #NEWLINE# df . hist ( layout = ( 1 , 2 ) ) #NEWLINE#
[ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] #NEWLINE#
class PizzaForm ( forms . ModelForm ) : #NEWLINE# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# #INDENT# model = Pizza #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class ToppingForm ( forms . ModelForm ) : #NEWLINE# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# #INDENT# model = Topping #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
a = np . array ( [ ( 1 , 2 , 3 ) , ( 4 , 5 , 6 ) ] ) #NEWLINE#
return MyClass ( arg1 , arg2 ) #NEWLINE#
bitmap = wx . Bitmap ( path ) #NEWLINE#
return { 'foo' : foo } #NEWLINE#
expr3 , expr4 = expr1 , expr2 #NEWLINE#
expr1 + expr2 * ( expr3 - expr4 ) #NEWLINE#
setattr ( self , attr , value ) #NEWLINE#
s3 . put ( 'file' , 's3n://bucket/file' ) #NEWLINE#
item = row [ 1 : ] #NEWLINE#
d [ 1 ] = '1' #NEWLINE# d [ '2' ] = 2 #NEWLINE# p1 = Process ( target = f , args = ( d , ) ) #NEWLINE# p2 = Process ( target = f , args = ( d , ) ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE# print ( d ) #NEWLINE#
plt . axvline ( x = 0.2 ) #NEWLINE#
df [ 'bar' ] . fillna ( df [ 'foo' ] , inplace = True ) #NEWLINE# del df [ 'foo' ] #NEWLINE#
obj = memcache_client . gets ( key ) #NEWLINE#
print ( '{0}.#SPACE#@{1}#SPACE#-#SPACE#{2}' . format ( i , handle , text ) ) #NEWLINE#
d [ l [ 0 ] ] = l [ 1 ] #NEWLINE#
os . system ( 'rm#SPACE#-rf#SPACE#./build#SPACE#./dist' ) #NEWLINE#
interpolate360 ( 90 , [ [ 0 ] , [ 1 ] ] ) #NEWLINE#
do_another_thing ( object_list [ - 1 ] ) #NEWLINE#
l . extend ( v ) #NEWLINE#
opt . add_argument ( * args , ** kwargs ) #NEWLINE#
__tablename__ = 'A' #NEWLINE#
plt . figure ( 'with#SPACE#X#SPACE#and#SPACE#Y' ) #NEWLINE#
plt . figure ( 'with#SPACE#Y#SPACE#and#SPACE#X' ) #NEWLINE#
{ 'a' : 2 , 'A' : 5 , 's' : 2 , 'd' : 2 , 'F' : 1 , 'C' : 1 , 'S' : 5 , 'D' : 2 } #NEWLINE#
response = c . get ( '/my-protected-url/' , ** auth_headers ) #NEWLINE#
groups . setdefault ( y , [ ] ) . append ( x ) #NEWLINE#
[ 1 , 5 , 10 , 10 , 5 , 1 ] #NEWLINE#
df = pd . DataFrame ( { 'A' : list ( range ( 1000 ) ) , 'B' : list ( range ( 1000 ) ) } ) #NEWLINE# df #NEWLINE# df [ : 5 ] #NEWLINE#
list = [ set ( [ 1 , 2 ] ) , set ( [ 3 , 4 ] ) , set ( [ 4 , 5 ] ) , set ( [ 6 , 7 ] ) ] #NEWLINE#
df [ 'AMV' ] - df . groupby ( 'count_id' ) [ 'AMV' ] . transform ( 'min' ) #NEWLINE#
"""Produce#SPACE#`n`-character#SPACE#chunks#SPACE#from#SPACE#`s`.""" #NEWLINE#
parser . add_argument ( '--foo' , action = 'store_true' , help = 'help#SPACE#for#SPACE#foo#SPACE#arg.' ) #NEWLINE#
raise ValueError ( 'Input#SPACE#vector#SPACE#needs#SPACE#to#SPACE#be#SPACE#bigger#SPACE#than#SPACE#window#SPACE#size.' ) #NEWLINE#
raise ValueError ( #NEWLINE# "Window#SPACE#is#SPACE#on#SPACE#of#SPACE#'flat',#SPACE#'hanning',#SPACE#'hamming',#SPACE#'bartlett',#SPACE#'blackman'" ) #NEWLINE#
self . fields [ 'user' ] . queryset = User . _default_manager . filter ( pk = request_user . pk ) #NEWLINE#
df = pd . concat ( [ s1 , s2 ] , axis = 1 ) . ffill ( ) . dropna ( ) #NEWLINE# df #NEWLINE#
temp = pd . concat ( [ temp , temp2 ] , axis = 1 ) #NEWLINE#
word = word [ : x ] + ',\n' #NEWLINE#
request . method = 'GET' #NEWLINE#
d [ key ] = value #NEWLINE#
df . apply ( LabelEncoder ( ) . fit_transform ) #NEWLINE#
15 , 1 , 2 , 4 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 1 , 2 , 4 , 8 , 9 , 10 , 11 , 12 #NEWLINE#
parser = argparse . ArgumentParser ( description = 'Some#SPACE#text' ) #NEWLINE#
print ( l2set ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
{ '_id' : 1 , 'arr' : [ 1 , 2 ] } #NEWLINE#
print ( i , is_square ( i ) ) #NEWLINE#
admin . site . register ( Class , ClassAdmin ) #NEWLINE#
browser . add_cookie ( cookie ) #NEWLINE#
print ( x . date ( ) ) #NEWLINE#
super ( ) . __init__ ( * args ) #NEWLINE#
f . savefig ( 'foo.pdf' , bbox_inches = 'tight' ) #NEWLINE#
subplot ( 4 , 1 , 3 ) #NEWLINE#
l . append ( elt ) #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 5 , 10 ) ) #NEWLINE#
f . read ( ) #NEWLINE#
on = models . ForeignKey ( Member , blank = True ) #NEWLINE#
time . sleep ( 0.0 ) #NEWLINE#
stdin , stdout , stderr = ssh . exec_command ( 'ls' ) #NEWLINE#
X = sc . transform ( X ) #NEWLINE#
[ c , d , e , f ] #NEWLINE#
ax2 = plt . subplot ( 212 ) #NEWLINE#
driver . get ( 'https://stackoverflow.com' ) #NEWLINE#
comments = soup . find_all ( string = lambda text : isinstance ( text , Comment ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
return df [ 'col1' ] . sum ( ) > 5 #NEWLINE#
here = os . path . dirname ( os . path . abspath ( __file__ ) ) #NEWLINE#
line = line . rstrip ( ) #NEWLINE#
store . select ( 'df_mask' , columns = [ 'Alpha' , 'Int' ] ) #NEWLINE#
ax . add_patch ( circ ) #NEWLINE#
print ( int ( math . sqrt ( 5 ) ) ) #NEWLINE#
sequence = sequence . encode ( 'ascii' ) #NEWLINE#
return '-' + str ( self . op ) #NEWLINE#
df [ 'Dif' ] = df . groupby ( df . index . day ) [ 'Last' ] . apply ( lambda x : x . iloc [ - 1 ] - x ) #NEWLINE#
"""""" . join ( [ ( c in this . d and this . d [ c ] or c ) for c in this . s ] ) #NEWLINE#
im . getbbox ( ) #NEWLINE#
print ( sum_from_python ( 2 , 3 ) ) #NEWLINE#
pool = redis . ConnectionPool ( host = 'localhost' , port = 6379 , db = 0 ) #NEWLINE# r = redis . Redis ( connection_pool = pool ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) #NEWLINE#
fig . suptitle ( 'Simple#SPACE#Scatterplot#SPACE#Matrix' ) #NEWLINE#
sleep ( snooziness ) #NEWLINE#
my_list = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE#
parser . parse_args ( ) #NEWLINE#
print ( foo . bar . _decorators ) #NEWLINE#
os . _exit ( 1 ) #NEWLINE#
return [ string [ i : i + k ] for i in range ( length - k + 1 ) ] #NEWLINE#
a [ ind ] #NEWLINE#
hash [ 'element1' ] [ 'sub1' ] [ 'subsub1' ] = 'value1' #NEWLINE#
process . wait ( ) #NEWLINE#
print ( 'You#SPACE#draged#SPACE#from' , self . click , 'to:' , ( x , y ) ) #NEWLINE#
list ( range ( 0 , len ( given ) - len ( sublist ) + 1 ) ) #NEWLINE#
element . sendKeys ( '123.00' ) #NEWLINE#
window . add ( widget ) #NEWLINE#
l [ i + 1 ] , l [ i ] = l [ i ] , l [ i + 1 ] #NEWLINE#
m = imaplib . IMAP4_SSL ( 'imap.gmail.com' ) #NEWLINE#
df = df [ [ 'State' , 'RegionName' ] ] . reset_index ( drop = True ) #NEWLINE#
np . einsum ( 'ij,ij->i' , X . dot ( M ) , X ) #NEWLINE#
dftot = pd . concat ( ( df1 , df2 ) ) #NEWLINE#
print ( np . split ( x , np . where ( np . diff ( x ) > 0.5 ) [ 0 ] + 1 ) ) #NEWLINE#
print ( ( 'write' , i ) ) #NEWLINE#
timestamp = ( utc_dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) #NEWLINE#
df = df [ cols ] #NEWLINE# df #NEWLINE#
SomeClass . some_static_method ( ) #NEWLINE#
print ( foo ) #NEWLINE#
[ [ 1 , 4 ] , [ 2 , 5 ] , [ 3 , 6 ] , [ 7 , 9 ] , [ 8 , 10 ] ] #NEWLINE#
idx = df . groupby ( 'TestName' ) . Date . agg ( [ 'idxmin' , 'idxmax' ] ) . stack ( ) . unique ( ) #NEWLINE#
B = numpy . split ( A , split_at ) #NEWLINE#
df = pd . read_csv ( 'dup.csv' ) #NEWLINE#
result_s = '' . join ( [ ch for ch in original_s if ch in valid ] ) #NEWLINE#
f ( ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
float ( stringPercent . strip ( '%' ) ) / 100.0 #NEWLINE#
return not any ( i in seen or seen . append ( i ) for i in x ) #NEWLINE#
( np . corrcoef ( M ) == 1 ) . sum ( ) == M . shape [ 0 ] #NEWLINE#
print ( parseval_1 - parseval_2 ) #NEWLINE#
num_words = sum ( len ( sentence . split ( ) ) for sentence in text ) #NEWLINE#
res . add ( tuple ( [ int ( a ) for a in candidate [ 2 : - 1 ] . split ( ',' ) ] ) ) #NEWLINE#
ipshell ( ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
earth += 100000.0 #NEWLINE#
return '<div#SPACE#class="page_header">' + fn ( * args , ** kw ) + '</div>' #NEWLINE#
l = [ 'a' , 'b' , 'c' ] #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
h . request ( 'PUT' , '/file/pic.jpg' , open ( 'pic.jpg' , 'rb' ) ) #NEWLINE#
myA = np . array ( [ 7 , 4 , 5 , 8 , 3 , 10 ] ) #NEWLINE#
plt . ylim ( 0 , 30 ) #NEWLINE# plt . savefig ( 'cap.png' ) #NEWLINE#
b . SaveFile ( 'screenshot.png' , wx . BITMAP_TYPE_PNG ) #NEWLINE#
G . add_edges_from ( [ ( 'B' , 'C' ) , ( 'E' , 'F' ) ] , weight = 3 ) #NEWLINE#
return response #NEWLINE#
return [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
s += A [ k ] * B [ k ] #NEWLINE#
time . sleep ( 0.2 ) #NEWLINE#
sys . path . append ( str ( top ) ) #NEWLINE#
self . button . config ( text = 'LED#SPACE#0#SPACE#OFF' ) #NEWLINE#
( 9 , '%d' ) , ( 24 , '%.6d' ) #NEWLINE#
"""Здравствуйте""" #NEWLINE#
plot ( x , y , 'ok' ) #NEWLINE#
lst = [ 1 , 2 ] #NEWLINE#
scaled_data = [ scaler ( x ) for x in data_list ] #NEWLINE#
self . maximize . setIcon ( QtGui . QIcon ( 'img/max2.png' ) ) #NEWLINE#
MainApplication ( root ) . pack ( side = 'top' , fill = 'both' , expand = True ) #NEWLINE#
soup = bs4 . BeautifulSoup ( test , 'html5lib' ) #NEWLINE#
img2 . save ( 'daisy2.png' ) #NEWLINE#
make_square ( 2 ) #NEWLINE#
local . py #NEWLINE#
ax . plot_surface ( X , Y , Z ) #NEWLINE#
split_list = lambda lst : ( lst [ 0 ] , lst [ 1 : ] ) #NEWLINE#
lualib = ctypes . CDLL ( 'libluajit-5.1.so' , mode = ctypes . RTLD_GLOBAL ) #NEWLINE#
_string = Foo ( 'text' ) + 'string' #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
y = np . random . rand ( 2 * n ) #NEWLINE#
print ( 'I#SPACE#got#SPACE#clicked!' ) #NEWLINE#
print ( mimetypes . guess_type ( url ) ) #NEWLINE#
self . loop . run_forever ( ) #NEWLINE#
count = Counter ( map ( tuple , list ( d . values ( ) ) ) ) #NEWLINE#
{ 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : #NEWLINE# 'destroy' } #NEWLINE#
return HttpResponse ( 'Hello#SPACE#World' ) #NEWLINE#
return strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' , value . timetuple ( ) ) #NEWLINE#
setattr ( model , name , request . get ( name ) ) #NEWLINE#
return line . startswith ( 'example' ) or line . startswith ( 'sample' ) #NEWLINE#
arr = np . zeros ( ( 3 , 3 ) ) #NEWLINE#
ma . min ( ) #NEWLINE#
conn = httplib . HTTPConnection ( 'www.python.org' ) #NEWLINE#
time . sleep ( 0 ) #NEWLINE#
self . log ( 'Login#SPACE#failed.' , level = log . CRITICAL ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
class RecipeSerializer ( serializers . ModelSerializer ) : #NEWLINE# #INDENT# ingredients = IngredientSerializer ( many = True ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# model = Recipe #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# def create ( self , validated_data ) : #NEWLINE# #INDENT# ingredients_data = validated_data . pop ( 'ingredients' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# recipe = Recipe . objects . create ( ** validated_data ) #NEWLINE# for ingredient in ingredients_data : #NEWLINE# #INDENT# ingredient , created = Ingredient . objects . get_or_create ( name = ingredient [ #NEWLINE# 'name' ] ) #NEWLINE# recipe . ingredients . add ( ingredient ) #NEWLINE# return recipe #NEWLINE#
a = [ 1 , 2 ] #NEWLINE#
links [ 1 ] . click ( ) #NEWLINE#
p = multiprocessing . Pool ( processes = 1 ) #NEWLINE#
subprocess . call ( 'pdflatex#SPACE#result.tex' ) #NEWLINE#
""",#SPACE#""" . join ( ( '1' , '2' , '3' ) ) #NEWLINE#
print ( base36decode ( 'AQF8AA0006EH' ) ) #NEWLINE#
a = list ( range ( 10 ) ) #NEWLINE#
[ 1 , 2 ] #NEWLINE#
pkg_resources . require ( 'TurboGears>=1.0.5' ) #NEWLINE#
for item in RESULTS : #NEWLINE# #INDENT# wr . writerow ( [ item ] ) #NEWLINE#
client . send ( 'Client#SPACE#sent:#SPACE#' + data ) #NEWLINE#
yield randint ( 1 , 10 ) , randint ( 1 , 100 ) #NEWLINE#
[ [ 'z' , '+' , '2' , '-' , '44' ] , [ '4' , '+' , '55' , '+' , '(' , '(' , 'z' , '+' , '88' , #NEWLINE# ')' , ')' ] ] #NEWLINE#
response . write ( p . body ) #NEWLINE#
del os . environ [ 'MY_THING' ] #NEWLINE#
foo_list . append ( lambda : bar . func2 ( [ 7 , 7 , 7 , 9 ] ) ) #NEWLINE#
B = [ 4126.77552299 , 984.39685939 , 237.92397237 , 497.72447701 , 3377.17916825 ] #NEWLINE#
return a , b #NEWLINE#
p = Pool ( processes = 10 ) #NEWLINE#
L = Label ( root , text = 'What#SPACE#comes#SPACE#in#SPACE#the#SPACE#following' , fg = 'blue' ) #NEWLINE#
return '#SPACE#' . join ( [ s . split ( ) [ - 1 ] ] + s . split ( ) [ : - 1 ] ) #NEWLINE#
( 'some_perm' , 'A#SPACE#name#SPACE#for#SPACE#your#SPACE#default#SPACE#permission' ) , #NEWLINE#
print ( '/' . join ( path_with_value ) ) #NEWLINE#
ax1 . bar3d ( xpos , ypos , zpos , dx , dy , dz , color = '#8E4585' ) #NEWLINE#
sum ( x ** 2 ) #NEWLINE#
patcher . start ( ) #NEWLINE#
sx = sx [ : index ] + str ( int ( math . floor ( float ( sx [ index ] + '.' + sx [ index + 1 ] ) ) ) ) #NEWLINE#
print ( 'other#SPACE#action' ) #NEWLINE#
print ( 'default#SPACE#action' ) #NEWLINE#
ax . xaxis . set_visible ( False ) #NEWLINE#
my_dict = { 'a' : 42 , 'b' : 'my_string' , 'c' : "{'d':#SPACE#33,#SPACE#'e':#SPACE#'another#SPACE#string'}" } #NEWLINE#
print ( len ( itemlist ) ) #NEWLINE#
repr ( ( START - 2 , START - 1 , W0 , W1 , W2 ) ) #NEWLINE#
self . stoptime = 'some#SPACE#date/time' #NEWLINE#
plt . title ( 'Random#SPACE#Gaussian#SPACE#data#SPACE#(fixed#SPACE#bin#SPACE#size)' ) #NEWLINE#
"""{0:<10.10}""" . format ( '123456789034' ) #NEWLINE#
plt . bar ( x , y , color = 'b' , width = 1 , edgecolor = 'none' ) #NEWLINE#
df [ 'Test' ] = df [ [ 'Open' , 'Close' ] ] . max ( axis = 1 ) #NEWLINE# df #NEWLINE#
root . after ( 500 , add_letter ) #NEWLINE#
lines = ( i . strip ( ) for i in text . splitlines ( ) ) #NEWLINE#
l1 = [ ( 'a' , 2 ) , ( 'b' , 3 ) , ( 'z' , 5 ) ] #NEWLINE#
logging . error ( 'TestError' ) #NEWLINE#
df . unstack ( [ 'A' , 'B' ] ) #NEWLINE#
foo ( ) #NEWLINE#
pass #NEWLINE#
"""ls#SPACE#modules/recon/#SPACE#|#SPACE#sed#SPACE#'/.py$/!d;#SPACE#/^__init__.py$/d;#SPACE#s/\\.py$//;#SPACE#s/^/modules\\/recon\\//'""" #NEWLINE#
new_bs = BeautifulSoup ( target_html ) #NEWLINE#
self . deauthorize ( ) #NEWLINE#
print ( indent ( xml_string . encode ( 'utf-8' ) ) ) #NEWLINE#
Story . append ( table ) #NEWLINE#
print ( 'jhash("%s"):#SPACE#%d' % ( hashstr , myhash ) ) #NEWLINE#
session1 . commit ( ) #NEWLINE#
datetime . datetime . now ( ) #NEWLINE#
dir ( f ) #NEWLINE#
DOCKER_OPTS = '-d#SPACE#-H#SPACE#fd://#SPACE#-H#SPACE#tcp://localhost:2375' #NEWLINE#
d = { 'my_label' : pd . Series ( [ 'A' , 'B' , 'A' , 'C' , 'D' , 'D' , 'E' ] ) } #NEWLINE#
webbrowser . open_new ( 'http://www.google.com' ) #NEWLINE#
super ( B , self ) . f ( x ) #NEWLINE#
self . x = 0 #NEWLINE# self . y = 0 #NEWLINE#
print ( image . shape ) #NEWLINE#
[ m . groups ( ) [ 0 ] for m in ( match ( '.*/([\\w+]$)' , item ) for item in input ) if m ] #NEWLINE#
myZipFile = zipfile . ZipFile ( 'zip.zip' , 'w' ) #NEWLINE#
server2 . handle_request ( ) #NEWLINE#
L = [ 'aa' , 'ab' , 'ac' , 'ba' , 'bb' , 'bc' , 'ca' , 'cb' , 'cc' , '10' , '%a' , '#SPACE#b' ] #NEWLINE#
s . strip ( ',' ) #NEWLINE#
'1' + 'Â©' #NEWLINE#
photo = ImageTk . PhotoImage ( image ) #NEWLINE#
self . pubsub = self . client . pubsub ( ) #NEWLINE#
p . fig . text ( 0.33 , - 0.04 , 'Num#SPACE#Points:#SPACE#%d' % len ( g ) , ha = 'left' , fontsize = 15 ) #NEWLINE#
getattr ( object , attrname ) #NEWLINE#
str ( [ ] ) #NEWLINE#
return self . my_text . splitlines ( ) #NEWLINE#
Person . people . authors ( last_name = 'Dahl' ) #NEWLINE#
result [ idx ] = np . abs ( np . dot ( nhat , M [ ( idx ) , : ] ) ) #NEWLINE#
random . sample ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 3 ) #NEWLINE#
self . comboBox_2 . clear ( ) #NEWLINE#
cv . DestroyWindow ( 'Camera#SPACE#1' ) #NEWLINE#
a , b , c , d , x , s = sp . symbols ( 'a#SPACE#b#SPACE#c#SPACE#d#SPACE#x#SPACE#s' ) #NEWLINE#
- 15.7 , 18.0 , 2.4 , - 31.6 , 9.6 , - 37.6 , 15.4 , - 28.8 , 43.6 , - 11.2 , 4.6 , - 10.2 , - 8.8 , 38.2 #NEWLINE#
pysvn . __file__ #NEWLINE#
sys . stderr . write ( 'read#SPACE#%d\n' % ( readsofar , ) ) #NEWLINE#
ax1 . legend ( loc = 2 ) #NEWLINE#
shuffle ( word ) #NEWLINE#
self . name = name #NEWLINE#
pool . map ( processMdb , mdblist ) #NEWLINE#
print ( formatdate ( timestamp , True ) ) #NEWLINE#
a = np . array ( [ 2 , 3 , 2 , 2 , 3 , 3 , 2 , 1 ] ) #NEWLINE#
return '' #NEWLINE#
self . client . connect ( ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
pylab . figure ( ) #NEWLINE#
ax . xaxis . set_minor_formatter ( FixedFormatter ( bin_labels ) ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
time . tzset ( ) #NEWLINE#
seen . add ( line ) #NEWLINE#
msg . set_content ( '[image:#SPACE#{title}]' . format ( title = title ) ) #NEWLINE#
d1 . groupby ( [ 'year' , 'cntry' , 'State' ] ) . size ( ) #NEWLINE#
sys . path . append ( os . path . join ( '..' , 'src' ) ) #NEWLINE#
print ( difft2 ( time ( 20 , 40 , 0 ) , time ( 18 , 41 , 0 ) ) ) #NEWLINE#
pi = Image . fromstring ( 'RGB' , cv . GetSize ( cv_im ) , cv_im . tostring ( ) ) #NEWLINE#
'BACKGROUND' , ( x , 0 ) , ( x , - 1 ) , anObject . color #NEWLINE#
A = numpy . array ( [ [ 1 , 3 , 5 ] , [ 2 , 4 , 6 ] , [ 9 , 8 , 7 ] ] ) #NEWLINE# B = numpy . array ( [ [ 5 , 3 , 5 ] , [ 3 , 5 , 3 ] , [ 5 , 3 , 5 ] ] ) #NEWLINE#
res0 = input . split ( '|' ) #NEWLINE#
wb . close ( ) #NEWLINE#
extend_array ( data , 10 ) #NEWLINE#
def count ( subs , s ) : #NEWLINE# #INDENT# return sum ( s [ i : ] . startswith ( subs ) for i in range ( len ( s ) ) ) #NEWLINE#
theArray = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ] , [ 'g' , 'h' , 'i' ] ] #NEWLINE#
len2 = lambda l : sum ( [ len ( x ) for x in l ] ) #NEWLINE#
root = Tk ( ) #NEWLINE#
print ( 'at#SPACE#the#SPACE#bottom#SPACE#i#SPACE#is' , i ) #NEWLINE#
df [ ~ bad_df ] #NEWLINE#
print ( k , v ) #NEWLINE#
weekdays = [ 'Monday' , 'Tuesday' ] #NEWLINE#
np . array ( rdd . collect ( ) ) . nbytes #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 0 , 2 ] , [ 1 , 2 , 3 ] , [ 0 , 1 , 2 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE#
df [ 'B' ] = df [ 'A' ] . map ( equiv ) #NEWLINE#
start += 1 #NEWLINE#
value = open ( 'thefile' , 'rt' ) . read ( ) #NEWLINE# p . communicate ( value ) #NEWLINE#
x = [ 1 , 2 , 3 ] #NEWLINE#
agg = df . age . groupby ( [ df [ 'movie#SPACE#title' ] ] ) . agg ( { 'ave_age' : 'mean' , 'size' : #NEWLINE# 'size' } ) #NEWLINE#
print ( 'yo' ) #NEWLINE#
print ( 'Accessing#SPACE#one#SPACE#single#SPACE#value#SPACE#(eg.#SPACE#DSPName):#SPACE#{0}' . format ( item . dsp_name ) ) #NEWLINE#
sys . stdout . writelines ( diff ) #NEWLINE#
self . hal_manager . connect_to_signal ( 'DeviceAdded' , self . _filter ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
B . swapaxes ( 1 , 2 ) . reshape ( - 1 , B . shape [ 1 ] * B . shape [ 3 ] ) #NEWLINE#
logger = logging . getLogger ( 'BBProposalGenerator' ) #NEWLINE#
list ( chain . from_iterable ( islice ( theList , * t ) for t in [ ( 4 , 7 ) , ( 12 , 18 ) ] ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
mi = pd . MultiIndex . from_product ( [ [ 'col1' , 'col2' , 'col3' ] , [ 'a' , 'b' ] ] ) #NEWLINE#
a = pd . DataFrame ( { 'a' : np . arange ( 4 ) , 'b' : np . arange ( 1 , 5 ) } ) #NEWLINE#
letter = [ 'a' , 'b' , 'c' ] #NEWLINE#
A = np . array ( [ [ 1 , 1 , 0 , 2 ] , [ 1 , 0 , 0 , 2 ] , [ 1 , 1 , 0 , 2 ] ] ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 1 , 3 ] , [ 4 , 6 ] , [ 5 , 7 ] , [ 8 , 9 ] ] , columns = [ 'A' , 'B' ] ) #NEWLINE#
__init__ . py #NEWLINE#
return os . fdopen ( fd , access ) #NEWLINE#
ax1 . set_xlim ( * np . log10 ( olim ) ) #NEWLINE#
dom = parseString ( '<something><data>I#SPACE#WANT#SPACE#THIS</data></something>' ) #NEWLINE# data = dom . getElementsByTagName ( 'data' ) [ 0 ] . childNodes [ 0 ] . data #NEWLINE#
G . edges ( data = True ) #NEWLINE#
a [ 3 , 0 ] + a [ 3 , 1 ] + a [ 3 , 2 ] + a [ 3 , 4 ] #NEWLINE#
ipdb . runcall ( foo , 1 , 2 ) #NEWLINE#
[ [ '7a' , '8e' , '5d' , 'c3' , '90' , '78' , '1e' , 'ab' , '8d' , 'f2' , 'c0' , '90' , #NEWLINE# 'bf' , '4b' , 'eb' , 'ca' ] , [ 'db' , 'ac' , '0f' , 'ba' , '55' , 'd3' , 'd4' , #NEWLINE# 'fc' , '17' , '71' , '61' , 'bf' , 'e2' , '4d' , 'c7' , 'fb' ] , [ '82' , 'e5' , #NEWLINE# 'a7' , 'a0' , '21' , '19' , '7f' , '6f' , 'be' , '94' , 'a8' , '67' , 'd4' , 'bb' , #NEWLINE# '38' , '95' ] , [ '85' , '05' , '80' , 'c1' , 'ff' , 'ec' , '88' , '7c' , '50' , #NEWLINE# '00' , 'c9' , 'b3' , 'a0' , 'e6' , 'b3' , '9d' ] , [ '15' , '26' , 'af' , '37' , #NEWLINE# 'ce' , '4b' , '0b' , '4e' , '81' , 'f8' , 'af' , '06' , '47' , 'e3' , '71' , '19' ] , #NEWLINE# [ 'ba' , 'b1' , '9c' , '53' , 'fd' , '86' , 'e6' , 'af' , 'c9' , '33' , '27' , '6b' , #NEWLINE# '28' , '6e' , '0c' , '36' ] , [ 'b5' , '2e' , '53' , '00' , '7b' , 'eb' , 'e8' , #NEWLINE# '87' , '7c' , 'e5' , '69' , 'ad' , '24' , '94' , 'dd' , '76' ] , [ '44' , 'fd' , #NEWLINE# '87' , 'e9' , 'b1' , 'a4' , '0a' , '92' , '9a' , 'b6' , '13' , '56' , '65' , 'c2' , #NEWLINE# '2d' , '0f' ] , [ 'a8' , '8e' , '51' , '41' , 'dd' , 'c9' , '9e' , '02' , '07' , #NEWLINE# 'a9' , 'e1' , '44' , 'f4' , '01' , '0a' , '22' ] , [ '58' , 'ff' , '59' , '78' , #NEWLINE# '19' , 'ea' , '0a' , 'a3' , '70' , '24' , 'a1' , 'f1' , 'f8' , '4c' , '52' , '24' ] ] #NEWLINE#
print ( num . contents [ 0 ] ) #NEWLINE#
print ( np . all ( B [ b_to_a ] == A ) ) #NEWLINE#
p . map ( Copier ( target_dir ) , file_list ) #NEWLINE#
file = forms . FileField ( ) #NEWLINE#
map ( lambda x_y : x_y [ 0 ] + x_y [ 1 ] , zip ( repeat ( x ) , y ) ) #NEWLINE#
d = 30 #NEWLINE# hex ( d ) . split ( 'x' ) [ 1 ] #NEWLINE#
print ( '€' , file = sys . stderr ) #NEWLINE#
a [ : ] = [ ( ( x , ) + mapping [ x ] ) for x in b ] #NEWLINE#
ab = np . hstack ( ( a , b ) ) #NEWLINE#
nums = [ int ( n ) for n in x . split ( ) ] #NEWLINE#
p . circle ( xs , ys , color = 'red' , size = 5 , line_alpha = 0 ) #NEWLINE#
c . __bases__ #NEWLINE#
return ( options + [ False ] ) [ current_option == options [ 0 ] ] #NEWLINE#
from functools import reduce #NEWLINE# total = reduce ( lambda x , y : x + int ( y [ 1 ] ) , table , 0 ) #NEWLINE#
window . set_border_width ( 10 ) #NEWLINE#
list ( set ( your_big_list ) ) #NEWLINE#
datetime . time ( 10 , 53 ) #NEWLINE#
L3 = sorted ( int ( x ) for x in L1 ) #NEWLINE#
( conv2 ( a != 0 , [ [ 1 ] * 3 ] ) == 3 ) . sum ( 1 ) #NEWLINE#
ax . set_yticks ( z ) #NEWLINE#
url_match ( '<a#SPACE#href="test">' , 'test' ) #NEWLINE#
self . y2 += self . speed * math . sin ( self . bearing ) #NEWLINE#
[ 'Arts#SPACE#&#SPACE#Entertainment' ] , #NEWLINE#
print ( countries_dict [ 'AS' ] ) #NEWLINE#
list . append ( i ) #NEWLINE#
form . set ( 'color' , True , 0 ) #NEWLINE#
message . attach ( 'invoice.csv' , csvfile . getvalue ( ) , 'text/csv' ) #NEWLINE#
parser . add_argument ( 'a_list' , type = myobj , action = 'append' ) #NEWLINE#
assert hasattr ( o , 'someattribute' ) #NEWLINE#
theIP = re . search ( '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}.\\d{1,3}' , request ) #NEWLINE#
out = np . where ( ~ a_extm [ 1 : - 1 ] & mask [ 1 : - 1 ] , np . nan , a ) #NEWLINE#
numpy . round ( [ 21.5295647 , 8.12531501 , 3.97113829 , 10.077725 ] , 2 ) #NEWLINE# array ( [ 21.53 , 8.13 , 3.97 , 10.08 ] ) #NEWLINE#
df . iloc [ approach1 ( df . A . values , df . B . values ) ] #NEWLINE#
count += 1 #NEWLINE#
self . bar ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
print ( set ( regx . split ( string ) ) & set ( search ) ) #NEWLINE#
sources = soup . findAll ( 'script' , { 'src' : True } ) #NEWLINE#
from functools import reduce #NEWLINE#
scons #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 4 ) , ( 2 , 0 , 3 ) , ( 3 , 4 , 1 ) , ( 4 , 3 , 0 ) #NEWLINE#
if os . access ( 'test' , os . W_OK ) : #NEWLINE# #INDENT# open ( 'test' , 'w' ) . write ( my_data ) #NEWLINE#
[ [ '1' , '2' , '3' , '4' , 'a' ] , [ '1' , '2' , '3' , '4' , 'b' ] , [ '1' , '2' , '3' , '4' , #NEWLINE# 'c' ] , [ '1' , '2' , '3' , '4' , 'd' ] ] #NEWLINE#
con . close ( ) #NEWLINE#
some_function = lambda x : 10 if x == 6 else 1 #NEWLINE#
stdscr . refresh ( ) #NEWLINE#
df1 [ 'Avg_Annual' ] = df1 [ 'Avg_Annual' ] . str . replace ( '$' , '' ) #NEWLINE#
b . load ( ) #NEWLINE#
columns = np . array ( [ 2 , 1 , 3 ] ) #NEWLINE#
train_x , train_y = train_set #NEWLINE#
ax . set_xticks ( [ ] ) #NEWLINE#
out . write ( '' . join ( cleanfile ) ) #NEWLINE#
sb . plt . show ( ) #NEWLINE#
p . map ( mp_worker , ( task1 , task2 ) ) #NEWLINE#
wb . SaveAs ( '<full#SPACE#path#SPACE#of#SPACE#modified#SPACE#spreadsheet>' ) #NEWLINE#
f = getattr ( t , '_fields' , None ) #NEWLINE#
seq = [ [ 1 , 2 ] , [ 1 , 2 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 4 , 5 , 6 ] , [ 1 , 9 ] , [ 1 , 2 , 4 ] ] #NEWLINE#
print ( repr ( str ( row [ 0 ] ) ) ) #NEWLINE#
X = vectorizer . fit_transform ( documents ) #NEWLINE#
ftp . cwd ( '%s' % d ) #NEWLINE#
del l [ n : ] #NEWLINE#
return len ( points ) - ( index + 1 ) #NEWLINE#
f . write ( buffer ( array ) ) #NEWLINE#
return [ convert ( element ) for element in input ] #NEWLINE#
result_code = os . system ( 'C:\\mytest.cmd' ) #NEWLINE# print ( ( 'Result#SPACE#of#SPACE#running#SPACE#mytest#SPACE#was#SPACE#code' , result_code ) ) #NEWLINE#
os . system ( 'adb#SPACE#wait-for-device' ) #NEWLINE#
strip_character . join ( data . split ( strip_character ) [ : 3 ] ) #NEWLINE#
print_full_name ( 'Peter' , 'Venkman' ) #NEWLINE#
func ( * args , ** kwargs ) #NEWLINE#
self . webview . pauseTimers ( ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE# ax . grid ( True ) #NEWLINE#
foo . sort ( key = lambda x : ( x [ 'db_name' ] , x [ 'host' ] ) ) #NEWLINE#
print ( np . where ( df . index == 5 ) [ 0 ] ) #NEWLINE#
a [ 1 ] = 3 #NEWLINE#
l = [ 'z' , 'a' , 'b' , 's' , 'sa' , 'sb' , '' , 'sz' ] #NEWLINE#
VERSION = '0.1' #NEWLINE#
subprocess . Popen ( [ '/usr/bin/python' , 'myfile.py' , '-c' , "'USA'" , '-g' , #NEWLINE# "'CA'" , '-0' , "'2011-10-13'" , '-1' , "'2011-10-27'" ] ) #NEWLINE#
mock_stuff_obj = mock . Mock ( ) #NEWLINE#
list = [ set ( [ 1 , 2 ] ) , set ( [ 3 , 4 ] ) , set ( [ 4 , 5 ] ) , set ( [ 6 , 7 ] ) ] #NEWLINE# set ( [ 2 , 1 ] ) in list #NEWLINE#
x . astype ( '|S9' ) #NEWLINE#
5 * f ( f , 4 ) #NEWLINE#
return [ ( ( x >> shifter ) % 2 ) for x in range ( 2 ** ( K * N ) ) ] #NEWLINE#
zip ( fields , row ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
print ( xpath_ns ( tree , '/root/elem' ) ) #NEWLINE#
difflib . SequenceMatcher ( None , 'never' , 'forever' ) . get_matching_blocks ( ) #NEWLINE#
df [ 'e' ] = df [ col_list ] . sum ( axis = 1 ) #NEWLINE#
print ( df [ ( df [ [ 'dvd' , 'sunroof' , 'warranty' ] ] == 'yes' ) . all ( axis = 1 ) ] ) #NEWLINE#
say_boo_twice ( ) #NEWLINE#
f ( * args , ** kwargs ) #NEWLINE#
rows . append ( row ) #NEWLINE#
response = self . client . get ( url_for ( 'api.my-service' ) , query_string = data ) #NEWLINE#
app . config [ 'DEBUG' ] = True #NEWLINE#
super ( ElectricCar , self ) . __init__ ( model , color , mpg ) #NEWLINE#
run ( host = 'localhost' , port = 8080 ) #NEWLINE#
unittest . main ( failfast = True , testRunner = unittest . TextTestRunner ) #NEWLINE#
from functools import reduce #NEWLINE# reduce ( mul , [ x for x in lst if x != 'X' ] , 1 ) #NEWLINE#
helplines . append ( '#SPACE##SPACE#FOO#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#some#SPACE#description#SPACE#of#SPACE#FOO' ) #NEWLINE#
ax1 = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE#
showsome ( 'ermanno#SPACE#olmi' ) #NEWLINE#
group . add_argument ( '-c' , '--csv' ) #NEWLINE#
group . add_argument ( '-t' , '--txt' ) #NEWLINE#
print ( 'text!' ) #NEWLINE#
new_string = '' #NEWLINE#
outFile . close ( ) #NEWLINE#
print ( sys . getsizeof ( myint ) ) #NEWLINE#
raise ValueError ( 'array#SPACE#not#SPACE#found#SPACE#in#SPACE#list.' ) #NEWLINE#
a = 'hello' #NEWLINE#
print ( 'no#SPACE#more#SPACE#iterating!' ) #NEWLINE#
parse_qs ( 'a_unicode_string=foobar' ) #NEWLINE#
num = int ( s ) #NEWLINE#
PYTHON_CFLAGS = '-I$PY_PREFIX/include/python$PYTHON_VERSION' #NEWLINE#
return df . groupby ( df . date . dt . month ) . apply ( f ) #NEWLINE#
dsp . write ( data ) #NEWLINE#
df = df . sort_values ( by = 'date_of_last_hoorah_given' ) #NEWLINE#
myTurtle . left ( 90 ) #NEWLINE#
itertools . accumulate ( [ 2 , 3 , 5 , 8 , 3 , 5 ] , lambda a , b : a + ( b - a ) * 0.5 ) #NEWLINE#
filemenu . add_command ( label = 'Show#SPACE#Skills' , command = show ) #NEWLINE#
base = datetime . datetime . today ( ) #NEWLINE#
data_tuple = Item ( * raw_data ) #NEWLINE#
widgets = { 'tag' : forms . HiddenInput ( ) } #NEWLINE#
c [ 1 : 2 , 3 : 4 ] #NEWLINE#
np . fromfunction ( lambda i : np . ones_like ( i ) , ( 4 , ) , dtype = int ) #NEWLINE#
import boto #NEWLINE#
pkl_file = open ( 'data.pkl' , 'rb' ) #NEWLINE#
print ( incrementerBy2 ( 3 ) ) #NEWLINE#
ax1 . bar ( x , y , 0.2 ) #NEWLINE#
data = pd . read_json ( '/path/to/file.json' , lines = True ) #NEWLINE#
f = h5py . File ( 'test.hdf5' , 'r' ) #NEWLINE#
f = h5py . File ( 'test.hdf5' , 'w' ) #NEWLINE#
print ( ( 're#SPACE#done#SPACE#in#SPACE#' , time . time ( ) - start ) ) #NEWLINE#
proc = subprocess . Popen ( command , stdout = subprocess . PIPE ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
return { 'cms_pages' : cms_pages } #NEWLINE#
os . mkdir ( self . cache_location ) #NEWLINE#
f = etree . fromstring ( data ) #NEWLINE#
old_array = [ [ 2 , 3 ] , [ 4 , 5 ] ] #NEWLINE#
return 86400.0 * self . days + self . seconds + 1e-06 * self . microseconds #NEWLINE#
pass #NEWLINE#
c = [ ( 'Adi_' + str ( i ) ) for i in a ] #NEWLINE#
blog . save ( ) #NEWLINE#
data . shape #NEWLINE#
list_display = 'id' , 'time_seconds' #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
super ( TestBase , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
assert bare_argspec == decorated_argspec #NEWLINE#
a = [ 1 , [ 2 , 2 , [ 2 ] ] , 4 ] #NEWLINE# list ( flatten ( a ) ) #NEWLINE#
f . seek ( 1073741824 - 1 ) #NEWLINE#
MIDDLEWARE_CLASSES = 'django.middleware.common.CommonMiddleware' , #NEWLINE#
return d [ 'weight' ] , d [ 'factor' ] #NEWLINE#
"""{token_request_uri}?response_type={response_type}&client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}""" #NEWLINE#
"""https://www.googleapis.com/oauth2/v1/userinfo?access_token={accessToken}""" #NEWLINE#
fortnight . loc [ '2010-06-27' ] [ 'data' ] #NEWLINE#
self . connect ( self . listWidgetB , QtCore . SIGNAL ( 'dropped' ) , self . items_dropped ) #NEWLINE#
user . set_password ( 'sahar' ) #NEWLINE#
s = struct . pack ( '>f' , f ) #NEWLINE#
raise ValueError ( "Can't#SPACE#set#SPACE#attribute#SPACE#%r" % name ) #NEWLINE#
paw_number [ 1 : ] += 1 #NEWLINE#
main ( ) #NEWLINE#
def hasIntersection ( a , b ) : #NEWLINE# #INDENT# return not set ( a ) . isdisjoint ( b ) #NEWLINE#
return '' . join ( self ) #NEWLINE#
print ( a , b ) #NEWLINE#
return list ( self . items ( ) ) [ - 1 ] #NEWLINE#
b . append ( [ 1 , 0 , 0 ] ) #NEWLINE#
print ( func ( ) ) #NEWLINE#
sinks . append ( sys . stderr ) #NEWLINE#
f = open ( 'my_file' ) #NEWLINE#
main ( ) #NEWLINE#
window . wm_withdraw ( ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
friend = relationship ( 'User' , foreign_keys = 'Friend.friend_id' ) #NEWLINE#
sys . stdout . write ( line ) #NEWLINE#
console . interact ( ) #NEWLINE#
mocked_zipfile . namlist . return_value = [ 'one.txt' , 'two.txt' ] #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
vec = sparse . coo_matrix ( [ 0 , 1 , 0 , 2 , 0 , 0 , 0 , 3 , 0 , 0 ] ) . tocsr ( ) #NEWLINE#
return [ ( p [ : i ] + [ l [ 0 ] ] + p [ i : ] ) for p in perm ( l [ 1 : ] ) for i in range ( sz ) ] #NEWLINE#
data3 [ 'bins_spd' ] = pd . qcut ( data3 [ 'spd_pct' ] , 5 , labels = False ) #NEWLINE#
email = forms . EmailField ( label = 'Email' ) #NEWLINE#
raise web . notfound ( ) #NEWLINE#
f . seek ( 0 ) #NEWLINE#
urlpatterns = patterns ( '' , url ( '' , include ( 'social.apps.django_app.urls' , #NEWLINE# namespace = 'social' ) ) ) #NEWLINE#
self . _template_args [ 'foo' ] = 'bar' #NEWLINE#
venus . speed ( 0 ) #NEWLINE#
Logfile = codecs . open ( logfile_name , 'w' , encoding = 'utf-8' ) #NEWLINE#
numpy . array ( list ( range ( 25 ) ) ) . reshape ( ( 5 , 5 ) ) #NEWLINE#
self . button . pack ( side = TOP ) #NEWLINE#
bar . update_ticks ( ) #NEWLINE#
q = Question . objects . filter ( criterion1 & criterion2 ) #NEWLINE#
partida = Paragraph ( '1' , styleN ) #NEWLINE#
candidad = Paragraph ( '120' , styleN ) #NEWLINE#
nltk . internals . config_java ( 'C:/Program#SPACE#Files/Java/jdk1.6.0_30/bin/java.exe' ) #NEWLINE#
print ( find_all ( [ 1 , 3 , 5 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) ) #NEWLINE#
print ( '\\n' ) #NEWLINE#
print ( '\\s' ) #NEWLINE#
def ip_address_processor ( request ) : #NEWLINE# #INDENT# return { 'ip_address' : request . META [ 'REMOTE_ADDR' ] } #NEWLINE#
json . dumps ( { 'file_id' : record . file_id , 'filename' : record . filename , #NEWLINE# 'links_to' : record . links_to } ) #NEWLINE#
print ( 'no#SPACE#session' ) #NEWLINE#
setattr ( foo , 'from' , 1204 ) #NEWLINE#
self . layout1 . addWidget ( QLabel ( 'First#SPACE#layout' ) ) #NEWLINE#
if v not in d [ k ] : #NEWLINE# #INDENT# d [ k ] . append ( v ) #NEWLINE#
parser . parse_args ( [ '--arg1' , 'foo' ] ) #NEWLINE#
conn . putrequest ( 'GET' , '/ssltest/' ) #NEWLINE#
max_arity = max ( s , key = lambda i : i . arity ( ) ) #NEWLINE#
url = 'http://httpbin.org/get?token=TOKEN_TO_REPLACE&param2=c' #NEWLINE#
fig = plt . figure ( ) #NEWLINE# line_1 = Line2D ( [ 0 , 1 ] , [ 0 , 4 ] , linewidth = 1 , linestyle = '-' , color = 'green' ) #NEWLINE# line_2 = Line2D ( [ 0 , 4.5 ] , [ 0 , 3 ] , linewidth = 1 , linestyle = '-' , color = 'red' ) #NEWLINE# ax = fig . add_subplot ( 1 , 1 , 1 ) #NEWLINE# ax . add_line ( line_1 ) #NEWLINE# ax . add_line ( line_2 ) #NEWLINE# angle_plot = get_angle_plot ( line_1 , line_2 , 1 ) #NEWLINE# angle_text = get_angle_text ( angle_plot ) #NEWLINE# ax . add_patch ( angle_plot ) #NEWLINE# ax . text ( * angle_text ) #NEWLINE# ax . set_xlim ( 0 , 7 ) #NEWLINE# ax . set_ylim ( 0 , 5 ) #NEWLINE#
self . grid_columnconfigure ( 0 , weight = 1 ) #NEWLINE# self . grid_columnconfigure ( 1 , weight = 1 ) #NEWLINE# self . grid_columnconfigure ( 2 , weight = 1 ) #NEWLINE# self . grid_rowconfigure ( 0 , weight = 1 ) #NEWLINE# self . grid_rowconfigure ( 1 , weight = 1 ) #NEWLINE#
( 'another#SPACE#row' , 'b1' ) , #NEWLINE#
ax . set_xlabel ( 'X#SPACE#axis#SPACE#label' ) #NEWLINE#
main ( ) #NEWLINE#
passthru ( '/usr/bin/python2.7#SPACE#/srv/http/assets/py/switch.py#SPACE#arg1#SPACE#arg2' ) #NEWLINE#
mdate1 = datetime . datetime . strptime ( mdate , '%Y-%m-%d' ) . date ( ) #NEWLINE#
os . kill ( p . pid , signal . SIGKILL ) #NEWLINE#
self . y = [ ] #NEWLINE#
shlex . split ( myStr ) #NEWLINE#
grouped . cumcount ( ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#42' ) #NEWLINE#
DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.postgresql' , 'NAME' : #NEWLINE# 'db_name' , 'USER' : 'db_user' , 'PASSWORD' : 'db_user_password' , 'HOST' : #NEWLINE# '' , 'PORT' : 'db_port_number' } } #NEWLINE#
plt . show ( ) #NEWLINE#
print ( A [ : , ( None ) ] . shape ) #NEWLINE#
[ a [ S ] for S in s if a [ S ] > 0 ] #NEWLINE#
return [ t . get ( ) for t in tasks ] #NEWLINE#
pd . set_option ( 'display.width' , desired_width ) #NEWLINE#
len ( lxml . etree . parse ( 'results.xml' ) . findall ( "//messages/msg[@type='ERROR']" ) ) #NEWLINE#
selfref_list = [ 1 , 2 , 3 ] #NEWLINE#
plt . bar ( x , y , color = 'indianred' , tick_label = label , align = 'center' ) #NEWLINE# plt . show ( ) #NEWLINE#
label . pack ( ) #NEWLINE#
print ( ( 'Argvalues:#SPACE#' , inspect . formatargvalues ( * argvalues ) ) ) #NEWLINE#
df1 = pd . DataFrame ( [ [ 1 , 0 ] , [ 1 , 2 ] , [ 2 , 0 ] , [ 2 , 3 ] ] , columns = [ 'a' , 'b' ] ) #NEWLINE#
list ( range ( 100 ) ) [ : 10 ] #NEWLINE#
a = np . array ( [ 1 , 2 , 3 ] ) #NEWLINE#
[ 1 , 2 , 3 , 0 , 0 ] #NEWLINE#
result = rdd1 . union ( rdd2 ) . union ( rdd3 ) . union ( rdd4 ) #NEWLINE#
Y [ i ] = map ( int , Y [ i ] . strip ( '[]' ) . split ( ',' ) ) #NEWLINE#
show ( ) #NEWLINE#
return '{:>10}' . format ( mat . group ( 1 ) ) #NEWLINE#
print ( 'TESTING' ) #NEWLINE#
print ( value_set [ 1 : - 1 ] ) #NEWLINE#
df . columns = pd . MultiIndex . from_product ( [ [ 1 , 2 ] , [ 'Panning' , 'sec' ] ] ) #NEWLINE#
"""#""" . join ( [ example_string [ a : a + 6 ] for a in range ( 0 , len ( example_string ) , #NEWLINE# 6 ) ] ) #NEWLINE#
print ( ( x , y ) ) #NEWLINE#
adic [ i ] += 1 #NEWLINE#
br . submit ( ) #NEWLINE#
indcs = [ i for i in range ( len ( items ) ) if items [ i ] == item ] #NEWLINE#
the_function_to_call ( ) #NEWLINE#
"""{:.3g}""" . format ( 1.234 ) #NEWLINE#
fsum ( [ 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 ] ) #NEWLINE#
print ( ( x [ idx ] , y [ idx ] ) ) #NEWLINE#
q = q . with_entities ( User . id ) #NEWLINE#
b . grid ( ) #NEWLINE#
combo . setCurrentIndex ( index ) #NEWLINE#
mlab . pipeline . iso_surface ( src , contours = [ s . min ( ) + 0.1 * s . ptp ( ) ] , opacity = 0.3 ) #NEWLINE#
target . close ( ) #NEWLINE#
[ l [ i : i + 2 ] for i in range ( 0 , len ( l ) , 2 ) ] #NEWLINE# [ l [ i : i + 7 ] for i in range ( 0 , len ( l ) , 7 ) ] #NEWLINE#
axColor . yaxis . set_ticks_position ( 'left' ) #NEWLINE#
q . write ( '1...' ) #NEWLINE#
q . write ( '2...' ) #NEWLINE#
df . iloc [ df . index . get_loc ( datetime . datetime ( 2016 , 2 , 2 ) , method = 'nearest' ) ] #NEWLINE#
ax . scatter ( x , y , c = z , s = 100 , edgecolor = '' ) #NEWLINE# plt . show ( ) #NEWLINE#
logger = logging . getLogger ( __name__ ) #NEWLINE#
if message . value [ 0 ] in ( '/' , '\\' ) : #NEWLINE# #INDENT# do_stuff ( ) #NEWLINE#
{ ( 0 ) : [ 1 ] , ( 1 ) : [ 0 , 2 ] , ( 2 ) : [ 1 , 3 ] } #NEWLINE#
setup_mock ( ) #NEWLINE#
df . sort_values ( 'value' ) #NEWLINE#
im = Image . open ( '1.jpg' ) #NEWLINE#
assert obj [ 'a' ] == 1 #NEWLINE#
print ( list ( form . items ( ) ) ) #NEWLINE#
urllib . request . urlopen ( 'http://example.com' ) . read ( ) #NEWLINE#
sleep ( 3 ) #NEWLINE#
ax . scatter ( xx , yy , zz , marker = 'o' , s = 20 , c = 'goldenrod' , alpha = 0.6 ) #NEWLINE#
not any ( not isinstance ( y , int ) for y in [ 1 , 2 , 3 ] ) #NEWLINE# not any ( not isinstance ( y , int ) for y in [ 1 , 'a' , 2 , 3 ] ) #NEWLINE#
return int ( math . pow ( 10 , int ( math . log ( b , 10 ) ) + 1 ) * a + b ) #NEWLINE#
result = Model . objects . filter ( id__in = object_ids ) #NEWLINE#
def get ( self ) : #NEWLINE# #INDENT# self . render ( 'register_page.html' ) #NEWLINE#
tar = tarfile . TarFile ( 'test.tar' , 'w' ) #NEWLINE#
end_date = datetime . datetime ( pub . year , pub . month , pub . day ) #NEWLINE#
main ( ) #NEWLINE#
mypass = 'yo' #NEWLINE#
collections . Counter ( window ( x ) ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 4 , 1 ) , ( 3 , 0 , 4 ) , ( 4 , 3 , 0 ) #NEWLINE#
ui . syn ( ) #NEWLINE#
re_pattern = re . compile ( '\\dregex+' , re . DOTALL ) #NEWLINE#
print ( soup . prettify ( ) ) #NEWLINE#
plt . imshow ( first_subreg , cmap = 'Paired' , vmin = 0 , vmax = n_regions ) #NEWLINE#
co . co_nlocals , co . co_stacksize , co . co_flags #NEWLINE#
"""Dear#SPACE#Student,#SPACE#<br>#SPACE#Please#SPACE#send#SPACE#your#SPACE#report<br>#SPACE#Thank#SPACE#you#SPACE#for#SPACE#your#SPACE#attention""" #NEWLINE#
axes [ 1 ] . legend ( ) . set_visible ( False ) #NEWLINE#
to_delete . append ( ( corpus . index ( match ) , len ( match ) ) ) #NEWLINE#
ax . plot ( dates , zaxisvalues1 , lowerLimits , color = 'b' ) #NEWLINE#
df [ 'col2' ] = df [ 'col' ] #NEWLINE#
plt . setp ( ax1 . get_xticklabels ( ) , visible = False ) #NEWLINE#
list = [ [ 'hate' , '10' ] , [ 'would' , '5' ] , [ 'hello' , '10' ] , [ 'pigeon' , '1' ] , [ #NEWLINE# 'adore' , '10' ] ] #NEWLINE# new_dict = dict ( list ) #NEWLINE#
print ( 'Hello#SPACE#' , sys . argv [ 1 ] ) #NEWLINE#
with open ( 'path/to/input/file' , 'w' ) as outfile : #NEWLINE# #INDENT# for line in lines : #NEWLINE# #INDENT# #INDENT# outfile . write ( line ) #NEWLINE#
[ ( lambda splt : ( splt [ 0 ] , splt [ 1 ] ) ) ( s . split ( ) ) for s in input ] #NEWLINE#
ax . w_zaxis . set_major_formatter ( niceMathTextForm ) #NEWLINE#
print ( '%s#SPACE#%s#SPACE#=#SPACE#%s' % ( item . enum , entry . name , entry . value ) ) #NEWLINE#
[ 'ABCDE' , 'FGHIJKLMNOCDEFGZYPE' ] #NEWLINE#
c . setFont ( 'TestFont' ) #NEWLINE#
ii = df . groupby ( 'color' ) [ 'experiment' ] . transform ( 'idxmin' ) #NEWLINE#
df = DataFrame ( np . random . randn ( 5 , 2 ) , columns = [ 'A' , 'B' ] ) #NEWLINE#
super ( OverrideTests , self ) . __init__ ( ) #NEWLINE#
l = [ 'a' , 'ab' , 'abc' , 'bac' ] #NEWLINE# [ x for x in l if 'ab' in x ] #NEWLINE#
dts = pd . date_range ( start = '2015-01-15' , periods = 20 ) #NEWLINE#
printf ( '\nint\n' ) #NEWLINE#
df = pd . DataFrame ( ) #NEWLINE#
d1 = { ( 1 ) : 1 , ( 2 ) : 2 } #NEWLINE#
g . add_edge ( 1 , 7 ) #NEWLINE#
print ( 'valid' ) #NEWLINE#
x = Decimal ( 2606.895 ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
document = ET . Element ( 'outer' ) #NEWLINE#
mydf . rename ( columns = { ( 0 ) : 'frequency' } , inplace = True ) #NEWLINE#
a = 1 #NEWLINE#
obj . save ( ) #NEWLINE#
sys . stdout . write ( '[u]' ) #NEWLINE#
sys . stdout . write ( '[#SPACE#]' ) #NEWLINE#
self . ax . imshow ( im ) #NEWLINE#
l . sort ( key = lambda t : ( t [ 0 ] , - ord ( t [ 1 ] ) ) ) #NEWLINE#
results = Orchard . objects . filter ( ** options ) #NEWLINE#
config . get ( 'one' , 'key' ) , config . get ( 'one' , 'key2' ) #NEWLINE#
f = logging . Formatter ( 'TagName:#SPACE#%(message)s' ) #NEWLINE#
d [ x ] [ y ] = z #NEWLINE#
r = s . post ( URL2 , data = 'username#SPACE#and#SPACE#password#SPACE#data#SPACE#payload' ) #NEWLINE#
time . sleep ( 0.25 ) #NEWLINE#
return self . listofrecords [ listnum ] [ record ] #NEWLINE#
ax . plot_date ( df2 . date , df2 [ 'count' ] , color = 'red' , label = 'B' , linestyle = '-' ) #NEWLINE#
return nil #NEWLINE#
logger = logging . getLogger ( '' ) #NEWLINE#
import sys #NEWLINE# sys . intern ( 'S#SPACE#NP#SPACE#VP' ) is sys . intern ( '#SPACE#' . join ( 'S' , 'NP' , 'VP' ) ) #NEWLINE#
u_alice = db . session . query ( User ) . filter ( User . name == 'Alice' ) . one ( ) #NEWLINE#
do_something_with_results ( resuls ) #NEWLINE#
[ ( i , t ) for i , t in enumerate ( values ) if len ( t ) != 3 ] #NEWLINE#
soup = BeautifulSoup . BeautifulSoup ( txt ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
foo = Image . open ( 'path\\to\\image.jpg' ) #NEWLINE#
table_data = [ line . split ( ',' ) for line in f ] #NEWLINE#
"""Agh#$%#%2341-#SPACE#-!zdrkfd""" . translate ( None , delete_table ) #NEWLINE#
gtk . main_quit ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
foo ( "I'm#SPACE#passing#SPACE#this#SPACE#string#SPACE#literal#SPACE#to#SPACE#a#SPACE#function" ) #NEWLINE#
db . init_app ( app ) #NEWLINE#
random . shuffle ( lst ) #NEWLINE#
AudioSegment . from_file ( '/input/file' ) . export ( '/output/file' , format = 'mp3' ) #NEWLINE#
fh . seek ( 0 ) #NEWLINE#
d = { 'key1' : 1 , 'key2' : 2 , 'key3' : 3 , 'key4' : 4 , 'key5' : 5 } #NEWLINE#
[ [ d . get ( str ( y ) ) for y in x ] for x in A ] #NEWLINE#
return newmethod ( obj , node , ** kwargs ) #NEWLINE#
current_date += datetime . timedelta ( days = 1 ) #NEWLINE#
set ( b . items ( ) ) - set ( a . items ( ) ) #NEWLINE#
a = [ ( item + 1 ) for item in a ] #NEWLINE#
conn = mysql . connector . connect ( ** config ) #NEWLINE#
return '_1DCoord(%i)' % self . i #NEWLINE#
print_a ( ) #NEWLINE#
result = [ s for s in string . split ( 'a' ) if s ] #NEWLINE#
l = [ x . split ( '\t' ) [ - 1 ] for x in l ] #NEWLINE#
request . setRawHeader ( 'Accept-Language' , 'en-us,en;q=0.5' ) #NEWLINE#
b . visit ( 'http://www.google.com' ) #NEWLINE#
return set ( word_list ) . intersection ( a_string . split ( ) ) #NEWLINE#
d [ 'dict4' ] = { } #NEWLINE#
lst = [ 'Stem' , 'constitute' , 'Sedge' , 'Eflux' , 'Whim' , 'Intrigue' ] #NEWLINE# sorted ( lst ) #NEWLINE#
print ( '×©×\x9c×\x95×\x9d#SPACE#×¢×\x95×\x9c×\x9d' ) #NEWLINE#
time_list [ np . arange ( 5 , 6 ) ] #NEWLINE#
df = pd . DataFrame ( { 'numeric' : [ 1 , 2 , 3 ] , 'not_numeric' : [ 'A' , 'B' , 'C' ] } ) #NEWLINE#
Surname = Dinh #NEWLINE#
dataf = dataf . append ( new_row , ignore_index = True ) #NEWLINE#
list_b = [ 'some_other_function' , 'results' ] #NEWLINE#
celery = Celery ( 'task' , broker = 'redis://127.0.0.1:6379' ) #NEWLINE# celery . config_from_object ( celeryconfig ) #NEWLINE#
array ( [ 0.15 , 0.29 , 0.43 , 0.48 , 0.56 , 0.64 , 0.71 , 0.75 , 0.92 , 1.0 ] ) #NEWLINE#
repr ( ( START - 1 , W - 1 , W0 , W1 , W2 ) ) #NEWLINE#
table = Orange . data . Table ( df . as_matrix ( ) ) #NEWLINE#
form = StopAdminForm #NEWLINE#
"""(temp1:)\\s+(\\+|-)(\\d+\\.\\d+)°C\\s+\\(crit\\s+=\\s+(\\+|-)(\\d+\\.\\d+)°C\\).*""" #NEWLINE#
self . button = QtGui . QPushButton ( 'Test' , self ) #NEWLINE#
L = [ 1 , 'term1' , 3 , 'term2' , 4 , 'term3' , 5 , 'termN' ] #NEWLINE#
ls [ 3 ] = int ( ls [ 3 ] ) #NEWLINE#
if all ( x in combination for x in ( 1 , 2 , 3 ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
paralell_notifications ( new_rss ) #NEWLINE#
headers [ 'Content-length' ] = str ( len ( bytes ( body , 'utf-8' ) ) ) #NEWLINE#
Example ( root ) . pack ( fill = 'both' , expand = True ) #NEWLINE#
FOUT . write ( line ( 'b' , 3 ) ) #NEWLINE#
[ 0 , 0 , 1 , 1 , 0 , 0 , 0 ] #NEWLINE#
np . percentile ( S , np . array ( [ 0 , 100 ] ) ) #NEWLINE#
df . where ( col ( 'v' ) . isin ( [ 'foo' , 'bar' ] ) ) . count ( ) #NEWLINE#
positions = { ( 0 ) : 0 , ( 1 ) : 1 , ( 2 ) : 2 , ( 3 ) : 3 , ( 9 ) : 4 } #NEWLINE#
[ [ 'A' , 'S' , 'D' , ';' , '!' , '^' , 'F' , 'F' , 'F' , ';' , '!' ] ] #NEWLINE#
mylist = [ 'important' , 'comment' ] #NEWLINE#
followers_df . index = list ( range ( len ( followers_df ) ) ) #NEWLINE#
items [ pos ] , items [ index ] = items [ index ] , items [ pos ] #NEWLINE#
print ( g ( 1 ) ) #NEWLINE#
multiples = { } #NEWLINE# for n in numbers : #NEWLINE# #INDENT# multiples [ n ] = [ ] #NEWLINE# for x in numbers : #NEWLINE# #INDENT# for y in numbers : #NEWLINE# #INDENT# #INDENT# if x != y and y % x == 0 : #NEWLINE# #INDENT# #INDENT# #INDENT# multiples [ x ] . append ( y ) #NEWLINE# for x in numbers : #NEWLINE# #INDENT# for y in multiples [ x ] : #NEWLINE# #INDENT# #INDENT# for z in multiples [ y ] : #NEWLINE# #INDENT# #INDENT# #INDENT# pass #NEWLINE#
[ 'arun' , 'maya' ] , #NEWLINE#
pass #NEWLINE#
print ( now . year ) #NEWLINE#
"""""" . join ( BeautifulSoup ( str ( site [ 0 ] . extract ( ) ) ) . findAll ( text = True ) ) #NEWLINE#
self . assertAlmostEqual ( trellis [ 1 ] [ 20 ] , 6.77837e-09 , 14 ) #NEWLINE#
"""accented#SPACE#string#SPACE#i.e.#SPACE#sāo#SPACE#paulo""" . decode ( 'utf-8' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
my_dict = { key : set ( value ) for key , value in list ( my_dict . items ( ) ) } #NEWLINE# [ key for item in lst for key , value in list ( my_dict . items ( ) ) if item in value ] #NEWLINE#
timeit ( 'for#SPACE#i#SPACE#in#SPACE#range(1000):#SPACE#bin(i)[2:]' , number = 1000 ) #NEWLINE#
item . setForeground ( QtGui . QColor ( 'red' ) ) #NEWLINE#
IMAP4 . store ( num , '+FLAGS' , '\\Flagged' ) #NEWLINE#
print ( list ( seach_replace ( message , codes ) ) ) #NEWLINE#
a , b = b , a + b #NEWLINE#
plt . show ( block = False ) #NEWLINE#
raw_img = urllib . request . urlopen ( req ) . read ( ) #NEWLINE#
zf = zipfile . ZipFile ( src ) #NEWLINE#
sftp . get ( log_file , local_name ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
return np . zeros_like ( x , dtype = bool ) | initial #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
sheet1 = book . sheet_by_index ( 0 ) #NEWLINE#
request . json #NEWLINE#
np . array ( [ [ [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] , [ [ 9 , 10 , 11 , 12 ] , [ 13 , 14 , 15 , 16 ] ] ] ] #NEWLINE# ) . reshape ( ( 4 , 4 ) ) #NEWLINE#
ax . plot ( [ 1 , 2 , 3 ] ) #NEWLINE#
df = df . set_index ( [ 'A' , 'B' , 'Date' ] ) #NEWLINE#
vendor . add ( 'lib' ) #NEWLINE#
letters [ letter ] += 1 #NEWLINE#
exit_status = subprocess . call ( [ 'wc' , '-l' ] , stdin = sort . stdout ) #NEWLINE#
df . columns = [ 'grp' , 'val' ] #NEWLINE#
f = open ( 'bigFile' ) #NEWLINE#
plot3 = plt . plot ( result , mlab . normpdf ( result , m1 , std1 ) , 'o' ) #NEWLINE#
f . grid ( row = 2 , column = 0 , columnspan = 8 , rowspan = 10 , pady = 30 , padx = 30 ) #NEWLINE#
a = np . array ( [ 1 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
bpfilename = sys . argv [ 0 ] #NEWLINE#
e = Example ( 10 ) #NEWLINE#
out_file . close ( ) #NEWLINE#
for i in range ( 1 , 8 ) : #NEWLINE# #INDENT# if i >= 5 : #NEWLINE# #INDENT# #INDENT# break #NEWLINE#
print ( set ( better_d ) ) #NEWLINE#
raise RuntimeError ( 'Using#SPACE#this#SPACE#on#SPACE#non-sysfs#SPACE#files#SPACE#is#SPACE#dangerous!' ) #NEWLINE#
shutil . copy2 ( pathname , dstdir ) #NEWLINE#
ln . set_ydata ( data ) #NEWLINE#
STATICFILES_DIRS = os . path . join ( BASE_DIR , 'static' ) , #NEWLINE#
my_regex = '\\b(?=\\w)' + re . escape ( TEXTO ) + '\\b(?!\\w)' #NEWLINE#
a , b , c , d , e = a #NEWLINE#
next . click ( ) #NEWLINE#
strings = { s [ : 5 ] : s [ 5 : ] for s in x } #NEWLINE#
data = np . loadtxt ( fileinput . input ( glob . glob ( '*.dat' ) ) ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
grayimg = cv2 . equalizeHist ( grayimg ) #NEWLINE#
return sqrt ( res ) #NEWLINE#
ax2 . set_yscale ( 'log' ) #NEWLINE#
print ( '%s' % var ) #NEWLINE#
pattern = re . compile ( '(?<!\\{)\\{(?!\\{).*?(?<!\\})\\}(?!\\})' ) #NEWLINE# pattern . sub ( 'hello' , input_string ) #NEWLINE#
dict_list = zip ( list1 , list2 ) #NEWLINE# dict ( dict_list ) #NEWLINE#
"""the#SPACE#above#SPACE#literal#SPACE#is#SPACE#irrelevant,#SPACE#but#SPACE#this#SPACE#one#SPACE#can#SPACE#be#SPACE#still#SPACE#MORE#SPACE#IRRELEVANT""" #NEWLINE#
mlist . append ( datetime ( y , m + 1 , 1 ) . strftime ( '%b-%y' ) ) #NEWLINE#
f ( ) #NEWLINE#
mvv_count = [ int ( i . _count ) for i in mvv_list . collect ( ) ] #NEWLINE#
list2 = [ [ '1' , '2' , '3' ] , [ '4' , '5' , '6' ] , [ '7' , '8' ] ] #NEWLINE#
return sum ( count [ letter ] for letter in valid_letters ) #NEWLINE#
drg = pd . date_range ( '2000-07-31' , '2015-08-05' , freq = 'B' ) #NEWLINE#
nextelem = li [ ( idx + 1 ) % len ( li ) ] #NEWLINE#
a = np . array ( [ [ 0 , 1 , 1 , 0 ] , [ 1 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 ] , [ 0 , 1 , 1 , 0 ] ] ) #NEWLINE#
timeit . timeit ( 'sum(d#SPACE#*#SPACE#10**i#SPACE#for#SPACE#i,#SPACE#d#SPACE#in#SPACE#enumerate(x[::-1]))' , 'x=[1,3,5,7]' ) #NEWLINE#
print ( ( 'show2:' , self . geometry ( ) ) ) #NEWLINE#
return fib ( n - 1 ) + fib ( n - 2 ) #NEWLINE#
tuple ( line [ 0 : 3 ] + [ line [ 3 ] [ : 1 ] ] + [ line [ 3 ] [ 1 : ] ] ) #NEWLINE#
raise RuntimeError ( 'This#SPACE#function#SPACE#is#SPACE#only#SPACE#implemented#SPACE#on#SPACE#Windows.' ) #NEWLINE#
sys . setdefaultencoding ( 'utf-8' ) #NEWLINE#
ndx = numpy . searchsorted ( xs , ys ) #NEWLINE#
self . file . write ( data ) #NEWLINE#
value_index = my_list . index ( value ) #NEWLINE#
wood = next ( itertools . count ( ) ) #NEWLINE#
f = open ( 'store.pckl' , 'rb' ) #NEWLINE#
finfo = np . finfo ( f ) #NEWLINE#
d1 = datetime . strptime ( '2010-01-01#SPACE#16:31:22' , fmt ) #NEWLINE#
setup ( name = 'mypackage' , version = '0.1' , packages = find_packages ( ) ) #NEWLINE#
sys . exit ( a . exec_ ( ) ) #NEWLINE#
v [ 0 ] += 1 #NEWLINE#
{ 'type' : 'broadcast' , 'msg' : 'your_message' } #NEWLINE#
plt . show ( ) #NEWLINE#
"""True#SPACE#if#SPACE#the#SPACE#key#SPACE#is#SPACE#in#SPACE#the#SPACE#info#SPACE#axis""" #NEWLINE#
indices_to_add = np . array ( [ 2 , 0 ] ) #NEWLINE#
set ( [ 1 , 2 ] ) in a #NEWLINE#
plt . figure ( 1 ) #NEWLINE#
from sqlalchemy . sql . expression import bindparam #NEWLINE#
f = open ( 'file_' + repr ( i ) + '.dat' , 'w' ) #NEWLINE#
plt . show ( ) #NEWLINE#
[ i for i , val in enumerate ( lst ) if val == '\n' ] #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
burroughs_wheeler . test ( 10000 ) #NEWLINE#
ws . add_image ( img ) #NEWLINE# wb . save ( 'out.xlsx' ) #NEWLINE#
pickle . dump ( { ( 1 ) : 2 } , f ) #NEWLINE#
print ( cls . foo_string ) #NEWLINE#
l = [ 'i' , 'i' , 'am' , 'am' , 'am' , 'test' ] #NEWLINE# list ( set ( [ ( a , l . count ( a ) ) for a in l ] ) ) #NEWLINE#
gc . get_referrers ( obj ) #NEWLINE#
db . m . find ( { 'subitems.subitem_id' : a } ) #NEWLINE#
print ( yaml . dump ( doc , indent = 4 ) ) #NEWLINE#
return self . __getitem__ ( key ) #NEWLINE#
return super ( ) . _save ( name , content ) #NEWLINE#
nxn = np . arange ( n ** 2 ) . reshape ( n , - 1 ) #NEWLINE#
print ( line ) #NEWLINE#
df [ 'start' ] = pd . to_datetime ( df [ 'start' ] ) #NEWLINE#
[ [ a [ i - j ] for i in range ( n ) ] for j in range ( n , 0 , - 1 ) ] #NEWLINE#
transactions [ 'exec_price' ] = transactions [ 'exec_price' ] . astype ( float ) #NEWLINE#
from win32com . client import Dispatch #NEWLINE#
post_data [ 'captcha_1' ] = 'PASSED' #NEWLINE#
app . exec_ ( ) #NEWLINE#
x = np . random . normal ( 0 , 0.5 , num - 3 ) #NEWLINE#
bitmask = windll . kernel32 . GetLogicalDrives ( ) #NEWLINE#
d [ 'className' ] = 'MyCPlusPlusClassName' #NEWLINE#
key = 'somekey' #NEWLINE# a . setdefault ( key , [ ] ) #NEWLINE# a [ key ] . append ( 1 ) #NEWLINE#
urllib . request . urlopen ( 'http://www.google.com' ) #NEWLINE#
df = pd . DataFrame ( { 'A' : a , 'B' : b } , index = [ 0 ] ) #NEWLINE#
time . sleep ( 1.0 ) #NEWLINE#
plt . xticks ( list ( range ( len ( D ) ) ) , list ( D . keys ( ) ) ) #NEWLINE#
browser . open ( 'http://www.example.com' ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 0 , 3 ) , ( 2 , 4 , 1 ) , ( 3 , 2 , 4 ) , ( 4 , 3 , 0 ) #NEWLINE#
[ '.' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , '.' ] , #NEWLINE#
savefig ( 'test.pdf' ) #NEWLINE#
cmd = '$pyscript#SPACE#$python' #NEWLINE#
mylist = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
s . close ( ) #NEWLINE#
pickle . dump ( foo , f ) #NEWLINE#
yourmodel . objects . filter ( location__dwithin = ( geom , 0.02 ) ) #NEWLINE#
w = '</sub>' . join ( w . partition ( '$' ) [ : : 2 ] ) #NEWLINE#
all ( c == s0 for c in s [ 1 : ] ) #NEWLINE#
parser = optparse . OptionParser ( epilog = 'otherstuff' ) #NEWLINE#
myBigList [ numpy . array ( [ 87 , 342 , 217 , 998 , 500 ] ) ] #NEWLINE#
tests = [ 'a' , 'A' , 'a1' , 'a_1' , '1a' , '_a' , 'a\n' , '' , 'z_' ] #NEWLINE#
socket_patched . original_function ( 'foo' , 'bar' ) #NEWLINE#
print ( p . findall ( 'a[b[c]d]e' ) ) #NEWLINE#
temp_array = np . arange ( 10 , 129 , 10 ) #NEWLINE#
hov . perform ( ) #NEWLINE#
print ( getpass . getuser ( ) ) #NEWLINE#
open ( fname . lower ( ) ) #NEWLINE#
next ( alternator ) #NEWLINE#
json_str = json . dumps ( status . _json ) #NEWLINE#
soup . h3 . text #NEWLINE#
scipy . misc . imshow ( img ) #NEWLINE#
return ( x + y ) * z #NEWLINE#
print ( map ( sum , zip ( flattend1 , flattend2 ) ) ) #NEWLINE#
d . stack ( ) . groupby ( arange ( 4 ) ) #NEWLINE#
np . may_share_memory ( get_sliding_window ( df , 2 ) , df . values ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
'c' , 'b' , 'a' #NEWLINE#
a = b #NEWLINE#
command in { 'print' , 'install' , 'remove' } #NEWLINE#
cursor . close ( ) #NEWLINE# connection . close ( ) #NEWLINE#
thread . start ( ) #NEWLINE#
plt . bar ( freq_frame . index , freq_frame [ 'Heights' ] , width = 3 , align = 'center' ) #NEWLINE#
ax1 . plot ( list ( range ( 10 ) ) ) #NEWLINE#
return self . city_set . filter ( is_capital = True ) #NEWLINE#
return datetime . datetime . combine ( dt . date ( ) , midnight ) #NEWLINE#
numpy . savetxt ( 'output.dat' , my_array [ ( numpy . newaxis ) , : ] , fmt = '%f#SPACE#%i' * 4 ) #NEWLINE#
soup = bs4 . BeautifulSoup ( html , 'html.parser' ) #NEWLINE#
x = mungesomedict ( dict ( adict , ** anotherdict ) ) #NEWLINE#
[ x for x in first_list if x not in secnd_list ] + [ x for x in secnd_list if #NEWLINE# x not in first_list ] #NEWLINE#
date = eval ( input ( 'Date#SPACE#(mm/dd/yyyy):#SPACE#' ) ) #NEWLINE#
return '' . join ( digits ) #NEWLINE#
a . name #NEWLINE#
functions [ 'One' ] ( ) #NEWLINE#
Xs = numpy . vstack ( ( Xs , EMOV_n ) ) #NEWLINE#
figure . set_size_inches ( 8 , 6 ) #NEWLINE# plt . savefig ( 'myplot.png' , dpi = 100 ) #NEWLINE#
foo = [ 'foo#SPACE#bar\n' , 'baz\n' , 'bar#SPACE#baz#SPACE#waz\n' , '#SPACE##SPACE##SPACE#\n' ] #NEWLINE#
counter_list [ : ] = ( c for c in counter_list if c ) #NEWLINE#
print ( query . explain ( ) ) #NEWLINE#
response . meta [ 'solved_catpcha' ] = solved #NEWLINE#
df . index = df . index . map ( str ) #NEWLINE#
df1 [ 'val' ] = df2 . set_index ( [ 'c1' , 'c2' ] ) [ 'val' ] . combine_first ( df1 . set_index #NEWLINE# ( [ 'c1' , 'c2' ] ) [ 'val' ] ) . values #NEWLINE#
plt . show ( ) #NEWLINE#
self . item ( item , tags = ( 'tristate' , ) ) #NEWLINE#
self . item ( item , tags = ( 'unchecked' , ) ) #NEWLINE#
plt . plot ( [ 0 , 2.3 , 2.3 , 5 ] , [ 0 , 0 , 1 , 1 ] ) #NEWLINE#
import numpy as np #NEWLINE#
user = int ( input ( 'guess:#SPACE#' ) ) #NEWLINE#
items . append ( values ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
plt . plot ( x , x ) #NEWLINE#
print ( Duck ( ) . speak ( ) ) #NEWLINE#
return replacer_regex . sub ( lambda m : dict [ m . group ( 1 ) ] , regex ) #NEWLINE#
self . _data_unoccupied . wait ( 5 ) #NEWLINE#
reader = csv . reader ( f , 'spacedelimitedfixedwidth' ) #NEWLINE#
events = service . events ( ) . list ( calendarId = '<your_email_here>' ) . execute ( ) #NEWLINE#
ids = Employee . objects . filter ( company = 'Private' ) . values_list ( 'id' , flat = True ) #NEWLINE#
set ( x ) - set ( z ) #NEWLINE#
datetime . date ( 2016 , 8 , 26 ) , #NEWLINE#
max ( frequencies , key = counts . get ( ) ) #NEWLINE#
self . connect_event ( 'button_release_event' , self . _update ) #NEWLINE#
self . connect_event ( 'motion_notify_event' , self . _update ) #NEWLINE#
reader = csv . reader ( f , skipinitialspace = True ) #NEWLINE#
parser . feed ( data ) #NEWLINE#
f . write ( c ) #NEWLINE#
pool = mp . Pool ( 8 ) #NEWLINE#
stdin , stdout , stderr = client . exec_command ( 'program' ) #NEWLINE#
r . content #NEWLINE#
items = xml . getElementsByTagName ( 'item' ) #NEWLINE#
lexer . begin ( 'subquery' ) #NEWLINE#
a , b , c = [ int ( i ) for i in line . split ( ) ] #NEWLINE#
return 3735928559 #NEWLINE#
result = '\n' . join ( lines ) #NEWLINE#
next ( d for i , d in enumerate ( lod ) if 1 in d ) #NEWLINE#
pattern = re . compile ( "[^\\w']" ) #NEWLINE#
x , y , z = np . random . random ( ( 3 , 10 ) ) #NEWLINE#
plt . axes ( ) . set_aspect ( 'equal' , 'datalim' ) #NEWLINE#
log . append ( ( name , attr ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
print ( bookmarks_info ) #NEWLINE#
dt = datetime . now ( ) #NEWLINE#
data = [ [ 0 , 1 , 2 ] , [ 3 , 4 , 5 ] , [ 6 , 7 , 8 ] ] #NEWLINE# [ y for y in x for x in data ] #NEWLINE#
plt . savefig ( __file__ + '.png' ) #NEWLINE#
model . docvecs [ 1 ] #NEWLINE#
ndimage . map_coordinates ( data , [ zi , yi , xi ] , mode = 'nearest' ) #NEWLINE#
self . resetoutput ( ) #NEWLINE#
p = multiprocessing . Process ( target = worker , args = ( q , nameStr ) ) #NEWLINE#
print ( poland [ key ] [ 'lst' ] ) #NEWLINE#
run - the - app #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
newcontents = newcontents . replace ( 's' , '3' ) #NEWLINE#
df = pd . DataFrame ( { 'Data' : np . random . normal ( size = 200 ) } ) #NEWLINE#
print ( 'Yes#SPACE#an#SPACE#integer!' ) #NEWLINE#
prevday . strftime ( '%Y_%m_%d' ) #NEWLINE#
[ { 'tid' : 2 , 'c1' : 4 , 'id' : '111' , 't' : 1 , 'gtm' : 3 } , { 'gtm' : 3 , 't' : 1 , #NEWLINE# 'tid' : 2 , 'c2' : 5 , 'c1' : 4 , 'id' : '333' } ] #NEWLINE#
print ( args ) #NEWLINE#
info [ 2 ] [ 0 ] == 5 #NEWLINE#
plt . axis ( 'tight' ) #NEWLINE#
super ( C , self ) . method ( arg ) #NEWLINE#
[ li [ i : j ] for i , j in zip ( inds , inds [ 1 : ] ) ] #NEWLINE#
br . open ( 'http://pypi.python.org/pypi' ) #NEWLINE#
params = urllib . parse . urlencode ( { 'spam' : 1 , 'eggs' : 2 , 'bacon' : 0 } ) #NEWLINE#
print ( 'Error' , error ) #NEWLINE#
print ( repr ( s ) ) #NEWLINE#
subprofile = form . cleaned_data [ 'subprofile' ] #NEWLINE#
with open ( 'Jfile.txt' , 'w' ) as myfile : #NEWLINE# #INDENT# pass #NEWLINE#
l = [ [ 1 , 2 ] , [ 3 , 4 ] ] #NEWLINE#
self . stdout_sock . close ( ) #NEWLINE#
data [ int ( i ) , int ( j ) ] += 1 #NEWLINE#
print ( tree . text_content ( ) . strip ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#foo#SPACE#VALUES#SPACE#(%s,#SPACE#%s)' , ( 1 , 2 ) ) #NEWLINE#
listOfLambdas = [ ( lambda i = i : i * i ) for i in range ( 6 ) ] #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) #NEWLINE# b = a . ravel ( ) #NEWLINE# b #NEWLINE#
temp . iloc [ [ 0 , 1 , 4 ] ] . index #NEWLINE#
logging . Formatter . __init__ ( self , fmt ) #NEWLINE#
html_page = urllib . request . urlopen ( 'http://www.yourwebsite.com' ) #NEWLINE#
self . window . add ( self . box ) #NEWLINE#
A = [ 6 , 7 , 8 , 9 , 10 , 11 , 12 ] #NEWLINE#
a = np . empty ( ( 1 , ) , dtype = np . object ) #NEWLINE# a [ 0 ] = c #NEWLINE#
from functools import reduce #NEWLINE# #NEWLINE# #NEWLINE# def product ( iterable ) : #NEWLINE# #INDENT# return reduce ( operator . mul , iterable , 1 ) #NEWLINE#
gx = np . zeros_like ( f ) #NEWLINE#
env . user = 'root' #NEWLINE#
linearmodel ( X , Y , Z ) #NEWLINE#
grades . append ( lists [ i ] . split ( ',' ) ) #NEWLINE#
super ( Shopping , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return True #NEWLINE#
"""D:/bar/クレイジー・ヒッツ！/foo.abc""" #NEWLINE#
return app #NEWLINE#
test ( ) #NEWLINE#
w = QtGui . QMainWindow ( ) #NEWLINE#
return _quicksort ( array , begin , end ) #NEWLINE#
p . parse ( 'December#SPACE#15th' ) #NEWLINE#
np . random . seed ( seed ) #NEWLINE#
f = codecs . open ( 'emoji.txt' , 'w+' , encoding = 'utf-8' ) #NEWLINE#
q . put ( 'Hello' ) #NEWLINE#
requests_log . setLevel ( logging . DEBUG ) #NEWLINE#
self . arrayvar [ 'checkbutton' ] = 'on' #NEWLINE#
ax . scatter ( x , y , z , cmap = 'hot' , c = z ) #NEWLINE#
d2 = datetime . datetime . now ( ) #NEWLINE#
if var == 'stringone' or var == 'stringtwo' : #NEWLINE# #INDENT# do_something ( ) #NEWLINE#
sortedList = [ dictFromList [ i ] for i in b ] #NEWLINE#
data = plt . cm . jet ( data [ x_data , y_data ] ) #NEWLINE# pts = plt . scatter ( x_data , y_data , marker = 's' , color = data ) #NEWLINE#
plt . plot ( secret_data_X2 , secret_data_Y2 , 'b' ) #NEWLINE#
return Gallery . objects . filter ( pk__in = valid_ids ) #NEWLINE#
thread . start_new_thread ( process_waiter , ( proc2 , '2#SPACE#finished' , results ) ) #NEWLINE#
return self . content_type , body . getvalue ( ) #NEWLINE#
label . master . overrideredirect ( True ) #NEWLINE#
foo . __name__ #NEWLINE#
set ( A ) - set ( B ) #NEWLINE#
[ datetime . date ( 2015 , 3 , 20 ) , datetime . date ( 2015 , 4 , 17 ) ] #NEWLINE# [ 1426802400 , 1429218000 ] #NEWLINE#
context [ 'dictstructure' ] = dict ( mydefaultdict ) #NEWLINE#
df = DataFrame ( { 'A' : [ 5 , 6 , 3 , 4 ] , 'B' : [ 1 , 2 , 3 , 5 ] } ) #NEWLINE#
result = collections . defaultdict ( list ) #NEWLINE#
z = JonProperty ( '_z' ) #NEWLINE#
return zip ( * ( [ iter ( iterable ) ] * n ) ) #NEWLINE#
df1 = pd . DataFrame ( np . random . rand ( 3 , 2 ) ) #NEWLINE#
my_array [ pos ] #NEWLINE#
x = x + np . hstack ( [ spacing , spacing [ - 1 ] ] ) #NEWLINE#
parser . add_argument ( '--days' , type = float , default = 1 ) #NEWLINE#
id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) #NEWLINE#
arr1inds = arr1 . argsort ( ) #NEWLINE# sorted_arr1 = arr1 [ arr1inds [ : : - 1 ] ] #NEWLINE# sorted_arr2 = arr2 [ arr1inds [ : : - 1 ] ] #NEWLINE#
array ( [ [ 1.0 , 1.0 ] , [ 1.0 , 1.0 ] , [ 1.0 , 1.0 ] ] ) #NEWLINE#
thread . start ( ) #NEWLINE# root . mainloop ( ) #NEWLINE#
print ( Foo ( ) . bar . arity ( ) ) #NEWLINE#
'iso-8859-9' , 'iso-8859-10' , 'iso-8859-11' , 'iso-8859-13' #NEWLINE#
'iso-8859-14' , 'iso-8859-15' , 'windows-1250' , 'windows-1251' #NEWLINE#
'windows-1252' , 'windows-1253' , 'windows-1254' , 'windows-1255' #NEWLINE#
actor . save ( ) #NEWLINE#
l = [ ( 'text-1' , 'xxx' ) , ( 'img-1' , 'iii' ) , ( 'img-2' , 'jjj' ) , ( 'text-2' , 'xxx' ) ] #NEWLINE# [ t for t in l if t [ 0 ] . startswith ( 'img' ) ] #NEWLINE#
plt . style . use ( 'seaborn-deep' ) #NEWLINE#
df = pd . DataFrame ( data = np . random . randn ( 1 , 8 ) ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
fw . write ( '<html><body>\n' ) #NEWLINE#
country [ 'Position' ] . append ( row [ 'Position' ] ) #NEWLINE#
country [ 'Entscheidungen#SPACE#insgesamt' ] . append ( row [ 'Entscheidungen#SPACE#insgesamt' ] ) #NEWLINE#
country [ 'Insgesamt_monat' ] . append ( row [ 'Insgesamt_monat' ] ) #NEWLINE#
country [ 'Asylberechtigt' ] . append ( row [ 'Asylberechtigt' ] ) #NEWLINE#
dir = os . path . dirname ( module . __file__ ) #NEWLINE#
ax1 . imshow ( A , interpolation = 'nearest' , cmap = cmap ) #NEWLINE#
self . status . pack ( side = 'bottom' , fill = 'x' ) #NEWLINE#
server . package_releases ( 'roundup' ) #NEWLINE#
profile . save ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
next ( ( a for a in x if a in set_y ) , None ) #NEWLINE#
{ 'text' : { 'record.document' : 'SOME_JOURNAL' } } , #NEWLINE#
a = numpy . array ( [ 10 , 7 , 2 , 0 ] ) #NEWLINE#
mylist . append ( x ) #NEWLINE#
return C ( ) #NEWLINE#
list ( unique ) #NEWLINE#
tk . Frame . __init__ ( self , parent , * args , ** kwargs ) #NEWLINE#
{ 'title' : 'Script#SPACE#2' , 'code' : 'code#SPACE#here' , 'id' : '123457' } #NEWLINE#
{ 'title' : 'Script#SPACE#1' , 'code' : 'code#SPACE#here' , 'id' : '123456' } #NEWLINE#
from lxml import etree #NEWLINE#
myList = [ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE#
self . show_all ( ) #NEWLINE#
cur . execute ( 'select#SPACE#timecol#SPACE#from#SPACE#test#SPACE#where#SPACE#timecol#SPACE#<#SPACE#?' , [ DT . time ( 4 , 5 , 6 ) ] ) #NEWLINE#
a = <STR0> ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
x_y_coords = zip ( indices [ 0 ] , indices [ 1 ] ) #NEWLINE#
print ( 'PySprocket#SPACE#attach' ) #NEWLINE#
print ( 'PySprocket#SPACE#detach' ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'settings' #NEWLINE#
len ( df ) #NEWLINE#
c . execute ( 'create#SPACE#table#SPACE#kv#SPACE#(key#SPACE#text,#SPACE#value#SPACE#integer);' ) #NEWLINE#
print ( 'Bar' ) #NEWLINE#
next ( iter ( my_dict ) ) #NEWLINE#
users = [ userA , userB , userC ] #NEWLINE#
[ '2000.181' , '36#SPACE#2.94118' ] , #NEWLINE#
return '#h#SPACE#-F{d}#SPACE#{f}\n' . format ( d = delimiter , f = '#SPACE#' . join ( fields ) ) #NEWLINE#
np . dot ( flags , x ) #NEWLINE#
df [ 'date' ] + timedelta ( hours = 2 ) - datetime . datetime ( 1970 , 1 , 1 ) #NEWLINE#
THETA = np . random . random ( 15 ) * 2 * np . pi #NEWLINE#
run ( host = 'localhost' , port = 8080 ) #NEWLINE#
m = a . shape [ 0 ] #NEWLINE#
ax [ 1 ] . set_title ( 'Imputed#SPACE#(30%#SPACE#missing#SPACE#values)' ) #NEWLINE#
plot . plot ( x , y ) #NEWLINE#
self . canvas . draw ( ) #NEWLINE#
setattr ( self , name , value ) #NEWLINE#
reverse_m2ms = my_model . _meta . get_all_related_many_to_many_objects ( ) #NEWLINE#
e = [ ( 1 , ) , ( 2 , ) , ( 3 , ) ] #NEWLINE# [ i [ 0 ] for i in e ] #NEWLINE#
return np . dot ( ZCAMatrix , inputs ) #NEWLINE#
self . Bind ( wx . EVT_BUTTON , self . OnOkayCanButton , okayButton ) #NEWLINE#
return User ( obj [ 'name' ] , obj [ 'username' ] ) #NEWLINE#
first_name = forms . CharField ( max_length = 30 , required = False ) #NEWLINE#
content_type = models . ForeignKey ( ContentType ) #NEWLINE#
sorted_arr1 = arr1 [ arr1inds [ : : - 1 ] ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
return l [ get_index ( l , find_min ( l ) ) ] #NEWLINE#
print ( x ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( jar ) ) #NEWLINE#
Image . open ( 'Flower-sRGB.jpg' ) #NEWLINE#
ax . set_yticks ( list ( range ( nb_names ) ) ) #NEWLINE#
sys . stdout . write ( data ) #NEWLINE#
file . readline ( ) #NEWLINE#
df . query ( 'A#SPACE#in#SPACE#@b' ) #NEWLINE#
open_file . write ( upload . file . read ( ) ) #NEWLINE#
return [ intify ( i ) for i in maybeLst ] #NEWLINE#
return NULL #NEWLINE#
b = np . array ( [ [ [ 1 , 2 ] , [ 3 , 4 ] ] , [ [ 5 , 6 ] , [ 7 , 8 ] ] ] ) #NEWLINE#
ax1 . axis [ 'top' ] . major_ticklabels . set_visible ( True ) #NEWLINE#
ax1 . axis [ 'bottom' ] . major_ticklabels . set_visible ( True ) #NEWLINE#
[ gb . get_group ( x ) for x in gb . groups ] #NEWLINE#
png = '\x89' + 'PNG\r\n\x1a\n' . encode ( 'ascii' ) #NEWLINE#
main ( ) #NEWLINE#
zip ( l , l [ 1 : ] ) #NEWLINE#
r . json ( ) #NEWLINE#
list ( chain ( repeat ( 0 , len ( a ) - len ( c ) ) , c ) ) #NEWLINE#
getattr ( mymod , fun ) ( 'the#SPACE#var#SPACE#argument' ) #NEWLINE#
lu_obj . solve ( np . eye ( 3 ) ) #NEWLINE#
print ( 'The#SPACE#nltk#SPACE#version#SPACE#is#SPACE#{}.' . format ( nltk . __version__ ) ) #NEWLINE#
lst [ 0 ] . pop ( 0 ) #NEWLINE#
irenR . Start ( ) #NEWLINE#
rx . findall ( '-1#SPACE#+1#SPACE#2e9#SPACE#+2E+09#SPACE#-2e-9' ) #NEWLINE#
df [ 'weighted_sum' ] = df . dot ( weight ) #NEWLINE# df #NEWLINE#
from itertools import groupby #NEWLINE#
loop . close ( ) #NEWLINE#
s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
cfg . load ( 'compiler_cxx' ) #NEWLINE#
lst [ 0 ] . split ( '#SPACE#' ) #NEWLINE#
string . ascii_uppercase [ 5 ] #NEWLINE#
tempDF [ mask ] #NEWLINE#
func . restype = ctypes . c_void_p #NEWLINE#
[ f for f in User . _meta . get_fields ( ) if f . auto_created and not f . concrete ] #NEWLINE#
find_lyrics ( ) #NEWLINE#
adr = re . sub ( '([2-9])\\s?nd(\x08|$)' , '\\1' , adr ) #NEWLINE#
logger2 = logging . getLogger ( 'myapp.area2' ) #NEWLINE#
save_original ( request . FILES [ 'file' ] ) #NEWLINE#
searchB . pack ( ) #NEWLINE#
x . sort ( ) #NEWLINE#
data = f . read ( ) . split ( '\n' ) #NEWLINE#
mydict = { 'a' : 1 , 'b' : 3 , 'c' : 2 } #NEWLINE# sorted ( mydict , key = lambda key : mydict [ key ] ) #NEWLINE#
smtpserver . quit ( ) #NEWLINE#
name = locals ( ) . get ( 'name' , 'Guido' ) #NEWLINE#
hour_ago = datetime . datetime . now ( ) - datetime . timedelta ( hours = 1 ) #NEWLINE#
p . start ( ) #NEWLINE#
apsched . add_interval_job ( checkThirdAPI , seconds = 5 ) #NEWLINE#
[ ( 'test' , '1' ) ] #NEWLINE#
start = cols [ 1 ] . get_text ( ) #NEWLINE#
df [ 'divs' ] = 0 #NEWLINE#
"""Robots#SPACE#in#SPACE#popular#SPACE#culture#SPACE#are#SPACE#there#SPACE#to#SPACE#remind#SPACE#us#SPACE#of#SPACE#the#SPACE#awesomeness#SPACE#of#SPACE#unbound#SPACE#human#SPACE#agency.""" #NEWLINE#
w = txt . rotate ( 17.5 , expand = 1 ) #NEWLINE#
cursor . execute ( 'SET#SPACE#@X:=0;' ) #NEWLINE# cursor . execute ( 'SELECT#SPACE#@X:=@X+1#SPACE#FROM#SPACE#some_table' ) #NEWLINE#
s #NEWLINE# s . groupby ( level = [ 'first' , 'second' ] ) . sum ( ) #NEWLINE#
conn . commit ( ) #NEWLINE#
csvfile = open ( 'file.csv' , 'r' ) #NEWLINE#
return <STR0> ( ) . <STR0> ( item ) #NEWLINE#
"""example.com?title=%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D0%B2%D0%B0%D1%8F+%D0%B7%D0%B0%D1%89%D0%B8%D1%82%D0%B0""" #NEWLINE#
process . stdout . readline ( ) #NEWLINE#
from kivy . app import App #NEWLINE#
s = '{foo}#SPACE#spam#SPACE#eggs#SPACE#{bar}' #NEWLINE#
with open ( fileName , mode = 'rb' ) as file : #NEWLINE# #INDENT# fileContent = file . read ( ) #NEWLINE#
x . add_row ( [ 'Melbourne' , 1566 , 3806092 , 646.9 ] ) #NEWLINE#
x . add_row ( [ 'Perth' , 5386 , 1554769 , 869.4 ] ) #NEWLINE#
x . add_row ( [ 'Brisbane' , 5905 , 1857594 , 1146.4 ] ) #NEWLINE#
x . add_row ( [ 'Hobart' , 1357 , 205556 , 619.5 ] ) #NEWLINE#
draw . rectangle ( ( rect_start , rect_end ) , outline = color ) #NEWLINE#
from PyQt4 import QtGui , QtCore #NEWLINE#
return '' . join ( reversed ( [ a [ i : i + 2 ] for i in range ( 0 , len ( a ) , 2 ) ] ) ) #NEWLINE#
a [ row_idx [ : , ( None ) ] , col_idx ] #NEWLINE#
print ( Float2Arch ( Arch2Float ( '15' ) ) ) #NEWLINE#
print ( ( np . average ( b ) , np . mean ( b ) , np . ma . average ( b ) , np . ma . mean ( b ) ) ) #NEWLINE#
f . tell ( ) #NEWLINE#
dirname = os . path . dirname ( pathname ) or os . getcwd ( ) #NEWLINE#
d . update ( { 'a' : 4 } ) #NEWLINE#
'%.20f' % ( 1 / ( 2.2 - 2 ) ) #NEWLINE#
p = Popen ( 'cmd.exe#SPACE#/k#SPACE#start#SPACE#a.bat' ) #NEWLINE#
from multiprocessing import Process , Manager #NEWLINE#
array ( [ 3 , 2 , 5 , 3 , 3 ] ) #NEWLINE#
body = urllib . request . urlopen ( 'http://' + url , None , 5 ) . read ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
"""0.14.1""" #NEWLINE#
c . decompose ( ) #NEWLINE#
base64 . b64decode ( x . encode ( 'latin1' ) ) #NEWLINE#
xlApp . Workbooks . Add ( ) #NEWLINE#
print ( parmap ( lambda x : x ** x , list ( range ( 1 , 5 ) ) ) ) #NEWLINE#
my_list = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE# list ( grouper ( 2 , my_list ) ) #NEWLINE#
array ( [ [ False , True , False ] , [ False , False , False ] , [ False , False , False ] , #NEWLINE# [ True , False , False ] ] , dtype = bool ) #NEWLINE#
plot ( np . ones ( len ( top_points ) ) , top_points , '+' ) #NEWLINE#
br . set_cookiejar ( cj ) #NEWLINE#
locations = Locations . objects . filter ( ** params ) #NEWLINE#
random . seed ( 4555 ) #NEWLINE#
array = numpy . array ( ( ( 2 , 2 ) , ( 2 , - 2 ) ) ) #NEWLINE# totuple ( array ) #NEWLINE#
y = 0.0001234 * x ** 2 + 3 * np . random . randn ( len ( x ) ) #NEWLINE#
credentials = tools . run_flow ( flow , storage , flags ) #NEWLINE#
array ( [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 0 , 0 , 0 ] , [ 0 , 1 , 2 ] , [ 0 , 2 , 4 ] ] , #NEWLINE# [ [ 0 , 0 , 0 ] , [ 0 , 2 , 4 ] , [ 0 , 4 , 8 ] ] ] ) #NEWLINE#
arr = np . arange ( 10 ) . reshape ( 5 , 2 ) #NEWLINE#
data_array = np . fromfile ( fid , np . int16 ) #NEWLINE#
ax . set_axis_bgcolor ( 'red' ) #NEWLINE# ax . set_axis_bgcolor ( ( 1 , 0 , 0 ) ) #NEWLINE#
plt . plot ( xx1 , yy1 , 'r-' , x , y , 'bo' , xx2 , yy2 , 'g-' ) #NEWLINE#
sum ( 1 for result in results ) #NEWLINE#
win . run ( ) #NEWLINE#
print ( Base . getSubclasses ( ) ) #NEWLINE#
return True #NEWLINE#
d = { 'key1' : [ 1 , 2 , 3 ] , 'key2' : [ 4 , 5 , 6 ] , 'key3' : [ 7 , 8 , 9 ] } #NEWLINE#
foo = os . listdir ( '/tmp/baz' ) #NEWLINE#
globals ( ) [ name ] = val #NEWLINE#
fp = open ( 'file.pdf' , 'rb' ) #NEWLINE#
B . __init__ ( self , 4 ) #NEWLINE#
self . hack_mro ( ) #NEWLINE#
np . where ( k , 2 , 5 ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
c = a * b [ : , ( None ) ] #NEWLINE#
plt . contourf ( np . random . randn ( 10 , 10 ) ) #NEWLINE#
elevate ( ) #NEWLINE#
setattr ( obj , self . func . __name__ , value ) #NEWLINE#
L = [ 'a' , 'b' , 'a' , 'b' ] #NEWLINE#
printf ( '%d' , i ^ j | ( i & j ) << 1 ) #NEWLINE#
print ( ( 'Waring:#SPACE#no#SPACE#title#SPACE#or#SPACE#description#SPACE#found#SPACE#%s' , response . url ) ) #NEWLINE#
ax . add_patch ( rectangle ) #NEWLINE# plt . show ( ) #NEWLINE#
b = ma . masked_array ( [ 0 , 1 , 2 , 3 ] , [ True , True , False , False ] ) #NEWLINE#
print ( a ) #NEWLINE#
bpp = mode_to_bpp [ data . mode ] #NEWLINE#
matplotlib . pyplot . close ( ) #NEWLINE#
conn . endheaders ( ) #NEWLINE#
list ( i if next ( c ) < 3 else next ( iter ( [ ] ) ) for i in a if i == 1 ) #NEWLINE#
wordlist = [ ch for ch in s ] #NEWLINE#
select . select ( [ process . stdout , process . stderr ] , [ ] , [ ] ) #NEWLINE#
count = sum ( 1 for i in l if my_condition ( i ) ) #NEWLINE#
'/path/to/Anaconda/python' , '-u' #NEWLINE#
x += 1 #NEWLINE#
zip ( * df . values ) #NEWLINE#
b = np . array ( [ [ 2 , 3 ] , [ 4 , 5 ] ] ) #NEWLINE#
print ( list ( test_col . find ( { } , { '_id' : 0 } ) ) ) #NEWLINE#
print ( 'Larry' . lower ( ) . translate ( str . maketrans ( 'lary' , '1234' ) ) ) #NEWLINE#
client . connect ( 'tcp://127.0.0.1:9999' ) #NEWLINE#
sys . modules [ 'B' ] = Mock ( ) #NEWLINE#
data = base64 . b64decode ( 'QBN0Yue3D9hBrBuD01n5KWG+lv2doMf97cKm/AeusAI=' ) #NEWLINE#
self . currentStack . pop ( ) #NEWLINE#
zip ( * lis ) #NEWLINE#
print ( postcodes ) #NEWLINE#
return self . datadex [ x ] + 1 #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
self . stream . write ( data ) #NEWLINE#
ax3 . yaxis . set_visible ( False ) #NEWLINE#
mail . select ( 'DetReport' ) #NEWLINE#
t . start ( ) #NEWLINE#
rndseries = pd . Series ( np . random . randn ( len ( rndrange ) ) , index = rndrange ) #NEWLINE#
ax . plot ( x , np . arctan ( x ) , label = 'Inverse#SPACE#tan' ) #NEWLINE#
f = plt . figure ( figsize = ( size , size ) ) #NEWLINE#
random . shuffle ( x ) #NEWLINE#
dlg . exec_ ( ) #NEWLINE#
plot ( x , y ) #NEWLINE#
outFile . write ( 'â\x97\x8f' ) #NEWLINE#
d [ j ] . append ( i ) #NEWLINE#
[ 'T' , 'P' , 'M' , 'M' , 'A' , 'R' , 'k' , 'M' , 'mis' , 'G' , 'C' , 'mis' ] #NEWLINE#
new_df . to_excel ( writer , sheet_name = 'Validation' , startrow = 0 , startcol = 0 ) #NEWLINE#
[ x for i , x in enumerate ( y ) if i != 0 and i != 1 ] #NEWLINE#
( - 17.5 ) . hex ( ) #NEWLINE#
utc = datetime . strptime ( '2011-01-21#SPACE#02:37:21' , '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
font = ImageFont . truetype ( 'resources/HelveticaNeueLight.ttf' , fontsize ) #NEWLINE#
print ( sorted ( list ( globalHotItems . items ( ) ) , key = lambda x : x [ 1 ] ) [ - 1 ] ) #NEWLINE#
DOWNLOADER_MIDDLEWARES = { 'myproject.middlewares.ForceUTF8Response' : 100 } #NEWLINE#
list2 = [ [ '1' , '2' , '3' ] , [ '4' , '5' , '6' ] , [ '7' , '8' ] ] #NEWLINE#
my_dict = dict . fromkeys ( [ 'a' , 'b' , 'c' ] , 10 ) #NEWLINE#
shutil . rmtree ( tdir ) #NEWLINE#
df #NEWLINE#
output = [ ( x , y ) for x , y , label in L if x > 10 ] #NEWLINE#
ShapedFrame ( ) . Show ( ) #NEWLINE# app . MainLoop ( ) #NEWLINE#
ax . set_yticks ( y_pos ) #NEWLINE#
a = [ [ 'a' , 'b' ] , [ 'c' ] ] #NEWLINE#
df [ 'C' ] . iloc [ 1 : ] = df [ 'B' ] . iloc [ : - 1 ] . values + df [ 'A' ] . iloc [ 1 : ] . values #NEWLINE#
print ( scipy . ndimage . zoom ( x , 2 , order = 0 ) ) #NEWLINE#
tree = ET . parse ( filename ) #NEWLINE#
merger . append ( PdfFileReader ( file ( filename2 , 'rb' ) ) ) #NEWLINE#
all ( [ ( x > 0 ) for x in [ 3 , - 1 , 5 ] ] ) #NEWLINE#
xmldoc = minidom . parseString ( document ) #NEWLINE#
print ( 'n2:#SPACE#{:.2f}' . format ( n2 ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
new_issue . update ( fields = { 'customfield_11301' : str_to_utf ( user ) } ) #NEWLINE#
sys . stderr . write ( line ) #NEWLINE#
file . write ( '\n' ) #NEWLINE#
file . write ( 'Mesh#SPACE#Transform:\n' ) #NEWLINE#
ax1 . set_color_cycle ( [ cm ( 1.0 * i / ( NPOINTS - 1 ) ) for i in range ( NPOINTS - 1 ) ] ) #NEWLINE#
no_integers = [ x for x in mylist if not ( x . isdigit ( ) or x [ 0 ] == '-' and x [ 1 #NEWLINE# : ] . isdigit ( ) ) ] #NEWLINE#
print ( mem . total ( ) / 1024 , mem . free ( ) / 1024 ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
"""Restore#SPACE#state#SPACE#from#SPACE#the#SPACE#unpickled#SPACE#state#SPACE#values.""" #NEWLINE#
random . choice ( mylist , 3 ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE#
ax . plot_date ( df1 . date , df1 [ 'count' ] , color = 'blue' , label = 'A' , linestyle = '-' ) #NEWLINE#
os . chdir ( dir ) #NEWLINE#
dict1 = dict2 [ key ] #NEWLINE#
text = text . replace ( '\n' , '#SPACE#' ) #NEWLINE#
grouped . loc [ 1 , 2 ] #NEWLINE#
plt . bar ( bins [ : - 1 ] [ i ] , n_x [ i ] , width = 10 ) #NEWLINE#
self . levelno = levelno #NEWLINE#
ugettext_lazy ( 'The#SPACE#Beatles#SPACE#frontmen#SPACE#' ) + ( ugettext_lazy ( 'John#SPACE#Lennon' ) + '#SPACE#' ) #NEWLINE#
Topic = dom . getElementsByTagName ( 'Topic' ) #NEWLINE#
ax2 . set_xlim ( [ 0 , 5 ] ) #NEWLINE# ax2 . set_ylim ( [ 0 , 5 ] ) #NEWLINE#
time . sleep ( 1.1 ) #NEWLINE#
l = [ [ 'a1' , 'b1' , 'c1' , 'd1' , 'e1' , 'f1' , 'g1' , 'h1' , 'i1' ] , [ 'a2' , 'b2' , #NEWLINE# 'c2' , 'd2' , 'e2' , 'f2' , 'g2' , 'h2' , 'i2' ] , [ 'a3' , 'b3' , 'c3' , 'd3' , #NEWLINE# 'e3' , 'f3' , 'g3' , 'h3' , 'i3' ] , [ 'a4' , 'b4' , 'c4' , 'd4' , 'e4' , 'f4' , #NEWLINE# 'g4' , 'h4' , 'i4' ] , [ 'a5' , 'b5' , 'c5' , 'd5' , 'e5' , 'f5' , 'g5' , 'h5' , #NEWLINE# 'i5' ] , [ 'a6' , 'b6' , 'c6' , 'd6' , 'e6' , 'f6' , 'g6' , 'h6' , 'i6' ] , [ 'a7' , #NEWLINE# 'b7' , 'c7' , 'd7' , 'e7' , 'f7' , 'g7' , 'h7' , 'i7' ] , [ 'a8' , 'b8' , 'c8' , #NEWLINE# 'd8' , 'e8' , 'f8' , 'g8' , 'h8' , 'i8' ] , [ 'a9' , 'b9' , 'c9' , 'd9' , 'e9' , #NEWLINE# 'f9' , 'g9' , 'h9' , 'i9' ] ] #NEWLINE# map ( dict . fromkeys , l ) #NEWLINE#
print ( 'in#SPACE#h,' , self . _y ) #NEWLINE#
app . run ( ) #NEWLINE#
G . add_edge ( 'ROOT' , 'Child_%i' % i ) #NEWLINE#
printstring . printstring ( 'test#SPACE#script#SPACE#working' ) #NEWLINE#
toys = models . ManyToManyField ( 'Toy' , related_name = 'owner' ) #NEWLINE#
return defaultdict ( lambda : nested_dict ( n - 1 , type ) ) #NEWLINE#
data . append ( '#SPACE#' ) #NEWLINE#
return tuple ( sorted ( x ) ) #NEWLINE#
a [ subset_c ] += 3 #NEWLINE#
hash1 . update ( text1 ) #NEWLINE#
plt . hexbin ( x , y , gridsize = 20 , cmap = cmaps . pop ( ) , mincnt = 1 ) #NEWLINE#
2 , array ( [ 0 , 1 ] ) , array ( [ 3 , 4 , 5 ] ) #NEWLINE#
req = urllib . request . Request ( 'http://192.168.1.10/url/path' ) #NEWLINE#
main . mainloop ( ) #NEWLINE#
print ( 'total#SPACE#files#SPACE#size=' , sum ( e . file_size for e in z . infolist ( ) ) ) #NEWLINE#
ancestors_descendents = set ( ) #NEWLINE#
data = [ re . sub ( '[^-0-9]+' , '#SPACE#' , x ) for x in data ] #NEWLINE#
self . response . out . write ( 'Done!' ) #NEWLINE#
self . __init__ ( ) #NEWLINE#
package_name . parseString ( 'java.lang.String' ) #NEWLINE#
print ( json . dumps ( data ) ) #NEWLINE#
pd . DatetimeIndex ( df . date ) + pd . offsets . Hour ( 1 ) #NEWLINE#
b = a #NEWLINE#
df . groupby ( [ 'country' ] ) . count ( ) . sort_values ( [ 'accident' ] , ascending = False #NEWLINE# ) . rename ( columns = { 'accident' : 'Sum#SPACE#of#SPACE#accidents' } ) . reset_index ( ) #NEWLINE#
print ( GetWindowText ( GetForegroundWindow ( ) ) ) #NEWLINE#
setattr ( obj , 'xyz' , 42 ) #NEWLINE#
ser_cdf . plot ( drawstyle = 'steps' ) #NEWLINE#
newk . append ( i ) #NEWLINE#
p . x , p . y #NEWLINE#
json . loads ( s ) #NEWLINE#
__version__ = 'X.Y' #NEWLINE#
l = tk . Label ( text = 'hello,#SPACE#world' ) #NEWLINE#
return cmp ( len ( A ) , len ( B ) ) #NEWLINE#
fo . write ( ',\t' . join ( [ str ( d [ i ] [ y ] ) for i in a ] ) + '\n' ) #NEWLINE#
memmove ( addressof ( header ) , '\x01' , 1 ) #NEWLINE#
models . DateTimeField ( null = True ) #NEWLINE#
it = iter ( [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
copy . deepcopy ( d ) #NEWLINE#
for line in f : #NEWLINE# #INDENT# array . append ( [ int ( x ) for x in line . split ( ) ] ) #NEWLINE#
name = models . CharField ( max_length = 255 ) #NEWLINE#
[ [ 8 , 9 , 10 , 11 ] , [ 1 , 2 , 3 , 4 , 5 , 6 ] ] #NEWLINE#
KT [ KT . ix [ : , 3 : - 2 ] != 0 ] #NEWLINE#
b = numpy . vstack ( ( a , a ) ) #NEWLINE#
bar = models . ManyToManyField ( Child , related_name = 'bar' ) #NEWLINE#
pool = Pool ( ) #NEWLINE#
client = s . getsockname ( ) [ 0 ] #NEWLINE#
next ( f , None ) #NEWLINE#
stream . write ( chunkout ) #NEWLINE#
print ( 'hello#SPACE#kitty!' ) #NEWLINE#
np . random . seed ( 1010 ) #NEWLINE#
f . write ( doc . toxml ( ) ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
d = { 'a' : v1 , 'b' : v1 , 'c' : v2 , 'd' : v2 } #NEWLINE#
file = pickle . load ( open ( 'D:\\Download\\htmlString.p' , 'r' ) ) #NEWLINE#
authors . append ( text . split ( 'Post#SPACE#by:' ) [ 1 ] . split ( '#SPACE#on#SPACE#' ) [ 0 ] . strip ( ) ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE# print ( args ) #NEWLINE#
return '' . join ( sql ) #NEWLINE#
print ( 'name={}#SPACE#value={}' . format ( 'title' , soup . title . text ) ) #NEWLINE#
df . head ( ) #NEWLINE#
self . close ( ) #NEWLINE#
email = models . EmailField ( _ ( 'email#SPACE#address' ) , unique = True ) #NEWLINE#
self . hlpass . set_text ( 'low-pass' ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
new = a + ( b , ) #NEWLINE#
return 'Data#SPACE#descriptors#SPACE#(such#SPACE#as#SPACE#properties)#SPACE#are#SPACE#high#SPACE#priority' #NEWLINE#
jar = cookielib . <VAR1> ( ) #NEWLINE#
df . tail ( 1 ) . T . assign ( passes = lambda x : x . gt ( 1 ) ) #NEWLINE#
time . sleep ( delay ) #NEWLINE#
soup = BeautifulSoup ( '<div#SPACE#id="remository">20</div>' ) #NEWLINE#
ax = pl . subplot ( 111 , polar = True ) #NEWLINE#
soup = BeautifulSoup ( dirver . page_source , 'lxml' ) #NEWLINE#
df . iloc [ ( a == 3.2 ) . any ( 1 ) & ( ( a != 0.1 ) & ( a != 1.2 ) ) . all ( 1 ) ] #NEWLINE#
print ( '' . join ( grayscales ) ) #NEWLINE#
iso8601 . parse_date ( '2012-11-01T04:16:13-04:00' ) #NEWLINE#
plt . colorbar ( ) #NEWLINE#
words = [ word for word in words if word not in [ 'a' , 'y' , 'Y' , 'q' , 'Q' , #NEWLINE# 'p' , 'P' , 'uh' ] ] #NEWLINE#
target_time = time . clock ( ) + 0.025 #NEWLINE#
data . columns = [ 'a' , 'b' , 'c' , 'etc.' ] #NEWLINE#
get_regex_max_match_len ( '.*' ) #NEWLINE#
stringbuilder . py #NEWLINE#
lst = [ '1#SPACE#2#SPACE#4#SPACE#5#SPACE#0.9' , '1#SPACE#2#SPACE#4#SPACE#5#SPACE#0.6' , '1#SPACE#2#SPACE#4#SPACE#5#SPACE#0.3' , '1#SPACE#2#SPACE#4#SPACE#5#SPACE#0.4' ] #NEWLINE#
process = subprocess . Popen ( your_command , stdout = subprocess . PIPE ) #NEWLINE#
a = numpy . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE# for ( x , y ) , value in numpy . ndenumerate ( a ) : #NEWLINE# #INDENT# pass #NEWLINE#
setattr ( self , d [ name ] , value ) #NEWLINE#
plt . show ( ) #NEWLINE#
ax = pylab . gca ( ) #NEWLINE# ax . yaxis . set_visible ( False ) #NEWLINE# pylab . show ( ) #NEWLINE#
itemgetter ( 2 , 5 ) ( L ) #NEWLINE#
x = [ [ 1 , 2 ] , [ 1 , 2 , 3 ] , [ 1 ] ] #NEWLINE#
print ( floor ( log ( 1000 , 10 ) ) ) #NEWLINE#
sort_indices = np . argsort ( brr ) [ : : - 1 ] #NEWLINE#
plt . plot ( grp [ 'B' ] , label = key ) #NEWLINE#
clean_filename = re . sub ( '[^.a-zA-Z0-9]' , '_' , filename ) #NEWLINE#
mode ( [ 1 , 2 , 2 , 3 , 3 , 4 , 5 ] ) #NEWLINE#
return np . where ( y >= 0 , y + 1 , 1 / ( 1 - y ) ) #NEWLINE#
s = '01/12/2011' #NEWLINE# time . mktime ( datetime . datetime . strptime ( s , '%d/%m/%Y' ) . timetuple ( ) ) #NEWLINE#
m [ : , ( 0 ) ] . shape #NEWLINE#
df . iloc [ df . index . indexer_between_time ( '15:30:00' , '16:30:00' ) ] #NEWLINE#
print ( '%s#SPACE#->#SPACE#%s' % ( node , '#SPACE#' . join ( child for child in tree [ node ] ) ) ) #NEWLINE#
print ( shell . SHGetFolderPath ( 0 , shellcon . CSIDL_DESKTOP , None , 0 ) ) #NEWLINE#
pubsub . subscribe ( 'chat' ) #NEWLINE#
from celery import task #NEWLINE#
print ( [ ( x , r . count ( x ) ) for x in 'abcd' ] ) #NEWLINE#
ax . set_xticklabels ( a ) #NEWLINE#
image . save ( data , 'PNG' ) #NEWLINE#
self . set_val ( self . valinit ) #NEWLINE#
[ x for x in lst if x % 2 == 0 ] [ : 1 ] #NEWLINE#
lamp_data = bpy . data . lamps . new ( name = 'New#SPACE#Lamp' , type = 'POINT' ) #NEWLINE#
curses . cbreak ( ) #NEWLINE#
np . array ( xlist , dtype = dt ) #NEWLINE#
imageB = wx . Image ( 'a.gif' , wx . BITMAP_TYPE_ANY ) . ConvertToBitmap ( ) #NEWLINE#
self . insert ( len ( self . _list ) , val ) #NEWLINE#
app = wx . PySimpleApp ( ) #NEWLINE#
answerZ = check_answer ( 'Question#SPACE#about#SPACE#Z?\n' , 'TrueZ' ) #NEWLINE#
d . get ( 'c' , 'c' ) #NEWLINE#
instance = SomeModel . objects . get ( id = id ) #NEWLINE#
mask = np . in1d ( df [ 'Col4' ] , target_array ) #NEWLINE#
_start = time . time ( ) #NEWLINE#
time_in_range ( start , end , datetime . time ( 23 , 30 , 0 ) ) #NEWLINE#
return text . strip ( ) #NEWLINE#
data [ 'Qd(cb)%' ] = data [ 'Qd(cb)' ] / data [ 'TotalCB' ] * 100 #NEWLINE#
client . close ( ) #NEWLINE#
least_common_values ( [ 1 , 1 , 2 , 3 , 3 ] ) #NEWLINE#
list1 . extend ( [ 42 , 43 ] ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( '%d:%d:%d' % ( c , w , s ) ) #NEWLINE#
df = pd . DataFrame ( { 'foo' : list ( 'ABC' ) } , index = [ 0 , 2 , 1 ] ) #NEWLINE#
a [ : ] = b #NEWLINE#
return float ( value ) #NEWLINE#
pyl . title ( 'Simplest#SPACE#default#SPACE#with#SPACE#labels' ) #NEWLINE#
x = [ ( 2 , 3 ) , ( 4 , 3 ) , ( 6 , 9 ) ] #NEWLINE#
image . save ( 'date.png' ) #NEWLINE#
pickle . dump ( clf , f ) #NEWLINE#
b = 1 #NEWLINE#
raise ImportError ( 'Bad#SPACE#magic#SPACE#number#SPACE#in#SPACE#%s' % filename ) #NEWLINE#
print ( 'original:' , datetime . datetime . fromtimestamp ( originalTimeStamp ) ) #NEWLINE#
destination . close ( ) #NEWLINE#
return d [ k ] #NEWLINE#
time . sleep ( 10 ) #NEWLINE#
self . button . clicked . connect ( self . start_download ) #NEWLINE#
return functools . partial ( func , p ) #NEWLINE#
a . remove ( 10 ) #NEWLINE#
eroded = cv2 . erode ( img , kern , 1 ) #NEWLINE#
logger . info ( 'info#SPACE#message' ) #NEWLINE#
NULL , NULL #NEWLINE#
query_result = DBSession . query ( Article ) . order_by ( Article . created ) . all ( ) #NEWLINE#
self . button = QtGui . QPushButton ( 'Add#SPACE#Tab' ) #NEWLINE#
df #NEWLINE#
module = import_module ( 'amodule' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 1 , 2 ] , 'b' : [ 3 , 4 , 3 , 5 ] } ) #NEWLINE#
a = np . array ( [ 0 , 0 , 1 , 1 , 1 , 3 , 5 , 5 , 5 ] ) #NEWLINE#
stdout . close ( ) #NEWLINE#
pi = square ( a + b ) / 4 * t #NEWLINE#
parent_of_parent_dir = os . path . join ( current_file , '../../' ) #NEWLINE#
print ( 'Width:#SPACE#{},#SPACE#height:#SPACE#{}' . format ( w , h ) ) #NEWLINE#
bitarray . bitarray ( l ) . tostring ( ) #NEWLINE#
inputElement . send_keys ( '1' ) #NEWLINE#
conn . login ( usernm , passwd ) #NEWLINE#
print ( type ( df1 . ix [ 0 , 'BB' ] ) ) #NEWLINE#
class ModelA ( models . Model ) : #NEWLINE# #INDENT# fk = models . ForeignKey ( 'app1.X' ) #NEWLINE#
writer . save ( ) #NEWLINE#
b [ : , ( [ 1 , 2 , 0 ] ) ] * c [ : , ( [ 2 , 0 , 1 ] ) ] - b [ : , ( [ 2 , 0 , 1 ] ) ] * c [ : , ( [ 1 , 2 , 0 ] ) ] #NEWLINE#
self . assertTrue ( 1 + 1 == 3 ) #NEWLINE#
return chain . from_iterable ( permutations ( xs , n ) for n in range ( len ( xs ) + 1 ) ) #NEWLINE#
mng . window . state ( 'zoomed' ) #NEWLINE# plt . show ( ) #NEWLINE#
self . altitude *= - 1 #NEWLINE#
len ( s ) #NEWLINE#
functions [ 2 ] ( ) #NEWLINE#
print ( now . strftime ( '%a#SPACE#%Y#SPACE#%b#SPACE#%d' ) ) #NEWLINE#
dic [ i ] = 'xxx' #NEWLINE#
tk . Button ( root , text = 'Quit' , command = lambda root = root : quit ( root ) ) . pack ( ) #NEWLINE#
if os . name == 'nt' : #NEWLINE# #INDENT# pass #NEWLINE#
count1 = config . get ( 'Counter' , 'count1' ) #NEWLINE#
C ( ) . m ( ) #NEWLINE#
df = pd . DataFrame ( np . random . randint ( 0 , 100 , size = ( 100 , 4 ) ) , columns = list ( #NEWLINE# 'ABCD' ) ) #NEWLINE# df #NEWLINE#
conn . select ( 'INBOX' ) #NEWLINE#
'AAå\x88¶' , 'AAå\x88¶' , 'A#SPACE#A#SPACE#zhi4' , 'to#SPACE#split#SPACE#the#SPACE#bill/to#SPACE#go#SPACE#Dutch' #NEWLINE#
coc . x . append ( 2 ) #NEWLINE#
words = [ 'foo' , 'biology' , 'sequence' ] #NEWLINE#
"""\\""" . join ( pathname . split ( '\\' ) [ : - 1 ] ) #NEWLINE#
sys . exit ( ) #NEWLINE#
print ( name , 'is' , type ( name ) , 'and#SPACE#is#SPACE#equal#SPACE#to#SPACE#' , myvalue ) #NEWLINE#
L = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 3 , 4 , 6 ] ] #NEWLINE#
df [ 'value' ] = df . groupby ( 'name' ) . transform ( lambda x : x . fillna ( x . mean ( ) ) ) #NEWLINE#
del self . __dict__ [ field . get_cache_name ( ) ] #NEWLINE#
draw . ellipse ( bbox , fill = 128 ) #NEWLINE#
file . write ( 'Multiple#SPACE#of#SPACE#1000!\r\n' * ( a2 % 1000 == 0 ) . sum ( ) ) #NEWLINE#
print ( ( self . x , self . y , self . z ) ) #NEWLINE#
print ( 'Received#SPACE#line#SPACE#on#SPACE#standard#SPACE#error:#SPACE#' + repr ( line ) ) #NEWLINE#
nom_plan_label . setStyleSheet ( 'QLabel#nom_plan_label#SPACE#{color:#SPACE#yellow}' ) #NEWLINE#
statemap = { ( 1 , 0 ) : ( 0 , 1 ) , ( 0 , 1 ) : ( - 1 , 0 ) , ( - 1 , 0 ) : ( 0 , - 1 ) , ( 0 , - 1 ) : ( 1 , 0 ) } #NEWLINE#
im = ax . imshow ( mat , interpolation = 'nearest' ) #NEWLINE#
A . __init__ ( self ) #NEWLINE#
pass #NEWLINE#
exp = ( a + b ) * 40 - ( c - a ) / 0.5 #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( convert ( 1692 ) ) #NEWLINE#
plt . ion ( ) #NEWLINE#
l2 = [ 'a' , 'b' , 'c' , 'b' ] #NEWLINE#
print ( bisect . bisect_left ( L , ( 2 , ) ) ) #NEWLINE#
tpl = "<a#SPACE#href='mailto:{0}'>{1}</a>" #NEWLINE#
print ( unescape ( 'Welcome#SPACE#to#SPACE#Lorem#SPACE#Ipsum#SPACE#IncÂ®' ) ) #NEWLINE#
map ( sum , zip ( a , b , c ) ) #NEWLINE#
new_im . paste ( im ) #NEWLINE#
models . signals . post_save . connect ( create_api_key , sender = User ) #NEWLINE#
x , y , z = sympy . symbols ( 'xyz' ) #NEWLINE#
[ sum ( starmap ( mul , zip ( first , col ) ) ) for col in zip ( * second ) ] #NEWLINE#
np . random . seed ( [ 3 , 1415 ] ) #NEWLINE#
def get_range ( dictionary , begin , end ) : #NEWLINE# #INDENT# return dict ( ( k , v ) for k , v in dictionary . items ( ) if begin <= k <= end ) #NEWLINE#
X . copy ( ) #NEWLINE#
key_to_download . get_contents_to_filename ( 'target_filename' ) #NEWLINE#
print ( scipy . ndimage . zoom ( x , 2 , order = 1 ) ) #NEWLINE#
packages = [ get_package_name ( p ) for p in requirements ] #NEWLINE#
print ( 'invalid' ) #NEWLINE#
'10#SPACE#DC#SPACE#Comics.#SPACE#2012' , '10#SPACE#DC#SPACE#Comics#SPACE#,#SPACE#(c)#SPACE#2012.' #NEWLINE#
'10#SPACE#DC#SPACE#Comics,#SPACE#Copyright#SPACE#2012' , 'Warner#SPACE#Bros,#SPACE#2011' #NEWLINE#
result [ - 1 ] . append ( temp ) #NEWLINE#
self . socket = socket ( AF_INET , SOCK_STREAM ) #NEWLINE#
r = s . post ( url , data ) #NEWLINE#
mydog . findall ( s ) #NEWLINE#
os . nice ( - 5 ) #NEWLINE#
mngr . window . setGeometry ( 50 , 100 , 640 , 545 ) #NEWLINE#
routes = [ ( '/' , MainHandler ) , ( '/tail/' , TailHandler ) , ( '/signin/' , #NEWLINE# SigninHandler ) , ( '/signout/' , SignoutHandler ) ] #NEWLINE#
return obj . isoformat ( ) #NEWLINE#
tmp . append ( map ( int , line . split ( ) [ : w ] ) ) #NEWLINE#
self . stop ( ) #NEWLINE#
nhat = np . cross ( v1 , v2 ) #NEWLINE# nhat = nhat / np . sqrt ( np . dot ( nhat , nhat ) ) #NEWLINE#
a = list ( a ) #NEWLINE#
b . columns = [ 'var1' , 'var2' ] #NEWLINE#
request . session [ 'student_id' ] = student_id #NEWLINE#
app ( ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
module2 . py #NEWLINE#
x , y , z = [ 1 , 2 , 3 ] #NEWLINE#
return call_fn ( * args , ** kwargs ) #NEWLINE#
msg . extend ( 'foo' ) #NEWLINE#
node_schema . load ( json_data , instance = Node ( ) . quey . get ( node_id ) ) #NEWLINE#
"""<Conditional's#SPACE#meaning>#SPACE#happened,#SPACE#so#SPACE#we're#SPACE#not#SPACE#setting#SPACE#up#SPACE#the#SPACE#interface.""" #NEWLINE#
x , y , z , w = map ( int , input ( ) . split ( ) ) #NEWLINE#
Counter ( 'abracadabra' ) #NEWLINE#
return list ( filter ( is_package , os . listdir ( dir ) ) ) #NEWLINE#
vis2 = cv2 . cvtColor ( vis , cv2 . COLOR_GRAY2BGR ) #NEWLINE#
"""This#SPACE#is#SPACE#some#SPACE#long#SPACE#text#SPACE#which#SPACE#would#SPACE#wrap#SPACE#past#SPACE#the#SPACE#80#SPACE#column#SPACE#mark#SPACE#and#SPACE#go#SPACE#onto#SPACE#the#SPACE#next#SPACE#line#SPACE#number#SPACE#of#SPACE#times#SPACE#blah#SPACE#blah#SPACE#blah.""" #NEWLINE#
array ( [ 3 , 4 , 5 ] ) #NEWLINE#
print ( 'foo' if 1 > 0 else 'bar' ) #NEWLINE#
os . makedirs ( dst ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 2 , 4 , 7 ] ] ) #NEWLINE# print ( split ( a , a [ : , ( 0 ) ] < 3 ) ) #NEWLINE#
df = df . loc [ : , ( 'month' , 'data' ) ] . groupby ( 'month' ) . mean ( ) #NEWLINE#
tup [ 0 ] += 4 , 5 , 6 #NEWLINE#
print ( 'Content-Type:#SPACE#text/html;#SPACE#charset=utf-8' ) #NEWLINE#
keys = sorted ( d . keys ( ) ) #NEWLINE# with open ( 'test.csv' , 'wb' ) as outfile : #NEWLINE# #INDENT# writer = csv . writer ( outfile , delimiter = '\t' ) #NEWLINE# writer . writerow ( keys ) #NEWLINE# writer . writerows ( zip ( * [ d [ key ] for key in keys ] ) ) #NEWLINE#
l1 = [ [ 1 , 'steve' ] , [ 4 , 'jane' ] , [ 3 , 'frank' ] , [ 2 , 'kim' ] ] #NEWLINE#
kernel = np . array ( [ [ 0 , 1 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 1 , 0 ] ] ) #NEWLINE#
print ( re . search ( rr , 'hello#SPACE#123#SPACE#456' ) . groupdict ( ) ) #NEWLINE#
word_list = sentence . split ( ) #NEWLINE#
np . linalg . norm ( xs ) #NEWLINE#
form = MyForm ( request . POST ) #NEWLINE#
window . show ( ) #NEWLINE# sys . exit ( app . exec_ ( ) ) #NEWLINE#
print ( urllib . request . urlopen ( request ) . read ( ) ) #NEWLINE#
log . msg ( 'Reactor#SPACE#stopped.' ) #NEWLINE#
par2 . set_ylim ( 1 , 65 ) #NEWLINE#
assert np . allclose ( result , ans ) #NEWLINE#
[ ( i , j ) for i in gz [ 0 ] for j in gz [ 1 ] ] #NEWLINE#
pl . plot ( x , y , 'o' ) #NEWLINE#
sudo ( 'svn#SPACE#update' ) #NEWLINE#
dt = datetime . datetime . now ( ) #NEWLINE#
print ( '\nScript#SPACE#' + script + '#SPACE#does#SPACE#not#SPACE#have#SPACE#extension#SPACE#.py' ) #NEWLINE#
raise IOError ( "Couldn't#SPACE#open#SPACE#device!" ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
sql = 'SELECT#SPACE#*#SPACE#FROM#SPACE#TABLE' #NEWLINE#
c = cv2 . imread ( 'color_img.jpg' , 1 ) #NEWLINE#
self . write_cell ( sheet_name , cell , existing_value , updated_format ) #NEWLINE#
return subprocess . call ( cmd , shell = False ) #NEWLINE#
G . add_edges_from ( tuples ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #NEWLINE# def foo ( self ) : #NEWLINE# #INDENT# #INDENT# print ( 'FOO!' ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# class Bar ( Foo ) : #NEWLINE# #NEWLINE# def foo ( self ) : #NEWLINE# #INDENT# #INDENT# raise AttributeError ( "'Bar'#SPACE#object#SPACE#has#SPACE#no#SPACE#attribute#SPACE#'foo'" ) #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# b = Bar ( ) #NEWLINE# b . foo ( ) #NEWLINE#
dt = datetime . strptime ( '2015-04-08T07:52:00Z' , '%Y-%m-%dT%H:%M:%SZ' ) #NEWLINE#
chr ( _ ) #NEWLINE#
tips = sns . load_dataset ( 'tips' ) #NEWLINE#
del your_dict [ unwanted_key ] #NEWLINE#
ax . set_ylabel ( 'datalabel#SPACE#' + '$\\left(\\mathregular{10^{-5}}\\right)$' ) #NEWLINE#
np . einsum ( 'ij,ik->jki' , a , b ) #NEWLINE#
ipaddress . ip_address ( '192.0.43.10' ) in ipaddress . ip_network ( '192.0.0.0/16' ) #NEWLINE#
print ( 'f00' ) #NEWLINE#
get_supported_types ( ) #NEWLINE#
print ( 'motion#SPACE#{},#SPACE#{}' . format ( event . x , event . y ) ) #NEWLINE#
crsr . execute ( 'SELECT#SPACE#firstname#SPACE#FROM#SPACE#pytest#SPACE#LIMIT#SPACE#0,#SPACE#1' ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'your_django_project.settings' #NEWLINE#
print ( local_tz . localize ( datetime ( 2000 , 6 , 15 ) ) ) #NEWLINE#
list ( chain ( a ) ) #NEWLINE#
mem . Blit ( 0 , 0 , size [ 0 ] , size [ 1 ] , screen , 0 , 0 ) #NEWLINE#
app . listen ( 8888 ) #NEWLINE#
temp_file . write ( bytes ) #NEWLINE#
do_something ( ) #NEWLINE#
"""rfrfrfrf""" #NEWLINE#
tree = et . fromstring ( data ) #NEWLINE#
c = Counter ( [ ( 0 , 0 , 1 ) , ( 1 , 1 , 1 ) , ( 1 , 1 , 1 ) , ( 1 , 0 , 1 ) ] ) #NEWLINE#
return env . Detect ( 'swig' ) #NEWLINE#
self . name = 'test' #NEWLINE#
p . toolbar_location = None #NEWLINE#
self . edit2 = QLineEdit ( ) #NEWLINE#
[ 'foo' , 4 ] #NEWLINE#
conn . login ( user , password ) #NEWLINE#
app = create_app ( ) #NEWLINE#
widget . Bind ( wx . EVT_COMBOBOX , self . onSelect ) #NEWLINE#
a_solution = [ - 1 ] * 11 + [ 1 ] * 13 #NEWLINE#
d = { 'method' : 'eval' , 'safe' : False , 'guarantees' : None } #NEWLINE#
if all ( x > 0 for x in list_of_xs ) : #NEWLINE# #INDENT# do_something ( ) #NEWLINE#
print ( row [ 'city' ] ) #NEWLINE#
pprint ( table ) #NEWLINE#
myDict = { k : [ el for el in v if el != 'x' ] for k , v in list ( myDict . items ( ) ) } #NEWLINE# print ( myDict ) #NEWLINE#
hasattr ( X , 'children' ) #NEWLINE#
cr . close ( ) #NEWLINE#
m = max ( a ) #NEWLINE# [ i for i , j in enumerate ( a ) if j == m ] #NEWLINE#
cur . execute ( 'CREATE#SPACE#DATABASE#SPACE#' + dbname ) #NEWLINE#
t = request . args . get ( 't' ) #NEWLINE#
a . add ( 1 ) #NEWLINE# a . add ( 2 ) #NEWLINE#
with open ( 'doc.txt' ) as f : #NEWLINE# #INDENT# pass #NEWLINE#
return out_view . reshape ( BSZ [ 0 ] * BSZ [ 1 ] , - 1 ) [ : , : : stepsize ] #NEWLINE#
plt . ylabel ( 'True' ) #NEWLINE#
for k in sorted ( a ) : #NEWLINE# #INDENT# pass #NEWLINE#
end += datetime . timedelta ( 1 ) #NEWLINE#
w = np . fft . fft ( x ) #NEWLINE#
df [ 'TempGroup' ] = df . type . apply ( lambda x : zzz . four_group ( x ) ) #NEWLINE#
A = np . random . randint ( 0 , 9 , ( 2 , 4 , 4 ) ) #NEWLINE#
fo . write ( content ) #NEWLINE#
setattr ( obj . a , p , value ) #NEWLINE#
print ( etree . tostring ( element ) ) #NEWLINE#
{ { ac } } #NEWLINE#
markov ( arr ) #NEWLINE#
Base . metadata . create_all ( ) #NEWLINE#
print ( 'Error:#SPACE#%s' % sys . exc_info ( ) [ 0 ] ) #NEWLINE#
[ l for l in list_dirs if os . path . basename ( l ) not in unwanted_files ] #NEWLINE#
df . mul ( vector , axis = 0 ) #NEWLINE#
wx . Frame . __init__ ( self , * args , ** kwargs ) #NEWLINE#
ith_diag . eliminate_zeros ( ) #NEWLINE#
f1 = open ( 'yourBigFile.txt' , 'r' ) #NEWLINE# f2 = open ( 'yourBigFile.txt.tmp' , 'w' ) #NEWLINE# for line in f1 : #NEWLINE# #INDENT# f2 . write ( line . replace ( ';' , '#SPACE#' ) ) #NEWLINE# f1 . close ( ) #NEWLINE# f2 . close ( ) #NEWLINE#
super ( QtGui . QMainWindow , self ) . __init__ ( ) #NEWLINE#
do_something_else ( result ) #NEWLINE#
d = { } #NEWLINE# for i in listofdict : #NEWLINE# #INDENT# d [ i . pop ( 'name' ) ] = i #NEWLINE#
keys = [ 'a' , 'b' , 'c' ] #NEWLINE# values = [ 1 , 2 , 3 ] #NEWLINE# dictionary = dict ( zip ( keys , values ) ) #NEWLINE# print ( dictionary ) #NEWLINE#
w . pack ( ) #NEWLINE#
test [ : , ( [ 0 , 2 ] ) ] #NEWLINE#
gui . root . mainloop ( ) #NEWLINE#
sys . path . append ( '.' ) #NEWLINE#
print ( T2 . repeat ( 3 , 50 ) ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 , 10 ] #NEWLINE#
ax . quiver ( x , y , u , v ) #NEWLINE#
row_idx = np . array ( [ 0 , 1 , 3 ] ) #NEWLINE#
text = text . replace ( word , 'swords' ) #NEWLINE#
sts = os . waitpid ( p . pid , 0 ) [ 1 ] #NEWLINE#
audio . add_tags ( ) #NEWLINE#
return self . _treeView . get_cursor ( ) [ 0 ] [ 0 ] #NEWLINE#
df = df . merge ( windows , on = 'company' , how = 'left' ) #NEWLINE#
df2 [ [ 'team1' , 'team2' ] ] = pd . DataFrame ( [ x for x in df2 . teams ] ) #NEWLINE#
db = SQLAlchemy ( app ) #NEWLINE#
writer . writerows ( [ object2list ( obj , attr_list ) for obj in list_of_objects ] ) #NEWLINE#
status = dict ( privacyStatus = 'private' ) #NEWLINE#
a [ 0 ] , a [ 2 ] = a [ 2 ] , a [ 0 ] #NEWLINE#
m2 = np . zeros ( ( 50 , 50 ) ) #NEWLINE# m3 = np . zeros ( ( 50 , 50 ) ) #NEWLINE#
plt . rc ( 'text' , usetex = False ) #NEWLINE#
super ( MyDialog , self ) . __init__ ( parent ) #NEWLINE#
db = sqlite3 . connect ( ':memory:' ) #NEWLINE#
frame = wx . Frame ( None , - 1 , 'Shaped#SPACE#Button#SPACE#Demo' ) #NEWLINE#
lambda seq : [ ( lambda : el ) for el in seq ] #NEWLINE#
- r72 #NEWLINE#
df . dtypes #NEWLINE#
loop . run_forever ( ) #NEWLINE#
strcpy ( buffer , path ) #NEWLINE#
text = [ x for x in text . lower ( ) if x in string . letters ] #NEWLINE#
con . commit ( ) #NEWLINE# con . close ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
csX . n = X . shape [ 1 ] #NEWLINE#
df2 = pd . DataFrame ( { 'a' : [ 1.0 , 2.0 ] , 'b' : [ np . nan , 4.0 ] } ) #NEWLINE#
print ( list ( pairs ) ) #NEWLINE#
cap = cv2 . VideoCapture ( 'video.mp4' ) #NEWLINE#
pool . join ( ) #NEWLINE#
query . order ( '-created' ) #NEWLINE#
outf . write ( ser . read ( ) ) #NEWLINE#
return '{}({})' . format ( self . __class__ . __name__ , args ) #NEWLINE#
return render_template ( 'profile.html' , user = user ) #NEWLINE#
part = '' . join ( str ( random . randrange ( 0 , 9 ) ) for _ in range ( N - 1 ) ) #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
versioned_session ( session ) #NEWLINE#
check_call ( [ 'generate_kmers' , str ( kmer ) ] , stdout = file ) #NEWLINE#
w = distanceM ( ) #NEWLINE#
print_hello_world ( ) #NEWLINE#
cv2 . namedWindow ( winName , cv2 . CV_WINDOW_AUTOSIZE ) #NEWLINE#
return NULL #NEWLINE#
return sorted ( set ( li ) , reverse = True ) [ n ] #NEWLINE#
app . mainloop ( ) #NEWLINE#
GPIO . setmode ( GPIO . BOARD ) #NEWLINE#
activate_this_file = '/path/to/virtualenv/bin/activate_this.py' #NEWLINE#
df = pd . read_csv ( StringIO ( data ) , index_col = 0 , parse_dates = [ 'Quradate' ] ) #NEWLINE# df . head ( ) #NEWLINE#
cell . set_property ( 'inconsistent' , True ) #NEWLINE#
plt . bar ( list ( range ( len ( D ) ) ) , list ( D . values ( ) ) , align = 'center' ) #NEWLINE#
def reducefn ( dictofdicts ) : #NEWLINE# #INDENT# for key , value in dictofdicts . items ( ) : #NEWLINE# #INDENT# #INDENT# pass #NEWLINE#
a = np . array ( [ 1 , 2 , 1 , 3 , 3 , 3 , 0 ] ) #NEWLINE#
ax2 . plot ( [ x1 , x2 ] , [ y1 , y2 ] ) #NEWLINE#
f . close ( ) #NEWLINE#
updated_at = models . DateTimeField ( auto_now = True ) #NEWLINE#
array ( [ [ 0 , 2 , 3 ] , [ 0 , 0 , 6 ] , [ 0 , 0 , 0 ] ] ) #NEWLINE#
ax . plot ( x , np . arctan ( x ) , label = 'Inverse#SPACE#tan' ) #NEWLINE#
class AuthorForm ( forms . ModelForm ) : #NEWLINE# #NEWLINE# #NEWLINE# class Meta : #NEWLINE# #INDENT# #INDENT# model = Author #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# super ( AuthorForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# if self . instance . id : #NEWLINE# #INDENT# self . fields [ 'weight' ] . widget . attrs [ 'readonly' ] = True #NEWLINE# AuthorFormSet = modelformset_factory ( Author , extra = 2 , form = AuthorForm ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
path = '/' . join ( path . split ( '\\' ) ) #NEWLINE#
paw_code = { ( 0 ) : 'LF' , ( 1 ) : 'RH' , ( 2 ) : 'RF' , ( 3 ) : 'LH' } #NEWLINE#
print ( combs ( sampleip2 ) ) #NEWLINE#
pass #NEWLINE#
res [ k ] . append ( v ) #NEWLINE#
df_r . show ( ) #NEWLINE#
print ( g [ 0 ] [ 1 ] ) #NEWLINE#
data . insert ( bslindex , newcol ) #NEWLINE#
tk . Frame . __init__ ( self , master , height = 42 , width = 42 ) #NEWLINE#
urllib . parse . quote ( '/test' ) #NEWLINE# urllib . parse . quote ( '/test' , safe = '' ) #NEWLINE#
a . sort ( axis = 1 ) #NEWLINE#
print ( tuple ( list ( a ) ) ) #NEWLINE#
return [ i for i in range ( 1 , n ) if n % i == 0 ] #NEWLINE#
raise TypeError ( 'password#SPACE#must#SPACE#be#SPACE#a#SPACE#string' ) #NEWLINE#
cv2 . imshow ( 'Capture' , frame ) #NEWLINE#
os . uname ( ) #NEWLINE#
logger . info ( 'this#SPACE#is#SPACE#an#SPACE#INFO#SPACE#message' ) #NEWLINE#
return list ( tokenize ( stream ) ) #NEWLINE#
s . sendmail ( me , you , msg . as_string ( ) ) #NEWLINE#
X -= X . mean ( ) #NEWLINE#
qs = User . objects . filter ( groups__name = 'foo' ) #NEWLINE# print ( qs . query ) #NEWLINE#
json . dump ( json . load ( ifile ) , ofile , indent = 4 , ensure_ascii = False ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) #NEWLINE#
result = Image . new ( 'L' , img . size ) #NEWLINE#
cursor . execute ( * sql_and_params ) #NEWLINE#
form = ContactForm ( request . POST ) #NEWLINE#
print ( ( type ( each_key ) , type ( each_item ) ) ) #NEWLINE#
s2 . encode ( 'utf-8' ) #NEWLINE#
import xml . etree . cElementTree as ElementTree #NEWLINE#
( 307 , 79 , 37 ) ( 306.756 , 77.8384 , 37.1042 ) #NEWLINE#
li = [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 , 4 ] #NEWLINE# [ [ i for i , n in enumerate ( li ) if n == x ] for x in sorted ( set ( li ) ) ] #NEWLINE#
df . loc [ 'SRT2' ] = pd . Series ( mydict2 ) #NEWLINE#
json_obj = json . load ( metros_file ) #NEWLINE#
plt . cm . coolwarm ( t ) #NEWLINE#
plt . show ( ) #NEWLINE#
data = [ [ 'a' , 'b' ] , [ 'a' , 'c' ] , [ 'b' , 'd' ] ] #NEWLINE#
print ( repr ( Fraction ( f ) ) , Fraction ( f ) ) #NEWLINE#
print ( m . shape ) #NEWLINE#
foo = np . array ( [ 1 , 2 ] ) #NEWLINE#
def home ( request ) : #NEWLINE# #INDENT# return render_to_response ( 'index.html' , { 'variable' : 'world' } ) #NEWLINE#
Base . objects . instance_of ( ModelX ) | Base . objects . instance_of ( ModelY ) #NEWLINE#
data [ 'col6' ] = np . random . randint ( 0 , 2 , num ) . astype ( np . bool ) #NEWLINE#
df . apply ( pd . to_numeric , errors = 'coerce' ) #NEWLINE#
print ( '{:b}' . format ( 6 ) ) #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
raise AssertionError #NEWLINE#
response = requests . get ( url , headers = headers ) #NEWLINE# print ( response . content ) #NEWLINE#
self . _logger . setLevel ( logging . INFO ) #NEWLINE#
p . relative_to ( * p . parts [ : 2 ] ) #NEWLINE#
indices . sort ( key = lol [ 1 ] . __getitem__ ) #NEWLINE#
sys . setdefaultencoding ( 'utf-8' ) #NEWLINE#
a = np . array ( [ [ 2 , 3 ] , [ 1998 , 5 ] , [ 1998 , 7 ] ] ) #NEWLINE# res = np . array ( sorted ( a , key = lambda x : - x [ 0 ] ) ) #NEWLINE#
self . lock . release ( ) #NEWLINE#
draw ( ) #NEWLINE#
original_order = model . objects . value_list ( 'id' , flat = True ) . order_by ( 'order' ) #NEWLINE#
user . save ( ) #NEWLINE#
help ( 'MAPPINGMETHODS' ) #NEWLINE#
help ( 'SEQUENCEMETHODS1' ) #NEWLINE#
print ( match . group ( 2 ) ) #NEWLINE#
o . x += 5 #NEWLINE#
for ( i , j ) , ( k , v ) in zip ( list ( d . items ( ) ) , list ( c . items ( ) ) ) : #NEWLINE# #INDENT# pass #NEWLINE#
print ( line ) #NEWLINE#
b = bytearray ( 'BB#SPACE#A7#SPACE#F6#SPACE#9E' . replace ( '#SPACE#' , '' ) . decode ( 'hex' ) ) #NEWLINE#
return time . mktime ( datetime . date ( year , 1 , 1 ) . timetuple ( ) ) #NEWLINE#
a = list ( range ( 1 , size + 1 ) ) #NEWLINE#
eval ( strs ) #NEWLINE#
b = [ x for i , x in enumerate ( a ) if i != 3 ] #NEWLINE#
embed ( ) #NEWLINE#
b . append ( [ 0 , 0 , 1 ] ) #NEWLINE#
result . sort ( key = lambda x : - x [ 1 ] ) #NEWLINE#
return f ( * args , ** kargs ) #NEWLINE#
activate ( 'en-en' ) #NEWLINE#
print ( my_new_list ) #NEWLINE#
my_function ( 'hello' ) #NEWLINE#
regex . search ( 'honeysuckle' ) #NEWLINE#
mystr = '\n' . join ( [ ( '%s#SPACE#=#SPACE#%s' % ( k , v ) ) for k , v in mydict . items ( ) ] ) #NEWLINE#
gs . fit ( X , y ) #NEWLINE#
NM = 'x86_64-w64-mingw32-nm' #NEWLINE#
pool = mp . Pool ( ) #NEWLINE#
[ None for flag . value in [ bool ( o . name ) ] ] #NEWLINE#
df2 = pd . concat ( [ df , df ] , axis = 1 , keys = [ 'group1' , 'group2' ] ) #NEWLINE#
root . bind ( '<MouseWheel>' , self . zoomer ) #NEWLINE#
result = v . cumsum ( ) #NEWLINE#
any ( some_func ( x ) and False for x in some_list if x > 5 ) #NEWLINE#
raise ValueError ( 'Requires#SPACE#2D#SPACE#input' ) #NEWLINE#
idx = pd . date_range ( '09-01-2013' , '09-30-2013' ) #NEWLINE#
a = [ ] #NEWLINE# a [ 0 ] = 5 #NEWLINE#
cb = plt . colorbar ( ) #NEWLINE#
br = mechanize . Browser ( ) #NEWLINE#
a = a . set_index ( 'begin' ) . resample ( rule = '5min' ) . first ( ) . reset_index ( ) #NEWLINE#
User . query . all ( ) #NEWLINE#
file . write ( old_lines ) #NEWLINE#
print ( list ( myDict . values ( ) ) [ i ] [ j ] ) #NEWLINE#
logging . basicConfig ( format = format , level = logging . INFO ) #NEWLINE#
import yoursubfile #NEWLINE#
tuple ( map ( operator . add , a , b ) ) #NEWLINE#
result [ 'sname' ] = res and res [ 0 ] [ 'sname' ] #NEWLINE#
print ( line ) #NEWLINE#
return collections . Counter ( lst ) #NEWLINE#
return Session . query ( FooClass ) . filter ( FooClass . somevalue == 8 ) . all ( ) #NEWLINE#
[ 'house' , 'N' , 'red' , 'A' , 1 ] #NEWLINE#
x . transpose ( 1 , 2 , 0 ) . reshape ( 2 , 4 ) #NEWLINE#
plt . figure ( ) #NEWLINE#
axis . plot ( x_data , y_data ) #NEWLINE#
return result . decode ( 'utf-8' ) #NEWLINE#
fig . subplots_adjust ( hspace = 0.5 , wspace = 0.001 ) #NEWLINE#
[ ( 4 , 'b' ) , ( 10 , 'a' ) ] #NEWLINE#
return [ fact ( a ) for a in args ] #NEWLINE#
parse_time ( '12hr' ) #NEWLINE#
list ( gb . keys ( ) ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
random_state = random . choice ( states . split ( ) ) #NEWLINE#
sys . path . append ( PATH ) #NEWLINE#
yield str ( x ) + 'a' #NEWLINE#
17.2 , 16.9 , 11.5 , 11.2 , 11.3 , 11.4 , 7.1 , 12.9 , 14.4 , 13.1 , 13.2 , 12.5 #NEWLINE#
transaction . rollback ( ) #NEWLINE#
views . py #NEWLINE#
sys . exit ( main ( 'some_attr' ) ) #NEWLINE#
list ( B . intersection ( A ) ) + list ( set ( A ) - B ) #NEWLINE#
d2 = { 'a' : 10 , 'c' : 3 } #NEWLINE#
parser . add_argument ( '-v' , '--verbose' , action = 'count' , default = 0 ) #NEWLINE#
with open ( 'output_test_file.txt' , 'w' ) as out_file : #NEWLINE# #INDENT# out_file . write ( replace_all ( text , spelling_dict ) ) #NEWLINE#
return all ( isinstance ( s , str ) for s in obj ) #NEWLINE#
print ( '{0:>10}:#SPACE#{1:#SPACE#.7}' . format ( t [ 1 ] , s ) ) #NEWLINE#
print ( dir ( foo ) ) #NEWLINE#
out = np . zeros ( [ n , len ( arrays ) ] , dtype = dtype ) #NEWLINE#
it = iter ( function , sentinel ) #NEWLINE#
objtype = 'simple' #NEWLINE#
print ( pd . to_datetime ( df . col2 , format = '%Y%m%d%H%M%S' ) ) #NEWLINE#
x = x [ ( 0 ) , : , : ] #NEWLINE#
c = list ( itertools . product ( a , b ) ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
ax . scatter ( xs , ys , zs , c = 'b' , marker = 'o' ) #NEWLINE#
a . insert ( randint ( 0 , len ( a ) ) , x ) #NEWLINE#
lis = [ { 'name' : 1 } , { 'name' : None } , { 'name' : 0 } , { 'name' : 2 } ] #NEWLINE# sorted ( lis , key = lambda a : Infinity ( ) if a [ 'name' ] is None else a [ 'name' ] ) #NEWLINE#
img = Image . open ( FILENAME ) . convert ( 'RGBA' ) #NEWLINE#
c = [ i for i in a if i in b ] #NEWLINE#
print ( 'ok' ) #NEWLINE#
print ( 'empty' ) #NEWLINE#
my_string . split ( ) [ : 4 ] #NEWLINE#
d = dict ( input ( ) . split ( ) for _ in range ( n ) ) #NEWLINE#
conditions = cherrypy . request . config . get ( 'auth.require' , None ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
plt . fill_between ( x , y - thickness , y + thickness , color = 'blue' ) #NEWLINE#
s = 'mep' #NEWLINE# list ( s ) #NEWLINE#
df #NEWLINE#
_stack . pop ( ) #NEWLINE#
x [ 'a' ] [ 'b' ] [ 'c' ] [ 'd' ] #NEWLINE#
ax = plt . subplot ( 1 , 1 , 1 ) #NEWLINE#
sys . path . append ( here ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
doctest . testmod ( ) #NEWLINE#
print ( np . array ( result ) ) #NEWLINE#
datetime . strptime ( '2012-06-25#SPACE#01:17:40.273000' , '%Y-%m-%d#SPACE#%H:%M:%S.%f' #NEWLINE# ) . strftime ( '%m-%d-%Y' ) #NEWLINE#
return opener . open ( req ) #NEWLINE#
b , a = sorted ( ( a , b ) , key = len ) #NEWLINE#
matplotlib . rc ( 'axes.formatter' , useoffset = False ) #NEWLINE#
super ( bidict , self ) . __delitem__ ( key ) #NEWLINE#
return Response ( status = 200 , data = data ) #NEWLINE#
self . __dict__ . update ( kwargs ) #NEWLINE#
data = json . load ( data_file ) #NEWLINE#
return len ( list ( filter ( str . islower , string ) ) ) #NEWLINE#
logger = logging . getLogger ( 'my_logger' ) #NEWLINE#
assert a . shape [ 0 ] == b . shape [ 0 ] , 'First#SPACE#dimension#SPACE#is#SPACE#different' #NEWLINE#
test_words = [ 'a' , 'foo' , 'bar' , 'baz' , 'golf' , 'cart' , 'fred' ] #NEWLINE#
dayDict = dict . fromkeys ( weekList , 0 ) #NEWLINE#
output += np . sum ( integrand ( a ) , axis = 1 ) #NEWLINE#
raise ValidationError ( self . error_messages [ 'invalid' ] ) #NEWLINE#
login ( request , user ) #NEWLINE#
itemgetter ( 1 , 3 , 2 , 5 ) ( my_dict ) #NEWLINE#
df . update ( g . transform ( 'max' ) ) #NEWLINE#
label_idx = np . searchsorted ( all_labels , labels ) #NEWLINE#
( 1 - 1 / Decimal ( 7000000 ) ) . ln ( ) #NEWLINE#
win . update_idletasks ( ) #NEWLINE#
return self . _file . tell ( ) - self . _offset #NEWLINE#
ax . grid ( ) #NEWLINE# plt . show ( ) #NEWLINE#
df . loc [ 'y' ] = pandas . Series ( { 'a' : 1 , 'b' : 5 , 'c' : 2 , 'd' : 3 } ) #NEWLINE#
return '%s#SPACE#%s' % ( user . first_name , user . last_name ) #NEWLINE#
obj . __class__ . __dict__ [ 1 ] #NEWLINE#
ax . legend ( loc = 'upper#SPACE#right' ) #NEWLINE#
mydict = { 'a' : [ 1 , 2 , 5 ] , 'b' : [ 1 , 2 , 10 ] } #NEWLINE#
sys . stdout = open ( 'c:\\goat.txt' , 'w' ) #NEWLINE#
KT [ ( KT . ix [ : , 3 : 6 ] > 0 ) . any ( 1 ) ] #NEWLINE#
session1 . commit ( ) #NEWLINE#
qW = np . convolve ( sPSF , sQ ) #NEWLINE#
"""#SPACE#Return#SPACE#Shape#SPACE#of#SPACE#the#SPACE#Array#SPACE#based#SPACE#on#SPACE#shape#SPACE#par#SPACE#value.#SPACE#""" #NEWLINE#
"""#SPACE#Copy#SPACE#data#SPACE#from#SPACE#src#SPACE#numpy#SPACE#array#SPACE#to#SPACE#dst.#SPACE#""" #NEWLINE#
test = [ '80010' , '80030' , '80050' ] #NEWLINE#
return all ( y - x >= 2 for x , y in zip ( locs , locs [ 1 : ] ) ) #NEWLINE#
b = db . ReferenceProperty ( ) #NEWLINE#
labels = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
{ { name } } #NEWLINE#
saved . append ( element ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
return Response ( 'Hello#SPACE#world!' ) #NEWLINE#
env . Program ( 'say_hello' , sources ) #NEWLINE#
data = data [ keep_mask ] #NEWLINE#
temp_path = os . path . join ( temp_dir , 'temp_file_name' ) #NEWLINE#
Base . metadata . create_all ( engine ) #NEWLINE#
'Still#SPACE#References' , 'Video#SPACE#References' , 'Sound' , 'Sound#SPACE#References' #NEWLINE#
lst = [ [ 'a' , 'b' , 'c' ] , [ 1 , 2 , 3 ] , [ 'x' , 'y' , 'z' ] ] #NEWLINE#
[ list ( g ) for k , g in groupby ( nums , key = lambda n , c = count ( ) : n - next ( c ) ) ] #NEWLINE#
"""base""" #NEWLINE#
post2 . delete ( ) #NEWLINE#
request . session = { } #NEWLINE#
p . stdin . close ( ) #NEWLINE#
x = np . arange ( - 10.0 , 10.0 , 0.1 ) #NEWLINE#
ip_list . append ( link [ 'addr' ] ) #NEWLINE#
type ( s ) #NEWLINE#
self . assertEqual ( reference , test ) #NEWLINE#
main ( ) #NEWLINE#
os . setsid ( ) #NEWLINE#
x [ 1 ] #NEWLINE#
print ( 'Processing#SPACE#{e}' . format ( e = ET . tostring ( elem ) ) ) #NEWLINE#
def clean_password ( self ) : #NEWLINE# #INDENT# data = self . cleaned_data [ 'password' ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# return data #NEWLINE#
nx . draw_networkx ( G , pos = pos ) #NEWLINE#
warnings . simplefilter ( 'ignore' , category = sa_exc . SAWarning ) #NEWLINE#
mpl . rcParams [ 'axes.color_cycle' ] = [ 'r' , 'k' , 'c' ] #NEWLINE#
np . dot ( arr_pairs , xy ) #NEWLINE#
dline = dline . strip ( ) #NEWLINE#
list ( range ( x , x + 10 * y , y ) ) #NEWLINE#
test_A = np . array ( [ [ 1 , 2 , 0 ] , [ 0 , 4 , 3 ] ] ) #NEWLINE#
profile . run ( 'testUrllib2()' ) #NEWLINE#
df . xs ( 'a' , level = 0 ) #NEWLINE#
firefoxProfile . set_preference ( 'dom.max_script_run_time' , 10 ) #NEWLINE#
df = pd . DataFrame ( ls , columns = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' ] #NEWLINE# ) . set_index ( 'a' ) #NEWLINE# df #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
setattr ( x , 'attr_name' , s ) #NEWLINE#
print ( 'Hello#SPACE#from#SPACE#CB!' ) #NEWLINE#
DF . dtypes #NEWLINE#
cmd = [ '/path/to/casperjs' , '/path/to/doSomething.js' , 'args' ] #NEWLINE# response = subprocess . check_output ( cmd , shell = True , stderr = subprocess . STDOUT ) #NEWLINE#
self . fields [ 'my_field_%i' % i ] = forms . Charfield ( ) #NEWLINE#
{ 'C' : 'BDFBDF1' , 'E' : 'EADEAC' , 'D' : 'DDDFEB' , 'O' : 'CEDEAE2' } #NEWLINE#
dedup = [ k [ i ] for i in range ( len ( k ) ) if i == 0 or k [ i ] != k [ i - 1 ] ] #NEWLINE#
plt . xticks ( xx , ll ) #NEWLINE#
r . search ( '#SPACE#2011#SPACE#' ) #NEWLINE#
count += 1 #NEWLINE#
fig . show ( ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 0 , 4 ) , ( 2 , 3 , 0 ) , ( 3 , 4 , 1 ) , ( 4 , 2 , 3 ) #NEWLINE#
parser . add_option ( '-t' , '--test' , action = 'append' ) #NEWLINE#
dt = tz . localize ( dt ) #NEWLINE#
myiterator = iter ( mylist ) #NEWLINE#
m . match ( 'oooo' , 2 ) . span ( ) #NEWLINE#
book . save ( filename ) #NEWLINE#
date = models . DateField ( ) #NEWLINE#
3 , array ( [ 0 , 1 , 2 ] ) , array ( [ 4 , 5 , 6 ] ) #NEWLINE#
temp . flush ( ) #NEWLINE#
db . ProductData . update ( { '_id' : p [ '_id' ] } , { '$inc' : { 'd.a' : 1 } } , upsert = False , #NEWLINE# multi = False ) #NEWLINE#
sum ( p * q for p , q in zip ( vector1 , vector2 ) ) #NEWLINE#
print ( "don't#SPACE#write#SPACE#this" ) #NEWLINE#
d = defaultdict ( int ) #NEWLINE#
normalize_joints ( df , 'torso' ) #NEWLINE#
array ( [ [ 1 , 2 , 3 ] , [ 0 , 5 , 6 ] , [ 0 , 0 , 9 ] ] ) #NEWLINE#
p . wait ( ) #NEWLINE#
print ( '%s:\t%s' % ( time_string , cal . parseDT ( time_string , now ) [ 0 ] ) ) #NEWLINE#
b = ( a + '.' ) [ : - 1 ] #NEWLINE#
class LimitGenericSitemap ( GenericSitemap ) : #NEWLINE# #INDENT# limit = 2000 #NEWLINE#
zipstream . seek ( 0 ) #NEWLINE#
df #NEWLINE#
print ( 'Genesis' ) #NEWLINE#
print ( '%s.%s.%s.%s' % tuple ( [ s . zfill ( 3 ) for s in ip . split ( '.' ) ] ) ) #NEWLINE#
print ( '\r' , end = '#SPACE#' ) #NEWLINE#
return '%s#SPACE#%s' % ( self . app_id . app_name , self . environ_name ) #NEWLINE#
do_something ( ) #NEWLINE#
sys . path . insert ( 0 , PROJECT_ROOT ) #NEWLINE#
set ( ( 'foo' , ) ) #NEWLINE# set ( [ 'foo' ] ) #NEWLINE#
models . CharField ( null = True ) #NEWLINE#
assert 'deprecated' in str ( w [ - 1 ] . message ) #NEWLINE#
writer = csv . DictWriter ( csvfile , fieldnames = fieldnames ) #NEWLINE#
self . fig , self . ax = plt . subplots ( ) #NEWLINE#
json . dump ( jsonDict , f , indent = 4 ) #NEWLINE#
items . append ( ( name , '' , '' , name ) ) #NEWLINE#
a . writerows ( data ) #NEWLINE#
jez ( df1 ) #NEWLINE#
ret = func ( * args , ** kwargs ) #NEWLINE#
a = [ ( 'ten' , 10 ) , ( 'hundred' , 100 ) ] #NEWLINE#
rx . findall ( 'fgh' ) #NEWLINE#
r = input ( 'What#SPACE#you#SPACE#say?\n' ) #NEWLINE#
print ( list ( result ) ) #NEWLINE#
x = np . array ( [ 4 , 3 , 2 , 1 ] ) #NEWLINE#
[ random . choice ( 'abcde' ) for _ in range ( 3 ) ] #NEWLINE#
out = np . argwhere ( binary_dilation ( Arr , np . ones ( ( 3 , 3 ) ) ) & img ) #NEWLINE#
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
k = k [ ... , np . newaxis ] #NEWLINE#
l . append ( 'orange' ) #NEWLINE#
l . append ( 'grape' ) #NEWLINE#
l . append ( 'banana' ) #NEWLINE#
l . append ( 'mango' ) #NEWLINE#
l . append ( 'kiwi' ) #NEWLINE#
user = models . ForeignKey ( User ) #NEWLINE#
password . send_keys ( 'Pa55worD' ) #NEWLINE#
win32gui . SendMessage ( hwnd , win32con . WM_GETTEXT , buf_size , buf ) #NEWLINE#
heapq . nlargest ( 3 , ( random . gauss ( 0 , 1 ) for _ in range ( 100 ) ) ) #NEWLINE#
ax = plt . subplot ( 111 ) #NEWLINE#
cdf1 [ 'Location' ] = dcol . apply ( lambda x : x [ 0 : 4 ] ) #NEWLINE#
seq . append ( line ) #NEWLINE#
add_chain . apply_async ( ) #NEWLINE#
ax . legend ( ) #NEWLINE# plt . show ( ) #NEWLINE#
b = sum ( a ) #NEWLINE#
np . hsplit ( a , 2 ) #NEWLINE#
img = Image . open ( image_path ) #NEWLINE#
kwargs = { 'hometown' : 'New#SPACE#York' , 'university' : 'USC' } #NEWLINE# User . query . filter_by ( ** kwargs ) #NEWLINE# User . query . filter_by ( hometown = 'New#SPACE#York' , university = 'USC' ) #NEWLINE#
print ( soup . findAll ( 'tr' ) ) #NEWLINE#
print ( nx . shortest_path_length ( graph , source = 'Robots-1' , target = #NEWLINE# 'awesomeness-12' ) ) #NEWLINE#
return render ( request , template , context ) #NEWLINE#
cols_to_norm = [ 'Age' , 'Height' ] #NEWLINE# survey_data [ cols_to_norm ] = survey_data [ cols_to_norm ] . apply ( lambda x : ( x - #NEWLINE# x . mean ( ) ) / ( x . max ( ) - x . min ( ) ) ) #NEWLINE#
substrings = data . read ( ) . split ( ) #NEWLINE#
cur = conn . cursor ( ) #NEWLINE#
dbapi_conn . commit ( ) #NEWLINE#
print ( etree . tostring ( cityModel , pretty_print = True ) ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
return self . cursor #NEWLINE#
df . apply ( zscore ) #NEWLINE#
first_name = forms . CharField ( max_length = 256 ) #NEWLINE#
pickle . dump ( data , output ) #NEWLINE#
price = [ d [ 'price' ] for d in list_of_dicts ] #NEWLINE#
driver . find_element_by_id ( 'tinymce' ) . send_keys ( payload ) #NEWLINE#
plt . subplot ( 211 ) #NEWLINE#
self . handler . close ( ) #NEWLINE#
z . append ( y ) #NEWLINE#
env . roles = [ 'apache' ] #NEWLINE#
math . factorial ( 10 ) #NEWLINE#
os . path . exists ( destination ) #NEWLINE#
key2 = models . IntegerField ( ) #NEWLINE#
self . master . columnconfigure ( 5 , weight = 1 ) #NEWLINE#
import dateutil . parser #NEWLINE#
for item in list [ : - 1 ] : #NEWLINE# #INDENT# print ( 'Not#SPACE#last:#SPACE#' , item ) #NEWLINE# print ( 'Last:#SPACE#' , list [ - 1 ] ) #NEWLINE#
self . buffer . seek ( 0 ) #NEWLINE#
print ( a_list ) #NEWLINE#
a2 . set_xticks ( [ ] ) #NEWLINE#
campaignID = item . get ( 'CampaignID' ) #NEWLINE#
res = optimize . minimize ( f , x , method = 'BFGS' , jac = True , args = [ a ] ) #NEWLINE#
return QtCore . QVariant ( '{0}' . format ( self . datatable . iget_value ( i , j ) ) ) #NEWLINE#
matcher = re . compile ( '^[#SPACE#\\t]*#define(.*\\\\\\n)+.*$' , re . MULTILINE ) #NEWLINE#
print ( df ) #NEWLINE#
MyMacro ( indirect ) #NEWLINE#
print ( str ( delta ) ) #NEWLINE#
print ( '%s\n\t%s\n' % ( l . get_text ( ) , l . get_attribute ( 'href' ) ) ) #NEWLINE#
sum ( map ( lambda i : bool ( i and i . pop ( 0 ) and i ) + len ( i ) , x ) ) #NEWLINE#
thingy = doc . find ( 'timeSeries' ) #NEWLINE#
np . resize ( cnt , ( 3 , 3 ) ) #NEWLINE#
conn . execute ( 'rollback#SPACE#to#SPACE#savepoint#SPACE#spTest;' ) #NEWLINE# conn . execute ( 'insert#SPACE#into#SPACE#example#SPACE#values#SPACE#(?,#SPACE#?);' , ( 5 , 205 ) ) #NEWLINE#
import module as name #NEWLINE#
a = a . replace ( '1' , '%s' ) #NEWLINE#
MyButton2 . grid ( row = 1 , column = 0 ) #NEWLINE#
html_content = render_to_string ( 'the_template.html' , { 'varname' : 'value' } ) #NEWLINE#
struct . unpack ( '<IIIII' , caps ) #NEWLINE#
fig . tight_layout ( ) #NEWLINE#
[ '10/02/2009' , '07/22/2009' , '09/08/2008' , '09/09/2008' , '11/04/2010' , #NEWLINE# '03/07/2009' , '09/01/2010' ] #NEWLINE#
space = [ 'apples' , 'cherries' ] #NEWLINE#
list_of_dict . append ( mydict ) #NEWLINE#
s = np . sum ( a ) #NEWLINE#
output . close ( ) #NEWLINE#
sum = foo ( ) #NEWLINE#
test = df . head ( 1 ) #NEWLINE#
df [ 'e-mail' ] , df [ 'date' ] = zip ( * map ( process_index , df . index ) ) #NEWLINE# df . set_index ( [ 'e-mail' , 'date' ] ) #NEWLINE#
super ( Fruit , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
inst1 . i = 4 #NEWLINE#
x = [ 'this' , 'is' , 'the' , 'first' , 'list' ] #NEWLINE#
C = np . array ( [ [ 2 , 2 ] , [ 3 , 1 ] , [ 5 , 2 ] ] ) #NEWLINE#
float_to_str ( 5e-08 ) #NEWLINE#
inputfile = open ( 'test.dat' ) #NEWLINE# outputfile = open ( 'test.csv' , 'w' ) #NEWLINE# reps = { '"NAN"' : 'NAN' , '"' : '' , '0-' : '0,' , '1-' : '1,' , '2-' : '2,' , '3-' : #NEWLINE# '3,' , '4-' : '4,' , '5-' : '5,' , '6-' : '6,' , '7-' : '7,' , '8-' : '8,' , '9-' : #NEWLINE# '9,' , '#SPACE#' : ',' , ':' : ',' } #NEWLINE# for i in range ( 4 ) : #NEWLINE# #INDENT# next ( inputfile ) #NEWLINE# for line in inputfile : #NEWLINE# #INDENT# outputfile . writelines ( data_parser ( line , reps ) ) #NEWLINE# inputfile . close ( ) #NEWLINE# outputfile . close ( ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
firefoxProfile . set_preference ( 'permissions.default.image' , 2 ) #NEWLINE#
f ( * a ) #NEWLINE#
f2 . write ( Lines [ i + 1 ] ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'settings' #NEWLINE#
cursor = cnx . cursor ( ) #NEWLINE#
plt . figure ( figsize = ( 12 , 6 ) ) #NEWLINE#
x += 1 #NEWLINE#
linesamples . add ( int ( 4 * i + 3 ) ) #NEWLINE#
super ( ) . __setattr__ ( attr , value ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
thisTable . open ( mode = 'read-only' ) #NEWLINE#
"""Convert#SPACE#a#SPACE#Cygwin#SPACE#path#SPACE#to#SPACE#a#SPACE#Windows#SPACE#path""" #NEWLINE#
df = pd . DataFrame ( { 'A' : [ 7001 , 8001 , 9001 ] } ) #NEWLINE#
a = 1 if b else 0 #NEWLINE#
any ( c . islower ( ) for c in 'Word' ) #NEWLINE#
info [ 1 ] [ 0 ] == 3 #NEWLINE#
randprime ( a , b ) #NEWLINE#
a = [ 'b' , 'c' ] #NEWLINE#
wsgi_handler . run ( wsgi_app ) #NEWLINE#
lib = ctypes . CDLL ( 'embed.dll' ) #NEWLINE#
parser . add_argument ( '-n' , '--name' ) #NEWLINE#
parser . add_argument ( '-c' , '--course' ) #NEWLINE#
print ( a [ i ] - a [ i - 1 ] ) #NEWLINE#
'G' , 'D' , '\x00' , '\x00' , '\x00' , '\x00' #NEWLINE#
'\x08' , '×' , 'c' , 'ø' , 'ÿ' , 'ÿ' #NEWLINE#
'Y' , 'ç' , '\x00' , '\x00' , '\x00' , '\x00' #NEWLINE#
dict ( ( x , x * x ) for x in range ( 10 ) ) #NEWLINE#
rule_list . append ( value ( ) ) #NEWLINE#
df [ 'Mathscore' ] = df . Mathscore . map ( d ) #NEWLINE#
output = [ ] #NEWLINE# for lst in lists : #NEWLINE# #INDENT# output . append ( max ( flatlist , key = lambda x : x [ 1 ] ) ) #NEWLINE#
raise ValueError ( 'Could#SPACE#not#SPACE#find#SPACE#a#SPACE#value#SPACE#for#SPACE#q' ) #NEWLINE#
return __authentication_required #NEWLINE#
plt . show ( ) #NEWLINE#
d . pop ( key , None ) #NEWLINE#
text = Paragraph ( 'long#SPACE#line' , styles [ 'Normal' ] ) #NEWLINE#
soup = BeautifulSoup ( text ) #NEWLINE#
re . match ( '[a-zA-Z][\\w-]*$' , '0A' ) #NEWLINE# re . match ( '[a-zA-Z][\\w-]*$' , '!A_B' ) #NEWLINE#
data = np . arange ( 27 ) . reshape ( 3 , 3 , 3 ) #NEWLINE#
print ( ( MyEnum ( 'aaa' ) , MyEnum ( 123 ) ) ) #NEWLINE#
tfidf_matrix = tfidf . fit_transform ( corpus ) #NEWLINE#
doc_topic_distrib = lda . transform ( tf ) #NEWLINE#
return list ( set ( ) . union ( * x ) ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = '3d' ) #NEWLINE# ax . scatter ( XS , YS , ZS ) #NEWLINE#
x = np . random . random ( 13876 ) #NEWLINE#
( 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 ) == 0 , 1 , 3 , 6 , 10 , 15 , 21 , 28 #NEWLINE#
facebook . load_signed_request ( self . request . get ( 'signed_request' ) ) #NEWLINE#
raise TypeError ( 'index#SPACE#must#SPACE#be#SPACE#int#SPACE#or#SPACE#slice' ) #NEWLINE#
print ( is_arr_in_list ( mylistarr [ 2 ] , mylistarr ) ) #NEWLINE#
S = [ fnx ( ) for c in range ( 5 ) ] #NEWLINE#
print ( 'Started#SPACE#with#SPACE#http' ) #NEWLINE#
self . Show ( True ) #NEWLINE#
ax . set_xlim ( [ 0 , x . max ( ) + 1 ] ) #NEWLINE#
logger = logging . getLogger ( 'simple_example' ) #NEWLINE#
b = numpy . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
device1 = MonkeyRunner . waitForConnection ( '' , devices [ 0 ] . split ( '\t' ) [ 0 ] ) #NEWLINE#
assertEquals ( 'pineapple' , after ( set , 'pi' ) ) #NEWLINE#
ob . stackoverflow ( ) #NEWLINE#
plt . plot ( [ 1 , 2 , 6 , 4 ] ) #NEWLINE#
x = np . random . randn ( 20 , 3 ) #NEWLINE#
return len ( struct . unpack ( fmt , '\x00' * struct . calcsize ( fmt ) ) ) #NEWLINE#
data = np . array ( [ 0 , 2 , 7 , 6 , 3 , 1 , 4 , 5 ] ) #NEWLINE#
a180 [ 0 , 0 , 0 ] #NEWLINE#
print ( 'Day#SPACE#old#SPACE#bread,#SPACE#50%#SPACE#sale#SPACE#' + 'today' ) #NEWLINE#
print ( s . rindex ( 'other' ) ) #NEWLINE#
print ( suitability ( node , 'foo' ) ) #NEWLINE#
raise ValidationError ( self . error_messages [ 'invalid_image' ] ) #NEWLINE#
del sys . modules [ 'numpy' ] #NEWLINE#
[ 0 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 ] #NEWLINE#
y = np . array ( [ 2 , 1 , 5 , 2 ] ) #NEWLINE#
urllib . parse . urlencode ( query_pairs ) #NEWLINE#
fields = 'id' , 'entities' , 'entity_to_alert_map' #NEWLINE#
return '%s' % self . id #NEWLINE#
from flask . ext . sqlalchemy import event #NEWLINE#
out . write ( f . read ( ) ) #NEWLINE#
[ 3 , 4 , 5 , 6 ] #NEWLINE#
t = list ( set ( q ) & set ( w ) ) #NEWLINE#
net [ 'in' ] . outputbuffer [ net [ 'in' ] . offset ] #NEWLINE#
resp = c . get ( '/someurl' ) #NEWLINE#
df = df . reset_index ( ) . set_index ( [ 'index' , 'Sub-Product' ] ) #NEWLINE# df #NEWLINE#
print ( exit ) #NEWLINE#
string_for_printing = json . dumps ( original_string ) . strip ( '"' ) #NEWLINE#
self . _socket . close ( ) #NEWLINE#
s = pygame . Surface ( ( 16 , 16 ) , flags = pygame . SRCALPHA ) #NEWLINE#
G . remove_edges_from ( G . selfloop_edges ( ) ) #NEWLINE#
timetup = time . gmtime ( ) #NEWLINE#
r . sub ( '<ul>\\1</ul>' , string_with_li_tags ) #NEWLINE#
logging . warning ( 'tbllalfhldfhd,#SPACE#warning.' ) #NEWLINE#
values = [ '2014' , '08' , '17' , '18' , '01' , '05' ] #NEWLINE#
[ 'uncorn' ] #NEWLINE#
print ( t , '\n' , res , '=' , bool ( res ) , '\n' ) #NEWLINE#
plt . scatter ( x [ : , ( 0 ) ] , x [ : , ( 1 ) ] ) #NEWLINE#
self . var1 = self . var1 + self . var2 #NEWLINE#
result . append ( { 'cat' : cat , 'count' : len ( ids ) , 'ids' : ids } ) #NEWLINE#
gray = cv2 . imread ( image_path , cv2 . CV_LOAD_IMAGE_GRAYSCALE ) #NEWLINE#
df = pd . read_csv ( filename , engine = 'c' , dtype = float32_cols ) #NEWLINE#
print ( interleave ( a , b ) ) #NEWLINE#
matplotlib . rcParams [ 'text.latex.preamble' ] = [ '\\usepackage{amsmath}' ] #NEWLINE#
stdin . flush ( ) #NEWLINE#
print ( 'exception#SPACE#thrown#SPACE#ok.' ) #NEWLINE#
os . chdir ( '/home/d/d_ohri/Desktop/python' ) #NEWLINE#
df = pd . DataFrame ( { 'A' : L } ) #NEWLINE# df #NEWLINE# df . A . apply ( lambda x : pd . Series ( 1 , x ) ) . fillna ( 0 ) . astype ( int ) #NEWLINE#
d = [ ( x if x is None else c . pop ( 0 ) ) for x in a ] #NEWLINE#
pyplot . locator_params ( nticks = 4 ) #NEWLINE#
L = [ 1 , 1 , 1 , - 1 , - 1 , 1 , - 1 , 1 , 1 , - 1 , - 1 , - 1 , 1 , - 1 ] #NEWLINE#
cron = CronTab ( '<username>' ) #NEWLINE#
r = tree . xpath ( '/foo/bar' ) #NEWLINE#
f = open ( 'blah.txt' , 'w' ) #NEWLINE#
date . replace ( tzinfo = pytz . utc ) #NEWLINE#
now = datetime . datetime . now ( ) #NEWLINE#
print ( 'foo' ) #NEWLINE#
menu . get ( ans , [ None , invalid ] ) [ 1 ] ( ) #NEWLINE#
self . window . add ( self . image ) #NEWLINE#
x = { 'x1' : 1 , 'x2' : 2 , 'x3' : 3 } #NEWLINE#
myList = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
img = Image . new ( 'RGB' , ( 200 , 200 ) , 'white' ) #NEWLINE#
super ( PersonForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
from reportlab . pdfgen . canvas import Canvas #NEWLINE#
return float ( value ) #NEWLINE#
mtransforms . Transform . __init__ ( self ) #NEWLINE#
newlist . append ( v + str ( count + 1 ) if totalcount > 1 else v ) #NEWLINE#
print ( '{0:f}#SPACE#{1:f}' . format ( True , False ) ) #NEWLINE#
term = urllib . parse . quote ( "'" + term + "'" ) #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 4 ) , ( 2 , 3 , 0 ) , ( 3 , 4 , 1 ) , ( 4 , 0 , 3 ) #NEWLINE#
apply_labels ( h , labels ) #NEWLINE#
df2 = pd . read_csv ( StringIO ( txt2 ) ) #NEWLINE#
mod = Blueprint ( 'landing' , __name__ ) #NEWLINE#
return super ( BasicPublicView , self ) . dispatch ( request , * args , ** kwargs ) #NEWLINE#
plt . imshow ( flip_ud_lena , cmap = plt . cm . gray ) #NEWLINE#
show ( ) #NEWLINE#
canvas . Canvas . __init__ ( self , * args , ** kwargs ) #NEWLINE#
print ( dog . lemma_names ( ) ) #NEWLINE#
ax . plot_surface ( X , Y , Z , rstride = 8 , cstride = 8 , alpha = 0.3 ) #NEWLINE#
return MyFancyList ( super ( ) . __add__ ( * args , ** kwargs ) ) #NEWLINE#
df [ 'Firstlevel' ] = 'Foo' #NEWLINE#
return HttpResponse ( simplejson . dumps ( chat ) , mimetype = 'application/json' ) #NEWLINE#
for k , v in mydict . items ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
[ 1 , 2 , 3 , 4 , 0 ] #NEWLINE#
print ( msg [ 'text' ] . encode ( encoding ) ) #NEWLINE#
sys . exit ( ) #NEWLINE#
connection = pika . BlockingConnection ( pika . ConnectionParameters ( 'localhost' ) ) #NEWLINE#
foo . save ( ) #NEWLINE#
request . GetElement ( 'fields' ) . AppendValue ( 'PX_LAST' ) #NEWLINE#
tk . Canvas . move ( self , * args , ** kwargs ) #NEWLINE#
df = pd . DataFrame ( rows_list , columns = [ 'date' , 'symbol' , 'action' , 'value' ] ) #NEWLINE#
c = b #NEWLINE#
print ( s . groupby ( [ s . index . weekday_name , s . index . hour ] ) . sum ( ) ) #NEWLINE#
fig , axes = plt . subplots ( nrows = 2 ) #NEWLINE#
return datetime . strptime ( value , format ) #NEWLINE#
print ( parser . parse_args ( ) ) #NEWLINE#
urllib . request . install_opener ( urllib . request . build_opener ( LowLevelHTTPHandler ) ) #NEWLINE#
client_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
yshape = list ( data . shape ) #NEWLINE#
progbar . add ( X_batch . shape [ 0 ] , values = [ ( 'train#SPACE#loss' , loss ) , ( 'acc' , acc ) ] ) #NEWLINE#
np . set_printoptions ( precision = 3 , suppress = True ) #NEWLINE#
from PyQt4 . QtGui import * #NEWLINE#
list ( x * x for x in range ( 10 ) ) #NEWLINE#
print ( 'chart' ) #NEWLINE#
Test . static_init ( ) #NEWLINE#
oldperson . hello ( ) #NEWLINE#
func ( one = 1 , two = 2 ) #NEWLINE#
def find_lowest ( ids ) : #NEWLINE# #INDENT# return min ( [ val for obj in ids for key , val in list ( obj . items ( ) ) if key == #NEWLINE# 'id' ] ) #NEWLINE#
a = np . arange ( 1 , 7 ) #NEWLINE#
print ( do_to_file ( filename ) if filename else do_to_stdout ( ) ) #NEWLINE#
print ( 'operation#SPACE#are#SPACE#now#SPACE#atomic' ) #NEWLINE#
pass #NEWLINE#
print ( 'SelectFileForValidation#SPACE#is#SPACE#found' ) #NEWLINE#
print ( 'FindTheUploadedFile#SPACE#is#SPACE#not#SPACE#found' ) #NEWLINE#
print ( 'FindTheUploadedFile#SPACE#is#SPACE#found' ) #NEWLINE#
print ( 'ValidateFileButton#SPACE#is#SPACE#not#SPACE#found' ) #NEWLINE#
print ( 'ValidateFileButton#SPACE#is#SPACE#found' ) #NEWLINE#
diffs = dict ( ( k , ranks2 [ k ] - ranks1 [ k ] ) for k in dict1 ) #NEWLINE#
kernel = np . uint8 ( [ [ 1 , 1 , 1 ] , [ 1 , 10 , 1 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
numpy . atleast_2d ( x [ x [ : , ( 2 ) ] == 0 ] ) #NEWLINE#
indices = np . empty ( ( m * n , 8 ) , dtype = int ) #NEWLINE#
heapq . heapify ( h ) #NEWLINE#
print ( myList [ - 1 ] ) #NEWLINE#
print ( myList [ - 1 ] ) #NEWLINE#
json . loads ( dictString ) #NEWLINE#
dictish . update ( [ ( 'orange' , 3 ) , ( 'green' , 4 ) ] ) #NEWLINE#
fp . write ( part . get_payload ( decode = True ) ) #NEWLINE#
list1 = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
return open ( filename , * args , ** kwargs ) #NEWLINE#
{ 'a' : 1 , 'b' : 5 } #NEWLINE#
bi_tag . tag ( sentence . split ( '#SPACE#' ) ) #NEWLINE#
e . click ( ) #NEWLINE#
barley ( "doesn't#SPACE#see#SPACE#the#SPACE#re-mod." ) #NEWLINE#
barley ( 'this#SPACE#string' ) #NEWLINE#
for index , g in enumerate ( games [ 0 : 4 ] ) : #NEWLINE# #INDENT# g . output ( index ) #NEWLINE#
df . loc [ ( [ 3 ] ) , 0 : 1 ] = 200 , 10 #NEWLINE#
graph . draw ( 'file.png' ) #NEWLINE#
TEMPLATES [ 0 ] [ 'OPTIONS' ] [ 'debug' ] = True #NEWLINE#
c . setopt ( pycurl . COOKIEJAR , 'data/ngnms.cookie' ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
map . save ( outfile = 'test.html' ) #NEWLINE#
'cp860' , 'cp861' , 'cp862' , 'cp863' , 'cp864' , 'cp865' , 'cp866' , 'cp869' #NEWLINE#
super ( Spam ) . __get__ ( spam , Spam ) . bar ( ) #NEWLINE#
decoded_text = cipher_suite . decrypt ( encoded_text ) #NEWLINE#
list_of_dct . sort ( key = lambda d : sort_keys . get ( d [ 'value' ] , len ( sort_keys ) ) ) #NEWLINE#
gtk . icon_theme_get_default ( ) . load_icon ( 'folder-open' , 128 , 0 ) #NEWLINE#
pd . read_clipboard ( header = None ) #NEWLINE#
ax . get_xaxis ( ) . get_major_formatter ( ) . set_useOffset ( False ) #NEWLINE#
user = super ( UserSerializer , self ) . create ( validated_data ) #NEWLINE#
ax . bar ( dates , counts , align = 'center' , width = width ) #NEWLINE#
return dict ( ( j , locals ( ) ) for _ in range ( i ) ) #NEWLINE#
first_name = models . CharField ( max_length = 30 ) #NEWLINE#
df = df . set_index ( [ 'ANO' , 'MNO' ] ) #NEWLINE#
setup ( options = opts , windows = [ 'script.py' ] ) #NEWLINE#
G = nx . DiGraph ( ) #NEWLINE#
print ( ( a , b , c , d ) ) #NEWLINE#
'fo#SPACE#o#SPACE#bar' , 'f#SPACE#o#SPACE#o#SPACE#bar' , 'foob#SPACE#ar' , 'f#SPACE#oob#SPACE#ar' , 'fo#SPACE#ob#SPACE#ar' , 'f#SPACE#o#SPACE#ob#SPACE#ar' #NEWLINE#
s . readline ( ) #NEWLINE#
increments . append ( onediff [ i ] ) #NEWLINE#
msg . attach ( part1 ) #NEWLINE#
remote_conn . settimeout ( 3 ) #NEWLINE#
return math . sqrt ( dotproduct ( v , v ) ) #NEWLINE#
'0434782608695652173913' , '0344827586206896551724137931' #NEWLINE#
'002481389578163771712158808933' , '002932551319648093841642228739' #NEWLINE#
cur . execute ( 'INSERT#SPACE#INTO#SPACE#foo(bar)#SPACE#VALUES#SPACE#(?)' , ( '2003-06-25' , ) ) #NEWLINE#
ax . yaxis . set_major_formatter ( matplotlib . ticker . ScalarFormatter ( ) ) #NEWLINE#
list ( map ( str . strip , re . split ( ',|or' , x ) ) ) #NEWLINE#
print ( 'Model' , model ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
print ( 'Okay#SPACE#the#SPACE#numbers#SPACE#set#SPACE#is#SPACE#now:#SPACE#' , numbers ) #NEWLINE#
r . status_code #NEWLINE#
arr = [ [ 2 , 0 , 3 ] , [ 4 , 2 , 3 ] , [ 1 , 0 , 3 ] ] #NEWLINE# any ( len ( set ( x ) ) == 1 for x in zip ( * arr ) ) #NEWLINE#
self . assertAlmostEqual ( em ( 2 , 3 ) , 0.4657 , 4 ) #NEWLINE#
self . assertAlmostEqual ( em ( 2 , 3 ) , 0.5165 , 4 ) #NEWLINE#
( ( x [ 'stat' ] != 0 ) . cumsum ( ) == 0 ) . astype ( int ) #NEWLINE#
result = np . empty_like ( X ) #NEWLINE# for i , x in enumerate ( X ) : #NEWLINE# #INDENT# result [ i ] = func1d ( x ) #NEWLINE#
data = np . random . uniform ( - 1 , 1 , 44100 ) #NEWLINE#
combo . set_active ( 0 ) #NEWLINE#
return None #NEWLINE#
date = datetime . datetime . strptime ( time , '%a,#SPACE#%d#SPACE#%b#SPACE#%Y#SPACE#%H:%M:%S#SPACE#GMT' ) #NEWLINE#
C4 . bar ( ) #NEWLINE#
a . sort ( key = w . __getitem__ ) #NEWLINE#
abort ( 404 ) #NEWLINE#
raise Error ( 'Cannot#SPACE#run#SPACE#funcB#SPACE#now' ) #NEWLINE#
raise Error ( 'Cannot#SPACE#run#SPACE#funcC#SPACE#now' ) #NEWLINE#
data = [ 2.34 , 3.45 , 4.56 , 1.23 , 2.34 , 7.89 ] #NEWLINE# print ( [ ( ( a + b ) / 2 ) for a , b in zip ( data [ : : 2 ] , data [ 1 : : 2 ] ) ] ) #NEWLINE#
canvas . tag_lower ( secondRect ) #NEWLINE#
self . assertEqual ( u . test_property , ( 'funky' , 'monkey' ) ) #NEWLINE#
c . f ( ) #NEWLINE#
fread = open ( 'input.csv' , 'rb' ) . read ( ) #NEWLINE# mytext = fread . decode ( 'utf-16' ) #NEWLINE#
self . figure . subplots_adjust ( right = 0.9 ) #NEWLINE#
f . write ( FILESIZE * '\x00' ) #NEWLINE#
[ Requirement . parse ( 'zope.interface>=3.6.0' ) ] #NEWLINE#
obj_list . append ( obj ) #NEWLINE#
for line in f : #NEWLINE# #INDENT# subbed = re . sub ( '\\s{2,}' , '|' , line . strip ( ) ) #NEWLINE#
lst = ast . literal_eval ( strab ) #NEWLINE#
x = matrix ( [ [ 1 ] , [ 2 ] , [ 3 ] ] ) #NEWLINE#
df . sort_values ( [ 'col1' , 'sortkey' ] ) #NEWLINE#
np . zeros ( s ) #NEWLINE#
del kwargs [ 'request' ] #NEWLINE#
from tkinter . filedialog import askopenfilename #NEWLINE#
w . show ( ) #NEWLINE#
print ( 'co_argcount#SPACE#=#SPACE#' , test . __code__ . co_argcount ) #NEWLINE#
logger = logging . getLogger ( 'netmap' ) #NEWLINE#
cur = con . cursor ( ) #NEWLINE#
df [ 'date' ] . iloc [ 0 ] #NEWLINE#
last_updated = db . Column ( db . DateTime , default = db . func . current_timestamp ( ) ) #NEWLINE#
HELLO #NEWLINE#
__repr__ = __str__ #NEWLINE#
from functools import reduce #NEWLINE# reduce ( lambda x , y : x if x [ - 1 ] == '#SPACE#' and y == '#SPACE#' else x + y , s ) if s else '' #NEWLINE#
super ( child , self ) . __init__ ( x , y ) #NEWLINE#
Bbins = np . linspace ( B . min ( ) , B . max ( ) , 10 ) #NEWLINE#
return HttpResponse ( string , content_type = 'application/json' ) #NEWLINE#
event . save ( ) #NEWLINE#
return view ( request , * args , ** kwargs ) #NEWLINE#
pygame . display . flip ( ) #NEWLINE#
errno . errorcode [ 17 ] #NEWLINE#
req = struct . pack ( 'BBB' , 5 , 1 , 0 ) #NEWLINE#
browser . show ( ) #NEWLINE#
g = pd . DataFrame ( [ 'A' , 'B' , 'A' , 'C' , 'D' , 'D' , 'E' ] ) #NEWLINE#
response = urllib . request . urlopen ( url ) #NEWLINE#
print ( 'Process#SPACE#exists,#SPACE#but#SPACE#we#SPACE#cannot#SPACE#kill#SPACE#it' ) #NEWLINE#
cache . commit ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE#
return mydict [ '&' + s [ 0 : 1 ] ] + s [ 1 : ] #NEWLINE#
p = ctypes . cast ( 'foo' , ctypes . POINTER ( ctypes . c_char ) ) #NEWLINE#
for m in re . findall ( '[0-9]{8}.*\\n.*\\n.*\\n.*\\n.*' , l ) : #NEWLINE# #INDENT# pass #NEWLINE#
A [ ~ ( A [ : , ( None ) , : ] == B ) . all ( - 1 ) . any ( 1 ) ] #NEWLINE#
response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=img.jpg' #NEWLINE#
np . all ( i for i in range ( 10 ) ) #NEWLINE#
column_widths += [ len ( cell ) ] #NEWLINE#
lis = [ li for ul in uls for li in ul . findAll ( 'li' ) ] #NEWLINE#
self . button . setPopupMode ( QtGui . QToolButton . MenuButtonPopup ) #NEWLINE#
self . assertEqual ( 'Autogain#SPACE#active=True\n' , self . _last_write ( ) ) #NEWLINE#
return ( items + ( item , ) for items in product ( * args [ : - 1 ] ) for item in args [ - 1 ] ) #NEWLINE#
quat_multiply ( a1 [ 1 , 2 ] , b1 [ 1 , 2 ] ) #NEWLINE#
def print_decimal ( val , prec ) : #NEWLINE# #INDENT# intp , fracp = divmod ( val , 10 ** prec ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# print ( str ( intp ) + '.' + str ( fracp ) . zfill ( prec ) ) #NEWLINE#
"""foo("hi#SPACE#bye","bye#SPACE##SPACE##SPACE##SPACE##SPACE#hi");""" #NEWLINE#
f = os . path . join ( path , filename ) #NEWLINE#
np . median ( [ 0 , 2 , 6 , 5 , 4 ] ) #NEWLINE#
[ ( '%g' % x ) for x in i0 ] #NEWLINE#
dt = datetime . datetime . strptime ( dt , '%Y-%m-%dT%H:%M:%S' ) #NEWLINE#
clean_data = pd . concat ( [ x , y ] , 1 ) . dropna ( 0 ) #NEWLINE#
self . x1 = self . x0 + self . width / 2 #NEWLINE#
tag . replaceWith ( '' ) #NEWLINE#
def palindrome ( s , o ) : #NEWLINE# #INDENT# return re . sub ( '[#SPACE#,.;:?!]' , '' , s . lower ( ) ) == re . sub ( '[#SPACE#,.;:?!]' , '' , o . #NEWLINE# lower ( ) ) [ : : - 1 ] #NEWLINE#
wb = excel . Workbooks . Open ( fname ) #NEWLINE#
df . drop ( rows ) #NEWLINE#
self . macros = [ ( 'MACOSX' , 1 ) ] #NEWLINE#
y [ x . argsort ( ) ] = np . arange ( x . size ) #NEWLINE#
"""""" . join ( next ( s_iter ) if c == '1' else c for c in '01000111000011' ) #NEWLINE#
print ( 'Could#SPACE#not#SPACE#understand#SPACE#audio' ) #NEWLINE#
return [ randint ( 1 , 9999 ) for _ in range ( randint ( 50 , 200 ) ) ] #NEWLINE#
ax . set_ylim3d ( - 1 , 31 ) #NEWLINE#
print ( Counter ( zip ( words , words [ 1 : ] ) ) ) #NEWLINE#
G . add_edge ( 1 , 2 , key = 'xyz' , weight = 2 ) #NEWLINE#
df [ 'A' ] = df [ 'A' ] . str . split ( '\n' ) . str [ - 1 ] #NEWLINE#
re . search ( '[0-9]*#SPACE#(ABC(...))' , '123#SPACE#ABCDEF#SPACE#456' ) . group ( 1 ) #NEWLINE#
df = pd . melt ( df , id_vars = [ 'Date' ] ) #NEWLINE# df = df . rename ( columns = { 'variable' : 'hour' } ) #NEWLINE# df #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
"""Allow#SPACE#any#SPACE#relation#SPACE#if#SPACE#a#SPACE#model#SPACE#in#SPACE#app1#SPACE#is#SPACE#involved""" #NEWLINE#
"""Make#SPACE#sure#SPACE#the#SPACE#app1#SPACE#app#SPACE#only#SPACE#appears#SPACE#on#SPACE#the#SPACE#'app1'#SPACE#db""" #NEWLINE#
optionmenu . configure ( width = yourwidthhere ) #NEWLINE#
if len ( clique ) == 3 : #NEWLINE# #INDENT# GC . remove_edge ( clique [ 0 ] , clique [ 1 ] ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
n , bins , patches = plt . hist ( x , histedges_equalN ( x , 10 ) ) #NEWLINE#
plt . axis ( 'off' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
return [ i for i , x in enumerate ( lst ) if x == item ] #NEWLINE#
sess = tf . Session ( ) #NEWLINE#
x . ts . dt . normalize ( ) #NEWLINE#
n = roman . fromRoman ( 'X' ) #NEWLINE#
print ( 'Output#SPACE#by#SPACE#reg' ) #NEWLINE#
self . assertEqual ( expresults , results ) #NEWLINE#
plt . show ( ) #NEWLINE#
print ( '\n' ) #NEWLINE#
yield [ row [ column ] for row in data ] #NEWLINE#
print ( publish_parts ( '*anurag*' , writer_name = 'html' ) [ 'html_body' ] ) #NEWLINE#
plt . savefig ( 'tmp1.jpg' ) #NEWLINE#
cursor = conn . cursor ( ) #NEWLINE#
name , email , phone_numbers = record [ 0 ] , record [ 1 ] , record [ 2 : ] #NEWLINE#
df = pd . DataFrame ( np . random . random ( ( N , M ) ) , index = dates ) #NEWLINE#
ax . set_yticks ( [ - 1.25 , - 0.75 , - 0.25 , 0.24 , 0.75 , 1.25 ] , minor = True ) #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
return self . raw_function ( * args , ** kwargs ) #NEWLINE#
print ( repr ( ordliste ) ) #NEWLINE#
ctypes . cast ( 4300833936 , c_long_p ) . contents #NEWLINE#
max ( ld , key = lambda d : d [ 'size' ] ) #NEWLINE# max ( enumerate ( ld ) , key = lambda item : item [ 1 ] [ 'size' ] ) #NEWLINE#
main ( ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#not#SPACE#able#SPACE#to#SPACE#vote#SPACE#in#SPACE#the#SPACE#United#SPACE#States.' ) #NEWLINE#
print ( 'third#SPACE#parameter:' + str ( args [ 'arg' ] [ 2 ] ) ) #NEWLINE#
plt . psd ( data_bp2 , Fs = 20000 , label = 'order#SPACE#2' ) #NEWLINE#
locale_format ( Decimal ( '5000.00' ) ) #NEWLINE#
axes [ 1 ] . set_aspect ( axes [ 0 ] . get_aspect ( ) ) #NEWLINE#
ax . set_ylim ( ymax = 100 ) #NEWLINE#
ax1 = plt . subplot ( 131 ) #NEWLINE#
B = [ 0 , 0 , 1 , 1 , 1 , 1 ] #NEWLINE#
"""hello#SPACE#world""" #NEWLINE#
"""1234""" #NEWLINE#
"""A#SPACE#long#SPACE#string#SPACE#to#SPACE#test#SPACE#CRC32#SPACE#functions""" #NEWLINE#
print ( sorted ( words ) == words ) #NEWLINE#
p . figtext ( 0.05 , 0.5 , 'foo' ) #NEWLINE#
array ( [ [ 0 , 1 , 2 , 3 , 4 , 5 ] , [ 1 , 2 , 3 , 4 , 5 , 6 ] , [ 2 , 3 , 4 , 5 , 6 , 7 ] , [ 3 , 4 , 5 , #NEWLINE# 6 , 7 , 8 ] , [ 4 , 5 , 6 , 7 , 8 , 9 ] ] ) #NEWLINE#
g . train ( 'english' , 'my#SPACE#tailor#SPACE#is#SPACE#rich.' ) #NEWLINE#
g . train ( 'french' , 'Je#SPACE#ne#SPACE#sais#SPACE#pas#SPACE#si#SPACE#je#SPACE#viendrai#SPACE#demain.' ) #NEWLINE#
g . train ( 'english' , 'I#SPACE#do#SPACE#not#SPACE#plan#SPACE#to#SPACE#update#SPACE#my#SPACE#website#SPACE#soon.' ) #NEWLINE#
writer . writerow ( row ) #NEWLINE#
G . nodes ( ) #NEWLINE#
self . treeview . set_search_column ( 0 ) #NEWLINE#
print ( 'this#SPACE#is#SPACE#stdout' ) #NEWLINE#
l = [ 'z+2-44' , '4+55+z+88' ] #NEWLINE# print ( [ list ( [ _f for _f in re . split ( '(\\w+)' , i ) if _f ] ) for i in l ] ) #NEWLINE#
ax1 = fig1 . add_subplot ( 111 ) #NEWLINE#
number += 1 #NEWLINE#
foo ( ) #NEWLINE#
self . button = QtGui . QPushButton ( 'Start' ) #NEWLINE#
s . play ( ) #NEWLINE#
print ( np . nonzero ( np . sum ( X3 [ ( ind ) , : ] , axis = 1 ) ) [ 0 ] . shape ) #NEWLINE#
sys . modules [ __name__ ] . __dict__ . clear ( ) #NEWLINE#
fig . canvas . draw ( ) #NEWLINE#
zipobj = zipfile . ZipFile ( foldername + '.zip' , 'w' , zipfile . ZIP_DEFLATED ) #NEWLINE#
colors = np . zeros ( ( 2 , 4 ) , dtype = 'uint8' ) #NEWLINE#
httpserver . serve ( app , host = '0.0.0.0' , port = '8080' ) #NEWLINE#
df [ 'Test' ] = df [ [ 'Open' , 'Close' ] ] . max ( axis = 1 ) #NEWLINE#
x * ( x > 0 ) #NEWLINE#
a = [ [ '3D' ] , [ '3D' , '4D' , '5D' ] , [ '4C' ] , [ '2C' ] , [ '4C' , '4D' ] , [ '4D' ] , [ #NEWLINE# '5D' ] , [ 'JC' ] , [ 'JC' , 'JS' ] , [ 'JS' ] ] #NEWLINE# print ( sorted ( [ Card ( c [ 0 ] , c [ 1 ] ) for e in a for c in e ] ) ) #NEWLINE#
loop . run_until_complete ( do_work ( q ) ) #NEWLINE#
data = [ json . loads ( str ( item ) ) for item in contents . strip ( ) . split ( '\n' ) ] #NEWLINE#
parser . read_file ( lines ) #NEWLINE#
yield np . random . uniform ( 0 , 1 , ( 500 , 2000 ) ) #NEWLINE#
df . ix [ df [ 'Type' ] == 'Dog' ] = df . ix [ df [ 'Type' ] == 'Dog' ] . fillna ( m ) #NEWLINE#
linesamples . add ( int ( 4 * i + 2 ) ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
df = df . reset_index ( level = [ 0 , 1 ] ) #NEWLINE#
from django . contrib . auth . models import AnonymousUser #NEWLINE#
return key . get ( 'value' , None ) #NEWLINE#
my_RDD_dictionaries = my_RDD_strings . map ( json . loads ) #NEWLINE#
df [ 'Result' ] = df . dot ( df . columns ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( os . path . join ( root , file ) ) #NEWLINE#
print ( args ) #NEWLINE#
getType ( '2013test' ) #NEWLINE#
print ( match . groups ( ) ) #NEWLINE#
self . setLayout ( layout ) #NEWLINE#
[ string [ i : j ] for i , j in zip ( [ 0 ] + split_at , split_at + [ None ] ) ] #NEWLINE#
c . py #NEWLINE#
fh . write ( 'Hello#SPACE#World:#SPACE#Ã¤' ) #NEWLINE#
endDate = models . DateField ( ) #NEWLINE#
A . ravel ( ) [ np . random . choice ( A . size , c , replace = False ) ] = np . nan #NEWLINE#
xmlhttp . send ( 'username=' + username + '&password=' + password ) #NEWLINE#
myFunction = lambda x , y : x * y #NEWLINE#
_ = list ( map ( lambda x : result . extend ( x ) , res ) ) #NEWLINE#
b in l [ l . index ( a ) : ] #NEWLINE#
key = 'somekey' #NEWLINE# a . setdefault ( key , [ ] ) #NEWLINE# a [ key ] . append ( 2 ) #NEWLINE#
{ 'target' : 'run_existing_window_command' , 'id' : 'repl_python_run' , 'file' : #NEWLINE# 'config/Python/Main.sublime-menu' } #NEWLINE#
'%%%s%%' % search_string #NEWLINE#
from sklearn . cluster import KMeans #NEWLINE#
text = models . CharField ( max_length = 200 ) #NEWLINE#
wordnet . synsets ( 'dog' ) #NEWLINE#
mylist = [ 'important' , 'comment' ] #NEWLINE#
proc = subprocess . Popen ( 'python#SPACE#myScript.py#SPACE#--alpha=arg1#SPACE#-b#SPACE#arg2#SPACE#arg3' , #NEWLINE# stdout = subprocess . PIPE , stderr = subprocess . STDOUT , shell = True ) #NEWLINE# print ( proc . communicate ( ) [ 0 ] ) #NEWLINE#
b = a [ : ] #NEWLINE#
var_c = config . get ( 'myvars' , 'var_c' ) #NEWLINE#
signal . signal ( signal . SIGCLD , signal . SIG_DFL ) #NEWLINE#
wordnet . synsets ( 'donation' ) #NEWLINE#
l = [ 15 , 18 , 2 , 36 , 12 , 78 , 5 , 6 , 9 ] #NEWLINE# sum ( l ) / float ( len ( l ) ) #NEWLINE#
plt . ylabel ( 'Y#SPACE#Description' ) #NEWLINE#
days = ( roundedA - roundedB ) . days #NEWLINE#
list ( product ( * ( [ 0 , x ] for x in stuff ) ) ) #NEWLINE#
client . connect ( myhostname , theport , myuser , thepass ) #NEWLINE#
print ( boop ) #NEWLINE#
print ( '' . join ( selected_lines ) ) #NEWLINE#
func . argtypes = [ ctypes . c_char_p , ctypes . c_char_p ] #NEWLINE#
return 'template.html' #NEWLINE#
logger . addHandler ( fh ) #NEWLINE#
A = numpy . array ( [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'd' , 'e' ] ] ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
min ( i for i in range ( len ( L ) ) if L [ i : i + len ( key ) ] == key ) #NEWLINE#
set_value ( [ ] , 'abc' , 'd' , 4 ) #NEWLINE#
b [ 'int64' ] . values #NEWLINE#
eb1 [ - 1 ] [ 0 ] . set_linestyle ( '--' ) #NEWLINE#
os . remove ( 'tmp.csv' ) #NEWLINE#
Py_Finalize ( ) #NEWLINE#
test ( '#!/bin/env#SPACE#python\n' ) #NEWLINE#
file . write ( capitalised ) #NEWLINE#
ax . add_collection3d ( poly , zs = z [ : , ( 0 ) ] , zdir = 'y' ) #NEWLINE#
print ( b . most_common ( 1 ) ) #NEWLINE#
b = numpy . array ( [ 2 , 3 , 4 , 5 ] ) #NEWLINE#
DATABASE_ROUTERS = 'our.custom.database.Router' , #NEWLINE#
print ( demo . multiply ( 2.0 , 4.0 ) ) #NEWLINE#
axes [ 1 ] . plot ( x , i * np . cos ( x ) ) #NEWLINE#
datetime . combine ( d , datetime . min . time ( ) ) #NEWLINE#
palette . append ( ( 255 , 255 , 255 ) ) #NEWLINE#
ax . bar ( theta , counts , width = np . pi / 6 , color = colors , alpha = 0.5 ) #NEWLINE#
np . allclose ( func1 ( xy , 2 ) , func3 ( xy , 2 ) ) #NEWLINE#
yourdata . sort ( key = lambda e : e [ 'key' ] [ 'subkey' ] , reverse = True ) #NEWLINE# yourdata #NEWLINE#
myList [ 12 ] = 'a' #NEWLINE#
25.4 / 10 * ( 1 / 2.54 ) #NEWLINE#
assert_eq ( self . data [ 'SQ' ] . code , 'SQ' ) #NEWLINE#
t = threading . Thread ( target = worker , args = [ data ] ) #NEWLINE#
print ( sort_dict_by_list ( a , b ) ) #NEWLINE#
raise ValidationError ( 'Draft#SPACE#entries#SPACE#may#SPACE#not#SPACE#have#SPACE#a#SPACE#publication#SPACE#date.' ) #NEWLINE#
np . random . seed ( 42 ) #NEWLINE#
np . savetxt ( sys . stdout , H [ : , ( - 1 ) ] , newline = '#SPACE#' ) #NEWLINE#
conf . py #NEWLINE#
def coma ( lst ) : #NEWLINE# #INDENT# return '{}#SPACE#and#SPACE#{}' . format ( ',#SPACE#' . join ( lst [ : - 1 ] ) , lst [ - 1 ] ) #NEWLINE#
send ( IP ( src = '10.0.99.100' , dst = '10.1.99.100' ) / ICMP ( ) / 'Hello#SPACE#World' ) #NEWLINE#
author_id = db . Column ( db . Integer , db . ForeignKey ( 'users.id' ) , nullable = False ) #NEWLINE#
ax . set_yticklabels ( people ) #NEWLINE#
web . load ( QUrl ( url ) ) #NEWLINE#
y = random . randint ( 0 , walnut . size [ 1 ] - 1 ) #NEWLINE#
if len ( my_list ) == 0 : #NEWLINE# #INDENT# pass #NEWLINE#
weekly = map ( sum , grouper ( 7 , visitors , 0 ) ) #NEWLINE#
name = models . CharField ( max_length = 30 ) #NEWLINE#
model . add ( Dense ( output_dim , activation = 'softmax' ) ) #NEWLINE#
old_db = sqlite3 . connect ( 'test.db' ) #NEWLINE#
from nvpy import nvpy #NEWLINE#
cardsdiscarded += 1 #NEWLINE#
id = db . Column ( db . Integer , primary_key = True ) #NEWLINE#
parts = re . split ( '([\\+\\-])' , c ) #NEWLINE#
SLUG_REGEX = re . compile ( '^[-\\w]+$' ) #NEWLINE#
client . connect ( 'hostname' , username = 'user' ) #NEWLINE#
{ b . pop ( 0 ) : { b . pop ( 0 ) for _ in range ( 1 ) } } #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
app . MainLoop ( ) #NEWLINE#
signal . signal ( signal . SIGINT , signal . SIG_DFL ) #NEWLINE#
form = cgi . FieldStorage ( ) #NEWLINE#
num_lines = len ( [ l for l in lines if l . strip ( '#SPACE#\n' ) != '' ] ) #NEWLINE#
app . logger . addHandler ( handler ) #NEWLINE#
Point = namedtuple ( 'Point' , 'x#SPACE#y' , verbose = True ) #NEWLINE#
print ( dt . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S#SPACE#%Z%z' ) ) #NEWLINE#
""",""" . join ( ( lat , int ) ) #NEWLINE#
my_screenmanager . add_widget ( screen2 ) #NEWLINE#
s = a . merge ( b , how = 'outer' , left_index = True , right_index = True ) #NEWLINE# s . stack ( ) . reset_index ( level = 1 , drop = True ) #NEWLINE#
df [ 'ranks' ] = df . groupby ( 'Date' ) [ 'V1' ] . apply ( foo ) #NEWLINE# df #NEWLINE#
print ( xcoord ) #NEWLINE#
A = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#

print ( 'in#SPACE#B->f,' , self . _x ) #NEWLINE#
new_df [ df . isnull ( ) ] = np . NaN #NEWLINE#
lxml . etree . Comment #NEWLINE#
df [ '>0' ] = df [ 1 ] > 0 #NEWLINE# group_sum = df . groupby ( [ 'name' , '>0' ] ) [ 'tickets' ] . sum ( ) #NEWLINE#
time . sleep ( poll_period ) #NEWLINE#
a = dict ( ( hash_counting_int ( x ) , [ ] ) for x in range ( 10 ) ) #NEWLINE#
results . append ( make_comp_func ( i , j ) ) #NEWLINE#
ctypes . windll . kernel32 . SetFileAttributesW ( path , 2 ) #NEWLINE#
array ( [ False , True , True , True , True , True , False ] , dtype = bool ) #NEWLINE#
conn . connect ( ) #NEWLINE#
do_something_with_a_and_b #NEWLINE#
pyglet . app . run ( ) #NEWLINE#
text . bind ( '<Leave>' , partial ( color_config , text , 'blue' ) ) #NEWLINE#
a = [ 'Hello' ] #NEWLINE# b = tuple ( a ) #NEWLINE# print ( type ( b ) ) #NEWLINE# print ( b [ 0 ] ) #NEWLINE#
main ( ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
resolved_url = resolve_url ( login_url or settings . LOGIN_URL ) #NEWLINE#
string [ - 3 : 7 ] #NEWLINE#
a . withdraw ( ) #NEWLINE#
rgb = find_element_by_class_name ( 'bar' ) . value_of_css_property ( #NEWLINE# 'background-color' ) #NEWLINE#
for x in reversed ( out ) : #NEWLINE# #INDENT# out . remove ( x ) #NEWLINE#
parser . parse ( '10-09-03' , yearfirst = True ) #NEWLINE#
survey_data [ cols_to_norm ] = survey_data [ cols_to_norm ] . apply ( lambda x : ( x - #NEWLINE# x . mean ( ) ) / ( x . max ( ) - x . min ( ) ) ) #NEWLINE#
s . quit ( ) #NEWLINE#
498 , 410 #NEWLINE#
text_r . set_text ( re . sub ( '[0-9\\=\\-\\W]' , '#SPACE#' , text_r . get_text ( ) ) ) #NEWLINE#
df . name . replace ( { '(\\w+),\\s+(\\w+)' : '\\2#SPACE#\\1' , 'Max' : 'Fritz' } , regex = True ) #NEWLINE#
sys . exit ( app . exec_ ( ) ) #NEWLINE#
iter = ( i for i in range ( 50 ) ) #NEWLINE#
httpd . serve_forever ( ) #NEWLINE#
f . set_index ( 'year' ) . ix [ 2002 : 2009 ] #NEWLINE#
0.3623577544766735 #NEWLINE#
numpy . linspace ( 10 , 20 , 5 , endpoint = False ) #NEWLINE#
views . py #NEWLINE#
[ 3 , 3 , 3 , 3 ] #NEWLINE#
with open ( filename ) as file : #NEWLINE# #INDENT# found = word in file . read ( ) . split ( ) #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
return s . get_data ( ) #NEWLINE#
httpd . shutdown ( ) #NEWLINE#
result = [ ] #NEWLINE#
return match . group ( 1 ) #NEWLINE#
HttpAuthenticated . __init__ ( self , * args , ** kwargs ) #NEWLINE#
setattr ( self , mangle_attr ( self , '__X' ) , value ) #NEWLINE#
return self . get_paginated_response ( serializer . data ) #NEWLINE#
a . a ( ) . method ( ) #NEWLINE#
ipixel = im . getpixel ( ( x , y ) ) #NEWLINE#
x = collections . deque ( 5 * [ 0 ] , 5 ) #NEWLINE#
Following . objects . filter ( follows = self ) . count ( ) #NEWLINE#
print ( a , b , c , d , e , f ) #NEWLINE#
showlist . sort ( key = attrgetter ( 'id' ) ) #NEWLINE#
reversed_word3 = word [ : - len ( word ) - 1 : - 1 ] #NEWLINE#
waitress . serve ( demo_app ) #NEWLINE#
root = Tkinter . Tk ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
pool . close ( ) #NEWLINE#
TEMPLATE_CONTEXT_PROCESSORS = ( #NEWLINE# 'django.contrib.auth.context_processors.auth' , #NEWLINE# 'django.core.context_processors.debug' , #NEWLINE# 'django.core.context_processors.i18n' , #NEWLINE# 'django.core.context_processors.media' , #NEWLINE# 'django.core.context_processors.static' , #NEWLINE# 'django.contrib.messages.context_processors.messages' , #NEWLINE# 'Store.views.items_in_cart' ) #NEWLINE#
textbuffer . select_range ( match_start , match_end ) #NEWLINE#
import subprocess #NEWLINE# subprocess . Popen ( [ 'rm' , '-r' , 'some.file' ] ) #NEWLINE#
tree_list = [ 'Parents' , 'Children' , 'GrandChildren' ] #NEWLINE#
csvwriter . writerow ( dict ( row , Node = 'node#SPACE#%s' % node ) ) #NEWLINE#
G . add_node ( 1 ) #NEWLINE#
self . process = subprocess . Popen ( self . cmd , shell = True , preexec_fn = os . setsid ) #NEWLINE#
self . output_box . configure ( state = 'disable' ) #NEWLINE#
from decimal import Decimal #NEWLINE#
entry . clear ( ) #NEWLINE#
df [ 'session_label' ] = df . groupby ( 'user_id' ) [ 'session_break' ] . cumsum ( ) #NEWLINE# df #NEWLINE#
fs . start ( ) #NEWLINE#
f . write ( '{}\n{}\n' . format ( in_ , out ) ) #NEWLINE#
a = np . array ( [ ( 3 , 2 ) , ( 6 , 2 ) , ( 3 , 6 ) , ( 3 , 4 ) , ( 5 , 3 ) ] ) #NEWLINE#
self . move ( QtGui . QApplication . desktop ( ) . screen ( ) . rect ( ) . center ( ) - self . rect #NEWLINE# ( ) . center ( ) ) #NEWLINE#
print ( "Now#SPACE#I'll#SPACE#see#SPACE#if#SPACE#I#SPACE#can#SPACE#break#SPACE#your#SPACE#score..." ) #NEWLINE#
max_validation = lambda x : x [ 0 ] < x [ 1 ] < x [ 2 ] and len ( x ) == 3 #NEWLINE#
password = '' . join ( secrets . choice ( alphabet ) for i in range ( 20 ) ) #NEWLINE#
assert set ( a ) == set ( b ) #NEWLINE#
result = json . loads ( output ) #NEWLINE#
print ( 'exists' , os . path . isfile ( name ) ) #NEWLINE#
data = html . find_all ( attrs = { 'data-js' : True } ) #NEWLINE#
writer = csv . writer ( csv_file , delimiter = ',' , quoting = csv . QUOTE_MINIMAL ) #NEWLINE#
result_dict [ x . key ] . append ( x . value ) #NEWLINE#
xi = np . arange ( len ( x ) ) #NEWLINE#
f ( [ 3 , 2 , 2 , 4 ] , [ 2 , 4 , 2 ] ) #NEWLINE# f ( [ 3 , 2 , 5 , 4 ] , [ 2 , 3 , 2 ] ) #NEWLINE#
getattr ( pageprocs , i , lambda : None ) ( ) #NEWLINE#
print ( s1 , len ( s1 ) ) #NEWLINE#
wx . EvtHandler . __init__ ( self ) #NEWLINE#
app . static_folder = 'static' #NEWLINE#
print ( 'Frobnicating#SPACE#the#SPACE#computer#SPACE#located#SPACE#at#SPACE#{comp.IP}' . format ( comp = comp ) ) #NEWLINE#
ax . set_xlabel ( 'X#SPACE#Label' ) #NEWLINE#
kernel = np . array ( [ [ 1 , 1 , 1 ] , [ 1 , 0 , 1 ] , [ 1 , 1 , 1 ] ] ) #NEWLINE#
keep . add ( onemorevalue ) #NEWLINE#
smtp . sendmail ( sender , recipients , themsg ) #NEWLINE#
print ( '%s\t%s' % ( parser . suggestions [ i ] , parser . queries [ i ] ) ) #NEWLINE#
df . apply ( outer_product ) #NEWLINE#
f = open ( 'input.txt' , 'r' ) #NEWLINE# l = [ map ( int , line . split ( ',' ) ) for line in f ] #NEWLINE# print ( l ) #NEWLINE#
self . vsb = tk . Scrollbar ( root , orient = 'vertical' , command = self . canvas . yview ) #NEWLINE#
s [ s . isin ( [ 'a' ] ) ] . empty #NEWLINE#
node . update ( value ) #NEWLINE#
result . appendlist ( key , value ) #NEWLINE#
slice_consc ( df , 3 ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPCookieProcessor ( #NEWLINE# cookie_jar ) ) #NEWLINE#
TM_PYTHON = '$HOME/.virtualenvs/example/bin/python' #NEWLINE#
B = pd . DataFrame ( { 'c' : [ 'c' , 'c' , 'b' , 'b' , 'c' , 'b' , 'a' , 'a' ] } ) #NEWLINE#
print ( 'bound' ) #NEWLINE#
b = numpy . array ( [ 123 , 321 ] ) #NEWLINE#
tornado . ioloop . IOLoop . instance ( ) . start ( ) #NEWLINE#
df . dtypes #NEWLINE#
processHeader ( f . readline ( ) ) #NEWLINE#
now = dt . datetime . now ( ) #NEWLINE#
model . save_weights ( 'cifar10_weights.h5' , overwrite = True ) #NEWLINE#
G = [ ( 1 , 2 , 3 ) , ( 'a' , 'b' , 'c' ) , ( 'you' , 'and' , 'me' ) ] #NEWLINE#
X /= X . std ( ) #NEWLINE#
( 2 , 3 ) in view_items #NEWLINE#
ax . xaxis . set_major_formatter ( FuncFormatter ( lambda tick , _ : get_day ( tick ) ) ) #NEWLINE#
b = np . array ( [ 2 , 1 , 1 , 1 , 1 ] ) #NEWLINE#
print ( img . size ) #NEWLINE#
class myModel ( models . Model ) : #NEWLINE# #INDENT# editors = models . ManyToManyField ( User , related_name = 'mymodel_can_edit' ) #NEWLINE#
print ( repr ( line ) ) #NEWLINE#
arr = [ [ ] ] #NEWLINE# len ( arr ) #NEWLINE#
ax . xaxis . set_minor_formatter ( plt . FormatStrFormatter ( '%d' ) ) #NEWLINE#
out . write ( '##SPACE#coding#SPACE#=#SPACE#%s\n' % encoding ) #NEWLINE#
gevent . spawn ( client_connect , ( '127.0.0.1' , 1234 ) ) #NEWLINE#
highpoints = re . compile ( '[\ud800-\udbff][\udc00-\udfff]' ) #NEWLINE#
for line in myfile : #NEWLINE# #INDENT# row = next ( csv . reader ( [ line ] ) ) #NEWLINE#
[ 2016 , 3 , 11 , 8 , 29 , 47 ] #NEWLINE#
a [ 'target2' ] = a [ 'reversal' ] - a [ 'reversal' ] #NEWLINE#
b [ : , : , ( some_mask == 1 ) ] #NEWLINE#
DIGITS = [ 0 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] #NEWLINE#
all ( hash ( i ) == i for i in range ( 1000000 ) ) #NEWLINE#
file . write ( part . get_payload ( decode = True ) ) #NEWLINE#
result = os . system ( 'cat#SPACE#file.log#SPACE#|#SPACE#tail#SPACE#-1' ) #NEWLINE#
x = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] #NEWLINE#
job = Job . objects . get ( pk = 1 ) #NEWLINE#
df [ 'D' ] = df . apply ( classifier , axis = 1 ) #NEWLINE#
driver = webdriver . Chrome ( ) #NEWLINE#
self . top_right_label . pack ( side = 'right' ) #NEWLINE#
print ( 'Not#SPACE#able#SPACE#to#SPACE#write#SPACE#intermediate#SPACE#JSON#SPACE#file' ) #NEWLINE#
ps . setfont ( 'Helvetica' , PTS ( 12 ) ) #NEWLINE#
conn . perform ( ) #NEWLINE#
pilImage = open ( '/tmp/myfile.jpg' , 'rb' ) #NEWLINE#
sizer = wx . BoxSizer ( wx . VERTICAL ) #NEWLINE#
return df . index [ 0 ] , v . iloc [ - 1 ] #NEWLINE#
driver = webdriver . Firefox ( firefox_profile ) #NEWLINE#
lexer . begin ( 'subquery' ) #NEWLINE#
plt . xlabel ( 'Measures' ) #NEWLINE#
print ( 'oops' ) #NEWLINE#
__init__ . py #NEWLINE#
array ( [ [ 1 , 0 , 0 ] , [ 4 , 5 , 0 ] , [ 7 , 8 , 9 ] ] ) #NEWLINE#
s1 . encode ( 'ascii' ) #NEWLINE#
my_model . save ( using = 'my_non_default_database' ) #NEWLINE#
[ ( 5 , 6 ) , ( 6 , 7 ) ] #NEWLINE#
cv2 . imshow ( 'window-name' , frame ) #NEWLINE#
soup = BeautifulSoup ( html ) #NEWLINE#
np . array ( x . tolist ( ) ) #NEWLINE#
scatter_plot = plt . scatter ( x , y , facecolor = 'b' , marker = 'o' ) #NEWLINE#
self . l . append ( { } ) #NEWLINE#
return dateutil . parser . parse ( node . value ) #NEWLINE#
parser . add_argument ( 'file' , help = 'file#SPACE#name' ) #NEWLINE#
self . f = args [ 0 ] #NEWLINE#
dw . writerow ( row ) #NEWLINE#
logging . Logger . __init__ ( self , name ) #NEWLINE#
p = Process ( target = f , args = ( q , ) ) #NEWLINE#
self . sizer = wx . BoxSizer ( wx . VERTICAL ) #NEWLINE#
return QtCore . QModelIndex ( ) #NEWLINE#
cur . execute ( 'SELECT#SPACE#myimage#SPACE#FROM#SPACE#testing' ) #NEWLINE#
foo ( ) #NEWLINE#
ax = fig . add_subplot ( 111 , projection = 'polar' ) #NEWLINE#
df . dtypes #NEWLINE#
self . wm_state ( 'zoomed' ) #NEWLINE#
print ( 'You#SPACE#won' , getattr ( this_prize , choice ) ) #NEWLINE#
pool = Pool ( 5 ) #NEWLINE#
plt . plot ( A , B ) #NEWLINE#
app . run ( ) #NEWLINE#
sites = hxs . select ( '//div[@class="row"]' ) #NEWLINE#
__main__ . py #NEWLINE#
br . form [ 'from' ] = 'herpderp@gmail.com' #NEWLINE#
br . form [ 'subject' ] = 'Yellow' #NEWLINE#
br . form [ 'message' ] = 'Hello,#SPACE#World!' #NEWLINE#
a = np . random . rand ( n , m ) #NEWLINE#
def square ( n ) : #NEWLINE# #INDENT# return n * n #NEWLINE#
entity1_id = Column ( Integer , primary_key = True ) #NEWLINE#
diff_as_html = ghdiff . diff ( md1 , md2 ) #NEWLINE#
return p ( i - 1 ) / 2 + p ( i + 2 ) / 2 #NEWLINE#
codeblock . append ( stripped_line . split ( '#SPACE#' ) ) #NEWLINE#
help ( module ) #NEWLINE#
len ( json . dumps ( { 'Ð°Ð±Ð²Ð³Ð´' : 1 } ) ) #NEWLINE#
data = f . read ( ) #NEWLINE# process ( data ) #NEWLINE#
s . map ( methodcaller ( 'date' ) ) . values #NEWLINE#
syl = syl [ 1 : ] #NEWLINE#
from itertools import permutations #NEWLINE#
Pdb ( ) . set_trace ( ) #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
tex . pack ( side = tk . RIGHT ) #NEWLINE#
cettime . isoformat ( ) #NEWLINE#
mod_ignore = [ 'shutil' , 'scipy.optimize' , 're' , 'os' , 'sys' , 'json' ] #NEWLINE#
ds [ 'Y' ] . sum ( axis = 1 ) #NEWLINE#
content = response . content #NEWLINE#
cell = xl . ActiveSheet . Range ( 'B1' ) . Text #NEWLINE#
self . _is_running = False #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
for k , v in sorted ( list ( d_max . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True ) : #NEWLINE# #INDENT# pass #NEWLINE#
mask = cv2 . bitwise_or ( mask1 , mask2 ) #NEWLINE#
http_server . listen ( 8080 ) #NEWLINE#
return len ( data ) == 0 #NEWLINE#
li . append ( 'Three' ) #NEWLINE#
li . append ( 'Four' ) #NEWLINE#
li . append ( 'Five' ) #NEWLINE#
li . append ( 'One' ) #NEWLINE#
'--hive-versions' , '0.7' , '--run-hive-script' , '--args' , '-f' #NEWLINE#
turtle . forward ( size ) #NEWLINE#
import sys #NEWLINE# sys . exit ( ) #NEWLINE#
'([0-9]{1,3}[%%])([%s]?)' % config . SERIES #NEWLINE#
userInput = int ( eval ( input ( 'Enter#SPACE#something:#SPACE#' ) ) ) #NEWLINE#
new . setdefault ( key , [ ] ) . append ( temp ) #NEWLINE#
do_something ( ) #NEWLINE#
return jinja2 . Markup ( escape ( self . content ) . replace ( '\n' , '<br>' ) ) #NEWLINE#
array ( [ [ 25.0 , 13.0 ] , [ 18.0 , 25.0 ] ] ) #NEWLINE#
data , addr = sock . recv ( 1024 ) #NEWLINE#
N = int ( input ( 'N=' ) ) #NEWLINE#
t = Connection ( config_file = 'ebay.yaml' , debug = False ) #NEWLINE#
xlabel ( 'Freq#SPACE#(Hz)' ) #NEWLINE#
item = list [ 2 ] [ 2 ] #NEWLINE#
return super ( datetime , self ) . <VAR0> ( * args , ** kwargs ) #NEWLINE#
sys . stdin = open ( '/dev/tty' ) #NEWLINE#
filelist = glob . glob ( '*.bak' ) #NEWLINE#
lines . pop ( 0 ) #NEWLINE# ax . lines . pop ( 0 ) #NEWLINE#
print ( 'Thanks#SPACE#in#SPACE#Advance#SPACE#for#SPACE#using#SPACE#Eagle,#SPACE#the#SPACE#Advanced#SPACE#Data#SPACE#Parsing#SPACE#Algorithm.' #NEWLINE# ) #NEWLINE#
print ( "Let's#SPACE#Start#SPACE#!\n" ) #NEWLINE#
print ( '.....................................................................\n' #NEWLINE# ) #NEWLINE#
print ( 'Please#SPACE#Check#SPACE#Your#SPACE#mail#SPACE#in#SPACE#case#SPACE#your#SPACE#Password#SPACE#has#SPACE#been#SPACE#Changed' ) #NEWLINE#
print ( 'Log#SPACE#in#SPACE#failed.\n' ) #NEWLINE#
DeviceID = 'COM15' #NEWLINE#
__tablename__ = 'node_1' #NEWLINE#
return True #NEWLINE#
rche_df . loc [ index , 'wgs1984_longitude' ] = dict_temp [ 'long' ] #NEWLINE#
contains_vectorized ( geo_polygons , geo_points [ : , ( np . newaxis ) ] ) #NEWLINE#
df = df . set_index ( 'YEAR' ) . stack ( ) . reset_index ( ) #NEWLINE#
newobjs = getattr ( amodule , '_objs' , None ) #NEWLINE#
self . assertEqual ( 3 , 4 ) #NEWLINE#
list1 = [ [ 'James' , '24' , 'Canada' , 'Blue' , 'Tall' ] , [ 'Ryan' , '21' , 'U.S.' , #NEWLINE# 'Green' , 'Short' ] ] #NEWLINE# { i [ 0 ] : i [ 1 : ] for i in list1 } #NEWLINE#
return func ( x , y , z , a , b , c ) #NEWLINE#
Person . create ( name = 'Bob3' , birthday = dt . date ( 1970 , 3 , 13 ) ) #NEWLINE#
print ( list ( keep_n_dupes ( lst , 2 ) ) ) #NEWLINE#
df = df . set_index ( 'id' ) #NEWLINE#
myobj [ 5 ] = 1 #NEWLINE#
Constants = namedtuple ( 'Constants' , [ 'pi' , 'e' ] ) #NEWLINE#
def main ( ) : #NEWLINE# #INDENT# return [ 1 , 2 , 3 ] #NEWLINE#
users = UserClasses . objects . filter ( class_id = data [ 'class_id' ] ) #NEWLINE# user_details = User . objects . filter ( id__in = users . values_list ( 'id' , flat = True ) ) #NEWLINE#
values = np . array ( [ 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ] ) #NEWLINE#

reader = csv . reader ( csvfile , delimiter = ',' ) #NEWLINE#
myParent . __init__ ( self ) #NEWLINE#
s = df . groupby ( 'keys' ) . ids . agg ( lambda x : len ( x . unique ( ) ) ) #NEWLINE# pd . value_counts ( s ) . plot ( kind = 'bar' ) #NEWLINE#
G . add_edge ( 1 , 2 ) #NEWLINE#
print ( 'Stop' ) #NEWLINE#
im . update ( ) #NEWLINE#
s . read ( ) #NEWLINE#
ans = math . factorial ( N ) #NEWLINE#
return 'b' in obj [ 'categories' ] #NEWLINE#
ssh . close ( ) #NEWLINE#
lines = [ line . strip ( ) for line in file ] #NEWLINE#
print ( 'Unable#SPACE#to#SPACE#capture#SPACE#output' ) #NEWLINE#
Py_Initialize ( ) #NEWLINE#
f = open ( 'my_file' ) #NEWLINE# print ( f . read ( ) ) #NEWLINE# print ( f . read ( ) ) #NEWLINE#
db = mongo . db #NEWLINE#
sympify ( 'x**2#SPACE#+#SPACE#cos(x)' ) #NEWLINE#
show ( ) #NEWLINE#
A = namedtuple ( 'A' , [ 'a' , 'b' ] ) #NEWLINE#
clf . fit ( train_data ) #NEWLINE#
queue . append ( clientsocket . recv ( 1024 ) ) #NEWLINE#
( 'foo=' , None , 'Specify#SPACE#the#SPACE#foo#SPACE#to#SPACE#bar.' ) , #NEWLINE#
test_writer = tf . train . SummaryWriter ( this_test ) #NEWLINE#
main ( ) #NEWLINE#
plt . imshow ( frames [ k ] , cmap = plt . cm . gray ) #NEWLINE#
a_cursor . execute ( sql , ( val1 , val2 ) ) #NEWLINE#
ti , xi = np . meshgrid ( ti , xi ) #NEWLINE#
f . close ( ) #NEWLINE#
sleep ( 20 ) #NEWLINE#
self . stack . append ( len ( self . get_item ( ) ) - 1 ) #NEWLINE#
type ( a . tolist ( ) ) #NEWLINE#
foo . __getitem__ ( slice ( None , None , None ) ) . __setitem__ ( 1 , 'two' ) #NEWLINE#
print ( str ( uuid . uuid4 ( ) ) [ : 8 ] ) #NEWLINE#
results . append ( a_dict [ id ] ) #NEWLINE#
response = requests . get ( 'http://yipit.com' ) #NEWLINE#
print ( 'part1#SPACE#expensive#SPACE#computation#SPACE#running' ) #NEWLINE#
s = re . findall ( '\\[(.*?)\\]' , str ) #NEWLINE#
ax2 . axhline ( y = 0.002 , xmin = 0 , xmax = 3 , c = 'blue' , linewidth = 0.5 , zorder = 0 ) #NEWLINE#
bin ( ( 1 << 7 ) - 1 ) #NEWLINE#
psutil . get_pid_list ( ) #NEWLINE#
df [ 'wt_quant' ] = df . groupby ( [ 'item' , 'price' ] ) . region . apply ( f ) * df . quantity #NEWLINE# df #NEWLINE#
re . search ( re . compile ( '((\\w+\\s)|(\\w+\\W+\\w+\\s))+' , re . UNICODE ) , #NEWLINE# 'Please#SPACE#work#SPACE#blåbær#SPACE#and#SPACE#NOW#SPACE#stop#SPACE#123' ) . group ( 0 ) #NEWLINE#
re . search ( re . compile ( '\\D+' , re . UNICODE ) , 'Please#SPACE#work#SPACE#blåbær#SPACE#and#SPACE#NOW#SPACE#stop#SPACE#123' #NEWLINE# ) . group ( 0 ) #NEWLINE#
HTMLParser . __init__ ( self ) #NEWLINE#
listA = [ 0 , 1 , 2 , 1 , 2 , 1 , 2 , 3 , 4 , 5 , 3 , 4 , 5 , 6 , 0 ] #NEWLINE#
l . add ( 1 , 2 , 'test' ) #NEWLINE#
l = [ [ 'a' , 'b' , 'c' ] , [ 'a' , 'b' ] , [ 'g' , 'h' , 'r' , 'w' ] ] #NEWLINE#
tkMessageBox . showinfo ( 'Say#SPACE#Hello' , 'Hello#SPACE#World' ) #NEWLINE#
print ( para_group_demo . sum ( df . a , df . b ) ) #NEWLINE#
info ( 'done#SPACE#%s' , self . client_address ) #NEWLINE#
DateR = date . compile ( ) #NEWLINE#
np . random . shuffle ( idx ) #NEWLINE#
fig = pyplot . figure ( ) #NEWLINE#
return { k : dict_ [ k ] for k in keys } #NEWLINE#
self . entry . pack ( ) #NEWLINE#
nltk . data . path . append ( 'C:\\somewhere\x0carfar\x07way\\path' ) #NEWLINE#
for ch in string . punctuation : #NEWLINE# #INDENT# s = s . replace ( ch , "'" ) #NEWLINE#
imscatter ( x , y , image_path , zoom = 0.1 , ax = ax ) #NEWLINE#
ax . tick_params ( axis = 'x' , colors = 'blue' ) #NEWLINE#
hash ( a_list ) #NEWLINE#
plot ( tmp . min ( axis = 0 ) ) #NEWLINE#
struct . unpack ( 'd' , data ) #NEWLINE#
print ( repr ( astr . encode ( 'utf_8' ) ) ) #NEWLINE# print ( repr ( combined_astr . encode ( 'utf_8' ) ) ) #NEWLINE#
ucontent = str ( content , encoding ) #NEWLINE#
ax . set_ylabel ( 'Y#SPACE#Label' ) #NEWLINE#
df3 = df2 . append ( df1 , ignore_index = True ) #NEWLINE#
result = namedtuple ( 'Result' , [ 'x' , 'y' ] ) #NEWLINE#
val = int ( input , 16 ) #NEWLINE#
x2 = np . array ( [ 1 , 2 , 3 , 4 , 6 , 8 , 9 ] ) #NEWLINE#
repo . stage ( 'file.txt' ) #NEWLINE#
f_out_intkeys . write ( line ) #NEWLINE#
f_out_quot . write ( line ) #NEWLINE#
f_out_frb . write ( line ) #NEWLINE#
f_out_dtwrld . write ( line ) #NEWLINE#
driver = webdriver . Chrome ( ) #NEWLINE#
"""ifndef""" #NEWLINE#
"""__HEADER_FOO""" #NEWLINE#
"""define""" #NEWLINE#
"""//+reflect""" #NEWLINE#
"""class""" #NEWLINE#
"""Foo""" #NEWLINE#
"""{""" #NEWLINE#
"""public""" #NEWLINE#
""":""" #NEWLINE#
"""private""" #NEWLINE#
"""int""" #NEWLINE#
"""m_int""" #NEWLINE#
""";""" #NEWLINE#
"""}""" #NEWLINE#
plt . show ( ) #NEWLINE#
foo ( ) #NEWLINE#
print ( sum ( map ( d . get , itertools . takewhile ( lambda key : key != 5 , d ) ) ) ) #NEWLINE#
s = sys . stdout . getvalue ( ) #NEWLINE#
writer = csv . writer ( f , quoting = csv . QUOTE_NONE , delimiter = '|' , quotechar = '' ) #NEWLINE#
X , Y = np . meshgrid ( x , y ) #NEWLINE#
CFUNCTYPE ( c_int ) ( lambda : None ) #NEWLINE#
signal . alarm ( seconds ) #NEWLINE#
M = sympy . Matrix ( 3 , 2 , lambda i , j : sympy . var ( 'M_%d%d' % ( i + 1 , j + 1 ) ) ) #NEWLINE#
do_stuff_with_two_lines ( previous_line , current_line ) #NEWLINE#
print ( d [ 'b' ] [ 'a' ] ) #NEWLINE#
print ( json . dumps ( doc , default = ComplexHandler ) ) #NEWLINE#
return image . convert ( 'RGB' , adobe_to_xyz ) . convert ( 'RGB' , xyz_to_srgb ) #NEWLINE#
x = x + c #NEWLINE#
dict_setitem ( dct , key , value ) #NEWLINE#
shelf = shelve . open ( 'shelf' , flag = 'n' ) #NEWLINE#
with open ( '1.txt' ) as contactFile : #NEWLINE# #INDENT# data = json . loads ( contactFile . read ( ) ) #NEWLINE#
regex = re . compile ( '[a-z]*\\((?P<var1>.*)\\,#SPACE#(?P<var2>.*)\\,#SPACE#(?P<var3>.*)' ) #NEWLINE#
plt . text ( 4 , 240 , '->#SPACE#Butching#SPACE#=>#SPACE#80#SPACE#to#SPACE#100#SPACE#kg#SPACE#meat' ) #NEWLINE#
z . update ( y ) #NEWLINE#
self . listbox . insert ( 0 , option ) #NEWLINE#
captain = models . ForeignKey ( 'myapp.Player' , related_name = 'team_captain' ) #NEWLINE#
return next ( itertools . islice ( cpy , index , index + 1 ) ) #NEWLINE#
chars_to_remove = [ 'δ' , 'Γ' , 'ж' ] #NEWLINE#
a = numpy . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
is_coherent ( np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) ) #NEWLINE#
args = [ 'python' , '__main__.py' , 'worker' ] #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM , socket . IPPROTO_UDP ) #NEWLINE#
values = np . random . rand ( len ( indices ) ) #NEWLINE#
self . ProgressBar . SetRange ( event . total ) #NEWLINE#
plt . xlim ( 0 , 1 ) #NEWLINE#
with open ( 'file.csv' ) as fin : #NEWLINE# #INDENT# next ( fin ) #NEWLINE# total = sum ( int ( r [ 1 ] ) for r in csv . reader ( fin ) ) #NEWLINE#
ui . show ( ) #NEWLINE#
X_plot = np . linspace ( 0 , 1 , 100 ) #NEWLINE#
main ( ) #NEWLINE#
concatenate_data = [ '' . join ( batch ) for batch in raw_data ] #NEWLINE#
with open ( 'file' ) as f : #NEWLINE# #INDENT# w , h = [ int ( x ) for x in next ( f ) . split ( ) ] #NEWLINE# array = [ ] #NEWLINE# for line in f : #NEWLINE# #INDENT# array . append ( [ int ( x ) for x in line . split ( ) ] ) #NEWLINE#
xsheet = xbook . add_worksheet ( 'Test' ) #NEWLINE#
img_io = StringIO ( ) #NEWLINE#
import re #NEWLINE#
urlpatterns = patterns ( '' , ( '^one/$' , redirect_to , { 'url' : '/another/' } ) ) #NEWLINE#
print ( 'You#SPACE#are#SPACE#able#SPACE#to#SPACE#vote#SPACE#in#SPACE#the#SPACE#United#SPACE#States!' ) #NEWLINE#
print ( 'Sorry,#SPACE#your#SPACE#response#SPACE#was#SPACE#not#SPACE#loud#SPACE#enough.' ) #NEWLINE#
print ( 'Not#SPACE#an#SPACE#appropriate#SPACE#choice.' ) #NEWLINE#
print ( 'Sorry,#SPACE#your#SPACE#response#SPACE#must#SPACE#not#SPACE#be#SPACE#negative.' ) #NEWLINE#
andand ( x , float ) is None #NEWLINE#
status = fb . graph_post ( '/me/feed' , { 'message' : 'Your#SPACE#message#SPACE#here' } ) #NEWLINE#
cap . set_color ( 'red' ) #NEWLINE#
{ { form . errors } } #NEWLINE#
l . append ( 'modified' ) #NEWLINE#
sns . set ( ** kwargs ) #NEWLINE#
output . write ( line ) #NEWLINE#
return [ s [ i : i + width ] for i in range ( len ( s ) - width + 1 ) ] #NEWLINE#
ax . set_zlim3d ( 0 , 1 ) #NEWLINE#
plt . clf ( ) #NEWLINE#
backup = pd . HDFStore ( 'backup.h5' ) #NEWLINE#
logger . addHandler ( progress ) #NEWLINE#
values = [ 'abc' , 'def' , 'ghi' ] #NEWLINE#
p = argparse . ArgumentParser ( ) #NEWLINE#
self . result_queue . put ( result ) #NEWLINE#
logging . Handler . __init__ ( self ) #NEWLINE#
ax = sns . countplot ( x = 'class' , hue = 'who' , data = titanic ) #NEWLINE#
ordering = [ 'order_by' ] #NEWLINE#
out = process . stdout . read ( 1 ) #NEWLINE#
x = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 2 , 2 , 0 ] ] #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
b = int ( a ) #NEWLINE#
f = struct . unpack ( 'f' , data_read ) #NEWLINE#
raw_dict = pd . concat ( [ d . set_index ( 'USER_ID' ) for d in df_arr ] , axis = 1 ) #NEWLINE#
print ( listSum ( [ 1 , 3 , 4 , 5 , 6 ] ) ) #NEWLINE#
sys . path . append ( YOUR_PATH ) #NEWLINE#
browser . load ( QtCore . QUrl ( url ) ) #NEWLINE#
reader = csv . reader ( open ( input_filename ) , delimiter = ',' ) #NEWLINE#
el = driver . find_element_by_id ( 'id_of_select' ) #NEWLINE#
row = np . random . randn ( 100 ) #NEWLINE#
print ( df . groupby ( 'user_id' ) [ 'item_id' ] . transform ( 'size' ) ) #NEWLINE#
glVertexPointer ( 3 , GL_FLOAT , 0 , None ) #NEWLINE#
args = parser . parse_args ( 'download#SPACE#--build#SPACE#1432' . split ( ) ) #NEWLINE#
args = parser . parse_args ( 'download#SPACE#--build#SPACE#1432#SPACE#--from#SPACE#1234' . split ( ) ) #NEWLINE#
args = parser . parse_args ( 'download#SPACE#--build#SPACE#1432#SPACE#--interval#SPACE#60' . split ( ) ) #NEWLINE#
tuple_list [ i ] = a , new_b #NEWLINE#
hwnd = win32gui . GetForegroundWindow ( ) #NEWLINE#
d = decimal . Decimal ( '4.10500008' ) #NEWLINE#
object_id = models . PositiveIntegerField ( ) #NEWLINE#
p . add_argument ( 'mode' , choices = [ 'all' , 'name' ] ) #NEWLINE#
data2 = np . asarray ( data2 ) #NEWLINE#
return 'سلام' #NEWLINE#
partial_ratio ( 'AAAB' , 'Google' ) #NEWLINE#
isinstance ( os , types . ModuleType ) #NEWLINE#
a = [ 1 , 2 , 3 ] #NEWLINE#
df = pd . DataFrame ( d ) #NEWLINE#
word [ len ( word ) : - len ( word ) - 1 : - 1 ] #NEWLINE#
box . focus_set ( ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# super ( B , self ) . __init__ ( ) #NEWLINE#
plt . show ( ) #NEWLINE#
df = pd . read_csv ( 'test.csv' ) #NEWLINE#
STATIC_ROOT = 'my#SPACE#static#SPACE#dir' #NEWLINE#
d = dict ( a = 1 , b = 10 , c = 30 , d = 2 ) #NEWLINE#
print ( os . listdir ( nltk . data . find ( 'corpora' ) ) ) #NEWLINE#
return sum ( map ( int , item ) ) #NEWLINE#
len ( x ) #NEWLINE#
sprintf ( filename , 'mill2sort-%i-extracted.h5' , i ) #NEWLINE#
axes . set_ylabel ( 'y#SPACE#(m)' ) #NEWLINE#
wDC = win32gui . GetWindowDC ( hwnd ) #NEWLINE#
x = float ( 'nan' ) #NEWLINE#
test = [ 'abc_1_2' , 'abc_2_2' , 'hij_1_1' , 'xyz_1_2' , 'xyz_2_2' ] #NEWLINE# [ list ( g ) for _ , g in itertools . groupby ( test , lambda x : x . split ( '_' ) [ 0 ] ) ] #NEWLINE#
print ( string [ i : j ] ) #NEWLINE#
tree = ElementTree . fromstring ( xml , parser ) #NEWLINE#
o3 . method #NEWLINE#
dt_aware = localtz . localize ( dt_unware ) #NEWLINE#
background_label . image = background_image #NEWLINE#
pass #NEWLINE#
print ( every6 ( example_string ) ) #NEWLINE#
lpr = subprocess . Popen ( '/usr/bin/lpr' , stdin = subprocess . PIPE ) #NEWLINE#
Goodbye #NEWLINE#
do_stuff ( ) #NEWLINE#
plt . axhline ( i , color = color ) #NEWLINE#
g = df . groupby ( 'DateOccurence' ) #NEWLINE#
self . nout += 1 #NEWLINE#
Records = [ { 'Name' : 'Kelvin' , 'Price' : 0 } , { 'Name' : 'Michael' , 'Price' : 10 } ] #NEWLINE# [ i for i in Records if i [ 'Price' ] != 0 ] #NEWLINE#
bits = '10111111111111111011110' #NEWLINE# with open ( 'test.bnr' , 'wb' ) as f : #NEWLINE# #INDENT# f . write ( struct . pack ( 'i' , int ( bits [ : : - 1 ] , 2 ) ) ) #NEWLINE#
( 'I#SPACE#feel#SPACE#very#SPACE#good#SPACE#about#SPACE#these#SPACE#beers.' , 'pos' ) , #NEWLINE#
( 'This#SPACE#is#SPACE#my#SPACE#best#SPACE#work.' , 'pos' ) , #NEWLINE#
( 'What#SPACE#an#SPACE#awesome#SPACE#view' , 'pos' ) , #NEWLINE#
( 'I#SPACE#do#SPACE#not#SPACE#like#SPACE#this#SPACE#restaurant' , 'neg' ) , #NEWLINE#
( 'I#SPACE#am#SPACE#tired#SPACE#of#SPACE#this#SPACE#stuff.' , 'neg' ) , #NEWLINE#
( "I#SPACE#can't#SPACE#deal#SPACE#with#SPACE#this" , 'neg' ) , #NEWLINE#
( 'He#SPACE#is#SPACE#my#SPACE#sworn#SPACE#enemy!' , 'neg' ) , #NEWLINE#
b = [ 'pineapple' , 'apple' , 'tomato' ] #NEWLINE#
widget2 . update_idletasks ( ) #NEWLINE#
print ( cv . GetCaptureProperty ( stream , cv . CV_CAP_PROP_FRAME_COUNT ) ) #NEWLINE#
p = multiprocessing . Process ( target = worker , args = ( i , return_dict ) ) #NEWLINE#
self . update ( dict ( * args , ** kwargs ) ) #NEWLINE#
print ( 'Main#SPACE#thread#SPACE#PID:' , os . getpid ( ) ) #NEWLINE#
Pool ( ) #NEWLINE#
session . login ( 'youremail@gmail.com' , '#SPACE#password' ) #NEWLINE#
a = np . vstack ( ( a , np . array ( [ [ 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 ] ] ) ) ) #NEWLINE#
readonly . bind ( '<Key>' , lambda e : 'break' ) #NEWLINE#
df [ 'New_Sample' ] = df . Sample . apply ( lambda x : x [ : 1 ] ) #NEWLINE#
axes [ 1 ] . set_yticklabels ( '' ) #NEWLINE#
ssh = paramiko . SSHClient ( ) #NEWLINE#
plt . plot ( x , y ) #NEWLINE# plt . gcf ( ) . autofmt_xdate ( ) #NEWLINE#
dr3 = np . linalg . norm ( drr , axis = 1 ) ** 3 #NEWLINE#
df2 = pd . DataFrame ( { 'b' : [ 5 , 6 ] } , index = [ 3 , 4 ] ) #NEWLINE#
return a + b #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
send ( IP ( dst = '1.2.3.4' ) / ICMP ( ) , verbose = False ) #NEWLINE#
list ( od ) [ : 3 ] #NEWLINE#
Q ( subthings__main = True ) & Q ( subthings__subproperty = filter [ 'value' ] ) #NEWLINE#
re . match ( '^[a-zA-Z0-9_.-]+$' , 'hello' ) #NEWLINE#
cur . close ( ) #NEWLINE#
X = np . random . rand ( n , n ) #NEWLINE#
ax . set_xlim ( 0 , 1.4 ) #NEWLINE#
srcname = os . path . join ( src , name ) #NEWLINE#
x = random . randint ( 0 , walnut . size [ 0 ] - 1 ) #NEWLINE#
print ( decipher ( 'ifmmp' ) ) #NEWLINE#
PyRun_SimpleString ( 'print(3.14)' ) #NEWLINE#
PyRun_SimpleString ( "print('hello#SPACE#to#SPACE#console#SPACE#again')" ) #NEWLINE#
PyRun_SimpleString ( "print('still#SPACE#talking#SPACE#to#SPACE#buffer')" ) #NEWLINE#
bar . buzz ( ) #NEWLINE#
log_fact ( [ [ 10 , 15 , 23 ] , [ 14 , 15 , 8 ] ] ) #NEWLINE#
ax1 . legend ( lines , [ l . get_label ( ) for l in lines ] , 'upper#SPACE#left' ) #NEWLINE#
s = 'abbcdece' #NEWLINE# print ( OrderedDict . fromkeys ( s ) ) #NEWLINE#
xl . Quit ( ) #NEWLINE#
'Georg#SPACE#Brandl' , 'Python' , 'The#SPACE#Python#SPACE#Programming#SPACE#Language' #NEWLINE#
list_size_2 = numpy . array ( list_size_2 ) #NEWLINE#
return response #NEWLINE#
[ ( 9 , 1 ) , ( 8 , 3 ) , ( 7 , 4 ) , ( 6 , 2 ) ] #NEWLINE#
plt . imshow ( Z , interpolation = 'nearest' ) #NEWLINE#
f . write ( line + '\n' ) #NEWLINE#
print ( 'aaa' ) #NEWLINE#
print ( 'bbb' ) #NEWLINE#
pass #NEWLINE#
fd = sys . stdin . fileno ( ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
ax . set ( xlim = ( 0 , len ( x ) - 1 ) , ylim = ( 0 , None ) , xticks = x ) #NEWLINE#
lib = ctypes . cdll . LoadLibrary ( 'test' ) #NEWLINE#
l . set_option ( ldap . OPT_X_TLS_DEMAND , True ) #NEWLINE#
_exports = [ ] #NEWLINE#
p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , shell = True ) #NEWLINE# p . kill ( ) #NEWLINE#
{ 'End#SPACE#Date' : 'c' , 'Start#SPACE#Date' : 'b' , 'Event' : 'a' } #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
print ( unescape ( '>' ) ) #NEWLINE#
df . B . isin ( df . A . to_dict ( 'list' ) ) #NEWLINE#
dict . clear ( ) #NEWLINE#
wx . MessageBox ( 'Paste#SPACE#method#SPACE#' + stage + '#SPACE#does#SPACE#not#SPACE#exist' , 'Error' ) #NEWLINE#
method = self . request . get ( '_method' ) #NEWLINE#
events [ - 1 ] . append ( line ) #NEWLINE#
print ( optimize ( [ { 1 , 2 , 3 , 4 } , { 5 , 6 , 7 } , { 2 , 3 } , { 5 , 6 } , { 1 , 2 , 3 } , { 1 , 3 } ] ) ) #NEWLINE#
print ( 'Unable#SPACE#to#SPACE#get#SPACE#the#SPACE#screenshot.' ) #NEWLINE#
exec ( open ( filename ) . read ( ) ) #NEWLINE#
sorted ( x , key = functools . cmp_to_key ( customsort ) ) #NEWLINE#
df . loc [ df [ 'col' ] != 'pre' , 'col2' ] = 'nonpre' #NEWLINE#
import matplotlib . pyplot as plt #NEWLINE#
plt . show ( ) #NEWLINE#
{ 'A' : 1 , 'T' : 3 } #NEWLINE#
draw . line ( ( x1 , y1 , x2 , y2 ) , fill = col , width = 1 ) #NEWLINE#
testsite_array . append ( line ) #NEWLINE#
isinstance ( bar , types . UnboundMethodType ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# app . run ( ) #NEWLINE#
return { 'CARDSPRING_APP_ID' : settings . CARDSPRING_APP_ID } #NEWLINE#
"""\\d+(,\\d+)*/$""" #NEWLINE#
new_list = list ( generate_items ) #NEWLINE#
df [ 'beyer_shifted' ] = df . groupby ( level = 0 ) [ 'beyer' ] . shift ( 1 ) #NEWLINE# df #NEWLINE#
sys . stdin = open ( '/dev/tty' ) #NEWLINE#
from selenium . webdriver . support import expected_conditions as EC #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
print ( hex ( os . stat ( '/' ) [ 2 ] ) ) #NEWLINE#
return [ 'spam' , 'eggs' ] #NEWLINE#
threading . Thread . __init__ ( self ) #NEWLINE#
executive = Executive ( 'Kerry' , 520000 , 1040000 ) #NEWLINE#
a - b #NEWLINE#
print ( form . instance . id ) #NEWLINE#
arr = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) . reshape ( - 1 , 1 ) #NEWLINE# arr = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) [ : , ( None ) ] #NEWLINE# np . array ( [ 1 , 2 , 3 ] , ndmin = 2 ) . T #NEWLINE#
super ( MyResource , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
return '-' . join ( [ s [ : 4 ] , s [ 4 : 6 ] , s [ 6 : ] ] ) #NEWLINE#
print ( f2 . readline ( ) ) #NEWLINE#
print ( count_rec ( 0 , 0 ) ) #NEWLINE#
auth . set_access_token ( access_key , access_secret ) #NEWLINE#
return [ '' . join ( lines ) for is_separator , lines in groups if not is_separator ] #NEWLINE#
text = row [ 1 ] #NEWLINE#
python - mfoo . bar #NEWLINE#
def makelist ( table ) : #NEWLINE# #INDENT# result = [ ] #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# allrows = table . findAll ( 'tr' ) #NEWLINE# for row in allrows : #NEWLINE# #INDENT# result . append ( [ ] ) #NEWLINE# allcols = row . findAll ( 'td' ) #NEWLINE# for col in allcols : #NEWLINE# #INDENT# thestrings = [ str ( s ) for s in col . findAll ( text = True ) ] #NEWLINE# thetext = '' . join ( thestrings ) #NEWLINE# result [ - 1 ] . append ( thetext ) #NEWLINE# return result #NEWLINE#
sys . stdout . flush ( ) #NEWLINE#
self . thread . start ( ) #NEWLINE#
form . fileName . file . save ( file_path ) #NEWLINE#
with zipfile . ZipFile ( zfiledata ) as zfile2 : #NEWLINE# #INDENT# pass #NEWLINE#
file_handle . write . assert_called_with ( 'something' ) #NEWLINE#
df = pd . read_csv ( urlopen ( 'http://pastebin.com/raw.php?i=NuNaTW9n' ) , sep = '\t' ) #NEWLINE#
handle . flush ( ) #NEWLINE#
np . repeat ( uniques , np . clip ( count , 0 , 2 ) ) #NEWLINE#
sys . stderr = sys . __stderr__ #NEWLINE#
raise ValueError ( name + '#SPACE#should#SPACE#be#SPACE#positive' ) #NEWLINE#
return jsonify ( somedict ) #NEWLINE#
1 / 0 #NEWLINE#
file2 = open ( 'C:\\d.pkl' , 'rb' ) #NEWLINE#
wx . StaticBitmap ( panel , - 1 , png , ( 10 , pos ) , ( png . GetWidth ( ) , png . GetHeight ( ) ) ) #NEWLINE#
layout . addWidget ( self . edit ) #NEWLINE#
input_el = driver . find_element_by_name ( 'A' ) #NEWLINE# td_p_input = input_el . find_element_by_xpath ( '..' ) #NEWLINE#
ax . set_axis_off ( ) #NEWLINE#
return values ( np . arange ( len ( A ) ) ) #NEWLINE#
STATICFILES_STORAGE = 'example_app.storage.StaticToS3Storage' #NEWLINE#
urlpatterns += static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) #NEWLINE#
login_manager . init_app ( app ) #NEWLINE#
return [ ( j + i ) for i in strings for j in listSubstrings if i . find ( j ) > - 1 ] #NEWLINE#
layout . addWidget ( self . splitter ) #NEWLINE#
3 , 1 , 3 , tanya , female #NEWLINE#
map ( '-' . join , zip ( * ( [ i ] * 4 ) ) ) #NEWLINE#
do_something ( line ) #NEWLINE#
url = 'https://www.googleapis.com/freebase/v1/mqlread?query=%s' #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
a = pd . Series ( [ 4 , 5 , 6 , 7 ] , index = [ 1 , 2 , 3 , 4 ] ) #NEWLINE#
return x . reshape ( zt , - 1 ) [ idx . ravel ( ) , np . arange ( yt * xt ) ] . reshape ( - 1 , xt ) #NEWLINE#
return np . array ( np . matrix ( s . strip ( '[]' ) ) ) #NEWLINE#
print ( split_and_keep ( ridiculous_string , '<' ) ) #NEWLINE#
engine = sa . create_engine ( 'sqlite://' , echo = True ) #NEWLINE#
df . mask ( np . triu ( np . ones ( df . shape ) ) . astype ( np . bool ) ) #NEWLINE#
app . run ( host = 'localhost' , port = 8888 , debug = True ) #NEWLINE#
objectA . delete ( ) #NEWLINE#
super ( myWindow , self ) . __init__ ( parent ) #NEWLINE#
sys . modules [ name ] = module #NEWLINE#
json . loads ( list_dump ) #NEWLINE#
options = { 'py2exe' : { 'skip_archive' : 0 } } #NEWLINE#
b = bytes ( [ x ] ) #NEWLINE#
print ( [ s . strip ( '8' ) for s in lst ] ) #NEWLINE# print ( [ s . replace ( '8' , '' ) for s in lst ] ) #NEWLINE#
B = [ [ None for i in range ( n ) ] for i in range ( n ) ] #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
brr . sort ( ) #NEWLINE#
defaults . update ( kwargs ) #NEWLINE#
datetime . combine ( date . today ( ) , exit ) - datetime . combine ( date . today ( ) , enter ) #NEWLINE#
sparse_mult ( A . T , B , [ ( 0 , 0 ) , ( 1 , 2 ) , ( 2 , 4 ) , ( 3 , 3 ) ] ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
old = termios . tcgetattr ( fd ) #NEWLINE#
lst = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
s = map ( str , numList ) #NEWLINE#
assert foo ( 'a((b(c))d)(e)' ) == [ 'a' , [ [ 'b' , [ 'c' ] ] , 'd' ] , [ 'e' ] ] #NEWLINE#
ylim ( - 4 , 4 ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
number = 1337 #NEWLINE# with open ( 'filename.txt' , 'w' ) as f : #NEWLINE# #INDENT# f . write ( '%d' % number ) #NEWLINE#
return HttpResponse ( 'Request#SPACE#does#SPACE#not#SPACE#contain#SPACE#any#SPACE#ID' ) #NEWLINE#
( '/mydownloadhandler' , MyDownloadHandler ) , #NEWLINE#
del L [ : : L [ 0 ] ] #NEWLINE#
print ( sys . executable ) #NEWLINE#
output . headers [ 'Content-type' ] = 'text/csv' #NEWLINE#
UNDERLINE = '\x1b[4m' #NEWLINE#
print ( 'new#SPACE#file#SPACE#saved:#SPACE##SPACE#' + newtitle ) #NEWLINE#
a = numpy . ones ( ( 2 , 4 ) ) #NEWLINE#
a = logging . getLogger ( 'myapp' ) #NEWLINE#
df . gdp . drop ( df . gdp . shape [ 0 ] - 1 , inplace = True ) #NEWLINE#
[ myList [ i ] for i in sorted ( indices ) ] #NEWLINE#
ax . set_aspect ( 'equal' ) #NEWLINE#
ax . text ( x , y , '%d%%' % percentages [ i , j ] , ha = 'center' ) #NEWLINE#
self . SetDiagram ( self . diagram ) #NEWLINE#
c = Counter ( elem [ 0 ] for elem in list1 ) #NEWLINE# sum ( v for k , v in c . items ( ) if v > 1 ) #NEWLINE#
msg [ 'From' ] = 'e@mail.cc' #NEWLINE#
msg [ 'To' ] = 'e@mail.cc' #NEWLINE#
turtle . right ( angle ) #NEWLINE#
toggle_btn . config ( relief = 'raised' ) #NEWLINE#
fh . write ( output_from_parsed_template ) #NEWLINE#
G = ( list ( x ) for _ , x in groupby ( enumerate ( L ) , lambda i_x : i_x [ 0 ] - i_x [ 1 ] ) ) #NEWLINE# print ( ',' . join ( '-' . join ( map ( str , ( g [ 0 ] [ 1 ] , g [ - 1 ] [ 1 ] ) [ : len ( g ) ] ) ) for g in G ) ) #NEWLINE#
df = df . groupby ( 'l_customer_id_i' ) . agg ( lambda x : ',' . join ( x ) ) #NEWLINE#
os . chmod ( path , stat . S_IRWXU | stat . S_IRWXG | stat . S_IRWXO ) #NEWLINE#
dict . __init__ ( self , * args , ** kwargs ) #NEWLINE#
lst = [ None for _ in range ( q - p + 1 ) ] #NEWLINE#
print ( df [ ( df . dvd == 'yes' ) & ( df . sunroof == 'yes' ) & ( df . warranty == 'yes' ) ] ) #NEWLINE#
str ( 1056 ) is str ( 1056 ) #NEWLINE#
print ( a [ 'a' ] ) #NEWLINE#
t . start ( ) #NEWLINE#
plt . legend ( ) #NEWLINE#
sys . stdout . write ( '' . join ( temp ) ) #NEWLINE#
f = urllib . request . urlopen ( url ) #NEWLINE# print ( f . read ( ) ) #NEWLINE#
a [ arange ( 2 ) , 0 , 0 ] , b [ arange ( 2 ) , 0 , 0 ] = b [ arange ( 2 ) , 0 , 0 ] , a [ arange ( 2 ) , 0 , 0 ] #NEWLINE#
source . tox / py27 / bin / activate #NEWLINE#
ws . close ( ) #NEWLINE#
a = [ 'apple' , 'carrot' , 'lemon' ] #NEWLINE# b = [ 'pineapple' , 'apple' , 'tomato' ] #NEWLINE# new_list = [ fruit for fruit in a if fruit not in b ] #NEWLINE#
pprint ( sorted_dict ) #NEWLINE#
plot ( [ 10 , 20 , 30 ] ) #NEWLINE#
[ 9 , 1 , 2 , 3 , 1 , 1 , 2 , 3 , 5 ] #NEWLINE#
buffer1 [ pos : pos + len ( buffer2 ) ] = buffer2 #NEWLINE#
plt . pie ( values , labels = labels , autopct = '%.2f' ) #NEWLINE# plt . show ( ) #NEWLINE#
return self . data [ key ] #NEWLINE#
return dt . datetime . strptime ( x , '%Y%m%d#SPACE#%H:%M:%S' ) #NEWLINE#
np . any ( a == 2 , axis = 0 ) #NEWLINE#
self . layout = QtGui . QHBoxLayout ( ) #NEWLINE#
writer = csv . writer ( output , lineterminator = '\n' ) #NEWLINE#
print ( 'Exception#SPACE#occurred#SPACE#making#SPACE#REST#SPACE#call:#SPACE#' + RESTex . __str__ ( ) ) #NEWLINE#
A . shape #NEWLINE#
Image . open ( 'color.png' ) . convert ( 'L' ) . save ( 'bw.png' ) #NEWLINE#
ax . set_theta_offset ( np . radians ( 90 ) ) #NEWLINE#
df2 = pd . read_csv ( 'file2.csv' ) #NEWLINE#
set_key ( 'ProxyServer' , 'X.X.X.X:8080' ) #NEWLINE#
app . register_blueprint ( bp ) #NEWLINE#
plt . plot ( x , y_fit1 , color = 'g' , label = 'curve_fit' ) #NEWLINE#
conacatData = [ ( x [ 0 ] + x [ 1 ] ) for x in testdata ] #NEWLINE#
web . load ( QUrl ( url ) ) #NEWLINE#
self . write ( figdata . getvalue ( ) ) #NEWLINE#
pool = mp . Pool ( processes = 1 ) #NEWLINE#
ax . legend ( lines , labels , loc = 'best' ) #NEWLINE#
def test ( ) : #NEWLINE# #INDENT# pass #NEWLINE#
MultiColumnLabelEncoder ( ) . fit_transform ( fruit_data . drop ( 'weight' , axis = 1 ) ) #NEWLINE#
options , args = parser . parse_args ( ) #NEWLINE#
logger . addHandler ( file_handler ) #NEWLINE#
[ b , c , d , e , f ] #NEWLINE#
ax . scatter ( x , y , c = z , s = 50 , edgecolor = '' ) #NEWLINE# plt . show ( ) #NEWLINE#
print ( instance . ip_address ) #NEWLINE#
[ 1 , 0 , 1 , 1 , 0 ] #NEWLINE#
return cls ( wfd , bfd , wildfd , tfd , ffd ) #NEWLINE#
foo <STR0> ( obj . id for obj <STR0> bar ) #NEWLINE#
data *= np . array ( [ 0.5 , 1.0 , 1.5 , 2.0 ] ) [ : , ( None ) , ( None ) ] #NEWLINE#
dt = datetime . datetime . strptime ( myDate , '%Y-%m-%d#SPACE#%H:%M:%S,%f' ) #NEWLINE#
fileconcord = open ( 'ccord-cultural.txt' , 'w' ) #NEWLINE#
pixels = [ '(0,#SPACE#0,#SPACE#0,#SPACE#255)' , '(129,#SPACE#39,#SPACE#145,#SPACE#255)' , '(125,#SPACE#036,#SPACE#138,#SPACE#255)' ] #NEWLINE# [ ast . literal_eval ( re . sub ( '\\b0+\\B' , '' , pixel ) ) for pixel in pixels ] #NEWLINE#
zin = zipfile . ZipFile ( 'archive.zip' , 'r' ) #NEWLINE#
book . save ( 'output.xlsx' ) #NEWLINE#
def GetValue ( self , row , col ) : #NEWLINE# #INDENT# return str ( self . data [ row ] [ column ] ) #NEWLINE#
p . start ( ) #NEWLINE#
chars = set ( '0123456789$,' ) #NEWLINE# if any ( c in chars for c in s ) : #NEWLINE# #INDENT# print ( 'Found' ) #NEWLINE# else : #NEWLINE# #INDENT# print ( 'Not#SPACE#Found' ) #NEWLINE#
setattr ( Bar , 'x' , property ( Bar . x ) ) #NEWLINE#
x = eval ( input ( 'Enter#SPACE#first#SPACE#number:-' ) ) #NEWLINE#
it = iter ( the_list ) #NEWLINE#
print ( "Couldn't#SPACE#open" , file , 'for#SPACE#edit:' ) #NEWLINE#
f ( 6 ) #NEWLINE#
t . render ( c ) #NEWLINE#
out = f ( arr [ : , : , ( None ) , ( None ) ] , arr ) #NEWLINE#
[ 2 , 2 , 5 , 7 , 7 ] #NEWLINE#
super ( MySpider , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
plt . plot ( x_new , ffit ( x_new ) ) #NEWLINE#
im . size #NEWLINE#
mnorm2d = np . ma . masked_less ( norm2d , threshold ) #NEWLINE#
words = line . split ( '#SPACE#' ) #NEWLINE#
msg . attach ( part1 ) #NEWLINE#
setattr ( cls , key , wrapper ( value ) ) #NEWLINE#
[ 'foo2#SPACE#AAAA#SPACE#bar2' ] #NEWLINE#
3 , 2 , 3 , 3 , 4 , 2 , 3 , 3 , 4 , 3 , 4 , 4 , 5 , 2 , 3 , 3 , 4 , 3 , 4 , 4 , 5 , 3 , 4 #NEWLINE#
'elif' , 'else' , 'except' , 'exec' , 'finally' , 'for' , 'from' #NEWLINE#
myList = [ ] #NEWLINE#
now_berlin = now_pacific . astimezone ( timezone ( 'Europe/Berlin' ) ) #NEWLINE#
def is_current_user_admin ( ) : #NEWLINE# #INDENT# return os . environ . get ( 'USER_IS_ADMIN' , '0' ) == '1' #NEWLINE#
match = re . search ( '(?<=Value=)([^&>]+)' , strJunk ) #NEWLINE# match . group ( 0 ) #NEWLINE#
if call ( [ 'mvn' , 'clean' ] , cwd = '/users/foo/xxx' ) == 0 : #NEWLINE# #INDENT# status = call ( [ 'mvn' , 'compile' ] , cwd = '/users/foo/xxx' ) #NEWLINE#
temp . write ( 'stuff' ) #NEWLINE#
df = pd . read_csv ( 'filex.csv' ) #NEWLINE#
text_list . append ( '#SPACE#' . join ( current ) ) #NEWLINE#
e = Enum ( 'e' , v ) #NEWLINE#
print ( df ) #NEWLINE#
df . ix [ 'a' ] #NEWLINE#
p = re . compile ( 'lalala(I#SPACE#want#SPACE#this#SPACE#part)lalala' ) #NEWLINE# p . match ( 'lalalaI#SPACE#want#SPACE#this#SPACE#partlalala' ) . group ( 1 ) #NEWLINE#
it = combinations ( [ 1 , 2 , 3 , 4 , 5 ] , 2 ) #NEWLINE#
numbers = { 'a' : 1 , 'b' : 0 , 'c' : 1 , 'd' : 3 , 'e' : 3 } #NEWLINE#
admin . site . unregister ( User ) #NEWLINE#
self . testButton . clicked . connect ( self . change_text ) #NEWLINE#
re . split ( '(plus)' , s ) #NEWLINE#
return rgb . astype ( 'uint8' ) #NEWLINE#
drand48 ( ) #NEWLINE#
print ( 'consecutive' ) #NEWLINE#
print ( 'Valid#SPACE#utf-8' ) #NEWLINE#
s = socket . socket ( ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
list = list + [ ( 0 ) for _ in range ( 4 - len ( list ) ) ] #NEWLINE#
main . mylist . append ( 'hey' ) #NEWLINE#
plt . grid ( True ) #NEWLINE# plt . show ( ) #NEWLINE#
list_of_unique_dicts = list ( np . unique ( np . array ( list_of_dicts ) ) ) #NEWLINE#
config . gThingCollection . find ( { 'name' : re . compile ( regex , re . IGNORECASE ) } ) #NEWLINE#
print ( ( 'IN#SPACE#Port#SPACE#issue:#SPACE#' , e ) ) #NEWLINE#
string_list = [ '123' , 'a' , '467' , 'a2_2' , '322' , '21' ] #NEWLINE#
self . view . setEditTriggers ( QtGui . QAbstractItemView . NoEditTriggers ) #NEWLINE#
mlab . show ( ) #NEWLINE#
image = image . astype ( np . uint8 ) #NEWLINE#
print ( my_list [ 0 ] ) #NEWLINE#
out = codecs . open ( output , 'w' , 'utf-8' ) #NEWLINE#
server = ThreadedHTTPServer ( ( 'localhost' , 8080 ) , Handler ) #NEWLINE#
parser . add_argument ( '-b' , '--bar' , action = 'store_false' ) #NEWLINE#
help ( foo . bar ) #NEWLINE#
toolbar . pack ( side = 'top' , fill = 'x' ) #NEWLINE#
response = urllib . request . urlopen ( url ) #NEWLINE#
for i , elem_list in enumerate ( A , start = 1 ) : #NEWLINE# #INDENT# elem_list . append ( i ) #NEWLINE#
out . view ( 'S1' ) . reshape ( - 1 , 7 ) [ : , - 3 : ] = np . asarray ( flags ) . astype ( int ) [ : : - 1 ] . T #NEWLINE#
heapq . heappush ( heap , ( row [ 1 ] , row ) ) #NEWLINE#
urllib . request . install_opener ( opener ) #NEWLINE#
x = list ( range ( 1 , 10 ) ) #NEWLINE#
set_env ( 'Docs' , '%HomeDrive%%HomePath%\\docs' ) #NEWLINE#
set_env ( 'Prompt' , '$P$_$G$S' ) #NEWLINE#
0.6531 , sym2 , 9 , 5 , 10 , 10 #NEWLINE#
numbers = [ int ( s [ i : i + 3 ] , 2 ) for i in range ( 0 , len ( s ) , 3 ) ] #NEWLINE# print ( numbers ) #NEWLINE#
mail . Subject = 'Message#SPACE#subject' #NEWLINE#
self . assertEqual ( forty_two , 42 ) #NEWLINE#
ser . close ( ) #NEWLINE#
ax = fig . gca ( projection = '3d' ) #NEWLINE#
overrides = { basedn : ( serverip , 389 ) } #NEWLINE#
TINYMCE_DEFAULT_CONFIG = { 'theme_advanced_buttons3_add' : 'code' } #NEWLINE#
self . update_status ( 'error:#SPACE#%s' % str ( e ) ) #NEWLINE#
ax . errorbar ( theta , r , yerr = 1 , xerr = 0.1 , capsize = 0 ) #NEWLINE#
plt . plot ( x , g , '-' ) #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ] #NEWLINE#
config = { 'dialect' : 'sqlite' , 'driver' : '' , 'database' : 'testdb' , 'host' : #NEWLINE# 'localhost' , 'port' : '0' } #NEWLINE#
raise AttributeError ( '{}#SPACE#is#SPACE#internal' . format ( name ) ) #NEWLINE#
self . send_header ( 'Content-type' , 'text/html' ) #NEWLINE#
with open ( 'data.txt' , 'w' ) as f : #NEWLINE# #INDENT# json . dump ( data , f , ensure_ascii = False ) #NEWLINE#
suite . addTest ( unittest . defaultTestLoader . loadTestsFromName ( t ) ) #NEWLINE#
df #NEWLINE#
print ( 'Request#SPACE#finished.' ) #NEWLINE#
print ( 'Connection#SPACE#closed.' ) #NEWLINE#
s . strip ( ) #NEWLINE#
self . start = tkinter . ttk . Button ( self , text = 'Start' , command = self . start ) #NEWLINE#
super ( ImageWidget , self ) . __init__ ( parent ) #NEWLINE#
table . horizontalHeader ( ) . setStretchLastSection ( True ) #NEWLINE#
self . master . destroy ( ) #NEWLINE#
engine = create_engine ( 'mysql+mysqldb://...' ) #NEWLINE# df . to_sql ( 'demand_forecast_t' , engine , if_exists = 'replace' , index = False ) #NEWLINE#
a . foo = 2 #NEWLINE#
browser . get ( 'some_url_I_need' ) #NEWLINE# content = browser . find_element_by_id ( 'content' ) #NEWLINE#
print ( soup . find ( 'h2' , text = pattern ) ) #NEWLINE#
os . write ( fd , data ) #NEWLINE#
idx = where ( abs ( A [ : , ( newaxis ) , : ] - B ) . sum ( axis = 2 ) == 0 ) #NEWLINE#
screen = pygame . display . set_mode ( ( 100 , 100 ) ) #NEWLINE#
start_date = timezone . now ( ) . date ( ) #NEWLINE#
f . write ( '\x00' ) #NEWLINE#
x1 , x2 = np . nonzero ( ( diffs < tol ) . all ( 2 ) ) #NEWLINE#
return regex . sub ( s , '' ) #NEWLINE#
sys . stdout . write ( '{:2d}#SPACE#seconds#SPACE#remaining.' . format ( remaining ) ) #NEWLINE#
for i in range ( 4 ) : #NEWLINE# #INDENT# yield [ row [ i ] for row in matrix ] #NEWLINE#
return [ random . choice ( xs ) for _ in range ( sample_size ) ] #NEWLINE#
d = { 'a' : time . time ( ) , 'b' : func } #NEWLINE#
second_column = [ row [ 1 ] for row in a ] #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
serializer . save ( user_id = 15 ) #NEWLINE#
g . add_edge ( 3 , 5 ) #NEWLINE#
background . save ( 'out.png' ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
mylist = [ 'a' , 'b' , 'c' , 'd' , 'e' ] #NEWLINE# myorder = [ 3 , 2 , 0 , 1 , 4 ] #NEWLINE# mylist = [ mylist [ i ] for i in myorder ] #NEWLINE# print ( mylist ) #NEWLINE#
root = etree . Element ( 'root' ) #NEWLINE#
return list ( self . __dict__ . keys ( ) ) #NEWLINE#
ico_y = win32api . GetSystemMetrics ( win32con . SM_CYSMICON ) #NEWLINE#
result = np . empty_like ( arr ) #NEWLINE#
[ { 'mpn' : 'ECA-1EHG102' } , { 'mpn' : 'CL05B103KB5NNNC' } , { 'mpn' : #NEWLINE# 'CC0402KRX5R8BB104' } ] #NEWLINE#
( A != 0 ) . cumsum ( 1 ) #NEWLINE#
return models . DateTimeField . to_python ( self , value ) #NEWLINE#
print ( 'in#SPACE#canvas' ) #NEWLINE#
tom = [ 'a' , 'b' , 'c' ] #NEWLINE# for n in tom : #NEWLINE# #INDENT# globals ( ) [ n ] = 1 #NEWLINE#
dialect = csv . Sniffer ( ) . sniff ( f1 . read ( ) ) #NEWLINE#
self . variable_evidence . arrays . append ( lambda : self . basic_in ) #NEWLINE#
monthly_mean . plot ( y = 'A' , use_index = True ) #NEWLINE#
a . sort ( key = operator . attrgetter ( 'budget' ) , reverse = True ) #NEWLINE#
print ( regx . findall ( content ) ) #NEWLINE#
self . frame . pack_propagate ( False ) #NEWLINE#
a = numpy . array ( list ( range ( 10 ) ) ) #NEWLINE#
db . session . delete ( link ) #NEWLINE#
str ( Decimal ( 2.345e-67 ) ) #NEWLINE#
A_from_python ( ) #NEWLINE#
( 'bees' or 'png' or 'jpg' or 'foo' ) in 'testpng.txt' #NEWLINE#
print ( df [ [ 'a' , 'b' ] ] . values . sum ( ) ) #NEWLINE# 18 #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
df = pd . read_csv ( 'sample.csv' , usecols = [ 'Z' ] ) #NEWLINE#
father = db . SelfReferenceProperty ( collection_name = 'father_set' ) #NEWLINE#
fp . close ( ) #NEWLINE#
return self . _socket . send ( bytes ) #NEWLINE#
np . allclose ( a . data , b . data ) #NEWLINE#
print ( str ( x ) ) #NEWLINE#
sounds . append ( pygame . mixer . Sound ( 'D:/Users/John/Music/Music/FUN.OGG' ) ) #NEWLINE#
c . save ( ) #NEWLINE#
from matplotlib . colors import LinearSegmentedColormap #NEWLINE#
sys . modules [ 'ciao' ] = m #NEWLINE#
"""dirUp""" #NEWLINE#
"""dirDown""" #NEWLINE#
self . log_message ( format , * args ) #NEWLINE#
pass #NEWLINE#
len ( obj ) #NEWLINE#
return '' . join ( [ c for c in s if c in chars_keep ] ) #NEWLINE#
InfoDF = pd . concat ( [ InfoDF , tempDF ] ) #NEWLINE#
line = proc . stderr . readline ( ) #NEWLINE#
rgb = np . empty_like ( hsv ) #NEWLINE#
"""Linda#SPACE#Lost#SPACE#(Secret#SPACE#Icecone#SPACE#Incorporated)#SPACE#lost#SPACE#their#SPACE#Kronos#SPACE#in#SPACE#Osmon#SPACE#(The#SPACE#Forge).#SPACE#Final#SPACE#Blow#SPACE#by#SPACE#Liberty#SPACE#Prime#SPACE#(Exit-Strategy)#SPACE#flying#SPACE#in#SPACE#a#SPACE#Arbitrator.#SPACE#Total#SPACE#Value:#SPACE#1,865,802,910.96#SPACE#ISK""" #NEWLINE#
self . cj = cookielib . CookieJar ( ) #NEWLINE#
img2 = img . copy ( ) #NEWLINE#
tbl . get_columns ( ** { p [ 'path' ] . split ( '/' ) [ - 1 ] : p [ 'value' ] for p in patch_data } ) #NEWLINE#
return ngrams ( string1 , n ) & ngrams ( string2 , n ) #NEWLINE#
__tablename__ = 'mytable' #NEWLINE#
def isPower ( num , base ) : #NEWLINE# #INDENT# if base == 1 and num != 1 : #NEWLINE# #INDENT# #INDENT# return False #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# if base == 1 and num == 1 : #NEWLINE# #INDENT# return True #NEWLINE# if base == 0 and num != 1 : #NEWLINE# #INDENT# return False #NEWLINE# testnum = base #NEWLINE# while testnum < num : #NEWLINE# #INDENT# testnum = testnum * base #NEWLINE# return testnum == num #NEWLINE#
my_model . title = 'something' #NEWLINE#
offset = cet . utcoffset ( dt , is_dst = True ) #NEWLINE#
df1 = pd . DataFrame ( np . random . randint ( 10 , size = ( 3 , 5 ) ) ) #NEWLINE#
[ [ i , j , k ] for i in L1 for j in L2 for k in L3 ] #NEWLINE#
t = datetime . strptime ( '05:20:25' , '%H:%M:%S' ) #NEWLINE#
[ mylist [ cumlist [ i ] : cumlist [ i + 1 ] ] for i in range ( len ( cumlist ) - 1 ) ] #NEWLINE#
streams = [ data [ : , ( stream_index == i ) ] . ravel ( ) for i in range ( k ) ] #NEWLINE#
return len ( L ) == len ( E ) #NEWLINE#
print ( '{}#SPACE#of#SPACE#{}#SPACE#strings#SPACE#are#SPACE#in#SPACE#long#SPACE#string.' . format ( actcount , len ( short ) ) ) #NEWLINE#
app . db = db #NEWLINE#
STATIC_ROOT = os . path . join ( SITE_ROOT , 'static' ) #NEWLINE#
app . processEvents ( ) #NEWLINE#
button1 . configure ( width = 10 , activebackground = '#33B5E5' , relief = FLAT ) #NEWLINE#
return self . get ( ) #NEWLINE#
[ 1 , 2 ] #NEWLINE#
b = [ 4 , 5 , 6 ] #NEWLINE#
def words_in_string ( word_list , a_string ) : #NEWLINE# #INDENT# return set ( a_list ) . intersection ( a_string . split ( ) ) #NEWLINE#
dt = datetime . datetime ( 2012 , 1 , 1 , 0 , 0 ) #NEWLINE#
np . full ( ( 3 , 5 ) , 7 , dtype = int ) #NEWLINE#
connection . send ( 'test' ) #NEWLINE#
ax1 = fig . add_subplot ( 111 ) #NEWLINE#
os . environ [ 'DIAG_CONFIG_MODULE' ] = 'config.postgres' #NEWLINE#
os . environ [ 'DIAG_CONFIG_MODULE' ] = 'config.test' #NEWLINE#
pprint ( data , indent = 4 ) #NEWLINE#
results . append ( my_function ( item ) ) #NEWLINE#
raise ValueError ( 'variance#SPACE#requires#SPACE#at#SPACE#least#SPACE#two#SPACE#data#SPACE#points' ) #NEWLINE#
raise KeyError ( 'Duplicate#SPACE#prefix#SPACE#with#SPACE#different#SPACE#URI#SPACE#found.' ) #NEWLINE#
data = Image . open ( 'file.jpg' ) #NEWLINE#
return sum ( array [ mask ] ) #NEWLINE#
return x + 1 #NEWLINE#
return base64 . urlsafe_b64encode ( '' . join ( enc ) ) #NEWLINE#
df [ 'Year' ] = df [ 'Date' ] . dt . year #NEWLINE# df [ 'Month' ] = df [ 'Date' ] . dt . month #NEWLINE# df [ 'Day' ] = df [ 'Date' ] . dt . day #NEWLINE#
extension = guess_extension ( guess_type ( url ) [ 0 ] ) #NEWLINE#
data = data [ tuple ( ind ) ] #NEWLINE#
if len ( args ) != 1 : #NEWLINE# #INDENT# parser . error ( 'incorrect#SPACE#number#SPACE#of#SPACE#arguments' ) #NEWLINE#
parser . feed ( your_html_string ) #NEWLINE#
myFormattedList = [ ( '%.2f' % elem ) for elem in myList ] #NEWLINE#
print ( now + dateutil . relativedelta . relativedelta ( months = - 1 ) ) #NEWLINE#
ax . set_xticklabels ( xlabels ) #NEWLINE#
nanargmax ( a ) #NEWLINE#
prevent_the_apocalypse ( ) #NEWLINE#
data = f . read ( ) #NEWLINE#
return [ i for i in l if re . search ( s , i ) ] #NEWLINE#
num * X ( X , b - 1 ) if num > 0 else 1 #NEWLINE#
INF = _Infinity ( ) #NEWLINE#
print ( kmeans . cluster_centers_ ) #NEWLINE#
mylist = [ [ 'a1' ] , [ 'a2' ] , [ 'c1' ] , [ 'b1' ] ] #NEWLINE#
print ( { k for k , v in list ( counts . items ( ) ) if v >= 2 } ) #NEWLINE#
lst = [ 'foo' , 'bar' , 'spam' , 'egg' ] #NEWLINE#
ax1 . tick_params ( 'both' , length = 10 , width = 1 , which = 'minor' ) #NEWLINE#
p . communicate ( 'Hello#SPACE#World\n' ) #NEWLINE#
return Response ( mimetype = 'application/json' , status = 200 ) #NEWLINE#
( 'grant_type' , 'refresh_token' ) , #NEWLINE#
tomorrow = twtomorrow . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' ) #NEWLINE#
from multiprocessing import Pool #NEWLINE#
class Foo ( object ) : #NEWLINE# #INDENT# pass #NEWLINE#
msg . attach ( plain_text ) #NEWLINE#
driver = webdriver . PhantomJS ( ) #NEWLINE#
print ( my_string ) #NEWLINE#
df . index = [ 'row1' , 'row2' , 'row3' ] #NEWLINE# print ( df ) #NEWLINE#
main ( ) #NEWLINE#
return Response ( serializer . data ) #NEWLINE#
df = dd . read_csv ( '2000-*.csv' ) #NEWLINE#
df . index . names = [ 'id' , 'act_type' ] #NEWLINE#
urllib . parse . urlencode ( { 'data' : json . dumps ( { 'title' : 'hello#SPACE#worldï¼\x81' , #NEWLINE# 'anonymous' : False , 'needautocategory' : True } ) } ) #NEWLINE#
regex = compile ( '(%s)' % '|' . join ( map ( escape , list ( mydict . keys ( ) ) ) ) ) #NEWLINE#
s = f . read ( ) #NEWLINE#
df = pd . read_csv ( file_ , index_col = None , header = 0 ) #NEWLINE#
row . pop ( ) #NEWLINE#
print ( 'Oops!#SPACE#No#SPACE#@#SPACE#symbols#SPACE#exist!' ) #NEWLINE#
Task . objects . aggregate ( total = Sum ( F ( 'progress' ) * F ( 'estimated_days' ) ) ) [ 'total' ] #NEWLINE#
time . sleep ( 2 ) #NEWLINE#
img = c . getImage ( ) #NEWLINE#
todos = Todo . all ( ) . filter ( 'author#SPACE#=#SPACE#' , users . get_current_user ( ) ) #NEWLINE#
string . printable #NEWLINE#
dTest . ix [ list ( range ( 0 , 3 ) ) , 'Open' ] #NEWLINE#
operator . itemgetter ( * b ) ( a ) #NEWLINE#
os . makedirs ( whatever ) #NEWLINE#
out = a [ np . arange ( a . size - N + 1 ) [ : , ( None ) ] + np . arange ( N ) ] #NEWLINE#
req . add_header ( 'Content-Type' , 'application/x-www-form-urlencoded' ) #NEWLINE#
img . write ( artwork ) #NEWLINE#
[ '280' , '280' , '280' ] #NEWLINE#
return data [ key ] #NEWLINE#
widget = widget . get_parent ( ) #NEWLINE#
import numpy as np #NEWLINE# import scipy . optimize #NEWLINE#
picture . putpixel ( ( x , y ) , new_color ) #NEWLINE#
file . seek ( 0 , 2 ) #NEWLINE#
df . drop ( [ 'location_var' , 'location' ] , axis = 1 , inplace = True ) #NEWLINE#
A = np . random . randint ( 5 , size = ( 10 , 3 ) ) #NEWLINE#
print ( 'WITHOUT#SPACE#JAVASCRIPT#SPACE#&#SPACE#STYLES' ) #NEWLINE#
result = [ foo ( p1 , p2 ) for p1 in people for p2 in people ] #NEWLINE#
a = [ 3 , 5 , 6 ] #NEWLINE#
np . transpose ( np . nonzero ( b ) ) #NEWLINE#
factor . P ( ) #NEWLINE#
im . save ( b , format = 'png' ) #NEWLINE#
ax . scatter ( [ 0 ] , [ 1 ] , c = 'black' , s = 60 ) #NEWLINE#
whos #NEWLINE#
print ( { k : ( x . get ( k , 0 ) + y . get ( k , 0 ) ) for k in set ( x ) & set ( y ) } ) #NEWLINE#
plt . imshow ( a , aspect = 'auto' , cmap = my_cmap2 ) #NEWLINE#
return my_variable , #NEWLINE#
app = Eve ( auth = globalauth . TokenAuth ) #NEWLINE#
dtest = np . array ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ) , dtype = 'float' ) #NEWLINE#
port = serial . Serial ( '/dev/ttyAMA0' , baudrate = 7200 , timeout = 2 ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
array = numpy . array ( [ 4 , 2 , 7 , 1 ] ) #NEWLINE# order = array . argsort ( ) #NEWLINE# ranks = order . argsort ( ) #NEWLINE#
y = tuple ( x ) #NEWLINE#
- 36.2 , - 29.9 , - 18.2 , 11.1 , - 1.2 , - 13.7 , 9.3 , 9.3 , 39.2 , 15.8 , - 5.2 , - 16.2 , - 34.9 , 5.0 #NEWLINE#
array ( [ [ 1.0 , 1.0 ] , [ 1.0 , 1.0 ] ] ) #NEWLINE#
datetime . datetime ( 2012 , 1 , 3 , 0 , 0 , 0 ) , #NEWLINE#
return getattr ( obj , name ) #NEWLINE#
plt . plot ( [ 1 , 2 ] ) #NEWLINE#
engine = innodb #NEWLINE#
app . logger . addHandler ( file_handler ) #NEWLINE#
proc = subprocess . call ( command , stderr = subprocess . OUTPUT ) #NEWLINE#
ax . set_xticks ( ind + width / 2 ) #NEWLINE#
subplot ( 3 , 1 , 2 ) #NEWLINE#
[ ( None if x is None else next ( v ) ) for x in a ] #NEWLINE#
host = self . headers . get ( 'Host' ) #NEWLINE#
f ( ) #NEWLINE#
name = 'George#SPACE#von#SPACE#Trapp' #NEWLINE# print ( ( name , ':' , name . lower ( ) ) ) #NEWLINE#
a . b ( ) #NEWLINE#
lines . append ( line ) #NEWLINE#
dates . year #NEWLINE#
year = time . strftime ( '%Y' ) #NEWLINE#
widget . show ( ) #NEWLINE#
n = int ( eval ( input ( 'Please#SPACE#Enter#SPACE#a#SPACE#number:#SPACE#' ) ) ) #NEWLINE#
self . assertTrue ( 1 + 1 == 2 ) #NEWLINE#
l = ( 'aa' , 'bb' , 'cc' ) , 'dd' #NEWLINE#
temp . plot ( kind = 'line' , color = 'r' ) #NEWLINE#
len ( bin ( 10 ) ) - 2 #NEWLINE#
with open ( 'file.txt' , 'r' ) as f : #NEWLINE# #INDENT# line = f . readlines ( ) [ 7 ] #NEWLINE#
KERNEL = np . zeros ( ( 3 , 3 ) ) + 1 / 8 #NEWLINE#
self . edit = QtGui . QLineEdit ( self ) #NEWLINE#
p = re . compile ( 'name#SPACE#(.*)#SPACE#is#SPACE#valid' ) #NEWLINE#
plt . yticks ( list ( range ( y . max ( ) + 1 ) ) , labels ) #NEWLINE#
return list ( self . keys ( ) ) #NEWLINE#
def addNameToDictionary ( d , tup ) : #NEWLINE# #INDENT# if tup [ 0 ] not in d : #NEWLINE# #INDENT# #INDENT# d [ tup [ 0 ] ] = { } #NEWLINE# #INDENT# #INDENT# #NEWLINE# #NEWLINE# d [ tup [ 0 ] ] [ tup [ 1 ] ] = [ tup [ 2 ] ] #NEWLINE#
r = requests . post ( url , data = json . dumps ( payload ) , headers = headers ) #NEWLINE#
response = requests . get ( url , params = query ) #NEWLINE#
tree = tree . getroottree ( ) #NEWLINE#
columns = [ 'station' , 'julian_day' , 'hours' , 'seconds' , 'U' , 'Ud' , 'T' , 'RH' ] #NEWLINE#
return float ( 'nan' ) #NEWLINE#
a . findPerson ( nom = 'dave' , num = 123 ) #NEWLINE#
print ( 'No#SPACE#digit#SPACE#in#SPACE#that#SPACE#string' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
os . rename ( original , output ) #NEWLINE#
inlist = [ - 3 , - 2 , - 1 ] #NEWLINE#
L = [ 2 , 1 , 4 , 3 , 5 , 1 , 2 , 1 , 1 , 6 , 5 ] #NEWLINE#
self . meatvar . set ( 'Beef' ) #NEWLINE#
self . meatvar . set ( 'Pork' ) #NEWLINE#
"""<MY_TOKEN>""" #NEWLINE#
orderdict = dict ( ( y , x ) for x , y in enumerate ( wantedorder ) ) #NEWLINE#
a = np . random . random ( 20 ) . reshape ( 4 , 5 ) #NEWLINE#
log . addHandler ( config [ 'DEBUG_LOG_HDL' ] ) #NEWLINE#
d . setdefault ( key , [ ] ) . append ( val ) #NEWLINE#
pool . join ( ) #NEWLINE#
{ { tag } } #NEWLINE#
result = Test . objects . values ( 'c' , 'd' ) . annotate ( Sum ( 'a' ) , Sum ( 'b' ) ) #NEWLINE#
scheduler . schedule ( datetime . utcnow ( ) , 'mytask' , interval = 60 * 5 ) #NEWLINE#
sys . path . insert ( 0 , '/home/YOUR_NAME_HERE/distribs/gdb_printers/python' ) #NEWLINE#
curses . wrapper ( questionloop ) #NEWLINE#
print ( '%r' % buffer ) #NEWLINE#
ax . set ( xlim = [ 0 , Maxv ] ) #NEWLINE#
return NULL #NEWLINE#
t . total_seconds ( ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 ] #NEWLINE#
int ( ) #NEWLINE#
from . models import * #NEWLINE#
curses . echo ( ) #NEWLINE#
QtCore . QCoreApplication . instance ( ) . quit ( ) #NEWLINE#
cursor . execute ( sql , { 'name' : user_name , 'email' : user_email } ) #NEWLINE#
mask = np . ones ( len ( data ) , np . bool ) #NEWLINE#
f_out = open ( 'mytxt' , 'w+' ) #NEWLINE#
locale . setlocale ( locale . LC_ALL , '' ) #NEWLINE#
'GAAAAAGUAUGCAAGA' , 'GAAAAAGUAUGCAAGAA' , 'GAAAAAGUAUGCAAGAAC' #NEWLINE#
'GAGAGAGACAUAG' , 'GAGAGAGACAUAGA' , 'GAGAGAGACAUAGAG' #NEWLINE#
the_string = input ( ) #NEWLINE# name , age = the_string . split ( ) #NEWLINE#
slices = [ sli for sli in ( list ( islice ( it , 0 , i ) ) for i in seclist ) if sli ] #NEWLINE#
cherrypy . quickstart ( root , '/' , conf ) #NEWLINE#
MyData = [ ( 1 , 2 , 'A' ) , ( 4 , 5 , 'B' ) , ( 7 , 8 , 'C' ) ] #NEWLINE#
fixpath = os . path . join ( filepath , 'Contents/MacOS/ErrorScatter' ) #NEWLINE#
print ( { k : ( x . get ( k , 0 ) + y . get ( k , 0 ) ) for k in set ( x ) } ) #NEWLINE#
return ( string_to_expand * ( length / len ( string_to_expand ) + 1 ) ) [ : length ] #NEWLINE#
my_string = my_string . lower ( ) . split ( ) #NEWLINE#
timedelta ( hours = 3 ) #NEWLINE#
df3 = pd . concat ( ( df1 , df2 ) ) #NEWLINE# df3 . groupby ( df3 . index ) . mean ( ) #NEWLINE#
s = s [ : : - 1 ] #NEWLINE#
df1 . columns = pd . MultiIndex . from_tuples ( new_cols ) #NEWLINE#
print ( 'Demais#SPACE#SubfunÃ§Ãµes#SPACE#12' . decode ( 'utf8' ) ) #NEWLINE#
print ( '"%s"#SPACE#Clicked' % item . text ( ) ) #NEWLINE#
rline = rline . replace ( 'Â£' , 'Â£' ) #NEWLINE#
url ( '^(?P<model_slug>[\\w-]+)/$' , MyView . as_view ( ) , name = 'my_named_view' ) #NEWLINE#
STATIC_URL = '//static.MYDOMAIN.com/' #NEWLINE# STATIC_ROOT = '/home/USER/public_html/static.MYDOMAIN.com/' #NEWLINE#
Base . metadata . create_all ( e ) #NEWLINE#
y . foo . bar . findAll ( 'type' ) [ 1 ] [ 'foobar' ] #NEWLINE#
print ( df . loc [ 'Dog' ] . nlargest ( 2 ) ) #NEWLINE#
client . Resolver . __init__ ( self , servers = servers ) #NEWLINE#
print ( is_summer_time ( aware ) ) #NEWLINE#
b = sorted ( sorted ( a , key = lambda x : x [ 0 ] ) , key = lambda x : x [ 1 ] , reverse = True ) #NEWLINE#
t . cancel ( ) #NEWLINE#
r . match ( 'January#SPACE#31,#SPACE#2001' ) is not None #NEWLINE#
r . match ( 'April#SPACE#30,#SPACE#1908' ) is not None #NEWLINE#
is_valid_code ( 'x#SPACE#=#SPACE#++-+#SPACE#1+-' ) #NEWLINE#
s = 'the#SPACE#quick#SPACE#brown#SPACE#fox#SPACE#jumps#SPACE#over#SPACE#the#SPACE#lazy#SPACE#dog' #NEWLINE#
map ( add , a , itertools . repeat ( 2 , len ( a ) ) ) #NEWLINE#
return line . split ( ',' , 1 ) [ 0 ] #NEWLINE#
finder1 . apply_freq_filter ( 2 ) #NEWLINE#
return x ** 2 - 2 #NEWLINE#
data = np . arange ( 100 , dtype = np . int ) #NEWLINE#
signal . signal ( getattr ( signal , name ) , handler ) #NEWLINE#
return '' . join ( [ c for c in s if c . isalpha ( ) ] ) #NEWLINE#
nums = [ int ( x ) for x in num_str . split ( ',' ) ] #NEWLINE# zip ( * ( [ iter ( nums ) ] * 2 ) ) #NEWLINE#
getQuote ( 'GS' , what = yahooQF ( ) ) #NEWLINE#
m . file ( '/tmp/document.pdf' ) #NEWLINE#
diff = set ( zip ( df2 . Buyer , df2 . Quantity ) ) - set ( zip ( df1 . Buyer , df1 . Quantity ) ) #NEWLINE#
datesDF = pd . DataFrame ( dates ) #NEWLINE#
threading . Timer ( 1 , foo ) . start ( ) #NEWLINE#
n [ 1 ] #NEWLINE#
print ( kwlist ) #NEWLINE#
a . name ( ) #NEWLINE#
sleep ( 1 ) #NEWLINE#
df [ 'cumsum' ] = df [ 'cumsum' ] . fillna ( method = 'ffill' ) #NEWLINE#
p . stdout . readline ( ) #NEWLINE#
"""""" . join ( chain ( sequence , repeat ( obj , 1 ) ) ) #NEWLINE#
self . assertEqual ( self . get_written_string ( ) , 'a,b\n1,2' ) #NEWLINE#
Parent . __init__ ( self , x ) #NEWLINE#
list ( d . items ( ) ) #NEWLINE#
subtraction = int ( start_big ) - int ( start_small ) #NEWLINE#
run ( 'pip#SPACE#freeze' ) #NEWLINE#
s = 'hello,#SPACE#world' #NEWLINE#
pcolor ( my_array , cmap = cmap , norm = NoNorm ( ) ) #NEWLINE#
'ZINC00043096' , 'C.3' , 'C1' , - 0.154 , 'methyl' #NEWLINE#
root = tk . Tk ( ) #NEWLINE#
do_something ( ) #NEWLINE#
r . clipboard_clear ( ) #NEWLINE#
b = [ 1 , 2 , 5 ] #NEWLINE#
x = np . lib . stride_tricks . as_strided ( y , shape = ( A , B ) , strides = ( n , n ) ) #NEWLINE#
os . makedirs ( f ) #NEWLINE#
im = Image . open ( 'um_000000.png' ) #NEWLINE#
plt . bar ( x [ i ] , y [ i ] , color = cm . jet ( 1.0 * i / len ( x ) ) ) #NEWLINE#
return dict ( ( v , k ) for k , v in d1 . items ( ) ) [ 55 ] #NEWLINE#
return render_template ( 'doc.html' , doc_id = id ) #NEWLINE#
button . setVisible ( False ) #NEWLINE#
print ( 'duplicate:' , list_a [ i ] ) #NEWLINE#
name , adult , child = line . split ( ',' ) #NEWLINE#
test = [ ( 'hi' , 1 ) , ( 'there' , 2 ) ] #NEWLINE#
println ( i ) #NEWLINE#
ans = np . in1d ( trainY , 'php' ) . sum ( ) #NEWLINE#
jobServer . <STR0> ( doRun , ( param , ) ) #NEWLINE#
[ '1345207523' , '-1953633084' , '-2041119774' , '587903155' ] , #NEWLINE#
maxval = max ( iter ( dict . items ( ) ) , key = operator . itemgetter ( 1 ) ) [ 1 ] #NEWLINE# keys = [ k for k , v in list ( dict . items ( ) ) if v == maxval ] #NEWLINE#
template = jinja2 . Template ( "{{#SPACE#users|reject('sameas',#SPACE#'tom')|join(',')#SPACE#}}" ) #NEWLINE#
df = pd . DataFrame ( list ( data . items ( ) ) , columns = [ 'Date' , 'DateValue' ] ) #NEWLINE#
print ( tailq . get ( ) ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 0 , 4 ) , ( 2 , 3 , 1 ) , ( 3 , 4 , 0 ) , ( 4 , 2 , 3 ) #NEWLINE#
from scrapy . contrib . linkextractors . sgml import SgmlLinkExtractor #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
print ( urllib . parse . unquote ( urllib . parse . quote ( s . encode ( 'utf8' ) ) ) ) #NEWLINE#
user = authenticate ( username = 'john' , password = 'password#SPACE#to#SPACE#check' ) #NEWLINE#
ordered = list ( [ x for x in ordered if x not in unordered ] ) #NEWLINE#
regex . split ( 'Westminister15London#SPACE#England' ) #NEWLINE#
tot = data [ 'x' ] + data [ 'y' ] + data [ 'z' ] #NEWLINE#
doc . SaveAs ( 'C:\\TestFiles\\TestDoc.doc' ) #NEWLINE#
try : #NEWLINE# #INDENT# val = int ( userInput ) #NEWLINE# except ValueError : #NEWLINE# #INDENT# print ( "That's#SPACE#not#SPACE#an#SPACE#int!" ) #NEWLINE#
next ( c ) #NEWLINE#
print ( 'Ok,#SPACE#this#SPACE#is#SPACE#actually#SPACE#running' ) #NEWLINE#
app = Flask ( __name__ ) #NEWLINE#
self . assertEqual ( e . args [ 0 ] , 42 ) #NEWLINE#
result = pool . map_async ( task , [ ( x , q ) for x in range ( 10 ) ] ) #NEWLINE#
some_queryset [ : length ] if length else some_queryset [ : ] #NEWLINE#
s . write ( 'hello' ) #NEWLINE#
print ( get_connection ( 'Y:' ) ) #NEWLINE#
'app/js/api.js' , 'app/js/game.js' , 'app/js/user.js' #NEWLINE#
return listmatrixMap ( add , a , b ) #NEWLINE#
return super ( MultipartResource , self ) . patch_detail ( request , ** kwargs ) #NEWLINE#
s3 = boto3 . resource ( 's3' ) #NEWLINE#
session = requests . session ( cookies = cookies ) #NEWLINE#
new_list . append ( v ) #NEWLINE#
list ( calendar . day_abbr ) #NEWLINE#
super ( A , self ) . my_method ( ) #NEWLINE#
self . fields [ 'state' ] . choices = available_choices #NEWLINE#
return compare_lists ( a [ 1 : ] , b [ 1 : ] ) #NEWLINE#
msvcrt . getch ( ) #NEWLINE#
sns . set ( style = 'ticks' , palette = 'colorblind' ) #NEWLINE#
h = sns . FacetGrid ( vdata , col = 'Species' , hue = 'binary_v' ) #NEWLINE#
s . connect ( ( 'check.torproject.org' , 443 ) ) #NEWLINE#
dict ( ( k , adict [ k ] ) for k in ( 'key1' , 'key2' , 'key99' ) if k in adict ) #NEWLINE#
( 5 ) ( ) #NEWLINE#
forms [ 2 ] . set_value ( 'LOOK!!!!#SPACE#I#SPACE#SET#SPACE#THE#SPACE#VALUE#SPACE#OF#SPACE#THIS#SPACE#UNNAMED#SPACE#CONTROL!' , nr = 5 ) #NEWLINE#
np . arange ( 10 ) [ 10 : - 10 : - 1 ] #NEWLINE#
print ( 'Value#SPACE#error!#SPACE#Please#SPACE#try#SPACE#again!' ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
result = run ( 'ls#SPACE#-l' ) #NEWLINE#
f . close ( ) #NEWLINE#
datetime_obj . replace ( year = now . year , month = now . month , day = now . day ) #NEWLINE#
a = np . random . random ( ( 20 , 3 ) ) #NEWLINE#
cleaned_list = list ( filter ( is_not_thing , some_list ) ) #NEWLINE#
with open ( 'foo.txt' , 'r' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# for i in line . split ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# if i . isdigit ( ) : #NEWLINE# #INDENT# #INDENT# #INDENT# #INDENT# my_list . append ( int ( i ) ) #NEWLINE#
use_library ( 'django' , '1.2' ) #NEWLINE#
pylab . xlim ( xmin = 0 ) #NEWLINE#
fh . close ( ) #NEWLINE#
help ( f ) #NEWLINE#
ax . init3d ( ) #NEWLINE#
result = sm . ols ( formula = 'sales#SPACE#~#SPACE#date_delta' , data = city_data ) . fit ( ) #NEWLINE#
money = Column ( Integer , default = 100 ) #NEWLINE#
sp . stdin . close ( ) #NEWLINE#
p . communicate ( input = str ) #NEWLINE#
s = 'It#SPACE#actually#SPACE#happened#SPACE#when#SPACE#it#SPACE#acted#SPACE#out#SPACE#of#SPACE#turn.' #NEWLINE# s . count ( 't#SPACE#a' ) #NEWLINE#
words = [ 'hello' , 'world' , 'you' , 'look' , 'nice' ] #NEWLINE#
print ( x ) #NEWLINE#
bird_data = [ [ 3 , 0 , 1 ] , [ 7 , 1 , 12 ] , [ 8 , 3 , 0 ] , [ 0 , 12 , 15 ] ] #NEWLINE#
df . iloc [ idx ] #NEWLINE#
MyClass . call_me ( ) #NEWLINE#
return some_value #NEWLINE#
imgtk = ImageTk . PhotoImage ( image = im ) #NEWLINE#
zeroMatrix = [ zeroArray [ : ] for i in range ( Np ) ] #NEWLINE#
myseries = pd . Series ( [ 1 , 7 , 0 , 7 , 5 ] , index = [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE# list ( myseries [ myseries == 7 ] . index ) #NEWLINE#
return utc_dt + timedelta ( hours = longitude / math . pi * 12 ) #NEWLINE#
return '__mycode' in globals #NEWLINE#
return s . group ( 0 ) . encode ( 'latin1' ) . decode ( 'utf8' ) #NEWLINE#
return np . sqrt ( val / 2.0 / a . shape [ 0 ] ) #NEWLINE#
ax . legend ( bbox_to_anchor = ( 1.05 , 0 ) , loc = 'lower#SPACE#left' , borderaxespad = 0.0 ) #NEWLINE#
transaction . commit ( ) #NEWLINE#
ids = [ 335 , 468 , 481 , 542 , 559 , 567 , 609 ] #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 4 ) , ( 2 , 3 , 1 ) , ( 3 , 4 , 0 ) , ( 4 , 0 , 3 ) #NEWLINE#
[ 'c' ] #NEWLINE#
self . _fp . close ( ) #NEWLINE#
return re . sub ( r , replacer , string ) #NEWLINE#
return bundle . obj == bundle . request . user #NEWLINE#
def debug ( s ) : #NEWLINE# #INDENT# print ( s ) #NEWLINE#
df1 = df . stack ( level = 0 ) . groupby ( 'team' ) . tail ( 1 ) #NEWLINE#
start = datetime . time ( 23 , 0 , 0 ) #NEWLINE#
new_results = sm . load ( 'longley_results.pickle' ) #NEWLINE#
print ( re . sub ( '^\\t+' , lambda m : '#SPACE##SPACE#' * len ( m . group ( ) ) , s , flags = re . M ) ) #NEWLINE#
result = np . fromstring ( in_data , dtype = np . float32 ) #NEWLINE#
element = WebDriverWait ( driver , 10 ) . until ( EC . presence_of_element_located ( ( #NEWLINE# By . ID , 'myDynamicElement' ) ) ) #NEWLINE#
PNPDeviceID = 'USB\\VID_10C4&PID_ED00\\1269376' #NEWLINE#
[ [ '#1' , '#1' , '#2' , '#3' , '#4' ] , [ '#1' , '#1' , '#2' , '#3' , '#4' ] , [ '#1' , #NEWLINE# '#1' , '#2' , '#5' , '#6' ] , [ '#1' , '#1' , '#2' , '#5' , '#6' ] ] #NEWLINE#
soup = BeautifulSoup ( html_doc ) #NEWLINE#
{ 'abc|1' : '1234|1' , 'cde|3' : '5678|3' , 'bcd|2' : [ '2345|2' , '3456|2' , '4567|2' ] } #NEWLINE#
ax . yaxis . set_major_formatter ( matplotlib . ticker . ScalarFormatter ( ) ) #NEWLINE#
lock . release ( ) #NEWLINE#
a = np . array ( [ 1 , 2 , 1 , 1 , 2 ] ) #NEWLINE#
super ( D , self ) . test ( ) #NEWLINE#
pip . main ( [ 'install' , package ] ) #NEWLINE#
a = '' . join ( next ( b ) if i == '1' else i for i in '01000111000011' ) #NEWLINE#
wait ( ) #NEWLINE#
'foo' , [ ] #NEWLINE#
print ( self . cleaned_data [ 'select_to_change' ] ) #NEWLINE#
ax . set_xticklabels ( arr [ 'f1' ] , rotation = 0 ) #NEWLINE#
self . pressed . connect ( self . update ) #NEWLINE#
array ( [ 0.00423365 , 0.00224748 , 0.00193344 , 0.9982576 , - 0.00594063 , #NEWLINE# 0.00834339 , 0.99803901 , - 0.00536561 , 0.00286598 ] ) #NEWLINE#
df . index = pd . MultiIndex . from_tuples ( df . index ) #NEWLINE#
print ( spectra_list [ 0 ] ) #NEWLINE#
df = pd . read_csv ( 'otherfile.csv' , encoding = 'utf-16' , header = None ) #NEWLINE#
l = s . readlist ( '10*intle:24' ) #NEWLINE#
list3 [ i ] = list1 [ i ] + list2 [ i ] #NEWLINE#
df [ 'Features' ] & frozenset ( { 1 , 40020 } ) #NEWLINE#
[ 0.7628095787179151 , - 0.5977153368303585 , 0.24669398601094406 ] #NEWLINE#
parser . add_argument ( 'args' , nargs = argparse . REMAINDER ) #NEWLINE#
self . assertEqual ( '200#SPACE#OK' , response . status ) #NEWLINE#
print ( sum ( 1 for i in lst if i != <VAR0> ) ) #NEWLINE#
assert np . allclose ( expected , result ) #NEWLINE#
print ( 'Timeout#SPACE#waiting#SPACE#for#SPACE#%s' % packet [ IP ] . dst ) #NEWLINE#
print ( t . timeit ( 5 ) ) #NEWLINE#
ax . set_title ( 'Normal#SPACE#Spines' ) #NEWLINE#
zk . ensure_path ( '/app/someservice' ) #NEWLINE#
fig = plt . figure ( figsize = ( 10 , 8 ) ) #NEWLINE#
model . the_field = 'Something' #NEWLINE#
imp . get_suffixes ( ) #NEWLINE#
self . seek ( 0 ) #NEWLINE#
[ 'abcde' ] #NEWLINE#
views . py #NEWLINE#
wordorder = dict ( zip ( list2 , list ( range ( len ( list2 ) ) ) ) ) #NEWLINE# wordorder #NEWLINE# sorted ( list1 , key = lambda x : wordorder . get ( x . split ( '-' ) [ 1 ] , len ( wordorder ) ) ) #NEWLINE#
seq . put ( ) #NEWLINE#
bufsize = 0 #NEWLINE# f = open ( 'file.txt' , 'w' , bufsize ) #NEWLINE#
cursor . execute ( 'SELECT#SPACE#1#SPACE#from#SPACE#words#SPACE#where#SPACE#word=?' , ( second_word , ) ) #NEWLINE#
plt . draw ( ) #NEWLINE#
[ i for i in range ( 2 , 25 ) if f ( i ) ] #NEWLINE#
pymongo_collection_object . remove ( { 'sku' : { '$in' : [ '100-00' , '200-00' ] } } , #NEWLINE# safe = True ) #NEWLINE#
sys . exit ( ) #NEWLINE#
print ( numpy . array ( [ n . activate ( x ) for x , _ in d ] ) ) #NEWLINE#
b = ma . masked_array ( [ 0 , 1 , 2 , 4 ] , [ True , True , False , False ] ) #NEWLINE#
letterGoodness = dict ( zip ( string . ascii_uppercase , letterGoodness ) ) #NEWLINE#
decimal . Decimal ( 1.0 ) - decimal . Decimal ( '1.0e-17' ) < 1.0 #NEWLINE#
profile . set_preference ( 'browser.download.folderList' , 2 ) #NEWLINE#
return dict ( d ) #NEWLINE#
query_pairs = [ ( k , v ) for k , vlist in d . items ( ) for v in vlist ] #NEWLINE# urllib . parse . urlencode ( query_pairs ) #NEWLINE#
np . add . reduceat ( a , w [ : - 1 ] ) . astype ( float ) / np . diff ( w ) #NEWLINE#
G [ u ] [ v ] [ 'draw' ] . set_alpha ( 1.0 ) #NEWLINE#
from queue import * #NEWLINE#
parser_serial . add_argument ( '--fun' ) #NEWLINE#
yield numbers [ i ] , number #NEWLINE#
for line in lines : #NEWLINE# #INDENT# words = line . split ( '-' ) #NEWLINE#
class MyCollection ( list ) : #NEWLINE# #NEWLINE# def __init__ ( self , * args , ** kwargs ) : #NEWLINE# #INDENT# #INDENT# super ( MyCollection , self ) . __init__ ( args [ 0 ] ) #NEWLINE#
a . symmetric_difference ( b ) #NEWLINE#
os . environ . setdefault ( 'DJANGO_SETTINGS_MODULE' , 'mvod.dev_settings' ) #NEWLINE#
atexit . register ( whatever ) #NEWLINE#
s2 = s . split ( '&' ) [ 0 ] #NEWLINE#
enternum . pack ( ) #NEWLINE#
config = ConfigParser . ConfigParser ( ) #NEWLINE#
ctypes . windll . user32 . PostQuitMessage ( 0 ) #NEWLINE#
map ( lambda x : x [ 0 ] == 1 , a_list ) #NEWLINE#
closest_date = min ( later , key = lambda d : get_datetime ( d [ 0 ] ) ) #NEWLINE#
picturetag = audio . tags [ 'APIC:Folder.jpg' ] #NEWLINE#
a = Popen ( [ 'a' ] , stdin = PIPE , stdout = PIPE ) #NEWLINE#
for i in range ( 3500 ) : #NEWLINE# #INDENT# time . sleep ( 1 ) #NEWLINE#
process ( line ) #NEWLINE#
ax . set_title ( 'Wage#SPACE#Variance#SPACE#and#SPACE#Mean#SPACE#Age' ) #NEWLINE# plt . show ( ) #NEWLINE#
class Foo ( object ) : #NEWLINE# #INDENT# x = iter ( [ 1 , 2 , 3 ] ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# f = Foo ( ) #NEWLINE# dill . pickles ( f ) #NEWLINE#
time . sleep ( SPINUP_WAIT_TIME ) #NEWLINE#
self . master . destroy ( ) #NEWLINE#
input = [ 1 , 2 , 3 , 4 ] #NEWLINE#
[ 'Phoenix' , 'Tucson' , 'Flagstaff' , 'Salt#SPACE#Lake#SPACE#City' , 'Park#SPACE#City' , 'Denver' , #NEWLINE# 'Estes#SPACE#Park' , 'Colorado#SPACE#Springs' , 'Pueblo' , 'Albuquerque' ] #NEWLINE#
session . commit ( ) #NEWLINE#
counts = pd . concat ( [ mcounts , scounts ] , axis = 1 , keys = [ 'M' , 'S' ] ) #NEWLINE#
cov_mat2 = np . array ( [ [ 1 , 0 , 0 ] , [ 0 , 1 , 0 ] , [ 0 , 0 , 1 ] ] ) #NEWLINE#
yield self . _rightchild #NEWLINE#
self . button . setContextMenuPolicy ( QtCore . Qt . CustomContextMenu ) #NEWLINE#
app . logger . addHandler ( ch ) #NEWLINE#
return render_template ( 'login.html' , ** context ) #NEWLINE#
l = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
print ( sum ( ( a - i ) ** 2 , 1 ) . argmin ( ) ) #NEWLINE#
print ( mywrap ( s , 10 ) ) #NEWLINE#
sorted ( versions , key = LooseVersion ) #NEWLINE#
pipe = Popen ( [ 'program' , 'arg1' , 'arg2' ] ) #NEWLINE# pipe . wait ( ) #NEWLINE#
regex = re . sub ( '\\(\\?&(\\w+)\\)' , lambda m : defines [ m . group ( 1 ) ] , regex ) #NEWLINE#
return a [ 0 ] * b [ 0 ] + a [ 1 ] * b [ 1 ] + a [ 2 ] * b [ 2 ] #NEWLINE#
c . setopt ( c . WRITEFUNCTION , storage . write ) #NEWLINE#
extension = guess_extension ( guess_type ( url ) ) #NEWLINE#
show ( layout ) #NEWLINE#
temp = temp . reshape ( 1 , - 1 ) #NEWLINE#
np . delete ( myarray , np . r_ [ tuple ( mylist ) ] ) #NEWLINE#
a = [ [ 'John' , 'Sergeant#SPACE#' ] , [ 'Jack' , 'Commander#SPACE#' ] , [ 'Jill' , 'Captain#SPACE#' ] ] #NEWLINE#
sockOutfile . write ( readRequest ) #NEWLINE#
big_df [ ~ big_df [ 'User#SPACE#Name' ] . str . contains ( '(?:DA|PL)$' ) ] #NEWLINE#
return pd . DataFrame ( ( d2 - sums2 / n ) / stds2 / n , df . columns , df . columns [ k : l ] ) #NEWLINE#
f = codecs . open ( filename , encoding = 'utf-8' , errors = 'strict' ) #NEWLINE#
rows = my_table . findChildren ( [ 'th' , 'tr' ] ) #NEWLINE#
ax . axis ( 'equal' ) #NEWLINE#
return s . replace ( '\r\n' , '#SPACE#' ) #NEWLINE#
eval ( '1e-07' ) #NEWLINE#
import Image , ImageDraw #NEWLINE#
"""^[0-9A-Za-z_-]+$""" #NEWLINE#
time . sleep ( 5 ) #NEWLINE#
sys . exit ( 1 ) #NEWLINE#
address_2 = factory . RelatedFactory ( AddressFactory , 'person' ) #NEWLINE#
fig , ax = plt . subplots ( ) #NEWLINE#
x = array ( [ - 273.0 , - 176.4 , - 79.8 , 16.9 , 113.5 , 210.1 , 306.8 , 403.4 , 500.0 ] ) #NEWLINE#
self . setFixedSize ( pic . size ( ) ) #NEWLINE#
screen = win . get_screen ( ) #NEWLINE#
print ( ( i [ 0 ] + 1 , i [ 1 ] ) ) #NEWLINE#
opener . open ( request ) #NEWLINE#
return _epoch + timedelta ( days = ordinal - 1 ) #NEWLINE#
print ( a [ 150001 , 2 ] ) #NEWLINE#
xml . write ( '<year>%s</year>' % m . group ( 5 ) ) #NEWLINE#
fd . write ( 'echo#SPACE#$PATH\n' ) #NEWLINE#
df [ 'col.2' ] = df . groupby ( 'col.1' ) [ 'col.2' ] . cumsum ( ) #NEWLINE# df [ 'col.2' ] = df . groupby ( 'col.1' ) [ 'col.2' ] . cumsum ( ) #NEWLINE# df = df [ df [ 'col.2' ] < 2 ] #NEWLINE#
return '' . join ( [ c for c in s if c in chars_keep ] ) #NEWLINE#
df = pd . DataFrame ( columns = [ 'col1' , 'col2' ] ) #NEWLINE#
1 , 2 , 3 , 4 , 5 , 6 #NEWLINE#
df1 = pd . DataFrame ( { 'val' : { 'a' : 1 , 'b' : 2 , 'c' : 3 } } ) #NEWLINE#
A . __init__ ( self , * args , ** kwargs ) #NEWLINE#
info = [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] #NEWLINE#
data = cur . fetchone ( ) [ 0 ] #NEWLINE#
print ( s . rfind ( 'H' ) ) #NEWLINE#
1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 20160224 , 20160226 #NEWLINE#
datetime . datetime . fromordinal ( t . toordinal ( ) ) #NEWLINE#
D = np . random . random_integers ( 0 , 1 , ( 5 , 5 ) ) #NEWLINE#
print ( '{0}{1}{2}{3}' . format ( indent , start_shape , current_node . name , end_shape ) ) #NEWLINE#
__tablename__ = 'foo' #NEWLINE#
attrs_present = [ x for x in a_list if getattr ( a_obj , x , None ) is not None ] #NEWLINE#
import yaml #NEWLINE#
pack ( 'hhl' , 1 , 2 , 3 ) #NEWLINE#
loader . add_xpath ( 'name' , 'xpath#SPACE#to#SPACE#name' ) #NEWLINE#
combs . append ( ( x , y ) ) #NEWLINE#
d [ 'head' ] , d [ 'tail' ] = d [ 'tail' ] , d [ 'head' ] #NEWLINE#
print ( soup ) #NEWLINE#
{ 2 , 4 , 10 } . issubset ( chain . from_iterable ( x ) ) #NEWLINE#
array ( [ 0 , 3 , 4 , 5 ] ) , #NEWLINE#
print ( "#########SPACE#USE:#SPACE#'a#SPACE#b#SPACE#c#SPACE#d#SPACE#e#SPACE#f#SPACE#'*100" ) #NEWLINE#
driver . find_element_by_id ( 'su' ) . submit ( ) #NEWLINE#
print ( 'dupe' , item [ 1 ] ) #NEWLINE#
plt . axis ( 'equal' ) #NEWLINE#
if 'identifier' in line : #NEWLINE# #INDENT# f_new . write ( 'extra#SPACE#stuff\n' ) #NEWLINE#
instance = conn . get_all_instances ( instance_ids = [ 'instance_id' ] ) #NEWLINE# print ( instance [ 0 ] . instances [ 0 ] . start ( ) ) #NEWLINE#
result . append ( s ) #NEWLINE#
rdd1 = sc . parallelize ( [ 1 , 2 , 3 ] ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE#
mylist = [ ] #NEWLINE#
sys . __repr__ ( ) #NEWLINE#
photo = models . ImageField ( upload_to = photo_path , blank = True ) #NEWLINE#
print ( new_data . shape ) #NEWLINE#
plt . xticks ( bins , [ ( '2^%s' % i ) for i in bins ] ) #NEWLINE#
img_file . save ( new_image_name ) #NEWLINE#
def moobar ( ) : #NEWLINE# #INDENT# print ( 'hi' ) #NEWLINE#
text . set_text ( s ) #NEWLINE#
out [ idx , idx ] = A [ idx , idx ] #NEWLINE#
my_logger = logging . getLogger ( 'MyLogger' ) #NEWLINE#
print ( 'Hello#SPACE#World' ) #NEWLINE#
n_grams = CountVectorizer ( ngram_range = ( 1 , 5 ) ) #NEWLINE#
print ( "Your#SPACE#terminal's#SPACE#width#SPACE#is:#SPACE#%d" % width ) #NEWLINE#
QWebPage . __init__ ( self ) #NEWLINE#
[ 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 ] #NEWLINE#
unicodedata . decomposition ( unicodedata . lookup ( 'VULGAR#SPACE#FRACTION#SPACE#ONE#SPACE#QUARTER' ) ) #NEWLINE#
ax = fig . add_axes ( [ 0.1 , 0.1 , 0.8 , 0.8 ] ) #NEWLINE#
end = datetime . datetime . strptime ( date2 , '%Y-%m-%d' ) #NEWLINE#
return [ ( word [ : i ] + word [ i + 1 : ] ) for i in indexes ] #NEWLINE#
locale . currency ( 188518982.18 ) #NEWLINE#
object . __setattr__ ( self , name , value ) #NEWLINE#
print ( sys . executable ) #NEWLINE#
return lambda x : sum ( f ( x ) for f in terms ) #NEWLINE#
print ( 'Bar' ) #NEWLINE#
print ( 'Baz' ) #NEWLINE#
raise Exception ( stdscr . instr ( 20 , 15 , 3 ) ) #NEWLINE#
print ( 'Line#SPACE#{}' . format ( i ) , file = f ) #NEWLINE#
( rankdata ( a ) - 1 ) . astype ( int ) #NEWLINE#
sys . __stdout__ . write ( data ) #NEWLINE#
f . write ( 'foo' ) #NEWLINE#
Person . create ( name = 'Bob2' , birthday = dt . date ( 1960 , 3 , 13 ) ) #NEWLINE#
ax . errorbar ( data [ 'mean' ] , pos , xerr = data [ 'stdev' ] , fmt = None ) #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 ] #NEWLINE#
from django . db . models import Count #NEWLINE#
points = [ ( i , j ) for i , j in zip ( x , y ) ] #NEWLINE#
inprogress . append ( taskindex ) #NEWLINE#
icon_theme = gtk . icon_theme_get_default ( ) #NEWLINE#
ax . set_yticks ( majorticks , minor = False ) #NEWLINE#
"""{0}\"""" . format ( str ( round ( x , 1 ) if x % 1 else int ( x ) ) ) #NEWLINE#
module = globals ( ) . get ( module_name , None ) #NEWLINE#
k = x . split ( 'a' ) #NEWLINE#
[ ( x + y ) for x in '123' for y in 'pot' ] #NEWLINE#
li = [ 'a' , 'b' , 'c' ] #NEWLINE#
ssc . start ( ) #NEWLINE#
return datetime . date ( year , month , day ) #NEWLINE#
f ( 10 , 20 , 'blah' ) #NEWLINE#
print ( [ cls . __name__ for cls in X . mro ( ) ] ) #NEWLINE#
FNULL = open ( os . devnull , 'w' ) #NEWLINE#
blah = models . IntegerField ( choices = BLAH_CHOICES ) #NEWLINE#
t = ( a * e - b * d ) / ( a * c - b * b ) #NEWLINE#
sanitised_filename = sanitise_filesystem_name ( filename ) #NEWLINE#
X = [ i [ 0 ] for i in Counter ( df . X ) . most_common ( ) ] #NEWLINE#
data = [ [ float ( x ) for x in y ] for y in data ] #NEWLINE#
print ( flatten ( list ) ) #NEWLINE#
sum ( len ( tuple ( g ) ) > 1 for k , g in groupby ( 'ddogccatppig' ) ) #NEWLINE#
entry . configure ( state = 'normal' ) #NEWLINE#
df2 = df . groupby ( [ 'Category' , 'Result' ] ) . size ( ) . reset_index ( name = 'Count' ) #NEWLINE#
fronts = np . empty ( len ( M ) , int ) #NEWLINE#
name = models . CharField ( max_length = 128 ) #NEWLINE#
df = pd . DataFrame ( list ( zip ( * foo ) ) , columns = headers ) #NEWLINE# df #NEWLINE#
dt2 = datetime . datetime . fromtimestamp ( 234567890 ) #NEWLINE#
sio . readlines ( ) #NEWLINE#
key = '/' . join ( item [ : - 1 ] ) #NEWLINE#
g = <STR0> . cmd . Git ( git_dir ) #NEWLINE#
select = Select ( driver . find_element_by_id ( 'fruits01' ) ) #NEWLINE#
plt . loglog ( list ( range ( 100 ) ) ) #NEWLINE#
ax . xaxis . set_tick_params ( size = 0 ) #NEWLINE#
a = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] #NEWLINE#
out = idx [ mask ] . argsort ( ) [ unqID ] #NEWLINE#
df [ 'c' ] = df [ 'b' ] ** 2 #NEWLINE#
token = token_handler . create_token ( request , self . refresh_token ) #NEWLINE#
time . sleep ( 0.1 ) #NEWLINE#
print ( sys . path ) #NEWLINE#
heapq . heappush ( self . heap , ( pri , d ) ) #NEWLINE#
with open ( 'data.json' , 'r' ) as fp : #NEWLINE# #INDENT# data = json . load ( fp ) #NEWLINE#
print ( strings . group ( 0 ) ) #NEWLINE#
views . py #NEWLINE#
t . to_pydatetime ( ) #NEWLINE#
bitstring . BitArray ( filename = 'file.bin' ) . bin [ 2 : ] #NEWLINE#
class BookAdmin ( ModelAdmin ) : #NEWLINE# #INDENT# list_filter = 'author' , #NEWLINE#
fcntl . fcntl ( fd , fcntl . F_SETFL , fcntl . fcntl ( fd , fcntl . F_GETFL ) | os . O_NONBLOCK ) #NEWLINE#
print ( ( 'pm1' , id ( p_as_list ) ) ) #NEWLINE#
"""#SPACE#triple-double#SPACE#quotes#SPACE#""" #NEWLINE#
a [ idx ] #NEWLINE#
f = open ( FILENAME , 'r+b' ) #NEWLINE#
f = open ( FILENAME , 'wb' ) #NEWLINE#
locals ( ) is globals ( ) #NEWLINE#
import xml . dom . minidom as xml #NEWLINE#
list_c . extend ( l ) #NEWLINE#
window = NSApp . mainWindow ( ) #NEWLINE#
tuples = [ ( x , y ) for x in L1 for y in L1 if x != y ] #NEWLINE#
emissions = [ [ float ( x ) for x in nextline ( ) . split ( ) ] for i in range ( n ) ] #NEWLINE#
ImageDraw . Draw ( halo ) . text ( position , text , font = font , fill = halo_col ) #NEWLINE#
bit_array [ 25 ] = 1 #NEWLINE#
self . fd . seek ( offset ) #NEWLINE#
return [ i . name for i in obj . ingredient . all ( ) ] #NEWLINE#
__tablename__ = 'articles' #NEWLINE#
foo = Foo ( ) #NEWLINE#
self . html_file . close ( ) #NEWLINE#
widget . show ( ) #NEWLINE#
return '<b>' + str ( fn ) + '</b>' #NEWLINE#
return abs ( g ( a + b * f ( c ) ) + g ( a - b * f ( c ) ) - 1 ) < 1e-10 #NEWLINE#
fig . savefig ( 'temp.png' , transparent = True ) #NEWLINE#
element = driver . find_elements_by_id ( 'data' ) #NEWLINE#
return coll . find ( query ) . sort ( 'date' , - 1 ) #NEWLINE#
self . assertEqual ( Tweet . timeline ( 'user-0' ) [ ... ] ) #NEWLINE#
myorder = [ 3 , 2 , 0 , 1 , 4 ] #NEWLINE#
'format' , 'format_description' , 'fp' , 'frombytes' , 'fromstring' #NEWLINE#
return min ( s [ max ( 0 , i - 1 ) : i + 2 ] , key = lambda t : abs ( ts - t ) ) #NEWLINE#
crustFrame . Show ( ) #NEWLINE#
from Crypto . PublicKey import RSA #NEWLINE#
logger . info ( 'great!' ) #NEWLINE#
virtualenv / home / user / some / very / longer / path / without / spaces / etc / venv #NEWLINE#
asyncore . dispatcher . __init__ ( self ) #NEWLINE#
raise ValueError ( 'Expected#SPACE#a#SPACE#tuple' ) #NEWLINE#
[ x_y_z for x_y_z in a if x_y_z [ 0 ] + x_y_z [ 1 ] + x_y_z [ 2 ] > 6 ] #NEWLINE#
return statement . parseString ( text ) #NEWLINE#
print ( 'System#SPACE#about#SPACE#to#SPACE#hibernate#SPACE#or#SPACE#suspend' ) #NEWLINE#
print ( 'sending:' , n ) #NEWLINE#
A = np . arange ( 10 ) #NEWLINE#
layout = QtGui . QVBoxLayout ( ) #NEWLINE#
listOfLambdas = [ ( lambda : i * i ) for i in range ( 6 ) ] #NEWLINE#
firsttwo = words [ : 2 ] #NEWLINE#
driver . get ( 'your_url' ) #NEWLINE#
f1 . close ( ) #NEWLINE#
cookies [ 'cookie1' ] [ 'comment' ] = 'round' #NEWLINE#
cookies [ 'cookie2' ] [ 'path' ] = '/the/yellow/bag/' #NEWLINE#
cookies [ 'cookie2' ] [ 'comment' ] = 'thousands' #NEWLINE#
a = np . array ( ulysses . split ( ) ) #NEWLINE#
self . model . fetchMore ( ) #NEWLINE#
plt . legend ( ( 'input' , 'output,#SPACE#start=0' , 'output,#SPACE#start=1' ) ) #NEWLINE#
demandimport . __file__ #NEWLINE#
a = numpy . random . randn ( 100 , 200 ) #NEWLINE#
df [ df < 1 ] = 0 #NEWLINE#
console . log ( 'Listening#SPACE#on#SPACE#3000' ) #NEWLINE#
cookies = cookielib . LWPCookieJar ( ) #NEWLINE#
name = Column ( 'name' , String ) #NEWLINE#
__init__ . py #NEWLINE#
text = models . TextField ( ) #NEWLINE#
User [ 1 ] == { } #NEWLINE#
r = requests . get ( url ) #NEWLINE#
self . assertAlmostEqual ( em ( 1 , 2 ) , 0.2188 , 4 ) #NEWLINE#
b = tf . square ( tf . matrix_determinant ( a ) ) #NEWLINE#
sp . setdefault ( ( d [ 'host' ] , d [ 'db_name' ] ) , [ ] ) . append ( d ) #NEWLINE#
"""(?P<block>(?P<subject>[A-Z]{2,12})(?:(?P<operation>[*+])(?P<value>\\d+(?:\\.\\d{1,2})?))?)""" #NEWLINE#
print ( 'Enter/Paste#SPACE#your#SPACE#content.#SPACE#Ctrl-D#SPACE#to#SPACE#save#SPACE#it.' ) #NEWLINE#
window . connect ( 'destroy' , gtk . main_quit ) #NEWLINE#
extensions = [ 'sphinx.ext.autodoc' ] #NEWLINE#
logger . debug ( 'debug#SPACE#message' ) #NEWLINE#
"""$10^{{+{:.0f}}}$""" . format ( logx ) #NEWLINE#
counts = np . bincount ( id [ mask1 ] - 1 ) #NEWLINE#
cv . ShowImage ( 'w1' , frame ) #NEWLINE#
print ( bool ( '' ) ) #NEWLINE#
groupdict = { k : g for k , g in itertools . groupby ( sorted_list , keyfunction ) } #NEWLINE#
canvas . bind ( '<Button-1>' , canvas_mouse_click ) #NEWLINE#
tf . image_summary ( 'conv1/filters' , weights_transposed , max_images = 3 ) #NEWLINE#
b . has_usable_password ( ) #NEWLINE#
pd . DataFrame ( data = df . values . reshape ( df . shape [ 0 ] * 2 , - 1 ) , columns = [ 'original' ] ) #NEWLINE#
'canada' , 'usa' , 'mexico' , 'peru' , 'cuba' , 'chile' , 'argentina' #NEWLINE#
wjdata = json . loads ( wjson ) #NEWLINE#
elem . clear ( ) #NEWLINE#
return int ( math . factorial ( n ) / ( math . factorial ( r ) * math . factorial ( n - r ) ) ) #NEWLINE#
root = tree . getroot ( ) #NEWLINE#
df . sort ( [ 'ticker' , 'date' ] , inplace = True ) #NEWLINE# df [ 'diffs' ] = df [ 'value' ] . diff ( ) #NEWLINE#
widget . deleteLater ( ) #NEWLINE#
plt . title ( 't#SPACE#=#SPACE#%i' % i ) #NEWLINE#
my_list = [ 'name1@1111' , 'name2@2222' , 'name3@3333' ] #NEWLINE# dict ( i . split ( '@' ) for i in my_list ) #NEWLINE#
parent . remove ( elem ) #NEWLINE#
representatives = { i : i for i , c in enumerate ( s ) if c == '#' } #NEWLINE#
print ( f ( Decimal ( '1234567.000000' ) ) ) #NEWLINE#
print ( f ( Decimal ( '123456700000000.123' ) ) ) #NEWLINE#
img . resize ( width = scaled_width , height = scaled_hight ) #NEWLINE#
self . fitness = None #NEWLINE#
id = Column ( Integer , primary_key = True ) #NEWLINE#
print ( x ) #NEWLINE#
new = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
setp ( a , xticks = [ ] , yticks = [ ] ) #NEWLINE#
f . name #NEWLINE#
data . setdefault ( k , [ ] ) #NEWLINE#
"""""" . join ( c for c in s if c not in volString ) #NEWLINE#
plt . quiver ( X , Y , cos ( deg ) , sin ( deg ) , pivot = 'tail' , units = 'dots' , color = 'red' ) #NEWLINE#
ssh . connect ( server , username = username , password = password ) #NEWLINE#
return sign + str ( z ) + 'e' + str ( engr_exponent ) #NEWLINE#
labels = [ 1 , 2 , 3 ] #NEWLINE#
print ( type ( ( 1 , ) ) ) #NEWLINE#
re . sub ( "r'.'" , '' , "This#SPACE#.#SPACE#won't#SPACE#match" ) #NEWLINE#
return copy . deepcopy ( self ) #NEWLINE#
print ( datetime . datetime . fromtimestamp ( 43111.0 ) ) #NEWLINE#
self . window . addstr ( 1 + index , 1 , msg , mode ) #NEWLINE#
list . sort ( ) #NEWLINE#
chrome . get ( 'http://whatismyipaddress.com' ) #NEWLINE#
imp . filter . add ( 'http://domain4.com/url' ) #NEWLINE#
imp . filter . add ( 'http://domain5.com/url' ) #NEWLINE#
def validate_ip ( s ) : #NEWLINE# #INDENT# a = s . split ( '.' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# if len ( a ) != 4 : #NEWLINE# #INDENT# return False #NEWLINE# for x in a : #NEWLINE# #INDENT# if not x . isdigit ( ) : #NEWLINE# #INDENT# #INDENT# return False #NEWLINE# i = int ( x ) #NEWLINE# if i < 0 or i > 255 : #NEWLINE# #INDENT# return False #NEWLINE# return True #NEWLINE#
page = response . meta [ 'page' ] + 1 #NEWLINE#
text = 'cat\ndog' #NEWLINE#
psutil . virtual_memory ( ) #NEWLINE#
c = boto . connect_dynamodb ( ) #NEWLINE#
print ( locals ( ) ) #NEWLINE#
partials . append ( [ ] ) #NEWLINE#
BlogComment . save ( ) #NEWLINE#
url = opener . open ( request ) #NEWLINE#
urlpatterns = patterns ( '' , url ( '^profiles/$' , page_not_found ) ) #NEWLINE#
data = np . zeros ( ( h , w , 3 ) , dtype = np . uint8 ) #NEWLINE#
return int ( self ) #NEWLINE#
new_foo = filter_divisible_by_three ( foo ) #NEWLINE#
print ( s , 'is#SPACE#a#SPACE#bad#SPACE#string' ) #NEWLINE#
isbool = value is True or value is False #NEWLINE#
filter ( lambda x : x not in [ 'b' , 'c' ] , [ 'a' , 'b' , 'c' , 'd' , 'e' ] ) #NEWLINE#
[ 1 , 2 ] [ 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
Decimal ( '3.1415926535' ) + Decimal ( '2.7182818285' ) #NEWLINE#
f = df . groupby ( [ 'Type' , 'Name' ] ) [ 'Type' ] . agg ( { 'Frequency' : 'count' } ) #NEWLINE#
dTest . ix [ list ( range ( 1 , 4 ) ) , 'Open' ] #NEWLINE#
instance . new ( ) #NEWLINE#
print ( 'Hello' ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 0 , 4 ) , ( 3 , 4 , 0 ) , ( 4 , 3 , 1 ) #NEWLINE#
print ( ( 'Found' , A , B , C ) ) #NEWLINE#
list2 = [ 'T' , 'P' , 'M' , 'M' , 'A' , 'R' , 'k' , 'S' , 'G' , 'C' , 'N' ] #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
ecef_cities = [ geodetic2ecef ( lat , lon ) for lat , lon in cities ] #NEWLINE#
new_pressures [ - 1 ] += p [ index ] #NEWLINE#
script . extract ( ) #NEWLINE#
accum &= np . abs ( a [ : , ( i ) ] - b [ : , ( i ) ] . ravel ( ) ) < tol [ i ] #NEWLINE#
handler . setLevel ( logging . CRITICAL ) #NEWLINE#
name , adult , child = line . split ( ',' ) #NEWLINE#
df #NEWLINE#
return u in G . neighbors ( v ) #NEWLINE#
cvtColor ( im , imgrey , CV_RGB2GRAY ) #NEWLINE#
[ 'blah' , 'duh' ] #NEWLINE#
self . cam . release ( ) #NEWLINE#
irc . send ( bytes ( 'PRIVMSG#SPACE#' + chan + '#SPACE#:Logged#SPACE#out!\r\n' , 'utf-8' ) ) #NEWLINE#
irc . send ( bytes ( 'part#SPACE#' + chan + '\r\n' , 'utf-8' ) ) #NEWLINE#
words . append ( random . sample ( novel , 100 ) ) #NEWLINE#
return { key : tuple ( d [ key ] for d in dicts ) for key in common_keys } #NEWLINE#
return { key : obj . __dict__ } #NEWLINE#
self . tree . grid ( column = 0 , row = 0 , sticky = 'nsew' , in_ = container ) #NEWLINE#
log . warn ( '1234567:#SPACE#replied#SPACE#with#SPACE#{0:d}' . format ( resp . status ) ) #NEWLINE#
import numpy as np #NEWLINE#
print ( 'The#SPACE#source#SPACE#is#SPACE#not#SPACE#in#SPACE#debug#SPACE#mode' ) #NEWLINE#
with io . open ( filename , 'w' , encoding = 'utf8' ) as f : #NEWLINE# #INDENT# f . write ( text ) #NEWLINE#
print ( line , end = '#SPACE#' ) #NEWLINE#
output_set = set ( itertools . chain ( first_list , second_list ) ) #NEWLINE#
return a == b #NEWLINE#
s . bind ( ( '' , PORT ) ) #NEWLINE#
p = np . array ( [ 3 , 2 , 0 , 1 ] ) #NEWLINE#
hist ( x ) #NEWLINE#
si . imgdata = im . tostring ( ) #NEWLINE#
{ { ( game . description | safe | truncatewords ) : 65 } } #NEWLINE#
( date ( 2015 , 10 , 7 ) - date ( 1 , 1 , 1 ) ) . days #NEWLINE#
df = pd . DataFrame ( np . random . randn ( 6 , 4 ) , columns = [ 'ddd' , 'fff' , 'aaa' , 'ppp' ] ) #NEWLINE#
time . sleep ( self . delay ) #NEWLINE#
root = ET . Element ( '{http://www.company.com}STUFF' ) #NEWLINE#
c = signal . fftconvolve ( b , a [ : : - 1 ] , mode = 'valid' ) #NEWLINE#
print ( daily_prices [ 2 ] ) #NEWLINE#
print ( resp . status_code ) #NEWLINE#
print ( 'Usage:#SPACE#%s#SPACE#zipname#SPACE#dirname' % sys . argv [ 0 ] ) #NEWLINE#
globals ( ) [ 'foo' ] = bar #NEWLINE#
parser = etree . XMLParser ( remove_blank_text = True ) #NEWLINE#
currentFile = open ( filename , 'rt' , encoding = 'latin1' ) #NEWLINE#
D = np . array ( [ 1.0 , 2.0 , 3.0 ] ) #NEWLINE#
plt . colorbar ( im , fraction = 0.046 , pad = 0.04 ) #NEWLINE#
return osa . communicate ( ascript ) [ 0 ] #NEWLINE#
leraar = item . split ( '\r\n#SPACE#\n\n' ) [ 1 ] . split ( '\n#SPACE#\n\r\n' ) [ 0 ] #NEWLINE#
velcro . right ( 90 ) #NEWLINE#
( df [ 0 ] - df [ 1 ] ) . apply ( lambda x : x . astype ( 'timedelta64[us]' ) . astype ( 'int' ) ) #NEWLINE#
print ( len ( S1 ) , len ( S2 ) ) #NEWLINE#
x = json2obj ( data ) #NEWLINE#
out [ idx [ : , ( 0 ) ] , idx [ : , ( 1 ) ] ] = vals #NEWLINE#
return QtGui . QWidget . eventFilter ( self , source , event ) #NEWLINE#
from scipy . sparse import csr_matrix #NEWLINE#
ax3 = fig . add_subplot ( 5 , 4 , 3 , sharex = ax1 , sharey = ax1 ) #NEWLINE#
word = numeration + word + ',\n' #NEWLINE#
key = next ( key for key , value in list ( dd . items ( ) ) if value == 'value' ) #NEWLINE#
self . lineedit = QLineEdit ( 'Enter#SPACE#text#SPACE#here,#SPACE#dummy' ) #NEWLINE#
email = self . request . POST . get ( 'password' ) #NEWLINE#
ax . plot ( xval * np . ones_like ( y ) , y , zrow , color = 'black' ) #NEWLINE#
sys . path . insert ( 0 , os . path . abspath ( os . path . dirname ( __file__ ) ) ) #NEWLINE#
return list ( self . __graph_dict . keys ( ) ) #NEWLINE#
res = [ f for f in os . listdir ( path ) if re . search ( '(abc|123|a1b).*\\.txt$' , f ) ] #NEWLINE#
extra_kwargs = { 'phone_number' : { 'required' : True } } #NEWLINE#
values = np . sum ( weights * features + bias ) #NEWLINE#
my_list = [ 1 , 2 , 3 , 4 ] #NEWLINE# for x in my_list : #NEWLINE# #INDENT# for y in my_list : #NEWLINE# #INDENT# #INDENT# foo ( x , y ) #NEWLINE#
s . format ( { 'y' : 2 } ) #NEWLINE#
frame . pack ( ) #NEWLINE#
f_output . write ( file_bytes . read ( ) ) #NEWLINE#
A [ : , ( 1 ) ] *= 5.2 #NEWLINE#
B = np . array ( [ [ 1 , 4 ] , [ 3 , 6 ] , [ 7 , 8 ] ] ) #NEWLINE#
server = smtplib . SMTP ( 'smtp.gmail.com:587' ) #NEWLINE#
unittest . main ( ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
pd . rolling_mean ( pivot , 90 , center = True , min_periods = 1 ) #NEWLINE#
return np . vstack ( ( dst [ idx ] , rows [ idx ] , cols [ idx ] ) ) . T #NEWLINE#
session . add ( h ) #NEWLINE#
print ( 'duplicated#SPACE#%s#SPACE#into#SPACE#%s' % ( oldDB , newDB ) ) #NEWLINE#
audio_array = audio_array . reshape ( ( len ( audio_array ) / 2 , 2 ) ) #NEWLINE#
self . _welu = win32evtlogutil #NEWLINE#
[ 'A' , 'A.1' , 'A.2.2' ] #NEWLINE#
ax . plot ( x , y1 , 'r-' , x , y2 , 'b-' ) #NEWLINE#
with open ( filename , 'r' ) as fobj : #NEWLINE# #INDENT# all_lines = [ [ int ( num ) for num in line . split ( ) ] for line in fobj ] #NEWLINE#
naive = dt . replace ( tzinfo = None ) #NEWLINE#
image . resize ( ( image . height * factor , image . width * factor ) ) #NEWLINE#
self . data . config ( yscrollcommand = self . scrollbar . set ) #NEWLINE#
ax = plt . gca ( ) #NEWLINE#
plt . <VAR0> ( sm ) #NEWLINE#
result . to_csv ( 'Output.csv' ) #NEWLINE#
fig . savefig ( 'gradColorLine.png' ) #NEWLINE# plt . show ( ) #NEWLINE#
self . canvas . configure ( scrollregion = self . canvas . bbox ( 'all' ) ) #NEWLINE#
eval ( "__import__('os').remove('important#SPACE#file')" ) #NEWLINE# eval ( '9**9**9**9**9**9**9**9' , { '__builtins__' : None } ) #NEWLINE#
script = sys . argv [ 0 ] #NEWLINE#
values = [ is_prime ( x ) for x in PRIMES ] #NEWLINE#
print ( df ) #NEWLINE#
distance = [ [ [ ( 0 ) for k in range ( n ) ] for j in range ( n ) ] for i in range ( n ) ] #NEWLINE#
global cake #NEWLINE#
global myglobal #NEWLINE#
callable ( fn ) #NEWLINE#
sys . exit ( 0 ) #NEWLINE#
client . execute ( "LOAD#SPACE#TABLE#SPACE#LOCAL#SPACE#INPATH#SPACE#'/path'#SPACE#INTO#SPACE#TABLE#SPACE#r" ) #NEWLINE#
client . execute ( 'CREATE#SPACE#TABLE#SPACE#r(a#SPACE#STRING,#SPACE#b#SPACE#INT,#SPACE#c#SPACE#DOUBLE)' ) #NEWLINE#
browser = webdriver . Firefox ( ) #NEWLINE#
func ( * args ) #NEWLINE#
cookies [ 'cookie2' ] = 'Chocolate#SPACE#Chips' #NEWLINE#
rdf = df . stack ( [ 'First' , 'Third' ] ) #NEWLINE#
request . POST . get ( 'MAINS' , '' ) #NEWLINE#
ax . plot ( vertices [ : , ( 0 ) ] , vertices [ : , ( 1 ) ] , 'k-' ) #NEWLINE#
class MySerializer ( serializers . ModelSerializer ) : #NEWLINE# #INDENT# pass #NEWLINE#
a = ma . masked_array ( [ 0 , 1 , 2 , 3 ] , [ True , False , False , False ] ) #NEWLINE#
[ ',' . join ( map ( str , comb ) ) for comb in combinations ( L , 3 ) ] #NEWLINE#
pprint . pprint ( list ( collection . aggregate ( pipeline = pipeline ) ) ) #NEWLINE#
list ( x ) #NEWLINE#
print ( readline . get_history_item ( i + 1 ) ) #NEWLINE#
HTML ( "Foo#SPACE#Bar#SPACE#<br>#SPACE#<img#SPACE#src='%s'>#SPACE#<br>#SPACE#Baz" % image_data ) #NEWLINE#
self . frame . Show ( True ) #NEWLINE#
self . call ( 'print' , socket . gethostname ( ) , 'is#SPACE#here.' ) #NEWLINE#
self . call ( 'print' , socket . gethostname ( ) , 'just#SPACE#exited.' ) #NEWLINE#
df . columns = [ 'a' , 'b' ] #NEWLINE#
from funcy import pluck #NEWLINE#
str ( name ) + "'s#SPACE#interest#SPACE#receivable#SPACE#-#SPACE#" + str ( closingStock ) #NEWLINE#
roles = db . relationship ( 'Role' , secondary = 'user_roles' , backref = db . backref ( #NEWLINE# 'users' ) ) #NEWLINE#
ax . set_xticklabels ( labels , rotation = 20 , horizontalalignment = 'right' ) #NEWLINE#
self . queue . append ( data ) #NEWLINE#
np . vstack ( [ np . kron ( A [ : , ( i ) ] , B [ ( i ) , : ] ) for i in range ( 3 ) ] ) #NEWLINE#
print ( a , b ) #NEWLINE#
chars . extend ( line ) #NEWLINE#
file = jpgs [ - 1 ] #NEWLINE#
z = request . GET . copy ( ) #NEWLINE# del z [ 'a' ] #NEWLINE#
sleep ( 1 ) #NEWLINE#
column_label . show ( ) #NEWLINE#
requests . get ( 'http://localhost:8080/_ah/...' ) #NEWLINE#
res0 . remove ( element ) #NEWLINE#
s = 'aa' #NEWLINE#
print ( '' . my_method ( ) ) #NEWLINE#
level_0 = pd . Series ( df . columns . levels [ 0 ] [ df . columns . labels [ 0 ] ] ) #NEWLINE#
x = session . query ( Foo ) . all ( ) #NEWLINE#
Employee . __init__ ( self , name , salary ) #NEWLINE#
frm . pack ( fill = 'both' , expand = True ) #NEWLINE#
list ( filter ( filterfunc , l1 ) ) #NEWLINE#
return json . dumps ( { 'selected#SPACE#post' : str ( post ) } ) #NEWLINE#
return recursion ( 0 , 0 ) #NEWLINE#
dict ( zip ( student_names , average_of_all_assignments ) ) #NEWLINE#
t . start ( ) #NEWLINE#
self . log ( 'Bad#SPACE#times#SPACE#:(' ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
sum ( [ True , True , False ] , False ) #NEWLINE#
print ( 'unable#SPACE#to#SPACE#connect' ) #NEWLINE#
print ( grouped . reset_index ( ) . to_dict ( 'records' ) ) #NEWLINE#
sys . getsizeof ( [ 1 , 2 , 3 ] ) #NEWLINE#
format ( value , '08b' ) #NEWLINE#
705.0 , 690.0 , 705.0 , 680.0 , 715.0 , 705.0 , 670.0 , 705.0 , 705.0 , 650.0 #NEWLINE#
725.0 , 725.0 , 650.0 , 650.0 , 650.0 , 714.0 , 740.0 , 710.0 , 717.0 , 737.0 #NEWLINE#
afield = forms . ChoiceField ( choices = INITIAL_CHOICES ) #NEWLINE#
a = df [ 'A' ] > 0 #NEWLINE#
screen . fill ( ( 255 , 0 , 0 ) , ( self . x , self . y , 10 , 10 ) ) #NEWLINE#
parser . add_argument ( 'positionals' , nargs = '+' ) #NEWLINE#
draw = ImageDraw . Draw ( image ) #NEWLINE#
list ( reversed ( [ i [ 0 ] for i in l [ 1 : - 1 ] ] ) ) #NEWLINE#
debussy = int ( os . environ . get ( 'DEBUSSY' , '-1' ) ) #NEWLINE#
f ( a , b ) . A #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] #NEWLINE#
control_char_re = re . compile ( '[%s]' % re . escape ( control_chars ) ) #NEWLINE#
"""foobar42""" . isalpha ( ) #NEWLINE#
list . append ( map ( itemgetter ( 1 ) , g ) ) #NEWLINE#
self . label . pack ( padx = 10 , pady = 10 ) #NEWLINE#
print ( 'Lock#SPACE#acquired.' ) #NEWLINE#
input ( 'Hello#SPACE#%r,#SPACE#what#SPACE#is#SPACE#your#SPACE#age?#SPACE#' ) % firstname #NEWLINE#
q = Ticket . objects . extra ( select = { 'is_top' : 'status#SPACE#=#SPACE#4' } ) #NEWLINE# q = q . extra ( order_by = [ '-is_top' ] ) #NEWLINE#
df [ 'm' ] = pd . Categorical ( df [ 'm' ] , [ 'March' , 'April' , 'Dec' ] ) #NEWLINE# df #NEWLINE#
{ '1' : 'a' , '3' : 'c' , '2' : 'b' } #NEWLINE#
l1 = [ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
print ( 'Hey#SPACE#%(crowd)s!#SPACE#Would#SPACE#you#SPACE#like#SPACE#some#SPACE#%(fruits)?' % { 'crowd' : 'World' , #NEWLINE# 'fruit' : 'Pear' } ) #NEWLINE#
f = urllib . request . urlopen ( 'http://example.com/foo/bar' ) #NEWLINE# s = f . read ( ) #NEWLINE#

print ( 'sum#SPACE#of#SPACE#' + repr ( a ) + '#SPACE#and#SPACE#' + repr ( b ) + '#SPACE#is#SPACE#' + repr ( c ) ) #NEWLINE#
cursor . execute ( SQL ) #NEWLINE#
print ( df . reindex ( idx ) ) #NEWLINE#
np . allclose ( B . todense ( ) , B2 . T ) #NEWLINE#
return response #NEWLINE#
del elem . getparent ( ) [ 0 ] #NEWLINE#
[ list ( i ) for i in zip ( * theArray ) ] #NEWLINE#
fig = pl . figure ( ) #NEWLINE#
return getattr ( self , '_' + attr ) #NEWLINE#
G . add_path ( [ 0 , 2 , 5 ] ) #NEWLINE#
redis_url = os . getenv ( 'REDISTOGO_URL' , 'redis://localhost:6379' ) #NEWLINE#
my_class = getattr ( module , 'MyClass' ) #NEWLINE#
df = pd . DataFrame ( [ [ 1 , 2 ] , [ 2 , 4 ] , [ 3 , 8 ] ] , columns = [ 'x' , 'y' ] ) #NEWLINE#
r . set_response_callback ( 'HMGET' , lambda l : [ float ( i ) for i in l ] ) #NEWLINE#
print ( authenticate ( username = 'ea87' , password = 'wrong#SPACE#password' ) ) #NEWLINE#
scrollbar . pack ( side = 'right' , fill = 'y' , expand = False ) #NEWLINE#
sc = SparkContext ( appName = 'test' ) #NEWLINE#
my_new_field = forms . IntegerField ( initial = 1 , label = 'quantity' ) #NEWLINE#
logger . debug ( 'test' ) #NEWLINE#
self . Wt = np . squeeze ( getattr ( Wt , 'A' , Wt ) ) #NEWLINE#
plt . show ( ) #NEWLINE#
pass #NEWLINE#
dt = datetime . datetime . fromtimestamp ( float ( datestring ) ) #NEWLINE#
print ( response . headers ) #NEWLINE#
words = '' . join ( c if c . isalnum ( ) else '#SPACE#' for c in s ) . split ( ) #NEWLINE#
m = re . match ( 'Abc#SPACE#In.' , s ) #NEWLINE#
m = re . match ( 'Abc#SPACE#In(.)?' , s ) #NEWLINE#
driver . execute_script ( 'window.scrollTo(0,#SPACE#document.body.scrollHeight);' ) #NEWLINE#
corners = np . array ( [ [ 0 , 0 ] , [ 1 , 0 ] , [ 0.5 , np . sqrt ( 3 ) * 0.5 ] ] ) #NEWLINE#
return func ( xy [ 0 ] , xy [ 1 ] , data ) #NEWLINE#
panel . pack ( side = 'bottom' , fill = 'both' , expand = 'yes' ) #NEWLINE#
print ( str ( i ) ) #NEWLINE#
module_name = inspect . getmodule ( s [ 1 ] [ 0 ] ) . __name__ #NEWLINE#
sorted_files . append ( f ) #NEWLINE#
return json . loads ( value ) #NEWLINE#
c , d = np . meshgrid ( a , b ) #NEWLINE#
"""^A[0-9A-Za-z_-]+Z$""" #NEWLINE#
from django . core . files import File #NEWLINE#
return collections . defaultdict ( nested_dict ) #NEWLINE#
print ( mystring [ 2 : 3 ] ) #NEWLINE#
args = parser . parse_args ( ) #NEWLINE#
response . headers [ 'Content-Disposition' ] = 'attachment;#SPACE#filename=outbound.txt' #NEWLINE#
leg = ax . legend ( ) #NEWLINE#
c = reportlab . pdfgen . canvas . Canvas ( 'test.pdf' ) #NEWLINE#
UNIQ = '_UNIQUE_STRING_' #NEWLINE#
hash_md5 . update ( chunk ) #NEWLINE#
l2 = set ( [ 't1' , 't4' ] ) #NEWLINE#
pyplot . ylim ( ymin = 0 ) #NEWLINE#
pass #NEWLINE#
raise ValidationError ( 'Spaces#SPACE#not#SPACE#allowed' ) #NEWLINE#
speechSynthesizer . startSpeakingString_ ( 'Hi!#SPACE#Nice#SPACE#to#SPACE#meet#SPACE#you!' ) #NEWLINE#
layout = QtGui . QHBoxLayout ( self ) #NEWLINE#
pool . join ( ) #NEWLINE#
response = urllib . request . urlopen ( req ) #NEWLINE#
dateTimeCompleted = models . DateTimeField ( null = True ) #NEWLINE#
lst = [ '工' , '工' ] #NEWLINE#
server . set_debuglevel ( 1 ) #NEWLINE#
from kivy . uix . button import Button #NEWLINE#
return self . fn ( * args , ** kwargs ) #NEWLINE#
x . loc [ ( x . A >= 2.0 ) & ( x . A <= 4.0 ) ] #NEWLINE#
np . all ( a == a . T ) #NEWLINE#
- 1 if not a or a . isspace ( ) else a . index ( a . lstrip ( ) [ 0 ] ) #NEWLINE#
print ( p . sub ( '\\\\\\1' , mystring ) ) #NEWLINE#
super ( ) . __init__ ( * args , ** kvps ) #NEWLINE#
count [ letter ] = 1 #NEWLINE#
thefile . seek ( 0 , 2 ) #NEWLINE#
open ( '/Users/test/Documents/test' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
wb = open_workbook ( 'tmp.xls' , formatting_info = True ) #NEWLINE#
opener = urllib . request . build_opener ( handler ) #NEWLINE#
print ( 'default' ) #NEWLINE#
l = [ ( 'text-1' , 'xxx' ) , ( 'img-1' , 'iii' ) , ( 'img-2' , 'jjj' ) , ( 'text-2' , 'xxx' ) ] #NEWLINE#
r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' ) ) #NEWLINE#
import numpy as np #NEWLINE#
cursor = db . cursor ( ) #NEWLINE#
os . system ( quote ( BINARY ) + '#SPACE#<#SPACE#nul' ) #NEWLINE#
foo [ somestuff ] #NEWLINE#
dict1 . items ( ) ^ dict2 . items ( ) #NEWLINE#
"""#SPACE#Custom#SPACE#filters#SPACE#are#SPACE#loaded#SPACE#by#SPACE#FilterModule#SPACE#objects#SPACE#""" #NEWLINE#
stdv . reset ( ) #NEWLINE#
key = models . PositiveIntegerField ( ) #NEWLINE#
Y = df . filter ( regex = '_y' ) #NEWLINE#
grey_image = cv . CreateImage ( cv . GetSize ( frame ) , cv . IPL_DEPTH_8U , 1 ) #NEWLINE#
shutil . rmtree ( dir ) #NEWLINE#
utc_seconds = time . mktime ( t . timetuple ( ) ) #NEWLINE#
self . update_status ( 'connecting...' ) #NEWLINE#
arr = np . array ( [ 1 , 1 , 2 , 3 , 3 , 3 ] ) #NEWLINE# mapping [ arr ] #NEWLINE#
return lst [ ( len ( lst ) + 1 ) / 2 - 1 ] #NEWLINE#
plt . figure ( ) #NEWLINE#
return a [ x ] + a [ y ] #NEWLINE#
chars = '\\u4132' . encode ( 'utf-16be' ) #NEWLINE#
stmt2 = '123#SPACE#is#SPACE#True#SPACE#or#SPACE#123#SPACE#is#SPACE#False' #NEWLINE#
dfB = pd . DataFrame ( { 'X' : [ 1 , 2 , 3 ] , 'Y' : [ 1 , 2 , 3 ] , 'Time' : [ 10 , 20 , 30 ] } ) #NEWLINE#
return self . cleaned_data #NEWLINE#
return parser . parse_args ( args ) #NEWLINE#
df . describe ( ) #NEWLINE#
__slots__ = 'a' , 'b' #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
from django . db import models #NEWLINE#
return integrate . quad ( func , a , b , args = ( y , ) ) [ 0 ] #NEWLINE#
fig = plt . gcf ( ) #NEWLINE#
return a + ( b - a ) * self . random ( ) #NEWLINE#
df #NEWLINE#
ax . scatter ( xs , ys , zs , c = c , marker = m ) #NEWLINE#
m = ctypes . c_int ( x . shape [ 0 ] ) #NEWLINE#
plt . show ( ) #NEWLINE#
import Image #NEWLINE#
ni . ifaddresses ( 'eth0' ) [ AF_INET ] [ 0 ] [ 'addr' ] #NEWLINE#
"""A#SPACE#decorator#SPACE#to#SPACE#retry#SPACE#a#SPACE#given#SPACE#function#SPACE#performing#SPACE#db#SPACE#operations.""" #NEWLINE#
self . window . add ( self . image ) #NEWLINE#
ioctl ( fd , USBDEVFS_RESET , 0 ) #NEWLINE#
print ( ( subelem . tag , '#SPACE#-#SPACE#' , subelem . attrib , '#SPACE#-#SPACE#' , subelem . text ) ) #NEWLINE#
zipf . close ( ) #NEWLINE#
np . random . choice ( make_sampling_arr ( n_k ) , m ) #NEWLINE#
params = { 'screen_name' : 'github' , 'include_rts' : 1 , 'count' : 10 } #NEWLINE#
s . send ( tmsg ) #NEWLINE#
f1 = open ( 'Exemplo_1.txt' , 'rU' ) #NEWLINE#
msg . append ( self . __class__ . __name__ + '.<put>' ) #NEWLINE#
pattern = re . compile ( '[^\\w\\s]' , re . U ) #NEWLINE#
df [ 'a' ] * df [ 'b' ] #NEWLINE#
pieces = { 'a' : df1 [ 'a' ] , 'b' : df1 [ 'b' ] , 'c' : df2 } #NEWLINE# df3 = pd . concat ( pieces , axis = 1 ) #NEWLINE#
name = "'.'something" #NEWLINE#
a [ 20 : ] = zip ( * zip ( a [ 20 : ] , itertools . repeat ( 0 ) ) ) [ 1 ] #NEWLINE#
a = np . array ( [ [ 10 , 20 , 30 , 40 , 50 ] , [ 6 , 7 , 8 , 9 , 10 ] ] ) #NEWLINE#
assert max_product ( [ - 1 , - 2 , - 3 , 0 , 2 ] ) == 12 #NEWLINE#
class Report_LocationGroups ( models . Model ) : #NEWLINE# #INDENT# locationgroup = models . ForeignKey ( LocationGroup ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# report = models . ForeignKey ( Report ) #NEWLINE# #NEWLINE# #NEWLINE# class ReportInline ( admin . TabularInline ) : #NEWLINE# #INDENT# model = models . Report_LocationGroups #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# class LocationGroupAdmin ( admin . ModelAdmin ) : #NEWLINE# #INDENT# inlines = ReportInline , #NEWLINE#
s . groupby ( lambda d : d . date ( ) ) . resample ( '30min' ) #NEWLINE#
instance . topping_set . clear ( ) #NEWLINE#
for line in open ( 'myfile.txt' ) : #NEWLINE# #INDENT# line = line . rstrip ( '\n' ) #NEWLINE# process ( line ) #NEWLINE#
with open ( 'inputdata1.txt' ) as inf : #NEWLINE# #INDENT# for line in inf : #NEWLINE# #INDENT# #INDENT# parts = line . split ( ) #NEWLINE# if len ( parts ) > 1 : #NEWLINE# #INDENT# pass #NEWLINE#
plt . title ( '' ) #NEWLINE#
ww . writeframes ( new_frames ) #NEWLINE#
ET . dump ( root ) #NEWLINE#
app . config [ 'CACHE_TYPE' ] = 'null' #NEWLINE# cache . init_app ( app ) #NEWLINE#
[ c , d , f ] #NEWLINE#
s3_connection = boto . connect_s3 ( ) #NEWLINE#
axes . set_xlabel ( 'x#SPACE#(m)' ) #NEWLINE#
now_pacific = now_utc . astimezone ( timezone ( 'US/Pacific' ) ) #NEWLINE#
sys . path . insert ( 0 , os . path . join ( spark_home , 'python/lib/py4j-0.9-src.zip' ) ) #NEWLINE#
{ { mywidget . css ( ) } } #NEWLINE#
form_data = urllib . parse . urlencode ( form_fields , doseq = True ) #NEWLINE#
s1 = 'HELPMEPLZ' #NEWLINE# s2 = 'HELPNEPLX' #NEWLINE# [ i for i in range ( len ( s1 ) ) if s1 [ i ] != s2 [ i ] ] #NEWLINE#
return ConstantFunction ( constant ) #NEWLINE#
words . sort ( ) #NEWLINE#
return sum ( b << k * 8 for k , b in enumerate ( bytes ) ) #NEWLINE#
plt . clf ( ) #NEWLINE#
x . append ( Foo ( ) ) #NEWLINE#
print ( 'Thread#SPACE#finished' ) #NEWLINE#
print ( 'Terminating#SPACE#process' ) #NEWLINE#
df [ 'C' ] = df . groupby ( [ 'PplNum' , 'RoomNum' ] ) . cumcount ( ) + 1 #NEWLINE# df #NEWLINE#
numpy . all ( x > 0 for x in [ 3 , - 1 , 5 ] ) #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
app . listen ( 8888 ) #NEWLINE#
from xml . parsers . expat import ExpatError #NEWLINE#
m . pack ( expand = True , fill = 'x' ) #NEWLINE#
plt . savefig ( 'data.png' , transparent = True ) #NEWLINE#
suffix_array . sort ( key = lambda a : content [ a : ] ) #NEWLINE#
mpl . rc ( 'figure.subplot' , left = 0.2 , right = 0.8 , bottom = 0.2 , top = 0.8 ) #NEWLINE#
raise forms . ValidationError ( 'No#SPACE#image!' ) #NEWLINE#
class List ( list ) : #NEWLINE# #NEWLINE# def push ( self , x ) : #NEWLINE# #INDENT# #INDENT# self . append ( x ) #NEWLINE#
with codecs . open ( 'filename' , 'w' , encoding = 'utf-8' ) as out : #NEWLINE# #INDENT# out . write ( 'some#SPACE#text' ) #NEWLINE#
print ( 'Ok#SPACE#adding#SPACE#%d#SPACE#to#SPACE#numbers#SPACE#set:#SPACE#' % i ) #NEWLINE#
return Maybe ( val ) #NEWLINE#
matrix = matrix [ 0 : 100 , 0 : 80 ] #NEWLINE#
root = etree . parse ( open ( 'tmp.txt' ) ) #NEWLINE#
print ( new_url ) #NEWLINE#
found_extensions . add ( os . path . splitext ( f ) [ - 1 ] ) #NEWLINE#
a = numpy . linspace ( - 1 , 1 , 20 ) #NEWLINE#
u = np . sin ( np . pi * x ) * np . cos ( np . pi * y ) * np . cos ( np . pi * z ) #NEWLINE#
chart . Copy ( ) #NEWLINE#
printf ( 'Hello,#SPACE#world!\n' ) #NEWLINE#
x = theano . shared ( numpy . arange ( 10 ) ) #NEWLINE#
now += timedelta ( minutes = 1 ) #NEWLINE#
from reportlab . platypus import Flowable #NEWLINE#
ranges . append ( ( last_start , offset - 1 , current_set ) ) #NEWLINE#
[ 'a' , 'd' , 'b' , 'c' , 'e' ] #NEWLINE#
[ '000#SPACE#line1\n' , '001#SPACE#line2\n' , '002#SPACE#line3\n' ] #NEWLINE#
my_dict [ key ] = indices #NEWLINE#
"""#SPACE#""" . join ( text_content ) #NEWLINE#
xmlOutput += self . dirToXML ( os . path . join ( root , subdir ) ) #NEWLINE#
def test ( request ) : #NEWLINE# #INDENT# return render_to_response ( 'test.html' , { 's1' : 'dados' , 's2' : 'aprovação' } ) #NEWLINE#
driver = webdriver . Firefox ( ) #NEWLINE#
ax = pl . subplot ( 111 ) #NEWLINE#
random . choice ( sorted ( d , reverse = True , key = d . get ) [ : 3 ] ) #NEWLINE#
wx . Frame . __init__ ( self , None ) #NEWLINE#
a = [ [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 1 , 2 ] , [ 1 , 4 ] , [ 1 , 2 ] ] #NEWLINE# print ( list ( set ( tuple ( i ) for i in a ) ) ) #NEWLINE#
self . __dict__ . update ( name_value_dict ) #NEWLINE#
posixpath . join ( * s . split ( '\\' ) ) #NEWLINE#
status , data = conn . uid ( 'fetch' , fetch_ids , '(BODY.PEEK[])' ) #NEWLINE#
d = { 'A' : [ 'i1' , 'i2' , 'i3' ] , 'B' : [ 'i1' , 'i4' , 'i5' ] , 'C' : [ 'i1' , 'i2' , 'i5' ] } #NEWLINE#
"""FF008000""" #NEWLINE#
win . setWindowFlags ( win . windowFlags ( ) | QtCore . Qt . CustomizeWindowHint ) #NEWLINE#
ndata = np . frombuffer ( data , np . int8 ) #NEWLINE#
super ( ProfileForm , self ) . __init__ ( * args , ** kwargs ) #NEWLINE#
import sys #NEWLINE#
openmode = 'w' if IS_PY2 else 'wt' #NEWLINE#
21.8 , 10.6 , - 37.8 , - 14.2 , 7.6 , - 21.8 , - 8.6 , 1.3 , 6.8 , - 13.3 , 40.9 , - 15.3 , - 10.3 , 41.1 #NEWLINE#
offset_map = SortedDict ( ( item [ 'offset' ] , item [ 'data' ] ) for item in test_data ) #NEWLINE#
return type ( int ( s ) ) #NEWLINE#
[ 0 , 0 , 0 , 17 , 0 , 0 , 0 , 40 , 0 , 0 , 0 , 0 , 0 ] , #NEWLINE#
__init__ . py #NEWLINE#
l = [ 1 , 2 , 3 , 4 , 5 ] #NEWLINE#
app = QtGui . QApplication ( sys . argv ) #NEWLINE#
listWidget . setItemWidget ( item , w ) #NEWLINE#
intersect_range ( [ 1 , 2 , 3 , 7 , 8 , 10 , 15 ] , 5 , 6 ) #NEWLINE#
[ Embed ( source = 'IMAGE-NAME-2' ) ] #NEWLINE#
env = get_environment_from_batch_command ( 'proc1' ) #NEWLINE# subprocess . Popen ( 'proc2' , env = env ) #NEWLINE#
root . geometry ( '600x100' ) #NEWLINE#
sys . stdout . write ( 'h' ) #NEWLINE# sys . stdout . write ( 'm' ) #NEWLINE#
result . update ( dictionary ) #NEWLINE#
time . sleep ( 3 ) #NEWLINE#
corpus . sort ( cmp = locale . strcoll ) #NEWLINE#
items = sorted ( list ( d . items ( ) ) , key = lambda tup : ( tup [ 1 ] [ 'downloads' ] , tup [ 1 #NEWLINE# ] [ 'date' ] ) ) #NEWLINE#
db_table = Table ( 'miranda' , metadata , Column ( 'gene_id' , Integer , #NEWLINE# primary_key = True ) , Column ( 'mature_miRNA' , Integer , primary_key = True ) ) #NEWLINE#
mypad . refresh ( mypad_pos , 0 , 5 , 5 , 10 , 60 ) #NEWLINE#
def __init__ ( self ) : #NEWLINE# #INDENT# super ( otherclass , self ) . __init__ ( ) #NEWLINE#
'.' . join ( filename . split ( '.' ) [ : - 1 ] ) if '.' in filename else filename #NEWLINE#
download ( 'https://raw.githubusercontent.com/biryani/Quacpy/master/auxfun.py' ) #NEWLINE#
info [ 1 ] [ 1 ] == 4 #NEWLINE#
result . append ( '</ul>' ) #NEWLINE#
np . random . seed ( 22 ) #NEWLINE#
request . add_header ( 'User-agent' , 'Mozilla/5.0' ) #NEWLINE#
[ { 'name' : 'name3' , 'name2' : 'name4' , 'name3' : 'name5' } , { 'name' : 'name3' , #NEWLINE# 'name2' : 'name4' , 'name3' : 'name5' } , { 'name' : 'name3' , 'name2' : 'name4' , #NEWLINE# 'name3' : 'name5' } , { 'name' : 'name3' , 'name2' : 'name4' , 'name3' : 'name5' } ] #NEWLINE#
a = s . read ( 'uintle:24' ) #NEWLINE#
df . sort_values ( 'B' , ascending = False ) . drop_duplicates ( 'A' ) . sort_index ( ) #NEWLINE#
l . append ( map ( int , line . split ( ',' ) ) ) #NEWLINE#
write ( '\n<%s%s]]>\n' % ( elem . tag , elem . text ) ) #NEWLINE#
df1 = df . iloc [ : , : - 1 ] #NEWLINE#
session . expunge ( item ) #NEWLINE#
arr [ 'y' ] += 2 #NEWLINE#
list ( unique_everseen ( a , key = set ) ) #NEWLINE#
return hash ( dumps ( data ) ) #NEWLINE#
self . __dict__ . update ( kwds ) #NEWLINE#
sql = 'SELECT#SPACE#*#SPACE#FROM#SPACE#%s' % table #NEWLINE# cursor . execute ( sql ) #NEWLINE#
[ tmp . setdefault ( name , len ( tmp ) ) for name in names ] #NEWLINE#
[ ( 1 , 'Ubuntu' ) , ( 2 , 'Fedora' ) , ( 5 , 'SuSE' ) ] #NEWLINE#
new_points = list ( do_something_with ( x , y , z ) for x , y , z in surface . points ) #NEWLINE#
self . assertAlmostEqual ( em ( 2 , 2 ) , 0.4251 , 4 ) #NEWLINE#
self . assertAlmostEqual ( em ( 2 , 2 ) , 0.5341 , 4 ) #NEWLINE#
list ( b ) #NEWLINE#
item [ 'image_urls' ] = 'http://www.domain.com' + item [ 'image_urls' ] #NEWLINE#
d1 . groupby ( 'ExamenYear' ) . apply ( ZahlOccurence_1 ) #NEWLINE#
z . append ( matchobj . group ( 1 ) ) #NEWLINE#
[ foo ( ) for x in range ( 10 ) ] #NEWLINE#
"""\\[(.*?)\\]""" #NEWLINE#
time . sleep ( 4 ) #NEWLINE#
Alpha ( 'test' , ( 1 , 2 ) ) #NEWLINE#
plt . bar ( list ( range ( 0 , 100 ) ) , x ) #NEWLINE#
fig = pylab . figure ( figsize = ( 12 , 9 ) ) #NEWLINE#
final . append ( str ( seq [ 0 ] ) + '-' + str ( seq [ len ( seq ) - 1 ] ) ) #NEWLINE#
mask = np . ones ( len ( a ) , dtype = bool ) #NEWLINE#
lst = [ ( int ( s ) if s . isdigit ( ) else s ) for s in lst ] #NEWLINE#
sys . stdout = sys . __stdout__ #NEWLINE#
my_string = 'abcd#SPACE#(#SPACE##SPACE#()e(e#SPACE#w#SPACE##SPACE#)f#SPACE#)#SPACE#gh' #NEWLINE# re . sub ( '\\s+(?=[^[\\(]*\\))|((?<=\\()\\s+)' , '' , my_string ) #NEWLINE#
data = 'Â»Ã\x86Â¹Ã»Ã\x8aÃ·' #NEWLINE# data . decode ( 'utf8' ) . encode ( 'latin1' ) . decode ( 'gb2312' ) #NEWLINE# print ( _ ) #NEWLINE#
print ( numpy . __path__ ) #NEWLINE#
__tablename__ = 'forum_quotes' #NEWLINE#
random . shuffle ( some_list_of_stuff ) #NEWLINE#
type ( n ) is int #NEWLINE#
out_data = interleaved . astype ( np . float32 ) . tostring ( ) #NEWLINE#
hwnd = win32gui . FindWindow ( None , 'New#SPACE#file#SPACE#-#SPACE#metapad' ) #NEWLINE#
[ 0 , 0 , 0 , 0 , 0 , 0 , 13 , 0 , 0 , 0 , 13 , 0 , 0 ] , #NEWLINE#
list ( <STR0> . items ( ) ) #NEWLINE#
arr = np . dstack ( ( r , g , b , a ) ) #NEWLINE#
x . update ( [ i ] ) #NEWLINE#
items = html_list . find_elements_by_tag_name ( 'li' ) #NEWLINE#
22.6 , - 26.9 , 9.9 , - 33.4 , - 13.6 , 6.6 , 48.5 , - 3.5 , - 9.9 , - 39.9 , - 28.2 , 20.7 , 7.1 , 15.5 #NEWLINE#
numpy . arange ( a . shape [ 0 ] ) [ numpy . in1d ( a , b ) ] #NEWLINE#
canvas = Tkinter . Canvas ( width = 400 , height = 300 ) #NEWLINE#
parentId = models . ForeignKey ( 'self' ) #NEWLINE#
wr = csv . writer ( resultFile , dialect = 'excel' ) #NEWLINE#
sock . bind ( ( HOST , PORT ) ) #NEWLINE#
subprocess . Popen ( 'python#SPACE#-O#SPACE#game.py' ) #NEWLINE#
sniff ( iface = 'eth0' , prn = http_header , filter = 'tcp#SPACE#port#SPACE#80' ) #NEWLINE#
df = pd . DataFrame ( { 'a' : [ 1 , 2 , np . nan ] , 'b' : [ np . nan , 1 , np . nan ] } ) #NEWLINE#
tck = scipy . interpolate . splrep ( x , y ) #NEWLINE#
datenow = datenow . replace ( hour = 16 , minute = 0 , second = 0 , microsecond = 0 ) #NEWLINE#
f = open ( 'input.txt' , 'r' ) #NEWLINE#
data = pickle . load ( fp ) #NEWLINE#
plt . xlim ( - 2 , 2 ) #NEWLINE#
repeat ( foo , [ 'violets' , 'blue' ] , 4 ) #NEWLINE#
axes [ 0 ] . legend ( ) . set_visible ( False ) #NEWLINE#
playlists = [ i [ 1 ] for i in list ( radio . items ( ) ) ] #NEWLINE#
final_list . append ( i . strip ( ) ) #NEWLINE#
members = [ [ '3' , '5' , '5' , '20' , 'D' ] , [ '2' , '2' , '2' , '30' , 'C' ] ] #NEWLINE#
return 0.5 * ( 1 + tsr . erf ( ( x - mu ) / ( sd * tsr . sqrt ( 2 ) ) ) ) #NEWLINE#
a . extend ( map ( add , lst ) ) #NEWLINE#
print ( [ set ( x ) for x in bodylist ] ) #NEWLINE#
return { 'subsection' : folder , 'base' : base } #NEWLINE#
- __init__ . py #NEWLINE#
new_db . executescript ( query ) #NEWLINE#
self . systemTrayIcon . setIcon ( QtGui . QIcon . fromTheme ( 'face-smile' ) ) #NEWLINE#
print ( line , end = '#SPACE#' ) #NEWLINE#
b = a [ : ] #NEWLINE#
return zip_longest ( * args , fillvalue = fillvalue ) #NEWLINE#
a [ ( labels . view ( np . ndarray ) . ravel ( ) == 1 ) , : ] #NEWLINE#
print ( sys . _getframe ( ) . f_code . co_name ) #NEWLINE#
print ( 'Printing#SPACE#only#SPACE#the#SPACE#traceback#SPACE#above#SPACE#the#SPACE#current#SPACE#stack#SPACE#frame' ) #NEWLINE#
df [ 'pos' ] = group_position ( df [ 'Z' ] , df [ 'A' ] ) #NEWLINE#
soup = BeautifulSoup ( data ) #NEWLINE#
cols = pydf [ [ 1 , 3 , 5 ] ] #NEWLINE#
p . wait ( ) #NEWLINE#
return '' . join ( c for _ , c in restored ) #NEWLINE#
MyObj2 = MyModel . objects . all ( ) [ index2 ] #NEWLINE#
meg . add_argument ( '-a' , '--all' , action = 'store_true' , default = None ) #NEWLINE#
plt . plot ( X , Y1 , lw = 0 ) #NEWLINE#
{ 'string' : '01' } #NEWLINE#
from django . utils . safestring import mark_safe #NEWLINE#
print ( '{:^{width}}|{:^{width}}|{:^{width}}' . format ( * cols , width = longest ) ) #NEWLINE#
import MySQLdb #NEWLINE#
samp_rate , data = scipy . io . wavfile . read ( filename ) #NEWLINE#
out [ : , : , : na ] = a [ : , ( None ) , : ] #NEWLINE#
cax . set_facecolor ( 'black' ) #NEWLINE#
proc = Popen ( [ 'python' , 'test.py' ] , stdout = PIPE ) #NEWLINE#
df . select_dtypes ( include = [ 'float64' ] ) . apply ( your_function ) #NEWLINE#
test_module2 . py #NEWLINE#
set ( [ 1 , 3 ] ) & a #NEWLINE#
client = pymongo . MongoClient ( 'localhost' , 27017 ) #NEWLINE#
a = np . arange ( 9 ) . reshape ( ( 3 , 3 ) ) #NEWLINE#
""",#SPACE#""" . join ( next ( zip_longest ( * ( [ iter ( L ) ] * 4 ) , fillvalue = 'x' ) ) ) #NEWLINE#
plt . pause ( 1e-09 ) #NEWLINE#
draw = ImageDraw . Draw ( circle ) #NEWLINE#
timeit ( lambda : list ( assignments ( 12 , 5 ) ) , number = 1 ) #NEWLINE#
label1 . pack ( ) #NEWLINE#
sns . pointplot ( ax = ax , x = x_col , y = y_col , data = df2 , color = 'green' ) #NEWLINE#
l1 = [ 1 , 2 , 3 ] #NEWLINE#
[ ( 1 , 2 ) , ( 3 , 4 ) ] #NEWLINE#
model . add ( Activation ( 'softmax' ) ) #NEWLINE#
serversocket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) #NEWLINE#
file_handler . setLevel ( logging . DEBUG ) #NEWLINE#
sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) #NEWLINE# sock . sendto ( 'hello' , 0 , ( '127.0.0.1' , 7131 ) ) #NEWLINE#
foo ( nonsene = True , blather = False ) #NEWLINE#
byweekday = byweekday , byhour = byhour , byminute = byminute , bysecond #NEWLINE#
print ( df . groupby ( [ df . date . dt . weekday_name , df . date . dt . hour ] ) [ 'a' ] . sum ( ) ) #NEWLINE#
ax . set_xlim ( 0 , 5 ) #NEWLINE#
return os . path . splitext ( fn ) [ 1 ] != ext #NEWLINE#
print ( 'Knock#SPACE#knock.' ) #NEWLINE#
a [ i , j ] #NEWLINE#
from tkinter import * #NEWLINE#
dfs = pd . concat ( df_list ) #NEWLINE#
writer = csv . writer ( f2 , delimiter = ';' ) #NEWLINE#
x = { 'x1' : 1 , 'x2' : 2 , 'x3' : 3 } #NEWLINE# y = { 'y1' : 1 , 'y2' : 2 , 'y3' : 3 } #NEWLINE# z = dict ( list ( x . items ( ) ) + list ( y . items ( ) ) ) #NEWLINE# print ( z ) #NEWLINE#
parser . add_argument ( 'filter_length' , nargs = '*' , action = TimeDeltaAction ) #NEWLINE#
self . stext = wx . StaticText ( self , - 1 , 'Filter:#SPACE#' , style = wx . ALIGN_LEFT ) #NEWLINE#
text_link = soup . new_tag ( 'a' , href = '#' ) #NEWLINE# text_link . string = text #NEWLINE#
'closed' , { 'position' : 5 , 'status_for' : 'dev' } #NEWLINE#
"""http://stackoverflow.com/""" #NEWLINE#
t = s . split ( '.' ) #NEWLINE#
"""file_{}.dat""" . format ( i ) #NEWLINE#
np . random . seed ( 0 ) #NEWLINE#
user = User . objects . get ( pk = uid ) #NEWLINE#
cv2 . waitKey ( 1000 ) #NEWLINE#
con = pyodbc . connect ( 'DRIVER={};DBQ={};PWD={}' . format ( DRV , MDB , PWD ) ) #NEWLINE#
'azfjndwhkqgmtyeb' , 'o' #NEWLINE#
ops [ '+' ] ( 1 , 2 ) #NEWLINE#
delete_keys_from_dict ( v , lst_keys ) #NEWLINE#
tk . Tk . __init__ ( self ) #NEWLINE#
from package import module #NEWLINE#
buf = struct . pack ( '%sf' % len ( floatlist ) , * floatlist ) #NEWLINE#
ax . axis [ direction ] . set_visible ( True ) #NEWLINE#
setup ( name = 'App' , data_files = [ ( '.' , 'foo.dll' ) , ( '.' , 'bar.dll' ) ] , options = #NEWLINE# { 'py2exe' : { 'includes' : 'module1,module2,module3' } } ) #NEWLINE#
statuses = [ a . wait ( ) , b . wait ( ) ] #NEWLINE#
search = np . array ( [ 1 , 2 ] , dtype = e . dtype ) . view ( dt ) #NEWLINE#
ranges . append ( ( 32 , 10032 ) ) #NEWLINE#
def anti_vowel ( text ) : #NEWLINE# """""" #INDENT# . join ( c for c in text if c not in 'aeiouAEIOU' ) #NEWLINE#
return [ y for y in x . split ( ) if len ( y ) > 2 ] #NEWLINE#
nx . write_dot ( G , 'test.dot' ) #NEWLINE#
args = vars ( parser . parse_args ( ) ) #NEWLINE#
time . sleep ( 1 ) #NEWLINE#
pass #NEWLINE#
m = memmapfile ( 'my_array.dat' , 'Format' , 'double' , 'Writable' , true ) #NEWLINE#
form . fields [ 'your_name' ] = 'Morphit' #NEWLINE#
a . take ( ( 1 , ) , axis = 1 ) #NEWLINE#
lambda : self . __class__ . spam . fset ( self , 'Ouch' ) #NEWLINE#
[ 3 , 1 , 5 , 0 ] #NEWLINE#
function ( filename ) #NEWLINE#
a = array ( [ 1 , 2 , 3 , 4 , 5 ] ) #NEWLINE#
os . startfile ( filepath ) #NEWLINE#
plt . title ( 'Clipped#SPACE#Array' ) #NEWLINE#
savefig ( 'plt.png' ) #NEWLINE#
l = [ [ 1 , 3 ] , [ 23 , 4 ] , [ 13 , 45 , 6 ] , [ 8 , 3 ] , [ 44 , 33 , 12 ] ] #NEWLINE#
roots . append ( line [ line . index ( '!~' ) + 2 : line . index ( '#SPACE#' ) ] ) #NEWLINE#
self . _tunnel ( ) #NEWLINE#
writer = csv . writer ( f ) #NEWLINE#
hxs . select ( '//div' ) . extract ( ) #NEWLINE#
return encode ( "'%s'" % x ) #NEWLINE#
BeautifulSoup ( badString , markupMassage = myNewMassage ) #NEWLINE#
result . append ( elem ) #NEWLINE#
fig = plt . figure ( ) #NEWLINE#
[ ( s [ : key ] + s [ key + 1 : ] ) for key , val in enumerate ( s ) if val == 'a' ] #NEWLINE#
idx_pairs [ np . diff ( idx_pairs , axis = 1 ) . argmax ( ) , 0 ] #NEWLINE#
print ( p . match ( input ) . groups ( ) ) #NEWLINE#
"""hello#SPACE#world""" . title ( ) #NEWLINE#
with open ( 'data.txt' ) as f : #NEWLINE# #INDENT# for line in f : #NEWLINE# #INDENT# #INDENT# int_list = [ int ( i ) for i in line . split ( ) ] #NEWLINE# print ( int_list ) #NEWLINE#
setup ( <STR0> = test_requirements , install_requires = [ ] + test_requirements ) #NEWLINE#
dummy_event . wait ( ) #NEWLINE#
datetime . datetime ( 2012 , 1 , 2 , 0 , 0 , 0 ) , #NEWLINE#
zeroMatrix = numpy . zeros ( ( Np , Np ) ) #NEWLINE#
points . append ( ( x , y ) ) #NEWLINE#
some_function ( x = y , z = zz ) #NEWLINE#
hues = np . random . random ( ( 9 , 3 ) ) #NEWLINE#
pickle . loads ( encoded ) #NEWLINE#
jsonify ( x . serialize ( ) ) #NEWLINE#
Config . set ( 'mysql' , 'host' , 'localhost' ) #NEWLINE#
rd = dateutil . relativedelta . relativedelta ( dt2 , dt1 ) #NEWLINE#
Widget . __init__ ( self , parent ) #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 0 ) , ( 2 , 4 , 3 ) , ( 3 , 0 , 4 ) , ( 4 , 3 , 1 ) #NEWLINE#
s = set ( fus_d . keys ( ) ) #NEWLINE#
with open ( 'yourfile.ext' , 'rb' ) as image_file : #NEWLINE# #INDENT# encoded_string = base64 . b64encode ( image_file . read ( ) ) #NEWLINE#
socket . send ( 'connected\n' ) #NEWLINE#
torfile . set_priv ( torinfo . priv ( ) ) #NEWLINE#
b = [ ( 1 if i else 0 ) for i in a ] #NEWLINE#
print ( sum ( 1 for _ in takewhile ( lambda x : x == l [ 0 ] , l ) ) ) #NEWLINE#
q = multiprocessing . Queue ( ) #NEWLINE#
df /= df . max ( ) #NEWLINE#
form . show ( ) #NEWLINE#
super ( ) . __init__ ( ) #NEWLINE#
tk . Tk . __init__ ( self , * args , ** kwargs ) #NEWLINE#
return 'person(%r,%r)' % ( self . name , self . age ) #NEWLINE#
canvas . pack ( side = LEFT , expand = True , fill = BOTH ) #NEWLINE# root . mainloop ( ) #NEWLINE#
return [ sum ( combination , [ ] ) for combination in itertools . product ( * outer ) ] #NEWLINE#
return node #NEWLINE#
article . author = self . request . user #NEWLINE#
print ( '%d#SPACE#+#SPACE#%d#SPACE#=#SPACE#%d' % ( x , y , x + y ) ) #NEWLINE#
a , ( b , c ) = 1 , ( 2 , 3 ) #NEWLINE#
from django . core . cache import cache #NEWLINE#
article . headline_set . all ( ) #NEWLINE#
return data [ tuple ( ind ) ] #NEWLINE#
isinteger ( 1 ) #NEWLINE#
itertools . combinations ( items , 2 ) #NEWLINE#
dfasamplefive = dfa . sample ( n = 5 ) #NEWLINE#
os . environ [ 'DJANGO_SETTINGS_MODULE' ] = 'mysite.settings' #NEWLINE#
server ( ) #NEWLINE#
L [ - 1 ] #NEWLINE#
a = np . array ( [ 'a' , 'b' , 'c' , 'a' , 'b' , 'c' ] ) #NEWLINE#
return np . array ( [ np . bincount ( ii , r ) for r in a . T ] ) . T #NEWLINE#
sys . path . insert ( 0 , os . path . expanduser ( '~/lib' ) ) #NEWLINE#
y = [ [ 'e' ] , [ 'f' ] , [ 'g' ] , [ 'h' ] ] #NEWLINE#
result_queue = multiprocessing . Queue ( ) #NEWLINE#
print ( ( 'sys.argv[0]#SPACE#=' , sys . argv [ 0 ] ) ) #NEWLINE#
L [ : ] = [ x for x in L if d [ x ] == 1 ] #NEWLINE#
def func2 ( ) : #NEWLINE# #INDENT# print ( 'func2:#SPACE#starting' ) #NEWLINE# #INDENT# #NEWLINE# #NEWLINE# for i in range ( 10000000 ) : #NEWLINE# #INDENT# pass #NEWLINE# print ( 'func2:#SPACE#finishing' ) #NEWLINE# if __name__ == '__main__' : #NEWLINE# #INDENT# p1 = Process ( target = func1 ) #NEWLINE# p1 . start ( ) #NEWLINE# p2 = Process ( target = func2 ) #NEWLINE# p2 . start ( ) #NEWLINE# p1 . join ( ) #NEWLINE# p2 . join ( ) #NEWLINE#
years_dict [ line [ 0 ] ] = [ line [ 1 ] ] #NEWLINE#
print ( repr ( str ( 'a' ) ) ) #NEWLINE#
"""{:%Y/%m/%d}""" . format ( dt ) #NEWLINE#
import xml . etree . ElementTree as ET #NEWLINE#
w = Gtk . Window ( ) #NEWLINE#
plt . xticks ( numbers , labels ) #NEWLINE#
dict = ast . literal_eval ( dict ) #NEWLINE#
thiselem , nextelem = nextelem , next ( licycle ) #NEWLINE#
os . play ( ) #NEWLINE#
pattern = '^1?$|^(11+?)\\1+$' #NEWLINE#
print ( form . username ) #NEWLINE#
print ( inp . translate ( str . maketrans ( 'AaEeIiOoUu' , 'EeIiOoUuAa' ) ) ) #NEWLINE#
map ( ord , 'Hello,#SPACE#马克' . encode ( 'chinese' ) ) #NEWLINE#
plt . title ( 'This#SPACE#figure#SPACE#will#SPACE#be#SPACE#saved#SPACE#but#SPACE#not#SPACE#shown' ) #NEWLINE#
plt . imshow ( H , extent = extent , interpolation = 'nearest' ) #NEWLINE#
o . writestr ( 'new_file' , 'more#SPACE#data' ) #NEWLINE#
raise TypeError ( 'Vector#SPACE#must#SPACE#be#SPACE#of#SPACE#length#SPACE#3.' ) #NEWLINE#
req = urllib . request . Request ( url ) #NEWLINE#
print ( 'mean:#SPACE#%.5f#SPACE##SPACE#stddev:#SPACE#%.5f' % ( np . mean ( samples ) , np . std ( samples ) ) ) #NEWLINE#
pd . DataFrame ( data ) #NEWLINE# pd . DataFrame ( [ data ] ) #NEWLINE#
v = int ( eval ( input ( 'Enter#SPACE#number#SPACE#to#SPACE#test#SPACE#for#SPACE#vampire:' ) ) ) #NEWLINE#
A . __dict__ [ 'my_attr' ] . decorate #NEWLINE#
array . array ( 'I' , list ( range ( 10 ) ) ) . itemsize #NEWLINE#
B = numpy . array ( A ) #NEWLINE#
Time . insert ( 0 , time ) #NEWLINE#
print ( y , len ( y ) ) #NEWLINE#
df [ 'count' ] = df . groupby ( 'digits' ) [ 'fsq' ] . transform ( len ) #NEWLINE#
sns . boxplot ( x = 'day' , y = 'total_bill' , data = tips , palette = pal ) #NEWLINE#
return 'FLT_{}' . format ( len ( chunks [ 1 ] ) ) #NEWLINE#
print ( conn . sock . getpeercert ( ) ) #NEWLINE#
type ( d ) #NEWLINE#
s . seek ( 0 ) #NEWLINE#
pd . DataFrame ( np . array ( [ [ 2 , 3 , 4 ] ] ) , columns = [ 'A' , 'B' , 'C' ] ) . append ( df , #NEWLINE# ignore_index = True ) #NEWLINE#
pylab . plot ( x ) #NEWLINE#
cookie = { 'enwiki_session' : '17ab96bd8ffbe8ca58a78657a918558' } #NEWLINE#
self . d [ index ] = [ value ] #NEWLINE#
return d + datetime . timedelta ( days_ahead ) #NEWLINE#
id = models . IntegerField ( primary_key = True ) #NEWLINE#
max_value = np . iinfo ( im . dtype ) . max #NEWLINE#
b = a . view ( 'S1' ) . reshape ( len ( a ) , - 1 ) [ : , start : end ] #NEWLINE#
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 } #NEWLINE#
fig . set_size_inches ( 3.54 , 3.54 ) #NEWLINE#
locale . format ( '%.2f' , 1.2333333 ) #NEWLINE#
self . close ( ) #NEWLINE#
f = open ( filename ) #NEWLINE#
tz = pytz . timezone ( 'Europe/Berlin' ) #NEWLINE#
d . setdefault ( m , [ ] ) . append ( k ) #NEWLINE#
with open ( outputfilename , 'wb' ) as outfile : #NEWLINE# #INDENT# json . dump ( row , outfile ) #NEWLINE#
m . getch ( ) #NEWLINE#
logger = logging . getLogger ( 'mything' ) #NEWLINE#
return max ( L [ 0 ] , 0 ) #NEWLINE#
opener = urllib . request . build_opener ( urllib . request . HTTPRedirectHandler ) #NEWLINE#
gen_move ( [ 1 , 3 , 2 , 7 , 6 , 0 , 4 ] ) #NEWLINE#
im = ax . imshow ( data , interpolation = 'none' ) #NEWLINE#
color = { 'white' : '\x1b[1;37m' , 'yellow' : '\x1b[1;33m' , 'off' : '\x1b[0;0m' } #NEWLINE#
"""Float:#SPACE#{0:f}.#SPACE#Repr:#SPACE#{0!r}#SPACE#Str:#SPACE#{0!s}""" . format ( 0.2 + 0.1 ) #NEWLINE#
vars ( ) #NEWLINE#
print ( ( lambda b : Y ) ( num ) ) #NEWLINE#
os . system ( 'stty#SPACE#echo' ) #NEWLINE#
bdist_msi_options = { 'upgrade_code' : '{96a85bac-52af-4019-9e94-3afcc9e1ad0c}' } #NEWLINE#
self . output_box . configure ( state = 'normal' ) #NEWLINE#
t = xml . fromstring ( s ) #NEWLINE#
filter_fields = 'categoria' , 'categoria__titulo' #NEWLINE#
return np . ma . array ( x , mask = ~ bool_arr ) . argmax ( ) #NEWLINE#
ax . add_patch ( patch ) #NEWLINE#
print ( tavnit % tuple ( columns ) ) #NEWLINE#
ax . plot_wireframe ( x , y , z , color = 'k' , rstride = 1 , cstride = 1 ) #NEWLINE#
show ( ) #NEWLINE#
s = 'string' #NEWLINE# s = s [ : : - 1 ] #NEWLINE# print ( s ) #NEWLINE#
shape = np . array ( a . shape ) #NEWLINE#
print ( 'Certs#SPACE#are#SPACE#fine' ) #NEWLINE#
shift3 ( arr , 3 ) #NEWLINE#
shift5 ( arr , 3 ) #NEWLINE#
fh1 = os . open ( 'qq1.junk' , os . O_CREAT , 511 ) #NEWLINE#
s . split ( ')' ) #NEWLINE#
date_str = d . strftime ( '%Y-%m-%d' ) #NEWLINE#
s = 'aaa#SPACE#bbb#SPACE#aaa#SPACE#bbb' #NEWLINE# s [ : : - 1 ] . replace ( 'bbb' , 'xxx' , 1 ) [ : : - 1 ] #NEWLINE#
s = '123123' #NEWLINE# s [ : : - 1 ] . replace ( '2' , 'x' , 1 ) [ : : - 1 ] #NEWLINE#
from google . appengine . ext . webapp . util import run_wsgi_app #NEWLINE#
'T' < 'a' < 't' #NEWLINE#
mystring = '#SPACE#' . join ( map ( str , ( 34.2424 , - 64.2344 , 76.3534 , 45.2344 ) ) ) #NEWLINE#
print ( 'Download#SPACE#successful.' ) #NEWLINE#
L1 = [ 2 , 3 , 4 ] #NEWLINE#
return ( alist [ i : j ] for i , j in pairs ) #NEWLINE#
r . clipboard_append ( 'i#SPACE#can#SPACE#has#SPACE#clipboardz?' ) #NEWLINE#
pathqueue . join ( ) #NEWLINE#
PyMODINIT_FUNC #NEWLINE#
print ( word , 'is#SPACE#non#SPACE#conformant' ) #NEWLINE#
df . loc [ df . event_id == 100 , 'featureX' ] = df #NEWLINE#
root = tree . getroot ( ) #NEWLINE#
return render_template ( 'whatever.html' ) #NEWLINE#
request = requests . get ( url , stream = True ) #NEWLINE#
A = np . random . rand ( 2 , 3 ) #NEWLINE# B = np . random . rand ( 2 , 4 ) #NEWLINE#
set ( c ) . issubset ( set ( a ) ) #NEWLINE#
[ chr ( int ( i ) ) for i in textwrap . wrap ( temp , 3 ) ] #NEWLINE#
httpd = SocketServer . TCPServer ( ( '' , PORT ) , Handler ) #NEWLINE#
numbers = [ int ( w ) for line in lines for w in line . split ( ) ] #NEWLINE#
pass #NEWLINE#
stdout , stderr = p . communicate ( ) #NEWLINE#
print ( "'%s'#SPACE#does#SPACE#not#SPACE#match#SPACE#'%s'" % ( reg , s ) ) #NEWLINE#
sys . path . append ( '/path/to/your/project' ) #NEWLINE#
new_col = sc . parallelize ( np . array ( [ 20 , 20 , 20 , 20 ] ) , n ) . map ( int ) #NEWLINE#
pythoncom . CoInitialize ( ) #NEWLINE#
archive_path = os . path . abspath ( sys . argv [ 0 ] ) #NEWLINE#
parser = argparse . ArgumentParser ( ) #NEWLINE#
print ( 'Client#SPACE#Connection#SPACE#Lost!' ) #NEWLINE#
print ( 'debug:#SPACE#%r' % ( nums , ) ) #NEWLINE#
painter . rotate ( 90 ) #NEWLINE#
print ( 'Zspline:#SPACE##SPACE##SPACE##SPACE#' , avminmax ( Zspline ) ) #NEWLINE#
print ( 'Z:#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' , avminmax ( Zexact ) ) #NEWLINE#
print ( 'Ztri#SPACE#-#SPACE#Z:' , avminmax ( trierr ) ) #NEWLINE#
print ( 'Ztri:#SPACE##SPACE##SPACE##SPACE#' , avminmax ( Ztri ) ) #NEWLINE#
print ( 'Z:#SPACE##SPACE##SPACE##SPACE##SPACE##SPACE##SPACE#' , avminmax ( Zexact ) ) #NEWLINE#
msg = MIMEMultipart ( 'alternative' ) #NEWLINE#
frozenset ( some_item for some_set in some_sets for some_item in some_set ) #NEWLINE#
myDict [ key ] = 20 #NEWLINE#
seen . add ( item ) #NEWLINE#
print ( values [ : , ( 1 ) ] . sum ( ) ) #NEWLINE#
self . handle_request ( ) #NEWLINE#
width = win . winfo_width ( ) #NEWLINE#
option . NPV ( ) #NEWLINE#
key_name = lipis . key ( ) . name ( ) #NEWLINE#
l2 = [ 0 , 2 , 5 , 6 , 8 , 9 ] #NEWLINE#
print ( statlib . __version__ ) #NEWLINE#
reader = csv . reader ( infile , delimiter = ';' ) #NEWLINE#
OrderedDict ( zip ( '123' , 'abc' ) ) #NEWLINE#
p = re . compile ( '\\b(\\w+[.]\\w+)' ) #NEWLINE#
app . config [ 'CORS_HEADERS' ] = 'Content-Type' #NEWLINE#
cs = axs [ 1 ] . contourf ( X , Y , zdata , levels = [ - 1 , 0 , 1 ] ) #NEWLINE#
re . match ( '(?:(\\d+)Y)?(?:(\\d+)M)?' , '5Y3M' ) . groups ( ) #NEWLINE#
tree = ET . fromstring ( xmlstr ) #NEWLINE# tree . remove ( tree . findall ( './/B' ) [ 1 ] ) #NEWLINE#
"""margins#SPACE#of#SPACE#absolutely#SPACE#positioned#SPACE#boxes#SPACE#do#SPACE#not#SPACE#collapse.""" #NEWLINE#
"""win""" #NEWLINE#
{ 'cztery' : 1 , 'dwa' : 2 , 'raz' : 3 , 'trzy' : 2 } #NEWLINE#
FS = np . asanyarray ( map ( lambda x , y : np . convolve ( x , y , 'valid' ) , F , S ) ) #NEWLINE#
divmod ( c . days * 86400 + c . seconds , 60 ) #NEWLINE#
print ( [ x for x in a if x not in b ] + [ x for x in b if x not in a ] ) #NEWLINE# [ { 'c' : '2' } , { 'b' : '2' } ] #NEWLINE#
L1 = [ int ( x ) for x in L1 ] #NEWLINE#
conn . execute ( 'create#SPACE#table#SPACE#test#SPACE#(data#SPACE#integer)' ) #NEWLINE#
a [ : ] #NEWLINE#
QApplication . restoreOverrideCursor ( ) #NEWLINE#
myarray [ x . group ( 1 ) ] = [ x . group ( 2 ) ] #NEWLINE#
l = [ 1 , 2 , 3 , 4 ] #NEWLINE#
ax2 . plot ( pd . Series ( np . random . uniform ( 10 , 20 , size = 10 ) ) , color = 'r' ) #NEWLINE#
do_case0 ( ) #NEWLINE#
self . socket . sendall ( length ) #NEWLINE#
peewee . create_model_tables ( models ) #NEWLINE#
print ( '{source_dt:{fmt}}#SPACE#is#SPACE#{dest_dt:{fmt}}#SPACE#({tzname})' . format ( ** locals ( ) ) ) #NEWLINE#
self . assertEqual ( r . data , 'OK' ) #NEWLINE#
execl ( '/usr/bin/sleep' , 'notsleep' , '60' , NULL ) #NEWLINE#
queue . start ( ) #NEWLINE#
from pymongo import MongoClient #NEWLINE#
yi , zi = np . zeros_like ( xi ) , np . zeros_like ( xi ) #NEWLINE#
help ( CM ) #NEWLINE#
ynew #NEWLINE#
superstrings . add ( s ) #NEWLINE#
matchOCR ( 'Ro?co?e?' , '?flc?pt?' ) #NEWLINE#
'GU' , 'AS' , 'NY' , 'CA' , 'HI' , 'IL' , 'TN' , 'MA' , 'OH' , 'MD' , 'MI' , 'WY' #NEWLINE#
'AK' , 'CT' , 'PR' , 'NM' , 'MS' , 'PW' , 'CO' , 'NJ' , 'FL' , 'MN' , 'VI' , 'NV' #NEWLINE#
setup_logging ( '/tmp/logs' ) #NEWLINE#
a [ 1 ] [ 0 ] = '2' #NEWLINE#
return ( ( key , mydict [ key ] ) for key in mydict ) #NEWLINE#
text = [ 'hanks_NNS#SPACE#sir_VBP' , 'Oh_UH#SPACE#thanks_NNS#SPACE#to_TO#SPACE#remember_VB' ] #NEWLINE#
return profile . options . filter ( id = option_id ) . count ( ) #NEWLINE#
m = re . search ( '(\\d{2}/\\d{2}/\\d{2}#SPACE#\\d+:\\d+[a|p]m)' , line ) #NEWLINE#
stack . pop ( ) #NEWLINE#
np . choose ( m , p_vec ) . sum ( axis = 1 ) #NEWLINE#
dic = { 'i' : { 'Fisher' : - 0.2222222222222222 , '#' : 1 } , 'of' : { 'Fisher' : 2.0 , #NEWLINE# '#' : 1 } , 'will' : { 'Fisher' : 3.5 , '#' : 1 } , 'course' : { 'Fisher' : 4.0 , '#' : 1 } #NEWLINE# } #NEWLINE# sorted ( list ( dic . items ( ) ) , key = lambda x : x [ 1 ] [ 'Fisher' ] , reverse = True ) #NEWLINE#
print ( '{:0>4}-{:0>2}-{:0>2}' . format ( d . year , d . month , d . day ) ) #NEWLINE#
r = re . compile ( '\\w' ) #NEWLINE#
transsurface . set_colorkey ( ( 255 , 0 , 255 ) ) #NEWLINE#
'nzklv' , 'o' #NEWLINE#
'ckpnwqguzyslmjveotxfbadh' , 'f' #NEWLINE#
'xwbujzkicyd' , 'j' #NEWLINE#
'isjckyngxvaofdbeqwutl' , 'n' #NEWLINE#
'wmt' , 'g' #NEWLINE#
'aesyhvmw' , 'q' #NEWLINE#
a = np . array ( [ 1 , 2 , 3 , 4 , 5 , 6 ] ) #NEWLINE#
Y = np . array ( [ 3 , 4 , 5 , 6 ] ) #NEWLINE#
print ( n ** ( 1 / 3 ) ) #NEWLINE#
raise IOError ( "Couldn't#SPACE#open#SPACE#device!" ) #NEWLINE#
B [ : , : ] = v . dot ( A ) #NEWLINE#
a = A [ : , ( j ) ] #NEWLINE#
data = { 'n' : 3 , 'k' : 3.141594 , 'p' : { 'a' : 7 , 'b' : 8 } } #NEWLINE#
'a' , 'x' in 'xerxes' #NEWLINE#
smtp . login ( username , password ) #NEWLINE#
list ( mygrouper ( 3 , list ( range ( 10 ) ) ) ) #NEWLINE#
pool = redis . ConnectionPool ( host = 'localhost' , port = 6379 , db = 0 ) #NEWLINE#
print ( 'File#SPACE#problems!' ) #NEWLINE#
plt . tight_layout ( ) #NEWLINE#
not bool ( condition ) #NEWLINE#
a = np . arange ( 10 ) #NEWLINE# np . random . shuffle ( a ) #NEWLINE# a #NEWLINE#
np . diff ( np . r_ [ 0 , np . where ( np . diff ( data ) != 1 ) [ 0 ] + 1 , data . size ] ) #NEWLINE#
[ [ 1 , 2 , 3 ] , [ 4 , 9 ] ] #NEWLINE#
f . write ( 'Hello\n' ) #NEWLINE#
pl . show ( ) #NEWLINE#
s = set ( fus_d . keys ( ) ) #NEWLINE# s . update ( list ( fus_s . keys ( ) ) ) #NEWLINE# fu_list = [ ( k , fus_d . get ( k ) , fus_s . get ( k ) ) for k in s ] #NEWLINE#
mpl . rcParams [ 'pdf.fonttype' ] = 42 #NEWLINE#
[ 'a' , 'b' , 'c' , 'd' ] #NEWLINE#
"""SELECT#SPACE#1#SPACE#FROM#SPACE#information_schema.tables#SPACE#WHERE#SPACE#table_schema#SPACE#=#SPACE#%s#SPACE#AND#SPACE#table_name#SPACE#=#SPACE#%s""" #NEWLINE#
"""INSERT#SPACE#INTO#SPACE#files(id,#SPACE#orig_filename,#SPACE#file_data)#SPACE#VALUES#SPACE#(DEFAULT,%s,%s)#SPACE#RETURNING#SPACE#id""" #NEWLINE#
ax . set_yticks ( [ - 0.5 , 0.5 ] ) #NEWLINE#
global saber #NEWLINE#
cur = con . cursor ( ) #NEWLINE#
req . add_data ( urllib . parse . urlencode ( kwargs ) ) #NEWLINE#
return 0 if len ( cn ) > 1 and cn [ 0 ] [ 1 ] == cn [ 1 ] [ 1 ] else next ( iter ( cn ) , [ 0 ] ) [ 0 ] #NEWLINE#
[ name for name in os . listdir ( thedir ) if os . path . isdir ( os . path . join ( thedir , #NEWLINE# name ) ) ] #NEWLINE#
p = argparse . ArgumentParser ( ) #NEWLINE# p . add_argument ( '--foo' ) #NEWLINE#
pub_date = models . DateTimeField ( 'Publication#SPACE#Date' ) #NEWLINE#
log . severe ( 'An#SPACE#error#SPACE#message.' ) #NEWLINE#
myvar = 'the#SPACE#answer#SPACE#is#SPACE#' + str ( answer ) #NEWLINE#
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( ) #NEWLINE#
print ( df1 . set_index ( 'bar' ) [ idx ] . reset_index ( ) ) #NEWLINE#
print ( 'Building#SPACE#internam#SPACE#Index#SPACE#for#SPACE#%d#SPACE#tile(s)#SPACE#...' % len ( inputTiles ) , end = '#SPACE#' ) #NEWLINE#
"""Z#SPACE#RD#SPACE#NFEUVIZEX#SPACE#ZW#SPACE#KYVIV#SPACE#ZJ#SPACE#R#SPACE#NRP#SPACE#KF#SPACE#LJV#SPACE#R#SPACE#UZTKZFERIP#SPACE#NZKY#SPACE#GPKYFE#SPACE#KF#SPACE#JVRITY#SPACE#WFI#SPACE#RE#SPACE#VEXCZJY#SPACE#NFIU#SPACE#ZE#SPACE#KYZJ#SPACE#FLKGLK#SPACE#FI#SPACE#TRE#SPACE#Z#SPACE#ZDGIFMV#SPACE#DP#SPACE#TFUV#SPACE#KF#SPACE#FECP#SPACE#GIZEK#SPACE#FLK#SPACE#BEFNE#SPACE#VEXCZJY#SPACE#NFIUJ.#SPACE#RGFCFXZVJ#SPACE#ZW#SPACE#KYZJ#SPACE#YRJ#SPACE#SVVE#SPACE#RJBVU#SPACE#SVWFIV,#SPACE#Z#SPACE#JVRITYVU#SPACE#RIFLEU#SPACE#REU#SPACE#TFLCUE'K#SPACE#JVVD#SPACE#KF#SPACE#WZEU#SPACE#KYV#SPACE#IZXYK#SPACE#KYZEX.""" #NEWLINE#
xls = pd . ExcelFile ( 'path_to_file.xls' ) #NEWLINE#
p = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] ) #NEWLINE# p = np . append ( p , [ 7 , 8 , 9 ] , 1 ) #NEWLINE#
t [ 'a' ] [ 'b' ] [ 'c' ] += 1 #NEWLINE#
return list1 [ : ] #NEWLINE#
( 0 , 1 , 2 ) , ( 1 , 2 , 3 ) , ( 2 , 4 , 0 ) , ( 3 , 0 , 4 ) , ( 4 , 3 , 1 ) #NEWLINE#
a1Note . play ( ) #NEWLINE#
array [ np . abs ( array ) < eps ] = 0 #NEWLINE#
rect = Rectangle ( ( - 1 , - 1 ) , 2 , 2 , facecolor = '#aaaaaa' ) #NEWLINE#
return False #NEWLINE#
isinstance ( var , numbers . Number ) #NEWLINE#
d . get_state ( ) #NEWLINE#
root . mainloop ( ) #NEWLINE#
plt . close ( 'all' ) #NEWLINE#
os . system ( 'sleep#SPACE#5' ) #NEWLINE#
ax = fig . add_subplot ( 111 ) #NEWLINE#
