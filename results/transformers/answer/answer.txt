[
". system ( process . process ( ) ) signal . sigkill )",
". decode ( 'utf8' . . decode ( 'utf8' ) .",
"for item == y == 0 ] == x in mylist ) ==",
"( ' ' . x x ) str ) 2 ) 2 ) )",
"= encode ( 'utf8' 'utf-8' . encode ( 'utf8' )",
"= { k : v for k , v in list ( my_dict ) items ( ) \n\nv is not k )",
"= { ( k k , v ) for k , v in list ) items ( ) \nv is none k )",
". check_output ( [ . shell = true )",
". join ( [ 'a' , 'b' , 'c' , )",
". concat ( level ( level ( level ) ) groupby ( level ( level , ) ) ) )",
"= get ( filename )",
". . . strptime . strptime ( '2013-1-25' . '%d/%m/%y' ) \nstrftime ( )",
". split ( ',' ) .",
". split ( '\n' )",
"= apply ( [ ( e ) + x in b )",
". objects . filter ( ~ . 0 - ] \nexists ( ~",
". sum ( axis = 0 )",
". split ( . , .",
"( ' ' . join ( [ ( str , l ) ) )",
". popen ( [ 'bash' , shell ) shell ) )",
"sleep ( '21/11/06 16:30' , '%d/%m/%y' )",
"= re ( my_string . split ( ',' , '' ) )",
"( ) , strip ( ',' , '' ) )",
". path . find ( 0 ,",
". findall ( '\\w+' , re )",
"= open . 'sample.json' . 'r' ) .",
". request . urlretrieve ( 'http://randomsite.com/file.gz' ) 'file.gz' )",
"= re . request . request ( url )",
"= urllib . read . urlopen ( 'http://www.stackoverflow.com' .",
"= requests . get ( url )",
"= urllib . read ( url , headers ) ';' )",
". add_argument ( '--conf' , nargs = beautifulsoup ) nargs \n'append' )",
"k : v [ 'name' . : k in list . k . 'c' :",
". merge ( df1 , df2 , on = [ 'name' , , how ) [ none ) how ) , ,",
". split ( ',' ) '\n' )",
", none , .",
". run ( debug = true )",
"] dump ( itemlist , '2011-01-31' ( 'file.txt' ) 'r' )",
". t ( t . axis ) t . np 0 , t ) ) \nreshape ) axis , axis )",
". meshgrid ( ( 3 , axis ) axis ) . .",
"join join ( s join join ( ) ) ) - - 1 ] )",
") ( . t ( x . . t ( x , - 1 ) . - x ] ] - - .",
"( x ) x ) for sum ( x > sum ) > sum > j in l ) >",
". unpack ( 'd' , 16 ) pack ( 'hex' ) ) \n0 ]",
". items ( { { ) [ ) [ ) ) k in 3 in list ( [ . items ( ) ) ) )",
". popen ( [ . shell = true )",
"join join ( map , for",
") [ . join ( reversed ( lambda , mylist ) )",
"( range ( range ) range ) 10 ) ) ) )",
"( ' ' . replace ( '1' , '' . . .",
"= split ( [ . split ( ',' ) ) - - - 1 , )",
". now . now ( mynumber . \nstrftime ( '%y-%m-%d %h:%m:%s' )",
". strftime ( '%y-%m-%d %h:%m:%s' ) '%y-%m-%d %h:%m:%s' , strftime ( ) ) '%y-%m-%d %h:%m:%s' )",
", . datetime . now ( ) , datetime . timedelta ( 7 = 1 ) ) \ntimedelta ( 7",
"[ [ [ x [ 0 [ ) row , data ] )",
"] ( t ) columns ] ) _ in range ) ] row , range ( array ( array ) 0 , ) ] ]",
". encode ( uenc . uenc ) c ) )",
"( ( ( , v k ) k , ) d in list for ) for d , list for k ,",
": : v k for k for for k in k for \nk , k for k :",
". get . 1 (",
"] for k , v in mylist ( mylist ( mylist ) if items ( ) ] ] v in ] ]",
". path . insert ( 0 , insert . path . insert ( 0 . insert . insert ( 0 ) ) insert )",
". path . find ( 0 . path . find ( y . find . commonprefix ( y ) , y )",
". execute ( 'insert or replace into master.table1 select * from table1' , ( var1 ) in )",
"] . ( , zip , i . list . .",
"[ append ( [ )",
"[ append ( [ ( [ ) )",
". genfromtxt ( 'test.txt' . 'r' . read . axis ) ',' )",
". to_csv ( 'test.csv' , columns = false ) 'r' . false ) 'r' = none ) 'r' ) none )",
"( x . split [ x , [ - ] for [",
"( re . find ( '/' , x ) ) - ] )",
"] storbinary , filename , ftp , filename ( filename , filename , ,",
") find_elements_by_xpath ( 'window.scrollto(0, document.body.scrollheight);' )",
". arange ( [ 1 , 3 , 4 , , [ 1 , [ , 6 , , ,",
"( [ ) 0 ] - ) 4 ) 0 - ) )",
"in in os . join ( '.' ) : \n pass join . join . join ( join ( : \n pass pass",
"in in subfolders in in in os . walk ( mypath : : \n pass subdirname . os : \n pass pass",
"i ( i ] random . choice . ) for for _ in range ( 0 ) ]",
". strptime . strptime ( ) . strftime ( '%y-%m-%d %h:%m:%s' )",
". engine . 'a' . df2 . execute = x .",
"[ apply = apply [ apply ( '-' )",
"( [ . join ( [ ) join ( [ ( none ) ) k ) range in ) row in itertools ) )",
". drop ( [ ( df . , . mean ( df , axis , true ) \nmean ( df",
". strip ( 'foo' , encode ( size ) encode )",
". replace ( '1' , replace ( 'ignore' , replace )",
". replace ( '1' ,",
"i ( i ) join ( i i i ) for i in l ) ) ] x in l )",
"int . join ( set ( i ) for k in l in for x in l )",
"= [ int ( x ) join ( i i ( i ) for x in l ) ) ] ] x in l )",
". write ( '\n' . join ( '\n' = )",
"] for x in range 'x' ] x ] x ] x ] \nnot ] in x ] not ) in x ]",
"in re . sub ( '\\s+' , text , text )",
". loc ( float ) \napply ) float = 0 )",
". findall ( '\\bis\\b' , re )",
". split ( ' '",
"( re . sub ( 'test(.*)print' , line ) ) group ( 1 , )",
"'filename' 'filename' , 'rb' ) . read ( )",
". strptime . strptime ( '2012-05-29t19:30:03.283z' , '%d/%m/%y' )",
"] ] item , item in queryresult ( item : ] item in 0 ] \n1 ]",
"sub findall ( '[^0-9a-za-z]+' , text , text ) \nfindall ( '\\d+' \nfindall ( )",
"sub sub ( '[^0-9a-za-z]+' , text , text ) \nfindall ( ) \nfindall ( )",
". savefig ( x , y , y ) 'x' =",
". savefig ( x , y , y ) 'x' =",
"for for y in mylist if not ( mylist ) : 3 ]",
"= [ i ] i ] i in range ( 100 ) ]",
"= [ : ] x ] x in range ( 100 ) ]",
". request . find_element_by_xpath ( input[onclick*='1 bedroom deluxe'] ) . click ( name )",
". reset_index ( [ , df2 = [ . .",
"in k ) ) '' )",
"s for split ( ) for x in s ) split ( ',' ) ]",
"not in . path . exists ( ) )",
": \n pass . path . path .",
"in isdigit ( isdigit ( ) ,",
": \n pass . path . path .",
". sub ( '(.)(?=.)' , '' , '' )",
"sub sub ( '\\p{p}+' , '' , join )",
". join ( [ c ) x in zip ) c . split ( ) ] )",
"( soup . find ( 'div' , ) find .",
"= dict ( x x , x , , false ) , x in zip . ,",
". arange ( [ [ , [ ) ,",
". in1d ( a a , b , ,",
". path ( path . \njoin",
"= sort ( - )",
"( l ) .",
"i i for len for values ( 1 ) for for x in l ( l ) )",
"( ( ( ) y ) values ) 1 ) ) for x in l ( l ) )",
"= reverse ( 1 )",
". copy ( 'file.txt' , 'file2.txt' =",
"( x , k , x in x . items ( ) if v == 0 ) ==",
") , k , v in list . items ( ) if 0 != 0 ) ]",
"( x , k , x in list . items ( ) ) v . 0 ) ]",
"= write ( 2 )",
"[ 'a' ] . 'index' . arange ( 'a' [ 'a' , , apply ( axis [ 'b' , , 'c' [ 'c' , )",
"d [ 'key' ]",
". objects . extra ( { = { . { ) . relativedelta ( days = false )",
"] , for [ s for for [ s for for",
"0 x ) x ) ) y , \nreplace ( x ( x )",
": x . index . 0 - 1 ] ) df . mean . 0 , ]",
"( t )",
"( x )",
"= [ ( int , x ) .",
"( update ( the_list , w )",
". groupby [ df [ df [ . .",
". groupby [ : . arange ( x . : , == == .",
"[ index [ ~ ] == true ] . index . mean ( )",
"[ 'value' [ 'value' [ == . groupby . values ( )",
"chdir chdir ( 'chapter3' )",
"in isdigit ( var1 , text var1 ) text )",
"= decode ( 'hex' )",
"= replace ( 'hex' )",
"= replace ( 'hex' )",
"i for split ( 1 ] for re in re . split ( 0 ) len ) ]",
"( plot ( x . plot . reshape ( * , , y . reshape . reshape , * , , y ) 4 )",
"savefig ( list . plot . nlargest , list ) , repeat . reshape . reshape ) ) ) \naxis , axis ) true )",
". find_all ( 'div' , class_ = 'crblock ' ) \nreset_index ) 'div'",
". 1 . 'key' . . apply . get ( '-' , . .",
". groupby ( drop = 0 , axis = true )",
". ] ] . df . apply .",
". groupby ( drop = 0 0 , axis ) ,",
": for 1 - - 1 ] for x in range ]",
". in1d ( a [ ( a , b ) , x , b in a ( a , b ) , )",
". reshape ( [ ( a , reshape ( ) , b ) zip ( ) ) , b = zip ) ) zip ( ) ) zip [ ,",
"join join ( str item ( x ) for i in s ) )",
". post ( url , headers = 'http://httpbin.org/post' . headers = true ) headers = true ) ) headers )",
". replace ( '\n'",
"[ [ 1 [ item in [ 1 , 2 , 3 , ) )",
"x x ) x , , y in 'x' , for for y in d ]",
"( ' ' . path . split ( ' ' . split . split ( '=' ) ) ) '/usr/var' ] )",
"( ( . k for x . 2 + ) i in range ( x , len ( x ) ) len ) ) )",
") [ ( [ 'a' 'a' , 'b' , 'c' , , 'd' 'e' , 'd' , 'd' , ) 'g' 'e' , 'e' , 'e' , ) ) 'e' 'e' )",
". df . df x . df . . ] . . ( df . 'a' ] . df . ] .",
". apply ( '-' 'test' , x , ) '' . false )",
". replace ( ' 'test' ) - , ) '' . ' ' )",
"i i for y ) for x in y in l2 ( l1 . y . 0 ] ] ) if",
"( itertools ( lambda x : x : x [ y ) zip [ 1 x y ] ) y [ 1 ] ] ) )",
"( mystring . split ( mystring ) mystring ) )",
"( mystring . split ( '\\d+' ) mystring ) ) split ( 1 ) )",
", sub ( '<[^>]*>' , '' , mystring )",
". to_datetime ( '1/1/2014' , names = 'm' = 'm' = 'bm' )",
"= [ ( ( [ 2 ] ) [ 3 ) 2 [ ) 3 3 [ 2 ) ) )",
"split ( ' ' , '' )",
". path . abspath ( existgdbpath )",
". join ( re . split ( ' ' )",
". path . split ( filename ) \nfilename ]",
"i ( i ) i i + for for i in v in l ( l ) ]",
". split ( '.com' , '' ) \nsplit ( '\t' )",
". concatenate . concatenate , np . concatenate , none , , ,",
"[ 'a' ] . pd [ 'a' ] .",
"( g . 'key' , ) 'b' , . values ( ) . \n'c' ] \n'c' ) \n'c' ] \n'c' )",
"in x in x in == x in string .",
". listdir ( system ) \nwalk \nisfile . listdir ) '.' ) \nlistdir )",
". execute ( 'user' \n0 ]",
"= [ int ( x [ for x in list . split ( ',' ) ]",
"] ( s . for s in s . split ( ',' ) ]",
"( , , key = lambda x : x x [ 1 , , reverse y [ 1 , , , ,",
", sort ( key = lambda , reverse = true )",
", pop ( key = lambda x : ( . attrb2 ( reverse = true )",
"= items ( key = lambda x : ( [ startswith ( reverse = true )",
". find_element_by_css_selector . find_element_by_css_selector . . find_element_by_css_selector ( )",
". find_element_by_css_selector ( ~ = find_element_by_css_selector ) ) ) , . click ( )",
". find_element_by_css_selector ( find_element_by_css_selector . . find_element_by_css_selector ( )",
"in str ( int )",
". reset_index ( df df ] axis ] )",
", 'file.txt' , 'w' ) . read ( 'file.txt' ) state ( 'file.txt' ) . read ( ) )",
"= sort ( key = lambda x : len ( l [ 1 ] ) , reverse = true )",
"split split ( '\\s+|\\s+' , s )",
") ) ) sub ( '\\d+' ) string ) )",
"t t ( t ) )",
"set set set set ) ) for",
"set set . keys ( set ) )",
". array ( a ) \narray ( a 1 , \nt ( )",
". delete ( [ , \n0 , \ndelete ( )",
"( ' ' . findall ( 's' = true , , split ( 's' ) , split , 1 , ,",
". join ( l i i for x ) for t in l , )",
". join ( [ x x , x x ) 1 , ) reverse ) 1 , ) ) for t in l ) )",
". execute_script ( 'window.scrollto(0, document.body.scrollheight);' )",
"] for i in re , re . findall ( '\\d+' , re . ]",
"[ 'a' , . 'b' df . 'b' , , 1 : \n( 'c' . 'c' ] \n'c' ]",
"list list list items ( ) , ,",
"d d ,",
"( list , items ( ) , ,",
"( str ,",
"( x",
"= int int ( int , x ) for x in x )",
". call ( [ 'shutdown' , )",
". call ( [ 'shutdown' , )",
"] for k in zip ( l1 , l2 ) ] d in zip ]",
". open . encode ( 'utf8' ( .",
"= { . encode ( 'hex' ,",
"open ( open . to_csv , '\t' ( 'utf-8-sig' , 'r' ) ) delimiter = ',' ) )",
"test ) 'w' )",
"( [ ( d ( * , 'name' ] ) d ( d d 1 ) d . items ) * ) ) d ) d ) ) ) ) )",
"( x 0 [ 0 ] for t in zip in for .",
") encode . encode ( {'muffin' : 'lolz', 'foo' : 'kitty'} )",
"] . re in re ] split ( '\n' if re . split ( '\n' ) ]",
"re . sub ( '\\s+' , '' , text ) text = re . sub )",
". delete ( np . arange ( a , a 1 , 3 , 4 , , , replace ( 1 , replace \n, 4 , 1 ,",
". einsum ( a . axis = 0 )",
". . ( [ 'x' , shell ) . ) )",
". . ( [ . . = true )",
". writerow ( )",
". groupby ( 0 . mean ( axis = 0 ) ) axis = 0 )",
". strftime ( '%y-%m-%d %h:%m:%s' ) gmtime ( strftime ) '%y-%m-%d %h:%m:%s' ) )",
", childclass , self , . __init__ , self , ,",
"[ 0 . arange ( 0 [ == 0 , 0 0 , , , 0 , , 1 1 [ 0 ] 1 1 , , ) 0 , .",
". split ( '\\.\\s' , str1 )",
"words words ) words ) key = lambda ) ) for",
"= item ] for 'post code' for for",
"] for strip ( ) for line in open ( 'file.txt' ) ]",
"a { ( v v ) k ) for k , v in a . items ( ) )",
"= open . 'sample.json' . 'r' ) .",
". groupby ( [ 'col5' ) axis ] ) . 0 . . size . ) . size ( )",
"item x = isdigit ( e ) for x , list . if",
"] ] k , val in list ( d . items ( ) if if x = startswith ( ) ) ]",
". dataframe ( df df , t . dataframe , columns , t . dataframe , )",
"( ' ' ) count ( [ ( list , ** , ) )",
"( 'utf8' . decode ( 'utf8' ) ) .",
". encode ( 'utf-8' ) \ndecode ( 'utf-8' )",
". ( . ( ( ( , , ( , . ( . open ,",
". findall ( '\\s+|\\s+' , s )",
"( . . encode ( 'utf8' ) float ) 'utf8' ) )",
". sort ( key = lambda x : ( [ 1 ) ) .",
". split ( key = lambda d : ( . 'name' , ) .",
"= sort ( key = lambda x : x x . 'id' , ) x . 'id' x ) reverse ) 'id' ] ) )",
". nlargest ( range , key ( 10 ( y , ) , key = lambda x : x ( x , 0 + ) 10 ) 0 ] ) ] ]",
". find ( 'div' , 'div' 'a' : find ) )",
". reset_index . df , sep . how = 'bar' . .",
"for re . findall ( s s s , s )",
"set set ( set set ) 1 ] ) set ) for x in l ) ) split ( ) )",
"] , strip ( '\n' ) , line in open .",
"] ] i in len in enumerate ( a ) if len . 1 ]",
"] ] i in len in enumerate ( a ) if len . 1 ]",
"in in enumerate 1 ] i ] len in enumerate ( a ] if len . 1 ] \n-",
"in in enumerate a . i . len in enumerate ( a ) if len . 1 ] : -",
"[ [ [ + i in len in enumerate ( a ) ) len . 1 ] :",
"[ [ [ split ) [ [ )",
": \n return ( '\n' [ split ) '\n' [ )",
"( abs , key = lambda x : ( [ 0 ] ) \n0 ]",
"( enumerate , key = lambda ( 1 ) , , 0 ]",
"sleep sleep ( 1 ,",
". join ( [ ( join , join ( [ . for join * i in l )",
"= { . setdefault ( name , { , debug , { , debug ) { )",
", iter , key x : x x a x , , key . ,",
"( the_list , key = lambda x x x x x x x , x . , .",
") ) i in range i , 2 , 3 ) 4 ) )",
"= [ x . k , v in enumerate ( l ) if elem . in enumerate )",
"= open ( 'sample.json' . 'r' ) .",
"( obj , 'attr_name' )",
"functools , reduce ( reduce ( lambda ( , ( , ( , 1 , ( ( 1 ) ( , ( 1 , 9 , ( 1 ) 9 , , ,",
"( , ( , ( , ( , , ( int int , ( , ( int , ( , ( int ) 9 ) ,",
". 'a' ] \napply ( '-' , '' ) axis = true )",
"( * ( 1 1 , 1 , , 1 1 , 'c' , , ( 1 , 3 , , ( 1 , ( , , ,",
"( * ( 1 1 , 1 , , 1 1 , 'c' , , ( 1 , 3 , , ( 1 , ( , , ,",
"= zip x for x , b in zip ) \nreverse : ) x ) b ) zip )",
"= [ ) ) a , b in zip ) \nb ) ) a , c ) zip )",
"( * ( ( 1 , 1 , , ( 1 , ( , , ( 1 , 3 , , ( 1 , ( , , ( 'c' , ( , ,",
", , , ( ( ( , , 'b' , , 'c' 'b' , 'c' , , 3 'c' , 3 , , 4 'd' , ( , , ( 'd' , 'd' , )",
". loads ( 'a' ( 'foo' . ) .",
"= 'key' ] . { .",
"[ get ( { 'a' : { , )",
"[ get ( { ( { [ [ , [ [",
"[ get ( { [ [ , [",
"enumerate enumerate 0 , range , , i in range , , ,",
"= [ ( int ( 2 ) 2 ) )",
"in re . findall ( '\\s+' ) text )",
". groupby ( [ ) \nvalues ( df x : x ( a ) > 1 )",
"] for x in ins . append ( ) ] not . 0 )",
"= [ ( int , sublist ( int ) ) split ( ) )",
"vf plot ( im = 'size' , color = 'bar' )",
"df df . str ( x . 0 . ) . str ( df ) \nsplit ( ) )",
". findall ( '\\s+|\\s+' , re )",
"( itertools . product ( 1 1 , 2 , 3 , , 4 , , ,",
". now ( ) ) timedelta )",
"in [ [ [ x in zip ] not [ [ :",
"in [ i [ i in zip ] i [",
"httpresponse json data data json data data )",
". findall ( pattern , text )",
". sub ( '\\s+' , str1 )",
". findall ( '#(\\w+)' , str1 )",
". findall ( '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' , re )",
". findall ( '#(\\w+)' , str1 )",
": . replace ( 0 ) \ni in range ]",
". call ( [ '/usr/bin/perl' , shell , ,",
"item [ item for for x in list ]",
"( ( ( ( , d , , d d ] d ) , )",
"[ groupby ( a 1 , 2 ) . apply ( np = 0 ) \nmean ( np ) mean [ 0 , , axis 1 ) )",
"( ' ' . replace ( 'hex' ) \nreplace ( 'hex' , '' )",
". split ( '\t' ) '' )",
". reset_index ( x = 'bar' ) 'm' ) 'bar' )",
": : : : : : + : : : i in range ( v v items ( ) ) )",
"] ] i , j in enumerate [ [ , if not : enumerate == index ) ) ] ] ) enumerate == items ) ) ]",
", , , '' )",
", ) , str )",
") ) ) \n)",
", ) , str )",
", x , str )",
") intersection ( [ ) [",
". append ( [ [",
") append ( a )",
"in in zip . \n pass in append ( [ .",
"[ append ( [ [ ) 0 , , 0 , , [ [ 0 ] , 0 ) , )",
". read [ 'security_register_url' = = 'bar' =",
". concat ( df , dataframe ( ) , columns = true 0 ) axis ) , axis = true ) tolist )",
"] ] x in rows ( len ) x ) ] ] x x 0 ) \n0 ]",
". xaxis ( ax ) nonposy = 45 )",
"sub sub ( '\\.[^.]+$' , '' , s )",
". path . realpath ( os . path . path ( os . path . path ( __file__ ) ) )",
"re re . findall ( re ) re ) )",
". split ( '\\.\\s' , re [",
"split split ( ',' ) '' (",
"= requests . get ( url , headers = line = headers = line = headers = payload )",
"'filename' 'filename' , 'w' ) \nread ) filename )",
"] . item for for k , lst for",
"[ find ( [ ) \nto_dict ( to_dict ) x",
", 2 , 3 )",
"( iter , key = lambda x : ( . itemgetter ( x , 1 ] , reverse ) , reverse = true )",
". xaxis ( ) , .",
". path . exists ( path )",
"( k ) k ) items ( ) ) ) for",
"( ) ( dict_test ( dict_test ) ) items ( ) ) items ( ) ) ) )",
". groupby ( 'id' ) . index ( )",
". dataframe ( [ df , df , , series ( lambda . series ) , axis . 1 , , , axis = 1 )",
"compile sub ( '#(\\w+)' , 'f233op' )",
"( x ) x ( x ) , for item in [ 1 , item , [ 1 , [ , [ , [ , [ , ) str",
". call ( ) 'grep' , ,",
": id ( id id 1 , key ) , ,",
". row ] . tolist ( list = 'index' ) ascending = 'index' 'value' ) ascending ] ascending ] ascending ) ascending ] ascending ] ascending ) )",
"findall findall ( '\\d+' , '$sin (x)$ is an function of x' )",
"my_list my_list ) for",
"l l )",
"s s )",
") ) )",
"my_string my_string )",
". replace ( 'string_escape' )",
"in replace ( 'a' , 'b' ) \nreplace ( 'a' , 'a' , \nreplace ( 'a' 'a' 'c' )",
". split ( path ,",
"[ : ] . df . : . . apply ( lambda x : x [ index , x ,",
"x x , x = lambda : values ) x = true )",
"x x x x , items ( ) ) ) key = lambda x : x [ : ] ) reverse = true )",
". concatenate ( a a . b ) . .",
"( a ( a a , b ) ) axis = 0 )",
"( a ( a a , b ) ) axis = 1 )",
") np . mean [ 0 [ 0 a , ] axis ] \naxis ) 0 a ) ] axis ]",
". in1d ( a a , b ) ,",
"( ' ' . plot . ' ' , args . . .",
"[ set_index , ) ) 'month' = 0 ) inplace ) 0 )",
"user ( user . user = count .",
"= ) ) \n=",
". query ( set , .",
"= index ( key = lambda x : x [ 0 ] , [",
"[ index ( key = lambda x : x x [ : ] ) reverse [ : ] ) reverse [ : ] ) )",
"[ index ( key = lambda x : x x [ : ] ) reverse [ : ] ) )",
". rcparams ( 'foo' , { { 'size' : 2 } 1 ) 4 ) )",
". 'date' ] . apply ( lambda x : x . fillna . x . .",
"for encode ( [ [",
". groupby . groupby [ [ )",
". system ( awk '{print $10, $11}' test.txt > test2.txt )",
". iter ( { key [ ( , )",
"array ]",
"insert ( my_list )",
") write ( 'foo' , 'e' )",
". encode ( '•' , '%d%m%y' ) . encode ( 'utf8' )",
"[ - [ groupby - - 1 ]",
"[ groupby [ : [ : [ . 'foo' ] 'c' [ . unique . 0 ]",
". arange ( [ [ 1 , 2 , 3 , , 4 4 , 5 , 6 , , ,",
"x x )",
"x x )",
"x x )",
"x x )",
"x x )",
"( str ( x ) for",
"* * . chain ( * ( 0 ) ) 0 ) len ) 1 ) )",
"( ' ' join join ( word ) )",
"join join ( [ ,",
"= [ i i for i in zip ( 0 ) ]",
") open : . to_csv ( ) for line in data ( ) : 'r' ) ]",
". join ( [ item , item , '' ) re , 'item' )",
"sub sub ( '\\b(this|string)\\b' , stri , stri )",
"= replace ( '1' ) '' )",
". join ( re x , item , re ] re , '' )",
". drop ( df . [ 0 , . .",
": for y in mylist ] not . startswith ] : ]",
". [ x ( x ) for x in x x",
"int int , string ( int map int ) ) )",
". stdout . write ( '\n' )",
"( x ( x ) 2 ) )",
". path ( 'c:\\users\\uname\\desktop\\python' )",
"in in os . path ( '.' ) \n\n print isfile . path ( stream ) \n\n print print",
"in in subfolders in subfolders in os . walk ( '.' ) : \n print subdirname . os ) \n print print f . walk ( stream ) : \n print print print",
". groupby ( x , 2 )",
"in in range ( 0 , : \n pass i in range ( 0 , , \n pass pass : range : val 100 ) len in \n pass pass \nlen )",
"in in in in range ( [ ) range ) 0 ) ) ) end ) len ( len ) ) )",
", re . line , text ) index ) re )",
"x x ) x , i , x in zip ( x , ) x ) else",
". split ( '\n' . k '\n' ) text ) line ) )",
"i for x in zip ] x in zip zip if y ( x , y ) ] x 1 for ) ]",
"( '\n' . split ( 'utf-8' ) )",
". join ( [ . split ( ',' , 1 ) )",
") ) 2 ] ] ) 3 . 2 ] 3 ] ) . 3 )",
") 0 , 1 ] \nnp ) ) 0 , , ) 2 ) 0 ] 2 ] ) ) 2 ]",
"= [ . open . ) . open ( ) . 'r' = 'utf-8' ) . 'r' = none )",
". reverse ( l , key = lambda ( 1 ) , reverse = true )",
", [ ( l , key = lambda x : x [ reverse , , reverse = true )",
". groupby [ df . df ] . groupby . groupby ( '-' )",
", findall ( '\\bis\\b' , your_string ) \nfindall ( 1 )",
"] ] strip ( '%d%m%y' ] for key in '%d%m%y' . strftime ( '%d%m%y' ] '%d%m%y' ] ]",
". find ( 'hello' ,",
". loads ( open . decode . .",
". request . urlretrieve ( 'http://randomsite.com/file.gz' ) 'file.gz' )",
"split ( text",
". split ( ' ' )",
". strip ( ' '",
"] , sub ( '^((?:(?!cat).)*cat(?:(?!cat).)*)cat' , '' , s ) for i in s if",
"s s , key = lambda x : x . find ( s ) ) 1 ] )",
". call ( ) , call = true )",
"] for sublist in lst if lst ] lst ] lst ) ]",
"] for i in lst if i in ( lst . x ( ]",
". [ ( d . key = lambda d : d . d ] )",
"[ [ ( l , key = lambda ( 0 ) , reverse = true )",
"split ( key = lambda . itemgetter ( 1 ,",
"split ( key = lambda . itemgetter ( 1 1",
". sort ( [ . . sort ( x . sort ( df ) key = [ )",
". join ( [ [ item for , for",
". join ( [ 'a' , 'b' , 'c' , 'd' , )",
". loads ( url . get . get ( url ) )",
"] for y in example if y in . startswith ( '#' ) ] y none . startswith ( '#' ) ]",
". objects . filter ( name = 3 =",
". sort ( key = lambda x : ( x [ 0 item ) item [ 0 item ) )",
", ) datetime . datetime . ( , 1 , 1 , . . date ( 1",
". sub ( '\\b(this|string)\\b' , '\\1' , '\\1' )",
"'\n' .",
". unpack ( 'd' , 16 . unpack ( int , 16 ) )",
"= [ float ( x ) for x in float )",
". to_csv ( 'test.csv' , sep . true )",
"= pd . loads ( open .",
"] i i ) for i in range ( 0 ) if",
"= write ( 'my string\n' . unpack ( '<i' , 'r' line ) )",
"findall findall ( '(\\w)\\1+' , '' , join )",
"( dict . keys ( ) ) [ - 1 ]",
"( '\n' . line . open .",
"= open ( 'filename' , 'r' ) .",
"open as 'file.txt' as 'r' ) as ins :",
". encode ( 'hex' (",
"= objects . filter ( '?' ( [ ( \nfilter ( '?' [ \n0 ]",
"findall findall ( '\\d+' , text )",
"findall findall ( '#(\\w+)' , str1 )",
". system ( zsh -c 'echo $0' ) system )",
"= sort ( key = lambda x : ( [ 1 : , 2 , , ,",
". . . keys . ) . keys . ) .",
". now . now ( ) .",
"iter lst , i , j , lst ( lst ) ) e none ( lst , int ( ) k , 1 )",
": : , \n[ ( x + 1 , for x in a if",
". choice ( open . choice ( '\n' ) )",
"( x , shape ( x , x ) shape ( x , key = lambda (",
", sub ( s , s ) s . sub ) s . sub )",
". findall ( '[bcdfghjklmnpqrstvwxyz]+' , how )",
"split ( ' ' , '' ) \nsplit ( ' ' )",
", filename , 'r' ,",
"] ] ( x ) for item in data ( data data , ] \nitem , data ( ) data , ,",
", : , ( np . array , ]"
]